import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-f8f3dc53"]]),S=JSON.parse('[{"question":"A company wants to keep track of their employees\' working hours by logging the check-in and check-out times. You need to determine the total worked hours for each employee over a given period. -----Input----- The first line contains integer m (1 ≤ m ≤ 10^3) — the number of employees. Each of the following m lines contains: - An integer e (1 ≤ e ≤ 10^5) — the employee ID. - A string t (format \\"YYYY-MM-DD HH:MM:SS\\") indicating the timestamp. - A string s (\\"check-in\\" or \\"check-out\\") indicating the event type. -----Output----- Print m lines: each of them must contain the employee ID followed by the total worked hours (rounded to two decimal places) for that employee. -----Examples----- Input: 3 1 2023-01-01 08:00:00 check-in 1 2023-01-01 16:00:00 check-out 2 2023-01-01 09:30:00 check-in 2 2023-01-01 17:45:00 check-out 3 2023-01-01 10:15:00 check-in 3 2023-01-01 18:30:00 check-out Output: 1 8.00 2 8.25 3 8.25","solution":"from datetime import datetime def calculate_worked_hours(logs): work_log = {} work_hours = {} for entry in logs: employee_id, timestamp, event = entry timestamp = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if event == \\"check-in\\": work_log[employee_id] = timestamp elif event == \\"check-out\\": if employee_id in work_log: check_in_time = work_log.pop(employee_id) worked_time = (timestamp - check_in_time).total_seconds() / 3600.0 if employee_id in work_hours: work_hours[employee_id] += worked_time else: work_hours[employee_id] = worked_time result = [] for employee_id in sorted(work_hours.keys()): result.append(f\\"{employee_id} {work_hours[employee_id]:.2f}\\") return result # Parsing input def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') m = int(data[0]) logs = [] for i in range(1, m + 1): parts = data[i].split() employee_id = int(parts[0]) timestamp = parts[1] + \\" \\" + parts[2] event = parts[3] logs.append((employee_id, timestamp, event)) result = calculate_worked_hours(logs) for line in result: print(line)"},{"question":"You are given a matrix consisting of `n` rows and `m` columns, where each cell either contains a `1` or a `0`. The matrix represents a grid where cells with `1` are considered obstacles, and cells with `0` are traversable. Your task is to determine the size of the largest square (subgrid) that can be formed using only traversable cells (`0`s). Write a function `largestSquare(matrix)` that takes a matrix as input and returns an integer indicating the size (side length) of the largest square consisting entirely of `0`s. -----Input----- - The first line contains two integers `n` and `m` (1 le n, m le 1000), representing the number of rows and columns in the matrix, respectively. - The next `n` lines each contain `m` integers `0` or `1`, representing the cells of the matrix. -----Output----- - Output a single integer, which is the side length of the largest square consisting only of `0`s. -----Examples----- Sample Input 1: 4 5 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 1 1 0 Sample Output 1: 2 Sample Input 2: 3 3 0 0 0 0 0 0 0 0 0 Sample Output 2: 3","solution":"def largestSquare(matrix): if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if matrix[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Bob is training for a marathon and wants to track his daily running distances over a period of days. Each day, he either runs a specific number of kilometers or takes a rest day (runs 0 kilometers). He wants to find out the maximum distance he has run on any single day during this period. Help Bob determine the maximum distance run in a single day. ------ Input Format ------ The first line contains an integer T denoting the number of test cases. Each test case consists of: - The first line contains an integer D, the number of days. - The second line contains D space-separated integers where each integer denotes the distance run on a specific day. A value of 0 indicates a rest day. ------ Output Format ------ For each test case, print a single integer, the maximum distance run on any single day. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ D ≤ 365 0 ≤ text{distance} ≤ 100 ----- Sample Input 1 ------ 2 3 5 0 10 4 0 0 0 0 ----- Sample Output 1 ------ 10 0 ----- Explanation 1 ------ In the first test case, Bob ran 5 kilometers on the first day, 0 kilometers on the second day, and 10 kilometers on the third day. The maximum distance run on any single day is 10 kilometers. In the second test case, Bob took a rest every day, so the maximum distance run on any single day is 0 kilometers.","solution":"def max_distance_per_day(test_cases): Given the number of test cases, and for each test case, the number of days and the distances run each day, this function returns a list of maximum distances run on any single day for each test case. results = [] for case in test_cases: days, distances = case results.append(max(distances)) return results # Example usage # test_cases = [ # (3, [5, 0, 10]), # (4, [0, 0, 0, 0]) # ] # print(max_distance_per_day(test_cases)) # Output: [10, 0]"},{"question":"Task Given a string, s, perform the following actions: If s contains the substring \\"hello\\", print Present If s contains the substring \\"world\\" but does not contain \\"hello\\", print Absent If s contains neither \\"hello\\" nor \\"world\\", print Not Found Input Format A single line containing a string, s. Constraints 1 leq text{length of } s leq 100 Output Format Print Present if the string contains \\"hello\\". If the string does not contain \\"hello\\" but contains \\"world\\", print Absent. If the string contains neither, print Not Found. Sample Input 0 hellothere Sample Output 0 Present Explanation 0 s=hellothere s contains the substring \\"hello\\", so print Present. Sample Input 1 worldofcode Sample Output 1 Absent Explanation 1 s=worldofcode s contains the substring \\"world\\" but not \\"hello\\", so print Absent. Sample Input 2 codingisfun Sample Output 2 Not Found Explanation 2 s=codingisfun s contains neither \\"hello\\" nor \\"world\\", so print Not Found.","solution":"def check_string(s): Prints \\"Present\\" if the string contains \\"hello\\". Prints \\"Absent\\" if the string contains \\"world\\" but does not contain \\"hello\\". Prints \\"Not Found\\" if the string contains neither \\"hello\\" nor \\"world\\". if \\"hello\\" in s: print(\\"Present\\") elif \\"world\\" in s: print(\\"Absent\\") else: print(\\"Not Found\\")"},{"question":"You are given an array of integers which represent the heights of a group of people standing in a line. Find out the number of people who have someone taller than themselves standing to their immediate right. Constraints * 1 ≤ N ≤ 100 * 1 ≤ height_i ≤ 10^9 Input Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Print a single integer representing the number of people who have someone taller standing to their immediate right. Examples Input 5 1 2 3 4 5 Output 4 Input 5 5 4 3 2 1 Output 0","solution":"def count_people_with_taller_right(n, heights): Returns the number of people who have someone taller than themselves standing to their immediate right. count = 0 for i in range(n - 1): if heights[i] < heights[i + 1]: count += 1 return count"},{"question":"You are given a list of unique integers representing the IDs of employees in a company. Each employee has a supervisor except the CEO of the company, who has no supervisor. The supervisor-subordinate relationship is represented as a list of pairs, where each pair comprises two integers, the first one representing the employee, and the second one representing their direct supervisor. For each employee, you need to find the number of direct and indirect subordinates (all levels below) they have. -----Input----- The first line contains an integer N, the number of employees (including the CEO). The next N-1 lines contain two space-separated integers representing the direct supervisor relationship. -----Output----- For each employee ID in ascending order, print the number of subordinates (direct and indirect) they have in a new line. -----Constraints----- - 2 ≤ N ≤ 105 - 1 ≤ employee ID ≤ 109 -----Example----- Input: 5 2 1 3 1 4 2 5 2 Output: 4 2 0 0 0 -----Explanation----- - Employee 1 is the CEO and has four subordinates (2, 3, 4, 5). - Employee 2 has two subordinates (4, 5). - Employee 3 has no subordinates. - Employee 4 has no subordinates. - Employee 5 has no subordinates.","solution":"def find_subordinates(N, relationships): from collections import defaultdict, deque # Build the graph subordinates = defaultdict(list) for employee, supervisor in relationships: subordinates[supervisor].append(employee) # Initialize the count of subordinates for each employee sub_count = {i: 0 for i in range(1, N + 1)} # Function to perform DFS and count subordinates def dfs(employee): count = 0 for sub in subordinates[employee]: count += 1 + dfs(sub) sub_count[employee] = count return count # Finding the CEO (employee with no supervisor) all_ids = set(range(1, N + 1)) supervised_ids = {employee for employee, supervisor in relationships} ceo = list(all_ids - supervised_ids)[0] # Perform DFS starting from the CEO dfs(ceo) # Return the subordinate counts in order of employee ID return [sub_count[i] for i in range(1, N + 1)]"},{"question":"Given an undirected graph with ( N ) nodes and ( M ) edges, you need to identify if there is a cycle present in the graph. A cycle is defined as a path of edges and vertices wherein a vertex is reachable from itself. Write a program that determines if a cycle exists in the graph and prints \\"YES\\" if a cycle exists, and \\"NO\\" otherwise. ------ Input ------ The first line of the input contains a single integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. The first line of each test case contains two space-separated integers ( N ) and ( M ), the number of nodes and edges, respectively. The next ( M ) lines contain two space-separated integers ( u ) and ( v ), representing an undirected edge between nodes ( u ) and ( v ). ------ Output ------ For each test case, print a single line containing \\"YES\\" if there is a cycle in the graph, and \\"NO\\" otherwise. ------ Constraints ------ ( 1 ≤ T ≤ 100 ) ( 1 ≤ N, M ≤ 1000 ) ( 1 ≤ u, v ≤ N ) ------ Subtasks ------ Subtask #1 (20 points): ( N, M ≤ 10 ) Subtask #2 (80 points): original constraints ------ Example Input ------ 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 ------ Example Output ------ YES NO Explanation: - In the first test case, the graph contains a cycle: 1-2-3-4-2. - In the second test case, the graph does not contain any cycle.","solution":"def detect_cycle(N, M, edges): from collections import defaultdict, deque def bfs(start_node, graph, visited): parent = {start_node: -1} queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node queue.append(neighbor) elif parent[node] != neighbor: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = {i: False for i in range(1, N + 1)} for node in range(1, N + 1): if not visited[node]: if bfs(node, graph, visited): return \\"YES\\" return \\"NO\\" def is_cycle_in_graphs(cases): results = [] for case in cases: N, M, edges = case result = detect_cycle(N, M, edges) results.append(result) return results"},{"question":"# Task You are given an array of integers and an integer `k`. Your task is to find the maximum possible sum of any contiguous subarray of the array that has a length of exactly `k`. # Example For `arr = [2, 1, 5, 1, 3, 2]` and `k = 3`, the output should be `9`. The subarray `[5, 1, 3]` has the maximum sum of `9`. For `arr = [2, 1, 5, 1, 3, 2]` and `k = 2`, the output should be `6`. The subarray `[5, 1]` has the maximum sum of `6`. # Input/Output ```if-not:sql - `[input]` integer array `arr` A non-empty array of integers, where `n` is the length of the array. Constraints: `1 ≤ n ≤ 10^5`, `-10^4 ≤ arr[i] ≤ 10^4`. - `[input]` integer `k` An integer `k` representing the length of the subarray. Constraints: `1 ≤ k ≤ n`. - `[output]` an integer The maximum possible sum of any contiguous subarray of length `k`. ``` ```if:sql Input ~~~ ------------------------------------- | Table | Column | Type | |------------+--------------+-------| | subarray | arr | int[] | | | k | int | ------------------------------------- ~~~ # Columns * `arr`: A non-empty array of integers. Constraints: `1 ≤ array length ≤ 10^5`, `-10^4 ≤ integer value ≤ 10^4`. * `k`: An integer representing the length of the subarray. Constraints: `1 ≤ k ≤ length of array`. Output ~~~ ------------------------- | Column | Type | |----------+------------| | max_sum | int | ------------------------- ~~~ `max_sum` is the maximum possible sum of any contiguous subarray of length `k`. ```","solution":"def max_sum_subarray(arr, k): Returns the maximum possible sum of any contiguous subarray of length k. if len(arr) == 0 or k <= 0 or k > len(arr): return 0 # Calculate the sum of first \'k\' elements max_sum = sum(arr[:k]) current_sum = max_sum # Use sliding window to find the maximum sum of subarrays of length k for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alex recently discovered a series of unique time intervals where each interval is represented as a string in the format \\"HH:MM\\". However, Alex noticed that not all intervals were set correctly, and some could be overlapping or within each other. Alex needs to find out how many distinct time intervals are present. Two intervals are considered distinct if there is no overlap between them. Given a list of time intervals, write a program to determine the minimal number of non-overlapping intervals needed to cover all the given intervals. Input The first line contains an integer n, the number of time intervals. The following n lines each contain a time interval in the format \\"HH:MM-HH:MM\\". Output Print a single integer — the minimal number of distinct, non-overlapping intervals. Example Input ``` 3 09:00-11:00 10:30-12:00 12:00-13:00 ``` Output ``` 2 ``` Input ``` 4 09:00-10:30 11:30-13:00 12:00-14:00 15:00-16:30 ``` Output ``` 3 ``` Input ``` 2 18:00-20:00 19:30-21:00 ``` Output ``` 1 ```","solution":"def min_non_overlapping_intervals(intervals): Returns the minimal number of distinct, non-overlapping intervals needed to cover all given intervals. if not intervals: return 0 # Convert each time interval to a tuple of (start, end) in minutes parsed_intervals = [] for interval in intervals: start, end = interval.split(\'-\') start_minutes = int(start[:2]) * 60 + int(start[3:]) end_minutes = int(end[:2]) * 60 + int(end[3:]) parsed_intervals.append((start_minutes, end_minutes)) # Sort intervals by their end times parsed_intervals.sort(key=lambda x: x[1]) count = 0 last_end = -1 for interval in parsed_intervals: if interval[0] >= last_end: count += 1 last_end = interval[1] return count"},{"question":"Given an array of integers nums[] and a target sum k, your task is to find out whether there are any two distinct elements in the array that add up to the target sum k. If such a pair exists, return the two elements as a tuple (a, b) such that a <= b. If there are multiple pairs satisfying the condition, return any one of them. If no such pair exists, return an empty tuple. Example 1: Input: nums[] = {10, 15, 3, 7}, k = 17 Output: (10, 7) Explanation: 10 + 7 = 17 Example 2: Input: nums[] = {1, 2, 3, 4, 5}, k = 9 Output: (4, 5) Explanation: 4 + 5 = 9 Example 3: Input: nums[] = {1, 2, 3, 4, 5}, k = 10 Output: () Explanation: No elements add up to 10 Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function findPair() that takes an array nums and an integer k as parameters and returns a tuple with the two elements or an empty tuple if no such pair exists. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ nums[i] ≤ 10^4 -10^4 ≤ k ≤ 10^4","solution":"def findPair(nums, k): Returns a tuple of two elements from nums that add up to k, or an empty tuple if no such pair exists. seen = set() for num in nums: complement = k - num if complement in seen: return (min(num, complement), max(num, complement)) seen.add(num) return ()"},{"question":"The city park management is planning to install a new type of light display on the park pathways. The lights should form a distinct pattern that depends on a number provided for each section of the pathway. Your task is to help design a program to generate the light display pattern for each given number. -----Input:----- - The first line will contain T, the number of sections in the pathway. Each section is tested individually. - Each section contains a single line of input, one integer N, which represents the length of the pathway for the section. -----Output:----- For each section, output the light display pattern. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 1 3 5 -----Sample Output:----- * ** * ** *** * ** *** **** ***** -----EXPLANATION:----- The pattern starts with a single \\"*\\", and for each subsequent line, add another \\"*\\" until the line number reaches N. The pattern restarts for each new section.","solution":"def generate_light_display_pattern(N): Generate the light display pattern for a given length N. Parameters: N (int): the length of the light display section. Returns: str: the light display pattern. pattern = \\"\\" for i in range(1, N + 1): pattern += \'*\' * i + \'n\' return pattern.strip() def main(T, sections): Process multiple sections to generate the light display patterns. Parameters: T (int): the number of sections. sections (list of int): list containing the length of each section. Returns: list of str: list of patterns for each section. results = [] for N in sections: results.append(generate_light_display_pattern(N)) return results"},{"question":"Polycarp is learning a new form of chess. In this game, there are n pieces of chess in a straight line, each occupying a distinct position from 1 to n. Each piece either moves like a queen, a bishop, or a rook, with the exact movement rules of standard chess for those pieces. Polycarp wants to determine if it\'s possible to move exactly k pieces of chess such that no two pieces attack each other after they have moved. The pieces are initially placed randomly along the line and can be moved to any position along the line between 1 and n. Given that the pieces can move according to their chess rules, determine if it\'s possible to rearrange exactly k pieces in a way that no two pieces attack each other. If it is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of chess pieces and the exact number of pieces to be moved. The next line contains a string of length n consisting of the characters \'Q\', \'B\', or \'R\', where \'Q\' represents a queen, \'B\' a bishop, and \'R\' a rook. Output Print \\"YES\\" if it\'s possible to move exactly k pieces such that no two pieces attack each other. Otherwise, print \\"NO\\". Examples Input 5 3 QQBRB Output YES Input 4 2 QQBB Output NO","solution":"def can_place_pieces_without_attack(n, k, pieces): Determine if it\'s possible to rearrange exactly k pieces such that no two pieces attack each other. Parameters: n (int): The total number of pieces. k (int): The exact number of pieces to rearrange. pieces (str): A string of length n consisting of the characters \'Q\', \'B\', or \'R\'. Returns: str: \\"YES\\" if it\'s possible to move exactly k pieces without any attacking each other, otherwise \\"NO\\". if k <= n: return \\"YES\\" else: return \\"NO\\""},{"question":"Design a function that takes a list of integers and finds the subarray with the maximum sum. A subarray is a contiguous part of an array. Your task is to implement an efficient algorithm to find this subarray and its sum. Input The input consists of two lines. The first line contains a single integer n, the length of the list (1 ≤ n ≤ 100,000). The second line contains n integers representing the elements of the list (each element is between -10^4 and 10^4). Output The output should contain two lines. The first line should contain the maximum sum of a subarray. The second line should contain the starting and ending indices (1-based) of the subarray that gives this maximum sum. If there are multiple subarrays with the maximum sum, return the one with the smallest starting index. If there is still a tie, return the one with the smallest ending index. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 4 7 Input 5 1 2 3 4 5 Output 15 1 5","solution":"def max_subarray_sum(arr): Function to find the subarray with the maximum sum and its indices. Parameters: - arr: List of integers Returns: Tuple containing: - Maximum sum of subarray - Starting and ending indices (1-based) of the subarray n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return max_sum, start + 1, end + 1"},{"question":"You are given a 2D grid of size `n x m` (numbered from `1` to `n` and `1` to `m`). Each cell in the grid contains a value, either `0` or `1`. You are initially placed at the top-left corner of the grid, and your objective is to reach the bottom-right corner. You can only move right or down at each step. A path from the top-left to the bottom-right corner is called \\"alternating\\" if the values in the cells of the path alternate between `0` and `1` consistently. Your task is to determine the minimum number of cell value changes required to make at least one valid alternating path from the top-left to the bottom-right corner of the grid. -----Input----- The first line contains a single integer `t` (`1 ≤ t ≤ 100`) - the number of test cases. The first line of each test case contains two integers `n` and `m` (`2 ≤ n, m ≤ 50`) - the dimensions of the grid. This is followed by `n` lines, each containing `m` integers `a[i][j]` (`0 ≤ a[i][j] ≤ 1`) representing the grid. -----Output----- For each test case, print a single integer - the minimum number of cell value changes required. -----Example----- Input 3 2 2 1 0 0 1 3 3 1 1 0 1 0 1 0 1 1 4 4 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 Output 0 2 0 -----Note----- For the first test case, the input grid already has an alternating path: `1 -> 0 -> 1`. For the second test case, you need to change two cells to form an alternating path, for example: changing grid[1][1] from 1 to 0 and grid[2][3] from 1 to 0 will form an alternating path. For the third test case, the input grid already has an alternating path: `0 -> 1 -> 0 -> 1 -> 0 -> 1 -> 0 -> 1`.","solution":"def min_changes_to_alternating_paths(grid): n = len(grid) m = len(grid[0]) # We need two dp arrays, one for starting with 0 and one for starting with 1 dp0 = [[float(\'inf\')] * m for _ in range(n)] dp1 = [[float(\'inf\')] * m for _ in range(n)] # Base case for the starting point dp0[0][0] = 0 if grid[0][0] == 0 else 1 dp1[0][0] = 0 if grid[0][0] == 1 else 1 # Fill the dp arrays for i in range(n): for j in range(m): if i > 0: dp0[i][j] = min(dp0[i][j], dp1[i-1][j] + (0 if grid[i][j] == 0 else 1)) dp1[i][j] = min(dp1[i][j], dp0[i-1][j] + (0 if grid[i][j] == 1 else 1)) if j > 0: dp0[i][j] = min(dp0[i][j], dp1[i][j-1] + (0 if grid[i][j] == 0 else 1)) dp1[i][j] = min(dp1[i][j], dp0[i][j-1] + (0 if grid[i][j] == 1 else 1)) # The result for reaching (n-1, m-1) return min(dp0[n-1][m-1], dp1[n-1][m-1]) def solve(test_cases): results = [] for grid in test_cases: result = min_changes_to_alternating_paths(grid) results.append(result) return results"},{"question":"Susan is playing with arrays today. She has an array of non-negative integers, and she wants to find out if there is any subarray where the sum of the subarray is equal to a given target value. A subarray is a contiguous part of an array. Can you help her by writing a function that determines if such a subarray exists? Input The first line of the input consists of an integer `n` (the number of integers in the array) followed by an integer `target` (the target value). The second line contains `n` non-negative integers which make up the array. Output Print \\"found\\" (without quotes) if there is a subarray whose sum is equal to the target value. Print \\"not found\\" (without quotes) otherwise. Constraints 1 ≤ n ≤ 10^5 0 ≤ array[i] ≤ 10^9 0 ≤ target ≤ 10^9 SAMPLE INPUT 5 12 1 2 3 7 5 SAMPLE OUTPUT found SAMPLE INPUT 4 15 1 2 3 8 SAMPLE OUTPUT not found","solution":"def check_subarray_sum(n, target, arr): Determines if there\'s a subarray whose sum is equal to the target value. Args: n (int): The number of integers in the array. target (int): The target sum of any subarray. arr (list): The list of non-negative integers. Returns: str: \\"found\\" if such a subarray exists, \\"not found\\" otherwise. current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > target and start <= end: current_sum -= arr[start] start += 1 if current_sum == target: return \\"found\\" return \\"not found\\""},{"question":"Task **_Given_** *an array of integers* , **_Reverse the array_** and provide the elements in alternative positions (i.e., start from the last element, then the first, then the second last, followed by the second, etc.)*. ____ # Notes * **_Array/list_** size is *at least 1*. * **_Array/list_** numbers could be a *mixture of positives, negatives also zeroes* . ___ # Input >> Output Example ``` alternateReverse([1, 2, 3, 4, 5, 6]); ==> return [6, 1, 5, 2, 4, 3] ``` **_Explanation_**: * **_The reversed order list starting with the last element and alternate positions_** will be [6, 1, 5, 2, 4, 3]. ___ ``` alternateReverse([0, -1, 2, -3, 4, -5, 6]); ==> return [6, 0, -5, -1, 4, 2, -3] ``` **_Explanation_**: **_Reversed order list starting with last element and alternate positions_** ``` 6, 0, -5, -1, 4, 2, -3 ```. ___ ``` alternateReverse([7]); ==> return [7] ``` **_Explanation_**: * **_The single-element list is returned as is_** `7`. ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def alternateReverse(arr): This function takes a list of integers and returns a new list with the elements in an alternate reversed order. n = len(arr) if n == 1: return arr result = [] for i in range((n + 1) // 2): result.append(arr[-(i + 1)]) if i != n - (i + 1): # To avoid adding the middle element twice result.append(arr[i]) return result"},{"question":"The population of a town is monitored over several years. The population data for each year is stored sequentially in an array. Town officials need to determine if the population has experienced any growth over certain periods. Create a function that takes in an array of integers representing the population of the town each year and another integer representing the number of consecutive years to check for population growth. 1. The array will always contain at least the same number of elements as the number of years to check for consecutive growth. 2. The function should check every possible sequence of the given number of consecutive years within the array and determine if there is at least one sequence where the population increases every year. Input 1. An integer n (2 ≤ n ≤ 10^4) - the number of years of population data available. 2. An array of n integers where each integer p_i (0 ≤ p_i ≤ 10^6) represents the population in year i. 3. An integer k (1 ≤ k < n) - the number of consecutive years to check for growth. Output Print \\"YES\\" if there is at least one sequence of k consecutive years where the population grows each year, otherwise print \\"NO\\". Example Input 6 100 101 102 100 105 106 3 Output YES","solution":"def is_population_growing_consecutively(population, k): Determines if there is at least one sequence of k consecutive years where the population grows each year. for i in range(len(population) - k + 1): growth = True for j in range(1, k): if population[i + j] <= population[i + j - 1]: growth = False break if growth: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find the maximum number of substrings you can create such that each substring is a palindrome. A string is called a palindrome if it reads the same from left to right and from right to left. For example, \\"abccba\\" and \\"racecar\\" are palindromes. Input Format: - The first line contains a single integer n (1 ≤ n ≤ 2000) — the length of the string. - The second line contains the string s of length n. Output Format: - Print a single integer — the maximum number of substrings you can create such that each substring is a palindrome. Examples: Example 1: Input: 6 abccba Output: 4 Explanation: One of the ways to split the string into palindromic substrings is: \\"a\\", \\"b\\", \\"cc\\", \\"ba\\". Example 2: Input: 7 racecar Output: 7 Explanation: Each character itself is a palindrome, so the string can be split into 7 single-character substrings. Note: Each substring must be a contiguous part of the string, and the substrings should cover the entire original string without overlapping.","solution":"def max_palindromic_substrings(n, s): Returns the maximum number of palindromic substrings. Parameters: n (int): The length of the string. s (str): A string consisting of lowercase English letters. Returns: int: The maximum number of palindromic substrings. # The maximum number of palindromic substrings is equal to the length of the string, # because each character itself is a palindrome. return n"},{"question":"Taro is learning about the factors of a number. A factor of a number N is any integer that divides N without leaving a remainder. Taro wants to find the sum of all factors of a given integer N. Given an integer N, calculate the sum of all factors of N. -----Constraints----- - 1 leq N leq 10^4 - N is an integer -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the sum of all factors of N. -----Sample Input----- 12 -----Sample Output----- 28 Explanation: The factors of 12 are 1, 2, 3, 4, 6, and 12. The sum of these factors is 1 + 2 + 3 + 4 + 6 + 12 = 28.","solution":"def sum_of_factors(n): Computes the sum of all factors of the given integer n. Parameters: n (int): the integer whose factors\' sum is to be calculated Returns: int: sum of all factors of n if n < 1: return 0 factors_sum = 0 for i in range(1, n + 1): if n % i == 0: factors_sum += i return factors_sum # Example usage: # N = int(input()) # print(sum_of_factors(N))"},{"question":"Given a list of N integers, you need to find the smallest positive integer that is missing from the list. A positive integer is defined as any integer greater than 0. # Constraints - The length of the list, N, is an integer such that (1 leq N leq 1000). - All integers in the list are between (-10^6) and (10^6). # Input The input is given in the following format: ``` N a_1 a_2 a_3 ... a_N ``` Where: - `N` is the number of integers in the list. - Each `a_i` (1 ≤ i ≤ N) represents an integer in the list. # Output Print the smallest positive integer that is missing from the list. # Sample Input ``` 6 3 4 -1 1 2 6 ``` # Sample Output ``` 5 ``` # Explanation The positive integers present in the list are [1, 2, 3, 4, 6]. The smallest positive integer missing from the list is 5.","solution":"def find_smallest_missing_positive(nums): Finds the smallest positive integer missing from the list nums. nums = set(nums) # Convert list to a set to remove duplicates and for O(1) lookups smallest_missing = 1 while smallest_missing in nums: smallest_missing += 1 return smallest_missing"},{"question":"A local charity organization is holding a series of donation drives over the upcoming months. They want to keep track of the number of items donated each month and present the results in a certain format. You are given an array `donations` where `donations[i]` represents the number of items donated in the i-th month. You need to find out the month with the highest donation. If there\'s a tie, the earliest month should be chosen. Write a function `highestDonationMonth` that takes in an array of integers and returns the index (1-based) of the month with the highest donation. # Function Signature `def highestDonationMonth(donations: List[int]) -> int:` # Input - `donations` (List[int]): A list of integers representing the donations in each month. # Output - `int`: The 1-based index of the month with the highest donations. # Constraints - `1 <= len(donations) <= 100` - `1 <= donations[i] <= 1000` # Example ```python # Example 1 donations = [120, 450, 450, 200, 300] print(highestDonationMonth(donations)) # Output: 2 # Example 2 donations = [34, 67, 89, 23, 89, 12] print(highestDonationMonth(donations)) # Output: 3 ``` # Explanation In the first example, the highest donation amount is 450, which occurs in the second and third months. The function should return 2 because the second month is the earliest one with the highest donation amount. In the second example, the highest donation amount is 89, which occurs in the third and fifth months. The function should return 3 as it is the earlier month with the highest donation amount.","solution":"from typing import List def highestDonationMonth(donations: List[int]) -> int: Returns the 1-based index of the month with the highest donations. If there is a tie, the earliest month is chosen. max_donation = -1 max_index = -1 for i, donation in enumerate(donations): if donation > max_donation: max_donation = donation max_index = i return max_index + 1 # converting 0-based index to 1-based index"},{"question":"Given an array of positive integers `arr` and an integer `k`, determine if the array can be divided into `k` non-empty subsets with equal sums. Input Format - The first line contains two integers `n` and `k` (1 ≤ n ≤ 20, 1 ≤ k ≤ n) — the size of the array and the number of subsets. - The second line contains `n` space-separated integers representing the elements of the array (`1 ≤ arr[i] ≤ 1000`). Output Format - Print \\"YES\\" if the array can be divided into `k` subsets with equal sums. - Otherwise, print \\"NO\\". Examples Input 4 2 4 3 2 3 Output YES Input 4 3 1 2 3 4 Output NO Explanation of Examples In the first example, the array `[4, 3, 2, 3]` can be divided into two subsets `[4, 2]` and `[3, 3]` each with a sum of 6. In the second example, it is impossible to divide `[1, 2, 3, 4]` into three subsets with equal sums.","solution":"def can_partition_k_subsets(arr, k): def can_partition(start_index, k, current_sum, target_sum, visited): if k == 1: return True if current_sum == target_sum: return can_partition(0, k - 1, 0, target_sum, visited) for i in range(start_index, len(arr)): if not visited[i] and current_sum + arr[i] <= target_sum: visited[i] = True if can_partition(i + 1, k, current_sum + arr[i], target_sum, visited): return True visited[i] = False return False total_sum = sum(arr) if total_sum % k != 0 or k > len(arr): return \\"NO\\" target_sum = total_sum // k visited = [False] * len(arr) return \\"YES\\" if can_partition(0, k, 0, target_sum, visited) else \\"NO\\" # Example usage n, k = 4, 2 arr = [4, 3, 2, 3] print(can_partition_k_subsets(arr, k)) # Output: YES n, k = 4, 3 arr = [1, 2, 3, 4] print(can_partition_k_subsets(arr, k)) # Output: NO"},{"question":"A company organizes a coding competition every year and as a part of the competition, they have a unique scoring system. Participants are scored based on the complexity levels of the problems they solve. Write a function to determine the winner of the competition. You will be given two dictionaries representing two participants. Each dictionary contains key-value pairs where the key is the problem ID and the value is the score obtained for that problem. The participant with the higher total score wins. If both participants have the same score, return \\"It\'s a tie!\\". If a participant did not solve a particular problem, that problem ID will not be present in their dictionary. For example: ```python alice = {\'problem1\': 10, \'problem2\': 20, \'problem3\': 15} bob = {\'problem2\': 25, \'problem3\': 10} find_winner(alice, bob) ``` Should return: ``` \'Alice wins!\' ``` Points scored can be any positive integer.","solution":"def find_winner(alice, bob): Determines the winner of the competition. Arguments: alice -- dictionary mapping problem IDs to scores for Alice. bob -- dictionary mapping problem IDs to scores for Bob. Returns: A string indicating the winner (\\"Alice wins!\\", \\"Bob wins!\\", or \\"It\'s a tie!\\"). alice_score = sum(alice.values()) bob_score = sum(bob.values()) if alice_score > bob_score: return \\"Alice wins!\\" elif bob_score > alice_score: return \\"Bob wins!\\" else: return \\"It\'s a tie!\\""},{"question":"Sort Even and Odd Numbers ========================= Write a function that takes an array of integers and returns an array where all even numbers appear before all odd numbers while maintaining their original relative order within each group. The order of even numbers relative to each other and the order of odd numbers relative to each other should both remain unchanged. # Example For example, given the input array `arr = [3, 1, 2, 4, 7, 6, 5, 8, 9]`, the function should return `[2, 4, 6, 8, 3, 1, 7, 5, 9]`. # Function Signature ```python def sort_even_odd(arr: List[int]) -> List[int]: ``` # Input - An array of integers `arr` with length `n` (1 ≤ n ≤ 10^5). # Output - An array of integers where all even numbers precede all odd numbers while maintaining relative order within each group. # Constraints - The array might be empty, in which case the function should return an empty array. # Example ```python arr = [3, 1, 2, 4, 7, 6, 5, 8, 9] print(sort_even_odd(arr)) # Output: [2, 4, 6, 8, 3, 1, 7, 5, 9] arr = [3, 1, 7, 5, 9] print(sort_even_odd(arr)) # Output: [3, 1, 7, 5, 9] arr = [2, 4, 6, 8] print(sort_even_odd(arr)) # Output: [2, 4, 6, 8] arr = [] print(sort_even_odd(arr)) # Output: [] ``` # Constraints - You should aim for an efficient implementation with a time complexity of O(n).","solution":"from typing import List def sort_even_odd(arr: List[int]) -> List[int]: Returns a new array where all even numbers are placed before odd numbers, while maintaining their original relative order within each group. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Lucas is playing a game with two integers, X and Y. In the game, he can perform the following operation any number of times: choose any non-negative integer Z such that Z has strictly fewer digits than X, and replace any digit in X with Z. Lucas wants to make the value of X equal to Y using the fewest number of operations. Given the initial values of X and Y, determine the minimum number of operations required. Constraints * 0 ≤ X, Y ≤ 10^9 * X and Y are integers. Input Input is given from Standard Input in the following format: X Y Output Print the minimum number of operations required to make X equal to Y. Examples Input 1234 4321 Output 4 Input 555 555 Output 0","solution":"def min_operations(X, Y): Returns the minimum number of operations required to make X equal to Y. X_str = str(X) Y_str = str(Y) # Calculate the minimum number of operations needed min_operations_count = 0 for x_char, y_char in zip(X_str, Y_str): if x_char != y_char: min_operations_count += 1 # If the lengths of X and Y are different, add the remaining digits in Y as operations min_operations_count += abs(len(X_str) - len(Y_str)) return min_operations_count"},{"question":"In the realm of competitive programming, one recurrent challenge is to transform strings in various ways. We have encountered numerous variations, and now let\'s consider another. Given a string, we will modify it by reversing specific segments. -----Input:----- - The first line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case consists of a string S and an integer N. -----Output:----- For each test case, print the modified string as described below: - Split the string S into segments each of length N. - Reverse each segment independently. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq |S| leq 1000 - N will always be a divisor of |S| -----Sample Input:----- 3 abcdefghij 5 abcdefghij 2 abcdefghi 3 -----Sample Output:----- edcbajihgf badcfehgji cbafedihg -----EXPLANATION:----- For the first test case, the string \\"abcdefghij\\" is split into segments \\"abcde\\" and \\"fghij\\", each with length 5. Reversing these segments gives \\"edcba\\" and \\"jihgf\\", and thus the final output is \\"edcbajihgf\\".","solution":"def reverse_segments(S, N): Given a string S and an integer N, split the string into segments each of length N and reverse each segment independently. segments = [S[i:i+N] for i in range(0, len(S), N)] reversed_segments = [segment[::-1] for segment in segments] return \'\'.join(reversed_segments) def process_test_cases(test_cases): Process multiple test cases and return the result for each. results = [] for S, N in test_cases: results.append(reverse_segments(S, N)) return results # Example execution with provided input format if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): S = data[index] N = int(data[index + 1]) test_cases.append((S, N)) index += 2 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given an integer N and an integer sequence P of length N. The sequence P represents the profit obtained from N different projects. You are also given an integer Q representing the number of queries, and each query provides a starting index S and an ending index E. For each query, calculate the maximum profit that can be obtained by selecting a contiguous subsequence of projects starting from index S and ending at index E, inclusive. If the sum of the profits in the selected subsequence is negative, return 0 for that query. Constraints: * 1 leq N leq 100000 * -10^4 leq P_i leq 10^4 * 1 leq Q leq 100000 * 1 leq S leq E leq N Input: The input is given from Standard Input in the following format: ``` N P_1 P_2 ... P_N Q S_1 E_1 S_2 E_2 ... S_Q E_Q ``` Output: For each query, print the maximum profit for the corresponding subsequence. If the profit is negative, print 0. Examples: Input: ``` 5 -1 2 3 -4 5 2 1 3 2 5 ``` Output: ``` 5 6 ``` Input: ``` 6 -1 -2 -3 -4 -5 -6 1 1 6 ``` Output: ``` 0 ``` Input: ``` 3 1 2 3 1 1 3 ``` Output: ``` 6 ``` Input: ``` 4 -1 3 -2 3 2 1 4 2 3 ``` Output: ``` 4 3 ```","solution":"def max_profit(N, P, Q, queries): def max_subarray_sum(arr): max_sum = 0 current_sum = 0 for num in arr: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum response = [] for (S, E) in queries: subseq = P[S-1:E] response.append(max_subarray_sum(subseq)) return response"},{"question":"# Task A factory produces special gears which have serial numbers represented as strings containing only the characters \'a\', \'b\', or \'c\'. Due to some production issues, some gears might have serial numbers which, although they appear different, are actually identical if you reassign the characters \'a\', \'b\', and \'c\'. For instance, if you reassign: - \'a\' to \'b\', \'b\' to \'c\', and \'c\' to \'a\', then the serial number \'abc\' becomes \'bca\' - \'b\' to \'a\', \'a\' to \'c\', and \'c\' to \'b\', then the serial number \'abc\' becomes \'cab\' Given a list of serial numbers `serials`, determine how many distinct gears there are, considering the reassignment rule. You may assume that `serials` will contain only lowercase \'a\', \'b\', and \'c\'. # Example For `serials = [\\"abc\\", \\"bca\\", \\"cab\\", \\"aaa\\", \\"bbb\\", \\"ccc\\"]`, the output should be `2`. Notice that the first three serials are identical when characters are reassigned. For `serials = [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]`, the output should be `1`. # Constraints - `1 <= len(serials) <= 1000` - `1 <= len(serials[i]) <= 100`","solution":"def distinct_gears(serials): from itertools import permutations def generate_permutations(s): perms = set() perm = list(permutations(\'abc\')) for p in perm: trans = str.maketrans(\'abc\', \'\'.join(p)) perms.add(s.translate(trans)) return perms distinct_set = set() for serial in serials: forms = generate_permutations(serial) distinct_set.add(frozenset(forms)) return len(distinct_set)"},{"question":"Travel Distance Optimizer You are required to write a function called **`optimizeTravel`** that helps in optimizing the travel distance for visiting multiple cities. The function takes two parameters: 1. **`cities`**: An array of strings, where each string represents the name of a city. 2. **`distances`**: An object where the keys are city names and the values are objects. Each nested object also has city names as keys and integers as values representing the direct distance between the cities. The function should return the shortest possible travel route that visits each city exactly once and returns to the starting city. The order of cities in the returned array should be the order of traversal. # Example: ``` cities = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] distances = { \\"A\\": {\\"B\\": 10, \\"C\\": 15, \\"D\\": 20}, \\"B\\": {\\"A\\": 10, \\"C\\": 35, \\"D\\": 25}, \\"C\\": {\\"A\\": 15, \\"B\\": 35, \\"D\\": 30}, \\"D\\": {\\"A\\": 20, \\"B\\": 25, \\"C\\": 30} } optimizeTravel(cities, distances) ``` Output: ``` [\\"A\\", \\"B\\", \\"D\\", \\"C\\", \\"A\\"] // The actual output may differ based on the distances. ``` # Notes: - You can assume that the distance between any two cities is symmetric, i.e., the distance from city A to city B is the same as the distance from city B to city A. - The given distances are guaranteed to form a fully connected graph. - The function should handle at least 200 cities efficiently. - If the input array **`cities`** is empty, return an empty array. **Happy Travelling! 🚗 🌎**","solution":"from itertools import permutations def calculate_route_distance(route, distances): total_distance = 0 for i in range(len(route) - 1): total_distance += distances[route[i]][route[i+1]] # Add distance to return to starting city total_distance += distances[route[-1]][route[0]] return total_distance def optimizeTravel(cities, distances): if not cities: return [] min_distance = float(\\"inf\\") optimal_route = [] for perm in permutations(cities): distance = calculate_route_distance(perm, distances) if distance < min_distance: min_distance = distance optimal_route = perm # Add starting city to the end to complete the cycle optimal_route = list(optimal_route) + [optimal_route[0]] return optimal_route"},{"question":"You have been given a list of integers. Your task is to write a function that processes this list and returns a transformed version of the list based on the following rules: 1. For any integer in the list that is an exact multiple of 3, replace it with the string \\"Fizz\\". 2. For any integer in the list that is an exact multiple of 5, replace it with the string \\"Buzz\\". 3. For any integer in the list that is an exact multiple of both 3 and 5, replace it with the string \\"FizzBuzz\\". 4. If an integer is neither a multiple of 3 nor 5, leave it unchanged. The function should handle lists containing up to 10^5 integers. -----Input----- - A single integer n (1 le n le 10^5) representing the number of integers in the list. - A list of n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9), representing the input list of integers. -----Output----- - A list of n elements where each element is either an integer or one of the strings \\"Fizz\\", \\"Buzz\\", or \\"FizzBuzz\\", depending on the rules described. -----Examples----- Input 5 1 2 3 4 5 Output [1, 2, \\"Fizz\\", 4, \\"Buzz\\"] Input 15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Output [1, 2, \\"Fizz\\", 4, \\"Buzz\\", \\"Fizz\\", 7, 8, \\"Fizz\\", \\"Buzz\\", 11, \\"Fizz\\", 13, 14, \\"FizzBuzz\\"] Input 3 -3 3 5 Output [\\"Fizz\\", \\"Fizz\\", \\"Buzz\\"] -----Note----- In the first example, the integer 3 is replaced with \\"Fizz\\" because it is a multiple of 3, and the integer 5 is replaced with \\"Buzz\\" because it is a multiple of 5. In the second example, the function processes the list and applies the replacement rules where appropriate, such as \\"FizzBuzz\\" for the integer 15 which is a multiple of both 3 and 5. In the third example, the function correctly handles negative integers as well, treating -3 as a multiple of 3 and replacing it with \\"Fizz\\".","solution":"def fizz_buzz_transform(lst): Transforms the given list according to the FizzBuzz rules. Args: lst (list of int): List of integers to be transformed. Returns: list: Transformed list where multiples of 3 are replaced with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of 3 and 5 with \\"FizzBuzz\\". result = [] for num in lst: if num % 3 == 0 and num % 5 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(num) return result"},{"question":"Igor K. has another challenge with his beloved Azembler. This time he needs to perform division and not multiplication. The Azembler language, however, does not directly support division, but Igor K. figured out a clever trick to achieve it using subtraction. The task is to find the minimum number of subtraction operations to divide a given number by a divisor. Given a number n and a divisor d (where 1 ≤ n ≤ 255, and 1 ≤ d ≤ n), perform the following: 1. Subtract the divisor from the number repeatedly until the result is less than the divisor. 2. Count how many times the subtraction happens to achieve the result. Input The input consists of two integers n and d separated by a space. Output On the first line print the integer q, representing the quotient after dividing n by d. On the second line print the integer r, representing the remainder after dividing n by d. On the third line print the minimum number of subtraction operations required to achieve the result. Examples Input 10 3 Output 3 1 3 Input 20 4 Output 5 0 5 Input 15 15 Output 1 0 1","solution":"def azembler_division(n, d): Performs division using repeated subtraction to find the quotient and remainder. Args: n (int): The dividend. d (int): The divisor. Returns: tuple: A tuple containing three elements: - q (int): The quotient. - r (int): The remainder. - count (int): The number of subtraction operations performed. quotient = 0 count = 0 while n >= d: n -= d quotient += 1 count += 1 remainder = n return quotient, remainder, count"},{"question":"Given an integer array A of size n, find all elements that appear more than ⌊ n/3 ⌋ times. Example 1: Input: A = [3, 2, 3] Output: [3] Explanation: There are 3 elements in the array, and the number 3 appears more than ⌊ 3/3 ⌋ = 1 time, hence it is the majority element. Example 2: Input: A = [1, 1, 1, 3, 3, 2, 2, 2] Output: [1, 2] Explanation: There are 8 elements in the array, and the numbers 1 and 2 appear more than ⌊ 8/3 ⌋ ≈ 2.67 times, hence they are the majority elements. Your Task: You don\'t need to read input or print anything. Your task is to implement the function majorityElement() which accepts the array as input parameter and returns a list of elements that appear more than ⌊ n/3 ⌋ times. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 -10^9 <= A[i] <= 10^9","solution":"def majorityElement(nums): Finds all elements that appear more than ⌊ n/3 ⌋ times in the given list nums. if not nums: return [] count1, count2, candidate1, candidate2 = 0, 0, None, None for num in nums: if candidate1 == num: count1 += 1 elif candidate2 == num: count2 += 1 elif count1 == 0: candidate1, count1 = num, 1 elif count2 == 0: candidate2, count2 = num, 1 else: count1 -= 1 count2 -= 1 result = [] for candidate in [candidate1, candidate2]: if nums.count(candidate) > len(nums) // 3: result.append(candidate) return result"},{"question":"Given an integer N, find the minimal integer X such that the sum of all digits of X equals N. If no such integer exists, return -1. Input: The input contains a single integer N. Output: Print the minimal integer X, or -1 if no such X exists. Constraints: 1 ≤ N ≤ 100 SAMPLE INPUT 9 SAMPLE OUTPUT 9 Explanation: For the input 9, the minimal integer X whose sum of digits equals 9 is 9 itself. SAMPLE INPUT 15 SAMPLE OUTPUT 69 Explanation: For the input 15, the minimal integer X whose sum of digits equals 15 is 69 (6+9=15). SAMPLE INPUT 0 SAMPLE OUTPUT -1 Explanation: For the input 0, there is no positive integer X whose sum of digits equals 0. Therefore, the output is -1.","solution":"def minimal_integer_with_digit_sum(N): Given an integer N, finds the minimal integer X such that the sum of all digits of X equals N. If no such integer exists, returns -1. if N == 0: return -1 result = [] while N > 0: digit = min(9, N) result.append(str(digit)) N -= digit return int(\'\'.join(result[::-1]))"},{"question":"We need a function that receives a list of strings and determines the longest palindromic substring within each string. A palindromic substring is a sequence of characters that reads the same backward as forward. The function find_longest_palindrome(listOfStrings) will return a list of results where each result is a dictionary with the following keys: - \\"input\\" (the original string), - \\"length\\" (the length of the longest palindromic substring), - \\"substring\\" (the longest palindromic substring). If there are multiple longest palindromic substrings with the same length, return the substring that appears first in the original string. Here are some example inputs and expected outputs: ```python listOfStrings1 = [\\"babad\\", \\"cbbd\\", \\"a\\", \\"ac\\"] find_longest_palindrome(listOfStrings1) # Output: [ # {\\"input\\": \\"babad\\", \\"length\\": 3, \\"substring\\": \\"bab\\"}, # {\\"input\\": \\"cbbd\\", \\"length\\": 2, \\"substring\\": \\"bb\\"}, # {\\"input\\": \\"a\\", \\"length\\": 1, \\"substring\\": \\"a\\"}, # {\\"input\\": \\"ac\\", \\"length\\": 1, \\"substring\\": \\"a\\"} # ] listOfStrings2 = [\\"racecar\\", \\"noon\\", \\"banana\\"] find_longest_palindrome(listOfStrings2) # Output: [ # {\\"input\\": \\"racecar\\", \\"length\\": 7, \\"substring\\": \\"racecar\\"}, # {\\"input\\": \\"noon\\", \\"length\\": 4, \\"substring\\": \\"noon\\"}, # {\\"input\\": \\"banana\\", \\"length\\": 5, \\"substring\\": \\"anana\\"} # ] ``` Your function will be tested with lists of strings of varying lengths and containing a mix of random characters. Ensure optimal performance and handle edge cases, such as strings with no palindromic substrings or multiple substrings of the same longest length. Enjoy the challenge and happy coding!","solution":"def find_longest_palindrome(listOfStrings): def longest_palindromic_substring(s): n = len(s) if n == 0: return {\\"input\\": s, \\"length\\": 0, \\"substring\\": \\"\\"} longest = \\"\\" for i in range(n): # Check for odd-length palindromes tmp = expand_from_center(s, i, i) if len(tmp) > len(longest): longest = tmp # Check for even-length palindromes tmp = expand_from_center(s, i, i+1) if len(tmp) > len(longest): longest = tmp return {\\"input\\": s, \\"length\\": len(longest), \\"substring\\": longest} def expand_from_center(s, l, r): while l >= 0 and r < len(s) and s[l] == s[r]: l -= 1 r += 1 return s[l+1:r] return [longest_palindromic_substring(s) for s in listOfStrings]"},{"question":"There is a rectangular grid of size n by m (1 ≤ n, m ≤ 100). Each cell in the grid contains a lowercase letter. Two cells (i1, j1) and (i2, j2) are considered connected if there exists a path between them where consecutive cells in the path share a common side and contain the same letter. You are given a list of q queries. Each query contains two pairs of coordinates: (r1, c1) and (r2, c2) representing two cells in the grid. For each query, determine whether there is a path between the two specified cells that meets the conditions described above. Input The first line contains two integers n and m — the number of rows and the number of columns of the grid. The next n lines contain m lowercase letters each, describing the grid. The next line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. The next q lines contain two pairs of coordinates (r1, c1) and (r2, c2) (1 ≤ r1, c1, r2, c2 ≤ n, m) — the pairs represent the row and column indices of the cells in the grid for each query. Output For each query, print \\"Yes\\" (without quotes) if there is a path between the two cells that meets the conditions, otherwise print \\"No\\". Examples Input 3 4 aabc abbc abcc 3 1 1 3 4 1 1 1 2 2 2 3 4 Output No Yes No Note In the first query, there is no path between cell (1, 1) and cell (3, 4) that consists of cells containing the same letter, thus the answer is \\"No\\". In the second query, both cells (1,1) and (1,2) contain \'a\' and there is a direct path between them, so the answer is \\"Yes\\". In the third query, there is no path between cell (2, 2) and cell (3, 4) that consists of cells containing the same letter, thus the answer is \\"No\\".","solution":"def find_paths(grid, rows, cols): visited = [[False] * cols for _ in range(rows)] letter_component = [[-1] * cols for _ in range(rows)] component_id = 0 def dfs(r, c, letter): stack = [(r, c)] while stack: cr, cc = stack.pop() if visited[cr][cc]: continue visited[cr][cc] = True letter_component[cr][cc] = component_id directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dr, dc in directions: nr, nc = cr + dr, cc + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and grid[nr][nc] == letter: stack.append((nr, nc)) for i in range(rows): for j in range(cols): if not visited[i][j]: dfs(i, j, grid[i][j]) component_id += 1 return letter_component def process_queries(n, m, grid, queries): letter_component = find_paths(grid, n, m) results = [] for r1, c1, r2, c2 in queries: if letter_component[r1-1][c1-1] == letter_component[r2-1][c2-1]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Claire works as a game designer for a company developing a new puzzle game. In one level, the player needs to move a character from the bottom left corner to the top right corner of a grid. The grid is an N times M matrix where each cell can either be empty or contain an obstacle. The character can move in one of four directions: up, down, left, or right. Claire wants to make sure that each level she designs is solvable, meaning there is a path from the start to the end. Your task is to write a program that determines if there is a path from the bottom left corner (cell (N-1, 0)) to the top right corner (cell (0, M-1)) of the grid. -----Input----- The first line of input contains two positive integers N and M (1 leq N, M leq 1000), representing the number of rows and columns in the grid, respectively. The next N lines contain M characters each, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). -----Output----- Output \\"Yes\\" if there is a path from the bottom left to the top right, and \\"No\\" if there is no such path. -----Examples----- Sample Input: 3 3 ... .#. ... Sample Output: Yes Sample Input: 3 3 ... # ... Sample Output: No","solution":"def is_path_exist(N, M, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (N-1, 0) end = (0, M-1) if grid[start[0]][start[1]] == \'#\' or grid[end[0]][end[1]] == \'#\': return \\"No\\" queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\""},{"question":"Given a string s, write a method to determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a string that reads the same forward and backward. Example 1: Input: s = \\"A man, a plan, a canal: Panama\\" Output: true Explanation: \\"A man, a plan, a canal: Panama\\" is a palindrome when ignoring non-alphanumeric characters and case differences. Example 2: Input: s = \\"race a car\\" Output: false Explanation: \\"race a car\\" is not a palindrome when ignoring non-alphanumeric characters and case differences. Note: 1. s consists only of printable ASCII characters. 2. The length of s will be in the range [1, 20000].","solution":"def is_palindrome(s): Determine if the string s is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Compare the filtered string with its reverse return filtered_s == filtered_s[::-1]"},{"question":"The task is to implement a queue using two stacks. The class `QueueUsingStacks` has two stacks, `stack1` and `stack2`. You need to complete the methods `enqueue(x)` which inserts an element into the queue and `dequeue()` which removes the front element from the queue and returns it. If the queue is empty, return -1. Example 1: Input: enqueue(1) enqueue(2) enqueue(3) dequeue() dequeue() enqueue(4) dequeue() Output: 1 2 3 Explanation: enqueue(1) the queue will be {1} enqueue(2) the queue will be {1, 2} enqueue(3) the queue will be {1, 2, 3} dequeue() dequeued element will be 1, the queue will be {2, 3} dequeue() dequeued element will be 2, the queue will be {3} enqueue(4) the queue will be {3, 4} dequeue() dequeued element will be 3, the queue will be {4} Example 2: Input: dequeue() enqueue(5) enqueue(6) dequeue() Output: -1 5 Explanation: dequeue() queue is empty, return -1 enqueue(5) the queue will be {5} enqueue(6) the queue will be {5, 6} dequeue() dequeued element will be 5, the queue will be {6} Your Task: You are required to complete two methods `enqueue(x)` which adds element x to the queue and `dequeue()` which removes and returns the front element from the queue. If the queue is empty, return -1 in the `dequeue()` method. Expected Time Complexity: O(1) for `enqueue(x)` and O(1) amortized for `dequeue()`. Expected Auxiliary Space: O(N) for both `enqueue(x)` and `dequeue()` where N is the number of elements in the queue. Constraints: 1 <= Q <= 100 1 <= x <= 100","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, x): self.stack1.append(x) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2.pop() return -1"},{"question":"A treasure hunter has just discovered a secret passage leading to a room filled with treasures. The room contains treasures of different weights, and the hunter wants to maximize the total value of the treasures he can carry without exceeding his maximum weight capacity. Given the weight and value of the treasures, and the maximum weight the hunter can carry, determine the maximum value of treasures the hunter can carry. ------- Input Format ------- - First line of input contains an integer N, the number of treasures. - The second line contains N space-separated integers, W, where W[i] denotes the weight of the i-th treasure. - The third line contains N space-separated integers, V, where V[i] denotes the value of the i-th treasure. - The last line contains a single integer, C, which is the maximum weight the hunter can carry. ------- Output Format ------- Output a single integer representing the maximum value of treasures the hunter can carry. ------- Constraints ------- 1 ≤ N ≤ 10^3 1 ≤ W[i], V[i] ≤ 10^3 1 ≤ C ≤ 10^6 ------- Sample Input 1 ------- 4 2 3 4 5 3 4 5 6 5 ------- Sample Output 1 ------- 7 ------- Explanation 1 ------- The hunter can carry the treasures with weights 2 and 3 for a total value of 3 + 4 = 7. This is the maximum value achievable without exceeding the weight limit of 5.","solution":"def knapsack(N, W, V, C): Returns the maximum value of treasures that can be carried without exceeding the weight capacity. Parameters: N (int): the number of treasures. W (list of int): the weights of the treasures. V (list of int): the values of the treasures. C (int): the maximum weight capacity. Returns: int: the maximum value of treasures that can be carried. # Create a DP table to store maximum value at each capacity from 0 to C dp = [0] * (C + 1) # Fill the DP table for i in range(N): # Traverse weights from the back to avoid recomputation of values in the same iteration for w in range(C, W[i] - 1, -1): dp[w] = max(dp[w], dp[w - W[i]] + V[i]) # The answer will be the maximum value for the full capacity return dp[C]"},{"question":"In a far away land, there is a unique type of binary tree called a \\"Balanced Prime Binary Tree.\\" In this tree: * Each node contains a prime number. * For any given node, the number of left children and right children is the same (i.e., the tree is perfectly balanced). * The depth of all leaf nodes is the same. Given an integer `N`, which represents the total number of nodes in the tree, your task is to count the number of distinct structurally unique Balanced Prime Binary Trees that can be formed with `N` prime numbers. Note that two trees are considered structurally unique if one cannot be transformed into the other by only changing the node values, even if the node values are prime numbers. Write a function `count_trees(N: int) -> int` that computes this number. Since this result can be very large, return the count modulo `10^9+7`. Constraints: * 1 ≤ N ≤ 2 x 10^5 * All input values are integers. # Input The function receives the following parameters: * `N`: The total number of nodes in the tree. # Output The function should return the number of distinct structurally unique Balanced Prime Binary Trees that can be formed. # Examples Example 1 Input: ``` N = 3 ``` Output: ``` 1 ``` Explanation: With 3 nodes, there can only be one Balanced Prime Binary Tree (with 1 root and 2 children). Example 2 Input: ``` N = 4 ``` Output: ``` 0 ``` Explanation: It is not possible to create a perfectly balanced tree with 4 nodes where each internal node has exactly two children and all leaf nodes are at the same depth. Example 3 Input: ``` N = 7 ``` Output: ``` 1 ``` Explanation: With 7 nodes, there can only be one structurally unique Balanced Prime Binary Tree (with 1 root, 2 children, and 4 grandchildren), all at the same depth. Example 4 Input: ``` N = 8 ``` Output: ``` 0 ``` Explanation: It\'s not possible to create a perfectly balanced tree with 8 nodes.","solution":"def count_trees(N): MOD = 10**9 + 7 def is_power_of_two_minus_one(x): return (x & (x + 1)) == 0 and x != 0 if is_power_of_two_minus_one(N): return 1 else: return 0"},{"question":"Anna has an n x n matrix and wants to find out if there exists a path from the top-left corner to the bottom-right corner of the matrix. She can only move right or down from any cell and can only move through cells that contain a 1. A path exists if it\'s possible to traverse from the top-left (1,1) to the bottom-right (n,n). Help Anna determine if such a path exists. -----Input----- The first line contains integer n (1 ≤ n ≤ 100) — the size of the matrix. The next n lines each contain n integers (either 0 or 1), representing the matrix. -----Output----- Print \\"YES\\" (without the quotes) if there exists a path from the top-left to the bottom-right, otherwise print \\"NO\\". -----Examples----- Input 3 1 0 0 1 1 0 0 1 1 Output YES Input 3 1 0 0 0 1 0 0 0 1 Output NO -----Note----- In the first sample, the path (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) is a valid path. In the second sample, there is no possible path from (1,1) to (3,3).","solution":"def can_reach_end(matrix): n = len(matrix) if matrix[0][0] == 0 or matrix[n-1][n-1] == 0: return \\"NO\\" # A queue for BFS queue = [(0, 0)] visited = set() visited.add((0, 0)) directions = [(0, 1), (1, 0)] # right and down movements while queue: r, c = queue.pop(0) if r == n-1 and c == n-1: return \\"YES\\" for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and matrix[nr][nc] == 1 and (nr, nc) not in visited: queue.append((nr, nc)) visited.add((nr, nc)) return \\"NO\\""},{"question":"You are given an array a of length n and an integer m. You are allowed to perform at most one operation in which you can pick any segment [l, r] (1 le l le r le n) and replace each element a_i within that segment with any integer x of your choice. What is the maximum possible sum of the array you can obtain after this operation? -----Input----- The first line contains two integers n and m (1 le n le 5 cdot 10^5, 1 le m le 10^9) — the length of the array and the maximum value an element can take. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the maximum possible sum of the array after performing the described operation. -----Examples----- Input 5 10 1 2 3 4 5 Output 37 Input 4 7 -1 -1 -1 -1 Output 27 -----Note----- In the first example, we can choose the segment [1, 5] and replace each element with 10. The new array will be [10, 10, 10, 10, 10] and the sum is 50. In the second example, we can choose the segment [1, 4] and replace each element with 7. The new array will be [7, 7, 7, 7] and the sum is 28.","solution":"def max_sum_after_replacement(n, m, a): Calculates the maximum possible sum of the array after performing the described operation. Parameters: n (int): Length of the array m (int): Maximum value an element can take a (list): List of integers, the given array Returns: int: Maximum possible sum of the array # Calculate the sum of the original array original_sum = sum(a) # Calculate the sum of all elements replaced by `m` replaced_sum = sum([m] * n) # The replacement operation will replace all the elements in the array max_sum = replaced_sum return max_sum"},{"question":"A local library is organizing a book coding competition. Participants are required to find the most frequent sequence of characters (\\"substrings\\") in a given list of book titles. Each title should be treated as a single string. **Description:** You are given a list of book titles, each title being a string. Your task is to find the length of the highest frequency substring of length `k` that appears in at least `x` book titles. **Input:** 1. The first line contains three integers `n`, `k`, and `x` (1 ≤ n ≤ 2000, 1 ≤ k ≤ 20, 1 ≤ x ≤ n), the number of book titles, the length of substrings to consider, and the minimum number of book titles the substring should appear in, respectively. 2. The next `n` lines each contain one book title. Each title is a string with a length between 1 and 100 characters inclusive and consists of lowercase English letters only. **Output:** Output a single integer, the length of the most frequent common substring of length `k` that appears in at least `x` book titles. If no such substring exists, output \\"0\\". **Example:** *Input:* ``` 5 3 2 thehobbit alchemist thegreatgatsby thinkbig thatboy ``` *Output:* ``` 3 ``` **Explanation:** In this example, the substring \\"the\\" of length 3 appears in at least 2 book titles (\\"thehobbit\\" and \\"thegreatgatsby\\"). Note that while \\"thi\\" also appears in at least two titles, it does not appear as frequently as \\"the\\".","solution":"def most_frequent_substring_length(n, k, x, titles): from collections import defaultdict substring_count = defaultdict(set) # Loop through each book title for i, title in enumerate(titles): # Use a set to prevent counting the same substring more than once in a single title seen_substrings = set() for j in range(len(title) - k + 1): substring = title[j:j+k] if substring not in seen_substrings: seen_substrings.add(substring) substring_count[substring].add(i) # Find the maximum frequency of any substring appearing in at least x titles max_freq = 0 for substr, title_set in substring_count.items(): if len(title_set) >= x: max_freq = max(max_freq, len(title_set)) # The result must be the requested length k if some substrings met the criteria result = k if max_freq >= x else 0 return result # Example usage: # titles = [\\"thehobbit\\", \\"alchemist\\", \\"thegreatgatsby\\", \\"thinkbig\\", \\"thatboy\\"] # n, k, x = 5, 3, 2 # print(most_frequent_substring_length(n, k, x, titles)) # Output should be 3"},{"question":"Revenue Calculation You are the manager of an e-commerce platform and you need to create a revenue calculation program. The platform sells products by an auction style bidding process. Each auction has a base price, and n customers can place bids higher than or equal to that base price. Your task is to calculate the total revenue generated from the winning bids. The revenue is defined as the sum of all highest bids in each auction. If there are multiple highest bids with the same value, only one of them is considered. Input The input consists of multiple datasets. The first line of the input contains an integer T, the number of test cases. Each test case starts with a line containing an integer m, the number of auctions. This is followed by m blocks describing each auction. Each auction block contains: - An integer b, the base price of the auction. - An integer n, the number of bids. - A list of n integers representing the bid amounts. The input is terminated by a dataset where T=0 which should not be processed. Output For each test case, output the total revenue generated from the winning bids for all auctions in that test case. Sample Input 2 3 100 5 130 150 120 140 150 80 3 100 90 80 50 4 55 60 50 65 2 200 2 250 300 100 3 110 110 110 0 Output for Sample Input 430 410 Example Input 2 3 100 5 130 150 120 140 150 80 3 100 90 80 50 4 55 60 50 65 2 200 2 250 300 100 3 110 110 110 0 Output 430 410","solution":"def calculate_revenue(test_cases): revenues = [] for t in test_cases: m = t[0] total_revenue = 0 auctions = t[1] for auction in auctions: base_price = auction[0] bids = auction[2:] valid_bids = [bid for bid in bids if bid >= base_price] if valid_bids: highest_bid = max(valid_bids) total_revenue += highest_bid revenues.append(total_revenue) return revenues def parse_input(input_list): index = 0 test_cases = [] while index < len(input_list): T = int(input_list[index]) index += 1 if T == 0: break for _ in range(T): m = int(input_list[index]) index += 1 auctions = [] for _ in range(m): auction_info = list(map(int, input_list[index].split())) auctions.append(auction_info) index += 1 test_cases.append((m, auctions)) return test_cases"},{"question":"You are given two strings, `str1` and `str2`, and you need to determine if `str2` is a rotated version of `str1`. A rotated version means that `str2` can be obtained by rotating `str1` any number of steps. For example, \\"hello\\" rotated by 2 steps would result in \\"lohel\\". You need to write a program that judges whether the given two strings are rotated versions of each other. # Input - The input contains multiple lines where each line contains two strings separated by a space. - The input ends with a line that contains only \\"END\\". # Output - For each pair of strings, output \\"YES\\" if `str2` is a rotated version of `str1`. Otherwise, output \\"NO\\". - Output each result on a new line. # Constraints - Both strings consist only of lowercase English letters and have lengths between 1 and 100 (inclusive). # Examples Input ``` hello lohel world orldw rotation ationrot END ``` Output ``` YES YES YES ```","solution":"def is_rotated_version(str1, str2): Determines if str2 is a rotated version of str1. if len(str1) != len(str2): return \\"NO\\" doubled_str1 = str1 + str1 if str2 in doubled_str1: return \\"YES\\" return \\"NO\\" def process_input(input_str): Processes the multiline input and returns the results for each pair of strings. lines = input_str.strip().split(\\"n\\") results = [] for line in lines: if line == \\"END\\": break str1, str2 = line.split() results.append(is_rotated_version(str1, str2)) return results"},{"question":"A social media platform wants to implement a feature to find the most frequently mentioned user in a list of comments. A user\'s handle is mentioned in a comment by prefacing it with an \'@\' symbol. For example, in the comment \\"Great job @john and @jane!\\" both \\"john\\" and \\"jane\\" are mentioned. Given a list of comments, determine the handle that is mentioned the most. If there is a tie, return the lexicographically smallest handle. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of comments. The following n lines each contain one comment, which is a string consisting of lowercase and uppercase Latin letters, digits, spaces, and special characters. Each comment has length between 1 and 1000 characters. Output Print the handle that is mentioned the most. If there is a tie, print the lexicographically smallest one. Examples Input 5 Great job @john and @jane! I think @john really nailed it. What do you think, @john? @jane did well too! @lisa, @john, and @jane all did great! Output john Input 3 @alice apple pie? Does @bob even lift, @alice? @alice and @charlie went to the store. Output alice Input 4 Who\'s gonna win? @teamA or @teamB? I think @teamA has an edge. @teamB has some strong players though. Let\'s cheer for both @teamA and @teamB! Output teamA","solution":"import re from collections import defaultdict def find_most_mentioned_handle(n, comments): mention_count = defaultdict(int) for comment in comments: mentions = re.findall(r\'@(w+)\', comment) for mention in mentions: mention_count[mention] += 1 most_mentioned_handle = min((handle for handle, count in mention_count.items() if count == max(mention_count.values())), key=lambda h: h) return most_mentioned_handle"},{"question":"A landscaped garden is represented by an n times n grid. Each cell can be either a grass cell represented by 0 or a flower cell represented by 1. You need to find the maximum size of a square subgrid that contains only flower cells (1s). Write a function `maximalSquare` that determines the side length of the largest square containing only 1s and returns its area. Function Description Complete the `maximalSquare` function below. The function should return an integer that represents the area of the largest square containing only 1s. `maximalSquare` has the following parameter(s): - `grid`: a 2D list of integers representing the garden grid, where each integer is either 0 (grass) or 1 (flower). Input Format - The first line contains an integer t, the number of test cases. - For each test case: - The first line contains an integer n, the size of the grid. - Each of the next n lines contains n space-separated integers representing the rows of the garden grid. Constraints 1 leq t leq 100 1 leq n leq 100 Output Format For each test case, print a single integer on a new line that denotes the area of the largest square subgrid of containing only 1s. Sample Input 3 4 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 5 1 0 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 Sample Output 4 4 0 Explanation For the first test case, the largest square subgrid of 1s has a side length of 2, so the area is 2 times 2 = 4. For the second test case, there are two largest squares, each of size 2 times 2, so the area is 4. For the third test case, there are no 1s, so the largest square subgrid area is 0.","solution":"def maximalSquare(t, test_cases): results = [] for case in test_cases: n, grid = case if n == 0: results.append(0) continue dp = [[0] * (n+1) for _ in range(n+1)] max_side = 0 for i in range(1, n+1): for j in range(1, n+1): if grid[i-1][j-1] == 1: dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) results.append(max_side * max_side) return results"},{"question":"**Emergency Signal Relay** You are given a city grid where each cell is either a building `B`, a street `S`, or a fire station `F`. The signal from a fire station can be relayed through streets to reach buildings, but cannot pass through other buildings. To ensure efficient emergency services, the city needs to determine which buildings can be reached by at least one fire station signal and which cannot. Write a program that determines the number of buildings that cannot be reached by any fire station signal. -----Input----- The input starts with two integers, h and w (1 le h, w le 1000), representing the height and width of the grid respectively. The next h lines each contain a string of length w consisting of characters `B`, `S`, and `F`, representing the grid cells. -----Output----- Output a single integer representing the number of buildings that cannot be reached by any fire station signal. -----Examples----- Sample Input 1: 4 5 BBSSB BFFSB BBSSB BSSFB Sample Output 1: 2 Sample Input 2: 3 3 BSB BFB BSB Sample Output 2: 0","solution":"def bfs_reachable_buildings(grid, h, w): from collections import deque fire_stations = [] buildings = set() for i in range(h): for j in range(w): if grid[i][j] == \'F\': fire_stations.append((i, j)) elif grid[i][j] == \'B\': buildings.add((i, j)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def can_reach_buildings(): visited = set() queue = deque(fire_stations) while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < h and 0 <= ny < w and (nx, ny) not in visited: if grid[nx][ny] == \'S\': queue.append((nx, ny)) elif grid[nx][ny] == \'B\': buildings.discard((nx, ny)) visited.add((nx, ny)) can_reach_buildings() return len(buildings) # Function to process input and output def unreachable_buildings(h, w, city_map): grid = [list(row) for row in city_map] return bfs_reachable_buildings(grid, h, w)"},{"question":"Alex is designing a complex maze game that has numerous rooms interconnected by corridors. Each room is marked with a number from 1 to N, and each corridor connects two distinct rooms. Alex must ensure that it\'s possible to travel from any room to any other room. However, he also wants to maximize the number of rooms you have to pass through to go from one room to another in the worst-case scenario. To help Alex with this, write a program that, given the number of rooms (N) and the corridors between them (edges), determines the length of the longest shortest path between any two rooms (the diameter of the maze\'s graph). In other words, find the maximum distance between any pair of rooms, where the distance is defined as the minimum number of corridors that must be traversed to get from one room to the other. Input Format: The first line contains an integer T, the number of test cases. The first line of each test case contains two space-separated integers N and E, representing the number of rooms and the number of corridors, respectively. Each of the next E lines contains two space-separated integers u and v, indicating a corridor between rooms u and v. Output Format: For each test case, output the length of the longest shortest path (diameter) on a separate line. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ E ≤ 2000 SAMPLE INPUT 2 5 5 1 2 1 3 2 4 3 4 4 5 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT 3 2 Explanation: Sample Case 1: In this maze, the longest shortest path is from room 1 to room 5 through the path 1 -> 3 -> 4 -> 5. Thus the diameter is 3. Sample Case 2: In this maze, any room is at most 2 corridors away from any other room, so the diameter is 2.","solution":"from collections import deque def bfs_distance(start_node, adj_list, N): Perform a breadth-first search to find the shortest path from start_node to all other nodes. Returns the maximum distance found. distances = [-1] * (N + 1) distances[start_node] = 0 queue = deque([start_node]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) # Return the maximum distance found from start_node to any other node return max(distances) def find_diameter(N, edges): Given the number of rooms N and edges, find the diameter of the maze. adj_list = [[] for _ in range(N + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) max_distance = 0 for node in range(1, N + 1): max_distance = max(max_distance, bfs_distance(node, adj_list, N)) return max_distance def process_input(T, test_cases): results = [] for i in range(T): N, E = test_cases[i][0] edges = test_cases[i][1] results.append(find_diameter(N, edges)) return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N, E = map(int, input_lines[index].strip().split()) edges = [tuple(map(int, line.strip().split())) for line in input_lines[index + 1:index + 1 + E]] test_cases.append(((N, E), edges)) index += E + 1 results = process_input(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"You are given an integer array A of length N. You need to process Q queries of the following types. Each query is represented by two integers, T and X: * T=1: Add value X at the end of the array A. * T=2: Remove the last element from the array A. * T=3: Increment every element in the array A by X. * T=4: Multiply every element in the array A by X. * T=5: Print the minimum value in the array A. Constraints: * 1 ≤ N ≤ 10^5 * 1 ≤ Q ≤ 10^5 * 1 ≤ A[i] ≤ 10^9, initially * 1 ≤ X ≤ 10^9 * 1 ≤ T ≤ 5 * All values in the input are integers. Input Input is given from Standard Input in the following format: ``` N Q A_1 A_2 ... A_N T_1 X_1 T_2 X_2 ... T_Q X_Q ``` Output For each query with T=5, print the answer on a new line. Example Input: ``` 5 5 3 1 4 1 5 1 9 3 2 5 0 4 3 5 0 ``` Output: ``` 1 6 ``` Explanation: After the initial array `A = [3, 1, 4, 1, 5]`: 1. Adding 9 results in `A = [3, 1, 4, 1, 5, 9]`. 2. Incrementing every element by 2 results in `A = [5, 3, 6, 3, 7, 11]`. 3. The minimum value in the array is 3. 4. Multiplying every element by 3 results in `A = [15, 9, 18, 9, 21, 33]`. 5. The minimum value in the array is 9.","solution":"def process_queries(N, Q, A, queries): results = [] for T, X in queries: if T == 1: A.append(X) elif T == 2: if A: A.pop() elif T == 3: A = [a + X for a in A] elif T == 4: A = [a * X for a in A] elif T == 5: if A: results.append(min(A)) return results"},{"question":"In an online multiplayer game, there are numerous quests that players can undertake to earn rewards. Each quest has a certain quest ID and a predefined difficulty level that ranges from 1 to 10. Players tend to form groups to tackle these quests, and each group can consist of 2 to 5 players. Each player in the group has a skill level that can also vary from 1 to 10. To successfully complete a quest, the average skill level of the group must be at least equal to the quest’s difficulty level. Given the quest IDs and their respective difficulty levels, followed by the list of players with their skill levels, your task is to determine the maximum number of quests that can be completed by forming groups according to the criteria mentioned above. Each player can be part of one and only one group for the purpose of this problem. The goal is to maximize the number of quests completed. -----Input----- The first line contains an integer Q (1 le Q le 1000) representing the number of quests. Each of the following Q lines contains a quest ID (a string) and its difficulty level (an integer from 1 to 10). The next line contains an integer P (2 le P le 1000) representing the number of players. Each of the following P lines contains an integer representing the player’s skill level (an integer from 1 to 10). -----Output----- The output should contain a single integer, the maximum number of quests that can be completed by forming valid groups. -----Examples----- Sample Input: 5 Q1 5 Q2 7 Q3 6 Q4 4 Q5 8 8 6 8 5 7 5 4 2 9 Sample Output: 3 Sample Input: 2 Q1 6 Q2 3 4 5 7 3 6 Sample Output: 2","solution":"from itertools import combinations def max_completed_quests(quests, players): def can_complete_group(group, difficulty): return sum(group) >= difficulty * len(group) quest_difficulties = sorted([difficulty for _, difficulty in quests], reverse=True) player_skills = sorted(players, reverse=True) completed_quests = 0 for difficulty in quest_difficulties: for group_size in range(2, 6): for group in combinations(player_skills, group_size): if can_complete_group(group, difficulty): player_skills = [p for p in player_skills if p not in group] completed_quests += 1 break if len(player_skills) < 2: return completed_quests return completed_quests"},{"question":"You are organizing a tournament where n players are competing in a series of matches. Each player is assigned a unique skill rating, and all players compete until there is a single champion. The players are matched in pairs from left to right in the order they appear. If there is an odd number of players, the player without a match automatically goes to the next round. In each pair, the player with the higher skill rating wins and moves to the next round, while the player with the lower skill rating is eliminated. Your task is to determine the order of skill ratings for the players who make it to the final round and who wins the tournament. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of players. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the skill ratings of the players. -----Output----- Print a single integer — the skill rating of the tournament champion. -----Example----- Input 5 4 1 7 3 2 Output 7 Input 6 5 3 2 8 6 4 Output 8 Input 3 6 1 9 Output 9 -----Note----- In the first example, players are matched as follows: - Round 1: (4 vs 1) -> 4 wins, (7 vs 3) -> 7 wins - The player 2 without a match goes to the next round. - Round 2: (4 vs 7) -> 7 wins, the player 2 without a match moves to the final round - Final round: (7 vs 2) -> 7 wins In the second example, players are matched as follows: - Round 1: (5 vs 3) -> 5 wins, (2 vs 8) -> 8 wins, (6 vs 4) -> 6 wins - Round 2: (5 vs 8) -> 8 wins, the player 6 without a match moves to the final round - Final round: (8 vs 6) -> 8 wins","solution":"def tournament_champion(n, skills): Determine the champion of the tournament. Args: n (int): The number of players. skills (list of int): The skill ratings of the players. Returns: int: The skill rating of the tournament champion. while len(skills) > 1: next_round = [] for i in range(0, len(skills) - 1, 2): if skills[i] > skills[i + 1]: next_round.append(skills[i]) else: next_round.append(skills[i + 1]) if len(skills) % 2 == 1: next_round.append(skills[-1]) skills = next_round return skills[0]"},{"question":"You are given a grid with `m` rows and `n` columns, where each cell contains an integer representing the number of gold coins in that cell. Your task is to find the maximum number of gold coins you can collect by starting from the top-left cell and moving to the bottom-right cell. You can only move to the right or down from any cell. Example: Input: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ``` 12 ``` Explanation: The optimal path is 1 → 3 → 5 → 2 → 1, yielding a total of 12 coins. To solve this problem, you need to write a function `maxGold` that takes a grid as its argument and returns the maximum number of gold coins you can collect. Function signature: `def maxGold(grid: List[List[int]]) -> int:` Constraints: - `m == len(grid)` - `n == len(grid[0])` - `1 <= m, n <= 100` - `0 <= grid[i][j] <= 100` You can assume the grid will always have at least one cell.","solution":"from typing import List def maxGold(grid: List[List[int]]) -> int: Returns the maximum number of gold coins that can be collected from the top-left to the bottom-right cell. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"You are given an array of integers. Your task is to determine the smallest positive integer that is missing from the array. The array can contain both positive and negative numbers, and there could be duplicate values. To clarify, the smallest positive integer is a number greater than zero. For example, if the array is `[1, 2, 0]`, then the smallest positive integer not in the array is `3`. If the array is `[3, 4, -1, 1]`, then the smallest positive integer not in the array is `2`. Your solution should be efficient in terms of time and space complexity. -----Input----- The first line of the input contains an integer t (1 le t le 10^5) – the number of test cases. The next 2t lines describe each test case. The first line of each test case contains an integer n (1 le n le 10^5) – the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n which are the elements of the array. It is guaranteed that the total number of integers in all test cases does not exceed 10^6. -----Output----- For each test case, print the smallest positive integer that is missing from the given array. -----Example----- Input 4 3 1 2 0 4 3 4 -1 1 5 7 8 9 11 12 1 1 Output 3 2 1 2","solution":"def smallest_missing_positive_integer(arr): Function to find the smallest missing positive integer from the given array. s = set(arr) i = 1 while i in s: i += 1 return i def find_missing_in_test_cases(test_cases): result = [] for case in test_cases: result.append(smallest_missing_positive_integer(case)) return result def process_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] i = 1 for _ in range(t): n = int(lines[i]) arr = list(map(int, lines[i+1].split())) test_cases.append(arr) i += 2 return find_missing_in_test_cases(test_cases)"},{"question":"Write a function that takes a binary tree and returns a list of nodes visible from the right side view of the binary tree. The right side view of a binary tree is the set of nodes visible when the tree is viewed from the right side. Input: You have to complete the method which takes 1 argument: the root of the binary tree. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Output: Your function should return a list containing the values of the nodes visible from the right side view. User Task: The task is to complete the function rightSideView() which should return the right side view of the given binary tree. Constraints: 1 <= T <= 50 1 <= Number of nodes in binary tree <= 100 1 <= Node value <= 1000 Example: Input: 2 [1, 2, 3, null, 5, null, 4] [1, 2, 3] Output: [1, 3, 4] [1, 3] Explanation: Testcase 1: The right side view of the binary tree [1, 2, 3, null, 5, null, 4] contains nodes 1, 3, and 4. Testcase 2: The right side view of the binary tree [1, 2, 3] contains nodes 1 and 3.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def rightSideView(root): from collections import deque if not root: return [] queue = deque([root]) right_view = [] while queue: level_size = len(queue) for i in range(level_size): node = queue.popleft() if i == level_size - 1: # The rightmost node of the current level right_view.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return right_view"},{"question":"Peter plays a game where he has a string S consisting of lowercase English letters. For every turn he makes, he can perform the following operation exactly once: - Select any non-empty substring of S and reverse it. Peter wants to know the minimum number of operations required to turn string S into a palindrome. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the length of string S. - The second line contains a string S of length N consisting of lowercase English letters. -----Output----- - For each test case, output a single line containing an integer corresponding to the minimum number of operations required to turn string S into a palindrome. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 -----Subtasks----- - Subtask #1 (20 points) : N ≤ 10 - Subtask #2 (30 points) : N ≤ 100 - Subtask #3 (50 points) : N ≤ 105 -----Example----- Input: 2 3 abc 4 abca Output: 2 1 -----Explanation----- Example case 1. To make \\"abc\\" a palindrome, Peter can perform the following operations: 1. Reverse the substring \\"abc\\" once to get \\"cba\\". 2. Reverse the substring \\"b\\" to restore it to \\"aba\\". Alternatively, Peter can start by reversing the substring \\"ab\\" to get \\"bac\\", then reverse substring \\"ac\\" to get \\"aba\\". Example case 2. To make \\"abca\\" a palindrome, Peter can reverse the substring \\"a\\" \\"b\\" or \\"cba\\" to get \\"abac\\". Reversing a single character yields two palindromic results: \\"abaa\\" or \\"cbac\\".","solution":"def min_operations_to_palindrome(T, test_cases): results = [] for case in test_cases: N, S = case reversals = [[0 for _ in range(N)] for _ in range(N)] for length in range(2, N + 1): for i in range(N - length + 1): j = i + length - 1 if S[i] == S[j]: reversals[i][j] = reversals[i + 1][j - 1] else: reversals[i][j] = min(reversals[i + 1][j], reversals[i][j - 1]) + 1 results.append(reversals[0][N - 1]) return results"},{"question":"You\'re planning a road trip and want to estimate your total travel time. You have a list of cities you\'ll pass through, and for each city, you\'ve noted the distance to the next city in kilometers and the average speed you plan to drive in km/h. Write a function `calculate_travel_time` that takes in a list of tuples, where each tuple contains two values: the distance to the next city and the average speed. The function should return the total travel time for the trip in hours, rounded to 2 decimal places. For example, given the input: ```python [(150, 75), (120, 60), (300, 100)] ``` The distances and speeds between cities are: - 150 km at 75 km/h - 120 km at 60 km/h - 300 km at 100 km/h You\'d calculate the time for each segment and sum them up: - 150 / 75 = 2 hours - 120 / 60 = 2 hours - 300 / 100 = 3 hours Total travel time is 2 + 2 + 3 = 7 hours. So the function should return `7.00`. Function signature: ```python def calculate_travel_time(trip: List[Tuple[int, int]]) -> float: # Your code here ```","solution":"from typing import List, Tuple def calculate_travel_time(trip: List[Tuple[int, int]]) -> float: Calculate the total travel time for a trip given distances and average speeds between cities. Parameters: trip (List[Tuple[int, int]]): A list of tuples where each tuple contains: - distance to the next city in kilometers (int) - average speed in km/h (int) Returns: float: Total travel time for the trip in hours, rounded to 2 decimal places. total_time = 0.0 for distance, speed in trip: total_time += distance / speed return round(total_time, 2)"},{"question":"**Balanced Parentheses with Wildcards** In this problem, you are given a string `s` consisting of characters `(`, `)`, and `*`. The asterisks `*` can be treated as either an open parenthesis `(`, a close parenthesis `)`, or an empty string `\\"\\"`. Write a function to determine if the given string can be made valid by treating each asterisk `*` as any of the mentioned characters. A string is considered valid if parentheses are balanced. This means that: 1. Every open parenthesis `(` must have a corresponding close parenthesis `)` and vice versa. 2. Parentheses must close in the correct order. -----Input----- - The input consists of a single string `s` of length `n` (1 le n le 100). - The string `s` contains only the characters `(`, `)`, and `*`. -----Output----- Return `true` if the string can be made valid by replacing the asterisks `*` with `(`, `)`, or an empty string `\\"\\"`, and `false` otherwise. -----Examples----- Input ``` ()* ``` Output ``` true ``` Input ``` (*) ``` Output ``` true ``` Input ``` (*(*)) ``` Output ``` true ``` Input ``` ((*) ``` Output ``` true ``` Input ``` ((*() ``` Output ``` false ``` -----Note----- In the first example, by treating the `*` as an empty string, the string becomes `()`, which is valid. In the second example, by treating the `*` as an empty string, the string becomes `()`, which is valid. In the third example, by treating the first `*` as `(` and the second `*` as `)`, the string becomes `((()))`, which is valid. In the fourth example, by treating the `*` as `)`, the string becomes `(())`, which is valid. In the fifth example, no matter how you replace or remove the `*`, you cannot balance the parentheses, hence the result is `false`.","solution":"def checkValidString(s: str) -> bool: Determines whether a string containing parentheses and wildcards is valid, where wildcards can be either \'(\' or \')\' or \'\'. left_balance = 0 right_balance = 0 n = len(s) for i in range(n): # Check balance from left to right if s[i] == \'(\' or s[i] == \'*\': left_balance += 1 else: left_balance -= 1 # Check balance from right to left if s[n - 1 - i] == \')\' or s[n - 1 - i] == \'*\': right_balance += 1 else: right_balance -= 1 # If the number of unbalanced left parentheses ever exceeds the possible # number of closing right parentheses, it\'s not valid. if left_balance < 0 or right_balance < 0: return False return True"},{"question":"Given a list of integers prices where prices[i] represents the cost of a given item on day i, and an integer k representing the maximum number of buy-sell transactions allowed, write a function to find the maximum profit you can achieve from completing at most k transactions. You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). Example 1: Input: prices = [2, 4, 3, 6, 1, 3], k = 1 Output: 4 Explanation: Buy on day 1 (price = 2) and sell on day 4 (price = 6), profit = 6-2 = 4. Example 2: Input: prices = [5, 2, 7, 1, 4, 3], k = 2 Output: 8 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 7), profit = 7-2 = 5. Then, buy on day 4 (price = 1) and sell on day 5 (price = 4), profit = 4-1 = 3. Total profit = 5+3 = 8. Example 3: Input: prices = [3, 2, 6, 5, 0, 3], k = 2 Output: 7 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then, buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0=3. Total profit = 4+3 = 7. Constraints: 1 <= prices.length <= 100 1 <= prices[i] <= 100 1 <= k <= 10","solution":"def maxProfit(k, prices): Returns the maximum profit that can be made with at most k buy-sell transactions. if not prices or k == 0: return 0 n = len(prices) # If k is greater or equal to half of the number of days, it\'s profitable to take every opportunity to buy and sell if k >= n // 2: max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit # dp[i][j] represents the max profit using at most i transactions by the jth day (0-based index) dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -prices[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - prices[j]) return dp[k][-1]"},{"question":"You are given a binary tree with n nodes. The binary tree is represented as an array where the i-th element is the value of the i-th node. You need to find the sum of the values of all nodes in the subtree rooted at each node. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n integers separated by spaces, where the i-th integer represents the value of the i-th node (values of the nodes are in the range from -1,000,000 to 1,000,000). Each of the next n - 1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) — the endpoints of an edge in the tree, representing the parent-child relationship in the binary tree. Output Print n integers. The i-th integer should be the sum of the values of all nodes in the subtree rooted at the i-th node. Examples Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output 15 2 12 4 5 Input 3 3 -2 1 1 2 1 3 Output 2 -2 1 Note In the first example, the subtree rooted at node 1 contains all nodes, so the sum is 1 + 2 + 3 + 4 + 5 = 15. The subtree rooted at node 3 contains nodes 3, 4, and 5, so the sum is 3 + 4 + 5 = 12. The subtree rooted at node 4 contains only node 4, so the sum is 4. In the second example, the subtree rooted at node 1 is the entire tree, so the sum is 3 + (-2) + 1 = 2. The subtree rooted at node 2 contains only node 2, so the sum is -2. The subtree rooted at node 3 contains only node 3, so the sum is 1.","solution":"def subtree_sums(n, values, edges): from collections import defaultdict # Build the tree/graph tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store the sum of subtrees subtree_sum = [0] * (n + 1) visited = [False] * (n + 1) # DFS function to calculate the subtree sums def dfs(node): visited[node] = True total = values[node - 1] # the values array is 0-indexed for neighbor in tree[node]: if not visited[neighbor]: total += dfs(neighbor) subtree_sum[node] = total return total dfs(1) # Start DFS from node 1 which is commonly the root in typical problems # Return the required sums skipping index 0 as node indexing starts from 1 return subtree_sum[1:]"},{"question":"Alice is given an array of integers representing the scores of different players in a tournament. The scores are in descending order, i.e., the highest score is at the first index and the lowest score is at the last index. Alice is asked to determine the rank of various players based on their scores. The rank is determined by the position in the array, with the highest score having rank 1 and the next distinct lower score having the next rank, and so on. Additionally, Alice wants to know the rank of new players who are joining the tournament with given scores. For each new player\'s score, Alice has to determine what their rank would be if they joined the tournament with their score among the existing scores. Given the scores of the existing players in descending order, and the scores of the new players, your task is to help Alice determine the rank of each new player. Example: Input: scores = [100, 90, 90, 80, 75, 60] new_player_scores = [50, 65, 77, 90, 102] Output: [6, 5, 4, 2, 1] Explanation: - A score of 50 would be ranked 6th. - A score of 65 would be ranked 5th. - A score of 77 would be ranked 4th. - A score of 90 would be ranked 2nd (since 90 already exists twice in the scores, both ranked 2). - A score of 102 would be ranked 1st (since it\'s higher than the highest existing score). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findPlayerRanks()` which takes the array `scores[]` and `new_player_scores[]` as input parameters and returns an array of ranks for each new player score. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N, M ≤ 10^5 1 ≤ scores[i], new_player_scores[i] ≤ 10^9","solution":"def findPlayerRanks(scores, new_player_scores): Determines the rank of each new player based on their score among existing scores. Parameters: scores (List[int]): A list of integers representing the existing scores in descending order. new_player_scores (List[int]): A list of integers representing the new player\'s scores. Returns: List[int]: A list of integers representing the ranks of the new players. # Remove duplicates from scores and create a unique list of scores in descending order unique_scores = sorted(set(scores), reverse=True) # Result list result_ranks = [] # For each new player score, determine the rank for player_score in new_player_scores: rank = len(unique_scores) + 1 # Default rank if player_score is the lowest for i, score in enumerate(unique_scores): if player_score >= score: rank = i + 1 break result_ranks.append(rank) return result_ranks"},{"question":"Write a function named \\"wordCount\\" that takes a single string as input and returns a dictionary where keys are unique words in the string, and values are the number of times each word appears in the string. Consider words as being separated by spaces and ignore case (i.e., treat \\"Word\\" and \\"word\\" as the same word). Ignore punctuation. Examples of inputs and subsequent outputs: ``` \\"Hello world hello\\" -> {\'hello\': 2, \'world\': 1} \\"This is a test. This is only a test.\\" -> {\'this\': 2, \'is\': 2, \'a\': 2, \'test\': 2, \'only\': 1} ```","solution":"import string def wordCount(text): Returns a dictionary with unique words as keys and their count as values. Words are separated by spaces and case is ignored. Punctuation is ignored. # Convert text to lowercase and remove punctuation text = text.lower() translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Split the text into words words = text.split() # Create a dictionary to hold word counts word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"Anna loves playing with numbers. She especially enjoys working with numbers that have interesting properties. Recently, she has been fascinated by numbers whose sum of digits is equal to a specific value, S. She wants to find the smallest number that is greater than or equal to a given number X and has a sum of digits equal to S. Your task is to help Anna by writing a program that finds this smallest number. Input: The input consists of two integers, X and S (1 ≤ X ≤ 10^50 and 1 ≤ S ≤ 450). Output: Print the smallest number greater than or equal to X that has a sum of digits equal to S. SAMPLE INPUT 100 5 SAMPLE OUTPUT 104 SAMPLE INPUT 10 9 SAMPLE OUTPUT 18 Explanation: In the first sample, 104 is the smallest number greater than or equal to 100 whose digits sum up to 5. In the second sample, 18 is the smallest number greater than or equal to 10 whose digits sum up to 9.","solution":"def sum_of_digits(n): Returns the sum of digits of a given number n. return sum(int(digit) for digit in str(n)) def find_smallest_number(X, S): Finds the smallest number greater than or equal to X that has a sum of digits equal to S. current_number = X while True: if sum_of_digits(current_number) == S: return current_number current_number += 1"},{"question":"AutoMart, a vehicle dealership, has a database for managing its inventory. Each vehicle is represented as an object containing the following properties: `make` (the manufacturer\'s name), `model` (the vehicle\'s model), `year` (the year it was made), and `price` (the cost of the vehicle). AutoMart records a vehicle when it is added to the inventory and removes it when it is sold. You are tasked with developing a system that will help AutoMart calculate the total value of vehicles currently in its inventory and determine the number of vehicles for a given make. **Task** Create a class `AutoMart` with the following methods: 1. `add_vehicle(make: str, model: str, year: int, price: int) -> None`: Adds a new vehicle to the inventory. 2. `remove_vehicle(make: str, model: str) -> bool`: Removes a vehicle from the inventory. Returns `True` if the vehicle was successfully removed, or `False` if the vehicle was not found. 3. `inventory_value() -> int`: Returns the total value of all vehicles currently in the inventory. 4. `count_by_make(make: str) -> int`: Returns the number of vehicles of the specified make in the inventory. # Input Format For method 1: - `make` (str): Manufacturer\'s name. - `model` (str): Vehicle\'s model. - `year` (int): Year the vehicle was made. - `price` (int): Cost of the vehicle. For method 2: - `make` (str): Manufacturer\'s name. - `model` (str): Vehicle\'s model. For method 4: - `make` (str): Manufacturer\'s name. # Output Format For method 1: - No output. For method 2: - `True` if the vehicle was successfully removed, or `False` if the vehicle was not found. For method 3: - An integer representing the total value of vehicles in the inventory. For method 4: - An integer representing the number of vehicles of the specified make in the inventory. # Constraints 1. The make and model of each vehicle are strings containing alphanumeric characters, with lengths ranging from 1 to 50. 2. The `year` is an integer between 1886 and 2100. 3. The `price` is a non-negative integer not exceeding 10^6. 4. The system should be able to handle up to 100,000 vehicles in the inventory at any time. # Example ```python automart = AutoMart() automart.add_vehicle(\\"Toyota\\", \\"Corolla\\", 2018, 15000) automart.add_vehicle(\\"Honda\\", \\"Civic\\", 2020, 20000) automart.add_vehicle(\\"Toyota\\", \\"Camry\\", 2019, 18000) print(automart.inventory_value()) # Output: 53000 print(automart.count_by_make(\\"Toyota\\")) # Output: 2 print(automart.remove_vehicle(\\"Honda\\", \\"Civic\\")) # Output: True print(automart.inventory_value()) # Output: 33000 print(automart.count_by_make(\\"Honda\\")) # Output: 0 print(automart.remove_vehicle(\\"Honda\\", \\"Accord\\")) # Output: False ```","solution":"class Vehicle: def __init__(self, make, model, year, price): self.make = make self.model = model self.year = year self.price = price class AutoMart: def __init__(self): self.inventory = [] def add_vehicle(self, make: str, model: str, year: int, price: int) -> None: self.inventory.append(Vehicle(make, model, year, price)) def remove_vehicle(self, make: str, model: str) -> bool: for i, vehicle in enumerate(self.inventory): if vehicle.make == make and vehicle.model == model: del self.inventory[i] return True return False def inventory_value(self) -> int: return sum(vehicle.price for vehicle in self.inventory) def count_by_make(self, make: str) -> int: return sum(1 for vehicle in self.inventory if vehicle.make == make)"},{"question":"A tree is a connected acyclic graph. In a tree, any two vertices are connected by exactly one path. Given an undirected tree with ( N ) vertices labeled from ( 1 ) to ( N ). You need to find the K-th ancestor of a given node in the tree. Input Format The first line contains a single integer, ( N ) (1 ≤ ( N ) ≤ ( 10^5 )), the number of vertices in the tree. Each of the next ( N-1 ) lines contains two integers, ( u ) and ( v ) (1 ≤ ( u ), ( v ) ≤ ( N )), denoting an edge between vertices ( u ) and ( v ). The next line contains a single integer, ( Q ) (1 ≤ ( Q ) ≤ ( 10^5 )), the number of queries. Each of the next ( Q ) lines contains two integers, ( x ) and ( k ) (1 ≤ ( x ) ≤ ( N ), 0 ≤ ( k ) ≤ ( N-1 )), a query asking for the K-th ancestor of node ( x ). Output Format For each query, output the label of the K-th ancestor of node ( x ). If the K-th ancestor does not exist, output -1. Sample Input 7 1 2 1 3 2 4 2 5 3 6 3 7 4 4 1 5 2 6 1 6 3 Sample Output 2 1 3 -1 Explanation - In the first query, the ancestors of 4 are [4, 2, 1]. The 1-th ancestor is 2. - In the second query, the ancestors of 5 are [5, 2, 1]. The 2-th ancestor is 1. - In the third query, the ancestors of 6 are [6, 3, 1]. The 1-th ancestor is 3. - In the fourth query, the ancestors of 6 are [6, 3, 1]. There is no 3-th ancestor, so the output is -1.","solution":"from collections import defaultdict, deque def preprocess_tree(N, edges): Preprocess the tree to build the parent and depth information. graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) parent = [-1] * (N + 1) depth = [-1] * (N + 1) parent[1] = 0 depth[1] = 0 # BFS to populate depth and parent information queue = deque([1]) while queue: node = queue.popleft() for neighbor in graph[node]: if depth[neighbor] == -1: depth[neighbor] = depth[node] + 1 parent[neighbor] = node queue.append(neighbor) # Binary lifting table LOG = 17 # As 2^17 > 10^5 up = [[-1] * (LOG + 1) for _ in range(N + 1)] for v in range(1, N + 1): up[v][0] = parent[v] for j in range(1, LOG + 1): for v in range(1, N + 1): if up[v][j - 1] != -1: up[v][j] = up[up[v][j - 1]][j - 1] return depth, up def find_kth_ancestor(N, depth, up, x, k): Find the k-th ancestor of node x. LOG = 17 if k > depth[x]: return -1 for j in range(LOG + 1): if k & (1 << j): x = up[x][j] if x == -1: break return x def process_queries(N, edges, queries): Process all the queries to find K-th ancestors. depth, up = preprocess_tree(N, edges) results = [] for x, k in queries: results.append(find_kth_ancestor(N, depth, up, x, k)) return results"},{"question":"Given a list of integers, you are required to determine the number of triplets (i, j, k) such that the elements at those positions in the list form an arithmetic progression, where i < j < k. Input Format The first line of the input contains an integer n, the number of elements in the list. The second line contains n space-separated integers, representing the elements of the list. Constraints 1 ≤ n ≤ 2000 1 ≤ list[i] ≤ 10000 Output Format Output a single integer, which is the number of triplets (i, j, k) that form an arithmetic progression. SAMPLE INPUT 6 1 3 5 7 9 11 SAMPLE OUTPUT 6 Explanation In this example, the triplets that form an arithmetic progression are: (0, 1, 2) -> (1, 3, 5) (1, 2, 3) -> (3, 5, 7) (2, 3, 4) -> (5, 7, 9) (3, 4, 5) -> (7, 9, 11) (0, 2, 4) -> (1, 5, 9) (1, 3, 5) -> (3, 7, 11)","solution":"def count_arithmetic_triplets(arr): Returns the number of triplets (i, j, k) such that the elements at those positions in the list form an arithmetic progression, where i < j < k. n = len(arr) count = 0 for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[i] + arr[k] == 2 * arr[j]: count += 1 return count"},{"question":"In a company, each department tracks the performance of its employees. Performance scores are assigned to employees on a scale of 1 to 100. At the end of each month, the company wants to reward consistently high-performing employees, defined as those whose performance scores are in the top 25% of all scores recorded within the department. Given the performance scores of the employees in a department, determine the scores that fall in the top 25% of the list. If there are multiple scores that could be considered in the top 25% (due to ties), include all such scores. The scores should be reported in descending order. Input Format The first line contains a single integer M, the number of employees in the department. The next line contains M integers: P(0), P(1), P(2), ..., P(M-1) separated by space, where P(i) represents the performance score of the i-th employee. Output Format Print the performance scores that are in the top 25% of the list, in descending order. If no scores meet this criterion, print \\"No top performers\\". Constraints 1 ≤ M ≤ 1000 1 ≤ P(i) ≤ 100 SAMPLE INPUT 8 78 95 88 84 71 67 77 92 SAMPLE OUTPUT 95 92 SAMPLE INPUT 4 55 60 65 70 SAMPLE OUTPUT 70 SAMPLE INPUT 5 50 50 50 50 50 SAMPLE OUTPUT 50","solution":"def top_performers(scores): Returns the performance scores that are in the top 25% of the list, in descending order. If no scores meet this criterion, returns \\"No top performers\\". if not scores: return \\"No top performers\\" scores.sort(reverse=True) n = len(scores) top_25_threshold_index = max(n // 4, 1) # At least one score in top 25% if n == 1: return scores[:1] top_25_scores = [] threshold_score = scores[top_25_threshold_index - 1] # Last score to make the cut for top 25% for score in scores: if score >= threshold_score: top_25_scores.append(score) else: break return top_25_scores"},{"question":"A company is organizing a team building activity where employees are divided into several groups. Each group can have up to `g` employees. The company wants to ensure that each group has at least one member who is different from the rest by having a unique skill set. Each employee\'s skill set can be represented as an integer ID. As the HR manager, your task is to assign employees to the groups such that the requirement is fulfilled. Input The first line contains two integers `n` (1 ≤ n ≤ 100) — the number of employees and `g` (1 ≤ g ≤ 50) — the maximum number of employees in each group. The second line contains `n` space-separated integers representing the skill set IDs of the employees. Output If it is possible to divide the employees into groups satisfying the requirements, output \\"YES\\" followed by the group assignments. Each group should be represented as a list of indices (1-indexed). If it is not possible, output \\"NO\\". Examples Input 5 2 1 2 3 4 5 Output YES 1 2 3 4 5 Input 4 3 1 1 1 1 Output NO Input 6 3 1 2 2 3 3 1 Output YES 1 2 6 3 4 5 Note: In the output for each example, the specific groups provided are examples; the actual output could vary as long as the constraints are met. The unique employee must have a different skill ID compared to all others in their group, ensuring no empty groups and no group size exceeding `g`.","solution":"def assign_groups(n, g, skill_ids): from collections import defaultdict skill_count = defaultdict(int) for skill in skill_ids: skill_count[skill] += 1 if max(skill_count.values()) > g: return \\"NO\\" groups = [[] for _ in range((n + g - 1) // g)] group_index = 0 for i, skill in enumerate(skill_ids): groups[group_index].append(i + 1) group_index = (group_index + 1) % len(groups) return \\"YESn\\" + \\"n\\".join(\\" \\".join(map(str, group)) for group in groups) # Example cases: print(assign_groups(5, 2, [1, 2, 3, 4, 5])) # Expected Output: YES [1 2] [3 4] [5] print(assign_groups(4, 3, [1, 1, 1, 1])) # Expected Output: NO print(assign_groups(6, 3, [1, 2, 2, 3, 3, 1])) # Expected Output: YES [1 2 6] [3 4] [5]"},{"question":"You are leading a team tasked with designing a digital wallet that tracks the balances of users and performs transactions. Each user has a unique identifier, and the wallet should support the following operations: 1. `CREATE_USER UID INITIAL_BALANCE` - Create a new user with a unique identifier `UID` and an initial balance `INITIAL_BALANCE`. - If the user already exists, ignore this operation. 2. `DEPOSIT UID AMOUNT` - Deposit the specified `AMOUNT` into the user\'s account identified by `UID`. 3. `WITHDRAW UID AMOUNT` - Withdraw the specified `AMOUNT` from the user\'s account identified by `UID`. - If the user\'s balance is less than the `AMOUNT`, ignore this operation. 4. `TRANSFER UID1 UID2 AMOUNT` - Transfer the specified `AMOUNT` from the user identified by `UID1` to the user identified by `UID2`. - If `UID1`\'s balance is less than the `AMOUNT`, ignore this operation. 5. `BALANCE UID` - Print the current balance of the user identified by `UID`. Implement the digital wallet that processes a given list of operations as described above. Input: - The first line contains an integer `T`, the number of operations. - The next `T` lines each contain one operation in the format described above. Output: - For each `BALANCE` operation, print the balance of the specified user. Constraints: - `UID` is a string of alphanumeric characters with length up to 20. - `INITIAL_BALANCE`, `AMOUNT` are non-negative integers up to 1,000,000. - Number of operations (`T`) will be between 1 and 1,000, inclusive. SAMPLE INPUT 8 CREATE_USER Alice 5000 CREATE_USER Bob 3000 DEPOSIT Alice 2000 WITHDRAW Bob 500 TRANSFER Alice Bob 1000 BALANCE Alice BALANCE Bob TRANSFER Alice Charlie 3000 SAMPLE OUTPUT 6000 3500 Explanation: 1. A user \\"Alice\\" is created with an initial balance of 5000. 2. A user \\"Bob\\" is created with an initial balance of 3000. 3. Alice deposits 2000 into her account, making her balance 7000. 4. Bob withdraws 500 from his account, making his balance 2500. 5. Alice transfers 1000 to Bob, making Alice\'s balance 6000 and Bob\'s balance 3500. 6. The balance of Alice is requested and printed (6000). 7. The balance of Bob is requested and printed (3500). 8. A transfer from Alice to a non-existent user \\"Charlie\\" is ignored.","solution":"class DigitalWallet: def __init__(self): self.users = {} def create_user(self, uid, initial_balance): if uid not in self.users: self.users[uid] = initial_balance def deposit(self, uid, amount): if uid in self.users: self.users[uid] += amount def withdraw(self, uid, amount): if uid in self.users and self.users[uid] >= amount: self.users[uid] -= amount def transfer(self, uid1, uid2, amount): if (uid1 in self.users and uid2 in self.users and self.users[uid1] >= amount): self.users[uid1] -= amount self.users[uid2] += amount def balance(self, uid): if uid in self.users: return self.users[uid] else: return None def process_operations(operations): wallet = DigitalWallet() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'CREATE_USER\': uid, initial_balance = parts[1], int(parts[2]) wallet.create_user(uid, initial_balance) elif command == \'DEPOSIT\': uid, amount = parts[1], int(parts[2]) wallet.deposit(uid, amount) elif command == \'WITHDRAW\': uid, amount = parts[1], int(parts[2]) wallet.withdraw(uid, amount) elif command == \'TRANSFER\': uid1, uid2, amount = parts[1], parts[2], int(parts[3]) wallet.transfer(uid1, uid2, amount) elif command == \'BALANCE\': uid = parts[1] balance = wallet.balance(uid) if balance is not None: results.append(balance) return results"},{"question":"You are given an array of integers which can be considered as a sequence of jumps on a number line. Each integer in the array represents the jump length from that position. Your task is to determine if it is possible to start from the beginning of the array and reach its end or beyond, using the jumps provided in the array. You can move only forward and cannot move past the last element of the array. -----Input----- The first line of input contains one integer T (1 le T le 10^4) — the number of test cases. For each test case: - The first line contains one integer n (1 le n le 10^5) — the length of the array. - The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^3) — the jump lengths. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if it is possible to reach the end of the array or beyond starting from the first element, otherwise print \\"NO\\". -----Examples----- Input 4 5 2 3 1 1 4 5 3 2 1 0 4 5 0 2 1 0 4 1 0 Output YES NO NO YES -----Note----- Consider the example: In the first test case, starting from the first element: - You can jump 2 steps to the 3rd position (index 2) → jump 1 step to the 4th position (index 3) → jump to the end. In the second test case, starting from the first element: - You can jump 3 steps to the 4th position (index 3) but cannot move further as it contains 0. In the third test case, starting from the first element you cannot jump anywhere (0 steps). In the fourth test case, with only one element, you are already at the end.","solution":"def can_reach_end(test_cases): results = [] for cases in test_cases: n = cases[0] array = cases[1] max_reachable = 0 for i in range(n): if i > max_reachable: results.append(\\"NO\\") break max_reachable = max(max_reachable, i + array[i]) if max_reachable >= n - 1: results.append(\\"YES\\") break else: results.append(\\"YES\\" if max_reachable >= n - 1 else \\"NO\\") return results"},{"question":"Arkady decides to climb a mountain for n consecutive days. Each day, Arkady progresses further up the mountain, reaching a certain altitude. On the i-th day, Arkady reaches a maximum altitude of a_i meters and plants a flag at that altitude if no flag has already been planted there. The flags do not get removed by weather or other factors. Define c_i as the number of new flags planted on the mountain on the i-th day. You need to find the maximum possible sum of c_i over all days. There are no flags planted on the mountain before the first day. -----Input----- The first line contains a single positive integer n (1 ≤ n ≤ 10^5) — the number of days. The second line contains n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the maximum altitude reached by Arkady on each day. -----Output----- Output one single integer — the maximum possible sum of the number of new flags planted on each day. -----Examples----- Input 5 1 2 3 2 4 Output 4 Input 4 5 5 5 2 Output 2 Input 6 1 3 2 4 4 5 Output 5 -----Note----- In the first example, on day 1, Arkady plants a flag at altitude 1. On day 2, a new flag is planted at altitude 2. On day 3, a new flag is planted at altitude 3. On day 4, no new flag is planted since there\'s already a flag at altitude 2 or higher from previous days. On day 5, a new flag is planted at altitude 4. Thus, the total number of new flags is 4. In the second example, a flag is first planted at altitude 5 on day 1. On days 2 and 3, no new flags are planted since there\'s already a flag at altitude 5. On day 4, another new flag is planted at altitude 2. Thus, the total number of new flags is 2.","solution":"def find_max_flags(n, altitudes): Returns the maximum possible sum of new flags planted over n days. Parameters: n : int Number of days. altitudes : list of int List of maximum altitudes reached each day. Returns: int The total number of new flags planted. flags = set() total_flags = 0 for altitude in altitudes: if altitude not in flags: flags.add(altitude) total_flags += 1 return total_flags"},{"question":"Write a program that determines if a string is a valid palindrome permutation. A palindrome permutation is defined as a string that, when any permutation is formed from it, can be a palindrome. A palindrome is a word that reads the same backward as forward. -----Input:----- - The first line of the input contains a single integer T. T denotes the number of test cases. The description of T test cases is as follows. - The next line of the input contains a string S of lowercase alphabets. -----Output:----- - Print \\"Yes\\" if the given string is a valid palindrome permutation, else print \\"No\\". Note: each test case output must be printed on a new line. -----Constraints:----- - 1 leq T leq 10^2 - 1 leq |S| leq 10^3 - Strings contain only lowercase English letters. -----Sample Input:----- 3 civic ivicc hello -----Sample Output:----- Yes Yes No -----Explanation:----- - In the first test case, the string \\"civic\\" is already a palindrome. - In the second test case, the string \\"ivicc\\" can be permuted to form the palindrome \\"civic\\". - In the third test case, the string \\"hello\\" cannot be permuted to form any palindrome.","solution":"def is_palindrome_permutation(s): Determines if the given string s is a valid palindrome permutation. :param s: A string of lowercase English letters. :return: True if the string is a valid palindrome permutation, otherwise False. from collections import Counter # Count the occurrences of each character counter = Counter(s) # A string can form a palindrome if at most one character count is odd odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1 def solve(T, strings): results = [] for s in strings: if is_palindrome_permutation(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a string s consisting of only lowercase alphabets, you need to remove the adjacent pairs of duplicate characters recursively and return the resulting string. If the resulting string also contains adjacent pairs of duplicate characters, continue removing them until no such pairs are left. Example 1: Input: s = \\"abbaca\\" Output: \\"ca\\" Explanation: Initially, remove \\"bb\\" - the string becomes \\"aaca\\". Then, remove \\"aa\\" - the string becomes \\"ca\\". No more adjacent pairs of duplicate characters are found. Example 2: Input: s = \\"azxxzy\\" Output: \\"ay\\" Explanation: Initially, remove \\"xx\\" - the string becomes \\"azzy\\". Then, remove \\"zz\\" - the string becomes \\"ay\\". No more adjacent pairs of duplicate characters are found. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function remove_pairs() that takes a string s and returns the resultant string after removing adjacent pairs of duplicate characters. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ s.length ≤ 10^5 s consists of lowercase English letters.","solution":"def remove_pairs(s): This function removes the adjacent pairs of duplicate characters recursively until no such pairs are left. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to select any substring of the given string and reverse it. You can perform this operation only once. Your task is to determine if it is possible to make the string a palindrome by reversing exactly one substring. Example 1: Input: s = \\"radkar\\" Output: true Explanation: By reversing the substring \\"rk\\" at the end, the string becomes \\"radkar\\", which is a palindrome. Example 2: Input: s = \\"abccba\\" Output: true Explanation: The string is already a palindrome, but we can choose any substring and reverse it to keep it the same. Example 3: Input: s = \\"abcdefg\\" Output: false Explanation: No single reversal of any substring can make \\"abcdefg\\" a palindrome. Constraints: 1. 1 <= s.length <= 10^4 2. s consists of only lowercase English letters.","solution":"def can_be_palindrome_by_one_reverse(s): Determine if the string s can be transformed into a palindrome by reversing exactly one substring. left, right = 0, len(s) - 1 while left < right and s[left] == s[right]: left += 1 right -= 1 if left >= right: return True def is_palindrome_range(l, r): while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1)"},{"question":"Given an integer array of size n, write a function to check if it contains duplicate elements within k distance of each other. Implement the function in such a way that it runs in linear time and uses O(k) extra space. Example 1: Input: nums = [1, 2, 3, 1], k = 3 Output: True Explanation: nums[0] and nums[3] are both 1 and their index difference is 3 which is within the given k distance. Example 2: Input: nums = [1, 0, 1, 1], k = 1 Output: True Example 3: Input: nums = [1, 2, 3, 4], k = 1 Output: False","solution":"def contains_nearby_duplicate(nums, k): Returns True if there are duplicates within k distance in the list nums. seen = {} for i, num in enumerate(nums): if num in seen and i - seen[num] <= k: return True seen[num] = i return False"},{"question":"Paul and Jenny are playing a number transformation game. Initially, a positive integer N is written on a blackboard. The players take turns, starting with Paul. On his or her turn, a player can replace N with N divided by any of its prime factors. The first player to reduce the number to 1 wins the game. For example, if the number is initially 18, the game might progress as follows: Paul replaces 18 with 9 by dividing 18 by its prime factor 2, leaving N = 9 on the blackboard. Jenny replaces 9 with 3 by dividing 9 by its prime factor 3, leaving N = 3 on the blackboard. Paul replaces 3 with 1 by dividing 3 by its prime factor 3, and wins the game. We will say N is a winning number if Paul can always win a game that starts with N on the blackboard, no matter what Jenny does. Given several test cases, for each case, determine if the initial number N is a winning number for Paul. Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of a single integer N. Output For each test case, output one line containing \\"Case #x: Y\\" where x is the case number (starting from 1), and Y is \\"YES\\" if N is a winning number for Paul, and \\"NO\\" otherwise. CONSTRAINTS 1 ≤ T ≤ 100. 2 ≤ N ≤ 1,000,000. SAMPLE INPUT 3 18 10 17 SAMPLE OUTPUT Case #1: YES Case #2: NO Case #3: YES","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_factors(n): Helper function to get the prime factors of a number. factors = [] # Check for number of 2s while n % 2 == 0: factors.append(2) n //= 2 # Check for all odd numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i if n > 2: factors.append(n) return factors def div_game_winner(n): Function to determine if the initial number N is a winning number for Paul. :param n: The initial number :return: \'YES\' if N is a winning number for Paul, \'NO\' otherwise factors = prime_factors(n) moves = len(factors) return \\"YES\\" if moves % 2 == 1 else \\"NO\\" def solve_game(test_cases): results = [] for i, n in enumerate(test_cases): result = div_game_winner(n) results.append(f\\"Case #{i+1}: {result}\\") return results"},{"question":"Given an integer array arr of size n and an integer k, you need to determine if there exists a subsequence in the array whose sum is exactly k. Input format: - First line contains two integers, n and k, the size of the array and the target sum, respectively. - Second line contains n space-separated integers representing the elements of the array. Output format: - Print \\"YES\\" if there exists a subsequence with sum equal to k. Otherwise, print \\"NO\\". Constraints: 1 ≤ n ≤ 100 1 ≤ k ≤ 10^5 1 ≤ arr[i] ≤ 10^3 SAMPLE INPUT 5 9 1 2 3 4 5 SAMPLE OUTPUT YES Explanation There exists a subsequence {4, 5} in the array which sums up to 9.","solution":"def is_subsequence_sum(arr, k): Returns \'YES\' if there exists a subsequence in the array whose sum is exactly k, otherwise \'NO\'. n = len(arr) dp = [[False] * (k + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, k + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return \\"YES\\" if dp[n][k] else \\"NO\\" # Example usage: # print(is_subsequence_sum([1, 2, 3, 4, 5], 9)) -> \'YES\'"},{"question":"In a distant kingdom Farlander, there are strict rules about passwords for accessing the royal archives. The password system is designed in such a way that a valid password must consist of exactly m characters and must only contain lowercase English letters. Additionally, no two adjacent characters in the password can be the same. Given the value m, determine the number of possible valid passwords that can be created following these rules. -----Input----- The input contains a single integer m (1 ≤ m ≤ 20) — the length of the password. -----Output----- Print a single integer — the number of valid passwords that can be created. -----Examples----- Input: 2 Output: 650 Input: 1 Output: 26","solution":"def count_valid_passwords(m): Returns the number of valid passwords of length m following the given rules: - Must be of length m - Must only contain lowercase English letters - No two adjacent characters can be the same if m == 1: return 26 # Any of the 26 letters # For m > 1: total_ways_for_first_char = 26 # choices for the first position total_ways_for_other_chars = 25 # each subsequent position has 25 valid choices (A-Z except the previous char) total_ways = total_ways_for_first_char * (total_ways_for_other_chars ** (m - 1)) return total_ways"},{"question":"Given an array of integers, determine whether the sum of the elements in the array is even or odd. Input: First line contains T (number of test cases). Each of the next T lines contains: - First line contains an integer N (number of elements in the array). - Second line contains N integers, the elements of the array. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Array elements ≤ 10^6 Output: For each test case, print \\"even\\" if the sum of the elements in the array is even. Otherwise, print \\"odd\\". SAMPLE INPUT: 3 3 1 2 3 4 4 5 6 7 5 10 20 30 40 50 SAMPLE OUTPUT: even even even","solution":"def find_sum_even_or_odd(test_cases): Determines if the sum of the elements in the given arrays is even or odd. Parameters: test_cases (list of tuple): Each tuple contains two elements, an integer N and a list of integers. Returns: list: A list with strings \\"even\\" or \\"odd\\" indicating if the sum of each test case\'s array is even or odd. results = [] for N, array in test_cases: if sum(array) % 2 == 0: results.append(\'even\') else: results.append(\'odd\') return results def process_input(input_data): Processes the input data and extracts test cases. Parameters: input_data (str): The raw input data. Returns: list: A list of test cases. lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases def main(input_data): Processes the input data and returns the even/odd results. Parameters: input_data (str): The raw input data. Returns: list: A list with the results for each test case. test_cases = process_input(input_data) return find_sum_even_or_odd(test_cases)"},{"question":"Mansi enjoys solving pattern recognition problems. She came across a triangular number series which she needs help with. The nth term in the triangular series is defined as the sum of the first n natural numbers. Triangular number series: n nth term 1 1 2 3 3 6 4 10 5 15 . . . . 10 55 Write a function that finds the nth term of the triangular number series. Example 1: Input: n = 1 Output: 1 Explanation: The first term of the triangular series is 1. Example 2: Input: n = 4 Output: 10 Explanation: The fourth term of the triangular series is 10. Your Task: You don\'t need to read input or print anything. Complete the function triangularTerm() which takes n as input parameter and returns the nth term of the series. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10000","solution":"def triangularTerm(n): Returns the nth term of the triangular number series. The nth term is given by the formula: n * (n + 1) / 2 return n * (n + 1) // 2"},{"question":"Alice and Bob are playing a game on a rectangular chocolate bar made of m*n square pieces. Initially, the entire chocolate bar is given to Alice to make the first move. On each turn, the player must: - Select a piece of chocolate and split the chocolate bar into two smaller chocolate bars by drawing a break line either horizontally or vertically through the center of the selected piece. The game continues with the players taking alternate turns. The player who cannot make a valid move (i.e., cannot split any piece of chocolate) loses the game. Consider that both Alice and Bob play optimally to win the game. Determine if Alice will win given the initial dimensions of the chocolate bar. Input The input consists of two integers m and n (1 ≤ m, n ≤ 500), denoting the dimensions of the original chocolate bar. Output Print \\"Alice\\" if Alice is guaranteed to win, otherwise print \\"Bob\\". Examples Input 3 2 Output Bob Input 4 5 Output Alice Note In the first example, the chocolate is initially a 3x2 bar. Alice will make the first move and the board will split, creating at least one piece where there will be no further valid splits, thus allowing Bob to win. In the second example, the chocolate is initially a 4x5 bar and Alice has a strategy to always force a win regardless of Bob’s moves.","solution":"def game_result(m, n): Determines if Alice will win given the dimensions of the chocolate bar m and n. Alice wins if both m and n are odd, otherwise Bob wins. if m % 2 == 1 and n % 2 == 1: return \\"Bob\\" else: return \\"Alice\\""},{"question":"Anna loves organizing and collecting stickers. She has a collection of n stickers, each represented by an integer indicating its value. Anna wants to create the highest valued set of stickers but with a constraint: she can only choose stickers that are not adjacent in the collection. For example, if she has stickers with values [1, 2, 3, 1], she can choose stickers 1 and 3 to get the highest value of 4 (1 + 3), but she cannot choose 2 and 3 as they are adjacent. Given the values of the stickers, determine the maximum value Anna can achieve without selecting adjacent stickers. Input The input consists of a single line that contains n integers (1 ≤ n ≤ 10000), representing the values of Anna\'s stickers. Each value is a positive integer not exceeding 1000. Output Print the maximum possible value of the sticker set that Anna can collect without selecting adjacent stickers. Examples Input 4 2 3 7 Output 10 Explanation Anna can select the stickers with values 4 and 7 for a total value of 11. Input 3 2 5 10 7 Output 15 Explanation Anna can select the stickers with values 3, 10 and 7 for a total value of 20.","solution":"def max_sticker_value(stickers): Returns the maximum possible value of stickers that can be collected without selecting adjacent ones. if not stickers: return 0 n = len(stickers) if n == 1: return stickers[0] dp = [0] * n dp[0] = stickers[0] dp[1] = max(stickers[0], stickers[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + stickers[i]) return dp[-1]"},{"question":"Given an array of integers and a positive integer K, solve the following problem: - Find the length of the longest subsequence of the array such that the absolute difference between any two elements in this subsequence is less than or equal to K. -----Constraints----- - 1 ≤ N ≤ 100 - -10^4 ≤ elements in the array ≤ 10^4 - 1 ≤ K ≤ 10^4 -----Input----- Input is given from Standard Input in the following format: N K array -----Output----- Output the length of the longest subsequence such that the absolute difference between any two elements is less than or equal to K. -----Sample Input----- 5 3 1 5 3 4 2 -----Sample Output----- 4 When K=3, the longest subsequence with the condition is {1, 3, 4, 2}, all differences between them are less than or equal to 3.","solution":"def longest_subsequence_length(N, K, array): Finds the length of the longest subsequence where the absolute difference between any two elements is less than or equal to K. if N == 0: return 0 array.sort() max_length = 1 current_seq = [array[0]] for i in range(1, N): if array[i] - array[0] <= K: current_seq.append(array[i]) max_length = max(max_length, len(current_seq)) else: array = array[i:] N = len(array) return max(max_length, longest_subsequence_length(N, K, array)) return max_length # Reading input directly for the use in the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) array = list(map(int, data[2:])) print(longest_subsequence_length(N, K, array))"},{"question":"A software company wants to develop a feature for their project management tool that will help in identifying if a sequence of project tasks can be completed by tracking dependencies between tasks. Each project task is denoted by a unique number from 0 to N-1. Dependencies between tasks are represented as pairs where the first task must be completed before the second task. To efficiently manage project timelines, they need to determine if there is a way to complete all tasks given the dependencies. -----Input:----- - The first line contains two integers N and D, where N is the number of tasks and D is the number of dependencies. - The next D lines each contain two integers a and b, representing a dependency where task a must be completed before task b. -----Output:----- - Output \\"YES\\" if there is a way to complete all tasks considering the dependencies, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 500 - 0 ≤ D ≤ 10^4 - 0 ≤ a, b < N -----Sample Input:----- 4 4 1 0 2 0 3 1 3 2 -----Sample Output:----- YES -----Explanation:----- The tasks can be completed in the order: 0, 1, 2, 3.","solution":"from collections import deque def can_complete_tasks(n, d, dependencies): in_degree = [0] * n graph = [[] for _ in range(n)] for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 queue = deque([i for i in range(n) if in_degree[i] == 0]) sorted_order = [] while queue: node = queue.popleft() sorted_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(sorted_order) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"A company has a custom grid-based inventory management system for their warehouse. Their warehouse is represented with a grid layout of size NxM (N rows and M columns), where each cell in the grid represents a unique location in the warehouse. Each location in the grid will have either an item denoted by an \'I\' or be empty denoted by a \'.\'. The warehouse employees need to find the shortest path from a starting location to a target location so they can pick up items efficiently. The employees can only move up, down, left, or right, and cannot move through cells with items. The starting and target locations will always be empty cells. Write a program that will determine the shortest path in terms of the number of steps from the starting location to the target location. If it is not possible to reach the target location, the program should return -1. Input: - The input starts with two integers, N and M (2 ≤ N, M ≤ 1000), which represent the number of rows and columns in the grid respectively. - The next N lines each consist of M characters (\'I\' for item, \'.\' for empty cell). - The next line contains four integers sx, sy, tx, and ty (0 ≤ sx, sy, tx, ty < N), where sx and sy are the starting row and column, and tx and ty are the target row and column. Output: - Output one integer indicating the minimum number of steps required to reach the target location. If it is not possible, output -1. Sample Input: 5 5 ..... .I.I. .I.I. .I.I. ..... 0 0 4 4 Sample Output: 8 Explanation: The grid represents a 5x5 warehouse. The employees start at the top-left corner (0,0) and need to reach the bottom-right corner (4,4). The shortest path navigates around the items, taking 8 steps in total.","solution":"from collections import deque def shortest_path(N, M, grid, sx, sy, tx, ty): Finds the shortest path from (sx, sy) to (tx, ty) in a grid. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy)]) visited = [[False] * M for _ in range(N)] visited[sx][sy] = True steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) steps += 1 return -1"},{"question":"Given two strings s1 and s2, the task is to find whether s1 can be transformed into s2 by deleting exactly one character in s1. Example 1: Input: s1 = \\"abc\\", s2 = \\"ab\\" Output: True Explanation: By removing \'c\' from \\"abc\\", we get \\"ab\\". Example 2: Input: s1 = \\"abc\\", s2 = \\"ac\\" Output: True Explanation: By removing \'b\' from \\"abc\\", we get \\"ac\\". Example 3: Input: s1 = \\"abc\\", s2 = \\"abc\\" Output: False Explanation: \\"s1\\" and \\"s2\\" are identical and no character removal will give \\"s2\\". Example 4: Input: s1 = \\"abcd\\", s2 = \\"ab\\" Output: False Explanation: Removing one character from \\"abcd\\" will not give \\"ab\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function canTransform() which takes two strings s1 and s2 as input and returns True if s1 can be transformed into s2 by deleting exactly one character, otherwise returns False. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |s1| <= 10^5 1 <= |s2| <= 10^5","solution":"def can_transform(s1, s2): Determines if s1 can be transformed into s2 by deleting exactly one character from s1. Parameters: s1 (str): The original string. s2 (str): The target string. Returns: bool: True if s1 can be transformed into s2 by deleting exactly one character, else False. len1, len2 = len(s1), len(s2) # s1 must be exactly one character longer than s2 if len1 != len2 + 1: return False i, j = 0, 0 while i < len1 and j < len2: if s1[i] == s2[j]: j += 1 i += 1 # Check if all characters of s2 have been matched return j == len2"},{"question":"Write a function that takes a list of integers and returns the number of pairs (i, j) where i < j such that the sum of the pair is even. Example: ```python even_sum_pairs([1, 2, 3, 4]) # 2 even_sum_pairs([2, 4, 6, 8]) # 6 ``` Note: - The result for even_sum_pairs([1, 2, 3, 4]) is 2 because the pairs (2, 4) and (1, 3) have even sums. - For even_sum_pairs([2, 4, 6, 8]), all possible pairs have even sums and their count is 6. - The input list is guaranteed to contain at least two elements.","solution":"def even_sum_pairs(nums): even_count = sum(1 for num in nums if num % 2 == 0) odd_count = len(nums) - even_count # The number of pairs we can form with evens and with odds even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 # The total number of pairs will be the sum of both even and odd pairs calculated above return even_pairs + odd_pairs"},{"question":"An online bookstore maintains a catalog of books, each with a unique ID and a specific genre. A customer has requested a recommendation of books based on their favorite genres. The bookstore needs to compile a list of recommended books for the customer, ensuring that the list contains no more than one book from each genre they like. If there are multiple books available in a genre, the book with the lowest ID should be chosen. Your task is to write a program that recommends books to the customer based on their provided favorite genres list. Input - The first line contains an integer T, the number of test cases. - Each test case begins with an integer G, the number of favorite genres the customer likes. - The next line contains G space-separated strings representing the favorite genres. - The following line contains an integer B, the number of books in the bookstore\'s catalog. - Each of the next B lines contains a book ID (an integer), followed by the genre of the book (a string). Output For each test case, output a space-separated list of book IDs recommended for the customer\'s favorite genres in the order they were supplied. If there is no book available for a particular genre, output -1 for that genre. Constraints 1 ≤ T ≤ 100 1 ≤ G, B ≤ 1000 1 ≤ Book ID ≤ 100000 The genre strings consist of lowercase letters only and have a maximum length of 20 characters. SAMPLE INPUT 2 3 mystery romance fantasy 4 100 mystery 101 romance 102 fantasy 103 mystery 2 sci-fi fantasy 3 104 sci-fi 105 drama 106 fantasy SAMPLE OUTPUT 100 101 102 104 106","solution":"def recommend_books(test_cases): results = [] for test_case in test_cases: favorite_genres, books = test_case genre_map = {} for book_id, genre in books: if genre not in genre_map or book_id < genre_map[genre]: genre_map[genre] = book_id recommendations = [str(genre_map.get(genre, -1)) for genre in favorite_genres] results.append(\\" \\".join(recommendations)) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): G = int(lines[idx]) favorite_genres = lines[idx+1].split() B = int(lines[idx+2]) books = [] for i in range(B): book_data = lines[idx+3+i].split() books.append((int(book_data[0]), book_data[1])) test_cases.append((favorite_genres, books)) idx += 3 + B return test_cases # Example input parsing and calling the recommend_books function: input_data = 2 3 mystery romance fantasy 4 100 mystery 101 romance 102 fantasy 103 mystery 2 sci-fi fantasy 3 104 sci-fi 105 drama 106 fantasy test_cases = parse_input(input_data) results = recommend_books(test_cases) for result in results: print(result)"},{"question":"Given a string S, consisting of lowercase English letters and single spaces. You need to find out the number of distinct words in S after reversing each word individually. A \\"word\\" is defined as a contiguous sequence of non-space characters. # Input - A single string S (1 ≤ |S| ≤ 100) consisting of lowercase English letters and single spaces. # Output - A single integer indicating the number of distinct words after each word in the string has been reversed. # Example Input: ``` this is a test ``` Output: ``` 4 ``` The reversed words are: \\"siht\\", \\"si\\", \\"a\\", \\"tset\\". There are 4 distinct words. Input: ``` hello world hello ``` Output: ``` 2 ``` The reversed words are: \\"olleh\\", \\"dlrow\\", \\"olleh\\". There are 2 distinct words. # Constraints - The string will not have leading or trailing spaces. - The string will not have multiple spaces between words.","solution":"def distinct_reversed_words_count(S): Returns the number of distinct words after reversing each word in the given string S. words = S.split() reversed_words = {word[::-1] for word in words} return len(reversed_words)"},{"question":"Given a set of N stones, each with its own value, you can perform the following operation as many times as you like: 1. Pick any two stones with values X and Y. 2. Remove both stones from the set. 3. Add a new stone with a value of |X - Y| to the set. Your task is to determine the minimal possible value of any stone that could be left in the set after performing the above operation any number of times. -----Constraints----- - 2 leq N leq 10^5 - 1 leq value leq 10^9 for each stone -----Input----- Input is given from Standard Input in the following format: N value_1 value_2 ... value_N -----Output----- Output the minimal possible value of any stone that could be left in the set. -----Sample Input----- 4 10 6 8 14 -----Sample Output----- 2 Explanation: - Pair 10 and 6 (|10 - 6| = 4), stones become [4, 8, 14]. - Pair 8 and 4 (|8 - 4| = 4), stones become [4, 4, 14]. - Pair 14 and 4 (|14 - 4| = 10), stones become [4, 4, 10]. - Pair 10 and 4 (|10 - 4| = 6), stones become [4, 4, 6]. - Pair 6 and 4 (|6 - 4| = 2), stones become [2, 4, 4]. - Pair 4 and 2 (|4 - 2| = 2), stones become [2, 2, 4]. - Pair 4 and 2 (|4 - 2| = 2), stones become [2, 2, 2]. - Pair 2 and 2 (|2 - 2| = 0), stones become [0, 2]. - Pair 2 and 0 (|2 - 0| = 2), stones become [2]. The minimal possible value of any stone left in the set is 2.","solution":"def minimal_stone_value(values): Calculate the minimal possible value of any stone that could be left in the set. from math import gcd from functools import reduce if len(values) == 1: return values[0] return reduce(gcd, values) # Example usage: # N = int(input()) # values = list(map(int, input().split())) # print(minimal_stone_value(values))"},{"question":"You are working on a project that involves processing strings. One of the tasks is to determine whether a given string is a valid palindrome permutation. A palindrome permutation is a string that can be rearranged to become a palindrome. Write a function that checks if a given string can be rearranged to form a palindrome. -----Input:----- - First-line will contain N, the number of test cases. - Each test case contains a single line of input, a string S consisting of lowercase alphabets. -----Output:----- For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Constraints----- - 1 leq N leq 50 - 1 leq |S| leq 50 -----Sample Input:----- 4 civic ivicc hello racecar -----Sample Output:----- YES YES NO YES -----EXPLANATION:----- - \\"civic\\" is already a palindrome, so the output is YES. - \\"ivicc\\" can be rearranged to \\"civic,\\" so the output is YES. - \\"hello\\" cannot be rearranged to form a palindrome, so the output is NO. - \\"racecar\\" is already a palindrome, so the output is YES.","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character in the string has an odd count. from collections import Counter # Count the frequency of each character char_counts = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For a string to be rearranged into a palindrome, there can be at most one character with an odd count return odd_count <= 1 def process_palindrome_cases(test_cases): Processes multiple test cases to check for palindrome permutations. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, find the first integer in the list which is greater than all of its preceding integers. Return -1 if there is no such integer. Example 1: Input: arr = [1, 2, 3, 0, 4] Output: 2 Explanation: - Integer 2 is greater than its preceding integer 1 - Integer 3 is greater than its preceding integers 1, 2 - Integer 0 is not greater than 3 - Integer 4 is greater than its preceding integers 1, 2, 3, and 0 The first integer in the list which is greater than all its preceding integers is 2. Example 2: Input: arr = [5, 4, 3, 2, 1] Output: -1 Your Task: You do not need to read input or print anything. Your task is to complete the function firstGreater() which takes a list of integers as input and returns the first integer greater than all its preceding integers, or -1 if there is no such integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ len(arr) ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9","solution":"def first_greater(arr): Finds the first integer in the list which is greater than all of its preceding integers. Returns -1 if there is no such integer. :param arr: List of integers :return: First integer greater than all its preceding integers, or -1 if none exists if not arr: return -1 max_so_far = float(\'-inf\') for i in range(1, len(arr)): if arr[i] > max_so_far: max_so_far = arr[i - 1] if arr[i] > max_so_far: return arr[i] return -1"},{"question":"You are given a list of `n` unique words and an integer `k`. Your task is to determine the `k`-th alphabetically smallest word in the list using a function `compare` that can compare any two words for their alphabetical order. You can use the provided function `compare` as follows: - `compare(word1, word2)` returns: - -1 if `word1` comes before `word2` alphabetically. - 0 if `word1` and `word2` are identical. - 1 if `word1` comes after `word2` alphabetically. **Objective:** Create a function `findKthSmallest` that: 1. Takes in the list of words and the integer `k`. 2. Uses the `compare` function to determine the `k`-th smallest word alphabetically. 3. Returns the k-th smallest word. **Constraints:** - 1 ≤ `k` ≤ `n` ≤ 500 - Words consist only of lowercase English letters. - Words are of varying lengths with a maximum length of 100 characters. **Input:** - A list of `n` words. - An integer `k`. **Output:** - The `k`-th smallest word alphabetically. **Example:** Input: ``` [\\"banana\\", \\"apple\\", \\"cherry\\", \\"date\\"], 2 ``` Output: ``` \\"banana\\" ``` **Explanation:** Among the given list of words [\\"banana\\", \\"apple\\", \\"cherry\\", \\"date\\"], the alphabetically sorted order is [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], so the 2nd smallest word is \\"banana\\".","solution":"def compare(word1, word2): Compares two words lexicographically. Args: word1 (str): The first word. word2 (str): The second word. Returns: int: -1 if word1 < word2, 0 if word1 == word2, 1 if word1 > word2. if word1 < word2: return -1 elif word1 > word2: return 1 else: return 0 def findKthSmallest(words, k): Finds the k-th alphabetically smallest word. Args: words (list of str): List of unique words. k (int): The k-th smallest index. Returns: str: The k-th alphabetically smallest word. # Sort the list of words using the compare function and a custom key. sorted_words = sorted(words, key=lambda x: (x,)) return sorted_words[k-1]"},{"question":"Given an integer array and several range queries, determine the maximum value in the specified subrange for each query. Input: The first line contains two integers n and q. The next line contains n space-separated integers denoting the elements of the array. Each of the next q lines contains two space-separated integers l and r representing the one-based indices of the subrange [l, r]. Output: For each query, print the maximum value in the specified subrange. Constraints: 1 ≤ n ≤ 10^5 1 ≤ q ≤ 10^4 1 ≤ array elements ≤ 10^9 Note: It is guaranteed that the queries are valid, i.e., 1 ≤ l ≤ r ≤ n. SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 3 4 5 Explanation: For the first query (1, 3), the subrange is [1, 2, 3], and the maximum value is 3. For the second query (2, 4), the subrange is [2, 3, 4], and the maximum value is 4. For the third query (1, 5), the subrange is [1, 2, 3, 4, 5], and the maximum value is 5.","solution":"def max_in_subranges(n, array, queries): Given an array and a list of subrange queries, return the maximum value for each subrange. n: an integer representing the size of the array array: a list of integers queries: a list of tuples where each tuple contains two integers (l, r) representing the subrange Returns a list of integers representing the maximum value for each subrange results = [] for l, r in queries: results.append(max(array[l-1:r])) return results"},{"question":"In a faraway land, there\'s a quirky village where everybody loves palindromes. The village chief has devised a peculiar game to identify the longest palindrome that can be made from a given string by only swapping two characters exactly once. The game\'s goal is to identify the length of the longest such palindrome after performing exactly one swap operation. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S consisting of lowercase English letters. Output: For each test case, print the length of the longest palindrome that can be achieved by exactly one swap in the input string, or print the length of the longest palindrome if the string is already a palindrome and no swaps are needed. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Note: If no palindrome can be formed by one swap, return 0 for that test case. SAMPLE INPUT 3 abca abba abc SAMPLE OUTPUT 4 4 0 Explanation For the first test case \\"abca,\\" by swapping the first \'a\' and \'b\', we get \\"baca,\\" which has the longest palindromic substring \\"aca\\" of length 3. For the second test case \\"abba,\\" it is already a palindrome of length 4, so no swap is needed. For the third test case \\"abc,\\" no palindrome longer than 1 can be formed from it, even with one swap. Hence, the output is 0.","solution":"def longest_palindrome_after_one_swap(S): if S == S[::-1]: return len(S) def can_make_palindrome(S): count = [0] * 26 for char in S: count[ord(char) - ord(\'a\')] += 1 odd_count = sum(c % 2 for c in count) return odd_count <= 2 max_length = 0 n = len(S) for i in range(n): for j in range(i + 1, n): if S[i] != S[j]: swapped = list(S) swapped[i], swapped[j] = swapped[j], swapped[i] if can_make_palindrome(swapped): max_length = max(max_length, len(swapped)) return max_length def process_test_cases(t, test_cases): results = [] for S in test_cases: results.append(longest_palindrome_after_one_swap(S)) return results"},{"question":"Given a string `s`, your task is to determine the minimum number of character deletions required to ensure that every character in `s` appears an odd number of times. You may assume that the input string contains only lowercase English letters. For example: For the string `\\"aabbcc\\"`, return a result of `2`, as you would need to delete two characters to make the counts of each character odd (e.g., deleting one \'a\' and one \'b\' gives `\\"abcc\\"` where \'a\', \'b\', and \'c\' all have odd counts). For the string `\\"aaabbbccc\\"`, return `0`, as all characters already appear an odd number of times. Write a function `min_deletions_to_odd_counts(s: str) -> int` that accepts the string `s` as its argument and returns the minimum number of deletions required. **Note:** - Consider the most optimal way to achieve the goal with the least number of deletions. - The input string can have a length up to 1000 characters.","solution":"def min_deletions_to_odd_counts(s: str) -> int: from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Calculate number of deletions required to make counts odd deletions = 0 for count in char_count.values(): if count % 2 == 0: deletions += 1 # Need to delete one character to make it odd return deletions"},{"question":"Challenge: Write a function that takes a list of strings and returns a list of all anagram groups. An anagram group is a set of strings that, when sorted, are the same. Each group should appear as a list of strings, and the final output should be a list of these lists. Example: Given the list [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"], your function should return [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']] or any order of these lists. Note: All inputs are assumed to be in lowercase. Groups of anagrams should be listed without any specific order imposed on the groups or the strings within each group.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of strings into lists of anagrams. Args: words: List of strings. Returns: List of lists, where each sublist contains anagrams. # Dictionary to hold the anagrams groups anagrams = defaultdict(list) for word in words: # Sort the word to get the key for the anagram group sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Convert the defaultdict to a regular list of lists return list(anagrams.values())"},{"question":"A cargo transport company needs to manage the loading of containers onto ships at a port. Each ship has a weight capacity, and each container has a weight. To maximize efficiency, the company wants to optimize the total weight of containers loaded onto ships without exceeding any ship\'s weight capacity. The total number of ships and containers, as well as their respective capacities and weights, are given. Write a function to calculate the maximum total weight of containers that can be loaded onto the ships. -----Input----- The first line contains two integers s and c (1 ≤ s, c ≤ 100) — the number of ships and containers, respectively. Each of the next s lines contains an integer capacity (1 ≤ capacity ≤ 10000) — the weight capacity of each ship. Each of the next c lines contains an integer weight (1 ≤ weight ≤ 10000) — the weight of each container. -----Output----- Output an integer: the maximum total weight of containers that can be loaded onto ships without exceeding their weight capacities. -----Examples----- Input 2 3 5000 6000 2000 3000 4000 Output 9000 Input 3 4 8000 9000 10000 3000 4000 3000 2000 Output 12000 Input 1 2 10000 7000 8000 Output 8000 -----Note----- In the first test case, the best strategy is as follows. Load the containers with weights 2000 and 3000 onto the ship with a capacity of 5000. The remaining container with weight 4000 is then loaded onto the ship with a capacity of 6000. The total weight of loaded containers is 2000 + 3000 + 4000 = 9000. In the second test case, the containers can be loaded exactly as given onto the ships with capacities 8000, 9000, and 10000 without exceeding any capacity. The total weight is 3000 + 4000 + 3000 + 2000 = 12000. In the third test case, only one ship can be loaded. The best option is to load the container with weight 8000 onto the ship with capacity 10000. The total weight is 8000.","solution":"def max_total_weight(s, c, ships, containers): Calculate the maximum total weight of containers that can be loaded onto ships without exceeding their weight capacities. :param s: int, number of ships :param c: int, number of containers :param ships: list of int, capacities of the ships :param containers: list of int, weights of the containers :return: int, maximum total weight of containers loaded onto the ships # Sort ship capacities in decreasing order ships.sort(reverse=True) # Sort container weights in decreasing order containers.sort(reverse=True) total_weight = 0 container_index = 0 # Iterate through each ship for ship in ships: current_load = 0 # Try to load as many containers as possible onto the current ship while container_index < c and current_load + containers[container_index] <= ship: current_load += containers[container_index] container_index += 1 total_weight += containers[container_index-1] return total_weight"},{"question":"Given an array `arr` and an integer `k`, your task is to find the k-th largest element in the array. It\'s guaranteed that `k` will be between 1 and the length of the array. -----Input----- The first line of input contains an integer `T` denoting the number of test cases. Each test case consists of two lines. The first line contains two integers `n` and `k`, where `n` is the size of the array and `k` is the position of the element you need to find. The second line contains `n` integers denoting the elements of the array. -----Output----- For each test case, print the k-th largest element in the array. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ n ≤ 10000 - 1 ≤ k ≤ n - -10^6 ≤ arr[i] ≤ 10^6 -----Example----- Input: 3 5 2 3 2 1 5 6 6 4 7 10 4 3 20 15 3 1 1 2 3 Output: 5 7 3","solution":"def find_kth_largest(arr, k): Returns the k-th largest element in the array. arr.sort(reverse=True) return arr[k-1] def process_test_cases(test_cases): results = [] for n, k, arr in test_cases: result = find_kth_largest(arr, k) results.append(result) return results"},{"question":"You are given a list of integers and you need to find the maximum sum of any contiguous subarray of that list which contains at least one positive integer. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the size of the list. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the list. -----Output----- Print a single integer — the maximum sum of any contiguous subarray of the list that contains at least one positive integer. If no such subarray exists, print 0. -----Examples----- Input 5 -1 -2 -3 4 -5 Output 4 Input 6 -1 -2 3 -1 2 -3 Output 4 Input 4 -5 -3 -2 -1 Output 0 Input 3 1 2 3 Output 6 -----Note----- In the first test case, the subarray consisting of just the element 4 is the optimal solution. In the second test case, the optimal subarray is [3, -1, 2] with a sum of 4. In the third test case, there are no positive integers in the subarray, so the output is 0. In the fourth test case, the whole array is positive, so the sum of the entire array which is 6 is the optimal solution.","solution":"def max_subarray_sum_with_positive(arr): Finds the maximum sum of any contiguous subarray that contains at least one positive integer. If no such subarray exists, returns 0. has_positive = any(x > 0 for x in arr) if not has_positive: return 0 max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given an array of n integers. For each position in the array, you want to find the number of distinct integers that appear in the subarray ending in that position. For example, if the array is [1, 2, 1, 3, 2], for the position 1 (0-indexed), the subarray is [1] and contains 1 distinct integer. For the position 2, the subarray is [1, 2] and contains 2 distinct integers, and so on. Write a function that computes the number of distinct integers in the subarray for each position in the given array. -----Input----- The first line contains an integer t (1 le t le 100), the number of test cases. Each test case consists of: - The first line contains an integer n (1 le n le 10^5), the length of the array. - The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9), the elements of the array. -----Output----- For each test case, print n integers in a single line, the number of distinct integers in the subarray ending at each position. -----Example----- Input: 2 5 1 2 1 3 2 4 4 4 4 4 Output: 1 2 2 3 3 1 1 1 1","solution":"def count_distinct_subarrays(t, test_cases): results = [] for case in test_cases: n, arr = case result = [] seen = set() for i in range(n): seen.add(arr[i]) result.append(len(seen)) results.append(result) return results # Example usage: # t = 2 # test_cases = [ # (5, [1, 2, 1, 3, 2]), # (4, [4, 4, 4, 4]) # ] # print(count_distinct_subarrays(t, test_cases)) # Output: # [ # [1, 2, 2, 3, 3], # [1, 1, 1, 1] # ]"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight. Your task is to find the shortest path from node 1 to node N (both inclusive). However, you are required to travel through at least one node that has an even index. If there is no such path, return -1. ------ Input ------ The first line of input contains two integers, N and M, which denote the number of nodes and edges, respectively. Each of the next M lines contains three integers, u, v, and w, which describe an edge between node u and node v with weight w. ------ Output ------ Output a single integer, the length of the shortest path from node 1 to node N that includes at least one even-indexed node. If no such path exists, output -1. ------ Constraints ------ 2 ≤ N ≤ 10^5 1 ≤ M ≤ 2 times 10^5 1 ≤ w ≤ 10^6 1 ≤ u, v ≤ N ------ Sample Input 1 ------ 5 6 1 2 2 2 3 3 3 4 7 4 5 1 2 5 5 1 3 8 ------ Sample Output 1 ------ 10 Explanation: The shortest path from node 1 to 5 that includes at least one even-indexed node is 1 -> 2 -> 5 with a total weight of 2+5 = 7.","solution":"import heapq import sys from collections import defaultdict def find_shortest_path_with_even_node(n, m, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path, use a min-heap def dijkstra(start, n): dist = [sys.maxsize] * (n + 1) dist[start] = 0 pq = [(0, start)] used_even_node = [False] * (n + 1) par = [None] * (n + 1) while pq: d, u = heapq.heappop(pq) if d > dist[u]: continue for v, w in graph[u]: new_dist = d + w if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) par[v] = u if v % 2 == 0: used_even_node[v] = True else: used_even_node[v] |= used_even_node[u] return dist, used_even_node, par dist, used_even_node, par = dijkstra(1, n) # We need to check if the node N can be reached with at least one even-indexed node if dist[n] == sys.maxsize: # No path to node N return -1 if used_even_node[n]: # There is a path with at least one even-indexed node return dist[n] else: # Check all paths in reverse to see if we passed through any even-indexed nodes current_node = n while par[current_node] is not None: if current_node % 2 == 0: return dist[n] current_node = par[current_node] return -1"},{"question":"Create a function that computes the number of unique ways to make change for a given amount of money using a specified set of denominations. In other words, given an amount and a list of distinct coin denominations, determine the number of different ways to make up that amount by summing the values in the list of denominations. Function Signature: ```python def count_ways(amount: int, denominations: List[int]) -> int: ``` # Input 1. `amount` (an integer, 0 <= amount <= 10,000): The total amount of money for which change is to be made. 2. `denominations` (a list of integers, 1 <= len(denominations) <= 100, 1 <= denominations[i] <= 100): A list of distinct coin denominations that can be used to make up the amount. # Output - Return an integer representing the number of unique ways to make the given amount using the specified denominations. # Example ```python # Example 1 amount = 5 denominations = [1, 2, 5] assert count_ways(amount, denominations) == 4 # Example 2 amount = 3 denominations = [2] assert count_ways(amount, denominations) == 0 # Example 3 amount = 10 denominations = [10] assert count_ways(amount, denominations) == 1 ``` # Explanation - Example 1: The various ways to make change for 5 with denominations [1, 2, 5] are: - 1+1+1+1+1 - 1+1+1+2 - 2+2+1 - 5 Thus, there are 4 unique ways. - Example 2: It is not possible to make 3 using the 2 denomination alone, so the result is 0. - Example 3: There is only one way to make 10 using a 10 denomination coin, so the result is 1. # Constraints 1. You can use dynamic programming to solve this problem efficiently. 2. Consider edge cases where the amount is 0 or where no combinations exist.","solution":"from typing import List def count_ways(amount: int, denominations: List[int]) -> int: Function to compute the number of unique ways to make change for a given amount using specified denominations. # Initialize a list to store the number of ways to make each amount dp = [0] * (amount + 1) dp[0] = 1 # There is one way to make 0 amount # Iterate over every coin in denominations for coin in denominations: for current_amount in range(coin, amount + 1): dp[current_amount] += dp[current_amount - coin] return dp[amount]"},{"question":"A software company organizes a hackathon where participants solve programming problems to earn points. Each participant is given a set of problems with varying difficulty levels. Each problem has a certain number of points associated with its difficulty level. Participants aim to maximize their total score by correctly solving problems. You are given the number of participants and the scores for each problem. For each participant, find out the problems they solved and calculate their total score. Input The first line contains two integers p (1 ≤ p ≤ 1000) — the number of participants, and q (1 ≤ q ≤ 1000) — the number of problems. Each of the next q lines contains the points awarded for each problem, where the i-th line contains an integer si (1 ≤ si ≤ 1000) — the score for the i-th problem. The next p lines describe the problems solved by each participant. Each line starts with an integer ki (0 ≤ ki ≤ q) — the number of problems solved by the participant, followed by ki integers representing the indices of the problems solved by the participant (1-based index). Output For each participant, output a single integer — the total score they achieved by solving the problems. Examples Input 3 4 10 20 30 40 2 1 3 3 2 3 4 1 4 Output 40 90 40","solution":"def calculate_total_scores(p, q, problem_scores, participant_solutions): Calculate total scores for each participant. Parameters: p (int): Number of participants q (int): Number of problems problem_scores (list): List of scores for each problem participant_solutions (list of list): List of problems solved by each participant Returns: list: Total scores for each participant total_scores = [] for solutions in participant_solutions: ki = solutions[0] solved_problems = solutions[1:] total_score = sum(problem_scores[problem_index - 1] for problem_index in solved_problems) total_scores.append(total_score) return total_scores # Input parsing function to be used in tests def parse_input(input_str): input_lines = input_str.strip().split(\'n\') p, q = map(int, input_lines[0].split()) problem_scores = [int(input_lines[i + 1]) for i in range(q)] participant_solutions = [list(map(int, input_lines[q + 1 + i].split())) for i in range(p)] return p, q, problem_scores, participant_solutions"},{"question":"You are working on developing a photo album application and want to arrange photos in a grid format. The photos should be positioned in a rectangular grid with \'r\' rows and \'c\' columns. Each cell in the grid can either be empty or contain one photo. To make the layout fill the grid as evenly as possible, you need to ensure that the grid has no gaps, and that the number of rows and columns should be as close as possible to the square root of the number of photos, n. Write a function that arranges \'n\' photos into a grid format with r rows and c columns. The function should return a tuple (r, c) representing the rows and columns configuration such that the grid is filled most evenly. If there are multiple possible configurations, choose the one with the smallest row count first. INPUT - A single integer n representing the number of photos. OUTPUT - A tuple (r, c) where r is the number of rows and c is the number of columns. CONSTRAINTS 0 ≤ n ≤ 10000 SAMPLE INPUT 10 SAMPLE OUTPUT (2, 5) SAMPLE INPUT 16 SAMPLE OUTPUT (4, 4) SAMPLE INPUT 1 SAMPLE OUTPUT (1, 1) SAMPLE INPUT 24 SAMPLE OUTPUT (4, 6)","solution":"import math def arrange_photos(n): Arrange \'n\' photos into a grid format with r rows and c columns such that the grid is filled most evenly. If multiple configurations are possible, choose the one with the smallest row count first. :param n: Integer, number of photos. :return: Tuple (r, c) representing rows and columns. if n == 0: return (0, 0) best_r, best_c = None, None min_difference = math.inf # Iterate through possible row counts for r in range(1, math.isqrt(n) + 1): if n % r == 0: c = n // r difference = abs(r - c) if difference < min_difference or (difference == min_difference and r < best_r): best_r, best_c = r, c min_difference = difference return (best_r, best_c)"},{"question":"Dina wants to organize a small coding contest and she needs your help to determine if the problem sets she designed are balanced. A problem set is balanced if the following conditions are satisfied: The total number of easy problems is at least e_1. The total number of medium problems is at least m_1. The total number of hard problems is at least h_1. You are given the number of easy problems (e_2), medium problems (m_2), and hard problems (h_2) in the problem set. Determine whether the problem set is balanced. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains six space-separated integers e_1, e_2, m_1, m_2, h_1, and h_2. ------ Output ------ For each test case, print a single line containing the string \\"BALANCED\\" if the problem set is balanced or \\"UNBALANCED\\" if it is not. You may print each character of the string in uppercase or lowercase (for example, the strings \\"BaLaNcEd\\", \\"balanced\\", \\"Balanced\\" and \\"BALANCED\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 5,000 1 ≤ e_1, e_2 ≤ 100 1 ≤ m_1, m_2 ≤ 100 1 ≤ h_1, h_2 ≤ 100 ----- Sample Input 1 ------ 3 10 15 5 10 3 5 8 5 6 6 2 1 4 4 2 2 3 3 ------ Sample Output 1 ------ BALANCED UNBALANCED BALANCED ----- explanation 1 ------ Example case 1: The problem set meets the required number of easy, medium, and hard problems, so it is balanced. Example case 2: The problem set does not meet the required number of easy or hard problems, so it is unbalanced. Example case 3: The problem set meets the required number of easy, medium, and hard problems, so it is balanced.","solution":"def is_problem_set_balanced(e1, e2, m1, m2, h1, h2): Determines if the problem set is balanced. Parameters: e1 (int): Required number of easy problems. e2 (int): Available number of easy problems. m1 (int): Required number of medium problems. m2 (int): Available number of medium problems. h1 (int): Required number of hard problems. h2 (int): Available number of hard problems. Returns: str: \\"BALANCED\\" if the problem set is balanced, otherwise \\"UNBALANCED\\". if e2 >= e1 and m2 >= m1 and h2 >= h1: return \\"BALANCED\\" else: return \\"UNBALANCED\\" def handle_input_output(T, test_cases): Handles the input and output for the given test cases. Parameters: T (int): Number of test cases. test_cases (list of tuples): List containing tuples with 6 integers each (e1, e2, m1, m2, h1, h2). Returns: list: List of strings \\"BALANCED\\" or \\"UNBALANCED\\" for each test case. results = [] for case in test_cases: result = is_problem_set_balanced(*case) results.append(result) return results"},{"question":"Twilight Sparkle has received another mysterious task from Princess Celestia. This time, she needs to balance the energy flows between various magical nodes. Each node is represented as a positive integer and is connected to other nodes through directed edges that have certain weights. The task is to find the minimum energy cost to travel from the first node to the last node in a given directed weighted graph. However, unlike traditional graphs, this one has a unique constraint: each edge can only be used a fixed number of times before it disappears, represented as an integer on each edge. Twilight needs to compute the minimum energy cost using a dynamic approach, ensuring that each path respects the usage constraint on each edge. If there is no valid path from the first to the last node, she should return -1. Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000): the number of nodes and the number of edges in the graph respectively. Each of the next m lines contains four integers u, v, w, and k (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^9; 1 ≤ k ≤ 1000), where u and v denote an edge from node u to node v, w represents the weight (energy cost) of the edge, and k represents the number of times this edge can be used. Output Print one integer: the minimum energy cost to travel from the first to the last node. If there is no valid path, print -1. Examples Input 5 7 1 2 10 2 2 3 20 3 3 4 10 2 4 5 10 1 1 3 60 1 3 5 50 1 2 5 30 2 Output 40 Input 3 3 1 2 5 1 2 3 5 1 1 3 15 1 Output 10 Input 4 2 1 2 10 1 3 4 20 2 Output -1 Note In the first example, one possible path with the minimum cost is 1 -> 2 -> 3 -> 5 with a total cost of 40. Another possible path is 1 -> 2 -> 5 with a total cost of 40 as well.","solution":"import heapq from collections import defaultdict, deque def min_energy_cost(n, m, edges): graph = defaultdict(list) for u, v, w, k in edges: graph[u].append((v, w, k)) # Priority queue to keep track of (cost, usage of edge, current node) pq = [(0, 0, 1)] # Initially starting at node 1 with cost 0 cost_dict = defaultdict(lambda: float(\'inf\')) usage_count = defaultdict(int) cost_dict[(1, 0)] = 0 while pq: cost, used_edges, current_node = heapq.heappop(pq) if current_node == n: return cost for neighbor, weight, max_use in graph[current_node]: for use in range(1, max_use + 1): new_cost = cost + weight * use if cost_dict[(neighbor, used_edges + use)] > new_cost: cost_dict[(neighbor, used_edges + use)] = new_cost heapq.heappush(pq, (new_cost, used_edges + use, neighbor)) return -1 # Example usage: print(min_energy_cost(5, 7, [(1, 2, 10, 2), (2, 3, 20, 3), (3, 4, 10, 2), (4, 5, 10, 1), (1, 3, 60, 1), (3, 5, 50, 1), (2, 5, 30, 2)])) # Output: 40 print(min_energy_cost(3, 3, [(1, 2, 5, 1), (2, 3, 5, 1), (1, 3, 15, 1)])) # Output: 10 print(min_energy_cost(4, 2, [(1, 2, 10, 1), (3, 4, 20, 2)])) # Output: -1"},{"question":"Write a program that determines the minimum number of steps needed to convert a given string, A, into another string, B, using the following operations: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character at any position with another character. Both A and B consist only of lowercase English alphabets. ------ Input ------ - The first line of input contains a single integer T denoting the number of test cases. - Each test case contains two lines: - The first line contains the string A. - The second line contains the string B. ------ Output ------ For each test case, print the minimum number of steps required to convert string A into string B. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |A|, |B| ≤ 100 ------ Sample Input 1 ------ 3 abc yabd intention execution kitten sitting ------ Sample Output 1 ------ 2 5 3 ----- Explanation 1 ------ Example case 1: We can transform \\"abc\\" to \\"yabd\\" by: 1. Replacing \'a\' with \'y\' 2. Inserting \'d\' at the end Example case 2: We can transform \\"intention\\" to \\"execution\\" by: 1. Replacing \'i\' with \'e\' 2. Replacing \'n\' with \'x\' 3. Replacing \'t\' with \'c\' 4. Inserting \'u\' between \'e\' and \'n\' 5. Replacing \'n\' with \'o\' Example case 3: We can transform \\"kitten\\" to \\"sitting\\" by: 1. Replacing \'k\' with \'s\' 2. Replacing \'e\' with \'i\' 3. Inserting \'g\' at the end","solution":"def min_steps_convert(A, B): Calculate the minimum number of steps to convert string A to string B. Steps include insertion, deletion, and replacement of characters. lenA, lenB = len(A), len(B) # Initialize a dp array where dp[i][j] represents the minimum number of # operations required to convert A[0..i-1] to B[0..j-1] dp = [[0] * (lenB + 1) for _ in range(lenA + 1)] # Fill the dp array for i in range(lenA + 1): for j in range(lenB + 1): if i == 0: dp[i][j] = j # If A is empty, insert all characters of B elif j == 0: dp[i][j] = i # If B is empty, remove all characters of A elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove A[i-1] dp[i][j - 1], # Insert B[j-1] dp[i - 1][j - 1]) # Replace A[i-1] with B[j-1] return dp[lenA][lenB] def min_steps_convert_cases(T, cases): results = [] for i in range(T): A = cases[i][0] B = cases[i][1] results.append(min_steps_convert(A, B)) return results"},{"question":"John has been learning about binary numbers and their arithmetic operations. He came across the interesting concept of binary summation without using any built-in functions for binary addition or conversion. He decided to create a new problem for his classmates where they need to compute the sum of two binary numbers represented as strings. The catch is that the students should handle the binary addition manually, similar to how it is done digit-by-digit in elementary school for decimal numbers. Given two binaries strings, your task is to compute their sum and return the result as a binary string. The binary strings can be of different lengths and should not contain any leading zeros, except in the special case where the string is \\"0\\". -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^3). Description of each test case follows. Each test case consists of two lines: - The first line contains a binary string a (1 le |a| le 10^3), which represents the first binary number. - The second line contains another binary string b (1 le |b| le 10^3), which represents the second binary number. It is guaranteed that the sum of the lengths of all test cases does not exceed 10^4. -----Output----- For each test case, output a single line containing the sum of the two binary numbers as a binary string. -----Examples----- Input 3 1010 1011 110 101 111 1 Output 10101 1011 1000 -----Note----- In the first test case, summing \\"1010\\" and \\"1011\\" results in \\"10101\\". In the second test case, summing \\"110\\" and \\"101\\" results in \\"1011\\". In the third test case, summing \\"111\\" and \\"1\\" results in \\"1000\\".","solution":"def add_binary_strings(a, b): Returns the sum of two binary numbers represented as strings. max_len = max(len(a), len(b)) a = a.zfill(max_len) b = b.zfill(max_len) carry = 0 result = [] for i in range(max_len - 1, -1, -1): bit_sum = carry bit_sum += 1 if a[i] == \'1\' else 0 bit_sum += 1 if b[i] == \'1\' else 0 result.append(\'1\' if bit_sum % 2 == 1 else \'0\') carry = 0 if bit_sum < 2 else 1 if carry != 0: result.append(\'1\') result.reverse() return \'\'.join(result) def solve(t, cases): results = [] for case in cases: a, b = case result = add_binary_strings(a, b) results.append(result) return results"},{"question":"Alex is working on a project that involves managing a network of computers represented by an undirected graph mathbf{G} with N nodes and M edges. Each edge connects two nodes U_i and V_i and has an associated transmission delay D_i. Alex needs to find the shortest path between various pairs of computers, and to do this efficiently, he wants to preprocess the network just once to answer multiple queries afterwards. He needs your help to implement a solution that can preprocess the given network and then quickly answer Q queries, where each query provides 2 integers, boldsymbol{mbox{S}} and boldsymbol{mbox{T}} (representing the start and end computers), and asks for the shortest path delay between these two nodes. Input Format: The first line contains 2 space-separated integers, N (the number of nodes) and M (the number of edges), respectively. Each of the M subsequent lines contains 3 space-separated integers, mbox{U}, mbox{V}, and mbox{D}, respectively, describing an edge between nodes mbox{U} and mbox{V} that has a delay of mbox{D}. The next line contains an integer Q (the number of queries). Each of the Q subsequent lines contains 2 space-separated integers denoting boldsymbol{mbox{S}} and boldsymbol{mbox{T}} (the start and end nodes of the query). Constraints: 1leq Nleq5000 1leq Mleq10^5 1leq U,V,S,Tleq N 1leq Dleq10^6 1leq Qleq10^6 Output Format: For each of the Q queries, print a single integer representing the shortest path delay between nodes boldsymbol{mbox{S}} and boldsymbol{mbox{T}} on a new line. If there is no path between the nodes, print -1. Sample Input: 5 6 1 2 10 1 3 5 2 3 2 3 4 1 4 5 7 2 5 10 3 1 5 2 4 1 4 Sample Output: 13 3 6 Explanation: For the first query {1,5}, the shortest path is 1 to 3 to 4 to 5 with a total delay of 5+1+7 = 13. For the second query {2,4}, the shortest path is 2 to 3 to 4 with a total delay of 2+1 = 3. For the third query {1,4}, the shortest path is 1 to 3 to 4 with a total delay of 5+1 = 6.","solution":"import heapq def preprocess_graph(N, edges): graph = [[] for _ in range(N + 1)] for u, v, d in edges: graph[u].append((d, v)) graph[v].append((d, u)) return graph def dijkstra(graph, start, N): distances = [float(\'inf\')] * (N + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for distance, neighbor in graph[current_node]: distance = current_distance + distance if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_paths(N, M, edges, Q, queries): graph = preprocess_graph(N, edges) # Preprocess shortest paths from every node all_pairs_shortest_paths = [dijkstra(graph, i, N) for i in range(1, N + 1)] results = [] for s, t in queries: distance = all_pairs_shortest_paths[s-1][t] results.append(distance if distance != float(\'inf\') else -1) return results"},{"question":"Company X has a unique workflow involving employees and tasks. Each employee can perform a specific task and can be assigned directly or indirectly to other tasks. A direct assignment means that the employee will perform the task themselves. An indirect assignment means that all tasks assigned to an employee they manage will also be considered as done by them. An employee can directly manage multiple employees, but will not manage themselves directly or indirectly. Given a list of employees and a list of direct managers for each employee, along with the tasks each employee is assigned directly, determine the total list of tasks that each employee is responsible for (both directly and indirectly). ---Input--- The first line contains one integer n (1 leq n leq 10^4), the number of employees. The second line contains n numbers t_1, t_2, ..., t_n (1 leq t_i leq 10^4), where t_i is the task assigned directly to the i-th employee. The next n lines each contain a space-separated list of integers. The i-th line contains the list of employees who are directly managed by employee i. Each integer in the list will be between 1 and n. ---Output--- Print n lines, each containing an ordered list of unique tasks that the i-th employee is responsible for, both directly and indirectly. ---Examples--- Input 3 101 202 303 2 3 Output 101 202 303 101 202 101 303 202 303 Input 4 501 601 701 801 2 3 4 Output 501 601 701 801 501 601 501 701 501 801 601 701 601 801 701 801","solution":"def find_all_tasks(n, t, manage_list): from collections import defaultdict def get_tasks(emp, managed_by): if all_tasks[emp]: return all_tasks[emp] tasks = set([t[emp]]) for sub_emp in manage_list[emp]: if sub_emp != emp: tasks.update(get_tasks(sub_emp - 1, emp)) all_tasks[emp] = sorted(tasks) return all_tasks[emp] all_tasks = [[] for _ in range(n)] result = [] for i in range(n): result.append(get_tasks(i, None)) return result"},{"question":"**Working with Arrays and Queries** Given an array of integers and a list of queries, each query asks you to perform a specific operation on a subarray. The operations are as follows: 1. **Sum**: Calculate the sum of all elements in the specified subarray. 2. **Product**: Calculate the product of all elements in the specified subarray. 3. **Max**: Find the maximum element in the specified subarray. Each operation should be performed independently for each query, and you need to return the result for each query in the order they are given. # Input The input is structured as follows: - The first line contains two integers, n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^4), denoting the size of the array and the number of queries. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the array elements. - The following q lines each contain a query. Each query is described by: * An integer t (1 ≤ t ≤ 3), the type of the query: - 1 for the \\"Sum\\" operation. - 2 for the \\"Product\\" operation. - 3 for the \\"Max\\" operation. * Two integers, l and r (1 ≤ l ≤ r ≤ n), denoting the range of the subarray [l, r]. # Output For each query, output the result of the specified operation on the subarray. # Examples Input ``` 5 3 1 2 3 4 5 1 1 3 2 2 4 3 3 5 ``` Output ``` 6 24 5 ``` # Explanation - For the first query `1 1 3`: The sum of the subarray [1, 2, 3] is 1 + 2 + 3 = 6. - For the second query `2 2 4`: The product of the subarray [2, 3, 4] is 2 * 3 * 4 = 24. - For the third query `3 3 5`: The maximum of the subarray [3, 4, 5] is 5. # Implementation Notes To efficiently handle large inputs and multiple queries, consider using data structures such as segment trees or Fenwick trees (Binary Indexed Trees) for segment-based operations.","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: t, l, r = query subarray = array[l-1:r] # -1 to convert 1-based index to 0-based if t == 1: results.append(sum(subarray)) elif t == 2: product = 1 for num in subarray: product *= num results.append(product) elif t == 3: results.append(max(subarray)) return results"},{"question":"You are given an array of integers. Your task is to find the length of the longest contiguous subarray that contains only 1s. Example: arr = [1, 1, 0, 1, 1, 1] The longest contiguous subarray containing only 1s is [1, 1, 1], with a length of 3. Function Description Complete the longestSubarrayOfOnes function in the editor below. It should return an integer that represents the length of the longest contiguous subarray of 1s. longestSubarrayOfOnes has the following parameter(s): int arr[n]: an array of integers Returns int: the length of the longest contiguous subarray of 1s Input Format The first line contains a single integer n, the size of arr. The second line contains n space-separated integers, arr[i]. Constraints 1 <= n <= 10^5 arr[i] ∈ {0, 1} Sample Input 0 6 1 1 0 1 1 1 Sample Output 0 3 Explanation 0 The first line of input is the number of array elements. The array, arr = [1, 1, 0, 1, 1, 1]. The longest contiguous subarray containing only 1s is [1, 1, 1], with a length of 3. Sample Input 1 7 0 1 1 0 1 1 1 Sample Output 1 3 Explanation 1 The longest contiguous subarray containing only 1s is [1, 1, 1], with a length of 3. Sample Input 2 5 1 0 0 0 1 Sample Output 2 1 Explanation 2 The longest contiguous subarray containing only 1s is either [1] or [1], with a length of 1.","solution":"def longestSubarrayOfOnes(arr): Returns the length of the longest contiguous subarray of 1s. max_length = 0 current_length = 0 for num in arr: if num == 1: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"In a land far away, there is a unique kingdom with exactly one road connecting each pair of villages. The kingdom is represented as an undirected graph with V villages and E roads, where each road has a length associated with it. The king wishes to improve the travel time by reducing the total length of the roads used in the most optimal way. He wants to know the minimum length of roads that must be preserved to keep all villages still connected with each other. In other words, the king needs to find the minimum spanning tree (MST) of the kingdom. Write a program that finds the total length of the MST for each test case. ------ Input Format ------ - The first line of the input contains an integer T, which denotes the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers V and E, the number of villages and the number of roads, respectively. - The next E lines each contain three integers U, W, and L, representing a road between village U and village W of length L. ------ Output Format ------ For each test case, output a single integer on a new line representing the total length of the roads in the minimum spanning tree of the kingdom. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ V ≤ 1000 0 ≤ E ≤ frac{V times (V-1)}{2} 1 ≤ U, W ≤ V 1 ≤ L ≤ 10^6 ------ Sample Input 1 ------ 2 4 5 1 2 10 1 3 6 1 4 5 2 3 4 3 4 7 3 3 1 2 3 2 3 5 1 3 4 ------ Sample Output 1 ------ 15 7 ------ Explanation ------ Test case 1: One of the possible MSTs includes roads (2, 3, 4), (1, 4, 5), and (1, 3, 6), resulting in a total length of 15. Test case 2: The MST includes roads (1, 2, 3), and (1, 3, 4), resulting in a total length of 7. All villages still remain connected.","solution":"def kruskal_mst(V, edges): Returns the total length of the roads in the minimum spanning tree using Kruskal\'s algorithm. # Sort edges by ascending edge weight edges.sort(key=lambda x: x[2]) parent = list(range(V + 1)) rank = [0] * (V + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 mst_weight = 0 for u, v, weight in edges: if find(u) != find(v): union(u, v) mst_weight += weight return mst_weight def solve_mst_cases(test_cases): results = [] for V, E, edges in test_cases: result = kruskal_mst(V, edges) results.append(result) return results def parse_input(input_string): input_lines = input_string.split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): V, E = map(int, input_lines[index].strip().split()) index += 1 edges = [] for _ in range(E): U, W, L = map(int, input_lines[index].strip().split()) index += 1 edges.append((U, W, L)) test_cases.append((V, E, edges)) return test_cases def main(input_string): test_cases = parse_input(input_string) results = solve_mst_cases(test_cases) return \\"n\\".join(map(str, results)) # The above code is designed to receive the input as a single string and output the required results as the main function. # Here\'s an example of how it might be used: # input_string = 2 # 4 5 # 1 2 10 # 1 3 6 # 1 4 5 # 2 3 4 # 3 4 7 # 3 3 # 1 2 3 # 2 3 5 # 1 3 4 # print(main(input_string))"},{"question":"Meg is working on a project that involves processing large sets of numbers. She needs to calculate the sum of the maximum possible unique subsequence of digits from a given positive integer. The subsequence is derived by deleting some digits (possibly none) from the original number while keeping the digits in their relative order. Meg wants to ensure that the sum of digits in this subsequence is maximized. However, it is important that the subsequence is composed of unique digits, i.e., no digit should appear more than once. Meg needs a program to automate this task. Help her by writing a function that computes the desired sum for any given positive integer. -----Input----- A single line containing a positive integer N where 1 leq N < 10^{100}. -----Output----- Print a single integer representing the sum of the maximum possible unique subsequence of digits that can be obtained from the given number N. -----Examples----- Sample Input: 987654321 Sample Output: 45 Sample Input: 123123 Sample Output: 6","solution":"def max_unique_subsequence_sum(N): Calculate the sum of the maximum possible unique subsequence of digits from a given positive integer. Args: N: str : A string representing the positive integer. Returns: int: Sum of the maximum possible unique subsequence of digits. # Convert the number to a string to process each digit str_N = str(N) # Use a set to track unique digits unique_digits = set() # Traverse the digits from left to right for digit in str_N: # Add digit to set if it\'s not already present if digit not in unique_digits: unique_digits.add(digit) # Calculate the sum of unique digits return sum(int(digit) for digit in unique_digits) # Example usage: print(max_unique_subsequence_sum(\\"987654321\\")) # Expected output: 45 print(max_unique_subsequence_sum(\\"123123\\")) # Expected output: 6"},{"question":"Write a function called `isPalindrome` that takes a single string as input and returns a boolean indicating whether the string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and case). For example: - `isPalindrome(\\"A man, a plan, a canal, Panama\\")` should return `True`. - `isPalindrome(\\"hello\\")` should return `False`. Notes: - You should ignore all non-alphanumeric characters and case insensitivity when determining if a string is a palindrome. - Your function should handle an empty string as input, which should return `True`. Here\'s a template for the function: ```python def isPalindrome(s: str) -> bool: # Your code here ``` Run Examples - `isPalindrome(\\"A man, a plan, a canal, Panama\\")` should return `True`. - `isPalindrome(\\"No lemon, no melon\\")` should return `True`. - `isPalindrome(\\"Was it a car or a cat I saw?\\")` should return `True`. - `isPalindrome(\\"hello\\")` should return `False`. - `isPalindrome(\\"\\")` should return `True`.","solution":"def isPalindrome(s: str) -> bool: Determine whether a given string is a palindrome. :param s: Input string to check. :return: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase filtered_string = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_string == filtered_string[::-1]"},{"question":"The miles-per-gallon (MPG) of a car is a measure of how many miles a car can travel on one gallon of gasoline. Given a car\'s MPG, the car\'s fuel gauge reading (as a percentage), and the capacity of the car\'s fuel tank in gallons, determine how far the car can travel before running out of gasoline. The Problem === Given a car that has the following properties: - The car\'s fuel efficiency in miles-per-gallon (MPG) - The current fuel gauge reading as a percentage (for example, a 50% reading means half a tank) - The capacity of the car\'s fuel tank in gallons Write a function `estimate_range` that calculates the distance the car can travel with the remaining fuel. Your function should return the estimated number of miles the car can drive. Function Signature === `def estimate_range(mpg: float, fuel_percentage: float, tank_capacity: float) -> float:` Parameters: - `mpg`: a positive float representing the car\'s fuel efficiency in miles per gallon. - `fuel_percentage`: a positive float (0-100) representing the current fuel gauge reading as a percentage - `tank_capacity`: a positive float representing the fuel tank\'s capacity in gallons. Return Value: - The function should return a float representing the distance the car can travel with the remaining fuel. Examples === 1. `estimate_range(25.0, 50.0, 12.0)` returns `150.0` 2. `estimate_range(30.0, 75.0, 10.0)` returns `225.0` 3. `estimate_range(15.0, 40.0, 20.0)` returns `120.0` Explanation === In the first example, the car\'s fuel efficiency is 25 miles per gallon, it has 50% of a 12-gallon tank, so: - Remaining fuel: 12 gallons * 50% = 6 gallons - Estimated range: 25 miles per gallon * 6 gallons = 150 miles Similar calculations should be applied for the other examples.","solution":"def estimate_range(mpg: float, fuel_percentage: float, tank_capacity: float) -> float: Calculates the estimated range the car can travel with the remaining fuel. :param mpg: A positive float representing the car\'s fuel efficiency in miles per gallon. :param fuel_percentage: A positive float (0-100) representing the current fuel gauge reading as a percentage. :param tank_capacity: A positive float representing the fuel tank\'s capacity in gallons. :return: A float representing the distance the car can travel with the remaining fuel. remaining_fuel_gallons = (fuel_percentage / 100) * tank_capacity estimated_range = mpg * remaining_fuel_gallons return estimated_range"},{"question":"You are tasked with creating a function to generate all possible combinations of a given set of elements, constrained by a specific length and excluding certain elements. This can be useful in various scenarios including generating lottery numbers, combinations of passwords, or even generating possible selections in a game. Create a function `generate_combinations(elements, length, excluded_elements)` that takes three arguments: 1. `elements` - A list of elements to generate combinations from. 2. `length` - The desired length of each combination. 3. `excluded_elements` - A list of elements that should not be present in any combination. The function should return a list of tuples, each tuple representing a possible combination meeting the constraints. # Examples ```python generate_combinations([1, 2, 3, 4, 5], 3, [2, 4]) ``` Should output combinations of length 3 without containing elements 2 or 4: ```python [(1, 3, 5), (1, 3, 3), (1, 5, 5), (3, 5, 5)] ``` ```python generate_combinations([\'a\', \'b\', \'c\', \'d\'], 2, [\'b\']) ``` Should output all combinations of length 2 without containing element \'b\': ```python [(\'a\', \'c\'), (\'a\', \'d\'), (\'c\', \'d\'), (\'a\', \'a\'), (\'c\', \'c\'), (\'d\', \'d\')] ``` # Requirements - Ensure the output only includes unique combinations. - If the excluded elements list is empty, generate all possible combinations of the specified length. - If the elements list is empty or the length is 0, the function should return an empty list. # Function Signature ```python def generate_combinations(elements, length, excluded_elements): pass ``` # Constraints - The elements list may contain duplicate items. - The `excluded_elements` list will not contain duplicates and all elements will be present in the `elements` list. - The function should handle cases where no valid combinations are possible (return an empty list in such cases).","solution":"from itertools import combinations_with_replacement def generate_combinations(elements, length, excluded_elements): Generate all possible unique combinations of a given length from the provided elements, excluding any combinations containing elements in excluded_elements. if not elements or length == 0: return [] filtered_elements = [e for e in elements if e not in excluded_elements] all_combinations = set(combinations_with_replacement(filtered_elements, length)) return list(all_combinations)"},{"question":"Sudoku is a popular puzzle consisting of a 9x9 grid divided into 3x3 subgrids (also known as \\"boxes\\"). The objective is to fill the grid with numbers from 1 to 9, such that: - Each row contains every number from 1 to 9 exactly once. - Each column contains every number from 1 to 9 exactly once. - Each 3x3 box contains every number from 1 to 9 exactly once. You are given a partially filled 9x9 Sudoku board. Empty cells are denoted by the character \'.\' and filled cells contain digits \'1\' to \'9\'. Write a program to solve the Sudoku puzzle by filling the empty cells following the rules mentioned above. Input The input consists of 9 lines, each containing a string of length 9 representing the current state of the Sudoku board. Output Output the solved Sudoku board as 9 lines. Each line should contain a string of length 9 with the filled digits. If there is no solution, output the string \\"No solution exists\\" once. Example Input 53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 Output 534678912 672195348 198342567 859761423 426853791 713924856 961537284 287419635 345286179","solution":"def solve_sudoku(board): Solve the Sudoku puzzle represented by board. def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[row//3*3 + i//3][col//3*3 + i%3] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == \'.\': for num in \'123456789\': if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = \'.\' return False return True board = [list(line) for line in board] if not solve(board): return \\"No solution exists\\" return [\'\'.join(row) for row in board]"},{"question":"John is building a small app to manage his movie collection. He wants to be able to sort his movies based on their ratings and release year. Ratings are given on a scale from 1 to 10, and each movie has a unique release year. Help John implement a solution to sort his movie list in descending order of ratings, and for movies with the same rating, sort them in ascending order of their release year. Write a program to achieve this sorting task. Input Format: The first line contains an integer N, the number of movies. The next N lines each contain two space-separated integers R and Y, where R is the rating of the movie and Y is the release year of the movie. Output Format: Output N lines, each containing the rating and release year of a movie, sorted according to the described criteria. Constraints: 1 ≤ N ≤ 10^5 1 ≤ R ≤ 10 1900 ≤ Y ≤ 2023 Sample Input: 5 8 2001 9 1998 8 1999 7 1995 9 2000 Sample Output: 9 1998 9 2000 8 1999 8 2001 7 1995 Note: - Movies with the same rating should be sorted in ascending order of their release year. - The output should contain the rating followed by the release year for each movie, each on a new line.","solution":"def sort_movies(movies): Sorts a list of movies in descending order by rating, and for movies with the same rating, it sorts them in ascending order by release year. :param movies: List of tuples [(rating, release_year), ...] :return: Sorted list of tuples [(rating, release_year), ...] # Sort movies first by release year in ascending order and then by rating in descending order movies.sort(key=lambda x: (-x[0], x[1])) return movies"},{"question":"Given an integer n, find the nth Perfect Number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. Proper divisors of a number are all the divisors excluding the number itself. Example 1: Input: n = 1 Output: 6 Explanation: The first perfect number is 6, since its proper divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. Example 2: Input: n = 2 Output: 28 Explanation: The second perfect number is 28, since its proper divisors are 1, 2, 4, 7, and 14, and 1 + 2 + 4 + 7 + 14 = 28. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthPerfectNum() which takes an Integer n as input and returns the nth Perfect Number. Expected Time Complexity: O(n * sqrt(k)), where k is the nth perfect number. Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 5","solution":"def is_perfect(num): Helper function to determine if a number is a perfect number. if num <= 1: return False sum_divisors = 1 # Starting with 1 since 1 is a proper divisor for all numbers > 1 for i in range(2, int(num**0.5) + 1): if num % i == 0: sum_divisors += i if i != num // i: sum_divisors += num // i return sum_divisors == num def nthPerfectNum(n): Returns the nth Perfect Number. if n <= 0: return -1 # Invalid input for n. count = 0 num = 2 # Starting with 2 since 1 can never be a perfect number. while True: if is_perfect(num): count += 1 if count == n: return num num += 1 # Example usage print(nthPerfectNum(1)) # Expected: 6 print(nthPerfectNum(2)) # Expected: 28"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight associated with it. Your task is to determine the smallest cycle in the graph, if it exists. A cycle is defined as a sequence of nodes v_1, v_2, dots, v_k such that there is an edge between v_i and v_{i+1} for all 1 ≤ i < k, and there is also an edge between v_k and v_1. The weight of a cycle is the sum of the weights of its edges. ------ Input Format ------ - The first line contains two integers N (the number of nodes) and M (the number of edges). - The next M lines contain three integers each: u, v, w, representing an undirected edge between nodes u and v with weight w. ------ Output Format ------ Output a single integer — the weight of the smallest cycle in the graph. If there is no cycle, output -1. ------ Constraints ------ 1 ≤ N ≤ 300 1 ≤ M ≤ 1000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 ------ Sample Input 1 ------ 3 3 1 2 1 2 3 2 3 1 2 ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ The graph contains a cycle: 1 → 2 → 3 → 1 with a total weight of 1+2+2=5. ------ Sample Input 2 ------ 4 4 1 2 3 2 3 4 3 4 5 4 1 6 ------ Sample Output 2 ------ 18 ------ Explanation 2 ------ The graph contains a cycle: 1 → 2 → 3 → 4 → 1 with a total weight of 3+4+5+6=18. ------ Sample Input 3 ------ 3 2 1 2 1 2 3 2 ------ Sample Output 3 ------ -1 ------ Explanation 3 ------ The graph does not contain any cycle.","solution":"import sys import heapq from collections import defaultdict def smallest_cycle(N, M, edges): # Construct the graph using adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(src, ignore_edge): distance = {i: float(\'inf\') for i in range(1, N + 1)} distance[src] = 0 min_heap = [(0, src)] while min_heap: dist, curr = heapq.heappop(min_heap) if dist > distance[curr]: continue for neighbor, weight in graph[curr]: if (curr, neighbor) == ignore_edge or (neighbor, curr) == ignore_edge: continue new_dist = dist + weight if new_dist < distance[neighbor]: distance[neighbor] = new_dist heapq.heappush(min_heap, (new_dist, neighbor)) return distance min_cycle_weight = float(\'inf\') for u, v, w in edges: distance = dijkstra(u, (u, v)) if distance[v] < float(\'inf\'): min_cycle_weight = min(min_cycle_weight, distance[v] + w) return min_cycle_weight if min_cycle_weight < float(\'inf\') else -1"},{"question":"A palindrome is a sequence of characters that reads the same backward as forward, such as \'madam\' or \'racecar\'. In this task, we are interested in constructing palindromic strings using a set of allowed characters and given parts of the string. You are given a string `s` comprised of lowercase Latin letters of length `n` and an integer `m`. The string `s` is incomplete, with some positions filled with specific characters and some positions marked as asterisks (*), which represent unknown characters that can be any letter. You need to form the longest possible palindromic substrings by replacing the asterisks with characters from a given set. Your task is to determine the length of the longest palindromic substring that can be formed. Input: - The first line contains two integers `n` (1 ≤ n ≤ 10^6) and `m` (1 ≤ m ≤ 26) — the length of the string and the size of the set of allowed characters. - The second line contains the string `s`, which is of length `n` and contains lowercase Latin letters and asterisks (\'*\'). - The third line contains `m` different lowercase Latin letters, which are the allowed characters to replace the asterisks. Output: - Print a single integer — the length of the longest palindromic substring that can be formed by replacing the asterisks in `s`. Examples: Input: ``` 10 3 a*c*cdc*c* a b c ``` Output: ``` 9 ``` Input: ``` 5 2 a*b*a a b ``` Output: ``` 5 ``` Input: ``` 6 4 *ab*dc* a b c d ``` Output: ``` 3 ``` Note: In the first example, one of the longest palindromic substrings you can form is \'accccdcbbca\', which has a length of 9. In the second example, the entire string \'abab*a\' is already a palindrome and has a length of 5. In the third example, you can form the palindrome \'aba\' among others, and the length of the longest palindromic substring is 3.","solution":"def longest_palindromic_substring(n, m, s, allowed_chars): Determines the length of the longest palindromic substring that can be formed by replacing the asterisks in the given string with allowed characters. Parameters: n (int): Length of the string. m (int): Size of the set of allowed characters. s (str): The string with some characters and asterisks. allowed_chars (list of str): List of allowed characters to replace asterisks. Returns: int: Length of the longest palindromic substring that can be formed. def is_palindrome(st): return st == st[::-1] max_length = 0 for i in range(n): for j in range(i, n): current_substring = list(s[i:j+1]) is_possible = True for k in range(len(current_substring)): if current_substring[k] == \\"*\\": current_substring[k] = allowed_chars[0] if is_palindrome(\\"\\".join(current_substring)): max_length = max(max_length, j - i + 1) return max_length"},{"question":"Write a program to manage a list of integers with the following operations: * `addVal(s, t, x)`: add the value x to each element in the subarray a_s, a_{s+1}, ..., a_t. * `getMax(s, t)`: return the maximum value in the subarray a_s, a_{s+1}, ..., a_t. Initially, all elements in the array are 0. Constraints * 1 ≤ n ≤ 100000 * 1 ≤ q ≤ 100000 * 0 ≤ s ≤ t < n * -1000 ≤ x ≤ 1000 Input First line contains n (the number of elements in the array) and q (number of queries). Next q lines describe each query in one of the following formats: 2 s t x (for `addVal(s, t, x)` query) or 3 s t (for `getMax(s, t)` query) Output For each `getMax` query, print the maximum value in the specified subarray on a new line. Example Input 6 6 2 0 2 3 2 1 4 -1 3 0 5 3 1 3 2 2 5 2 3 2 4 Output 2 3 4","solution":"class IntegerListManager: def __init__(self, n): self.array = [0] * n def addVal(self, s, t, x): for i in range(s, t + 1): self.array[i] += x def getMax(self, s, t): return max(self.array[s:t + 1]) def process_queries(n, queries): manager = IntegerListManager(n) results = [] for query in queries: if query[0] == 2: _, s, t, x = query manager.addVal(s, t, x) elif query[0] == 3: _, s, t = query results.append(manager.getMax(s, t)) return results"},{"question":"Consider a city where there are N office buildings connected by bi-directional roads. Each road connects exactly two buildings and has a travel time associated with it. People can go from one building to another through any number of intermediate buildings via these roads, and there might be multiple different paths between the same pair of buildings. A few businesses in the city want to know information about the travel times among their offices. Specifically, they want to know the minimum travel time between different pairs of buildings. You are required to write a program that, given the travel times of all roads between the buildings, answers the minimum travel time between given pairs of buildings. Input The input consists of one dataset. Input data is given in the following format. N M u1 v1 t1 u2 v2 t2 :: uM vM tM Q x1 y1 x2 y2 :: xQ yQ The numbers given on each line are separated by a single space. The first line consists of two integers. N (2 ≤ N ≤ 500) is the number of buildings, and M (1 ≤ M ≤ 10000) is the number of roads. The following M lines each describe a road with the information \'ui vi ti\' where ui and vi (1 ≤ ui, vi ≤ N) are the buildings connected by the road and ti (1 ≤ ti ≤ 1000) is the travel time of the road. However, numbers from 1 to N are assigned to each building without duplication, and ui ≠ vi. The next line consists of a single integer Q (1 ≤ Q ≤ 1000) indicating the number of queries. Each of the following Q lines contains two integers \'xi yi\' (1 ≤ xi, yi ≤ N) representing the buildings between which the business wants to find the minimum travel time. Output For each query, print the minimum travel time between buildings xi and yi. If there is no path between the buildings, print -1. Example Input 5 6 1 2 3 1 3 1 2 3 1 3 4 6 3 5 4 4 5 2 3 1 4 2 5 1 5 Output 7 5 5","solution":"import sys def floyd_warshall(n, dist): # Initialize the distance array for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != sys.maxsize and dist[k][j] != sys.maxsize: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def minimum_travel_time(N, M, roads, Q, queries): # Initialize distance matrix with infinity dist = [[sys.maxsize] * N for _ in range(N)] for u, v, t in roads: dist[u-1][v-1] = t dist[v-1][u-1] = t for i in range(N): dist[i][i] = 0 # Apply Floyd-Warshall Algorithm dist = floyd_warshall(N, dist) result = [] for x, y in queries: if dist[x-1][y-1] == sys.maxsize: result.append(-1) else: result.append(dist[x-1][y-1]) return result"},{"question":"Given an array A of N distinct integers, you need to find a non-empty subarray (contiguous segment) such that the absolute difference between the maximum and minimum elements of this subarray is maximized among all subarrays. You should return the length of such subarray. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the size of the array A. - The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output Format ------ For each test case, output a single integer in a new line, the length of the subarray with the maximum absolute difference between its maximum and minimum elements. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 3 cdot 10^5 -10^9 ≤ A_{i} ≤ 10^9 - Sum of N over all test cases does not exceed 3 cdot 10^5. ----- Sample Input 1 ------ 2 5 1 3 -1 2 -3 6 4 7 5 1 3 6 ----- Sample Output 1 ------ 2 6 ----- Explanation 1 ------ Test case 1: The maximum absolute difference between the maximum and minimum elements can be achieved with the subarray [1, -1] or [-1, 2] or [2, -3]. The length of these subarrays is 2. Test case 2: The subarray covering the entire array [4, 7, 5, 1, 3, 6] has the maximum absolute difference between its maximum (7) and minimum (1) elements, and its length is 6.","solution":"def max_length_subarray(T, test_cases): Function to find the length of the subarray with the maximum absolute difference between its maximum and minimum elements for given test cases. Parameters: T (int): Number of test cases test_cases (list): A list of tuples where each tuple contains an integer N and a list A of N distinct integers. Returns: list: list of integers representing the length of the subarray with maximum absolute difference for each test case. results = [] for N, A in test_cases: max_element = max(A) min_element = min(A) results.append(N) return results"},{"question":"Given a number N, the task is to find the N\'th Prime Square. A Prime Square is defined as the square of a prime number. The first few prime squares are 4, 9, 25, 49, 121, 169, 289, 361, 529… etc. Example 1: Input: N = 3 Output: 25 Explanation: The 3^{rd} Prime Square is 25 (since 5 is the 3^{rd} prime number and 5^{2} = 25). Example 2: Input: N = 5 Output: 121 Explanation: The 5^{th} Prime Square is 121 (since 11 is the 5^{th} prime number and 11^{2} = 121). Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthPrimeSquare() which takes an Integer N as input and returns the answer. Expected Time Complexity: O(N*log(log(N))) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10","solution":"def nth_prime_square(N): Returns the N\'th prime square. A prime square is defined as the square of a prime number. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True primes = [] i = 2 while len(primes) < N: if is_prime(i): primes.append(i) i += 1 return primes[N - 1] ** 2"},{"question":"**Problem Statement** Anna wants to place advertisements on a set of buildings. Each building has a height and Anna can only place advertisements on the tops of buildings that are taller than a certain minimum height. Additionally, there are billboards that block some of the advertisements if they are taller than the building. Given a list of buildings, a minimum height for placing advertisements, and a list of billboards with their heights and blocked building indices, determine how many advertisements Anna can successfully place without being blocked by a taller billboard. # Input - `t` - the number of test cases. - For each test case: - `n` - the number of buildings. - `m` - the number of billboards. - `min_height` - the minimum height required for a building to have an advertisement. - A list of `n` integers, representing the heights of the buildings. - `m` lines follow, each containing two integers: - The height of the billboard. - The index of the blocked building (0-based index). # Output - For each test case, output the number of advertisements that can be placed successfully. # Constraints - (1 le t le 10^4) - (1 le n le 10^5) - (1 le m le 10^5) - (1 le text{building height}, text{billboard height}, text{min_height} le 10^9) # Example Input ``` 3 5 3 100 120 150 180 90 105 130 0 170 2 160 1 4 2 50 80 60 45 70 70 3 60 1 6 3 200 250 300 150 400 350 200 350 1 200 2 400 3 ``` Output ``` 2 1 3 ``` # Explanation - **First Test Case:** - Buildings and their heights: `[120, 150, 180, 90, 105]` - Minimum height required: `100` - Tall enough buildings: `120`, `150`, `180`, `105` - Advertisements initially can be placed on buildings with indices: `0, 1, 2, 4` - Billboards: `(130, 0)`, `(170, 2)`, `(160, 1)` - Billboard at index `0` with height `130` blocks building `0` - Billboard at index `1` with height `160` blocks building `1` - Billboard at index `2` with height `170` blocks building `2` - The remaining building for advertisement placement is: `4`, which keeps the indices `1`, `2` - So, the final count is `2`. - **Second Test Case:** - Buildings and their heights: `[80, 60, 45, 70]` - Minimum height required: `50` - Tall enough buildings: `80, 60, 70` - Advertisements initially can be placed on buildings with indices: `0, 1, 3` - Billboards: `(70, 3)`, `(60, 1)` - Billboard at index `1` with height `70` blocks building `3` - Billboard at index `3` with height `60` blocks building `1` - The remaining building for advertisement placement is: `0`, which keeps the index `0` - So, the final count is `1`. - **Third Test Case:** - Buildings and their heights: `[250, 300, 150, 400, 350, 200]` - Minimum height required: `200` - Tall enough buildings: `250, 300, 400, 350, 200` - Advertisements initially can be placed on buildings with indices: `0, 1, 3, 4, 5` - Billboards: `(350, 1)`, `(200, 2)`, `(400, 3)` - Billboard at index `2` with height `200` blocks building `2` - Billboard at index `4` with height `350` blocks building `1` - Billboard at index `3` with height `400` blocks building `3` - The remaining buildings for advertisement placement are: `0, 2, 4`, which keeps the indices `0, 2, 4` - So, the final count is `3`.","solution":"def count_advertisements(t, test_cases): results = [] for case in test_cases: n, m, min_height, buildings, billboards = case # Finding valid buildings that meet the minimum height requirement valid_buildings = [i for i in range(n) if buildings[i] >= min_height] # Recording billboards that block the advertisements blocked_buildings = set() for height, index in billboards: if height >= buildings[index]: blocked_buildings.add(index) # Counting the number of buildings where advertisements can be placed count = sum(1 for i in valid_buildings if i not in blocked_buildings) results.append(count) return results"},{"question":"Write a function to determine if a string matches a pattern where the pattern can include wildcard characters. The wildcard characters include \'*\' which can match any sequence of characters (including the empty sequence) and \'?\' which can match any single character. The function should return True if the string matches the pattern and False otherwise. Example 1: Input: s = \\"abcdef\\" p = \\"a*d?f\\" Output: True Explanation: The pattern \\"a*d?f\\" matches the string \\"abcdef\\" since \'a\' matches \'a\', \'*\' matches \'bcde\', \'d\' matches \'d\', \'?\' matches \'e\', and \'f\' matches \'f\'. Example 2: Input: s = \\"abcdefgh\\" p = \\"a*e?g\\" Output: False Explanation: The pattern \\"a*e?g\\" does not match the string \\"abcdefgh\\" since after \'a\', \'*\' can match \'bc\', \'e\' matches \'e\', \'?\' matches \'f\' but there is no character to match \'g\' in the remaining part of the string. Your Task: You do not need to read input or print anything. Your task is to complete the function isMatch() which takes the string s and the pattern p as input parameters and returns a boolean indicating whether the string matches the pattern. Expected Time Complexity: O(M * N), where M is the length of the string and N is the length of the pattern. Expected Auxiliary Space: O(M * N) Constraints: 1 ≤ len(s), len(p) ≤ 1000","solution":"def isMatch(s, p): Determines if the string s matches the pattern p. Pattern p includes: \'*\' which can match any sequence of characters (including an empty sequence) \'?\' which can match any single character m, n = len(s), len(p) # Create a DP table with dimensions (m + 1) x (n + 1) dp = [[False] * (n + 1) for _ in range(m + 1)] # Empty pattern matches empty string dp[0][0] = True # Fill the first row (s is empty) for j in range(1, n + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if p[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or s[i - 1] == p[j - 1]: dp[i][j] = dp[i - 1][j - 1] return dp[m][n]"},{"question":"problem Bob is a frequent shopper at the local Candy Shop. He wants to maximize the sweetness per dollar he can get for his purchases. The shop offers a variety of candy packs, each with a certain price and sweetness value. Bob can buy any combination of these packs, and he can buy multiple packs of the same type. Given the prices and sweetness values of M different candy packs, your task is to help Bob determine the maximum sweetness per dollar he can achieve. The sweetness per dollar for a combination of candies is calculated as the total sweetness divided by the total cost. Bob can decide to not buy any candy at all, in which case the sweetness per dollar is zero. input The input consists of M + 1 lines. On the first line, one integer M (1 ≤ M ≤ 100) representing the number of different candy packs available is written. On the following M lines, each line contains two integers Pi and Si (1 ≤ Pi, Si ≤ 1000), separated by a space. Pi is the price of the i-th candy pack, and Si is the sweetness value of the i-th candy pack. output Print the maximum sweetness per dollar as an integer by rounding down to the nearest whole number. Input / Output example Input example 1 3 4 16 2 6 8 24 Output example 1 3 In Input example 1, the possible combinations include: - All three packs (total cost: 4 + 2 + 8 = 14, total sweetness: 16 + 6 + 24 = 46, sweetness per dollar: 46 / 14 = 3.29) - Two packs of type 1 (total cost: 4 + 4 = 8, total sweetness: 16 + 16 = 32, sweetness per dollar: 32 / 8 = 4) - One pack of type 2 and two packs of type 3 (total cost: 2 + 8 + 8 = 18, total sweetness: 6 + 24 + 24 = 54, sweetness per dollar: 54 / 18 = 3) The maximum sweetness per dollar is achieved with two packs of type 1, which is 4 (after rounding down). Input example 2 2 10 50 20 30 Output example 2 5 Example Input 3 4 16 2 6 8 24 Output 3","solution":"def max_sweetness_per_dollar(M, candy_packs): Returns the maximum sweetness per dollar Bob can achieve given the number of candy packs M and a list of tuples containing the price (Pi) and sweetness value (Si) of each candy pack. max_ratio = 0 for price, sweetness in candy_packs: ratio = sweetness / price if ratio > max_ratio: max_ratio = ratio return int(max_ratio)"},{"question":"Given a string s consisting of only lowercase English letters, find the length of the longest substring without repeating characters. Note: The length of the given string s is <= 5000. You must optimize the solution to handle large input sizes efficiently. The output should be an integer representing the length of the longest substring without repeating characters.","solution":"def length_of_longest_substring(s): Given a string s consisting of only lowercase English letters, finds the length of the longest substring without repeating characters. :param s: String input :return: Length of the longest substring without repeating characters n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Task Write a function that takes in a string containing a list of numbers separated by spaces, and returns a new string where each number is reversed. Preserve the order of the original numbers. # Input/Output - `[input]` string `s` A string containing a list of numbers separated by spaces. Example: \\"123 456 789\\" - `[output]` string A string with each number reversed, preserving the original order. Example: \\"321 654 987\\" # Example For `s = \\"123 456 789\\"`, the output should be `\\"321 654 987\\"` For `s = \\"1 22 333 4444 55555\\"`, the output should be `\\"1 22 333 4444 55555\\"` For `s = \\"980 71 324\\"`, the output should be `\\"089 17 423\\"` For `s = \\"42 13\\"`, the output should be `\\"24 31\\"` For `s = \\"0 0 0\\"`, the output should be `\\"0 0 0\\"`","solution":"def reverse_numbers(s): Takes a string containing numbers separated by spaces and returns a string where each number is reversed. numbers = s.split() reversed_numbers = [num[::-1] for num in numbers] return \\" \\".join(reversed_numbers)"},{"question":"You are given a binary tree with n nodes. Each node has an integer value associated with it. Your task is to determine whether the tree contains a path from the root to any leaf such that the sum of the values of the nodes along this path is equal to a given target sum S. -----Input----- The first line contains two integers n and S (1 le n le 2 cdot 10^5, -10^9 le S le 10^9) — the number of nodes in the tree and the target sum, respectively. The next line contains n integers representing the values of the nodes in the tree. The values are given in the order of level-order traversal (BFS traversal) of the tree, where a value of -1 signifies a null node. -----Output----- Print \\"YES\\" if there exists a path from the root to any leaf such that the sum of the node values in the path equals S. Otherwise, print \\"NO\\". -----Example----- Input 5 6 1 2 3 4 5 Output YES -----Note----- In the provided example, one of the possible paths that give the target sum S = 6 is 1 -> 2 -> 3.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def has_path_sum(root, target_sum): Given a binary tree and a target sum, determines if there is a path from root to any leaf such that the sum of the node values equals the target sum. if not root: return False stack = [(root, root.val)] while stack: node, current_sum = stack.pop() if not node.left and not node.right: if current_sum == target_sum: return True if node.right: stack.append((node.right, current_sum + node.right.val)) if node.left: stack.append((node.left, current_sum + node.left.val)) return False def create_tree(node_values): Creates a binary tree from a list of node values given in level-order traversal order. if not node_values: return None root = TreeNode(node_values[0]) queue = [root] idx = 1 while queue and idx < len(node_values): node = queue.pop(0) if node_values[idx] != -1: node.left = TreeNode(node_values[idx]) queue.append(node.left) idx += 1 if idx < len(node_values) and node_values[idx] != -1: node.right = TreeNode(node_values[idx]) queue.append(node.right) idx += 1 return root def solution(n, S, node_values): root = create_tree(node_values) if has_path_sum(root, S): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Write a function that takes a single string as input and checks whether it\'s an anagram of a palindrome. An anagram of a palindrome is a string that can be rearranged to form a palindrome. For instance, \\"civic\\" is a palindrome, and \\"ivicc\\" is an anagram of \\"civic\\". On the other hand, \\"hello\\" is not an anagram of any palindrome. Implement the function in Python. Your function should: - Accept a single argument, a string s. - Return True if the input string is an anagram of a palindrome, and False otherwise. Constraints: - The input string will only contain lowercase alphabets (a-z). Example: 1. Input: carrace Output: True Explanation: The input string can be rearranged to form the palindrome \\"racecar\\". 2. Input: leetcode Output: False Explanation: The input string cannot be rearranged to form any palindrome.","solution":"def is_anagram_of_palindrome(s): Checks if the input string is an anagram of a palindrome. Args: s: str - input string containing lowercase alphabets Returns: bool - True if the string is an anagram of a palindrome, False otherwise from collections import Counter # Count the frequency of each character in the string char_counts = Counter(s) # A string can only be an anagram of a palindrome if at most one character # has an odd count. That\'s the only way it can be mirrored around a center. odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given an array of integers. Your task is to segregate the array such that all zeros are moved to the front of the array while maintaining the relative order of the other elements. Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers. Output: For each test case, output the transformed array with all zeros at the front and maintaining the relative order of non-zero elements. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 100000 -100000 ≤ array element ≤ 100000 SAMPLE INPUT 2 5 0 1 0 3 12 6 1 9 8 0 0 8 SAMPLE OUTPUT 0 0 1 3 12 0 0 1 9 8 8","solution":"def segregate_zeros(arr): Reorders the array such that all zeros are moved to the front, while maintaining relative order of non-zero elements. zero_count = arr.count(0) non_zero_elements = [x for x in arr if x != 0] return [0] * zero_count + non_zero_elements def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(segregate_zeros(arr)) return results"},{"question":"Statement: Write a code to find the sum of all even Fibonacci numbers up to a given number M. Input: Only the value of M. Output: A single integer which is the sum of all even Fibonacci numbers up to and including M. Constraints: 1 ≤ M ≤ 10^5 SAMPLE INPUT 1000 SAMPLE OUTPUT 798 Explanation In the above case, input is 1000 (i.e., M=1000). The even Fibonacci numbers up to 1000 are 2, 8, 34, 144, and 610. Their sum is 798, which is the required output.","solution":"def sum_of_even_fib_upto_m(M): Returns the sum of all even Fibonacci numbers up to and including M. a, b = 1, 2 even_sum = 0 while a <= M: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum # Sample usage # print(sum_of_even_fib_upto_m(1000)) # Output: 798"},{"question":"Enrico has a list of integers and he is very interested in subarrays, especially in their sums. He challenged you to find the maximum possible sum of any contiguous subarray within his list. Being a programmer, you confidently accept the challenge and decide to write a function to solve this. Can you help Enrico? Input: First line contains an integer n, the number of elements in the list. Second line contains n space-separated integers, the elements of the list. Output: Print a single integer, the maximum sum of any contiguous subarray within the list. Constraints: 1 ≤ n ≤ 10^5 -10^4 ≤ list[i] ≤ 10^4 SAMPLE INPUT 8 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation Given list is [-2, 1, -3, 4, -1, 2, 1, -5, 4]. The subarray with the maximum sum is [4, -1, 2, 1] and the sum is 4 + (-1) + 2 + 1 = 6.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the given list. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given two strings `s1` and `s2` and need to determine if it is possible to transform `s1` into `s2` by deleting some (possibly zero) characters from `s1` and rearranging the remaining characters. You are not allowed to add any characters to `s1`. -----Input----- The first line contains the string `s1` (1 ≤ |s1| ≤ 100) containing only lowercase English letters. The second line contains the string `s2` (1 ≤ |s2| ≤ 100) containing only lowercase English letters. -----Output----- Print \\"YES\\" (without quotes) if it is possible to transform `s1` into `s2` by deleting some characters from `s1` and rearranging the remaining characters. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input apple ple Output YES Input hello world Output NO Input abcdef fedcba Output YES Input aabbcc abcabc Output YES -----Note----- In the first example, you can delete \\"a\\" and one of the \\"p\\"s from \\"apple\\" and rearrange the remaining \\"ple\\" to form \\"ple\\". In the second example, it is not possible to transform \\"hello\\" into \\"world\\" since they have different sets of characters. In the third example, by rearranging \\"abcdef\\" we can form \\"fedcba\\". In the fourth example, \\"aabbcc\\" and \\"abcabc\\" have the same characters, just rearranged, so the transformation is possible.","solution":"from collections import Counter def can_transform(s1, s2): Determines if s1 can be transformed into s2 by deleting some characters from s1 and rearranging the remaining characters. Returns \\"YES\\" if possible, otherwise returns \\"NO\\". count_s1 = Counter(s1) count_s2 = Counter(s2) # Check if s1 has at least as many characters as needed for s2 for char in count_s2: if count_s1[char] < count_s2[char]: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers, write a method `find_largest_sum_subarray` to find and return the largest sum of a contiguous subarray within the list. A contiguous subarray is a sequence of consecutive elements in the array. The list will contain at least one positive integer. For example, given the list `[1, -2, 3, 5, -3, 2]`, the method should return `8`, because the contiguous subarray `[3, 5]` has the largest sum among all subarrays, which is 8. Another example, for the list `[-2, -3, 4, -1, -2, 1, 5, -3]`, the method should return `7`, because the contiguous subarray `[4, -1, -2, 1, 5]` has the largest sum, which is 7. Hint: You may use Kadane\'s Algorithm to solve this problem. # Function Signature ```python def find_largest_sum_subarray(arr: List[int]) -> int: ``` # Input - A list `arr` of integers where at least one integer is positive. # Output - An integer representing the largest sum of a contiguous subarray within the list.","solution":"from typing import List def find_largest_sum_subarray(arr: List[int]) -> int: Returns the largest sum of a contiguous subarray within the list. Implements Kadane\'s Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"```if-not:sql Write a function that takes a string as an argument and returns a dictionary with the count of each character in the string. Ignore spaces and consider case-insensitivity (i.e., \'A\' and \'a\' should be counted as the same character). ``` ```if:sql SQL Notes: You will be given a table, `strings`, with one column `string`, containing sentences. Return a table with each character and its count, ignoring spaces and considering case-insensitivity. # strings table schema * string STRING # output table schema * character STRING * count INT ```","solution":"def character_count(s): Returns a dictionary with the count of each character in the string, ignoring spaces and considering case-insensitivity. s = s.replace(\\" \\", \\"\\").lower() # Remove spaces and convert to lowercase count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"You are given an undirected graph consisting of n vertices and m edges. Each vertex has a value associated with it. Your task is to find the minimum and maximum values among the vertices in any connected component of the graph. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of vertices and the number of edges, respectively. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000) — the values of the vertices. The following m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — an edge between vertex u and vertex v. Output For each connected component of the graph, print the minimum and maximum values among the vertices in that component, one pair per line. The pairs should be printed in lexicographical order based on their minimum values. Examples Input 5 3 1 2 3 4 5 1 2 2 3 4 5 Output 1 3 4 5 Input 4 2 4 7 2 9 1 2 1 3 Output 2 7 9 9 Note In the first example, the graph has two connected components: - The component with vertices {1, 2, 3} has values {1, 2, 3}, with minimum value 1 and maximum value 3. - The component with vertices {4, 5} has values {4, 5}, with minimum value 4 and maximum value 5. In the second example, the graph has two connected components: - The component with vertices {1, 2, 3} has values {4, 7, 2}, with minimum value 2 and maximum value 7. - The component with vertex {4} has the value 9. Since it’s the only vertex in its component, both the minimum and maximum values are 9.","solution":"def find_components(n, m, values, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) component = [] while queue: vertex = queue.popleft() if not visited[vertex]: visited[vertex] = True component.append(vertex) for neighbor in graph[vertex]: if not visited[neighbor]: queue.append(neighbor) return component graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) visited = [False] * n components = [] for vertex in range(n): if not visited[vertex]: component = bfs(vertex) components.append(component) results = [] for component in components: component_values = [values[v] for v in component] min_val = min(component_values) max_val = max(component_values) results.append((min_val, max_val)) results.sort() return results"},{"question":"You are working with a hexadecimal color code processing application. Given a hexadecimal color code string input in the format `\\"#RRGGBB\\"`, you need to perform the following tasks: 1. Convert the hexadecimal color code to its corresponding RGB values (three integers representing red, green, and blue). 2. Convert the RGB values back to a hexadecimal color code string. Implement: - `hex_to_rgb(hex_code)`: This function converts a hexadecimal color code string to a tuple of RGB values. - `rgb_to_hex(r, g, b)`: This function converts RGB values to a hexadecimal color code string. Your functions should work for all valid hexadecimal color codes in the `#RRGGBB` format. Examples: ```python hex_to_rgb(\\"#FFFFFF\\") returns (255, 255, 255) hex_to_rgb(\\"#000000\\") returns (0, 0, 0) hex_to_rgb(\\"#FF5733\\") returns (255, 87, 51) rgb_to_hex(255, 255, 255) returns \\"#FFFFFF\\" rgb_to_hex(0, 0, 0) returns \\"#000000\\" rgb_to_hex(255, 87, 51) returns \\"#FF5733\\" ``` Assumptions: - The input hexadecimal color code will always be a valid 7-character string starting with `#` followed by exactly six hexadecimal digits. - The RGB values will always be integers ranging from 0 to 255.","solution":"def hex_to_rgb(hex_code): Converts a hexadecimal color code to a tuple of RGB values. Args: hex_code (str): Hexadecimal color code string in the format \\"#RRGGBB\\". Returns: tuple: Tuple of three integers representing the red, green, and blue values. hex_code = hex_code.lstrip(\'#\') # Remove \'#\' if present return tuple(int(hex_code[i:i+2], 16) for i in (0, 2, 4)) def rgb_to_hex(r, g, b): Converts RGB values to a hexadecimal color code string. Args: r (int): Red value (0-255). g (int): Green value (0-255). b (int): Blue value (0-255). Returns: str: Hexadecimal color code string in the format \\"#RRGGBB\\". return f\'#{r:02X}{g:02X}{b:02X}\'"},{"question":"Given a grid filled with integers, your task is to form the maximum possible sum by traversing from the top-left corner to the bottom-right corner of the grid. The rules for the traversal are as follows: - You can move only to the right or down at any point in time. - You must pick the value of the cell you enter and add it to your ongoing sum. Input: - The first line contains two integers, N and M (1 ≤ N, M ≤ 100), which are the number of rows and columns of the grid, respectively. - The next N lines each contain M space-separated integers representing the values of the cells in the grid. Output: - Print a single line which is the maximum sum possible to reach the bottom-right corner from the top-left corner of the grid. SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12","solution":"def max_path_sum(grid, N, M): Computes the maximum path sum from the top-left to the bottom-right corner of the grid. You can only move to the right or down. :param grid: List of lists containing integers representing the grid. :param N: Number of rows in the grid. :param M: Number of columns in the grid. :return: The maximum sum possible. # Create a DP table with the same dimensions as the grid dp = [[0] * M for _ in range(N)] # Initialize the top-left corner of DP table dp[0][0] = grid[0][0] # Fill the first row of the DP table for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column of the DP table for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner of the DP table contains the maximum path sum return dp[N-1][M-1] # Example usage if __name__ == \\"__main__\\": N, M = 3, 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(max_path_sum(grid, N, M)) # Output: 12"},{"question":"Given a sequence of integers represented as a nested list where each inner list denotes a sub-sequence of integers. Your task is to find the least common multiple (LCM) of each sub-sequence and return the results in the same order. The Least Common Multiple (LCM) of two integers is the smallest positive integer that is divisible by both integers. For example, lcm(6, 8) = 24. You are given a function signature: ```python def find_lcm_of_subsequences(sequences: List[List[int]]) -> List[int]: pass ``` # Input - `sequences`: A list of lists of integers. Each inner list has a length between 1 and 100. Each integer is between 1 and 1,000. # Output - A list of integers where each integer is the LCM of the corresponding sub-sequence. # Example ```python Input: sequences = [ [2, 7, 3], [4, 6, 12], [10], [12, 15, 75] ] Output: [42, 12, 10, 300] ``` # Constraints 1. The length of the outer list is between 1 and 100. 2. Each inner list has a length between 1 and 100. 3. Each integer is between 1 and 1,000.","solution":"from math import gcd from functools import reduce from typing import List def lcm(a, b): Returns the least common multiple of a and b. return a * b // gcd(a, b) def find_lcm_of_list(numbers: List[int]) -> int: Returns the LCM of the given list of numbers. return reduce(lcm, numbers) def find_lcm_of_subsequences(sequences: List[List[int]]) -> List[int]: Returns a list of LCMs for each sub-sequence in the sequences list. return [find_lcm_of_list(sub_sequence) for sub_sequence in sequences]"},{"question":"You are given a permutation of integers from 1 to n arranged in an array. You need to modify the array by performing exactly one operation: choose exactly one index i (1 le i le n) and reverse the subarray a_i, a_{i+1}, ldots, a_n. After performing this operation, you need to check if the modified array is sorted in ascending order. ----Input---- The first line contains an integer t (1 le t le 10^5) — the number of test cases. The first line of each test case contains an integer n (1 le n le 2 cdot 10^5) — the length of the permutation array. The second line of each test case contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le n) — the permutation array. ----Output---- For each test case, print \\"YES\\" if it is possible to sort the array by performing the operation exactly once. Otherwise, print \\"NO\\". ----Examples---- Input: 3 5 2 1 3 5 4 4 4 3 2 1 3 1 3 2 Output: YES YES YES ----Note---- In the first test case, you can reverse the subarray starting from index 2 to get [2, 4, 5, 3, 1], which is sorted in ascending order. In the second test case, you can reverse the entire array to get [1, 2, 3, 4], which is sorted in ascending order. In the third test case, you can reverse the subarray starting from index 2 to get [1, 2, 3], which is sorted in ascending order.","solution":"def can_sort_by_one_reverse(n, array): Determines if the array can be sorted by reversing a single subarray starting from index i. sorted_array = sorted(array) for i in range(n): if array[i:] == sorted_array[i:][::-1]: return \\"YES\\" return \\"NO\\" def solve(t, test_cases): results = [] for n, array in test_cases: result = can_sort_by_one_reverse(n, array) results.append(result) return results"},{"question":"A bus company wishes to analyze its daily bus schedules to improve efficiency. The company operates multiple bus routes, and each route has a specific schedule, defined by the starting time and the ending time of bus trips. The objective is to find out the maximum number of overlapping bus trips at any given time, as this will indicate the peak load that the company needs to manage. You are required to implement a program that will take multiple datasets as input. Each dataset corresponds to one day\'s schedule for all routes and is given in the following format. Each dataset starts with an integer n, representing the number of bus trips for the day (1 ≤ n ≤ 10^5). The next n lines describe the bus trips. Each bus trip is represented by two integers si and ei (0 ≤ si < ei ≤ 24 * 60), where si is the starting time and ei is the ending time in minutes from midnight. The input is terminated by a single zero. Your program should output, for each dataset, the maximum number of overlapping bus trips. For instance, consider a dataset with the following format: ``` 5 300 600 700 1200 500 900 800 1000 100 200 0 ``` Here, the starting and ending times of the bus trips are given in the format of minutes from midnight (e.g., 300 represents 5:00 AM). The output should be the maximum number of overlapping trips at any point. # Input The input consists of multiple datasets. Each dataset is given in the following format: ``` n si ei s2 e2 ... sn en ``` The end of the input is indicated by a line that solely contains a zero. # Output For each dataset, your program should output the maximum number of overlapping bus trips. # Example Input ``` 5 300 600 700 1200 500 900 800 1000 100 200 3 120 180 150 210 300 360 0 ``` Output ``` 3 2 ```","solution":"def max_overlapping_buses(dataset): Function to find the maximum number of overlapping bus trips in a day\'s schedule. events = [] # For each trip, add start and end time as events for start, end in dataset: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events: by time first (ascending), then by type (\'end\' before \'start\') events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlaps = 0 current_overlaps = 0 # Traverse through events to calculate the maximum overlap for time, type_of_event in events: if type_of_event == \'start\': current_overlaps += 1 max_overlaps = max(max_overlaps, current_overlaps) else: current_overlaps -= 1 return max_overlaps def process_input_return_results(input_data): Process the input data and return a list of results for each dataset input_lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(input_lines): n = int(input_lines[i].strip()) if n == 0: break i += 1 dataset = [] for _ in range(n): si, ei = map(int, input_lines[i].strip().split()) dataset.append((si, ei)) i += 1 results.append(max_overlapping_buses(dataset)) return results"},{"question":"Write a function that takes an input string consisting of alphabetic characters and spaces. The function should return a new string where each word in the input string is replaced by a number representing the alphabetical position of its constituting characters, summed together. Case should be ignored, i.e., \'a\' and \'A\' both represent position 1, \'b\' and \'B\' both represent position 2, and so on. Example ----- `\\"hello world\\"` becomes `\\"52 72\\"` Another example ----- `\\"ABC xyz\\"` becomes `\\"6 75\\"`","solution":"def word_to_alphabet_sum(text): Converts each word in the input text to a sum of the alphabetical positions of its characters. Parameters: text (str): The input string containing words separated by spaces. Returns: str: A new string where each word is replaced by a sum of the alphabetical positions of its characters. def sum_alphabet(word): return sum(ord(char.lower()) - ord(\'a\') + 1 for char in word if char.isalpha()) words = text.split() summed_words = [str(sum_alphabet(word)) for word in words] return \' \'.join(summed_words)"},{"question":"Alice and Bob are playing a game with a binary string. Initially, the string contains only \'0\'s and its length is n. The game consists of two types of moves: 1. Alice can choose any position i in the string (1-based index) and change the value at that position from \'0\' to \'1\'. 2. Bob can choose any prefix of the string and toggle all bits in that prefix (changing \'0\' to \'1\' and \'1\' to \'0\'). Alice makes the first move, and then they alternate turns. The game ends when the string contains no \'0\'s. The player who makes the last move wins the game. Assuming both players play optimally, determine who will win the game. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains an integer n (1 leq n leq 10^9) representing the length of the binary string. -----Output----- For each test case, print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". -----Examples----- Input 3 1 2 3 Output Alice Bob Alice -----Note----- In the first test case, Alice only needs to change the 1st position from \'0\' to \'1\' to win immediately. In the second test case, Alice changes one position from \'0\' to \'1\', and then Bob toggles the entire prefix, resulting in a string with only \'0\'s again. Bob wins on his turn as he can perform a move that toggles the last \'0\', while Alice cannot make any beneficial move. In the third test case, Alice changes one position from \'0\' to \'1\', and Bob toggles the entire prefix each time but cannot win since Alice can always have the final move to turn the last \'0\' to \'1\'.","solution":"def determine_winner(t, test_cases): Determines the winner of the game for each test case. Parameters: t (int): the number of test cases test_cases (List[int]): list of integers representing the length of the binary strings Returns: List[str]: a list containing results for each test case (\\"Alice\\" or \\"Bob\\") results = [] for n in test_cases: if n % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Ryan is designing a security system for his office building. He wants to add a keycard system that only grants access during certain hours based on a log of keycard entries and exits. Each entry in the log is represented by a time in 24-hour format (HH:MM), and an action (either \\"enter\\" or \\"exit\\"). Ryan needs your help to determine which keycards were used outside of the allowed hours. The allowed time for access is between two given times (inclusive), and the log is not necessarily in order. Input The input data will contain three lines: 1. Two times in 24-hour format separated by a space, representing the allowed access period (start time and end time). 2. An integer n (1 ≤ n ≤ 100), the number of log entries. 3. n lines, each containing a time in 24-hour format and an action (\\"enter\\" or \\"exit\\"). Output Output the keycard access times that fall outside the allowed hours in the order they appear in the log. If all access times fall within the allowed hours, output \\"ALL ACCESS TIMES VALID\\". Examples Input 08:00 18:00 5 07:30 enter 08:00 enter 12:00 exit 18:01 exit 20:00 enter Output 07:30 enter 18:01 exit 20:00 enter Input 09:00 17:00 3 09:00 enter 12:00 exit 17:00 exit Output ALL ACCESS TIMES VALID","solution":"def is_within_allowed_hours(time, start_time, end_time): return start_time <= time <= end_time def find_invalid_access_times(start_time, end_time, n, log_entries): invalid_entries = [] for entry in log_entries: entry_time, action = entry.split() if not is_within_allowed_hours(entry_time, start_time, end_time): invalid_entries.append(entry) if len(invalid_entries) == 0: return \\"ALL ACCESS TIMES VALID\\" else: return \\"n\\".join(invalid_entries)"},{"question":"Find the Largest Substring with Unique Characters You are given a string consisting of lowercase alphabetic characters. You need to implement a function to find the length of the longest substring that contains only unique characters. Examples: longest_unique_substring(\\"abcabcbb\\") The answer is \\"abc\\", which has a length of 3. longest_unique_substring(\\"bbbbbb\\") The answer is \\"b\\", with a length of 1. longest_unique_substring(\\"pwwkew\\") The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. longest_unique_substring(\\"dvdf\\") The answer is \\"vdf\\", with a length of 3. longest_unique_substring(\\"\\") The answer is \\"\\", with a length of 0 as the input string is empty. longest_unique_substring(\\"abcbde\\") The answer is \\"cbde\\", with a length of 4. The character \'e\' starts a new potential sequence. Implement the function in the most efficient way possible to ensure good performance on large inputs.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with unique characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are given a grid representing a maze. The grid is composed of cells which can either be open or blocked. Your objective is to determine the minimum number of steps required to travel from the top-left corner to the bottom-right corner of the grid. You are allowed to move up, down, left, or right but not diagonally. If there is no possible path, return -1. Input Format: The input consists of multiple test cases. Each test case starts with two integers, N and M, representing the number of rows and columns in the grid (1 ≤ N, M ≤ 100). The next N lines contain M characters each, where: - \'.\' represents an open cell you can move through. - \'#\' represents a blocked cell you cannot move through. The end of input is denoted by a line containing two zeros. Output Format: For each test case, output a single line containing the minimum number of steps required to travel from the top-left corner to the bottom-right corner. If there is no possible path, output -1. Sample Input: ``` 5 5 ..... .#.#. .#.#. .#.#. ..... 4 4 #..# 2 2 .# #. 0 0 ``` Sample Output: ``` 8 -1 -1 ``` Explanation: In the first test case, the shortest path from the top-left to the bottom-right corner requires 8 steps. In the second test case, there is no path from the top-left to the bottom-right corner due to the walls blocking the path. In the third test case, it is impossible to travel from the top-left to the bottom-right corner as there is no valid path available.","solution":"from collections import deque def min_steps(grid): rows = len(grid) cols = len(grid[0]) if grid[0][0] == \'#\' or grid[rows - 1][cols - 1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == rows - 1 and y == cols - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 def solve_maze(inputs): results = [] index = 0 while index < len(inputs): N, M = map(int, inputs[index].split()) if N == 0 and M == 0: break index += 1 grid = [] for _ in range(N): grid.append(inputs[index]) index += 1 results.append(min_steps(grid)) return results"},{"question":"Read problem statements in [Hindi], [Bengali], [Mandarin Chinese], [Russian], and [Vietnamese] as well. \\"But I’m no longer the troublemaker you think I am!\\" - Nezuko Kamado Tanjiro had a binary string of length L (numbered 1 through L) which initially contained only zeros. Let\'s denote the bit at position i by S_i. Tanjiro wants to make the string all ones by performing a series of operations. In each operation, he can choose a range [a, b] (where 1 leq a leq b leq L) and change all zeros within this range to ones. Tanjiro wonders how many distinct ways he can select a sequence of such operations such that the resulting string has exactly X ones. Two sequences of operations are considered distinct if there is at least one range that is different between the sequences. Note: The operations are executed in sequence and after any operation, the bits within the selected range become one regardless of their previous state. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers L, Q, and X. ------ Output ------ For each test case, print a single line containing one integer - the number of ways to select a sequence of operations modulo 1,000,000,007. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ L ≤ 1000 0 ≤ X ≤ L 1 ≤ Q ≤ 100 ------ Subtasks ------ Subtask #1 (20 points): 1 ≤ L ≤ 100 Subtask #2 (30 points): 1 ≤ L ≤ 500 Subtask #3 (50 points): original constraints ----- Sample Input 1 ------ 2 3 2 3 3 2 2 ----- Sample Output 1 ------ 1 0 ----- Explanation 1 ------ Example case 1: To make the entire string of length 3 all ones, Tanjiro can select the range [1, 3] or any sequence of operations covering this range. Example case 2: It is impossible to make exactly 2 ones with the given constraints.","solution":"MOD = 1000000007 def count_ways(L, Q, X): # Function to compute nCr % MOD def nCr(n, r): if r > n: return 0 if r == 0 or r == n: return 1 num = den = 1 for i in range(r): num = num * (n - i) % MOD den = den * (i + 1) % MOD return num * pow(den, MOD-2, MOD) % MOD # Compute how many ways we can make exactly X ones # Represented as choosing X positions out of L to be ones return nCr(L, X) def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 results = [] for _ in range(T): L = int(data[index]) Q = int(data[index + 1]) X = int(data[index + 2]) index += 3 result = count_ways(L, Q, X) results.append(result) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"Jessica wants to create a new word puzzle game. In this game, she generates all possible substrings from a given string and then sorts them in lexicographical order. For example, if the input string is \\"abc\\", the substrings \\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", and \\"c\\" will be generated and sorted as [\\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\"]. Jessica now needs a function to determine if a specific substring exists in her list of sorted substrings. Write a function that determines if a given substring exists within the list of all possible sorted substrings of a given string. Function Signature: `def is_substring_exist(s: str, sub: str) -> str:` Input: - The first line contains the string `s` (1 ≤ |s| ≤ 100), the input string. - The second line contains the string `sub` (1 ≤ |sub| ≤ 100), the substring to search for. Output: - Return \\"YES\\" if the substring `sub` exists in the sorted list of all possible substrings of `s`; otherwise, return \\"NO\\". Constraints: - The input string `s` consists only of lowercase English letters. Examples: Input: ``` abc ab ``` Output: ``` YES ``` Input: ``` abcd ac ``` Output: ``` NO ``` Input: ``` banana ana ``` Output: ``` YES ``` Note: Explanation of the first sample: The string \\"abc\\" has the substrings [\\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\"]. \\"ab\\" is in this list, so the output is \\"YES\\". Explanation of the second sample: The string \\"abcd\\" has the substrings [\\"a\\", \\"ab\\", \\"abc\\", \\"abcd\\", \\"b\\", \\"bc\\", \\"bcd\\", \\"c\\", \\"cd\\", \\"d\\"]. \\"ac\\" is not in this list, so the output is \\"NO\\". Explanation of the third sample: The string \\"banana\\" has the substrings [..., \\"ana\\", ...]. \\"ana\\" is in this list, so the output is \\"YES\\".","solution":"def is_substring_exist(s: str, sub: str) -> str: substrings = [] length = len(s) for i in range(length): for j in range(i + 1, length + 1): substrings.append(s[i:j]) substrings.sort() return \\"YES\\" if sub in substrings else \\"NO\\""},{"question":"After a recent software update, a bank\'s automated teller machines (ATMs) started experiencing issues with dispensing cash. Each ATM has a certain limit on how much cash it can dispense in one transaction, but customers are allowed to make multiple transactions in sequence until they reach their desired amount. To mitigate the issue, the bank wants to ensure that the total amount dispensed by an ATM in any sequence of transactions never exceeds the machine\'s total cash limit. Write a program that processes multiple test cases. Each test case involves a series of transaction requests and an ATM\'s cash limit. The goal is to determine the maximum number of transactions that can be processed consecutively before the cumulative amount would exceed the ATM\'s cash limit. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers m (1 le m le 10^3) and l (1 le l le 10^6) — the number of transaction requests and the ATM\'s cash limit, respectively. The second line of each test case contains m integers d_1, d_2, dots, d_m (1 le d_i le 10^4) — the transaction amounts requested by customers in sequence. -----Output----- For each test case print the answer to it — the maximum number of consecutive transactions that can be processed without exceeding the ATM\'s cash limit. -----Example----- Input 3 5 100 20 30 50 10 5 3 50 20 20 20 4 70 10 10 20 40 Output 3 2 3 -----Note----- In the first test case, the ATM can process transactions 20, 30, and 50 without exceeding the cash limit of 100. Processing the next transaction would cause the cumulative sum to exceed 100. In the second test case, the ATM can process two consecutive transactions of 20 each, but the third transaction would cause the total to be 60, which exceeds the limit 50. In the third test case, the ATM can process transactions 10, 10, and 20, but the fourth transaction would make the cumulative sum 80, which exceeds the cash limit 70.","solution":"def max_consecutive_transactions(test_cases): results = [] for case in test_cases: m, l, transactions = case current_sum = 0 transaction_count = 0 for transaction in transactions: if current_sum + transaction <= l: current_sum += transaction transaction_count += 1 else: break results.append(transaction_count) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): m, l = map(int, lines[index].strip().split()) transactions = list(map(int, lines[index + 1].strip().split())) test_cases.append((m, l, transactions)) index += 2 return test_cases"},{"question":"Given an array of integers representing daily temperatures of a city during winter, you want to predict the number of days you need to wait after each day to get a warmer temperature. If there is no future day for which this is possible, return 0 instead. Write a function that takes an array of integers `temperatures` where `temperatures[i]` is the temperature on the i-th day, and returns an array of integers such that the output `result[i]` is the number of days you have to wait after the i-th day to get a warmer temperature. The function should have the following signature: ```python def daily_temperatures(temperatures: List[int]) -> List[int]: ``` # Input - An integer array `temperatures` where `1 <= len(temperatures) <= 10^5` and `30 <= temperatures[i] <= 100`. # Output - An integer array `result` of the same length as `temperatures`. # Example ```python Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Input: [30, 40, 50, 60] Output: [1, 1, 1, 0] Input: [30, 30, 30, 30] Output: [0, 0, 0, 0] ``` # Note - For the first example, 73 -> 74 in one day, 74 -> 75 in one day, 75 -> 76 in four days, 71 -> 76 in two days, 69 -> 72 in one day, and so on. - For the second example, each temperature rises by the next day, except for the last day which has no future day. - For the third example, the temperature never rises, so all entries in the result array are 0.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: n = len(temperatures) result = [0] * n stack = [] # This will store the indices of the temperatures list for i in range(n): # If stack is not empty and the current temperature is higher than # the temperature at the index stored at the top of the stack while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"A large company is organizing a party and considering the guest list. Each invited guest can invite some of their friends, and consequently, those friends can invite some of their friends, and so on. However, the company wants to avoid inviting anyone more than once. Given each guest and their direct friends, determine the maximum number of unique guests that can be invited to the party. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of guests. Each of the following n lines contains a list of integers. The i-th line represents the i-th guest and the integers in the list represent the direct friends of this guest. Each integer is distinct and within the range 1 to n. -----Output----- Output a single integer — the maximum number of unique guests that can be invited. -----Examples----- Input 3 2 3 1 1 Output 3 Input 4 2 3 3 4 4 1 Output 4","solution":"def max_unique_guests(n, friends_list): def dfs(guest, visited): if guest in visited: return visited.add(guest) for friend in friends_list[guest - 1]: dfs(friend, visited) visited = set() for guest in range(1, n + 1): dfs(guest, visited) return len(visited)"},{"question":"In a world of text processing, you are given two strings \'s1\' and \'s2\'. Your task is to determine whether the two strings are isomorphic. Two strings are isomorphic if the characters in \'s1\' can be replaced to get \'s2\'. No two characters may map to the same character but a character may map to itself. For example, given \\"egg\\" and \\"add\\", the characters \'e\' and \'a\' are mapping to each other, and \'g\' and \'d\' are mapping to each other, so the strings are isomorphic. Example 1: Input: s1 = \\"paper\\" s2 = \\"title\\" Output: Isomorphic Explanation: \'p\' maps to \'t\', \'a\' maps to \'i\', \'p\' maps to \'t\', \'e\' maps to \'l\', and \'r\' maps to \'e\'. We can see there is a one-to-one mapping between the characters of the two strings. Example 2: Input: s1 = \\"foo\\" s2 = \\"bar\\" Output: Not Isomorphic Explanation: \'f\' maps to \'b\', \'o\' maps to \'a\', \'o\' maps to \'r\'. There is a conflict because \'o\' cannot map to both \'a\' and \'r\'. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function `areIsomorphic()` that takes strings \'s1\' and \'s2\' as input parameters and returns the string \\"Isomorphic\\" if the two strings are isomorphic or else returns the string \\"Not Isomorphic\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s1|, |s2| ≤ 10^4","solution":"def areIsomorphic(s1, s2): Determines if two strings s1 and s2 are isomorphic. if len(s1) != len(s2): return \\"Not Isomorphic\\" mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for c1, c2 in zip(s1, s2): if c1 in mapping_s1_to_s2: if mapping_s1_to_s2[c1] != c2: return \\"Not Isomorphic\\" if c2 in mapping_s2_to_s1: if mapping_s2_to_s1[c2] != c1: return \\"Not Isomorphic\\" mapping_s1_to_s2[c1] = c2 mapping_s2_to_s1[c2] = c1 return \\"Isomorphic\\""},{"question":"You are given a grid of size n × n filled with lowercase English letters. You can replace no more than k letters in this grid. Your task is to determine if it is possible to transform the grid into one where all rows and all columns are palindromes by changing at most k letters. A string is a palindrome if it reads the same forward and backward. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ n^2) — the size of the grid and the maximum number of letters you are allowed to change. Each of the next n lines contains a string of n lowercase English letters representing the rows of the grid. Output Output \\"YES\\" (without quotes) if it is possible to transform the grid such that every row and every column is a palindrome by changing no more than k letters. Otherwise, output \\"NO\\". Examples Input 3 2 aba bcb aba Output YES Input 3 1 abc aaa bac Output NO Input 4 4 abcd efgh ijkl mnop Output NO Note In the first example, the original grid is already such that each row and column is a palindrome, so no changes are needed. Hence, the output is \\"YES\\". In the second example, at least two changes are needed to make the first row and the last row or column palindromic, but k = 1. Thus, the output is \\"NO\\". In the third example, irrespective of how many letters are changed, it is not possible to transform the grid such that all rows and columns are palindromes. Thus, the output is \\"NO\\".","solution":"def can_transform_grid(n, k, grid): def make_palindrome_cost(s): cost = 0 half_len = len(s) // 2 for i in range(half_len): if s[i] != s[-(i+1)]: cost += 1 return cost total_cost = 0 # Cost to make all rows palindromatic for row in grid: total_cost += make_palindrome_cost(row) # Cost to make all columns palindromatic for col_index in range(n): column = \'\'.join(grid[row_index][col_index] for row_index in range(n)) total_cost += make_palindrome_cost(column) # Each change could have been counted twice (once in rows and once in columns) total_cost //= 2 return \\"YES\\" if total_cost <= k else \\"NO\\""},{"question":"Implement a class called `DoublyLinkedList` that supports the following operations: 1. **append(value)**: Adds a node with the specified value to the end of the doubly linked list. 2. **prepend(value)**: Adds a node with the specified value to the beginning of the doubly linked list. 3. **find(value)**: Returns the position (1-based index) of the node with the specified value. If the value is not found in the list, returns `-1`. 4. **delete(value)**: Deletes the first node with the specified value from the doubly linked list. If the value is not found, do nothing. 5. **reverse()**: Reverses the order of the nodes in the doubly linked list. 6. **print()**: Prints the values of the nodes in the list from the head to the tail, followed by the values from the tail to the head on the next line. Each value should be separated by a space. You need to define the `Node` class representing the nodes in the doubly linked list and then implement the `DoublyLinkedList` class with the aforementioned methods. # Constraints - All operations should be performed in an efficient manner respecting time complexity considerations. # Input You will receive a sequence of operations in the following format: - On the first line, an integer `N` representing the number of operations. - On the next `N` lines, each line represents one of the six operations: `append`, `prepend`, `find`, `delete`, `reverse`, or `print`. # Output For every `find` operation, print the 1-based index of the node with the specified value or `-1` if not found. For every `print` operation, print two lines: 1. The values of the nodes from head to tail, separated by a space. 2. The values of the nodes from tail to head, separated by a space. # Example Input ``` 13 append 3 append 5 prepend 2 find 3 find 10 delete 5 print append 7 reverse print prepend 4 find 2 print ``` Output ``` 2 -1 2 3 3 2 7 3 2 2 3 7 4 7 3 2 2 3 7 4 ``` # Explanation 1. The first `print` operation prints the list forwards `2 3` and backwards `3 2`. 2. The `reverse` operation reverses the list from `2 3` to `3 2`. 3. The second `print` operation after `reverse` prints `7 3 2` forwards and `2 3 7` backwards. 4. The third `print` operation prints the final list `4 7 3 2` forwards and `2 3 7 4` backwards.","solution":"class Node: def __init__(self, value): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, value): new_node = Node(value) if not self.head: self.head = new_node self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def prepend(self, value): new_node = Node(value) if not self.head: self.head = new_node self.tail = new_node else: self.head.prev = new_node new_node.next = self.head self.head = new_node def find(self, value): current = self.head position = 1 while current: if current.value == value: return position current = current.next position += 1 return -1 def delete(self, value): current = self.head while current: if current.value == value: if current.prev: current.prev.next = current.next else: self.head = current.next if current.next: current.next.prev = current.prev else: self.tail = current.prev return current = current.next def reverse(self): current = self.head self.head, self.tail = self.tail, self.head while current: current.next, current.prev = current.prev, current.next current = current.prev def print_list(self): forward = [] backward = [] current = self.head while current: forward.append(current.value) current = current.next current = self.tail while current: backward.append(current.value) current = current.prev print(\' \'.join(map(str, forward))) print(\' \'.join(map(str, backward)))"},{"question":"Write a function `findMinOperations` that takes two strings `str1` and `str2` and returns the minimum number of operations required to convert `str1` into `str2`. You are allowed to perform the following operations: - Insert a character - Remove a character - Replace a character Each operation counts as 1 step. -----Input----- - A string `str1` of length m. - A string `str2` of length n. -----Output----- - An integer denoting the minimum number of operations required. -----Constraints----- - 1 le m, n le 1000 - `str1` and `str2` consist of lowercase English letters. -----Example Input----- abc def -----Example Output----- 3 -----Explanation:----- Replace \'a\' with \'d\', \'b\' with \'e\', and \'c\' with \'f\'. Each replacement is one operation. The total is 3 operations.","solution":"def findMinOperations(str1, str2): Returns the minimum number of operations required to convert str1 into str2. Allowed operations are insert, remove, or replace a character. m = len(str1) n = len(str2) # Create a DP table to store results of subproblems dp = [[0 for x in range(n+1)] for x in range(m+1)] # Fill dp array for i in range(m+1): for j in range(n+1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last character # and recur for the remaining string elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"In a small village, there is a unique river network consisting of several rivers and lakes. The rivers are in the form of directed edges connecting pairs of lakes. Each lake is assigned a numerical index from 1 to n, and the lakes and rivers form a directed acyclic graph (DAG). The village wants to control the flow of water by placing barriers on certain rivers. A barrier on a river (x, y) will completely block the flow from lake x to lake y. The village council needs your help to figure out the minimum number of barriers required to block all possible paths from a given lake s to any other lake. This will effectively isolate lake s. Your task is to determine this minimum number of barriers for each lake s in the village. -----Input----- The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of lakes and the number of rivers, respectively. Each of the next m lines contains two integers u_i and v_i (1 le u_i, v_i le n, u_i ne v_i), representing a directed river from lake u_i to lake v_i. It is guaranteed that the graph is a DAG. -----Output----- Output n integers. The i-th of them should be the minimum number of barriers needed to isolate lake i. -----Examples----- Input 4 4 1 2 2 3 3 4 1 3 Output 1 1 1 0 Input 5 5 1 2 2 3 3 4 4 5 1 4 Output 1 1 1 1 0 -----Note----- In the first example: - To isolate lake 1, place a barrier on river (1, 2). - To isolate lake 2, place a barrier on river (2, 3). - To isolate lake 3, place a barrier on river (3, 4). - Lake 4 is already isolated. In the second example: - To isolate lake 1, place a barrier on river (1, 2). - To isolate lake 2, place a barrier on river (2, 3). - To isolate lake 3, place a barrier on river (3, 4). - To isolate lake 4, place a barrier on river (4, 5). - Lake 5 is already isolated.","solution":"from collections import defaultdict, deque def find_minimum_barriers(n, m, rivers): def topological_sort(): in_degree = [0] * (n + 1) for u, v in rivers: graph[u].append(v) in_degree[v] += 1 zero_in_degree = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) topo_order = [] while zero_in_degree: node = zero_in_degree.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) return topo_order graph = defaultdict(list) topo_order = topological_sort() min_barriers = [0] * (n + 1) visited = [False] * (n + 1) for node in reversed(topo_order): for neighbor in graph[node]: if not visited[neighbor]: min_barriers[node] += 1 visited[neighbor] = True return min_barriers[1:] def minimum_barriers(n, m, rivers): return find_minimum_barriers(n, m, rivers)"},{"question":"You are given an array of integers and an integer K. Your task is to find the length of the shortest subarray whose sum is greater than or equal to K. # Input: - The first line contains an integer N, the number of elements in the array (1 leq N leq 10^5). - The second line contains N space-separated integers representing the array elements (1 leq text{arr}[i] leq 10^4). - The third line contains an integer K (1 leq K leq 10^9). # Output: Output the length of the shortest subarray whose sum is greater than or equal to K. If no such subarray exists, print `-1`. # Example: Sample Input 1: ``` 5 1 2 3 4 5 11 ``` Sample Output 1: ``` 3 ``` Explanation 1: The subarray [3, 4, 5] has a sum of 12, which is the shortest subarray with a sum greater than or equal to 11. Sample Input 2: ``` 3 1 1 1 5 ``` Sample Output 2: ``` -1 ``` Explanation 2: No subarray can reach or exceed the sum of 5. # Notes: The solution should be efficient, ideally with a time complexity better than O(N^2), as the input size can be quite large. Consider using a sliding window or two-pointer approach.","solution":"def shortest_subarray_length(arr, K): Finds the length of the shortest subarray whose sum is greater than or equal to K. :param arr: List of integers :param K: Integer target sum :return: Length of the shortest subarray with sum >= K, or -1 if no such subarray exists N = len(arr) min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(N): current_sum += arr[end_index] while current_sum >= K: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an array of n integers and a series of m queries. Each query asks for the number of distinct subarrays of the given length k that can be formed from the array. A subarray is a contiguous part of an array. For example, in the array `[1, 2, 1, 3, 2]` and with the query `k = 3`, the subarrays of length 3 are `[1, 2, 1]`, `[2, 1, 3]`, and `[1, 3, 2]`. The distinct subarrays are `[1, 2, 1]`, `[2, 1, 3]`, and `[1, 3, 2]`, making the answer 3. Write a program to answer each query. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of integers in the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Each of the next m lines contain a single integer k (1 ≤ k ≤ n) — the subarray length for the corresponding query. Output For each query of each test case, print the number of distinct subarrays of the given length k. Example Input 2 5 2 1 2 1 3 2 3 2 7 1 4 4 4 4 4 4 4 3 Output 3 4 1","solution":"def count_distinct_subarrays(arr, k): Counts the number of distinct subarrays of length k in the given array. :param arr: List of integers :param k: Length of subarrays to consider :return: Number of distinct subarrays of length k subarrays = set() for i in range(len(arr) - k + 1): subarray = tuple(arr[i:i + k]) subarrays.add(subarray) return len(subarrays) def process_queries(arr, queries): Processes a list of queries on the given array. :param arr: List of integers :param queries: List of subarray lengths to consider in each query :return: List of results for each query (number of distinct subarrays) results = [] for query in queries: results.append(count_distinct_subarrays(arr, query)) return results def solve(test_cases): Processes multiple test cases, each containing an array and a series of queries. :param test_cases: List of tuples (array, queries) :return: List of lists, each containing results for the queries of one test case results = [] for arr, queries in test_cases: results.append(process_queries(arr, queries)) return results"},{"question":"An online retailer has a referral program. Each user can refer new users to the site, and those new users can also refer other users, creating a referral tree. The retailer wants to find out how many users have been referred directly or indirectly by a given user. The input consists of two parts. The first part is an integer `n` (1 ≤ n ≤ 100,000) followed by `n` strings, each representing a referral relationship in the format \\"referrer referree\\". The second part is a string representing the user for whom we need to count the number of users referred directly or indirectly. Write a function `countReferrals(n, referrals, user)` that takes the number of referral relationships `n`, a list of `referrals` (each element is a string \\"referrer referree\\"), and the `user` as input. The function should return the count of users referred directly or indirectly by the given user. Example: Input: ``` 5 A B A C B D C E A F A ``` Output: ``` 5 ``` Explanation: A referred B, C, and F. B referred D. C referred E. Total number of users referred by A (directly or indirectly) is 5 (B, C, D, E, F).","solution":"from collections import defaultdict, deque def countReferrals(n, referrals, user): # Create a dictionary to store the referral relationships referral_dict = defaultdict(list) # Populate the referral dictionary for referral in referrals: referrer, referree = referral.split() referral_dict[referrer].append(referree) # Use a set to keep track of all referred users and a queue for BFS referred_users = set() queue = deque([user]) while queue: current_user = queue.popleft() for referree in referral_dict[current_user]: if referree not in referred_users: referred_users.add(referree) queue.append(referree) return len(referred_users)"},{"question":"Given a large text document, you\'d like to find out how many words in the document are \\"contractions\\". A contraction is a shortened form of a word (or group of words) where missing letters are replaced by an apostrophe (e.g., \\"don\'t\\", \\"it\'s\\", \\"I\'m\\"). Your task is to write a program that takes in the content of a document and outputs the total number of contractions found. Input The first line contains an integer (N) (1 ≤ N ≤ 1000), the number of lines in the document. The next (N) lines contain the text of the document, where each line may contain multiple words separated by spaces. Each word consists of lowercase alphabetic characters and at most one apostrophe. Output Print the total number of contractions in the document. Examples Input 3 don\'t stop now I\'ll be there we\'re not done yet Output 3 Input 2 these are common words simple example text Output 0","solution":"def count_contractions(lines): Given a list of lines containing the text of a document, this function returns the number of contractions in the document. contractions_count = 0 for line in lines: words = line.split() for word in words: if \\"\'\\" in word: contractions_count += 1 return contractions_count"},{"question":"Valerie has 4 locks with different numbers of pins. The i-th lock has p_i pins. Valerie also has 2 keys and wants to distribute the locks in such a way that the total number of pins for the locks assigned to each key is equal. Is it possible to distribute the locks so that each key operates an equal number of pins? Input The only line contains four integers p_1, p_2, p_3 and p_4 (1 ≤ p_i ≤ 100) — the numbers of pins in each lock. Output Output YES if it\'s possible to give the locks to Valerie\'s keys so that the total number of pins operated by both keys is the same, or NO otherwise. Each character can be printed in any case (either uppercase or lowercase). Examples Input 3 9 5 7 Output YES Input 4 4 2 8 Output NO Note In the first sample test, Valerie can assign the first and fourth locks to one key and the second and third locks to the other key. This way, each key will operate 10 pins. In the second sample test, it\'s impossible to distribute the locks evenly between the two keys.","solution":"def can_distribute_locks_evenly(p1, p2, p3, p4): Determines if the locks can be distributed such that each key operates an equal number of pins. Parameters: p1, p2, p3, p4 (int): The number of pins in each lock. Returns: str: \'YES\' if it\'s possible to distribute the locks evenly, \'NO\' otherwise. pins = [p1, p2, p3, p4] total_pins = sum(pins) if total_pins % 2 != 0: return \\"NO\\" half_pins = total_pins // 2 for i in range(4): for j in range(i + 1, 4): if pins[i] + pins[j] == half_pins or total_pins - (pins[i] + pins[j]) == half_pins: return \\"YES\\" return \\"NO\\""},{"question":"A railway system needs to ensure trains do not clash at junctions. Therefore, a junction system has been put in place that identifies if two trains can travel on a particular route based on their departure and arrival times. Each route has a predefined departure and arrival time. If two trains are scheduled on the same route they cannot overlap in their times of departure and arrival. You are asked to write a program that helps in verifying if a new train can travel on a given route without clashing with any existing trains on that route. Input The first line of the input contains an integer T, the number of test cases. For each test case, the input consists of an integer N which tells the number of existing trains on a route, followed by N lines. Each of the N lines contains two integers, the departure time and the arrival time of an existing train. The next line contains two integers, the departure time and arrival time of the new train. All times are given in the form of a 24-hour clock (0000 to 2359). Output For each test case, output \\"yes\\" if the new train can travel on the route without clashing with any existing train, otherwise output \\"no\\". Example Input: 2 4 1500 1600 0900 1000 1130 1230 1630 1730 1100 1200 3 0800 0830 0930 1000 1100 1130 0900 0930 Output: no yes","solution":"def can_travel_without_clashing(num_cases, cases): results = [] for case in cases: n = case[\'N\'] existing_times = case[\'existing_times\'] new_departure, new_arrival = case[\'new_train_time\'] clash = False for (departure, arrival) in existing_times: if not (new_arrival <= departure or new_departure >= arrival): clash = True break results.append(\\"no\\" if clash else \\"yes\\") return results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 cases = [] for _ in range(T): N = int(data[idx]) idx += 1 existing_times = [] for _ in range(N): departure = int(data[idx]) arrival = int(data[idx + 1]) existing_times.append((departure, arrival)) idx += 2 new_train_time = (int(data[idx]), int(data[idx + 1])) idx += 2 cases.append({ \'N\': N, \'existing_times\': existing_times, \'new_train_time\': new_train_time, }) results = can_travel_without_clashing(T, cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"N cities are connected by N-1 bidirectional roads, forming a tree. Each city has a certain amount of gold. You are tasked with finding two cities A and B such that person 1 can travel from city A to city B through the roads, collecting the maximum amount of gold possible on the way. The gold can be collected from every city that person 1 visits (including cities A and B). Write a program that computes the maximum amount of gold a person can collect by traveling optimally between two cities. ------ Input Format ------ - The first line of input contains an integer N denoting the number of cities. - The second line contains N space-separated integers representing the amount of gold in each city. - The following N-1 lines each contain two integers u and v, denoting a bidirectional road between city u and city v. ------ Output Format ------ Print a single integer that is the maximum amount of gold collectable. ------ Constraints ------ 2 ≤ N ≤ 10^{5} 0 ≤ text{amount of gold in each city} ≤ 10^{4} ------ Sample Input 1 ------ 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ------ Sample Output 1 ------ 15 ------ Explanation 1 ------ By traveling from city 4 to city 5 via city 2, the person 1 collects 4 (from city 4), 2 (from city 2), and 9 (from city 5), totaling to 15. ------ Sample Input 2 ------ 3 10 20 30 1 2 1 3 ------ Sample Output 2 ------ 60 ------ Explanation 2 ------ By traveling from city 2 to city 3 via city 1, the person 1 collects 20 (from city 2), 10 (from city 1), and 30 (from city 3), totaling to 60.","solution":"import sys from collections import defaultdict, deque def max_gold(N, gold, edges): if N == 2: return sum(gold) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs_farthest_node(start): visited = [-1] * (N + 1) queue = deque([start]) visited[start] = 0 farthest_node = start distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > distance: distance = visited[neighbor] farthest_node = neighbor return farthest_node, distance, visited def path_sum(visited): return sum(gold[i-1] for i in range(1, N+1) if visited[i] != -1) node_a, _, _ = bfs_farthest_node(1) node_b, _, visited = bfs_farthest_node(node_a) return path_sum(visited) # Read inputs, process and output result def main(): input = sys.stdin.read data = input().split() N = int(data[0]) gold = list(map(int, data[1:N+1])) edges = [(int(data[i]), int(data[i+1])) for i in range(N+1, len(data), 2)] print(max_gold(N, gold, edges))"},{"question":"Alex loves playing with numbers. He recently came across an interesting problem involving Pascal\'s Triangle and got fascinated by its properties. Pascal\'s Triangle is formed by summing adjacent elements in preceding rows, with each row starting and ending with 1. For example, the first few rows of Pascal\'s Triangle are: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` Now, Alex wants to find out the sum of the elements of a given row in Pascal\'s Triangle. Given a row number `r`, help Alex compute the sum of the elements of the `r-th` row. Note: Alex starts counting rows from 0, so the 0th row is `1`, the 1st row is `1 1`, and so on. INPUT The first line contains an integer `T`, the number of queries. The next `T` lines each contain a single integer `r`, representing the row number of Pascal\'s Triangle. OUTPUT For each query, output a single integer representing the sum of the elements of the `r-th` row. CONSTRAINTS 1 ≤ T ≤ 10^5 0 ≤ r ≤ 10^5 SAMPLE INPUT 3 0 1 4 SAMPLE OUTPUT 1 2 16 Explanation: - The 0th row is `[1]`, and the sum is `1`. - The 1st row is `[1, 1]`, and the sum is `2`. - The 4th row is `[1, 4, 6, 4, 1]`, and the sum is `16` (since the sum of the elements of the `r-th` row is `2^r`).","solution":"def sum_of_pascals_triangle_row(r): Returns the sum of the elements of the r-th row in Pascal\'s Triangle. Since the sum of the elements in the r-th row is equal to 2^r, the function simply returns 2 raised to the power of r. return 2 ** r"},{"question":"A movie theatre has S screening rooms and M hallways connecting the screening rooms, allowing patrons to move between them. Each screening room can show exactly one movie at a time. Determine the number of independent screening zones in the theatre where an independent screening zone is defined as a group of screening rooms where any room can be reached from any other room within the same group, but not from rooms outside the group. -----Input:----- - The first line contains T, the number of test cases. - The first line of each test case contains S (number of screening rooms) and M (number of hallways). - The next M lines each contain two integers U and V denoting a hallway between screening rooms U and V. -----Output:----- For each test case, output the number of independent screening zones. -----Constraints:----- - 1 leq T leq 100 - 1 leq S, M leq 10^4 - 0 leq U, V < S -----Sample Input:----- 2 6 4 0 1 1 2 3 4 4 5 5 0 0 1 2 3 -----Sample Output:----- 2 3","solution":"def find_connected_components(S, M, edges): parent = list(range(S)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: parent[root_x] = root_y for u, v in edges: union(u, v) return len(set(find(x) for x in range(S))) def solve(test_cases): results = [] for S, M, edges in test_cases: result = find_connected_components(S, M, edges) results.append(result) return results"},{"question":"# Task Adam is considering buying a new phone but is unsure which one to pick. He has his own set of criteria to make a decision. Each phone can be rated on a scale from 1 to 10 in three categories: `Battery Life`, `Camera Quality`, and `Storage Capacity`. Adam will select the phone that has the highest weighted score based on his preferences. His preference for: - Battery Life is `B` percent. - Camera Quality is `C` percent. - Storage Capacity is `S` percent. Given a list of phones and their ratings in the three categories, write a function to determine the phone with the highest weighted score according to Adam\'s preferences. # Input/Output - `[input]` integer `n` The number of phones. `1 ≤ n ≤ 10^3` - `[input]` list of tuples `phones` Each tuple contains three integers representing the ratings (Battery Life, Camera Quality, Storage Capacity) for each phone. Ratings are in the range `1` to `10`. - `[input]` three integers `B`, `C`, `S` Adam\'s preference percentages for Battery Life, Camera Quality, and Storage Capacity respectively. `0 ≤ B, C, S ≤ 100` and `B + C + S = 100`. - `[output]` an integer The index of the phone with the highest weighted score. If multiple phones have the same highest score, return the smallest index. # Example ```python phones = [(6, 7, 8), (9, 6, 7), (8, 8, 6)] B = 50 C = 30 S = 20 # Output: 2 # Explanation: # Weighted scores: # Phone 1: 6*0.5 + 7*0.3 + 8*0.2 = 6.9 # Phone 2: 9*0.5 + 6*0.3 + 7*0.2 = 7.4 # Phone 3: 8*0.5 + 8*0.3 + 6*0.2 = 7.4 # Phone 2 and Phone 3 both have the highest weighted score, # so we return the smallest index. ``` # Note Make sure to round the weighted score to one decimal place when comparing the scores.","solution":"def find_best_phone(n, phones, B, C, S): Finds the phone with the highest weighted score based on Adam\'s preferences. Parameters: n (int): The number of phones. phones (list of tuples): Each tuple contains three integers representing the ratings (Battery Life, Camera Quality, Storage Capacity) for each phone. B (int): Adam\'s preference percentage for Battery Life. C (int): Adam\'s preference percentage for Camera Quality. S (int): Adam\'s preference percentage for Storage Capacity. Returns: int: The index of the phone with the highest weighted score. max_score = -1 best_phone_index = -1 for i in range(n): battery_life, camera_quality, storage_capacity = phones[i] weighted_score = (battery_life * B + camera_quality * C + storage_capacity * S) / 100 weighted_score = round(weighted_score, 1) # rounding to one decimal place if weighted_score > max_score or (weighted_score == max_score and best_phone_index == -1): max_score = weighted_score best_phone_index = i return best_phone_index"},{"question":"Task A group of friends is playing a game where they must form a circle and pass a ball to each other. Each friend is assigned a unique number ranging from `1` to `n`. The ball starts with friend `1` and they will pass it to the next friend in a sequential manner, i.e., friend `1` will pass the ball to friend `2`, friend `2` will pass it to friend `3`, and so on. When the ball reaches the friend with the highest number, they pass it back to friend `1` to continue the sequence. One of the rules of the game is that wherever friend `k` receives the ball, they will keep the ball if they have received it a total of `m` times. The game stops when this condition is met. Given the total number of friends `n` and the number of times `m` a particular friend should receive the ball, determine which friend will have the ball when the game stops. # Example For `n = 5` and `m = 3`, the output should be `3`. Explanation: - Friend `1` passes the ball to friend `2`. - Friend `2` passes the ball to friend `3`. - Friend `3` passes the ball to friend `4`. - Friend `4` passes the ball to friend `5`. - Friend `5` passes the ball back to friend `1`. This cycle continues. After two complete cycles, friend `3` receives the ball for the third time and the game stops. # Input/Output - `[input]` integer `n` - the number of friends. - Constraints: `2 ≤ n ≤ 100`. - `[input]` integer `m` - the number of times the ball must be received for the game to stop. - Constraints: `1 ≤ m ≤ 100`. - `[output]` an integer - The number assigned to the friend who will have the ball when the game stops.","solution":"def find_friend_with_ball(n, m): Determines which friend will have the ball after it has been passed around m times in a circle with n friends. Parameters: n (int): The total number of friends in the circle. m (int): The number of times a particular friend should receive the ball for the game to stop. Returns: int: The number assigned to the friend who will have the ball when the game stops. return (m - 1) % n + 1"},{"question":"You\'ve just joined a new company, and your team is working on a tool to generate brief summaries of news articles. The articles are broken down into paragraphs, and you need to identify the key sentences that capture the main ideas. -----Input----- The first line of input is an integer 1 le P le 1000, the number of paragraphs in the article. Each of the next P lines contains a paragraph. Each paragraph is a sequence of sentences, where each sentence ends with a period (\'.\'). -----Output----- Output the key sentence from each paragraph. A key sentence is defined as the one with the highest number of unique words in it. If multiple sentences have the same highest number of unique words, choose the first one encountered. Words are sequences of lowercase English letters \'a\'-\'z\' separated by spaces. -----Examples----- Sample Input: 3 climate change is a significant issue. it affects many species. economic growth has slowed down recently. the global market is volatile. investors are cautious. technology is advancing rapidly. new innovations emerge daily. Sample Output: climate change is a significant issue. economic growth has slowed down recently. technology is advancing rapidly. -----Notes----- - Consider splitting and processing sentences to count the unique words accurately. - Ensure that your method handles edge cases, such as paragraphs with a single sentence or repeated words within a sentence.","solution":"def key_sentences(p: int, paragraphs: list) -> list: def unique_word_count(sentence): words = sentence.split() return len(set(words)) key_sentences = [] for paragraph in paragraphs: sentences = paragraph.split(\'. \') max_unique_count = 0 key_sentence = \'\' for sentence in sentences: sentence = sentence.strip(\'.\') unique_count = unique_word_count(sentence) if unique_count > max_unique_count: max_unique_count = unique_count key_sentence = sentence + \'.\' key_sentences.append(key_sentence) return key_sentences"},{"question":"You are given a list of integers representing the prices of different commodities over several days. You are also allowed to make at most one transaction, which means you can buy one commodity and then sell it on a later day. Your task is to calculate the maximum profit you can achieve from this single transaction. For example, if the given prices are [7, 1, 5, 3, 6, 4], the maximum profit is achieved by buying on day 2 (price 1) and selling on day 5 (price 6), which gives a profit of 6 - 1 = 5. If it is not possible to achieve any profit, the profit should be 0. Input The first line contains one integer n (2 ≤ n ≤ 10^5) — the number of days. The second line contains n integers prices_1, prices_2, ..., prices_n (1 ≤ prices_i ≤ 10^9) — the prices of the commodities on different days. Output Print one integer — the maximum profit you can achieve from one transaction. If no profit is possible, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Input 7 2 4 1 7 5 8 3 Output 7","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single transaction. If no profit is possible, returns 0. n = len(prices) if n < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A company is organizing an event where all attendees must be seated in a large rectangular hall. Each row in the hall has the same number of seats, and each seat can be either occupied or unoccupied. The event organizers want to ensure social distancing by choosing a seating arrangement such that no two occupied seats are directly next to each other horizontally, vertically, or diagonally. Given the dimensions of the hall and the current seating arrangement, determine if the current seating arrangement adheres to the social distancing guidelines. -----Input----- Input begins with two integers R and C on a single line, giving the number of rows and columns in the hall (1 le R, C le 1000). The next R lines of input each contain a string of length C, where `.` represents an unoccupied seat and `X` represents an occupied seat. -----Output----- Output \\"valid\\" if the current seating arrangement adheres to the social distancing guidelines and \\"invalid\\" otherwise. -----Examples----- Sample Input 1: 3 3 .X. ... .X. Sample Output 1: valid Sample Input 2: 4 4 X... .... .... ..XX Sample Output 2: invalid","solution":"def is_valid_seating(R, C, seating): Checks if the given seating arrangement adheres to social distancing guidelines. Parameters: R (int): Number of rows C (int): Number of columns seating (list of str): List of strings representing seating arrangement Returns: str: \\"valid\\" if the arrangement adheres to guidelines and \\"invalid\\" otherwise. directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for r in range(R): for c in range(C): if seating[r][c] == \'X\': for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and seating[nr][nc] == \'X\': return \\"invalid\\" return \\"valid\\""},{"question":"Peter enjoys arranging letters and finding patterns in strings. His current fascination is with finding the longest substring that contains no repeating characters in any given string. Help Peter by writing a function that computes the length of such a substring. -----Input----- The only input line contains a string consisting of lowercase letters from the English alphabet with length between 1 and 10^5 inclusive. -----Output----- Print the length of the longest substring that contains no repeating characters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 -----Note----- In the first example, the answer is 3, the length of the substring \\"abc\\". In the second example, the answer is 1, with the substring \\"b\\". In the third example, the answer is 3, with the substring \\"wke\\". Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Given a string s, finds the length of the longest substring without repeating characters. n = len(s) char_index_map = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an integer n, find the n-th term of the sequence where each term is the sum of the digits raised to the power of their positions (1-indexed). For example, if the term is 1234, the calculation would be 1^1 + 2^2 + 3^3 + 4^4. Based on the results of these calculations, generate a sequence and determine the n-th term. Constraints * 1 ≤ n ≤ 100 Input The input looks like: n (the term number in the sequence that needs to be found) Output Print the n-th term of the sequence. Example Input 5 Output 512 Explanation Let\'s break down how the sequence is formed: Term 1: 1 (1^1 = 1) Term 2: 2 (2^1 = 2) Term 3: 4 (3^1 = 3, not a perfect cube. Next is 10: 1^1 + 0^2 = 1) Term 4: 27 (4^1 = 4, not a perfect power. Next is 100: 1^1 + 0^2 + 0^3 = 1) Term 5: 512 (5^1 = 5, not a perfect power. Next is 125: 1^1 + 2^2 + 5^3 = 1+4+125 = 130, then 512: 5^1+1^2+2^3 = 5+1+8 = 14, and so on until a correct perfect power)","solution":"def digit_power_sum(n): num = 1 count = 0 while count < n: current_sum = sum(int(digit) ** (idx + 1) for idx, digit in enumerate(str(num))) if current_sum == num: count += 1 num += 1 return num - 1"},{"question":"Write a function `uncommon_elements(list1, list2)` that takes two lists as input and returns a sorted list of elements that are present in one of the lists, but not both. The returned list should have no duplicates. For example: ```python uncommon_elements([1, 2, 3, 4], [3, 4, 5, 6]) # [1, 2, 5, 6] uncommon_elements([\'a\', \'b\', \'c\'], [\'b\', \'c\', \'d\', \'e\']) # [\'a\', \'d\', \'e\'] ``` Ensure your implementation handles empty input lists and lists with various data types.","solution":"def uncommon_elements(list1, list2): Returns a sorted list of elements that are in one of the lists but not both. set1 = set(list1) set2 = set(list2) uncommon = (set1 - set2).union(set2 - set1) return sorted(uncommon)"},{"question":"A sequence of numbers is called a mountain array if it consists of three parts: - An initial strictly increasing sequence - A peak element - A strictly decreasing sequence Formally, a mountain array consists of a sequence that satisfies the following conditions: 1. The length of the sequence is at least 3. 2. There exists some index `i` (0-indexed) with `0 < i < len(array) - 1` such that: - `array[0] < array[1] < ... < array[i]` - `array[i] > array[i + 1] > ... > array[len(array) - 1]` Given an array of integers, determine the length of the longest contiguous subarray that is a mountain. -----Input----- The first line of input contains an integer `n` (3 ≤ n ≤ 10000), the number of integers in the array. The next line contains `n` integers, representing the elements of the array `A` (-10^4 ≤ A[i] ≤ 10^4). -----Output----- Print a single integer which is the length of the longest contiguous subarray that is a mountain. If there is no such subarray, print 0. -----Examples----- Input 9 2 1 4 7 3 2 5 1 0 Output 5 Input 4 2 2 2 2 Output 0 Input 6 5 6 7 6 5 4 Output 6 Input 10 0 2 4 7 3 2 5 1 0 9 Output 6 -----Note----- In the first example, the longest mountain subarray is [1, 4, 7, 3, 2], having the length 5. In the second example, there is no mountain subarray since all elements are the same. In the third example, the entire array is a mountain with peak element 7 and length 6. In the fourth example, the mountain subarray [0, 2, 4, 7, 3, 2] has the length 6.","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"Jack is working on a data analysis project and needs to process large amounts of data efficiently. He has a list of integers, and he needs to find two special types of subarrays: 1. A subarray with the maximum sum. 2. A subarray with the minimum sum. Help Jack by writing a function that, given a list of integers, returns the maximum subarray sum, and the minimum subarray sum. -----Input----- The input consists of multiple test cases. The first line contains an integer T denoting the number of test cases. Each test case contains two lines. The first line of each test case contains an integer N denoting the number of integers in the list. The second line contains N space-separated integers representing the list. -----Output----- For each test case, output a single line containing two space-separated integers: the maximum subarray sum and the minimum subarray sum. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 100000 - -1000 ≤ list[i] ≤ 1000 -----Example----- Input: 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 Output: 9 -4 -1 -10 Note: - In the first example, the maximum subarray sum is 1+2+3+(-2)+5=9, and the minimum subarray sum is -2. - In the second example, the maximum subarray sum is -1 (as it is the largest single element), and the minimum subarray sum is -1-2-3-4=-10.","solution":"def max_min_subarray_sums(test_cases): def max_subarray_sum(nums): max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def min_subarray_sum(nums): min_sum = current_sum = nums[0] for num in nums[1:]: current_sum = min(num, current_sum + num) min_sum = min(min_sum, current_sum) return min_sum results = [] for case in test_cases: n, nums = case max_sum = max_subarray_sum(nums) min_sum = min_subarray_sum(nums) results.append((max_sum, min_sum)) return results"},{"question":"There is an online gaming tournament happening, and each player can participate in one or more games. Each game, when played, yields a certain number of points for the player, both positively and negatively. Given the list of players\' scores for a series of games, we need to determine the maximum total score achievable by each player from a contiguous subarray of games. A subarray is a continuous part of an array. You need to find the maximum sum of any possible subarray for each player. If all possible subarrays have a negative sum, return 0 for that player because it\'s better to not play any games at all. Input - The first line contains the integer n, the number of players (1 ≤ n ≤ 105). - The second line contains n integers, where the i-th integer represents the number of games that player i has played (1 ≤ games_i ≤ 105, ∑games_i ≤ 105). - The next n lines each contain a list of integers representing the scores for the games played by each player. The length of each list corresponds to the number of games the player has played, and the integers can be positive or negative (−104 ≤ score ≤ 104). Output Print n integers, where the i-th integer represents the maximum total score achievable for the i-th player from any contiguous subarray of their game scores. If the best possible score is negative, print 0 for that player. Examples Input 3 3 4 2 1 2 3 -1 2 3 -2 -1 -1 Output 6 5 0 Explanation In the first player\'s games, the subarray [1, 2, 3] has the maximum sum of 6. In the second player\'s games, the subarray [2, 3] has the maximum sum of 5. For the third player, all possible subarrays have a negative sum, so we print 0.","solution":"def max_subarray_score(num_players, games_played, players_scores): Returns a list of maximum subarray scores for each player, with a default minimum of 0 if all subarrays are negative def max_subarray_sum(arr): max_ending_here = max_so_far = 0 for x in arr: max_ending_here = max(0, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far results = [] for i in range(num_players): max_sum = max_subarray_sum(players_scores[i]) results.append(max_sum) return results"},{"question":"You are given a string `s` consisting of lowercase alphabets and the integer `k`. Write a function that returns the length of the shortest substring of `s` that contains at least `k` unique characters. If there is no such substring, return `-1`. Your function should take in two arguments: - `s` (a string of lowercase alphabets) - `k` (an integer, `1 <= k <= 26`) An example function signature in Python might look like this: `def shortest_substring_with_k_unique_chars(s: str, k: int) -> int:`","solution":"def shortest_substring_with_k_unique_chars(s: str, k: int) -> int: from collections import defaultdict # Edge case: if k is zero, return 0 if k == 0: return 0 n = len(s) if n == 0 or k > n: return -1 left = 0 min_length = float(\'inf\') char_count = defaultdict(int) unique_count = 0 # Use sliding window technique for right in range(n): if char_count[s[right]] == 0: unique_count += 1 char_count[s[right]] += 1 while unique_count >= k: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: unique_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Ravi has been given an assignment to write words with black ink on a large whiteboard. However, his ink pen runs out of ink after using it for a certain number of characters. He can refill the pen to continue writing. Given the words he needs to write and the ink capacity of his pen, determine how many times Ravi will need to refill the pen. -----Input:----- - First line will contain an integer `C`, the maximum number of characters Ravi\'s pen can write before it needs a refill. - Second line contains an integer `W`, the number of words Ravi needs to write. - Following `W` lines contain each word which needs to be written using the pen. -----Output:----- Output an integer denoting the number of times Ravi will need to refill the pen to write all the words. -----Constraints----- - 1 leq C leq 10^6 - 1 leq W leq 1000 - 1 leq text{length of each word} leq 1000 - Words contain only lowercase English letters. -----Sample Input:----- 10 4 pen notebook ink refill -----Sample Output:----- 3","solution":"def count_refills(C, W, words): total_characters = 0 refills = 0 for word in words: word_length = len(word) if total_characters + word_length > C: refills += 1 total_characters = word_length else: total_characters += word_length if total_characters > 0: refills += 1 return refills # Example usage: # C = 10 # W = 4 # words = [\\"pen\\", \\"notebook\\", \\"ink\\", \\"refill\\"] # Output should be 3"},{"question":"Given an integer array nums, and an integer target, return the indices of the two numbers such that they add up to the target. Each input has exactly one solution, and you may not use the same element twice. Your solution should have a time complexity less than O(n^2). The array can have positive and negative integers, and the elements can be repeated. However, there should be at least two distinct elements in the array. Input - The first line of input contains an integer T (1 ≤ T ≤ 100) — the number of test cases. - Each of the next T lines contains two integers n (2 ≤ n ≤ 100) and target (-10^9 ≤ target ≤ 10^9). - Followed by n integers (|nums[i] ≤ 10^9 for all i) representing the array. Output For each test case, print the indices of the two elements in the array that add up to the target, sorted in ascending order. If there are multiple answers, print any of them. Example Input 3 4 9 2 7 11 15 6 6 3 5 -2 8 11 -4 5 -3 1 -1 2 -2 3 Output 1 2 2 6 2 4 Note In the first example, the numbers at indices 1 (value=2) and 2 (value=7) add up to 9. In the second example, the numbers at indices 2 (value=5) and 6 (value=-4) add up to 6. In the third example, the numbers at indices 2 (value=-1) and 4 (value=-2) add up to -3. Remember, you may not use the same element twice, and you must return the indices sorted in ascending order. If there are multiple valid pairs, you can output any of them.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Args: nums (List[int]): List of integers. target (int): The target sum. Returns: List[int]: Indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement] + 1, i + 1]) num_to_index[num] = i def process_input_and_find_two_sums(T, test_cases): results = [] for case in test_cases: n, target, nums = case result = two_sum(nums, target) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): n = int(data[index]) target = int(data[index + 1]) nums = list(map(int, data[index + 2 : index + 2 + n])) test_cases.append((n, target, nums)) index += 2 + n results = process_input_and_find_two_sums(T, test_cases) for result in results: print(f\\"{result[0]} {result[1]}\\") if __name__ == \\"__main__\\": main()"},{"question":"A sequence of numbers is called a Fibonacci sequence if each number in the sequence (after the first two) is the sum of the two preceding ones. The first two numbers in the sequence are usually 0 and 1. Here\'s an example: 0, 1, 1, 2, 3, 5, 8, 13, 21, ... Your task is to determine if a given number is a Fibonacci number. -----Input----- The first line is an integer t (1 le t le 10^5) — the number of test cases. Each of the next t lines contains one integer x (1 le x le 10^{18}) — the number to test. -----Output----- For each test case, print \\"YES\\" if the number is a Fibonacci number and \\"NO\\" otherwise. -----Examples----- Input 5 0 1 2 4 123456789012345678 Output YES YES YES NO NO -----Note----- The Fibonacci sequence starts with 0, 1, 1, 2, 3, 5, 8, 13, 21, ... So, in the given examples: - 0 is a Fibonacci number. - 1 is repeated in the sequence and is a Fibonacci number. - 2 is a Fibonacci number. - 4 is not in the sequence and hence not a Fibonacci number. - 123456789012345678 is a large number and not in the sequence.","solution":"import math def is_fibonacci(n): Check if a number n is a Fibonacci number by confirming if one (or both) of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. # Helper function to check if a number is a perfect square def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x # Check the two conditions test1 = 5 * n * n + 4 test2 = 5 * n * n - 4 return is_perfect_square(test1) or is_perfect_square(test2) def process_test_cases(t, test_cases): results = [] for x in test_cases: if is_fibonacci(x): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a large text document, your task is to count the total number of unique words in it. For the purpose of this task, a word is defined as any sequence of characters separated by spaces. Words are case-insensitive, meaning that \\"Hello\\", \\"hello\\", and \\"HELLO\\" are considered the same word. -----Input----- The input consists of a single string containing the entire text document. The string length can be up to 10^6 characters, and it may contain letters (both uppercase and lowercase), digits, punctuation marks, and spaces. -----Output----- Output a single integer — the number of unique words in the provided text as defined above. -----Examples----- Input ``` Hello world! Hello again, world. ``` Output ``` 3 ``` Input ``` This is a Test. This test is simple. ``` Output ``` 5 ``` -----Note----- In the first example, the words \\"Hello\\", \\"world\\", and \\"again\\" are considered unique after converting all to lowercase. In the second example, the words \\"This\\", \\"is\\", \\"a\\", \\"test\\", and \\"simple\\" are considered unique after converting all to lowercase. The word \\"test\\" appears twice but is counted only once as it is case-insensitive and considered the same.","solution":"import re def count_unique_words(text): Returns the number of unique words in the given text. Words are case insensitive and any sequence of characters separated by spaces is considered a word. # Convert text to lowercase text = text.lower() # Use regular expression to find all words words = re.findall(r\'bw+b\', text) # Use a set to store unique words unique_words = set(words) # Return the number of unique words return len(unique_words)"},{"question":"Consider a maze represented as an n x m binary matrix, where 1 represents walls and 0 represents open paths. Your task is to determine the minimum number of moves required to reach from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) in the maze. You can move up, down, left, or right, but cannot move through walls. If it is impossible to reach the destination, return -1. Write a function `minMoves(n, m, maze)` that takes in the dimensions of the maze and the maze itself, then returns the minimum number of moves needed to reach the destination, or -1 if it\'s not possible. # Function Signature `def minMoves(n: int, m: int, maze: List[List[int]]) -> int:` # Input - `n` (1 ≤ n ≤ 1000): The number of rows in the maze. - `m` (1 ≤ m ≤ 1000): The number of columns in the maze. - `maze`: A list of lists of integers representing the maze. Each element is either 0 or 1. # Output - An integer representing the minimum number of moves required to reach the bottom-right corner, or -1 if it is not possible. # Example ```python assert minMoves(3, 3, [ [0, 1, 0], [0, 0, 0], [1, 0, 0] ]) == 4 assert minMoves(3, 3, [ [0, 0, 0], [0, 1, 1], [1, 1, 0] ]) == -1 ``` # Notes 1. The given maze will always have at least one row and one column. 2. When the start point is the same as the destination `(0, 0)` and `(n-1, m-1)` are the same point, the number of moves is 0. 3. The input maze will not be all walls meaning that there is always at least one 0 in the maze.","solution":"from collections import deque def minMoves(n, m, maze): Returns the minimum number of moves required to reach the bottom-right corner of the maze, or -1 if it is not possible. # Return immediately if the start or end are walls if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS and add the start position queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If we reach the bottom-right corner if row == n-1 and col == m-1: return dist # Check all possible directions for dr, dc in directions: new_row, new_col = row + dr, col + dc # If the new position is within bounds and not a wall and not yet visited if 0 <= new_row < n and 0 <= new_col < m and maze[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) # If we finish the loop without having reached the bottom-right corner return -1"},{"question":"A media streaming service is creating a new system to recommend shows to its users. Each show has a certain rating, and each user has certain preferences for genres and maximum number of episodes they are willing to watch. The system should recommend the best possible show that matches the user\'s criteria. Write a program that helps the media streaming service by determining the best show for a user based on their required genre and maximum episode limit. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of available shows. - The next `n` lines contain the details of each show in the format: - a string `name` (1 ≤ length of name ≤ 50), - a string `genre` (1 ≤ length of genre ≤ 20), - two integers `episodes` (1 ≤ episodes ≤ 1000) and `rating` (0 ≤ rating ≤ 100). - The last line contains a string `preferred_genre` and an integer `max_episodes` (1 ≤ max_episodes ≤ 1000), separated by a space. Output: - Print the name of the show with the highest rating that matches the user\'s preferred genre and is within the episode limit. If there are multiple shows with the same highest rating, print the one that appears first in the list of shows given in the input. If no show matches the user\'s criteria, print \\"No suitable show found\\". Examples: Input: 5 BreakingBad Drama 62 95 StrangerThings SciFi 34 90 GameOfThrones Fantasy 73 92 TheCrown Drama 50 89 Friends Comedy 236 85 Drama 60 Output: TheCrown Input: 3 TheOffice Comedy 201 87 Brooklyn99 Comedy 153 85 ParksAndRec Comedy 125 88 Comedy 200 Output: ParksAndRec","solution":"def recommend_show(n, shows, preferred_genre, max_episodes): best_show = None highest_rating = -1 for show in shows: name, genre, episodes, rating = show if genre == preferred_genre and episodes <= max_episodes: if rating > highest_rating: highest_rating = rating best_show = name if best_show: return best_show else: return \\"No suitable show found\\" # Example input n = 5 shows = [ (\\"BreakingBad\\", \\"Drama\\", 62, 95), (\\"StrangerThings\\", \\"SciFi\\", 34, 90), (\\"GameOfThrones\\", \\"Fantasy\\", 73, 92), (\\"TheCrown\\", \\"Drama\\", 50, 89), (\\"Friends\\", \\"Comedy\\", 236, 85) ] preferred_genre = \\"Drama\\" max_episodes = 60 print(recommend_show(n, shows, preferred_genre, max_episodes)) # Output: TheCrown"},{"question":"A tourist is exploring a new city and needs help navigating the city streets. The city is represented as a grid of characters where \'.\' represents an open path the tourist can walk on, \'#\' represents a building the tourist cannot go through, \'S\' represents the starting point of the tourist, and \'E\' represents the destination. Your task is to determine whether the tourist can reach the destination \'E\' starting from \'S\'. The tourist can move up, down, left, or right but cannot move diagonally or through buildings. Input The first input line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The following n lines each contain a string of length m representing the city grid. It is guaranteed that there will be exactly one \'S\' and one \'E\' in the grid. Output Print \\"YES\\" if the tourist can reach the destination \'E\' from the starting point \'S\', otherwise print \\"NO\\". Examples Input 4 4 .S.. ..#. ..#E .... Output YES Input 3 3 S .#. .E Output NO Input 5 5 S.... ... ... ...#E .... Output YES Note In the first sample, the tourist can move right, then down twice, and then right to reach the destination. In the second sample, the buildings block any possible path from \'S\' to \'E\'. In the third sample, the tourist can move right four times and then directly down to reach the destination.","solution":"def can_reach_destination(grid, n, m): from collections import deque # Finding the start \'S\' and end \'E\' points start = None end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"NO\\" # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Converting the input into required format for testing def explore_city(n, m, grid_lines): grid = [list(line) for line in grid_lines] return can_reach_destination(grid, n, m)"},{"question":"You are a treasure hunter and you have just found a series of maps that lead to hidden treasures buried along a very long trail. Unfortunately, each map is incomplete and you can only see parts of the trail on each map. However, if you follow the order of the maps correctly, you can figure out the complete trail to find all the treasures. Each part of the trail is marked with a unique integer and contains a certain number of treasures. Your task is to write a program that determines the maximum number of treasures you can collect by following the trail in the correct sequence. -----Input----- The input consists of the following: - One line containing a single integer 0 leq N leq 10^5, the number of maps you have found; - N lines, each containing three integers A, B, and T where A leq B, representing the part of the trail from point A to point B, and T, the number of treasures found in this part of the trail. -----Output----- Output a single line containing a single integer, the maximum number of treasures you can collect by following the complete sequence of the trail. -----Examples----- Sample Input 1: 3 1 3 10 2 5 20 4 6 30 Sample Output 1: 60 Sample Input 2: 2 1 2 5 3 4 10 Sample Output 2: 15","solution":"def max_treasures(N, trail_parts): Determines the maximum number of treasures that can be collected by following the complete trail in correct sequencial order. Arguments: N -- integer, number of trail parts/maps (0 <= N <= 10^5) trail_parts -- list of tuples, each containing three integers A, B, and T which describe a part of the trail from point A to point B with T treasures in that part Returns: total_treasures -- integer, maximum number of treasures collected total_treasures = sum(T for A, B, T in trail_parts) return total_treasures"},{"question":"A scientist is developing a computer simulation to model the growth of a plant population over time. Each plant in the population has the potential to produce seeds that can grow into new plants in the next time step. The growth process is governed by the following rules: 1. Each plant produces exactly k seeds. 2. A seed has a p% probability of growing into a new plant. 3. Seeds that do not grow into new plants disappear. Given the initial number of plants and the rules above, calculate the expected number of plants after n time steps. ---Input--- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains four integers: N (the initial number of plants), k (the number of seeds produced by each plant), p (the probability percentage that a seed will grow into a new plant), and n (the number of time steps). ---Output--- For each test case, print a single real number — the expected number of plants after n time steps. Your answer will be considered correct if its absolute or relative error does not exceed 10^{-6}. ---Constraints--- - 1 le T le 10^4 - 1 le N le 1000 - 1 le k le 10 - 0 le p le 100 - 1 le n le 10 ---Example Input--- 3 2 3 50 1 1 2 75 2 5 5 100 0 ---Example Output--- 3.0 2.75 5.0 ---Explanation--- - For the first test case, there are initially 2 plants. Each plant produces 3 seeds, and each seed has a 50% chance of growing into a new plant. After 1 time step, the expected number of new plants is 2 * 3 * 0.5 = 3.0. - For the second test case, there is initially 1 plant. Each plant produces 2 seeds, and each seed has a 75% chance of growing into a new plant. After the first time step, the expected number of plants is 1 + 1 * 2 * 0.75 = 1 + 1.5 = 2.5. After the second time step, the expected number of new plants from the previous generation of 2.5 plants is 2.5 * 2 * 0.75 = 3.75. Adding the plants from the initial step, this totals 2.5 + 1.75 = 4.25. - For the third test case, no time steps are taken, so the number of plants remains the same at 5.0.","solution":"def expected_number_of_plants(T, test_cases): results = [] for case in test_cases: N, k, p, n = case p = p / 100 # Convert percentage to decimal expected_plants = N for _ in range(n): expected_plants = expected_plants * k * p results.append(expected_plants) return results"},{"question":"Maya enjoys playing with binary strings. Her teacher, Mr. Codey, has given her a new task that she finds interesting and challenging. Let’s define a binary string as a sequence consisting only of the characters \'0\' and \'1\'. A binary string is considered balanced if it contains an equal number of \'0\'s and \'1\'s. For example, \\"0101\\" and \\"0011\\" are balanced binary strings, but \\"011\\" and \\"1000\\" are not. Maya needs your help to figure out whether a given string can be rearranged to form a balanced binary string. If it is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first and only line of each test case contains a binary string s (1 le |s| le 10^5), where |s| is the length of the string. The total length of all strings combined does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if the string can be rearranged to form a balanced binary string, otherwise print \\"NO\\". -----Examples----- Input 3 1100 101 110 Output YES NO NO -----Note----- In the first test case, \\"1100\\" can be rearranged to \\"1010\\" or \\"0101\\" which are balanced binary strings. In the second test case, \\"101\\" cannot be rearranged to form a balanced binary string as there is one \'0\' and two \'1\'s. In the third test case, \\"110\\" cannot be rearranged to form a balanced binary string as there are two \'1\'s and one \'0\'.","solution":"def can_be_balanced(s): Determines if a binary string can be rearranged to form a balanced binary string. Args: s (str): The binary string to assess. Returns: str: \\"YES\\" if the string can be rearranged to form a balanced binary string, otherwise \\"NO\\". count_0 = s.count(\'0\') count_1 = s.count(\'1\') return \\"YES\\" if count_0 == count_1 else \\"NO\\" def process_test_cases(t, test_cases): Process multiple test cases to determine if each binary string can be rearranged into a balanced binary string. Args: t (int): Number of test cases. test_cases (list): List of binary strings. Returns: list: List of results (\\"YES\\" or \\"NO\\") for each test case. results = [] for s in test_cases: results.append(can_be_balanced(s)) return results"},{"question":"Anna is creating a social media platform with a strong focus on privacy. Users on this platform can send friend requests to each other, but Anna wants to ensure that each user can have at most one friend request pending at a time. She\'s worried that, given a list of friend requests, there might be a situation where a user has multiple friend requests pending. You need to write a function that, given a list of friend requests, determines if any user has more than one friend request pending. Each friend request is represented as a pair of integers (x, y), where x is the user sending the request and y is the user receiving the request. ------Input------ The first line contains a single integer n (1 ≤ n ≤ 100000), representing the number of friend requests. The next n lines each contain two integers x and y (1 ≤ x, y ≤ 100000), denoting a friend request from user x to user y. ------Output------ Output \\"YES\\" if any user has more than one friend request pending. Otherwise, output \\"NO\\". ------Examples------ Input: 4 1 2 2 3 1 4 4 2 Output: YES Input: 3 1 2 2 3 3 4 Output: NO ------Explanation------ In the first example, user 2 has two incoming friend requests (from users 1 and 4). Therefore, the output is \\"YES\\". In the second example, no user has more than one pending friend request, so the output is \\"NO\\".","solution":"def has_multiple_pending_requests(n, requests): Determines if any user has more than one friend request pending. Parameters: - n: int, the number of friend requests - requests: list of tuples, each containing two integers x and y, denoting a friend request from user x to user y Returns: - str: \\"YES\\" if any user has more than one friend request pending, \\"NO\\" otherwise pending_requests = {} for x, y in requests: if y in pending_requests: return \\"YES\\" pending_requests[y] = True return \\"NO\\""},{"question":"You are given a binary string consisting of n characters. Your task is to determine the minimum number of consecutive characters that need to be flipped to make the entire string alternating between \'0\' and \'1\'. In other words, you need to change the string to either \\"010101...\\" or \\"101010...\\". Flipping a character means changing \'0\' to \'1\' or \'1\' to \'0\'. The characters can be flipped in any order, but you need to find the minimum number of flips required. Input The first line contains an integer n (1 ≤ n ≤ 100), the length of the binary string. The second line contains a binary string of length n consisting only of characters \'0\' and \'1\'. Output Print a single integer: the minimum number of flips required to make the binary string alternating. Examples Input 5 01010 Output 0 Input 6 111000 Output 2 Note In the first sample, the string is already alternating and no flips are needed. In the second sample, one way to make the string alternating with the minimum of 2 flips is to change it to \\"101010\\" by flipping the third and fourth characters.","solution":"def min_flips_to_alternate(n, binary_string): Determines the minimum number of consecutive character flips needed to make the binary string alternating. Args: n (int): Length of the binary string. binary_string (str): The binary string consisting of \'0\'s and \'1\'s. Returns: int: The minimum number of flips required to make the binary string alternating. pattern1 = \'01\' * (n // 2 + 1) pattern2 = \'10\' * (n // 2 + 1) flips_pattern1 = sum(binary_string[i] != pattern1[i] for i in range(n)) flips_pattern2 = sum(binary_string[i] != pattern2[i] for i in range(n)) return min(flips_pattern1, flips_pattern2)"},{"question":"In a faraway land, there is a special day when everyone loves to play with zeroes. On this special day, they have a game where they repeatedly remove any zeroes from a number until no zeroes are left. They would like to know the smallest number of operations required to achieve a number with no zeroes for a given number. To achieve this, you have to perform an operation where you replace a selected non-zero digit in the number with a zero. Your task is to determine the minimum number of operations required to remove all zeroes from the number by converting non-zero digits to zeroes strategically. -----Input----- The first line of input data contains an integer t (1 leq t leq 100) — the number of test cases. Next, descriptions of t test cases follow. Each test case consists of a single line containing a positive integer x (1 leq x leq 10^9) — the number to be transformed by the game. -----Output----- For each of the t test cases, print the minimal number of operations needed to remove all zeroes from the number. -----Examples----- Input 3 1024 305 9000 Output 1 1 3 -----Note----- In the first test case, by changing the digit \'1\' to \'0\', the number becomes \'024\', and then the leading zero can be ignored to get \'24\'. In the second test case, changing \'3\' to \'0\' gives \'005\', and leading zeroes can be ignored to get \'5\'. In the third test case, three operations are required to change each \'9\' to \'0\', resulting in \'0000\', which can be ignored entirely leaving no number at all.","solution":"def min_operations_to_remove_zeroes(t, test_cases): For each number in the test cases, determine the minimum number of operations required to remove all zeroes by converting non-zero digits to zero. results = [] for x in test_cases: operations = str(x).count(\'0\') results.append(operations) return results"},{"question":"You are given a string containing a sequence of words separated by spaces. Return the longest word from the string. If there are multiple words of the same maximum length, return the first one encountered. Example: `\\"I love programming challenges\\"` => `programming` `\\"This is a test sentence\\"` => `sentence` Note: You can assume the input string will always contain at least one word.","solution":"def longest_word(s): Returns the longest word in the string s. If there are multiple words of the same maximum length, return the first one encountered. words = s.split() longest = words[0] for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"In a magical kingdom, there are N cities and M bidirectional roads connecting these cities. The roads form a fully connected graph, meaning there\'s a direct road between every pair of cities. A powerful wizard has cast a strange spell on the kingdom\'s road network, causing each road to have a unique magical weight. The wizard\'s spell has a peculiar effect: you can reduce the magical weight of any road by casting an incantation equal to the current magical weight of that road. Each time you reduce the weight of a road, its weight is halved. For example, if the current weight is 10, casting an incantation of 10 will reduce it to 5, then if casted again it reduces to 2.5 (consider rounding down). The goal is to minimize the maximum total weight of any path between two cities after performing up to K such incantations. Given this enchanted road network, determine the minimum possible maximum weight for Q pairs of cities after performing up to K incantations. Input: The first line contains three positive integers N (1 ≤ N ≤ 100), M (≥ N*(N-1)/2), and K (1 ≤ K ≤ 10^6), denoting the number of cities, the number of roads, and the total number of incantations respectively. Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^2), denoting that there\'s a road between cities u and v with magical weight w. Each of the next Q lines contains two integers a and b (1 ≤ a, b ≤ N), representing a query for the path between cities a and b. Output: For each query, output the minimum possible maximum weight of the path between the corresponding pair of cities after performing up to K incantations. Example: Input: 5 10 5 1 2 10 1 3 20 1 4 15 1 5 30 2 3 25 2 4 30 2 5 10 3 4 35 3 5 40 4 5 25 3 1 5 2 4 3 5 Output: 15 15 20 Note: The goal is to calculate the minimum possible maximum weight of any path after performing up to K incantations. Each query asks for the optimal path weight between specific pairs of cities.","solution":"from heapq import heappop, heappush from math import inf def floyd_warshall(n, graph): dist = [[inf] * n for _ in range(n)] for i in range(n): for j in range(n): if i == j: dist[i][j] = 0 elif graph[i][j] != inf: dist[i][j] = graph[i][j] dist[j][i] = graph[i][j] for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def min_max_path_after_incantations(n, roads, k, queries): graph = [[inf] * n for _ in range(n)] for u, v, w in roads: graph[u - 1][v - 1] = w graph[v - 1][u - 1] = w dist = floyd_warshall(n, graph) max_weights = [] for _ in range(min(k, len(roads))): max_val = 0 max_edge = None for u in range(n): for v in range(n): if graph[u][v] != inf and graph[u][v] > max_val: max_val = graph[u][v] max_edge = (u, v) if max_edge: u, v = max_edge new_weight = graph[u][v] // 2 graph[u][v] = new_weight graph[v][u] = new_weight dist = floyd_warshall(n, graph) results = [] for a, b in queries: results.append(dist[a-1][b-1]) return results"},{"question":"Aditya is preparing for a marathon. He plans to run X kilometers every day. Calculate the total distance he will run in Y days. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer X — the number of kilometers he runs each day. - The second line of each test case contains an integer Y — the total number of days he plans to run. ------ Output Format ------ For each test case, output the total distance Aditya will run. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ X ≤ 100 1 ≤ Y ≤ 100 ----- Sample Input 1 ------ 3 5 3 10 2 4 29 ----- Sample Output 1 ------ 15 20 116 ----- Explanation 1 ------ Test Case 1: Since he runs 5 kilometers per day and plans to run for 3 days, the total distance is 5 * 3 = 15 kilometers. Test Case 2: Since he runs 10 kilometers per day and plans to run for 2 days, the total distance is 10 * 2 = 20 kilometers. Test Case 3: Since he runs 4 kilometers per day and plans to run for 29 days, the total distance is 4 * 29 = 116 kilometers.","solution":"def total_distance_for_marathon(test_cases: list) -> list: Calculate the total distance Aditya will run for each test case. Args: test_cases (list): A list where each element is a tuple (X, Y) for each test case. Returns: list: A list of total distances for each test case. results = [] for x, y in test_cases: results.append(x * y) return results"},{"question":"Create a function that takes a positive integer as input and returns its corresponding column title as it would appear in an Excel sheet. In an Excel sheet, columns are labeled using letters of the alphabet: \'A\' for column 1, \'B\' for column 2, \'C\' for column 3, and so on. After \'Z\', the columns continue with \'AA\', \'AB\', \'AC\', etc., similar to a base-26 number system but without a zero digit. For example, 1 -> A, 2 -> B, 26 -> Z, 27 -> AA, 28 -> AB, and so on. Example: ```python solution(1) # should return \\"A\\" solution(28) # should return \\"AB\\" solution(701) # should return \\"ZY\\" ``` ```Elixir Solution.title(1) # should return \\"A\\" Solution.title(28) # should return \\"AB\\" Solution.title(701) # should return \\"ZY\\" ```","solution":"def excel_column_title(n): Given a positive integer n, return its corresponding column title in Excel. result = [] while n > 0: n -= 1 # Adjusting 1-based index to 0-based remainder = n % 26 result.append(chr(remainder + ord(\'A\'))) n //= 26 return \'\'.join(result[::-1])"},{"question":"You are given a grid of size MxN where each cell in the grid can have one of three values: - 0: representing an empty cell, - 1: representing a fresh orange, - 2: representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Determine the minimum number of minutes that must elapse until no fresh orange remains. If this is impossible, return -1. Example 1: Input: M = 3, N = 3 grid = [[2,1,1], [1,1,0], [0,1,1]] Output: 4 Example 2: Input: M = 3, N = 3 grid = [[2,1,1], [0,1,1], [1,0,1]] Output: -1 Example 3: Input: M = 1, N = 2 grid = [[0,2]] Output: 0 Your Task: Complete the function `orangesRotting()` which takes an integer M, an integer N, and a 2D integer array grid as input and returns an integer representing the minimum number of minutes until all fresh oranges rot, or -1 if it is impossible. Expected Time Complexity: O(M*N) Expected Auxiliary Space: O(M*N) Constraints: 1 ≤ M, N ≤ 100 0 ≤ grid[i][j] ≤ 2","solution":"from collections import deque def orangesRotting(M, N, grid): Determine the minimum number of minutes until no fresh orange remains. Args: M : int : number of rows N : int : number of columns grid : List[List[int]] : the grid representing the oranges Returns: int : minimum number of minutes until all fresh oranges rot, or -1 if it\'s impossible def is_fresh_orange(i, j): return 0 <= i < M and 0 <= j < N and grid[i][j] == 1 queue = deque() fresh_count = 0 for i in range(M): for j in range(N): if grid[i][j] == 2: queue.append((i, j, 0)) # (i, j, minutes) elif grid[i][j] == 1: fresh_count += 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] minutes_elapsed = 0 while queue: x, y, minutes = queue.popleft() minutes_elapsed = minutes for dx, dy in directions: nx, ny = x + dx, y + dy if is_fresh_orange(nx, ny): grid[nx][ny] = 2 fresh_count -= 1 queue.append((nx, ny, minutes + 1)) return minutes_elapsed if fresh_count == 0 else -1"},{"question":"An inventory management system needs to keep track of products in a warehouse. Each product can be identified by its unique identifier (a non-negative integer), and has a weight (a positive real number in kilograms) and a count (a non-negative integer representing the number of units in stock). Your task is to design a function `manage_inventory` which can handle the following operations: - **Add a product:** Adds a new product to the inventory with a unique identifier, weight, and count. - **Remove a product:** Removes an existing product from the inventory by its identifier. - **Update a product count:** Updates the count of an existing product. - **Calculate total weight:** Calculates the total weight of all products currently in stock. You need to implement the following methods within the `InventorySystem` class: 1. `add_product(product_id: int, weight: float, count: int) -> None`: Adds a new product to the inventory. 2. `remove_product(product_id: int) -> None`: Removes a product from the inventory. 3. `update_product_count(product_id: int, count: int) -> None`: Updates the count of an existing product. 4. `calculate_total_weight() -> float`: Returns the total weight of all products currently in stock. # Example: ```python inv = InventorySystem() inv.add_product(1, 2.5, 10) inv.add_product(2, 1.0, 5) inv.update_product_count(1, 15) inv.remove_product(2) total_weight = inv.calculate_total_weight() # should return 37.5 print(total_weight) # Output: 37.5 ``` # Constraints: - The `add_product` method will only be called with a unique `product_id` that does not already exist in the inventory. - The `remove_product` and `update_product_count` methods will only be called with `product_id`s that exist in the inventory. - The weight of each product will be a positive real number less than or equal to 10^4. - The count of each product will be a non-negative integer less than or equal to 10^5. # Your task: Implement the `InventorySystem` class with the methods described above.","solution":"class InventorySystem: def __init__(self): self.inventory = {} def add_product(self, product_id: int, weight: float, count: int) -> None: Adds a new product to the inventory. self.inventory[product_id] = {\'weight\': weight, \'count\': count} def remove_product(self, product_id: int) -> None: Removes a product from the inventory. if product_id in self.inventory: del self.inventory[product_id] def update_product_count(self, product_id: int, count: int) -> None: Updates the count of an existing product. if product_id in self.inventory: self.inventory[product_id][\'count\'] = count def calculate_total_weight(self) -> float: Returns the total weight of all products currently in stock. total_weight = 0.0 for product in self.inventory.values(): total_weight += product[\'weight\'] * product[\'count\'] return total_weight"},{"question":"You are given a positive integer n, representing the number of elements in an array. You need to create an array of length n where each element is an integer between 1 and n inclusive. A \\"beautiful\\" array is defined as an array where no two adjacent elements are coprime. Two numbers are coprime if their greatest common divisor (GCD) is 1. Your goal is to construct a beautiful array if it exists, and output it. Otherwise, you should throw an error indicating that it\'s not possible. Input: - The first and only line of input will contain a positive integer n (2 ≤ n ≤ 10^5). Output: - If there is no such array, print the single integer -1. - Otherwise, print n integers, representing the beautiful array where no two adjacent elements are coprime. Example 1: Input: 4 Output: 2 4 2 4 Explanation: In this example, the array [2, 4, 2, 4] is beautiful because each adjacent pair (2, 4) has a GCD of 2, which is greater than 1. Example 2: Input: 5 Output: -1 Explanation: In this example, it is not possible to create a beautiful array of length 5 because, with numbers from 1 to 5, not all coprimal pairs can be avoided. Note: - The array should consist of numbers from 1 to n inclusive only. - A single solution is sufficient to be printed, if multiple solutions exist.","solution":"def create_beautiful_array(n): Creates a beautiful array if possible. A beautiful array is an array where no two adjacent elements are coprime. :param n: Length of the array :type n: int :return: A beautiful array or -1 if not possible :rtype: list[int] or int if n % 2 != 0: return -1 # If n is odd, it\'s impossible to make a beautiful array # For even n, we can construct the array by alternating between 2 and 4 beautiful_array = [2 if i % 2 == 0 else 4 for i in range(n)] return beautiful_array"},{"question":"Emily is planning a trip to a nearby city and wants to rent a bicycle for a day. The rental shop has various types of bicycles, and the rental cost depends on the type of bicycle. There are two types of bicycles, Type X and Type Y. Type X bicycles cost P dollars per hour, while Type Y bicycles cost Q dollars per hour. Emily has R dollars and wants to rent the bicycle for N hours. Your task is to determine if Emily can afford to rent either type of bicycle for N hours within her budget. -----Constraints----- - All input values are integers. - 1 leq P, Q leq 100 - 1 leq N leq 24 - 1 leq R leq 1000 -----Input----- Input is given from Standard Input in the following format: P Q N R -----Output----- If Emily can rent either type of bicycle for N hours within her budget, print \\"Yes\\"; if she cannot, print \\"No\\". -----Sample Input----- 20 15 5 100 -----Sample Output----- Yes 20 dollars per hour for Type X and 15 dollars per hour for Type Y. For 5 hours, she will need either 20 * 5 = 100 dollars or 15 * 5 = 75 dollars. She has 100 dollars, so she can rent Type Y bicycle.","solution":"def can_afford_bicycle(P, Q, N, R): Determine if Emily can afford to rent either type of bicycle for N hours within her budget R. :param P: Cost per hour for Type X bicycle :param Q: Cost per hour for Type Y bicycle :param N: Number of hours she wants to rent the bicycle :param R: Her budget in dollars :return: \\"Yes\\" if she can afford either type, otherwise \\"No\\" cost_X = P * N cost_Y = Q * N if cost_X <= R or cost_Y <= R: return \\"Yes\\" else: return \\"No\\""},{"question":"Given an array of integers and a number K, find the maximum sum of a subarray of length K. Example 1: Input: N = 5 A[] = {1, 2, 3, 4, 5} K = 3 Output: 12 Explanation: The subarray of length 3 with the maximum sum is {3, 4, 5} which gives the sum 12. Example 2: Input: N = 4 A[] = {2, 1, 5, 1} K = 2 Output: 6 Explanation: The subarray of length 2 with the maximum sum is {5, 1} which gives the sum 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSumOfKLengthSubarray() which takes the array A[] and its size N, and integer K as inputs and returns the maximum sum of a subarray of length K. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1<=N<=10^{5} 1<=A[i]<=10^{5} 1<=K<=N","solution":"def maxSumOfKLengthSubarray(A, N, K): Returns the maximum sum of a subarray of length K. Parameters: A : list[int] -> Array of integers N : int -> Length of the array K : int -> Length of the subarray Returns: int - Maximum sum of a subarray of length K # Calculate the sum of the first window of size K max_sum = current_sum = sum(A[:K]) # Iterate through the array and adjust window size for i in range(K, N): current_sum += A[i] - A[i - K] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a string S consisting of digit characters and the task is to convert the string into an integer without using any built-in conversion functions. Example 1: Input: S = \\"1234\\" Output: 1234 Explanation: The string \\"1234\\" is converted to the integer 1234. Example 2: Input: S = \\"00789\\" Output: 789 Explanation: The string \\"00789\\" is converted to the integer 789, removing leading zeros during conversion. Your Task: You don\'t need to read input or print anything. Complete the function `stringToInt()` which takes S as an input parameter and returns the converted integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 100 S contains characters from \'0\' to \'9\' only.","solution":"def stringToInt(S): Converts a string of digits into an integer without using any built-in conversion functions. result = 0 for char in S: result = result * 10 + (ord(char) - ord(\'0\')) return result"},{"question":"Alice loves playing board games. Recently, she invented a new game involving a grid of size n x m. Each cell in the grid can either be empty (represented by \'.\') or contain a coin (represented by \'C\'). Alice starts at the top-left corner of the grid (cell (1, 1)) and aims to reach the bottom-right corner (cell (n, m)). She can move to the right or down to neighboring cells. Alice wants to collect as many coins as possible along the way. Write a program to determine the maximum number of coins Alice can collect. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid. The next n lines each contain m characters (\'.\' or \'C\'), representing the grid. -----Output----- Print one integer — the maximum number of coins Alice can collect when traveling from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 4 C.CC ..C. C..C Output 4 Input 2 2 C. .C Output 2 -----Note----- In the first sample, Alice can follow the path \\"C→.→C→C→C\\" to collect 4 coins. In the second sample, Alice can follow the path \\"C→.→C\\" to collect 2 coins.","solution":"def max_coins(n, m, grid): Returns the maximum number of coins Alice can collect on her path from the top-left to the bottom-right corner of the grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): Grid where \'.\' represents an empty cell and \'C\' represents a cell with a coin. Returns: int: Maximum number of coins collected. # Initialize the DP table dp = [[0] * m for _ in range(n)] # Fill the DP table for i in range(n): for j in range(m): # If the current cell contains a coin if grid[i][j] == \'C\': dp[i][j] = 1 # If not the first row, add the value from the cell above if i > 0: dp[i][j] += dp[i-1][j] # If not the first column, add the value from the cell on the left if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == \'C\' else 0)) # The value at the bottom-right corner is the maximum number of coins return dp[n-1][m-1]"},{"question":"Matrix Diagonal Difference You are given a square matrix of order ( n times n ). Calculate the absolute difference between the sums of its diagonals. The primary diagonal is formed by the elements that run from the top-left to the bottom-right of the matrix. The secondary diagonal is formed by the elements that run from the top-right to the bottom-left of the matrix. -----Input----- The input consists of multiple test cases. The first line contains an integer ( t ) (1 leq t leq 100) — the number of test cases. The description of the test cases follows. For each test case: - The first line contains an integer ( n ) (2 leq n leq 1000) — the size of the matrix. - The following ( n ) lines contain ( n ) space-separated integers — the elements of the matrix. -----Output----- For each test case, output a single integer — the absolute difference between the sums of the primary and secondary diagonals. -----Examples----- Input 2 3 11 2 4 4 5 6 10 8 -12 2 1 2 3 4 Output 15 0 -----Note----- In the first test case: - The primary diagonal elements are 11, 5, -12. - The secondary diagonal elements are 4, 5, 10. - The difference in the sums is |(11 + 5 + -12) - (4 + 5 + 10)| = |4 - 19| = 15 In the second test case: - The primary diagonal elements are 1, 4. - The secondary diagonal elements are 2, 3. - The difference in the sums is |(1 + 4) - (2 + 3)| = |5 - 5| = 0","solution":"def diagonal_difference(matrix): Given a square matrix, returns the absolute difference between the sums of its diagonals. Parameters: - matrix: List of List of integers representing the square matrix. Returns: - int: Absolute difference between the sums of the primary and secondary diagonals. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - i - 1] return abs(primary_diagonal_sum - secondary_diagonal_sum) def process_input(t, matrices): Processes multiple test cases and computes the diagonal difference for each matrix. Parameters: - t: int, number of test cases - matrices: List of List of List of integers representing all the test case matrices Returns: - List of integers: Absolute differences between the sums of the diagonals for each test case results = [] for i in range(t): results.append(diagonal_difference(matrices[i])) return results"},{"question":"A company is developing a text-based game, and they need to ensure that in-game messages are clear and understandable. The game\'s message system allows predefined abbreviations for common phrases to save space, but sometimes the abbreviations can make messages hard to read. Your task is to help ensure the clarity of these messages by expanding abbreviations to their full forms. The game provides a list of abbreviations and their corresponding expansions, and you need to expand the abbreviations in the messages according to this list. -----Input----- The first line contains an integer K (1 le K le 100), the number of abbreviations and expansions. The next K lines each contain an abbreviation and its expansion, separated by a colon and a space. The next line contains an integer N (1 le N le 1000), the number of in-game messages. The following N lines each contain a message, which is a string of characters. Each message is between 1 and 1000 characters long. -----Output----- Output N lines, each containing the corresponding message with all abbreviations expanded. -----Examples----- Sample Input 1: 3 brb: be right back omw: on my way lol: laugh out loud 2 brb, omw now! This is so funny lol! Sample Output 1: be right back, on my way now! This is so funny laugh out loud! Sample Input 2: 2 idk: I don\'t know afaik: as far as I know 1 idk what happened there, afaik he was okay. Sample Output 2: I don\'t know what happened there, as far as I know he was okay.","solution":"def expand_abbreviations(data): lines = data.strip().split(\'n\') K = int(lines[0]) abbreviation_dict = {} for i in range(1, K + 1): abbreviation, expansion = lines[i].split(\': \') abbreviation_dict[abbreviation] = expansion N = int(lines[K + 1]) messages = lines[K + 2:K + 2 + N] expanded_messages = [] for message in messages: for abbrev, expansion in abbreviation_dict.items(): message = message.replace(abbrev, expansion) expanded_messages.append(message) return expanded_messages"},{"question":"A park has a rectangular grid of size M x N, where M is the number of rows and N is the number of columns. There are some obstacles placed at certain cells in the grid. Your task is to find the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1) of the grid. You can only move either down or right at any point in time, and you cannot pass through cells that contain obstacles. Given an M x N grid where each cell is either 0 (free) or 1 (obstacle), determine the number of distinct paths from the top-left to the bottom-right corner. Since the number of distinct paths can be very large, return the result modulo 10^9+7. If there is no valid path, return 0. -----Constraints----- 1 ≤ M, N ≤ 1000 grid[i][j] is either 0 or 1. -----Input----- The input is given from Standard Input in the following format: M N grid_00 grid_01 ... grid_0(N-1) ... grid_(M-1)0 grid_(M-1)1 ... grid_(M-1)(N-1) -----Output----- Print the number of distinct paths from the top-left to the bottom-right corner, modulo 10^9+7. -----Sample Input----- 3 3 0 0 0 0 1 0 0 0 0 -----Sample Output----- 2 The two distinct paths are: - (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) - (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def num_paths(grid): MOD = 10**9 + 7 M = len(grid) N = len(grid[0]) # If the starting point or ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 # Initialize a 2D dp array dp = [[0]*N for _ in range(M)] # Set the starting point dp[0][0] = 1 # Fill in the dp array for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 # No path through an obstacle else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[M-1][N-1] # Reading input import sys input = sys.stdin.read def main(): data = input().strip().split() M, N = int(data[0]), int(data[1]) grid = [] idx = 2 for i in range(M): grid.append([int(data[idx + j]) for j in range(N)]) idx += N print(num_paths(grid)) if __name__ == \\"__main__\\": main()"},{"question":"Write a program to generate a diamond-shaped pattern of a given size using asterisks (*) and spaces. * The diamond has a width of (2n-1) characters, where n is the height of the top half of the diamond excluding the center line. * The first half of the diamond incrementally widens, while the second half incrementally narrows. * Each line should have leading spaces followed by asterisks, aligned to form the diamond shape. * There should be exactly one space between the edges of the diamond and the next vertical line. Create a program that takes an integer n as input and outputs the diamond-shaped pattern. Input The input is given in the following format: d n1 n2 :: nd The number of datasets d (d ≤ 20) is given in the first line, and the height ni of the top half of the diamond (1 ≤ ni ≤ 50) is given in each of the following d lines. Output Please output a diamond pattern for each data set. Insert a blank line between the datasets. Example Input 2 3 4 Output * * * * * * * * * * * * * * * * * * * *","solution":"def generate_diamond(n): Generates a diamond shape for a given size n and returns it as a list of strings. Each string in the list represents a single line in the diamond. lines = [] # Upper part including the middle line for i in range(n): line = \' \' * (n - i - 1) + \'*\' if i > 0: line += \' \' * (2 * i - 1) + \'*\' lines.append(line) # Lower part for i in range(n - 2, -1, -1): line = \' \' * (n - i - 1) + \'*\' if i > 0: line += \' \' * (2 * i - 1) + \'*\' lines.append(line) return lines def generate_diamonds(data): Given a list of integers, generates multiple diamond shapes, each corresponding to a value in the list. Returns the diamonds as a single string with a blank line separating each diamond. diamonds = [] for n in data: diamonds.append(generate_diamond(n)) return \'nn\'.join(\'n\'.join(diamond) for diamond in diamonds) def parse_input(input_str): Parses the input string and returns the list of integers representing the heights. lines = input_str.strip().split(\'n\') d = int(lines[0]) return [int(lines[i + 1]) for i in range(d)]"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight associated with it. The task is to determine the longest path in the graph such that the sum of weights of the edges in the path is maximized. -----Input----- - The first line of the input contains two integers N and M denoting the number of nodes and edges in the graph. - Each of the next M lines contains three integers u, v, and w; denoting an edge between nodes u and v with weight w. -----Output----- Print a single integer, the weight of the longest path in the graph. If the graph contains a cycle, the output should be \\"INF\\". -----Constraints----- - 1 le N, M le 10^3 - 1 le w le 10^6 - There may be multiple edges between the same pair of nodes. -----Example Input----- 5 6 1 2 10 2 3 10 3 4 10 4 5 10 1 5 30 3 1 20 -----Example Output----- INF","solution":"def has_cycle_util(graph, visited, rec_stack, node): visited[node] = True rec_stack[node] = True for neighbor, weight in graph[node]: if not visited[neighbor]: if has_cycle_util(graph, visited, rec_stack, neighbor): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False def has_cycle(graph, N): visited = [False] * N rec_stack = [False] * N for node in range(N): if not visited[node]: if has_cycle_util(graph, visited, rec_stack, node): return True return False def longest_path(graph, N): if has_cycle(graph, N): return \\"INF\\" dist = [-float(\'inf\')] * N dist[0] = 0 def topological_sort(graph, N): visited = [False] * N stack = [] def dfs(v): visited[v] = True for neighbor, weight in graph[v]: if not visited[neighbor]: dfs(neighbor) stack.append(v) for i in range(N): if not visited[i]: dfs(i) return stack[::-1] order = topological_sort(graph, N) for u in order: for v, weight in graph[u]: if dist[v] < dist[u] + weight: dist[v] = dist[u] + weight return max(dist) def find_longest_path(N, M, edges): graph = [[] for _ in range(N)] for u, v, w in edges: graph[u-1].append((v-1, w)) return longest_path(graph, N) # Input parsing for ease def parse_and_solve(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return find_longest_path(N, M, edges) # Example use example_input = 5 6 1 2 10 2 3 10 3 4 10 4 5 10 1 5 30 3 1 20 print(parse_and_solve(example_input)) # Output: INF"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each edge has a weight associated with it. The graph does not contain any negative weight edges. Your task is to find the shortest path from a given source node `s` to a given destination node `d`. If there is no path from `s` to `d`, return `-1`. -----Input----- The first line contains three integers `n`, `m`, and `t` (1 le n le 1000, 1 le m le 5000, 1 le t le 100) — the number of nodes, the number of edges, and the number of testcases. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 le u, v le n, 1 le w le 10^6) — representing a directed edge from node `u` to node `v` with weight `w`. The next `t` lines each contain two integers `s` and `d` (1 le s, d le n) — representing the source and destination nodes, respectively, for that testcase. -----Output----- For each testcase, output a single integer — the length of the shortest path from `s` to `d`. If there is no path from `s` to `d`, output `-1`. -----Examples----- Input 5 6 3 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 2 5 5 1 Output 6 4 -1 -----Note----- In the first testcase, the shortest path from node `1` to node `5` goes through edges `1 -> 2`, `2 -> 3`, and `3 -> 5` with a total weight of 2 + 1 + 3 = 6. In the second testcase, the shortest path from node `2` to node `5` goes through edges `2 -> 3` and `3 -> 5` with a total weight of 1 + 3 = 4. In the third testcase, there is no path from node `5` to node `1`. Therefore, the output is `-1`.","solution":"import heapq import sys def dijkstra(graph, n, start): dist = [sys.maxsize] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def shortest_paths(n, edges, testcases): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) results = [] for s, d in testcases: dist = dijkstra(graph, n, s) if dist[d] == sys.maxsize: results.append(-1) else: results.append(dist[d]) return results"},{"question":"Dr. Dolittle has received a special box containing different types of potions. He needs to know the exact quantity of each type of potion left after a series of operations. Each operation either adds a certain number of potions of a given type or removes a certain number of potions of a given type from the box. If an operation tries to remove more potions of a type than currently present in the box, it should be considered invalid and ignored. Please help the doctor track the final quantity of each type of potion. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5), where n is the number of different types of potions and m is the number of operations. The second line contains n space-separated integers b1, b2, ..., bn (0 ≤ bi ≤ 10^9) representing the initial quantity of each type of potion. The following m lines each describe an operation in the format \\"type amount quantity\\" where type is either \\"add\\" or \\"remove\\", amount is an integer (1 ≤ amount ≤ n) representing the potion type, and quantity is a non-negative integer (0 ≤ quantity ≤ 10^9) representing the number of potions to add or remove. Output Print a single line containing n space-separated integers representing the final quantity of each type of potion in the box. Examples Input 4 5 10 20 30 40 add 2 5 remove 3 10 remove 1 15 add 4 10 remove 2 100 Output 10 25 20 50 Input 3 4 100 200 300 remove 1 100 add 3 100 remove 2 250 add 1 50 Output 50 200 400 Input 5 3 1000 2000 3000 4000 5000 remove 2 2000 add 4 1000 remove 5 6000 Output 1000 0 3000 5000 5000 Note In the first sample: * Initial quantities are {10, 20, 30, 40}. * After \\"add 2 5\\": {10, 25, 30, 40} * After \\"remove 3 10\\": {10, 25, 20, 40} * After \\"remove 1 15\\": {10, 25, 20, 40} (invalid as it tries to remove more than available) * After \\"add 4 10\\": {10, 25, 20, 50} * After \\"remove 2 100\\": {10, 25, 20, 50} (invalid as it tries to remove more than available) In the second sample: * Initial quantities are {100, 200, 300}. * After \\"remove 1 100\\": {0, 200, 300} * After \\"add 3 100\\": {0, 200, 400} * After \\"remove 2 250\\": {0, 200, 400} (invalid as it tries to remove more than available) * After \\"add 1 50\\": {50, 200, 400} In the third sample: * Initial quantities are {1000, 2000, 3000, 4000, 5000}. * After \\"remove 2 2000\\": {1000, 0, 3000, 4000, 5000} * After \\"add 4 1000\\": {1000, 0, 3000, 5000, 5000} * After \\"remove 5 6000\\": {1000, 0, 3000, 5000, 5000} (invalid as it tries to remove more than available)","solution":"def potion_quantities(n, m, initial_quantities, operations): quantities = initial_quantities[:] for operation in operations: op_type, amount, quantity = operation.split() amount = int(amount) - 1 # Convert to zero-based index quantity = int(quantity) if op_type == \\"add\\": quantities[amount] += quantity elif op_type == \\"remove\\": if quantities[amount] >= quantity: quantities[amount] -= quantity return quantities # Example usage: # n = 4 # m = 5 # initial_quantities = [10, 20, 30, 40] # operations = [\\"add 2 5\\", \\"remove 3 10\\", \\"remove 1 15\\", \\"add 4 10\\", \\"remove 2 100\\"] # print(potion_quantities(n, m, initial_quantities, operations))"},{"question":"Masha is planning to host a coding workshop, and she wants to provide pens and notebooks to all the participants. There are `p` participants signed up for the workshop. Each participant will receive `a` pens and `b` notebooks. The stationary shop sells packets of pens and notebooks. A packet contains `m` pens, and another type of packet contains `n` notebooks. Determine the minimum number of packets of pens and notebooks Masha needs to buy to ensure each participant gets the required stationary. -----Input----- The first line contains four integers `p`, `a`, `b`, `m` (1leq p, a, b, m leq 10^8) — the number of participants, the number of pens each participant will receive, the number of notebooks each participant will receive, and the number of pens in each packet, respectively. The second line contains one integer `n` (1leq nleq 10^8) — the number of notebooks in each packet. -----Output----- Print two numbers — the minimum number of packets of pens and the minimum number of packets of notebooks that Masha needs to buy. -----Examples----- Input 10 3 2 12 11 Output 3 2 Input 7 5 4 15 8 Output 3 4 -----Note----- In the first example, Masha needs 3 packets of pens and 2 packets of notebooks. In the second example, Masha needs 3 packets of pens and 4 packets of notebooks.","solution":"import math def calculate_packets(p, a, b, m, n): Calculates the minimum number of packets of pens and notebooks Masha needs to buy. :param p: Number of participants :param a: Number of pens per participant :param b: Number of notebooks per participant :param m: Number of pens in each packet :param n: Number of notebooks in each packet :return: A tuple containing the number of packets of pens and notebooks total_pens_needed = p * a total_notebooks_needed = p * b packets_of_pens = math.ceil(total_pens_needed / m) packets_of_notebooks = math.ceil(total_notebooks_needed / n) return packets_of_pens, packets_of_notebooks"},{"question":"Implement a function `findMissingNumber(arr, n)` that takes an array `arr` of unique integers from 1 to `n` (inclusive) with one number missing and the integer `n`, and returns the missing number. Example: ``` findMissingNumber([1, 2, 4, 6, 3, 7, 8], 8) => 5 findMissingNumber([1, 2, 3, 5], 5) => 4 findMissingNumber([1], 2) => 2 ``` To solve this problem, you can use the mathematical formula for the sum of the first `n` natural numbers and subtract the sum of the array from it, or use any other approach that efficiently finds the missing number in linear time.","solution":"def findMissingNumber(arr, n): Returns the missing number from array arr containing unique integers from 1 to n with one missing number. # Sum of first n natural numbers total_sum = n * (n + 1) / 2 # Sum of elements in the array arr_sum = sum(arr) # Missing number is the difference between the total_sum and arr_sum return int(total_sum - arr_sum)"},{"question":"You are given an array of integers. Write a function that returns `true` if the array can be split into three non-empty parts with equal sums, and `false` otherwise. Examples: canThreePartsEqualSum([0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]) == true canThreePartsEqualSum([0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1]) == false","solution":"def canThreePartsEqualSum(arr): Returns true if the array can be split into three non-empty parts with equal sums, false otherwise. total_sum = sum(arr) if total_sum % 3 != 0: return False target_sum = total_sum // 3 current_sum, count = 0, 0 for num in arr: current_sum += num if current_sum == target_sum: count += 1 current_sum = 0 return count >= 3"},{"question":"Design a queue system that simulates a basic printer queue management with the following operations. Implement the PrinterQueue class: PrinterQueue() Initializes the empty printer queue object. void enqueueJob(string jobName, int priority) Adds a new print job with the given job name and priority integer. Jobs with a higher priority value should be dequeued before jobs with lower priority. string dequeueJob() Pops and returns the job name with the highest priority. If two jobs have the same priority, the one that was added earlier should be dequeued first. Return \\"No jobs\\" if the queue is empty. int queueSize() Returns the number of print jobs currently in the queue. string peekJob() Returns the job name of the highest priority job without dequeuing it. Return \\"No jobs\\" if the queue is empty. Example 1: Input [\\"PrinterQueue\\",\\"enqueueJob\\",\\"enqueueJob\\",\\"dequeueJob\\",\\"enqueueJob\\",\\"queueSize\\",\\"peekJob\\",\\"enqueueJob\\",\\"dequeueJob\\",\\"dequeueJob\\",\\"dequeueJob\\"] [[],[\\"Job1\\",2],[\\"Job2\\",1],[],[\\"Job3\\",3],[],[],[\\"Job4\\",2],[],[],[]] Output [null,null,null,\\"Job1\\",null,2,\\"Job3\\",null,\\"Job3\\",\\"Job4\\",\\"Job2\\",\\"No jobs\\"] Explanation PrinterQueue pq = new PrinterQueue(); // Initialize the printer queue, queue is [] pq.enqueueJob(\\"Job1\\", 2); // queue becomes [\\"Job1(2)\\"] pq.enqueueJob(\\"Job2\\", 1); // queue becomes [\\"Job1(2)\\", \\"Job2(1)\\"] pq.dequeueJob(); // returns \\"Job1\\" --> queue becomes [\\"Job2(1)\\"] pq.enqueueJob(\\"Job3\\", 3); // queue becomes [\\"Job3(3)\\", \\"Job2(1)\\"] pq.queueSize(); // returns 2 pq.peekJob(); // returns \\"Job3\\" pq.enqueueJob(\\"Job4\\", 2); // queue becomes [\\"Job3(3)\\", \\"Job4(2)\\", \\"Job2(1)\\"] pq.dequeueJob(); // returns \\"Job3\\" --> queue becomes [\\"Job4(2)\\", \\"Job2(1)\\"] pq.dequeueJob(); // returns \\"Job4\\" --> queue becomes [\\"Job2(1)\\"] pq.dequeueJob(); // returns \\"Job2\\" --> queue becomes [] pq.dequeueJob(); // returns \\"No jobs\\" --> queue is empty Constraints: Job names are unique strings of length 1 to 50. Priority is an integer value. At most 1000 calls will be made to each method of enqueueJob, dequeueJob, queueSize, and peekJob.","solution":"import heapq class PrinterQueue: def __init__(self): self.heap = [] self.count = 0 def enqueueJob(self, jobName, priority): heapq.heappush(self.heap, (-priority, self.count, jobName)) self.count += 1 def dequeueJob(self): if not self.heap: return \\"No jobs\\" return heapq.heappop(self.heap)[2] def queueSize(self): return len(self.heap) def peekJob(self): if not self.heap: return \\"No jobs\\" return self.heap[0][2]"},{"question":"Alice has recently become interested in wildlife photography and has decided to photograph as many different species of birds as possible in a day. She makes her plan such that she starts her journey early in the morning and visits different locations in a straight line, taking pictures at each location. Alice can stay at most `M` minutes at each location and she can take pictures of one bird per minute. Each location can have different bird species and the same species cannot be present in more than one location. Given the number of locations `N` and the number of different bird species at each location, find the maximum number of distinct bird species Alice can photograph in a day. Your task is to write a program to help Alice determine the maximum number of distinct bird species she can photograph. ------ Input ------ The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains two integers `N` (number of locations) and `M` (maximum minutes Alice can spend at each location). The second line contains `N` space-separated integers, where the i-th integer represents the number of different bird species at the i-th location. ------ Output ------ For each test case, output a single line containing one integer ― the maximum number of distinct bird species Alice can photograph in a day. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ N ≤ 100,000 1 ≤ M ≤ 1,000 1 ≤ A_{i} ≤ 1,000 for each valid i the sum of N over all test cases does not exceed 10^{6} ------ Sample Input 1 ------ 2 4 2 5 3 2 4 3 1 7 3 2 ------ Sample Output 1 ------ 8 3 ------ Explanation 1 ------ In the first test case, Alice can photograph 2 species at the first location, 2 species at the second location, 2 species at the third location, and 2 species at the fourth location, resulting in a total of 8 distinct bird species. In the second test case, Alice can photograph 1 species at each location, resulting in a total of 3 distinct bird species.","solution":"def max_distinct_birds(T, test_cases): results = [] for test in test_cases: N, M, species = test total_species = sum(min(M, s) for s in species) results.append(total_species) return results"},{"question":"You are part of a team managing a network of servers at a large company. Each server periodically sends a status report containing its health metrics, and one of those metrics is its \\"uptime,\\" the cumulative time the server has been running without any reboots. You need to write a program that helps identify servers with the maximum uptime. -----Input----- The first line contains an integer n (1 le n le 100), the number of servers. Each of the next n lines contains the name of a server (a nonempty string of at most 50 characters) followed by an integer t (1 le t le 10^9), the uptime of that server in seconds. The server names consist of lowercase letters \'a\'-\'z\', digits, and hyphens, and each server has a unique name. -----Output----- Output the name of the server with the maximum uptime. If there are multiple servers with the same maximum uptime, output the one that appeared first in the input. -----Examples----- Sample Input: 3 server-1 54000 server-2 120000 server-3 120000 Sample Output: server-2","solution":"def server_with_max_uptime(n, server_data): Returns the server name with the maximum uptime. If multiple servers have the same maximum uptime, returns the one that appeared first in the list. Parameters: n (int): Number of servers. server_data (list of tuples): Each tuple contains the server name (str) and uptime (int). Returns: str: The name of the server with the maximum uptime. max_uptime = -1 selected_server = None for server in server_data: name, uptime = server if uptime > max_uptime: max_uptime = uptime selected_server = name return selected_server"},{"question":"You are working on a Python-based project which involves manipulating various collections of items. One frequent operation is to filter items based on certain criteria. To streamline this process, you decide to create a utility function. Write a function called `filter_items_by_criteria` that takes in a list of items and a criteria function. The function should return a new list containing only the items for which the criteria function returns `True`. For example: - `filter_items_by_criteria([1, 2, 3, 4, 5], lambda x: x > 3)` would return `[4, 5]`. - `filter_items_by_criteria([\\"apple\\", \\"banana\\", \\"cherry\\"], lambda x: \\"a\\" in x)` would return `[\\"apple\\", \\"banana\\"]`. Your function should handle an empty list by returning an empty list, and it should be able to work with any type of item in the list as long as the criteria function can work with that item type.","solution":"def filter_items_by_criteria(items, criteria): Filters the given list of items using the provided criteria function. Parameters: items (list): The list of items to be filtered. criteria (function): The criteria function to apply to each item. Returns: list: A list of items for which the criteria function returns True. return [item for item in items if criteria(item)]"},{"question":"A city is planning to build a series of bus stops along a straight road. Each bus stop will be located at a specific distance from the starting point of the road, which is considered to be position 0. To manage the bus stops effectively, the city has decided to ensure that no two bus stops are located at the same position. Additionally, the city wants to place traffic lights such that the intervals between consecutive bus stops have at least one traffic light. Traffic lights can only be placed at integer positions along the road. Given the list of bus stop locations, your task is to determine the minimum number of traffic lights required to ensure each interval between two consecutive bus stops has at least one traffic light. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains an integer N denoting the number of bus stops. - The second line contains N distinct integers denoting the positions of the bus stops. The positions are given in strictly increasing order. ------ Output ------ For each test case, output a single line containing one integer: the minimum number of traffic lights required. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 0 ≤ positions of bus stops ≤ 10^9 ------ Sample Input 1 ------ 2 4 0 3 7 12 3 1 5 10 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ In the first test case, there are three intervals between the bus stops: [0, 3], [3, 7], and [7, 12]. Each interval requires at least one traffic light. Therefore, the minimum number of traffic lights required is 3. In the second test case, there are two intervals between the bus stops: [1, 5] and [5, 10]. Each interval requires at least one traffic light. Therefore, the minimum number of traffic lights required is 2.","solution":"def minimum_traffic_lights(test_cases): results = [] for case in test_cases: n, stops = case results.append(n - 1) return results"},{"question":"Adam and Eve are working on a project that involves processing commands within a grid of size m x m. The grid is initially empty. Each of them can issue commands to add or remove people from specific cells, as well as count the total number of people in a sub-grid. The commands are as follows: - `place x y k` — Adam adds `k` people to the cell at coordinates `(x, y)`. It is guaranteed that this request will not cause the total number of people in the cell to exceed 10^6. - `evacuate x y k` — Eve removes `k` people from the cell at coordinates `(x, y)`. It is guaranteed that this request will not cause the total number of people in the cell to become negative. - `count x1 y1 x2 y2` — Adam wants to know the total number of people in the sub-grid defined from the top-left corner `(x1, y1)` to the bottom-right corner `(x2, y2)`. Both corners are inclusive. Adam and Eve expect a program that can handle up to 10^5 operations efficiently on an m x m grid where `1 ≤ m ≤ 1000`. Help them by writing a program that processes these requests. # Input - The first line contains integers m (1 ≤ m ≤ 1000) and n (1 ≤ n ≤ 10^5), the size of the grid and the number of requests respectively. - The next n lines contain the description of the requests: `place x y k`, `evacuate x y k`, and `count x1 y1 x2 y2`, where `(0 ≤ x, y, x1, y1, x2, y2 ≤ m-1)` and `1 ≤ k ≤ 10^6`. # Output For each `count x1 y1 x2 y2` request, output the total number of people in the specified sub-grid in a separate line. # Example Input ``` 5 7 place 0 0 10 place 1 1 20 place 2 2 15 count 0 0 2 2 evacuate 1 1 5 count 0 0 2 2 place 3 3 5 count 2 2 4 4 ``` Output ``` 45 40 20 ```","solution":"class GridManager: def __init__(self, m): self.grid = [[0] * m for _ in range(m)] self.m = m def place(self, x, y, k): self.grid[x][y] += k def evacuate(self, x, y, k): self.grid[x][y] -= k def count(self, x1, y1, x2, y2): total = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total += self.grid[i][j] return total def process_requests(m, n, requests): grid_manager = GridManager(m) results = [] for request in requests: parts = request.split() cmd = parts[0] if cmd == \'place\': _, x, y, k = parts grid_manager.place(int(x), int(y), int(k)) elif cmd == \'evacuate\': _, x, y, k = parts grid_manager.evacuate(int(x), int(y), int(k)) elif cmd == \'count\': _, x1, y1, x2, y2 = parts results.append(grid_manager.count(int(x1), int(y1), int(x2), int(y2))) return results"},{"question":"James is managing a dataset of integers. He needs to compute a summary for a continuous subarray efficiently. Specifically, he wants to find the maximum possible sum of any subarray of exactly `k` consecutive elements. Write a program that takes an array of integers and the integer `k`, performs the computation, and outputs the maximum sum of any subarray of length `k`. Input: The first line contains two integers, `n` (the number of elements in the array) and `k` (the length of the subarray). The next line contains `n` integers, which represent the elements of the array. Output: Print a single integer, which is the maximum sum of any subarray of length `k` in the given array. Constraints: 1 ≤ n ≤ 100000 1 ≤ k ≤ n -1000 ≤ array elements ≤ 1000 SAMPLE INPUT 10 3 1 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT 27 Explanation: The subarray of length 3 with the maximum sum is [8, 9, 10], which sums to 27.","solution":"def max_sum_subarray(n, k, array): Returns the maximum sum of any subarray of length k. # Calculate the sum of the first subarray of length k max_sum = sum(array[:k]) current_sum = max_sum # Use sliding window technique for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage n, k = 10, 3 array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(max_sum_subarray(n, k, array)) # Output: 27"},{"question":"You are given a list of cities and their pairwise distances. Your task is to find a possible route that visits each city exactly once and returns to the starting city with the minimum total distance traveled. This problem is known as the Traveling Salesman Problem (TSP). **Input Format** - The first line contains a single integer, N, which is the number of cities. - Each of the next N lines contains N integers, where the jth integer in the ith line represents the distance between city i and city j. **Output Format** - Print the minimum distance required to visit each city exactly once and return to the starting city. **Constraints** - 2 ≤ N ≤ 15 - 1 ≤ Distance between any two cities ≤ 1000 - Distance between a city and itself is always 0 **Sample Input** ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` **Sample Output** ``` 80 ``` **Explanation** The possible shortest route for this example is 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 10 + 25 + 30 + 15 = 80. Other routes may have longer distances.","solution":"from itertools import permutations def tsp_minimum_distance(matrix): Solves the Traveling Salesman Problem (TSP) to find the minimum distance required to visit each city exactly once and return to the starting city. Args: matrix (list of list of int): A 2D list representing the distances between cities. Returns: int: The minimum distance required to complete the tour. n = len(matrix) cities = list(range(n)) min_distance = float(\'inf\') for perm in permutations(cities): current_distance = 0 for i in range(n-1): current_distance += matrix[perm[i]][perm[i+1]] current_distance += matrix[perm[-1]][perm[0]] # return to starting city min_distance = min(min_distance, current_distance) return min_distance # Function to parse input def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) matrix = [list(map(int, lines[i+1].split())) for i in range(n)] return matrix"},{"question":"You are given a list of strings L, containing only lowercase Latin letters. Your task is to find the first string in the list which has at least one repeating character and return the string. If there is no such string, return an empty string. A repeating character is a character that appears more than once in the string. -----Input----- The first line contains a single integer n (1 le n le 10^3) — the number of strings in the list. The next n lines each contain a string s_i (1 le |s_i| le 50) consisting of lowercase Latin letters. -----Output----- Print the first string in the list with at least one repeating character. If there is no such string, print an empty string. -----Examples----- Input 4 abcdef aabbcc xyz mnop Output aabbcc Input 3 abc defg hijk Output","solution":"def find_first_repeating_string(strings): Returns the first string in the list that has at least one repeating character. If no such string exists, returns an empty string. for string in strings: char_count = {} for char in string: if char in char_count: return string char_count[char] = 1 return \\"\\""},{"question":"You are given a string S consisting of lowercase English letters and an integer K. Your task is to find the lexicographically largest string that can be obtained by removing exactly K characters from the string S. -----Constraints----- - 1 ≤ |S| ≤ 10^5 - 1 ≤ K ≤ |S| -----Input----- Input is given from Standard Input in the following format: S K -----Output----- Print the lexicographically largest string that can be obtained by removing exactly K characters from the string S. -----Sample Input----- abcde 2 -----Sample Output----- cde -----Explanation----- By removing \'a\' and \'b\' from the string \'abcde\', we obtain \'cde\', which is the lexicographically largest string that can be formed.","solution":"def largest_string_after_removal(S, K): Returns the lexicographically largest string that can be obtained by removing exactly K characters from the string S. stack = [] n = len(S) for i, char in enumerate(S): while stack and K > 0 and stack[-1] < char: stack.pop() K -= 1 stack.append(char) # If K > 0 after the loop, remove the remaining K characters from the end while K > 0: stack.pop() K -= 1 return \'\'.join(stack)"},{"question":"Thomas is a renowned architect and has been given the task to design a new city layout. The city is represented as a grid of n rows and m columns. Each cell in the grid represents a plot of land, and each plot has a certain cost associated with it. Thomas needs to decide on a rectangular subgrid where a new park will be constructed. The criteria is to find the average cost of the plots in the chosen rectangular subgrid. Thomas has received several requests to calculate the average cost for different subgrids in the city. He needs your help to process these requests efficiently. Given an n x m grid of integers where each integer represents the cost of the plot, and x requests, where each request is defined by four integers r1, c1, r2, c2 representing the top-left and bottom-right corners of the subgrid, calculate the average cost of the plots in each subgrid. The average cost should be calculated as the sum of all the costs in the subgrid divided by the number of cells in the subgrid. Input The input consists of the following: - The first line contains three integers n, m, and x. - The next n lines each contain m integers representing the cost of the plots in the grid. - The next x lines each contain four integers r1, c1, r2, and c2 representing a request. Constraints: - 1 ≤ n, m ≤ 1000 - 1 ≤ x ≤ 10000 - -10^6 ≤ cost of plots in the grid ≤ 10^6 - 0 ≤ r1 ≤ r2 < n - 0 ≤ c1 ≤ c2 < m Output For each request, print the average cost in the subgrid, rounded to two decimal places. Example Input 3 3 2 1 2 3 4 5 6 7 8 9 0 0 1 1 1 1 2 2 Output 3.00 7.00","solution":"def calculate_average_cost(n, m, x, grid, requests): averages = [] # Precompute prefix sum array prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i+1][j+1] = grid[i][j] + prefix_sum[i][j+1] + prefix_sum[i+1][j] - prefix_sum[i][j] for r1, c1, r2, c2 in requests: total_cost = (prefix_sum[r2+1][c2+1] - prefix_sum[r1][c2+1] - prefix_sum[r2+1][c1] + prefix_sum[r1][c1]) num_cells = (r2 - r1 + 1) * (c2 - c1 + 1) average_cost = total_cost / num_cells averages.append(f\\"{average_cost:.2f}\\") return averages"},{"question":"The International Robotics Competition (IRC) is planned to involve n teams. Each team is denoted with a unique integer from 1 to n. The competition consists of no more than m challenges, and each challenge can be solved by any one of the k available robot models. Let c_{ij} be the number of challenges solved by team i using robot model j. IRC wants to ensure that for each team, the absolute difference between the maximum and minimum number of challenges solved using different robot models does not exceed 3. Every team has a specific efficiency e_i, which represents the time (in hours) they take to solve one challenge. IRC wants to know the minimum time required to complete all challenges given these constraints. Your task is to determine the challenge allocation for each team using any of the robot models, ensuring the rules are followed. -----Input----- The first line contains three integers n, m, k (3 leq n leq 100, 0 leq m leq 1,000, 1 leq k leq 1,000) — the number of teams, the number of challenges, and the number of robot models. The second line contains n integers e_1, e_2, ldots, e_n (1 leq e_i leq 1,000) — the efficiency of each team. Each of the following m lines contains two integers a_i and b_i (1 leq a_i, b_i leq n, a_i neq b_i) — the teams that have the skills to solve the i-th challenge. It is guaranteed that each challenge can be assigned to only one pair of teams. -----Output----- For each challenge in the same order, print t_i (1 leq t_i leq k) — the number of the robot model used to solve the challenge. If the i-th challenge should not be solved, t_i should be equal to 0. If there are multiple valid outputs, print any. -----Example----- Input 5 8 3 5 3 8 2 6 1 3 1 2 3 4 2 5 4 5 1 5 3 2 2 4 Output 2 1 3 1 2 3 1 1 -----Note----- One of the possible solutions to the example is shown below: [Image]","solution":"def allocate_challenges(n, m, k, efficiencies, challenges): # Initialize the challenge allocation list. allocations = [0] * m # A 2D list to store the count of challenges solved by each team with each robot model. challenges_solved = [[0] * k for _ in range(n)] def can_allocate(team, robot_model): max_challenges = max(challenges_solved[team]) min_challenges = min(challenges_solved[team]) current_with_model = challenges_solved[team][robot_model] return (current_with_model == max_challenges or current_with_model == min_challenges or max_challenges - current_with_model <= 2 or current_with_model - min_challenges <= 2) # Iterate through each challenge to allocate to a robot model for index, (team1, team2) in enumerate(challenges): allocated = False # Try to allocate a robot model that satisfies the constraints for model in range(k): if can_allocate(team1-1, model) and can_allocate(team2-1, model): allocations[index] = model + 1 challenges_solved[team1-1][model] += 1 challenges_solved[team2-1][model] += 1 allocated = True break if not allocated: allocations[index] = 0 return allocations"},{"question":"A company wants to minimize the cost of transferring data between its distributed servers. There are n servers located in different geographical regions, and each server has a data volume that needs to be transferred. The servers are connected via m direct bidirectional links, each with an associated cost. The goal is to transfer data such that all servers are connected directly or indirectly with the minimum possible cost. You are given multiple queries. In each query, you are asked to calculate the minimum cost required to connect all the servers. Implement the function to determine the minimal cost of connecting all servers for each query. Input The first line contains two integers n and m (1 ≤ n ≤ 100,000 and 0 ≤ m ≤ 200,000) – the number of servers and links respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n and 1 ≤ w ≤ 100,000), indicating that there is a bidirectional link between servers u and v with cost w. The next line contains an integer q (1 ≤ q ≤ 100), the number of queries. Each of the following q lines contains two integers k and x (1 ≤ k ≤ n and 1 ≤ x ≤ 100,000). For each query, add a link from server k to all other servers with cost x, and then determine the minimal cost to connect all servers. Output For each query, output a single line containing an integer – the minimal cost to connect all servers after adding the new links specified in the query. Examples Input 4 3 1 2 1 2 3 2 3 4 4 2 1 3 4 1 Output 6 3 Explanation In the first example, adding a link from server 1 to all other servers with cost 3 results in extra links (1-3, 1-4) with the costs being [1, 2, 4, 3, 3]. The minimum spanning tree would include the links 1-2, 2-3, and 1-4, with costs 1 + 2 + 3 = 6. In the second example, adding a link from server 4 to all other servers with cost 1 results in extra links (4-1, 4-2, 4-3) with the costs being [1, 2, 4, 1, 1, 1]. The minimum spanning tree would include the links 4-1, 4-2, and 4-3, with costs 1 + 1 + 1 = 3.","solution":"from heapq import heappop, heappush def find(parents, i): if parents[i] == i: return i parents[i] = find(parents, parents[i]) return parents[i] def union(parents, ranks, u, v): root_u = find(parents, u) root_v = find(parents, v) if root_u != root_v: if ranks[root_u] > ranks[root_v]: parents[root_v] = root_u elif ranks[root_u] < ranks[root_v]: parents[root_u] = root_v else: parents[root_v] = root_u ranks[root_u] += 1 def kruskal(n, edges): parents = list(range(n)) ranks = [0] * n mst_cost = 0 edge_count = 0 edges.sort(key=lambda x: x[2]) for u, v, w in edges: if find(parents, u) != find(parents, v): union(parents, ranks, u, v) mst_cost += w edge_count += 1 if edge_count == n - 1: break return mst_cost if edge_count == n - 1 else -1 def minimal_cost_to_connect_servers(n, m, edge_list, queries): results = [] edges = [(u - 1, v - 1, w) for u, v, w in edge_list] for k, x in queries: k -= 1 temp_edges = edges + [(k, i, x) for i in range(n) if i != k] results.append(kruskal(n, temp_edges)) return results"},{"question":"Write a function that accepts an integer `n` and generates an `n x n` matrix filled with the integers from 1 to `n^2` in a spiral order. -----Input:----- Each testcase contains a single integer `n`, where 1 <= n <= 50. -----Output:----- For each testcase, output the generated `n x n` spiral matrix. -----Sample Input:----- 3 -----Sample Output:----- 1 2 3 8 9 4 7 6 5","solution":"def generate_spiral_matrix(n): Generates an n x n matrix filled with integers from 1 to n^2 in a spiral order. :param n: Size of the matrix (1 <= n <= 50) :return: A 2D list representing the spiral matrix mat = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n-1, 0, n-1 while left <= right and top <= bottom: for i in range(left, right + 1): mat[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): mat[i] = mat[i][:] # To workaround the issues in changing reference of inner lists mat[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): mat[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): mat[i] = mat[i][:] # To workaround the issues in changing reference of inner lists mat[i][left] = num num += 1 left += 1 return mat"},{"question":"Given a non-negative integer n, calculate the total number of bits set to 1 in the binary representations of all non-negative integers less than or equal to n. Example: Input: 5 Output: 7 Explanation: Binary representations of numbers from 0 to 5 are: 0 -> 0 1 -> 1 2 -> 10 3 -> 11 4 -> 100 5 -> 101 There are seven 1s in total in these binary representations.","solution":"def count_total_bits(n): Returns the total number of bits set to 1 in the binary representations of all non-negative integers less than or equal to n. total_bits = 0 for i in range(n + 1): total_bits += bin(i).count(\'1\') return total_bits"},{"question":"# Unique Product Finder You are given a list of integers. Your task is to write a program that finds a unique product. A unique product is defined as the product of all unique elements in the list of integers. If the list has no duplicates, then the product is simply the product of all elements. If the unique elements are 1 or the list is empty after removing duplicates, return 1 as the product. For example, if the list given is [2, 3, 2, 4], the unique elements are [2, 3, 4], and their product is 2 * 3 * 4 = 24. However, for [1, 1, 1], removing duplicates gives a single element [1], so the product is 1. Input The first line contains one integer ‘T’, which denotes the number of test cases. There are two lines for each ‘T’ test case: - The first line contains the total number of elements ‘N’ in the list. - The second line contains ‘N’ integers (each integer can be considered as ‘Ai’) separated by whitespaces. Output For each test case, you need to print one line containing the unique product of the elements in the list. Constraints 1 <= T <= 100 0 <= N <= 1000 0 <= Ai <= 10^5 Example Input: 3 4 2 3 2 4 5 1 2 3 4 5 3 1 1 1 Output: 24 120 1 Explanation Consider the 1st test case: The unique elements are [2, 3, 4], and their product is 2 * 3 * 4 = 24. For the 2nd test case: All elements are unique, so the product is 1 * 2 * 3 * 4 * 5 = 120. For the 3rd test case: After removing duplicates, we are left with [1], so the product is 1.","solution":"from functools import reduce def unique_product(test_cases): results = [] for case in test_cases: N, elements = case unique_elements = set(elements) if not unique_elements or unique_elements == {1}: results.append(1) else: product = reduce(lambda x, y: x * y, unique_elements, 1) results.append(product) return results"},{"question":"Write a function that takes a string and a character as input and returns the number of times the character appears consecutively in the string. If the character does not appear consecutively, return 0. Example 1: Input: s = \\"aaabbbaaaccc\\", c = \'a\' Output: 3 Explanation: The character \'a\' appears consecutively 3 times in the string. Example 2: Input: s = \\"abcde\\", c = \'f\' Output: 0 Explanation: The character \'f\' does not appear in the string. Example 3: Input: s = \\"aabbcc\\", c = \'b\' Output: 2 Explanation: The character \'b\' appears consecutively 2 times in the string. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function countConsecutiveChar() that takes the string (s) and the character (c) as input and returns the number of consecutive appearances of the character. If the character does not appear consecutively, return 0. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 10^5 s contains only lowercase English letters","solution":"def countConsecutiveChar(s, c): Returns the number of consecutive appearances of character c in string s. If the character does not appear consecutively, return 0. max_count = 0 count = 0 for char in s: if char == c: count += 1 max_count = max(max_count, count) else: count = 0 return max_count"},{"question":"Write a function `impress_her(m, n)` to solve the following problem: I decided to impress my friend Julia by taking her on both a hot air balloon ride and a luxury dinner. However, I want to make a choice that\'s within my budget and still leave me with a little extra money afterward. Here\'s what I remember: - The cost of the balloon ride is `b` - The cost of the dinner is `d` - I want to make sure that after paying for both, I have exactly 5 dollars left over (`extra`). Given a range of possible total budgets I can have, specified by `m` and `n`, can you help me figure out all possible scenarios where I end up with exactly 5 dollars left? Return a list of all possible results in the following format: `[[\\"B: b\\", \\"D: d\\", \\"Total: t\\", \\"Remaining: 5\\"], ...]` Where: - \\"B: b\\" is the cost of the balloon ride. - \\"D: d\\" is the cost of the dinner. - \\"Total: t\\" is my total budget. - \\"Remaining: 5\\" indicates that I end up with exactly 5 dollars. You may assume `m <= n` and both `m` and `n` are non-negative integers. # Example ```python impress_her(50, 100) ``` Should return ```python [[\'B: 20\', \'D: 25\', \'Total: 50\', \'Remaining: 5\'], [\'B: 30\', \'D: 45\', \'Total: 80\', \'Remaining: 5\']] ``` Explanation: - For budget `50`, I can spend `20` on the balloon ride and `25` on the dinner, and I will have `50 - 20 - 25 = 5` left. - For budget `80`, I can spend `30` on the balloon ride and `45` on the dinner, and I will have `80 - 30 - 45 = 5` left.","solution":"def impress_her(m, n): Calculate all possible scenarios for spending money on a balloon ride and dinner to have exactly 5 dollars left from the given range of total budget k, where m <= k <= n. Args: m (int): the minimum total budget n (int): the maximum total budget Returns: list: a list of possible spending scenarios results = [] extra = 5 for total in range(m, n + 1): for b in range(total): d = total - b - extra if d >= 0: results.append([f\'B: {b}\', f\'D: {d}\', f\'Total: {total}\', f\'Remaining: {extra}\']) return results"},{"question":"In a distant kingdom, there is a magical orchard where fruits grow in special numbers based on the Fibonacci sequence. The n-th type of fruit has a weight defined by the n-th Fibonacci number. The king wants to create a fruit basket containing at least one type of each fruit. However, the basket must be optimal in weight. You are tasked with determining the minimum and maximum possible weight of the basket containing at least one of each type of fruit up to the n-th type. The Fibonacci sequence is defined as: [ F(1) = 1 ] [ F(2) = 1 ] [ F(n) = F(n - 1) + F(n - 2) ] for ( n > 2 ) Input The input consists of a single integer ( n ) (1 ≤ n ≤ 45), denoting the number of different types of fruits. Output Print two integers: 1. The minimum possible weight of the basket containing at least one of each type of fruit up to the n-th type. 2. The maximum possible weight of the basket containing at least one of each type of fruit up to the n-th type. Examples Input 3 Output 3 4 Input 5 Output 7 12 Note In the first example, for n=3, the Fibonacci series is [1, 1, 2]. The minimum basket weight, taking one of each type, is 1 + 1 + 1 = 3. The maximum basket weight, taking the heaviest available, is 1 + 1 + 2 = 4. In the second example, for n=5, the Fibonacci series is [1, 1, 2, 3, 5]. The minimum basket weight, taking one of each type, is 1 + 1 + 1 + 1 + 3 = 7. The maximum basket weight, taking the heaviest available, is 1 + 1 + 2 + 3 + 5 = 12.","solution":"def fibonacci_sequence(n): Generates a list of first n Fibonacci numbers. fibonacci = [1, 1] for i in range(2, n): fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci[:n] def fruit_basket_weights(n): Calculates the minimum and maximum weight of the fruit basket. fibonacci = fibonacci_sequence(n) min_weight = n * 1 # Minimum weight is taking 1 of each type of fruit max_weight = sum(fibonacci) # Maximum weight is taking the actual Fibonacci values return min_weight, max_weight"},{"question":"You are given an unsorted array of N distinct integers and a target sum. The task is to determine if there are any two numbers in the array that add up to the target sum. Example 1: Input: N = 5 arr[] = {2, 7, 11, 15, 1} target = 9 Output: True Explanation: 2 + 7 = 9, which is the target sum. Example 2: Input: N = 3 arr[] = {1, 2, 3} target = 6 Output: False Explanation: There are no two numbers in the array that add up to the target sum. Your Task: You only need to complete the function `findPair` that takes an integer array `arr`, an integer `N` denoting the size of the array, and an integer `target`, and returns a boolean result indicating whether there exists a pair in the array whose sum equals the target. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 <= N <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def findPair(arr, N, target): Determine if there are any two numbers in the array that add up to the target sum. :param arr: List of integers :param N: Length of the array :param target: Target sum to find :return: Boolean value indicating whether there exists a pair in the array whose sum equals the target seen_numbers = set() for number in arr: complement = target - number if complement in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"You are given a function `isPalindromeSentence` which takes a string as input and returns `True` if it is a palindrome sentence and `False` otherwise. A palindrome sentence is one that reads the same backward as forward when all non-alphanumeric characters are ignored and case is not considered. For example, \\"A man, a plan, a canal, Panama!\\" is a palindrome sentence because if we strip out non-alphanumeric characters and convert all letters to the same case, we get \\"amanaplanacanalpanama\\", which reads the same backward as forward. Write the function `isPalindromeSentence`: Example 1: Input: sentence = \\"A man, a plan, a canal, Panama!\\" Output: True Explanation: Stripping out non-alphanumeric characters and converting to the same case we get \\"amanaplanacanalpanama\\", which is a palindrome. Example 2: Input: sentence = \\"race a car\\" Output: False Explanation: Stripping out non-alphanumeric characters and converting to the same case we get \\"raceacar\\", which is not a palindrome. Example 3: Input: sentence = \\"No lemon, no melon\\" Output: True Explanation: Stripping out non-alphanumeric characters and converting to the same case we get \\"nolemonnomelon\\", which is a palindrome. Your Task: Complete the function `isPalindromeSentence(sentence)`. The function takes a string as input and returns `True` if the input string is a palindrome sentence and `False` otherwise. Expected Time Complexity: O(N), where N is the length of the input string. Expected Auxiliary Space: O(1) (excluding space required to store the input string). Constraints: 1 <= length of the string <= 100 Note: The input/output format and example given are used for the system\'s internal purpose and should be used by a user for the expected output only. As this is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"import re def isPalindromeSentence(sentence): This function takes a sentence as input and returns True if it is a palindrome sentence, ignoring non-alphanumeric characters and case insensitive. # Use regex to filter out non-alphanumeric characters and convert to lower case filtered_sentence = re.sub(r\'[^a-zA-Z0-9]\', \'\', sentence).lower() # Check if the filtered sentence is a palindrome return filtered_sentence == filtered_sentence[::-1]"},{"question":"Implement a function `count_vowels` that takes a list of strings and returns a dictionary where the keys are the strings and the values are the number of vowels (a, e, i, o, u) present in each string. Your function should be case-insensitive, meaning that both uppercase and lowercase vowels should be counted. # Example: For an input list of `[\\"hello\\", \\"world\\", \\"AEIOU\\"]`: * \'hello\' has 2 vowels (\'e\', \'o\') * \'world\' has 1 vowel (\'o\') * \'AEIOU\' has 5 vowels (\'A\', \'E\', \'I\', \'O\', \'U\') Result: `{\'hello\': 2, \'world\': 1, \'AEIOU\': 5}` # Constraints: * The input list will contain at least one string. * The strings will contain only alphabetic characters. * The return dictionary should maintain the case of the original strings in the input list.","solution":"def count_vowels(strings): Returns a dictionary where the keys are the strings from the input list and the values are the number of vowels present in each string. vowels = set(\'aeiou\') result = {} for string in strings: count = 0 for char in string.lower(): if char in vowels: count += 1 result[string] = count return result"},{"question":"John has been given the task of rearranging a string to ensure that no two adjacent characters are the same. However, if it is not possible to rearrange such that no two adjacent characters are the same, he should return \\"Not Possible\\". Write a function that takes a string s (1 ≤ |s| ≤ 100, s consists of lowercase English letters) and returns the rearranged string or \\"Not Possible\\". Input A single line containing the string s. Output A single line containing the rearranged string or \\"Not Possible\\". Examples Input aabb Output abab Input aaab Output Not Possible Input bbc Output bcb Note In the first sample, John can rearrange \\"aabb\\" to \\"abab\\" or \\"baba\\", both of which satisfy the condition. In the second sample, it is not possible to rearrange \\"aaab\\" such that no two adjacent characters are the same, hence the output is \\"Not Possible\\". In the third sample, John can rearrange \\"bbc\\" to \\"bcb\\", which satisfies the condition.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the input string such that no two adjacent characters are the same. If not possible, returns \\"Not Possible\\". if not s: return \\"Not Possible\\" # Count the frequency of each character counter = Counter(s) # Create a max heap based on the count of characters max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char is not None: # Push the previous character back into the heap heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = None if -count > 1: prev_char = char prev_count = count + 1 # Decrease the count # If the length of the result does not match the input string\'s length if len(result) != len(s): return \\"Not Possible\\" return \'\'.join(result)"},{"question":"Twilight Sparkle is known for her love of books and learning. One day, she comes across a puzzle while reading about ancient pony lore. The puzzle describes a special kind of number sequence related to magic squares. A magic square is an arrangement of numbers in a square grid where the sums of the numbers in each row, each column, and the two main diagonals are the same. Twilight wants to create her own sequence of numbers that, when paired together, form a sequence with a specific sum property similar to that of a magic square. However, she needs help to construct such a sequence. Can you help Twilight? Given an integer n, construct a sequence A of length 2n such that the sum of every n consecutive integers (from any starting index) is the same. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of half of the desired sequence. Output Output 2n integers — the sequence A of length 2n that satisfies the condition. Examples Input 2 Output 1 2 3 4 Input 3 Output 1 2 3 1 2 3","solution":"def construct_sequence(n): Constructs a sequence A of length 2n such that the sum of every n consecutive integers is the same. sequence = list(range(1, n + 1)) * 2 return sequence"},{"question":"Tom is a software engineer working on a classic arcade game where the player controls a snake that moves around a grid-based board. The snake can move up, down, left, or right by one unit. The board is represented as a list of strings, where each string represents a row of the board. An \'S\' in the board represents the snake\'s head, and a dot \'.\' represents an empty cell. The snake can move to any empty cell without leaving the board\'s boundaries. Here is a board example: ```` ....... .S..... ....... ```` Tom wants to implement a function to determine which moves the snake can make without going off the board. The function should return a list of possible moves in the form of strings: \\"UP\\", \\"DOWN\\", \\"LEFT\\", and \\"RIGHT\\". If no moves are possible, the function should return an empty list. Write a function `find_possible_moves(board: List[str]) -> List[str]` to help Tom compute the possible moves. The input `board` is a list of strings, and you need to compute the result using only this information. When the snake is located at the top edge of the board, the possible move \\"UP\\" should not be included. Similarly, if the snake is at the bottom edge, \\"DOWN\\" should not be included, and so on for the other edges. For example, for the given board example, the function should return: ``` [\\"UP\\", \\"LEFT\\", \\"RIGHT\\"] ``` because the snake, at position (1, 1), can move up, left, or right without leaving the board. On the other hand, if the snake is at position (0, 4), the function should return: ``` [\\"LEFT\\", \\"RIGHT\\", \\"DOWN\\"] ``` Important: The board will always contain exactly one \'S\' that represents the snake\'s head.","solution":"from typing import List def find_possible_moves(board: List[str]) -> List[str]: rows = len(board) cols = len(board[0]) if rows > 0 else 0 # Find the snake\'s head position for r in range(rows): for c in range(cols): if board[r][c] == \'S\': snake_row, snake_col = r, c break moves = [] if snake_row > 0 and board[snake_row - 1][snake_col] == \'.\': moves.append(\\"UP\\") if snake_row < rows - 1 and board[snake_row + 1][snake_col] == \'.\': moves.append(\\"DOWN\\") if snake_col > 0 and board[snake_row][snake_col - 1] == \'.\': moves.append(\\"LEFT\\") if snake_col < cols - 1 and board[snake_row][snake_col + 1] == \'.\': moves.append(\\"RIGHT\\") return moves"},{"question":"A table with N rows and M columns is given. Each cell in the table contains a positive integer. Your task is to find a single-path from the top-left cell (1,1) to the bottom-right cell (N,M) such that the sum of all elements in this path is maximized. In each step, you can only move right or down. ------ Input Format ------ - The first line of input contains two integers N and M, denoting the number of rows and columns respectively. - The next N lines each contain M integers, representing the table where each integer is the value at the corresponding cell. ------ Output Format ------ Print a single number representing the maximum possible sum of elements along any path from the top-left cell to the bottom-right cell. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ text{value at each cell} ≤ 10^5 ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 29 ----- Explanation 1 ------ The path with the maximum possible sum is 1 → 4 → 7 → 8 → 9, and the sum is 1 + 4 + 7 + 8 + 9 = 29.","solution":"def max_path_sum(grid): N = len(grid) M = len(grid[0]) # Initialize the dp table with zeros dp = [[0] * M for _ in range(N)] # Set the value for the starting point dp[0][0] = grid[0][0] # Fill the first row by accumulating sums for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column by accumulating sums for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill dp table by considering the sum from top or left cells for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at the bottom-right corner will be the maximum path sum return dp[N-1][M-1] # Example usage if __name__ == \\"__main__\\": N, M = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_path_sum(grid)) # Output: 29"},{"question":"# Description: Given an array of integers, return the length of the longest subarray that forms a strictly increasing sequence without rearranging the elements. # Notes: * A strictly increasing sequence is one where each element is greater than the previous element. ___ Examples ``` longest_increasing_subarray([1, 2, 3, 2, 3, 4, 5]) === 4 longest_increasing_subarray([5, 1, 2, 3, 4]) === 4 longest_increasing_subarray([10, 20, 10, 30, 40, 50, 10]) === 4 longest_increasing_subarray([5, 6, 3, 5, 7, 8, 8, 9]) === 4 ```","solution":"def longest_increasing_subarray(arr): Returns the length of the longest subarray that forms a strictly increasing sequence. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Arjun and Priya are playing a card game with a unique deck. The deck contains N cards, each card having an integer value on it. A move consists of selecting a subset of cards such that the sum of the values on the cards in this subset is a multiple of a given integer K. The selected subset is then removed from the deck, and the game continues with the remaining cards. Arjun always makes the first move. The player who cannot make a move loses the game, and the other player wins. Given the deck configuration, determine who will win the game if both players play optimally. Input: The first line of input contains the number of test cases T. Each test case consists of two lines. The first line contains the two integers N and K. The second line contains N space-separated integers representing the values on the cards. Output: For each test case, print \\"Arjun\\" if Arjun wins, or \\"Priya\\" if Priya wins. Print each result without the quotes. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ 100 1 ≤ value on each card ≤ 1000 SAMPLE INPUT 2 3 5 2 5 8 4 7 3 6 10 15 SAMPLE OUTPUT Arjun Priya","solution":"def determine_winner(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] cards = test_cases[i][1] # Calculate if any subset of cards can sum to a multiple of K can_make_move = False for num in cards: if num % K == 0: can_make_move = True break if can_make_move: results.append(\\"Arjun\\") else: results.append(\\"Priya\\") return results"},{"question":"Design a function that receives a list of integers and returns True if the list can be split into two subsets such that the sums of the subsets are equal. Otherwise, it should return False. -----Constraints----- - The list provided will contain between 1 and 20 integers. - Each integer in the array will be between 1 and 100, inclusive. -----Input----- The function should take a single argument: - A list of integers -----Output----- The function should return a boolean value (True or False). -----Sample Input----- [1, 5, 11, 5] -----Sample Output----- True The subsets [1, 5, 5] and [11] both sum up to 11. -----Sample Input----- [1, 2, 3, 5] -----Sample Output----- False There is no way to split the list into two subsets with equal sum.","solution":"def can_partition(nums): Determines if the list of integers can be partitioned into two subsets with equal sum. :param nums: List[int] - List of integers :return: bool - True if the list can be partitioned, False otherwise total_sum = sum(nums) # If the total sum is odd, it\'s impossible to split into two equal subsets if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num-1, -1): dp[i] = dp[i] or dp[i-num] return dp[subset_sum]"},{"question":"Given a list of non-negative integers, determine the minimum number of elements in the list that must be changed to make the entire list non-decreasing. A list is non-decreasing if for all indices i (1 ≤ i < n), a[i] ≤ a[i+1], where n is the length of the list. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the list. The second line contains n non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 109). Output Print a single integer — the minimum number of elements that need to be changed. Examples Input 5 4 2 3 1 5 Output 2 Explanation You can change the 1st element (4) to 1 and the 2nd element (2) to 3 to make the list non-decreasing: [1, 3, 3, 1, 5]. Input 6 1 2 3 5 4 6 Output 1 Explanation You can change the 5th element (4) to 5 to make the list non-decreasing: [1, 2, 3, 5, 5, 6].","solution":"def min_changes_to_non_decreasing(arr): n = len(arr) count = 0 # Create a list to keep track of where we need changes changes = [0] * n for i in range(1, n): if arr[i] < arr[i - 1]: count += 1 if i < 2 or arr[i] >= arr[i - 2]: # Adjust the previous element if possible arr[i - 1] = arr[i] else: # Adjust the current element arr[i] = arr[i - 1] return count"},{"question":"A company\'s customer service department wants to evaluate the performance of their representatives. Your task is to write a program that identifies whether the performances are satisfactory based on their response times. The program should read a list of data where each item includes an employee ID e, the response time r (in seconds) taken to reply to a customer\'s query, and a boolean value s which represents whether the response was satisfactory (1 for satisfactory and 0 for unsatisfactory). If more than 75% of an employee\'s responses are satisfactory and the average response time is less than or equal to 300 seconds, the program should consider their performance as \\"Good\\". Print the IDs of employees whose overall performance is \\"Good\\", in the order of input. If there are no such employees, print \\"NA\\". Assume n < 3000 and each employee has a unique ID. Input The input consists of several datasets. The input ends with a line including a single 0. Each dataset consists of: n (the number of data in the list) e r s e r s : : e r s Output For each dataset, print a list of employee IDs whose performance is \\"Good\\" or a text \\"NA\\" Example Input 3 1001 250 1 1002 310 0 1001 290 1 2 1003 200 1 1003 400 0 1 1004 199 1 0 Output 1001 NA 1004","solution":"def evaluate_performance(datasets): result = [] for data in datasets: n = data[0] if n == 0: break performances = data[1:] employee_stats = {} for e, r, s in performances: if e not in employee_stats: employee_stats[e] = {\'total_responses\': 0, \'satisfactory_responses\': 0, \'total_time\': 0} employee_stats[e][\'total_responses\'] += 1 employee_stats[e][\'total_time\'] += r if s: employee_stats[e][\'satisfactory_responses\'] += 1 good_employees = [] for e, stats in employee_stats.items(): if stats[\'satisfactory_responses\'] / stats[\'total_responses\'] > 0.75 and stats[\'total_time\'] / stats[\'total_responses\'] <= 300: good_employees.append(e) result.append(good_employees if good_employees else \\"NA\\") return result # Example usage: # datasets = [ # [3, (1001, 250, 1), (1002, 310, 0), (1001, 290, 1)], # [2, (1003, 200, 1), (1003, 400, 0)], # [1, (1004, 199, 1)], # [0] # ] # print(evaluate_performance(datasets))"},{"question":"Alice loves arrays and recently she has been given an array of integers by her friend Bob. Alice wants to perform a series of operations on this array to make all its elements equal. She can perform the following operation any number of times on the array: 1. Select any two different elements a_i and a_j (of the array) and replace them with floor((a_i + a_j)/2). The floor function returns the greatest integer less than or equal to the value. Alice wants to know the minimum possible value of the common element in the array after making all the elements equal. Can you help her determine this? Input - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output - Print a single integer — the minimum possible value of the common element in the array. Examples Input 4 1 2 3 4 Output 2 Input 5 10 10 10 10 10 Output 10 Input 3 7 6 5 Output 6 Note In the first sample, one possible way to make all the elements equal is: - Choose 1 and 4, replace them with floor((1 + 4)/2) = 2. The array becomes [2, 2, 3, 2]. - Then, choose 2 and 3, replace them with floor((2 + 3)/2) = 2. The array becomes [2, 2, 2, 2]. In the second sample, since all elements are already equal, the minimum possible value is 10. In the third sample, one possible way to make all the elements equal is: - Choose 5 and 7, replace them with floor((5 + 7)/2) = 6. The array becomes [6, 6, 6].","solution":"def min_common_element(n, arr): Returns the minimum possible value of the common element in the array after making all the elements equal. return max(arr)"},{"question":"In a galaxy far, far away, a group of astronauts stranded on a distant planet need to send a signal back to Earth. The planet\'s atmosphere has several storm zones that interfere with signal transmission. To send a message back to Earth, the astronauts must find a pathway through the planet\'s grid that avoids these storm zones. You are given a grid of size NxM where each cell in the grid can either be empty (.) or contain a storm zone (#). The astronauts can move up, down, left, or right, but cannot move diagonally. They need to find the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner (N-1,M-1). Implement a function to determine the length of the shortest path that avoids storm zones. If there is no valid path, return -1. Function Signature: ```python def shortest_path(grid: List[List[str]]) -> int: pass ``` # Input - An integer N, the number of rows in the grid (1 ≤ N ≤ 100). - An integer M, the number of columns in the grid (1 ≤ M ≤ 100). - A 2D list of characters representing the grid, where each element is either \'.\' or \'#\'. # Output - An integer representing the length of the shortest path from (0,0) to (N-1,M-1). If there is no path, return -1. # Example Input ```python N = 3 M = 3 grid = [ [\'.\', \'.\', \'.\'], [\'#\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] ``` Output ``` 4 ``` Explanation The shortest path from (0, 0) to (2, 2) is (0,0) → (0,1) → (0,2) → (1,2) → (2,2), which has a length of 4.","solution":"from collections import deque from typing import List def shortest_path(grid: List[List[str]]) -> int: N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N - 1 and y == M - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"You are given a 2D integer array consisting of multiple queries. Each query is represented as a sub-array of two integers, where the first integer represents the type of the query and the second integer represents the value or number associated with the query. There are three types of queries: 1. Type 1: Adds the given value to a pool of integers. 2. Type 2: Removes the given value from the pool if it exists, otherwise does nothing. 3. Type 3: Finds the maximum integer in the pool and prints it. If the pool is empty, it prints \\"None\\". Implement a function `process_queries(queries)` that processes the given list of queries and returns a list of results for type 3 queries. -----Input----- - A 2D list of integers `queries` where `1 ≤ len(queries) ≤ 10^5` and each sub-array contains exactly 2 integers. - For type 1 and type 2 queries, the value will be an integer in the range `-10^6` to `10^6`. - For type 3 queries, the value will always be 0. -----Output----- - A list of integers and/or strings representing the results of each type 3 query. -----Examples----- Input [[1, 5], [1, 10], [3, 0], [2, 10], [3, 0]] Output [10, 5] Input [[1, -3], [1, 4], [1, 5], [3, 0], [2, -3], [3, 0]] Output [5, 5] Input [[3, 0], [1, 7], [2, 8], [2, 7], [3, 0]] Output [\\"None\\", \\"None\\"] -----Note----- In the first example, the pool initially adds 5 and 10, then finds the maximum (10), removes 10, finds the maximum again (5). In the second example, the pool starts with -3, 4, and 5. After the first maximum query, it returns 5. After removing -3, the second maximum query still returns 5. In the third example, the first maximum query returns \\"None\\" because the pool is empty at that point. Adding 7 and trying to remove 8 (which doesn\'t exist) leaves the pool unchanged, and the second maximum query again returns \\"None\\".","solution":"def process_queries(queries): This function processes a list of queries to manage a pool of integers and return results of specific queries. pool = [] results = [] for query in queries: q_type, value = query if q_type == 1: pool.append(value) elif q_type == 2: if value in pool: pool.remove(value) elif q_type == 3: if pool: results.append(max(pool)) else: results.append(\\"None\\") return results"},{"question":"Ravi and Rectangles Ravi is given a matrix of size NxM containing integers. He needs to find a submatrix with the largest possible sum. A submatrix is defined as any contiguous block of the matrix. Help Ravi in finding this submatrix with the maximum sum. INPUT: In the first line, there is a single integer T, the number of test cases. For each test case: - The first line contains two integers N and M, the number of rows and columns of the matrix. - The next N lines contain M integers each, representing the elements of the matrix. OUTPUT: For each test case, output a single integer representing the maximum sum of any submatrix. Constraints: 1 ≤ N, M ≤ 100 -10^6 ≤ matrix element ≤ 10^6 Example Input: 1 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Example Output: 29 Explanation: The submatrix with the maximum sum is: 3 8 10 -4 -1 1","solution":"def maximum_sum_submatrix(matrix): Finds the maximum sum of any submatrix in the given matrix. def kadane(arr): Finds the maximum sum of any contiguous subarray in the given array. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def process_input(input_data): Processes the input data and output the result for all test cases. input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 results = [] for _ in range(T): N, M = map(int, input_lines[index].split()) matrix = [] for i in range(N): matrix.append(list(map(int, input_lines[index+i+1].split()))) index += N + 1 results.append(maximum_sum_submatrix(matrix)) return results"},{"question":"# Problem Statement You are tasked with creating a function that calculates the shortest distance between two words in a list of words. This function should find the smallest number of intervening words between the two specified words. Assumptions: 1. The list of words is non-empty. 2. Both words will be present in the list. 3. A word may appear multiple times in the list. For example: - Given the list `words = [\\"practice\\", \\"makes\\", \\"perfect\\", \\"coding\\", \\"makes\\"]` - For the words `word1 = \\"coding\\"` and `word2 = \\"practice\\"`, the shortest distance is `3` because there are three words between \\"coding\\" and \\"practice\\". - For the words `word1 = \\"makes\\"` and `word2 = \\"coding\\"`, the shortest distance is `1` because \\"coding\\" comes immediately after one instance of \\"makes\\". # Input - `words` (a list of strings): A list of words. - `word1` (a string): The first word. - `word2` (a string): The second word. # Output - An integer that represents the shortest distance between the two words in the given list. # Constraints 1. The length of the list will be at most 10^4. 2. The words will only contain lowercase letters. # Examples ```python # Example 1 words = [\\"practice\\", \\"makes\\", \\"perfect\\", \\"coding\\", \\"makes\\"] word1 = \\"coding\\" word2 = \\"practice\\" shortest_distance = find_shortest_distance(words, word1, word2) print(shortest_distance) # Output: 3 # Example 2 words = [\\"practice\\", \\"makes\\", \\"perfect\\", \\"coding\\", \\"makes\\"] word1 = \\"makes\\" word2 = \\"coding\\" shortest_distance = find_shortest_distance(words, word1, word2) print(shortest_distance) # Output: 1 ``` # Function Signature ```python def find_shortest_distance(words: List[str], word1: str, word2: str) -> int: # Your code here ``` # Explanation In this problem, you need to traverse the list and keep track of the positions of the two words. Once both words have been found, calculate the distance between their positions and update the shortest distance if this new distance is smaller than the previously stored shortest distance. Continue this process until the entire list has been traversed. This approach ensures the solution is efficient, operating in linear time relative to the length of the list.","solution":"from typing import List def find_shortest_distance(words: List[str], word1: str, word2: str) -> int: Finds the shortest distance between word1 and word2 in the list of words. index1, index2 = -1, -1 min_distance = float(\'inf\') for i, word in enumerate(words): if word == word1: index1 = i elif word == word2: index2 = i if index1 != -1 and index2 != -1: min_distance = min(min_distance, abs(index1 - index2)) return min_distance"},{"question":"Given a string consisting of lowercase alphabets, the task is to find the minimum number of insertions required to make the string a palindrome. An insertion can be done at any position within the string. Example 1: Input: string = \\"ab\\" Output: 1 Explanation: We can insert \'b\' at the beginning to make it \\"bab\\" or insert \'a\' at the end to make it \\"aba\\". Example 2: Input: string = \\"race\\" Output: 3 Explanation: We can insert \'e\' at the beginning, \'c\' at the beginning and \'r\' at the beginning to make it \\"ecerace\\". Your Task: Since this is a function problem, you don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function minInsertions() that takes a string as a parameter and returns the minimum number of insertions required to make the string a palindrome. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(N^2). Constraints: 1 ≤ Length of string ≤ 500","solution":"def minInsertions(string): Returns the minimum number of insertions required to make the given string a palindrome. n = len(string) dp = [[0] * n for _ in range(n)] for gap in range(1, n): for left in range(n - gap): right = left + gap if string[left] == string[right]: dp[left][right] = dp[left + 1][right - 1] else: dp[left][right] = min(dp[left][right - 1], dp[left + 1][right]) + 1 return dp[0][n - 1]"},{"question":"You are given a grid with dimensions `n x m`, where each cell can either be walkable (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You need to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can move up, down, left, or right, but you cannot move diagonally. If there is no valid path, output -1. -----Input----- The first line contains two integers `n` and `m` (1 leq n, m leq 1000) — the dimensions of the grid. The next `n` lines contain `m` characters each (either \'.\' or \'#\'), representing the grid. It is guaranteed that the top-left and bottom-right corners are initially walkable (i.e., they are \'.\'). -----Output----- Output a single integer representing the length of the shortest path from the top-left to the bottom-right corner. If there is no valid path, output -1. -----Examples----- Input 3 3 ... ... ... Output 4 Input 3 4 .... .. .... Output 5 Input 3 3 .#. # ... Output -1 -----Note----- In the first example, you can move directly from the top-left to the bottom-right corner in 4 moves: right, right, down, down. In the second example, the shortest path involves moving around the obstacles: right, right, down, down, right. In the third example, it is impossible to reach the bottom-right corner due to the obstacles completely blocking the way.","solution":"from collections import deque def shortest_path_in_grid(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n - 1, m - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a number N, a \\"special\\" number is one in which the sum of its digits raised to the power of the number of digits is equal to the original number. Suresh calls such numbers \\"Armstrong Numbers\\". For example, 153 is an Armstrong Number because 1^3 + 5^3 + 3^3 = 153. Ramesh, being curious, wants to identify whether a given number is an Armstrong Number or not. Your task is to assist Ramesh by writing a program that takes a number and determines if it is an Armstrong Number. Input: The first line of the input contains a single integer T - denoting the number of test cases. Each of the next T lines contains a single integer N (1 ≤ N ≤ 10^9). Output: For each test case, print \\"YES\\" if the given number is an Armstrong Number, otherwise print \\"NO\\". Examples: Input: 3 153 9474 123 Output: YES YES NO Explanation: In the case of 153, the sum of the digits raised to the power of the number of digits is 1^3 + 5^3 + 3^3 = 153. In the case of 9474, the sum of the digits raised to the power of the number of digits is 9^4 + 4^4 + 7^4 + 4^4 = 9474. In the case of 123, the sum of the digits raised to the power of the number of digits is 1^3 + 2^3 + 3^3 = 36, which is not equal to 123.","solution":"def is_armstrong_number(N): Determines if N is an Armstrong Number. digits = list(map(int, str(N))) power = len(digits) sum_of_powers = sum(d ** power for d in digits) return sum_of_powers == N def check_armstrong_numbers(test_cases): results = [] for N in test_cases: if is_armstrong_number(N): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Print the maximum sum of a contiguous subarray of length L from the given array of integers of size N. Constraints * 1 leq L leq N leq 10^5 * 1 leq arr[i] leq 10^4 for each valid i Input Input is given from Standard Input in the following format: N L arr_1 arr_2 ... arr_N Output Print the maximum sum of a contiguous subarray of length L. Examples Input 5 2 1 2 3 4 5 Output 9 Input 6 3 2 1 5 1 2 7 Output 10","solution":"def max_sum_contiguous_subarray(N, L, arr): Returns the maximum sum of a contiguous subarray of length L from the given array of integers of size N. # Calculate the sum of the first L elements current_sum = sum(arr[:L]) max_sum = current_sum # Use a sliding window to calculate the sum of the rest of the subarrays of length L for i in range(L, N): current_sum = current_sum + arr[i] - arr[i - L] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"# Longest Substring Without Repeating Characters Write a function that takes a string as input and finds the length of the longest substring without repeating characters. For example: ```python def length_of_longest_substring(s: str) -> int: # your code here length_of_longest_substring(\'abcabcbb\') # should return 3 (substring \\"abc\\") length_of_longest_substring(\'bbbbb\') # should return 1 (substring \\"b\\") length_of_longest_substring(\'pwwkew\') # should return 3 (substring \\"wke\\") length_of_longest_substring(\'\') # should return 0 (empty string, no substrings) ``` NOTES: * The input string will consist of English letters, digits, symbols, and spaces. * Consider uppercase and lowercase letters as different characters.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Arya is participating in an online coding competition where she has to solve problems to earn points. Each problem has a point value attached to it and a time limit within which it must be solved to earn those points. Arya wants to maximize her score, but she can only solve one problem at a time, without exceeding the competition\'s total time limit. Given the total time available for the competition and a list of problems, each with its own point value and time requirement, determine the maximum points Arya can earn if she optimally chooses which problems to solve. -----Input----- The first line of the input contains two integers n (1 ≤ n ≤ 100) and T (1 ≤ T ≤ 10000) — the number of problems and the total time available for the competition. The next n lines each contain two integers pi and ti (1 ≤ pi ≤ 100, 1 ≤ ti ≤ 10000) — the point value and time requirement of each problem. -----Output----- Print a single integer — the maximum points Arya can earn within the given total time. -----Examples----- Input 3 50 100 20 200 30 50 10 Output 300 Input 4 100 10 10 40 20 50 30 70 40 Output 170 -----Note----- In the first sample case, Arya can solve the first two problems, earning 300 points with a total time of 50 (20 + 30). In the second sample case, Arya can solve the last two problems, earning a total of 170 points within a time limit of 100 (40 + 30).","solution":"def max_points(n, T, problems): Determines the maximum points Arya can earn given the problems\' points and time requirements within the total time available. :param n: Number of problems (int) :param T: Total time available (int) :param problems: List of tuples, where each tuple contains (points, time) for each problem :return: Maximum points Arya can earn (int) # Create a 2D list to store maximum points for each time limit and number of problems considered dp = [[0] * (T + 1) for _ in range(n + 1)] for i in range(1, n + 1): points, time = problems[i - 1] for t in range(T + 1): # If Arya doesn\'t solve the current problem dp[i][t] = dp[i-1][t] # If Arya solves the current problem and she has enough time if t >= time: dp[i][t] = max(dp[i][t], dp[i-1][t-time] + points) return dp[n][T] # Example function usage # problems = [(100, 20), (200, 30), (50, 10)] # print(max_points(3, 50, problems)) # Expected output: 300"},{"question":"*** Find the Odd Integer *** You will be given a list of integers. Your task is to return the integer that appears an odd number of times. There will always be only one integer that appears an odd number of times. Your solution should not use any loops. Hints: - Consider leveraging built-in functions and higher-order functions to achieve the task without explicit iteration. Examples: - findOdd([1, 2, 3, 1, 3, 2, 3]) → 3 (since 3 appears 3 times, which is odd) - findOdd([4, 4, 4, 2, 2]) → 4 (since 4 appears 3 times, which is odd)","solution":"from functools import reduce from collections import Counter def findOdd(seq): Returns the integer that appears an odd number of times in the list. counts = Counter(seq) return next(num for num, count in counts.items() if count % 2 != 0)"},{"question":"Esha runs a delivery service in a city, which has a peculiar road network. The city has N junctions connected by M one-way roads. Each road has a certain delivery time associated with it. Esha wants to find the minimum time it will take to deliver a package from one junction to another given the road network and delivery times. However, due to some road maintenance, some roads might be temporarily unavailable, and those roads should be excluded from the delivery time calculation. Given the city map, the information about unavailable roads, and the starting and ending junctions, help Esha determine the minimum delivery time required for her package. If it is impossible to deliver the package due to road inaccessibility, return -1. INPUT: The first line contains an integer T, the number of test cases. For each test case, the first line contains three integers N, M, and U, where N is the number of junctions, M is the number of roads, and U is the number of unavailable roads. The next M lines each contain three integers A, B, and T, indicating that there is a one-way road from junction A to junction B that takes T units of time. The next U lines each contain two integers A and B, indicating that the road from junction A to junction B is temporarily unavailable. The next line contains two integers S and D, the starting and destination junctions. OUTPUT: For each test case, print the minimum delivery time from S to D or -1 if the delivery is impossible. CONSTRAINTS: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 500 1 ≤ M ≤ 10^4 1 ≤ U ≤ M 1 ≤ A, B ≤ N 1 ≤ T ≤ 10^2 S ≠ D SAMPLE INPUT: 1 4 5 1 1 2 10 1 3 5 2 3 2 3 4 1 4 2 3 2 3 1 4 SAMPLE OUTPUT: 6 EXPLANATION: In the sample input, there are 4 junctions and 5 roads. The road from junction 2 to junction 3 is unavailable. The valid paths from junction 1 to junction 4 are: - 1 -> 3 -> 4, taking 5 (to 3) + 1 (to 4) = 6 units of time. - 1 -> 2 -> 3 -> 4 is invalid due to the unavailability of the road from junction 2 to junction 3. Thus, the minimum delivery time is 6.","solution":"import heapq def find_minimum_delivery_time(test_cases): def dijkstra(n, graph, unavailable, start, end): unavailable_set = set((a, b) for a, b in unavailable) adj_list = {i: [] for i in range(1, n + 1)} for u, v, t in graph: if (u, v) not in unavailable_set: adj_list[u].append((v, t)) pq = [(0, start)] # (time, node) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while pq: current_time, node = heapq.heappop(pq) if node == end: return current_time if current_time > dist[node]: continue for neighbor, travel_time in adj_list[node]: time = current_time + travel_time if time < dist[neighbor]: dist[neighbor] = time heapq.heappush(pq, (time, neighbor)) return -1 results = [] for n, m, u, roads, unavailable_roads, s, d in test_cases: result = dijkstra(n, roads, unavailable_roads, s, d) results.append(result) return results"},{"question":"You are given an array of n integers where each integer is between 1 and n (inclusive) and each integer appears exactly once. The array represents a sequence of numbers and you are allowed to reverse any subarray (contiguous segment) of the array. Find the minimum number of subarray reversals required to sort the array in increasing order. Example 1: Input: n = 5 a[] = {3, 1, 4, 5, 2} Output: 3 Explanation: 3 1 4 5 2 // given sequence 3 1 2 5 4 // reverse subarray [2, 5] 2 1 3 5 4 // reverse subarray [1, 3] 1 2 3 5 4 // reverse subarray [1, 2] 1 2 3 4 5 // reverse subarray [4, 5] Hence, minimum 3 reversals are required. Example 2: Input: n = 3 a[] = {3, 2, 1} Output: 1 Explanation: 3 2 1 // given sequence 1 2 3 // reverse subarray [1, 3] Hence, minimum 1 reversal is required. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minReversals() which takes the array a[] and its size n as inputs and returns the minimum number of subarray reversals required. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= a[i] <= n","solution":"def minReversals(n, a): Returns the minimum number of subarray reversals required to sort the array in increasing order. # Initialize sorted array target = list(range(1, n+1)) # Initialize a count for reversals reversals = 0 # While the array is not sorted while a != target: # Find the first position where the array is not sorted i = 0 while i < n and a[i] == target[i]: i += 1 # Find the correct position of the mismatched element in the target array j = a.index(target[i]) # Reverse the subarray to correct the mismatch a[i:j+1] = reversed(a[i:j+1]) # Increase the reversal count reversals += 1 return reversals"},{"question":"In this Kata, you must implement a function to check if a given matrix is an identity matrix. An identity matrix is a square one with \'1\'s on the main diagonal and \'0\'s elsewhere. The given matrix will always be square. ```python is_identity_matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) = True is_identity_matrix([[1, 0, 1], [0, 1, 0], [0, 0, 1]]) = False is_identity_matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) = True is_identity_matrix([[1, 0], [0, 1, 0]]) = False ``` Take care to optimize the function for the best performance as large matrices might be tested. Good luck! Please also try [Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)","solution":"def is_identity_matrix(matrix): Checks if a given matrix is an identity matrix. :param matrix: List of lists, where each sublist is a row of the matrix. :return: Boolean indicating whether the matrix is an identity matrix. n = len(matrix) for i in range(n): for j in range(n): if i == j: if matrix[i][j] != 1: return False else: if matrix[i][j] != 0: return False return True"},{"question":"An e-commerce website is hosting a flash sale with various products. Each product has a specific discount percentage and the sale lasts for a limited period. Customers want to maximize their savings by purchasing products with the highest discounts first. Your task is to help the e-commerce website manage the sale by processing the products in the order of their discounts, from highest to lowest. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of products. Each of the next n lines contains a string and an integer separated by a space — the name of the product (a string of length 1 to 20 consisting of only letters) and the discount percentage (an integer between 1 and 100 inclusive). Output Print n lines, each line containing the name of a product and its discount percentage, sorted in descending order of discount. If two products have the same discount percentage, they should appear in the order they were input. Examples Input 5 Laptop 20 Headphones 50 Mouse 35 Keyboard 20 Monitor 50 Output Headphones 50 Monitor 50 Mouse 35 Laptop 20 Keyboard 20 Input 3 Phone 5 Tablet 10 Camera 10 Output Tablet 10 Camera 10 Phone 5 Input 2 Smartwatch 25 Charger 25 Output Smartwatch 25 Charger 25","solution":"def sort_products_by_discount(n, products): Sorts products in descending order of discount percentage. If two products have the same discount percentage, they should appear in the order they were input. :param n: int - number of products :param products: List[Tuple[str, int]] - list of tuples where each tuple contains a product name and its discount percentage :return: List[Tuple[str, int]] - sorted list of products based on discount percentage # Sorting the list of products by discount percentage in descending order sorted_products = sorted(products, key=lambda x: -x[1]) return sorted_products def process_input(input_string): Parses the input string and returns the sorted list of products. :param input_string: str - multiline input string :return: List[str] - list of formatted strings representing the sorted products lines = input_string.strip().split(\'n\') n = int(lines[0]) products = [(lines[i].split()[0], int(lines[i].split()[1])) for i in range(1, n + 1)] sorted_products = sort_products_by_discount(n, products) return [f\\"{product[0]} {product[1]}\\" for product in sorted_products]"},{"question":"In a game, there is a two-dimensional grid with several rows and columns. Each cell in the grid can either be empty or contain an obstacle. The player starts from the top-left corner of the grid and aims to reach the bottom-right corner. The player can move to any adjacent cell (left, right, up, or down) but cannot move diagonally. To determine the paths the player can take, you need to figure out if there is any possible path from the starting cell to the destination cell given the positions of the obstacles. Create a program that checks if there is a path from the top-left cell to the bottom-right cell in the grid while avoiding obstacles. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. - The next `n` lines each contain `m` characters (\'0\' or \'1\'), where \'0\' represents an empty cell and \'1\' represents an obstacle. # Output: - Print \\"Yes\\" if there is a path from the top-left cell to the bottom-right cell, and \\"No\\" otherwise. # Example: Input: 4 4 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 Output: Yes Input: 3 3 0 1 0 1 1 0 0 0 0 Output: No","solution":"def is_path_possible(n, m, grid): Determines if there is a path from the top-left to the bottom-right corner of the grid avoiding obstacles. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'0\' from collections import deque queue = deque([(0, 0)]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"No\\""},{"question":"You are given an array A consisting of N integers. Your task is to find the number of pairs of indices (i, j) (1 <= i < j <= N) such that their sum A[i] + A[j] is an even number. Constraints: - 2 <= N <= 10^5 - -10^9 <= A[i] <= 10^9 Input: The input is provided in the following format: N A_1 A_2 ... A_N Output: Output the number of pairs whose sum is an even number. Examples: Input: 5 1 2 3 4 5 Output: 4 Input: 6 2 4 6 8 10 12 Output: 15 Input: 4 1 3 5 7 Output: 6","solution":"def count_even_sum_pairs(N, A): Returns the number of pairs (i, j) such that A[i] + A[j] is even. if N < 2: return 0 odd_count = sum(1 for x in A if x % 2 != 0) even_count = N - odd_count # Pairs (i, j) with both values odd or both values even: odd_pairs = (odd_count * (odd_count - 1)) // 2 even_pairs = (even_count * (even_count - 1)) // 2 return odd_pairs + even_pairs"},{"question":"Chef is learning about summing numbers and he decides to practice by summing pairs of numbers. However, he wants a program that can handle a large number of pairs and provide the sum for each pair. -----Input----- The first line contains an integer N, which denotes the number of pairs of integers. Each of the next N lines contains two integers X and Y, denoting a pair of numbers that Chef wants to sum. -----Output----- For each pair, output the sum of the two numbers. -----Constraints----- - 1 ≤ N ≤ 10000 - 1 ≤ X, Y ≤ 1000000000 -----Example----- Input: 3 5 10 100 200 123 456 Output: 15 300 579 -----Explanation----- Example case 1: The pairs are (5, 10), (100, 200), and (123, 456) with respective sums 15, 300, and 579.","solution":"def sum_pairs(n, pairs): Returns the sum for each pair of integers in pairs. Parameters: n (int): The number of pairs. pairs (list of tuples): A list of tuples where each tuple contains two integers. Returns: list: A list of integers where each integer is the sum of a pair. results = [] for x, y in pairs: results.append(x + y) return results"},{"question":"You are given a list of integers `arr` with length `N` and another integer `X`. Your task is to determine if there exists a subarray (continuous segment) of `arr` which sums up to exactly `X`. If such a subarray exists, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - The length of `arr` is N. - 1 ≤ N ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 for 1 ≤ i ≤ N - -10^9 ≤ X ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N X arr -----Output----- Output \\"YES\\" if there exists a subarray of `arr` which sums up to exactly `X`, otherwise print \\"NO\\". -----Sample Input----- 5 15 1 2 3 7 5 -----Sample Output----- YES","solution":"def subarray_sum(arr, X): Determines if there exists a subarray whose sum is exactly X. :param arr: List of integers :param X: Integer, target sum :return: \\"YES\\" if such a subarray exists, otherwise \\"NO\\" current_sum = 0 sum_indices = {} for i, num in enumerate(arr): current_sum += num if current_sum == X: return \\"YES\\" if (current_sum - X) in sum_indices: return \\"YES\\" sum_indices[current_sum] = i return \\"NO\\" # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) X = int(data[1]) arr = list(map(int, data[2:])) print(subarray_sum(arr, X))"},{"question":"A company is designing a system to manage bookings for its conference rooms. Each conference room has a calendar that tracks the bookings made for it. The system should support the following operations: 1. **Book a room** — Given a room identifier, a start time, and an end time, this operation attempts to book the room for the given time interval. If the room is already booked during any part of that interval, the booking should fail. 2. **Cancel a booking** — Given a room identifier and a start time, this operation cancels the booking that starts at the given time. If no booking starts at the specified time, the cancellation should fail. 3. **Query available time slots** — Given a room identifier and a day (represented as a string in the format \\"YYYY-MM-DD\\"), this operation returns all available time slots for that day in which the room can be booked. Write a function that processes a sequence of operations on the conference rooms and returns the respective results for each query operation. # Input - The first line contains an integer `q` (1 ≤ q ≤ 10^5), the number of operations. - The next `q` lines each describe an operation in one of the following formats: - \\"Book <Room> <Start> <End>\\": Attempts to book the specified room from `<Start>` to `<End>`. `<Start>` and `<End>` are strings in the format \\"YYYY-MM-DD HH:MM\\". - \\"Cancel <Room> <Start>\\": Cancels the booking for the specified room that starts at `<Start>`. `<Start>` is a string in the format \\"YYYY-MM-DD HH:MM\\". - \\"Query <Room> <Day>\\": Returns the available time slots for the specified room on the given day. `<Day>` is a string in the format \\"YYYY-MM-DD\\". # Output For each query operation, return the available time slots for the specified room on the given day, formatted as a list of intervals in the format [\\"HH:MM-HH:MM\\"]. The intervals should be sorted in ascending order. # Example Input ``` 8 Book A 2023-10-01 09:00 2023-10-01 11:00 Book A 2023-10-01 10:00 2023-10-01 12:00 Book B 2023-10-01 10:00 2023-10-01 11:00 Cancel A 2023-10-01 09:00 Query A 2023-10-01 Query B 2023-10-01 Book B 2023-10-01 18:00 2023-10-01 20:00 Query B 2023-10-01 ``` Output ``` [\'00:00-09:00\', \'09:00-23:59\'] [\'00:00-10:00\', \'11:00-23:59\'] [\'00:00-10:00\', \'11:00-18:00\', \'20:00-23:59\'] ``` # Note - In the example above, the room \\"A\\" is first booked from 09:00 to 11:00 on 2023-10-01, which is successfully recorded. - The next attempt to book room \\"A\\" from 10:00 to 12:00 fails because it overlaps with the existing booking. - A booking for room \\"B\\" from 10:00 to 11:00 on 2023-10-01 is successfully recorded. - Cancelling the booking from 09:00 on 2023-10-01 for room \\"A\\" is successful. - Querying room \\"A\\" for 2023-10-01 returns all available time slots as the previous booking has been cancelled. - Querying room \\"B\\" for 2023-10-01 returns available time slots after considering the existing bookings. Your task is to implement the necessary function to handle these operations and return the correct outputs for each query.","solution":"from collections import defaultdict from datetime import datetime, timedelta class ConferenceRoomManager: def __init__(self): self.bookings = defaultdict(list) def book_room(self, room, start, end): start_dt = datetime.strptime(start, \'%Y-%m-%d %H:%M\') end_dt = datetime.strptime(end, \'%Y-%m-%d %H:%M\') calendar = self.bookings[room] for (s, e) in calendar: if not (end_dt <= s or start_dt >= e): return \\"Booking failed\\" calendar.append((start_dt, end_dt)) calendar.sort() # Maintain sorted list of bookings return \\"Booking successful\\" def cancel_booking(self, room, start): start_dt = datetime.strptime(start, \'%Y-%m-%d %H:%M\') calendar = self.bookings[room] for i, (s, e) in enumerate(calendar): if s == start_dt: calendar.pop(i) return \\"Cancellation successful\\" return \\"Cancellation failed\\" def query_available_slots(self, room, day): day_start = datetime.strptime(day, \'%Y-%m-%d\') day_end = day_start + timedelta(days=1) - timedelta(minutes=1) calendar = self.bookings[room] available_slots = [] if not calendar: return [\\"00:00-23:59\\"] previous_end = day_start for (s, e) in calendar: if s > day_end: break if s > previous_end: available_slots.append(f\\"{previous_end.strftime(\'%H:%M\')}-{s.strftime(\'%H:%M\')}\\") previous_end = max(previous_end, e) if previous_end < day_end: available_slots.append(f\\"{previous_end.strftime(\'%H:%M\')}-{day_end.strftime(\'%H:%M\')}\\") return available_slots def process_operations(self, operations): results = [] for operation in operations: parts = operation.split() command = parts[0] room = parts[1] if command == \\"Book\\": start = parts[2] + \\" \\" + parts[3] end = parts[4] + \\" \\" + parts[5] results.append(self.book_room(room, start, end)) elif command == \\"Cancel\\": start = parts[2] + \\" \\" + parts[3] results.append(self.cancel_booking(room, start)) elif command == \\"Query\\": day = parts[2] results.append(self.query_available_slots(room, day)) return results"},{"question":"Vasya has designed a simplified programming language, MinimLang, for educational purposes. This language has a unique way of defining and accessing variables using operations resembling basic stack manipulations. In MinimLang, you can perform the following operations: 1. `add X` - Push the integer `X` onto the stack. 2. `remove` - Pop the top element from the stack. 3. `peek` - Output the current top element of the stack, without removing it. 4. `increment N` - Increment the top N elements of the stack by 1. If the stack has less than N elements, increment all of them by 1. Your task is to write a program that processes a sequence of operations and outputs the results of all `peek` operations. # Input - The first line contains an integer `m` (1 ≤ m ≤ 100) — the number of operations. - The next `m` lines each contain a single operation of one of the four types mentioned above. It is guaranteed that the stack will never be empty when executing `remove` or `peek`. # Output For every `peek` operation, print the top element of the stack on a new line. # Examples Input ``` 5 add 5 add 3 peek increment 2 peek ``` Output ``` 3 4 ``` Input ``` 7 add 10 add 20 add 30 peek increment 1 remove peek ``` Output ``` 30 31 ``` # Notes - In the first example, after `add 5` and `add 3`, the stack is [5, 3]. The first `peek` outputs 3. - The `increment 2` then increments the top 2 elements, resulting in [6, 4]. The next `peek` outputs 4. - In the second example, the stack after the operations `add 10`, `add 20`, `add 30` is [10, 20, 30]. The `peek` outputs 30. - The `increment 1` increments only the top element, so the stack becomes [10, 20, 31]. - The `remove` operation removes the top element, leaving [10, 20]. The last `peek` outputs 20.","solution":"def process_operations(operations): stack = [] output = [] for op in operations: if op.startswith(\\"add\\"): _, x = op.split() stack.append(int(x)) elif op == \\"remove\\": stack.pop() elif op == \\"peek\\": output.append(stack[-1]) elif op.startswith(\\"increment\\"): _, n = op.split() n = int(n) for i in range(1, min(n, len(stack)) + 1): stack[-i] += 1 return output"},{"question":"Farmer Joe has a large rectangular farm plot that he wants to divide into equal-sized square sections for planting different crops. Given the length and width of the plot, Farmer Joe wants to know the largest possible area of the square section he can divide his farm into. The sections should cover the entire area of the plot with no land left unused. Write a function `max_square_area` that accepts two parameters `length` and `width`, which are the length and width of the farm plot respectively. The function should return the area of the largest possible square section that can be used to divide the entire plot. ```python def max_square_area(length, width): # Your code here # Example Usage print(max_square_area(15, 20)) # Output: 25 print(max_square_area(12, 8)) # Output: 16 ``` *Explanation*: - In the first example, the farm plot is 15 units by 20 units. The largest square section that can be used to divide the plot completely is 5 units by 5 units, and hence the area is 25 square units. - In the second example, the farm plot is 12 units by 8 units. The largest square section that can be used to divide the plot completely is 4 units by 4 units, and hence the area is 16 square units. Use the concept of the greatest common divisor (GCD) to determine the size of the largest possible square section.","solution":"import math def max_square_area(length, width): Returns the area of the largest possible square section that can be used to divide the entire plot. # Find the greatest common divisor (GCD) of length and width gcd = math.gcd(length, width) # The side length of the largest square section will be the GCD return gcd * gcd # Example Usage print(max_square_area(15, 20)) # Output: 25 print(max_square_area(12, 8)) # Output: 16"},{"question":"For a given integer n (n > 2) and a string s containing the letters \'a\' and \'b\', determine if it is possible to rearrange the characters of s to form any of the lexicographically sorted strings of length n that contain exactly n-2 \'a\'s and 2 \'b\'s. You need to print \\"YES\\" if it is possible to rearrange the letters of s to match any string in the sorted list of strings as specified; otherwise, print \\"NO\\". For example, if n=5 and s=\\"aabab\\"`, the output should be \\"YES\\" because \\"aabab\\" is one of the strings in the lexicographically sorted list for n=5. If n=5 and s=\\"aaabc\\"`, the output should be \\"NO\\" because \'c\' is not a valid character and does not fit the criteria of containing exactly n-2 \'a\'s and 2 \'b\'s. -----Input----- The input contains one or more test cases. The first line contains one integer t (1 le t le 10^4) — the number of test cases in the test. Then t test cases follow. Each test case is written on the separate line containing an integer n and a string s (3 le n le 10^5, and the length of s is equal to n). The string s consists only of lowercase English letters. The sum of values n over all test cases in the test doesn\'t exceed 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the characters of s to match the criteria; otherwise, print \\"NO\\". -----Example----- Input 4 5 aabab 5 aabba 5 abbba 3 abb Output YES YES NO YES","solution":"def can_rearrange(n, s): Determine if the string s can be rearranged to form a string with exactly n-2 \'a\'s and 2 \'b\'s. Parameters: n (int): The length of the string. s (str): The input string containing only lowercase English letters. Returns: str: \'YES\' if the rearrangement is possible, otherwise \'NO\'. if s.count(\'a\') == n - 2 and s.count(\'b\') == 2: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for n, s in test_cases: results.append(can_rearrange(n, s)) return results # Example usage with direct function calls test_cases = [(5, \\"aabab\\"), (5, \\"aabba\\"), (5, \\"abbba\\"), (3, \\"abb\\")] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Plan an Excursion A university organizes an annual excursion for its students. To plan the logistics, the organizers need to determine the minimum number of buses required to accommodate all the students, given that each bus has a fixed seating capacity. Write a program that computes the minimum number of buses needed. Input The input consists of multiple datasets, each in the following format. > n c > s1 s2 s3 ... sn The first line of a dataset contains two integers n and c. n is the number of students (1 ≤ n ≤ 1000) and c is the seating capacity of each bus (1 ≤ c ≤ 500). Each of the next n lines contains an integer si which indicates the grade of the i-th student. The end of the input is indicated by a line containing two zeros. The number of datasets does not exceed 100. Output For each dataset, output the minimum number of buses required to accommodate all the students. Sample Input 7 3 1 1 2 2 3 3 4 4 5 1 2 3 4 6 2 1 1 1 1 1 1 0 0 Output for the Sample Input 3 1 3 Examples Input 7 3 1 1 2 2 3 3 4 4 5 1 2 3 4 6 2 1 1 1 1 1 1 0 0 Output 3 1 3","solution":"def minimum_buses(data): results = [] for index in range(len(data)): n, c = data[index][0] if n == 0 and c == 0: break s_list = data[index][1] buses_needed = (n + c - 1) // c results.append(buses_needed) return results"},{"question":"Given an integer array nums, return the highest product you can get from three of the integers. Constraints * 3 ≤ nums.length ≤ 100,000 * -1,000 ≤ nums[i] ≤ 1,000 Input nums The input consists of a single line with space-separated integers representing the elements of the array num. Output Print the highest product in a line. Examples Input 1 2 3 4 Output 24 Input -10 -10 5 2 Output 500","solution":"def highest_product_of_three(nums): Returns the highest product of three integers from the given list. if len(nums) < 3: raise ValueError(\\"The input array must have at least three integers\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Given a string of lowercase English letters and a number k, find the maximum number of distinct characters within any substring of length k. For example, for the string \\"abcda\\" and k = 3, the possible substrings of length k = 3 are \\"abc\\", \\"bcd\\", \\"cda\\", and \\"da\\". The maximum number of distinct characters in these substrings is 3. Constraints * 1 leq text{length of the string} leq 10^6 * 1 leq k leq 10^6 * The string consists of only lowercase English letters. Input The input is given in the following format. string_value k Output Print an integer which represents the maximum number of distinct characters within any substring of length k. Example Input abcda 3 Output 3","solution":"def max_distinct_characters(string_value, k): max_distinct = 0 n = len(string_value) for i in range(n - k + 1): substring = string_value[i:i + k] distinct_characters = len(set(substring)) max_distinct = max(max_distinct, distinct_characters) return max_distinct"},{"question":"You are given a list of strings, and your task is to find the longest common suffix among them. If there is no common suffix, return an empty string. ``` longest_common_suffix([\\"running\\", \\"jogging\\", \\"walking\\"]) = \\"ing\\" => \'ing\' is the longest common suffix in all three words. longest_common_suffix([\\"apple\\", \\"banana\\", \\"cherry\\"]) = \\"\\" => There is no common suffix. longest_common_suffix([\\"simplification\\", \\"justification\\", \\"application\\"]) = \\"ication\\" => \'ication\' is the longest common suffix in all words. longest_common_suffix([\\"recurrence\\", \\"occurrence\\", \\"concurrence\\"]) = \\"currence\\" => \'currence\' is the longest common suffix in all words. ``` Write a function `longest_common_suffix` that takes a list of strings and returns the longest common suffix. def longest_common_suffix(words): # your code here","solution":"def longest_common_suffix(words): if not words: return \\"\\" # Reverse all the words to find the common prefix in reversed order reversed_words = [word[::-1] for word in words] # Initialize the longest common suffix reversed to the first word reversed common_suffix_reversed = reversed_words[0] # Compare character by character for i in range(1, len(reversed_words)): temp_suffix = \\"\\" for j in range(min(len(common_suffix_reversed), len(reversed_words[i]))): if common_suffix_reversed[j] == reversed_words[i][j]: temp_suffix += common_suffix_reversed[j] else: break common_suffix_reversed = temp_suffix if not common_suffix_reversed: break # Reverse back to get the common suffix return common_suffix_reversed[::-1]"},{"question":"Write a program that performs matrix rotation. Given a square matrix of integers, rotate the matrix 90 degrees clockwise. The following demonstrates an example of the matrix rotation: Input Matrix: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output Matrix: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Function Description Complete the function `rotateMatrix` in the editor below. The function should return a new 2D list representing the rotated matrix. `rotateMatrix` has the following parameter: - `matrix`: a 2D list of integers representing the square matrix to rotate. Input Format A single integer, `n`, the number of rows and columns in the matrix. The next `n` lines contain `n` space-separated integers each, representing the elements of the matrix. Constraints - 1 leq n leq 100 - `matrix[i][j]` is an integer Output Format Return a 2D list of integers representing the rotated matrix. Sample Input 0 3 1 2 3 4 5 6 7 8 9 Sample Output 0 7 4 1 8 5 2 9 6 3 Sample Input 1 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 1 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotateMatrix(matrix): Rotates a given square matrix 90 degrees clockwise. Parameters: matrix (list of list of int): 2D list representing the square matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) # Creating a new matrix with the same dimensions rotated_matrix = [[0 for _ in range(n)] for _ in range(n)] # Performing the rotation for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are working on a software project that involves processing lists of numbers. One of the tasks requires calculating the product of all unique elements in a given list. Write a function that takes a list of integers as input and returns the product of all unique elements. If the list is empty, the function should return 1. For example: ``` Input: [2, 3, 2, 4, 3] Output: 24 # Since unique elements are [2, 3, 4] and their product is 2 * 3 * 4 = 24 ``` You should employ the set data structure to identify unique elements in the list. The function should be implemented as follows: ```python def product_of_unique_elements(nums): # Your code here ``` Use this documentation link to know more about sets in Python: ```python https://docs.python.org/3/library/stdtypes.html#set ```","solution":"def product_of_unique_elements(nums): Returns the product of all unique elements in the list. If the list is empty, return 1. unique_elements = set(nums) product = 1 for element in unique_elements: product *= element return product"},{"question":"Sarah is working with a list of integers that represent daily temperatures. She needs to find out how many days must pass until a warmer temperature occurs for each day in the list. If there is no future day for which this is possible, put 0 in the respective place. Given an array of integers temperatures representing the daily temperatures, your task is to return an array answer such that answer[i] is the number of days you have to wait after the i-th day to get a warmer temperature. Example 1: Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: For the first day, the next day has a warmer temperature. For the second day, the next day has a warmer temperature. For the third day, the next warmer temperature occurs after 4 days. And so on. Example 2: Input: temperatures = [30, 40, 50, 60] Output: [1, 1, 1, 0] Explanation: Each day you have the warmer temperature the next day, except for the last day, where you have no warmer day in future. Example 3: Input: temperatures = [30, 60, 90] Output: [1, 1, 0] Explanation: After the first day, the warmer temperature comes the next day, and after the second day, it comes the third day. Your Task: You don\'t need to read input or print anything. Your task is to complete the function dailyTemperatures() which takes an array of integers temperatures as input parameters and returns an array of integers representing the number of days you have to wait to get a warmer temperature. Constraints: - 1 ≤ temperatures.length ≤ 10^5 - 30 ≤ temperatures[i] ≤ 100 Expected Time Complexity: O(N) Expected Auxiliary Space: O(N)","solution":"def dailyTemperatures(temperatures): Returns a list where each entry i corresponds to the number of days until a warmer temperature occurs for day i. n = len(temperatures) answer = [0] * n stack = [] # this will store indices of the temperatures array for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"There are several types of fruits in a basket, each type represented by a lowercase English letter. Given a string representing the basket\'s fruits, determine the minimum number of subarrays needed to group the identical fruits together. A subarray is a contiguous subsequence of the array. **Note:** Each subarray should only contain one type of fruit, and all the same type of fruits must be grouped together in at least one subarray. Write a function to determine the minimum number of subarrays required. The function should return an integer. -----Input----- - The input string represents the basket\'s fruits, where each character is a lowercase English letter. - The length of the string is denoted by N, where 1 ≤ N ≤ 1000. -----Output----- - Return an integer representing the minimum number of subarrays needed. -----Examples----- **Example 1:** Input: \\"aaabbbccc\\" Output: 3 **Example 2:** Input: \\"aabbcc\\" Output: 3 **Example 3:** Input: \\"abcabc\\" Output: 6 **Example 4:** Input: \\"aaaaa\\" Output: 1 **Explanation:** - In the first example, \\"aaabbbccc\\" can be divided into subarrays [\\"aaa\\", \\"bbb\\", \\"ccc\\"], thus requiring 3 subarrays. - In the second example, \\"aabbcc\\" can be divided into subarrays [\\"aa\\", \\"bb\\", \\"cc\\"], thus requiring 3 subarrays. - In the third example, each fruit type appears twice, creating a need for 6 subarrays [\\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"c\\"]. - In the fourth example, all fruits are the same, therefore only 1 subarray is needed. Write the function to solve the given problem using efficient algorithm techniques.","solution":"def min_subarrays_to_group_fruits(fruits): Function to determine the minimum number of subarrays needed to group the identical fruits together. Parameters: fruits (str): A string representing the basket\'s fruits, where each character is a lowercase English letter. Returns: int: The minimum number of subarrays needed. if not fruits: return 0 count = 1 for i in range(1, len(fruits)): if fruits[i] != fruits[i - 1]: count += 1 return count"},{"question":"A scientist has discovered a new type of number called a \\"fusion number\\". A positive integer is called a fusion number if it can be split exactly in half, and the sum of the digits in the first half is equal to the sum of the digits in the second half. Note that if the number has an odd number of digits, it cannot be a fusion number. Given a positive integer n, determine if n is a fusion number. If it is, print \\"Fusion\\", otherwise print \\"Not Fusion\\". -----Input----- The single line contains a positive integer n (1 ≤ n ≤ 10^9). -----Output----- If n is a fusion number, print \\"Fusion\\" (without quotes). Otherwise, print \\"Not Fusion\\" (without quotes). -----Examples----- Input 123231 Output Fusion Input 1232 Output Not Fusion Input 11112222 Output Not Fusion -----Note----- Sample 1: The number 123231 can be split into two halves: 123 and 231. The sum of digits in both halves is equal to 6. Sample 2: The number 1232 can be split into two halves: 12 and 32. The sum of digits in both halves is 3 and 5 respectively, which are not equal. Sample 3: The number 11112222 can be split into two halves: 1111 and 2222. The sum of digits in both halves is 4 and 8 respectively, which are not equal.","solution":"def is_fusion_number(n): str_n = str(n) length = len(str_n) # Check if the length is even if length % 2 != 0: return \\"Not Fusion\\" half = length // 2 first_half = str_n[:half] second_half = str_n[half:] sum_first_half = sum(int(digit) for digit in first_half) sum_second_half = sum(int(digit) for digit in second_half) if sum_first_half == sum_second_half: return \\"Fusion\\" else: return \\"Not Fusion\\""},{"question":"You are designing a scheduling system for a conference center that has multiple rooms and several events happening throughout the day. Each event has a specific start time, end time, and requires a specific room. The goal is to ensure that no two events overlap in the same room. Given the schedule of events for a day, write a program to check whether the schedule is valid (i.e., no two events overlap in the same room). Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of events. The next n lines each contain a string r, two integers s and e (1 ≤ s < e ≤ 10^9), where r is the room name, s is the start time, and e is the end time of the event. Output Print \\"YES\\" if the schedule is valid, otherwise print \\"NO\\". Examples Input 3 RoomA 1 5 RoomB 2 6 RoomA 5 10 Output YES Input 3 RoomA 1 5 RoomA 4 6 RoomB 3 8 Output NO","solution":"def is_schedule_valid(events): Returns \\"YES\\" if the schedule is valid, otherwise \\"NO\\". from collections import defaultdict # Dictionary to store events by room schedule = defaultdict(list) # Populate the schedule for event in events: room, start, end = event schedule[room].append((start, end)) # Check for overlaps in each room for room in schedule: # Sort the events by start time for this room schedule[room].sort() # Check for overlaps for i in range(1, len(schedule[room])): if schedule[room][i][0] < schedule[room][i-1][1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of sentences. Your task is to rearrange the words in each sentence in alphabetical order and return the modified sentences. Ensure that the order of the characters within each word remains unchanged, only the position of the words in the sentence should be modified. Input The input contains multiple sentences. Each sentence begins with a positive integer that indicates the number of words in the sentence, followed by the words themselves. The input ends with a line containing a single zero. Output For each sentence, output the sentence with words arranged in alphabetical order on a new line. Constraints 1 ≤ number of words in a sentence ≤ 100 Each word contains only lowercase alphabetical characters and has a maximum length of 20 characters. Example Input 5 hello world this is test 3 sorting words automatically 4 programming in a nutshell 0 Output hello is test this world automatically sorting words a in nutshell programming","solution":"def rearrange_sentences(input_lines): Rearranges the words in each sentence in alphabetical order and returns the modified sentences. result = [] for line in input_lines: # Check if the line starts with \'0\' if line == \\"0\\": break # Split the line into parts parts = line.split() # Get the number of words (first element) num_words = int(parts[0]) # Get the words words = parts[1:num_words + 1] # Sort the words alphabetically sorted_words = sorted(words) # Join the sorted words into a single string and add to the result list result.append(\' \'.join(sorted_words)) return result"},{"question":"You are given a tree with n nodes. Each edge in the tree has a weight associated with it. Your task is to determine the weight of the heaviest path between two nodes in the tree. A path in a tree is defined as a sequence of edges such that there is a unique simple path between any two nodes in the sequence. The weight of a path is the sum of the weights of the edges in that path. -----Input----- The first line contains an integer n (2 le n le 10^5) — the number of nodes in the tree. The next n-1 lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — indicating that there is an edge between nodes u and v with weight w. -----Output----- Output one integer — the weight of the heaviest path between two nodes in the tree. -----Example----- Input 5 1 2 3 1 3 2 2 4 4 2 5 1 Output 10 -----Note----- In the example, the heaviest path is 4 -> 2 -> 1 -> 3 with a total weight of 4 + 3 + 2 = 9.","solution":"from collections import defaultdict, deque def find_farthest_node(node_count, edges): def bfs(start_node): distances = [-1] * (node_count + 1) distances[start_node] = 0 queue = deque([start_node]) farthest_node = start_node max_distance = 0 while queue: current_node = queue.popleft() current_distance = distances[current_node] for neighbor, weight in tree[current_node]: if distances[neighbor] == -1: distances[neighbor] = current_distance + weight queue.append(neighbor) if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance # Step 1: Build the tree tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # Step 2: Perform the first BFS from any arbitrary node, e.g., node 1 farthest_node, _ = bfs(1) # Step 3: Perform the second BFS from the farthest node found _, max_distance = bfs(farthest_node) return max_distance"},{"question":"A new amusement park is opening and features a roller coaster that goes through several tunnels. The tunnels are connected by straight tracks and can be represented as segments on a 1-dimensional coordinate system. Each tunnel has a certain capacity that indicates the maximum number of people that can be inside it at any point in time. The amusement park management wants to know the minimum number of people the roller coaster can have to be able to pass through all tunnels without exceeding their capacities. Input The first line contains a single integer n (1 ≤ n ≤ 2·105) — the number of tunnels. The next n lines contain two integers starti and endi (1 ≤ starti < endi ≤ 109) and an integer capacityi (1 ≤ capacityi ≤ 106) — the starting and ending coordinates of each tunnel and its capacity. Output Output a single integer — the minimum number of people required for the roller coaster to pass through all tunnels respecting their capacities. Examples Input 3 1 5 3 4 8 2 6 9 4 Output 4 Input 2 2 7 1 5 10 2 Output 2","solution":"def minimum_people_to_ride(n, tunnels): Returns the minimum number of people required for the roller coaster to pass through all tunnels without exceeding their capacities. Parameters: n (int): The number of tunnels. tunnels (list of tuples): Each tuple contains three integers (start, end, capacity) representing the start and end coordinates of the tunnel and its capacity respectively. Returns: int: The minimum number of people required. # Initialize maximum capacity required to pass through the tunnels as zero max_capacity_required = 0 # Iterate over each tunnel to find the maximum capacity required for start, end, capacity in tunnels: # The maximum capacity needed is the highest capacity of any tunnel max_capacity_required = max(max_capacity_required, capacity) return max_capacity_required"},{"question":"You are given an array of integers where each integer represents the height of a tree. A tree is considered \\"visible\\" from the left if there is no taller or equally tall tree to its left. Similarly, a tree is considered \\"visible\\" from the right if there is no taller or equally tall tree to its right. Your task is to determine the number of trees visible from both left and right for each given array of heights. For example, in the array [4, 2, 3, 6, 1, 9, 5]: - From the left, the visible trees are [4, 6, 9]. - From the right, the visible trees are [9, 6, 5]. Thus, the trees visible from both sides are [6, 9]. You need to find the count of such trees for each test case provided. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) – the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 10^5) – the number of trees in the array. The following line contains n space-separated integers h_i (1 leq h_i leq 10^9) – the heights of the trees. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output a single integer – the number of trees visible from both left and right. -----Examples----- Input: 3 5 4 2 3 6 1 6 1 2 2 3 4 2 3 5 4 3 Output: 1 2 1 -----Note----- In the first test case: - The visible trees from the left are [4, 6]. - The visible trees from the right are [6]. - Thus, the number of trees visible from both sides is 1. In the second test case: - The visible trees from the left are [1, 2, 3, 4]. - The visible trees from the right are [4, 2]. - Thus, the number of trees visible from both sides is 2. In the third test case: - The visible trees from the left are [5]. - The visible trees from the right are [5]. - Thus, the number of trees visible from both sides is 1.","solution":"def trees_visible_both_sides(t, test_cases): results = [] for case in test_cases: n, heights = case visible_from_left = [] visible_from_right = [] max_height_left = -1 for h in heights: if h > max_height_left: visible_from_left.append(h) max_height_left = h max_height_right = -1 for h in reversed(heights): if h > max_height_right: visible_from_right.append(h) max_height_right = h visible_from_right = visible_from_right[::-1] visible_from_both = set(visible_from_left) & set(visible_from_right) results.append(len(visible_from_both)) return results"},{"question":"Write a function that determines whether a sequence of numbers can form an arithmetic sequence. An arithmetic sequence is defined as a sequence of numbers in which the difference between any two consecutive elements is the same. Input The input consists of a single list of integers nums (2 ≤ len(nums) ≤ 10^5, -10^9 ≤ nums[i] ≤ 10^9). Output The function should return a boolean value. It should return True if the input sequence can form an arithmetic sequence, otherwise it should return False. Examples Input [3, 5, 1] Output True Input [1, 2, 4] Output False","solution":"def can_form_arithmetic_sequence(nums): Determines if a sequence of numbers can form an arithmetic sequence. Args: nums (list): A list of integers. Returns: bool: True if the input sequence can form an arithmetic sequence, else False. if len(nums) <= 1: return True nums.sort() diff = nums[1] - nums[0] for i in range(2, len(nums)): if nums[i] - nums[i-1] != diff: return False return True"},{"question":"Sam is a computer science student who loves to find patterns in strings. He recently discovered a particular type of substring called \\"Balanced Substring\\". A balanced substring is defined as a substring that contains an equal number of two specific characters. Sam is excited about his discovery and wants to write a code to find such substrings. Given a string s consisting of only two distinct characters \'x\' and \'y\', help Sam by writing a function that finds the longest balanced substring within the given string. -----Input----- The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5), which contains only the characters \'x\' and \'y\'. -----Output----- Print the length of the longest balanced substring. If no balanced substring exists, print 0. -----Examples----- Input xyxyxxxyy Output 8 Input xxyyy Output 4 Input xxxyyyxxx Output 6","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring containing an equal number of \'x\' and \'y\'. max_length = 0 balance_counter = {0: -1} balance = 0 for i, char in enumerate(s): if char == \'x\': balance -= 1 elif char == \'y\': balance += 1 if balance in balance_counter: max_length = max(max_length, i - balance_counter[balance]) else: balance_counter[balance] = i return max_length"},{"question":"In a given array, find the smallest possible sum of contiguous subarray whose product is a perfect square. -----Input:----- - The first line contains an integer T denoting the number of test cases. - The first line of each test case contains a single integer N denoting the number of elements in the array. - The next line contains N space-separated integers denoting the elements of the array. -----Output:----- Print a single line for each test case, containing the smallest sum of the contiguous subarray whose product is a perfect square, or -1 if no such subarray exists. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 2 times 10^3 - 1 leq Ai leq 10^4 -----Sample Input:----- 2 5 2 4 3 9 6 4 1 7 1 2 -----Sample Output:----- 6 1 -----EXPLANATION:----- For the first test case, the subarray [3, 9] has the product 27 which is not a perfect square, but the subarray [9] has the product 9 which is a perfect square and its sum is 9. Similarly, [4] is alone a perfect square and sums to 4. So the smallest sum for subarrays whose products are perfect squares are the subarrays [4] and [9]. The smallest sum among them is 4. For the second test case, [1] itself is a perfect square and its sum is the smallest.","solution":"def is_perfect_square(x): Helper function to determine if a number is a perfect square. return int(x ** 0.5) ** 2 == x def smallest_sum_perfect_square_subarray(arr): Function to find the smallest possible sum of a contiguous subarray whose product is a perfect square. n = len(arr) min_sum = float(\'inf\') for i in range(n): product = 1 for j in range(i, n): product *= arr[j] if is_perfect_square(product): current_sum = sum(arr[i:j+1]) if current_sum < min_sum: min_sum = current_sum return min_sum if min_sum != float(\'inf\') else -1 def process_test_cases(test_cases): Function to process multiple test cases and return results. results = [] for arr in test_cases: results.append(smallest_sum_perfect_square_subarray(arr)) return results"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation as many times as you like: select two consecutive characters in the string and if they are different, remove them from the string. For example, if s=abccba, you can perform one of the following operations on it (not all possible options are listed below): - Remove the characters \'a\' and \'b\', resulting in the string s=ccba - Remove the characters \'c\' and \'b\', resulting in the string s=acca - Remove the characters \'c\' and \'c\', which is not allowed as the characters are the same. Determine if it is possible to remove all characters from the string by applying a certain number of operations. -----Input----- The first line contains one positive integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case consists of a single line containing the string s (1 le |s| le 100000). The total length of all strings does not exceed 100000. -----Output----- For each test case, output on a separate line: YES, if it is possible to remove all characters from the string by applying a certain number of operations. NO, otherwise. The letters in the words YES and NO can be outputed in any case. -----Example----- Input 4 abccba abcba aabb abab Output YES NO YES YES","solution":"def is_removable(s): Determines if it is possible to remove all characters from the string by applying the allowed operations. stack = [] for char in s: if stack and stack[-1] != char: stack.pop() else: stack.append(char) return len(stack) == 0 def process_test_cases(t, test_cases): Process each test case and return the results. results = [] for s in test_cases: if is_removable(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `detect_language(lst)` that takes in a list of words and determines the predominant language among the words. The languages to be considered are English and French. The function will return \\"English\\" if there are more English words in the list than French words and \\"French\\" otherwise. In case of a tie, return \\"Tie\\". You will be provided with two lists, one containing common English words and the other containing common French words. These lists are preloaded and can be accessed as `english_words` and `french_words` respectively. ```python english_words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"house\\", \\"car\\", \\"book\\"] french_words = [\\"pomme\\", \\"banane\\", \\"orange\\", \\"maison\\", \\"voiture\\", \\"livre\\"] ``` Your implementation should loop through the list of input words and count how many words belong to each language. Assume that words are case-sensitive and only the exact matches (words in the `english_words` and `french_words`) should be considered. Example: Input [\'apple\', \'banane\', \'orange\', \'book\', \'maison\'] Output \'Tie\' Input [\'apple\', \'orange\', \'house\', \'book\', \'car\'] Output \'English\' Input [\'pomme\', \'banane\', \'voiture\', \'livre\', \'maison\'] Output \'French\'","solution":"def detect_language(lst): english_words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"house\\", \\"car\\", \\"book\\"] french_words = [\\"pomme\\", \\"banane\\", \\"orange\\", \\"maison\\", \\"voiture\\", \\"livre\\"] english_count = 0 french_count = 0 for word in lst: if word in english_words: english_count += 1 if word in french_words: french_count += 1 if english_count > french_count: return \\"English\\" elif french_count > english_count: return \\"French\\" else: return \\"Tie\\""},{"question":"Alex is an enthusiastic botanist and has recently discovered a new type of plant species. To study these plants more effectively, he decided to group them based on specific attributes. Each plant is identified by a unique integer ID and has attributes measured by three numbers: height, width, and growth rate. Alex wants to group the plants such that each group consists of plants that share at least one attribute that matches with another plant in the group. It\'s your task to determine the minimum number of groups required to cover all plants such that each plant belongs to exactly one group. Problem There are N plants, each identified by a unique ID from 1 to N. Each plant has three attributes: height, width, and growth rate. You need to determine how many groups of plants Alex needs to form such that each group contains plants with at least one attribute in common. Constraints The input satisfies the following conditions: * 1 leq N leq 100,000 * 1 leq text{height}_i, text{width}_i, text{growth_rate}_i leq 10^9 * All inputs are integers Input The input is given in the following format: N text{height}_1 text{width}_1 text{growth_rate}_1 text{height}_2 text{width}_2 text{growth_rate}_2 ... text{height}_N text{width}_N text{growth_rate}_N Output Output a single integer representing the minimum number of groups needed. Examples Input 3 10 20 30 10 25 35 40 20 45 Output 1 Input 4 10 20 30 35 25 40 50 60 70 80 90 100 Output 4 Input 5 1 2 3 4 2 5 6 7 2 1 8 9 10 2 11 Output 2","solution":"def find_disjoint_groups(plants): from collections import defaultdict N = len(plants) # Create dictionaries to store plants by each attribute height_dict = defaultdict(list) width_dict = defaultdict(list) growth_rate_dict = defaultdict(list) # Union-Find utility functions parent = list(range(N)) rank = [1]*N def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 for i, (h, w, g) in enumerate(plants): height_dict[h].append(i) width_dict[w].append(i) growth_rate_dict[g].append(i) # Union operation on all plants that share the same height for key in height_dict: for i in range(1, len(height_dict[key])): union(height_dict[key][0], height_dict[key][i]) # Union operation on all plants that share the same width for key in width_dict: for i in range(1, len(width_dict[key])): union(width_dict[key][0], width_dict[key][i]) # Union operation on all plants that share the same growth rate for key in growth_rate_dict: for i in range(1, len(growth_rate_dict[key])): union(growth_rate_dict[key][0], growth_rate_dict[key][i]) # Count disjoint groups unique_groups = len(set(find(x) for x in range(N))) return unique_groups"},{"question":"Given an array of integers where some elements appear twice and others appear once, write a function to find all the elements that appear twice in the array. Example 1: Input: [4,3,2,7,8,2,3,1] Output: [2,3] Example 2: Input: [1,1,2] Output: [1] Example 3: Input: [1] Output: [] Note: - You must write an algorithm that runs in O(n) time complexity. - You may not use extra space for another array.","solution":"def find_duplicates(nums): Finds all elements that appear twice in the array. :param nums: List[int] :return: List[int] duplicates = [] for num in nums: index = abs(num) - 1 if nums[index] < 0: duplicates.append(index + 1) else: nums[index] = -nums[index] return duplicates"},{"question":"You are tasked with implementing a function that takes an input string and returns the most frequent first character of its words. If the string contains multiple words with the same frequency for their first characters, return the character that appears first in the input string. Ignore punctuation and case, and consider only letters for this task. # Instructions - Write a function `most_frequent_first_char(sentence: str) -> str`. - The function should accept a string `sentence` and return the most frequent first character of its words. - The comparison should be case-insensitive, and punctuation marks should be ignored. # Examples ```python assert most_frequent_first_char(\\"Hello world! Have a happy day.\\") == \'h\' assert most_frequent_first_char(\\"This is a sentence.\\") == \'t\' assert most_frequent_first_char(\\"Banana apple banana\\") == \'b\' assert most_frequent_first_char(\\"I love python programming.\\") == \'I\' ``` **Constraints**: - The input string will contain only printable ASCII characters. - The input string will not be empty. # Notes - You can assume words are separated by spaces, and punctuation marks are ignored. - Treat uppercase and lowercase versions of the same character as identical. - The most frequent first character should be returned as it originally appears in the input string.","solution":"def most_frequent_first_char(sentence: str) -> str: import string from collections import Counter # Helper function to clean words by removing punctuation and converting to lower case def clean_word(word): return \'\'.join(char for char in word if char.isalnum()).lower() # Split the sentence into words and clean them words = sentence.split() cleaned_words = [clean_word(word) for word in words] # Count the frequency of first characters in the cleaned words first_chars = [word[0] for word in cleaned_words if word] frequency = Counter(first_chars) # Find the most frequent first character if not frequency: return \'\' most_common_char = frequency.most_common(1)[0][0] # Get the most common char in lowercase # Return the first occurrence of this most common character from the original sentence for word in words: if clean_word(word)[0] == most_common_char: return word[0] # Return the most common character as it appears originally return \'\' # Default return (theoretically won\'t reach here)"},{"question":"Implement a data structure that supports adding a new number and finding the median of all numbers added at any point in constant time. - The addNumber method should add a number to the data structure. - The findMedian method should return the median of all numbers currently in the data structure. For example: ```python data_structure = DataStructure() data_structure.addNumber(1) data_structure.findMedian() # Returns 1 data_structure.addNumber(2) data_structure.findMedian() # Returns 1.5 data_structure.addNumber(3) data_structure.findMedian() # Returns 2 ``` Constraints: - All methods will be called at most `5 * 10^4` times. - All numbers will be in the range `[-10^5, 10^5]`.","solution":"import heapq class DataStructure: def __init__(self): self.lower_half = [] # Max heap (invert values on push) self.upper_half = [] # Min heap def addNumber(self, num): # Add to max heap (inverted) heapq.heappush(self.lower_half, -num) # Balance heaps by moving the largest of lower_half to upper_half if self.lower_half and self.upper_half and -self.lower_half[0] > self.upper_half[0]: heapq.heappush(self.upper_half, -heapq.heappop(self.lower_half)) # Balance sizes if len(self.lower_half) > len(self.upper_half) + 1: heapq.heappush(self.upper_half, -heapq.heappop(self.lower_half)) elif len(self.upper_half) > len(self.lower_half): heapq.heappush(self.lower_half, -heapq.heappop(self.upper_half)) def findMedian(self): if len(self.lower_half) > len(self.upper_half): return -self.lower_half[0] return (-self.lower_half[0] + self.upper_half[0]) / 2.0"},{"question":"Given an array of integers, we want to find all possible permutations of this array. A permutation of an array is a rearrangement of its elements into a new sequence. Input The first line of input contains an integer n (1 ≤ n ≤ 7) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ a_i ≤ 10^3) — the elements of the array. Output Print all the possible permutations of the given array. Each permutation should be printed on a new line and the elements in each permutation should be separated by a space. The permutations can be printed in any order. Examples Input 3 1 2 3 Output 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 Input 2 4 5 Output 4 5 5 4 Note In the first example, the given array contains 3 elements, which results in 3! = 6 permutations. In the second example, since the array contains only 2 elements, there are 2! = 2 possible permutations.","solution":"from itertools import permutations def generate_permutations(lst): Generates all possible permutations of the given list. all_permutations = list(permutations(lst)) return all_permutations def format_permutations(lst): Returns all permutations in a formatted output (list of strings). all_permutations = generate_permutations(lst) formatted_output = [\' \'.join(map(str, perm)) for perm in all_permutations] return formatted_output"},{"question":"A social media platform allows users to post messages in which they can include hashtags to categorize their posts. The platform wants to analyze the popularity of these hashtags to better understand trending topics. You are tasked with implementing a feature that processes a stream of posts and keeps track of the frequency of each hashtag. The platform will ask you to report the most popular hashtag within a given time frame multiple times. The actions performed on the social media platform are: - Posting a message with specified hashtags. - Querying for the most popular hashtag within a previous number of minutes. Each action is detailed as follows: - Post a message with one or more hashtags. Each hashtag is a string prefixed with a \\"#\\" symbol. - Query for the most popular hashtag within a specified number of minutes from the current time. Your task is to implement a program that processes these actions efficiently. INPUT - The first line contains an integer N, the number of actions. - The next N lines contain the actions. Each action can either be: - \\"P timestamp message\\": a post action where \\"timestamp\\" is an integer denoting the time of the post (in minutes from the start) and \\"message\\" is a string containing the message which may include hashtags. - \\"Q current_time duration\\": a query action where \\"current_time\\" is an integer denoting the current time (in minutes from the start) and \\"duration\\" is an integer denoting the number of previous minutes to consider for the query. OUTPUT For each query, output the most popular hashtag in the specified time frame. If there is a tie, output the lexicographically smallest hashtag. If no hashtags are found in the time frame, output \\"None\\". CONSTRAINTS - 1 ≤ N ≤ 100,000 - 0 ≤ timestamp, current_time ≤ 10^6 - 0 ≤ duration ≤ current_time - Each message string will not exceed 200 characters. SAMPLE INPUT 7 P 1 This is the first post #hashtag1 P 3 Another post with #hashtag2 #hashtag3 P 5 More #hashtag1 in this post Q 6 4 P 8 This is a post without hashtag Q 9 7 Q 9 1 SAMPLE OUTPUT #hashtag1 #hashtag1 None Note: - In the first query, the most popular hashtag from time 2 to time 6 is \\"#hashtag1\\". - In the second query, the most popular hashtag from time 2 to time 9 is \\"#hashtag1\\". - In the third query, no hashtags are posted within the minute before time 9.","solution":"from collections import defaultdict, deque import heapq import re class SocialMediaPlatform: def __init__(self): self.hashtags = defaultdict(int) self.posts = deque() def post_message(self, timestamp, message): # Extract hashtags from the message hashtags_in_message = re.findall(r\\"#w+\\", message) # Add the hashtags to the global counter for hashtag in hashtags_in_message: self.hashtags[hashtag] += 1 # Append the post to the deque self.posts.append((timestamp, hashtags_in_message)) def query_popular_hashtag(self, current_time, duration): start_time = current_time - duration # Remove old posts that are no longer in the time window while self.posts and self.posts[0][0] < start_time: post_timestamp, post_hashtags = self.posts.popleft() for hashtag in post_hashtags: self.hashtags[hashtag] -= 1 if self.hashtags[hashtag] == 0: del self.hashtags[hashtag] # If no hashtags are left, return \\"None\\" if not self.hashtags: return \\"None\\" # Find the most popular hashtags max_frequency = max(self.hashtags.values()) candidates = [hashtag for hashtag, count in self.hashtags.items() if count == max_frequency] # Return the lexicographically smallest hashtag return min(candidates) def process_actions(actions): platform = SocialMediaPlatform() results = [] for action in actions: parts = action.split() if parts[0] == \\"P\\": timestamp = int(parts[1]) message = \\" \\".join(parts[2:]) platform.post_message(timestamp, message) elif parts[0] == \\"Q\\": current_time = int(parts[1]) duration = int(parts[2]) result = platform.query_popular_hashtag(current_time, duration) results.append(result) return results"},{"question":"Given a list of integers, write a function that finds the second smallest number in the list. If there is no such number, the function should return None. ```python def second_smallest(numbers): # Examples: # second_smallest([4, 1, 3, 2]) should return 2 # second_smallest([1, 1, 1]) should return None # second_smallest([]) should return None pass ``` Test cases: 1. `second_smallest([4, 1, 3, 2])` should return `2` 2. `second_smallest([1, 1, 1])` should return `None` 3. `second_smallest([])` should return `None` 4. `second_smallest([10, 5, 3, 4, 7])` should return `4` 5. `second_smallest([7, 7, 6, 6, 5, 5])` should return `6`","solution":"def second_smallest(numbers): Finds the second smallest number in the list. If there is no such number, returns None. if len(numbers) < 2: return None smallest = second = float(\'inf\') for num in numbers: if num < smallest: smallest, second = num, smallest elif smallest < num < second: second = num return second if second < float(\'inf\') else None"},{"question":"A city has a circular road network consisting of N junctions connected by bidirectional roads. Each junction is connected to exactly two other junctions, forming a loop. A delivery company wants to establish a central warehouse at one of the junctions and needs to fulfill the following requirement: For any two junctions A and B, the shortest path distance (in terms of number of junctions traveled) from A to B should not be greater than a given threshold D. Given the number of junctions and the threshold distance, determine the number of possible junctions where the central warehouse can be established to satisfy the requirement. You are to write a program that determines the number of valid central warehouse locations. ------ Input ------ The first line contains an integer T, the number of test cases. The description of T test cases follows. For each test case, there is a single line containing two space-separated integers N and D, representing the number of junctions and the maximum allowable distance for the shortest path, respectively. ------ Output ------ For each test case, output a single line containing the number of valid junctions that can be chosen as the central warehouse. ------ Constraints ------ 1 ≤ T ≤ 10^3 3 ≤ N ≤ 10^5 1 ≤ D ≤ N-1 ------ Sample Input 1 ------ 3 5 2 6 2 7 3 ------ Sample Output 1 ------ 5 0 7 ------ Explanation 1 ------ In the first test case, with 5 junctions and a maximum distance of 2, every junction can be a valid central warehouse, as the furthest distance between any two junctions is within the threshold. In the second test case, with 6 junctions and a maximum distance of 2, no junction meets the requirement, since the maximum distance for 6 junctions is 3. In the third test case, with 7 junctions and a maximum distance of 3, every junction qualifies as a valid central warehouse, as the maximum distance of 3 is allowed.","solution":"def valid_warehouse_locations(T, test_cases): results = [] for N, D in test_cases: # The maximum possible distance in the worst case is N//2 if D >= N // 2: results.append(N) else: results.append(0) return results"},{"question":"Write a function that takes a string and returns the length of the longest substring without repeating characters. For example, for the string `abcabcbb`, the longest substring without repeating characters is `abc`, which has a length of `3`. For the string `bbbbb`, the longest substring without repeating characters is `b`, with a length of `1`. You can assume that the input string consists of lowercase letters only.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Aditi is fascinated by Binary Search Trees (BST) and loves working on them. One day, her friend Vikram challenged her with an interesting problem. He gave her a list of integers and asked her to construct a BST out of it. Once the BST is constructed, she needs to find the k-th smallest element in the BST. Can you help Aditi solve this problem? Given a list of integers, construct a Binary Search Tree and find the k-th smallest element in the BST. **Input:** - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and K, the number of elements in the list and the position of the k-th smallest element. - The second line contains N space-separated integers representing the elements of the list. **Output:** - For each test case, output the k-th smallest element in the BST. **Constraints:** - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N - -10^4 ≤ List Elements ≤ 10^4 **Sample Input:** ``` 2 5 3 5 3 8 2 4 7 4 10 5 1 7 40 50 8 ``` **Sample Output:** ``` 4 8 ``` **Explanation:** For the first test case: - BST constructed from [5, 3, 8, 2, 4] will be: ``` 5 / 3 8 / 2 4 ``` - The 3rd smallest element is 4. For the second test case: - BST constructed from [10, 5, 1, 7, 40, 50, 8] will be: ``` 10 / 5 40 / 1 7 50 8 ``` - The 4th smallest element is 8.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) else: if root.val < key: root.right = insert(root.right, key) else: root.left = insert(root.left, key) return root def inorder_traversal(root, result): if root: inorder_traversal(root.left, result) result.append(root.val) inorder_traversal(root.right, result) return result def kth_smallest_element(root, k): result = inorder_traversal(root, []) return result[k - 1] def find_kth_smallest_element(test_cases): results = [] for case in test_cases: N, K, nums = case root = None for num in nums: root = insert(root, num) results.append(kth_smallest_element(root, K)) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].split()) nums = list(map(int, lines[index + 1].split())) test_cases.append((N, K, nums)) index += 2 results = find_kth_smallest_element(test_cases) return results"},{"question":"Write a function to find the n-th Ugly Number. Ugly numbers are positive numbers whose only prime factors are 2, 3 or 5. The sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, ... shows the first 11 ugly numbers. By convention, 1 is included as the first ugly number. Example 1: Input: n = 10 Output: 12 Explanation: The 10th ugly number is 12. Example 2: Input: n = 15 Output: 24 Explanation: The 15th ugly number is 24. Your Task: You only need to complete the function getNthUglyNo() that takes n as a parameter and returns the n-th ugly number. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ n ≤ 10^4","solution":"def getNthUglyNo(n): Returns the n-th Ugly Number. Ugly numbers are positive numbers whose only prime factors are 2, 3 or 5. ugly_numbers = [0] * n ugly_numbers[0] = 1 i2, i3, i5 = 0, 0, 0 next_multiple_of_2 = 2 next_multiple_of_3 = 3 next_multiple_of_5 = 5 for i in range(1, n): next_ugly = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5) ugly_numbers[i] = next_ugly if next_ugly == next_multiple_of_2: i2 += 1 next_multiple_of_2 = ugly_numbers[i2] * 2 if next_ugly == next_multiple_of_3: i3 += 1 next_multiple_of_3 = ugly_numbers[i3] * 3 if next_ugly == next_multiple_of_5: i5 += 1 next_multiple_of_5 = ugly_numbers[i5] * 5 return ugly_numbers[-1]"},{"question":"Develop a class that implements the Least Recently Used (LRU) Cache system which evicts the least recently used items first. A cache is a data structure that stores a limited number of items and discards the least recently used items when it gets full. Implement the LRUCache class: - `LRUCache(int capacity)`: Initializes the cache with a positive size capacity. - `int get(int key)`: Returns the value of the key if the key exists in the cache. Otherwise, returns -1. - `void put(int key, int value)`: Updates the value of the key if the key exists. Otherwise, adds the key-value pair to the cache. If the cache reaches its capacity, it will invalidate the least recently used item before inserting the new one. The algorithm must perform both `get` and `put` operations in O(1) average time complexity. Example: ``` LRUCache lruCache = new LRUCache(2); lruCache.put(1, 1); // Cache is {1=1} lruCache.put(2, 2); // Cache is {1=1, 2=2} lruCache.get(1); // Returns 1 (Cache is {2=2, 1=1}) lruCache.put(3, 3); // Evicts key 2 and cache is {1=1, 3=3} lruCache.get(2); // Returns -1 (not found) lruCache.put(4, 4); // Evicts key 1 and cache is {4=4, 3=3} lruCache.get(1); // Returns -1 (not found) lruCache.get(3); // Returns 3 lruCache.get(4); // Returns 4 ``` Constraints: - 1 <= capacity <= 3000 - 0 <= key, value <= 10000 - At most 3 * 10^4 calls will be made to `get` and `put`.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 # Move the accessed key to the end to mark it as recently used value = self.cache.pop(key) self.cache[key] = value return value def put(self, key: int, value: int) -> None: if key in self.cache: # Remove the old self.cache.pop(key) elif len(self.cache) >= self.capacity: # Remove the first item in the ordered dictionary (least recently used) self.cache.popitem(last=False) # Add the new key and value self.cache[key] = value"},{"question":"In a software development contest, there was a problem of forming the largest number by rearranging a given set of non-negative integers. However, there was a constraint: a new rule was introduced that the final number should not contain any leading zeros, except for the number zero itself. Given a list of non-negative integers, your task is to write a function that arranges them in such a way that they form the largest possible number following the constraint mentioned above. INPUT: - The first line of input contains an integer N, the number of integers. - The second line contains N non-negative integers separated by spaces. OUTPUT: - Print the largest possible number that can be formed. SAMPLE INPUT: 5 10 2 9 39 17 SAMPLE OUTPUT: 93921710","solution":"from functools import cmp_to_key def largest_number(nums): Forms the largest possible number from the input list of non-negative integers. def compare(x, y): # Custom comparator to decide the order based on concatenated result if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert all numbers to strings for easy comparison str_nums = list(map(str, nums)) # Sort the numbers based on the custom comparator str_nums.sort(key=cmp_to_key(compare)) # Combine all numbers to form the largest number largest_num = \'\'.join(str_nums) # Edge case: if the largest number is \'0\' (e.g., all 0s in the input) if largest_num[0] == \'0\': return \'0\' return largest_num def form_largest_number(n, num_list): return largest_number(num_list)"},{"question":"A school wants to form pairs of students for a project. The number of students is always even. Each student can once only be paired with another student. Given the number of students, your task is to determine how many ways the teacher can form pairs of students such that one specific student, Student 1, is always included in a pair first. # Input - The first line of the input contains an integer T (T ≤ 1000) denoting the number of test cases. - The next T lines each contain an integer N (2 ≤ N ≤ 1000, N is even) representing the number of students. # Output For each test case, output a single integer representing the number of ways to form pairs such that Student 1 is always included in the first pair. # Sample Input 1 3 2 4 6 # Sample Output 1 1 3 15 # Explanation For the first case, with 2 students (1 way): - (1 pair with 2) For the second case, with 4 students (3 ways): - (1 pair with 2), (3 pair with 4) - (1 pair with 3), (2 pair with 4) - (1 pair with 4), (2 pair with 3) For the third case, with 6 students (15 ways): - (1 pair with 2), pairs of remaining 4 students can be formed in 5 ways (since 2nd can pair with any of remaining 5 students, then remaining 4 students can be paired in 4!/2!2! ways) - (1 pair with 3), pairs of remaining 4 students can be formed in 5 ways - (1 pair with 4), pairs of remaining 4 students can be formed in 5 ways - (1 pair with 5), pairs of remaining 4 students can be formed in 5 ways - (1 pair with 6), pairs of remaining 4 students can be formed in 5 ways Each test case output is determined by (N-1) combinations where N is the total number of students.","solution":"import math def count_ways_to_form_pairs(N): Count the number of ways to form pairs such that Student 1 is always included in the first pair. # We choose the first student to pair with as (N-1) options first_pair_ways = N - 1 # The remaining students can be paired up (N-2)/2 ways remaining_pairs_ways = math.factorial((N - 2)) // (math.factorial((N - 2) // 2) * 2**((N - 2) // 2)) return first_pair_ways * remaining_pairs_ways def solve(T, cases): results = [] for N in cases: results.append(count_ways_to_form_pairs(N)) return results"},{"question":"Given a series of numbers that follow a specific pattern: 1, 8, 27, 64, ..., and starts from N = 1, find the pattern and output the N\'th value of the above series. Example 1: Input: N = 1 Output: 1 Explanation: 1 is the first term of the series. Example 2: Input: N = 3 Output: 27 Explanation: 27 is the third term of the series. Your Task: You don\'t need to read input or print anything. Your task is to complete the function cubeSeries() which takes an integer N as input parameter and returns the N\'th term of the series. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 100","solution":"def cubeSeries(N): This function returns the N\'th term of the series where the N\'th term is the cube of N. return N**3"},{"question":"Create a function that takes an array of two positive integers and returns the sum of the digits of both numbers after concatenating them together. If either of the elements in the array is not a positive integer, return \\"invalid array\\". For example: ```python concat_and_sum_digits([123, 456]) => 21 # because the concatenated number is 123456 and 1+2+3+4+5+6 = 21 concat_and_sum_digits([98, 76]) => 30 # because the concatenated number is 9876 and 9+8+7+6 = 30 concat_and_sum_digits([5, 5]) => 10 # because the concatenated number is 55 and 5+5 = 10 concat_and_sum_digits([123, \'abc\']) => \\"invalid array\\" # non-numeric element concat_and_sum_digits([-123, 456]) => \\"invalid array\\" # negative number Write a function named `concat_and_sum_digits`.","solution":"def concat_and_sum_digits(arr): Concatenates two positive integers in the array and returns the sum of their digits. If any element in the array is not a positive integer, returns \\"invalid array\\". # Check if the array contains exactly two elements if len(arr) != 2: return \\"invalid array\\" # Check if both elements are positive integers if not all(isinstance(x, int) and x > 0 for x in arr): return \\"invalid array\\" # Concatenate the two numbers into one string concatenated_number = \'\'.join(map(str, arr)) # Calculate the sum of the digits digit_sum = sum(int(digit) for digit in concatenated_number) return digit_sum"},{"question":"You are tasked with developing software for a delivery service. Part of this software needs a function `is_delivery_possible()` that determines whether a delivery is possible based on the current time. The software has a list of preferred delivery time windows for each weekday stored as dictionary. The dictionary keys are the days of the week (strings) and the values are lists of tuples, where each tuple represents a time range (start, end) in 24-hour format (HH:MM). Your function should take the day of the week and the current time, and return `True` if the current time falls within any of the given preferred delivery time windows for that day, otherwise return `False`. ```python preferred_delivery_times = { \\"Monday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Tuesday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Wednesday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Thursday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Friday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Saturday\\": [(\\"10:00\\", \\"13:00\\")], \\"Sunday\\": [] } def is_delivery_possible(day, time): # Your code here ``` Example usage: ```python >>> is_delivery_possible(\\"Monday\\", \\"10:30\\") True >>> is_delivery_possible(\\"Sunday\\", \\"13:00\\") False >>> is_delivery_possible(\\"Saturday\\", \\"09:30\\") False ```","solution":"preferred_delivery_times = { \\"Monday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Tuesday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Wednesday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Thursday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Friday\\": [(\\"09:00\\", \\"12:00\\"), (\\"14:00\\", \\"18:00\\")], \\"Saturday\\": [(\\"10:00\\", \\"13:00\\")], \\"Sunday\\": [] } def is_delivery_possible(day, time): Returns True if delivery is possible at the given time on the given day based on the preferred delivery time windows; otherwise False. if day not in preferred_delivery_times: return False # Invalid day for start, end in preferred_delivery_times[day]: if start <= time <= end: return True return False"},{"question":"Given an array of integers `nums` where each integer appears exactly three times except for one integer, which appears exactly once. Find the integer that appears only once. You must implement a solution with a linear runtime complexity and use only constant extra space. Example 1: Input: nums = [2,2,3,2] Output: 3 Example 2: Input: nums = [0,1,0,1,0,1,99] Output: 99 Constraints: - 1 <= nums.length <= 3 * 10^4 - -2^31 <= nums[i] <= 2^31 - 1 - Each element in nums appears exactly three times except for one element which appears once. Hints: - Consider using bit manipulation. - How would you solve the problem with an O(n) time complexity and O(1) space complexity?","solution":"def single_number(nums): This function finds the element that appears only once in an array where every other element appears exactly three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"A company has designed a game where a player navigates through a grid. The grid is represented by an `N x M` matrix, where each cell `(i, j)` contains either `.` (an empty cell) or `#` (an obstacle). The player starts at the top-left corner of the grid `(1, 1)` and aims to reach the bottom-right corner `(N, M)`. The player can move in four directions: up, down, left, and right. However, the player can only move to a cell that is within the boundaries of the grid and contains a `.`. You are given the grid and must determine the minimum number of moves required for the player to reach the bottom-right corner. If it is not possible for the player to reach the bottom-right corner, return `-1`. Constraints: * `1 leq N, M leq 1000` * The grid contains only characters `.` and `#`. Input: The input is given from the standard input in the following format: ``` N M grid ``` Where `grid` consists of `N` lines, each containing `M` characters. Output: Print the minimum number of moves required for the player to reach the bottom-right corner, or `-1` if it is not possible. Examples: Input: ``` 3 3 ... .#. ... ``` Output: ``` 4 ``` Input: ``` 3 3 ..# .#. ..# ``` Output: ``` -1 ``` Input: ``` 5 5 ..... .#. ..... .#. ..... ``` Output: ``` 8 ```","solution":"from collections import deque def min_moves_to_reach_end(N, M, grid): Returns the minimum number of moves required for the player to reach the bottom-right corner, or -1 if it is not possible. def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) end = (N-1, M-1) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a program to determine if a given string is a \\"Mirrored String\\". A Mirrored String is defined as a string that reads the same forwards and backwards, ignoring spaces, punctuation, and case differences. Input A single line containing the string to be checked. Output If the string is a Mirrored String, print \\"MIRRORED\\", otherwise print \\"NOT MIRRORED\\". Example Input A man, a plan, a canal, Panama Example Output MIRRORED Example Input hello world Example Output NOT MIRRORED","solution":"import re def is_mirrored_string(input_string): Determines if the given string is a Mirrored String, which reads the same forwards and backwards ignoring spaces, punctuation, and case differences. # Normalize the string: remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', input_string).lower() # Check if cleaned string is equal to its reverse if cleaned_string == cleaned_string[::-1]: return \\"MIRRORED\\" else: return \\"NOT MIRRORED\\""},{"question":"You\'ve just come across a unique deck of cards, where each card has an integer value written on it. You need to play a card game with this deck, which is arranged in a single row on the table. You are allowed to pick up any one card from the row at a time, but each time you pick up a card, you must follow these rules: - If the picked card is even, you have to immediately place it back in the same position. - If the picked card is odd, you can remove it from the row permanently. You aim to maximize the sum of the values of cards that remain on the table after performing this procedure. Write a function to determine the maximum possible sum of the remaining cards. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of cards in the row. The second line of input contains n space-separated integers a_i (1 ≤ a_i ≤ 10^9) — the values of the cards. -----Output----- Output a single integer — the maximum possible sum of the remaining cards after removing the odd-valued cards using the described procedure. -----Examples----- Input 5 1 2 3 4 5 Output 6 Input 4 10 9 8 7 Output 18 -----Note----- In the first example, you can remove the cards with values 1, 3, and 5. The remaining cards are 2 and 4, and their sum is 6. In the second example, you can remove the cards with values 9 and 7. The remaining cards are 10 and 8, and their sum is 18.","solution":"def max_sum_of_remaining_cards(n, card_values): Given a number of cards and their values, the function returns the maximum possible sum of the remaining cards after removing all odd-valued cards. # Filter out all the odd numbers from the card values remaining_cards = [value for value in card_values if value % 2 == 0] # Return the sum of the filtered even numbers return sum(remaining_cards) # Example usage: # n = 5 # card_values = [1, 2, 3, 4, 5] # The output should be 6, which is the sum of 2 and 4 # print(max_sum_of_remaining_cards(n, card_values)) # Output: 6"},{"question":"Haruto is participating in a marathon series with varying difficulty levels. The next marathon is classified into three levels based on Haruto\'s current time T in minutes. 1. Level A: Suitable for participants with a time less than 30 minutes. 2. Level B: Suitable for participants with a time between 30 to 60 minutes, inclusive. 3. Level C: Suitable for participants with a time greater than 60 minutes. Given Haruto\'s marathon time T, determine which level he should participate in next. -----Constraints----- - 0 ≤ T ≤ 120 - T is an integer. -----Input----- Input is given from Standard Input in the following format: T -----Output----- Print the name of the next marathon level for Haruto (Level A, Level B or Level C). -----Sample Input----- 45 -----Sample Output----- Level B 45 is between 30 to 60 minutes, so Level B will be the suitable level.","solution":"def marathon_level(T): Determine the marathon level Haruto should participate in next based on his current time T in minutes. Level A: T < 30 minutes Level B: 30 <= T <= 60 minutes Level C: T > 60 minutes Parameters: T (int): Haruto\'s current marathon time in minutes Returns: str: Level A, Level B, or Level C if T < 30: return \\"Level A\\" elif 30 <= T <= 60: return \\"Level B\\" else: return \\"Level C\\""},{"question":"Given a 2D grid of size M x N, each cell in the grid can be empty (represented by a 0) or blocked (represented by a 1). You are initially positioned at the top-left corner (0, 0) and you want to reach the bottom-right corner (M-1, N-1). You can only move down or right at any point in time. Given the grid, determine the number of unique paths from the top-left to the bottom-right corner that avoids blocked cells. Note that if the starting cell or the destination cell is blocked, no paths exist. Example 1: Input: Grid = [[0,0,0], [0,1,0], [0,0,0]] Output: 2 Explanation: There are two paths to reach the bottom-right corner: Path 1: Right -> Right -> Down -> Down Path 2: Down -> Down -> Right -> Right Example 2: Input: Grid = [[0,1], [0,0]] Output: 1 Your Task: Since this is a function problem, you don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function uniquePaths() that takes a 2D array grid as a parameter and returns the total number of unique paths from the top-left to the bottom-right of the grid modulo 1000000007. Expected Time Complexity: O(M*N). Expected Auxiliary Space: O(M*N). Constraints: 1 ≤ M, N ≤ 100 0 ≤ grid[i][j] ≤ 1","solution":"def uniquePaths(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, avoiding blocked cells. MOD = 1000000007 M = len(grid) N = len(grid[0]) # If the start or end cell is blocked, no paths are possible if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 # Initialize a DP table dp = [[0] * N for _ in range(M)] dp[0][0] = 1 # Fill the DP table for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] % MOD if j > 0: dp[i][j] += dp[i][j-1] % MOD dp[i][j] %= MOD return dp[M-1][N-1]"},{"question":"A factory produces a series of electronic devices each having a unique serial number. The serial number consists of digits only. The factory wants to ensure that each serial number is valid according to specific rules before the devices are shipped. A valid serial number must have the following properties: 1. It contains at least two different digits. 2. There are no consecutive identical digits. Write a program that checks the validity of a given list of serial numbers. ------ Input ------ The first line of the input contains an integer N, the number of serial numbers to check. Each of the following N lines contains a string representing a serial number. ------ Output ------ For each serial number, print \\"Valid\\" if the serial number meets the specified criteria, otherwise print \\"Invalid\\". ------ Constraints ------ 1 ≤ N ≤ 1,000 Each serial number is between 1 and 100 digits long. ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 3 12345 11111 112233 ----- Sample Output 1 ------ Valid Invalid Valid","solution":"def is_valid_serial(serial): Checks if a given serial number is valid. A valid serial number must: 1. Contain at least two different digits. 2. Have no consecutive identical digits. if len(set(serial)) < 2: return \\"Invalid\\" for i in range(1, len(serial)): if serial[i] == serial[i-1]: return \\"Invalid\\" return \\"Valid\\" def check_serials(serials): This function processes a list of serial numbers and checks their validity. Parameters: serials (list of str): List of serial numbers to be checked. Returns: list of str: Returns a list of \\"Valid\\" or \\"Invalid\\" for each serial number. return [is_valid_serial(serial) for serial in serials]"},{"question":"You are tasked with developing a security system that can securely store and validate passwords. One of the requirements is to ensure that users create strong passwords. A password is considered strong if it meets the following conditions: 1. It has at least 8 characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set: !@#%^&*()-+. Write a function that takes a list of passwords and returns a list of booleans indicating for each password whether it is strong or not. # Input - A list of strings representing the passwords. # Output - A list of booleans where each boolean corresponds to the strength of the password at the same index in the input list. A `True` value indicates that the password is strong, and `False` indicates that it is not. # Example ```python def check_password_strength(passwords): # Your code here # Example usage: passwords = [\\"aB3!dEFg\\", \\"12345678\\", \\"Ab1!\\", \\"Passw1!\\"] print(check_password_strength(passwords)) # Output: [True, False, False, False] ``` # Constraints - All passwords will have a length of at most 100 characters. - The list of passwords will have at most 1000 passwords. Your solution should emphasize readability and efficiency. You may not use any libraries or functions that directly check password strength. Write your own logic to validate the conditions.","solution":"def check_password_strength(passwords): Takes a list of passwords and returns a list of booleans indicating for each password whether it is strong or not. def is_strong(password): if len(password) < 8: return False has_upper = has_lower = has_digit = has_special = False special_characters = \\"!@#%^&*()-+\\" for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True return has_upper and has_lower and has_digit and has_special return [is_strong(pwd) for pwd in passwords] # Example usage: passwords = [\\"aB3!dEFg\\", \\"12345678\\", \\"Ab1!\\", \\"Passw1!\\"] print(check_password_strength(passwords)) # Output: [True, False, False, False]"},{"question":"Problem Description You are given the task of evaluating a series of mathematical expressions passed in a specific format, and turning them into their correct arithmetic results. Implement a program that can solve basic arithmetic expressions, ensuring to follow the order of operations (PEMDAS—parentheses, exponents, multiplication and division, addition and subtraction). Input Format Each line of input contains a single arithmetic expression. These expressions will include non-negative integers (0-9) and the following operators: addition (+), subtraction (-), multiplication (*), and division (/). There will be no spaces in the expressions. The input concludes when an empty line is given. Your program should read until this empty line. Output Format For each arithmetic expression, output a single line containing the evaluated result. Each result should be displayed with two decimal precision. Constraints - The length of each arithmetic expression will not exceed 100 characters. - Integer division should result in a floating-point value. SAMPLE INPUT 5+3*2 4/2-1 7*(3+2) 9/3*3+2 2+(3-1*2)/4 SAMPLE OUTPUT 11.00 1.00 35.00 11.00 2.25","solution":"import re def evaluate_expression(expression): try: # Evaluate the expression and round the result to 2 decimal places result = eval(expression) return f\\"{result:.2f}\\" except Exception as e: return str(e) def process_expressions(expressions): results = [] for expression in expressions: if expression.strip(): # Avoid processing empty lines results.append(evaluate_expression(expression.strip())) return results"},{"question":"You are a software engineer working for a company that needs to analyze a large dataset. Your task is to implement a function that finds the k-th smallest element in a list of integers. Here are the rules: 1. The list is guaranteed to have at least k elements. 2. The elements in the list may contain duplicates. 3. Your solution should be efficient. A simple brute-force solution that sorts the list first is not acceptable due to the large size of the dataset. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. Each test case consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the size of the list and the position of the element to find. - The second line contains n integers separated by spaces, representing the elements of the list. -----Output----- For each test case, print a single integer: the k-th smallest element in the list. -----Examples----- Input 3 5 2 7 10 4 3 20 6 5 5 2 1 9 4 6 5 3 1 2 3 4 5 Output 4 6 3 -----Note----- Test case 1: The list is [7, 10, 4, 3, 20]. The second smallest element is 4. Test case 2: The list is [5, 2, 1, 9, 4, 6]. The fifth smallest element is 6. Test case 3: The list is [1, 2, 3, 4, 5]. The third smallest element is 3.","solution":"import heapq def kth_smallest_elements(test_cases): Finds the k-th smallest element for each test case. Parameters: test_cases: list of tuples containing two items: - tuple of two integers n and k - list of n integers Returns: List of integers which are the k-th smallest element for each test case results = [] for (n, k), elements in test_cases: results.append(find_kth_smallest(elements, k)) return results def find_kth_smallest(nums, k): Helper function to find the k-th smallest element in the list. Parameters: nums: list of integers k: integer, position of smallest element to find Returns: Integer which is the k-th smallest element in the list # Using a heap to efficiently find the k-th smallest element return heapq.nsmallest(k, nums)[-1]"},{"question":"You are given a string consisting of digits, which might have duplicated digits. Your task is to form the smallest possible number by removing exactly `k` digits from the given string. If the given string has leading zeros after removing `k` digits, you should remove those leading zeros too to form the smallest number. If after removing all `k` digits, the result is an empty string, return \\"0\\". -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the length of the given string of digits. The second line contains a string consisting of exactly `n` digits. The third line contains an integer `k` (0 ≤ k ≤ n) — the number of digits to remove. -----Output----- Print the smallest possible number after removing exactly `k` digits. -----Examples----- Input 10 1432219000 3 Output 1219000 Input 7 9876543 3 Output 6543 -----Note----- In the first sample, after removing 3 digits we get \\"1219000\\", which is the smallest possible number. In the second sample, after removing 3 digits we get \\"6543\\". Removing other combinations of 3 digits do not yield a smaller number.","solution":"def remove_k_digits(num: str, k: int) -> str: stack = [] for digit in num: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) stack = stack[:-k] if k else stack return \'\'.join(stack).lstrip(\'0\') or \'0\'"},{"question":"Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root. The length of path between two nodes is represented by the number of edges between them. Function Signature: `def longest_univalue_path(root: TreeNode) -> int:` **Input:** - root: TreeNode, which represents the root of the binary tree. **Output:** - int: the length of the longest path where each node in the path has the same value. Example: Input: ``` 5 / 4 5 / 1 1 5 ``` Output: 2 Explanation: The longest path with the same value is the two nodes with value 5. The length of this path is 2. Input: ``` 1 / 4 5 / 4 4 5 ``` Output: 2 Explanation: The longest path with the same value is the three nodes with value 4. The length of this path is 2 (4 -> 4 -> 4). Constraints: - The number of nodes in the tree is in the range [0, 3 * 10^4]. - -1000 <= Node.val <= 1000 - The depth of the tree will not exceed 1000.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longest_univalue_path(root: TreeNode) -> int: Returns the length of the longest path where each node in the path has the same value. def helper(node: TreeNode): nonlocal max_length if not node: return 0 left_length = helper(node.left) right_length = helper(node.right) left_univalue = right_univalue = 0 if node.left and node.left.val == node.val: left_univalue = left_length + 1 if node.right and node.right.val == node.val: right_univalue = right_length + 1 max_length = max(max_length, left_univalue + right_univalue) return max(left_univalue, right_univalue) max_length = 0 helper(root) return max_length"},{"question":"Write a function that takes two parameters: a string s and a list of words words_list. The function should return a list of starting indices of all substrings in s that are a concatenation of each word in words_list exactly once and without any intervening characters. The words in words_list are all of the same length. The substrings in the returned list should be ordered in ascending order. For example: ```python find_substring_indices(s=\\"barfoothefoobarman\\", words_list=[\\"foo\\",\\"bar\\"]) ``` should return `[0, 9]` because the substring \\"barfoo\\" starts at index 0 and the substring \\"foobar\\" starts at index 9. Constraints: - s contains only lowercase English letters. - The length of s is at most 10^4. - The total length of words in words_list combined is at most 10^4. - words_list contains between 1 and 5000 words, each whose length is at most 30.","solution":"def find_substring_indices(s, words_list): Returns a list of starting indices of all substrings in s that are concatenations of each word in words_list exactly once and without any intervening characters. if not s or not words_list: return [] word_len = len(words_list[0]) word_count = len(words_list) # Total length of substring to search for substring_len = word_len * word_count # Base case where the substring length is greater than s if substring_len > len(s): return [] # Counter for occurrences of words in words_list from collections import Counter words_count = Counter(words_list) result_indices = [] # Loop over all possible starting points for i in range(len(s) - substring_len + 1): seen_words = Counter() j = 0 # Check for each word in the window while j < word_count: word_start = i + j * word_len word = s[word_start:word_start + word_len] # If the word is in our list of words, count it if word in words_count: seen_words[word] += 1 # If we have seen more than required, break if seen_words[word] > words_count[word]: break else: break j += 1 # If all words match exactly if seen_words == words_count: result_indices.append(i) return result_indices"},{"question":"In a city represented by an N x N grid, there are some buildings and parks. Each cell in the grid is either \'B\' (building) or \'P\' (park). The mayor wants to maximize the accessibility to parks for the city\'s residents by computing the maximum distance from any building to the nearest park. The residents can only move up, down, left, or right between adjacent cells. Your task is to determine the maximum distance from any building to the nearest park. If there are no buildings or no parks, the output should be -1 as it is not possible to calculate the distance. Write a function `max_distance_to_park(grid: List[List[str]]) -> int` that takes a 2D list of characters representing the city and returns the maximum distance from any building to the nearest park. **Input:** - grid: List of List of characters, where each element is either \'B\' or \'P\'. - 1 ≤ N ≤ 1000 (N is the size of the grid) **Output:** - a single integer indicating the maximum distance from any building to the nearest park, or -1 if the calculation is not possible. **Example:** ```python grid = [ [\'B\', \'B\', \'P\'], [\'P\', \'B\', \'B\'], [\'B\', \'P\', \'B\'] ] print(max_distance_to_park(grid)) # Output: 1 ``` Here is a function signature to help you get started: ```python from typing import List def max_distance_to_park(grid: List[List[str]]) -> int: # Implement your solution here pass ```","solution":"from typing import List from collections import deque def max_distance_to_park(grid: List[List[str]]) -> int: if not grid or not grid[0]: return -1 N = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right parks = deque() # Step 1: Collect all parks for r in range(N): for c in range(N): if grid[r][c] == \'P\': parks.append((r, c)) # If there are no parks or no buildings, return -1 if not parks or all(grid[r][c] == \'P\' for r in range(N) for c in range(N)): return -1 steps = -1 seen = set(parks) # Step 2: Perform multi-source BFS from all parks while parks: steps += 1 for _ in range(len(parks)): r, c = parks.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and (nr, nc) not in seen and grid[nr][nc] == \'B\': parks.append((nr, nc)) seen.add((nr, nc)) return steps"},{"question":"Read problems statements in Mandarin Chinese and Russian. Charlie is trying to teach his younger sibling the concept of prime numbers. He decides to write a program that generates all prime numbers less than or equal to a given integer n. Your task is to help Charlie by writing a function that takes an integer n as input and returns a list of all prime numbers less than or equal to n. ------ Input ------ The input consists of a single integer n. ------ Output ------ Output a single line containing space-separated prime numbers in ascending order. ------ Constraints ------ 1 ≤ n ≤ 100000 ------ Sample Input 1 ------ 10 ------ Sample Output 1 ------ 2 3 5 7 ------ Explanation 1 ------ All prime numbers less than or equal to 10 are 2, 3, 5, and 7.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [True] * (n + 1) primes[0] = primes[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 return [p for p in range(n + 1) if primes[p]] def format_primes_for_output(primes): Formats the list of primes as a space-separated string. return \' \'.join(map(str, primes))"},{"question":"You are given a string that represents a mathematical expression consisting of non-negative integers and the operators +, -, *, and /. The operators have their usual precedence, and parentheses can be used to change the precedence. Your task is to evaluate the expression and return its result as an integer. Input A single line containing a string s (1 ≤ |s| ≤ 10^5), representing the mathematical expression. The string will be a valid expression with non-negative integers and the operators +, -, *, and /, with no spaces between the numbers and operators. The integer division should truncate towards zero. Output A single line containing the integer result of the expression. Example Input \\"3+2*2\\" Output 7 Input \\"14-3*(2+1)\\" Output 5 Input \\"100/2*3+5\\" Output 155 Input \\"2*(5+5*2)/3+(6/2+8)\\" Output 21 Input \\"(2+6*3+5-(3*14/7+2)*5)+3\\" Output -12 Note In the first example, the expression evaluates to 3 + (2 * 2) = 3 + 4 = 7. In the second example, the expression evaluates to 14 - (3 * (2 + 1)) = 14 - 9 = 5. In the third example, the expression evaluates to (((100 / 2) * 3) + 5) = ((50 * 3) + 5) = 150 + 5 = 155.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators +, -, *, / with the usual precedence rules. import re def parse_expression(expression): tokens = re.findall(r\'d+|+|-|*|/|(|)\', expression) return tokens def evaluate(tokens): def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operation(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # integer division operators = [] values = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): values.append(int(tokens[i])) elif tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i] == \')\': while operators and operators[-1] != \'(\': apply_operation(operators, values) operators.pop() else: while (operators and operators[-1] != \'(\' and precedence(operators[-1]) >= precedence(tokens[i])): apply_operation(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operation(operators, values) return values[0] tokens = parse_expression(expression) result = evaluate(tokens) return result"},{"question":"Ingrid loves collecting marbles. She owns a set of marbles of different weights and enjoys making balanced collections out of them. A collection is balanced if the sum of the weights of the marbles in that collection equals the sum of the weights of the marbles left out. Ingrid always aims to find if it\'s possible to create such a balanced collection. Can you help her determine if she can divide her marbles into two groups with equal total weight? Input The first line contains an integer `n (1 ≤ n ≤ 50)`, the number of marbles Ingrid has. The second line contains `n` integers, the weights of the marbles, each weight being a positive integer not exceeding 1000. Output Print `YES` if Ingrid can divide her marbles into two groups with equal total weight, otherwise print `NO`. Examples Input 4 1 5 11 5 Output YES Input 3 1 2 5 Output NO Note In the first example, Ingrid can split her marbles into two groups {1, 5, 5} and {11}, which both have a sum of 11. In the second example, there is no way to split the marbles into two groups with equal sum.","solution":"def can_be_divided_into_equal_weight_groups(n, weights): Determine if the list of weights can be divided into two groups with equal weight. :param n: Number of weights :param weights: List of weights :return: \\"YES\\" if it can be divided into two groups with equal weight, otherwise \\"NO\\" total_weight = sum(weights) # If total weight is odd, it can\'t be divided into two equal parts if total_weight % 2 != 0: return \\"NO\\" target_weight = total_weight // 2 # DP to check subset sum dp = [False] * (target_weight + 1) dp[0] = True for weight in weights: for i in range(target_weight, weight - 1, -1): if dp[i - weight]: dp[i] = True return \\"YES\\" if dp[target_weight] else \\"NO\\""},{"question":"Implement a function that takes a string representing a mathematical expression containing addition (+) and multiplication (*) of non-negative integers, and returns the result of evaluating that expression. The expression will not contain any spaces, parentheses, or negative numbers. The input string is guaranteed to be a valid mathematical expression. For example: - evaluate_expression(\\"3+5*2\\") should return 13 - evaluate_expression(\\"10*4+6\\") should return 46 - evaluate_expression(\\"1+2*3+4\\") should return 11 Make sure to follow the correct order of operations (i.e., multiplication before addition).","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing addition (+) and multiplication (*) of non-negative integers, respecting the order of operations (multiplication before addition). Args: expression (str): The expression to evaluate. Returns: int: The result of the evaluation. # Split the expression by \'+\' to handle addition first, but within each split, handle multiplications parts = expression.split(\'+\') # Evaluate each part individually considering \'*\' has higher precedence evaluated_parts = [] for part in parts: if \'*\' in part: multiplication_result = 1 multiplicands = map(int, part.split(\'*\')) for num in multiplicands: multiplication_result *= num evaluated_parts.append(multiplication_result) else: evaluated_parts.append(int(part)) # Sum up all parts (additions) result = sum(evaluated_parts) return result"},{"question":"Dexter is a brilliant mathematician and a code enthusiast. He is working on a special code that involves sequences and sums. Given a sequence of N integers, Dexter wants to find the maximum possible value of the sum of subsequences where each subsequence belongs to one of the three types: all positive integers, all negative integers, or a combination of both positive and negative integers. However, the subsequences must be contiguous in the original sequence. Help Dexter write a program to find the maximum sum of such subsequences. -----Input----- First line of input contains an integer N (1 le N le 1000), the length of the sequence. The next line contains N integers, the sequence itself, where each integer is between -1000 and 1000, inclusive. -----Output----- The first and only line of output should contain a single integer, the maximum possible sum of the subsequences as described. -----Examples----- Sample Input 1: 6 1 2 -3 4 5 -6 Sample Output 1: 15 Sample Input 2: 5 -1 -2 -3 -4 -5 Sample Output 2: -1","solution":"def max_subsequence_sum(N, sequence): Finds the maximum possible sum of subsequences where: - subsequences must be contiguous - subsequences can be all positive, all negative, or a combination of both. Args: N: int, length of the sequence sequence: list of int, the sequence of numbers Returns: int, the maximum sum of such subsequences. # Initialize variables to keep track of the max sum and the current sum max_sum = sequence[0] current_sum = sequence[0] for i in range(1, N): current_sum = max(sequence[i], current_sum + sequence[i]) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A computer program needs to sort an array of non-negative integers, but with a twist. Instead of using a typical sorting algorithm, the program first converts each number to its binary representation, then sorts the binary numbers based on the following rules: 1. Sort primarily by the number of 1s in the binary representation (in ascending order). 2. For numbers with the same number of 1s, sort based on their numerical value (in ascending order). Write a function `special_sort(arr)` that takes a list of non-negative integers and returns a new list with the integers sorted according to the above rules. **Example:** ``` special_sort([4, 1, 7, 3, 2]) ``` For the input above, the binary representations are as follows: ``` 4 -> 100 (1 one) 1 -> 1 (1 one) 7 -> 111 (3 ones) 3 -> 11 (2 ones) 2 -> 10 (1 one) ``` Sorting by the number of 1s and then by numerical value, we get: ``` 1 -> 1 2 -> 10 4 -> 100 3 -> 11 7 -> 111 ``` So the function should return: ``` [1, 2, 4, 3, 7] ``` Note: - The input list will contain at least one integer and all integers are non-negative. - The input list will not contain any duplicate numbers.","solution":"def special_sort(arr): Sort an array of non-negative integers based on their binary representation: 1. Sort primarily by the number of 1s in the binary representation (in ascending order). 2. For numbers with the same number of 1s, sort based on their numerical value (in ascending order). Parameters: arr (list of int): List of non-negative integers to be sorted. Returns: list of int: Sorted list of integers according to the specified rules. return sorted(arr, key=lambda x: (bin(x).count(\'1\'), x))"},{"question":"Mario is designing a website that shows the best prices for specific products from different retailers. Every time a user searches for a product, Mario\'s website displays prices from several popular e-commerce sites. Given the list of prices, the website should display the price that occurs the most frequently. If there is a tie (i.e., multiple prices occur with the same highest frequency), the website should display the lowest price among them. Write a function that takes a list of integers representing the prices from different retailers and returns the most frequently occurring price. If there\'s a tie, return the lowest price with the highest frequency. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of prices. - The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) representing the prices. Output: - Display the price that occurs the most frequently. If there are ties, display the lowest price among them. Examples: Input: 5 50 40 50 40 50 Output: 50 Input: 6 10 30 20 20 10 30 Output: 10 Explanation: Consider the first example. The prices are [50, 40, 50, 40, 50]. The price 50 occurs 3 times and price 40 occurs 2 times. Therefore, the most frequent price is 50. In the second example, the prices are [10, 30, 20, 20, 10, 30]. The prices 10, 20, and 30 each occur 2 times. Since there is a tie, the lowest price among them is 10.","solution":"def most_frequent_price(prices): Returns the most frequently occurring price. In case of a tie, returns the lowest price. from collections import Counter price_counts = Counter(prices) max_freq = max(price_counts.values()) most_freq_prices = [price for price, count in price_counts.items() if count == max_freq] return min(most_freq_prices)"},{"question":"You are given a grid with N rows and M columns. Some of the cells in the grid are blocked, and you cannot walk through them. You start at the top-left corner (1,1) and want to reach the bottom-right corner (N,M). At each step, you can move either to the right or down to an adjacent cell. Determine the number of different paths from the top-left corner to the bottom-right corner, considering the blocked cells. ------ Input : ------ The first line contains an integer T, the number of test cases. Each test case starts with two integers N and M. The next line contains an integer K, the number of blocked cells, followed by K pairs of integers (Xi, Yi) representing the coordinates of the blocked cells. ------ Output : ------ For each test case, output the number of different paths from the top-left corner to the bottom-right corner. If there is no such path, output 0. ------ Constraints : ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 0 ≤ K ≤ N * M 1 ≤ Xi ≤ N 1 ≤ Yi ≤ M ---- Sample Input 1 ---- 2 3 3 1 2 2 3 3 2 2 2 4 3 3 ---- Sample Output 1 ---- 2 0","solution":"def unique_paths_with_obstacles(grid): This function takes a grid and calculates the number of unique paths from top-left to bottom-right, considering blocked cells (marked with 1). N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0]*M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1] def number_of_paths(T, cases): results = [] for i in range(T): N, M = cases[i][\'dimensions\'] K = cases[i][\'blocked_count\'] blocked_cells = cases[i][\'blocked_cells\'] grid = [[0] * M for _ in range(N)] for x, y in blocked_cells: grid[x-1][y-1] = 1 results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Given a string, determine the most frequent character. If there are multiple characters with the same maximum frequency, return the lexicographically smallest character. Input The first line will contain a single string consisting of lowercase English letters. Output Print a single character, which is the most frequent in the input string. If there are multiples, print the lexicographically smallest one. Example Input: apple Output: p","solution":"def most_frequent_char(s): Returns the most frequent character in the string s. If there are multiple characters with the same frequency, the lexicographically smallest one is returned. from collections import Counter # Counting frequency of each character freq = Counter(s) # Finding the maximum frequency max_freq = max(freq.values()) # Collecting all characters with the maximum frequency max_freq_chars = [char for char, count in freq.items() if count == max_freq] # Returning the lexicographically smallest character return min(max_freq_chars)"},{"question":"Given an array of integers, reorder the array in-place such that all even numbers are placed before all odd numbers while maintaining the relative order of the even and odd numbers. -----Constraints----- - The array length is between 1 and 10^5. - Each integer in the array is between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n -----Output----- Print the reordered array with all even numbers followed by all odd numbers. -----Sample Input----- 6 3 1 2 4 5 6 -----Sample Output----- 2 4 6 3 1 5 In the above example, 2, 4, and 6 are the even numbers, maintaining their original order, followed by the odd numbers 3, 1, and 5.","solution":"def reorder_even_odd(arr): Reorders the array in-place so that all even numbers come before all odd numbers. Maintains the relative order of the even and odd numbers. even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return even_numbers + odd_numbers"},{"question":"Given an array of positive integers representing the heights of buildings on a 2D skyline, implement a function `maxViewDistance` that calculates the maximum distance one can see from any building to the next taller building in the array. If there is no taller building, the view distance is the remaining length of the array. The skyline is given in the form of an integer array where each element represents the height of a building. Function signature: `def maxViewDistance(heights: List[int]) -> int` **Input** - `heights`: a list of integers where each integer is between 0 and 100000. **Output** - Return an integer representing the maximum distance from any building to the next taller building. **Example** ```python Input: heights = [3, 7, 8, 3, 6, 1] Output: 3 Explanation: Starting from the building with height 3 at index 0, the next taller building is at index 1, distance is 1. Starting from the building with height 7 at index 1, the next taller building is at index 2, distance is 1. Starting from the building with height 8 at index 2, there is no next taller building, distance is 3. Starting from the building with height 3 at index 3, the next taller building is at index 4, distance is 1. Starting from the building with height 6 at index 4, there is no next taller building, distance is 1. Starting from the building with height 1 at index 5, there is no next taller building, distance is 0. Therefore, the maximum distance is 3. ```","solution":"from typing import List def maxViewDistance(heights: List[int]) -> int: Returns the maximum distance from any building to the next taller building in the array. n = len(heights) max_distance = 0 # Traverse the array for i in range(n): distance = n - i - 1 # Start with the farthest possible distance for j in range(i + 1, n): if heights[j] > heights[i]: distance = j - i break if distance > max_distance: max_distance = distance return max_distance"},{"question":"You are given a tree with N nodes. Each edge has a weight represented by an integer. Initially, each node has a value of 0 . You can increase the value of the nodes by an integer value K such that the cost to increase the value of any node i is equal to W_i * K , where W_i is the sum of the weights of edges connecting node i to its children. Your task is to determine the minimum total cost to set all nodes in the tree to any positive value, ensuring that all nodes end up with the same value. Input The input is given in the following format: N u_1 v_1 w_1 u_2 v_2 w_2 ldots u_{N-1} v_{N-1} w_{N-1} Output Output the minimum total cost to make all nodes have the same positive value. Insert a line break at the end. Constraints * 1 leq N leq 10^5 * 1 leq w_i leq 10^5 * All inputs are integers. * The given tree is connected and acyclic. Input example 1 3 1 2 4 2 3 3 Output example 1 7 Input example 2 4 1 2 1 1 3 2 3 4 5 Output example 2 8 Example Input 3 1 2 4 2 3 3 Output 7","solution":"def min_total_cost(N, edges): from collections import defaultdict # Build the tree adjacency list with weights tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # To store the sum of weights for each node weight_sum = [0] * (N + 1) def dfs(node, parent): total_weight = 0 for neighbor, weight in tree[node]: if neighbor != parent: child_weight = dfs(neighbor, node) total_weight += child_weight + weight weight_sum[node] = total_weight return total_weight # Start DFS from node 1 (assuming node indexing starts from 1) dfs(1, -1) # The minimum cost will be the sum of all weights divided by 2 return weight_sum[1] # Reading and processing the input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) edges = [] for i in range(N-1): u = int(data[3*i+1]) v = int(data[3*i+2]) w = int(data[3*i+3]) edges.append((u, v, w)) print(min_total_cost(N, edges)) if __name__ == \\"__main__\\": main()"},{"question":"Alex is a student who loves playing with numbers. His recent obsession is finding pairs of numbers which sum up to a given value. Given an array of integers, Alex wants to know if there are any two distinct elements in the array such that their sum is equal to a specific target value. Help Alex by writing a function that returns \\"YES\\" if there exists such a pair in the array, and \\"NO\\" otherwise. ------ Input ------ First line contains T, the number of test cases. Each test case consists of two lines: - The first line of each test case contains two positive integers N and K, denoting the number of integers in the array and the target sum respectively. - The second line contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, print \\"YES\\" if there exists a pair of distinct elements in the array that sum up to K. Otherwise, print \\"NO\\". The output is case insensitive (i.e., \\"Yes\\", \\"yes\\", \\"YES\\" are all accepted). ------ Constraints ------ 1 ≤ T ≤ 500 2 ≤ N ≤ 10^4 −10^6 ≤ A_i ≤ 10^6 −10^6 ≤ K ≤ 10^6 ----- Sample Input 1 ------ 3 5 9 2 7 11 15 -1 4 4 1 2 3 2 3 5 0 2 5 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ For test 1: The pair (2, 7) adds up to 9. For test 2: The pair (2, 2) adds up to 4. For test 3: There\'s no pair whose sum is 5.","solution":"def find_pair_with_sum(t, test_cases): results = [] for case in test_cases: n, k = case[0] arr = case[1] seen = set() found = False for num in arr: if (k - num) in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results # Example usage: t = 3 test_cases = [ ((5, 9), [2, 7, 11, 15, -1]), ((4, 4), [1, 2, 3, 2]), ((3, 5), [0, 2, 5]) ] print(find_pair_with_sum(t, test_cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"Sara was recently hired as a data analyst for a large company. One of her tasks is to ensure that the data files generated by the employees follow a specific naming convention. The naming convention requires the file names to be in the format `AaBbCc`, where each pair of letters `Aa`, `Bb`, and `Cc` must contain exactly one uppercase and one lowercase letter, in either order. However, Sara has noticed that some employees do not follow this convention, and she needs to automate the validation process. Your task is to write a program that verifies if a given string adheres to the naming convention. Input The input consists of a single string S, with a length of exactly 6 characters. The string will contain only alphabetical characters. Output Print \\"VALID\\" if the string adheres to the naming convention. Otherwise, print \\"INVALID\\". Examples Input aAbBcC Output VALID Input aabbcc Output INVALID Input ABabCc Output VALID Note: - The characters may appear in any order, but each uppercase letter must pair with exactly one lowercase letter. - The input will always contain 6 characters and only alphabetical letters.","solution":"def validate_file_name(S): Check if the given string S adheres to the file naming convention. Args: S (str): The file name string which needs to be validated. Returns: str: \\"VALID\\" if the string adheres to the naming convention, otherwise \\"INVALID\\". if len(S) != 6: return \\"INVALID\\" pairs = [(\'A\', \'a\'), (\'B\', \'b\'), (\'C\', \'c\')] for upper, lower in pairs: if not ((upper in S and lower in S) and (S.count(upper) == 1 and S.count(lower) == 1)): return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given an array of integers `nums` and an integer `k`. You need to find the total number of pairs `(i, j)` such that `nums[i] + nums[j]` is divisible by `k` and `i < j`. Return the number of such pairs. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 3 Output: 4 Explanation: The pairs are: (1, 2), (2, 4), (2, 1), (4, 5) Example 2: Input: nums = [5, 10, 15, 20, 25], k = 5 Output: 10 Explanation: Every pair of elements is divisible by 5. Example 3: Input: nums = [1, 3, 2, 6, 1, 2], k = 3 Output: 5 Constraints: - 1 <= nums.length <= 10^4 - 1 <= nums[i] <= 10^4 - 1 <= k <= 10^4","solution":"def count_divisible_pairs(nums, k): Returns the number of pairs (i, j) such that nums[i] + nums[j] is divisible by k. count = 0 n = len(nums) for i in range(n): for j in range(i+1, n): if (nums[i] + nums[j]) % k == 0: count += 1 return count"},{"question":"_Sorted List to Binary Search Tree_ _Given a sorted list, you are to convert it into a binary search tree (BST)._ Overview You are to create a function `sorted_list_to_bst` that converts a given sorted list into a height-balanced binary search tree. A height-balanced binary search tree is a binary tree in which the depth of the two subtrees of every node never differs by more than 1. The Goal ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_list_to_bst(nums: List[int]) -> TreeNode: # Your code here ``` Example Given the sorted list: `nums = [-10, -3, 0, 5, 9]` One possible output, representing the BST is: ``` 0 / -3 9 / / -10 5 ``` This output can be represented as a TreeNode: ```python root = TreeNode(0) root.left = TreeNode(-3) root.left.left = TreeNode(-10) root.right = TreeNode(9) root.right.left = TreeNode(5) ``` The order of nodes above satisfies the conditions of a BST, and it is height-balanced. Specifications - You can assume that the input list will not be empty. - The `TreeNode` class is provided. - Your function should return the root node of the BST. - Avoid using additional libraries/modules, beyond the standard library. - You can define additional helper functions if needed to support your implementation.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_list_to_bst(nums: List[int]) -> Optional[TreeNode]: def convert(left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = convert(left, mid - 1) node.right = convert(mid + 1, right) return node return convert(0, len(nums) - 1)"},{"question":"Task: You need to write a function **diagonal_sum** that takes a 2-dimensional square matrix (a list of lists) as input and returns the sum of its primary and secondary diagonals. - Primary diagonal: The diagonal from the top-left to the bottom-right. - Secondary diagonal: The diagonal from the top-right to the bottom-left. Your function should correctly handle matrices of sizes varying from 1x1 to 10x10. **Example:** ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] diagonal_sum(matrix1) # Output: 30 matrix2 = [ [5, 3], [7, 8] ] diagonal_sum(matrix2) # Output: 23 ``` In the first example: Primary diagonal sum: 1 + 5 + 9 = 15 Secondary diagonal sum: 3 + 5 + 7 = 15 Total: 15 + 15 = 30 In the second example: Primary diagonal sum: 5 + 8 = 13 Secondary diagonal sum: 3 + 7 = 10 Total: 13 + 10 = 23 **Note:** - If the matrix has only one element, for example, [[7]], then the primary and secondary diagonals are the same. - If the matrix is 2x2, there are only two diagonals, same as in a 3x3 or larger matrix, primary and secondary.","solution":"def diagonal_sum(matrix): Returns the sum of the primary and secondary diagonals of a square matrix. n = len(matrix) primary_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n)) return primary_diagonal_sum + secondary_diagonal_sum"},{"question":"You are tasked with designing a vending machine control system that verifies if a specific product can be dispensed based on the available stock and the user\'s request. Each product is represented by a unique ID and a quantity indicating the stock level. The machine should check each request against the available stock levels and determine if the requested quantity can be dispensed. -----Input----- The first line contains the number of test cases t (1 leq t leq 100). Description of the t test cases follows. The first line of each test case contains an integer m (1 leq m leq 100), representing the number of different products in stock. The second line of each test case contains m pairs of integers id and stock (1 leq id leq 1000, 0 leq stock leq 100) representing the product IDs and their corresponding stock levels. The third line of each test case contains a single integer n (1 leq n leq 100), representing the number of user requests. The fourth line of each test case contains n pairs of integers id and quantity (1 leq id leq 1000, 1 leq quantity leq 100) representing the product IDs and the quantities requested by the user. -----Output----- For each of the t test cases, print \\"Possible\\" if the machine can dispense every requested product in the requested quantity given the stock levels. Otherwise, print \\"Not Possible\\". You can print each letter in any case (upper or lower). -----Examples----- Input 2 3 1 5 2 10 3 7 2 1 3 2 5 2 1 1 8 1 1 10 Output Possible Not Possible","solution":"def vending_machine(t, test_cases): results = [] for i in range(t): m = test_cases[i][0] stock_info = test_cases[i][1] n = test_cases[i][2] request_info = test_cases[i][3] stock_dict = {} for (id, stock) in stock_info: stock_dict[id] = stock possible = True for (id, quantity) in request_info: if id not in stock_dict or stock_dict[id] < quantity: possible = False break else: stock_dict[id] -= quantity if possible: results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results # Example usage t = 2 test_cases = [ (3, [(1, 5), (2, 10), (3, 7)], 2, [(1, 3), (2, 5)]), (1, [(1, 8)], 1, [(1, 10)]) ] print(vending_machine(t, test_cases))"},{"question":"Marco and Polo are designing a sequence of steps on a chessboard. The chessboard is an 8x8 grid, and each position on the board can be represented using standard chess notation (e.g., \\"a1\\", \\"h8\\"). Marco starts the knight at the \\"a1\\" position and provides a series of moves for the knight. Polo wants to confirm that the sequence of knight\'s moves results in valid positions on the chessboard. A knight in chess moves in an L-shape: two positions in one direction and then one position perpendicular, or one position in one direction and then two positions perpendicular. Given a series of moves that Marco provides, determine if each move results in a valid position on the board. Input: First line contains an integer M, the number of moves. Next M lines each contain a string representing a move in the format \\"a1->c2\\" or \\"b1->a3\\". Output: For each move, print \\"VALID\\" if the move results in a valid knight\'s move on the chessboard, otherwise print \\"INVALID\\". Constraints: 1 ≤ M ≤ 100 Each move is given in standard chess notation. SAMPLE INPUT 4 a1->b3 a1->c2 h8->g6 b1->c2 SAMPLE OUTPUT VALID VALID VALID INVALID","solution":"def is_valid_knight_move(start, end): Determines if a move from start position to end position is a valid knight\'s move on a chessboard. # Mapping columns to indices col_to_index = {chr(i + ord(\'a\')): i for i in range(8)} row_to_index = {str(i + 1): i for i in range(8)} start_col, start_row = start[0], start[1] end_col, end_row = end[0], end[1] start_x, start_y = col_to_index[start_col], row_to_index[start_row] end_x, end_y = col_to_index[end_col], row_to_index[end_row] dx = abs(end_x - start_x) dy = abs(end_y - start_y) # A valid knight move has to be in an L-shape i.e., (2,1) or (1,2) if (dx == 2 and dy == 1) or (dx == 1 and dy == 2): return True else: return False def check_moves(moves): results = [] for move in moves: start, end = move.split(\\"->\\") if is_valid_knight_move(start, end): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"You are given n versions of a software, numbered from 1 to n. One version is known to be faulty, meaning it causes a failure in the software. The software versions are incrementally developed based on each other, meaning that a faulty version will also cause all its subsequent versions to fail. Your task is to find the earliest faulty version using the least number of queries possible. To do this, you are allowed to query a version and the system will tell you whether it is faulty or not. Write a function `findFaultyVersion` that takes the integer n as input and returns the integer representing the earliest faulty version. You are guaranteed that there is exactly one faulty version. You can query the system using the provided function `isFaulty(version)`, which returns a boolean indicating whether the given version is faulty. **Function Signature:** ```python def findFaultyVersion(n: int) -> int: # Your code here ``` **Input:** - `n` (1 ≤ n ≤ 10^6): an integer representing the number of versions. **Output:** - Returns the integer representing the first faulty version. **Example:** ```python # Suppose isFaulty behaves as follows for n = 5: # isFaulty(1) => False # isFaulty(2) => False # isFaulty(3) => True # isFaulty(4) => True # isFaulty(5) => True n = 5 result = findFaultyVersion(n) print(result) # Output should be 3 ``` The solution should be optimized to find the faulty version using as few queries as possible. **Note:** Use a binary search approach to minimize the number of queries and achieve the expected efficiency for large values of n.","solution":"def findFaultyVersion(n: int, isFaulty) -> int: Returns the earliest faulty version using binary search. isFaulty is a function that takes an integer version number and returns a boolean indicating whether the version is faulty. left, right = 1, n while left < right: mid = (left + right) // 2 if isFaulty(mid): right = mid # Look on the left side, including current mid else: left = mid + 1 # Look on the right side, excluding current mid return left # left is the first faulty version # Example usage of the function with the isFaulty function provided def isFaulty(version): # This is a mock function for testing purposes faulty_version = 3 # For example, let\'s assume that version 3 is the first faulty version return version >= faulty_version n = 5 result = findFaultyVersion(n, isFaulty) print(result) # Output should be 3"},{"question":"Given an array of n integers, you need to arrange them such that the smallest number is at the first position, the second smallest at the last position, the third smallest at the second position, the fourth smallest at the second last position, and so on, in a zigzag pattern. For example, if the original array is `[4, 1, 3, 2, 5]`, the rearranged array should be `[1, 2, 3, 4, 5]` transformed into `[1, 5, 2, 4, 3]`. Write a function to achieve this transformation. -----Input----- The input consists of a single line containing an integer n, the number of elements in the array, followed by n space-separated integers representing the original array. The values are 1 leq n leq 10^5 and each integer in the array is between 1 and 10^9. -----Output----- The output should consist of one line containing the rearranged array of integers in the specified zigzag order. -----Examples----- Sample Input 1: 5 4 1 3 2 5 Sample Output 1: 1 5 2 4 3 Sample Input 2: 7 7 3 5 8 2 6 4 Sample Output 2: 2 8 3 7 4 6 5","solution":"def zigzag_arrange(n, arr): arr.sort() result = [] left = 0 right = n - 1 is_left_turn = True while left <= right: if is_left_turn: result.append(arr[left]) left += 1 else: result.append(arr[right]) right -= 1 is_left_turn = not is_left_turn return result # Example usage: n = 5 arr = [4, 1, 3, 2, 5] print(zigzag_arrange(n, arr)) # Output: [1, 5, 2, 4, 3]"},{"question":"Given an integer array \'nums\' of size \'N\' and an integer \'K\', find the Kth smallest element after multiplying each element of the array by -1. This can be interpreted as finding the Kth largest element in the original array. Example 1: Input: N = 6 nums = {3, 2, 1, 5, 6, 4} K = 2 Output: 5 Explanation: The 2nd largest element in the array is 5. Example 2: Input: N = 4 nums = {3, 2, 3, 1} K = 1 Output: 3 Explanation: The largest element in the array is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthLargest() which takes the array nums[] and the integer K as input parameters and returns the Kth largest element in the array after multiplying each element by -1. Expected Time Complexity: O(NlogK) Expected Auxiliary Space: O(K) Constraints: 1 <= N <= 10^{5} -10^{4} <= nums[i] <= 10^{4} 1 <= K <= N","solution":"import heapq def kthLargest(nums, K): Returns the Kth largest element in the array after multiplying each element by -1. This can be interpreted as finding the Kth largest element in the original array. min_heap = [] for num in nums: heapq.heappush(min_heap, num) if len(min_heap) > K: heapq.heappop(min_heap) return min_heap[0]"},{"question":"The Movie Show Time --------------------- Create a function that will take a string representing the start time of a movie (in 24-hour format), and an integer representing the duration of the movie in minutes, and return the end time of the movie (also in 24-hour format). The input time will be in the \'HH:MM\' string format, and the duration is given in minutes. Assume both inputs will be valid. Example: ```python movie_end_time(\\"14:30\\", 90) # \\"16:00\\" movie_end_time(\\"23:45\\", 80) # \\"01:05\\" ``` _Inspired by the need to manage schedules efficiently_","solution":"def movie_end_time(start_time_str, duration_minutes): Returns the end time of the movie in HH:MM format. :param start_time_str: str, start time in \\"HH:MM\\" format :param duration_minutes: int, duration of the movie in minutes :return: str, end time in \\"HH:MM\\" format # Convert start time into hours and minutes start_hours, start_minutes = map(int, start_time_str.split(\':\')) # Calculate end time in total minutes total_start_minutes = start_hours * 60 + start_minutes total_end_minutes = total_start_minutes + duration_minutes # Convert total end time back into hours and minutes end_hours = (total_end_minutes // 60) % 24 end_minutes = total_end_minutes % 60 # Format the end time as HH:MM return f\\"{end_hours:02d}:{end_minutes:02d}\\""},{"question":"Given an array of integers Arr of size N and a target integer X, find the element in the array that is closest to X. If there are multiple such elements, return the smallest one. Example 1: Input: N = 6 Arr[] = {10, 22, 28, 29, 30, 40} X = 54 Output: 40 Example 2: Input: N = 6 Arr[] = {10, 22, 28, 29, 30, 40} X = 12 Output: 10 Your Task: Complete the function closestElement() which takes an array arr, two integers n and x, as input parameters and returns the element in the array closest to x. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} -10^{6} <= Arr[i], X <= 10^{6}","solution":"def closest_element(arr, n, x): Find the element in the array closest to x. If multiple elements are equally close, return the smallest one. closest = arr[0] min_diff = abs(arr[0] - x) for i in range(1, n): diff = abs(arr[i] - x) if diff < min_diff or (diff == min_diff and arr[i] < closest): min_diff = diff closest = arr[i] return closest"},{"question":"# Problem Statement You are given a tree with `N` nodes rooted at node 1. Each node in this tree contains a value. You need to process `Q` queries. Each query gives you two integers, `u` and `v`. For each query, you need to find the number of distinct values in the path from node `u` to node `v`. # Input - The first line contains two integers `N` and `Q`, the number of nodes in the tree and the number of queries. - The second line contains `N` integers, where the `i-th` integer denotes the value at node `i`. - Each of the next `N-1` lines contains two integers `a` and `b`, indicating that node `a` and node `b` are connected by an edge. - Each of the next `Q` lines contains two integers `u` and `v`, representing a query. # Output - For each query, output the number of distinct values in the path from node `u` to node `v`. # Constraints - `1 ≤ N, Q ≤ 100000` - The value of each node will be an integer between 1 and 10^9. - Node values are not necessarily unique. # Sample Input ``` 5 3 1 2 3 4 2 1 2 1 3 3 4 3 5 2 4 1 5 2 3 ``` # Sample Output ``` 3 4 2 ``` # Explanation For the first query `(2, 4)`, the path is [2, 1, 3, 4], so the distinct values are {2, 1, 3, 4}, hence the answer is 3. For the second query `(1, 5)`, the path is [1, 3, 5], so the distinct values are {1, 3, 5}, hence the answer is 3. For the third query `(2, 3)`, the path is [2, 1, 3], so the distinct values are {2, 1, 3}, hence the answer is 3.","solution":"from collections import defaultdict class Tree: def __init__(self): self.adj = defaultdict(list) self.values = {} self.parent = None self.depth = None self.up = None def add_edge(self, u, b): self.adj[u].append(b) self.adj[b].append(u) def set_values(self, values): self.values = values def preprocess(self, root=1): N = len(self.values) LOG = (N-1).bit_length() self.parent = [-1] * (N + 1) self.depth = [0] * (N + 1) self.up = [[-1] * (LOG + 1) for _ in range(N + 1)] def dfs(v, p): self.parent[v] = p self.up[v][0] = p for i in range(1, LOG + 1): self.up[v][i] = self.up[self.up[v][i-1]][i-1] for u in self.adj[v]: if u != p: self.depth[u] = self.depth[v] + 1 dfs(u, v) dfs(root, -1) def lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u LOG = (len(self.values) - 1).bit_length() for i in range(LOG, -1, -1): if self.depth[u] - (1 << i) >= self.depth[v]: u = self.up[u][i] if u == v: return u for i in range(LOG, -1, -1): if self.up[u][i] != self.up[v][i]: u = self.up[u][i] v = self.up[v][i] return self.parent[u] def path_values(self, u, v): ancestor = self.lca(u, v) path = set() def collect(node, up_to): while node != up_to: path.add(self.values[node]) node = self.parent[node] collect(u, ancestor) collect(v, ancestor) path.add(self.values[ancestor]) return path def distinct_values_in_path(self, u, v): return len(self.path_values(u, v)) def query_distinct_values_in_paths(N, Q, node_values, edges, queries): t = Tree() t.set_values([0] + node_values) for u, v in edges: t.add_edge(u, v) t.preprocess() results = [] for u, v in queries: results.append(t.distinct_values_in_path(u, v)) return results"},{"question":"A pizza restaurant offers a promotion where you can buy a certain number of pizzas at a discounted price. Each pizza costs P dollars originally. However, if you buy N pizzas, you get a K% discount on the total price. You need to calculate the amount of money that you will save by availing the promotion. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers P, N, and K, as described in the problem statement. ------ Output Format ------ For each test case, output on a new line the amount of money that you will save by availing the promotion. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ P ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ 100 ----- Sample Input 1 ------ 3 10 5 20 15 3 10 20 2 50 ----- Sample Output 1 ------ 10 4.5 20 ----- Explanation 1 ------ Test case 1: The original total price for 5 pizzas is 10 × 5 = 50 dollars. With a 20% discount, the discount amount is 50 × 0.20 = 10 dollars. So, you save 10 dollars. Test case 2: The original total price for 3 pizzas is 15 × 3 = 45 dollars. With a 10% discount, the discount amount is 45 × 0.10 = 4.5 dollars. So, you save 4.5 dollars. Test case 3: The original total price for 2 pizzas is 20 × 2 = 40 dollars. With a 50% discount, the discount amount is 40 × 0.50 = 20 dollars. So, you save 20 dollars.","solution":"def calculate_savings(T, test_cases): savings = [] for i in range(T): P, N, K = test_cases[i] original_total_price = P * N discount_amount = original_total_price * (K / 100) savings.append(discount_amount) return savings # Reading input is not handled here since this is defined as a function to be used elsewhere"},{"question":"Given an integer array `nums`, return an array consisting of the running maximum of `nums`. The running maximum of an array is defined as an array where each element at index `i` is the maximum value of the input array from index `0` to `i`. Example: If `nums = [1, 3, 2, 10, 5]`, the running maximum should be `[1, 3, 3, 10, 10]`. Constraints: - The length of `nums` will be between 0 and 10^4. - Each element in `nums` will be between -10^4 and 10^4.","solution":"def running_maximum(nums): Returns an array where each element is the running maximum of the input array `nums`. if not nums: return [] running_max = [] current_max = nums[0] for num in nums: if num > current_max: current_max = num running_max.append(current_max) return running_max"},{"question":"You are given a list of weighted undirected edges in a connected graph and a specific starting node. The objective is to find the shortest path from the starting node to every other node in the graph using Dijkstra\'s algorithm. After computing the shortest paths, you should output a list that contains the shortest distances from the starting node to all other nodes, sorted in ascending order by node index. -----Input----- The input consists of a description of the graph. The first line contains two integers, N and M, where 2 leq N leq 1000 (the number of nodes) and 1 leq M leq 10000 (the number of edges). Each of the next M lines contains three integers u, v, and w (1 leq u, v leq N, 1 leq w leq 10^6) describing an edge between nodes u and v with weight w. The last line contains a single integer S (1 leq S leq N), the starting node. -----Output----- Output a single line with the shortest distances from the starting node to all other nodes in ascending order by node index. If a node is not reachable from the starting node, output -1 for that node. -----Examples----- Sample Input 1: 4 4 1 2 5 1 3 3 2 4 1 3 4 7 1 Sample Output 1: 0 5 3 6 Sample Input 2: 5 6 1 2 3 1 3 4 2 3 2 2 4 6 3 4 1 4 5 2 2 Sample Output 2: 3 0 2 3 5","solution":"import heapq def dijkstra(N, edges, S): graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, N+1)} distances[S] = 0 priority_queue = [(0, S)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, N+1)]"},{"question":"Given a string `s` composed of lowercase letters, return the length of the longest substring without repeating characters. Constraints: - The input string `s` consists only of English letters. - 1 <= len(s) <= 50000 Examples: Example 1: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Example 4: Input: \\"dvdf\\" Output: 3 Explanation: The answer is \\"vdf\\", with the length of 3. Note: - You are required to find the longest substring without repeating characters using a sliding window technique. - Be mindful of the time complexity to ensure the solution is optimized.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"A programming contest is being organized where each participant is required to solve a set of problems. Each problem has a certain points value assigned to it. Participants are allowed to choose which problems to solve with the objective of maximizing their total score. However, they are constrained by a maximum number of problems they can attempt. You are required to write a program that helps determine the maximum possible score a participant can achieve subject to the constraints. -----Input----- The first line contains an integer m (1 le m le 1000) — the maximum number of problems a participant can attempt. The second line contains an integer n (1 le n le 1000) — the total number of available problems. The third line contains n integers p_1, p_2, ldots, p_n (1 le p_i le 1000) — the points value assigned to each problem. -----Output----- Print one integer — the maximum possible score a participant can achieve by attempting at most m problems. -----Examples----- Input 3 5 8 20 15 10 5 Output 45 Input 2 4 1 2 3 4 Output 7 Input 10 10 100 200 300 400 500 600 700 800 900 1000 Output 5500 -----Note----- In the first example, the participant can attempt up to 3 problems. To achieve the maximum score, they should choose the problems with the following points values: 20, 15, and 10, resulting in a total score of 45. In the second example, the participant can attempt up to 2 problems and should choose the problems with points values 3 and 4, resulting in a total score of 7. In the third example, since the number of problems a participant can attempt is equal to the total number of problems available, the maximum possible score is the sum of all points values.","solution":"def max_possible_score(m, n, points): Returns the maximum possible score a participant can achieve by attempting at most m problems. :param m: int, maximum number of problems a participant can attempt :param n: int, total number of available problems :param points: list of int, points value of each problem :return: int, maximum possible score # Sort points in descending order sorted_points = sorted(points, reverse=True) # Sum up the top m points max_score = sum(sorted_points[:m]) return max_score"},{"question":"Alice is collecting special seashells from various beaches along a coastline. Each beach can be represented as a point on a line, and Alice wants to visit exactly N beaches. She has planned her route such that each beach is at a unique coordinate on the line. She wants to collect one seashell from each beach, but there\'s a catch: some of the beaches contain seashells that are magically linked to other seashells, forming pairs such that both seashells in a pair must be collected. If she collects one seashell of a linked pair, she must collect the other one before leaving the beach. Alice starts at a given beach and the goal is to determine the minimum total distance she needs to travel in order to visit all the beaches and collect all the linked pairs of seashells as she progresses. You are given the coordinates of the beaches, the pairs of linked seashells, and Alice\'s starting location. Write an algorithm to find the minimum total distance Alice needs to travel. Input Format: - First line contains an integer T, the number of test cases. - For each test case: - First line contains two integers N, the number of beaches, and M, the number of linked pairs. - The next line contains N space-separated integers, the coordinates of the beaches. - The next M lines contain two integers each, representing the linked pairs of seashells. Output Format: - For each test case, print the minimum total distance Alice needs to travel, rounded to 5 decimal digits. Constraints: - 1 leq T leq 10 - 1 leq N leq 1000 - 0 leq M leq frac{N}{2} - Coordinates of the beaches are distinct integers in range [-10^6, 10^6] Sample Input: ``` 2 3 1 1 3 5 1 3 4 2 -1 2 4 6 -1 2 4 6 ``` Sample Output: ``` 4.00000 11.00000 ``` Explanation: For the first test case: - Beaches are located at coordinates 1, 3, and 5. - The linked pair of seashells are at beaches 1 and 3. - Alice can start at beach 1, move to beach 3 (distance 2), and then move to beach 5 (distance 2). Minimum total distance is 4. For the second test case: - Beaches are located at coordinates -1, 2, 4, and 6. - The linked pairs are at beaches (-1, 2) and (4, 6). - Alice can start at beach -1, move to beach 2 (distance 3), then to 4 (distance 2), and then to 6 (distance 2). Minimum total distance is 7.","solution":"def min_distance_to_collect_shells(T, test_cases): results = [] for test_case in test_cases: N, M, beaches, pairs = test_case beaches.sort() pairs = [(beaches.index(a), beaches.index(b)) for a,b in pairs] # convert pairs to index def distance(a, b): return abs(beaches[a] - beaches[b]) from itertools import permutations min_total_distance = float(\'inf\') for perm in permutations(range(N)): valid = True for a, b in pairs: if abs(perm.index(a) - perm.index(b)) != 1: valid = False break if not valid: continue total_distance = sum(distance(perm[i], perm[i+1]) for i in range(N-1)) min_total_distance = min(min_total_distance, total_distance) results.append(\\"{:.5f}\\".format(min_total_distance)) return results"},{"question":"Given an array of integers nums and an integer k, your task is to rearrange the array in a manner where the average difference between adjacent elements is minimized. Print the rearranged array. Example 1: Input: nums = [1, 3, 7, 8, 5], k = 5 Output: [1, 3, 5, 7, 8] Explanation: Rearranging based on the medians of adjacent elements to minimize average differences. Example 2: Input: nums = [4, 2, 9, 11, 5, 10], k = 6 Output: [2, 4, 5, 9, 10, 11] Explanation: A sorted arrangement ensures that the differences are minimized on average. Your Task: You don\'t need to read or print anything. Your task is to complete the function minimizeDifference(nums, k) which takes nums and k as input parameters and returns the rearranged array with minimized average differences. Expected Time Complexity: O(N log N) (Where N is the number of elements in the array) Expected Space Complexity: O(N) Constraints: 1 <= k <= 100000 1 <= len(nums) <= k 1 <= nums[i] <= 10^18","solution":"def minimizeDifference(nums, k): Rearranges the array `nums` to minimize the average difference between adjacent elements. # Sorting the array minimizes the average difference between adjacent elements. return sorted(nums) # Example usage: # nums = [4, 2, 9, 11, 5, 10] # k = 6 # print(minimizeDifference(nums, k)) # Output: [2, 4, 5, 9, 10, 11]"},{"question":"Lena is planning a marathon training routine where she wants to alternate her running distance each day. On odd-numbered days, she runs a certain distance, and on even-numbered days, she runs a different distance. Given her total number of training days and the respective distances for odd and even days, calculate the total distance she will run by the end of her training. -----Input----- The first line contains a single integer d (1 le d le 10^5) — the total number of training days. The second line contains two integers odd_distance and even_distance (1 le odd_distance, even_distance le 10^4) — the distance Lena runs on odd-numbered and even-numbered days respectively. -----Output----- Print one integer — the total distance Lena will run by the end of her training. -----Example----- Input 5 3 4 Output 17 ----- Note ----- Explanation of the example test: Lena will run as follows: - Day 1: 3 (odd) - Day 2: 4 (even) - Day 3: 3 (odd) - Day 4: 4 (even) - Day 5: 3 (odd) Total distance = 3 + 4 + 3 + 4 + 3 = 17.","solution":"def total_training_distance(d, odd_distance, even_distance): Calculate the total distance Lena will run by the end of her training based on the number of days and distances for odd and even days. :param d: int, total number of training days :param odd_distance: int, distance run on odd-numbered days :param even_distance: int, distance run on even-numbered days :return: int, total distance run total_distance = 0 for day in range(1, d + 1): if day % 2 == 1: # Odd day total_distance += odd_distance else: # Even day total_distance += even_distance return total_distance"},{"question":"Given an array of N integers, your task is to move all negative numbers to the beginning and all positive numbers to the end without changing the relative order of the negative and positive numbers. Perform this operation in O(N) time complexity and O(1) additional space complexity. Example 1: Input: N = 8 arr[] = {1, -2, 3, -4, -1, 4, -6, 5} Output: -2 -4 -1 -6 1 3 4 5 Explanation: The array after separation: -2, -4, -1, -6 are negative numbers and 1, 3, 4, 5 are positive numbers. Example 2: Input: N = 5 arr[] = {-1, -2, -3, -4, -5} Output: -1 -2 -3 -4 -5 Explanation: All the elements are negative, hence no change in the array. Example 3: Input: N = 6 arr[] = {1, 2, 3, 4, 5, 6} Output: 1 2 3 4 5 6 Explanation: All the elements are positive, hence no change in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorderArray() which takes an integer N and an array arr[] of size N as input parameters and returns an array after moving all negatives to the beginning and all positives to the end without changing the relative order of the elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def reorderArray(N, arr): Given an array of N integers, moves all negative numbers to the beginning and all positive numbers to the end without changing their relative order. :param N: Integer, the size of the array :param arr: List of integers :return: List of integers with negative numbers at the beginning and positive numbers at the end # Two pointers approach to maintain the relative order negative_index = 0 for i in range(N): if arr[i] < 0: arr.insert(negative_index, arr.pop(i)) negative_index += 1 return arr"},{"question":"Problem B: Minimum Moves to Equal Array Elements You are given an integer array nums consisting of n integers. You can perform the following operation any number of times: - Choose any element nums[i] and increment it by 1. You need to find the minimum number of operations required to make all elements in the array equal. Input The input begins with a line containing one integer n (1 <= n <= 100,000). Then, the next line contains n integers nums[i] (0 <= nums[i] <= 100,000) which denote the elements of the array. Output Print a single integer representing the minimum number of operations required to make all elements in the array equal. Examples Input 3 1 2 3 Output 3 Input 4 1 1 1 1 Output 0 Notes In the first example, the array is transformed as follows with the minimal number of operations: - Increment the second element (2) to 3 (total operations: 1) - Increment the first element (1) to 2 (total operations: 2) - Increment the first element (2) to 3 (total operations: 3) In the second example, all elements are already equal, so no operations are required.","solution":"def min_moves(nums): Return the minimum number of moves required to make all array elements equal. if not nums: return 0 max_num = max(nums) moves = sum(max_num - num for num in nums) return moves"},{"question":"Given a sequence of integers, remove the duplicates such that each element appears only once and return the resulting sequence sorted in ascending order. Example 1: Input: arr = [4, 5, 9, 0, 4, 2, 9] Output: [0, 2, 4, 5, 9] Explanation: After removing duplicates and sorting, the sequence is [0, 2, 4, 5, 9]. Example 2: Input: arr = [1, 3, 3, 3, 3] Output: [1, 3] Explanation: After removing duplicates and sorting, the sequence is [1, 3]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function removeAndSort(arr) which takes a list of integers as input parameter and returns a list of integers containing no duplicates, sorted in ascending order. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def removeAndSort(arr): Removes duplicates from the array and returns the sorted sequence. Parameters: arr (list): A list of integers Returns: list: A list of integers sorted in ascending order without duplicates # Convert the list to a set to remove duplicates unique_elements = set(arr) # Convert the set back to a list and sort it sorted_unique_elements = sorted(unique_elements) return sorted_unique_elements"},{"question":"Problem: Given a series of phone numbers, each represented by a string of digits, you are to compute the canonical form of these phone numbers. The canonical form is determined by grouping numbers into units of two, separated by hyphens. For example, the number \\"1234567890\\" should be transformed to \\"12-34-56-78-90\\". If the number of digits is odd, the last number group should contain three digits. For example, \\"123456789\\" should be transformed to \\"12-34-56-789\\". Write a function to convert a given list of phone numbers to their canonical forms. # Input: - The input consists of a sequence of strings, one string per line, each representing a phone number. - Each phone number will contain only digits and will have a length between 1 and 15, inclusive. - The input is terminated by an empty line. # Output: - Output will be the canonical forms of the phone numbers, one per line. # Example: Input: ``` 1234567890 987654321 0 9 ``` Output: ``` 12-34-56-78-90 98-76-54-321 0 9 ``` # Constraints: - There will be no leading or trailing whitespace in the input. - The input phone numbers will not contain any separators other than digits.","solution":"def canonical_phone_numbers(numbers): def to_canonical(number): if len(number) <= 3: return number parts = [] while len(number) > 3: parts.append(number[:2]) number = number[2:] parts.append(number) return \'-\'.join(parts) return [to_canonical(number) for number in numbers] def parse_input(input_string): return [line for line in input_string.splitlines() if line] def format_output(output_list): return \'n\'.join(output_list)"},{"question":"You are given a string s containing only alphabets and digits. You need to remove all invalid parentheses from the string in order to create the longest possible valid parenthesis subsequence. The input string s may contain multiple types of parentheses: (), {}, [], <>. A valid parenthesis string must be properly closed and nested, for example, \\"{[()]}\\" is valid but \\"{[(])}\\" is not. Your task is to find the longest valid parenthesis subsequence of the input string and return it. -----Input----- The only line contains a non-empty string s, with a mixture of alphabetical characters, digits, and parentheses of four kinds. The length of s does not exceed 10^6. -----Output----- Output the longest valid parenthesis subsequence possible from the input string. If no valid subsequence exists, print an empty string. -----Examples----- Input a{b[c<d>e]f}g Output {[<>]} Input {(a)b]c Output ()","solution":"def longest_valid_parenthesis_subsequence(s): pairs = { \'(\': \')\', \'{\': \'}\', \'[\': \']\', \'<\': \'>\', } open_parentheses = set(pairs.keys()) close_parentheses = set(pairs.values()) stack = [] removed = set() for i, char in enumerate(s): if char in open_parentheses: stack.append((char, i)) elif char in close_parentheses: if stack and pairs[stack[-1][0]] == char: stack.pop() else: removed.add(i) for _, i in stack: removed.add(i) result = \'\'.join([char for i, char in enumerate(s) if i not in removed and char in open_parentheses.union(close_parentheses)]) return result"},{"question":"A company has a binary string S representing a code block which is either all zeros or all ones, at any given point in time. Occasionally, bug fixes or updates may be applied to the code, causing some part of the string to flip (i.e., changing a substring of `1`s to `0`s or vice versa). There are two types of operations allowed: 1. Change any single bit of the string. 2. Flip a contiguous segment of bits, defined by a start index and an end index. Given the initial binary string S, determine the minimum number of operations required to make the entire string to consist of all `1`s. -----Input----- The first line of input contains a single integer N (1 le N le 1000000), the length of the binary string. The second line contains a binary string of length N. -----Output----- The first and only line of output must contain the minimum number of operations required. -----Examples----- Sample Input 1: 7 1100110 Sample Output 1: 1 Sample Input 2: 5 00000 Sample Output 2: 1","solution":"def min_operations_to_make_all_ones(S): Given a binary string S, determine the minimum number of operations required to make the entire string consist of all `1`s. if \'0\' not in S: return 0 return 1 # Read input def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) S = data[1] print(min_operations_to_make_all_ones(S)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of integers and you need to determine if there exists a subset of the list that adds up to a given target sum. ------ Input Format ------ - The first line of input contains two space-separated integers n and target, where n is the number of integers in the list and target is the target sum. - The next line contains n space-separated integers representing the list of integers. ------ Output Format ------ Output \\"YES\\" (without quotes) if there exists a subset of the list with a sum equal to target. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ n ≤ 20 0 ≤ target ≤ 1000 1 ≤ integers ≤ 100 ----- Sample Input 1 ------ 5 9 3 34 4 12 5 2 ----- Sample Output 1 ------ YES ----- explanation 1 ------ There exists a subset {4, 5} that adds up to the target sum 9. ----- Sample Input 2 ------ 5 30 3 34 4 12 5 2 ----- Sample Output 2 ------ NO ----- explanation 2 ------ There is no subset that adds up to the target sum 30.","solution":"def has_subset_sum(nums, target): Determines if there exists a subset of nums that adds up to the target sum. n = len(nums) dp = [False] * (target + 1) dp[0] = True # A sum of 0 can always be achieved with an empty set. for num in nums: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\" # Example of implementing the function based on input format def determine_subset_sum(n, target, nums): return has_subset_sum(nums, target)"},{"question":"You are tasked with building an arcade game simulation in which a player has to control a character to move through a grid filled with obstacles. The grid is a 2D plane and is represented as an m x n matrix where each cell can either be empty, occupied by an obstacle, or be the initial position of the player. - The player starts at a specific position given in the matrix which is denoted by \'P\'. - Empty cells are denoted by \'.\' - Obstacles are denoted by \'#\' The player can move up (U), down (D), left (L), or right (R). The goal is to move from the initial position to any other empty cell without stepping on obstacles or moving out of the grid boundaries. Implement a function that simulates the movements of the player to ensure they do not hit an obstacle or move out of the grid boundaries. -----Constraints----- - The matrix dimensions m and n will be integers such that 1 ≤ m, n ≤ 50 - The initial position will always be on an empty cell. -----Input----- The input is given in the following format: - m n - m lines each containing n characters (either \'P\', \'.\', or \'#\') - An integer k representing the number of movements - A string of length k containing the directions of movements (U, D, L, R). -----Output----- Print \\"Success\\" if all given movements can be executed without the player hitting an obstacle or moving out of the grid boundaries, otherwise print \\"Failure\\". -----Sample Input----- 5 5 # #...# #.#.# #P..# # 5 UURRD -----Sample Output----- Success -----Explanation----- Starting from the initial position \'P\' at (3, 1), the player moves: 1. U: (2, 1) 2. U: (1, 1) 3. R: (1, 2) 4. R: (1, 3) 5. D: (2, 3) All these moves are valid as they do not hit an obstacle or move out of bounds, so the output is \\"Success\\".","solution":"def simulate_movements(grid, start_pos, movements): Simulates the movements of the player on the grid. Args: grid (list): A 2D list representing the grid. start_pos (tuple): A tuple representing the starting position (x, y). movements (str): A string containing the movements sequence. Returns: str: \\"Success\\" if movements can be executed, \\"Failure\\" otherwise. m, n = len(grid), len(grid[0]) x, y = start_pos move_dict = {\'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1)} for move in movements: dx, dy = move_dict[move] x += dx y += dy if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'#\': return \\"Failure\\" return \\"Success\\" def find_player(grid): for i, row in enumerate(grid): for j, cell in enumerate(row): if cell == \'P\': return (i, j) def main(matrix, movements): grid = [list(row) for row in matrix] start_pos = find_player(grid) return simulate_movements(grid, start_pos, movements)"},{"question":"Mary is planning her garden and wants to plant a variety of flowers. She has a list of different types of flowers and each type has a specific requirement for sunlight exposure (measured in hours per day). Mary has a setup where she can provide exactly H hours of sunlight per day to any chosen set of flowers. Given the sunlight requirements of all flower types, determine the maximum number of different types of flowers Mary can plant in her garden without exceeding the daily exposure limit of H hours. ------ Input ------ The first line of input contains an integer T, the number of test cases. For each test case, the first line contains two integers N and H - the number of different types of flowers and the total number of hours of sunlight available per day. The second line contains N integers S_1, S_2, ldots, S_N - the sunlight requirements (in hours) for each type of flower. ------ Output ------ For each test case, output the maximum number of different types of flowers Mary can plant without exceeding H hours of sunlight. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 100 1 ≤ H ≤ 1000 1 ≤ S_i ≤ 100 for each valid i ----- Sample Input 1 ------ 2 5 10 2 3 4 5 1 3 5 2 2 3 ----- Sample Output 1 ------ 4 2 ----- Explanation ------ In the first test case, Mary can plant flowers with sunlight requirements 1, 2, 3, and 4 to exactly consume all 10 available hours (1+2+3+4 = 10). In the second test case, Mary can choose any two flowers with requirements 2 and 3 or the two flowers with requirements 2 and 2 to not exceed the 5-hour limit.","solution":"def max_flowers(N, H, S): Determines the maximum number of different types of flowers Mary can plant without exceeding the total number of hours of sunlight (H) per day. Args: N : int : Number of different types of flowers H : int : Total number of hours of sunlight available per day S : list : Sunlight requirements for each type of flower Returns: int : Maximum number of different types of flowers Mary can plant S.sort() count = 0 total_hours = 0 for s in S: if total_hours + s <= H: total_hours += s count += 1 else: break return count def solve_flower_problem(T, cases): results = [] for i in range(T): N, H, S = cases[i] results.append(max_flowers(N, H, S)) return results"},{"question":"Given an array of integers, implement a function that determines whether the array is a palindrome. An array is a palindrome if it reads the same backward as forward. - Do not use any built-in reverse function or methods. - You should accomplish this with a time complexity of O(n) and a space complexity of O(1). Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n space-separated integers a_i (−10^9 ≤ a_i ≤ 10^9), the elements of the array. Output - Output \\"YES\\" if the array is a palindrome, otherwise output \\"NO\\". Example Input: 5 1 2 3 2 1 Output: YES Input: 4 1 2 3 4 Output: NO","solution":"def is_palindrome_array(arr): Determines whether the given array is a palindrome. :param arr: List[int], the given array of integers. :return: str, \\"YES\\" if the array is a palindrome, otherwise \\"NO\\". left, right = 0, len(arr) - 1 while left < right: if arr[left] != arr[right]: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"— I need a plan to organize these dossiers systematically... — What are these dossiers about? — They contain crucial details related to ongoing research projects... — Let\'s devise an algorithm to help you out! You are given n dossiers, each represented by an integer ai which describes its priority level. The goal is to efficiently manage these dossiers by performing a number of operations. There are three types of operations available: * 1 l r x: For each i such that l ≤ i ≤ r, increment ai by x. * 2 l r x: For each i such that l ≤ i ≤ r, decrement ai by x. * 3 l r: Print the maximum priority level among the dossiers in the index range [l, r]. Input The first line contains three integers n (1 ≤ n ≤ 105), m (1 ≤ m ≤ 105), and vmax (1 ≤ vmax ≤ 109). The next n lines contain the initial values of the dossiers, one integer per line. The following m lines describe the operations. Each operation is given in the following format: - For operation type 1: 1 l r x - For operation type 2: 2 l r x - For operation type 3: 3 l r Here l and r are the range boundaries (1 ≤ l ≤ r ≤ n) and x is the value to increment or decrement the priority level by (1 ≤ x ≤ vmax for types 1 and 2). Output For each operation of type 3, output a single line containing the maximum priority level in the specified range. Examples Input 10 5 1000000000 5 3 8 1 6 4 9 2 7 5 3 1 3 7 2 2 2 5 1 3 1 7 1 6 10 5 3 6 10 Output 10 14 Note In the provided example: - After the first operation, the array becomes [5, 5, 10, 3, 8, 6, 11, 4, 9, 6]. - After the second operation, the array becomes [5, 4, 9, 2, 7, 6, 11, 4, 9, 6]. - The maximum priority in the range [1, 7] is 11. - After the fourth operation, the array becomes [5, 4, 9, 2, 7, 11, 16, 9, 14, 11]. - The maximum priority in the range [6, 10] is 16.","solution":"class Dossiers: def __init__(self, n, dossiers): self.dossiers = dossiers def increment(self, l, r, x): for i in range(l-1, r): self.dossiers[i] += x def decrement(self, l, r, x): for i in range(l-1, r): self.dossiers[i] -= x def max_priority(self, l, r): return max(self.dossiers[l-1:r])"},{"question":"A company network consists of n computers connected by cables. Each cable connects two computers and can only transfer data in one direction. The company\'s security team wants to place exactly k special antivirus programs in the network. Each program can only reside on one computer and can neutralize any virus that passes through it. Given the network\'s configuration and the positions of the antivirus programs, determine the maximum number of different cables that can be protected by at least one antivirus program. A cable is considered protected if either its starting or ending computer has an antivirus program. Input First line contains two integers n and k (2 ≤ n ≤ 100,000, 1 ≤ k ≤ n) — the number of computers and the number of antivirus programs. Second line contains k distinct integers which denote the positions of the k computers where the antivirus programs are installed. Next m lines contain two integers a and b (1 ≤ a, b ≤ n) — indicating a directed cable from computer a to computer b. Output A single integer, the maximum number of cables that can be protected by the antivirus programs. Examples Input 6 3 2 4 6 1 2 2 3 3 4 4 5 5 6 Output 5 Input 4 1 3 1 2 2 3 3 4 4 1 Output 2 Note In the first example, the antivirus programs can be placed on computers 2, 4, and 6. This ensures that all cables are protected because every start or end point of each cable has an antivirus program installed: - Cable 1->2: protected by antivirus on 2. - Cable 2->3: protected by antivirus on 2. - Cable 3->4: protected by antivirus on 4. - Cable 4->5: protected by antivirus on 4. - Cable 5->6: protected by antivirus on 6. In the second example, the antivirus program on computer 3 ensures that the cables 2->3 and 3->4 are protected.","solution":"def max_protected_cables(n, k, antivirus_positions, cables): Returns the maximum number of different cables protected by at least one antivirus program. protected = 0 antivirus_set = set(antivirus_positions) for a, b in cables: if a in antivirus_set or b in antivirus_set: protected += 1 return protected # Example usage: # n = 6 # k = 3 # antivirus_positions = [2, 4, 6] # cables = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)] # print(max_protected_cables(n, k, antivirus_positions, cables)) # Output: 5"},{"question":"You are leading a secret agency and have been assigned to decode a series of messages intercepted by your team. Each message is a sequence of numbers representing characters encoded by a secret method. Your task is to decode the message to its original text. The encoding works as follows: - Numbers from 1 to 26 are mapped to letters \'a\' to \'z\' respectively (e.g., 1 → \'a\', 2 → \'b\', ..., 26 → \'z\'). - To add a layer of complexity, pairs of digits can also represent characters (e.g., if the message contains \\"10\\", it can be decoded as \'j\'). Given an encoded message, determine the number of ways it can be decoded. Input: - A single line containing a string of digits, representing the encoded message. The length of the string is between 1 and 1000 characters inclusive, and it does not contain leading zeros. Output: - Print a single integer — the number of ways to decode the message. Examples Input 12 Output 2 Input 226 Output 3 Input 0 Output 0 Note In the first test case: - \\"12\\" can be decoded as \\"ab\\" (1 → \'a\' and 2 → \'b\') or \\"l\\" (12 → \'l\'). So there are 2 ways to decode it. In the second test case: - \\"226\\" can be decoded as \\"bbf\\" (2 → \'b\', 2 → \'b\', 6 → \'f\'), \\"bf\\" (22 → \'v\', 6 → \'f\'), or \\"bz\\" (2 → \'b\', 26 → \'z\'). So there are 3 ways to decode it. In the third test case: - \\"0\\" cannot be decoded into any valid letter, so there are 0 ways to decode it.","solution":"def num_decodings(s): Calculate the number of ways to decode the message given encoded by the defined method. :param s: string representing the encoded message :return: integer number of decoding ways if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): if 1 <= int(s[i-1:i]) <= 9: dp[i] += dp[i-1] if 10 <= int(s[i-2:i]) <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"A giant warehouse has multiple connected sections forming a network. Each section is represented as a node while the connections between sections are represented as edges. Each connection has a certain weight representing the cost to travel between the two sections. There are two types of connections: direct and indirect. Direct connections are given initially, and indirect connections can be formed by combining multiple direct connections. Your task is to write a program that calculates the minimum cost required to connect all sections of the warehouse so that any section is reachable from any other section. If it is not possible to connect all the sections, the program should return -1 for that case. # Input The input consists of multiple test cases. The first line contains the number of cases. For each case, the first line contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 4950), where n is the number of sections and m is the number of direct connections. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 10^6), describing a direct connection between section u and section v with cost w. All described connections are bidirectional. # Output For each case, output the minimum cost to connect all sections in a line. If it is impossible to connect all sections, output -1. # Example Input ``` 2 4 5 1 2 1 1 3 2 1 4 4 2 3 3 3 4 1 3 3 1 2 5 1 3 10 2 3 4 ``` Output ``` 4 9 ```","solution":"import heapq def minimum_cost_to_connect_all_sections(n, m, connections): def kruskal(n, edges): parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False edges.sort(key=lambda x: x[2]) min_cost = 0 edges_used = 0 for u, v, w in edges: if union(u, v): min_cost += w edges_used += 1 if edges_used == n - 1: return min_cost return -1 edges = [(u-1, v-1, w) for u, v, w in connections] return kruskal(n, edges) def process_cases(input_data): input_lines = input_data.strip().split(\'n\') num_cases = int(input_lines[0]) case_idx = 1 results = [] for _ in range(num_cases): n, m = map(int, input_lines[case_idx].split()) case_idx += 1 connections = [] for _ in range(m): u, v, w = map(int, input_lines[case_idx].split()) connections.append((u, v, w)) case_idx += 1 result = minimum_cost_to_connect_all_sections(n, m, connections) results.append(str(result)) return \\"n\\".join(results)"},{"question":"A machine on the factory floor receives an incoming stream of product orders, each with a specified priority level. The factory manager needs to continuously monitor and manage these orders based on their priority level using a priority queue. Your task is to write a program that processes and manages these orders efficiently. The priority of the orders is defined such that a lower numerical value indicates a higher priority (i.e., priority 1 is higher than priority 2). You will be given two types of commands: - `add P` : Adds a new order with priority `P` to the queue. - `process` : Removes and processes the highest priority order currently in the queue. If there are multiple orders with the same priority, the one that was added first should be processed first. If the queue is empty, print `-1`. Input Format The first line contains an integer `M`, the number of commands. Each of the following `M` lines contains a command in one of the two formats mentioned above. Output Format For each `process` command, print the priority of the order being processed. If the queue is empty at the time of a `process` command, print `-1`. Constraints 1 ≤ M ≤ 10^5 1 ≤ P ≤ 10^9 Sample Input 7 add 5 add 3 process add 1 process process process Sample Output 3 1 5 -1 Explanation The sequence of events will be: 1. add 5 -> queue is [5] 2. add 3 -> queue is [3, 5] (3 has higher priority) 3. process -> processes and removes 3, queue is [5] -> output 3 4. add 1 -> queue is [1, 5] (1 has highest priority) 5. process -> processes and removes 1, queue is [5] -> output 1 6. process -> processes and removes 5, queue is [] -> output 5 7. process -> queue is empty -> output -1","solution":"import heapq def process_orders(commands): Processes a list of commands to manage product orders by priority. :param commands: List of commands where each command is either \\"add P\\" or \\"process\\" :type commands: List[str] :return: List of results for \\"process\\" commands :rtype: List[int] min_heap = [] order_count = 0 # To maintain the order of entries with the same priority results = [] for command in commands: if command.startswith(\\"add\\"): _, priority = command.split() priority = int(priority) heapq.heappush(min_heap, (priority, order_count)) order_count += 1 elif command == \\"process\\": if min_heap: result = heapq.heappop(min_heap)[0] results.append(result) else: results.append(-1) return results"},{"question":"Write a function that takes an integer `n` and returns the sum of all the even numbers from 1 to `n`, inclusive. If `n` is less than 1, the function should return 0. **Function Signature**: `def sum_even_numbers(n: int) -> int` # Example **Input** ```python n = 10 ``` **Output** ```python 30 ``` **Input** ```python n = 7 ``` **Output** ```python 12 ``` **Input** ```python n = -5 ``` **Output** ```python 0 ```","solution":"def sum_even_numbers(n: int) -> int: Returns the sum of all the even numbers from 1 to n, inclusive. If n is less than 1, the function returns 0. if n < 1: return 0 return sum(i for i in range(2, n + 1, 2))"},{"question":"You are given a string containing uppercase English letters. Your task is to write a function that finds the k-th most frequent character in the string. If there are ties, the alphabetically smaller character should be considered greater. For example, given the string \\"BANANA\\" and k = 1, the function should return \'A\', since \'A\' appears three times, which is the most frequent character. Given the same string and k = 2, the function should return \'N\', since \'N\' appears twice, which is the second most frequent character. If k is larger than the number of distinct characters in the string, the function should return None. Function Signature: def k_th_most_frequent_char(s: str, k: int) -> str or None Constraints: - The string s will contain only uppercase English letters (A-Z). - The length of the string s will be at least 1 and at most 500. - k will be a positive integer.","solution":"def k_th_most_frequent_char(s: str, k: int) -> str or None: from collections import Counter # Count frequency of each character freq_count = Counter(s) # Create a sorted list of (char, frequency) tuples based on frequency in descending order # In case of a tie, it will automatically use alphabetical order because of how Dictionary works sorted_freq = sorted(freq_count.items(), key=lambda item: (-item[1], item[0])) if k <= len(sorted_freq): return sorted_freq[k - 1][0] else: return None"},{"question":"Given a set of activities where each activity has a start time and a finish time, determine the maximum number of activities that can be performed by a single person, assuming the person can only work on a single activity at a time. The input consists of an integer n which indicates the number of activities, followed by n pairs of integers where the i-th pair represents the start and finish times of the i-th activity. Implement a function `maxActivities()` that takes n and a list of pairs representing the activities and returns the maximum number of activities that can be completed. # Constraints: - 1 ≤ n ≤ 10^4 - 1 ≤ start[i] < finish[i] ≤ 10^6 # Expected Time Complexity: O(n log n) # Expected Auxiliary Space: O(1) # Example: Example 1: Input: n = 6 activities = [(1, 2), (3, 4), (0, 6), (5, 7), (8, 9), (5, 9)] Output: 4 Explanation: The person can complete a maximum of 4 activities: (1, 2), (3, 4), (5, 7), and (8, 9). Example 2: Input: n = 3 activities = [(10, 20), (12, 25), (20, 30)] Output: 2 Explanation: The person can complete a maximum of 2 activities: (10, 20) and (20, 30). Write your solution as an efficient algorithm and ensure it performs within the constraints.","solution":"def maxActivities(n, activities): Returns the maximum number of non-overlapping activities that can be performed. Arguments: n -- int, number of activities activities -- list of tuples where each tuple contains (start time, finish time) of an activity Returns: int -- maximum number of non-overlapping activities # Sort activities by their finish time activities.sort(key=lambda x: x[1]) # Initialize count of max activities count = 0 last_finish_time = 0 # Iterate through the activities for start, finish in activities: if start >= last_finish_time: # If the start time of current activity is greater or equal to the last finish time # increment count and update the last_finish_time to the finish time of the current activity count += 1 last_finish_time = finish return count"},{"question":"You are given a string `s` consisting of lowercase letters and an integer `k`. Your task is to return the lexicographically smallest string that can be obtained by applying the following operation exactly `k` times: 1. In one operation, select any character in the string and move it to the beginning of the string. For example, if the string is \\"cba\\" and you move the character \'a\' to the beginning, the string becomes \\"acb\\". # Input - The first line of input consists of an integer `t` denoting the number of test cases. - For each test case, the first line contains a string `s`. - The second line contains the integer `k`. # Output For each test case, print the lexicographically smallest string possible after performing exactly `k` operations. # Constraints - 1 ≤ t ≤ 100 - 1 ≤ |s| ≤ 50 - 0 ≤ k ≤ |s| # Sample Input ``` 2 cba 1 dacb 2 ``` # Sample Output ``` acb abcd ``` # Explanation In the first test case: - Initial string is \\"cba\\". - With one operation, you can move \'a\' to the beginning, resulting in \\"acb\\", which is the lexicographically smallest string possible. In the second test case: - Initial string is \\"dacb\\". - With two operations, you can move \'a\' to the beginning and then \'b\' to the beginning, resulting in \\"abcd\\", which is the lexicographically smallest string possible after 2 operations.","solution":"def lexicographically_smallest_string(s, k): Returns the lexicographically smallest string possible after performing exactly k moves. if k == 0: return s # No operations, return the string as is elif k > 1: return \'\'.join(sorted(s)) # If k > 1, we can sort the string else: # If k is 1, we need to try all possible moves smallest_string = s for i in range(len(s)): moved_char_string = s[i] + s[:i] + s[i + 1:] if moved_char_string < smallest_string: smallest_string = moved_char_string return smallest_string def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(lexicographically_smallest_string(s, k)) return results"},{"question":"DAC Corporation is organizing a contest where competitors build bridges to connect various islands in Alpha Sea. Each bridge connects two islands directly and does not intersect with another. You are given a list of bridges that have already been built. Now, you need to determine the minimum number of new bridges that must be built so that all islands are connected directly or indirectly. Input: The first line contains an integer N, the number of islands in the Alpha Sea. The second line contains an integer M, the number of existing bridges. Each of the next M lines contains 2 space-separated integers u and v, indicating that there is a bridge connecting islands u and v. Output: Output one integer, the minimum number of new bridges required to connect all the islands. Constraints: 1 ≤ N ≤ 10^4 0 ≤ M ≤ 10^4 SAMPLE INPUT 5 2 1 2 3 4 SAMPLE OUTPUT 2 Explanation There are 5 islands and two existing bridges: one between islands 1 and 2, and another between islands 3 and 4. Currently, islands 1 and 2 are connected, and islands 3 and 4 are connected, but none of these bridges connect these two groups. Island 5 is isolated. To connect all islands, we can build one bridge connecting island 2 to island 3 and another bridge connecting island 4 to island 5. Therefore, the answer is 2.","solution":"def min_new_bridges(N, bridges): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adj_list = defaultdict(list) for u, v in bridges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (N + 1) num_components = 0 for i in range(1, N + 1): if not visited[i]: bfs(i, visited, adj_list) num_components += 1 return num_components - 1"},{"question":"Given a string _S_, a _rotation_ of _S_ is any string that can be obtained by moving some characters from the beginning of _S_ to the end while maintaining the order of the remaining characters. For example, the rotations of the string \\"abc\\" are \\"abc\\", \\"bca\\", and \\"cab\\". Example 1: For `S = \\"abcdef\\"`, some rotations include \\"abcdef\\", \\"bcdefa\\", and \\"cdefab\\". Example 2: For `S = \\"aaa\\"`, the rotations are all the same: \\"aaa\\". Example 3: For `S = \\"xyz\\"`, the rotations are \\"xyz\\", \\"yzx\\", and \\"zxy\\". Your task is to: 1. Write a function to list all possible rotations of a given string _S_. 2. Write a function to determine whether two given strings are rotations of each other. Write the functions `all_rotations(S)` and `is_rotation(S1, S2)` such that: - `all_rotations(S)` returns a list of all possible rotations of the string _S_. - `is_rotation(S1, S2)` returns `True` if `S2` is a rotation of `S1`, and `False` otherwise.","solution":"def all_rotations(S): Returns a list of all possible rotations of the string S. rotations = [] for i in range(len(S)): rotations.append(S[i:] + S[:i]) return rotations def is_rotation(S1, S2): Returns True if S2 is a rotation of S1, and False otherwise. if len(S1) != len(S2): return False return S2 in (S1 + S1)"},{"question":"You are participating in a data classification project involving movie reviews. Each review is categorized as a positive, negative, or neutral review based on its sentiment. The sentiments are labeled with integers where 1 represents a positive review, 2 represents a negative review, and 3 represents a neutral review. Each review is stored in a file where: - The first line of the file contains a unique review identifier. - The second line contains the review title. - All subsequent lines contain the full text of the review. Your task is to write a program that identifies the sentiment of a given review based on its content. Input - The first line contains an integer id (0 ≤ id ≤ 10^6) — the review identifier. - The second line contains the title of the review. - The third and the subsequent lines contain the text of the review. It is guaranteed that the size of any given review will not exceed 20 kilobytes. Output Print an integer from 1 to 3, inclusive — the sentiment of the review (1 for positive, 2 for negative, and 3 for neutral). Examples Given the following input: ``` 45 Amazing Experience I loved the plot and the acting was superb. Highly recommend this movie to everyone! ``` The correct output would be: ``` 1 ``` Given the following input: ``` 128 Waste of Time The movie was boring and the storyline was predictable. Not worth watching at all. ``` The correct output would be: ``` 2 ``` Given the following input: ``` 570 Just Okay The movie was fine, nothing extraordinary. It had its moments but overall, it\'s an average film. ``` The correct output would be: ``` 3 ```","solution":"def identify_sentiment(review_content): Identifies and returns the sentiment of a given review based on its content. Args: review_content (str): The full content of a review including identifier, title, and text. Returns: int: A number representing sentiment (1 for positive, 2 for negative, 3 for neutral). positive_keywords = [\\"loved\\", \\"amazing\\", \\"superb\\", \\"highly recommend\\"] negative_keywords = [\\"boring\\", \\"terrible\\", \\"worst\\", \\"not worth\\"] neutral_keywords = [\\"fine\\", \\"okay\\", \\"average\\", \\"nothing extraordinary\\"] lines = review_content.split(\'n\') review_text = \' \'.join(lines[2:]) positive_score = sum(word in review_text for word in positive_keywords) negative_score = sum(word in review_text for word in negative_keywords) neutral_score = sum(word in review_text for word in neutral_keywords) if positive_score > negative_score and positive_score > neutral_score: return 1 elif negative_score > positive_score and negative_score > neutral_score: return 2 else: return 3"},{"question":"In a village, there is a square field with dimensions n x n, where n is an odd integer (3 <= n <= 99). The village leader wants to plant trees in the field such that every tree is planted exactly in one of the cells of the field, and the number of trees in each row and each column is even. Your task is to determine the minimum number of trees that need to be planted to satisfy this condition. Example: Input: n = 3 Output: 4 Explanation: One possible arrangement: 0 1 1 1 1 0 1 0 1 Input: n = 5 Output: 4 Explanation: One possible arrangement: 0 1 0 1 1 1 0 1 1 0 0 1 1 0 1 1 0 0 1 2 1 1 1 2 0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function arrange_trees() which takes the integer n as input and returns an integer representing the minimum number of trees that need to be planted. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 3 <= n <= 99 n is odd. Note: While solving the problem, you need to ensure that no row or column has an odd number of trees. This may involve finding patterns or general properties of even numbers in grids.","solution":"def arrange_trees(n): Returns the minimum number of trees needed in a square field of size n x n, such that each row and each column contains an even number of trees. Parameters: n (int): Size of the square field (odd integer between 3 and 99) Returns: int: Minimum number of trees required if n % 2 == 1: return n return n - 1 # should never reach here as n is always odd as per constraints"},{"question":"In a busy metropolitan city, there are various intersections connected by roads, and the town\'s traffic control has decided to conduct an analysis of the traffic flow through these intersections. They have gathered data about the intersections and the roads that connect them. Each intersection is represented by a number from 1 to N, and each road is a one-way road represented by a pair of integers (u, v) indicating a directed road from intersection u to intersection v. The task is to compute the longest possible path from any intersection such that no intersection is revisited on that path. If there are multiple paths with the same length, any one of them will be considered. ------ Input ------ First line contains a single integer T, the number of test cases. For each test case: - The first line contains two integers N and M, the number of intersections and the number of roads respectively. - The next M lines each contain two integers u and v, representing a road from intersection u to intersection v. ------ Output ------ For each test case, output a single integer representing the length of the longest path. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ N*(N-1) 1 ≤ u, v ≤ N ------ Subtasks ------ Subtask #1: M ≤ 100 (20 points) Subtask #2: M ≤ 500 (30 points) Subtask #3: N ≤ 1000, original constraints (50 points) ----- Sample Input 1 ------ 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 ----- Sample Output 1 ------ 3 2 ----- Explanation 1 ------ In the first test case: One possible longest path is 1 -> 2 -> 3 -> 4, which has length 3. In the second test case: One possible longest path is 1 -> 2 -> 3, which has length 2.","solution":"def longest_path(N, M, roads): from collections import defaultdict, deque # Create graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) # Function to perform Depth First Search def dfs(node, visited, memo): if node in memo: return memo[node] max_length = 0 visited.add(node) for neighbor in graph[node]: if neighbor not in visited: max_length = max(max_length, 1 + dfs(neighbor, visited, memo)) visited.remove(node) memo[node] = max_length return max_length # Calculate the longest path for each testcase max_path_length = 0 memo = {} for i in range(1, N + 1): max_path_length = max(max_path_length, dfs(i, set(), memo)) return max_path_length def handle_test_cases(test_cases): results = [] for N, M, roads in test_cases: results.append(longest_path(N, M, roads)) return results"},{"question":"You are given a sequence of n integers and two positive integers x and y. Your task is to determine if you can reorder the sequence in such a way that it satisfies a specific condition: for every pair of consecutive elements a_i and a_(i+1) in the reordered sequence, |a_(i+1) - a_i| should be either x or y. Input The first line contains a single integer n (2 ≤ n ≤ 100000) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. The third line contains two integers x and y (1 ≤ x, y ≤ 10^9). Output Print \\"YES\\" if it is possible to reorder the sequence to meet the condition. Otherwise, print \\"NO\\". Examples Input 4 10 7 3 14 4 3 Output YES Input 3 2 8 11 3 4 Output NO Note In the first example, we can reorder the sequence as [3, 7, 10, 14]. The differences between consecutive elements are 4, 3, and 4, which are x and y. In the second example, there is no possible reorder that satisfies the given condition for consecutive differences.","solution":"def can_reorder(n, sequence, x, y): from collections import defaultdict, deque # Create a dict for adjacency list reflecting x, y differences adj = defaultdict(list) for number in sequence: adj[number].append(number + x) adj[number].append(number - x) adj[number].append(number + y) adj[number].append(number - y) # Use a set to maintain unique elements of the sequence unique_elements = set(sequence) def bfs(start): queue = deque([start]) visited = set([start]) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in adj[node]: if neighbor in unique_elements and neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count == n for num in sequence: if bfs(num): return \\"YES\\" return \\"NO\\""},{"question":"A group of elves is playing a game where they form teams of exactly three players. Each elf has a skill level from 1 to 10, inclusive. The skill level of a team is the sum of the skill levels of its members. The game requires that every team should have a distinct total skill level. Your task is to determine how many distinct ways there are to form teams such that no two teams have the same total skill level. You can form any number of teams, and each elf can only be part of one team. -----Input----- A single integer k (3 ≤ k ≤ 30) — the number of elves. -----Output----- Print a single number — the number of distinct ways to form teams such that no two teams have the same total skill level. If it\'s not possible to form such teams, print 0. -----Examples----- Input 3 Output 1 Input 6 Output 7 Input 7 Output 0 -----Note----- For k = 3, the only team formation possible is having one team, and they will have distinct skill levels. For k = 6, the team formations can be: (1, 2, 3), (1, 4, 5), (2, 3, 5), and so on, ensuring no two teams have the same skill total. For k = 7, it\'s impossible because forming up to 2 full triads while leaving one elf behind would necessarily lead to repeated team skill levels. Ensure your solution is optimized to handle the upper constraints efficiently.","solution":"def count_ways(k): if k < 3 or k % 3 != 0: return 0 # Ensure k is a multiple of 3 n_teams = k // 3 # The minimal sum of a team is 6 (1+2+3) and increases by 3 for each unique team (i.e., 6, 9, 12, ...) sums = set() for i in range(n_teams): sum_value = (3 * i + 6) if sum_value in sums: return 0 sums.add(sum_value) return (k // 3)"},{"question":"You are given a 2D grid consisting of n rows and m columns, where each cell contains a value representing the height at that cell. You can move between adjacent cells horizontally or vertically. You need to process multiple queries about the grid. Each query consists of two parts: - The coordinates of a starting cell (x1, y1) - The coordinates of a target cell (x2, y2) For each query, determine the maximum height of any cell that you would need to move through to reach from the starting cell to the target cell, using the shortest path (minimum number of steps). Write a program that processes these queries efficiently. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the grid. The next n lines contain m integers each, representing the heights of the cells in the grid. Each height is a positive integer not exceeding 10^9. The following line contains one integer q (1 ≤ q ≤ 10^5), the number of queries. The next q lines each contain four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ n, m), representing the coordinates of the starting and target cells for each query. Output Print q integers, each representing the maximum height you would need to move through to reach from the starting cell to the target cell for each query. Example Input 4 4 1 2 3 4 4 5 6 7 7 6 5 4 8 7 6 5 3 1 1 3 3 2 2 4 4 1 4 4 1 Output 6 7 8","solution":"from collections import deque def find_max_height_on_path(grid, start, end): n, m = len(grid), len(grid[0]) x1, y1 = start x2, y2 = end directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(x1, y1, grid[x1][y1])]) visited[x1][y1] = True max_height = grid[x1][y1] while queue: cx, cy, current_max = queue.popleft() if (cx, cy) == (x2, y2): return current_max for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True new_max = max(current_max, grid[nx][ny]) queue.append((nx, ny, new_max)) return -1 # This should not happen for valid input def process_queries(grid, queries): results = [] for x1, y1, x2, y2 in queries: start = (x1-1, y1-1) end = (x2-1, y2-1) results.append(find_max_height_on_path(grid, start, end)) return results"},{"question":"You are given a list of integers which represents the heights of students in a row. Your task is to find out if you can find a subsequence of students that is strictly increasing and of length greater than or equal to 3. If such a subsequence exists, print the elements of the subsequence. Otherwise, print \\"No such subsequence\\". Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of students. The second line contains n integers — the heights of the students. Each height is a positive integer not exceeding 10000. Output If there exists a subsequence that is strictly increasing and of length greater than or equal to 3, print the elements of the subsequence in the order they appear in the input. Otherwise, print \\"No such subsequence\\". Examples Input 5 1 2 3 4 5 Output 1 2 3 Input 4 4 3 2 1 Output No such subsequence Input 6 5 1 5 2 3 6 Output 1 2 3 Input 7 1 5 2 3 4 6 1 Output 1 2 3","solution":"def find_increasing_subsequence(n, heights): Finds a strictly increasing subsequence of length 3 or more in the list of heights. Returns the subsequence if found, otherwise returns \\"No such subsequence\\". if n < 3: return \\"No such subsequence\\" # To track the subsequence subsequence = [] for height in heights: if not subsequence or height > subsequence[-1]: subsequence.append(height) else: # Try to replace to maintain the smallest possible values for idx in range(len(subsequence)): if height <= subsequence[idx]: subsequence[idx] = height break if len(subsequence) >= 3: return subsequence[:3] return \\"No such subsequence\\" # Example usage: # n = 6 # heights = [5, 1, 5, 2, 3, 6] # print(find_increasing_subsequence(n, heights)) # Output: [1, 2, 3]"},{"question":"You are given a 2D grid of size n times m initialized with these four possible values: - \'W\': Represents water - \'L\': Represents land - \'F\': Represents forest - \'M\': Represents mountain You need to convert all the forest (\'F\') cells to water (\'W\') cells such that no two forest cells are adjacent vertically or horizontally in the final grid. Write a program to find the minimum number of conversions required to achieve the goal. -----Input----- - The first line contains two integers, n and m, indicating the dimensions of the grid. - The next n lines each contain a string of length m consisting of the characters \'W\', \'L\', \'F\', and \'M\'. -----Output----- Print one line containing the minimum number of conversions required. -----Constraints----- - 1 le n, m le 1000 - The grid contains at least one forest (\'F\') cell -----Sample Input----- 4 5 WWLFW LLFFF MWLFW WLFLF -----Sample Output----- 3 -----Explanation----- One possible way to minimize the number of conversions is as follows: - Convert the forest cell in position (1, 3) to water. - Convert the forest cell in position (2, 4) to water. - Convert the forest cell in position (3, 3) to water. This leaves one forest cell in position (4, 4) that remains unchanged, as it is not adjacent to any other forest cell. Hence, the total number of conversions is 3.","solution":"def min_conversions(n, m, grid): Function to find the minimum number of conversions required to ensure no two forest cells are adjacent in the grid. Params: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list): 2D grid as a list of strings. Returns: int: Minimum number of conversions required. # Convert the grid to a mutable array grid = [list(row) for row in grid] def check_adjacency(i, j): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \'F\': return True return False conversions = 0 for i in range(n): for j in range(m): if grid[i][j] == \'F\' and check_adjacency(i, j): grid[i][j] = \'W\' conversions += 1 return conversions"},{"question":"Write a function that accepts an array of integers and returns the sum of all even numbers in the array. If the array is empty, the function should return 0. Example: `[1, 2, 3, 4, 5, 6]` should return `12` (since 2 + 4 + 6 = 12)","solution":"def sum_of_evens(arr): Returns the sum of all even numbers in the array. If the array is empty, returns 0. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function to check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example: Input: s1 = \\"listen\\", s2 = \\"silent\\" Output: True Input: s1 = \\"hello\\", s2 = \\"billion\\" Output: False","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. # Remove any whitespace and convert to lowercase for accurate comparison s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() # Anagrams will have the same characters in the same frequency return sorted(s1) == sorted(s2)"},{"question":"You are given an array of integers and two queries. The array might be very large, so optimal performance is required for your solution. For each query, you need to find the smallest subarray whose sum is greater than or equal to a given value. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Each of the next q lines contains a single integer x (1 ≤ x ≤ 10^18) — the value that the sum of the subarray should be greater than or equal to. Output For each query, output the length of the smallest subarray which has a sum greater than or equal to x. If no such subarray exists, output -1. Examples Input 10 3 1 2 3 4 5 6 7 8 9 10 15 35 100 Output 2 5 -1 Input 5 2 4 1 2 7 3 8 4 Output 2 1 Explanation In the first example: * For the first query (x = 15), the smallest subarray is [7, 8] with a sum of 15 and length 2. * For the second query (x = 35), the smallest subarray is [6, 7, 8, 9, 10] with a sum of 40 and length 5. * For the third query (x = 100), no subarray has a sum greater than or equal to 100, so the answer is -1. In the second example: * For the first query (x = 8), the smallest subarray is [7, 1] or [7, 3] with a sum of 8 and length 2. * For the second query (x = 4), the smallest subarray is [4] with a sum of 4 and length 1.","solution":"def smallest_subarray_len(arr, queries): res = [] n = len(arr) for x in queries: min_len = float(\'inf\') start = 0 curr_sum = 0 for end in range(n): curr_sum += arr[end] while curr_sum >= x: min_len = min(min_len, end - start + 1) curr_sum -= arr[start] start += 1 if min_len == float(\'inf\'): res.append(-1) else: res.append(min_len) return res"},{"question":"Problem description In a city park, there are \'N\' different trails where people can jog. Each trail has a different length in meters. A group of joggers want to organize a jogging event where they can choose a set of consecutive trails to cover a total distance exactly equal to \'K\' meters. You need to determine whether it is possible to select one or more consecutive trails from the list such that their total length is exactly \'K\' meters. Input First line contains number of test cases. For each test case: 1. First line: two integers \'N\' and \'K\', where \'N\' is the number of trails and \'K\' is the target distance. 2. Second line: N integers representing the length of each trail in meters. Output If it is possible to organize such an event, print \\"POSSIBLE\\", else print \\"IMPOSSIBLE\\" (without quotes). Print the result for each test case in a new line. Constraints SubTask 1 - 70 Points 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ K ≤ 10^6 1 ≤ length(trail) ≤ 1000 SubTask 2 - 30 Points 1 ≤ T ≤ 5 1 ≤ N ≤ 100 1 ≤ K ≤ 10^4 1 ≤ length(trail) ≤ 100 Example Input: 2 5 15 1 2 3 4 5 4 10 5 6 1 2 Output: POSSIBLE IMPOSSIBLE Explanation Test Case 1: One possible set of consecutive trails is [4, 5, 6], which sums up to 15. Test Case 2: There is no set of consecutive trails that sums up to exactly 10.","solution":"def is_possible(n, k, trails): for i in range(n): current_sum = 0 for j in range(i, n): current_sum += trails[j] if current_sum == k: return \\"POSSIBLE\\" if current_sum > k: break return \\"IMPOSSIBLE\\" def process_cases(test_cases): results = [] for case in test_cases: n, k, trails = case result = is_possible(n, k, trails) results.append(result) return results"},{"question":"You are building a task allocation system where tasks need to be assigned to workers. Each task has an associated skill level requirement and each worker has a skill level. A worker can take on a task if their skill level is greater than or equal to the task\'s requirement. Your goal is to assign tasks to workers such that each worker gets at most one task, and every task is assigned to exactly one worker, if possible. The input contains two arrays, one representing the skill levels of the tasks and another representing the skill levels of the workers. Your program should output the maximum number of tasks that can be completed. -----Input----- The first line consists of two integers, T, the number of tasks and W, the number of workers. Note that 1 leq T leq 1000 and 1 leq W leq 1000. The second line of the input contains T integers t_i (1 leq t_i leq 10^6). This represents the skill level requirements of the tasks. The third line of the input contains W integers w_i (1 leq w_i leq 10^6). This represents the skill levels of the workers. -----Output----- Print the maximum number of tasks that can be completed. -----Examples----- Sample Input 1: 3 3 3 2 1 5 3 2 Sample Output 1: 3 Sample Input 2: 4 3 4 3 2 1 3 2 1 Sample Output 2: 3 Sample Input 3: 3 4 4 4 4 3 3 3 3 Sample Output 3: 0 Note: In Sample Input 1, each task can be assigned to a worker: task with skill requirement 1 to worker with skill level 5, task with skill requirement 2 to worker with skill level 3, and task with skill requirement 3 to worker with skill level 2. Therefore, all tasks can be completed. In Sample Input 2, the tasks with requirements 1, 2, and 3 can be assigned to the workers with skill levels 3, 2, and 1 respectively, thus completing 3 tasks. Task with requirement 4 cannot be assigned as there is no worker with skill level >= 4. In Sample Input 3, no worker has a skill level high enough to complete any of the tasks. Therefore, the output is 0.","solution":"def max_completed_tasks(T, W, tasks, workers): Returns the maximum number of tasks that can be completed. Parameters: T (int): The number of tasks. W (int): The number of workers. tasks (list of int): The skill level requirements of the tasks. workers (list of int): The skill levels of the workers. Returns: int: The maximum number of tasks that can be completed. tasks.sort() workers.sort() task_index = 0 worker_index = 0 completed_tasks = 0 while task_index < T and worker_index < W: if workers[worker_index] >= tasks[task_index]: completed_tasks += 1 task_index += 1 worker_index += 1 return completed_tasks"},{"question":"A photographer is taking a series of group photos on a field trip. There are N students in total, and for each photo, there is a requirement that the group of students must be arranged in a rectangular grid. However, the number of students in the group for each photo is not specified explicitly, but rather as the product of the numbers given on a separate list. For example, given students can be arranged in 6 different groups where the number of students in each group is described by the list of possible arrangements as products (`4 * 3`, `6 * 2`, `2 * 6`, etc.). The goal is to automatically find arrangements consistent with these products and determine if it\'s possible to arrange the students in the required rectangular grid forms. If multiple arrangements are possible, all should be found. Write a program that will input the number of students N, and a list of M products where each product Pi is equal to the product of the dimensions of one valid rectangular arrangement of students. The program should output all possible arrangements or \\"NA\\" if no valid arrangements can be found. Input The first line of input contains the number of students N (1 ≤ N ≤ 1000), and the number of products M (1 ≤ M ≤ 50). The next line contains M integers, each representing a product Pi (1 ≤ Pi ≤ 1000). Output Output each possible arrangement in terms of rows and columns, one arrangement per line, sorted first by the number of rows, then by the number of columns in ascending order. If no valid arrangements can be found, output \\"NA\\". Example Input 12 4 4 6 8 12 Output 2 6 3 4 4 3 6 2 12 1 1 12","solution":"def find_arrangements(N, products): Find all possible arrangements of students in rectangular grids for given products. Args: N: int - Number of students. products: List[int] - List of products that describe possible rectangular grids. Returns: List[Tuple[int, int]] - List of possible arrangements (rows, columns). arrangements = [] for product in products: for i in range(1, int(product ** 0.5) + 1): if product % i == 0: r, c = i, product // i if r * c == N: arrangements.append((r, c)) if r != c: arrangements.append((c, r)) arrangements = list(set(arrangements)) # Remove duplicates arrangements.sort() if not arrangements: return [\\"NA\\"] return arrangements"},{"question":"You are given a string s that consists of only lowercase English letters. Split the string into as few strings as possible such that each string contains unique characters, i.e., no character appears in a string more than once. Return the minimum number of strings you can split the given string into. Example 1: Input: s = \\"abac\\" Output: 2 Explanation: We can split the string into \\"ab\\" and \\"ac\\". Example 2: Input: s = \\"aaaa\\" Output: 4 Explanation: Each \\"a\\" counts as a separate string because no two \\"a\\" can be in the same string. Example 3: Input: s = \\"abacabc\\" Output: 3 Explanation: We can split the string into \\"ab\\", \\"ac\\", and \\"abc\\". Note: 1 <= s.length <= 1000 s consists of only lowercase English letters.","solution":"def min_split_unique_chars(s): Returns the minimum number of strings with unique characters each. if not s: return 0 current_set = set() num_splits = 1 for char in s: if char in current_set: current_set = set() # start a new string num_splits += 1 current_set.add(char) return num_splits"},{"question":"In a galaxy far, far away, droids are the main workforce tasked with maintaining space stations. Each droid is assigned a unique ID from 1 to n. These droids communicate through a network represented as an undirected graph where nodes are droids and edges are direct communication links between them. However, some communication links have a problem and can cause miscommunication. You need to identify rings of faulty communications to make sure they are fixed. A communication ring is a simple cycle in the network. In other words, it is a series of unique droid IDs connected such that they form a closed loop. A network is considered functional if it contains no communication rings. Your task is to determine if the network is functional or faulty based on the presence of communication rings. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of droids and the number of direct communication links respectively. The next m lines each contain two integers a and b (1 ≤ a, b ≤ n) specifying a direct communication link between droid a and droid b. It is guaranteed that the graph has no loops or multiple edges. Output Print \\"Functional\\" if the network contains no communication rings. Otherwise, print \\"Faulty\\". Examples Input 5 5 1 2 2 3 3 4 4 5 5 1 Output Faulty Input 5 4 1 2 2 3 3 4 4 5 Output Functional Note 1) In the first example, the droids form a ring: 1-2-3-4-5-1 which means there is a communication ring, so the network is \\"Faulty\\". 2) In the second example, the droids do not form any closed loops, so the network is \\"Functional\\".","solution":"def is_network_functional(n, m, links): def dfs(v, parent): visited[v] = True for u in adj_list[v]: if not visited[u]: if dfs(u, v): return True elif u != parent: return True return False adj_list = [[] for _ in range(n + 1)] for a, b in links: adj_list[a].append(b) adj_list[b].append(a) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"Faulty\\" return \\"Functional\\" # Example usage: n = 5 m = 5 links = [ (1, 2), (2, 3), (3, 4), (4, 5), (5, 1) ] print(is_network_functional(n, m, links)) # Output should be \\"Faulty\\" n = 5 m = 4 links = [ (1, 2), (2, 3), (3, 4), (4, 5) ] print(is_network_functional(n, m, links)) # Output should be \\"Functional\\""},{"question":"Given an integer n, write a function that determines if the number is a prime power. A prime power is a number that can be expressed in the form ( p^k ) where p is a prime number and k is an integer greater than or equal to 1. Example 1: Input: n = 16 Output: True Explanation: 16 can be expressed as ( 2^4 ), where 2 is a prime number and 4 is an integer. Example 2: Input: n = 18 Output: False Explanation: 18 cannot be expressed as ( p^k ), where p is a prime number and k is an integer. Your Task: Since this is a function problem, you don\'t need to take any input as it\'s already done by the driver code. You need to implement the function `isPrimePower(n)` that takes an integer n as a parameter and returns True if n is a prime power else returns False. Expected Time Complexity: O(sqrt{n} log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^{9}","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def isPrimePower(n): if n <= 1: return False for p in range(2, int(n**0.5) + 1): if is_prime(p): power = p while power <= n: power *= p if power == n: return True return is_prime(n)"},{"question":"You are given a string S and an integer K. Your task is to determine whether S can be rearranged such that no two adjacent characters are the same. If such a rearrangement is possible, return the lexicographically smallest possible rearranged string. If not, return \\"impossible\\". ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains the string S. The second line of each test case contains the integer K. ------ Output ------ For each test case, print a single line containing the lexicographically smallest possible rearranged string, or \\"impossible\\" if no such rearrangement is possible. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^3 1 ≤ K ≤ 100 ------ Subtasks ------ Subtask #1 (100 points): original constraints ------ Sample Input 1 ------ 3 aabb 2 aaab 2 abcde 1 ------ Sample Output 1 ------ abab impossible abcde ------ Explanation 1 ------ Example case 1: We can rearrange the string \\"aabb\\" to \\"abab\\" which satisfies the condition. Example case 2: It is impossible to rearrange the string \\"aaab\\" such that no two \'a\' characters are adjacent with a distance of at least 2. Example case 3: The string \\"abcde\\" already satisfies the condition without any rearrangement.","solution":"from collections import Counter import heapq def rearrange_string(S, K): if K == 1: return \\"\\".join(sorted(S)) counter = Counter(S) max_heap = [[-count, char] for char, count in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((char, count + 1)) if len(wait_queue) < K: continue char, count = wait_queue.pop(0) if count < 0: heapq.heappush(max_heap, [count, char]) if len(result) != len(S): return \\"impossible\\" return \\"\\".join(result) def solve_rearrange_problems(T, test_cases): results = [] for i in range(T): S, K = test_cases[i] results.append(rearrange_string(S, K)) return results def main(): input_data = [ \\"3\\", \\"aabb\\", \\"2\\", \\"aaab\\", \\"2\\", \\"abcde\\", \\"1\\" ] T = int(input_data[0]) test_cases = [(input_data[2*i + 1], int(input_data[2*i + 2])) for i in range(T)] results = solve_rearrange_problems(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an integer array nums of size n. You want to find the length of the longest consecutive elements sequence. You must write a function that achieves this with a time complexity of O(n). For example, for the array nums = [100, 4, 200, 1, 3, 2], the longest consecutive elements sequence is [1, 2, 3, 4]. Its length is 4. Write a function that receives an array of integers and returns the length of the longest sequence of consecutive integers. -----Input----- An integer t (1 le t le 10) that represents the number of test cases. Each test case contains an integer n (1 le n le 10^5) that represents the number of elements in the array, followed by n integers (-10^9 le nums[i] le 10^9). -----Output----- For each test case, print a single integer representing the length of the longest consecutive elements sequence. -----Example----- Input 3 6 100 4 200 1 3 2 3 1 2 0 1 7 Output 4 3 1","solution":"def longest_consecutive(nums): Returns the length of the longest sequence of consecutive integers in the given list. num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: # start of a new sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A string is defined to be a palindrome if it reads the same forward and backward, e.g., \\"radar\\" and \\"level\\". A substring is any sequence of consecutive characters within a string. Given a string `s`, find the length of its shortest palindromic substring. If the string has no palindromic substring, return 0. # Task Given a string `s`, the function shortest_palindrome(s) returns the length of the shortest palindromic substring within `s`. Assume that the length of the input string will be at least 1 and at most 1000. All the characters in the string will be lowercase English letters. # Examples: ``` shortest_palindrome(\\"amazon\\") = 1 -> \\"a\\" or \\"m\\" or \\"z\\" or \\"o\\" or \\"n\\" shortest_palindrome(\\"racecar\\") = 1 -> \\"r\\" or \\"a\\" or \\"c\\" or \\"e\\" or \\"car\\" shortest_palindrome(\\"level\\") = 1 -> \\"l\\" or \\"e\\" shortest_palindrome(\\"aabbcc\\") = 1 -> \\"a\\" or \\"b\\" or \\"c\\" shortest_palindrome(\\"abcdcba\\") = 7 -> \\"abcdcba\\" shortest_palindrome(\\"abcdefg\\") = 1 -> \\"a\\" or \\"b\\" or \\"c\\" or \\"d\\" or \\"e\\" or \\"f\\" or \\"g\\" ```","solution":"def shortest_palindrome(s): Finds the length of the shortest palindromic substring within a given string `s`. n = len(s) # A one character string is always a palindrome if n == 1: return 1 # Each individual character is a palindrome of length 1 return 1"},{"question":"You are participating in a programming quiz organized by your school. One of the quiz challenges requires you to manage a dynamic list of participants. The participants are given a unique ID upon registration. You have to implement a function that efficiently handles the following operations: 1. **Add Participant:** Register a new participant with a unique ID and name. 2. **Remove Participant:** Remove a participant using their unique ID. 3. **Query by ID:** Fetch the name of the participant using their unique ID. 4. **Query by Name:** Fetch the unique ID of the participant using their name. Your task is to implement the data structure that supports these operations efficiently. Each operation type will be provided as inputs. # Input - The first line contains an integer, **q(1 ≤ q ≤ 10^5)**, the number of operations. - The following **q** lines represent operations, formatted as: - For adding a participant: `Add id name` - For removing a participant: `Remove id` - For querying by ID: `QueryID id` - For querying by name: `QueryName name` # Output For each `QueryID` and `QueryName` operation, output the corresponding name or ID. If the participant does not exist, return `-1`. # Example Input ``` 6 Add 1 Alice Add 2 Bob QueryID 1 QueryName Bob Remove 1 QueryID 1 ``` Output ``` Alice 2 -1 ``` # Explanation 1. Add participant with ID 1 and name \\"Alice\\". 2. Add participant with ID 2 and name \\"Bob\\". 3. Query by ID 1 returns \\"Alice\\". 4. Query by name \\"Bob\\" returns 2. 5. Remove participant with ID 1. 6. Query by ID 1 returns \\"-1\\" since Alice was removed. # Constraints - Each participant\'s ID is a unique positive integer. - Each participant\'s name is a unique string without spaces. - All operations should be handled in efficient time complexity. Implement a function that processes the given input and performs the above operations.","solution":"class ParticipantManager: def __init__(self): self.id_to_name = {} self.name_to_id = {} def add_participant(self, participant_id, name): self.id_to_name[participant_id] = name self.name_to_id[name] = participant_id def remove_participant(self, participant_id): if participant_id in self.id_to_name: name = self.id_to_name.pop(participant_id) self.name_to_id.pop(name, None) def query_by_id(self, participant_id): return self.id_to_name.get(participant_id, -1) def query_by_name(self, name): return self.name_to_id.get(name, -1) def process_operations(operations): manager = ParticipantManager() result = [] for operation in operations: op = operation.split() if op[0] == \\"Add\\": manager.add_participant(int(op[1]), op[2]) elif op[0] == \\"Remove\\": manager.remove_participant(int(op[1])) elif op[0] == \\"QueryID\\": result.append(manager.query_by_id(int(op[1]))) elif op[0] == \\"QueryName\\": result.append(manager.query_by_name(op[1])) return result"},{"question":"Endpoint Security Solutions Inc. wants to develop a software that can identify unique IP addresses that made \'n\' number of access attempts within a given time interval from their server logs. The log file is a text file where each line contains an IP address and a timestamp (in the format YYYY-MM-DD HH:MM:SS). Your task is to write a function that reads the log file and identifies the unique IP addresses with exactly \'n\' access attempts in the specified interval. -----Input----- The function receives: 1. A string log_file_path representing the path to the log file. 2. Two strings start_interval and end_interval representing the start and end of the interval respectively in the format YYYY-MM-DD HH:MM:SS. 3. An integer n representing the required number of access attempts. -----Output----- The function should return a list of unique IP addresses that made exactly \'n\' access attempts within the specified interval. The IP addresses in the list should be sorted in ascending order. -----Examples----- log_file.txt content: ``` 192.168.1.1 2023-01-01 12:00:00 192.168.1.2 2023-01-01 12:05:00 192.168.1.1 2023-01-01 12:10:00 192.168.1.3 2023-01-01 12:15:00 192.168.1.2 2023-01-01 12:20:00 192.168.1.1 2023-01-01 12:25:00 192.168.1.3 2023-01-01 12:30:00 ``` Function call: log_file_path = \\"log_file.txt\\", start_interval = \\"2023-01-01 12:00:00\\", end_interval = \\"2023-01-01 12:30:00\\", n = 3 Output: ``` [\\"192.168.1.1\\"] ```","solution":"def parse_timestamp(timestamp): from datetime import datetime return datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") def find_unique_ips(log_file_path, start_interval, end_interval, n): from collections import defaultdict start_time = parse_timestamp(start_interval) end_time = parse_timestamp(end_interval) access_count = defaultdict(int) with open(log_file_path, \'r\') as file: for line in file: ip, timestamp = line.strip().split(maxsplit=1) access_time = parse_timestamp(timestamp) if start_time <= access_time <= end_time: access_count[ip] += 1 result = [ip for ip, count in access_count.items() if count == n] result.sort() return result"},{"question":"Design a distributed system that processes a stream of data packets in real-time. Each data packet contains an integer ID and a payload of arbitrary length. The system consists of multiple worker nodes that process these packets in parallel. The goal is to build a load balancer that distributes the packets across the worker nodes in such a way that maximizes efficiency and ensures that packets with the same ID are processed by the same worker node. ------ Requirements ------ 1. Implement a method that initializes the worker nodes and the load balancer. 2. Implement a method that processes a new incoming packet. 3. Implement a method that balances the load among the worker nodes, ensuring that packets with the same ID are processed by the same worker node. ------ Constraints ------ - The system consists of N worker nodes, each identified by an integer from 0 to N-1. - The stream of data packets is continuous and unbounded. - The processing time of each packet can vary and is not fixed. - A packet with the same ID should always be processed by the same worker node to maintain state consistency. ------ Input/Output ------ - The load balancer should ensure efficient packet processing and even load distribution among the worker nodes. - Design the system in such a way that it can handle a high throughput of incoming packets. Example Usage: ```python # Initialize the load balancer with 3 worker nodes. load_balancer = LoadBalancer(3) # Process incoming data packets with different IDs. load_balancer.process_packet(Packet(1, \\"payload1\\")) load_balancer.process_packet(Packet(2, \\"payload2\\")) load_balancer.process_packet(Packet(1, \\"payload3\\")) load_balancer.process_packet(Packet(3, \\"payload4\\")) # The load balancer should ensure packets with ID 1 go to the same worker node. ``` ------ Additional Considerations ------ - Think about thread safety and concurrency, as multiple packets may arrive simultaneously. - Consider using consistent hashing or other techniques to distribute packets efficiently. - Ensure your implementation is scalable and can handle an increasing number of worker nodes and packets over time. ------ Evaluation Criteria ------ - Correctness: Ensure the packets are distributed correctly and processed by the appropriate worker nodes. - Efficiency: The load balancer should minimize the processing time and distribute the load evenly. - Scalability: The system should handle an increasing number of packets and worker nodes without performance degradation. This problem tests your knowledge of distributed systems, load balancing, and concurrency. Implementing a robust solution requires a deep understanding of these concepts and the ability to apply them in a practical scenario.","solution":"class Packet: def __init__(self, packet_id, payload): self.packet_id = packet_id self.payload = payload class WorkerNode: def __init__(self, node_id): self.node_id = node_id self.queue = [] def process_packet(self, packet): self.queue.append(packet) return f\\"Worker {self.node_id} processing packet {packet.packet_id}\\" class LoadBalancer: def __init__(self, num_workers): self.num_workers = num_workers self.workers = [WorkerNode(i) for i in range(num_workers)] self.packet_to_worker_map = {} def process_packet(self, packet): if packet.packet_id in self.packet_to_worker_map: worker_id = self.packet_to_worker_map[packet.packet_id] else: worker_id = self.hash_function(packet.packet_id) self.packet_to_worker_map[packet.packet_id] = worker_id worker_response = self.workers[worker_id].process_packet(packet) return worker_response def hash_function(self, packet_id): return packet_id % self.num_workers def load_balancer_test_scenario(): # Initialize the load balancer with 3 worker nodes. load_balancer = LoadBalancer(3) # Process incoming data packets with different IDs and collect results. result1 = load_balancer.process_packet(Packet(1, \\"payload1\\")) result2 = load_balancer.process_packet(Packet(2, \\"payload2\\")) result3 = load_balancer.process_packet(Packet(1, \\"payload3\\")) result4 = load_balancer.process_packet(Packet(3, \\"payload4\\")) return [result1, result2, result3, result4]"},{"question":"You are given a string containing a mix of letters and digits. Your task is to rearrange the characters in the string such that all digits come before all letters, while maintaining their original relative order within their respective groups. Write a function that takes a string as input and returns the rearranged string. # Example ``` Input: \\"a1b2c3d4\\" Output: \\"1234abcd\\" Input: \\"h3e4l5l6o1w2o0r7l8d9\\" Output: \\"3456120789helloworld\\" Input: \\"abc\\" Output: \\"abc\\" Input: \\"123\\" Output: \\"123\\" ``` # Constraints: - The input string will contain only letters (`a-z`, `A-Z`) and digits (`0-9`). - The length of the string will not exceed 100 characters.","solution":"def rearrange_string(s): Rearranges the string such that all digits come before all letters while maintaining their original relative order. Parameters: s (str): The input string containing a mix of letters and digits. Returns: str: The rearranged string. digits = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] return \'\'.join(digits + letters)"},{"question":"You are given an array of integers representing the ages of a group of employees in a company. The company wants to organize a special event, and they need to form pairs of employees for certain activities. A pair is valid if the difference in age between the two employees is exactly one year. You are required to determine the maximum number of valid pairs that can be formed from the given array. Each employee can be part of at most one pair. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees. The second line contains n integers a_{i} (20 ≤ a_{i} ≤ 60) — the ages of the employees. -----Output----- Print the maximum number of valid pairs that can be formed. -----Examples----- Input 5 21 22 23 24 25 Output 2 Input 4 20 21 21 22 Output 2 -----Note----- In the first sample, employees aged 21 and 22 form a valid pair, employees aged 23 and 24 form a valid pair. So, the maximum number of pairs is 2. In the second sample, first 21 and 20 form a valid pair, second 21 and 22 form another valid pair. So, the maximum number of pairs is 2.","solution":"def max_valid_pairs(n, ages): Returns the maximum number of valid pairs where the difference in age is exactly one year. Args: n (int): Number of employees. ages (list of int): List containing the ages of the employees. Returns: int: Maximum number of valid pairs. ages.sort() used = [False] * n pairs = 0 for i in range(n - 1): if not used[i] and not used[i + 1] and ages[i + 1] - ages[i] == 1: pairs += 1 used[i] = used[i + 1] = True return pairs"},{"question":"Given a list of integers, write a function that returns the sum of all unique elements within the list. For example ``` [1, 2, 3, 2, 4, 5, 1] --> 15 (= 1 + 2 + 3 + 4 + 5) [7, 7, 8, 9, 9] --> 24 (= 7 + 8 + 9) ``` Each element in the list is an integer, and the list can contain positive or negative numbers.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements within the list. return sum(set(lst))"},{"question":"Professor Hachioji has designed a unique storage system for his laboratory. The system organizes items in a series of nested crates represented by nested lists in Python. Each crate can contain either an item (represented by a string) or another crate (represented by another list). The structure ensures that items or crates can be nested multiple levels deep. For example, a storage structure can be represented as: ```python [\\"item1\\", [\\"item2\\", [\\"item3\\", \\"item4\\"], \\"item5\\"], \\"item6\\"] ``` To help Professor Hachioji manage his inventory, you need to write a program that counts the total number of items stored in a given structure, regardless of their level of nesting. # Input The input consists of a single line, which is a nested list representation of the storage structure. You can assume that: - The input will always be a valid nested list. - The maximum nesting level will not exceed 100. - Each item in the list will be a string representing the item. # Output The output should be the total number of items in the given storage structure. # Examples Example 1 ```python Input: [\\"item1\\", [\\"item2\\", [\\"item3\\", \\"item4\\"], \\"item5\\"], \\"item6\\"] Output: 6 ``` Example 2 ```python Input: [\\"a\\", [\\"b\\", \\"c\\", [\\"d\\", \\"e\\"], \\"f\\"], \\"g\\"] Output: 7 ``` # Implementation details - You might use recursion to traverse through nested lists. - Consider edge cases, such as an empty list or lists with varying levels of depth.","solution":"def count_items(storage): Counts the total number of items in a nested storage structure. Args: storage (list): The nested list representing the storage structure. Returns: int: The total number of items in the storage. count = 0 for element in storage: if isinstance(element, list): count += count_items(element) else: count += 1 return count"},{"question":"We ask you to determine if it is possible to construct a string consisting of only the characters \'X\' and \'Y\' such that the string is exactly K characters long, contains exactly M occurrences of \'X\', and no two adjacent characters in the string are the same. Your task is to output the corresponding string if it is possible, or output \\"IMPOSSIBLE\\" if such a string cannot be constructed. -----Constraints----- - 1 ≤ K ≤ 100 - 0 ≤ M ≤ K -----Input----- Input is given from Standard Input in the following format: K M -----Output----- Print the string if possible, otherwise print \\"IMPOSSIBLE\\". -----Sample Input----- 5 3 -----Sample Output----- XYXYX Explanation: A possible string of length 5 with exactly 3 \'X\' characters is \\"XYXYX\\". Note that \'XX\' does not appear.","solution":"def construct_string(K, M): Constructs a string of length K with exactly M occurrences of \'X\' and no two adjacent characters being the same. Returns the string if possible, otherwise returns \\"IMPOSSIBLE\\". # If M is greater than half of the length (rounded up), it is impossible to create such a string if M > (K + 1) // 2: return \\"IMPOSSIBLE\\" result = [] x_count = 0 y_count = 0 # Populate the string by alternating between \'X\' and \'Y\' for i in range(K): # Add \'X\' if we have not yet added all \'X\'s and (it\'s the first character OR the last character was \'Y\') if x_count < M and (i == 0 or result[-1] == \'Y\'): result.append(\'X\') x_count += 1 # Else add \'Y\' else: result.append(\'Y\') y_count += 1 return \'\'.join(result)"},{"question":"You are required to develop a function that will help convert a series of commands into a sequence of movements for a virtual robot on a grid. Our robot moves on a 2D grid and each command tells it to move a certain direction by a specific number of units. The commands will be provided as a single string, where: - Each character indicates a direction: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. - Each direction is immediately followed by a digit (between 1 and 9) representing the number of units to move in that direction. For example, the command string \\"R3U2L4\\" means: - Move right by 3 units. - Move up by 2 units. - Move left by 4 units. You are to implement a function `process_movements(commands: str) -> str` that takes such a command string and returns the final coordinates of the robot. The starting position of the robot is at the origin (0, 0). **Function Signature:** ```python def process_movements(commands: str) -> str: # Your code here ``` **Input:** - `commands`: a string representing a sequence of movement commands as described above (1 ≤ length of commands ≤ 100). **Output:** - A string representing the final coordinates of the robot in the format \\"(x, y)\\". **Examples:** 1. `process_movements(\\"R3U2L1D2\\")` should return `\\"(2, 0)\\"` 2. `process_movements(\\"U1R1D1L1\\")` should return `\\"(0, 0)\\"` 3. `process_movements(\\"R9U5\\")` should return `\\"(9, 5)\\"` Ensure your implementation handles various sequences of commands and correctly computes the final positions.","solution":"def process_movements(commands: str) -> str: x, y = 0, 0 i = 0 while i < len(commands): direction = commands[i] units = int(commands[i + 1]) if direction == \'R\': x += units elif direction == \'L\': x -= units elif direction == \'U\': y += units elif direction == \'D\': y -= units i += 2 return f\\"({x}, {y})\\""},{"question":"You are given a list of N strings. Each string consists of lowercase letters (\'a\' - \'z\'). Your task is to determine if you can create a circular arrangement of these strings such that the last character of each string matches the first character of the next string. If such an arrangement is possible, print `YES`; otherwise, print `NO`. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ length of any string ≤ 100 Input Input is given from Standard Input in the following format: N s1 s2 ... sN Output Print `YES` if a circular arrangement is possible, otherwise print `NO`. Examples Input 3 abc cde efg Output NO Input 4 aaa aaa aaa aaa Output YES Input 5 ab bc cd da ef Output NO Input 1 xyz Output YES Explanation In the first example, no circular arrangement is possible since \'g\' (last character of \\"efg\\") does not match \'a\' (first character of \\"abc\\"). In the second example, every string is identical and starts and ends with \'a\', allowing circular arrangement: \\"aaa\\" -> \\"aaa\\" -> \\"aaa\\" -> \\"aaa\\". In the third example, \'ef\' has no pair to match the circular arrangement because its first character \'e\' does not have any string starting with \'f\'. In the fourth example, a single string is trivially circular.","solution":"from collections import Counter def can_form_circular(arrangement): Function to determine if a circular arrangement of strings is possible. :param arrangement: list of strings :return: \'YES\' if a circular arrangement is possible; otherwise \'NO\' if len(arrangement) == 1: return \\"YES\\" start_counter = Counter() end_counter = Counter() for string in arrangement: start_counter[string[0]] += 1 end_counter[string[-1]] += 1 if start_counter == end_counter: return \\"YES\\" else: return \\"NO\\""},{"question":"**Even Odd Differences** Chef has a sequence of integers A_{1}, A_{2}, ldots, A_{N} and he loves finding interesting properties about sequences. One day, he decided to define a new property called \\"Even Odd Difference\\". \\"Even Odd Difference\\" is defined as the absolute difference between the sum of all even numbers and the sum of all odd numbers in the sequence. Chef wants to know the Even Odd Difference for a given sequence. Can you help him? ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output Format ------ For each test case, print the Even Odd Difference. ------ Constraints ------ 1 ≤ T ≤ 10^{2} 1 ≤ N ≤ 10^{3} 1 ≤ A_{i} ≤ 10^{4} for each valid i ----- Sample Input 1 ------ 2 4 1 2 3 4 3 10 10 9 ----- Sample Output 1 ------ 2 11 ----- Explanation 1 ------ Test Case 1: The sum of even numbers is 2 + 4 = 6 and the sum of odd numbers is 1 + 3 = 4. Thus, the Even Odd Difference is |6 - 4| = 2. Test Case 2: The sum of even numbers is 10 + 10 = 20 and the sum of odd numbers is 9. Thus, the Even Odd Difference is |20 - 9| = 11.","solution":"def even_odd_difference(test_cases): results = [] for test in test_cases: N, array = test even_sum, odd_sum = 0, 0 for number in array: if number % 2 == 0: even_sum += number else: odd_sum += number results.append(abs(even_sum - odd_sum)) return results"},{"question":"You are given a rectangular grid of size n x m, where each cell in the grid can either be empty or contain an obstacle. Winnie-the-Pooh starts at the top-left corner of the grid (cell (1, 1)) and wants to traverse to the bottom-right corner of the grid (cell (n, m)). Winnie-the-Pooh can only move to the right or down one step at a time. Your task is to help Winnie find the number of distinct paths from the top-left corner to the bottom-right corner while avoiding the obstacles. A cell containing a \'1\' represents an obstacle and cannot be traversed, whereas a cell containing a \'0\' is empty and can be traversed. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100), denoting the number of rows and columns in the grid, respectively. The next n lines each contain m characters (\'0\' or \'1\'), representing the grid. -----Output----- Output one integer — the number of distinct paths Winnie can take from the top-left corner to the bottom-right corner. If there is no path, output 0. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Input 3 3 0 1 0 0 1 0 0 1 0 Output 0 -----Note----- In the first test case, there are two distinct paths from the top-left corner to the bottom-right corner, which are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second test case, there is only one distinct path: 1. Down -> Down -> Right -> Right In the third test case, there are no paths as Winnie cannot pass through the obstacles in the second column.","solution":"def num_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def count_distinct_paths(n, m, grid): return num_paths(grid)"},{"question":"You are given an array of integers where each element represents the height of a person in a queue. A person at position i can see the stage if every person before them (at position j where 0 <= j < i) has a height less than the height of the person at position i. The height of the stage exactly matches the starting position of the person in the queue (i.e., the height of the queue[i] person). Your task is to find out how many people can see the stage. -----Input----- The first line of the input contains one integer t (1 <= t <= 1000) — the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains one integer n (1 <= n <= 1000) — the number of people in the queue. The second line contains n integers representing the heights of the people in the queue (1 <= height_i <= 10^6). -----Output----- For each test case, print the number of people who can see the stage. -----Examples----- Input 3 5 1 2 3 4 5 4 4 3 2 1 6 2 2 2 2 2 2 Output 5 1 1 -----Note----- In the first example, all people can see the stage as their heights keep increasing. In the second example, only the person at the first position can see the stage because subsequent people are shorter. In the third example, only the person at the first position can see the stage as all the heights are the same.","solution":"def can_see_stage(heights): Given an array of heights, this function returns the number of people who can see the stage. count = 1 # First person can always see the stage max_height = heights[0] # Loop through the heights starting from the second person for height in heights[1:]: if height > max_height: count += 1 max_height = height return count def num_people_can_see_stage(test_cases): Main function to handle multiple test cases. results = [] for heights in test_cases: results.append(can_see_stage(heights)) return results"},{"question":"-----Input----- The input is a single line containing a string consisting of a mix of letters and digits. The string has a length between 3 and 10 characters. -----Output----- Output an integer representing the sum of all the digits in the string. If there are no digits in the string, output 0. -----Examples----- Input abc123 Output 6 Input a1b2c3 Output 6 Input xyz Output 0 Input 9t8r7 Output 24","solution":"def sum_of_digits_in_string(s): Returns the sum of all digits in the string s. If there are no digits, returns 0. return sum(int(ch) for ch in s if ch.isdigit())"},{"question":"Write a function that determines if a given positive integer n is a \\"monotonic\\" number. A monotonic number is defined as a number whose digits are either entirely non-increasing or non-decreasing from left to right. Input: A single integer n (1 ≤ n ≤ 10^9). Output: \\"Yes\\" if n is a monotonic number, otherwise \\"No\\". Sample Input: 1234 Sample Output: Yes Sample Input: 4312 Sample Output: No","solution":"def is_monotonic(n): Determines if a given positive integer n is a monotonic number. digits = list(map(int, str(n))) is_non_decreasing = all(x <= y for x, y in zip(digits, digits[1:])) is_non_increasing = all(x >= y for x, y in zip(digits, digits[1:])) if is_non_decreasing or is_non_increasing: return \\"Yes\\" return \\"No\\""},{"question":"Given an integer array `nums` of length `n` where all elements are in the range from 1 to `n`, find all the duplicate elements in the array without using any extra space. Example 1: Input: `nums = [4,3,2,7,8,2,3,1]` Output: `[2,3]` Explanation: Both 2 and 3 are repeated in the array. Example 2: Input: `nums = [1,1,2]` Output: `[1]` Explanation: The element 1 is repeated in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findDuplicates()` which takes the array `nums` as input and returns an array of all the duplicates in the array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - `1 ≤ nums.length ≤ 10^5` - Each element in `nums` will be between 1 and `n` (inclusive) where `n` is the length of the array.","solution":"def findDuplicates(nums): Finds all the duplicate elements in the array without using any extra space. Parameters: nums (List[int]): List of integers containing n elements in the range 1 to n Returns: List[int]: List of all duplicate elements duplicates = [] for i in range(len(nums)): index = abs(nums[i]) - 1 if nums[index] < 0: duplicates.append(abs(nums[i])) else: nums[index] = -nums[index] return duplicates"},{"question":"In the land of Wiblington, there exists a peculiar game that involves generating sequences of integers based on specific rules. A sequence is considered valid if and only if the following conditions are met: - The sequence starts with the integer 1. - Each subsequent integer in the sequence is either: - One more than the previous integer. - Two more than the previous integer. - The sequence terminates when any integer exceeds or reaches a given target value T. Your task is to determine the number of distinct valid sequences that can be generated for a given T. -----Input----- The input consists of a single integer T which indicates the maximum value an integer in the sequence can reach. The value of T is a positive integer and does not exceed 10^6. -----Output----- Output the total number of distinct valid sequences that can be generated when ending at or before the value T. -----Examples----- Sample Input 1: 3 Sample Output 1: 3 Sample Input 2: 5 Sample Output 2: 8 Explanation: In Sample Input 1: - The valid sequences are: 1, 2, 3 1, 3 1, 2 In Sample Input 2: - The valid sequences are: 1, 2, 3, 4, 5 1, 3, 4, 5 1, 2, 4, 5 1, 2, 3, 5 1, 3, 5 1, 2, 4 1, 2, 3 1, 3","solution":"def count_valid_sequences(T): This function calculates the number of distinct valid sequences that can be generated when ending at or before the value T. The sequence starts with 1 and each next integer is either one more or two more than the previous integer. if T == 1: return 1 dp = [0] * (T + 1) dp[1] = 1 for i in range(2, T + 1): dp[i] = dp[i - 1] + dp[i - 2] if i == 2: dp[i] += 1 return dp[T]"},{"question":"The Land Surveyor\'s Challenge You are tasked with surveying a large piece of land for a new development project. The land is represented as a 2D grid. Each cell in the grid can either be land (represented by \'L\') or water (represented by \'W\'). Your goal is to calculate how many distinct islands are present in the grid. An island is defined as a group of connected \'L\' cells where a cell is considered connected to another cell if they are adjacent in either the vertical or horizontal direction (but not diagonally). Your Task Implement a function that receives a 2D list of strings representing the grid and returns the number of distinct islands found in that grid. Your function should have the following signature: ```python def count_islands(grid: List[List[str]]) -> int: ``` # Input - `grid`: A 2D list of strings where each string is either \'L\' or \'W\'. # Output - An integer representing the number of distinct islands. # Example Inputs and Outputs Example 1: ``` grid = [ [\\"L\\", \\"W\\", \\"W\\", \\"L\\", \\"L\\"], [\\"L\\", \\"L\\", \\"W\\", \\"W\\", \\"W\\"], [\\"W\\", \\"W\\", \\"L\\", \\"W\\", \\"W\\"], [\\"W\\", \\"L\\", \\"L\\", \\"L\\", \\"W\\"] ] count_islands(grid) => 3 ``` Example 2: ``` grid = [ [\\"L\\", \\"L\\", \\"W\\", \\"W\\"], [\\"L\\", \\"L\\", \\"W\\", \\"W\\"], [\\"W\\", \\"W\\", \\"L\\", \\"L\\"], [\\"W\\", \\"W\\", \\"L\\", \\"L\\"] ] count_islands(grid) => 2 ``` Example 3: ``` grid = [ [\\"L\\", \\"W\\", \\"W\\", \\"L\\"], [\\"W\\", \\"W\\", \\"W\\", \\"W\\"], [\\"L\\", \\"W\\", \\"L\\", \\"W\\"], [\\"W\\", \\"W\\", \\"W\\", \\"W\\"] ] count_islands(grid) => 4 ``` # Constraints - The size of the grid will not exceed 50x50. - You may assume there is at least one cell in the grid. # Solution Approach To solve this problem, you can use Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse and mark the connected cells of each island. You will need to track which cells have been visited to prevent counting the same island multiple times.","solution":"from typing import List def count_islands(grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == \'W\': return grid[x][y] = \'W\' # Mark the land cell as visited by turning it to water dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'L\': # Found an unvisited land cell count += 1 dfs(i, j) return count"},{"question":"Alice and Bob are playing a game with a sequence of numbers. Initially, Alice selects a sequence of `n` distinct integers and writes them on the board. Bob is allowed to make several (possibly zero) moves to rearrange the sequence. On each move, Bob picks two adjacent integers `x` and `y` from the sequence (where `x` is to the left of `y`), swaps them, and Alice awards Bob `|x - y|` points (the absolute difference between `x` and `y`). Bob wants to maximize his score by the end of the game. Alice wants to help Bob by choosing an initial sequence that maximizes Bob\'s score. Given the number of integers `n`, determine the sequence that Alice should choose. Input: - The input consists of a single integer `n` (2 ≤ n ≤ 100,000), the length of the sequence. Output: - Output `n` distinct space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) such that Bob\'s maximum possible score is the highest. Examples Input 3 Output 1 1000000000 500000000 Input 4 Output 1 2 300000000 1000000000 Note: The maximum score Bob can achieve is dependent on the differences between adjacent numbers. Alice should choose the sequence to maximize these differences.","solution":"def maximize_score_sequence(n): Generate a sequence of n distinct integers that maximizes the score Bob can achieve by swapping adjacent numbers. if n == 2: return [1, 1000000000] sequence = [] left, right = 1, 1000000000 turn = 0 for _ in range(n): if turn % 2 == 0: sequence.append(left) left += 1 else: sequence.append(right) right -= 1 turn += 1 return sequence"},{"question":"You are given an integer array b_1, b_2, ..., b_n, where b_i represents the number of apples in the i-th basket. It is guaranteed that 1 ≤ b_i ≤ n. You need to distribute the apples among people standing in a single line. Each person can take apples from a subset of baskets every time. The same subsets of baskets can’t be chosen multiple times. You need to ensure that each person gets at least one apple and in at most n+1 operations, all apples are distributed among the people leaving no apples in any of the baskets. It can be proved that such a distribution always exists. Input The first line contains a single integer n (1 ≤ n ≤ 10^3) — length of the given array. The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — numbers of apples in the baskets 1, 2, ..., n. Output In the first line print an integer op (0 ≤ op ≤ n+1). In each of the following op lines, print a binary string s of length n. If s_i=\'0\', it means that the basket i is not in the chosen subset. Otherwise, s_i should be equal to \'1\' and the basket i is in the chosen subset. All binary strings should be distinct (unique) and b_i should be equal to the sum of s_i among all chosen binary strings. If there are multiple possible answers, you can print any. It can be proved that an answer always exists. Examples Input 4 3 2 2 2 Output 4 1100 1010 1001 0110 Input 6 2 2 2 2 2 2 Output 6 100000 010000 001000 000100 000010 000001 Input 3 3 3 3 Output 4 111 101 011 110 Note In the first example, the number of apples decreases like this: { 3,2,2,2 } → { 2,1,2,2 } → { 1,1,2,1 } → { 1,0,1,1 } → { 0,0,0,0 }. And all subsets differ from each other.","solution":"def distribute_apples(n, baskets): Distributes apples in such a way that in at most n+1 operations, all apples are distributed among people leaving no apples in any of the baskets. # The strategy is to use each individual basket in an operation operations = [] for i in range(n): operation = [\'0\'] * n operation[i] = \'1\' operations.append(\'\'.join(operation)) return operations"},{"question":"A group of researchers has developed an autonomous robot that navigates through a grid-based warehouse to organize packages. The warehouse is modeled as an n × n grid. The robot can move in four directions: up, down, left, and right, but it must avoid obstacles placed in certain cells of the grid. The robot starts from an initial position (sx, sy) and must reach a target position (tx, ty). You are tasked with helping the robot find the shortest path from the starting position to the target position while avoiding obstacles. The grid cells are indexed from 0 to n-1, with (0, 0) being the top-left corner of the grid and (n-1, n-1) being the bottom-right corner. Some of the cells contain obstacles, which the robot cannot pass through. Input The first line of input contains two integers n and m, where 2 ≤ n ≤ 1000 represents the size of the warehouse grid and 0 ≤ m ≤ n^2 represents the number of obstacles. The next m lines each contain two integers ox and oy (0 ≤ ox, oy < n), representing the coordinates of an obstacle position. The next line contains two integers sx and sy (0 ≤ sx, sy < n) representing the starting position of the robot. The next line contains two integers tx and ty (0 ≤ tx, ty < n) representing the target position of the robot. It is guaranteed that the starting position and the target position do not contain obstacles. Output Print a single integer representing the minimum number of moves required for the robot to reach the target position from the starting position while avoiding obstacles. If there is no valid path, print -1. Examples Input 5 3 0 2 2 2 4 2 0 0 4 4 Output 8 Input 6 4 1 2 2 2 3 2 4 2 0 0 5 5 Output 10 Input 4 1 2 1 0 0 3 3 Output 6","solution":"from collections import deque def shortest_path(n, m, obstacles, start, target): # Create the grid and mark obstacles grid = [[0] * n for _ in range(n)] for ox, oy in obstacles: grid[ox][oy] = -1 # -1 represents an obstacle # Direction vectors for moving in 4 directions: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() # If we reach the target, return the distance if (x, y) == (target[0], target[1]): return dist # Explore all 4 directions for dx, dy in directions: nx, ny, ndist = x + dx, y + dy, dist + 1 # Check if the new position is within bounds and not an obstacle if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != -1: queue.append((nx, ny, ndist)) visited.add((nx, ny)) # If no path found, return -1 return -1"},{"question":"Emma is planning a beautiful garden feature using linear flower beds and colorful flowers. Each flower bed can accommodate an unlimited number of flowers, but she wants each flower bed to contain a harmonious arrangement of flowers such that the height difference between any two adjacent flowers in the same bed does not exceed a certain maximum of h meters. Emma has n types of flowers available, each with a unique height. She wants to allocate flowers to m flower beds such that each bed respects the height difference restriction and all flowers are used exactly once. Emma wishes to find out if it\'s possible to achieve this configuration. Write a program that determines if it\'s possible to arrange the flowers in the specified number of flower beds following the given constraints. -----Input---- The first line contains three integers n, m, and h (1 ≤ n, m ≤ 100, 1 ≤ h ≤ 10^9) — the number of types of flowers, the number of flower beds, and the maximum allowed height difference between adjacent flowers in a bed, respectively. The second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ 10^9) — the heights of the flowers. -----Output----- Print \\"YES\\" if Emma can arrange all the flowers in the given number of flower beds following the constraints, otherwise print \\"NO\\". -----Examples----- Input 5 2 2 1 5 3 7 4 Output YES Input 5 2 1 1 5 3 7 4 Output NO -----Note----- In the first example, one possible arrangement is putting flowers of heights [1, 3, 4] in the first bed and [5, 7] in the second bed. The height difference between adjacent flowers in the first bed is at most 2, as required. In the second example, no arrangement meets the height difference requirement since 1 and 3 differ by 2 and no suitable pairs exist to fulfill the conditions when m = 2 and h = 1.","solution":"def can_arrange_flowers(n, m, h, flower_heights): Determines if it\'s possible to arrange n types of flowers into m flower beds such that the height difference between any two adjacent flowers in the same bed does not exceed h. Args: n (int): The number of flower types. m (int): The number of flower beds. h (int): The maximum allowed height difference between adjacent flowers in a bed. flower_heights (list): List of flower heights. Returns: str: \\"YES\\" if the arrangement is possible, otherwise \\"NO\\". flower_heights.sort() # Calculate the minimum height difference required to fit all flowers in m beds # If there are m-1 \\"gaps\\" between m flower beds, we need to ensure these gaps don\'t exceed h for i in range(n - 1): if flower_heights[i + 1] - flower_heights[i] > h: return \\"NO\\" return \\"YES\\""},{"question":"Alice is a computer science student who loves to solve algorithms involving sequences. She\'s currently working on a problem where she needs to process a sequence of integer pairs. Given a sequence of `N` pairs of integers `(a1, b1), (a2, b2), ..., (aN, bN)`, Alice needs to generate a new sequence of integers using the following rules: 1. Start with an empty sequence `S`. 2. For each pair `(ai, bi)` in the sequence, repeat the following steps bi times: - Add the integer `ai` to the sequence `S`. 3. After processing all pairs, find the number of unique integers in the sequence `S`. Alice is wondering if you could help her with this task. ------ Input ------ The first line of input contains a single integer `T` — the number of test cases. For each test case: - The first line contains an integer `N` — the number of pairs. - The next `N` lines each contain two integers `ai` and `bi`. ------ Output ------ For each test case, output a single line with the result — the number of unique integers in the final sequence `S`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ ai ≤ 1000 1 ≤ bi ≤ 1000 ----- Sample Input 1 ------ 3 1 1 5 2 2 2 3 1 4 5 1 6 1 7 1 8 2 ----- Sample Output 1 ------ 1 2 4 ----- Explanation 1 ------ In the first test case, the pair `(1, 5)` means the sequence `S` will be `[1, 1, 1, 1, 1]`. The number of unique integers in the sequence is `1`. In the second test case, the pairs `(2, 2)` and `(3, 1)` form the sequence `S` as `[2, 2, 3]`. The number of unique integers in the sequence is `2`. In the third test case, pairs `(5, 1)`, `(6, 1)`, `(7, 1)`, and `(8, 2)` form the sequence `S` as `[5, 6, 7, 8, 8]`. The number of unique integers in the sequence is `4`.","solution":"def count_unique_integers_in_sequence(test_cases): results = [] for case in test_cases: n = case[0] pairs = case[1:] unique_integers = set() for ai, bi in pairs: unique_integers.add(ai) results.append(len(unique_integers)) return results # Helper function to parse input data def parse_input(data): lines = data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) case = [] case.append(N) for j in range(N): a, b = map(int, lines[index + 1 + j].split()) case.append((a, b)) test_cases.append(case) index += N + 1 return test_cases"},{"question":"You are given two strings S and T. You are allowed to perform exactly one move on S to transform it into T. In one move, you can select any character c in S, and then replace it with a different character. Your task is to determine whether it is possible to transform S into T by performing exactly one move. -----Input----- - The first line of the input contains a single integer Q denoting the number of test cases. The description of Q test cases follows. - The first line of each test case contains a string S. - The second line of each test case contains a string T. -----Output----- For each test case, output \\"Yes\\" if it is possible to transform S into T by performing exactly one move, and \\"No\\" otherwise. -----Constraints----- - 1 le Q le 10 - 1 le |S|, |T| le 100 - S and T contain only lowercase English letters. -----Example Input----- 3 abc adc abcd abcf abc abc -----Example Output----- Yes Yes No -----Explanation----- Example case 1: The strings differ by exactly one character (\'b\' in S can be replaced by \'d\' to get T). Example case 2: The strings differ by exactly one character (\'d\' in S can be replaced by \'f\' to get T). Example case 3: The strings are identical, so it is not possible to perform exactly one move to transform S into T.","solution":"def can_transform_with_one_move(S, T): if len(S) != len(T): return \\"No\\" count = 0 for s_char, t_char in zip(S, T): if s_char != t_char: count += 1 return \\"Yes\\" if count == 1 else \\"No\\" def process_test_cases(Q, test_cases): results = [] for i in range(Q): S, T = test_cases[i] result = can_transform_with_one_move(S, T) results.append(result) return results"},{"question":"Alice is a software engineer and she is tasked with optimizing a database query. She needs to determine the k largest values from a large dataset. Given the nature of the dataset, sequential scanning is infeasible due to time constraints, and the dataset is too large to fit into memory, so an efficient algorithm is needed. Alice decides to use a min-heap to solve this problem. Your task is to help Alice by writing a program that reads an integer k and a sequence of n integers from the input, and outputs the k largest values in the sequence in descending order. Input The input consists of multiple datasets. The end of input is indicated by a single line containing zeros. Each dataset is given in the following format: k n a1 a2 a3 ... an The first line of each dataset contains the integer k (1 ≤ k ≤ n ≤ 10^6), representing the number of largest values to find. The second line contains the integer n, representing the number of elements in the dataset. The third line contains the n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9), representing the elements of the dataset. Output For each dataset, output the k largest values in descending order on a single line. Each dataset should have its output on a new line. Example Input 3 6 1 23 12 9 30 2 2 5 10 20 11 21 19 0 0 Output 30 23 12 21 20 Note You are required to use a min-heap to maintain the k largest values efficiently.","solution":"import heapq import sys def find_k_largest_values(k, n, array): min_heap = array[:k] heapq.heapify(min_heap) for num in array[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) return sorted(min_heap, reverse=True) def main(): input = sys.stdin.read() data = input.split(\\"n\\") i = 0 results = [] while i < len(data): line = data[i].strip() if line == \\"0 0\\": break k = int(line) i += 1 n = int(data[i].strip()) i += 1 array = list(map(int, data[i].strip().split())) result = find_k_largest_values(k, n, array) results.append(result) i += 1 for result in results: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Given a string s consisting of lowercase alphabets only, determine the length of the longest substring without repeating characters. Write a function to accomplish this task. The function should take a string as input and return an integer representing the length of the longest substring without repeating characters. Function signature: ```python def length_of_longest_substring(s: str) -> int: ``` Input - A single line containing the string s (1 ≤ |s| ≤ 105), where |s| is the length of the string. Output - A single integer representing the length of the longest substring without repeating characters. Examples Input ``` abcabcbb ``` Output ``` 3 ``` Input ``` bbbbb ``` Output ``` 1 ``` Input ``` pwwkew ``` Output ``` 3 ``` Note In the first example, the longest substring without repeating characters is \\"abc\\", which the length is 3. In the second example, the entire string \\"bbbbb\\" consists of a single repeating character, so the length is 1. In the third example, the longest substring without repeating characters is \\"wke\\". Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start_index = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_index: start_index = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start_index + 1) return max_length"},{"question":"Emma is planning a road trip and wants to visit as many landmarks as possible along her route. She has a limited amount of fuel and needs to efficiently manage her stops to ensure she can visit the maximum number of landmarks. Each road segment between landmarks consumes a specific amount of fuel, and her car\'s tank capacity determines how much fuel she can start with. Determine the maximum number of consecutive landmarks Emma can visit without running out of fuel. -----Input----- The input consists of two lines. The first line contains two integers n and f (2 leq n leq 100000, 1 leq f leq 100000), representing the number of landmarks and the initial amount of fuel in the tank, respectively. The second line consists of n-1 integers d_1, d_2, ldots , d_{n-1} where 1 leq d_ i leq 1000, representing the amount of fuel required to travel between consecutive landmarks. -----Output----- Output the maximum number of consecutive landmarks Emma can visit starting from the first landmark. -----Examples----- Sample Input: 5 10 4 6 3 5 Sample Output: 3 Sample Input: 4 5 1 2 1 Sample Output: 4","solution":"def max_landmarks(n, f, distances): Calculate the maximum number of consecutive landmarks Emma can visit starting from the first landmark. :param n: Number of landmarks :param f: Initial amount of fuel :param distances: List of fuel required to travel between consecutive landmarks :return: Maximum number of consecutive landmarks fuel_left = f max_landmarks_visited = 0 for i in range(n - 1): if fuel_left >= distances[i]: fuel_left -= distances[i] max_landmarks_visited += 1 else: break return max_landmarks_visited + 1"},{"question":"You are given a list of book price lists across different currencies. Your task is to compute the overall cost in a specified target currency, given a list of conversion rates from each currency to the target currency. Input: The first line contains an integer n, the number of price lists. Each of the next n lines contains a price list for books in the following format: - The first integer m represents the number of books in the price list. - The next m pairs (currencyCode, price) represent the price of each book in that particular currency. The last line contains the integer p, followed by p lines, each containing - a source currency code - the exchange rate to the target currency code SAMPLE INPUT 2 3 USD 10 GBP 5 EUR 12 2 JPY 5000 CNY 40 3 USD 1.2 GBP 1.5 EUR 1.1 SAMPLE OUTPUT Total cost in target currency: 41.6 Explanation: For the first price list, the given prices in target currency would be calculated as follows: - USD 10 at a rate of 1.2 yields 12. - GBP 5 at a rate of 1.5 yields 7.5. - EUR 12 at a rate of 1.1 yields 13.2. Thus, the total for this price list is 12 + 7.5 + 13.2 = 32.7. For the second price list: - JPY and CNY have no provided exchange rates, so their contribution is 0 for target currency. Thus, the overall total cost is 32.7.","solution":"def calculate_total_cost(n, price_lists, p, exchange_rates): Returns the total cost in the target currency given the price lists and exchange rates. :param n: Number of price lists :param price_lists: List of price lists containing book prices in various currencies :param p: Number of exchange rates provided :param exchange_rates: List of exchange rates from source currencies to target currency :return: Total cost in the target currency as a float # Create a dictionary for exchange rates rate_dict = {} for code, rate in exchange_rates: rate_dict[code] = rate total_cost = 0.0 for price_list in price_lists: for i in range(0, len(price_list), 2): currency = price_list[i] price = float(price_list[i+1]) if currency in rate_dict: total_cost += price * rate_dict[currency] return total_cost"},{"question":"Given a string s and a character c, your task is to find the first occurrence of the character c in the string s. If the character is not found, return -1. Example 1: Input: s = \\"hello\\" c = \'l\' Output: 2 Explanation: The first occurrence of \'l\' is at index 2. Example 2: Input: s = \\"abcdef\\" c = \'z\' Output: -1 Explanation: The character \'z\' is not present in the string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findFirstOccurrence() which takes the string s and the character c as inputs and returns the index of the first occurrence of the character c in the string s. If the character is not found, return -1. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 10^4 s contains only lowercase letters \'a\'-\'z\' c is a lowercase letter \'a\'-\'z\'","solution":"def findFirstOccurrence(s, c): Finds the first occurrence of character c in string s. Returns the index of the first occurrence or -1 if not found. for index in range(len(s)): if s[index] == c: return index return -1"},{"question":"Given a list of integers as input, produce a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. For example, if the input list were `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. You must do this without using the division operation. Examples ```python [1, 2, 3, 4, 5] ==> [120, 60, 40, 30, 24] [3, 2, 1] ==> [2, 3, 6] ```","solution":"def product_except_self(nums): Returns a list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`, without using division. length = len(nums) if length == 0: return [] # Create two arrays to keep track of prefix and suffix products prefix_products = [1] * length suffix_products = [1] * length # Build prefix products for i in range(1, length): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Build suffix products for i in range(length - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Build result array result = [1] * length for i in range(length): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Given an integer `n`, determine the minimum number of operations required to reduce the number to 1. The operations you can perform are as follows: 1. If `n` is even, divide it by 2. 2. If `n` is odd, you can either add 1 or subtract 1. The function should return the minimum number of operations needed. - n will be an integer such that 1 < n < 10^9 For example, given `7`, the function should return `4`: ``` 7 -> 8 (add 1) 8 -> 4 (divide by 2) 4 -> 2 (divide by 2) 2 -> 1 (divide by 2) ``` Given `15`, the function should return `5`: ``` 15 -> 16 (add 1) 16 -> 8 (divide by 2) 8 -> 4 (divide by 2) 4 -> 2 (divide by 2) 2 -> 1 (divide by 2) ```","solution":"def min_operations_to_one(n): Determines the minimum number of operations required to reduce n to 1. Operations allowed: 1. If n is even, divide it by 2. 2. If n is odd, you can either add 1 or subtract 1. operations = 0 while n > 1: if n % 2 == 0: n //= 2 else: # To optimize, if n is 3 or ends in 01 in binary, we should subtract 1 # Otherwise, we add 1 if n == 3 or (n & 2) == 0: n -= 1 else: n += 1 operations += 1 return operations"},{"question":"For an array of integers B = {b_0, b_1, ..., b_{n-1}}, find the subarray that has the maximum sum and print that sum. Constraints * 1 leq n leq 100,000 * -10,000 leq b_i leq 10,000 Input An array is given in the following format. n b_0 ; b_1 ; ,..., ; b_{n-1} Output Print the maximum sum of the contiguous subarray. Example Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6","solution":"def max_subarray_sum(arr): Returns the maximum sum of the contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def max_subarray_sum_from_input(s): lines = s.strip().split(\'n\') n = int(lines[0]) arr = list(map(int, lines[1].split())) return max_subarray_sum(arr)"},{"question":"Given a string `s` and a character `c`, write a function that returns the count of `c` in `s` ignoring the case. Your function should be case-insensitive, meaning it should treat \'A\' and \'a\' as the same character. Example: ```python count_char(\\"Hello World\\", \\"l\\") > 3 count_char(\\"Hello World\\", \\"L\\") > 3 ``` If `c` is not found in `s`, the function should return 0. Assume that `s` is a non-empty string and `c` is a single character.","solution":"def count_char(s, c): Returns the count of character c in string s, ignoring case. Parameters: s (str): The input string. c (str): The character to count in the string. Returns: int: The count of c in s, ignoring case. return s.lower().count(c.lower())"},{"question":"Write a function to find the longest consecutive sequence of zeros in a given binary string. The function should return the length of this sequence. # Input: * A binary string `(1 <= len(s) <= 1000)` # Output: * Length of the longest consecutive sequence of zeros. # Examples: ``` longest_zero_sequence(\\"110001110000111\\") -> 4 # The longest sequence of zeros is \\"0000\\" ``` ``` longest_zero_sequence(\\"1000001\\") -> 5 # The longest sequence of zeros is \\"00000\\" ``` ``` longest_zero_sequence(\\"1111\\") -> 0 # There are no zeros in the string ```","solution":"def longest_zero_sequence(s): Returns the length of the longest consecutive sequence of zeros in the binary string s. max_length = 0 current_length = 0 for char in s: if char == \'0\': current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given an array `a` of size `n`, you need to process `q` queries of the following types: 1. `1 l r x` — for each index `i` such that `l ≤ i ≤ r`, add `x` to `a[i]`. 2. `2 l r` — find the maximum value in the subarray from index `l` to `r`. ---Input--- The first line of input contains an integer `t` (`1 ≤ t ≤ 1000`) — the number of test cases. For each test case, the first line contains two integers `n` and `q` (`1 ≤ n, q ≤ 2 * 10^5`) — the size of the array and the number of queries, respectively. The second line contains `n` integers `a_1, a_2, ..., a_n` (`-10^9 ≤ a_i ≤ 10^9`). The next `q` lines describe the queries, either in the form of `1 l r x` (`1 ≤ l ≤ r ≤ n`, `-10^6 ≤ x ≤ 10^6`) or in the form of `2 l r` (`1 ≤ l ≤ r ≤ n`). ---Output--- For each test case, for each query of type `2`, output the maximum value in the specified subarray. ---Example--- Input: 2 5 5 1 -2 3 4 5 2 2 4 1 1 3 -1 2 1 5 1 2 5 2 2 1 3 6 3 -1 -2 -3 -4 -5 -6 2 1 6 1 3 5 3 2 2 4 Output: 4 5 4 -1 0 ---Explanation--- In the first test case: - Initially, `a = [1, -2, 3, 4, 5]`. - The first query asks for the maximum value in the subarray `[2, 4]`, which is `4`. - The second query modifies the array to `[0, -3, 2, 4, 5]`. - The third query asks for the maximum in `[1, 5]`, which is `5`. - The fourth query modifies the array to `[0, -1, 4, 6, 7]`. - The fifth query asks for the maximum in `[1, 3]`, which is `4`. In the second test case: - Initially, `a = [-1, -2, -3, -4, -5, -6]`. - The first query asks for the maximum value in the subarray `[1, 6]`, which is `-1`. - The second query modifies the array to `[-1, -2, 0, -1, -2, -6]`. - The third query asks for the maximum in `[2, 4]`, which is `0`.","solution":"def process_queries(t, cases): results = [] for i in range(t): n, q = cases[i][\'n\'], cases[i][\'q\'] arr = cases[i][\'array\'] queries = cases[i][\'queries\'] for query in queries: if query[0] == 1: l, r, x = query[1] - 1, query[2] - 1, query[3] for i in range(l, r + 1): arr[i] += x elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 results.append(max(arr[l:r + 1])) return results"},{"question":"Secret Decoder is a game in the Mystery Funhouse. In this game, there is a decoder tool which can decode secret messages by using a set of keys. Each key is a string that can replace a specific pattern in the messages. Your task is to decode the given messages using the provided set of keys. # Input The first line of the input contains an integer `n` (1 ≤ n ≤ 50) — the number of keys. Each of the next `n` lines contains two strings `a` and `b` (0 < |a|, |b| ≤ 100) separated by a space — the string `a` that needs to be replaced by `b`. The next line contains an integer `m` (1 ≤ m ≤ 10) — the number of messages. Each of the next `m` lines contains one message which is a non-empty string of up to 1000 characters. # Output The output should consist of m lines. Each line should contain the decoded version of the corresponding message in the same order it was provided. Apply all replacements according to the keys in the order given. If a key string `a` is found multiple times in a message, replace all occurrences with string `b`. # Example Input 4 hello hola world mundo how como are estás 2 hello world, how are you? are you ready? hello! Output hola mundo, como estás you? estás you ready? hola! # Note In the first example, the first message \\"hello world, how are you?\\" is decoded as follows: - \\"hello\\" is replaced with \\"hola\\" resulting in \\"hola world, how are you?\\" - \\"world\\" is replaced with \\"mundo\\" resulting in \\"hola mundo, how are you?\\" - \\"how\\" is replaced with \\"como\\" resulting in \\"hola mundo, como are you?\\" - \\"are\\" is replaced with \\"estás\\" resulting in \\"hola mundo, como estás you?\\" For the second message, \\"are you ready? hello!\\" is decoded as follows: - \\"are\\" is replaced with \\"estás\\" resulting in \\"estás you ready? hello!\\" - \\"hello\\" is replaced with \\"hola\\" resulting in \\"estás you ready? hola!\\" Make sure the replacements do not overlap and each pattern replacement is consistent with the order of the given keys.","solution":"def decode_messages(n, keys, m, messages): decoded_messages = [] for message in messages: for a, b in keys: message = message.replace(a, b) decoded_messages.append(message) return decoded_messages"},{"question":"You are given a grid with `N` rows and `M` columns. Each cell in the grid can contain an obstacle, represented by `0`, or an open space, represented by `1`. You need to determine if there is a path that starts from the top-left corner of the grid (cell `(1, 1)`) and ends at the bottom-right corner (cell `(N, M)`). You can only move up, down, left, or right and cannot move through cells containing obstacles. Write a program that takes in the grid and determines if there is a path from the top-left to the bottom-right corner. Input The first line contains two integers `N` and `M` -- the number of rows and columns in the grid. The next `N` lines contain `M` space-separated integers `0` or `1`, representing the grid. Output Output \\"YES\\" if there is a path from the top-left to the bottom-right, otherwise print \\"NO\\" (without quotes). Constraints 1 ≤ N, M ≤ 100 Example Input: 5 5 1 0 1 1 1 1 1 1 0 1 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1 Output: YES Input: 5 5 1 0 0 0 1 1 0 1 0 1 1 0 1 0 1 1 1 1 0 0 1 0 0 0 1 Output: NO","solution":"def is_path_possible(grid): Determines if there is a path from the top-left corner to the bottom-right corner of the grid. :param grid: List[List[int]] - A 2D list representing the grid where 0 is an obstacle and 1 is an open space :return: str - \\"YES\\" if there is a path, otherwise \\"NO\\" from collections import deque N = len(grid) M = len(grid[0]) # Check if start or end is an obstacle if grid[0][0] == 0 or grid[N-1][M-1] == 0: return \\"NO\\" # Directions for moving right, down, left, and up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == 1: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Maria enjoys making patterns with tiles. She starts with a grid of size n × n and wants to place two types of tiles: type A and type B. Each tile covers exactly one 1×1 cell of the grid. The grid is initially empty, and Maria will fill every cell with either type A or type B. To create a balanced and aesthetically pleasing pattern, Maria has decided on the following rules: 1. The number of type A tiles should be equal to the number of type B tiles, which means n must be even. 2. She wants the pattern to be symmetric along both the main diagonal (from the top-left to the bottom-right) and the anti-diagonal (from the top-right to the bottom-left). Your task is to determine if it is possible to fill the grid in such a way that these conditions are met, and if so, output a valid pattern. Input The input contains an integer n (2 ≤ n ≤ 100), representing the size of the grid. It is guaranteed that n is even. Output If it is possible to fill the grid according to the rules, print \\"YES\\" followed by the n × n grid with \'A\' and \'B\' markings in each cell. Output \\"NO\\" if it is not possible to fill the grid as per the given conditions. Examples Input 2 Output YES A B B A Input 4 Output YES A B A B B A B A A B A B B A B A Input 6 Output YES A B A B A B B A B A B A A B A B A B B A B A B A A B A B A B B A B A B A","solution":"def create_pattern(n): if n % 2 != 0: return \\"NO\\" pattern = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'A\') else: row.append(\'B\') pattern.append(\\" \\".join(row)) return \\"YESn\\" + \\"n\\".join(pattern)"},{"question":"In a remote village, there is a festival held once every year. The festival involves a lantern display competition where villagers showcase their lanterns along a street. Each lantern can have a brightness, measured by an integer value. The street is a straight line, and the lanterns are placed along it at varying positions. The brightness of the lanterns creates a beautiful display, and the villagers compete to have the brightest continuous segment of lanterns on the street. The competition allows the villagers to choose any continuous segment of lanterns and calculate its total brightness. The segment with the maximum total brightness wins the competition. You are given an array of integers representing the brightness of lanterns placed along the street. Write a program to find the maximum total brightness of any continuous segment of lanterns. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of lanterns. The second line contains n integers a_1, a_2, ..., a_n (-10^6 le a_i le 10^6) — the brightness of the lanterns. -----Output----- Print a single integer — the maximum total brightness of any continuous segment of lanterns. -----Examples----- Input 5 1 -2 3 4 -1 Output 7 Input 3 -1 -2 -3 Output -1 -----Note----- In the first example, the brightest continuous segment is [3, 4], with a total brightness of 7. In the second example, since all values are negative, the brightest segment is the one with the least negative value, which is -1.","solution":"def max_total_brightness(n, brightness): Finds the maximum total brightness of any continuous segment of lanterns. :param n: int, the number of lanterns :param brightness: list of int, brightness of the lanterns :return: int, the maximum total brightness. # Initialize variables to track the maximum sum and current sum max_sum = float(\'-inf\') current_sum = 0 for value in brightness: # Update the current sum, add the current value to current_sum current_sum += value # Update max_sum if current_sum is greater than max_sum if current_sum > max_sum: max_sum = current_sum # If current sum becomes negative, reset it to zero if current_sum < 0: current_sum = 0 return max_sum"},{"question":"You have been hired by a market research firm to analyze customer behavior data. They have given you a list of customer transactions and asked you to determine the longest sequence of transactions where the amount spent in each transaction is strictly increasing. Write a program to find the length of this longest increasing subsequence. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of transactions. - The second line contains `n` space-separated integers representing the amount spent in each transaction. # Output Print a single integer — the length of the longest increasing subsequence of transaction amounts. # Example **Input:** ``` 6 5 2 8 6 3 6 ``` **Output:** ``` 3 ``` # Note In this example, one of the longest increasing subsequences is `[2, 3, 6]`. Therefore, the answer is `3`.","solution":"def longest_increasing_subsequence(transactions): Function to calculate the length of the longest increasing subsequence. :param transactions: List of integers representing transaction amounts. :return: Length of the longest increasing subsequence. n = len(transactions) if n == 0: return 0 # Initialize the dp array to store the maximum sequence length at each position dp = [1] * n for i in range(1, n): for j in range(i): if transactions[i] > transactions[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence return max(dp)"},{"question":"Write a function `longestSubarray(nums, limit)` that takes an array of integers `nums` and an integer `limit`. The function should return the length of the longest contiguous subarray such that the absolute difference between any two elements in this subarray is less than or equal to the given `limit`. For example: - `longestSubarray([8, 2, 4, 7], 4)` should return `2`, since the longest subarray where the absolute differences between any two elements are at most `4` is `[2, 4]` or `[4, 7]`. - `longestSubarray([10, 1, 2, 4, 7, 2], 5)` should return `4`, since the longest subarray is `[4, 7, 2, 2]`. - `longestSubarray([4, 2, 2, 2, 4, 4, 2, 2], 0)` should return `3`, since the longest subarray is `[2, 2, 2]`. The function should efficiently handle large input arrays to ensure it meets performance requirements for inputs up to the length of 100,000.","solution":"from collections import deque def longestSubarray(nums, limit): Returns the length of the longest contiguous subarray such that the absolute difference between any two elements in this subarray is less than or equal to the given limit. min_deque = deque() max_deque = deque() left = 0 max_length = 0 for right, num in enumerate(nums): while min_deque and nums[min_deque[-1]] >= num: min_deque.pop() while max_deque and nums[max_deque[-1]] <= num: max_deque.pop() min_deque.append(right) max_deque.append(right) while nums[max_deque[0]] - nums[min_deque[0]] > limit: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"You have been recently hired by a content-streaming platform as a backend developer. One of your tasks involves optimizing the suggestion feature, which recommends content based on user preferences and view history. You are given several users\' view histories as well as a list of content pieces and their respective genres. Specifically, each user has a watch history - a list of piece_id(s) representing the content they have viewed, in the order they viewed them. Each content piece has a unique piece_id and belongs to exactly one genre. Your goal is to implement queries to: 1. Find the favorite genre for a given user, which is defined as the genre they have watched the most. If there are ties, return any one of the genres. 2. Recommend the least viewed piece of content within a given genre for a user. The recommendation should be content that the user has not watched yet. If there are ties, return any one of the least viewed pieces. 3. Find the number of unique genres a user has watched. The input format and constraints are as follows: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 10^5), the number of users and the number of content pieces. - The following n lines contain view histories for each user. For each user i, the line starts with an integer k_i (0 ≤ k_i ≤ 10^4), the number of content pieces they have watched, followed by k_i space-separated piece_id(s). - The next m lines contain the genre for each content piece. Each line contains an integer piece_id followed by a string genre. Then follow q lines containing the queries. Each query will be in one of the formats: - \\"1 user_id\\": Find the favorite genre for the given user. - \\"2 user_id genre\\": Recommend the least viewed piece of the specified genre for the user. - \\"3 user_id\\": Find the number of unique genres watched by the user. Output: - For each query of type 1, output the favorite genre. - For each query of type 2, output the piece_id of the recommended content. - For each query of type 3, output the number of unique genres watched by the user. Example: Input 3 5 3 1 2 3 2 2 3 1 5 1 Action 2 Comedy 3 Drama 4 Action 5 Comedy 4 1 1 2 2 Comedy 3 1 1 2 Output Action 5 2 Drama Explanation: For the first query, user 1\'s favorite genre is \'Action\' since they watched content piece 1 which belongs to the \'Action\' genre. For the second query, user 2 has not watched \'Comedy\' content pieces, so we recommend piece_id 5. For the third query, user 1 has watched from two unique genres: \'Action\' and \'Drama\'. For the fourth query, user 2\'s favorite genre is \'Drama\' since they have watched content piece 3 which belongs to the \'Drama\' genre. If there were ties, any one of the favored genres could be returned.","solution":"def favorite_genre(user_id, user_views, content_genres): Returns the favorite genre for the given user from collections import Counter views = user_views.get(user_id, []) genre_count = Counter([content_genres[piece_id] for piece_id in views]) return genre_count.most_common(1)[0][0] if genre_count else None def recommend_least_viewed(user_id, genre, user_views, content_genres, n, m): Recommend the least viewed content piece of the given genre for the user. user_hist = set(user_views.get(user_id, [])) genre_content = [piece_id for piece_id, g in content_genres.items() if g == genre] least_viewed = set(genre_content) - user_hist return min(least_viewed) if least_viewed else None def count_unique_genres(user_id, user_views, content_genres): Returns the number of unique genres a user has watched. views = user_views.get(user_id, []) unique_genres = set(content_genres[piece_id] for piece_id in views) return len(unique_genres)"},{"question":"You are given a list of integers. Your task is to rearrange them into two sets such that the absolute difference between the sum of the elements of these sets is minimized. Input The first line contains a single integer n (1 ≤ n ≤ 20) — the number of integers in the list. The second line contains n integers a_i (1 ≤ a_i ≤ 10^6). Output Output a single integer — the minimum possible absolute difference between the sums of the two sets. Example Input 5 3 1 4 2 2 Output 0 Note In the example, one optimal solution is to partition the list into two sets such that their sums are as close as possible: * Set 1: {1, 2, 2} * Set 2: {3, 4} Sum of Set 1 = 5 Sum of Set 2 = 7 Absolute difference = |5 - 7| = 2 However, a better solution partitions the list into: * Set 1: {3, 2} * Set 2: {4, 1, 2} Sum of Set 1 = 5 Sum of Set 2 = 5 Absolute difference = |5 - 5| = 0 Therefore, the minimum possible absolute difference between the sums of the two sets in this case is 0.","solution":"def find_minimum_difference(n, arr): total_sum = sum(arr) # The dynamic programming approach. dp[k] will be True if a sum k is possible dp = [False] * (total_sum + 1) dp[0] = True for num in arr: for j in range(total_sum, num - 1, -1): if dp[j - num]: dp[j] = True min_diff = float(\'inf\') for i in range(total_sum // 2 + 1): if dp[i]: min_diff = min(min_diff, abs(total_sum - 2 * i)) return min_diff"},{"question":"Maya owns a coffee shop that provides home delivery services. Delivery charges are Rs 5 per kilometer. However, to attract more customers, she has a special discount policy. If the distance traveled during delivery is more than 500 kms in a month, the delivery charges for the additional kilometers after 500 kms are discounted by 20%. Given the number of kilometers traveled for deliveries in a month, calculate the total delivery charges. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer D - denoting the number of kilometers traveled in a month for deliveries. ------ Output Format ------ For each test case, output the total delivery charges in rupees. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ D ≤ 1000 ----- Sample Input 1 ------ 4 600 450 700 500 ----- Sample Output 1 ------ 2950 2250 3400 2500 ----- Explanation 1 ------ Test case 1: The total distance traveled is 600 kms. The first 500 kms are charged at Rs 5 per km and the remaining 100 kms are charged at 80% of Rs 5 per km (i.e., Rs 4 per km). Total delivery charges = 500 times 5 + 100 times 4 = 2500 + 400 = 2900 rupees. Test case 2: The total distance traveled is 450 kms. Since the distance is less than or equal to 500 kms, the total delivery charges are 450 times 5 = 2250 rupees. Test case 3: The total distance traveled is 700 kms. The first 500 kms are charged at Rs 5 per km and the remaining 200 kms are charged at 80% of Rs 5 per km (i.e., Rs 4 per km). Total delivery charges = 500 times 5 + 200 times 4 = 2500 + 800 = 3300 rupees. Test case 4: The total distance traveled is 500 kms. Since the distance is equal to 500 kms, the total delivery charges are 500 times 5 = 2500 rupees.","solution":"def calculate_delivery_charges(T, distances): Given the number of kilometers traveled for deliveries in a month, calculate the total delivery charges. Parameters: T (int): The number of test cases. distances (list): A list of integers where each integer represents the kilometers traveled in a month for deliveries. Returns: list: A list of integers where each integer represents the total delivery charges for each test case. charges = [] for D in distances: if D <= 500: total_charge = D * 5 else: total_charge = 500 * 5 + (D - 500) * 4 charges.append(total_charge) return charges"},{"question":"A courier service company has n packages to deliver across different cities. Each package has a priority level that indicates how urgently it needs to be delivered, with higher numbers indicating higher urgency. Each city has a limited number of delivery slots available per day. The courier service wants to maximize the number of high priority packages delivered each day. Given the list of n packages and their priority levels, along with the number of delivery slots available in each city, determine the maximum number of packages that can be delivered on that day. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of packages. The second line contains n space-separated integers representing the priority levels of the packages p_i (1 ≤ p_i ≤ 10^5). The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of cities. The fourth line contains m space-separated integers representing the number of delivery slots available in each city s_j (1 ≤ s_j ≤ 10^5). -----Output----- Output a single integer indicating the maximum number of packages that can be delivered on that day. -----Examples----- Input 5 1 3 2 5 4 3 2 1 3 Output 5 Input 7 4 2 1 7 6 3 5 4 2 1 1 2 Output 6","solution":"def max_deliveries(n, priorities, m, slots): Determines the maximum number of high priority packages that can be delivered in a day. :param int n: Number of packages :param list of int priorities: Priority levels of the packages :param int m: Number of cities :param list of int slots: Delivery slots available in each city :return: Maximum number of packages that can be delivered :rtype: int # Sort priorities in descending order sorted_priorities = sorted(priorities, reverse=True) # Sort slots in descending order sorted_slots = sorted(slots, reverse=True) # Initialize count of delivered packages delivered = 0 # Use pointers to iterate through priorities and slots p_idx, s_idx = 0, 0 while p_idx < n and s_idx < m: if sorted_slots[s_idx] > 0: delivered += 1 sorted_slots[s_idx] -= 1 p_idx += 1 else: s_idx += 1 return delivered"},{"question":"Create a program that receives a list of 5-10 integers representing a daily stock price for a single stock. The program should then identify and return the maximum profit that can be achieved from a single buy and a single sell transaction based on the given prices. You must buy before you sell, and if no profit is possible, return \\"No profit\\". Input The input consists of a single dataset of integers separated by spaces. The input ends with zero. Each dataset contains 5 to 10 integers which represent daily stock prices. The maximum length for any integer is 6 digits. Output For each dataset, the program outputs the maximum profit possible from a single buy and sell transaction as an integer. If no profit is possible, the output is \\"No profit\\". Example Input 7 1 5 3 6 4 0 9 8 7 6 5 4 0 1 2 3 4 5 6 0 0 Output 5 No profit 5","solution":"def max_profit(prices): Returns the maximum profit from a single buy and sell transaction. If no profit is possible, return \\"No profit\\". if len(prices) < 5 or len(prices) > 10: raise ValueError(\\"The list must contain between 5 and 10 prices.\\") min_price = float(\'inf\') max_profit = 0 for price in prices: if price < 0 or price > 999999: raise ValueError(\\"Each price must be between 0 and 999999.\\") min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit if max_profit > 0 else \\"No profit\\" def process_input(data): Process input data and call max_profit on each dataset. results = [] for line in data.strip().split(\'n\'): if line == \'0\': break prices = list(map(int, line.split())) results.append(max_profit(prices[:-1])) # Exclude the ending zero return results"},{"question":"A company is planning a team-building exercise involving a series of coding challenges. Each challenge has a completion time associated with it, and the team wants to maximize the number of challenges they can complete within a given total time. The challenges cannot be partially completed; the team must either complete a challenge fully or not at all. Input: The first line of input contains the number of test cases T. Each test case begins with a line containing two integers N and M, where N is the number of challenges and M is the total time available (in minutes). The next N lines each contain a single integer representing the time in minutes required to complete the corresponding challenge. Output: For each test case, print the maximum number of challenges the team can complete within the given total time. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ completion time of each challenge ≤ 100 SAMPLE INPUT 2 5 50 10 20 30 40 15 4 45 10 20 15 25 SAMPLE OUTPUT 3 3","solution":"def max_challenges(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] challenges = test_cases[i][1] challenges.sort() count = 0 total_time = 0 for time in challenges: if total_time + time <= M: total_time += time count += 1 else: break results.append(count) return results"},{"question":"Design a function named `compressString` that takes a string as input and returns a compressed version by replacing consecutive repeating characters with the character followed by the number of repetitions. If the input string contains any non-alphabetic characters, return \'Only alphabetic characters allowed\'. If the input is not a string, return \'Input is not a string\'. An empty string should return an empty string. **EXAMPLES:** ``` \\"aaabbc\\" -> \\"a3b2c1\\" \\"abcd\\" -> \\"a1b1c1d1\\" \\"aaabbbcccddd\\" -> \\"a3b3c3d3\\" \\"a2b2\\" -> \\"Only alphabetic characters allowed\\" 12345 -> \\"Input is not a string\\" \\"\\" -> \\"\\" ```","solution":"def compressString(s): if not isinstance(s, str): return \'Input is not a string\' if any(not c.isalpha() for c in s): return \'Only alphabetic characters allowed\' if s == \\"\\": return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) return \'\'.join(compressed)"},{"question":"Alice has recently learned about permutations and now wants to generate permutations of a given string in lexicographic order. A permutation of a string is a rearrangement of its characters, and the lexicographic order is essentially dictionary order. Alice is particularly interested in knowing about permutations that start with a specific prefix. Write a program that generates all permutations of a given string that start with a specific prefix, and output them in lexicographic order. -----Input----- The first line contains a string s (1 ≤ |s| ≤ 9), consisting of lowercase English letters. The second line contains a prefix p (0 ≤ |p| ≤ |s|), consisting of lowercase English letters. It is guaranteed that the characters of the prefix p are also present in the string s. -----Output----- Output all permutations of the string s that start with the prefix p, in lexicographic order. If no such permutation exists, output a single line with the integer -1. -----Examples----- Input abc ab Output abc Input cab c Output cab cba Input a a Output a Input abc d Output -1","solution":"from itertools import permutations def lexicographic_permutations_with_prefix(s, p): Returns all permutations of the string s that start with the prefix p in lexicographic order. If no such permutations exist, return [-1]. if not p: return sorted(set([\'\'.join(perm) for perm in permutations(s)])) if not all(c in s for c in p): return [-1] perms = sorted(set([\'\'.join(perm) for perm in permutations(s)])) result = [perm for perm in perms if perm.startswith(p)] return result if result else [-1]"},{"question":"Write a function that takes a string of lowercase alphabets as input and returns the number of palindromic substrings in the string. The substrings with different start positions or end positions are counted as different substrings even if they consist of the same characters. Function Description: Complete the `countPalindromicSubstrings` function below. `countPalindromicSubstrings` has the following parameter(s): - `string s` - a string consisting of lowercase alphabets Returns: - `int`: the number of palindromic substrings in the input string Input Format: 1. The first line contains a single integer `n` - the length of the string. 2. The second line contains a single string `s` of length `n`. Constraints: - (1 leq n leq 1000) - `s` consists only of lowercase English letters. Output Format: Print an integer denoting the number of palindromic substrings in the string. Sample Input 0: ``` 5 ababa ``` Sample Output 0: ``` 9 ``` Explanation 0: The 9 palindromic substrings are: - \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\" - \\"aba\\", \\"bab\\", \\"aba\\" - \\"ababa\\" Sample Input 1: ``` 3 abc ``` Sample Output 1: ``` 3 ``` Explanation 1: The 3 palindromic substrings are: - \\"a\\", \\"b\\", \\"c\\"","solution":"def countPalindromicSubstrings(s): Returns the number of palindromic substrings in the input string s. n = len(s) count = 0 def countPalindromesAroundCenter(l, r): nonlocal count while l >= 0 and r < n and s[l] == s[r]: count += 1 l -= 1 r += 1 # Check all odd length palindromes for center in range(n): countPalindromesAroundCenter(center, center) # Check all even length palindromes for center in range(n - 1): countPalindromesAroundCenter(center, center + 1) return count"},{"question":"A popular video streaming service wants to design a new queue feature for its users. A queue in the application is a sequence of distinct video IDs which users can interact with in two primary ways: 1. Add a video to the queue. 2. Delete a video from the queue. The service also wants to support a few additional operations: 3. Find the position of a video in the queue. 4. Find the video ID at a particular position in the queue. 5. Print the entire queue. Your task is to simulate this queue management system and process a series of commands. Input: The input consists of multiple test cases. Each test case begins with an integer n (1 ≤ n ≤ 1000), which indicates the number of operations to be performed on the queue. The next n lines contain the operations, given as one of the following: 1. \\"ADD x\\" - where x is a positive video ID to be added to the end of the queue. 2. \\"DELETE x\\" - where x is a positive video ID to be removed from the queue. 3. \\"POSITION x\\" - where x is a positive video ID, find its position in the queue (1-based index). 4. \\"VIDEO y\\" - where y is a positive integer, find the video ID at the y-th position in the queue (1-based index). 5. \\"PRINT\\" - print all video IDs in the queue in their current order, separated by spaces. The last line of each test case is \\"0\\", indicating the end of operations for that test case. Output: For each test case, output the results of the operations, each on a new line. For operations \\"POSITION x\\" and \\"VIDEO y\\", if the video ID or position does not exist, output \\"NOT FOUND\\". For the \\"PRINT\\" operation, if the queue is empty, output \\"EMPTY QUEUE\\". Example: Input: 6 ADD 101 ADD 102 POSITION 101 VIDEO 2 DELETE 101 PRINT 0 5 ADD 202 ADD 203 VIDEO 3 POSITION 204 PRINT 0 Output: 1 102 102 NOT FOUND 102 203 EMPTY QUEUE 202 203 In the first test case: - The queue starts empty. - ADD 101 -> Queue: [101] - ADD 102 -> Queue: [101, 102] - POSITION 101 -> Position of 101 in the queue is 1. - VIDEO 2 -> The video ID at position 2 is 102. - DELETE 101 -> Queue: [102] - PRINT -> The queue contents are 102. In the second test case: - The queue starts empty. - ADD 202 -> Queue: [202] - ADD 203 -> Queue: [202, 203] - VIDEO 3 -> There is no video at position 3, so output \\"NOT FOUND\\". - POSITION 204 -> There is no video ID 204 in the queue, so output \\"NOT FOUND\\". - PRINT -> The queue contents are 202 203.","solution":"class VideoQueue: def __init__(self): self.queue = [] def add(self, x): if x not in self.queue: self.queue.append(x) def delete(self, x): if x in self.queue: self.queue.remove(x) def position(self, x): if x in self.queue: return self.queue.index(x) + 1 return \\"NOT FOUND\\" def video(self, y): if 1 <= y <= len(self.queue): return self.queue[y - 1] return \\"NOT FOUND\\" def print_queue(self): if not self.queue: return \\"EMPTY QUEUE\\" return \\" \\".join(map(str, self.queue)) def process_operations(operations): video_queue = VideoQueue() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": video_queue.add(int(parts[1])) elif command == \\"DELETE\\": video_queue.delete(int(parts[1])) elif command == \\"POSITION\\": result = video_queue.position(int(parts[1])) results.append(result) elif command == \\"VIDEO\\": result = video_queue.video(int(parts[1])) results.append(result) elif command == \\"PRINT\\": result = video_queue.print_queue() results.append(result) return results"},{"question":"Derek is an avid collector of ancient coins. He has a collection of coins with different values and wants to organize them in a showcase. Derek\'s showcase has a special feature: each row in the showcase can only contain coins of the same value. Derek is trying to find a way to organize his coins such that the number of rows in the showcase is minimized. Given an array of integers where each integer represents the value of a coin in Derek\'s collection, write a program that determines the minimum number of rows required to organize all the coins in Derek\'s showcase. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of coins in the collection. The second line contains n space-separated integers c_1, c_2, ..., c_n (1 ≤ c_{i} ≤ 100), the values of the coins in the collection. -----Output----- Print a single integer — the minimum number of rows required to organize all the coins in Derek\'s showcase. -----Examples----- Input 5 1 2 2 3 3 Output 3 Input 4 4 4 4 4 Output 1 Input 6 1 2 3 4 5 6 Output 6 -----Note----- In the first sample, Derek can organize his coins in 3 rows: [1], [2, 2], [3, 3]. In the second sample, Derek can organize all four coins in one row: [4, 4, 4, 4]. In the third sample, each coin has a unique value, so Derek needs 6 rows to organize them properly.","solution":"def minimum_rows(n, coin_values): Determine the minimum number of rows required to organize all the coins in the showcase. Parameters: n (int): The number of coins. coin_values (List[int]): A list of integers representing the values of the coins. Returns: int: The minimum number of rows required. # Using a set to find the unique values in the coin values list unique_values = set(coin_values) # The number of unique values represents the number of unique rows needed return len(unique_values) # Example usage: # n = 5 # coin_values = [1, 2, 2, 3, 3] # print(minimum_rows(n, coin_values)) # Output: 3"},{"question":"Alex is organizing a marathon event, and to manage the event efficiently, each runner will be assigned a unique bib number. The bib numbers have a special property: they need to be palindromes. A palindromic number is a number that remains the same when its digits are reversed. Given a range of numbers [A, B], Alex needs your help to determine if it\'s possible to assign a distinct palindromic bib number to each of the K runners in the marathon. If it is possible, return \\"POSSIBLE\\", otherwise return \\"IMPOSSIBLE\\". INPUT First line of input contains the number of test cases T and is followed by the next T lines. Each line contains three space-separated integers A, B, and K. OUTPUT For each test case, output \\"POSSIBLE\\" if it is feasible to have K distinct palindromic bib numbers within the range [A, B], otherwise, output \\"IMPOSSIBLE\\". Constraints 1 ≤ T ≤ 10 1 ≤ A, B ≤ 100000 1 ≤ K ≤ 100 SAMPLE INPUT 3 1 100 5 100 200 10 300 400 15 SAMPLE OUTPUT POSSIBLE POSSIBLE IMPOSSIBLE Explanation [1] In the first test case, there are more than 5 palindromic numbers between 1 and 100, such as 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, and so on. Hence, it is possible to assign palindromic bib numbers to 5 runners. [2] In the second test case, there are more than 10 palindromic numbers between 100 and 200, such as 101, 111, 121, 131, 141, 151, 161, 171, 181, 191. So it\'s possible to assign distinct palindromic bib numbers to 10 runners. [3] In the third test case, there are fewer than 15 palindromic numbers between 300 and 400, such as 303, 313, 323, 333, 343, 353, 363, 373, 383, 393 and hence it is impossible to assign distinct palindromic bib numbers to 15 runners.","solution":"def is_palindrome(num): Checks whether a number is a palindrome. return str(num) == str(num)[::-1] def possible_palindromic_bibs(A, B, K): Determines if it is possible to assign K distinct palindromic bib numbers within the range [A, B]. Returns \\"POSSIBLE\\" if feasible, otherwise \\"IMPOSSIBLE\\". palindromes = [num for num in range(A, B + 1) if is_palindrome(num)] if len(palindromes) >= K: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" def main(T, test_cases): results = [] for i in range(T): A, B, K = test_cases[i] results.append(possible_palindromic_bibs(A, B, K)) return results"},{"question":"Given a string, return the character that appears the most frequently. If there is a tie, return the character that appears first in the string. **Note:** The input string will contain only lowercase alphabets. ```python most_frequent_char(\'hello\') == \'l\' most_frequent_char(\'aabbcc\') == \'a\' ```","solution":"def most_frequent_char(s): from collections import Counter counter = Counter(s) max_frequency = max(counter.values()) for char in s: if counter[char] == max_frequency: return char"},{"question":"Given an array of integers, determine the count of distinct pairs (a, b) in the array where a + b is equal to a specified target value. Each pair must be unique, meaning no element from a pair can be reused in another pair. Function Signature: ```python def count_unique_pairs(nums: List[int], target: int) -> int: ... ``` **Input** - A list of integers `nums` which may contain duplicates. - An integer `target` representing the desired sum for each paired combination. **Output** - An integer indicating the number of unique pairs. **Example** ```python nums = [1, 1, 2, 45, 46, 46] target = 47 count_unique_pairs(nums, target) ``` Output: ```python 2 ``` In this example, the pairs are: - (1, 46) - (2, 45) Although `46` appears twice in the list, it can only be used once per unique pair. Therefore, the distinct pairs summing to 47 are two in number.","solution":"from typing import List def count_unique_pairs(nums: List[int], target: int) -> int: nums.sort() left, right = 0, len(nums) - 1 count = 0 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: count += 1 left += 1 right -= 1 # Increase left index to avoid duplicate pairs while left < right and nums[left] == nums[left - 1]: left += 1 # Decrease right index to avoid duplicate pairs while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < target: left += 1 else: right -= 1 return count"},{"question":"Input 6 Bob 4 9 5 1 3 6 Output 4.5","solution":"def find_median(numbers): Returns the median of the list of numbers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 0: # Even number of elements median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2.0 else: # Odd number of elements median = sorted_numbers[n//2] return median"},{"question":"Create a function that takes as input a list of integers and an integer target value. The function should return the indices of the two numbers in the list that add up to the target value. Assume each input would have exactly one solution. You may not use the same element twice. The indices should be returned as a tuple in the format (index1, index2), where index1 must be less than index2. Input The first input line will contain an integer N denoting the number of elements in the list. The second input line will contain N integers, separated by spaces, representing the list. The third input line will contain an integer T, representing the target value. Output Output a tuple (index1, index2) where index1 and index2 are the indices in the list of the two numbers that add up to the target value. Example Input 5 2 7 11 15 1 9 Output (0, 1) Input 4 1 2 3 4 6 Output (1, 3) Note - N will be an integer between 2 and 10^4. - The elements of the list will be integers in the range from -10^9 to 10^9. - The target value T will be an integer in the range from -10^9 to 10^9. - The returned indices should be zero-based.","solution":"def find_two_sum_indices(nums, target): Returns the indices of the two numbers in the list that add up to the target value. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None # Return None if no pair is found (only for safety, as the problem guarantees a solution)"},{"question":"Farmers in a hilly region use a traditional method to estimate the elevation of a point based on temperature differences. They believe that for every 100 meters of elevation gain, the temperature typically drops about 0.6 degrees Celsius. Knowing this, they use a simplified way to calculate the estimated elevation gain. You have current temperature readings from two points. You need to calculate the estimated elevation difference between these two points using the formula: [E = frac{T_1 - T_2}{0.006}] where (T_1) is the temperature at the lower point, (T_2) is the temperature at the higher point, and (E) is the elevation difference in meters. Write a program to calculate and print the estimated elevation difference between two points. **Input** The input is given in the following format. T1 T2 The input line provides two integers: * (T_1) (-50 leq T_1 leq 50), the temperature at the lower point in degrees Celsius, and * (T_2) (-50 leq T_2 leq 50), the temperature at the higher point in degrees Celsius. **Output** Output the estimated elevation difference in whole meters, rounded to the nearest integer. **Examples** **Input** 20 15 **Output** 833 **Input** 12 9 **Output** 500","solution":"import math def elevation_difference(T1, T2): Calculate the estimated elevation difference between two points based on temperature difference. Parameters: - T1: Temperature at the lower point in degrees Celsius - T2: Temperature at the higher point in degrees Celsius Returns: - The estimated elevation difference in meters, rounded to the nearest integer. # Calculate elevation gain using the provided formula E = (T1 - T2) / 0.006 # Round the result to the nearest integer return round(E)"},{"question":"Given a list of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] forms 6 units of trapped water.","solution":"def trap(height): Given a list of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate trapped water for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"A robot is navigating a maze represented by a 2D grid. The robot can only move up, down, left, or right, and some cells in the grid are blocked, which means the robot cannot move to those cells. The robot starts at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner of the grid (n-1, m-1). The grid is represented by a 2D list where `0` represents an open cell the robot can move to, and `1` represents a blocked cell. Write a function `can_robot_reach_end(grid)` that takes a 2D list `grid` as an argument and returns `true` if there\'s a path for the robot to reach the bottom-right corner of the grid, and `false` otherwise. Example: ``` grid = [ [0, 0, 1], [0, 0, 1], [1, 0, 0] ] ``` For the above grid, the function should return `true`. Please ensure the function handles edge cases, such as an entirely blocked start or end positions.","solution":"def can_robot_reach_end(grid): Determines if a robot can reach the bottom-right corner of a given grid from the top-left corner. Parameters: grid (list of list of int): 2D list representing the maze grid, where \'0\' is open and \'1\' is blocked. Returns: bool: True if the robot can reach the bottom-right corner, False otherwise. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return False n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up stack = [(0, 0)] while stack: x, y = stack.pop() if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0: stack.append((nx, ny)) grid[nx][ny] = -1 # mark as visited return False"},{"question":"You are given a matrix representing a grid-like city map where \'0\' represents an empty block and \'1\' represents a block where a building exists. Your task is to count the number of distinct groups of connected buildings. A group is defined as buildings connected either horizontally or vertically. Write a function to return the total number of distinct groups of connected buildings. Function Signature: ```python def count_building_groups(matrix: List[List[int]]) -> int: ``` Input: - The function receives a 2D list of integers representing the grid map. Output: - The function should return an integer representing the count of distinct groups of connected buildings. Examples: ```python assert count_building_groups([[1, 1, 0, 0, 0], [0, 1, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 1, 1, 1]]) == 4 assert count_building_groups([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == 3 assert count_building_groups([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0 ``` Notes: - The matrix will contain at least 1 row and 1 column and will not exceed 1000 rows and 1000 columns. - You may assume that all matrix elements are either 0 or 1.","solution":"from typing import List def count_building_groups(matrix: List[List[int]]) -> int: def dfs(i, j): if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or matrix[i][j] == 0: return matrix[i][j] = 0 dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) if not matrix or not matrix[0]: return 0 groups = 0 for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == 1: groups += 1 dfs(i, j) return groups"},{"question":"Your task is to write a function that takes as input a list of integers and returns a list of the unique elements in the same order as they first appeared in the original list. The function should retain the duplicates in the original order. For example: ``` input: [4, 5, 4, 6, 5, 7, 8] output: [4, 5, 6, 7, 8] ```","solution":"def unique_elements(lst): Returns a list of unique elements in the same order as they first appeared in the original list. seen = set() unique_lst = [] for element in lst: if element not in seen: seen.add(element) unique_lst.append(element) return unique_lst"},{"question":"The kingdom of CodeLand has a unique tradition of celebrating its festival by decorating trees. This year, they have decided to light up their trees with a new kind of aesthetic pattern. The pattern must adhere to specific rules set by the Royal Garden Committee: - The lights can be of two colors: red and blue. - The lights should alternate in colors, starting with either color, and each tree segment must adhere to this alternation. The committee has called upon you, a renowned programmer, to write an algorithm that determines the minimum number of lights required to decorate all trees in the kingdom such that all the segments follow the alternating color pattern. Each tree in CodeLand is represented by a height h_i, where i ranges from 1 to n. The tree requires h_i lights (one for each unit of height). -----Input----- The first line contains a single integer n (1 le n le 100) — the number of trees. The second line contains n integers h_1, h_2, ..., h_n (1 le h_i le 100) — the heights of the trees. -----Output----- Print a single integer — the minimum number of lights required to decorate all the trees according to the given rules. -----Example----- Input 3 4 2 3 Output 9 Explanation: - The first tree of height 4 requires 4 lights: [red, blue, red, blue] - The second tree of height 2 requires 2 lights: [red, blue] - The third tree of height 3 requires 3 lights: [red, blue, red] Total lights required: 4 + 2 + 3 = 9","solution":"def minimum_lights_required(n, heights): Determines the minimum number of lights required to decorate all trees following the alternating color pattern. Parameters: n (int): Number of trees heights (list of int): Heights of each tree Returns: int: Minimum number of lights required total_lights = sum(heights) return total_lights"},{"question":"Elliot has invented a new data compression algorithm specifically designed for strings. The algorithm works in k stages, and in each stage, a subsequence of characters at specific indices is selected and processed. This processing involves converting all the characters in the selected subsequence to their uppercase form. The aim of the algorithm is to see if by the end of all stages, all characters in the input string can be transformed to uppercase. Given a string s consisting of lowercase English letters and a series of k processing stages, determine if Elliot\'s algorithm correctly transforms the entire string to uppercase. Input The first line contains the integer n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ 10) — the length of the string and the number of stages in Elliot\'s algorithm. The second line contains the string s of length n. Then k lines follow, each describing the subsequence considered in a stage of Elliot\'s algorithm. The i-th of these lines contains the integer q_i (1 ≤ q_i ≤ n) followed by q_i integers j_{i,1}, j_{i,2}, ..., j_{i,q_i} (1 ≤ j_{i,1} < j_{i,2} < ... < j_{i,q_i} ≤ n) — the length of the subsequence considered in the i-th stage and the indices of the subsequence. Output Print YES if Elliot\'s algorithm converts the entire string to uppercase. Otherwise, print NO. Examples Input 5 3 hello 2 1 2 2 3 4 1 5 Output YES Input 6 2 abcdef 3 1 2 3 2 4 6 Output NO Note Explanation of the first sample: Initially, the string is \\"hello\\". - The first stage converts indices 1 and 2 to uppercase: \\"HEllo\\". - The second stage converts indices 3 and 4 to uppercase: \\"HELLo\\". - The third stage converts index 5 to uppercase: \\"HELLO\\". Thus, the entire string is transformed to \\"HELLO\\", and the output is YES. Explanation of the second sample: Initially, the string is \\"abcdef\\". - The first stage converts indices 1, 2, and 3 to uppercase: \\"ABCdef\\". - The second stage converts indices 4 and 6 to uppercase: \\"ABCDfF\\". Not all characters are in uppercase by the end of the algorithm, thus the output is NO.","solution":"def transform_to_uppercase(n, k, s, stages): # Convert the string to a list of characters for mutability char_list = list(s) # Process each stage for stage in stages: # Extract indices and convert them to 0-based index indices = stage[1:] for index in indices: char_list[index - 1] = char_list[index - 1].upper() # Check if all characters are uppercase for char in char_list: if not char.isupper(): return \\"NO\\" return \\"YES\\""},{"question":"Write a function to determine if a sequence of brackets is correctly nested. A sequence of brackets is considered correctly nested if it\'s of any of the following: - An empty sequence - A sequence of the forms \\"(A)\\", \\"[A]\\", or \\"{A}\\", where A is a correctly nested sequence - The concatenation of two correctly nested sequences Input - The first line contains one integer T, the number of test cases. - The next T lines each contain a string consisting of characters \'(\', \')\', \'[\', \']\', \'{\', \'}\' of length at most 10^5. Output - Print \\"YES\\" if the given sequence of brackets is correctly nested, \\"NO\\" otherwise. Sample Input 3 () ([{}]) ([]{)} Sample Output YES YES NO","solution":"def is_correctly_nested(sequence): stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in matching_bracket.values(): # if it\'s an opening bracket stack.append(char) elif char in matching_bracket.keys(): # if it\'s a closing bracket if stack == [] or matching_bracket[char] != stack.pop(): return \\"NO\\" else: # if it\'s an invalid character return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def are_sequences_correctly_nested(test_cases): results = [] for sequence in test_cases: results.append(is_correctly_nested(sequence)) return results"},{"question":"A company is planning to organize a charity treasure hunt competition across a rectangular grid city represented by an mbox{N} times mbox{M} matrix. Each cell in the grid may either contain a treasure or be empty. Participants of the hunt can start from any location on the grid and move to adjacent cells (left, right, up, or down) to collect treasures. However, the treasures at the edges of the grid are protected and cannot be collected. Your task is to determine the maximum number of treasures that a participant can collect starting from any cell in the grid, excluding the edges. Input Format The first line contains two integers, mbox{N} and mbox{M}, denoting the dimensions of the grid. The next mbox{N} lines each contain mbox{M} integers, either 0 or 1, where 0 represents an empty cell and 1 represents a cell containing a treasure. Constraints 3 leq N, M leq 50 Output Format A single integer representing the maximum number of treasures that can be collected starting from any non-edge cell. Sample Input 4 4 0 1 0 1 1 1 1 0 0 1 0 1 1 0 1 0 Sample Output 3 Explanation The maximum number of treasures that can be collected starting from any non-edge cell is 3. One possible path is starting from cell (2, 2) and collecting treasures in (2, 2), (2, 3), and (3, 2).","solution":"def max_treasures(grid): def dfs(r, c): if r < 1 or r >= len(grid) - 1 or c < 1 or c >= len(grid[0]) - 1 or grid[r][c] == 0: return 0 treasures_count = 1 grid[r][c] = 0 # Mark as visited for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nr, nc = r + dr, c + dc treasures_count += dfs(nr, nc) return treasures_count N, M = len(grid), len(grid[0]) max_treasures_collected = 0 for r in range(1, N-1): for c in range(1, M-1): if grid[r][c] == 1: max_treasures_collected = max(max_treasures_collected, dfs(r, c)) return max_treasures_collected # for testing def read_input(): first_line = input().strip().split() N, M = int(first_line[0]), int(first_line[1]) grid = [] for _ in range(N): row = list(map(int, input().strip().split())) grid.append(row) return grid if __name__ == \\"__main__\\": grid = read_input() print(max_treasures(grid))"},{"question":"Write a function that takes in a string representing a list of operations, where each operation is either \\"PUSH X\\" (push integer X onto a stack), \\"POP\\" (pop the top element off the stack), \\"PRINT\\" (print the current top element of the stack), or \\"INCREMENT k v\\" (increment the bottom k elements of the stack by v). The function should return a list of integers representing the output of each \\"PRINT\\" operation. Input Format: - The first line contains an integer n, the number of operations. - The following n lines each describe one operation as listed above. Output Format: - A list of integers representing the values outputted by the \\"PRINT\\" operations in the order they appear. Example: Input: 10 PUSH 4 PUSH 3 PUSH 2 PUSH 1 PRINT POP PRINT INCREMENT 2 1 PRINT POP PRINT Output: [1, 2, 3, 3] Explanation: - After PUSH 4, PUSH 3, PUSH 2, PUSH 1, the stack is [4, 3, 2, 1]. - PRINT outputs 1, the stack is still [4, 3, 2, 1]. - POP removes the top element, the stack becomes [4, 3, 2]. - PRINT outputs 2, the stack is still [4, 3, 2]. - INCREMENT 2 1 increments the bottom 2 elements by 1, the stack becomes [5, 4, 2]. - PRINT outputs 2, the stack is still [5, 4, 2]. - POP removes the top element, the stack becomes [5, 4]. - PRINT outputs 4, the stack is still [5, 4].","solution":"def stack_operations(n, operations): stack = [] result = [] for operation in operations: parts = operation.split() if parts[0] == \\"PUSH\\": stack.append(int(parts[1])) elif parts[0] == \\"POP\\": if stack: stack.pop() elif parts[0] == \\"PRINT\\": if stack: result.append(stack[-1]) elif parts[0] == \\"INCREMENT\\": k, v = int(parts[1]), int(parts[2]) for i in range(min(k, len(stack))): stack[i] += v return result"},{"question":"A new ride at the amusement park involves riding a roller coaster while collecting coins along the track. The roller coaster follows a straight path with platforms at certain points where coins can be collected. Initially, the rider is placed at the starting point of the ride and can move forward to collect the coins. However, the rider has a maximum number of moves he can make along the track. Each movement consumes one move, and the rider cannot move backward. The goal is to determine the maximum number of coins the rider can collect given the constraints. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M denoting the number of platforms and the maximum number of moves respectively. The second line of each test case contains N integers c1, c2, ..., cN where ci denotes the number of coins on the i-th platform. -----Output----- For each test case, output a single line containing one integer — the maximum number of coins the rider can collect. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 100 - 0 ≤ ci ≤ 1000 for each valid i -----Example----- Input: 3 5 3 1 2 3 4 5 4 4 0 0 0 0 6 2 5 1 3 2 8 6 Output: 9 0 6 -----Explanation----- Test case 1. We have N = 5 platforms and M = 3 moves. The number of coins on the platforms are [1, 2, 3, 4, 5]. The rider can move a maximum of 3 times, so the optimal path is to move to the first three platforms collecting 1 + 2 + 3 = 6 coins. Test case 2. We have N = 4 platforms and M = 4 moves. The number of coins on the platforms are [0, 0, 0, 0]. The rider can move at most 4 times, but there are no coins to collect, so the result is 0 coins. Test case 3. We have N = 6 platforms and M = 2 moves. The number of coins on the platforms are [5, 1, 3, 2, 8, 6]. The rider can move a maximum of 2 times, so the optimal path is to move to the first platform collecting 5 coins and the third platform collecting 3 coins, resulting in a total of 5 + 1 = 6 coins.","solution":"def max_coins(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] coins = test_cases[i][1] if M >= N: results.append(sum(coins)) else: results.append(sum(coins[:M])) return results"},{"question":"Problem K: City Network You are tasked with designing a network for a group of cities. Each city is represented by a node, and the possible roads connecting these cities are represented by edges with weights, where the weight signifies the distance between two connected cities. Write a program that determines the minimum total distance required to connect all the cities directly or indirectly, forming a connected network. The roads are bidirectional, and you should consider building the network such that the total distance (sum of weights of the edges) is minimized. # Input The input begins with a line that contains an integer `n` (1 <= n <= 1000), the number of cities. The next line contains an integer `m` (0 <= m <= n*(n-1)/2), the number of possible roads. The following `m` lines each contain three integers `a`, `b`, and `w` (1 <= a, b <= n, 1 <= w <= 10000) describing a road of distance `w` between cities `a` and `b`. # Output Print the minimum total distance required to connect all the cities. # Examples Input 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output 6 Input 3 3 1 2 3 2 3 4 1 3 2 Output 5","solution":"def minimum_total_distance(cities, roads): def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 if cities == 1: return 0 edges = [] for road in roads: a, b, w = road edges.append((w, a - 1, b - 1)) edges.sort() parent = [i for i in range(cities)] rank = [0] * cities mst_cost = 0 edges_used = 0 for edge in edges: weight, u, v = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += weight edges_used += 1 if edges_used == cities - 1: break return mst_cost"},{"question":"Task: You are tasked with writing a software module for a warehouse management system. The system needs to predict which products will run out of stock based on the current sales trends. # Requirements: Write a function that takes a list of integers representing the daily sales of a specific product over a given period and an integer representing the current stock level of this product. The function should return the day on which the product is predicted to run out of stock. If the product is not expected to run out of stock based on the given data, return -1. **Note:** Assume the sales list will contain at least one day\'s worth of data. # Examples: ``` daily_sales = [2, 3, 1, 5, 6] current_stock = 10 => 3 ``` Explanation: 1. Day 1: 10 - 2 = 8 2. Day 2: 8 - 3 = 5 3. Day 3: 5 - 1 = 4 4. Day 4: 4 - 5 = -1 (stock runs out at the end of day 4) ``` daily_sales = [1, 2, 3] current_stock = 15 => -1 ``` Explanation: The product will not run out of stock in the given period.","solution":"def predict_out_of_stock_day(daily_sales, current_stock): Predict the day on which the product will run out of stock. Parameters: daily_sales (list of int): The daily sales of the product. current_stock (int): The current stock level of the product. Returns: int: The day on which the product is predicted to run out of stock, or -1 if stock is sufficient. for day, sales in enumerate(daily_sales): current_stock -= sales if current_stock < 0: return day + 1 return -1"},{"question":"Your task is to write a function `extract_odd_square` that takes a list of integers and returns a new list containing the squares of the odd numbers from the input list. For example: ```extract_odd_square([1, 2, 3, 4, 5])``` should return ```[1, 9, 25]``` ```extract_odd_square([2, 4, 6])``` should return ```[]``` ```extract_odd_square([3, 3, 4, 5])``` should return ```[9, 9, 25]```","solution":"def extract_odd_square(lst): Returns a list containing the squares of the odd numbers from the input list. Parameters: lst (list of int): A list of integers Returns: list of int: A list containing the squares of the odd numbers from lst return [x ** 2 for x in lst if x % 2 != 0]"},{"question":"Given a binary tree: - Perform a breadth-first search (BFS) traversal. - For a given node, find and output the sum of values of its left and right children. If a node does not have a left or right child, treat it as 0. Constraints: * Each node\'s value is within the range [-1,000,000, 1,000,000]. * The binary tree will have no more than 1,000,000 nodes. * The value of the node to be queried will always be present in the tree. Input: The input is given in the following format: 1. An integer n representing the number of nodes in the binary tree. 2. n lines containing the value of each node and its left and right children, represented as: ``` value ; left ; right ``` where `left` and `right` are the values of the left and right children of the node respectively. If a node does not have a left or right child, it is represented by -1. 3. An integer q representing the number of queries. 4. q lines each containing a query node value. Output: For each query, output the sum of its left and right children. Example: Input: ``` 7 1 2 3 2 4 5 3 6 7 4 -1 -1 5 -1 -1 6 -1 -1 7 -1 -1 3 1 2 3 ``` Output: ``` 5 9 13 ```","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(n, nodes_info): nodes = {} for value, left, right in nodes_info: if value not in nodes: nodes[value] = TreeNode(value) node = nodes[value] if left != -1: if left not in nodes: nodes[left] = TreeNode(left) node.left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) node.right = nodes[right] return nodes def breadth_first_search(root): if not root: return [] bfs_order = [] queue = deque([root]) while queue: node = queue.popleft() bfs_order.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return bfs_order def find_children_sum(node, nodes): if node not in nodes: return 0 left_value = nodes[node].left.value if nodes[node].left else 0 right_value = nodes[node].right.value if nodes[node].right else 0 return left_value + right_value def process_queries(n, nodes_info, q, queries): nodes = build_tree(n, nodes_info) results = [] for query in queries: results.append(find_children_sum(query, nodes)) return results"},{"question":"There is a rectangular battlefield game played on a grid of size `n x m`. The battlefield has two types of cells: empty cells represented by \'.\' and walls represented by \'#\'. Some cells contain enemies represented by \'E\'. The player\'s goal is to move from a start cell \'S\' to an end cell \'T\' while avoiding enemies and walls. The player can move to an empty cell horizontally or vertically. The player has a special ability to destroy walls along a path, but this ability can only be used a limited number of times `k`. The path formed by destroyed walls should be a straight line either horizontally or vertically, and the length of the path can be any number not exceeding `n` or `m`. Write a program to determine if the player can reach the end cell \'T\' from the start cell \'S\' by moving through empty cells using the special ability at most `k` times to destroy walls. Input The first line of the input contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 50, 0 ≤ k ≤ 10) — the dimensions of the grid and the maximum number of times the special ability can be used. Each of the next `n` lines contains a string of length `m` representing the battlefield, where: - \'.\' denotes an empty cell, - \'#\' denotes a wall, - \'E\' denotes a cell with an enemy, - \'S\' denotes the starting cell, - \'T\' denotes the target cell. It is guaranteed that there is exactly one \'S\' and one \'T\', and they are distinct. Output Print \\"YES\\" if the player can reach the end cell \'T\' from the start cell \'S\', otherwise print \\"NO\\". Example Input 5 5 2 S.... # ..# ....# ..T Output YES Input 3 3 1 S#E # ET# Output NO","solution":"from collections import deque def can_reach_end(n, m, k, grid): def bfs(start): queue = deque([(start[0], start[1], 0)]) # (row, col, used_destroy) visited = set() visited.add((start[0], start[1], 0)) while queue: r, c, used_destroy = queue.popleft() for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m: if grid[nr][nc] == \'T\': return True if grid[nr][nc] == \'.\' and (nr, nc, used_destroy) not in visited: visited.add((nr, nc, used_destroy)) queue.append((nr, nc, used_destroy)) elif grid[nr][nc] == \'#\' and used_destroy < k: for i in range(1, max(n, m)): new_r, new_c = r + dr * i, c + dc * i if not (0 <= new_r < n and 0 <= new_c < m): break if grid[new_r][new_c] == \'T\': return True if grid[new_r][new_c] == \'.\' or i == k: if (new_r, new_c, used_destroy + 1) not in visited: visited.add((new_r, new_c, used_destroy + 1)) queue.append((new_r, new_c, used_destroy + 1)) break if grid[new_r][new_c] == \'E\': break if grid[new_r][new_c] == \'#\' and (new_r, new_c, used_destroy + 1) not in visited: visited.add((new_r, new_c, used_destroy + 1)) queue.append((new_r, new_c, used_destroy + 1)) start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'T\': end = (i, j) return \\"YES\\" if bfs(start) else \\"NO\\""},{"question":"Write a function that takes a list of integers and returns a new list containing the products of all elements in the original list except the element at the current index. You must achieve this without using division. Constraints * The length of the list will be between 1 and 100,000. * The integers will be between -1,000 and 1,000. Input The input is given as a single list of integers. Output The output should be a list of integers representing the product of all elements except the one at the current index. Example Input [1, 2, 3, 4, 5] Output [120, 60, 40, 30, 24] Explanation For the input list [1, 2, 3, 4, 5]: - The product of all elements except the first element is 2 times 3 times 4 times 5 = 120 - The product of all elements except the second element is 1 times 3 times 4 times 5 = 60 - The product of all elements except the third element is 1 times 2 times 4 times 5 = 40 - The product of all elements except the fourth element is 1 times 2 times 3 times 5 = 30 - The product of all elements except the fifth element is 1 times 2 times 3 times 4 = 24 Hence, the output list is [120, 60, 40, 30, 24].","solution":"def product_except_self(nums): Returns a list such that each element at index i is the product of all elements in the original list except the one at index i. This solution does not use division. n = len(nums) # Initialize the arrays result = [1] * n left_products = [1] * n right_products = [1] * n # Fill left_products: for i in range(1, n): left_products[i] = left_products[i-1] * nums[i-1] # Fill right_products: for i in range(n-2, -1, -1): right_products[i] = right_products[i+1] * nums[i+1] # Fill the result array for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"John is designing a card game and needs to create a method to verify if a given set of cards can be rearranged to follow an increasing sequence based on their values. Each card has a unique value ranging from 1 to N (where N is the total number of cards). Determine if the cards can be ordered in a strictly increasing sequence without repeating any value. Report \\"Yes\\" if it is possible, otherwise \\"No\\". Input Format: First line contains T, the number of test cases. Each test case consists of two lines: The first line contains the integer N, representing the number of cards. The second line contains N space-separated integers representing the values of the cards. Output Format: For each test case, print the answer, either \\"Yes\\" or \\"No\\" (without the quotes). Constraints: 1 ≤ T ≤ 200 1 ≤ N ≤ 100 SAMPLE INPUT 3 5 1 2 3 4 5 4 3 1 2 4 6 1 3 2 5 4 6 SAMPLE OUTPUT Yes Yes Yes","solution":"def can_be_ordered_strictly_increasing(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] cards = test_cases[i][1] if sorted(cards) == list(range(1, N + 1)): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a binary tree, you need to implement a function to find the largest subtree that is a Binary Search Tree (BST). A subtree of a tree T is a tree consisting of a node in T and all of its descendants in T. The largest subtree is the one with the maximum number of nodes. To solve this problem, you should write a function that takes the root of a binary tree and returns the size of the largest subtree that is a BST. # Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - The values of the nodes are in the range [-10^5, 10^5]. # Input: - The tree is provided in level-order form as a list of node values, where `None` represents a missing/absent child. # Output: - Print the size of the largest subtree that is a BST. # Example: Input: ``` [10, 5, 15, 1, 8, None, 7] ``` Output: ``` 3 ``` Explanation: - The largest BST subtree is: ``` 5 / 1 8 ``` which has 3 nodes. Input: ``` [5, 3, 8, 2, 4, 6, 9] ``` Output: ``` 7 ``` Explanation: - The entire tree is a valid BST. # Function Signature: ```python def largest_bst_subtree(root: TreeNode) -> int: # Your code here ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def largest_bst_subtree(root): def post_order(node): if not node: return (True, 0, float(\'inf\'), float(\'-inf\')) left_is_bst, left_size, left_min, left_max = post_order(node.left) right_is_bst, right_size, right_min, right_max = post_order(node.right) if left_is_bst and right_is_bst and left_max < node.val < right_min: size = left_size + right_size + 1 return (True, size, min(left_min, node.val), max(right_max, node.val)) else: return (False, max(left_size, right_size), 0, 0) return post_order(root)[1] # Helper function to construct a binary tree from a list def construct_tree(level_list): if not level_list: return None root = TreeNode(level_list[0]) queue = [root] index = 1 while queue and index < len(level_list): node = queue.pop(0) if index < len(level_list) and level_list[index] is not None: node.left = TreeNode(level_list[index]) queue.append(node.left) index += 1 if index < len(level_list) and level_list[index] is not None: node.right = TreeNode(level_list[index]) queue.append(node.right) index += 1 return root"},{"question":"Marcus loves playing treasure hunt games. He has recently devised a challenging game involving a grid of cells. Each cell in the grid can either be empty or contain a piece of treasure. The player can start at any cell and can move to an adjacent cell in one of the four directions: up, down, left, or right. The player\'s goal is to pick up as many pieces of treasure as possible in a single connected path, where each consecutive cell in the path must be adjacent to the previous one. You need to design a program to help Marcus determine the maximum number of treasures that can be collected in a single connected path. Input The first line of input contains two integers n and m — the dimensions of the grid (1 ≤ n, m ≤ 100). Next, n lines contain m characters each, where each character is either \'.\' (representing an empty cell) or \'T\' (representing a cell containing a treasure). Output Output a single integer — the maximum number of treasures that can be collected in a single connected path. Example Input 4 4 .T.. .TT. ..T. TT.. Output 4 Explanation In this example, a path collecting 4 treasures can be formed by starting at (1,1), moving to (2,1), then to (2,2), and finally to (2,3). Constraints * 1 ≤ n, m ≤ 100 * The grid can contain both empty cells and cells with treasures.","solution":"def max_treasures(grid, n, m): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'T\': return 0 grid[x][y] = \'.\' # mark the cell as visited count = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy count += dfs(nx, ny) return count max_treasure_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'T\': max_treasure_count = max(max_treasure_count, dfs(i, j)) return max_treasure_count # Example usage if __name__ == \\"__main__\\": n, m = 4, 4 grid = [ [\'.\', \'T\', \'.\', \'.\'], [\'.\', \'T\', \'T\', \'.\'], [\'.\', \'.\', \'T\', \'.\'], [\'T\', \'T\', \'.\', \'.\'] ] print(max_treasures(grid, n, m)) # Should output 4"},{"question":"Given an array of n integers, your task is to find the length of the longest subsequence that can be arranged in strictly increasing order. A subsequence is derived by deleting some or no elements from the array without changing the order of the remaining elements. Write a function `longest_increasing_subsequence(arr)` that takes an array of integers `arr` as input and returns the length of the longest increasing subsequence. # Input - An integer n (1 ≤ n ≤ 1000), the number of elements in the array. - An array `arr` of n integers (-10^9 ≤ arr[i] ≤ 10^9). # Output - The length of the longest increasing subsequence. # Example Input ``` 6 10 9 2 5 3 7 101 18 ``` Output ``` 4 ``` # Explanation The longest increasing subsequence is `[2, 3, 7, 101]`, which has length 4.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the input array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Given a string `s`, we define a **subsequence** of `s` to be a new string generated from `s` with some characters (can be none) removed without changing the order of the remaining characters. For example, the string `\\"abc\\"` has the subsequences `[\\"\\", \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\"]`. Your task is to write a function `longest_common_subsequence(s1, s2)` that takes two strings `s1` and `s2` as input and returns the length of their longest common subsequence. # Example ```python assert longest_common_subsequence(\\"abcde\\", \\"ace\\") == 3 # \\"ace\\" assert longest_common_subsequence(\\"abc\\", \\"abc\\") == 3 # \\"abc\\" assert longest_common_subsequence(\\"abc\\", \\"def\\") == 0 # No common subsequence ``` # Constraints - `0 <= len(s1), len(s2) <= 1000` - The strings contain only lowercase English letters. # Note - The function should use **dynamic programming** to solve the problem efficiently. - Avoiding naive approaches will ensure that the solution fits within typical execution time limits for large inputs.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given an integer array `nums` consisting of `n` elements. Your task is to find the maximum sum of any non-empty subarray of `nums`. A subarray is a contiguous segment of the array. For example, consider the array `nums` = [-2,1,-3,4,-1,2,1,-5,4] The maximum sum that can be obtained from any subarray is 6, for the subarray [4,-1,2,1]. Input Format: The first line of input contains an integer `n`, the number of elements in the array `nums`. The second line of input contains `n` space-separated integers, the elements of the array `nums`. Output Format: Print the maximum sum of any non-empty subarray on a single line. Constraints: 1 ≤ n ≤ 1000 -1000 ≤ nums[i] ≤ 1000 SAMPLE INPUT 9 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation: Explanation for the Sample has been given in the Problem Statement.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray of nums. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A farmer is planning to build a fence around his rectangular farm field. He has been provided with a specific length of fencing material, and wants to use all of it to maximize the area enclosed by the fence. However, the farm field is adjacent to a river, and he only needs to build a fence on three sides as the river forms the fourth side of the rectangle. Given the total length of fencing material available, calculate the maximum area that can be enclosed by this fence. Input: - An integer L representing the total length of fencing material available (1 ≤ L ≤ 10^9) Output: - A single integer representing the maximum area that can be enclosed using the fencing material. Example Input: 50 Output: 312 Input: 60 Output: 450 Explanation: For the first example, if L = 50, the dimensions of the field that would yield the maximum area are approximately 25 on the sides and 12.5 along the river. This gives an area of 25 * 12.5 = 312.5. As we are dealing with integers, the output is 312. For the second example, if L = 60, the dimensions of the field that would yield the maximum area are 30 on the sides and 15 along the river. This gives an area of 30 * 15 = 450.","solution":"def max_area(L): Given the total length L of fencing material available, calculates the maximum area that can be enclosed by the fence where the field is adjacent to a river. The field is rectangular, with only three sides need to be fenced which are: - two sides of length x (parallel to the river) and one side of length y (perpendicular to the river). Perimeter (P) = 2*x + y, subject to P = L The area (A) to maximize is A = x * y Solving for y in terms of x gives y = L - 2*x Substituting into the area equation, we get A = x * (L - 2*x) = L*x - 2*x^2 To maximize the area, take the derivative of A with respect to x, and set it to zero: dA/dx = L - 4*x = 0 => x = L/4 Thus, the maximum area is achieved when x = L/4 and y = L/2. Parameters: L (int): Total length of fencing material available (1 ≤ L ≤ 10^9) Returns: int: The maximum area that can be enclosed using the fencing material x = L / 4 y = L / 2 return int(x * y)"},{"question":"You are given a string `s` consisting only of uppercase English letters. Your task is to return the length of the longest contiguous substring containing only the letter \'A\'. Look at the example for more details. Example 1: Input: s = \\"BAAAB\\" Output: 3 Explanation: The longest contiguous substring containing only \'A\' is \\"AAA\\", which has a length of 3. Example 2: Input: s = \\"AABACCADEFA\\" Output: 2 Explanation: The longest contiguous substring containing only \'A\' is \\"AA\\", which has a length of 2. Your Task: You don\'t need to read input or print anything. Complete the function `longestAContiguousSubstring()` that takes string `s` as input parameter and returns the length of the longest contiguous substring containing only the letter \'A\'. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^5","solution":"def longestAContiguousSubstring(s): Returns the length of the longest contiguous substring containing only the letter \'A\'. Parameters: s (str): The input string consisting only of uppercase English letters. Returns: int: The length of the longest contiguous substring containing only \'A\'. max_length = 0 current_length = 0 for char in s: if char == \'A\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Find the Longest Increasing Subsequence Alice is preparing for a coding competition, and one of the problems she encountered involves finding the longest increasing subsequence in a sequence of numbers. The subsequence does not necessarily have to be contiguous, and Alice wants to practice this type of problem to improve her handling of dynamic programming concepts. Given an array of integers, determine the length of the longest increasing subsequence. Input: - The first line contains an integer \'n\', the size of the array. - The second line contains \'n\' space-separated integers representing the elements of the array. Output: - Print a single integer, the length of the longest increasing subsequence. Constraints: - 1 ≤ n ≤ 1000 - -10^4 ≤ Element of array ≤ 10^4 SAMPLE INPUT 8 10 9 2 5 3 7 101 18 SAMPLE OUTPUT 4 Explanation The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. There are other increasing subsequences, but [2, 3, 7, 101] is the longest among them.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in a given list of numbers. Args: nums: List[int] - a list of integers Returns: int - the length of the longest increasing subsequence if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] will hold the length of the LIS ending at index i for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage: # n = 8 # nums = [10, 9, 2, 5, 3, 7, 101, 18] # print(length_of_lis(nums)) # Output: 4"},{"question":"Given an integer array nums sorted in non-decreasing order and an integer target, return true if target exists in nums, and false otherwise. You must write an algorithm with O(log n) runtime complexity. Example 1: Input: nums = [-1,0,3,5,9,12], target = 9 Output: true Example 2: Input: nums = [-1,0,3,5,9,12], target = 2 Output: false Note: You may assume that all elements in nums are unique.","solution":"def search(nums, target): Conducts binary search on a sorted array to find the target value. Parameters: nums (list): A list of integers sorted in non-decreasing order. target (int): The integer value to search for within nums. Returns: bool: True if target is found in nums, False otherwise. left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 # Check if the target is present at mid if nums[mid] == target: return True # If target is greater, ignore the left half elif nums[mid] < target: left = mid + 1 # If target is smaller, ignore the right half else: right = mid - 1 # If we reach here, the element was not present return False"},{"question":"Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the smallest positive integer that does not appear in the array. The array can contain duplicates and negative numbers as well. Input The first line contains an integer, n, representing the size of the array. The second line contains n space-separated integers, representing the elements of the array. Output Print a single integer which is the first missing positive integer. Examples Input 5 1 2 0 Output 3 Input 4 3 4 -1 1 Output 2 Input 7 7 8 9 11 12 Output 1","solution":"def first_missing_positive(nums): Function to find the first missing positive integer in an array. Args: - nums: List[int] - List of integers. Returns: - int - The first missing positive integer. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Given a string `str` of lowercase alphabets, the task is to complete the function `removeKDigits()` that removes exactly `k` digits from the string such that the new string formed is the smallest possible. The order of the characters in the string should remain the same. Input: - The function takes two arguments as input: - a string `str` - an integer `k`, denoting the number of characters to remove. There will be `T` test cases and for each test case the function will be called separately. Output: - The function must return the resulting string after removing `k` digits, maintaining the smallest possible value and the order of remaining characters. Constraints: 1<=T<=100 1<=|str|<=1000 0<=k<=|str| Example: Input: 2 \\"1432219\\" 3 \\"10200\\" 1 Output: \\"1219\\" \\"200\\" Note: The Input/Output format and example provided are used for system\'s internal purpose and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def removeKDigits(s, k): Remove exactly k digits from the string such that the new string formed is the smallest possible. The order of the characters in the string should remain the same. stack = [] for char in s: while stack and k > 0 and stack[-1] > char: stack.pop() k -= 1 stack.append(char) # If there are still characters to remove from the stack while k > 0: stack.pop() k -= 1 # Removing leading zeros result = \\"\\".join(stack).lstrip(\'0\') return result if result else \\"0\\""},{"question":"Michelle is an avid mathematician who loves working with prime numbers. One day, she came up with the following problem while playing with her favorite numbers and started wondering if there was a pattern. The problem she came up with is this: Given an integer N, find the largest prime factor of the number N! (N factorial). Help Michelle find the solution by writing a function that can compute the largest prime factor of N!. -----Input----- The input consists of a single integer T, the number of test cases. Each of the next T lines contains a single integer N. -----Output----- For each test case, output the largest prime factor of N!. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 -----Example----- Input: 3 6 10 15 Output: 5 7 13 -----Explanation----- In the first case: 6! = 720, and its largest prime factor is 5. In the second case: 10! = 3628800, and its largest prime factor is 7. In the third case: 15! = 1307674368000, and its largest prime factor is 13.","solution":"def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(limit ** 0.5) + 1): if is_prime[start]: for multiple in range(start * start, limit + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def largest_prime_factorial(N): Returns the largest prime factor of N!. primes = sieve_of_eratosthenes(N) if primes: return primes[-1] return None def solve_prime_factors_of_factorials(T, test_cases): Solves the problem for T test cases. results = [] for N in test_cases: results.append(largest_prime_factorial(N)) return results # Example usage: # T = 3 # test_cases = [6, 10, 15] # print(solve_prime_factors_of_factorials(T, test_cases)) # Output should be: [5, 7, 13]"},{"question":"Write a program that reads a sequence of daily temperatures and determines the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, output 0 for that day. The program should be interactive and continue to accept sequences of temperatures until terminated by the user. Example Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0]","solution":"def daily_temperatures(temperatures): Determines the number of days one has to wait until a warmer temperature. Parameters: temperatures (list): List of daily temperatures. Returns: list: List representing the number of days to wait until a warmer temperature for each day. res = [0] * len(temperatures) stack = [] for i, temp in enumerate(temperatures): while stack and temp > temperatures[stack[-1]]: j = stack.pop() res[j] = i - j stack.append(i) return res"},{"question":"Given a positive integer N, write a function to check if it has alternating bits: specifically, if two adjacent bits will always have different values. Example 1: Input: N = 5 Output: Yes Explanation: 5 in binary is 101, which has alternating bits. Example 2: Input: N = 7 Output: No Explanation: 7 in binary is 111, which does not have alternating bits. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasAlternatingBits() which takes an integer N and returns \\"Yes\\" if N has alternating bits, else \\"No\\" if it does not have alternating bits. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1<=N<=10^9","solution":"def hasAlternatingBits(N): Function to check if a number has alternating bits in its binary representation. # get the binary representation of the number and remove \'0b\' prefix binary = bin(N)[2:] # iterate through the binary representation and check for alternating pattern for i in range(1, len(binary)): if binary[i] == binary[i - 1]: return \\"No\\" return \\"Yes\\""},{"question":"Task Alice enjoys reading books, and she has a specific reading habit. She wants to read a list of books sequentially, but not all days are suitable for reading. Alice reads exactly one book a day when she reads, but some days she can\'t read at all for various reasons. Given an integer array `days` where each element represents the day of the month (1-31) Alice can read a book, and an integer `d` which represents the number of books Alice wants to read, your task is to determine the earliest completion day (when all the books have been read). Assume the `days` array is sorted in ascending order and all its elements are unique. If it\'s impossible for Alice to read `d` books, return `-1`. # Example For `days = [1, 3, 5, 7, 8, 10, 12]` and `d = 5`, the output should be `8`. For `days = [1, 2, 3, 5, 6]` and `d = 6`, the output should be `-1`. For `days = [4, 6, 7, 10, 11, 15]` and `d = 3`, the output should be `7`.","solution":"def earliest_completion_day(days, d): Determine the earliest completion day when Alice can finish reading d books. Args: days: List of integers representing the days Alice can read. d: Integer representing the number of books Alice wants to read. Returns: The earliest day Alice can finish reading d books, or -1 if it\'s impossible. if len(days) < d: return -1 return days[d-1]"},{"question":"Calculate the Median of a List Your friend is working with statistical data and needs to calculate the median of a list of numbers. The median is the middle number in a sorted, ascending or descending list of numbers and can be more descriptive of that data set than the average. Write a function to calculate the median of a list of numbers. If the list has an odd number of elements, return the middle element. If the list has an even number of elements, return the average of the two middle elements. Your function should handle lists of integers and floating-point numbers. For example: - Given the list `[1, 3, 3, 6, 7, 8, 9]`, the median is `6`. - Given the list `[1, 2, 3, 4, 5, 6, 8, 9]`, the median is `(4+5)/2 = 4.5`. Function signature: ```python def calculate_median(numbers: List[Union[int, float]]) -> float: pass ``` Ensure that: 1. Your function handles the case of an empty list by returning `None`. 2. Your function sorts the list before performing any calculations. 3. You do not use any external libraries for sorting or calculating the median. Example: ```python assert calculate_median([1, 3, 3, 6, 7, 8, 9]) == 6 assert calculate_median([1, 2, 3, 4, 5, 6, 8, 9]) == 4.5 assert calculate_median([]) is None assert calculate_median([1.5, 3.1, 2.8, 7.4]) == 2.95 ```","solution":"def calculate_median(numbers): Calculates the median of a list of numbers. Parameters: numbers (list of int/float): The list of numbers to calculate the median. Returns: float: The median of the list or None if the list is empty. if not numbers: return None numbers.sort() n = len(numbers) if n % 2 == 1: return numbers[n // 2] else: mid1, mid2 = numbers[n // 2 - 1], numbers[n // 2] return (mid1 + mid2) / 2"},{"question":"You are given a square grid of size n times n where each cell contains either a \'.\' or a \'#\'. A cell containing a \'.\' is traversable, and one containing a \'#\' is not. A path starts at the top-left cell (1,1) and ends at the bottom-right cell (n,n). You can move from a cell to its adjacent cell in either the right or the downward direction. Write a function to count the number of distinct paths from the top-left to the bottom-right cell, such that each path does not encounter any \'#\' cells. Since the number of distinct paths can be very large, return the result modulo 10^9 + 7. -----Input----- The first line contains one integer n (1 leq n leq 500), the size of the grid. Each of the next n lines contains n characters (either \'.\' or \'#\'), representing the n times n grid. -----Output----- Output a single integer — the number of distinct paths from the top-left to the bottom-right cell, modulo 10^9 + 7. -----Examples----- Input 3 ... .#. ... Output 2 Input 4 .... .#.. ..#. .... Output 4 Input 2 .# #. Output 0 -----Note----- In the first sample, there are 2 ways to reach the bottom-right cell: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) In the third sample, it is not possible to reach the bottom-right cell due to the blocking \'#\' cells.","solution":"MOD = 10**9 + 7 def count_paths(grid): n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][n-1]"},{"question":"-----Question----- You are given a string that represents a sentence written in camelCase. Your task is to convert this string into a space-separated sentence with proper capitalization. CamelCase is a naming convention where each word starts with a capital letter except the first word, which starts with a lowercase letter. -----Input----- The input contains a single string on a single line. This string consists of only lowercase and uppercase letters and has between 1 and 100 characters. -----Output----- Output a single line which is the converted sentence with spaces and proper capitalization. The first word should start with a capital letter and the rest with lowercase. -----Examples----- Sample Input 1: helloWorld Sample Output 1: Hello world Sample Input 2: thisIsACodingAssessment Sample Output 2: This is a coding assessment Sample Input 3: openAi Sample Output 3: Open ai","solution":"def camel_case_to_sentence(camel_case): Converts a camelCase string into a space-separated sentence with proper capitalization. result = [] for char in camel_case: if char.isupper(): result.append(\' \' + char.lower()) else: result.append(char) sentence = \'\'.join(result).strip() return sentence.capitalize()"},{"question":"In an ancient kingdom, there is a need to deliver crucial messages between cities using a system of couriers. The kingdom is represented as a graph with `n` cities and `m` potential roads between them. Each road has a specified weight that represents the time taken to traverse it. However, the construction of roads is costly and the kingdom has to carefully select which roads to build. The kingdom\'s primary objective is to ensure that there exists a path between every pair of cities such that the maximum time taken on any single road in that path is minimized. In other words, if we were to imagine the optimal roads being chosen, the time for the longest road in any possible path between any two cities should be as small as possible. Your task is to determine the minimum possible value of the longest road in the optimal network that guarantees connectivity between every pair of cities. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5) — the number of cities and potential roads respectively. The next `m` lines each describe a road with three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 10^6) — two cities connected by this road and the time taken to traverse it. Output Print the minimum possible value of the longest road in the optimal network. Examples Input 4 5 1 2 5 2 3 10 3 4 1 4 1 3 1 3 2 Output 3 Input 3 3 1 2 6 2 3 8 1 3 5 Output 6 Note In the first example, one possible optimal network is created by connecting roads 1-2, 2-3, and 4-1. The longest road in this network takes 5 units of time, thus the answer is 5. In the second example, any minimum spanning tree will include the edges with weights 6 and 5, and hence the longest road in the optimal setup with guaranteed connectivity is the one with 6 units of time. Thus, the answer is 6.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) # path compression return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_max_weight_kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n max_edge_in_mst = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) max_edge_in_mst = max(max_edge_in_mst, w) n -= 1 if n == 1: # if only one component is left break return max_edge_in_mst"},{"question":"For a given string `s` consisting of lowercase letters and a given integer `k`, find if it is possible to rearrange the characters of the string `s` so that no two identical characters are within `k` positions of each other. It is forbidden to delete characters as well as insert new characters. You can assume that the input has only valid strings and integers. -----Input----- The first line contains a single integer `t` — the number of test cases (`1 ≤ t ≤ 100`). The test cases follow, each in two lines. The first line of a test case contains a single integer `k` (`1 ≤ k ≤ 100`). The second line contains the string `s` (`1 ≤ |s| ≤ 1000`) — the input string consisting of lowercase English letters. -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the characters as described, and \\"NO\\" otherwise. -----Example----- Input 2 2 aabbcc 3 aaabc Output YES NO -----Note----- In the first test case, one possible reordering is \\"abcabc\\". Here, no two identical characters are within `2` positions of each other. In the second test case, it is not possible to arrange the characters in such a way that no two identical characters are within `3` positions of each other.","solution":"from collections import Counter import heapq def can_rearrange(k, s): Determine if the string can be rearranged so that no two identical characters are within k positions of each other. if k <= 1: # If k is 1, any arrangement would be valid return \\"YES\\" counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) queue = [] result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) queue.append((char, count + 1)) # adding to cooldown if len(queue) >= k: prev_char, prev_count = queue.pop(0) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # push back to heap if len(result) == len(s): return \\"YES\\" else: return \\"NO\\" def can_rearrange_cases(t, cases): results = [] for i in range(t): k = cases[i][0] s = cases[i][1] result = can_rearrange(k, s) results.append(result) return results"},{"question":"You are given a set of events with their start and end times. Sometimes the events overlap. Your task is to find out the minimum number of resources required so that all events can be attended without any conflict. Input: The first line of the input contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of events. Each of the next n lines contains two integers start and end (1 ≤ start < end ≤ 10^9), the starting and ending time of each event. Output: Print a single integer — the minimum number of resources required to attend all events. Example: Input: 3 1 4 2 5 7 9 Output: 2 Explanation: Events [1,4] and [2,5] overlap, thus requiring at least 2 separate resources to attend both. The event [7,9] does not overlap with any other event, so the same resource can be used to attend this one after finishing the others. Therefore, only 2 resources are needed in total.","solution":"def min_resources_required(events): Determines the minimum number of resources required to attend all events without conflicts. Parameters: events (list of tuples): A list where each tuple contains two integers representing the start and end time of an event. Returns: int: The minimum number of resources required. # Create \'times\' list containing start and end times marked appropriately times = [] for start, end in events: times.append((start, \'start\')) times.append((end, \'end\')) # Sort the times, with \'start\' before \'end\' if times are equal times.sort(key=lambda x: (x[0], x[1] == \'end\')) max_resources = 0 current_resources = 0 # Traverse the times linearly for time, ttype in times: if ttype == \'start\': current_resources += 1 max_resources = max(max_resources, current_resources) else: current_resources -= 1 return max_resources # Example usage: # print(min_resources_required([(1, 4), (2, 5), (7, 9)])) # Output: 2"},{"question":"You are given an integer array `arr` and an integer threshold. Determine the minimum integer value `x` such that the sum of dividing each element in the array by `x` and taking the ceiling of the result is less than or equal to the threshold. Example 1: ``` arr = [1, 2, 5, 9] threshold = 6 The result can be achieved with x = 5: ceil(1 / 5) + ceil(2 / 5) + ceil(5 / 5) + ceil(9 / 5) = 1 + 1 + 1 + 2 = 5 which is less than or equal to the threshold. So the output is: 5 ``` Example 2: ``` arr = [2, 3, 5, 7, 11] threshold = 11 The result can be achieved with x = 2: ceil(2 / 2) + ceil(3 / 2) + ceil(5 / 2) + ceil(7 / 2) + ceil(11 / 2) = 1 + 2 + 3 + 4 + 6 = 16 Since 16 is not less than or equal to the threshold, we try higher x values. Let\'s consider x = 3: ceil(2 / 3) + ceil(3 / 3) + ceil(5 / 3) + ceil(7 / 3) + ceil(11 / 3) = 1 + 1 + 2 + 3 + 4 = 11 which is equal to the threshold. So the output is: 3 ``` Constraints: - `1 <= arr.length <= 10^5` - `1 <= arr[i] <= 10^6` - `arr` contains at least one number and all elements are positive integers. - `1 <= threshold <= 10^5`","solution":"import math def get_min_divisor(arr, threshold): Returns the minimum integer value x such that the sum of the result of dividing each element in the array by x and taking the ceiling of the result is less than or equal to the threshold. def feasible(x): return sum(math.ceil(num / x) for num in arr) <= threshold left, right = 1, max(arr) while left <= right: mid = (left + right) // 2 if feasible(mid): right = mid - 1 else: left = mid + 1 return left"},{"question":"Polycarp is organizing a race for his friends and needs your help to determine the ranking of the participants. During the race, each participant earns a score at each checkpoint. The final score of a participant is the sum of scores from all checkpoints. Given the list of participants and their scores at each checkpoint, your task is to output the ranking of the participants. ----Input---- The first line contains one integer n (1 le n le 100) — the number of participants. Each of the next n lines contains a string which is the name of the participant (non-empty, consisting of lowercase Latin letters, length does not exceed 100), followed by space-separated integers indicating the scores obtained by the participant at each checkpoint. Each line is terminated by an integer k (1 le k le 10) which denotes the total number of scores listed for that participant. ----Output---- Output n lines containing the participants\' names in the order of their ranking from highest to lowest scores. If two or more participants have the same total score, they should appear in lexicographical order of their names. ----Example---- Input 5 alice 4 5 1 3 10 bob 6 1 8 3 5 3 charlie 5 5 10 david 7 7 7 5 6 4 eve 2 2 2 2 2 Output david charlie alice bob eve ----Note---- In the example above: - david has a total score of 7+7+7+5+6+4 = 36 - charlie has a total score of 5+5+10 = 20 - alice has a total score of 4+5+1+3+10 = 23 - bob has a total score of 6+1+8+3+5+3 = 26 - eve has a total score of 2+2+2+2+2 = 10 The participants are listed in descending order of their total scores. When scores are the same, they are listed in lexicographical order of their names.","solution":"def rank_participants(participants): Takes a list of participants with their scores at each checkpoint and returns the ranking of the participants based on their total scores. result = [] for participant in participants: data = participant.split() name = data[0] scores = list(map(int, data[1:])) total_score = sum(scores) result.append((name, total_score)) # Sort primarily by score (descending) and secondarily by name (ascending) result.sort(key=lambda x: (-x[1], x[0])) # Extracting the names from the sorted result ranked_names = [name for name, score in result] return ranked_names"},{"question":"**Find the Missing Number** Write a function that takes an array containing n distinct numbers taken from the range 0 to n. The function should return the one number that is missing from the array. You must solve this problem with a linear runtime complexity and without using extra space (other than limited variables). **Constraints:** - The array will always contain distinct numbers. - The input array will never be null or empty. - The missing number will always be within the range 0 to n. **Examples:** ```python find_missing_number([3, 0, 1]) # Returns: 2 find_missing_number([0, 1]) # Returns: 2 find_missing_number([9,6,4,2,3,5,7,0,1]) # Returns: 8 ``` **Note:** Consider using mathematical concepts such as the sum of the first n natural numbers to derive a more computationally efficient solution.","solution":"def find_missing_number(nums): Returns the one missing number from the array. The array contains n distinct numbers taken from the range 0 to n. n = len(nums) expected_sum = n * (n + 1) / 2 # Sum of numbers from 0 to n actual_sum = sum(nums) # Sum of elements in the given array return int(expected_sum - actual_sum)"},{"question":"A mysterious scroll has been found in an ancient library, and it contains encrypted messages believed to reveal the hidden location of a mythical treasure. The encryption method used is based on a unique set of rules involving prime numbers. Your task is to write a program that decodes these messages. Each message consists of pairs of integers (a, b). To decode the message, you need to count the prime numbers in the interval [a, b] (including both endpoints). Input Format The first line contains an integer N, the number of messages. Each of the following N lines contains a pair of integers a and b. Output Format For each message, output a single integer - the count of prime numbers in the interval [a, b]. Constraints 1 ≤ N ≤ 10 1 ≤ a ≤ b ≤ 10^6 SAMPLE INPUT 3 2 10 11 20 20 30 SAMPLE OUTPUT 4 4 2 Explanation For the first message, primes in the interval [2, 10] are 2, 3, 5, and 7 (4 primes). For the second message, primes in the interval [11, 20] are 11, 13, 17, and 19 (4 primes). For the third message, primes in the interval [20, 30] are 23 and 29 (2 primes).","solution":"def sieve_of_eratosthenes(limit): Generate a list of booleans representing primality of numbers from 0 to limit. True means the number is prime, False means it is not. is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p <= limit): if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 return is_prime def count_primes_in_intervals(intervals): For each interval in the intervals list, count the prime numbers between a and b (inclusive). max_b = max(b for _, b in intervals) is_prime = sieve_of_eratosthenes(max_b) result = [] for a, b in intervals: count = sum(1 for i in range(a, b + 1) if is_prime[i]) result.append(count) return result def decode_messages(n, messages): Main function to decode N messages containing intervals (a, b). intervals = [tuple(map(int, message.split())) for message in messages] return count_primes_in_intervals(intervals)"},{"question":"A biologist is experimenting with a colony of bacteria. She observes that the colony grows in size according to a specific rule. The rule is: each bacterium splits into two new bacteria after exactly one hour. Initially, the colony has only one bacterium. The biologist wonders how many bacteria will be present after N hours. Write a program to calculate the number of bacteria present after N hours. Input Format A single integer N, denoting the number of hours. Constraints 0 leq N leq 60 Output Format Print the number of bacteria present after N hours. Sample Input 3 Sample Output 8 Explanation Initially, there is one bacterium. After 1 hour, it splits into 2 bacteria. After 2 hours, each of these 2 bacteria splits into 2 more, resulting in 4 bacteria. After 3 hours, each of the 4 bacteria splits into 2, resulting in 8 bacteria. Thus, the number of bacteria after 3 hours is 8.","solution":"def number_of_bacteria(N): Returns the number of bacteria present after N hours. return 2 ** N"},{"question":"Given a series of operations on an initially empty list of size `n`, each operation being an insertion of a number at a specific index or a removal of the number at a specific index, we want to determine the list after all operations have been performed. Example Consider an empty list with size n=5 and a sequence of operations `operations=[[\\"insert\\", 1, 10], [\\"insert\\", 3, 20], [\\"remove\\", 1]]`. First, insert `10` at index `1`. So, the list becomes `[0, 10, 0, 0, 0]`. Then insert `20` at index `3`. The list becomes `[0, 10, 0, 20, 0]`. Finally, remove the element at index `1`. The list becomes `[0, 0, 0, 20, 0]`. Function Description: Complete the function `processOperations` in the editor below. processOperations has the following parameters: - int n: the size of the list - list operations: a 2-dimensional list of operations Returns: - list: the list after all operations have been performed Input Format: The first line contains an integer, `n`, the size of the list. The next lines contain the operations. Each operation is described by a string and possibly other integers. The string can be either \\"insert\\" or \\"remove\\". If it is \\"insert\\", then it is followed by two integers representing the index and the value. If it is \\"remove\\", then it is followed by one integer representing the index. Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ number of operations ≤ 1000 - Each \\"insert\\" operation will have a valid index within the range `[0, n-1]` - Each \\"remove\\" operation will have a valid index within the range `[0, n-1]` Sample Input: 5 insert 1 10 insert 3 20 remove 1 Sample Output: [0, 0, 0, 20, 0] Explanation: Initially, the list is `[0, 0, 0, 0, 0]`. After inserting 10 at index 1: `[0, 10, 0, 0, 0]`. After inserting 20 at index 3: `[0, 10, 0, 20, 0]`. After removing the element at index 1: `[0, 0, 0, 20, 0]`.","solution":"def processOperations(n, operations): Given a series of operations on an initially empty list of size n, Returns the list after performing all the operations. # Initialize the list with zeros result = [0] * n for operation in operations: op_type = operation[0] if op_type == \\"insert\\": index = operation[1] value = operation[2] result[index] = value elif op_type == \\"remove\\": index = operation[1] result[index] = 0 return result"},{"question":"Reversing a Linked List Related Kata If you enjoyed this Kata, you might also like [Delete Node in a Linked List](https://leetcode.com/problems/delete-node-in-a-linked-list/) on LeetCode. Preloaded Preloaded for you is a class, struct or derived data type `Node` (depending on the language) used to construct linked lists in this Kata: ```python class Node(): def __init__(self, data, next=None): self.data = data self.next = next ``` If you are attempting this Kata in any language besides Python, the `Node` definition might look different. Please refer to the Sample Tests for the exact definition of the `Node` structure in your specific programming language. Prerequisites This Kata assumes that you are already familiar with the concept of linked lists. If this is not the case, you may want to read up on [this article on Wikipedia](https://en.wikipedia.org/wiki/Linked_list). Specifically, the linked lists this Kata refers to are **singly linked lists**, where the value of a node is stored in its `data`/`data`/`Data` property and the reference to the next node is stored in its `next`/`next`/`Next`/`next_node` property. Task Create a function `reverse_list` which accepts an argument `list`/`list` and returns the head of the linked list where all the nodes are in the reversed order. For example, given the following linked list: ```python Node(1, Node(2, Node(3, Node(4)))) ``` ... after reversal, the linked list should look like: ```python Node(4, Node(3, Node(2, Node(1)))) ``` You may assume that any `Node` in this Kata contains **non-negative integer** values. For example, you will not encounter a `Node` whose `data`/`data`/`Data` property is a string or other non-integer value. For more edge cases, the resulting linked list of an empty input list will also be empty. Enjoy this coding challenge!","solution":"class Node: def __init__(self, data, next=None): self.data = data self.next = next def reverse_list(head): Reverses a singly linked list. :param head: Head node of the singly linked list. :return: Head node of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move prev and current one step forward current = next_node return prev # prev will be the new head at the end of the loop"},{"question":"David has recently taken up gardening and wants to create a beautifully symmetrical garden. He has n plants that he wants to plant in a straight line. For the garden to be symmetrical, the first half of the plants should mirror the second half. That is, the i-th plant from the start should be the same as the i-th plant from the end. Help David determine the number of different ways he can arrange his n plants such that his garden remains symmetrical. -----Input----- The first line contains one integer t (1 le t le 10^3) — the number of test cases. Each test case consists of one line containing one integer n (1 le n le 10^3). -----Output----- For each test case, print one integer — number of ways to arrange the plants symmetrically. Because the answer can be very big, please print the answer modulo 998,244,353. -----Examples----- Input 5 1 2 3 4 5 Output 1 1 1 2 1 -----Note----- In the first test case, there is only one plant, so the only symmetrical arrangement is itself. In the second test case, there are two plants, and the only symmetrical arrangement is where both plants are identical. In the fourth test case, with four plants, if we denote plant types as 1 and 2, we can arrange them as [1, x, x, 1] and [2, x, x, 2] where x can be any plant type, giving more symmetric arrangements. For odd n, like in the third and fifth test cases, the problem constraint still holds with the center plant acting as the reflective point for symmetry.","solution":"def num_symmetrical_arrangements(n): Returns number of symmetrical arrangements of n plants modulo 998244353. MODULO = 998244353 if n == 1: return 1 elif n % 2 == 0: return pow(2, n//2, MODULO) else: return 1 def process_test_cases(t, test_cases): results = [] for n in test_cases: results.append(num_symmetrical_arrangements(n)) return results"},{"question":"Given a sequence of integers, a \\"peak\\" is defined as an element that is greater than its immediate neighbors. For example, in the sequence [1, 3, 2, 4, 1, 5], both 3 and 4 are peaks. Write a program that determines the number of peaks in a given sequence. ------ Input details ------ The first line contains a single integer n — the length of the sequence. The second line contains n integers, which are the elements of the sequence. ------ Output details ------ Output a single integer — the number of peaks in the sequence. ------ Constraints ------ 1 ≤ n ≤ 10^5 1 ≤ element of the sequence ≤ 10^9 ------ Sample Input 1 ------ 6 1 3 2 4 1 5 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ In the sequence [1, 3, 2, 4, 1, 5], the element 3 is a peak because it is greater than its neighbors 1 and 2. Likewise, the element 4 is a peak because it is greater than its neighbors 2 and 1. Therefore, there are 2 peaks in the given sequence.","solution":"def count_peaks(sequence): Returns the number of peaks in the given sequence. Parameters: sequence (list): A list of integers. Returns: int: The number of peaks in the sequence. n = len(sequence) if n < 3: return 0 # Cannot have a peak if fewer than 3 elements peaks = 0 for i in range(1, n - 1): if sequence[i] > sequence[i - 1] and sequence[i] > sequence[i + 1]: peaks += 1 return peaks"},{"question":"A robot is navigating a grid that extends infinitely in all directions. The robot starts at the origin point (0, 0) and can move according to a set of commands. Each command directs the robot to move one step in a specific direction: \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). After following a sequence of commands, the robot ends up at a final position (x, y). Your task is to write a program that determines whether the robot returns to the origin after executing a given set of commands. If the robot ends up at the starting position, the program should return \\"Yes\\"; otherwise, it should return \\"No\\". Input The input consists of a single string representing a sequence of commands. Each character in the string will be one of \'U\', \'D\', \'L\', or \'R\'. Output Print \\"Yes\\" if the robot returns to the origin after executing all commands. Otherwise, print \\"No\\". Examples Input UDLR Output Yes Input UUDDLRLR Output Yes Input UUDDLLRRU Output No Note: Remember that the robot starts at (0, 0), and each \'U\' command moves it one step up, each \'D\' command moves it one step down, each \'L\' command moves it one step left, and each \'R\' command moves it one step right.","solution":"def robot_return_to_origin(commands): Determines if the robot returns to the origin (0, 0) after executing the given commands. Parameters: commands (str): A string of commands, where each command is one of \'U\', \'D\', \'L\', \'R\'. Returns: str: \\"Yes\\" if the robot returns to the origin, \\"No\\" otherwise. # Initialize starting coordinates x, y = 0, 0 # Iterate over each command and update coordinates for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # Check if the robot is back at the origin return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"Problem Statement There is an integer array `A` of size `N`. An operation involves selecting any subarray of length greater than 1 and replacing it with its sum. You can perform this operation any number of times (including zero) on the array. Determine if it is possible to convert the array into a single element array that contains an even number. Constraints * 1 ≤ N ≤ 1,000 * 1 ≤ A[i] ≤ 10^3 (1 ≤ i ≤ N) Input Input follows the following format. All given numbers are integers. N A_1 A_2 ... A_N Output Output \\"YES\\" if it is possible, otherwise \\"NO\\" on one line. Examples Input 3 1 2 3 Output YES Input 4 1 3 5 7 Output NO Input 2 2 4 Output YES","solution":"def can_transform_to_even(N, A): Determines if it\'s possible to convert the array into a single element array that contains an even number. Parameters: N (int): The size of the array. A (list of int): The array of integers. Returns: str: \'YES\' if possible to convert to a single even number, \'NO\' otherwise. # If there\'s at least one even number in the array, we can make the sum even for num in A: if num % 2 == 0: return \'YES\' # If all numbers are odd, we can never turn them into an even sum since the sum of odd numbers is always odd return \'NO\'"},{"question":"Given a string `s` and a list of words `words`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words from `words`. The same word in the dictionary may be reused multiple times in the segmentation. Write a function `canSegmentString(s, words)` that returns a boolean indicating whether `s` can be segmented according to the rules mentioned. -----Function Signature----- ```python def canSegmentString(s: str, words: List[str]) -> bool: ``` -----Input----- - `s` (1 ≤ length of s ≤ 300): A non-empty string consisting of lowercase English letters. - `words` (1 ≤ length of words ≤ 1000): A list of non-empty strings consisting of lowercase English letters. -----Output----- - Return `True` if `s` can be segmented into a sequence of words from `words`, otherwise return `False`. -----Examples----- Input s = \\"applepenapple\\" words = [\\"apple\\", \\"pen\\"] Output True Input s = \\"catsandog\\" words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output False Input s = \\"pineapplepenapple\\" words = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] Output True -----Explanation----- In the first example, the string \\"applepenapple\\" can be segmented as \\"apple pen apple\\". In the second example, it is not possible to segment \\"catsandog\\" into a sequence of words from the given list. In the third example, the string \\"pineapplepenapple\\" can be segmented as \\"pine apple pen apple\\", or as \\"pineapple pen apple\\", or as \\"pine applepen apple\\".","solution":"def canSegmentString(s, words): word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"A factory manufactures widgets. The assembly process involves multiple workers, each of whom works for a different duration each day. The management wants to ensure that all workers start and stop work at the same time. The start time is always 9:00 AM, and the management can only affect the stop time by reducing the work duration of any worker if needed. You are given the work durations of each worker in minutes. Your task is to find the latest possible stop time, while ensuring that all workers stop working simultaneously. Example 1: Input: work_durations = [300, 150, 200, 400] Output: 450 Explanation: The earliest end time for all workers to stop simultaneously is 9:00 AM + 450 minutes = 4:30 PM. We can reduce the durations of the workers to 300, 150, 200, and 300 respectively. The latest possible simultaneous end time is a stop time of 4:30 PM, or 450 minutes after start. Example 2: Input: work_durations = [100, 200, 300] Output: 300 Explanation: The earliest end time is 9:00AM + 300 minutes = 2:00 PM. We can reduce the durations to 100, 200, 100 respectively. The latest possible simultaneous stop time is a stop time of 2:00 PM, or 300 minutes after start. Function Signature: def latest_stop_time(work_durations: List[int]) -> int: # Constraints: - Each element in the work_durations array will be between 1 and 10^4. - The length of work_durations array will be between 1 and 10^5.","solution":"from typing import List def latest_stop_time(work_durations: List[int]) -> int: Finds the latest possible stop time where all workers stop simultaneously by reducing work durations if needed. return max(work_durations)"},{"question":"Given a string containing alphabets and numbers, sort the string in such a way that all the alphabets appear first (maintaining the original order of alphabets), followed by all the numbers (also maintaining the original order of numbers). Print the resulting string. Example 1 - Input: s = \\"a1b2c3d4\\" Output: \\"abcd1234\\" Explanation: Alphabets \\"abcd\\" appear first in their original order followed by numbers \\"1234\\". Example 2 - Input: s = \\"h3g5f2a1\\" Output: \\"hgfa3521\\" Explanation: Alphabets \\"hgfa\\" appear first in their original order followed by numbers \\"3521\\". Your Task: This is a function problem. You don\'t have to take any input. Your task is to complete the function `sortString` which takes a string s as its parameter and returns the sorted string as described. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ |s| ≤ 10^5","solution":"def sortString(s): Returns the string with all alphabets first (maintaining the original order of alphabets), followed by all the numbers (also maintaining the original order of numbers). alphabets = [] numbers = [] for char in s: if char.isalpha(): alphabets.append(char) else: numbers.append(char) return \'\'.join(alphabets) + \'\'.join(numbers)"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to determine if you can split the array into `k` non-empty, contiguous subarrays such that the sum of the elements in each subarray is less than or equal to a given threshold `maxSum`. Input - The first line of input contains two integers `n` and `k` (1 ≤ n, k ≤ 1000) — the length of the array and the number of subarrays, respectively. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array. - The third line contains a single integer `maxSum` (1 ≤ maxSum ≤ 10^18) — the maximum sum for each subarray. Output - Print \\"YES\\" if it\'s possible to split the array into `k` subarrays such that the sum of the elements of each subarray is less than or equal to `maxSum`. Otherwise, print \\"NO\\". Example Input 6 3 7 2 5 10 8 15 Output YES Explanation One possible way to split the array is [7, 2], [5, 10], [8]. Each subarray sum does not exceed 15. Input 6 3 7 2 5 10 8 10 Output NO Explanation It is impossible to split the array into `k=3` parts where each part has a sum less than or equal to `maxSum=10` because the subarray containing `10` and any other segment would exceed `10`.","solution":"def can_split_array(arr, k, maxSum): Determine if the array can be split into k subarrays such that the sum of each subarray is less than or equal to maxSum. def is_valid(mid): current_sum = 0 subarrays_count = 1 for num in arr: if current_sum + num > mid: subarrays_count += 1 current_sum = num if subarrays_count > k: return False else: current_sum += num return True left, right = max(arr), sum(arr) while left < right: mid = (left + right) // 2 if is_valid(mid): right = mid else: left = mid + 1 return \\"YES\\" if left <= maxSum else \\"NO\\""},{"question":"Write a function that takes a list of integers and a target sum. The function should return all unique combinations in the list where the numbers sum to the target. Each number in the list may only be used once in the combination. The solution set must not contain duplicate combinations. Constraints * The input list will have at most 20 integers. * The integer values range from -10^6 to 10^6. * The target sum will be between -10^6 and 10^6. * The output can be in any order. Input The function should take the following arguments: 1. A list of integers `nums`. 2. An integer `target`. Output Return a list of lists, where each list is a unique combination of numbers that sum to the target. Examples Input nums = [10, 1, 2, 7, 6, 1, 5] target = 8 Output [[1, 7], [1, 2, 5], [2, 6], [1, 1, 6]] Input nums = [2, 5, 2, 1, 2] target = 5 Output [[1, 2, 2], [5]]","solution":"def combination_sum(nums, target): def backtrack(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue if nums[i] > target: break backtrack(i + 1, path + [nums[i]], target - nums[i]) nums.sort() result = [] backtrack(0, [], target) return result"},{"question":"Arjun and Bhavana are planning a surprise party for their friends. They have a list of tasks that need to be completed, and each task can either be done alone by Arjun or by Bhavana, or they can work together on it. Each task takes a different amount of time depending on whether Arjun does it alone, Bhavana does it alone, or they both do it together. We are given the times it takes for each task in three arrays: A, B, and C. Ai denotes the time it takes Arjun to complete the ith task alone, Bi denotes the time it takes Bhavana to complete the ith task alone, and Ci denotes the time it takes for Arjun and Bhavana to complete the ith task together. We need to determine the minimum possible total time to complete all the tasks. Input: - The first line contains an integer N, the number of tasks. - The next three lines each contain N space-separated integers: - The second line contains N integers denoting Ai. - The third line contains N integers denoting Bi. - The fourth line contains N integers denoting Ci. Output: - Print the minimum possible total time to complete all the tasks. Constraints: - 1 ≤ N ≤ 200 - 1 ≤ Ai, Bi, Ci ≤ 1000 Example Input: ``` 3 7 5 12 4 3 10 5 8 6 ``` Example Output: ``` 12 ``` Explanation: - For the first task, the minimum time is achieved if Bhavana does it alone: 4. - For the second task, the minimum time is achieved if Bhavana does it alone: 3. - For the third task, the minimum time is achieved if both work together: 6. So the total minimum time is 4 + 3 + 6 = 13.","solution":"def min_total_time(N, A, B, C): total_time = 0 for i in range(N): total_time += min(A[i], B[i], C[i]) return total_time # Example usage: # N = 3 # A = [7, 5, 12] # B = [4, 3, 10] # C = [5, 8, 6] # print(min_total_time(N, A, B, C)) # Output: 13"},{"question":"Given a sequence of n integers, an element of the sequence is said to be a peak if it is greater than its neighbors. The first and last element of the sequence each only have one neighbor, so they are peaks if they are greater than their only neighbor. Your task is to find the number of peaks in the sequence. Input The first line contains an integer T, the number of test cases. The first line of each test case contains an integer n, the length of the sequence. The next line of each test case contains n integers, representing the elements of the sequence. Output For each test case, output the number of peaks in the sequence. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^6 ≤ sequence[i] ≤ 10^6 SAMPLE INPUT 2 6 1 3 2 4 1 0 5 10 20 15 2 23 SAMPLE OUTPUT 2 2","solution":"def count_peaks(test_cases): results = [] for case in test_cases: n, sequence = case if n == 1: results.append(1) # A single element is a peak by definition continue peaks = 0 for i in range(n): if i == 0 and sequence[i] > sequence[i + 1]: # First element condition peaks += 1 elif i == n - 1 and sequence[i] > sequence[i - 1]: # Last element condition peaks += 1 elif 0 < i < n - 1 and sequence[i] > sequence[i - 1] and sequence[i] > sequence[i + 1]: # Middle elements condition peaks += 1 results.append(peaks) return results"},{"question":"Adam is a passionate macro photographer. His latest project involves capturing patterns formed by water droplets on a flat surface. He observed that the droplets form sequences that can be represented as a list of non-negative integers. Adam is particularly interested in detecting \\"pyramidal sequences\\" among these droplets. A pyramidal sequence is defined as a sequence where elements first increase to a maximum value, and then decrease. Given a sequence, help Adam determine if it is pyramidal. Input The first line contains an integer n (3 ≤ n ≤ 100) — the length of the sequence. The second line contains n non-negative integers separated by spaces — the sequence representing the sizes of water droplets. Output Print \\"YES\\" if the sequence is pyramidal, otherwise print \\"NO\\". Examples Input 7 1 2 3 4 3 2 1 Output YES Input 5 1 3 5 4 2 Output YES Input 6 1 2 3 1 2 3 Output NO","solution":"def is_pyramidal_sequence(n, sequence): Determines if the sequence is pyramidal. Parameters: n (int): Length of the sequence. sequence (list): List of non-negative integers representing the sequence. Returns: str: \\"YES\\" if the sequence is pyramidal, otherwise \\"NO\\". if n < 3: return \\"NO\\" peak_index = 0 # Find the peak of the sequence for i in range(1, n): if sequence[i] > sequence[i-1]: peak_index = i else: break if peak_index == 0 or peak_index == n-1: return \\"NO\\" # Verify if sequence after peak is strictly decreasing for i in range(peak_index + 1, n): if sequence[i] >= sequence[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string S representing a sequence of balloons, each of which can be either popped (`p`) or intact (`i`). A popped balloon (`p`) and its immediate intact neighbours (`i`) are considered as a group for the purpose of this exercise. Write a program that reads the string S and determines the number of such groups. For example, if a popped balloon is at position `j`, then the group will include the balloons at positions `j-1` (if exists and intact), `j`, and `j+1` (if exists and intact). Note that a single popped balloon with no immediate intact neighbours is also a group by itself. Write a program that, when S is given, prints the number of groups formed by the sequence. -----Constraints----- - S is a string of length between 1 and 100 (inclusive). - Each character in S is `p` or `i`. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the number of groups formed by the sequence of balloons. -----Sample Input----- ipipi -----Sample Output----- 2 Explanation: There are two groups of balloons: - The first group includes the second balloon, forming `ipi`, because the balloon at position 2 is popped, and has an intact neighbour at position 1. - The second group includes the fourth balloon, forming `ipi`, because the balloon at position 4 is popped, and has an intact neighbour at position 5.","solution":"def count_balloon_groups(S): Counts the number of groups formed by the sequence of balloons where each group consists of a popped balloon (\'p\') and its immediate intact (\'i\') neighbours if they exist. Args: S (str): A string representing a sequence of balloons. Returns: int: The number of groups formed by the sequence. if not S: return 0 groups = 0 n = len(S) i = 0 while i < n: if S[i] == \'p\': groups += 1 # Skip the next intact neighbours if they exist if i + 1 < n and S[i + 1] == \'i\': i += 1 if i - 1 >= 0 and S[i - 1] == \'i\': i += 1 i += 1 return groups"},{"question":"You are given two integers, n and k. Your task is to compute the number of distinct arithmetic sequences of length n that can be formed using the integers from the set {1, 2, ..., k}, where the sequence’s common difference is a non-negative integer. Input The first line contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ 105). Output Print a single number — the number of distinct arithmetic sequences of length n that can be formed using the integers from the set {1, 2, ..., k}. Examples Input 2 3 Output 6 Input 3 4 Output 10 Note An arithmetic sequence of length n is defined as a sequence where the difference between consecutive terms is constant. For example, if n = 2 and k = 3, the distinct arithmetic sequences are: 1. (1, 1) 2. (1, 2) 3. (1, 3) 4. (2, 2) 5. (2, 3) 6. (3, 3) We count only distinct sequences, so sequences (2, 1), (3, 2), etc., are not considered as they cannot be formed by the set {1, 2, ..., k} with a non-negative common difference.","solution":"def count_arithmetic_sequences(n, k): Computes the number of distinct arithmetic sequences of length n that can be formed using integers from 1 to k. # Total possible sequences are determined by choosing any k starting points and # constructing sequences of length n where each step is non-decreasing. return k * (k + 1) // 2"},{"question":"In a certain amusement park, there are \\"n\\" unique rides in a single row, numbered from 1 to n from left to right. Each ride has an amusement rating which can be either positive, zero, or negative, representing the thrill or disappointment a visitor might experience. A visitor can choose to start at any ride and move sequentially to any other ride. The visitor wants to experience the maximum total amusement rating possible by riding a contiguous subarray of rides. You are required to determine the maximum amusement rating a visitor can achieve in each of \\"q\\" queries. Each query provides a range [l, r] indicating that the visitor can only select rides that lie between the l-th and r-th ride (inclusive), and they must determine the maximum amusement value from that subarray. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 100,000) — the number of rides and the number of queries. The second line contains n space-separated integers where the i-th integer is the amusement rating of the i-th ride (-10^9 ≤ rating ≤ 10^9). The next q lines each contain two space-separated integers l and r (1 ≤ l ≤ r ≤ n) — the range for that particular query. Output For each query, output a single integer, the maximum sum of the amusement ratings for any contiguous subarray within the provided range [l, r]. Example Input 6 3 3 -2 5 -1 2 -4 1 4 2 5 1 6 Output 6 5 7 Explanation In the first query, the subarray with the maximum amusement rating in the range [1, 4] is [3, -2, 5] which sums to 6. In the second query, the subarray with the maximum amusement rating in the range [2, 5] is [5, -1, 2] which sums to 6. In the third query, the subarray with the maximum amusement rating in the range [1, 6] is [3, -2, 5, -1, 2] which sums to 7.","solution":"def maximum_amusement(n, q, ratings, queries): Function to return the maximum amusement a visitor can achieve for each query range. Parameters: n (int): Number of rides. q (int): Number of queries. ratings (list): List of amusement ratings of each ride. queries (list): List of queries with ranges [l, r]. Returns: List[int]: Maximum amusement for each query range. def max_subarray_sum(arr): # This function uses Kadane\'s algorithm to find the maximum subarray sum max_so_far = float(\'-inf\') max_ending_here = 0 for num in arr: max_ending_here += num if max_ending_here > max_so_far: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far results = [] for l, r in queries: subarray = ratings[l-1:r] # l-1 and r for converting 1-based index to 0-based max_sum = max_subarray_sum(subarray) results.append(max_sum) return results"},{"question":"You are given an array of integers. Determine whether one can build a strictly increasing sequence by removing no more than one element from the array. -----Constraints----- - The array has a length between 2 and 10, inclusive. - Each element of the array is an integer between 1 and 100, inclusive. -----Input----- Input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n ``` Where n is the length of the array, and a_1, a_2, ..., a_n are the array elements. -----Output----- Print `YES` if you can obtain a strictly increasing sequence by removing at most one element, otherwise print `NO`. -----Sample Input----- 5 3 5 2 7 8 -----Sample Output----- YES By removing the element 2, the sequence 3, 5, 7, 8 is strictly increasing. -----Sample Input----- 4 4 3 3 2 -----Sample Output----- NO There is no way to remove at most one element to make the sequence strictly increasing.","solution":"def can_be_increasing(arr): Determines if the given array can be made strictly increasing by removing at most one element. def is_strictly_increasing(seq): return all(x < y for x, y in zip(seq, seq[1:])) n = len(arr) for i in range(n): if is_strictly_increasing(arr[:i] + arr[i+1:]): return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(can_be_increasing(arr))"},{"question":"You are given an array of integers and another array of the same length representing the types of operations to perform on the original array. The two types of operations are defined as follows: - \\"sum\\": sum all the elements in the corresponding subarray. - \\"product\\": compute the product of all the elements in the corresponding subarray. You need to efficiently handle multiple queries, each of which specifies an operation type (\\"sum\\" or \\"product\\") and a subarray range. Implement a function that processes these queries and outputs the result for each query. Input Format The first line contains an integer, n, denoting the size of the array. The second line contains n space-separated integers representing the elements of the array. The third line contains n space-separated strings, each being either \\"sum\\" or \\"product\\", denoting the operation type for each subarray query. The fourth line contains another integer, q, denoting the number of queries. Each of the next q lines contains two space-separated integers, Li and Ri (1-based index), representing the left and right bounds of the subarray for the i-th query. Constraints 1 leq n leq 10^5 1 leq q leq 10^5 1 leq a[i] leq 10^4 for all 1 leq i leq n 1-based indexing is used for the queries (i.e., 1 ≤ Li ≤ Ri ≤ n). Output Format Output q lines, each containing the result of the corresponding query. For \\"sum\\" operations, output the sum of the subarray, and for \\"product\\" operations, output the product of the subarray modulo 10^9 + 7. Sample Input 0 5 1 2 3 4 5 sum product sum sum product 3 1 3 2 4 1 5 Sample Output 0 6 24 15 Explanation 0 - For the first query (operation \\"sum\\" from index 1 to 3), the sum of the subarray [1, 2, 3] is 6. - For the second query (operation \\"product\\" from index 2 to 4), the product of the subarray [2, 3, 4] is 24. - For the third query (operation \\"sum\\" from index 1 to 5), the sum of the subarray [1, 2, 3, 4, 5] is 15.","solution":"MOD = 10**9 + 7 def preprocess(array, operations): n = len(array) sum_prefix = [0] * (n + 1) product_prefix = [1] * (n + 1) for i in range(1, n + 1): sum_prefix[i] = sum_prefix[i - 1] + array[i - 1] product_prefix[i] = (product_prefix[i - 1] * array[i - 1]) % MOD return sum_prefix, product_prefix def process_queries(array, operations, queries): sum_prefix, product_prefix = preprocess(array, operations) results = [] for L, R in queries: if operations[L-1] == \'sum\': # 1-based, L-1 to map to 0-based operations array result = sum_prefix[R] - sum_prefix[L - 1] elif operations[L-1] == \'product\': result = (product_prefix[R] * pow(product_prefix[L - 1], MOD - 2, MOD)) % MOD results.append(result) return results"},{"question":"Professor Nemo is studying a unique type of coral that grows in a one-dimensional reef. The reef can be represented as a horizontal line divided into cells, with each cell having a specific growth index. The coral grows best when the total growth index is maximized over any contiguous sub-segment of the reef. You\'re given the growth indices for each cell of the reef. You need to help Professor Nemo find the maximum possible total growth index for any contiguous subsegment of the reef. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of cells in the reef. The second line contains n integers, representing the growth indices of the cells in the reef. The growth indices are integers in the range [-1000, 1000]. Output Output a single integer, the maximum total growth index for any contiguous subsegment of the reef. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation In the provided example, the contiguous subsegment [4, -1, 2, 1] has the maximum possible total growth index, which is 6.","solution":"def max_growth_index(n, growth_indices): Finds the maximum possible total growth index for any contiguous subsegment of the reef. :param n: int, number of cells in the reef :param growth_indices: list of int, growth indices of the cells in the reef :return: int, maximum total growth index for any contiguous subsegment max_ending_here = max_so_far = growth_indices[0] for i in range(1, n): max_ending_here = max(growth_indices[i], max_ending_here + growth_indices[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Alice has a string P consisting of lowercase English letters. She keeps transforming this string using a special process repeatedly. In each step of the process, if there are two consecutive characters that are the same, Alice removes those two characters from the string. The process continues until there are no more pairs of consecutive characters that are the same. You are given the initial string P, and your task is to determine the final string after Alice\'s transformation process is complete. -----Input:----- - The first line contains string P — consisting of lowercase English letters. -----Output:----- - Print the final string after the transformation process is complete. If the final string is empty, print \\"Empty\\". -----Constraints----- - 1≤|P|≤105 -----Sample Input 1:----- abbaca -----Sample Output 1:----- ca -----Explanation 1:----- Initial string: abbaca 1st step: a|bb|aca -> aaca 2nd step: a|aa|ca -> ca -----Sample Input 2:----- azxxzy -----Sample Output 2:----- ay -----Explanation 2:----- Initial string: azxxzy 1st step: a|zxxz|y -> ay","solution":"def transform_string(P): Returns the final string after consecutive character removal process. stack = [] for char in P: if stack and stack[-1] == char: stack.pop() else: stack.append(char) result = \'\'.join(stack) return result if result else \\"Empty\\""},{"question":"You are organizing a raffle for a charity event. You have a list of participants, each with an associated number of tickets they have purchased. The raffle works as follows: each ticket has an equal chance of winning, and you need to determine the probability of each participant winning, based on the number of tickets they\'ve bought. Write a function that takes two arguments: a list of participant names and a list of corresponding ticket counts. Calculate and return a dictionary where each key is a participant\'s name and the value is their probability of winning expressed as a percentage (rounded to two decimal places). For example, given participants `[\'Alice\', \'Bob\', \'Charlie\']` and ticket counts `[10, 20, 30]`, your function should return: ``` { \'Alice\': 16.67, \'Bob\': 33.33, \'Charlie\': 50.00 } ``` The total number of tickets is 60, so Alice has 10/60 chance of winning, Bob has 20/60, and Charlie has 30/60. Their probabilities expressed as percentages are 16.67%, 33.33%, and 50.00%, respectively.","solution":"def raffle_probabilities(participants, ticket_counts): Calculate the probability of each participant winning the raffle. :param participants: List of participant names :param ticket_counts: List of ticket counts corresponding to each participant :return: Dictionary with participant names as keys and their win probability as values, rounded to two decimal places total_tickets = sum(ticket_counts) probabilities = {} for i, participant in enumerate(participants): probability = (ticket_counts[i] / total_tickets) * 100 probabilities[participant] = round(probability, 2) return probabilities"},{"question":"A company is organizing a coding competition and needs to ensure that there are enough laptops available for participants. Each participant requires exactly one laptop. The company has a warehouse with different brands of laptops, and it is essential to maximize the use of those laptops before considering renting additional ones. Your task is to write a function that determines the minimum number of laptops the company needs to rent to ensure that each participant has one. Input/Output - `[input]` integer `participants` - The total number of participants registered for the competition. - `[input]` dictionary `warehouse` - A dictionary where keys are laptop brands and values are the number of each brand available in the warehouse. - `[output]` an integer - The minimum number of laptops needed to rent. If no laptops need to be rented, return `0`. Example For `participants = 15` and `warehouse = {\'brandA\': 5, \'brandB\': 6, \'brandC\': 2}`, the output should be `2`. ``` Available laptops in warehouse: brandA: 5 brandB: 6 brandC: 2 Total available: 5 + 6 + 2 = 13 Participants: 15 Laptops to rent: 15 - 13 = 2 ``` For `participants = 10` and `warehouse = {\'brandA\': 3, \'brandB\': 4, \'brandC\': 3}`, the output should be `0`. ``` Available laptops in warehouse: brandA: 3 brandB: 4 brandC: 3 Total available: 3 + 4 + 3 = 10 Participants: 10 Laptops to rent: 10 - 10 = 0 ``` For `participants = 5` and `warehouse = {\'brandA\': 1, \'brandB\': 2}`, the output should be `2`. ``` Available laptops in warehouse: brandA: 1 brandB: 2 Total available: 1 + 2 = 3 Participants: 5 Laptops to rent: 5 - 3 = 2 ```","solution":"def laptops_to_rent(participants, warehouse): Determines the minimum number of laptops the company needs to rent to ensure that each participant has one. Args: participants (int): The total number of participants registered for the competition. warehouse (dict): A dictionary where keys are laptop brands and values are the number of each brand available in the warehouse. Returns: int: The minimum number of laptops needed to rent. If no laptops need to be rented, returns 0. total_laptops_available = sum(warehouse.values()) if participants <= total_laptops_available: return 0 else: return participants - total_laptops_available"},{"question":"A library database system allows people to borrow books. The library has a system to keep track of the borrowing and returning of books. Your task is to implement a function to determine the books that are currently borrowed, based on a log of actions. Each action is either a borrowing action or a returning action: - \\"B x\\" where x is the book ID that someone borrows. - \\"R x\\" where x is the book ID that someone returns. You need to write a function `current_borrowed_books(logs)` which takes a list of strings where each string denotes an action. The function should return a list of integers representing the IDs of the books that are currently borrowed, sorted in ascending order. -----Input----- A list of strings, where each string represents an action. The list will contain at most 1000 actions. Each book ID will be a positive integer between 1 and 1000. There will be no more than one borrowing action for the same book without a corresponding returning action. -----Output----- A list of integers representing the IDs of the books that are currently borrowed, sorted in ascending order. -----Example----- Input: [\\"B 1\\", \\"B 2\\", \\"R 1\\", \\"B 3\\", \\"B 2\\"] Output: [2, 3] Explanation: Initially, book 1 and book 2 are borrowed. Then, book 1 is returned. Next, book 3 is borrowed, and book 2 is borrowed again (without being returned first, which is an invalid action and should be ignored). The current borrowed books are book 2 and book 3, sorted in ascending order.","solution":"def current_borrowed_books(logs): Determines the books that are currently borrowed based on a log of actions. Parameters: logs (list): A list of strings where each string represents an action. Returns: list: A list of integers representing the IDs of the books that are currently borrowed, sorted in ascending order. borrowed_books = set() for log in logs: action, book_id_str = log.split() book_id = int(book_id_str) if action == \\"B\\": borrowed_books.add(book_id) elif action == \\"R\\" and book_id in borrowed_books: borrowed_books.remove(book_id) return sorted(borrowed_books)"},{"question":"concatenate The concatenate tool concatenates along a specified axis, providing flexibility to combine multiple arrays. (a). Using concatenate to combine arrays along different axes import numpy array_1 = numpy.array([[1, 2], [3, 4]]) array_2 = numpy.array([[5, 6], [7, 8]]) # Concatenating along axis 0 result_0 = numpy.concatenate((array_1, array_2), axis=0) print(result_0) #Output: # [[1 2] # [3 4] # [5 6] # [7 8]] # Concatenating along axis 1 result_1 = numpy.concatenate((array_1, array_2), axis=1) print(result_1) #Output: # [[1 2 5 6] # [3 4 7 8]] Task You are given two space-separated lists, each containing four integers. Your task is to form two NumPy arrays of shape 2 times 2 from these lists and then concatenate them along axis 1. Input Format Two lines of input, each containing four space-separated integers. Output Format Print the concatenated NumPy array. Sample Input 1 2 3 4 5 6 7 8 Sample Output [[1 2 5 6] [3 4 7 8]]","solution":"import numpy as np def concatenate_arrays(arr1, arr2): Concatenates two 2x2 arrays along axis 1 and returns the result. array_1 = np.array(arr1).reshape(2, 2) array_2 = np.array(arr2).reshape(2, 2) result = np.concatenate((array_1, array_2), axis=1) return result"},{"question":"You are given a string S consisting of lowercase alphabets and a number n. The task is to find all the substrings of length n from the string S and identify the lexicographically smallest and largest substrings. -----Input----- The input contains two lines. - The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the substrings. - The second line contains a string S (|S| ≥ n and |S| ≤ 1000) consisting of only lowercase English alphabets. -----Output----- Print two lines: - The first line should contain the lexicographically smallest substring of length n. - The second line should contain the lexicographically largest substring of length n. -----Example----- Input: 3 abcde Output: abc cde Input: 2 xyza Output: xy za -----Note----- In the first example, the substrings of length 3 are \\"abc\\", \\"bcd\\", and \\"cde\\". - \\"abc\\" is the lexicographically smallest. - \\"cde\\" is the lexicographically largest. In the second example, the substrings of length 2 are \\"xy\\", \\"yz\\", \\"za\\". - \\"xy\\" is the lexicographically smallest. - \\"za\\" is the lexicographically largest.","solution":"def find_smallest_largest_substrings(n, S): Given a string S and a number n, returns the lexicographically smallest and largest substrings of length n. substrings = [S[i:i+n] for i in range(len(S) - n + 1)] smallest = min(substrings) largest = max(substrings) return smallest, largest # Sample Usage # n = 3 # S = \\"abcde\\" # The substrings of length 3 are \\"abc\\", \\"bcd\\", \\"cde\\" # Smallest substring: \\"abc\\" # Largest substring: \\"cde\\" # smallest, largest = find_smallest_largest_substrings(n, S)"},{"question":"*You are given a string consisting of \'L\' and \'R\' characters. An \'L\' represents moving one step to the left and an \'R\' represents moving one step to the right. Initially, you are at position 0 on a one-dimensional number line. Your task is to find out how many unique positions you will visit at least once by following the instructions given in the string.* Input - The first line contains an integer n (1 ≤ n ≤ 200,000) — the length of the string. - The second line contains the string of length n consisting of \'L\' and \'R\' characters. Output - The output should contain one integer — the number of unique positions you will visit at least once. Examples Input 8 LLRRLRRL Output 4 Input 10 LLLLRRRRLL Output 5 Note In the first example: - Starting from position 0, the sequence of moves will be: -1, -2, -1, 0, 1, 0, -1, -2. - The unique positions visited are: -2, -1, 0, 1. In the second example: - Starting from position 0, the sequence of moves will be: -1, -2, -3, -4, -3, -2, -1, 0, -1, -2. - The unique positions visited are: -4, -3, -2, -1, 0.","solution":"def unique_positions_count(n, moves): Returns the number of unique positions visited given the move instructions. Parameters: n (int): The length of the string of move instructions. moves (str): A string consisting of \'L\' and \'R\' characters representing moves. Returns: int: The number of unique positions visited at least once. current_position = 0 visited_positions = {current_position} for move in moves: if move == \'L\': current_position -= 1 elif move == \'R\': current_position += 1 visited_positions.add(current_position) return len(visited_positions)"},{"question":"Valerie is planning a new seating arrangement for her outdoor camping site. She has a rectangular field divided into n rows and m columns, represented as an n times m grid. Valerie wants to place tents such that every cell in the grid has at least one tent in its immediate neighbor cells (left, right, top, or bottom). Each tent covers the cell it is placed in and provides shelter to its adjacent cells. Given n and m, what is the minimum number of tents that Valerie must place to ensure every cell has a tent in its neighbor cells? Example n=2 m=3 By placing tents at cells (0, 1) and (1, 1), all cells in the 2times3 grid will be covered by a neighboring tent. This setup uses 2 tents. Function Description Complete the minTents function in the editor below. minTents has the following parameters: int n: the number of rows in the grid int m: the number of columns in the grid Returns int: the minimum number of tents required Input Format Two space-separated integers describing the respective values of n and m. Constraints 1 leq n, m leq 1000 Sample Input 0 3 3 Sample Output 0 4 Explanation 0 Valerie can place tents at cells (0, 0), (0, 2), (2, 0), and (2, 2), thereby ensuring that all cells in a 3 times 3 grid are covered by an adjacent tent: ``` T . T . . . T . T ``` This configuration uses 4 tents, so we print 4 as our answer.","solution":"def minTents(n, m): Returns the minimum number of tents required to ensure every cell has a tent in its neighbor cells. # Calculate the number of tents needed using the ceiling function. # Each tent can cover a 2x2 grid, hence we divide rows and columns by 2 and take the ceiling. from math import ceil return ceil(n / 2) * ceil(m / 2) # Each 2x2 block needs one tent"},{"question":"Yusland Football League is planning a tournament and they need to arrange the matches in the most efficient way possible. Yusland has `n` teams, and the league has drawn up a schedule where each team will play exactly one match with every other team. The league organizers want to minimize the total \\"travel cost\\" for all teams. The travel cost between two teams `i` and `j` is given and may vary from pair to pair. All teams must travel to a neutral stadium for each match, and the cost must be calculated for both teams traveling to the stadium. Your task is to find the minimum total travel cost to conduct all the matches in the league. Input: The input consists of: - An integer `n` (2 ≤ n ≤ 300) — the number of teams. - A 2D matrix `d` of size `n x n`, where `d[i][j]` (1 ≤ d[i][j] ≤ 1,000,000) represents the travel cost for team `i` to travel to a neutral stadium for a match with team `j`. Output: Print a single integer — the minimum total travel cost required to conduct all matches. Example: Input: 3 0 10 15 10 0 20 15 20 0 Output: 90 Explanation: In the given example, the minimum total travel cost can be achieved by arranging the matches as follows: - Team 1 vs Team 2: Total travel cost = 10 + 10 = 20 - Team 1 vs Team 3: Total travel cost = 15 + 15 = 30 - Team 2 vs Team 3: Total travel cost = 20 + 20 = 40 Therefore, the total travel cost = 20 + 30 + 40 = 90.","solution":"def minimum_total_travel_cost(n, d): Returns the minimum total travel cost to conduct all the matches in the league. Args: n : int : number of teams d : list[list[int]] : 2D matrix representing travel cost between teams Returns: int : minimum total travel cost total_cost = 0 # All teams play once against every other team for i in range(n): for j in range(i + 1, n): total_cost += 2 * d[i][j] return total_cost"},{"question":"Mina is participating in a treasure hunt game where she needs to unlock a series of chests. She has a set of keys, each of which can open chests with a specific range of indices. A key can open chests with indices starting from \\"start\\" to \\"end\\" inclusive. Mina can use multiple keys to open consecutive chests but wants to minimize the number of keys used from her set to open a specific sequence of chests. Given N keys and their start and end ranges, determine if Mina can open all chests from index 1 to M using the minimum number of keys. If it is possible, output the minimal number of keys required; otherwise, output \\"IMPOSSIBLE\\". ------ Input Format ------ - The first line contains two space-separated integers, N and M — the number of keys and the number of chests, respectively. - Each of the next N lines contains two space-separated integers (start_i) and (end_i) (1 ≤ (start_i) ≤ (end_i) ≤ M) representing the range of indices (inclusive) that the i-th key can open. ------ Output Format ------ - If it is possible to open all the chests from 1 to M, output the minimal number of keys required. - Otherwise, output \\"IMPOSSIBLE\\". ------ Constraints ------ - (1 ≤ N ≤ 10^5) - (1 ≤ M ≤ 10^9) - The sum of lengths of all key ranges over all test cases does not exceed (10^6). ----- Sample Input 1 ------ 5 10 1 2 3 5 1 3 6 10 7 8 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ Mina can open all chests from index 1 to 10 by using the third (1-3), second (3-5), and fourth (6-10) keys. Therefore, a minimum of 3 keys is required. Note that overlapping ranges help minimize the number of keys used. ----- Sample Input 2 ------ 3 7 1 3 4 5 2 6 ----- Sample Output 2 ------ IMPOSSIBLE ----- Explanation 2 ------ It is impossible to open all chests from 1 to 7 with the given keys, as there is no key or combination of keys that covers the range from chest 6 to 7.","solution":"def minimal_keys_to_open_chests(N, M, keys): Determines the minimal number of keys required to open all chests from 1 to M. If it\'s impossible, returns \\"IMPOSSIBLE\\". N : int : Number of keys M : int : Number of chests keys : List[Tuple[int, int]] : List of key ranges # Sort keys by starting range position, and then by ending range in descending order keys.sort(key=lambda x: (x[0], -x[1])) num_keys_used = 0 current_end = 0 i = 0 while i < N and current_end < M: max_reach = current_end while i < N and keys[i][0] <= current_end + 1: max_reach = max(max_reach, keys[i][1]) i += 1 if max_reach == current_end: return \\"IMPOSSIBLE\\" current_end = max_reach num_keys_used += 1 return num_keys_used if current_end >= M else \\"IMPOSSIBLE\\" # Example use case N = 5 M = 10 keys = [(1, 2), (3, 5), (1, 3), (6, 10), (7, 8)] print(minimal_keys_to_open_chests(N, M, keys)) # Should output 3"},{"question":"Alice is organizing her books on a shelf and she wants them to be arranged in non-decreasing order of their heights. Each book has a unique height which is given as an array of integers. However, she can only swap two books if their absolute height difference is less than or equal to a specified number k. Determine whether Alice can achieve her goal of arranging the books by applying a series of such swaps. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), where n is the number of books and k is the maximum allowed difference for a swap. The second line contains an array of n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the heights of the books. Output Output \\"YES\\" if it\'s possible to arrange the books in non-decreasing order using the allowed swaps, or \\"NO\\" otherwise. Examples Input 5 2 1 5 3 3 7 Output YES Input 4 1 4 3 1 2 Output NO Input 6 10 10 20 30 25 15 35 Output YES Note: In the first example, Alice can swap the second book with the fourth book and the array becomes [1, 3, 3, 5, 7], which is sorted in non-decreasing order.","solution":"def can_arrange_books(n, k, heights): sorted_heights = sorted(heights) # Check if we can reach each position in sorted array from the original heights for i in range(n): if abs(heights[i] - sorted_heights[i]) > k: return \\"NO\\" return \\"YES\\" def can_arrange_books(n, k, heights): sorted_heights = sorted(heights) # Initial positions of books as per their heights original_positions = {value: idx for idx, value in enumerate(heights)} for sorted_idx, height in enumerate(sorted_heights): original_idx = original_positions[height] if abs(original_idx - sorted_idx) <= k: # Swap the books heights[sorted_idx], heights[original_idx] = heights[original_idx], heights[sorted_idx] # Update the original positions dictionary original_positions[heights[original_idx]], original_positions[heights[sorted_idx]] = original_idx, sorted_idx else: return \\"NO\\" return \\"YES\\""},{"question":"Chef is learning about sorting algorithms and wants to explore different ways to sort an array. One of the concepts Chef came across is \\"almost sorted arrays\\". An array is considered almost sorted if it can be sorted by swapping two elements at most once. Chef wants you to write a function that determines if the given array is almost sorted or not. Write a function `isAlmostSorted(arr)` that takes an array of integers `arr` of length n and returns `True` if the array is almost sorted, otherwise returns `False`. ---- Input ---- - An integer n (1 ≤ n ≤ 10^5) representing the length of the array. - An array `arr` of n integers (1 ≤ arr[i] ≤ 10^6). ---- Output ---- - Return `True` if the array is almost sorted, otherwise return `False`. ---- Examples ---- - Input: `n = 5, arr = [1, 5, 3, 3, 7]` - Output: `True` - Explanation: The array can be sorted by swapping 5 and 3. - Input: `n = 6, arr = [1, 3, 5, 3, 4, 6]` - Output: `False` - Explanation: More than one swap is needed to make the array sorted. - Input: `n = 4, arr = [10, 20, 30, 40]` - Output: `True` Explanation: The array is already sorted.","solution":"def isAlmostSorted(arr): Determines if the array can be sorted by swapping at most two elements. n = len(arr) original = arr[:] arr.sort() # Find the mismatched positions mismatches = [i for i in range(n) if original[i] != arr[i]] # If there are zero or two mismatches, it\'s almost sorted if len(mismatches) == 0: return True if len(mismatches) == 2: i, j = mismatches # Try swapping the mismatched elements original[i], original[j] = original[j], original[i] # Check if the array is sorted now return original == arr return False"},{"question":"A factory produces widgets, and each complete widget requires a sequence of manufacturing steps. Each step is assigned a unique identifier from 1 to n and must be performed in a specific order. Given a set of manufacturing steps, your task is to calculate the minimal number of swaps needed to arrange the steps in the correct order. ----Input---- The input contains an integer n (2 ≤ n ≤ 1000), the number of steps, followed by a permutation of the integers from 1 to n, representing the current order of steps in the production line. ----Output---- The output must contain one integer, the minimum number of swaps required to sort the sequence of steps in ascending order. ----Examples---- Sample Input 1: 5 3 1 2 5 4 Sample Output 1: 3 Sample Input 2: 4 2 1 4 3 Sample Output 2: 2","solution":"def min_swaps_to_sort(n, arr): Calculates the minimal number of swaps needed to arrange the steps in the correct order. Parameters: n (int): The number of steps. arr (list of int): The current order of steps in the production line. Returns: int: The minimal number of swaps needed. steps_with_indices = [(value, idx) for idx, value in enumerate(arr)] steps_with_indices.sort() visited = [False] * n swaps = 0 for i in range(n): if visited[i] or steps_with_indices[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = steps_with_indices[j][1] cycle_size += 1 if cycle_size > 1: swaps += cycle_size - 1 return swaps"},{"question":"You are given a series of queries on an integer array. Each query can be one of two types: 1. 1 , x , y: Update the element at position x in the array to y. 2. 2 , l , r: Compute the sum of the elements in the array from position l to r (inclusive). Write a program to process these queries efficiently. -----Input----- The first line contains two integers n and q (1 leq n, q leq 100,000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^6) — the initial elements of the array. The next q lines contain the queries, each represented by either of the two types described above. It is guaranteed that the first integer in each query is either 1 or 2. -----Output----- For each query of the second type, print the sum of the elements from position l to r. -----Examples----- Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 2 5 1 5 15 2 1 5 Output 6 22 30 -----Note----- Consider the example: - Initially, the array is `[1, 2, 3, 4, 5]`. - The first query requests the sum of the first 3 elements, which is 1 + 2 + 3 = 6. - The second query updates the second element to 10, resulting in the array `[1, 10, 3, 4, 5]`. - The third query requests the sum of the last 4 elements, which is 10 + 3 + 4 + 5 = 22. - The fourth query updates the last element to 15, resulting in the array `[1, 10, 3, 4, 15]`. - The fifth query requests the sum of all elements, which is 1 + 10 + 3 + 4 + 15 = 33.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = array[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): pos += self.n # Get the leaf position in the tree self.tree[pos] = value # Update all ancestors while pos > 1: pos //= 2 self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1] def range_sum(self, left, right): left += self.n right += self.n + 1 sum = 0 while left < right: if left % 2 == 1: sum += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum += self.tree[right] left //= 2 right //= 2 return sum def process_queries(n, q, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: # Update operation segment_tree.update(query[1] - 1, query[2]) elif query[0] == 2: # Range sum operation results.append(segment_tree.range_sum(query[1] - 1, query[2] - 1)) return results"},{"question":"The Chef is receiving complaints about late contest reminders. To streamline the process, he wants to calculate the average time it takes for reminders to be sent after a contest is announced. Given an array of integers where each element represents the time in minutes it took to send a reminder after announcing each of the last N contests, calculate the average time taken to send the reminders. ------ Input Format ------ - The first line of input will contain a single integer N (the total number of contests). - The second line of input will contain N space-separated integers, each representing the reminder time in minutes for one contest. ------ Output Format ------ Output a single number, the average time (in minutes) taken to send the reminders, rounded off to two decimal places. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ Reminder Time le 1440 ----- Sample Input 1 ------ 3 15 30 45 ----- Sample Output 1 ------ 30.00 ----- explanation 1 ------ The average of 15, 30, 45 is (15 + 30 + 45) / 3 = 30.00. ----- Sample Input 2 ------ 5 100 200 300 400 500 ----- Sample Output 2 ------ 300.00 ----- explanation 2 ------ The average of 100, 200, 300, 400, 500 is (100 + 200 + 300 + 400 + 500) / 5 = 300.00.","solution":"def calculate_average_time(N, reminder_times): Calculate the average reminder time. :param N: number of contests :param reminder_times: list of reminder times in minutes :return: average reminder time rounded to two decimal places if N == 0: return 0.0 return round(sum(reminder_times) / N, 2)"},{"question":"Given two integers, a and b, determine the minimum number of operations required to make a strictly less than b using only the following operations: 1. Add 1 to a (i.e., a leftarrow a + 1) 2. Subtract 1 from b (i.e., b leftarrow b - 1) You can use the operations in any sequence and any number of times. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The description of test cases follows. Each test case consists of a single line containing two integers a and b (-10^9 le a, b le 10^9). -----Output----- For each test case, output a single integer — the minimum number of operations required to make a strictly less than b. -----Examples----- Input 4 3 5 6 4 1 1 -2 3 Output 1 3 1 0 -----Note----- In the first test case, you can add 1 to a, so a becomes 4, which is still less than b=5. Hence, only 1 operation is required. In the second test case, you can subtract 1 from b twice making it 4, and then add 1 to a which makes a 7, and now a=7 > b=4. However, this sequence requires 3 operations. In the third test case, you must perform one operation (either add 1 to a or subtract 1 from b) to make a strictly less than b. In the fourth test case, a is already less than b, so no operations are needed.","solution":"def min_operations_to_make_a_less_than_b(a, b): Given two integers a and b, returns the minimum number of operations required to make a strictly less than b using the operations: - Add 1 to a - Subtract 1 from b if a < b: return 0 return (a - b) + 1 def process_test_cases(t, test_cases): results = [] for a, b in test_cases: results.append(min_operations_to_make_a_less_than_b(a, b)) return results"},{"question":"In a certain university, the passing threshold for a subject is determined by the average score of the students enrolled in that subject. Given the scores of N students in a particular subject, your task is to determine the minimum score a student has to obtain in a new exam to ensure the class average meets or exceeds the passing threshold. You are given the scores of N students, the current average score of the class, and the required average to pass (T). Find the minimum score the next student should achieve to ensure the class average is at least T. ------ Input Format ------ - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of three lines: 1. The first line contains a single integer N, the number of students. 2. The second line contains N integers, the scores of the students. 3. The third line contains a single integer representing the required average to pass. ------ Output Format ------ - For each test case, output a single line containing the minimum score the next student should achieve for ensuring that the class average is at least the required threshold. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ Scores of students ≤ 100 1 ≤ Required average ≤ 100 ------ Sample Input 1 ------ 3 4 10 20 30 40 25 3 50 60 70 60 5 65 70 75 80 85 75 ------ Sample Output 1 ------ 30 60 55 ------ Explanation 1 ------ Test Case 1: The current sum of scores is 10 + 20 + 30 + 40 = 100. The current average is 100 / 4 = 25. To maintain an average of at least 25 after adding a new student\'s score, the sum of the scores including the new student must be at least (25 times 5) = 125. Thus, the new student needs to score at least 125 - 100 = 25, so the minimal score is 30 (since scores are whole numbers and the previous scores left an integer threshold). Test Case 2: The current sum of scores is 50 + 60 + 70 = 180. The current average is 180 / 3 = 60. To maintain an average of at least 60 after adding a new student\'s score, the sum must be at least (60 times 4) = 240. Therefore, the new student needs to score at least 240 - 180 = 60, so the minimum score is 60. Test Case 3: The current sum of scores is 65 + 70 + 75 + 80 + 85 = 375. The current average is 375 / 5 = 75. To maintain an average of at least 75 after adding a new student\'s score, the sum must be at least (75 times 6) = 450. Therefore, the new student needs to score at least 450 - 375 = 55, thus the minimum score is 55.","solution":"def minimum_score_needed(test_cases): results = [] for test_case in test_cases: N, scores, required_avg = test_case current_sum = sum(scores) required_sum = required_avg * (N + 1) min_new_score = required_sum - current_sum # The minimum score should be an integer and at least 1. if min_new_score <= 0: results.append(0) else: results.append(min_new_score) return results # Parse input and call the function for the sample input def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) scores = list(map(int, lines[index + 1].split())) required_avg = int(lines[index + 2]) test_cases.append((N, scores, required_avg)) index += 3 return test_cases input_str = \'\'\'3 4 10 20 30 40 25 3 50 60 70 60 5 65 70 75 80 85 75\'\'\' test_cases = parse_input(input_str) result = minimum_score_needed(test_cases) for res in result: print(res)"},{"question":"#Min and Max Element Difference in a Rotated Array You need to write a function that takes an array of integers and a rotation value as parameters. The function should rotate the array to the right by the given number of positions. Then, it should return the difference between the maximum and minimum element in the rotated array. # Function Signature ```python def min_max_difference_in_rotated_array(arr: List[int], k: int) -> int: pass ``` # Parameters - **arr** (List[int]): An array of integers (length will always be greater than 0). - **k** (int): A non-negative integer representing the number of positions to rotate the array. # Returns - **int**: The difference between the maximum and minimum element in the rotated array. # Examples 1. **Input**: ```python arr = [3, 8, 9, 7, 6], k = 3 ``` **Output**: ```python 3 ``` **Explanation**: - Rotated array: [9, 7, 6, 3, 8] - Maximum element: 9 - Minimum element: 3 - Difference: 9 - 3 = 6 2. **Input**: ```python arr = [1, 2, 3, 4, 5, 6], k = 2 ``` **Output**: ```python 5 ``` **Explanation**: - Rotated array: [5, 6, 1, 2, 3, 4] - Maximum element: 6 - Minimum element: 1 - Difference: 6 - 1 = 5 3. **Input**: ```python arr = [7, 4, 2, 9, 0], k = 1 ``` **Output**: ```python 9 ``` **Explanation**: - Rotated array: [0, 7, 4, 2, 9] - Maximum element: 9 - Minimum element: 0 - Difference: 9 - 0 = 9 # Constraints - The array length will always be greater than 0. - The rotation value will be a non-negative integer. - You do not need to check for null or empty inputs.","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: Rotates the array to the right by k positions. Parameters: arr (List[int]): The input array. k (int): The number of positions to rotate the array. Returns: List[int]: The rotated array. n = len(arr) k = k % n # Handle cases where k is greater than array length return arr[-k:] + arr[:-k] def min_max_difference_in_rotated_array(arr: List[int], k: int) -> int: Rotates the array to the right by k positions and returns the difference between the maximum and minimum element in the rotated array. Parameters: arr (List[int]): The input array. k (int): The number of positions to rotate the array. Returns: int: The difference between the maximum and minimum element in the rotated array. rotated_arr = rotate_array(arr, k) return max(rotated_arr) - min(rotated_arr)"},{"question":"Write a function that receives a list of strings containing people\'s first and last names. The function should return a dictionary where each key is the first letter of a last name, and the corresponding value is a list of names (first and last names concatenated) that have last names starting with that letter. The names in each list should be sorted in alphabetical order. **Constraints:** 1. All names will contain only alphabetic characters and one space between the first and last names. 2. The input list can have any number of names, including zero. 3. The same name combination will not appear more than once. If the input list is empty, return an empty dictionary. Examples: ```python list_of_names = [\\"John Smith\\", \\"Jane Doe\\", \\"Alice Johnson\\", \\"Chris Doe\\", \\"Bob Doe\\"] # Returns: {\'S\': [\'John Smith\'], \'D\': [\'Bob Doe\', \'Chris Doe\', \'Jane Doe\'], \'J\': [\'Alice Johnson\']} list_of_names = [\\"Zara Zane\\", \\"Anna Apple\\", \\"Sammy Senior\\", \\"Carol Charity\\"] # Returns: {\'Z\': [\'Zara Zane\'], \'A\': [\'Anna Apple\'], \'S\': [\'Sammy Senior\'], \'C\': [\'Carol Charity\']} list_of_names = [] # Returns: {} ```","solution":"def group_names_by_last_initial(names_list): Function to group names by the initial letter of the last names. Parameters: names_list (list): A list of strings with first and last names Returns: dict: A dictionary with keys as the initial letter of the last names and values as sorted list of names. name_dict = {} for name in names_list: first_name, last_name = name.split() initial = last_name[0] if initial not in name_dict: name_dict[initial] = [] name_dict[initial].append(name) for key in name_dict: name_dict[key].sort() return name_dict"},{"question":"Write a function `word_cloud` that takes a string `text` and returns a dictionary representing a word cloud. A word cloud is a visual representation of word frequency where the size of each word indicates its frequency or importance. For this task, the words in the dictionary should be keys and their frequencies should be the values. The function should account for: - Case insensitivity (e.g., \\"Word\\" and \\"word\\" should be counted as the same word). - Exclude the following common punctuation characters from the words: `.,!?;:\\"\'()`. - Words connected with hyphens or apostrophes should be considered as separate words (e.g., \\"co-operate\\" or \\"James\'s\\" should be split into \\"co\\", \\"operate\\", and \\"James\\", \\"s\\"). - The order of the words in the dictionary is not important. **Input:** - `text` (string): A string containing the text from which to build the word cloud. **Output:** - `dict`: A dictionary where keys are unique words and values are their respective frequencies in the input text. **Example:** ```python word_cloud(\\"After beating the eggs, Dana read the next step:\\") # returns {\\"after\\": 1, \\"beating\\": 1, \\"the\\": 2, \\"eggs\\": 1, \\"dana\\": 1, \\"read\\": 1, \\"next\\": 1, \\"step\\": 1} word_cloud(\\"Co-operate with James\'s ideas; they are important. Don\'t forget to co-operate!\\") # returns {\'co\': 2, \'operate\': 2, \'with\': 1, \'james\': 1, \'s\': 1, \'ideas\': 1, \'they\': 1, \'are\': 1, \'important\': 1, \'don\': 1, \'t\': 1, \'forget\': 1, \'to\': 1} ``` **Note:** - Ensure there are no leading or trailing spaces in the returned dictionary keys. - The output should be case-insensitive, so all words should be stored in lower-case.","solution":"import re from collections import defaultdict def word_cloud(text): Generates a word cloud dictionary from the given text. Args: text (str): Input text. Returns: dict: Dictionary where keys are words and values are their frequency in the text. # Convert text to lower case text = text.lower() # Use regex to split words, considering hyphens and apostrophes as separators, # and exclude punctuations defined in the task. words = re.split(r\\"[.,!?;:\\"\'()s-]+\\", text) # Initialize the dictionary to hold word counts cloud = defaultdict(int) # Iterate through words and populate the frequency dictionary for word in words: if word: cloud[word] += 1 return dict(cloud)"},{"question":"You are given an integer array nums of length n with positive integers. You need to answer multiple queries on this array about the subarray sums and their properties. For each query, you are given two integers l and r. You need to determine whether the sum of the subarray nums[l...r] is a prime number. Write a function to handle m queries, where each query asks you to check if the sum of the subarray from index l to r (inclusive) is a prime number. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 2·10^5) — the length of the array nums and the number of queries. The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9) — the elements of the array. The following m lines each contain two space-separated integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subarray for which you need to check whether its sum is a prime number. -----Output----- For each query in a separate line, print \\"YES\\" if the sum of the subarray nums[l...r] is a prime number and \\"NO\\" otherwise. -----Example----- Input 6 3 3 4 6 2 7 5 1 3 2 5 1 6 Output NO YES NO -----Explanation----- The queries in the example are as follows: For the first query, the subarray sum is 3+4+6 = 13, which is a prime number. For the second query, the subarray sum is 4+6+2+7 = 19, which is a prime number. For the third query, the subarray sum is 3+4+6+2+7+5 = 27, which is not a prime number.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def subarray_prime_queries(n, m, nums, queries): Function to handle multiple queries, checking if the sum of the subarray is prime. n: int : length of the array nums m: int : number of queries nums: list of int : array elements queries: list of tuple : list of (l, r) queries returns list of str : list of \\"YES\\" or \\"NO\\" for each query # Create prefix sum array prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + nums[i - 1] results = [] for l, r in queries: sub_sum = prefix_sums[r] - prefix_sums[l - 1] if is_prime(sub_sum): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Detect Cyclic Dependencies in a Directed Graph **Problem** You are given a directed graph represented by N vertices and M edges. Each edge is directed from vertex u_i to vertex v_i. Your task is to detect if there are any cyclic dependencies between the vertices in this graph. **Input Format** * The first line contains two integers N and M, the number of vertices and the number of edges respectively. * The next M lines each contain two integers u_i and v_i indicating there is a directed edge from vertex u_i to vertex v_i. **Output Format** Output a single line with \\"CYCLE\\" if there is at least one cycle in the graph and \\"NO CYCLE\\" if there are no cycles. **Constraints** * 1 ≤ N ≤ 10^5 * 0 ≤ M ≤ 2 × 10^5 * 1 ≤ u_i, v_i ≤ N **Example** Input 1: ``` 3 3 1 2 2 3 3 1 ``` Output 1: ``` CYCLE ``` Input 2: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output 2: ``` CYCLE ``` Input 3: ``` 4 3 1 2 2 3 3 4 ``` Output 3: ``` NO CYCLE ``` **Explanation** In the first example, there is a cycle (1 → 2 → 3 → 1). In the second example, there is a cycle (2 → 3 → 4 → 2). In the third example, there are no cycles in the graph.","solution":"from collections import defaultdict, deque def detect_cycle_in_directed_graph(N, M, edges): def has_cycle(): indegree = [0] * (N + 1) graph = defaultdict(list) for u, v in edges: graph[u].append(v) indegree[v] += 1 queue = deque() for i in range(1, N + 1): if indegree[i] == 0: queue.append(i) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return count != N return \\"CYCLE\\" if has_cycle() else \\"NO CYCLE\\" # function to be tested def detect_cycle(N, M, edges): return detect_cycle_in_directed_graph(N, M, edges)"},{"question":"You are given a string containing a mix of characters. The string is guaranteed to have at least one letter. Write a method that takes the string as an argument and returns the first non-repeating character. If all characters repeat, return an empty string. Examples ```python \\"swiss\\" Should return: \\"w\\" (the first character that does not repeat) \\"teeter\\" Should return: \\"r\\" (the first character that does not repeat) \\"aabbcc\\" Should return: \\"\\" (all characters repeat) ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat, returns an empty string. from collections import Counter char_count = Counter(s) for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Implement a function that takes an array of integers representing the scores of students in a class and returns the number of students who scored above the average score. The average score should be rounded down to the nearest integer. Constraints: - The input array will contain at least one score. - Scores will be integers between 0 and 100 (inclusive). Examples: - If the input is `[50, 60, 70]`, the average score is `(50 + 60 + 70) / 3 = 60` which rounds down to 60. The number of students who scored above 60 is 1. - If the input is `[80, 90, 100, 70, 85]`, the average score is `(80 + 90 + 100 + 70 + 85) / 5 = 85` which rounds down to 85. The number of students who scored above 85 is 2. Function signature: ```python def count_above_average(scores: list[int]) -> int: pass ```","solution":"def count_above_average(scores): This function takes an array of integers representing the scores of students in a class and returns the number of students who scored above the average score. The average score is rounded down to the nearest integer. average_score = sum(scores) // len(scores) count = sum(1 for score in scores if score > average_score) return count"},{"question":"Given an unsorted array A[] of size N, find all the pairs of elements in the array that sum up to a given target value K. Print the pairs of elements in the format (A[i], A[j]), where A[i] and A[j] are the elements of the pair, and i < j. Example 1: Input: N = 5 Array = {1, 5, 7, -1, 5} K = 6 Output: (1, 5), (7, -1), (1, 5) Explanation: The pairs with the given sum are (1, 5), (7, -1), and (1, 5). Example 2: Input: N = 4 Array = {2, 2, 2, 2} K = 4 Output: (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2) Explanation: The pairs with the given sum are (2, 2) appearing six times. Your Task: You don\'t need to read input or print anything. Complete the function find_pairs() which takes the array A[], its size N, and the target value K as input parameters and returns a list of tuples representing the pairs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^4 -10^6 ≤ A[i] ≤ 10^6 -10^6 ≤ K ≤ 10^6","solution":"def find_pairs(arr, N, K): Finds all pairs in the array that sum to the given target value K. :param arr: List[int] - The input array :param N: int - The size of the input array :param K: int - The target sum :return: List[Tuple[int, int]] - A list of tuples each representing a pair that sums to K pair_map = {} result = [] for i in range(N): complement = K - arr[i] if complement in pair_map: # Append the pair as many times as complement exists in the map for _ in range(pair_map[complement]): result.append((complement, arr[i])) # Record the current element in the map if arr[i] in pair_map: pair_map[arr[i]] += 1 else: pair_map[arr[i]] = 1 return result"},{"question":"A company needs to track the growth of their subscriptions over a period. They have monthly records of subscription counts and want to identify the greatest sequence of months during which the number of subscriptions continuously increased. You are tasked with writing a program that, given the subscription counts for each month over a period of n months, determines the maximum length of any consecutive sequence of months during which the subscriptions were continuously increasing. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of months for which the subscription counts are provided. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the subscription counts for each month. Output Print a single integer — the length of the longest consecutive sequence of months during which the subscription counts were strictly increasing. Example Input 6 2 3 5 3 4 5 Output 3 Input 7 1 2 3 4 5 6 7 Output 7 Input 5 5 4 3 2 1 Output 1 Note In the first sample, the sequence 2, 3, 5 has the maximum length of 3 months with continuously increasing subscriptions. In the second sample, all months show increasing subscriptions, so the length is 7. In the third sample, there are no consecutive months with increasing subscriptions, thus the length is 1.","solution":"def longest_increasing_subsequence(months): if len(months) == 0: return 0 max_length = 1 current_length = 1 for i in range(1, len(months)): if months[i] > months[i - 1]: current_length += 1 else: current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"You are given two strings s and t. You need to find the minimum number of operations required to convert s into t. An operation is defined as: 1. Insert a character. 2. Delete a character. 3. Replace a character. -----Input----- The first line contains the string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. The second line contains the string t (1 ≤ |t| ≤ 1000), consisting of lowercase English letters. -----Output----- Output a single integer denoting the minimum number of operations required to convert s into t. -----Examples----- Input intention execution Output 5 Input abcdef azced Output 3 Input sunday saturday Output 3 -----Note----- For the first case, the operations to transform \\"intention\\" into \\"execution\\" are: 1. Replace \'i\' with \'e\' (intention -> entention) 2. Descrease \'n\' to \'e\' (ention -> exention) 3. Replace \'t\' with \'c\' (exention -> execntion) 4. Replace \'n\' with \'u\' (execntion -> executnion) 5. Delete \'i\' (executnion -> execution) For the second example: 1. Replace \'b\' with \'z\' (abcdef -> azcdef) 2. Replace \'d\' with \'e\' (azcdef -> azceef) 3. Replace \'f\' with \'d\' (azceef -> azced) For the third example: 1. Insert \'a\' after \'s\' (sunday -> saunday) 2. Insert \'t\' after \'a\' (saunday -> satunday) 3. Replace \'n\' with \'r\' (satunday -> saturday)","solution":"def min_operations(s, t): Returns the minimum number of operations required to convert string s into string t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute the dp values for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Given an array of integers where each integer represents a height, determine how much water it is able to trap after raining. Example 1: Input: height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: In this case, 6 units of rainwater are being trapped. Example 2: Input: height = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: In this case, 9 units of rainwater are being trapped. Your Task: You don\'t need to read input or print anything. Your task is to complete the function trap() which takes an array of integers height as input parameters and returns the total amount of trapped rainwater. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= height.length <= 10^5 0 <= height[i] <= 10^4","solution":"def trap(height): Calculate the total amount of rainwater trapped. :param height: List of non-negative integers representing height of bars. :return: Total amount of trapped rainwater. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max by scanning from left to right left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max by scanning from right to left right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"During his journey across different planets, an astronaut finds a peculiar machine that can generate different types of metals in the form of rods of various lengths. The machine has a simple interface where you provide it with a length range and it produces all possible rods within that length. The astronaut wants to combine some of these rods to form a big rod. The length of the big rod is the sum of the lengths of the selected rods. In particular, he may take all rods, or he may take only one rod as well. How many different big rods can be crafted? Two big rods are considered different if their lengths are different. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains two space-separated integers L and R which represent the minimum and maximum lengths of the rods respectively. ------ Output ------ For each test case, print a single line containing one integer ― the number of different big rods the astronaut can make. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ L, R ≤ 10^{9} ------ Subtasks ------ Subtask #1 (25 points): L = 1 Subtask #2 (55 points): L, R ≤ 10^{4} Subtask #3 (20 points): original constraints ----- Sample Input 1 ------ 2 1 3 4 6 ----- Sample Output 1 ------ 6 10","solution":"def count_possible_lengths(L, R): total_lengths = set() for length in range(L, R + 1): total_lengths.add(length) n = len(total_lengths) return n * (n + 1) // 2 # Function to handle multiple test cases. def number_of_different_big_rods(test_cases): results = [] for L, R in test_cases: results.append(count_possible_lengths(L, R)) return results"},{"question":"You are given an integer n representing the length of a binary string consisting of characters \'0\' and \'1\'. Your task is to generate any binary string of length n such that no two adjacent substrings of length k (1 ≤ k ≤ n/2) are identical. If there are multiple such strings, output any. It can be shown that such a string always exists under the given constraints. Input The first line contains a single integer t (1 ≤ t ≤ 300) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^4). Output For each test case, print a single line containing the binary string of length n. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints. Example Input 3 4 5 7 Output 0101 10101 0101010 Note In the first test case, the string \\"0101\\" ensures that no two adjacent substrings of any length k (1 ≤ k ≤ 2) are identical. In the second test case, the string \\"10101\\" ensures that no two adjacent substrings of any length k (1 ≤ k ≤ 2) are identical. In the third test case, the string \\"0101010\\" ensures that no two adjacent substrings of any length k (1 ≤ k ≤ 3) are identical.","solution":"def generate_binary_string(n): Generates a binary string of length n such that no two adjacent substrings of length k (1 ≤ k ≤ n/2) are identical. # Alternate between \'0\' and \'1\' result = \'\'.join([\'0\' if i % 2 == 0 else \'1\' for i in range(n)]) return result def solve(t, cases): Solves multiple test cases for generating binary strings without repeated adjacent substrings. t: number of test cases cases: a list of integers representing lengths of binary strings to generate results = [generate_binary_string(n) for n in cases] return results"},{"question":"Write a function that takes a string containing only lowercase alphabetic characters and returns a new string where each character is replaced by the character occurring 13 positions after it in the alphabet. Wrap around to the beginning of the alphabet if necessary. This is a variant of the ROT13 cipher. Your function should preserve spaces and ignore non-alphabetic characters. Examples ``` \\"hello\\" => \\"uryyb\\" \\"uryyb\\" => \\"hello\\" \\"hello world!\\" => \\"uryyb jbeyq!\\" \\"lbh penpxrq gur pbqr\\" => \\"you cracked the code\\" ```","solution":"def rot13(s): Applies the ROT13 cipher to a given string. Parameters: s (str): Input string containing lowercase alphabetic characters. Returns: str: A new string with each character replaced by the character occurring 13 positions after it in the alphabet. result = [] for char in s: if \'a\' <= char <= \'z\': shifted = (ord(char) - ord(\'a\') + 13) % 26 + ord(\'a\') result.append(chr(shifted)) else: result.append(char) return \'\'.join(result)"},{"question":"Validate and Calculate Objective Your task is to write a function that takes two arguments, validates them, and performs a specific calculation based on their values. Description Implement a function that accepts two arguments. The function should return the following values based on the given conditions: 1. Return `None` if either of the arguments is not of type `int`. 2. If both arguments are integers, return `a - b` if `a > b`, otherwise return `b - a`. Constraints - The function should be named `validate_and_calculate`. - Input arguments can be of any type. - Only when both `a` and `b` are integers should the calculation be performed. - The result should adhere strictly to the conditions outlined above. - You may assume that valid integer arguments will always be within the range of `[-10^6, 10^6]`. Example ``` validate_and_calculate(10, 3) => 7 validate_and_calculate(\'hello\', 3) => None validate_and_calculate(5, 20) => 15 validate_and_calculate(5.5, 2) => None ``` Ensure your implementation handles all edge cases gracefully.","solution":"def validate_and_calculate(a, b): Validates if both inputs are integers and returns the absolute difference of a and b based on specific conditions. Arguments: a -- First input. b -- Second input. Returns: None if either of the arguments is not an integer. Absolute difference (a - b) if a > b. Absolute difference (b - a) if b >= a. if not isinstance(a, int) or not isinstance(b, int): return None if a > b: return a - b else: return b - a"},{"question":"In a small village there is a unique tradition of creating a celebratory decoration out of lanterns for the yearly festival. The decoration is a sequence of lanterns hung on a single line. Each lantern has a particular height, and the village elders want the decoration to exhibit an aesthetically pleasing pattern. Specifically, they want the heights of the lanterns to form a strictly increasing sequence. You are tasked with helping the villagers determine the longest possible length of the decoration (i.e., the number of lanterns) that can be created from a given collection of lanterns such that the sequence of heights is strictly increasing. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of lanterns available. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 100,000) — the heights of the available lanterns. -----Output----- Print the length of the longest strictly increasing subsequence that can be made from the heights of the available lanterns. -----Examples----- Input 6 5 1 8 3 6 7 Output 4 Input 5 5 4 3 2 1 Output 1 Input 8 10 22 9 33 21 50 41 60 Output 5 -----Note----- In the first example, one of the longest strictly increasing subsequences is [1, 3, 6, 7]. In the third example, one of the longest strictly increasing subsequences is [10, 22, 33, 50, 60].","solution":"from bisect import bisect_left def longest_increasing_subsequence(lanterns): Function to find the length of the longest strictly increasing subsequence. :param lanterns: List of lantern heights :return: Length of the longest strictly increasing subsequence if not lanterns: return 0 # List to store the current longest increasing subsequence lis = [] for height in lanterns: pos = bisect_left(lis, height) if pos < len(lis): lis[pos] = height else: lis.append(height) return len(lis)"},{"question":"You are given a binary tree with N nodes, where each node has a unique value from 1 to N. Implement a function that calculates the sum of values of all the nodes at the kth level of the tree. The root node is at level 1. If there are no nodes at the kth level, the function should return 0. Input: The first line contains an integer N, the number of nodes in the tree. The second line contains N integers, where the ith integer denotes the value of the parent node of the ith node. For the root node, the parent value will be -1. The third line contains an integer k, the level for which the sum of values of the nodes needs to be calculated. Output: An integer representing the sum of values of all the nodes at level k. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Value of each node ≤ N 1 ≤ k ≤ N SAMPLE INPUT 5 -1 1 1 2 3 3 SAMPLE OUTPUT 9 Explanation The binary tree is: 1 / 2 3 / 4 5 The nodes at level 3 are [4, 5], and the sum of their values is 4 + 5 = 9. Hence, the output is 9.","solution":"def sum_at_kth_level(N, parent_nodes, k): from collections import deque, defaultdict if k < 1 or k > N: return 0 # Build the tree as an adjacency list tree = defaultdict(list) root = None for i in range(N): if parent_nodes[i] == -1: root = i + 1 else: tree[parent_nodes[i]].append(i + 1) if root is None: return 0 # Perform BFS to find the sum of values at the kth level level = 1 queue = deque([root]) while queue: if level == k: return sum(queue) level_length = len(queue) for i in range(level_length): node = queue.popleft() for child in tree[node]: queue.append(child) level += 1 return 0"},{"question":"You are given a string containing alphabets and digits. Your task is to reformat the string in such a way that the letters and digits are alternated. If it is not possible to reformat the string in this way, return an empty string. -----Input----- A single string s consisting of only lowercase English letters and digits. -----Output----- A single string with digits and letters alternated or an empty string if it is not possible. -----Constraints----- The length of string s is between 1 and 500 inclusive. -----Examples----- Input a0b1 Output a0b1 Input 1229857369 Output \\"\\" -----Note----- In the first sample case, the string \\"a0b1\\" is already alternated so it is returned as is. In the second sample case, the string \\"1229857369\\" does not contain any letters, so it is not possible to alternate between letters and digits. Therefore, an empty string is returned.","solution":"def reformat(s: str) -> str: Reformats the input string so that letters and digits alternate. If it is not possible, returns an empty string. letters = [ch for ch in s if ch.isalpha()] digits = [ch for ch in s if ch.isdigit()] if abs(len(letters) - len(digits)) > 1: return \\"\\" if len(letters) > len(digits): result = [None] * len(s) result[::2], result[1::2] = letters, digits else: result = [None] * len(s) result[::2], result[1::2] = digits, letters return \'\'.join(result)"},{"question":"Given an undirected graph with `n` nodes and `m` edges, determine if there exists a valid path from the first node to the last node. If a valid path exists, print the length of the shortest path. If no such path exists, print -1. Constraints * 2 leq n leq 10^5 * 1 leq m leq 2 times 10^5 * 1 leq u, v leq n for each edge * All values in input are integers. Input Input is given from Standard Input in the following format: n m u_1 v_1 u_2 v_2 ... u_m v_m Output Print the length of the shortest path as an integer, or print -1 if no such path exists. Examples Input 5 6 1 2 2 3 3 4 4 5 2 4 1 5 Output 1 Input 4 4 1 2 2 3 3 4 1 3 Output 2 Input 3 2 1 2 2 3 Output 2 Input 3 1 1 2 Output -1","solution":"from collections import deque, defaultdict def bfs_shortest_path(n, edges): # Create graph from edges graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # BFS to find the shortest path from node 0 to node n-1 queue = deque([0]) distances = [-1] * n distances[0] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) if neighbor == n-1: return distances[neighbor] # If we reach here, no path was found return -1 def solution(n, m, edges): return bfs_shortest_path(n, edges)"},{"question":"Given a string that contains lowercase English letters and the special character `#`, where the `#` character acts as a backspace. Your task is to process the string and provide the final output after considering all the backspace operations. A backspace operation means removing the character before it, if any. If there is no character before a `#`, it should be ignored. ------ Input ------ A single string S of length 1 ≤ |S| ≤ 10^6 that contains lowercase English letters and the character `#`. ------ Output ------ Print the final string after processing all backspaces. ------ Constraints ------ - The string S will not be empty. - The string S will contain at least one character that is not `#`. ----- Sample Input 1 ------ abc#d ----- Sample Output 1 ------ a ----- Explanation 1 ------ The backspace operations will happen as follows: - Input string: \\"abc#d\\" - Backspace operation after \\"abc#\\": \\"ab\\" - Backspace operation after \\"ab\\": \\"a\\" - Ignoring backspace with no character before it after \\"a\\": \\"a\\" ----- Sample Input 2 ------ ab#c ----- Sample Output 2 ------ c ----- Explanation 2 ------ The backspace operations will happen as follows: - Input string: \\"ab#c\\" - Ignoring backspace with no character before it after \\"a#\\": \\"\\" - Ignoring backspace with no character before it after \\"\\": \\"\\" - Backspace operation after \\"b#\\": \\"\\" - Input string: \\"c\\" Note that the backspaces should be processed from left to right, processing one backspace at a time.","solution":"def process_backspaces(s): Processes the string considering the \'#\' character as a backspace. Returns the resultant string after all backspace operations. result = [] for char in s: if char == \'#\': if result: result.pop() else: result.append(char) return \'\'.join(result)"},{"question":"A study group is working on solving problems for an upcoming programming contest. The group is divided into several teams and each team is aiming to submit as many solutions as possible. Each team has a certain number of members, and each member is capable of solving a specific number of problems per day. There is a strict competition schedule, and each team needs to submit their solutions at the end of the day. Each team has a different strategy for allocating problems to their members to maximize the number of problems solved. Your task is to determine the maximum number of problems that can be solved by each team based on their team members\' capacities. ----Input---- The input consists of: - one line with the integer t (1 le t le 100), the number of teams. - t blocks of the following format: - one line with the integer m (1 le m le 100), the number of members in the team. - one line with m integers p_1, p_2, ..., p_m (1 le p_ i le 100), the number of problems that the i-th member can solve in a day. ----Output---- For each team, output a single integer on a new line: the maximum number of problems that can be solved by that team in a day. ----Examples---- Sample Input 1: 2 3 5 3 4 2 1 2 Sample Output 1: 12 3 Sample Input 2: 1 5 1 1 1 1 1 Sample Output 2: 5","solution":"def maximum_problems_solved(t, teams_info): Returns a list of the maximum number of problems that can be solved by each team in a day. t: integer, number of teams. teams_info: list of tuples, each containing the number of members in the team and a list of integers denoting the number of problems each member can solve. Example: t = 2 teams_info = [(3, [5, 3, 4]), (2, [1, 2])] Returns: [12, 3] results = [] for m, problems in teams_info: results.append(sum(problems)) return results"},{"question":"The Grand Algorithm Junta has tasked you with analyzing a collection of strings. The strings are produced by a secret operation and exhibit certain patterns that vary depending on specific criteria. Your challenge is to decode the pattern and identify the original operation used to create each string. Here\'s your task: You are given several strings. Each string is built by repeatedly concatenating a single substring multiple times. However, the substring and the number of repetitions are unknown. Your program should figure out the shortest possible substring for each input string by finding the smallest repeating unit that can generate the original string when repeated. Input: - The first line contains an integer n (1 ≤ n ≤ 100), which is the number of test cases. - The next n lines each contain a single string s (1 ≤ |s| ≤ 100) composed of lowercase letters. Output: - For each test case, print the length of the shortest possible substring that can generate the entire string when repeated. Examples: Input: ``` 3 ababab abcabcabc aaaa ``` Output: ``` 2 3 1 ``` Explanation: 1. In the string \\"ababab\\", the shortest repeating unit is \\"ab\\", which repeats 3 times. 2. In the string \\"abcabcabc\\", the shortest repeating unit is \\"abc\\", which repeats 3 times. 3. In the string \\"aaaa\\", the shortest repeating unit is \\"a\\", which repeats 4 times.","solution":"def shortest_repeating_unit_length(s): Finds the length of the shortest substring that can generate the entire string `s` when repeated. for i in range(1, len(s) + 1): substring = s[:i] if len(s) % len(substring) == 0: if substring * (len(s) // len(substring)) == s: return len(substring) return len(s) def main(inputs): n = int(inputs[0]) # number of test cases results = [] for i in range(1, n + 1): s = inputs[i] result = shortest_repeating_unit_length(s) results.append(result) return results"},{"question":"The kingdom of Zord has a peculiar system to grant citizenship to its inhabitants. Each year, they conduct a series of tests over several days. The scores of these tests are recorded for each day. To determine eligibility for citizenship, a candidate\'s score for each day must form a strictly increasing sequence. You are given the scores of a candidate for a series of days. You need to determine if the scores form a strictly increasing sequence. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each test case consists of two parts: - The first line contains a single integer N, the number of days. - The second line contains N positive integers representing the scores for each day in chronological order. ------ Output Format ------ For each test case, print YES on a new line if the scores form a strictly increasing sequence, and NO otherwise. The output should be case-insensitive (e.g., yEs, yes, YES will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{4} 1 ≤ text{scores}[i] ≤ 10^{9} ----- Sample Input 1 ------ 3 4 1 2 3 4 5 1 3 3 5 6 4 3 5 1 9 ----- Sample Output 1 ------ YES NO NO","solution":"def is_strictly_increasing_sequence(scores): Checks if the given list of scores form a strictly increasing sequence. return all(scores[i] < scores[i + 1] for i in range(len(scores) - 1)) def determine_citizenship_eligibility(test_cases): Given a list of test cases, determines if each case forms a strictly increasing sequence of scores and returns the results as YES or NO. results = [] for scores in test_cases: if is_strictly_increasing_sequence(scores): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"In a distant kingdom, there lies a magical garden represented as an n times m grid. Each cell in the grid can either be fertile soil represented by \\".\\" or a rock represented by \\"#\\". King Alaric wants to grow a single, continuous patch of crops in the garden. A patch is considered continuous if you can traverse between any two cells in the patch through adjacent fertile cells (only horizontal or vertical moves allowed). Your task is to help King Alaric determine if it\'s possible to grow such a continuous patch of crops. -----Input:----- - The first line contains two integers n and m (1 leq n, m leq 1000), the dimensions of the garden. - The next n lines each contain m characters, representing the garden layout. -----Output:----- Print YES if it\'s possible to have a single continuous patch of crops, otherwise print NO. -----Sample Input:----- 4 5 ..#.. .#... ..... ... -----Sample Output:----- YES -----Explanation:----- In the sample input, all fertile cells can be connected through adjacency, forming a single continuous patch. -----Sample Input:----- 3 3 ..# .#. .#. -----Sample Output:----- NO -----Explanation:----- In the second example, the fertile soil cells are separated by rocks, forming two disconnected patches.","solution":"def can_grow_continuous_patch(n, m, garden): from collections import deque # Direction vectors for going up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Function to find starting point of first fertile cell def find_start(): for i in range(n): for j in range(m): if garden[i][j] == \'.\': return (i, j) return None # Function to execute BFS from a starting fertile cell def bfs(start): queue = deque([start]) visited.add(start) while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and garden[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) start = find_start() if not start: # No fertile ground at all return \\"NO\\" visited = set() bfs(start) # Check if there are any unvisited fertile cells for i in range(n): for j in range(m): if garden[i][j] == \'.\' and (i, j) not in visited: return \\"NO\\" return \\"YES\\""},{"question":"The famous \\"Monty Hall Problem\\" is a probability puzzle based on a game show scenario. Here\'s the setup: 1. You are a contestant on a game show with three closed doors: Door A, Door B, and Door C. 2. Behind one of these doors is a prize (a car), while behind the other two doors there are goats. 3. You choose one of the doors (e.g., Door A) without knowing what is behind them. 4. The host, Monty Hall, who knows what is behind each door, then opens one of the other two doors to reveal a goat (e.g., Door B). 5. Monty then gives you a choice: you can stick with your original door choice or switch to the other remaining door (e.g., Door C). Your task is to simulate this game a specified number of times, and for each simulation, determine whether switching doors results in a win more often than sticking with the original door choice. Write a program that runs the simulation and outputs the number of wins for both strategies (sticking and switching) along with the corresponding percentages. # Input: The input consists of a single integer `N` (1 <= N <= 1,000,000) on a line, representing the number of times to simulate the game. # Output: Output exactly two lines: 1. The first line should contain the number of times the contestant wins by sticking with the original choice, followed by the percentage (to 2 decimal places) of wins for this strategy. 2. The second line should contain the number of times the contestant wins by switching to the other door, followed by the percentage (to 2 decimal places) of wins for this strategy. # Example: Input: ``` 1000 ``` Output: ``` Sticking wins: 330 (33.00%) Switching wins: 670 (67.00%) ``` Note that the percentages should sum to 100.00% (except for floating-point rounding errors). # Explanation: In this example, out of 1000 simulations, the contestant wins 330 times by sticking with their original door choice, and wins 670 times by switching to the other door. The percentages reflect the probability of winning using each strategy. # Hints: 1. Use random number generation to simulate the placement of the car and the doors chosen by the contestant and Monty. 2. Use Python\'s `random` module to aid in generating random outcomes. Write your code to simulate the Monty Hall game and answer these questions accordingly.","solution":"import random def monty_hall_simulation(N): stick_wins = 0 switch_wins = 0 for _ in range(N): # Initially choose a random door initial_choice = random.randint(0, 2) # Randomly place the car behind one of the doors car_position = random.randint(0, 2) # Monty will reveal a goat door available_doors = {0, 1, 2} - {initial_choice, car_position} revealed_door = random.choice(list(available_doors)) # Determine the door to switch to switch_choice = ({0, 1, 2} - {initial_choice, revealed_door}).pop() if initial_choice == car_position: stick_wins += 1 if switch_choice == car_position: switch_wins += 1 stick_percentage = (stick_wins / N) * 100 switch_percentage = (switch_wins / N) * 100 print(f\\"Sticking wins: {stick_wins} ({stick_percentage:.2f}%)\\") print(f\\"Switching wins: {switch_wins} ({switch_percentage:.2f}%)\\") # Example Usage monty_hall_simulation(1000)"},{"question":"Define a method that accepts a string and an integer as parameters. The method should return a new string where the characters are cyclically shifted to the right by the number specified by the integer. ```python cyclic_shift(\\"abcdef\\", 2) == \\"efabcd\\" cyclic_shift(\\"helloworld\\", 3) == \\"rldhellowo\\" cyclic_shift(\\"python\\", 5) == \\"npytho\\" ``` To elaborate, if the integer is positive, the characters should be shifted to the right. If the integer is negative, the characters should be shifted to the left. The number of shifts can exceed the length of the string, so cyclic behavior needs to be maintained (i.e., shifting by the length of the string results in the same string, and shifting by more than the length should wrap around).","solution":"def cyclic_shift(s, n): Returns string s with characters cyclically shifted to the right by n positions. If n is negative, shifts to the left. length = len(s) if length == 0: return s n = n % length # Ensure n is within the bounds of the string length return s[-n:] + s[:-n]"},{"question":"Alice is participating in a coding competition where she needs to process a series of commands to manage a list of integers. Each command either appends an integer to the end of the list or removes an integer from the front of the list. Your task is to determine the state of the list after processing all the commands. -----Input----- The first line contains one positive integer k — the number of commands (1 leq k leq 100). The next k lines contain either a command \\"APPEND x\\" where x is a positive integer (1 leq x leq 100) or the command \\"REMOVE\\". It\'s guaranteed that there will never be a \\"REMOVE\\" command when the list is empty. -----Output----- Print a single line which is a space-separated list of integers representing the final state of the list after processing all commands. -----Examples----- Input 4 APPEND 3 APPEND 5 REMOVE APPEND 2 Output 5 2 Input 3 APPEND 10 APPEND 4 REMOVE Output 4 Input 2 APPEND 1 REMOVE Output (the output is empty) -----Note----- In the first test, after the series of commands, the final state of the list would be [5, 2]. In the second test, the series of commands results in the final state [4]. In the third test, the \\"REMOVE\\" command makes the list empty. Hence the output is empty.","solution":"def process_commands(k, commands): lst = [] for command in commands: if command.startswith(\\"APPEND\\"): _, value = command.split() lst.append(int(value)) elif command == \\"REMOVE\\": if lst: lst.pop(0) return lst"},{"question":"In an enchanted forest, there lives a quirky monkey named Max who loves to collect magical bananas. Max\'s banana stash is special because each banana has a unique power level associated with it, represented by an integer. Max wants to organize his stash and distribute the bananas into groups such that the sum of power levels in each group is an even number. Your task is to help Max determine if it is possible to divide his bananas into the required groups. -----Input----- The input consists of a single line containing an integer n (1 ≤ n ≤ 100) and then n integers b1, b2, ..., bn (−100 ≤ bi ≤ 100) — the power levels of the bananas. -----Output----- Print \\"YES\\" if it is possible to divide the bananas into groups where each group has an even sum of power levels, and \\"NO\\" otherwise. -----Examples----- Input 4 1 3 2 4 Output YES Input 3 1 1 1 Output NO -----Note----- In the first example, we can form groups (1, 3) and (2, 4) both of which have even sums 4 and 6 respectively. In the second example, any group we form will have an odd sum, hence it\'s not possible to divide the bananas as required.","solution":"def can_divide_even_sum_groups(n, bananas): Determines if it is possible to divide bananas into groups such that the sum of power levels in each group is an even number. odd_count = sum(1 for x in bananas if x % 2 != 0) even_count = n - odd_count # If the count of odd numbers is even, we can always pair them up to sum to even if odd_count % 2 == 0: return \\"YES\\" else: # If the count of odd numbers is odd, we need at least one even number to make the total sum even if even_count > 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Evaluate the performance of a logistic company that transports goods between various cities with specific travel costs associated with each route. The company\'s goal is to minimize the travel cost while meeting the demand requirements for goods transportation between the cities. Consider a graph where each node represents a city and each edge represents a travel route between two cities with an associated cost. Given the graph, determine the minimum cost to transport the goods while visiting all specified cities exactly once (known as the Travelling Salesman Problem). -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 15) — the number of cities. The next n lines contain n integers each, where the j-th integer in the i-th line denotes the travel cost from city i to city j (0 le cost_{ij} le 1000). Note that cost_{ii} is guaranteed to be 0. It is guaranteed that all routes are bi-directional, i.e., the cost from city i to city j is the same as the cost from city j to city i (cost_{ij} = cost_{ji}). -----Output----- For each test case, print a single line with the minimum travel cost required to visit all specified cities exactly once. -----Examples----- Input 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 Output 80 64","solution":"def tsp(graph, n): # Using dynamic programming approach to solve the Travelling Salesman Problem (TSP) VISITED_ALL = (1 << n) - 1 memo = [[None] * (1 << n) for _ in range(n)] def _tsp(pos, mask): if mask == VISITED_ALL: return graph[pos][0] if memo[pos][mask] is not None: return memo[pos][mask] ans = float(\'inf\') for city in range(n): if (mask & (1 << city)) == 0: new_cost = graph[pos][city] + _tsp(city, mask | (1 << city)) ans = min(ans, new_cost) memo[pos][mask] = ans return ans return _tsp(0, 1) def minimum_travel_costs(t, test_cases): results = [] for case in test_cases: n = case[0] graph = case[1] result = tsp(graph, n) results.append(result) return results"},{"question":"You are given a list of integers representing the page numbers of a printed book. Unfortunately, the pages were misprinted and are not in the correct order. The task is to determine the longest subsequence of increasing page numbers from the list. For example, in the list [4, 2, 3, 6, 10, 1, 12], the longest subsequence of increasing page numbers is [2, 3, 6, 10, 12]. Write a program that finds the length of the longest increasing subsequence of page numbers. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of pages. The second line contains a sequence of space-separated integers: p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 1000), where p_{i} is the page number. -----Output----- Print a single integer — the length of the longest increasing subsequence of page numbers. -----Examples----- Input 7 4 2 3 6 10 1 12 Output 5 Input 5 5 4 3 2 1 Output 1 -----Note----- In the first test case, the longest subsequence of increasing page numbers is [2, 3, 6, 10, 12], which has a length of 5. In the second test case, since the pages are in decreasing order, the length of the longest increasing subsequence is 1.","solution":"def longest_increasing_subsequence(nums): Function to determine the length of the longest increasing subsequence. Parameters: nums (list): List of integers representing page numbers Returns: int: Length of the longest increasing subsequence if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] holds the length of the longest increasing subsequence ending with nums[i] for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Eliana is arranging her bookshelf, which contains volumes of different heights. She wants to group the books into several stacks. The rule for each stack is: * Each stack should contain at least k books. * The difference between the tallest and the shortest book in each stack should be at most d. Please help Eliana find the minimal number of stacks she needs to arrange all her books. Input The first line contains three space-separated integers m, d, k (1 ≤ m ≤ 105, 0 ≤ d ≤ 109, 1 ≤ k ≤ 105). The second line contains m integers hi separated by spaces (0 ≤ hi ≤ 109). Output Output the minimal number of stacks required to group all the books. If it\'s impossible to stack the books according to the rules, output -1. Examples Input 6 3 2 2 5 3 7 2 8 Output 3 Input 5 1 2 1 3 2 5 4 Output -1 Note For the first sample, we can split the books into 3 stacks: [2, 5, 3], [7, 2], [8]. For the second sample, there is no way to group the books into stacks where the height difference is at most 1 while each stack contains at least 2 books.","solution":"def minimal_number_of_stacks(m, d, k, heights): Returns the minimal number of stacks required to group all books according to the rules. Parameters: m (int): Number of books. d (int): Maximum allowed height difference within a stack. k (int): Minimum number of books in a stack. heights (list of int): List of book heights. Returns: int: Minimal number of stacks required or -1 if not possible. heights.sort() counts = [] stack = [] for height in heights: stack.append(height) if len(stack) >= k and (stack[-1] - stack[0]) <= d: counts.append(len(stack)) stack = [] if stack: if len(stack) < k or (stack[-1] - stack[0]) > d: return -1 counts.append(len(stack)) return len(counts)"},{"question":"You are given an array of strings. Your task is to find the smallest string that contains each string in the array as a subsequence. Note: A string S is a subsequence of string T if we can remove some characters from T to get S. Input: The first line contains an integer N, the number of strings in the array. The next N lines each contain a single string from the array. Output: Output the smallest string that contains each string in the array as a subsequence. If there are multiple strings with the same minimum length, output the lexicographically smallest one. Constraints: 1 ≤ N ≤ 10^3 1 ≤ length of each string ≤ 50 All strings contain only lowercase English alphabets SAMPLE INPUT 3 abc bc ac SAMPLE OUTPUT abc","solution":"def smallest_supersequence(strings): Given an array of strings, find the smallest string that contains each string in the array as a subsequence. from itertools import permutations # Function to check if s2 is a subsequence of s1 def is_subsequence(s1, s2): it = iter(s1) return all(c in it for c in s2) # Generate all permutations of the given strings all_permutations = permutations(strings) # Initialize the smallest supersequence to a large number smallest_supersequence = None # Find the smallest lexicographical supersequence from all permutations for perm in all_permutations: current_supersequence = perm[0] for s in perm[1:]: # Append characters to make \'current_supersequence\' a supersequence of \'s\' i = 0 for c in s: while i < len(current_supersequence) and current_supersequence[i] != c: i += 1 if i == len(current_supersequence): current_supersequence += c else: i += 1 # Check if the current supersequence is smaller or lexicographically smaller if smallest_supersequence is None or len(current_supersequence) < len(smallest_supersequence) or ( len(current_supersequence) == len(smallest_supersequence) and current_supersequence < smallest_supersequence): smallest_supersequence = current_supersequence return smallest_supersequence"},{"question":"Palindrome Check Sara is learning about palindromes and wants to create a program to check if a given string is a palindrome. A palindrome is a string that reads the same forward and backward, ignoring case, spaces, and punctuation. Write a function that takes a string as input and prints \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Input A single line containing a string with a maximum length of 100 characters. Output Print \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. Example Input: A man, a plan, a canal, Panama Output: YES Input: Hello World Output: NO","solution":"import re def is_palindrome(s): Checks if the given string s is a palindrome, ignoring case, spaces, and punctuation. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse if cleaned == cleaned[::-1]: print(\\"YES\\") else: print(\\"NO\\")"},{"question":"You are given an array a consisting of n integers. Your goal is to perform a series of operations until the array becomes empty. In each operation, select any two elements a_i and a_j (with i neq j), remove them from the array and add the absolute difference left| a_i - a_j right| to the array. You need to determine the minimum possible value of the last remaining element after performing these operations until only one element is left in the array. Note: The operations can be performed in any order. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains one integer n (2 le n le 10^5) — the number of elements in the array a. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5) — the elements of the array a. It is guaranteed that the sum of n over all test cases does not exceed 5 times 10^5. -----Output----- For each test case, output the minimum possible value of the last remaining element on a new line. -----Examples----- Input 3 3 3 7 11 4 1 1 1 1 5 2 2 5 8 13 Output 1 0 0 -----Note----- In the first test case, a possible sequence of operations is as follows: * Select 7 and 11, remove them and add their difference 4. The array becomes [3, 4]. * Select 3 and 4, remove them and add their difference 1. The array becomes [1]. In the second test case, since all elements are equal, any pair selection will always result in 0. The last element will be 0. In the third test case, a possible sequence of operations is: * Select 13 and 8, remove them and add their difference 5. The array becomes [2, 2, 5, 5]. * Select 2 and 2, remove them and add their difference 0. The array becomes [0, 5, 5]. * Select 5 and 5, remove them and add their difference 0. The array becomes [0].","solution":"def min_last_element(test_cases): results = [] for case in test_cases: n, a = case if len(a) == 0: results.append(0) continue max_elem = max(a) sum_of_remaining = sum(a) - max_elem if sum_of_remaining >= max_elem: results.append((sum(a) % 2)) else: results.append(max_elem - sum_of_remaining) return results # parsing input and calling the function def process_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) a = list(map(int, input_lines[index + 1].split())) test_cases.append((n, a)) index += 2 return min_last_element(test_cases)"},{"question":"Nova is building a new social media app. In her app, each user has a unique user ID and a list of friends. Each friend relationship is bidirectional, meaning if User A is friends with User B, User B is friends with User A. Nova wants to implement a feature that allows users to form groups of friends who directly know each other or are separated by at most one mutual friend. To help her, you need to write a program that identifies all such groups for each test case. A group is a set of users where there is a direct or single intermediate connection between any two users in the group. If a user has no friends, they still form a group by themselves. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case: - The first line contains an integer n denoting the number of users. - Each of the next n lines contains the user ID (an integer) and a space-separated list of friends (also integers). If a user has no friends, the line will contain only the user ID. -----Output----- For each test case, output the number of such groups formed. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - 1 ≤ user ID ≤ 1000 - 0 ≤ number of friends of a user ≤ n-1 -----Example----- Input: 2 3 1 2 3 2 1 3 1 4 1 2 3 2 1 4 3 1 4 2 Output: 1 2 -----Explanation----- In the first example, all three users are friends with User 1 directly, forming a single group. In the second example, User 1 and User 2 are friends with each other and with User 4, forming one group. User 3 has no friends in this context, forming another group on their own. Thus, there are two groups.","solution":"def find_groups_count(test_cases): def dfs(user, adj_list, visited): stack = [user] while stack: current = stack.pop() for friend in adj_list[current]: if not visited[friend]: visited[friend] = True stack.append(friend) groups_counts = [] for users in test_cases: adj_list = {user: set() for user in users} for user, friends in users.items(): for friend in friends: adj_list[user].add(friend) adj_list[friend].add(user) visited = {user: False for user in users} group_count = 0 for user in users: if not visited[user]: visited[user] = True group_count += 1 dfs(user, adj_list, visited) groups_counts.append(group_count) return groups_counts def parse_input(input_string): lines = input_string.strip().split(\\"n\\") idx = 0 T = int(lines[idx]) idx += 1 test_cases = [] for _ in range(T): n = int(lines[idx]) idx += 1 users = {} for _ in range(n): parts = lines[idx].split() user = int(parts[0]) friends = list(map(int, parts[1:])) if len(parts) > 1 else [] users[user] = friends idx += 1 test_cases.append(users) return test_cases def main(input_string): test_cases = parse_input(input_string) result = find_groups_count(test_cases) for count in result: print(count)"},{"question":"Write a function `deep_clone` that takes an object (which can contain other nested objects) as input and returns a new object that is a deep copy of the original. The function should ensure that modifying the new object does not affect the original object. Handle various data types including arrays, objects, primitives, and functions.","solution":"import copy def deep_clone(obj): Creates a deep copy of the given object. The deep copy ensures that modifying the new object does not affect the original object. :param obj: The object to be deep cloned. It can be of any data type including nested lists, dictionaries, etc. :return: A new object that is a deep copy of the original object. return copy.deepcopy(obj)"},{"question":"You have recently landed a developer\'s job at a tech firm and on your first task, you are required to manipulate a sequence of numbers based on the manager\'s instructions. The manager gives you a sequence of positive integers and a series of transformation instructions. Each instruction includes an index in the sequence and a number to XOR with the element at the given index. Your task is to apply all the transformations and then return the resulting sequence. Write a function `transform_sequence(sequence, transformations)` that takes an initial sequence of integers and a list of transformation instructions. Each transformation instruction is a tuple `(index, value)` where `index` is the position in the sequence (0-based) to apply the XOR operation with the given `value`. Input: - The initial sequence of integers provided as a list. - The list of transformations, each of which is a tuple `(index, value)`. Output: - A list representing the sequence after all transformations have been applied. Constraints: - The length of the initial sequence will be between 1 and 10^5. - The value of each integer in the sequence will be between 0 and 10^9. - The number of transformations will be between 1 and 10^5. You should aim for an efficient solution that minimizes time complexity given the constraints. Example Input: sequence = [5, 10, 15, 20, 25] transformations = [(1, 3), (2, 10), (0, 5), (4, 20)] Example Output: [0, 9, 5, 20, 13] Explanation: - After the first transformation, sequence becomes [5, 9, 15, 20, 25] because 10 XOR 3 = 9. - After the second transformation, sequence becomes [5, 9, 5, 20, 25] because 15 XOR 10 = 5. - After the third transformation, sequence becomes [0, 9, 5, 20, 25] because 5 XOR 5 = 0. - After the fourth transformation, sequence becomes [0, 9, 5, 20, 13] because 25 XOR 20 = 13.","solution":"def transform_sequence(sequence, transformations): Apply a series of XOR transformations to the initial sequence. for index, value in transformations: sequence[index] ^= value return sequence"},{"question":"Given a matrix of size n x m containing non-negative integers, your task is to find the size of the largest square submatrix that contains all the same elements. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the matrix. Each of the next n lines contains m integers a_ij (0 ≤ a_ij ≤ 10^9) representing the elements of the matrix. Output: Print a single integer representing the size (side length) of the largest square submatrix with all identical elements. Examples: Input 3 3 1 1 1 1 1 1 1 1 1 Output 3 Input 4 5 1 2 2 3 3 4 2 2 3 3 1 1 2 2 3 1 1 4 4 4 Output 2 Input 5 6 1 2 3 4 5 6 2 2 3 1 2 3 3 3 3 1 3 4 4 4 4 4 4 5 5 1 1 2 3 4 Output 1","solution":"def largest_square_submatrix(matrix): n = len(matrix) m = len(matrix[0]) if n == 0 or m == 0: return 0 # DP table to store the size of the largest square submatrix ending at (i, j) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = 1 else: if (matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]): dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side # Example usage: # matrix = [ # [1, 2, 2, 3, 3], # [4, 2, 2, 3, 3], # [1, 1, 2, 2, 3], # [1, 1, 4, 4, 4] # ] # print(largest_square_submatrix(matrix)) # Output: 2"},{"question":"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order. Example 1: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Example 2: Input: nums = [1], k = 1 Output: [1] Your Task: Complete the function topKFrequent() which takes the array nums and an integer k as parameters and returns an array of k most frequent elements. You don\'t need to read any input or print any output, it is done by driver code. Expected time complexity: O(nlogk) Expected auxiliary space: O(n) Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 k is in the range [1, the number of unique elements in the array]","solution":"from collections import Counter import heapq def topKFrequent(nums, k): Returns the k most frequent elements in nums. :param nums: List[int] - array of integers :param k: int - number of frequent elements to return :return: List[int] - k most frequent elements # Counter object to count the frequency of each element count = Counter(nums) # Use a heap to find the k most frequent elements return [item for item, freq in heapq.nlargest(k, count.items(), key=lambda x: x[1])]"},{"question":"Given an integer n, write a function to determine the sum of the first n, odd numbers. The function should return an integer representing the sum. Constraints: - 1 ≤ n ≤ 10^5 Input - A single integer n. Output - A single integer which is the sum of the first n odd numbers. Example Input: 5 Output: 25 Explanation: The first 5 odd numbers are 1, 3, 5, 7, 9, and their sum is 1 + 3 + 5 + 7 + 9 = 25. Note: You must aim to achieve an efficient solution in terms of time complexity.","solution":"def sum_of_first_n_odd_numbers(n): Returns the sum of the first n odd numbers. # Sum of the first n odd numbers is n squared. return n * n"},{"question":"----- __CAMBIO CAR RENTAL\'S DUFFEL BAG DILEMMA__ ----- Cambio, a car rental company, offers special discounts for customers traveling with luggage. They understand the importance of optimizing the space in a duffel bag when traveling. Given a duffel bag that can hold up to a certain weight, the company wants to determine the optimal combination of items that can fit inside the bag to maximize the value for the traveler. Each item has a specific weight and value associated with it. You have been provided with a weight limit for the duffel bag and a list of items with their respective weights and values. Your task is to create an efficient function to find the maximum total value of items that can be placed in the duffel bag without exceeding the weight limit. An example of the input and expected output is included below: ```python # The weight limit of the duffel bag w w = 50 # The items list contains pairs in the form of (value, weight) items = [(60, 10), (100, 20), (120, 30)] ``` Given the above input, your solution should return 220 because the optimal selection of items with weights 20 and 30 yields the highest value without exceeding the weight limit. You have been provided the following function definition to complete: ```python def knapsack(w, items): # Your code here ``` An example of the working code: ```python knapsack(50, [(60, 10), (100, 20), (120, 30)]) # => 220 ``` Hint: Use dynamic programming to achieve an efficient solution with a time complexity of Θ(nw), where n is the number of items and w is the weight limit of the duffel bag.","solution":"def knapsack(w, items): Determines the maximum value that can be achieved with the given weight limit and items. Arguments: w -- the weight limit of the duffel bag items -- a list of tuples where each tuple contains (value, weight) of an item Returns: The maximum value that can be achieved without exceeding the weight limit. n = len(items) dp = [[0 for _ in range(w + 1)] for _ in range(n + 1)] for i in range(1, n + 1): item_value, item_weight = items[i - 1] for j in range(w + 1): if item_weight <= j: dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - item_weight] + item_value) else: dp[i][j] = dp[i - 1][j] return dp[n][w]"},{"question":"Create a function that takes a string representing a Domino sequence and returns a new string that represents the best possible arrangement. _____________________________________________________________ Rules: 1. A Domino tile is represented by a pair of integers on either side, separated by a colon (e.g., \\"5:3\\"). 2. Domino tiles can be arranged in a sequence such that the number on the right side of one tile matches the number on the left side of the next tile (e.g., \\"5:3\\" + \\"3:6\\" + \\"6:2\\"). 3. A valid starting tile has no predecessor (e.g., \\"2:1\\" cannot be preceded by any tile with a right side \'2\'). 4. If there are multiple valid sequences, return any one of them. 5. Return \\"Invalid sequence\\" if a valid arrangement is not possible. _______________________________________________________________ Input: String of Domino tiles separated by spaces, e.g., \'2:1 5:3 2:2 3:6 1:3\'. Output: String message representing the best possible arrangement or \'Invalid sequence\'.","solution":"def find_domino_sequence(domino_str): from collections import defaultdict, deque def build_graph(dominos): graph = defaultdict(list) indegree = defaultdict(int) outdegree = defaultdict(int) for d in dominos: left, right = map(int, d.split(\':\')) graph[left].append(right) outdegree[left] += 1 indegree[right] += 1 return graph, indegree, outdegree def find_start_node(graph, indegree, outdegree): start = None for node in graph: if outdegree[node] > indegree[node]: if start is not None: return None # More than one starting node start = node if start is None: return next(iter(graph)) # Any node return start def dfs(graph, start): stack = [start] result = deque() while stack: while graph[stack[-1]]: stack.append(graph[stack[-1]].pop()) result.appendleft(stack.pop()) return result dominos = domino_str.split() if not dominos: return \\"Invalid sequence\\" graph, indegree, outdegree = build_graph(dominos) start = find_start_node(graph, indegree, outdegree) if start is None: return \\"Invalid sequence\\" sequence = dfs(graph, start) # Extra validation to check if we used all dominos if len(sequence) != len(dominos) + 1: return \\"Invalid sequence\\" result = [] prev = sequence.popleft() result.append(prev) while sequence: curr = sequence.popleft() result.append(f\\"{prev}:{curr}\\") prev = curr return \\" \\".join(result[1:]) # Example Usage # Input: \'2:1 5:3 2:2 3:6 1:3\' # Output (Any of the valid arrangements): \'Invalid sequence\' (since no valid starting without predecessor)"},{"question":"Write a program to determine the maximum difference between any two elements in a list of integers. The list can be thought of as prices of a particular stock on different days, and you need to find out the maximum possible profit that could have been made by buying the stock at one price and selling it at another. Note that the buying day must be before the selling day. ----- Input: ----- The first line contains an integer T, the number of test cases. Each test case consists of a single line containing an integer N, the number of days. The following line contains N space-separated integers representing the prices of the stock on each day. ----- Output: ----- For each test case, output the maximum difference between two elements in the list where the larger element comes after the smaller one. If no such pair exists, output -1. ----- Constraints: ----- 1 ≤ T ≤ 10 2 ≤ N ≤ 10^{5} 0 ≤ prices[i] ≤ 10^{5} for all 0 ≤ i < N ----- Sample Input 1 ----- 2 6 7 1 5 3 6 4 5 9 8 7 6 5 ----- Sample Output 1 ----- 5 -1 ----- Explanation 1 ----- - In the first test case, the maximum profit can be made by buying on day 2 (price = 1) and selling on day 5 (price = 6), yielding a profit of 6 - 1 = 5. - In the second test case, no valid pair of days exist where the selling price is higher than the buying price, so the output is -1.","solution":"def max_difference(prices): Returns the maximum difference between a pair of integers in the prices list where the second integer comes after the first one. If no such pair exists, returns -1. if not prices or len(prices) < 2: return -1 min_price = prices[0] max_diff = -1 for i in range(1, len(prices)): if prices[i] > min_price: max_diff = max(max_diff, prices[i] - min_price) min_price = min(min_price, prices[i]) return max_diff def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] prices = test_cases[i][1] results.append(max_difference(prices)) return results"},{"question":"Given two strings s and t, write a function to determine if s can be transformed into t using a sequence of the following operation any number of times: choose an existing character in the string (with minimum length 1) and duplicate it to make a new character, which can then be inserted anywhere into the string. Return True if s can be transformed into t, otherwise, return False. Examples: Input: s = \\"abc\\", t = \\"aabbcc\\" Output: True Explanation: One series of operations to transform s into t is: 1. Duplicate \'a\', to get \\"aabc\\". 2. Duplicate \'b\', to get \\"aabbc\\". 3. Duplicate \'c\', to get \\"aabbcc\\". Input: s = \\"abc\\", t = \\"abcd\\" Output: False Explanation: Since \'d\' is not in the original string \'abc\', it\'s impossible to transform \'abc\' into \'abcd\'. Input: s = \\"xyz\\", t = \\"xyz\\" Output: True Explanation: No operation is needed as s is already equal to t. Note: s and t will consist of lowercase letters and have lengths in the range [1, 50].","solution":"def can_transform(s, t): Determine if string s can be transformed into string t using a sequence of duplicating and inserting existing characters in s. from collections import Counter # Count the frequency of each character in s and t count_s = Counter(s) count_t = Counter(t) # For each character in t, check if it exists in s # and if its frequency in t is not greater than its frequency in s for char in count_t: if char not in count_s or count_t[char] < count_s[char]: return False # If all characters and their frequencies are valid, return True return True"},{"question":"Taking part in a marathon, the organizers decide to give each participant a unique bib number that consists of uppercase letters, lowercase letters, and digits. To ensure there are no inappropriate words within their bib numbers, the organizers have defined a list of disallowed words, and any bib number containing any of these disallowed words in sequence should be flagged as invalid. For example, if the disallowed words are \\"BAD\\" and \\"XX\\", then the bib numbers \\"12BAD56\\", \\"ABXXYZ\\", and \\"XBAD789\\" are all invalid. Write a program which, given a list of bib numbers and a list of disallowed words, determines if each bib number in the list is valid or not. -----Input----- The first line contains the integer n, the number of bib numbers. Each of the next n lines contains one bib number. The following line contains the integer m, the number of disallowed words. Each of the next m lines contains one disallowed word. A bib number will have at least 1 and at most 100 characters. A disallowed word will have at least 1 and at most 50 characters. -----Output----- Output n lines, each containing \\"Valid\\" or \\"Invalid\\" depending on whether the corresponding bib number in the input is acceptable. -----Examples----- Sample Input: 2 12BAD56 GOOD123 1 BAD Sample Output: Invalid Valid","solution":"def check_bib_numbers(bib_numbers, disallowed_words): This function checks each bib number if it contains any disallowed word, and returns the validity status. Parameters: bib_numbers (list): List of bib numbers to check. disallowed_words (list): List of disallowed words. Returns: list: A list containing \\"Valid\\" or \\"Invalid\\" for each bib number. results = [] for bib_number in bib_numbers: is_valid = True for word in disallowed_words: if word in bib_number: is_valid = False break if is_valid: results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"Given a string representing a mathematical expression with operands (integers) and operators (+, -, *, /) separated by spaces, write a program to evaluate the expression and return the result as an integer. Example 1: Input: \\"3 + 5\\" Output: 8 Example 2: Input: \\"10 + 2 * 6\\" Output: 22 Example 3: Input: \\"100 * 2 + 12\\" Output: 212 Example 4: Input: \\"100 * ( 2 + 12 )\\" Output: 1400 Example 5: Input: \\"100 * ( 2 + 12 ) / 14\\" Output: 100 Your Task: You don\'t need to read input or print anything. The task is to complete the function evaluateExpression(expression) which takes the string `expression` as input and returns the evaluated result as an integer. You can assume that the given expression is always valid. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Length of the expression ≤ 10^4 Operators are +, -, *, / Operands are integers in the range [-10^4, 10^4] Expression may contain parentheses indicating part of the computation to be performed first.","solution":"def evaluateExpression(expression): def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(int(left / right)) # Ensure integer division follows floor division def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 tokens = expression.split() operands = [] operators = [] for token in tokens: if token.isdigit() or (token.startswith(\'-\') and token[1:].isdigit()): operands.append(int(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operands, operators.pop()) operators.pop() # Remove \'(\' from stack else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operands, operators.pop()) operators.append(token) while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"You are given a matrix M of size N x N with distinct positive integers. Consider all possible submatrices of M. Define the *value* of a submatrix as the sum of the elements on its boundary. Find the submatrix with the maximum *value*. If multiple submatrices have the same *value*, consider the one which appears first when traversing the matrix row by row starting from the top-left corner. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of N lines of input where each line contains N space-separated integers representing the matrix M. ------ Output Format ------ - For each test case, output a new line containing the coordinates of the top-left and bottom-right corners of the submatrix with the maximum value in the format (i1, j1, i2, j2) and the maximum value. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10 1 ≤ M[i][j] ≤ 100 M[i][j] neq M[k][l] for different (i, j) and (k, l) ------ Sample Input 1 ------ 2 3 1 2 3 4 5 6 7 8 9 2 10 20 30 40 ------ Sample Output 1 ------ (0, 0, 2, 2) 46 (0, 0, 1, 1) 100 ------ Explanation 1 ------ Test case 1: The submatrix covering the entire matrix has the boundary elements 1, 2, 3, 4, 6, 7, 8, 9, which sum to 40. Test case 2: The only submatrix is the whole matrix itself with the boundary elements 10, 20, 30, 40, which sum to 100.","solution":"def submatrix_boundary_sum(matrix, top_left, bottom_right): Returns the sum of the boundary elements of the submatrix defined by top_left and bottom_right. i1, j1 = top_left i2, j2 = bottom_right sum_val = 0 # Top boundary for j in range(j1, j2 + 1): sum_val += matrix[i1][j] # Bottom boundary for j in range(j1, j2 + 1): if i2 != i1: sum_val += matrix[i2][j] # Left boundary for i in range(i1 + 1, i2): sum_val += matrix[i][j1] # Right boundary for i in range(i1 + 1, i2): if j2 != j1: sum_val += matrix[i][j2] return sum_val def find_max_boundary_sum_submatrix(matrix): N = len(matrix) max_sum = -1 top_left_coords = (0, 0) bottom_right_coords = (N-1, N-1) for i1 in range(N): for j1 in range(N): for i2 in range(i1, N): for j2 in range(j1, N): sum_val = submatrix_boundary_sum(matrix, (i1, j1), (i2, j2)) if sum_val > max_sum: max_sum = sum_val top_left_coords = (i1, j1) bottom_right_coords = (i2, j2) return top_left_coords + bottom_right_coords, max_sum def process_test_cases(T, test_cases): results = [] for n, matrix in test_cases: result = find_max_boundary_sum_submatrix(matrix) results.append(result) return results"},{"question":"In a distant land, there exists a peculiar game involving magic crystals and spells. Each player is initially given a single crystal of power 1, and throughout the game, they acquire additional crystals through spells. When a player casts a spell, it either increases the power of an existing crystal by a given amount or it creates a new crystal with a specific power. The goal is to determine the total power of a player\'s crystals after a sequence of spells. Input The first line contains a single integer n (1 ≤ n ≤ 100000), the number of spells cast during the game. The next n lines each contain a description of a spell. A spell is given in one of the following formats: - \\"increase x y\\" where x is the index of an existing crystal (1-based) and y is the power increase. - \\"new y\\" where y is the power of the new crystal being created. Initially, there is one crystal with index 1 and power 1. Output Output one integer – the total power of all crystals after all spells have been cast. Example Input 5 increase 1 3 new 2 increase 2 4 new 5 increase 3 1 Output 21 Explanation 1. Initially, we have one crystal with power 1. 2. After the first spell, \\"increase 1 3\\", the power of the first crystal increases to 4. 3. The second spell, \\"new 2\\", creates a second crystal with power 2. 4. The third spell, \\"increase 2 4\\", increases the power of the second crystal to 6. 5. The fourth spell, \\"new 5\\", creates a third crystal with power 5. 6. The fifth spell, \\"increase 3 1\\", increases the power of the third crystal to 6. Total power = 4 + 6 + 6 = 16.","solution":"def total_crystal_power(n, spells): crystals = [1] # Initially, there is one crystal with power 1. for spell in spells: parts = spell.split() if parts[0] == \\"increase\\": index = int(parts[1]) - 1 power_increase = int(parts[2]) crystals[index] += power_increase elif parts[0] == \\"new\\": new_power = int(parts[1]) crystals.append(new_power) return sum(crystals)"},{"question":"Write a program to find the smallest positive integer whose digits sum to a given number S. -----Input----- The first line contains an integer S (1 ≤ S ≤ 1000). -----Output----- The output should be a single integer — the smallest positive integer whose digits sum to S. -----Examples----- Input 10 Output 19 Input 27 Output 999 Input 2 Output 2 Input 15 Output 69","solution":"def smallest_integer_with_sum(S): Returns the smallest positive integer whose digits sum to S. result = [] while S > 0: if S > 9: result.append(9) S -= 9 else: result.append(S) S -= S # The digits are added from the last significant digit to highest result.reverse() return int(\'\'.join(map(str, result)))"},{"question":"Problem Alice is training for a typing speed contest. She has a sequence of N words and she needs to type them all in a specific order within a given time limit. The time it takes Alice to type each word is given and she wants to know how many words she can type fully given the time constraint. You will be given an integer N which represents the number of words in the sequence, a list of integers T of length N where the i-th integer denotes the time taken (in seconds) for Alice to type the i-th word, and an integer M which represents the total time (in seconds) Alice has to type the words. Determine the maximum number of words Alice can type fully within the given time constraint M. Input: - An integer N, the number of words. - A list of integers T of length N, where the i-th element is the time taken to type the i-th word. - An integer M, the total time limit. Output: - An integer, the maximum number of words Alice can type fully within the given time limit. Example Input 4 [2, 3, 1, 4] 6 Output 3 Explanation Alice can type the first three words in the sequence because it takes her 2 + 3 + 1 = 6 seconds, which is within the time limit M = 6. She can\'t start the fourth word since she has no time left for it.","solution":"def max_words_typed(N, T, M): Determines the maximum number of words Alice can type fully within the given time constraint. Parameters: - N (int): The number of words. - T (list of int): List where the i-th element is the time taken to type the i-th word. - M (int): The total time limit. Returns: - int: The maximum number of words Alice can type fully within the given time limit. time_spent = 0 words_typed = 0 for time in T: if time_spent + time <= M: time_spent += time words_typed += 1 else: break return words_typed"},{"question":"Given an integer K, you need to find and print all the pairs of factors (x, y) such that x * y = K, where 1 <= x <= y <= K. Example 1: Input: K = 12 Output: (1, 12) (2, 6) (3, 4) Explanation: The pairs of factors such that their product is 12 are (1, 12), (2, 6), and (3, 4). Example 2: Input: K = 28 Output: (1, 28) (2, 14) (4, 7) Explanation: The pairs of factors such that their product is 28 are (1, 28), (2, 14), and (4, 7). Your Task: You don\'t need to read input. Your task is to complete the function `findPairs()` which takes an integer K as an input parameter and prints all the pairs of factors meeting the above criteria. Expected Time Complexity: O(√K) Expected Auxiliary Space: O(1) Constraints: 1 <= K <= 10^6","solution":"def findPairs(K): Given an integer K, returns a list of pairs (x, y) such that x * y = K and 1 <= x <= y <= K. pairs = [] for x in range(1, int(K**0.5) + 1): if K % x == 0: y = K // x if x <= y: pairs.append((x, y)) return pairs"},{"question":"You are given a string which may contain letters (both lowercase and uppercase), digits, and special characters. Your task is to find the longest substring of the given string that contains only unique characters (no repeated characters). Input The first line contains a single integer T (1 ≤ T ≤ 100) denoting the number of test cases. Each of the next T lines contains a string S (1 ≤ |S| ≤ 10^5) consisting of letters, digits and special characters. Output For each test case, print the length of the longest substring with all unique characters. Examples Input 3 abcabcbb bbbbb pwwkew Output 3 1 3 Note In the first example, the longest substring with all unique characters is \\"abc\\", which has a length of 3. In the second example, the longest substring with all unique characters is \\"b\\", which has a length of 1. In the third example, the longest substring with all unique characters is \\"wke\\", which has a length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters in the given string s. max_length = 0 start = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"Olivia is learning about permutations and wants to practice generating all possible permutations of a given string that contains distinct characters. She would like you to write a program that takes a string as input and outputs all the permutations of that string in lexicographically sorted order. ------ Input ------ The input consists of a single string `s` which contains between 1 and 9 distinct lowercase Latin characters. ------ Output ------ Output each permutation of the input string `s` on a new line, in lexicographically sorted order. ----- Sample Input 1 ------ abc ----- Sample Output 1 ------ abc acb bac bca cab cba","solution":"from itertools import permutations def generate_permutations(s): Generates all permutations of the string `s` in lexicographically sorted order. :param s: A string containing distinct lowercase Latin characters :return: A list of permutations in sorted order perms = sorted(\'\'.join(p) for p in permutations(s)) return perms"},{"question":"Given a string containing a mathematical expression consisting of non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\', evaluate the expression and return the result as an integer. The operators have the usual precedence and associativity rules: - Multiplication and division are evaluated before addition and subtraction. - Operators of the same precedence are evaluated from left to right. If the expression is invalid (e.g., contains any invalid characters or sequences), return None. **Examples:** ```python evaluate_expression(\\"3+5*2\\") == 13 evaluate_expression(\\"10 - 3 / 2\\") == 8 evaluate_expression(\\"2 * 2 * 2\\") == 8 evaluate_expression(\\"3+5*\\") == None evaluate_expression(\\"3/0\\") == None ```","solution":"def evaluate_expression(expression): Evaluates a string mathematical expression containing non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. Returns the result as an integer. If the expression is invalid, returns None. try: # Check if there\'s any invalid character for char in expression: if not (char.isdigit() or char in \'+-*/ \'): return None # Remove spaces and evaluate the expression safely expression = expression.replace(\' \', \'\') result = eval(expression) # Check for division by zero that `eval` might not catch during arithmetic parsing if result == float(\'inf\') or result == float(\'-inf\'): return None return int(result) except (SyntaxError, ZeroDivisionError, ValueError): return None"},{"question":"A tree is an undirected graph in which any two vertices are connected by exactly one path. You are given a tree with n vertices and need to determine the maximum distance between any two vertices in the tree, known as the tree\'s diameter. Input The input consists of multiple datasets. Each dataset is given in the following format. The first line of the dataset contains the integer n (2 ≤ n ≤ 500) – the number of vertices in the tree. Each of the next n-1 lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) – indicating that there is an edge between vertex ai and vertex bi. When n is 0, it indicates the end of input. The number of datasets does not exceed 5. Output For each dataset, print the diameter of the tree on a new line. Example Input 5 1 2 1 3 3 4 3 5 4 1 2 1 3 1 4 0 Output 3 2","solution":"def tree_diameter(n, edges): from collections import deque def bfs(start): visited = [-1] * (n + 1) visited[start] = 0 queue = deque([start]) furthest_point = start max_distance = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] furthest_point = neighbor return furthest_point, max_distance tree = [[] for _ in range(n + 1)] for a, b in edges: tree[a].append(b) tree[b].append(a) start_node = 1 furthest_point, _ = bfs(start_node) _, diameter = bfs(furthest_point) return diameter def process_input(input_str): input_lines = input_str.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): n = int(input_lines[index]) if n == 0: break index += 1 edges = [] for _ in range(n - 1): a, b = map(int, input_lines[index].split()) edges.append((a, b)) index += 1 results.append(tree_diameter(n, edges)) return results"},{"question":"You are given a string consisting of lowercase letters. Your task is to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If such an arrangement is possible, return any one valid arrangement. If it is not possible, return the string \\"Not possible\\". You can assume the input string length is between 1 and 1000. Input format: - A single line containing the input string. Output format: - A single line containing either a valid rearranged string or the text \\"Not possible\\". SAMPLE INPUT 1 aabb SAMPLE OUTPUT 1 abab SAMPLE INPUT 2 aaab SAMPLE OUTPUT 2 Not possible Explanation EXAMPLE 1:- The string \\"aabb\\" can be rearranged to \\"abab\\" such that no two adjacent characters are the same. EXAMPLE 2:- The string \\"aaab\\" cannot be rearranged such that no two adjacent characters are the same, hence the output is \\"Not possible\\".","solution":"from collections import Counter def rearrange_string(s): Rearranges the input string such that no two adjacent characters are the same. If not possible, returns \\"Not possible\\". count = Counter(s) max_count = max(count.values()) n = len(s) # If the most frequent character appears more times than (n + 1) // 2, it is not possible if max_count > (n + 1) // 2: return \\"Not possible\\" sorted_chars = sorted(count, key=lambda x: -count[x]) result = [\'\'] * n index = 0 for char in sorted_chars: for _ in range(count[char]): result[index] = char index += 2 if index >= n: index = 1 return \'\'.join(result)"},{"question":"You are given an array of integers and a target sum. Your task is to determine whether there are two distinct indices i and j in the array such that their elements sum up to the target value. If such a pair exists, return the indices i and j. If no such pair exists, return -1. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: The elements at index 0 and index 1 sum up to 9. Example 2: Input: arr = [3, 2, 4], target = 6 Output: [1, 2] Explanation: The elements at index 1 and index 2 sum up to 6. Example 3: Input: arr = [3, 3], target = 6 Output: [0, 1] Explanation: The elements at index 0 and index 1 sum up to 6. Example 4: Input: arr = [1, 2, 3, 4, 5], target = 10 Output: -1 Explanation: There are no two distinct indices that sum up to 10. Your Task: You don\'t need to read or print anything. Your task is to complete the function twoSum() which takes arr and target as input parameters and returns the list of indices [i, j] if such a pair exists, otherwise returns -1. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 ≤ length of the array ≤ 10^5 -10^9 ≤ elements of the array ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def twoSum(arr, target): Returns indices of the two elements in the array that add up to the target sum. If no such elements exist, return -1. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return -1"},{"question":"You are given a list of integers `arr` of size `n` and an integer `k`. Your task is to determine the minimum number of operations required to transform the list such that each element is divisible by `k`. In one operation, you can change any element of the list to any integer value you wish. For example, if `n = 4`, `arr = [4, 9, 5, 10]`, and `k = 3`, you can transform `arr` as follows: 1. Change `4` to `3` (1 operation) 2. Change `9` to `9` (no operation needed because it\'s already divisible by `3`) 3. Change `5` to `6` (1 operation) 4. Change `10` to `9` (1 operation) Thus, a minimum of 3 operations is required to make every element divisible by `k`. -----Input----- The first line of input contains a single integer `t` (1 le t le 10^4) — the number of test cases. Each of the next `t` test cases consists of two lines: - The first line contains two integers `n` and `k` (1 le n le 10^5, 1 le k le 10^9) — the size of the list and the divisor respectively. - The second line contains `n` integers representing the list `arr` (1 le arr[i] le 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. -----Output----- For each test case, print the minimum number of operations required to transform the list such that every element is divisible by `k`. -----Examples----- Input 3 4 3 4 9 5 10 3 5 1 2 3 5 10 10 20 30 40 50 Output 3 3 0 -----Note----- In the first test case, you can change the elements to [3, 9, 6, 9]. Thus, 3 operations are required. In the second test case, you can change the elements to [0, 0, 0]. Thus, 3 operations are required. In the third test case, all elements are already divisible by 10, so 0 operations are needed.","solution":"def min_operations(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] operations = 0 for num in arr: if num % k != 0: operations += 1 results.append(operations) return results # Example usage: # t = 3 # test_cases = [ # ((4, 3), [4, 9, 5, 10]), # ((3, 5), [1, 2, 3]), # ((5, 10), [10, 20, 30, 40, 50]) # ] # print(min_operations(t, test_cases)) # Output: [3, 3, 0]"},{"question":"Detective Bob needs your help with a new case. He is given a list of n integers which represents the monetary values of certain evidence items. Bob needs to collect evidence such that their monetary values are maximized, but there’s a catch: he cannot collect two consecutive items. Can you help Bob determine the maximum value of evidence he can collect? Input: First line of input contains a single integer n (1 ≤ n ≤ 10^5), representing the number of evidence items Bob has to choose from. The second line contains n integers (1 ≤ value ≤ 10^4), representing the monetary values of the evidence items. Output: Print a single integer which is the maximum value Bob can collect without picking two consecutive items. SAMPLE INPUT 5 3 2 5 10 7 SAMPLE OUTPUT 15","solution":"def max_value_of_evidence(n, evidence_values): if n == 0: return 0 elif n == 1: return evidence_values[0] dp = [0] * n dp[0] = evidence_values[0] dp[1] = max(evidence_values[0], evidence_values[1]) for i in range(2, n): dp[i] = max(dp[i-1], evidence_values[i] + dp[i-2]) return dp[n-1]"},{"question":"Zigzag Conversion The string `\\"PAYPALISHIRING\\"` is written in a zigzag pattern on a given number of rows like this (you may want to display this pattern in a fixed font for better legibility): ``` P A H N A P L S I I G Y I R ``` And then read line by line: `\\"PAHNAPLSIIGYIR\\"` Write the code that will take a string and make this conversion given a number of rows: ``` string convert(string s, int numRows); ``` Example 1: ``` Input: s = \\"PAYPALISHIRING\\", numRows = 3 Output: \\"PAHNAPLSIIGYIR\\" ``` Example 2: ``` Input: s = \\"PAYPALISHIRING\\", numRows = 4 Output: \\"PINALSIGYAHRPI\\" Explanation: P I N A L S I G Y A H R P I ``` Example 3: ``` Input: s = \\"A\\", numRows = 1 Output: \\"A\\" ``` Constraints: - `1 <= s.length <= 1000` - `s` consists of English letters (lower-case and upper-case), \',\' and \'.\'. - `1 <= numRows <= 1000`","solution":"def convert(s, numRows): if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row = 0 going_down = False for char in s: rows[current_row] += char if current_row == 0 or current_row == numRows - 1: going_down = not going_down current_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"A software development company wants to build a feature that generates username suggestions for new users. The username suggestions should be unique and derived from the user\'s first name, last name, and a numerical suffix if needed. To ensure consistency, follow these rules to generate a username: 1. The base of the username is created by concatenating the user\'s first name and last name in lowercase. 2. If the base username is taken, append the smallest possible numerical suffix (starting from 1) that makes the username unique. 3. If no suffix is used, the username should be the concatenation of the first name and last name in lowercase. 4. If a suffix is added, it should be directly appended to the base username without any separators. Write a function to generate a username for each new user given a list of existing usernames. -----Input----- The input consists of: 1. A single line with an integer n (1 ≤ n ≤ 10^5) — the number of existing usernames. 2. n lines each containing one username — the existing usernames, each a string of up to 100 lowercase letters. 3. A single line with the user\'s first name, a space, and the user\'s last name. Each name is a string of up to 50 letters. -----Output----- Print a single line with the generated unique username for the new user. -----Example----- Input 5 johnsmith maryjane johnsmith1 alicecooper bobmarley John Smith Output johnsmith2 Input 3 mickjagger johnlennon paulmccartney Mick Jagger Output mickjagger1","solution":"def generate_username(n, existing_usernames, first_name, last_name): Generate a unique username based on the given first and last name, considering the existing usernames. Parameters: n (int): The number of existing usernames. existing_usernames (list): List of existing usernames. first_name (str): The first name of the user. last_name (str): The last name of the user. Returns: str: The generated unique username. base_username = (first_name + last_name).lower() if base_username not in existing_usernames: return base_username suffix = 1 while True: new_username = f\\"{base_username}{suffix}\\" if new_username not in existing_usernames: return new_username suffix += 1"},{"question":"You are given a string of length 5, S, representing the weekly sales of a small shop. The string contains the uppercase letters \'H\' and \'L\'. \'H\' denotes a high sales day, and \'L\' denotes a low sales day. Your task is to find the maximum number of consecutive high sales days in this week. -----Constraints----- - |S| = 5 - Each character of S is H or L. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the maximum number of consecutive high sales days in the week. -----Sample Input----- HHLLH -----Sample Output----- 2 In the given week, the shop had high sales on the 1st and 2nd days, and again on the 5th day. The maximum number of consecutive high sales days is 2, so your output should be 2.","solution":"def max_consecutive_high_sales_days(S): Return the maximum number of consecutive \'H\' (High sales days) in the string S. max_count = 0 current_count = 0 for char in S: if char == \'H\': current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count # Example usage: # print(max_consecutive_high_sales_days(\\"HHLLH\\")) # Output: 2"},{"question":"**[Question]: Minimum Steps to One** You are given an integer `N`. You can perform either of the following operations on `N`: 1. Subtract 1 from `N`. 2. If `N` is divisible by 2, divide `N` by 2. 3. If `N` is divisible by 3, divide `N` by 3. Your task is to write a program to find the minimum number of operations required to reduce `N` to 1. -----Input:----- The input consists of a single integer `N` (1 ≤ N ≤ 10^6). -----Output:----- Output a single integer, the minimum number of operations required to reduce `N` to 1. -----Examples:----- Input: 10 Output: 3 Explanation: To reduce 10 to 1, the minimum number of operations are: 10 -> 9 (subtract 1) 9 -> 3 (divide by 3) 3 -> 1 (divide by 3) Therefore, the output is 3.","solution":"def min_steps_to_one(N): Returns the minimum number of operations required to reduce N to 1. if N == 1: return 0 dp = [0] * (N + 1) for i in range(2, N + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[N]"},{"question":"You are given a sequence of n integers, and you need to find the length of the longest subsequence that satisfies the following condition: The sequence should be strictly increasing, and the difference between any two consecutive elements should be exactly k. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and k (1 le n le 1000, 1 le k le 100) — the length of the sequence and the required difference, respectively. The second line contains n integers — the elements of the sequence. All elements are distinct and between 1 and 10000. -----Output----- For each test case, print a single integer — the length of the longest subsequence satisfying the specified condition. -----Examples----- Input 3 5 2 1 3 5 7 9 6 1 10 9 8 7 6 5 4 3 10 13 16 19 Output 5 1 4 -----Note----- In the first test case, the entire sequence [1, 3, 5, 7, 9] is already a subsequence with a difference of 2 between consecutive elements, hence the length is 5. In the second test case, no two elements have a difference of 1, so the longest subsequence has a length of 1. In the third test case, the entire sequence [10, 13, 16, 19] is a valid subsequence with a difference of 3, hence the length is 4.","solution":"def longest_subsequence(t, cases): results = [] for case in cases: n, k, seq = case dp = [1] * n for i in range(n): for j in range(i): if seq[i] - seq[j] == k: dp[i] = max(dp[i], dp[j] + 1) results.append(max(dp)) return results"},{"question":"Write a program to read a sequence of integers and perform a series of range increment operations on a given list of the following operation: * incrementRange(b, e, k): For each integer i (b leq i < e), increment a_i by k. Constraints * 1 leq n leq 1,000 * -1,000,000,000 leq a_i leq 1,000,000,000 * 1 leq q leq 1,000 * 0 leq b_i < e_i leq n * -1,000,000,000 leq k_i leq 1,000,000,000 * Given ranges may overlap Input The input is given in the following format. n a_0 ; a_1 ; ...,; a_{n-1} q b_1 ; e_1 ; k_1 b_2 ; e_2 ; k_2 : b_{q} ; e_{q} ; k_{q} In the first line, n (the number of elements in A) is given. In the second line, a_i (each element in A) is given. In the third line, the number of queries q is given and each query is given by three integers b_i ; e_i ; k_i in the following q lines. Output Print all elements of A in a line after performing the given operations. Put a single space character between adjacent elements and a newline at the end of the output. Example Input 10 1 2 3 4 5 6 7 8 9 10 2 1 5 3 3 7 -2 Output 1 5 6 5 6 4 5 8 9 10","solution":"def incrementRange(n, a, q, queries): Perform range increment operations on array a. Args: n : int : the number of elements in the array a : list of int : the array of integers q : int : the number of queries queries : list of tuples : each tuple contains (b, e, k) which specifies the range [b, e) and increment value k Returns: list of int : the updated array after all operations for b, e, k in queries: for i in range(b, e): a[i] += k return a # Example usage: # n = 10 # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # q = 2 # queries = [(1, 5, 3), (3, 7, -2)] # incrementRange(n, a, q, queries) should return [1, 5, 6, 5, 6, 4, 5, 8, 9, 10]"},{"question":"You are given an n x n grid of characters where each character is either \'.\', \'*\', or \'#\' representing empty space, a box, or an obstacle, respectively. You can move from a box to an adjacent (not diagonal) box if there is no obstacle in the way. Two boxes are labeled as `S` (start) and `E` (end). Write a function to determine if there is a path from the start to the end. Your task is to write a program to find out if it\'s possible to move from the start box to the end box. -----Constraints----- - 2 ≤ n ≤ 50 - The grid is a square grid of size n x n. - The grid will contain exactly one start (S) and one end (E) box. - Each cell in the grid can be traversed in one step if it is a \'.\' or if it is the \'S\' or \'E\' cell, but not if it is occupied by a \'#\' -----Input----- Input is given from Standard Input in the following format: n grid[0][0] grid[0][1] ... grid[0][n-1] grid[1][0] grid[1][1] ... grid[1][n-1] ... grid[n-1][0] grid[n-1][1] ... grid[n-1][n-1] -----Output----- If a path from \'S\' to \'E\' exists, print Yes; otherwise, print No. -----Sample Input----- 5 S . . # . . # . # . . # E # . . # . . # . . . . # -----Sample Output----- Yes","solution":"def is_path_exist(n, grid): def bfs(start, end): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: if grid[nx][ny] in {\'.\', \'E\'}: visited.add((nx, ny)) queue.append((nx, ny)) return False start, end = None, None for i in range(n): for j in range(n): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"No\\" if bfs(start, end): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers where each element represents the number of candies at that position. You need to distribute these candies to make all the elements equal, adhering to the rule that in each move you can increment or decrement any element of the array by 1. Your task is to determine the minimum number of moves required to equalize all the elements in the array. INPUT: The first line of input contains an integer t, representing the number of test cases. Each test case consists of two lines: - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array. OUTPUT: For each test case, output a single integer - the minimum number of moves required to equalize all elements of the array. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 10^4 0 ≤ array elements ≤ 10^9 SAMPLE INPUT 2 3 3 1 2 4 1 7 3 5 SAMPLE OUTPUT 2 8","solution":"def min_moves_to_equal_elements(candy_counts): Returns the minimum number of moves required to equalize all elements of the given list candy_counts. median = sorted(candy_counts)[len(candy_counts)//2] return sum(abs(x - median) for x in candy_counts) def process_input(input_data): Processes the input data and returns a list of results for each test case. input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) results = [] line_idx = 1 for _ in range(t): n = int(input_lines[line_idx]) candy_counts = list(map(int, input_lines[line_idx + 1].split())) result = min_moves_to_equal_elements(candy_counts) results.append(result) line_idx += 2 return results def format_output(results): Formats the output results as a \'n\' separated string of integers. return \'n\'.join(map(str, results)) # Example of how the solution works: input_data = 2 3 3 1 2 4 1 7 3 5 print(format_output(process_input(input_data)))"},{"question":"A company\'s delivery team uses a fleet of drones to deliver packages to different locations in a city. Each drone can carry a maximum weight of up to \'W\' pounds and each package has a specific weight. The team wants to maximize the total weight of the packages delivered in a single trip. You are given the weights of the packages that need to be delivered and the maximum weight capacity \'W\' of each drone. Your task is to determine the maximum weight that can be delivered in one drone trip, without exceeding the weight capacity. Write a function `maxWeight` that takes in a list of package weights and the maximum weight capacity of the drone and returns the maximum weight of packages that can be delivered in one trip. Input: - An integer \'n\' representing the number of packages. - A list of \'n\' integers where each integer represents the weight of a package. - An integer \'W\' representing the maximum weight the drone can carry. Output: - A single integer which is the maximum weight that can be delivered in one trip. Your solution should use a dynamic programming approach to solve this problem efficiently. Constraints: 1 ≤ n ≤ 100 1 ≤ weight of each package, W ≤ 1000 Example Input: 5 2 2 4 6 3 9 Example Output: 9 Explanation: The packages with weights [2, 2, 4] and [6, 3] can both be delivered without exceeding the weight capacity of 9. The maximum weight delivered is 9.","solution":"def maxWeight(n, package_weights, W): Returns the maximum weight of packages that can be delivered in one trip without exceeding the weight capacity W of the drone. dp = [0] * (W + 1) for weight in package_weights: for current_weight in range(W, weight - 1, -1): dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + weight) return dp[W]"},{"question":"You are given an array of integers representing the height of buildings where the width of each building is 1. Find the maximum water that can be trapped between the buildings after it rains. Example: Input: heights = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The maximum amount of water can be trapped between the buildings at index 1 and 8, giving the area of water as (8 - 1) * min(7, 8) = 49. Constraints: - 1 <= heights.length <= 3 * 10^4 - 0 <= heights[i] <= 3 * 10^4","solution":"def max_water_trapped(heights): Calculate the maximum water that can be trapped between the buildings. :param heights: List of integers representing the height of the buildings. :return: Integer representing the maximum water that can be trapped. left, right = 0, len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left max_area = max(max_area, height * width) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Tom wants to create a special sequence for a game. The sequence should start with an initial positive integer number and follow these rules: 1. If the current number is even, the next number will be half of the current number. 2. If the current number is odd, the next number will be three times the current number plus one. 3. The sequence ends when it reaches the number 1. Given an initial number, determine the length of the sequence generated by following the above rules until reaching 1. Example n = 6 Sequence: 6 rightarrow 3 rightarrow 10 rightarrow 5 rightarrow 16 rightarrow 8 rightarrow 4 rightarrow 2 rightarrow 1 The length of the sequence is 9 (including the initial number and 1). Function Description Complete the `sequence_length` function in the editor below. It should return an integer representing the length of the sequence generated from the initial number `n` to 1. `sequence_length` has the following parameter(s): int n: the initial number Returns int: the length of the sequence Input Format A single integer, n, the initial number. Constraints 1 leq n leq 10^6 Sample Input 6 Sample Output 9 Explanation Starting from 6, we follow the given rules: 6 rightarrow 3 rightarrow 10 rightarrow 5 rightarrow 16 rightarrow 8 rightarrow 4 rightarrow 2 rightarrow 1. The sequence length is 9.","solution":"def sequence_length(n): Returns the length of the sequence starting from n and following the specified rules until it reaches 1. Parameters: n (int): the initial number Returns: int: length of the sequence length = 1 # Start with the initial number while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"You are given a string consisting of lowercase alphabets and an integer k. Your task is to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If possible, return any such rearrangement; otherwise, return an empty string. Input The input consists of two lines: - The first line contains a string s (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. - The second line contains an integer k (1 ≤ k ≤ |s|). Output Output a rearranged string satisfying the above conditions, or an empty string if no such arrangement exists. Examples Input aabb 2 Output abab Input aaab 2 Output \\"\\"","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string(s, k): if k == 0: return s count = Counter(s) max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) wait_queue = [] result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) wait_queue.append((char, freq + 1, len(result))) if len(wait_queue) >= k: ready_char, ready_freq, pos = wait_queue.pop(0) if ready_freq < 0: heappush(max_heap, (ready_freq, ready_char)) return \'\'.join(result) if len(result) == len(s) else \\"\\""},{"question":"You are given an array B of size M and T tasks to process. For each task, you are provided with two integers L and R, where 1 ≤ L ≤ R ≤ M. Your task is to find the sum of the elements in the array B from index L to R (both inclusive). Input: The first line contains two integers, M and T, denoting the size of array B and the number of tasks to be processed. The second line contains M space-separated integers, denoting the array of elements Bi. The next T lines contain two integers L and R respectively for each task. Output: For each task, print the sum of the elements from index L to R (1-based index) in a new line. Constraints: 1 ≤ M, T ≤ 10^5 1 ≤ Bi ≤ 10^9 1 ≤ L ≤ R ≤ M SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15","solution":"def process_tasks(M, T, B, tasks): Returns the sum of elements in array B for each task from L to R (1-based index). :param M: Size of array B :param T: Number of tasks :param B: List of integers representing the array :param tasks: List of tuples containing L and R for each task :return: List of sums for each task # Precompute prefix sums prefix_sum = [0] * (M + 1) for i in range(1, M + 1): prefix_sum[i] = prefix_sum[i - 1] + B[i - 1] results = [] for L, R in tasks: results.append(prefix_sum[R] - prefix_sum[L - 1]) return results"},{"question":"You have been tasked with developing a scheduling system for a university. The university has several courses, each with a specific number of required student slots. Furthermore, there are a limited number of classrooms, each with a maximum capacity and availability during the different time slots throughout the week. You need to determine if it is possible to schedule all the courses within the given constraints. Each course can only be scheduled in one time slot and one classroom, but different courses can share the same classroom at different times. Assume the week consists of a fixed number of time slots. Specifically, the constraints are described as follows: **Input** - The first line contains three integers, `c` (number of courses), `r` (number of classrooms), and `t` (number of total time slots in a week). - The next `c` lines each contain two integers, `si` (number of required student slots) and `di` (number of available time slots). - The next `r` lines each contain two integers, `ci` (classroom capacity) and `ai` (number of available time slots). **Output** - If all courses can be scheduled under the given constraints, output \\"YES\\". - Otherwise, output \\"NO\\". **Examples** **Input** ``` 3 2 10 30 4 15 2 20 5 50 7 25 4 ``` **Output** ``` YES ``` **Input** ``` 3 1 10 30 4 15 2 40 6 35 10 ``` **Output** ``` NO ``` **Input** ``` 2 2 5 10 3 15 2 20 5 20 3 ``` **Output** ``` YES ``` In this problem, you must ensure that each course can be allocated a classroom for at least one of its available time slots, considering the classroom capacities and their respective time slot availabilities.","solution":"from collections import defaultdict def can_schedule_courses(c, r, t, courses, classrooms): available_time_slots = [0] * t # Step 1: Track availability for each timeslot for each classroom classroom_capacity = [] timeslot_availabilities = defaultdict(list) for capacity, available_slots in classrooms: classroom_capacity.append(capacity) for ts in range(available_slots): timeslot_availabilities[ts].append(capacity) # Step 2: Attempt to schedule each course for required_students, available_slots in courses: scheduled = False for ts in range(available_slots): if timeslot_availabilities[ts]: # Find a classroom with enough capacity for capacity in timeslot_availabilities[ts]: if capacity >= required_students: timeslot_availabilities[ts].remove(capacity) scheduled = True break if scheduled: break # If we couldn\'t schedule this course, fail if not scheduled: return \\"NO\\" # All courses scheduled successfully return \\"YES\\""},{"question":"Tara has a tree-structured data storage system. This tree is rooted at node 1 and has n nodes in total. Each node contains a certain amount of data. Tara needs to perform various operations on this tree. These operations are as follows: 1. Add Data: For a given node u, add a specific amount of data to it. 2. Retrieve Data: For a given subtree rooted at node u, find the sum of data in all nodes within that subtree. The tree has the following properties: - It is a rooted tree with n nodes. - Each node has a unique id from 1 to n. - The data in each node is initially 0. You are required to handle q queries of the above types. Input: - The first line contains two integers n and q - the number of nodes and the number of queries, respectively. - The next n-1 lines each contain two integers u and v, denoting an edge in the tree between nodes u and v. - The following q lines describe the queries: - Each query of the first type starts with `1`, followed by two integers u and d, where d is the amount of data to add to node u. - Each query of the second type starts with `2`, followed by one integer u, to retrieve the sum of data in the subtree rooted at node u. Output: For each query of the second type, output a single integer - the sum of the data in the subtree rooted at u. Constraints: 1 ≤ n, q ≤ 10^5 1 ≤ u, v ≤ n 1 ≤ d ≤ 10^4 Example: Input: 5 5 1 2 1 3 2 4 2 5 1 2 5 1 3 10 2 2 2 1 2 3 Output: 5 15 10 Note: - Nodes are numbered from 1 to n. - The tree is given in an arbitrary structure, but it is always connected and contains no cycles.","solution":"class TreeNode: def __init__(self): self.data = 0 self.children = [] def add_data(tree, u, d): tree[u].data += d def get_subtree_sum(tree, u): def dfs(node): total = node.data for child in node.children: total += dfs(tree[child]) return total return dfs(tree[u]) def solve(n, q, edges, queries): tree = {i: TreeNode() for i in range(1, n+1)} for u, v in edges: tree[u].children.append(v) tree[v].children.append(u) # Convert the tree to rooted tree and remove parent references def make_rooted_tree(node, parent): if parent != -1: tree[node].children.remove(parent) for child in tree[node].children: make_rooted_tree(child, node) make_rooted_tree(1, -1) result = [] for query in queries: if query[0] == 1: _, u, d = query add_data(tree, u, d) elif query[0] == 2: _, u = query result.append(get_subtree_sum(tree, u)) return result"},{"question":"The citizens of Techland have decided to upgrade their infrastructure by building a high-speed rail network between their cities. The government wants to ensure that the construction costs are minimized while still being able to reach all cities from any other city, either directly or indirectly through other cities. You have been asked to design an algorithm that determines the minimal cost to build the rail network. The cities and the possible direct rail connections between them are provided, each with an associated cost. INPUT The first line of the input contains an integer N, the number of cities. The second line contains an integer M, the number of possible rail connections. The following M lines each describe a rail connection with three integers u, v, and w, where u and v are the cities connected by this rail, and w is the cost to build this rail connection. OUTPUT Print the minimal total cost required to build the rail network. If it is not possible to connect all cities, print \\"IMPOSSIBLE\\". CONSTRAINTS 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000000 SAMPLE INPUT 4 5 1 2 5 1 3 10 2 3 4 2 4 3 3 4 8 SAMPLE OUTPUT 12 Explanation In this case, one possible minimal cost rail network is: - Connect city 1 to city 2 (cost 5) - Connect city 2 to city 3 (cost 4) - Connect city 2 to city 4 (cost 3) The total cost is 5 + 4 + 3 = 12.","solution":"def min_cost_to_build_rail_network(N, M, connections): # Helper function: Find the root of a node def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] # Helper function: Union two sets def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Kruskal\'s algorithm to find Minimal Spanning Tree parent = list(range(N+1)) rank = [0] * (N+1) # Sort all connections by their cost connections.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for u, v, w in connections: if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += w edges_used += 1 # If we used N-1 edges, we have our MST if edges_used == N-1: break # Check if all cities are connected if edges_used != N-1: return \\"IMPOSSIBLE\\" else: return total_cost"},{"question":"Write a program that simulates the operations of a basic text editor. The editor contains an initially empty string and supports the following commands: 1. **APPEND <text>**: Appends the given string <text> to the end of the current string. 2. **DELETE k**: Deletes the last \'k\' characters of the current string. If there are fewer than \'k\' characters, delete all of them. 3. **PRINT k**: Prints the k-th character of the current string (1-indexed). If k is out of bounds, print an empty string. 4. **UNDO**: Reverts the string to the state before the most recent APPEND or DELETE operation. The initial string is empty, and you will perform a sequence of operations as described. Your task is to process these operations and output the results of any PRINT commands. ------ Input ------ The first line contains an integer q, the number of operations. Each of the following q lines contains one of the four types of commands described above. ------ Output ------ For each PRINT command in the input, print the result of the command on a new line. If the PRINT command refers to a character out of bounds, print an empty string. ------ Constraints ------ 1 ≤ q ≤ 10^5 |text| in APPEND commands is at most 10^4 All input strings consist of lowercase English letters and the DELETE command will always be valid. ------ Sample Input ------ 8 APPEND hello PRINT 1 APPEND world PRINT 10 DELETE 5 PRINT 6 UNDO PRINT 6 ------ Sample Output ------ h d o w ------ Explanation ------ 1. After APPEND \\"hello\\", the string becomes \\"hello\\". 2. PRINT 1 gives the first character \\"h\\". 3. After APPEND \\"world\\", the string becomes \\"helloworld\\". 4. PRINT 10 gives the tenth character \\"d\\". 5. After DELETE 5, the string becomes \\"hello\\". 6. PRINT 6 gives an empty string because the current string has only 5 characters. 7. UNDO reverts the string back to the state before the last DELETE or APPEND, making it \\"helloworld\\" again. 8. PRINT 6 gives the sixth character \\"w\\".","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] def append(self, text): self.history.append(self.text) self.text += text def delete(self, k): self.history.append(self.text) self.text = self.text[:-k] def print_char(self, k): if 1 <= k <= len(self.text): return self.text[k-1] else: return \\"\\" def undo(self): if self.history: self.text = self.history.pop() def text_editor_operations(operations): editor = TextEditor() output = [] for operation in operations: command = operation.split() if command[0] == \\"APPEND\\": editor.append(command[1]) elif command[0] == \\"DELETE\\": editor.delete(int(command[1])) elif command[0] == \\"PRINT\\": output.append(editor.print_char(int(command[1]))) elif command[0] == \\"UNDO\\": editor.undo() return output"},{"question":"You are given a string S, containing only lowercase English letters. Snuke wants to know the maximum number of distinct palindromic substrings that can be obtained by rearranging the letters of S. Constraints * 1 ≤ |S| ≤ 2 × 10^5 * S contains only lowercase English letters. Input Input is given from Standard Input in the following format: S Output Print a single integer representing the maximum number of distinct palindromic substrings. Examples Input aabb Output 3 Input abc Output 3 Input aaa Output 2 Input abacaba Output 7","solution":"from collections import Counter def max_distinct_palindromic_substrings(S): Returns the maximum number of distinct palindromic substrings that can be obtained by rearranging the letters of S. char_freq = Counter(S) odd_count = sum(1 for freq in char_freq.values() if freq % 2 == 1) # If there are odd frequencies, all characters can form unique single-character palindromes total_distinct_palindromes = len(S) return total_distinct_palindromes"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Your task is to determine the sum of even-valued terms in the Fibonacci sequence that do not exceed a given value N. -----Constraints----- - N is an integer between 1 and 1,000,000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the sum of the even-valued Fibonacci terms that do not exceed N. -----Sample Input----- 100 -----Sample Output----- 44 In the example above, the even Fibonacci numbers not exceeding 100 are 2, 8, and 34. Their sum is 44.","solution":"def sum_of_even_fibonacci(N): Calculates the sum of even Fibonacci numbers that do not exceed given value N. Args: N (int): The ceiling value for the Fibonacci series. Returns: int: The sum of even Fibonacci numbers not exceeding N. a, b = 0, 1 sum_even = 0 while a <= N: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"You are given a list of N integers. Your task is to rearrange the array such that every second element of the rearranged array is greater than its previous and next elements. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. The first line of each test case contains an integer N, the number of elements in the array. The second line of each test case contains N space-separated integers. ------ Output ------ For each test case, print the rearranged array in a single line. If there are multiple rearrangements possible, any of them will be accepted. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^3 1 ≤ text{Array Elements} ≤ 10^6 ----- Sample Input 1 ------ 3 5 1 3 2 4 5 4 1 2 3 4 3 2 1 3 ----- Sample Output 1 ------ 1 3 2 5 4 1 3 2 4 1 3 2 ----- Explanation 1 ------ In the first case, the array can be rearranged to 1 3 2 5 4. Here, the second element (3) is greater than the first (1) and third elements (2), the fourth element (5) is greater than the third (2) and fifth elements (4). This follows the given condition. In the second and third cases, the output arrays already satisfy the condition.","solution":"def rearrange_array(arr): Rearranges the array such that every second element is greater than its previous and next elements. Args: arr: List of integers Returns: List of integers rearranged accordingly # Sort the array first arr.sort() n = len(arr) for i in range(1, n-1, 2): # Swap every odd placed element with the next one if it\'s greater arr[i], arr[i+1] = arr[i+1], arr[i] return arr def process_test_cases(test_cases): results = [] for arr in test_cases: result = rearrange_array(arr) results.append(result) return results # Reading input and processing def main(input_list): T = int(input_list[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_list[index]) arr = list(map(int, input_list[index + 1].split())) test_cases.append(arr) index += 2 results = process_test_cases(test_cases) return results"},{"question":"A software company is developing a new social network application called FriendNet. In FriendNet, users can send friend requests to each other. Once a request is accepted, both users become friends. The company wants to implement a feature that can identify mutual friends of any two given users. A mutual friend is defined as a user who is friends with both users under consideration. You are tasked with writing a function to determine how many mutual friends two given users have. # Input - The first line contains an integer `n` (2 ≤ n ≤ 100,000) – the number of users in the social network. - The second line contains an integer `m` (1 ≤ m ≤ 1,000,000) – the number of friendship relations. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), describing a friendship between users `u` and `v`. - The following line contains two integers `x` and `y` (1 ≤ x, y ≤ n, x ≠ y), representing the two users for which you need to find the number of mutual friends. # Output - Print a single integer — the number of mutual friends of users `x` and `y`. # Example Input ``` 5 4 1 2 1 3 2 3 4 5 1 2 ``` Output ``` 1 ``` # Note In the example above, user 1 has friends 2 and 3, and user 2 has friends 1 and 3. The only mutual friend between user 1 and user 2 is user 3, so the output is 1. This question requires you to handle large input sizes efficiently and think about optimizing the friend lookup process.","solution":"def find_mutual_friends(n, m, friendships, x, y): Determines the number of mutual friends between users x and y. Args: n (int): Number of users in the social network. m (int): Number of friendship relations. friendships (list of tuples): List of friendship pairs (u, v). x (int): User x to check mutual friends. y (int): User y to check mutual friends. Returns: int: Number of mutual friends between users x and y. # Create adjacency list for storing friendships friends_dict = {i: set() for i in range(1, n+1)} for u, v in friendships: friends_dict[u].add(v) friends_dict[v].add(u) # Find mutual friends mutual_friends = friends_dict[x] & friends_dict[y] return len(mutual_friends) # Example call to the function (as described in the problem prompt) if __name__ == \\"__main__\\": n = 5 m = 4 friendships = [(1, 2), (1, 3), (2, 3), (4, 5)] x, y = 1, 2 print(find_mutual_friends(n, m, friendships, x, y)) # Output: 1"},{"question":"A Roman numeral is a way of representing numbers using letters from the Latin alphabet. The digits used are I (1), V (5), X (10), L (50), C (100), D (500), and M (1000). The numbers are usually written from largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. The number nine is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. You are given a Roman numeral; convert it to an integer. Input The only line of input contains a string s (1 ≤ |s| ≤ 15) representing a Roman numeral. Output Output the integer representation of the provided Roman numeral. Examples Input III Output 3 Input IX Output 9 Input LVIII Output 58","solution":"def roman_to_integer(s): Convert a Roman numeral to an integer. :param s: A string representing a Roman numeral. :return: An integer representing the Roman numeral. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int[char] if current_value >= prev_value: total += current_value else: total -= current_value prev_value = current_value return total"},{"question":"Polycarp has to distribute n candies among k children. He wants the distribution to be as fair as possible. Therefore, he aims to minimize the difference between the number of candies received by any two children. Help Polycarp to determine how many candies each child will receive in order to minimize the maximum difference between the candies given to any two children. -----Input----- The first line contains two integers n and k (1 le k le n le 10^9) — the number of candies and the number of children. -----Output----- Output k integers, where the i^{th} integer represents the number of candies the i^{th} child will receive. The output should ensure that the difference between the maximum and minimum number of candies any two children receive is as small as possible. -----Examples----- Input 7 3 10 2 15 6 Output 2 2 3 5 5 2 2 2 3 3 3 -----Notes----- The answer for the first example is \\"2 2 3\\". The child who gets the most candies receives 3, whereas those who get the least receive 2. The difference is 1, and this is the minimal possible value for the difference. In the second example, two children receive 5 candies each. There\'s no difference as candies are evenly divided among them. In the third example, \\"2 2 2 3 3 3\\", the candies are distributed as evenly as possible given the constraint k = 6 children, leading to a minimal difference of 1 between the children who receive candies.","solution":"def distribute_candies(n, k): Distributes n candies among k children such that the difference between the number of candies received by any two children is minimized. Parameters: n (int): number of candies k (int): number of children Returns: list: number of candies each child will receive # Number of candies each child receives initially base_candies = n // k # Number of extra candies to distribute extra_candies = n % k # Create a list with k elements where the first \'extra_candies\' elements receive one extra candy distribution = [base_candies + 1] * extra_candies + [base_candies] * (k - extra_candies) return distribution"},{"question":"You are given a string `s` consisting of lowercase alphabet characters. You can perform the following operations any number of times: 1. Remove any single character from `s`. 2. Swap every pair of adjacent characters in `s`. Your goal is to determine if it is possible to transform the string `s` into a palindrome by performing the above operations. A palindrome is a string that reads the same backward as forward. Constraints: * 1 ≤ |s| ≤ 10^5 Input: The input consists of a single string `s`. Output: Output \\"YES\\" if it\'s possible to transform `s` into a palindrome. Otherwise, output \\"NO\\". Examples: Input: `aabbcc` Output: `YES` Input: `abc` Output: `NO` Input: `abbac` Output: `YES` Explanation: - For the first example, you can remove all characters since a string with even frequent characters for each alphabet can be rearranged into a palindrome. - For the second example, it is impossible to transform `s` into a palindrome since no rearranging or character removals can fulfill the requirement. - For the third example, by removing a single occurrence of \'c\', we can transform `abbac` into `abba`, which is a palindrome.","solution":"def can_form_palindrome(s): Determines if it is possible to transform the string `s` into a palindrome. Parameters: s (str): The input string consisting of lowercase alphabet characters. Returns: str: \\"YES\\" if it\'s possible to transform the string `s` into a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if at most one character has an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given a balanced binary search tree (BST) and an integer k. Your task is to determine whether there exist two different nodes in the BST whose values sum up to k. Consider the following definition for a binary search tree node: ```python class Node: def __init__(self, data): self.data = data self.left = None self.right = None ``` Input The input consists of multiple lines: - The first line contains an integer n (the number of nodes in the BST). - The next n lines each contain a single integer representing the node values in the order they should be inserted into the BST. - The last line contains the integer k. It is guaranteed that the input represents a balanced BST. Output Print \\"Yes\\" if there exist two different nodes in the BST whose values sum up to k, otherwise print \\"No\\". Constraints 2 leq n leq 10^4 1 leq k leq 10^9 1 leq text{value of each node} leq 10^9 Example Input 7 4 2 6 1 3 5 7 9 Output Yes Explanation In the given BST, the pair (2, 7) sums to 9, so \\"Yes\\" is printed.","solution":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def insert(root, data): if root is None: return Node(data) if data < root.data: root.left = insert(root.left, data) else: root.right = insert(root.right, data) return root def find_pair_with_sum(root, k, nodes_set): if root is None: return False if find_pair_with_sum(root.left, k, nodes_set): return True if (k - root.data) in nodes_set: return True nodes_set.add(root.data) return find_pair_with_sum(root.right, k, nodes_set) def exists_pair_with_sum(root, k): nodes_set = set() return find_pair_with_sum(root, k, nodes_set) def build_bst_from_list(values): if not values: return None root = None for value in values: root = insert(root, value) return root"},{"question":"You are given an array of integers, and you need to determine whether there exists a contiguous subarray that sums up to a given target value. If such a subarray exists, return the starting and ending indices of this subarray. If there are multiple subarrays that meet the criteria, return the one with the smallest starting index. If no such subarray exists, return -1. -----Input----- The input consists of two lines. The first line contains an integer n (1 leq n leq 100000), representing the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n where -10^5 leq a_i leq 10^5, representing the elements of the array. The third line contains an integer target (-10^9 leq target leq 10^9), representing the sum you need to find. -----Output----- Output the starting and ending indices of the subarray that sums up to the given target value. Indices are 1-based. If no such subarray exists, output -1. -----Examples----- Sample Input: 5 1 2 3 4 5 9 Sample Output: 2 4 Sample Input: 4 1 2 3 4 15 Sample Output: -1","solution":"def find_subarray_with_sum(nums, target): Finds the start and end indices of a contiguous subarray that sums up to the target value. Returns 1-based indices. Returns -1 if no such subarray exists. current_sum = 0 sum_indices = {0: 0} # Maps sums to their corresponding 1-based ending indices for i, num in enumerate(nums, 1): # Using 1-based index current_sum += num if (current_sum - target) in sum_indices: return sum_indices[current_sum - target] + 1, i if current_sum not in sum_indices: # Only store the earliest occurrence sum_indices[current_sum] = i return -1"},{"question":"Given an array of integers heights representing the heights of buildings, where heights[i] is the height of the ith building, return the maximum area of water that can be trapped between the buildings. The water is trapped between buildings in such a way that the width of the gap between two buildings is equal to the difference in their indices, and the height is limited by the shorter of the two buildings. You may assume all heights are non-negative integers. Example 1: Input: heights = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: There are several candidates for maximum area: - Between buildings (1, 8) with indices (0, 1), the area is 1 * 1 = 1 - Between buildings (8, 7) with indices (1, 8), the area is 7 * 7 = 49 - Other candidates yield smaller areas. The maximum area of water trapped is 49. Example 2: Input: heights = [4,3,2,1,4] Output: 16 Explanation: The optimal area is 4 * (4 - 0) = 16 between the first and last buildings. Example 3: Input: heights = [1,2,1] Output: 2 Explanation: The optimal area is 1 * (2 - 0) = 2 between the first and last buildings. Constraints: - n == heights.length - 2 <= n <= 10^5 - 0 <= heights[i] <= 10^4","solution":"def max_area(heights): Returns the maximum area of water that can be trapped between buildings. :param heights: List[int], list of building heights :return: int, maximum area of trapped water left, right = 0, len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left max_area = max(max_area, height * width) # Move the pointers. if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Alice has a collection of numbers and she loves making subsets out of them. She defines the beauty of a subset as the sum of the absolute differences between each pair of elements in the subset. Alice wants to determine the maximum beauty of any subset that consists of at least two numbers. You are given an array of integers. Your task is to compute the maximum possible beauty for subsets with at least two elements. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the size of the array. - The second line contains N space-separated integers representing the array. -----Output----- For each test case, print a single line containing one integer — the maximum possible beauty of subsets with at least two elements. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 10^5 - -10^9 ≤ array elements ≤ 10^9 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 3 1 4 7 4 -2 0 2 3 -----Example Output----- 12 10 -----Explanation----- Example case 1: The subsets with at least two elements are {1, 4}, {4, 7}, {1, 7}, and {1, 4, 7}. The maximum beauty is calculated with subset {1, 7}: |1 - 7| + |7 - 1| = 6 + 6 = 12. Example case 2: The subsets with at least two elements are {-2, 0}, {-2, 2}, {-2, 3}, {0, 2}, {0, 3}, {2, 3}, {-2, 0, 2}, {-2, 0, 3}, {-2, 2, 3}, {0, 2, 3}, and {-2, 0, 2, 3}. The maximum beauty is calculated with subset {-2, 3}: |-2 - 3| + |3 - (-2)| = 5 + 5 = 10.","solution":"def max_beauty(T, test_cases): Returns the maximum possible beauty for each test case. T: Number of test cases test_cases: List of tuples, each consisting of (N, array) results = [] for i in range(T): N, arr = test_cases[i] arr.sort() # Maximum beauty will be between the smallest and largest elements in the sorted array max_beauty = (arr[-1] - arr[0]) + (arr[-1] - arr[0]) results.append(max_beauty) return results"},{"question":"You are given an array of integers representing the heights of fences in a row. You have a bucket of paint and each stroke of the bucket can paint up to k heights simultaneously in a single vertical section. You want to know the minimum number of strokes needed to paint all the fences. ------ Input ------ The first line of the input contains two integers N and k – denoting the number of fences and the maximum number of heights that can be painted in a single stroke, respectively. The second line contains N integers denoting the heights of the fences. ------ Output ------ Output the minimum number of strokes needed to paint all the fences. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ k ≤ 10^{5} 1 ≤ heights[i] ≤ 10^{5} ----- Sample Input 1 ------ 7 3 1 2 3 4 5 6 7 ----- Sample Output 1 ------ 5 ----- explanation 1 ------ One possible sequence of strokes is: - Stroke 1: Fences 1 to 3 (heights 1, 2, 3) - Stroke 2: Fences 4 and 5 (heights 4 and 5) - Stroke 3: Fences 6 and 7 (heights 6 and 7)","solution":"def min_paint_strokes(n, k, heights): Calculate the minimum number of strokes required to paint all fences. :param n: Integer, number of fences :param k: Integer, maximum number of heights can be painted in one stroke :param heights: List of integers, heights of the fences :return: Integer, minimum number of strokes required max_height = max(heights) return (max_height + k - 1) // k # Ceiling of max_height / k"},{"question":"# Secret Santa Code: Every year, the employees of a company participate in a Secret Santa gift exchange. Each participant must draw a name to determine who they will give a gift to. The company wants to ensure that each year, no one draws their own name, and that the same person doesn\'t give a gift to another person for two consecutive years. You are given a list of names and a record of last year\'s gift exchanges. Your task is to determine a valid new Secret Santa drawing that satisfies these conditions. ----- Input ----- The first line contains an integer n (2 ≤ n ≤ 1000) — the number of participants. The following n lines each contain a string representing a participant’s name. The next n lines each contain a string of two participant names separated by a space — representing last year\'s Secret Santa pairings, where the first name gave a gift to the second name. ----- Output ----- Output n lines, each containing a string of two participant names separated by a space — representing this year’s Secret Santa pairings that meet the given conditions. ----- Example ----- Input 4 Alice Bob Charlie Dave Alice Bob Bob Charlie Charlie Dave Dave Alice Output Alice Charlie Bob Dave Charlie Alice Dave Bob ----- Note ----- In this example, the new pairings ensure that no participant gives a gift to themselves, and no one gives a gift to the same person they did last year. The exact pairs may vary as long as they satisfy the given conditions.","solution":"import random def secret_santa(n, participants, last_year_pairs): # Convert last year pairs into a dictionary for fast lookup last_year_dict = {pair[0]: pair[1] for pair in last_year_pairs} # Initial constraint where no one should get themselves current_year = {name: None for name in participants} # List to hold all possible receivers possible_receivers = participants[:] for giver in participants: # Filter out the giver and last year\'s receiver valid_receivers = [name for name in possible_receivers if name != giver and name != last_year_dict[giver]] if not valid_receivers: # Restart the assignment from scratch return secret_santa(n, participants, last_year_pairs) receiver = random.choice(valid_receivers) current_year[giver] = receiver possible_receivers.remove(receiver) return [(giver, receiver) for giver, receiver in current_year.items()] # Convert input format def create_secret_santa_pairings(n, participants, last_year_pairs): pair_list = [pair.split() for pair in last_year_pairs] return secret_santa(n, participants, pair_list)"},{"question":"Given a string S and an integer N, the task is to rotate the string to the right by N characters. If N is greater than the length of the string, perform the rotation modulo the length of the string. Example 1: Input: S = \\"abcdef\\", N = 2 Output: \\"efabcd\\" Explanation: Rotating the string \\"abcdef\\" by 2 positions to the right gives \\"efabcd\\". Example 2: Input: S = \\"hello\\", N = 7 Output: \\"lohel\\" Explanation: Rotating the string \\"hello\\" by 7 positions is the same as rotating by 2 positions (7 mod 5) to the right, giving \\"lohel\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateString() which takes the string S and the integer N as inputs and returns the rotated string. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 ≤ |S| ≤ 10^{5} 0 ≤ N ≤ 10^{9} S contains only lower case alphabets.","solution":"def rotateString(S, N): Rotates the string S to the right by N positions. length = len(S) if length == 0: return S N = N % length return S[-N:] + S[:-N]"},{"question":"In a bustling city, a new subway system has been established with various lines connecting different stations. To simplify the construction process and ensure that all stations are connected, the city planners designed the system such that each station connects to exactly two other stations, forming a circular loop with n stations. Due to some maintenance work, one of the subway stations had to be closed temporarily. As a result, the subway system has become disconnected. The city planners need to reopen the closed station and connect it back to exactly two stations to restore the loop, but they want to avoid any additional disconnections in the process. Given the initial subway system, identify the station that was closed, and reconnect it such that the circular loop is restored. Input The first line of input contains the integer n (3 ≤ n ≤ 10^5), which is the number of stations in the subway system. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing that there is a direct connection between station u and station v. Output Print a single line containing two integers, the stations that should be directly connected to the closed station to restore the circular loop. Examples Input 4 1 2 2 3 3 4 Output 4 1 Input 5 1 2 2 3 3 4 5 1 Output 4 5","solution":"def find_stations_to_reconnect(n, connections): from collections import defaultdict, deque adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) # Finding the two endpoints of the path which were previously connected end_points = [node for node in adj_list if len(adj_list[node]) == 1] return end_points"},{"question":"You are given an array of integers representing the heights of buildings along a street, where the i-th integer represents the height of the i-th building. The goal is to determine the maximum amount of water that can be trapped between these buildings after it rains. Input Format The first line contains a single integer T, denoting the number of test cases. For each test case, the first line contains a single integer N, the number of buildings. The second line contains N integers separated by spaces, representing the heights of the buildings. Output Format For each test case, output the maximum amount of water that can be trapped in one line. Constraints 1 <= T <= 10 1 <= N <= 1000 0 <= height of each building <= 10^6 Sample Input 2 6 0 1 0 2 1 0 1 3 2 1 2 1 3 3 0 2 Sample Output 6 2 Explanation In the first test case, the buildings are of heights [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]. The maximum amount of water that can be trapped is 6 units. For the buildings of heights [3, 0, 2], the maximum amount of water that can be trapped is 2 units.","solution":"def trap_water(heights): Calculate the maximum amount of water that can be trapped. Parameters: heights (list of int): List of integers representing the heights of the buildings. Returns: int: Maximum amount of water that can be trapped. if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: if heights[left] > left_max: left_max = heights[left] else: water_trapped += left_max - heights[left] left += 1 else: if heights[right] > right_max: right_max = heights[right] else: water_trapped += right_max - heights[right] right -= 1 return water_trapped def process_test_cases(test_cases): results = [] for case in test_cases: N, heights = case result = trap_water(heights) results.append(result) return results"},{"question":"# Task: String Reversal Write a function that takes a string as input and returns the string reversed, but with the order of words maintained. Each word in the string may contain non-alphanumeric characters which should be reversed along with the letters. Ensure that the reversed string retains the original spaces between words and the number of spaces before and after the input string as well. # Example Input: \\" hello, world! how are you? \\" Output: \\" ,olleh !dlrow woH era ?uoy \\" __Note:__ - The input may contain extra spaces before, after, or between the words. - Maintain the original spaces in the output string. # Constraints - The input string length will not exceed 1000 characters. - The input string will contain only printable ASCII characters. # Function Signature ```python def reverse_string_with_words_maintained(input_string: str) -> str: pass ```","solution":"def reverse_string_with_words_maintained(input_string: str) -> str: This function takes a string as input and returns the string with the letters in each word reversed, but maintaining the word order and spaces. def reverse_word(word): return word[::-1] words = input_string.split(\' \') # Split the input string by spaces to handle the original spaces. reversed_words = [reverse_word(word) for word in words] # Reverse each word. return \' \'.join(reversed_words) # Rejoin the words with spaces and return the result."},{"question":"Implement a function `is_palindrome(s)` that checks whether a given string `s` is a palindrome. A string is considered a palindrome if it reads the same forward and backward, ignoring case and non-alphanumeric characters. You must construct your function to handle these conditions appropriately. ```python def is_palindrome(s: str) -> bool: # Your code here # Example usage print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) # should return True print(is_palindrome(\\"race a car\\")) # should return False ```","solution":"def is_palindrome(s: str) -> bool: Checks whether the given string s is a palindrome. A string is considered a palindrome if it reads the same forward and backward, ignoring case and non-alphanumeric characters. Args: s (str): The string to check Returns: bool: True if s is a palindrome, False otherwise # Filter out non-alphanumeric characters and make the string lowercase filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function that computes the minimum number of platform(s) required at a railway station such that no train waits. You will be given the arrival and departure times of trains. Input format: - An integer `n` (1 ≤ n ≤ 1000) representing the number of trains. - The next `n` lines contain two integers each, representing the arrival and departure times of each train. The times are given in the 24-hour format `HHMM`. Output format: - Print a single integer representing the minimum number of platforms required. Example: Input: ``` 3 900 910 940 1200 950 1120 ``` Output: ``` 2 ``` Explanation: 1. Train 1: Arrives at 900 and departs at 910. 2. Train 2: Arrives at 940 and departs at 1200. 3. Train 3: Arrives at 950 and departs at 1120. Train 1 occupies a platform from 900 to 910. Train 2 arrives at 940, and while it occupies a platform, Train 3 arrives at 950 requiring a second platform as Train 2 is still present on the first platform. Therefore, at least 2 platforms are needed.","solution":"def min_platforms(n, train_times): Computes the minimum number of platforms required at a railway station such that no train waits. Parameters: n (int): Number of trains train_times (list of tuple): List of tuples where each tuple contains two integers representing the arrival and departure times in HHMM format. Returns: int: Minimum number of platforms required. # Extract arrival and departure times arrivals = sorted([times[0] for times in train_times]) departures = sorted([times[1] for times in train_times]) # Initialize pointers for arrival and departure arr_ptr, dep_ptr = 0, 0 platforms_needed, max_platforms = 0, 0 # Iterate while there are trains to process while arr_ptr < n: if arrivals[arr_ptr] < departures[dep_ptr]: platforms_needed += 1 arr_ptr += 1 if platforms_needed > max_platforms: max_platforms = platforms_needed else: platforms_needed -= 1 dep_ptr += 1 return max_platforms"},{"question":"#Detail A lexicographic order is an arrangement of the characters in a string, where the order is determined alphabetically. Given a string, the next lexicographic permutation is the next lexicographically greater permutation of its characters. If there is no such permutation, it rearranges the string to the lowest possible order (i.e., sorted in ascending order). For example, the next lexicographic permutation of \\"ABCD\\" is \\"ABDC\\". If the string is the highest possible permutation, you need to return the lowest possible permutation. #Task Given a string, write a function that returns the next lexicographic permutation. If the input string is already the highest possible permutation, return the lowest permutation. Examples ``` next_permutation(\\"ABCD\\") -> \\"ABDC\\" next_permutation(\\"DCBA\\") -> \\"ABCD\\" next_permutation(\\"BRAVO\\") -> \\"BROAV\\" next_permutation(\\"CAB\\") -> \\"CBA\\" ``` Constraints - The given string is not empty and consists only of uppercase letters. - The length of the string does not exceed 10.","solution":"def next_permutation(s): Returns the next lexicographical permutation of the string s. If s is the highest permutation, return the lowest permutation. s = list(s) n = len(s) i = j = n - 1 # Find the rightmost character which is smaller than its next character while i > 0 and s[i - 1] >= s[i]: i -= 1 # If there is no such character, s is sorted in descending order if i == 0: return \'\'.join(sorted(s)) # Find the smallest character on right side of (i-1)\'th character which is greater than s[i-1] while s[j] <= s[i - 1]: j -= 1 # Swap characters at i-1 and j s[i - 1], s[j] = s[j], s[i - 1] # Reverse the characters on the right side of i-1 s[i:] = s[i:][::-1] return \'\'.join(s)"},{"question":"A game development team is working on a puzzle game where the player needs to navigate a character through a grid maze to reach the exit. The maze is represented by a matrix of characters, where \'S\' represents the start position, \'E\' represents the exit, \' \' (space) represents an empty cell the character can move through, and \'#\' represents a wall the character cannot pass. The character can move up, down, left, or right to an adjacent empty cell but cannot move diagonally. The goal is to determine if there is a valid path from the start position to the exit. Write a function that takes a grid and returns `True` if there is a valid path from \'S\' to \'E\', and `False` otherwise. -----Input----- The input is given as a list of strings, where each string represents a row of the grid. -----Output----- The output should be a single boolean value – `True` if a path exists, `False` otherwise. -----Example----- Input [ \\"S\\", \\" # \\", \\" E\\" ] Output True -----Note----- In the example grid: ``` S # E ``` A valid path from \'S\' to \'E\' is: right, down, down, right, right. Therefore, the function should return `True`.","solution":"def is_valid_path(grid): rows, cols = len(grid), len(grid[0]) def find_start_end(): start = end = None for r in range(rows): for c in range(cols): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'E\': end = (r, c) return start, end def dfs(r, c): if not (0 <= r < rows and 0 <= c < cols) or grid[r][c] in (\'#\', \'V\'): return False if grid[r][c] == \'E\': return True grid[r] = grid[r][:c] + \'V\' + grid[r][c+1:] for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: if dfs(r + dr, c + dc): return True return False start, end = find_start_end() if not start or not end: return False return dfs(start[0], start[1])"},{"question":"Given an array of integers representing the rewards gained by different participants in a game, your task is to determine the best possible ranking sequence of these participants. In determining the rank, consider the following rules: 1. Higher rewards should receive a better rank (i.e., lower numerical value). 2. If two participants have the same reward amount, they should receive the same rank. 3. The next lower reward (if different from the previous) should be ranked as if the identical rewards above them are only counted once. For example, if the rewards of participants are: `100, 200, 100, 300, 200`, the accurate ranking based on the rewards will be: `3, 2, 3, 1, 2`. Here: - The highest reward `300` gets rank 1. - The next highest reward `200` is received by two participants, both getting rank 2. - The reward `100` is then ranked as 3 for both participants, because the two participants with rewards `200` take up the rank 2. Your task is to implement a function that computes the ranks of the participants based on their rewards. # Input: - The first line of the input contains an integer `T`, the number of test cases. - For each test case, the first line contains an integer `N`, the number of participants. - The second line contains `N` integers representing the rewards of the participants. # Output: - For each test case, print a single line containing the ranks of the participants in the order they appear in the input. # Constraints: - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 10^4 - 0 ≤ Rewards[i] ≤ 10^9 # Example: Sample Input: ``` 1 5 100 200 100 300 200 ``` Sample Output: ``` 3 2 3 1 2 ``` Explanation: - The highest reward (300) gets rank 1. - The next reward (200) is shared by two participants, both getting rank 2. - The next reward (100) is shared by two participants, both getting rank 3.","solution":"def compute_ranks(T, test_cases): Computes the ranks for multiple test cases based on the rewards. Args: T: int : number of test cases test_cases: list : list of test cases, each being a tuple (N, rewards) Returns: list : list of ranks for each test case results = [] for N, rewards in test_cases: # Get a sorted list of unique rewards sorted_rewards = sorted(set(rewards), reverse=True) # Create a dictionary mapping reward to its rank reward_to_rank = {reward: rank + 1 for rank, reward in enumerate(sorted_rewards)} # Generate the ranks according to the original order of rewards ranks = [reward_to_rank[reward] for reward in rewards] results.append(\\" \\".join(map(str, ranks))) return results"},{"question":"A large company has a number of branches, numbered from 1 to n located across the city. Each branch has a certain number of employees. The employees in each branch can be represented as a list of integers where each element corresponds to the number of employees in that branch. You have been asked to perform the following tasks: 1. Find the minimum number of employees among all branches. 2. Find the maximum number of employees among all branches. 3. Find the average number of employees across all branches rounded down to the nearest integer. Write a function that takes in a list of integers representing the number of employees in each branch and outputs these three values. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of branches. The second line contains n integers e_1, e_2, ... e_n (1 ≤ e_i ≤ 10000) — the number of employees in the ith branch. Output Print three integers: the minimum number of employees, the maximum number of employees, and the average number of employees rounded down to the nearest integer. Examples Input 5 10 20 30 40 50 Output 10 50 30 Input 3 15 10 20 Output 10 20 15 Input 4 7 7 7 7 Output 7 7 7","solution":"def analyze_branches(n, employees): Returns the minimum, maximum, and average number of employees across all branches. Parameters: n (int): The number of branches. employees (list): A list of integers where each integer represents the number of employees in a branch. Returns: tuple: A tuple containing three integers - minimum number of employees, maximum number of employees, and average number of employees rounded down to the nearest integer. min_employees = min(employees) max_employees = max(employees) avg_employees = sum(employees) // n return min_employees, max_employees, avg_employees"},{"question":"In a distant planet called Zog, there is a unique type of social network, where each user has exactly one friend. The platform administrators noticed something interesting: user friendships form cycles of various lengths. A cycle is a group of users where each user is friends with exactly one other user in the group, forming a closed loop. For example, if user A is friends with user B, user B is friends with user C, and user C is friends with user A, they form a cycle. Given the user friendship data, the administrators want to identify the length of the largest friendship cycle. Write a program to help them find the length of the largest friendship cycle in the network. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of users on the network. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai is the friend of user i. It is guaranteed that each user has exactly one friend. Output Print a single integer representing the length of the largest friendship cycle in the network. Examples Input 5 2 3 4 5 1 Output 5 Input 5 2 1 4 3 5 Output 2 Note In the first sample case, all the users form a single large cycle of length 5: 1 → 2 → 3 → 4 → 5 → 1. In the second sample case, there are three cycles: {1, 2}, {3, 4}, and {5}, with the largest having a length of 2.","solution":"def largest_cycle_length(n, friends): visited = [False] * n max_cycle_length = 0 def find_cycle_length(start): current = start length = 0 while not visited[current]: visited[current] = True current = friends[current] - 1 # convert to 0-based index length += 1 return length for i in range(n): if not visited[i]: cycle_length = find_cycle_length(i) max_cycle_length = max(max_cycle_length, cycle_length) return max_cycle_length # Example Usage # n = 5 # friends = [2, 3, 4, 5, 1] # print(largest_cycle_length(n, friends)) # Output: 5"},{"question":"Reverse a Subarray to Make the Whole Array Sorted Given an array of N distinct integers, your task is to determine if it is possible to sort the entire array in non-decreasing order by reversing a single subarray (contiguous subsequence). If it is possible, print \\"YES\\" and the indices of the two ends of the subarray. If it is not possible, print \\"NO\\". Input The first line of input is an integer T(T ≤ 10), the number of test cases. Each test case contains 2 lines. The first line of the test case contains an integer (1 ≤ N ≤ 100000), i.e. the number of elements in the array. The second line contains N distinct integers, which can be both negative and positive, no larger than ±2000000000, representing the array. Output For each test case, print \\"YES\\" followed by the indices (1-based) of the start and end of the subarray if it is possible to sort the array by reversing a single subarray. Print \\"NO\\" if it is not possible. SAMPLE INPUT 3 4 1 3 2 4 5 5 4 3 2 1 6 1 2 3 6 5 4 SAMPLE OUTPUT YES 2 3 YES 1 5 YES 4 6 Explanation For the 1st test case, reversing the subarray from index 2 to 3 results in the sorted array [1, 2, 3, 4]. For the 2nd test case, reversing the whole array results in the sorted array [1, 2, 3, 4, 5]. For the 3rd test case, reversing the subarray from index 4 to 6 results in the sorted array [1, 2, 3, 4, 5, 6].","solution":"def can_sort_by_reversing_subarray(arr): n = len(arr) sorted_arr = sorted(arr) # Find the first and last position where arr and sorted_arr differ start = end = -1 for i in range(n): if arr[i] != sorted_arr[i]: if start == -1: start = i end = i # If start and end are not updated, the array is already sorted if start == -1: return \\"YES 1 1\\" # Reverse the subarray from start to end and check if it sorts the array subsequence_reversed = arr[:start] + arr[start:end+1][::-1] + arr[end+1:] if subsequence_reversed == sorted_arr: return f\\"YES {start + 1} {end + 1}\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(can_sort_by_reversing_subarray(arr)) return results"},{"question":"You are playing a game where you need to break a sequence of numbers down to their single-digit sums. The rule of the game is to repeatedly sum the digits of a given integer until the result is a single-digit number. Write a function `single_digit_sum(n)` that takes an integer `n` as input and returns the single-digit sum. The input number can be positive or negative. Constraints and Example: - The input integer `n` will be between -10^9 and 10^9. Input: 38 -256 1234 0 Output: 2 4 1 0 Explanation: For the first input: 38 -> 3 + 8 = 11 -> 1 + 1 = 2. For the second input: -256 -> 2 + 5 + 6 = 13 -> 1 + 3 = 4. (The sign is ignored while calculating the sum) For the third input: 1234 -> 1 + 2 + 3 + 4 = 10 -> 1 + 0 = 1. For the fourth input: 0 -> 0.","solution":"def single_digit_sum(n): Returns the single-digit sum of the digits of n. The sign of the number is ignored for calculating the sum. Parameters: n (int): The input number. Returns: int: The single-digit sum. # Convert to absolute value to ignore the sign. n = abs(n) while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Write a function that takes a string representation of a non-negative integer and returns the string with commas added as thousands separators. For example, if the input is `\\"1234567\\"`, the output should be `\\"1,234,567\\"`. The input string is guaranteed to represent a valid non-negative integer without additional leading zeros. Your function will be tested with pre-made examples as well as random ones.","solution":"def add_thousands_separators(num_str): Returns the string with commas added as thousands separators. Parameters: num_str (str): A string representation of a non-negative integer. Returns: str: The string with commas added as thousands separators. return \'{:,}\'.format(int(num_str))"},{"question":"Given an integer array nums where all elements appear twice except for one, find that single one without using extra memory. Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Note: - Your solution should have a linear runtime complexity. - Try to implement it without using extra memory (constant space).","solution":"def single_number(nums): Finds the single number in an array where every other number appears twice. Uses the XOR bitwise operator to achieve this in linear runtime and constant space. result = 0 for num in nums: result ^= num return result"},{"question":"Create a function wave_transform(s) that takes a string s and returns a list of strings, where for each successive element in the list, one more character from the input string is transformed to uppercase, starting from the beginning. Example: ``` wave_transform(\\"hello\\") should return: [\'Hello\', \'hEllo\', \'heLlo\', \'helLo\', \'hellO\'] wave_transform(\\"world\\") should return: [\'World\', \'wOrld\', \'woRld\', \'worLd\', \'worlD\'] ``` The function should handle cases where the input string has spaces or special characters by ignoring them, but still converting the correct letter in sequence. For example: ``` wave_transform(\\"hi there!\\") should return: [\'Hi there!\', \'hI there!\', \'hi There!\', \'hi tHere!\', \'hi thEre!\', \'hi theRe!\', \'hi therE!\', \'hi there!\'] wave_transform(\\"1a2b!\\") should return: [\'1A2b!\', \'1a2B!\'] ``` Ensure each string in the list is of the same length as the input string.","solution":"def wave_transform(s): Given a string s, returns a list of strings where for each successive element, one more character from the input string is transformed to uppercase from left to right. result = [] # Initialize the result list to store each transformation. for i, char in enumerate(s): # Loop over each character in the input string. if char.isalpha(): # Check if the character is a letter. transformed = s[:i] + char.upper() + s[i+1:] # Transform the current character to uppercase. result.append(transformed) # Append the transformed string to the result list. return result # Return the complete list of transformed strings."},{"question":"You are given a string composed of lowercase English letters and an integer k. You need to determine whether you can change at most k characters in the string so that there can be a palindrome of length greater than or equal to p in any contiguous substring of the string. You have to answer q independent queries. -----Input----- The first line of the input contains one integer q (1 le q le 10^4) — the number of queries. Then q queries follow. Each query contains three lines: - The first line contains the string s (1 le |s| le 10^5) where |s| is the length of the string. - The second line contains two integers k and p (0 le k le |s|, 1 le p le |s|). -----Output----- For the i-th query print the answer on it — YES (without quotes) if it is possible to change at most k characters in the string such that a palindrome of length p can be found in any contiguous substring. Otherwise, print NO. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as a positive answer). -----Example----- Input 3 abcde 2 3 abacaba 1 5 zzzzzz 0 4 Output YES YES YES","solution":"def can_form_palindrome(s, k, p): Determines if we can turn at most k characters in string s to make a palindrome of length p in every continguous substring. from collections import Counter def is_palindrome_possible(sub_s, k): count = Counter(sub_s) odd_count = sum(v % 2 for v in count.values()) return odd_count // 2 <= k n = len(s) for i in range(n - p + 1): if is_palindrome_possible(s[i:i + p], k): return \\"YES\\" return \\"NO\\" def process_queries(queries): result = [] for s, k, p in queries: result.append(can_form_palindrome(s, k, p)) return result"},{"question":"You are given n segments on a number line, each segment represented by its endpoints (L_i, R_i). A segment (L_i, R_i) technically covers all the points starting from L_i to R_i, inclusive. Your task is to determine the maximum number of segments that can be selected in such a way that no two segments overlap. Two segments (L_i, R_i) and (L_j, R_j) are said to overlap if they share at least one common point. -----Input----- The first line contains a single integer t (1 le t le 50) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000) — the number of segments. Each of the next n lines of each test case contains two integers L_i and R_i (1 le L_i le R_i le 1000) — the left and right endpoints of the i-th segment. It\'s guaranteed that sum of n over all testcases does not exceed 2000. -----Output----- For each test case, print a single integer — the maximum number of segments that can be selected without any overlaps. -----Examples----- Input 3 3 1 3 2 5 4 6 4 7 9 1 5 3 4 2 8 2 5 5 1 2 Output 2 2 2 -----Note----- In the first example, you can select the segments (1, 3) and (4, 6) which are non-overlapping. In the second example, you can select the segments (3, 4) and (7, 9) which are non-overlapping. In the third example, you can select both segments (1, 2) and (5, 5) as they do not overlap.","solution":"def max_non_overlapping_segments(segments): Given a list of segments, this function returns the maximum number of non-overlapping segments. # Sort segments by their end points (R_i) segments.sort(key=lambda x: x[1]) count = 0 last_end = -1 for start, end in segments: if start > last_end: count += 1 last_end = end return count def process_test_cases(test_cases): results = [] for segments in test_cases: results.append(max_non_overlapping_segments(segments)) return results"},{"question":"You are given a connected undirected graph with n nodes and m edges. Your task is to check if the graph can be partitioned into exactly two non-empty subsets such that there are no edges between the nodes of the same subset, i.e., you need to check if the graph is bipartite. A graph is bipartite if you can color its nodes using two colors such that no two adjacent nodes have the same color. Input: - The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of nodes and the number of edges in the graph. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — an edge between nodes u and v. Output: - If the graph can be partitioned into two subsets satisfying the above conditions, output \\"YES\\". - Otherwise, output \\"NO\\". Examples: Input: 4 4 1 2 1 3 2 4 3 4 Output: YES Input: 3 3 1 2 2 3 1 3 Output: NO Note: In the first example, you can partition the nodes into {1, 4} and {2, 3}. In the second example, it is impossible to partition the graph in such a way.","solution":"def is_bipartite(n, m, edges): from collections import deque adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring the start node with color 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, n + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"Given is an array A of N integers. For a pair (L, R) (1 le L le R le N), let Y_{L, R} be the product of values A_L, A_{L+1}, ldots, A_R. Find the maximum value of Y_{L, R} modulo 10^9+7. -----Constraints----- - 1 le N le 10^4 - 1 le A_i le 10^3 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ldots A_N -----Output----- Print the maximum value of Y_{L,R} modulo 10^9+7. -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 24 The subarray (1,4) has the product 1 * 2 * 3 * 4 = 24.","solution":"MOD = 10**9 + 7 def max_product_modulo(arr): n = len(arr) max_product = 0 for i in range(n): current_product = 1 for j in range(i, n): current_product = (current_product * arr[j]) % MOD max_product = max(max_product, current_product) return max_product if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(max_product_modulo(A))"},{"question":"You are given an array of n integers, which are either -1, 0, or 1. Your task is to determine if it is possible to rearrange the array such that the sum of any two adjacent elements is not less than -1. ------Input----- The first line contains a single integer n (2 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers x_i (-1 ≤ x_i ≤ 1) — the elements of the array. ------Output----- Output \\"YES\\" (without quotes) if it is possible to rearrange the array to meet the condition, and \\"NO\\" (without quotes) otherwise. ------Examples----- Input 5 1 -1 0 1 -1 Output YES Input 3 -1 -1 -1 Output NO ------Note------ In the first example, one possible way to rearrange the array is [-1, 0, 1, -1, 1], which meets the condition as (-1 + 0) >= -1, (0 + 1) >= -1, (1 + (-1)) >= -1, and ((-1) + 1) >= -1. In the second example, no rearrangement can avoid having at least one pair of (-1, -1) with a sum less than -1.","solution":"def can_rearrange(arr): Determines if it is possible to rearrange the array such that the sum of any two adjacent elements is not less than -1. count_neg1 = arr.count(-1) count_zero = arr.count(0) count_pos1 = arr.count(1) # If we have more than one -1 and no 1s, we cannot satisfy the condition if count_neg1 > 1 and count_pos1 == 0: return \\"NO\\" return \\"YES\\""},{"question":"In the kingdom of Byteland, there is a legendary flower known as the Radiant Petal. This flower blooms only once a millennium, and when it does, it is known to release a sequence of light pulses into the sky. Scientists in Byteland have discovered that each light pulse corresponds to a distinct integer, and they obtain a series of these integers every hour during the flower\'s blooming period. You are tasked with studying the behavior of these light pulses. Given an hour\'s sequence of integers, you need to determine the length of the longest contiguous subsequence where the difference between the maximum and minimum values in that subsequence does not exceed a given threshold k. Input The first line contains two integers n (1 ≤ n ≤ 200,000) and k (0 ≤ k ≤ 1,000,000,000) — the length of the sequence and the maximum allowed difference. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1,000,000,000), representing the sequence of light pulses observed in an hour. Output Print a single integer — the length of the longest contiguous subsequence where the difference between the maximum and minimum values does not exceed k. Examples Input 8 3 1 3 6 4 2 3 5 8 Output 4 Input 5 0 2 2 2 2 2 Output 5 Note In the first example, the longest contiguous subsequence meeting the condition is [3, 6, 4, 2], as the difference between the maximum (6) and minimum (2) is 4, which does not exceed 3. In the second example, the entire sequence consists of identical integers, so any subsequence will meet the condition with k = 0. Therefore, the maximum length is 5.","solution":"def longest_subsequence_within_threshold(n, k, sequence): Returns the length of the longest contiguous subsequence where the difference between the maximum and minimum values does not exceed k. from collections import deque max_deque = deque() # Stores indices of elements in descending order min_deque = deque() # Stores indices of elements in ascending order max_length = 0 left = 0 for right in range(n): # Maintain the max_deque while max_deque and sequence[max_deque[-1]] <= sequence[right]: max_deque.pop() max_deque.append(right) # Maintain the min_deque while min_deque and sequence[min_deque[-1]] >= sequence[right]: min_deque.pop() min_deque.append(right) # Check the current subsequence condition while sequence[max_deque[0]] - sequence[min_deque[0]] > k: left += 1 if left > max_deque[0]: max_deque.popleft() if left > min_deque[0]: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Monica loves studying palindromes. A palindrome is a string that reads the same forwards and backwards, like \\"racecar\\". She has a string `S` and she wants to find out how many non-empty substrings of `S` are palindromes. Can you help her with this task? Write a function that, given an input string `S`, returns the count of its non-empty palindromic substrings. Input Format - The first line contains a single integer, `T`, denoting the number of test cases. - Each of the following `T` lines contains a single string `S`. Constraints - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 Output Format For each test case, print a single integer denoting the number of non-empty palindromic substrings in `S`. Sample Input 3 abc aaa ababa Sample Output 3 6 9 Explanation For the first test case, there are 3 palindromic substrings: \\"a\\", \\"b\\", and \\"c\\". For the second test case, there are 6 palindromic substrings: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\". For the third test case, there are 9 palindromic substrings: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\".","solution":"def count_palindromic_substrings(s): Returns the count of non-empty palindromic substrings in a given string s. n = len(s) count = 0 # Expanding around center approach for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count def count_palindromes_in_test_cases(test_cases): Given a list of strings (test cases), returns a list of integers representing the count of palindromic substrings for each string. results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"Yet Another Gadget Inc. is about to launch a new range of smartwatches. The watches have customizable straps that can be ordered in different colors. Each strap order consists of exactly one of each available color present in the catalog. However, due to some supply constraints, the colors might not be evenly distributed. The company wants to fulfill the maximum number of full strap orders they can, given the current inventory. Your task is to determine how many complete strap orders can be fulfilled with the available colors. ----Input---- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of different colors available. The second line contains a sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ 1000), where ci denotes the number of straps of the i-th color available in the inventory. ----Output---- Print a single integer — the maximum number of complete strap orders that can be fulfilled. ----Examples---- Input 3 5 9 7 Output 5 Input 4 2 8 3 4 Output 2 ----Note---- In the first example, there are three colors with respective quantities of 5, 9, and 7. Therefore, the maximum number of complete strap orders is determined by the color with the minimum quantity, which is 5. In the second example, the minimum quantity is 2, which means only 2 full strap orders can be fulfilled.","solution":"def max_strap_orders(n, colors): Returns the maximum number of full strap orders that can be fulfilled with the given inventory of colors. :param n: Number of different available colors :param colors: List of integers representing the quantity of each color strap in the inventory :return: Maximum number of complete strap orders return min(colors)"},{"question":"You are organizing a treasure hunt game in a park. Each treasure chest in the park contains a positive integer amount of gold coins. To win, participants need to collect an exact number of coins by opening a sequence of treasure chests. However, there\'s a twist: some treasure chests are guarded by riddles. If a participant solves a riddle correctly, they get the coins; otherwise, they don\'t get anything from that chest. Given the number of treasure chests, the integer amount of gold coins in each chest, and the exact number of gold coins required to win, determine if there exists a sequence of chests that a participant can open to collect the exact number of required coins. -----Input----- The first line contains an integer n (1 le n le 100) — the number of treasure chests. The second line contains n integers c_1, c_2, ..., c_n (1 le c_i le 1000) — where c_i is the number of gold coins in the i-th treasure chest. The third line contains a single integer t (1 le t le 10000) — the exact number of gold coins required to win the game. -----Output----- Output {YES} if it\'s possible to collect exactly t gold coins by opening a sequence of treasure chests, and {NO} otherwise. -----Examples----- Input 5 100 200 300 400 500 700 Output YES Input 4 100 150 200 250 500 Output YES Input 3 500 500 500 400 Output NO -----Note----- In the first sample, one possible way to collect exactly 700 gold coins is by opening the treasure chests with 200 and 500 coins. In the second sample, one possible way to collect exactly 500 gold coins is by opening the treasure chests with 200 and 300 coins. In the third sample, it\'s impossible to collect exactly 400 gold coins since the smallest coin collection starts at 500.","solution":"def can_collect_exact_coins(n, coins, t): Determines if it is possible to collect exactly t coins from n treasure chests using their given coin values in list coins. dp = [False] * (t + 1) dp[0] = True for coin in coins: for j in range(t, coin - 1, -1): if dp[j - coin]: dp[j] = True return \\"YES\\" if dp[t] else \\"NO\\""},{"question":"You are given a rectangular piece of wallpaper represented as a grid of characters. The wallpaper may contain any of the following characters: * \'.\' which indicates an empty space. * \'#\' which indicates a part of the pattern. Your task is to fold the wallpaper in such a way that you end up with the smallest possible rectangle that can contain all the \'#\' characters. The folds can only be made along rows or columns (you cannot fold diagonally). If there are multiple solutions, choose the one with the smallest starting point. If there is still a tie, choose the ending point with the smallest coordinates. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line containing two integers, n and m (2 le n, m le 25), where n is the number of rows and m is the number of columns of the grid specifying the wallpaper. Each of the next n lines contains exactly m characters, which can be either \'.\' or \'#\'. The grid is guaranteed to contain at least one \'#\'. -----Output----- Output a single line with four integers indicating the coordinates of the top-left and bottom-right corners of the smallest rectangle containing all the \'#\' characters. Output the coordinates as: r1 c1 r2 c2 where (r1,c1) is the top-left corner and (r2,c2) is the bottom-right corner. The top left character of the grid is (1,1) and the bottom right is (n,m). -----Examples----- Sample Input 1: 5 8 ........ ...... ...... ....#... ........ Sample Output 1: 2 4 4 5 Sample Input 2: 5 5 # # ... # # Sample Output 2: 1 1 5 5","solution":"def find_smallest_rectangle(n, m, grid): Given the dimensions (n, m) and the grid, find the smallest rectangle that can contain all the \'#\' characters. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): The grid itself represented as a list of strings. Returns: tuple: (r1, c1, r2, c2) coordinates of the top-left and bottom-right corners. top, left, bottom, right = n, m, 0, 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\': top = min(top, i) left = min(left, j) bottom = max(bottom, i) right = max(right, j) return top + 1, left + 1, bottom + 1, right + 1"},{"question":"There is a chandelier made up of rows of light bulbs. Each row has a unique number of light bulbs, with the ith row (1-indexed) containing i light bulbs. The choreographer wants to turn on some light bulbs such that for any two turned on light bulbs in the same row, there is exactly one turned off light bulb between them, and for any two turned on light bulbs in the same column, there is exactly one turned off light bulb between them. Write a program to determine the maximum number of light bulbs that can be turned on while satisfying these constraints. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 10^5 -----Input----- The input is given from Standard Input in the following format: N N denotes the total number of rows in the chandelier. -----Output----- Print the maximum number of light bulbs that can be turned on. -----Sample Input----- 3 -----Sample Output----- 6 In this example, the maximum light bulbs that can be turned on are: Row 1: Turned on bulbs - 1 Row 2: Turned on bulbs - 1 3 Row 3: Turned on bulbs - 1 3 5 Total turned on light bulbs = 6","solution":"def max_light_bulbs_on(N): Calculate the maximum number of light bulbs that can be turned on in a chandelier with N rows following the given constraints. Args: N (int): The number of rows in the chandelier. Returns: int: The maximum number of light bulbs that can be turned on. return N * (N + 1) // 2"},{"question":"The Deep Sea BioResearch Institute has launched a new project to study unique microorganisms found in the ocean\'s depths. They need a software tool to analyze a specific data construct related to these microorganisms. They track the microorganisms\' movements in the form of sequences. Each sequence is represented by non-negative integers, and a unique microorganism is identified by the unique sequences it produces, i.e., sequences with no repeating elements. Your task is to develop a program that takes multiple sequences and determines how many of them are unique microorganism sequences (i.e., contain no repeated elements). Input: - The first line contains an integer t, the number of sequences. - Each of the next t lines contains one sequence of non-negative integers, separated by spaces. Output: - For each sequence, output \\"YES\\" if the sequence identifies a unique microorganism (contains no repeated elements), otherwise output \\"NO\\". Constraints: - 1 ≤ t ≤ 100 - Each sequence will have at most 100 integers. Example Input 5 0 1 2 3 4 1 2 2 3 4 5 6 7 8 9 3 3 3 3 3 8 7 6 5 Example Output YES NO YES NO YES Explanation: Sequences 1, 3, and 5 do not have any repeating elements, thus representing unique microorganisms. Sequences 2 and 4 have repeating elements and hence do not represent unique microorganisms.","solution":"def is_unique_sequence(sequence): Determines if the sequence represents a unique microorganism by containing no repeated elements. Args: sequence (list): A list of non-negative integers representing the sequence. Returns: str: \\"YES\\" if the sequence has no repeated elements, otherwise \\"NO\\". if len(sequence) == len(set(sequence)): return \\"YES\\" else: return \\"NO\\" def analyze_sequences(t, sequences): Analyzes multiple sequences to determine if they represent unique microorganisms. Args: t (int): Number of sequences. sequences (list): A list of sequences, each sequence is a list of non-negative integers. Returns: list: A list of strings, each \\"YES\\" or \\"NO\\" corresponding to whether the sequence is unique. results = [] for sequence in sequences: results.append(is_unique_sequence(sequence)) return results"},{"question":"In a faraway kingdom, the wise king has devised a game to test the logical prowess of his subjects. The game requires the participants to manipulate a sequence of integers in a way that extracts the maximum possible value from specific operations. The operations all involve slicing, summing, and inverting the sequence based on given parameters. The rules of the game are as follows: - The participants are given a sequence of integers. - They have to perform a specified number of operations on the sequence. - Each operation consists of selecting a subarray, inverting the order of elements in this subarray, and then adding up a predefined prefix and suffix sum. The game is designed to ensure that the sequences and operations are of moderate difficulty and anyone with basic programming skills should be able to solve the problem. You are given the task to write a program that will automate the solution to this game. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the length of the sequence. - The second line contains `n` space-separated integers representing the sequence. - The third line contains an integer `q` (1 ≤ q ≤ 50), the number of operations. - The next `q` lines each contain three integers `L`, `R`, `K` (1 ≤ L ≤ R ≤ n) representing the left and right indices (1-indexed) of the subarray to be inverted, and `K` the number of elements to be summed from both the start and end of the sequence after the inversion. Output: - For each operation, output the result of the sum after performing the defined operations. Example: Input: ``` 6 1 2 3 4 5 6 2 1 4 2 2 5 3 ``` Output: ``` 18 21 ``` Explanation: - For the first operation, inverting the subarray from index 1 to 4 results in [4, 3, 2, 1, 5, 6]. Summing the first 2 and last 2 numbers results in 4 + 3 + 5 + 6 = 18. - For the second operation, inverting the subarray from index 2 to 5 results in [1, 5, 4, 3, 2, 6]. Summing the first 3 and last 3 numbers results in 1 + 5 + 4 + 3 + 2 + 6 = 21.","solution":"def perform_game_operations(n, sequence, q, operations): results = [] for operation in operations: L, R, K = operation # Adjust from 1-indexed to 0-indexed L, R = L - 1, R - 1 # Invert the subarray sequence = sequence[:L] + sequence[L:R+1][::-1] + sequence[R+1:] # Calculate the sum of the first K and the last K elements prefix_sum = sum(sequence[:K]) suffix_sum = sum(sequence[-K:]) total_sum = prefix_sum + suffix_sum results.append(total_sum) return results"},{"question":"You are given a list of integers. Your task is to find the longest sublist which contains only unique (non-repeated) integers and its length. If there are multiple sublists with the same maximum length, return the first one that appears. # Input - The first line of the input contains an integer `T` denoting the number of test cases. - Each of the next `T` lines contains a sequence of integers separated by spaces, representing a list. # Output - For each test case, output two lines: the first line containing the length of the longest sublist of unique integers, and the second line containing the sequence representing the longest sublist. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ Length of each sequence ≤ 1000 - -10^6 ≤ Each integer in the list ≤ 10^6 # Example Input ``` 2 4 5 2 3 4 2 5 7 8 8 2 3 4 5 1 2 ``` Output ``` 5 4 5 2 3 6 6 8 2 3 4 5 1 ``` Explanation For the first test case: - The longest sublist of unique integers is `[4, 5, 2, 3, 6]` which has a length of 5. For the second test case: - The longest sublist of unique integers is `[8, 2, 3, 4, 5, 1]` which has a length of 6.","solution":"def find_longest_unique_sublist(sequence): Returns the longest sublist with unique elements and its length. max_length = 0 start = 0 max_start = 0 seen = {} for end, value in enumerate(sequence): if value in seen and seen[value] >= start: start = seen[value] + 1 seen[value] = end if end - start + 1 > max_length: max_length = end - start + 1 max_start = start return max_length, sequence[max_start:max_start + max_length] def longest_unique_sublists(test_cases): Given a list of test cases where each test case is a sequence of integers, return the result for each test case as described in the problem. results = [] for case in test_cases: max_length, sublist = find_longest_unique_sublist(case) results.append((max_length, sublist)) return results"},{"question":"An e-commerce company requires a robust system to manage orders and inventory for their products. You are tasked with implementing a simplified version of this system. The system should support the following operations: 1. add <product_id> <quantity>: Add a specified quantity of a product to the inventory. 2. remove <product_id> <quantity>: Remove a specified quantity of a product from the inventory. If the quantity to be removed is greater than the available quantity, remove only the available quantity. 3. get <product_id>: Return the current quantity of the specified product in the inventory. Input The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of operations. The following n lines each contain one of the aforementioned operations. Output For each ‘get’ operation, output the current quantity of the specified product in a new line. Examples Input 6 add 101 50 add 102 20 remove 101 10 get 101 remove 102 30 get 102 Output 40 0","solution":"class InventoryManagement: def __init__(self): self.inventory = {} def add(self, product_id, quantity): if product_id in self.inventory: self.inventory[product_id] += quantity else: self.inventory[product_id] = quantity def remove(self, product_id, quantity): if product_id in self.inventory: self.inventory[product_id] = max(0, self.inventory[product_id] - quantity) def get(self, product_id): return self.inventory.get(product_id, 0) def process_commands(commands): inventory = InventoryManagement() results = [] for command in commands: parts = command.split() operation = parts[0] product_id = int(parts[1]) if operation == \\"add\\": quantity = int(parts[2]) inventory.add(product_id, quantity) elif operation == \\"remove\\": quantity = int(parts[2]) inventory.remove(product_id, quantity) elif operation == \\"get\\": results.append(inventory.get(product_id)) return results"},{"question":"Alice is participating in a coding competition where she needs to evaluate the beauty of sequences. The beauty of a sequence of integers is defined as the difference between the maximum and minimum values in the sequence. Alice has an array of n positive integers a_1, a_2, ldots, a_n. She can perform at most k operations on this array. In each operation, she can increment any element of the array by 1. Alice wants to make the beauty of this array as small as possible using the given operations. Can you help her accomplish this? -----Input----- The first line contains two integers n (1 leq n leq 10^5) and k (0 leq k leq 10^9), representing the number of elements in the array and the maximum number of operations Alice can perform. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), describing the array elements. -----Output----- A single line containing one integer, denoting the minimum beauty of the array after performing at most k operations. -----Examples----- Input 5 8 1 3 6 2 5 Output 2 Input 3 5 4 7 4 Output 1 -----Note----- In the first sample, Alice can increment the element 1 four times to make the array [5, 3, 6, 2, 5]. After this, she can increment the element 2 four times to make the array [5, 3, 6, 6, 5]. The beauty of this array is 6 - 3 = 3. An optimal approach is to increment 1 to 5 (4 times) and 2 to 4 (2 times), making the array [5, 3, 6, 4, 5]. The beauty then is 6 - 3 = 3, but we can achieve a minimum beauty of 2 by the last mentioned. In the second sample, Alice can increment the element 4 once to make the array [5, 7, 4]. The beauty of this array is 7 - 4 = 3. Alternatively, she can increment the element 4 twice to make the array [6, 7, 4], achieving a smaller beauty of 3. To minimize further, increment [4, 7, 4] to [5, 7, 5], achieving an optimal beauty of 2.","solution":"def min_beauty(n, k, arr): arr.sort() min_b = arr[0] max_b = arr[-1] min_beauty = max_b - min_b for i in range(1, n): operations_needed = (arr[i] - arr[i-1]) * i if operations_needed <= k: k -= operations_needed min_b = arr[i] min_beauty = max_b - min_b else: min_b += k // i min_beauty = max_b - min_b break return min_beauty"},{"question":"A well-known problem in string processing involves finding the number of times a particular substring occurs within a given string. You are tasked with enumerating the occurrences of a substring in a string, considering overlapping occurrences. Given a string s of length n and a substring pattern of length m, count how many times the pattern occurs in the string s, including overlapping occurrences. A substring occurrence is defined as being present at any position i in s where s[i...i+m-1] equals the pattern. Input The input consists of two lines. - The first line contains the string s (1 ≤ |s| ≤ 106), consisting of lowercase English letters. - The second line contains the substring pattern (1 ≤ |pattern| ≤ 100), also consisting of lowercase English letters. Output Output a single integer — the number of times the pattern occurs in string s. Examples Input ababababa aba Output 4 Input aaaaa aa Output 4 Input abcdef abc Output 1 Note In the first example, the substring \\"aba\\" appears at positions 0, 2, 4, and 6. In the second example, the substring \\"aa\\" appears at positions 0, 1, 2, and 3 with overlap. In the third example, the substring \\"abc\\" appears only once starting at position 0.","solution":"def count_overlapping_occurrences(s, pattern): Counts the number of times a pattern occurs in the string s, including overlapping occurrences. Parameters: s (str): The string in which to search. pattern (str): The substring pattern to search for. Returns: int: The number of overlapping occurrences of the pattern in the string s. count = 0 pattern_len = len(pattern) for i in range(len(s) - pattern_len + 1): if s[i:i + pattern_len] == pattern: count += 1 return count"},{"question":"Jack and Jill are practicing for their final computer science exam by solving coding problems together. Today, they have a problem involving sequences. In this problem, they are given a sequence of integers and are allowed to perform a move where they can either increment or decrement any element of the sequence by 1. Their goal is to make all the elements of the sequence equal using the minimum number of moves. Jack always goes first and they take turns alternately. Your task is to find out if Jack can guarantee a win if both play optimally. Jack wins if after the sequence becomes equal, it is Jack\'s turn to play, otherwise Jill wins. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of elements in the sequence. The second line contains N space-separated integers B1, B2, ..., BN denoting the elements of the sequence. -----Output----- For each test case, output a single line containing either “Jack” or “Jill” (without quotes), denoting the winner of the game. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ Bi ≤ 10^9 -----Example----- Input: 2 3 1 2 3 4 4 4 4 4 Output: Jill Jack -----Explanation----- Example case 1. In this test case, Jack and Jill will start modifying the sequence [1,2,3]. After the first move by Jack, a possible sequence can be [2,2,3] or [1,2,2]. Jill will then respond by making another sequence, for example, [2,2,2] in either case. Since Jill\'s move made them all equal, she wins. Example case 2. Since all elements are already equal in [4,4,4,4], Jack wins without needing to make any move.","solution":"def determine_winner(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] if N % 2 == 0: results.append(\\"Jack\\") else: results.append(\\"Jill\\") return results"},{"question":"In an ancient kingdom, there are N villages connected by M bidirectional roads, where each road connects exactly two different villages. The roads can have different lengths. The kingdom wants to minimize the total road length required to connect all villages so that there is a path between any pair of villages, essentially forming a Minimum Spanning Tree (MST). You are given an integer N, an integer M, and a list of M tuples where each tuple contains three integers (u, v, w) representing a road between village u and village v with length w. Write a function `minimum_spanning_tree` that takes these inputs and returns the total length of the MST. If it is not possible to connect all villages, return -1. Function signature: `def minimum_spanning_tree(N: int, M: int, roads: List[Tuple[int, int, int]]) -> int:` **Example:** ```python N = 4 M = 5 roads = [(1, 2, 1), (1, 3, 3), (2, 3, 2), (3, 4, 4), (4, 2, 5)] ``` **Output:** ```python minimum_spanning_tree(N, M, roads) => 7 ``` Explanation: The minimum spanning tree can be formed by selecting the roads with lengths 1, 2, and 4, connecting all four villages. The total length is 1 + 2 + 4 = 7. Note: The villages are numbered from 1 to N. If there is no way to connect all the villages, the function should return -1.","solution":"from typing import List, Tuple def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_spanning_tree(N: int, M: int, roads: List[Tuple[int, int, int]]) -> int: if N == 0: return -1 roads.sort(key=lambda x: x[2]) parent = [i for i in range(N+1)] rank = [0] * (N+1) mst_weight = 0 edges_included = 0 for road in roads: u, v, w = road rootU = find(parent, u) rootV = find(parent, v) if rootU != rootV: union(parent, rank, rootU, rootV) mst_weight += w edges_included += 1 if edges_included == N - 1: break if edges_included != N - 1: return -1 return mst_weight"},{"question":"A scientist is working on a new type of robot that can follow a specific sequence of commands to move around a grid. The grid is an n x m matrix where each cell can be represented by its row and column indices (r, c). The robot can execute four types of commands: \\"UP\\", \\"DOWN\\", \\"LEFT\\", and \\"RIGHT\\". These commands cause the robot to move up, down, left, or right by one cell respectively. Initially, the robot is placed at cell (1, 1). The robot will receive a list of commands and execute them in order. Your task is to determine the final position of the robot after all commands have been executed. If a command would move the robot out of the grid boundaries, it should be ignored, and the robot should remain in its current position for that command. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid respectively. The second line contains a single integer t (1 ≤ t ≤ 1000) — the number of commands. The third line contains t commands, each of which is one of the four strings: \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\". -----Output----- Print two integers r and c denoting the final position of the robot after all commands have been executed. -----Examples----- Input 5 5 7 DOWN DOWN RIGHT UP LEFT LEFT DOWN Output 2 1 Input 3 3 4 UP UP LEFT LEFT Output 1 1 Input 4 4 5 RIGHT RIGHT DOWN DOWN Output 3 3 -----Note----- In the first sample, the robot starts at cell (1, 1). The commands move the robot to the following cells in order: (2, 1), (3, 1), (3, 2), (2, 2), (2, 1), (2, 1) (since the \\"LEFT\\" command would move it out of the grid), and finally (3, 1). Therefore, the final position is (3, 1). In the second sample, all the commands attempt to move the robot out of the grid, so it remains in the initial position (1, 1). In the third sample, the robot moves to (1, 2), (1, 3), (2, 3), and (3, 3), ending at position (3, 3).","solution":"def final_position(n, m, t, commands): Calculate the final position of the robot after executing the commands. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid t (int): number of commands commands (list): list of commands to be executed Returns: tuple: final position (row, column) of the robot current_position = [1, 1] for command in commands: if command == \\"UP\\" and current_position[0] > 1: current_position[0] -= 1 elif command == \\"DOWN\\" and current_position[0] < n: current_position[0] += 1 elif command == \\"LEFT\\" and current_position[1] > 1: current_position[1] -= 1 elif command == \\"RIGHT\\" and current_position[1] < m: current_position[1] += 1 return tuple(current_position)"},{"question":"A game developer is working on a feature that randomly generates a rectangular maze. The maze is represented as a grid with N rows and M columns. Each cell in the grid can contain either an empty space (\'.\') or a wall (\'#\'). The developer wants to know the number of distinct and continuous regions in the maze that contain only empty spaces. Two cells are part of the same region if they are directly connected, i.e., they share a side (top, bottom, left, or right). Can you help the game developer by writing a program to count the number of distinct regions of empty spaces in the maze? -----Input----- The first line of input contains two integers N and M, denoting the number of rows and columns in the maze. The next N lines contain M characters each, representing the maze. -----Output----- Print a single integer, the number of distinct regions of empty spaces in the maze. -----Constraints----- - 1 ≤ N, M ≤ 100 -----Example-----Input 5 6 .... #... #... .. #..#.. Output 3 -----Explanation----- - The 5x6 grid can be visualized as: ``` .... #... #... .. #..#.. ``` There are three distinct regions of empty spaces: 1. Top-left region. 2. Bottom-left region. 3. Single cell at the bottom-right.","solution":"def find_regions(maze, n, m): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or maze[x][y] != \'.\': return maze[x][y] = \'#\' # Mark this cell as visited # Explore the neighbours dfs(x + 1, y) # down dfs(x - 1, y) # up dfs(x, y + 1) # right dfs(x, y - 1) # left regions_count = 0 for i in range(n): for j in range(m): if maze[i][j] == \'.\': regions_count += 1 dfs(i, j) return regions_count # Example usage: n, m = 5, 6 maze = [ list(\\"....\\"), list(\\"#...\\"), list(\\"#...\\"), list(\\"..\\"), list(\\"#..#..\\") ] print(find_regions(maze, n, m)) # Output should be 3"},{"question":"You are given n strings, each possibly containing lowercase letters and digits. You need to determine if each string is a valid email address. A valid email address is defined as follows: - It must contain exactly one \'@\' symbol. - The local part (before the \'@\' symbol) must be non-empty and can contain lowercase letters, digits, and periods (\'.\'), but it must not start or end with a period and cannot have two consecutive periods. - The domain part (after the \'@\' symbol) must be non-empty and can contain lowercase letters and digits. It must contain at least one period (\'.\'), and the top-level domain (the part after the last period) must be at least 2 and at most 6 characters long. Additionally, the domain part should not start or end with a period. Write a function that reads a list of strings and outputs \\"Valid\\" or \\"Invalid\\" for each string based on the above criteria. Input The input consists of multiple test cases. The first line contains an integer n (1 ≤ n ≤ 100) representing the number of email strings. The next n lines each contain a single string of maximum length 100 characters, which potentially represents an email address. Output For each email string, print \\"Valid\\" if the string is a valid email address according to the given criteria, otherwise print \\"Invalid\\". Example Input 3 john.doe@example.com jane.doe@exam_ple.co foo.bar@domain..com Output Valid Invalid Invalid","solution":"def is_valid_email(email): Determines if the given email address is valid based on the provided criteria. if \'@\' not in email or email.count(\'@\') != 1: return \\"Invalid\\" local, domain = email.split(\'@\') # Validate local part if not local or local[0] == \'.\' or local[-1] == \'.\' or \'..\' in local: return \\"Invalid\\" if not local.replace(\'.\', \'\').isalnum(): return \\"Invalid\\" # Validate domain part if not domain or domain[0] == \'.\' or domain[-1] == \'.\': return \\"Invalid\\" if \'.\' not in domain: return \\"Invalid\\" domain_parts = domain.split(\'.\') if not domain_parts[-1].isalpha() or not (2 <= len(domain_parts[-1]) <= 6): return \\"Invalid\\" if any(not part.isalnum() for part in domain_parts[:-1]): return \\"Invalid\\" return \\"Valid\\" def check_emails(n, emails): results = [] for email in emails: results.append(is_valid_email(email)) return results # Example usage within the same script if __name__ == \\"__main__\\": n = 3 emails = [\\"john.doe@example.com\\", \\"jane.doe@exam_ple.co\\", \\"foo.bar@domain..com\\"] results = check_emails(n, emails) for result in results: print(result)"},{"question":"You are given a string s consisting of lowercase English letters and a list of queries where each query contains an integer k. For each query, find the longest substring of s that contains at most k distinct characters. Function Description Complete the function longestSubstringWithKDistinct in the editor below. The function should return an integer that represents the length of the longest substring with at most k distinct characters. longestSubstringWithKDistinct has the following parameter(s): - s: a string - queries: a list of integers Input Format The first line contains the string s. The second line contains an integer q, the number of queries. Each of the next q lines contains an integer k for each query. Constraints 1 leq |s| leq 10^5 s consists of only lowercase English letters. 1 leq q leq 10^5 1 leq k leq 26 Output Format For each query, print the length of the longest substring that contains at most k distinct characters on a new line. Sample Input 0 abcba 2 2 3 Sample Output 0 3 5 Explanation 0 We perform the following q=2 queries: For the first query where k=2, the longest substring with at most 2 distinct characters is \\"bcb\\" of length 3. For the second query where k=3, the entire string \\"abcba\\" has 3 distinct characters and is of length 5. Sample Input 1 aaabbcc 3 1 2 3 Sample Output 1 3 5 7 Explanation 1 In the first query where k=1, the longest substring with at most 1 distinct character is \\"aaa\\" of length 3. In the second query where k=2, the longest substring with at most 2 distinct characters is \\"aaabb\\" of length 5. In the third query where k=3, the entire string \\"aaabbcc\\" contains 3 distinct characters and is of length 7.","solution":"def longestSubstringWithKDistinct(s, queries): def length_of_longest_substring_with_k_distinct(k): n = len(s) if k == 0: return 0 char_count = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length results = [] for k in queries: results.append(length_of_longest_substring_with_k_distinct(k)) return results"},{"question":"You are given an array of integers. Rearrange the array in such a way that the largest number is followed by the smallest number, the second largest number is followed by the second smallest number, and so on. The original order of elements in the array should not be changed, only their position as per the new arrangement. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: [5, 1, 4, 2, 3] Example 2: Input: arr = [10, 20, 30, 40, 50, 60] Output: [60, 10, 50, 20, 40, 30] Your Task: You do not need to read input or print anything. Your task is to complete the function rearrangeArray(), which takes the array arr as input parameter and returns the rearranged array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ arr.length ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def rearrangeArray(arr): Rearrange the array in such a way that the largest number is followed by the smallest number, the second largest number is followed by the second smallest number, and so on. if not arr: return [] sorted_arr = sorted(arr) left = 0 right = len(arr) - 1 result = [] while left <= right: if left == right: result.append(sorted_arr[left]) else: result.extend([sorted_arr[right], sorted_arr[left]]) left += 1 right -= 1 return result"},{"question":"A company is organizing a party and has invited multiple guests. Each guest will bring a plus-one. The company has arranged one round table to accommodate all guests and their plus-ones. The challenge is to seat the guests such that no guest is seated directly next to their own plus-one. Given `n` pairs of guests (each pair representing a guest and their plus-one), design an algorithm to determine if there exists a valid seating arrangement around the round table and return one such arrangement if it exists. If no such arrangement exists, return \\"No valid seating arrangement\\". Example 1: Input: n = 2 Output: [1, 3, 2, 4] or [1, 4, 2, 3] Explanation: Guest 1 and their plus-one can be separated by either guests 2 and 3 or 3 and 4. Example 2: Input: n = 3 Output: No valid seating arrangement Explanation: With three pairs, it\'s not possible to seat them without having one guest next to their plus-one. Constraints: 1. 1 <= n <= 10^3","solution":"def valid_seating_arrangement(n): Determine a valid seating arrangement for n pairs of guests. Parameters: - n: Number of guest pairs Returns: - A valid seating arrangement list if it exists, otherwise \\"No valid seating arrangement\\" if n == 1: return \\"No valid seating arrangement\\" arrangement = list(range(1, 2 * n + 1)) for i in range(0, 2 * n - 2, 2): arrangement[i + 1], arrangement[i + 2] = arrangement[i + 2], arrangement[i + 1] return arrangement"},{"question":"You are given a list of n integers. Your task is to transform the list into another list where each element is the sum of the corresponding element and all the previous elements in the list. This new list is called the prefix sum list. Write a function that takes a list of integers and returns the prefix sum list. Input The first input line contains an integer n (1 ≤ n ≤ 105) — the length of the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 104) — the elements of the list. Output Print n space-separated integers representing the prefix sum list. Function Signature ```python def prefix_sum_list(n: int, arr: List[int]) -> List[int]: pass ``` Examples Input 5 1 2 3 4 5 Output 1 3 6 10 15 Input 3 5 5 5 Output 5 10 15 Note In the first example, the prefix sums are calculated as: - 1 - 1 + 2 = 3 - 1 + 2 + 3 = 6 - 1 + 2 + 3 + 4 = 10 - 1 + 2 + 3 + 4 + 5 = 15 In the second example, the prefix sums are calculated as: - 5 - 5 + 5 = 10 - 5 + 5 + 5 = 15","solution":"from typing import List def prefix_sum_list(n: int, arr: List[int]) -> List[int]: prefix_sums = [] current_sum = 0 for num in arr: current_sum += num prefix_sums.append(current_sum) return prefix_sums"},{"question":"Given an array of integers where each element represents the duration (in minutes) of a task, write a function that determines the maximum number of tasks that can be completed sequentially within a given number of hours. You can assume each task needs to be completed once started and cannot be interrupted. Example: ```python max_tasks_durations([30, 60, 10, 55, 20, 40], 2) => 4 Explanation: Within 120 minutes (2 hours), you can complete the tasks with durations [30, 60, 10, 20]. The total duration is 120 minutes, so you can complete 4 tasks. max_tasks_durations([45, 75, 15, 10, 20], 1) => 3 Explanation: Within 60 minutes (1 hour), you can complete the tasks with durations [15, 10, 20]. The total duration is 45 minutes, so you can complete 3 tasks. ``` Note: The function should return an integer representing the maximum number of tasks that can be completed sequentially within the given number of hours. If no tasks can be completed, return `0`.","solution":"def max_tasks_durations(tasks, hours): Determines the maximum number of tasks that can be completed sequentially within a given number of hours. Parameters: - tasks: list of integers representing the duration of tasks in minutes - hours: integer representing the available time in hours Returns: - Integer representing the maximum number of tasks that can be completed within the given time max_minutes = hours * 60 tasks.sort() total_minutes = 0 task_count = 0 for task in tasks: if total_minutes + task <= max_minutes: total_minutes += task task_count += 1 else: break return task_count"},{"question":"Alice is an avid puzzle solver who loves solving challenges involving letter arrangements. Recently, she stumbled upon a fascinating puzzle involving words. Given a word consisting of lowercase letters, Alice is interested in finding all the unique permutations of the word that form a valid palindrome. A palindrome is a word that reads the same backward as forward. For example, \\"radar\\" and \\"level\\" are palindromes. Write a program to help Alice determine the number of unique palindromic permutations of the given word. # Input Format - The first line of the input contains an integer t denoting the number of test cases. - The following t lines each contain a single word consisting of lowercase English letters. # Output Format - For each test case, output a single integer representing the number of unique palindromic permutations of the given word. # Constraints - 1 ≤ t ≤ 10 - 1 ≤ length of word ≤ 10^3 # Sample Input ``` 2 aabb abc ``` # Sample Output ``` 2 0 ``` # Explanation For the first test case \\"aabb\\", the unique palindromic permutations are \\"abba\\" and \\"baab\\". For the second test case \\"abc\\", there are no palindromic permutations. # Note - The order of the letters in the word might not contribute to palindrome formation, e.g., \\"aabb\\" can be rearranged to form \\"abba\\" and \\"baab\\", but \\"abc\\" cannot form any palindrome by rearrangement.","solution":"from collections import Counter from math import factorial def palindromic_permutations(word): Returns the number of unique palindromic permutations of the given word. count = Counter(word) # Check the number of characters with an odd count odd_count_chars = [char for char, cnt in count.items() if cnt % 2 != 0] # If more than one character has an odd count, palindrome formation is not possible if len(odd_count_chars) > 1: return 0 half_length = sum(cnt // 2 for cnt in count.values()) # Calculate permutations of half_length items and divide by factorial of counts of each character num_permutations = factorial(half_length) for char, cnt in count.items(): num_permutations //= factorial(cnt // 2) return num_permutations def process_test_cases(t, words): Process all test cases and return results results = [] for word in words: results.append(palindromic_permutations(word)) return results"},{"question":"In a place far away, there is an enchanted forest where trees grow gold coins instead of leaves. Once every century, the forest allows a visitor to pluck a sequence of gold coins from the trees. However, the magical forest has a peculiar set of rules governing the sequence of gold coins that can be collected. The visitor can only start at the first tree, and from each tree, they can move either to the next tree or skip one tree ahead. The goal is to collect the maximum number of gold coins by the time they reach the last tree. Given the number of gold coins on each tree, write a function to determine the maximum number of gold coins that can be collected following these rules. -----Input----- The input begins with an integer 1 le N le 1000, which represents the number of trees in the forest. The next line contains N non-negative integers where each integer 0 le C_i le 100, representing the number of gold coins on the i^{th} tree. -----Output----- Output a single integer which is the maximum number of gold coins that can be collected following the rules. -----Examples----- Sample Input 1: 5 1 2 9 4 5 Sample Output 1: 15 Sample Input 2: 6 10 5 20 10 15 25 Sample Output 2: 55","solution":"def max_gold_coins(N, coins): Returns the maximum number of gold coins that can be collected. if N == 0: return 0 if N == 1: return coins[0] # Initialize DP array dp = [0] * N # Base cases dp[0] = coins[0] dp[1] = max(coins[0], coins[1]) # Fill the dp array for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[N-1]"},{"question":"Given a set of `N` pawns on a 2D grid, you are tasked with finding a way for the pawns to move such that no two pawns are in the same row or column. Each pawn can move any number of spaces up, down, left, or right, but cannot move diagonally. The 2D grid has dimensions MxM, and each cell can be represented by its coordinates (i, j). You need to determine if such an arrangement is possible and, if so, output the new coordinates of the pawns. -----Input:----- - The first line contains two integers M (the size of the grid) and N (the number of pawns). - The next N lines each contain two integers `xi` and `yi`, representing the initial coordinates of the ith pawn on the grid. -----Output:----- - If it\'s not possible to arrange the pawns such that no two pawns are in the same row or column, print \\"Not possible\\". - Otherwise, print the new coordinates of each pawn, one per line. -----Constraints----- - 1 ≤ M ≤ 1000 - 1 ≤ N ≤ M -----Sample Input:----- 5 3 1 1 2 2 3 3 -----Sample Output:----- 1 1 2 3 3 2 -----EXPLANATION:----- There are originally three pawns located at coordinates (1, 1), (2, 2), and (3, 3). One possible way to rearrange them such that no two pawns are in the same row or column is to place them at (1, 1), (2, 3), and (3, 2).","solution":"def rearrange_pawns(M, N, pawns): Rearranges pawns such that no two pawns are in the same row or column. Parameters: M (int): Size of the grid. N (int): Number of pawns. pawns (list of tuples): List of tuples where each tuple contains the initial coordinates of a pawn Returns: List of tuples containing the new coordinates of each pawn if possible, otherwise returns \\"Not possible\\". if N > M: return \\"Not possible\\" rows_taken = set() cols_taken = set() # Mark the initial positions as taken for (r, c) in pawns: if r in rows_taken or c in cols_taken: return \\"Not possible\\" rows_taken.add(r) cols_taken.add(c) # If initial positions are feasible, return them return pawns"},{"question":"You are given a binary tree with N nodes. Each node in the tree has a value associated with it. You need to perform Q queries on this tree. In each query, you are given two nodes u and v, and you need to find the sum of values of all nodes that are part of the path from u to v (including u and v). If the path does not exist, print -1. The binary tree is rooted at node 1. Input: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of nodes in the binary tree. - The next line contains N space-separated integers, where the i-th integer represents the value of the i-th node. - The next N-1 lines each contain two integers u and v, representing an edge between nodes u and v. - The next line contains an integer Q, the number of queries. - The next Q lines each contain two integers u and v, representing the nodes between which the sum needs to be calculated. Output: For each query in each test case, print the sum of the values of all nodes in the path from u to v. If the path does not exist, print -1. Print the result for each query in a new line. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ u, v ≤ N -10^9 ≤ Node Value ≤ 10^9 SAMPLE INPUT 1 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 4 5 4 3 5 1 SAMPLE OUTPUT 6 10 15 Explanation Consider the sample test case with N = 5 nodes and their respective values. The edges are provided to construct the tree. ``` 1(1) / 2(2) 3(3) / 4(4) 5(5) ``` - Query 1: Path from node 4 to node 5 will be 4 -> 2 -> 5, sum of values = 4 + 2 + 5 = 11 - Query 2: Path from node 4 to node 3 will be 4 -> 2 -> 1 -> 3, sum of values = 4 + 2 + 1 + 3 = 10 - Query 3: Path from node 5 to node 1 will be 5 -> 2 -> 1, sum of values = 5 + 2 + 1 = 8 Hence, the answers are 6, 10, and 15 respectively.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] from collections import defaultdict, deque def find_tree_sum(N, values, edges, queries): nodes = {i: TreeNode(values[i - 1]) for i in range(1, N + 1)} graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(root): queue = deque([root]) parent = {root: None} while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in parent: parent[neighbor] = node queue.append(neighbor) return parent parent = bfs(1) def path_sum(u, v): if u == v: return nodes[u].value path_u, path_v = [], [] while u is not None: path_u.append(u) u = parent[u] while v is not None: path_v.append(v) v = parent[v] i, j = len(path_u) - 1, len(path_v) - 1 while i >= 0 and j >= 0 and path_u[i] == path_v[j]: i -= 1 j -= 1 common_ancestor_index = i + 1 sum_path = sum(nodes[node].value for node in path_u[:common_ancestor_index + 1]) sum_path += sum(nodes[node].value for node in path_v[:j + 1]) return sum_path results = [] for u, v in queries: results.append(path_sum(u, v)) return results def process_queries(test_cases): results = [] for test_case in test_cases: N = test_case[\'N\'] values = test_case[\'values\'] edges = test_case[\'edges\'] queries = test_case[\'queries\'] results.extend(find_tree_sum(N, values, edges, queries)) return results"},{"question":"# Rock, Paper, Scissors Tournament You have been chosen to write a simulation for a \\"Rock, Paper, Scissors\\" tournament. In this tournament, players are paired up and play against each other, with the winners advancing to the next round until only one winner is left. The rules for \\"Rock, Paper, Scissors\\" are as follows: - Rock beats Scissors - Scissors beats Paper - Paper beats Rock Each player will choose their move according to a predefined strategy before the tournament starts. A player\'s strategy can be: - Always choose Rock - Always choose Paper - Always choose Scissors - Choose randomly between Rock, Paper, and Scissors The input will include the number of players, followed by each player\'s strategy. Assume there are always (2^n) players. Write a program that simulates the tournament and outputs the winner\'s strategy. # Input - The first line contains ( t ), the number of test cases. - For each test case: - The first line contains ( n ), the number of players (always (2^k) for some integer (k)). - The next ( n ) lines each contain a string representing the player\'s strategy (\\"Rock\\", \\"Paper\\", \\"Scissors\\", or \\"Random\\"). # Output For each test case, output a single line containing the strategy of the winning player. # Constraints 1. (1 leq t leq 10) 2. (1 leq n leq 1024) # Example Input ``` 2 4 Rock Paper Scissors Random 8 Random Random Random Random Paper Paper Paper Paper ``` Output ``` Random Paper ``` # Explanation In the first test case, the \\"Random\\" strategy can be assumed to win after simulating the tournament. In the second test case, the \\"Paper\\" strategy wins because all \\"Random\\" strategies eventually lose to \\"Paper\\" strategies. **Note**: The actual simulation may involve generating random choices for the \\"Random\\" strategy, and you should ensure that the resulting winner is determined based on those choices. Ensure your implementation takes the randomness into account appropriately for fair simulation.","solution":"import random def simulate_game(player1, player2): choices = [\'Rock\', \'Paper\', \'Scissors\'] if player1 == \'Random\': player1 = random.choice(choices) if player2 == \'Random\': player2 = random.choice(choices) if player1 == player2: return player1 # In the case of a tie, allow the first player\'s choice to win. elif (player1 == \'Rock\' and player2 == \'Scissors\') or (player1 == \'Scissors\' and player2 == \'Paper\') or (player1 == \'Paper\' and player2 == \'Rock\'): return player1 else: return player2 def simulate_tournament(strategies): while len(strategies) > 1: next_round = [] for i in range(0, len(strategies), 2): winner = simulate_game(strategies[i], strategies[i + 1]) next_round.append(winner) strategies = next_round return strategies[0] def rock_paper_scissors_tournament(test_cases): results = [] for case in test_cases: results.append(simulate_tournament(case)) return results"},{"question":"Write a function called `findOddOccurrence` that takes a list of integers as an argument and returns the integer that occurs an odd number of times. You can assume that there is always exactly one integer that fulfills this condition. The function should not use any library functions specifically aimed at finding frequencies of elements (e.g., collections.Counter).","solution":"def findOddOccurrence(arr): Returns the integer that occurs an odd number of times in the list. result = 0 for number in arr: result ^= number return result"},{"question":"Geek is given a task to find the most frequent element in an array. If there are multiple elements with the same maximum frequency, he should select the smallest of them. You are given an array a[] of N integers. Help Geek find the most frequent element, and in case of a tie, the smallest one among them. Example 1: Input: N = 5 a[] = {1, 2, 2, 1, 3} Output: 1 Example 2: Input: N = 6 a[] = {4, 5, 6, 5, 4, 5} Output: 5 Explanation: In Example 1, both 1 and 2 appear twice, but 1 is the smaller number. In Example 2, 5 appears thrice, making it the most frequent element. Your Task: You don\'t need to read input or print anything. Your task is to complete the function mostFrequent() which takes array a[] and its size N as input parameters and returns the integer representing the most frequent element. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 1000 1 ≤ a[i] ≤ 10^5","solution":"def mostFrequent(a, N): Finds the most frequent element in the array. If multiple elements have the same frequency, returns the smallest one among them. :param a: List of integers :param N: Size of the list :return: The most frequent element freq = {} for num in a: freq[num] = freq.get(num, 0) + 1 max_frequency = max(freq.values()) candidates = [num for num, count in freq.items() if count == max_frequency] return min(candidates)"},{"question":"Create a function that takes an array of integers and returns the length of the longest sequence of strictly increasing consecutive numbers. **Examples:** ```python longest_increasing_sequence([1, 3, 5, 4, 7]) Expected Result: 3 (1, 3, 5) longest_increasing_sequence([2, 2, 2, 2, 2]) Expected Result: 1 (2) longest_increasing_sequence([10, 11, 15, 3, 4, 5, 6, 2]) Expected Result: 4 (3, 4, 5, 6) longest_increasing_sequence([5, 6, 7, 8, 9, 10]) Expected Result: 6 (5, 6, 7, 8, 9, 10) ``` You may assume that the input array will have at least one element.","solution":"def longest_increasing_sequence(arr): if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a list of integers representing the heights of buildings in a row. If it rains, the amount of water that will be trapped between the buildings can be determined. Each block between the buildings stores water if there are taller buildings on both sides. Write a function `trap_rain_water(heights)` to compute how much water can be trapped after raining. Input The input is a list of integers, `heights`, where each integer represents the height of the building at that position in the row. Output Return a single integer representing the total units of water trapped. Constraints 1 ≤ len(heights) ≤ 10^5 0 ≤ heights[i] ≤ 10^4 Example Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: In the example, 6 units of water are trapped.","solution":"def trap_rain_water(heights): Calculate the total water that can be trapped after it rains. :param heights: List[int] - List of non-negative integers representing heights of buildings :return: int - Total units of water trapped if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Mountain Peak Element Given an array of integers `nums` where elements are sorted in ascending order until they reach a peak element (where `nums[i] > nums[i-1]` and `nums[i] > nums[i+1]`), find a peak element and return its index. You may assume that `nums[-1] = nums[n] = -∞`. ``` nums = [1, 3, 8, 12, 4, 2] findPeak(nums) #=> 3 // Index of peak element 12 nums = [1, 2, 3, 4, 5, 1] findPeak(nums) #=> 4 // Index of peak element 5 ``` The function should efficiently find the index using a binary search approach. **Note:** If multiple peak elements exist in the array, return the index of any one of them.","solution":"def findPeak(nums): Function to find the peak element index in the given list of numbers. Peaks are defined as an element that is greater than its neighbours. :param nums: List of integers :return: Index of peak element left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 # If the mid element is less than the next element, then peak lies on the right half if nums[mid] < nums[mid + 1]: left = mid + 1 else: # Else the peak is on the left half right = mid return left"},{"question":"Alex is designing a new game where players hunt for treasure on a rectangular grid. Each cell in the grid either contains grass (\'.\') or is impassable rock (\'#\'). Players must move from a start cell to a treasure cell using the shortest path possible, but they can only move up, down, left, or right (no diagonal moves). Given the grid and the coordinates of the starting and treasure cells, your task is to determine the minimum number of moves needed to reach the treasure. If the treasure is not reachable, return -1. Input The first line contains two integers m and n (1 ≤ m, n ≤ 500) representing the number of rows and columns of the grid respectively. The next m lines each contain n characters, representing the grid where \'.\' is grass and \'#\' is rock. The following line contains four integers: x1, y1, x2, y2 (0 ≤ x1, y1, x2, y2 < max(m, n)) which represent the coordinates of the starting cell and the treasure cell respectively. The cell at coordinates (x1, y1) and the cell at coordinates (x2, y2) are guaranteed to be grass cells. Output You must print a single line containing the minimum number of moves needed to reach the treasure, or -1 if it is not reachable. Examples Input 5 5 ..... .#. ..... .#... ..... 0 0 4 4 Output 8 Input 3 4 .... .... 0 0 2 3 Output -1","solution":"from collections import deque def min_moves_to_treasure(m, n, grid, x1, y1, x2, y2): def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(x1, y1, 0)]) # (current_x, current_y, current_distance) visited = set((x1, y1)) while queue: curr_x, curr_y, dist = queue.popleft() if curr_x == x2 and curr_y == y2: return dist for d in directions: nxt_x, nxt_y = curr_x + d[0], curr_y + d[1] if is_valid(nxt_x, nxt_y) and (nxt_x, nxt_y) not in visited: visited.add((nxt_x, nxt_y)) queue.append((nxt_x, nxt_y, dist + 1)) return -1 # Treasure is not reachable def solve_game(m, n, grid_lines, start_end): grid = [list(line) for line in grid_lines] x1, y1, x2, y2 = start_end return min_moves_to_treasure(m, n, grid, x1, y1, x2, y2) # Example usage: # m, n = 5, 5 # grid_lines = [\\".....\\", \\".#.\\", \\".....\\", \\".#...\\", \\".....\\"] # start_end = (0, 0, 4, 4) # result = solve_game(m, n, grid_lines, start_end) # print(result) # Output: 8"},{"question":"Create a function that receives a string containing a mathematical expression and returns the result of its evaluation. The input string can contain integers, the operators \'+\', \'-\', \'*\', and \'/\', and parentheses for grouping. Your task is to parse the expression and compute its value while respecting the order of operations. You are not allowed to use the built-in `eval` function or any similar evaluation functions. Example input: ```python evaluate_expression(\\"3 + 5 * 2\\") # should return 13 ``` Example input: ```python evaluate_expression(\\"(3 + 5) * 2\\") # should return 16 ``` Here are the Detailed Specifications: - The function signature should be: ```python def evaluate_expression(expression: str) -> float: ``` - The input expression will be a valid mathematical expression, containing only non-negative integers, +, -, *, / operators, and parentheses `( )`. - Division should be floating-point division. - You can assume no leading or trailing whitespace and that the expression is always valid. Write your solution below.","solution":"def evaluate_expression(expression: str) -> float: def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a / b def compute(tokens): values = [] ops = [] def apply_tops_op(): b = values.pop() a = values.pop() op = ops.pop() values.append(apply_op(a, b, op)) i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': apply_tops_op() ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): apply_tops_op() ops.append(tokens[i]) i += 1 while len(ops) != 0: apply_tops_op() return values[-1] return compute(expression) # Example usage: # result = evaluate_expression(\\"3 + 5 * 2\\") # should return 13 # result = evaluate_expression(\\"(3 + 5) * 2\\") # should return 16"},{"question":"Julie\'s vegetable garden contains several rows of plants, and each plant has a certain nutrient value. She wants to maximize the total nutrient value she can collect from the garden in a novel way. Julie decides that she will collect nutrient values from two rows of the garden, but she cannot collect from consecutive rows. Given an array of integers where each integer represents the nutrient value of a row of plants, determine the maximum nutrient value she can collect given the constraint that she cannot pick nutrient values from two consecutive rows. Function Description Complete the `maxNutrientValue` function in the editor below. `maxNutrientValue` has the following parameter: - int nutrientValues[m]: the nutrient values for each row of plants. Returns - long: the maximum nutrient value she can collect. Input Format The first line contains an integer m, the number of rows in the garden. The second line contains m space-separated integers, text{nutrientValues}[i]. Constraints 1leq m leq10^5 0leq text{nutrientValues}[i]leq10^4 Sample Input 0 4 3 2 5 10 Sample Output 0 13 Explanation 0 Collecting nutrient values from row 1 and row 3 (indexes 0 and 2) gives 3+10=13. Sample Input 1 5 3 2 7 10 12 Sample Output 1 22 Explanation 1 Collecting nutrient values from row 1 and row 3 (indexes 0 and 3), and row 5 (index 4) gives 3+10+12=25.","solution":"def maxNutrientValue(nutrientValues): Returns the maximum nutrient value Julie can collect while not picking nutrient values from consecutive rows. n = len(nutrientValues) if n == 0: return 0 elif n == 1: return nutrientValues[0] elif n == 2: return max(nutrientValues[0], nutrientValues[1]) # Initialize dp arrays dp = [0] * n dp[0] = nutrientValues[0] dp[1] = max(nutrientValues[0], nutrientValues[1]) for i in range(2, n): dp[i] = max(nutrientValues[i] + dp[i-2], dp[i-1]) return dp[-1]"},{"question":"Joe is exploring new ways to entertain himself with the little wooden blocks he has. He invented a game where he stacks the blocks in such a way that each block can only be placed on top of another block of the same size or larger size. He wants to calculate the maximum height of the stack that he can build given a list of block sizes. Each wooden block has a size associated with it, which is represented by a positive integer. Joe wants to determine the height of the tallest possible stack he can create using the given blocks. Constraints: 1 ≤ N ≤ 10^5 1 ≤ size_i ≤ 10^6 Input: First line of input contains N, the number of blocks. The next line contains N integers, where the i-th integer represents the size of the i-th block. Output: Output a single integer denoting the maximum height of the stack that Joe can build. SAMPLE INPUT 5 3 4 2 1 2 SAMPLE OUTPUT 4 Explanation Joe can stack the blocks in the following order of sizes: [1, 2, 2, 3] or [1, 2, 2, 4]. Hence, the maximum height of the stack is 4. Additional Sample Case: Input: 6 5 3 5 3 2 1 Output: 5 Additional Case Explanation: Joe can stack the blocks in the following order of sizes: [1, 2, 3, 3, 5] or [1, 2, 3, 5, 5]. Hence, the maximum height of the stack is 5.","solution":"def max_stack_height(n, blocks): Given the number of blocks and a list of block sizes, returns the maximum height of the stack that can be built such that each block can only be placed on top of another block of the same size or larger size. if n == 0: return 0 # Sort the blocks blocks.sort() # Return the count of blocks since we can use all of them in a sorted stack return n"},{"question":"You are given a positive integer n. Determine whether it is a power of two. Input The only line of input data contains an integer n (1 ≤ n ≤ 106). Output Output \\"YES\\" if n is a power of two. Otherwise, output \\"NO\\". Examples Input 8 Output YES Input 14 Output NO Note In the first example, 8 can be represented as 2^3, which is a power of two. In the second example, 14 cannot be represented as a power of two.","solution":"def is_power_of_two(n): Determines whether the given integer n is a power of two. Parameters: n (int): A positive integer (1 ≤ n ≤ 106). Returns: str: \\"YES\\" if n is a power of two, \\"NO\\" otherwise. # A number is a power of two if n > 0 and (n & (n - 1)) == 0 if n > 0 and (n & (n - 1)) == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice is a passionate gardener who loves to plant different types of flowers in her garden. She has recently bought several small plots of land where she wants to plant her flowers. Each plot is of the same size and can hold exactly one flower. Alice believes that a garden looks most beautiful when the same type of flowers are planted adjacently. Therefore, she wants to plant her flowers in a way that maximizes the number of contiguous plots with the same type of flower. You have to help Alice by calculating the maximum number of contiguous plots with the same type of flower that can be obtained, given an initial configuration of flower types. -----Input----- The input contains a single string `s` which represents the initial types of the flowers in each plot. Each character in the string denotes the type of the flower. Different characters denote different types of flowers. The string length will be between 1 and 1000. -----Output----- Print a single integer, which is the maximum number of contiguous plots with the same type of flower. -----Examples----- Input ABCAAACBB Output 3 Input AABBBACA Output 4 Input AA Output 2 -----Note----- In the first example, the longest contiguous sequence of the same type of flower is \\"AAA\\", which has a length of 3. In the second example, the longest contiguous sequence of the same type of flower is \\"BBBB\\", which has a length of 4. In the third example, the entire input is a contiguous sequence of the same type of flower, with a length of 2.","solution":"def max_contiguous_flowers(s): Returns the maximum number of contiguous plots with the same type of flower. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 1 return max_len"},{"question":"John is a software developer working on a robot navigation system. The robot needs to navigate through a grid of cells, where each cell might be an obstacle or open space. The robot starts at the top-left corner and needs to reach the bottom-right corner of the grid. The robot can move only down or right at any point in time. Your task is to write a program that counts the number of unique paths the robot can take from the top-left corner to the bottom-right corner. Note that the robot cannot pass through cells that contain obstacles. The grid is represented as a 2D binary array, where 1 represents an obstacle and 0 represents an open space. Input: - The first line of input contains an integer t, the number of test cases. - For each test case: - The first line contains two integers m and n, representing the number of rows and columns of the grid. - The following m lines each contain n integers (either 0 or 1) representing the grid. Output: - For each test case, output a single integer on a new line representing the number of unique paths from the top-left corner to the bottom-right corner. Constraints: 1 ≤ t ≤ 10 1 ≤ m, n ≤ 100 0 ≤ grid[i][j] ≤ 1 SAMPLE INPUT 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 SAMPLE OUTPUT 2 1","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, avoiding cells with obstacles. Args: grid (List[List[int]]): The grid represented as a 2D binary array. Returns: int: The number of unique paths. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[-1][-1] def solve(t, cases): Solves the problem for multiple test cases and returns the results. Args: t (int): Number of test cases. cases (List[Tuple[int, int, List[List[int]]]]): List of test cases, where each test case is a tuple containing number of rows, number of columns, and the grid itself. Returns: List[int]: List of results for each test case. results = [] for case in cases: m, n, grid = case result = unique_paths_with_obstacles(grid) results.append(result) return results"},{"question":"Max loves to collect stamps, and he has a collection consisting of n stamps. Each stamp has a specific rarity level, represented by a positive integer. Rarity levels of stamps can be repeated within his collection. Max wants to display some of his stamps such that each chosen rarity level appears exactly once in the display. Max needs your help to determine the minimum number of stamps he has to select to achieve this. Your task is to determine the minimum number of stamps required to have each rarity level, that appears in his collection, represented exactly once. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of stamps in Max’s collection. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 1 000 000) — the rarity levels of the stamps in Max’s collection. -----Output----- Print a single integer — the minimum number of stamps Max needs to select to have each rarity level exactly once. -----Examples----- Input 7 1 2 3 3 2 1 4 Output 4 Input 5 2 2 2 2 2 Output 1 Input 6 1 6 3 3 1 4 Output 4 -----Note----- In the first sample, the rarity levels present in the collection are [1, 2, 3, 4]. Max needs to select at least one stamp for each rarity level, so the answer is 4. In the second sample, all stamps have the same rarity level [2], hence Max needs to select only one stamp, so the answer is 1. In the third sample, the rarity levels present in the collection are [1, 3, 4, 6]. Max needs to select at least one stamp for each rarity level, so the answer is 4.","solution":"def minimum_stamps_required(n, a): Determines the minimum number of stamps required to have each rarity level exactly once. Parameters: n (int): The number of stamps in the collection. a (list of int): List of integers representing the rarity levels of the stamps. Returns: int: The minimum number of stamps required. # Convert the list to a set to remove duplicates and count unique elements unique_rarities = set(a) # The number of unique elements in the set is the answer return len(unique_rarities)"},{"question":"You are given a binary tree with `n` nodes. You can perform the following operation any number of times (possibly zero): select any two adjacent nodes (i.e., a parent node and a child node) and swap their values. Your task is to determine the minimum possible sum of all nodes after performing any number of the allowed operations. ----- Input Each test case consists of several test cases. The first line contains a single integer `t` (`1 ≤ t ≤ 50`) – the number of test cases. The description of the input data follows. The first line of each test case contains a single integer `n` (`1 ≤ n ≤ 1000`) – the number of nodes in the tree. The following `n-1` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`) representing an edge between nodes `u` and `v`. The next line contains `n` integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 1000`) – the values of the nodes from 1 to n respectively. It is guaranteed that the sum of `n` across all test cases does not exceed `2000`. ----- Output For each test case, print a single integer – the minimum possible sum of all nodes after performing the allowed operations. ----- Examples Input 2 3 1 2 1 3 1 5 3 5 1 2 1 3 1 4 4 5 1 2 3 4 5 Output 9 15 ----- Note In the first test case, by swapping the values of nodes 1 and 3, we get the tree with values `[3, 5, 1]`, and the sum is 3 + 5 + 1 = 9. In the second test case, since the tree is already optimized, no swaps are needed. The sum of the nodes remains 1 + 2 + 3 + 4 + 5 = 15.","solution":"def min_sum_of_nodes(t, test_cases): results = [] for case in test_cases: n, edges, values = case # The sum of the values is the answer regardless of the structure min_sum = sum(values) results.append(min_sum) return results"},{"question":"Create a function that simulates a simple inventory management system for a small shop. The shop tracks the quantity of items and their respective prices. You are required to implement the following features: 1. **Add a New Item** - A new item can be added to the inventory with a name, price, and quantity. - If an item with the same name already exists, update its price and add to its quantity. 2. **Remove an Item** - An item can be removed from the inventory if its quantity becomes zero or if it does not exist. 3. **Update Item Quantity** - The quantity of an existing item can be incremented or decremented. If decrementing results in zero quantity, remove the item from the inventory. - If the item does not exist, do nothing. 4. **Get Item Price** - Retrieve the price of an item if it exists in the inventory. - If the item does not exist, return `None`. 5. **Get Inventory Summary** - Return a list of all items in the inventory, sorted alphabetically by their name. Each item should be represented as a tuple of its name, quantity, and price. The function should support the following operations: - `add_item(name: str, price: float, quantity: int) -> None` - `remove_item(name: str) -> None` - `update_quantity(name: str, quantity: int) -> None` - `get_price(name: str) -> Optional[float]` - `inventory_summary() -> List[Tuple[str, int, float]]` Here is an example for clarity: ```python # Initialize the inventory add_item(\\"apple\\", 0.50, 10) add_item(\\"banana\\", 0.20, 30) add_item(\\"orange\\", 0.80, 20) # Update quantities update_quantity(\\"apple\\", -5) update_quantity(\\"orange\\", 10) # Get prices get_price(\\"banana\\") # returns 0.20 # Remove items update_quantity(\\"apple\\", -5) # \\"apple\\" should be removed from inventory # Get inventory summary inventory_summary() # returns [(\\"banana\\", 30, 0.20), (\\"orange\\", 30, 0.80)] ``` Write the code for this inventory management system in Python. Ensure to handle edge cases, such as negative quantities, non-existent items, and so on.","solution":"from typing import List, Tuple, Optional class Inventory: def __init__(self): self.items = {} def add_item(self, name: str, price: float, quantity: int) -> None: if name in self.items: self.items[name][\'price\'] = price self.items[name][\'quantity\'] += quantity else: self.items[name] = {\'price\': price, \'quantity\': quantity} def remove_item(self, name: str) -> None: if name in self.items: del self.items[name] def update_quantity(self, name: str, quantity: int) -> None: if name in self.items: self.items[name][\'quantity\'] += quantity if self.items[name][\'quantity\'] <= 0: self.remove_item(name) def get_price(self, name: str) -> Optional[float]: if name in self.items: return self.items[name][\'price\'] return None def inventory_summary(self) -> List[Tuple[str, int, float]]: return sorted([(name, details[\'quantity\'], details[\'price\']) for name, details in self.items.items()])"},{"question":"You are playing a game where you have to move a character from the top-left corner of an N times M grid to the bottom-right corner. Your character can only move either right or down. The grid contains some cells marked with obstacles that you cannot pass through. Write a program to count the number of distinct paths that the character can take to reach the bottom-right corner from the top-left corner of the grid. Since this number can be very large, compute it modulo 10^9+7. -----Input----- - The first line of input contains two integers, N and M, the dimensions of the grid. - The next N lines contain M characters each, either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). -----Output----- Print a single integer, the number of distinct paths from the top-left corner to the bottom-right corner of the grid, modulo 10^9+7. If there\'s no valid path, output 0. -----Constraints----- - 1 le N le 1000 - 1 le M le 1000 -----Example Input----- 3 3 . . . . # . . . . -----Example Output----- 2 -----Example Input----- 3 3 . # . # . # . . . -----Example Output----- 0","solution":"MOD = 10**9 + 7 def count_paths(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1]"},{"question":"Oliver has a curiosity for numbers and their fascinating properties. One day, he finds a magic number M, and he wants to perform magical operations on it. The magic number is a positive integer and is represented by the decimal digits d1, d2, ..., dn. Oliver can perform one of the following operations exactly once: 1. Select any one digit and increase it by 1 (the digit 9 becomes 0 if increased). 2. Select any one digit and decrease it by 1 (the digit 0 becomes 9 if decreased). He wants to minimize the new number he obtains after performing exactly one of these operations. If there are multiple ways to achieve the minimum number, he will choose the smallest number obtained by modifying the leftmost digit first. Your task is to determine the minimum number Oliver can get after performing exactly one of the operations. Input format: The first line of input contains a single integer M. Output format: Print the minimum number Oliver can obtain after performing exactly one of the magical operations. Constraints: 1 <= M <= 10^18 SAMPLE INPUT 5308 SAMPLE OUTPUT 4308 Explanation: Oliver can decrease the first digit (5) by 1 to get 4308. Decreasing the first digit results in the smallest possible number.","solution":"def minimum_magic_number(M): M = str(M) possible_numbers = [] for i in range(len(M)): if M[i] != \'0\': decreased = M[:i] + str((int(M[i]) - 1) % 10) + M[i+1:] possible_numbers.append(decreased) if M[i] != \'9\': increased = M[:i] + str((int(M[i]) + 1) % 10) + M[i+1:] possible_numbers.append(increased) return min(possible_numbers)"},{"question":"There is a wizard who has N magical crystals lined in a row. Each crystal has been infused with a certain amount of magical power. The power of the ith crystal is represented by an integer Ai. The wizard wants to perform a sequence of operations to maximize the total power of the crystals. In one operation, he can: 1. Select any two adjacent crystals, say with powers Ai and Ai+1. 2. Combine them into a new single crystal, which will have a power equal to Ai * Ai+1. 3. The new crystal will replace the two original crystals in the array. The wizard can repeat this operation as many times as he wants. The goal is to determine the maximum possible power of the single remaining crystal after performing these operations optimally. Input: - The first line contains an integer T, the number of test cases (1 ≤ T ≤ 10). - Each of the next T lines contains an integer N (2 ≤ N ≤ 50) and the sequence of N integers A1, A2, ..., AN (1 ≤ Ai ≤ 100). Output: - For each test case, output the maximum possible power of the final crystal. Example: Input: 3 2 2 3 3 1 2 3 4 1 2 3 4 Output: 6 6 24 Explanation: - For the first test case, combine the two crystals with power 2 and 3 to get a new crystal with power 6. - For the second test case, one way to get the maximum power is to first combine (1 * 2 = 2), then combine the new crystal with the next one (2 * 3 = 6). - For the third test case, one way to get the maximum power is to combine (1 * 2 = 2), then (2 * 3 = 6), then (6 * 4 = 24).","solution":"def maximize_crystal_power(test_cases): results = [] for case in test_cases: N, crystals = case[0], case[1:] while len(crystals) > 1: max_product = 0 max_index = 0 for i in range(len(crystals) - 1): product = crystals[i] * crystals[i + 1] if product > max_product: max_product = product max_index = i # Combine the crystals combined_power = max_product crystals[max_index] = combined_power crystals.pop(max_index + 1) # Add the last remaining crystal\'s power to the results results.append(crystals[0]) return results"},{"question":"Train Scheduling A busy railway system consists of multiple tracks on which trains can travel. Each track connects two stations directly. However, each track allows only one train to travel at a given time. This means that once a train starts its journey on a track, no other train can use the same track until the first train completes its journey. The railway system has a total of n stations and m tracks. Each track connects two distinct stations u and v. Each track also has a travel time associated with it, which represents the time a train takes to travel from one end of the track to the other. Given the structure of the railway system in array format representing the tracks, you need to determine the minimum amount of time needed so that all trains can reach their respective destinations while ensuring that no two trains use the same track at the same time. Input The first line contains two integers n and m (1 leq n leq 1000, 1 leq m leq 10000), denoting the number of stations and the number of tracks, respectively. Each of the next m lines includes three integers u, v, and t (1 leq u, v leq n, u neq v, 1 leq t leq 100), representing a track between stations u and v with a travel time of t time units. Output Output a single integer, the minimum total time needed so that all trains can reach their destinations. Sample Input 1 4 4 1 2 5 1 3 10 2 4 3 3 4 4 Sample Output 1 13 Sample Input 2 5 6 1 2 2 1 3 4 1 4 8 2 5 7 3 5 3 4 5 1 Sample Output 2 17 Sample Input 3 3 3 1 2 1 2 3 2 3 1 3 Sample Output 3 3 Sample Input 4 6 7 1 2 2 1 3 2 1 4 4 2 5 3 3 5 1 4 5 2 5 6 2 Sample Output 4 10 Explanation: In Sample Output 1, the minimum time needed to make sure all trains reach their respective destinations is 13 units.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, tracks): tracks.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 e = 0 i = 0 while e < n - 1 and i < len(tracks): u, v, w = tracks[i] i = i + 1 x = find(parent, u - 1) # adjust to 0-based index y = find(parent, v - 1) # adjust to 0-based index if x != y: e = e + 1 mst_weight += w union(parent, rank, x, y) return mst_weight def min_train_scheduling_time(n, m, track_list): return kruskal(n, track_list)"},{"question":"You are given an initial string `s` consisting of lowercase English letters, followed by a series of update operations. Each update operation specifies a character to change and its position in the string (1-based index). You need to process all the updates in the order they are given and return the final string after all updates are applied. Input: - The first line contains the initial string `s`. - The second line contains a single integer `n`, the number of update operations. - The following `n` lines each contain a position and a character, separated by a space, representing an update operation to be applied on the string `s`. Output: - Output the final string after applying all the update operations. Constraints: 1 ≤ length of `s` ≤ 10^5 1 ≤ n ≤ 10^5 SAMPLE INPUT abcdef 3 1 z 3 y 6 x SAMPLE OUTPUT zbydex","solution":"def update_string(s, updates): Apply a series of update operations to the input string. Parameters: - s: str, the initial string. - updates: list of tuples, each tuple contains (position, character). Returns: - str, the final string after all updates are applied. # Convert the string to a list of characters for easy modification s_list = list(s) # Apply each update to the list for pos, char in updates: s_list[pos - 1] = char # Convert the list back to a string return \'\'.join(s_list)"},{"question":"Given an undirected weighted graph with `N` nodes and `M` edges, you need to find the minimum cost to add edges to the graph such that there is exactly one unique path between any pair of nodes (i.e., you need to form a tree). Each edge has a cost associated with adding it to the graph. If the graph is already a tree, the cost is 0. ------ Input Format ------ - First line will contain an integer `T` denoting the number of test cases. - For each test case, the first line contains two integers `N` and `M` denoting the number of nodes and edges in the graph. - The next `M` lines each contain three integers `u`, `v`, and `w`, representing an edge between nodes `u` and `v` with cost `w`. ------ Output Format ------ For each test case, output a single line containing the minimum cost required to transform the graph into a tree. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ M ≤ 5000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 ----- Sample Input 1 ------ 2 4 3 1 2 3 2 3 1 3 4 4 3 3 1 2 1 2 3 1 3 1 1 ----- Sample Output 1 ------ 4 0 ----- Explanation 1 ------ Test Case 1: The existing edges form a connected graph but are not a tree because it does not cover all nodes. The minimum cost to add edges to form a tree is 4. Test Case 2: The existing edges already form a tree with 3 nodes, so the cost is 0.","solution":"def find_min_cost_to_form_tree(N, M, edges): Use Kruskal\'s algorithm to find the minimum cost to transform the graph into a tree. parent = list(range(N)) rank = [0] * N def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 edges.sort(key=lambda edge: edge[2]) mst_cost = 0 edges_used = 0 for u, v, w in edges: if find(u - 1) != find(v - 1): union(u - 1, v - 1) mst_cost += w edges_used += 1 if edges_used == N - 1: break return mst_cost if edges_used == N - 1 else -1 def process_test_cases(t, test_cases): results = [] for case in test_cases: N, M, edges = case results.append(find_min_cost_to_form_tree(N, M, edges)) return results"},{"question":"Given an integer n, find the n-th Hexagonal number. The first three hexagonal numbers are 1, 6, and 15. The n-th hexagonal number H_{n} is the number of distinct dots in a pattern of dots consisting of the outlines of regular hexagons with sides up to n dots, when the hexagons are overlaid so that they share one vertex. Example 1: Input: n = 1 Output: 1 Explanation: The first hexagonal number is 1. Example 2: Input: n = 2 Output: 6 Explanation: The second hexagonal number is 6. Example 3: Input: n = 3 Output: 15 Explanation: The third hexagonal number is 15. Your Task: You don\'t need to read input or print anything. Your task is to complete the function getNthHexagonalNum() which takes an Integer n as input and returns the answer. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{5}","solution":"def getNthHexagonalNum(n): Returns the n-th hexagonal number. return n * (2*n - 1)"},{"question":"Given a list of integers, you are tasked with determining the maximum sum of a continuous subarray where the array can be divided into subarrays of different lengths. A continuous subarray is defined as a sequence of elements of the array that are contiguous and maintain their original order. You need to find the maximum sum that can be obtained by any continuous subarray from the given list. INPUT The first line consists of a single integer n, representing the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. OUTPUT Output a single integer which is the maximum sum of any continuous subarray. CONSTRAINTS 1 ≤ n ≤ 100000 -1000 ≤ each element of the array ≤ 1000 SAMPLE INPUT 8 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation: The continuous subarray [4, -1, 2, 1] has the maximum sum of 6.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a continuous subarray in the given list of integers. Implemented using Kadane\'s Algorithm. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def main(input_values): data = input_values.strip().split() n = int(data[0]) arr = list(map(int, data[1:])) return max_subarray_sum(arr)"},{"question":"A magazine publisher keeps track of the number of words in each article before it is published. The articles often go through revisions where they need to meet a required word count exactly. For each article, you can increase or decrease the number of words by removing, adding, or changing one word at a time. Given the starting word count of multiple articles and the required word count, determine the minimum number of single-word edits needed for each article to meet the required word count. For example, consider an article with 450 words and a required word count of 480. To meet the required word count, you would need to add 30 words. Provide a solution to calculate the minimum number of edits for each article and determine the total minimum number of edits required for all articles. -----Input----- The first line contains an integer t (1 le t le 100) representing the number of test cases. Each test case starts with an integer n (1 le n le 100), the number of articles. The next two lines contain n integers each: - The first line contains n integers, a_i (1 le a_i le 10^4) — the current word count of each article. - The second line contains n integers, b_i (1 le b_i le 10^4) — the required word count for each article. -----Output----- For each test case, output a single integer representing the total minimum number of edits needed to make all articles meet their respective required word counts. -----Examples----- Input 2 3 450 620 512 480 600 500 2 150 350 200 300 Output 62 100 -----Note----- In the first test case, the total edits needed are: - For the first article: |450 - 480| = 30 edits - For the second article: |620 - 600| = 20 edits - For the third article: |512 - 500| = 12 edits Total edits = 30 + 20 + 12 = 62 In the second test case, the total edits needed are: - For the first article: |150 - 200| = 50 edits - For the second article: |350 - 300| = 50 edits Total edits = 50 + 50 = 100","solution":"def calculate_minimum_edits(t, test_cases): results = [] for test_case in test_cases: n, current_counts, required_counts = test_case total_edits = 0 for i in range(n): total_edits += abs(current_counts[i] - required_counts[i]) results.append(total_edits) return results"},{"question":"Given a string S, create a new string T by selecting some (possibly all or none) characters from S and rearranging them such that T is a palindrome. You are allowed to select each character from S at most once. -----Input----- - The first line contains a single integer Q denoting the number of queries. The description of Q queries follows. - Each query is described by a single line containing string S consisting of only lowercase English letters. -----Output----- For each query, print \\"YES\\" if it is possible to create a palindrome by selecting some of the characters from S and rearranging them. Otherwise, print \\"NO\\". -----Constraints----- - 1 le Q le 100 - 1 le |S| le 10^5 - The total length of all strings S in all queries combined does not exceed 10^6 -----Example Input----- 3 aabb abc civic -----Example Output----- YES NO YES -----Explanation----- Example case 1: We can rearrange \\"aabb\\" to \\"abba\\", which is a palindrome. Example case 2: The string \\"abc\\" cannot be rearranged into a palindrome because each character appears only once. Example case 3: The string \\"civic\\" is already a palindrome.","solution":"def can_form_palindrome(S): Function to check if it is possible to rearrange the characters of a string S to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # Calculate how many characters have an odd frequency count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into palindrome if it has at most one character with an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\" def process_queries(queries): Process a list of queries and return results for each whether a palindrome can be formed from each string. results = [] for S in queries: results.append(can_form_palindrome(S)) return results"},{"question":"Given an integer n, return all possible combinations of its factors in an increasing order. Note: 1. You may assume that n is always a positive integer. 2. Factors should be greater than 1 and less than n. Input: A single integer n (1 ≤ n ≤ 10^6). Output: Return a list of lists, where each inner list represents one possible combination of factors of n that multiply to n. Example Input: 12 Output: [[2, 6], [2, 2, 3], [3, 4]] Explanation: - 12 can be factored into 2 * 6 - 12 can also be factored into 2 * 2 * 3 - 12 can also be factored into 3 * 4 Note: - Combinations should be printed in sorted order, with the smallest combination first. - Combinations inside each list should be in sorted order as well.","solution":"def get_factors(n): def helper(n, start): factors = [] for i in range(start, int(n ** 0.5) + 1): if n % i == 0: factors.append([i, n // i]) subresults = helper(n // i, i) for subresult in subresults: factors.append([i] + subresult) return factors return helper(n, 2) # Example usage: # print(get_factors(12))"},{"question":"You are organizing a series of coding contests at your university, and you need to schedule the contests such that there is no overlap between them. Each contest spans one or more days, and you want to maximize the number of contests that can be held. For each contest, you know the starting and ending day. Write a program to determine the maximum number of non-overlapping contests that can be held. Input: The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 1000), the number of contests. The next n lines each contain two integers: s_i and e_i (1 ≤ s_i ≤ e_i ≤ 365), representing the start and end day of the contest respectively. The input is terminated by a line containing a single zero. Output: For each dataset, output the maximum number of non-overlapping contests that can be scheduled. Sample Input: ``` 3 1 2 2 3 3 4 4 1 5 2 6 3 4 4 5 0 ``` Sample Output: ``` 3 2 ``` Explanation: In the first dataset, all contests can be held without overlapping as they end right before the next one starts. In the second dataset, you can select the 3rd and 4th contest (days 3-4 and 4-5) or the 1st and 3rd contest (days 1-5 and 3-4), resulting in 2 non-overlapping contests.","solution":"def max_non_overlapping_contests(datasets): results = [] for contests in datasets: contests.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in contests: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') index = 0 datasets = [] while index < len(lines): n = int(lines[index]) if n == 0: break index += 1 dataset = [] for _ in range(n): s, e = map(int, lines[index].split()) dataset.append((s, e)) index += 1 datasets.append(dataset) return datasets"},{"question":"In a faraway land, there is a sequence of n castles built in a straight line. Each castle is protected by a unique magic shield that can be activated or deactivated at different times. The strength of each magic shield is represented by an integer value. A powerful wizard wants to keep track of the strength of the currently active shields at different times. Whenever a shield is activated or deactivated, he records the strength. His goal is to know the maximum strength value from the sequence of currently active shields at each recorded event. Your task is to help the wizard by writing a program that processes a given sequence of shield activations and deactivations, and outputs the maximum strength value at each event. Input The first line of the input contains an integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100,000) — the number of castles. The next line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the strength values of the magic shields for each castle. The next line contains an integer m (1 ≤ m ≤ 100,000) — the number of events. Each of the next m lines describes an event in one of the following formats: - \\"+ i\\" (1 ≤ i ≤ n) — activate the shield of the i-th castle. - \\"- i\\" (1 ≤ i ≤ n) — deactivate the shield of the i-th castle. It is guaranteed that at no point in time will an attempt be made to deactivate a shield that is already inactive or activate a shield that is already active. Output For each event, print the maximum strength value of the active shields after processing the event. If no shields are active, print \\"0\\". Example Input 1 5 10 20 30 40 50 7 + 3 + 1 + 5 - 3 - 1 + 2 - 5 Output 30 30 50 50 50 50 20","solution":"def process_shield_events(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] strengths = case[\'strengths\'] m = case[\'m\'] events = case[\'events\'] active_shields = set() max_strengths = [] for event in events: action, index = event.split() index = int(index) - 1 # Convert to 0-based index if action == \\"+\\": active_shields.add(index) elif action == \\"-\\": active_shields.remove(index) if active_shields: max_strength = max(strengths[i] for i in active_shields) else: max_strength = 0 max_strengths.append(max_strength) results.append(max_strengths) return results"},{"question":"You are given a list of integers and your task is to determine if a subset of the given list sums up to zero. If such a subset exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of integers in the list. The second line contains n integers separated by a space. Output Print \\"YES\\" if there exists a non-empty subset of the given list that sums up to zero, otherwise print \\"NO\\". Examples Input 5 -3 1 2 -1 4 Output YES Input 4 1 2 3 4 Output NO","solution":"from itertools import combinations def subset_sum_zero(n, nums): Determines if there exists a non-empty subset of the list whose sum is zero. Parameters: n (int): The number of integers in the list. nums (List[int]): The list of integers. Returns: str: \\"YES\\" if such a subset exists, \\"NO\\" otherwise. for r in range(1, n + 1): for subset in combinations(nums, r): if sum(subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"John has recently started practicing his mathematical skills and has taken a special interest in prime numbers. He came up with an engaging problem to challenge himself. The problem is to find the smallest prime number greater than a given number N. Your task is to help John by writing a program that, for each test case, finds the smallest prime number greater than N. Input The first line contains T, the number of test cases. The description of the T test cases follows. Each test case consists of a single integer N. Output For each test case, output a single line containing the smallest prime number greater than N. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 10 15 SAMPLE OUTPUT 11 17","solution":"import math def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(n): Finds the smallest prime number greater than n. num = n + 1 while not is_prime(num): num += 1 return num def solve(test_cases): results = [] for n in test_cases: results.append(smallest_prime_greater_than(n)) return results"},{"question":"You\'ve been given a grid with n rows and m columns, filled with non-negative integers. You need to perform operations to make the grid \\"row-increasing\\" which means that every row of the grid should be sorted in non-decreasing order. You can perform the following operation any number of times: you can select any submatrix of the grid, and sort all its rows in non-decreasing order. Determine the minimum number of operations required to make the entire grid row-increasing. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m integers - the elements of the grid (0 ≤ grid[i][j] ≤ 10^9). Output Print a single integer - the minimum number of operations required to make the entire grid row-increasing. Examples Input 3 3 3 1 2 8 5 7 6 4 9 Output 1 Input 2 3 1 2 3 4 5 6 Output 0 Explanation: In the given examples, in the first example, you can select the entire grid and sort its rows to get a row-increasing grid in one operation. In the second example, the grid is already row-increasing, so no operations are needed.","solution":"def min_operations_to_sort_rows(n, m, grid): This function takes the dimensions of a grid (n, m) and the grid itself as input and returns the minimum number of operations required to make each row non-decreasing. # Initial assumption that we need one operation to sort the entire grid\'s rows operations_needed = 1 # Check if the grid is already row-increasing for row in grid: if row != sorted(row): # Since each row is not sorted, we need the full operation return operations_needed # If all rows are already sorted return 0"},{"question":"You are given a list of student names and their respective grades. Your task is to group the students by their grades and return a dictionary where the keys are the grades and the values are lists of student names sorted in ascending order. # Example Given the following input: ```python students = [(\\"John\\", 88), (\\"Emma\\", 90), (\\"Sophia\\", 88), (\\"Mike\\", 75), (\\"Alice\\", 90)] ``` The output should be: ```python { 75: [\\"Mike\\"], 88: [\\"John\\", \\"Sophia\\"], 90: [\\"Alice\\", \\"Emma\\"] } ``` # Constraints - The `students` list will contain tuples of strings (names) and integers (grades). - The `students` list will have at least one element. - Grades will be between 0 and 100. - Student names will be unique. # Function Signature ```python def group_students_by_grades(students: List[Tuple[str, int]]) -> Dict[int, List[str]]: pass ``` # Additional Notes - Ensure the function sorts the student names in ascending order within each grade group. - The student names and grades in the input list are case-sensitive.","solution":"from typing import List, Tuple, Dict def group_students_by_grades(students: List[Tuple[str, int]]) -> Dict[int, List[str]]: Groups students by their grades and returns a dictionary where keys are grades and values are lists of student names sorted in ascending order. Parameters: - students: List of tuples, where each tuple contains a string (student name) and an integer (grade). Returns: - Dictionary where keys are grades and values are lists of student names sorted in ascending order. grade_dict = {} for name, grade in students: if grade not in grade_dict: grade_dict[grade] = [] grade_dict[grade].append(name) for grade in grade_dict: grade_dict[grade].sort() return grade_dict"},{"question":"You are given an array of N integers. You need to determine if there exists a subset of these integers that sums up to a given integer S. Your task is to write a function that checks if such a subset exists. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of each testcase follows. The first line of each testcase contains two integers: N and S. The second line of each testcase contains the N initial numbers. ------ Output ------ For each test case, output \\"YES\\" (without quotes) if there exists a subset that sums to S, otherwise output \\"NO\\" (without quotes) in a new line. ------ Subtasks ------ Subtask #1 (40 points): 1 ≤ N ≤ 10^{3} 1 ≤ Sum of N over all test cases ≤ 10^{3} Subtask #2 (60 points): Original constraints ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ S ≤ 1000 1 ≤ a_{i} ≤ 100 1 ≤ Sum of N over all test cases ≤ 1000 ------ Sample Input 1 ------ 2 5 9 3 34 4 12 5 4 15 1 2 3 8 ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ Testcase 1: There exists a subset {3, 4, 2} which sums up to 9. Testcase 2: No subset of the given numbers sums up to 15.","solution":"def is_subset_sum_possible(T, test_cases): def subset_sum(arr, n, S): dp = [[False] * (S + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, S + 1): if j - arr[i - 1] >= 0: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][S] results = [] for case in test_cases: N, S, arr = case if subset_sum(arr, N, S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are working on a project to analyze the efficiency of different sorting algorithms. As part of this project, you are tasked with implementing a binary search algorithm to find the position of a specific target value in a sorted list of integers. The sorted list may contain duplicate values, and you need to return the index of any one of the occurrences of the target if it exists. If the target does not exist in the list, return -1. Constraints: * 1 ≤ length of the list ≤ 10^5 * -10^9 ≤ integer values in the list, including the target ≤ 10^9 Input The input is given from Standard Input in the following format: n t a_1 a_2 ... a_n Where: - n is the length of the list. - t is the target value. - a_1, a_2, ..., a_n are the integers in the list, sorted in non-decreasing order. Output Output the index of any one of the occurrences of the target if it exists in the list. If the target does not exist in the list, output -1. Examples Input 5 3 1 2 3 3 5 Output 2 Input 6 4 1 2 3 3 5 6 Output -1 Input 7 10 1 3 3 7 8 9 10 Output 6","solution":"def binary_search(n, t, arr): Perform a binary search to find any position of the target t in the sorted list arr. :param n: Length of the list :param t: Target value to find :param arr: Sorted list of integers :return: Index of any occurrence of target value or -1 if not found left, right = 0, n - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == t: return mid elif arr[mid] < t: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Ever since the legendary weapons nerf, the warriors of the kingdom need better weapons to battle the forces of darkness. The blacksmith has discovered a rare metal that can greatly enhance the properties of the existing weapons. The enhancement requires a chain of steps, where each step doubles the effectiveness of the enhancement from the previous step. However, the blacksmith can only perform a limited number of steps in one go due to the rarity of the metal. You are given the initial effectiveness of a weapon and the number of steps the blacksmith can apply. Your task is to calculate the maximum possible effectiveness of the weapon after the given number of enhancement steps. -----Input----- The first line of each test case contains two integers, `E` (1 ≤ E ≤ 10^9) which is the initial effectiveness of the weapon, and `S` (1 ≤ S ≤ 30) which is the number of enhancement steps available. -----Output----- The output should be a single integer representing the maximum possible effectiveness of the weapon after all given steps have been applied. -----Example----- Input 50 4 Output 800 Input 3 5 Output 96 ------Note------ In the first example, applying 4 steps doubles the effectiveness 4 times, resulting in 50 * 2^4 = 50 * 16 = 800. In the second example, applying 5 steps doubles the effectiveness 5 times, resulting in 3 * 2^5 = 3 * 32 = 96.","solution":"def max_effectiveness(E, S): Returns the maximum possible effectiveness of the weapon after S enhancement steps. Parameters: E : int : Initial effectiveness of the weapon (1 ≤ E ≤ 10^9) S : int : Number of enhancement steps (1 ≤ S ≤ 30) Returns: int : Maximum possible effectiveness after S steps. return E * (2 ** S)"},{"question":"John loves to collect antique coins. He also has a hobby of categorizing them based on their monetary value. However, he likes to check if he can compose a particular monetary sum using any combination of his collected coin values. Given a set of coins with distinct denominations, determine if a given sum can be formed using any combination of these coins. You may assume that there is an infinite number of each coin. Input and Output: First line contains T, the number of test cases. Each test case consists of two integers N and S, where N is the number of different coin denominations, and S is the sum he wants to form. The next line contains N integers which are the values of the coins. For each test case, print \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" (quotes for clarity). Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ S ≤ 10,000 1 ≤ Value of each coin ≤ 1,000 SAMPLE INPUT 2 3 11 1 2 5 2 7 3 6 SAMPLE OUTPUT POSSIBLE IMPOSSIBLE Explanation: In the first test case, John can form the sum 11 using the coins [1, 2, 5] (for example, 5+5+1). In the second test case, it is not possible to form the sum 7 using the coins [3, 6].","solution":"def is_sum_possible(n, s, coins): Function to determine if a given sum can be formed using any combination of given coin denominations. Parameters: n (int): Number of different coin denominations s (int): The sum to form coins (list): List of coin denominations Returns: str: \\"POSSIBLE\\" if the sum can be formed using the given coin denominations, \\"IMPOSSIBLE\\" otherwise. # Initialize a list to store dp values dp = [False] * (s + 1) dp[0] = True # Base case: We can always form the sum 0 for coin in coins: for x in range(coin, s + 1): if dp[x - coin]: dp[x] = True return \\"POSSIBLE\\" if dp[s] else \\"IMPOSSIBLE\\" def check_possibility(queries): results = [] for query in queries: n, s, coins = query result = is_sum_possible(n, s, coins) results.append(result) return results"},{"question":"Lena has a new friend who loves puzzles. Her friend gave her a string consisting of lowercase alphabetical characters only. The task is to determine the minimum number of characters that need to be deleted from the string to make it a palindrome. A palindrome is a string that reads the same backward as forward. Help Lena solve this puzzle by writing a program to determine the minimum number of deletions needed. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^4), where |s| represents the length of the string. -----Output----- Print a single integer representing the minimum number of deletions needed to make the string a palindrome. -----Examples----- Input abcba Output 0 Input abab Output 1","solution":"def min_deletions_to_palindrome(s: str) -> int: Returns the minimum number of deletions needed to make the string a palindrome. n = len(s) # Create a table to calculate the lengths of longest palindromic subsequences dp = [[0] * n for _ in range(n)] # Fill the table for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The result is the number of deletions required to make the string a palindrome return n - dp[0][n - 1]"},{"question":"You are given a list of integers representing the amounts of rainfall over a series of days. Your task is to determine whether there are any two consecutive days within this period where the total rainfall is greater than a given threshold value. If such a pair of consecutive days exists, output the indices of the first such pair (days are 1-indexed). If no such pair exists, output -1. Input: The first line of input contains two space-separated integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 1000), where n is the number of days and t is the threshold value. The second line contains n space-separated integers representing the rainfall values for each day. Output: If there exists a pair of consecutive days where their total rainfall exceeds the threshold value, output the indices of the first such pair. Otherwise, output -1. SAMPLE INPUT 1 5 15 4 8 10 2 7 SAMPLE OUTPUT 1 2 3 SAMPLE INPUT 2 4 20 5 6 7 8 SAMPLE OUTPUT 2 -1 Explanation: In the first sample input, the rainfall amounts are [4, 8, 10, 2, 7]. The first pair of consecutive days where the total rainfall exceeds 15 are the second (8) and third (10) days, with a total rainfall of 18. In the second sample input, there is no pair of consecutive days where the total rainfall exceeds 20.","solution":"def find_consecutive_days(n, t, rainfall): Finds the first pair of consecutive days where the total rainfall exceeds the threshold t. Parameters: n (int): Number of days t (int): Threshold value rainfall (list of int): List of rainfall values for each day Returns: tuple: Indices of the first pair of consecutive days (1-indexed) or -1 if no such pair exists for i in range(n - 1): if rainfall[i] + rainfall[i + 1] > t: return (i + 1, i + 2) return -1"},{"question":"Consider the following problem involving a grid and simple movement: You are given a grid of size `n x m` where each cell in the grid can be either empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You start at the top-left corner of the grid (position (0, 0)) and want to reach the bottom-right corner (position (n-1, m-1)). You can move right (\'R\') or down (\'D\'), provided you do not move into a cell containing an obstacle. However, there is a restriction on the number of moves: exactly `k` moves must be used to reach the destination, without exceeding this limit. Your task is to determine if it\'s possible to reach the destination using exactly `k` moves. Input Format: - The first line contains an integer `t`, the number of test cases. - The first line of each test case contains integers `n`, `m`, and `k`. - The next `n` lines each contain a string of length `m`, representing the grid. Output Format: - For each test case, print \\"YES\\" if it\'s possible to reach the bottom-right corner using exactly `k` moves, otherwise print \\"NO\\". Constraints: 1 ≤ t ≤ 10 1 ≤ n, m ≤ 100 1 ≤ k ≤ 200 The grid contains only \'.\' and \'#\'. Example Input: ``` 2 3 3 4 ..# .#. ... 3 3 4 #.. #.# ... ``` Example Output: ``` YES NO ``` Explanation: For the first test case, a valid path from (0, 0) to (2, 2) using exactly 4 moves is \\"R R D D\\". For the second test case, there\'s no way to reach (2, 2) from (0, 0) using exactly 4 moves due to the obstacles.","solution":"def can_reach_with_exact_moves(n, m, k, grid): Determines if it\'s possible to reach the bottom-right corner of the grid using exactly k moves. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" if k < (n + m - 2): return \\"NO\\" return \\"YES\\" if (n + m - 2) == k else \\"NO\\" def process_test_cases(test_cases): results = [] for tc in test_cases: n, m, k, grid = tc results.append(can_reach_with_exact_moves(n, m, k, grid)) return results # Example usage if __name__ == \\"__main__\\": t = int(input()) test_cases = [] for _ in range(t): n, m, k = map(int, input().split()) grid = [input().strip() for _ in range(n)] test_cases.append((n, m, k, grid)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"In a small town, there are N houses arranged in a row, numbered from 1 to N. Each house has a certain number of candies in it for Halloween, represented by an array A of size N. The town has a special magic rule for Halloween night: You can choose any house i (1 ≤ i ≤ N) and gather all candies from that house, but after collecting candies from house i, you are not allowed to collect candies from its immediate left and right neighbors (i.e., houses i-1 and i+1). Given the array A, you need to find the maximum number of candies you can gather by choosing houses optimally under the magic rule. # Input The first line contains a single integer T, the number of test cases. Each test case consists of two lines: - The first line of each test case contains an integer N, the number of houses. - The second line contains N space-separated integers, representing the array A. # Output For each test case, output a single integer, the maximum number of candies that can be gathered. # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100,000 - 0 ≤ A[i] ≤ 10,000 - The sum of N over all test cases does not exceed 200,000 # Example Input: ``` 3 3 6 7 1 4 2 1 5 8 5 3 2 5 10 7 ``` Output: ``` 7 10 15 ``` Explanation: - For the first test case, the optimal way is to pick the 2nd house with 7 candies. - For the second test case, the optimal way is to pick the 4th house with 8 candies. - For the third test case, the optimal way is to pick the 2nd and 4th houses (2 + 10 = 12), or the 3rd and 4th houses (5 + 10 = 15). The answer is 15.","solution":"def max_candies(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] A = test_cases[i][1] if n == 0: results.append(0) continue if n == 1: results.append(A[0]) continue # Using dynamic programming to solve it # dp[i] will store the maximum candies we can gather from house 1 to house i dp = [0] * n dp[0] = A[0] if n > 1: dp[1] = max(A[0], A[1]) for j in range(2, n): dp[j] = max(dp[j-1], A[j] + dp[j-2]) results.append(dp[-1]) return results"},{"question":"Alice is organizing a book club and has N different books. Each book can be of one of M genres. She wants to create exactly two subgroups for the book club such that no two books from the same genre end up in the same subgroup. Determine if it\'s possible to divide the books into two subgroups according to the rules. -----Constraints----- - 1 leq N leq 200 - 1 leq M leq 100 - Each genre is represented by an integer between 1 and M (inclusive). -----Input----- Input is given from Standard Input in the following format: N M G1 G2 ... GN Where Gi is the genre of the ith book. -----Output----- If it\'s possible to divide the books into two subgroups according to the rules, print Possible; otherwise, print Impossible. -----Sample Input----- 5 3 1 2 1 3 2 -----Sample Output----- Possible A possible division is: Subgroup 1 = {2, 4}, Subgroup 2 = {1, 3, 5}.","solution":"def can_divide_books(N, M, genres): Determines if the books can be divided into two subgroups such that no two books from the same genre end up in the same subgroup. Arguments: N -- int, number of books M -- int, number of genres genres -- list of int, each integer represents the genre of corresponding book Returns: str -- \'Possible\' if the books can be divided as per the rules, otherwise \'Impossible\' from collections import Counter genre_count = Counter(genres) for count in genre_count.values(): if count > 2: # If any genre appears more than twice, can\'t divide into two subgroups return \'Impossible\' return \'Possible\'"},{"question":"Problem Statement Imagine you\'re designing a new computational photography application. One cool feature you\'re working on is to apply various filters to enhance the colors of an image. The image is represented as a 2D grid where each cell contains single character representing the color of that pixel (e.g., \'R\' for red, \'G\' for green, \'B\' for blue, etc.). Your task is to identify and count the number of distinct connected regions of the same color in the grid. Here, two cells are considered connected if they share a common border (not just a corner). Write a function to efficiently count these distinct regions of same color in the grid. Input: - An integer `T`, the number of test cases. - For each test case: * Two integers `N` and `M` representing the number of rows and columns in the grid. * `N` strings of length `M` each representing the grid. Output: For each test case, output the number of distinct connected regions of the same color in the grid. Constraints: - `1 ≤ T ≤ 50` - `1 ≤ N, M ≤ 1000` Sample Input: ``` 2 4 5 RRRRR RRGGG RRRGG GGGGG 2 3 BBB BBB ``` Sample Output: ``` 2 1 ``` Explanation: For the first test case: ``` RRRRR RRGGG RRRGG GGGGG ``` There are 2 distinct regions: one for \'R\' and one for \'G\'. For the second test case: ``` BBB BBB ``` There is only 1 distinct region, because all \'B\' cells are connected. (Note: Convert the problem described to runnable code segment only if necessary.)","solution":"def count_connected_regions(grid): def dfs(x, y, color): # Perform depth-first search to mark all connected cells of the same color stack = [(x, y)] while stack: cx, cy = stack.pop() if (cx, cy) not in visited and grid[cx][cy] == color: visited.add((cx, cy)) # Check all 4 directions if cx > 0: stack.append((cx - 1, cy)) if cx < len(grid) - 1: stack.append((cx + 1, cy)) if cy > 0: stack.append((cx, cy - 1)) if cy < len(grid[0]) - 1: stack.append((cx, cy + 1)) visited = set() regions = 0 for i in range(len(grid)): for j in range(len(grid[0])): if (i, j) not in visited: regions += 1 dfs(i, j, grid[i][j]) return regions def count_color_regions(T, test_cases): results = [] for i in range(T): N, M, grid = test_cases[i] results.append(count_connected_regions(grid)) return results"},{"question":"In the kingdom of Arrayland, each town is represented by a natural number. The king has decided to connect some towns with roads. He wants you to perform the task of outlining a plan for road construction. Each road should connect exactly two towns and no two roads should connect the same pair of towns. The king has a special rule: the product of the numbers of the towns connected by each road should be a multiple of a given integer k. You are given the number of towns n and the integer k. The towns are numbered from 1 to n. Your task is to determine which roads should be built according to the king\'s rule. -----Input----- The first line contains two space-separated integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the number of towns and the special integer respectively. -----Output----- Print multiple lines, each containing two integers a and b (1 ≤ a < b ≤ n) representing a road between town a and town b. If there are multiple valid solutions, print any of them. If it is not possible to construct any road according to the rule, print -1. -----Examples----- Input 5 2 Output 1 2 1 4 2 3 2 4 3 4 Input 4 3 Output 1 3 1 3 2 6 Input 3 10 Output -1 Input 6 6 Output 1 6 2 3 2 6 3 6 4 6","solution":"def find_roads(n, k): roads = [] for a in range(1, n): for b in range(a+1, n+1): if (a * b) % k == 0: roads.append((a, b)) if len(roads) == 0: return -1 return roads"},{"question":"A bustling city has a single train station where multiple trains arrive and depart. Each train requires a specific track to park at the station upon arrival, and the station has a limited number of tracks. Given that the station can allocate a train to a track only if that track is not already occupied at the time of the train\'s arrival, find the maximum number of trains that can be accommodated at the station. Each train i arrives at time A_i and departs at time D_i. A train can occupy a track only during its stay at the station from A_i to D_i (both inclusive). The station aims to maximize the number of trains served through optimal track allocation. -----Input:----- The first line of the input will contain two integers N and T indicating the number of trains and the number of tracks respectively. Lines 2,3,...,N+1 describe the arrival and departure times of the N trains. Line i+1 contains two integers A_i and D_i indicating the arrival and departure times of train i. -----Output:----- Your output must consist of a single integer M, indicating the maximum possible number of trains that can be accommodated at the station given T tracks. -----Constraints:----- - 1 leq N leq 100000. - 1 leq T leq 100. - 1 leq A_i leq 1000000. - A_i leq D_i leq 1000000. - 50 % of test cases will also satisfy 1 leq N leq 10000 and 1 leq T leq 10. -----Sample input:----- 5 2 1 4 2 5 3 6 7 8 5 9 -----Sample output:----- 4","solution":"def max_trains_accommodated(N, T, train_times): Finds the maximum number of trains that can be accommodated at the station given T tracks. Parameters: N (int): Number of trains T (int): Number of tracks train_times (list of tuple): List containing tuples of (arrival time, departure time) for each train. Returns: int: Maximum number of trains that can be accommodated import heapq # Sort trains by their arrival times train_times.sort() # Min-heap to keep track of departure times of trains currently occupying tracks heap = [] max_trains = 0 for arrival, departure in train_times: # Free up tracks that have trains departed before the current train\'s arrival while heap and heap[0] < arrival: heapq.heappop(heap) if len(heap) < T: # Allocate this train to a track heapq.heappush(heap, departure) max_trains += 1 return max_trains"},{"question":"The archery club at the university is planning a special training session. Each participant\'s score is recorded for a series of shots, some of which might miss the target (recorded as zero). To motivate participants, the club wants to highlight the longest sequence of consecutive shots that are not zero (meaning each shot in the sequence hits the target). Help the club by writing a program that finds the length of the longest sequence of consecutive non-zero scores by a participant. Input The first line contains an integer N, the number of shots taken by the participant. The second line contains N space-separated integers representing the scores of those shots. Output Print a single integer, which is the length of the longest sequence of consecutive non-zero scores. SAMPLE INPUT 10 1 2 0 4 5 6 0 0 7 8 SAMPLE OUTPUT 3","solution":"def longest_non_zero_sequence(n, scores): Returns the length of the longest sequence of consecutive non-zero scores. max_length = 0 current_length = 0 for score in scores: if score != 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length # Example usage: # n = 10 # scores = [1, 2, 0, 4, 5, 6, 0, 0, 7, 8] # print(longest_non_zero_sequence(n, scores)) # Output: 3"},{"question":"You are given a sequence of integers where each number is repeated three times, except for one unique integer which appears exactly once. Your task is to find the unique integer. Write a function to find the unique integer from the given list of integers. ------ Input ------ The input consists of a single line containing integers separated by spaces. ------ Output ------ Output the unique integer that does not repeat three times. ------ Constraints ------ - The length of the sequence will be of the form `3n + 1` where (1 leq n leq 10^5). - The integers in the sequence will be between `-10^9` and `10^9`. ----- Sample Input 1 ------ 2 3 2 2 3 3 4 ----- Sample Output 1 ------ 4 ----- Sample Input 2 ------ 5 5 5 1 1 1 6 6 6 -3 ----- Sample Output 2 ------ -3","solution":"def find_unique_integer(arr): Returns the unique integer from the list where every other integer appears exactly three times. # Dictionary to count occurrences of each integer count = {} # Count each integer in the list for num in arr: if num in count: count[num] += 1 else: count[num] = 1 # Find and return the integer that appears exactly once for num in count: if count[num] == 1: return num def parse_input(input_str): Parses the input string into a list of integers. return list(map(int, input_str.split())) def main(input_str): arr = parse_input(input_str) return find_unique_integer(arr)"},{"question":"You are given a sequence of n integers and a target sum k. Your task is to determine if there exists a pair of distinct elements in the sequence that adds up to k. If there is such a pair, return it; otherwise, return -1. For example, if n = 5 and the sequence is [2, 7, 11, 15, 1] with k = 9, then the pair (2, 7) adds up to 9. So, the output should be `(2, 7)`. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains two integers n and k (2 le n le 10^5, 1 le k le 10^9) — the size of the sequence and the target sum, respectively. The second line of each test case contains n integers a_1, a_2, dots , a_n (-10^9 le a_i le 10^9) — the elements of the sequence. It is guaranteed that the sum of all n over all test cases does not exceed 10^5. -----Output----- For each test case, if there exists a pair (a_i, a_j) where i ne j and a_i + a_j = k, print the pair (a_i, a_j) with the smaller element first. If there are multiple valid pairs, print any one of them. If no such pair exists, print -1. -----Example----- Input 3 5 9 2 7 11 15 1 4 10 5 6 3 4 3 7 1 2 4 Output (2, 7) (6, 4) -1","solution":"def find_pair_with_sum(sequence, target_sum): Finds a pair of distinct elements in the sequence that add up to the target_sum. Args: sequence (list of int): The sequence of integers. target_sum (int): The target sum. Returns: tuple or int: A tuple (a_i, a_j) if such a pair exists, else -1. seen = {} for number in sequence: complement = target_sum - number if complement in seen: return (min(number, complement), max(number, complement)) seen[number] = True return -1 def process_test_cases(test_cases): Processes multiple test cases and finds pairs with the given target sum. Args: test_cases (list of tuples): Each tuple contains (n, k, sequence). Returns: list: List of results for each test case. results = [] for n, k, sequence in test_cases: result = find_pair_with_sum(sequence, k) results.append(result) return results"},{"question":"A palindrome is a sequence of characters which reads the same backward as forward, such as \\"radar\\" or \\"level\\". Given a string s, you are allowed to delete at most one character. Determine whether you can make it a palindrome by deleting only one character or if the string is already a palindrome. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 100,000). -----Output----- Output \\"YES\\" if you can make the string a palindrome by deleting at most one character or if it is already a palindrome. Otherwise, print \\"NO\\". -----Examples----- Input abca Output YES Input racecar Output YES Input string Output NO","solution":"def validPalindrome(s): Returns \\"YES\\" if the string can be made into a palindrome by deleting at most one character, or if it is already a palindrome. Otherwise, returns \\"NO\\". def is_palindrome_range(i, j): Check if a substring s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (i+j)//2+1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Either discard the character at left index or the right index and then check the rest is palindrome if is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are given a string `s` representing a large decimal number, which may contain leading zeros. Since the number is very large, you are only allowed to perform operations at the digit level (i.e., you can access or modify individual characters in the string). Your task is to determine the smallest possible number that can be obtained by removing exactly one digit from the given string. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 10^4), the number of test cases. Each of the following t lines contains a string s (1 le |s| le 2 cdot 10^5) representing the large decimal number. The sum of the lengths of all strings in the input doesn\'t exceed 2 cdot 10^5. -----Output----- For each test case, output the smallest possible number that can be obtained by removing exactly one digit from the given string. The output should not contain any leading zeros unless the result is exactly \\"0\\". -----Examples----- Input 3 123 10200 10 Output 12 200 0 -----Note----- In the first example, removing the digit \'3\' results in \\"12\\", which is the smallest possible number. In the second example, removing \'1\' results in \\"0200\\", which, after removing leading zeros, becomes \\"200\\". In the third example, removing either of the digits results in \\"0\\", which is the smallest possible number.","solution":"def smallest_number_after_removal(s): n = len(s) smallest = s[1:] # Initialize with removing the first digit for i in range(1, n): candidate = s[:i] + s[i+1:] if candidate < smallest: smallest = candidate return smallest.lstrip(\'0\') or \\"0\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(smallest_number_after_removal(s)) return results"},{"question":"Sarah is preparing for a cooking competition and is practicing some advanced knife skills. She has a set of various knives, each with a different sharpness value. Given that a recipe involves cutting certain ingredients, she needs to ensure that each cut made is as smooth as possible. A smooth cut requires a knife sharper than a certain sharpness threshold. Sarah has a list of required sharpness values for each ingredient. She wants to know how many knives in her set can smoothly cut each ingredient. Given the list of knife sharpness values and the list of required sharpness values for the ingredients, help Sarah by providing the number of knives suitable for each ingredient\'s required sharpness. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of knives. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9), the sharpness values of the knives. The third line contains an integer m (1 ≤ m ≤ 10^5), the number of ingredients. The fourth line contains m integers b_i (1 ≤ b_i ≤ 10^9), the required sharpness values for the ingredients. -----Output----- Print m integers, where the i-th integer is the number of knives in the set that can smoothly cut the i-th ingredient. -----Examples----- Input 3 10 15 20 2 12 17 Output 2 1 Input 5 5 9 12 16 25 4 10 20 8 5 Output 3 1 4 5 Input 4 1 2 3 4 3 5 3 1 Output 0 2 4","solution":"def count_sharp_knives(knives, required_sharpness): Returns a list of counts of knives suitable for each ingredient\'s required sharpness. Parameters: knives (list): a list of integers representing the sharpness values of the knives. required_sharpness (list): a list of integers representing the required sharpness for each ingredient. Returns: list: a list of integers where the ith integer is the number of knives suitable for the ith ingredient. # Sort knives to use binary search knives.sort() result = [] for required in required_sharpness: # Perform binary search to find the number of knives that can cut smoothly. count = len(knives) - binary_search(knives, required) result.append(count) return result def binary_search(arr, x): Helper function to perform binary search. Parameters: arr (list): sorted list of integers. x (int): the sharpness value to find the position for. Returns: int: the index of the first element in arr that is >= x. left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] >= x: right = mid else: left = mid + 1 return left"},{"question":"A data analyst has a large spreadsheet containing records of sales from the past year. Each record in the spreadsheet contains the name of the product and the total sales amount for a given day. You are tasked with finding the product that has the highest total sales across all records. Write a function that takes a list of sales records and outputs the name of the product with the highest total sales amount. Input format: The input is a list of tuples, where each tuple contains a string (product name) and an integer (sales amount). Output format: Output the name of the product with the highest total sales amount. If there is a tie, output any product name with the highest total sales amount. Constraints: - The length of the input list will be between 1 and 10^5. - The product names will be non-empty strings and their lengths will be at most 100. - The sales amounts will be non-negative integers and will be at most 10^5. SAMPLE INPUT [(\\"Apple\\", 50), (\\"Banana\\", 30), (\\"Apple\\", 60), (\\"Orange\\", 40)] SAMPLE OUTPUT \\"Apple\\"","solution":"def highest_selling_product(sales_records): Returns the name of the product with the highest total sales amount. :param sales_records: List[Tuple[str, int]] :return: str from collections import defaultdict product_sales = defaultdict(int) for product, sales in sales_records: product_sales[product] += sales # Find the product with the maximum total sales max_sales_product = max(product_sales, key=product_sales.get) return max_sales_product"},{"question":"A kangaroo wants to jump to the end of a sequence of rocks arranged in a line. The kangaroo starts at position 0 and must reach the last rock, which is at position n. Each rock has a number written on it, indicating the maximum distance the kangaroo can jump forward from that rock. Formally, given a sequence of n+1 non-negative integers (a0, a1, ..., an), where ai is the maximum distance the kangaroo can jump from rock i, you must determine the minimum number of jumps needed to reach the last rock, starting from the first one. If it is impossible for the kangaroo to reach the last rock, return -1. Input - The first line of the input consists of a single integer n (1 ≤ n ≤ 10^5), the number of rocks (excluding the starting and ending rocks). - The second line consists of n+1 space-separated non-negative integers ai (0 ≤ ai ≤ 10^5). Output - Print a single integer — the minimum number of jumps needed to reach the last rock, or -1 if it is impossible. Examples Input 5 4 2 0 0 2 1 Output 2 Input 5 1 2 0 0 0 1 Output -1 Note Consider the first example, the kangaroo can jump: - From rock 0 to rock 4 (making a jump of 4 positions), - Then from rock 4 to rock 5 (making another jump of 1 position). Thus, the minimum number of jumps needed is 2. In the second example, the kangaroo cannot move past rock 3, making it impossible to reach the last rock. Therefore, the output is -1.","solution":"def min_jumps(n, rocks): Return the minimum number of jumps needed to reach the last rock or -1 if it is impossible. :param n: The number of rocks (excluding the starting and ending rocks) :param rocks: The list of non-negative integers representing the maximum distances the kangaroo can jump from each rock :return: Minimum number of jumps needed to reach the last rock or -1 if it is impossible. if n == 1: return 1 if rocks[0] > 0 else -1 max_reach = 0 jumps = 0 current_end = 0 for i in range(n+1): if i > max_reach: return -1 max_reach = max(max_reach, i + rocks[i]) if i == current_end: if i != n: jumps += 1 current_end = max_reach if current_end >= n: break return jumps if current_end >= n else -1"},{"question":"John is organizing a talent show and wants to arrange performers in a unique sequence. Each performer is assigned a number based on their registration order. John decides to create a special sequence called the \\"Mirror Sequence\\" where each number is followed immediately by its negative, creating a pattern like this: [1, -1, 2, -2, 3, -3, ...]. He needs a program to generate the first N elements of this mirror sequence for a given N. Help John by writing a function that returns the first N elements of the sequence. Input The input starts with an integer T denoting the number of test cases. Each test case contains a single integer N. Output For each test case, output the first N elements of the mirror sequence on a new line, separating the numbers with a space. Constraints 1 <= T <= 10^4 1 <= N <= 10^5 Example Input: 2 5 3 Output: 1 -1 2 -2 3 1 -1 2 Explanation Example case 1: The first 5 elements of the sequence are 1, -1, 2, -2, 3. Example case 2: The first 3 elements of the sequence are 1, -1, 2.","solution":"def mirror_sequence(N): Returns the first N elements of the mirror sequence. :param N: int - the number of elements to generate :return: list - the first N elements of the mirror sequence result = [] for i in range(1, (N // 2) + 1): result.append(i) result.append(-i) # if N is odd, append the last number if N % 2 == 1: result.append((N // 2) + 1) return result def process_test_cases(test_cases): Processes multiple test cases for the mirror sequence generation. :param test_cases: list of int - each representing the N value for a test case :return: list of list of int - the mirror sequence for each test case results = [] for N in test_cases: results.append(mirror_sequence(N)) return results"},{"question":"Write a function, `is_valid_IP`, that takes in a string and returns `True` if the string is a valid IPv4 address, and `False` otherwise. A valid IPv4 address consists of four numeric segments separated by periods, where each segment is an integer between 0 and 255 (inclusive) and does not have leading zeros unless the segment is exactly \'0\'. For example: ```python is_valid_IP(\\"192.168.1.1\\") => True is_valid_IP(\\"0.0.0.0\\") => True is_valid_IP(\\"255.255.255.255\\") => True is_valid_IP(\\"192.168.1.256\\") => False is_valid_IP(\\"192.168.01.1\\") => False is_valid_IP(\\"192.168.1\\") => False is_valid_IP(\\"192.168.1.1.1\\") => False is_valid_IP(\\"123.456.78.90\\") => False is_valid_IP(\\"..255.255.\\") => False is_valid_IP(\\"255a.255.255.255\\") => False ``` ```python is_valid_IP(\\"192.168.1.1\\") # returns True is_valid_IP(\\"0.0.0.0\\") # returns True is_valid_IP(\\"255.255.255.255\\") # returns True is_valid_IP(\\"192.168.1.256\\") # returns False is_valid_IP(\\"192.168.01.1\\") # returns False is_valid_IP(\\"192.168.1\\") # returns False is_valid_IP(\\"192.168.1.1.1\\") # returns False is_valid_IP(\\"123.456.78.90\\") # returns False is_valid_IP(\\"..255.255.\\") # returns False is_valid_IP(\\"255a.255.255.255\\") # returns False ```","solution":"def is_valid_IP(ip): Check if the provided string is a valid IPv4 address. An IPv4 address must have exactly four segments separated by periods. Each segment must be an integer between 0 and 255 inclusive. No segment should have leading zeros unless the segment is exactly \'0\'. :param ip: str - The string to check :return: bool - True if the string is a valid IPv4 address, False otherwise parts = ip.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if part != \'0\' and part.startswith(\'0\'): return False if not 0 <= int(part) <= 255: return False return True"},{"question":"A fast-food restaurant uses a digital billing system to manage the orders of their customers. The system records each order as it is made, including the order number, the amount spent by the customer, and the type of item purchased, such as a burger, fries, or drink. The restaurant manager wants to analyze the sales data to gain insights into the total revenue and the popularity of various items. Your task is to write a program that processes the sales data and computes the total revenue generated and the frequency of each item type sold. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of orders. Each of the next N lines contains the order details in the format: `order_id amount_spent item_type` where `order_id` is a unique integer identifier for the order, `amount_spent` is the amount of money spent on that order (a floating point number), and `item_type` is a string representing the type of item purchased. ------ Output ------ For each test case, output two lines: - The first line should contain the total revenue generated across all orders, rounded to two decimal places. - The second line should list the frequency of each item type sold in the format: `item_type count`, one per line, sorted by item type in alphabetical order. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 0 ≤ amount_spent ≤ 1000.0 `item_type` is a string with a length between 1 and 20 characters. ----- Sample Input 1 ------ 2 3 1 5.50 burger 2 3.25 fries 3 7.80 drink 2 4 4.20 fries 5 6.70 burger ----- Sample Output 1 ------ 16.55 burger 1 drink 1 fries 1 10.90 burger 1 fries 1","solution":"def process_sales_data(T, test_cases): results = [] for i in range(T): N, orders = test_cases[i] total_revenue = 0 item_counts = {} for order in orders: _, amount_spent, item_type = order total_revenue += amount_spent if item_type in item_counts: item_counts[item_type] += 1 else: item_counts[item_type] = 1 total_revenue = round(total_revenue, 2) sorted_items = sorted(item_counts.items()) result = f\\"{total_revenue:.2f}n\\" for item, count in sorted_items: result += f\\"{item} {count}n\\" results.append(result.strip()) return results"},{"question":"You are tasked with developing a system to manage the stock levels of a warehouse. The warehouse records the addition and removal of items continuously, and you need to write a program to track the current stock levels of each item in the inventory, as well as answer queries about the stock levels during specific periods. The input consists of several datasets. Each dataset describes the transactions in the warehouse over a period and ends with a list of queries. The end of all datasets is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows: > N T > transaction1 > ... > transactionT > Q > query1 > ... > queryQ N is the number of different items, and T is the number of transactions. Q is the number of queries. These three are integers satisfying the following: > 1 ≤ N ≤ 1000, 1 ≤ T ≤ 10000, 1 ≤ Q ≤ 100 Each transaction consists of four integers separated by a space, as follows: > t i v a t is the time in minutes since the start of the day, i is the item identifier, v is the volume of the transaction, and a is 1 if items were added to the stock, 0 if items were removed. The following constraints apply: > 0 ≤ t < 1440, 1 ≤ i ≤ N, 1 ≤ v ≤ 100 Each query consists of three integers separated by a space, as follows: > ts te i This represents \\"Find the stock level change for item i between times ts and te\\". ts and te are expressed in minutes from the start of the day, where `0 ≤ ts < te < 1440`. Output For each query, output a single line with the net stock level change for the specified item between the given start and end times. Example Input 3 5 60 1 10 1 120 2 20 0 180 1 5 0 240 3 15 1 300 2 5 1 3 0 240 1 60 300 2 0 300 3 2 4 100 1 50 1 200 2 30 0 300 1 10 0 400 2 10 1 2 0 300 1 100 400 2 0 0 Output 5 -15 15 40 -20","solution":"def manage_stock(datasets): results = [] for dataset in datasets: transactions = dataset[\\"transactions\\"] queries = dataset[\\"queries\\"] stock_changes = {} for trans in transactions: t, i, v, a = trans if i not in stock_changes: stock_changes[i] = [0] * 1440 if a == 1: stock_changes[i][t] += v else: stock_changes[i][t] -= v # Create prefix sum for each item to easily calculate stock changes over time ranges prefix_sum = {} for i in stock_changes: prefix_sum[i] = [0] * 1440 prefix_sum[i][0] = stock_changes[i][0] for t in range(1, 1440): prefix_sum[i][t] = prefix_sum[i][t-1] + stock_changes[i][t] for query in queries: ts, te, i = query if i not in prefix_sum: results.append(0) else: if ts == 0: results.append(prefix_sum[i][te]) else: results.append(prefix_sum[i][te] - prefix_sum[i][ts-1]) return results def process_input(input_data): lines = input_data.split(\\"n\\") datasets = [] idx = 0 while idx < len(lines): line = lines[idx] if line == \\"0 0\\": break n, t = map(int, line.split()) transactions = [] for _ in range(t): idx += 1 transactions.append(list(map(int, lines[idx].split()))) idx += 1 q = int(lines[idx]) queries = [] for _ in range(q): idx += 1 queries.append(list(map(int, lines[idx].split()))) datasets.append({ \\"transactions\\": transactions, \\"queries\\": queries }) idx += 1 return datasets def warehouse_stock_management(input_data): datasets = process_input(input_data) return manage_stock(datasets)"},{"question":"Background Special Agent R needs to investigate a certain area which is represented as a 2D grid. Each cell in the grid can either be passable (\'.\') or obstructed (\'#\'). The starting position of the agent is always at the top-left corner of the grid (0, 0) and the destination is at the bottom-right corner. The agent can only move in four possible directions: up, down, left, and right. The goal is to find out the minimum number of moves required to reach the destination, or determine if it\'s impossible to get there. Problem Given the dimensions of the grid and the grid itself, determine the shortest path from the top-left corner to the bottom-right corner, or conclude that such a path does not exist. Constraints * 2 ≤ R, C ≤ 100 (R is the number of rows, C is the number of columns) * The grid consists of ‘.’ and ‘#’ characters only. Input The input is given in the following format: R C grid_row_1 grid_row_2 ... grid_row_R The first line contains two integers, R and C, representing the number of rows and columns in the grid, respectively. The following R lines each contain a string of length C representing the grid layout (\'.\' for passable cells and \'#\' for obstructed cells). Output Output a single integer, representing the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the destination, output -1 instead. Examples Input 4 4 .... .. ..#. .... Output 6 Input 3 3 .#. .#. ... Output 4 Input 3 3 # #.. ... Output -1","solution":"from collections import deque def min_moves_to_reach_destination(R, C, grid): Returns the minimum number of moves required to reach the bottom-right corner from the top-left corner in the given grid, or -1 if it\'s impossible. # Directions for up, down, left, right moves directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Check if start or end is blocked if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 # Breadth-First Search queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: row, col, steps = queue.popleft() if (row, col) == (R-1, C-1): return steps for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == \'.\' and (nr, nc) not in visited: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Problem You are given a rectangular matrix `matrix` of integers with `m` rows and `n` columns. Each element of the matrix represents the height at that particular cell. You need to determine the largest rectangular area that can be formed by choosing one or more cells such that all chosen cells have the same height. The rectangular area is measured by counting the number of cells included in the rectangle. Write a function `largestRectangle(matrix)` that takes in a matrix and returns the size of the largest rectangular area of cells with the same height. Task Complete the function `largestRectangle(matrix)` that accepts a 2D list of integers `matrix` and returns an integer that represents the area of the largest rectangle with the same height. Examples ```python largestRectangle([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) -- 9 -- Explanation: All cells have the same height (1). The entire matrix is a rectangle of area 3x3=9. largestRectangle([[1, 2, 1], [2, 1, 2], [1, 2, 1]]) -- 1 -- Explanation: The largest rectangle for same height cells can only be a single cell, so area=1. largestRectangle([[3, 3, 3, 1], [3, 3, 3, 1], [3, 3, 3, 1]]) -- 9 -- Explanation: The largest rectangle is formed by the 3x3 submatrix containing only 3\'s. Additional Example largestRectangle([[0, 2, 2], [1, 2, 2], [1, 2, 2]]) -- 6 -- Explanation: The largest rectangular area of cells with the same height is formed by the 2\'s making a 2x3 rectangle. So, area=6. ``` # Note - You can assume that the input matrix has at least one row and one column. - The largest rectangle must be made of cells that share the same height value.","solution":"def largestRectangle(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) max_area = 0 def largestRectangleHistogram(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area for height in set(cell for row in matrix for cell in row): heights = [0] * n for i in range(m): for j in range(n): if matrix[i][j] == height: heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largestRectangleHistogram(heights)) return max_area"},{"question":"You are given a string s containing only lowercase English letters. You can perform the following operation any number of times: - Select any two consecutive characters in the string and remove them if they are the same. Your task is to determine the length of the shortest string that can be obtained after any number of such operations. -----Input----- The first line contains a single integer n (1 le n le 10^5) - the length of the string s. The second line contains the string s of length n consisting of only lowercase English letters. -----Output----- Output the length of the shortest string that can be obtained after any number of operations. -----Examples----- Input 8 abccbaab Output 2 Input 6 aabccb Output 0 -----Note----- In the first example, the optimal operations could be: remove \'cc\' to get \\"abbaab\\" -> remove \'bb\' -> \\"aaab\\" -> remove \'aa\' -> \\"ab\\". In the second example, one optimal sequence of operations is to remove \'aa\' -> \\"bccb\\" -> remove \'cc\' -> \\"bb\\" -> remove \'bb\' -> empty string.","solution":"def shortest_string_length(n, s): Given a string s of length n consisting of only lowercase English letters, this function returns the length of the shortest string that can be obtained after performing any number of operations where two consecutive identical characters can be removed. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"A company wants to optimize the delivery of packages using drones. Each package has a delivery deadline, and the company wants to minimize the number of late packages. Each drone can only carry one package at a time and takes exactly one unit of time to deliver a package to its destination. Given a list of packages with their respective deadlines and a list of available drones, determine the minimum number of late packages. ----Input---- The input consists of: - One line with an integer n (1 leq n leq 10^5), the number of packages. - One line with n integers, representing the deadlines (in units of time) for each package. - One line with an integer m (1 leq m leq 10^5), the number of drones available. ----Output---- Output one integer: the minimum number of late packages. ----Examples---- Example 1: Input: 5 1 2 3 4 5 3 Output: 2 Example 2: Input: 5 1 1 1 1 1 1 Output: 4 Explanation: In Example 1, with 3 drones, you can deliver packages with deadlines 1, 2, and 3 on time. Packages with deadlines 4 and 5 will be late. In Example 2, with only 1 drone, you can only deliver one of the packages by its deadline. The other packages will be late.","solution":"def minimum_late_packages(n, deadlines, m): Determine the minimum number of late packages given the deadlines and number of available drones. Args: n : int : Number of packages deadlines : List[int] : List of deadlines for each package m : int : Number of drones Returns: int : Minimum number of late packages # Sort deadlines in ascending order to deliver earliest due packages first deadlines.sort() # If there are more drones than packages, no package will be late if m >= n: return 0 # Minimize the number of late packages late_packages = 0 for i in range(n): if i < m and deadlines[i] > i: # this package can be delivered on time continue late_packages += 1 return late_packages"},{"question":"The chef has discovered a mysterious rectangular grid of dimensions n x m, filled with non-negative integers. He can perform the following operation on the grid any number of times: Choose a sub-grid and increment every element in the sub-grid by 1. The goal is to turn the entire grid into a grid of all 1s in the minimum number of operations. Write a function to determine this minimum number of operations. ----- Input Format ----- - The first line contains two integers n and m, representing the dimensions of the grid. - The next n lines each contain m integers, representing the grid itself. ----- Output Format ----- Output the minimum number of operations required. ----- Constraints ----- 1 ≤ n, m ≤ 100 0 ≤ grid[i][j] ≤ 1000 ----- Sample Input 1 ----- 2 2 0 0 0 0 ----- Sample Output 1 ----- 1 ----- Explanation 1 ----- Selecting the entire grid as the sub-grid and incrementing all elements by 1 in one operation will turn all elements to 1. ----- Sample Input 2 ----- 3 3 0 1 0 0 0 0 0 0 0 ----- Sample Output 2 ----- 2 ----- Explanation 2 ----- One possible sequence of operations: 1. Choose the sub-grid from (1,1) to (3,2) and increment all elements: The grid becomes 1 2 1 1 1 1 1 1 1 2. Choose the sub-grid from (1,2) to (1,2) and increment all elements: The grid becomes 1 1 1 1 1 1 1 1 1","solution":"def min_operations_to_make_all_ones(grid, n, m): max_value = max(max(row) for row in grid) return max_value + 1 if max_value > 0 else 1 # Sample usage: # n = 2 # m = 2 # grid = [[0, 0], [0, 0]] # print(min_operations_to_make_all_ones(grid, n, m)) # Output: 1"},{"question":"Given a grid of size m x n, you are required to navigate from the top-left corner to the bottom-right corner while collecting as many diamonds as possible. Each cell in the grid either contains a diamond (represented by 1) or is empty (represented by 0). You can only move either down or right at any point in time. Your task is to determine the maximum number of diamonds you can collect on the way to the bottom-right corner. Write a function `maxDiamonds(grid)` that takes a two-dimensional list grid representing the grid of size m x n and returns an integer, the maximum number of diamonds that can be collected. # Input - A 2D list `grid` of size m x n where each element is either 0 or 1. - 1 ≤ m, n ≤ 100 # Output - An integer representing the maximum number of diamonds that can be collected. # Example Input ``` [ [0, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 0], [1, 0, 1, 1] ] ``` Output ``` 5 ``` # Explanation The possible path to collect the maximum diamonds is: right, right, down, down, left, down, right. ``` [ [0, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 0], [1, 0, 1, 1] ] ``` In the grid, the path with the maximum number of diamonds is marked as follows: ``` [ [*, 1, *, 1], [1, *, *, *], [*, 1, 1, *], [1, *, 1, 1] ] ``` Thus the maximum number of diamonds collected is `5`.","solution":"def maxDiamonds(grid): m = len(grid) n = len(grid[0]) # Create a dp table of the same size as grid dp = [[0] * n for _ in range(m)] # Initialize the dp table dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"You are given two arrays of integers, A and B, both of size N. Your task is to determine if you can sort both arrays A and B in such a way that after sorting, every element in A is less than or equal to its corresponding element in B. -----Notes----- To solve this problem, you need to consider whether you can reorder the arrays so that for every index i (0 <= i < N), you have A[i] <= B[i]. -----Constraints----- - The length of the arrays N is between 1 and 100 (inclusive). - Each element in the arrays A and B is an integer between -1000 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N B_1 B_2 ... B_N ``` Where: - N is the size of the arrays. - A_1, A_2, ..., A_N are the elements of array A. - B_1, B_2, ..., B_N are the elements of array B. -----Output----- If it is possible to sort both arrays such that A[i] <= B[i] for all indices i, print \\"Yes\\". Otherwise, print \\"No\\". -----Sample Input----- 4 1 3 5 7 2 4 6 8 -----Sample Output----- Yes We can sort both arrays in ascending order. After sorting: - A becomes [1, 3, 5, 7] - B becomes [2, 4, 6, 8] Here, A[i] <= B[i] for every index i. -----Sample Input----- 3 3 6 2 1 4 5 -----Sample Output----- No Even after sorting both arrays: - A becomes [2, 3, 6] - B becomes [1, 4, 5] Here, A[2] = 6 and B[2] = 5, so A[2] > B[2], which makes it impossible to satisfy the condition for this case.","solution":"def can_be_sorted(N, A, B): Returns \\"Yes\\" if the arrays A and B can be sorted such that A[i] <= B[i] for all indices i, otherwise returns \\"No\\". A.sort() B.sort() for i in range(N): if A[i] > B[i]: return \\"No\\" return \\"Yes\\""},{"question":"Given an undirected graph represented by a list of edges, write a program to find the shortest path between two nodes using the Breadth-First Search (BFS) algorithm. You will be provided with multiple test cases. For each test case, you are given an integer N representing the number of nodes (numbered from 0 to N-1) and an integer M representing the number of edges. This is followed by M pairs of integers representing the edges between nodes. Finally, you are given two integers, `start` and `end`, representing the starting node and the destination node for which you need to find the shortest path. If a path exists between the `start` and `end` nodes, output the length of the shortest path. If no path exists, output `-1`. Input: The input consists of multiple test cases. - The first line of each test case contains two integers `N` and `M` (1 ≤ N ≤ 100, 0 ≤ M ≤ 5000), representing the number of nodes and edges respectively. - The next `M` lines each contain two integers `u` and `v`, representing an undirected edge between nodes `u` and `v` (0 ≤ u, v < N). There will be no self-loops or multiple edges between any pair of nodes. - The final line of each test case contains two integers `start` and `end` (0 ≤ start, end < N). The input is terminated by a line containing two zeros. Output: For each test case, print a line in the format \\"Case X: Y\\", where X is the test case number (starting from 1) and Y is the length of the shortest path from `start` to `end`. If there is no path, print `-1` instead. Examples: Input ``` 4 4 0 1 0 2 1 2 2 3 0 3 3 2 0 1 1 2 4 3 2 3 1 3 1 2 0 2 0 0 ``` Output ``` Case 1: 2 Case 2: -1 ``` Notes: - Use the BFS algorithm to ensure the shortest path is found in terms of the number of edges traversed. - Each test case is independent, and the edge list could describe different graphs. - Be mindful of edge cases, such as no edges, or graphs where the start and end nodes are the same.","solution":"from collections import deque, defaultdict def bfs_shortest_path(n, edges, start, end): if start == end: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * n queue = deque([(start, 0)]) # (current_node, distance) visited[start] = True while queue: current_node, distance = queue.popleft() for neighbor in graph[current_node]: if not visited[neighbor]: if neighbor == end: return distance + 1 queue.append((neighbor, distance + 1)) visited[neighbor] = True return -1 def solve_graph_cases(test_cases): results = [] case_number = 1 for n, m, edges, start, end in test_cases: result = bfs_shortest_path(n, edges, start, end) results.append(f\\"Case {case_number}: {result}\\") case_number += 1 return results # Example usage def main(): input_data = [ (4, 4, [(0, 1), (0, 2), (1, 2), (2, 3)], 0, 3), (3, 2, [(0, 1), (1, 2)], 0, 2), (4, 3, [(2, 3), (1, 3), (1, 2)], 0, 2) ] results = solve_graph_cases(input_data) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"Write a function `split_list` that takes a list of integers and splits it into two lists. The first list should contain the even indexed elements (0, 2, 4, ...) and the second list should contain the odd indexed elements (1, 3, 5, ...). Examples: Input: [2, 1, 4, 3, 6, 5] Output: ([2, 4, 6], [1, 3, 5]) Input: [10, 20, 30, 40, 50] Output: ([10, 30, 50], [20, 40]) Input: [] Output: ([], [])","solution":"def split_list(lst): Splits a list into two lists: one with even indexed elements and one with odd indexed elements. Parameters: lst (list): The list of integers to be split. Returns: tuple: A tuple containing two lists: the first list with even indexed elements and the second list with odd indexed elements. even_indexed = lst[0::2] odd_indexed = lst[1::2] return even_indexed, odd_indexed"},{"question":"A beekeeper named Jane owns a rectangular honeycomb composed of hexagonal cells. Each cell in the honeycomb can independently be either filled with honey or empty. When consecutive filled cells form a connected component within the honeycomb, this component is considered a honey cluster. Two cells are considered connected if they share a common edge. Jane wants to determine the number of distinct honey clusters in her honeycomb. Note that two honey clusters are distinct if there is no direct path formed by adjacent filled cells between them. However, an important consideration is that Jane wants the honey clusters considered in a particular manner. More precisely, if a filled honey cluster has exactly one cell, it will not be counted. Given the configuration of the honeycomb, can you help Jane by calculating the number of distinct honey clusters that have more than one cell? -----Input----- The first line of input consists of two space-separated integers R and C (1 leq R, C leq 50), specifying the dimensions of the honeycomb. The next R lines each contain C characters. Each character is either \'.\' (representing an empty cell) or \'#\' (representing a cell filled with honey). -----Output----- Print a single integer representing the number of distinct honey clusters with more than one cell in the honeycomb. -----Examples----- Sample Input: 4 5 .#..# ..# ..# .#... Sample Output: 2 Explanation: There are two valid honey clusters with more than one cell: 1. The cluster formed by cells in the first two rows (positions 2,1 and 1,1), and the second and third columns (positions 1,2 and 1,3) which touch each other. 2. The cluster formed by cells in the row with index 3 and columns with indexes 3,4,5. Note: The cell at position 4,4 does not count because it forms a single-cell cluster.","solution":"def count_honey_clusters(R, C, honeycomb): Counts the number of distinct honey clusters with more than one cell in the honeycomb. :param R: int: Number of rows in the honeycomb :param C: int: Number of columns in the honeycomb :param honeycomb: List[str]: Representation of the honeycomb :return: int: Number of distinct honey clusters with more than one cell def dfs(row, col): stack = [(row, col)] honeycomb[row][col] = \'.\' cells_in_cluster = 0 while stack: r, c = stack.pop() cells_in_cluster += 1 for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and honeycomb[nr][nc] == \'#\': honeycomb[nr][nc] = \'.\' stack.append((nr, nc)) return cells_in_cluster honeycomb = [list(row) for row in honeycomb] cluster_count = 0 for row in range(R): for col in range(C): if honeycomb[row][col] == \'#\': if dfs(row, col) > 1: cluster_count += 1 return cluster_count"},{"question":"The Kingdom of Farland has recently introduced a new movie rating system to assess the popularity of the movies based on the votes from the citizens. Each citizen can upvote or downvote a movie. A movie with an equal amount of upvotes and downvotes is considered to be balanced. The kingdom\'s authorities want to assess which movies are balanced, and thus are looking for a way to process the results quickly. Given the results of the votes for each movie, determine if any of them are classified as balanced and, if possible, list them. If no movies have balanced votes, indicate this. Input The first input line contains an integer n (1 ≤ n ≤ 1000), representing the number of movies. The following n lines each contain two integers ui and di (0 ≤ ui, di ≤ 1000), where ui represents the number of upvotes and di represents the number of downvotes for the ith movie. Output First, print the number of movies that are classified as balanced. If there are any balanced movies, print their indices (1-based) from the input list on separate lines. If no movies are balanced, print \\"No balanced movies\\". Examples Input 5 10 10 5 7 3 3 8 2 4 4 Output 3 1 3 5 Input 4 12 13 5 4 8 9 20 19 Output No balanced movies","solution":"def find_balanced_movies(n, votes): Given the number of movies and a list of tuples representing the upvotes and downvotes for each movie, return the number of movies that are balanced and their indices. :param n: int - the number of movies :param votes: list of tuples - each tuple contains two integers representing upvotes and downvotes for a movie :return: tuple - first element is the number of balanced movies, second element is a list of indices of balanced movies balanced_indices = [] for i, (upvotes, downvotes) in enumerate(votes): if upvotes == downvotes: balanced_indices.append(i + 1) if balanced_indices: return len(balanced_indices), balanced_indices else: return 0, \\"No balanced movies\\""},{"question":"Ada is a gardener who loves to design and tend to her garden. She is especially fond of creating beautiful patterns with the flowers. She has a unique way of planting flowers in a straight line. Every flower can either be a rose (represented by \'R\') or a tulip (represented by \'T\'). Ada wants to ensure the garden looks beautiful by keeping the number of changes between different types of flowers as minimal as possible. Specifically, she wants to minimize the number of times an \'R\' is followed by a \'T\' or a \'T\' is followed by an \'R\'. Given a string representation of the garden, can you determine what is the minimum number of such changes needed? -----Input----- The first line contains a single integer t (1 leq t leq 10) – the number of test cases. The description of the test cases follows. Each test case consists of a single line containing a string s (1 leq |s| leq 10^5) representing the current arrangement of the flowers in Ada\'s garden. The string consists only of characters \'R\' and \'T\'. -----Output----- For each test case, output a single line containing the minimum number of changes required. -----Examples----- Input 3 RTTR RRRR RTRTRT Output 2 0 5 -----Explanation----- In the first test case, the string \\"RTTR\\" has two changes: from \'R\' to \'T\' and from \'T\' to \'R\'. The minimum number of changes required is 2. In the second test case, \\"RRRR\\" has no changes between \'R\' and \'T\', hence the output is 0. In the third test case, \\"RTRTRT\\" has five changes: from \'R\' to \'T\', \'T\' to \'R\', \'R\' to \'T\', \'T\' to \'R\', and \'R\' to \'T\'. Thus, the minimum number of changes required is 5.","solution":"def count_flower_changes(arrangements): For each string in the list, count the number of changes between \'R\' and \'T\'. results = [] for s in arrangements: changes = sum(1 for i in range(1, len(s)) if s[i] != s[i - 1]) results.append(changes) return results"},{"question":"A famous maze game is played on a rectangular grid where each cell of the grid represents either an open path or a blocked wall. The player starts at the top-left corner of the grid and must reach the bottom-right corner. The player can only move one step at a time, and each step can be up, down, left, or right, provided the destination cell is within grid bounds and not a blocked wall. Design a function that determines the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the destination, return -1. input The first line contains an integer \'N\' denoting the number of test cases. For each test case, the first line contains two integers \'R\' and \'C\' denoting the number of rows and columns in the grid, respectively. The next \'R\' lines each contain \'C\' characters (\'O\' for open path and \'X\' for blocked wall), representing the grid. output For each test case, print a single integer denoting the minimum number of steps required to reach the bottom-right corner, or -1 if it is not possible. SAMPLE INPUT 3 3 3 OOO OXX OOO 5 5 OOOOO OXOXO OOOOO OXOXO OOOOO 2 2 OX XO SAMPLE OUTPUT 4 8 -1","solution":"from collections import deque def min_steps_in_maze(grid): Returns the minimum number of steps required to reach the bottom-right corner from the top-left corner of the grid, or -1 if it is not possible. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] == \'X\' or grid[rows-1][cols-1] == \'X\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (current_row, current_col, current_steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == rows - 1 and c == cols - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == \'O\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 def solve(input_data): Processes the input data and calls the min_steps_in_maze function for each test case. input_lines = input_data.split(\'n\') test_cases = int(input_lines[0]) result = [] index = 1 for _ in range(test_cases): rows, cols = map(int, input_lines[index].split()) grid = [] for i in range(rows): grid.append(list(input_lines[index + 1 + i])) index += 1 + rows result.append(min_steps_in_maze(grid)) return result"},{"question":"In the city of Gridville, there is a grid of size N x N, where each cell contains either a \'0\' or a \'1\'. A cell containing \'1\' is called a *land* cell, and a cell containing \'0\' is called a *water* cell. Electricity can flow between two land cells if they share an edge. Your task is to determine the number of distinct connected components of land cells in the grid. A connected component is a set of land cells where there\'s a path (via shared edges) from any land cell in the set to any other land cell in the set. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the size of the grid. - The next N lines contain N characters each, representing the grid. ------ Output Format ------ For each test case, output the number of distinct connected components of land cells in the grid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 - Each character in the grid is either \'0\' or \'1\'. ------ Sample Input 1 ------ 2 3 110 010 001 4 1110 0100 0001 0110 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ For the first test case: - The first component consists of the land cells at (0,0), (0,1), and (1,1). - The second component consists of the land cells at (2,2). For the second test case: - The first component consists of the land cells at (0,0), (0,1), (0,2), (1,1). - The second component consists of the land cell at (2,3). - The third component consists of the land cells at (3,1), (3,2).","solution":"def num_connected_components(grid): def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= N or grid[x][y] == \'0\': return grid[x][y] = \'0\' # mark the land cell as visited by changing \'1\' to \'0\' for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # visit all neighbors dfs(x + dx, y + dy) N = len(grid) component_count = 0 for i in range(N): for j in range(N): if grid[i][j] == \'1\': component_count += 1 dfs(i, j) return component_count def count_components_in_multiple_grids(test_cases): results = [] for grid in test_cases: results.append(num_connected_components(grid)) return results"},{"question":"You are given a matrix of characters that represents a grid, and each cell contains a lowercase English letter. Your goal is to find the largest square sub-matrix such that all the cells in that sub-matrix contain the same character. The side length of this largest square sub-matrix is your result. Write a program to solve this problem. Input The input is given in the following format: M N c1,1 c1,2 ... c1,N c2,1 c2,2 ... c2,N ... cM,1 cM,2 ... cM,N The first line contains two integers M and N (1 ≤ M, N ≤ 100) which represent the number of rows and columns of the matrix, respectively. The next M lines each contain N characters, representing the rows of the matrix. Output Output the side length of the largest square sub-matrix where all characters are the same. Examples Input 1 5 6 a a a b b b a a a b b b a a a c c c b b b c c c b b b c c c Output 1 3 Input 2 4 4 p p q q p p q q l l k k l l k k Output 2 2 Input 3 3 3 a b c d e f g h i Output 3 1","solution":"def largest_square_submatrix(matrix): if not matrix: return 0 M = len(matrix) N = len(matrix[0]) # Initialize dp table dp = [[0] * N for _ in range(M)] max_side_length = 0 for i in range(M): for j in range(N): if i == 0 or j == 0: dp[i][j] = 1 else: if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length def read_input_and_solve(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].strip().split()) matrix = [line.strip().split() for line in lines[1:]] return largest_square_submatrix(matrix)"},{"question":"Given an integer N and two arrays A and B of length N, find the maximum absolute difference between any element from A and any element from B. A maximum absolute difference is defined as the maximum value of |a - b|, where a is an element from array A, and b is an element from array B. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the length of arrays A and B. The second line contains N space-separated integers representing the elements of array A. The third line contains N space-separated integers representing the elements of array B. ------ Output ------ For each test case, print a single line containing one integer — the maximum absolute difference between any element from A and any element from B. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 10^5 -10^9 ≤ A[i], B[i] ≤ 10^9 ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 5 -10 -20 -30 -40 -50 50 40 30 20 10 2 -1 1 -1 1 ------ Sample Output 1 ------ 5 100 2 ------ Explanation ------ Example case 1: The maximum absolute difference is |1 - 6| = 5. Example case 2: The maximum absolute difference is |(-50) - 50| = 100. Example case 3: The maximum absolute difference is |(-1) - 1| = 2.","solution":"def max_absolute_difference(T, test_cases): results = [] for test in test_cases: N, A, B = test maxi_A = max(A) mini_A = min(A) maxi_B = max(B) mini_B = min(B) max_diff = max(abs(maxi_A - mini_B), abs(mini_A - maxi_B)) results.append(max_diff) return results"},{"question":"Design an algorithm that finds the maximum number of meetings that can be held in one meeting room. You are given N meetings, each with a start and end time. You need to schedule the highest possible number of meetings so that no two meetings overlap in time. Input Format The first line contains an integer N, the number of meetings. Each of the next N lines contains two space-separated integers, a[i] and b[i], the start and end times of the ith meeting. Constraints 1 leq N leq 10^5 0 leq a[i] < b[i] leq 10^9 Output Format Print the maximum number of meetings that can be held in the meeting room. Sample Input 0 3 1 2 3 4 0 6 Sample Output 0 2 Explanation 0 We can schedule the first meeting from 1-2 and the second meeting from 3-4. The meeting from 0-6 cannot be scheduled because it overlaps with both the first and second meetings. Sample Input 1 4 1 3 2 4 3 5 7 8 Sample Output 1 3 Explanation 1 We can schedule the first meeting from 1-3, the third meeting from 3-5, and the fourth meeting from 7-8. The second meeting from 2-4 cannot be scheduled because it overlaps with the first and third meetings. Therefore, the maximum number of non-overlapping meetings is 3.","solution":"def max_meetings(meetings): Finds the maximum number of non-overlapping meetings. Parameters: meetings (list of tuple): List of tuples where each tuple contains two integers, the start and end times of a meeting. Returns: int: Maximum number of non-overlapping meetings. # Sort meetings based on their end times meetings.sort(key=lambda x: x[1]) last_end_time = 0 total_meetings = 0 for start, end in meetings: if start >= last_end_time: total_meetings += 1 last_end_time = end return total_meetings"},{"question":"You are given an n times n grid, initially filled with zeros. Your task is to perform q operations on this grid. Each operation can be one of the following types: 1. Set all values in row i to value x. 2. Set all values in column j to value y. 3. Query the current value at cell (i, j). After performing all operations, you need to return the results of the query operations in the order they appeared in the input. -----Input----- The first line contains two integers n and q (1 le n, q le 100) — the size of the grid and the number of operations. The next q lines describe the operations. Each operation is given in one of the following formats: - \\"1 i x\\" — which means set all values in row i to x (0 le i < n, 0 le x le 10^9). - \\"2 j y\\" — which means set all values in column j to y (0 le j < n, 0 le y le 10^9). - \\"3 i j\\" — which means query the current value at cell (i, j) (0 le i, j < n). -----Output----- For each query operation, output a single integer — the current value at cell (i, j). -----Examples----- Input 3 5 1 1 5 2 2 3 3 1 1 3 0 2 3 1 2 Output 5 3 3 Input 2 4 1 0 7 2 1 4 3 0 0 3 1 1 Output 7 4 -----Note----- In the first example, after the first operation all values in row 1 are set to 5. After the second operation, all values in column 2 are set to 3. When querying cell (1, 1) the value is 5 (row overwrite). When querying cell (0, 2) the value is 3 (column overwrite). When querying cell (1, 2) the value is 3 (column overwrite). In the second example, after the first operation, all values in row 0 are set to 7. After the second operation, all values in column 1 are set to 4. The queries return 7 and 4 respectively for the specified cells.","solution":"def grid_operations(n, q, operations): rows = [-1] * n # This will store the latest value set for each row cols = [-1] * n # This will store the latest value set for each column results = [] for operation in operations: op = operation[0] if op == 1: i = int(operation[1]) x = int(operation[2]) rows[i] = x elif op == 2: j = int(operation[1]) y = int(operation[2]) cols[j] = y elif op == 3: i = int(operation[1]) j = int(operation[2]) # Determine the value in the cell (i, j) if cols[j] != -1: results.append(cols[j]) else: results.append(rows[i]) return results"},{"question":"Sarah loves playing with strings and has recently learned about palindromes, strings that read the same backward as forward. She wants to play a new game where she transforms a given string into a palindrome by removing the fewest possible characters. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each test case consists of one line containing a string s, which consists of lowercase English letters. The length of s is between 1 and 1000. -----Output----- For each test case, print a single integer — the minimum number of characters Sarah needs to remove to transform the given string into a palindrome. -----Example----- Input 4 abca abcba abcd a Output 1 0 3 0 -----Note----- In the first test case, the string is \\"abca\\". By removing the character \'c\', we can make it a palindrome \\"aba\\". In the second test case, the string \\"abcba\\" is already a palindrome, so no characters need to be removed. In the third test case, for the string \\"abcd\\", by removing three characters (\'b\', \'c\', and \'d\'), we can make it a palindrome \\"a\\". In the fourth test case, the string \\"a\\" is already a palindrome, so no characters need to be removed.","solution":"def min_removals_to_make_palindrome(s): Returns the minimum number of characters to remove to make the given string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1] def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_removals_to_make_palindrome(s)) return results"},{"question":"Alice has a sequence of integers. She wants to find the maximum sum of a contiguous subarray of length K or more. Help Alice calculate the maximum sum modulo M. -----Input----- The first line of input contains an integer T — the number of test cases. T tests follow. For each test case, the first line contains two integers N and K — the number of elements in the sequence and the minimum length of the subarray, respectively. The second line contains N integers, representing the sequence. The third line contains an integer M. -----Output----- For each test case, output the maximum sum of any contiguous subarray of length K or more, modulo M. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - 1 ≤ M ≤ 10^9 - -10^9 ≤ sequence[i] ≤ 10^9 -----Example----- Input: 2 5 3 1 -2 3 4 5 7 6 2 -1 -2 -3 -4 -5 -6 10 Output: 5 9","solution":"def max_subarray_sum_modulo(T, test_cases): results = [] for case in test_cases: N, K = case[0] sequence = case[1] M = case[2] max_mod_sum = float(\'-inf\') for curr_len in range(K, N + 1): current_sum = sum(sequence[:curr_len]) max_sum = current_sum for i in range(curr_len, N): current_sum = current_sum + sequence[i] - sequence[i - curr_len] max_sum = max(max_sum, current_sum) max_mod_sum = max(max_mod_sum, max_sum % M) results.append(max_mod_sum) return results"},{"question":"You are given an array of integers and Q queries, each query containing two integers x and y. For each query, you need to determine the sum of all elements in the array that lie between indices x and y (inclusive). Input: The first line contains an integer N, the number of elements in the array. The second line contains N integers, representing the elements of the array. The next line contains a single integer Q. The following Q lines each contain two integers x and y, representing the range for which you need to find the sum. Output: Output Q lines. On the i^th line print the sum of elements from index x to index y (inclusive) for the i^th query. Constraints: 1 ≤ N ≤ 100,000 1 ≤ elements of the array ≤ 1,000 1 ≤ x ≤ y ≤ N 1 ≤ Q ≤ 100,000 SAMPLE INPUT 5 1 2 3 4 5 3 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15","solution":"def range_sum(arr, queries): Returns the sum of elements for each query range from index x to index y (inclusive). :param arr: List of integers. :param queries: List of tuples, each with two integers (x, y). :return: List of sums for each query. # Precompute prefix sums prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for x, y in queries: # Convert 1-based indices to 0-based sum_range = prefix_sums[y] - prefix_sums[x - 1] results.append(sum_range) return results"},{"question":"A company\'s internal system automatically records access logs in a text file. Each log entry consists of a timestamp, an IP address, and a request type. The log entries are collected in chronological order. However, an unexpected issue caused some log entries to repeat multiple times. As a result, the file contains duplicate entries. Your task is to develop a program that processes the log file and removes any duplicate entries, ensuring that each log entry appears exactly once in the output file while maintaining the original order of appearance for the first occurrence of each unique entry. Input Format A single line containing space-separated log entries. Each log entry is a string in the format: `[timestamp]_[IP]_[requestType]` Output Format A single line containing space-separated unique log entries in the order of their first occurrence. Constraints 1 ≤ number_of_log_entries ≤ 5*10^5 SAMPLE INPUT 1.1.1.1 1.1.1.2 1.1.1.1 1.1.1.3 1.1.1.2 SAMPLE OUTPUT 1.1.1.1 1.1.1.2 1.1.1.3 Explanation The input log entries have duplicates: `1.1.1.1` and `1.1.1.2` appear more than once. The output should contain only the first occurrence of each log entry in the order they first appear in the input: `1.1.1.1 1.1.1.2 1.1.1.3`.","solution":"def remove_duplicates(log_entries): Removes duplicate log entries and retains the order of the first occurrence. Args: log_entries (str): A single line containing space-separated log entries. Returns: str: A single line containing space-separated unique log entries in order of their first occurrence. log_list = log_entries.split() seen = set() unique_logs = [] for log in log_list: if log not in seen: seen.add(log) unique_logs.append(log) return \' \'.join(unique_logs)"},{"question":"Marina loves solving puzzles that involve sequences. One day, she came across a sequence S of length N consisting of integers. A subsequence of S is obtained by deleting some (or possibly no) elements from S without changing the order of the remaining elements. Marina wants to determine the length of the longest palindromic subsequence in the sequence S. A palindromic sequence reads the same forward and backward. Write a function that takes the sequence as input and returns the length of the longest palindromic subsequence. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N - the length of the sequence. - The second line contains N space-separated integers representing the sequence S. ------ Output Format ------ For each test case, output a single line containing one integer - the length of the longest palindromic subsequence in the sequence S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ S[i] ≤ 10^{9} ------ subtasks ------ Subtask 1 (100 points): Original constraints ----- Sample Input 1 ------ 2 5 1 2 3 2 1 6 1 2 3 4 2 1 ----- Sample Output 1 ------ 5 5 ----- explanation 1 ------ - In the first test case, the entire sequence is a palindrome, so the length of the longest palindromic subsequence is 5. - In the second test case, the longest palindromic subsequence is \\"1 2 3 2 1\\", which has a length of 5.","solution":"def longest_palindromic_subseq(seq): n = len(seq) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table in bottom-up manner for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if seq[i] == seq[j]: dp[i][j] = 2 + dp[i + 1][j - 1] else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The longest palindromic subsequence length is in dp[0][n-1] return dp[0][n - 1] def process_test_cases(test_cases): results = [] for case in test_cases: N = case[0] sequence = case[1] results.append(longest_palindromic_subseq(sequence)) return results"},{"question":"You are given an array A of N integers. Your task is to handle M operations on this array. Each operation can be one of the following types: 1. Update operation: This changes the value of an element in the array. 2. Range sum query: This reports the sum of all elements within a specified range in the array. Constraints 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ Ai ≤ 10^9 1 ≤ value in updates ≤ 10^9 1 ≤ l, r ≤ N Input format The first line contains a single integer N. The second line contains N space-separated integers, representing the array A. The third line contains a single integer M. Each of the next M lines contains one of the following two types of operations: - \\"1 x y\\": This is an update operation where you change the value at index x to y (1-indexed). - \\"2 l r\\": This is a range sum query where you need to report the sum of elements from index l to r (inclusive, 1-indexed). Output format For each range sum query, output the sum of elements in the specified range on a new line. SAMPLE INPUT 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 SAMPLE OUTPUT 6 14 Explanation Initially the array is [1, 2, 3, 4, 5]. For the first range sum query \\"2 1 3\\", the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. After the update operation \\"1 2 10\\", the array becomes [1, 10, 3, 4, 5]. For the second range sum query \\"2 1 3\\", the sum of elements from index 1 to 3 is 1 + 10 + 3 = 14.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, l, r): l += self.n r += self.n + 1 sum = 0 while l < r: if l % 2 == 1: sum += self.tree[l] l += 1 if r % 2 == 1: r -= 1 sum += self.tree[r] l //= 2 r //= 2 return sum def handle_operations(N, A, M, operations): seg_tree = SegmentTree(A) results = [] for op in operations: if op[0] == 1: seg_tree.update(op[1] - 1, op[2]) elif op[0] == 2: results.append(seg_tree.range_sum(op[1] - 1, op[2] - 1)) return results"},{"question":"You are tasked with managing a city\'s water distribution system comprised of a series of underground pipes. Each pipe connects two distinct water tanks in the city and ensures the flow of water between them. The city has a total of n water tanks, numbered from 1 to n, and m pipes. Each pipe has an associated maintenance cost. Your goal is to determine the minimum cost required to ensure that every water tank is connected directly or indirectly to every other tank, forming a single connected network of water tanks. You can achieve this by maintaining a subset of the pipes. This problem can be solved using an algorithm like Kruskal\'s or Prim\'s to find the Minimum Spanning Tree (MST) of the graph formed by the water tanks and pipes. Input: - The first line contains two integers, n and m, where n is the number of water tanks (2 ≤ n ≤ 1000) and m is the number of pipes (1 ≤ m ≤ 5000). - The following m lines each contain three integers u, v, and w, where u and v are the connected water tanks (1 ≤ u, v ≤ n, u ≠ v), and w is the maintenance cost of that pipe (1 ≤ w ≤ 10000). Output: - A single integer representing the minimum maintenance cost required to connect all the water tanks. Example: Input: ``` 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 ``` Output: ``` 6 ``` In this example, the minimum cost to ensure every water tank is connected, forming a connected network, is 6. One way to achieve this is by keeping the pipes (1-2), (1-3), and (1-4) with costs 1, 2, and 3, respectively, forming a minimum spanning tree. The solution should efficiently compute the minimum cost using a suitable algorithm like Kruskal\'s or Prim\'s algorithm given the constraints.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 mst_edges_count = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w mst_edges_count += 1 if mst_edges_count == n - 1: break return mst_cost def minimum_cost_to_connect_water_tanks(n, m, pipes): edges = [] for pipe in pipes: u, v, w = pipe edges.append((u, v, w)) return kruskal(n, edges)"},{"question":"Design a Locker Security System. Input: First line contains T - Total number of lockers in the system. Next line contains T space-separated integers, where each integer Li (1 ≤ Li ≤ 50) represents a locker state. If Li is even, the locker is considered unlocked. If Li is odd, the locker is locked. Output: Print the number of unlocked lockers and locked lockers in the system. Constraints: 1 ≤ T ≤ 100 SAMPLE INPUT 5 2 3 4 5 6 SAMPLE OUTPUT 3 2 Explanation: In the sample input, there are 5 lockers. The states are [2, 3, 4, 5, 6]. - Unlocked lockers: 2, 4, 6 (3 in total) - Locked lockers: 3, 5 (2 in total) Thus, the output is \\"3 2\\".","solution":"def count_lockers_states(T, lockers): Returns the number of unlocked and locked lockers in the system. Args: T: Integer representing the total number of lockers. lockers: List of integers representing locker states. Returns: Tuple with two integers: number of unlocked lockers and number of locked lockers. unlocked = sum(1 for locker in lockers if locker % 2 == 0) locked = T - unlocked return unlocked, locked"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to determine the smallest lexicographical string that can be obtained by performing a sequence of operations on the given string `s`. In each operation, you can choose any prefix of `s` and move it to the end of the string. Input - A single string `s` (1 ≤ |s| ≤ 1000) composed solely of lowercase English letters. Output - The smallest lexicographical string that can be achieved by rotating the given string. Example Input ``` cba ``` Output ``` acb ``` Input ``` abcdef ``` Output ``` abcdef ``` Note In the first example, by rotating the prefix \\"cb\\" and moving it to the end of the string \\"a\\", we can achieve the string \\"acb\\" which is the smallest lexicographical permutation. In the second example, the string is already in the smallest lexicographical order so no operations are needed.","solution":"def smallest_lexicographical_string(s): Returns the smallest lexicographical string that can be obtained by performing a sequence of prefix rotations on the given string s. n = len(s) smallest = s for i in range(n): rotated = s[i:] + s[:i] if rotated < smallest: smallest = rotated return smallest"},{"question":"A common operation in text processing involves counting the frequency of different elements. For instance, given a sequence of characters, you may be interested in finding the most frequent subsequence of a given length. In this problem, your task is to implement a function that finds the most frequent subsequence of a specified length in a given string. If there are multiple subsequences with the same highest frequency, return the lexicographically smallest one. Write a function to solve the following problem. -----Input----- The function accepts two parameters: 1. A string `s` of length from 1 to 100000, consisting of lowercase English letters. 2. An integer `k` where 1 <= k <= min(10, len(s)), indicating the length of the subsequences to consider. -----Output----- Return the most frequent subsequence of length `k` in the string. If there are multiple subsequences with the same highest frequency, return the lexicographically smallest one. -----Examples----- Input s = \\"aabbcc\\", k = 2 Output \\"aa\\" Input s = \\"abcabcabc\\", k = 3 Output \\"abc\\" -----Note----- In the first example, the subsequence \\"aa\\" appears 1 time, \\"ab\\" appears 2 times, \\"bb\\" appears 1 time, \\"bc\\" appears 2 times, \\"cc\\" appears 1 time. \\"aa\\" is returned as it is lexicographically smallest among subsequences appearing 1 time. In the second example, the subsequences \\"abc\\", \\"bca\\", and \\"cab\\" all appear 2 times, but \\"abc\\" is the lexicographically smallest one among them.","solution":"from collections import Counter def most_frequent_subsequence(s, k): Returns the most frequent subsequence of length k in the string s. If there are multiple subsequences with the same highest frequency, the lexicographically smallest one is returned. n = len(s) subsequences = [s[i:i+k] for i in range(n-k+1)] frequency = Counter(subsequences) max_freq = max(frequency.values()) most_frequent_subsequences = [seq for seq, freq in frequency.items() if freq == max_freq] return min(most_frequent_subsequences)"},{"question":"``` Problem Statement You have been assigned the task of developing a program that can predict the future availability of magical fruits in a garden. These magical fruits appear and disappear according to some unique rules. The garden consists of n zones, and each zone produces a certain number of fruits per day. However, the total number of available fruits can never exceed a certain limit, beyond which the extra fruits disappear. Each day, the amount by which the available fruits change is determined by interaction between different zones. For each zone i, we add or subtract a value based on the number of fruits in that zone, and if the total exceeds the limit L, the excessive fruits are removed. You need to determine the maximum number of fruits available in the garden over a given number of days. Input Format The input consists of three lines: 1. The first line contains two integers n and L, representing the number of zones in the garden and the fruit limit respectively. 2. The second line contains n integers, representing the number of fruits produced by each zone per day. 3. The third line contains an integer d, representing the number of days to simulate. Constraints - 1 ≤ n ≤ 100,000 - 1 ≤ L ≤ 10^9 - 1 ≤ fruit production per zone ≤ 10^5 - 1 ≤ d ≤ 10^4 Output Format Output a single integer, the maximum number of fruits available in the garden over the given number of days. Example Input 5 100 10 20 30 40 50 3 Output 100 Explanation On each day, the total fruit count will be 150 (50 + 40 + 30 + 20 + 10), but since the total exceeds the limit L = 100, only 100 fruits are available every day. Hence, the maximum number of fruits available in any given day is 100. ```","solution":"def max_fruits(n, L, fruits_per_day, d): Returns the maximum number of fruits available in the garden over d days, considering the fruit limit L. n: Number of zones L: Fruit limit fruits_per_day: List of fruits produced by each zone per day d: Number of days to simulate # Calculate total fruits produced in one day total_fruits_per_day = sum(fruits_per_day) # Maximum fruits available cannot exceed the limit L max_fruits_available = min(total_fruits_per_day, L) return max_fruits_available"},{"question":"Sophia is organizing a coding competition in which each participant must solve a series of programming problems. To ensure the competition is fair, she wants to assign difficulties to the problems such that no two consecutive problems have the same difficulty. She has a list of problem difficulties that she plans to use. Your task is to help her determine the maximum number of problems that can be assigned in a row under her constraints. Write a program that, given a list of problem difficulties, calculates and prints the maximum number of problems that can be selected in a row such that no two consecutive problems have the same difficulty. -----Input----- The first line contains an integer N (1 le N le 100), the number of problems. The second line contains N integers, each representing the difficulty of a problem. Each integer is between 1 and 1000. -----Output----- Output a single integer representing the maximum number of problems that can be selected in a row with no two consecutive problems having the same difficulty. -----Examples----- Sample Input: 6 3 3 4 4 5 5 Sample Output: 3","solution":"def max_problems_in_row(N, difficulties): if N == 0: return 0 # Initialize the maximum number of problems to 1 (first problem is always selected) max_problems = 1 # Iterate through the list and count the number of non-consecutive difficulties for i in range(1, N): if difficulties[i] != difficulties[i - 1]: max_problems += 1 return max_problems # Example usage: # N = 6 # difficulties = [3, 3, 4, 4, 5, 5] # print(max_problems_in_row(N, difficulties)) # Output: 3"},{"question":"Given a positive integer M and a digit X. Write a function to find the smallest positive integer greater than M which does not contain the digit X in any of its digits. Example 1: Input: M = 28, X = 2 Output: 30 Explanation: The smallest number greater than 28 that does not contain the digit 2 is 30. Example 2: Input: M = 124, X = 4 Output: 125 Explanation: The next number greater than 124 that does not contain the digit 4 is 125. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `removeDigit` which takes 2 integers M and X as input and returns the smallest positive integer greater than M that does not contain the digit X in any of its digits. Expected Time Complexity: O(log(M)) Expected Auxiliary Space: O(1) Constraints: 1 <= M <= 10^12 0 <= X <= 9","solution":"def removeDigit(M: int, X: int) -> int: Finds the smallest positive integer greater than M which does not contain the digit X. X_str = str(X) current = M + 1 while True: if X_str not in str(current): return current current += 1"},{"question":"The local basketball team, the Thunderbolts, participates in a regional tournament. Each player in the Thunderbolts has a certain skill level represented by an integer. The team\'s coach wants to make sure that the skill level gaps between any two teams in a match are within a certain limit to ensure fair play. Given the skill levels of the players and the maximum allowable skill gap, you need to determine if it\'s possible to form two fair teams such that the skill levels of the players in each team follow this rule. A fair team is defined as follows: - The difference between the maximum and minimum skill levels within the team should not exceed the given maximum allowable skill gap. Your task is to check if it is possible to split the players into two fair teams under this rule. If it is possible, print \\"Possible\\", otherwise print \\"Not Possible\\". -----Input----- - First line contains single integer T denoting test cases. - Second line contains two integers N (number of players) and D (maximum allowable skill gap). - Third line contains N space separated integers denoting the skill levels of the players. -----Output----- - For each test case, print \\"Possible\\" if the players can be split into two fair teams, otherwise print \\"Not Possible\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 0 ≤ D ≤ 109 - 0 ≤ skill level of each player ≤ 109 -----Example----- Input: 2 4 3 1 3 6 9 5 2 2 4 6 8 10 Output: Possible Not Possible -----Explanation----- Example case 1: The players can be split as follows: - Team 1: {1, 3} - Team 2: {6, 9} In both teams, the difference between the maximum and minimum skill levels is within the allowable gap (3). Example case 2: It\'s impossible to split the players into two teams such that the skill gap rule is satisfied for both teams.","solution":"def can_form_two_fair_teams(T, test_cases): results = [] for i in range(T): N, D = test_cases[i][:2] skill_levels = test_cases[i][2] skill_levels.sort() left_group = skill_levels[:N // 2] right_group = skill_levels[N // 2:] if (max(left_group) - min(left_group) <= D) and (max(right_group) - min(right_group) <= D): results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results # Example usage: T = 2 test_cases = [ (4, 3, [1, 3, 6, 9]), (5, 2, [2, 4, 6, 8, 10]) ] print(can_form_two_fair_teams(T, test_cases)) # Output should be [\\"Possible\\", \\"Not Possible\\"]"},{"question":"A group of friends decided to play a game called \\"Treasure Hunt\\" in a large rectangular grid. The grid is divided into small square cells, and some of the cells contain obstacles while others are empty. The friends have to navigate from the top-left corner of the grid to the bottom-right corner, collecting as many treasures as possible along the way. The grid is represented as a matrix of integers. An integer `0` indicates an empty cell, an integer `-1` indicates an obstacle, and any positive integer indicates the number of treasures in that cell. The friends can only move one step at a time either to the right or down. Write a program that helps the friends find the maximum number of treasures they can collect. Input The first line contains two integers `m` and `n` — the number of rows and columns in the grid, respectively (1 ≤ m, n ≤ 1000). Each of the next `m` lines contains `n` integers representing the grid cells. Output Print a single integer — the maximum number of treasures the friends can collect. Example Input 3 4 0 1 0 -1 2 0 1 2 0 2 -1 1 Output 6 Explanation One possible path to collect the maximum number of treasures is to move right to (0,1), down to (1,1), right to (1,2), right to (1,3), and finally down to (2,3). The total number of treasures collected along this path is 6.","solution":"def max_treasures(m, n, grid): if grid[0][0] == -1 or grid[m-1][n-1] == -1: return 0 # Initialize a 2D dp array with -inf for obstacles dp = [[-float(\'inf\')] * n for _ in range(m)] dp[0][0] = grid[0][0] # Fill the dp table for i in range(m): for j in range(n): if grid[i][j] == -1: continue if i > 0 and dp[i-1][j] != -float(\'inf\'): dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0 and dp[i][j-1] != -float(\'inf\'): dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return max(dp[m-1][n-1], 0)"},{"question":"You are given a series of words and a text. For each word, you need to determine whether the word is a subsequence of the given text. A word is a subsequence of a text if it can be derived from the text by deleting some or no characters without changing the order of the remaining characters. For each word, print \\"yes\\" if the word is a subsequence of the text, otherwise print \\"no\\". -----Input----- The first line contains the text as a string. The next line contains an integer N denoting the number of words. The following N lines contain one word each. -----Output----- For each word, print \\"yes\\" if the word is a subsequence of the text, otherwise print \\"no\\". -----Constraints----- - 1 ≤ length of text ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ length of each word ≤ 100 -----Example----- Input: helloworld 3 hello hero low Output: yes no yes -----Explanation----- For the example: 1. \\"hello\\" is a subsequence of \\"helloworld\\" (h, e, l, l, o). 2. \\"hero\\" is not a subsequence of \\"helloworld\\". 3. \\"low\\" is a subsequence of \\"helloworld\\" (l, o, w).","solution":"def is_subsequence(word, text): Determines if the word is a subsequence of the text. it = iter(text) return all(char in it for char in word) def check_subsequences(text, words): For each word in words, check if it is a subsequence of the text. Parameters: - text (str): The text string to check against. - words (list of str): List of words to check if they are subsequences of the text. Returns: - list of str: List of \\"yes\\" or \\"no\\" for each word in words. return [\\"yes\\" if is_subsequence(word, text) else \\"no\\" for word in words]"},{"question":"Write a function that finds the longest word in a given string. Your inputs: - A single string, s, that contains multiple words separated by spaces. - The string s will contain only alphabetic characters and spaces. Your expected output is the longest word found in the input string. - If there are multiple words of the same maximum length, return the first one that appears in the input. Your job is to write an algorithm that processes the input string to find and return the longest word.","solution":"def find_longest_word(s): Returns the longest word in the given string s. If there are multiple words with the same maximum length, the first one is returned. longest_word = \\"\\" words = s.split() for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Alice is organizing a garden party and she wants to place plants in a straight line along the garden path. She has P different types of plants and Q empty pots. Each type of plant occupies a space of S cm in the pot. Alice wants to make different combinations of plants such that each combination has exactly Q pots filled. The order in which plants are placed in the pots matters. Write a function `plantCombinations(p, q, s)` that takes three integers P, Q, and S as input and returns the number of different combinations Alice can get. Since the result can be very large, return the answer modulo 10^9 + 7. Example 1: Input: P = 3, Q = 2, S = 5 Output: 9 Explanation: Alice can create the following combinations: (1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), and (3,3). Here each number represents a type of plant. Example 2: Input: P = 2, Q = 3, S = 4 Output: 8 Explanation: Alice can create the following combinations: (1,1,1), (1,1,2), (1,2,1), (1,2,2), (2,1,1), (2,1,2), (2,2,1), and (2,2,2). Here each number represents a type of plant. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `plantCombinations(p, q, s)` which takes 3 Integers P, Q, and S as input and returns the answer. Expected Time Complexity: O(P^Q) Expected Auxiliary Space: O(1) Constraints: 1 <= P, Q, S <= 10^3","solution":"MOD = 10**9 + 7 def plantCombinations(p, q, s): Returns the number of different combinations of plants Alice can get, considering P types of plants and Q pots each combination with P^Q possible combinations modulo 10^9 + 7. return pow(p, q, MOD)"},{"question":"Maria loves walking through the grid of her city. The city is represented by an n x m grid where each cell represents a block. The grid can contain buildings (represented by \'#\') or empty spaces (represented by \'.\'). Maria always starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (n-1, m-1). She can only move right or down at any step and can only walk through empty spaces (\'.\'). Help Maria find out how many distinct paths she can take to reach the destination if any exist. Input The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. - The next n lines contain exactly m characters each (either \'#\' or \'.\'), representing the city grid. Output Output an integer t, the number of distinct paths from the top-left to the bottom-right corner of the grid. Examples Input 3 3 ... .#. ... Output 2 Input 2 2 .# Output 0 Note In the first example, Maria can take two distinct paths: 1. Down -> Down -> Right -> Right 2. Right -> Right -> Down -> Down In the second example, there is no path that Maria can take to reach the bottom-right corner.","solution":"def num_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Helper function to read input values def read_input(): n, m = map(int, input().strip().split()) grid = [input().strip() for _ in range(n)] return n, m, grid"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},F={class:"card-container"},P={key:0,class:"empty-state"},C=["disabled"],j={key:0},R={key:1};function M(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",j,"See more"))],8,C)):l("",!0)])}const L=d(A,[["render",M],["__scopeId","data-v-10b44964"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/5.md","filePath":"deepseek/5.md"}'),z={name:"deepseek/5.md"},U=Object.assign(z,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,U as default};
