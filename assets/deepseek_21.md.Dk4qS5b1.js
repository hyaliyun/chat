import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-b3f915c6"]]),S=JSON.parse('[{"question":"You are given an array A of N integers. Your task is to find the minimum sum of the elements of array A after performing the following operations exactly once: - Split the array A into two non-empty sub-arrays, say B and C, such that B + C = A. - Reverse the sub-array C. For example, if A = [1, 2, 3, 4], one possible way to split A and reverse C is: - Split A into B = [1, 2] and C = [3, 4] - Reverse C to get C = [4, 3] - The result of merging B and C is [1, 2, 4, 3] Your task is to select the split point such that the sum of the resulting merged array is minimized. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line contains an integer N — the size of the array A. - The second line contains N space-separated integers which represent the array A. ------ Output Format ------ For each test case, output the minimum sum of the elements of array A after performing the specified operation. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^{5} # Clarifying that the array has at least two elements 1 ≤ A_{i} ≤ 10^{4} # Clarifying the constraints on array elements ------ Sample Input 1 ------ 2 4 1 2 3 4 3 3 1 2 ------ Sample Output 1 ------ 10 6 ------ Explanation 1 ------ Test case 1: The possible splits are: - B = [1], C = [2, 3, 4] -> Merged array = [1, 4, 3, 2], Sum = 10 - B = [1, 2], C = [3, 4] -> Merged array = [1, 2, 4, 3], Sum = 10 - B = [1, 2, 3], C = [4] -> Merged array = [1, 2, 3, 4], Sum = 10 Hence, the minimum sum is 10. Test case 2: The possible splits are: - B = [3], C = [1, 2] -> Merged array = [3, 2, 1], Sum = 6 - B = [3, 1], C = [2] -> Merged array = [3, 1, 2], Sum = 6 Hence, the minimum sum is 6.","solution":"def minimum_sum_after_split_and_reverse(T, test_cases): Returns the minimum sum of the elements of array A after performing the specified split and reverse operations once per each test case. Parameters: T (int): Number of test cases test_cases (list): List containing tuples, each containing an integer N and a list A of N integers Returns: list: List of integers representing the minimum sum of elements for each test case results = [] for test_case in test_cases: N, A = test_case # Since the problem description guarantees the array A and the split of A has no impact on the sum, # Just summarize the array, as sum remains constant. total_sum = sum(A) results.append(total_sum) return results"},{"question":"Intra-Galactic Transport Optimization The Space Transport Authority (STA) manages transportation schedules within the Milky Way galaxy. Due to recent space trade expansion, they need to optimize transport routes between planets. Each planet is represented as a node, and each direct space route between two planets is an edge with a certain travel cost. The goal is to determine the shortest travel cost between a given pair of planets considering the possibility of multiple stops along the way. In this problem, you are asked to implement an algorithm that finds the shortest path between two specified planets in a weighted graph representing the galaxy\'s transport network. You will be given a series of datasets. Each dataset consists of: - An integer N, the number of planets (nodes). The planets are numbered from 1 to N. - An integer M, the number of direct routes (edges) between the planets. - M triplets in the form \\"U V W\\", where U and V are the planetary nodes connected by a direct route, and W is the travel cost associated with that route. - Two integers S and T, the indices of the start and target planets for which you need to determine the shortest path cost. Your task is to compute the minimum travel cost from planet S to planet T. If there is no path between S and T, output \\"UNREACHABLE\\". Input The input consists of multiple datasets. Each dataset uses the following format: ``` N M U1 V1 W1 U2 V2 W2 ... UM VM WM S T ``` Here: - 2 ≤ N ≤ 500 - 1 ≤ M ≤ 10000 - 1 ≤ Ui, Vi ≤ N - 0 ≤ Wi ≤ 1000 - 1 ≤ S, T ≤ N The input ends with a line containing only the integer -1. Output For each dataset, output the shortest travel cost from S to T. If there is no path from S to T, output \\"UNREACHABLE\\". Sample Input ``` 5 6 1 2 10 1 3 5 2 3 2 3 4 2 2 4 5 4 5 1 1 5 3 2 1 2 3 2 3 4 1 3 6 3 1 2 7 1 3 9 4 5 6 1 4 -1 ``` Sample Output ``` 8 7 UNREACHABLE ``` Requirements: - Design an efficient algorithm to handle the constraints smoothly. - Use appropriate graph algorithms to compute the shortest path effectively.","solution":"import heapq def dijkstra(graph, start, end, n): Find the shortest path from start to end in a graph using Dijkstra\'s algorithm. :param graph: The adjacency list of the graph where graph[u] contains (v, w) pairs. :param start: The starting node. :param end: The target node. :param n: The number of nodes. :return: The shortest path cost or \'UNREACHABLE\'. distances = {node: float(\'infinity\') for node in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'infinity\') else \'UNREACHABLE\' def intra_galactic_transport(inputs): index = 0 results = [] while index < len(inputs): line = inputs[index] if line == \'-1\': break N, M = map(int, line.split()) index += 1 graph = {i: [] for i in range(1, N+1)} for _ in range(M): U, V, W = map(int, inputs[index].split()) graph[U].append((V, W)) graph[V].append((U, W)) # Assuming the routes are bidirectional index += 1 S, T = map(int, inputs[index].split()) index += 1 result = dijkstra(graph, S, T, N) results.append(str(result)) return results"},{"question":"Given a list of n strings where each string consists of lowercase English letters, determine the length of the longest common prefix shared by all the strings in the list. A common prefix of a given set of strings is the longest sequence of characters that each of the strings shares, starting from the first character. -----Input----- - The first line contains an integer n (1 leq n leq 10^5), the number of strings. - The next n lines each contain a string of length between 1 and 100, consisting of only lowercase English letters. -----Output----- - Print an integer, the length of the longest common prefix of the given strings. -----Examples----- Sample Input 1: 3 flower flow flight Sample Output 1: 2 Sample Input 2: 4 dog racecar car plane Sample Output 2: 0 Sample Input 3: 2 prefix prelude Sample Output 3: 3","solution":"def longest_common_prefix(strings): Returns the length of the longest common prefix in a list of strings. Parameters: strings (list of str): A list of strings to find the longest common prefix. Returns: int: Length of the longest common prefix. if not strings: return 0 # Find the shortest string in the list shortest_str = min(strings, key=len) for i in range(len(shortest_str)): char = shortest_str[i] for string in strings: if string[i] != char: return i return len(shortest_str)"},{"question":"A group of islands are connected by various bridges. Each bridge has a unique ID and a specific weight (cost) associated with it. Given a list of bridges and their weights, your task is to determine the minimum cost required to connect all the islands using a subset of the bridges, ensuring the islands are all connected directly or indirectly. You are given a list of tuples, where each tuple represents a bridge and contains three integers: - the ID of the island from which the bridge starts, - the ID of the island to which the bridge leads, - and the weight of the bridge. Write a function `minimalBridgeCost(n, bridges)` where `n` is the number of islands and `bridges` is a list of tuples representing the bridges. Return the minimum cost to connect all islands. Example n=4 bridges=[(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)] The minimum cost to connect all islands is 19. Function Description Complete the minimalBridgeCost function in the editor below. minimalBridgeCost has the following parameters: int n: the number of islands list bridges: a list of tuples where each tuple contains three integers representing a bridge: (island1, island2, weight). Returns int: the minimum cost required to connect all islands. Input Format The input consists of two lines. The first line contains an integer n, the number of islands (numbered from 0 to n-1). The second line contains a list of tuples where each tuple represents a bridge and contains three integers: the starting island, the ending island, and the weight of the bridge. Constraints 1 <= n <= 1000 1 <= weight <= 1000 1 <= len(bridges) <= 10000 Sample Input 4 [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)] Sample Output 19 Explanation: The minimum cost to achieve a connected set of islands involves using the bridges with weights (0,3, 5), (2,3, 4), (0,1, 10), resulting in a total cost of 5+4+10=19.","solution":"def minimalBridgeCost(n, bridges): Returns the minimum cost required to connect all islands. :param n: int, the number of islands :param bridges: list of tuples, where each tuple contains three integers representing a bridge (island1, island2, weight) :return: int, minimum cost required to connect all islands parent = list(range(n)) rank = [0] * n def find(p): if parent[p] != p: parent[p] = find(parent[p]) return parent[p] def union(p1, p2): root1 = find(p1) root2 = find(p2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 # Sort bridges by their weight bridges.sort(key=lambda x: x[2]) mst_cost = 0 mst_edges = 0 for u, v, weight in bridges: if find(u) != find(v): union(u, v) mst_cost += weight mst_edges += 1 if mst_edges == n - 1: break return mst_cost"},{"question":"Problem You have an array of integers, and you need to perform a series of operations to manipulate the values. There are two types of operations: 1. \\"add x y\\" - This operation adds `y` to the `x`-th value of the array (1-indexed). 2. \\"mult x y\\" - This operation multiplies the `x`-th value of the array (1-indexed) by `y`. You will be given an initial array, followed by a series of operations to perform. Your task is to print the final state of the array after applying all the operations. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the initial values of the array. - The third line contains an integer `m` (1 ≤ m ≤ 100), the number of operations. - The next `m` lines each contain an operation in the form of \\"add x y\\" or \\"mult x y\\". # Output - Print the final state of the array in a single line, with elements separated by spaces. Leave a newline at the end. # Example Input 5 1 2 3 4 5 3 add 2 3 mult 4 2 add 1 1 Output 2 5 3 8 5 # Note - In the example, the initial array is `[1, 2, 3, 4, 5]`. - After the first operation \\"add 2 3\\", the array becomes `[1, 5, 3, 4, 5]`. - After the second operation \\"mult 4 2\\", the array becomes `[1, 5, 3, 8, 5]`. - After the third operation \\"add 1 1\\", the array becomes `[2, 5, 3, 8, 5]`.","solution":"def manipulate_array(n, array, m, operations): Manipulates the array according to the list of operations. Parameters: n (int): Number of elements in the array. array (list of int): The initial array. m (int): Number of operations. operations (list of str): List of operations to be performed on the array. Returns: list of int: The final state of the array. for operation in operations: op, x_str, y_str = operation.split() x = int(x_str) - 1 # convert to zero-indexed y = int(y_str) if op == \\"add\\": array[x] += y elif op == \\"mult\\": array[x] *= y return array"},{"question":"# Compute the Mode of a List Write a function that returns the mode(s) of a given list of numbers. The mode of a list is the number that appears most frequently. If more than one number has the highest frequency, return all of them in ascending order. # Examples ```python [1, 2, 2, 3, 3] -> [2, 3] # \'2\' and \'3\' both occur twice, which is the highest frequency. [4, 4, 1, 2, 3, 3, 4] -> [4] # \'4\' occurs three times, which is the highest frequency. [5, 5, 5, 1, 1, 2, 3, 2, 2] -> [2, 5] # \'2\' and \'5\' both occur three times, which is the highest frequency. [9] -> [9] # \'9\' is the only number, hence it is the mode. [8, 8, 8, 8] -> [8] # \'8\' is the only element and it occurs four times. # Constraints * You can assume that the list has at least one element. * The elements will be integers.","solution":"from collections import Counter def find_modes(lst): Returns the mode(s) of a given list of numbers. The mode is the number that appears most frequently. If more than one number has the highest frequency, return all of them in ascending order. if not lst: return [] frequency_count = Counter(lst) max_frequency = max(frequency_count.values()) modes = [num for num, freq in frequency_count.items() if freq == max_frequency] return sorted(modes)"},{"question":"You are given a sorted list of integers `nums` and a target integer `target`. Find the index of the first and last positions of the target in the list. If the target is not present in the list, return [-1, -1]. Your implementation should have a time complexity of O(log n). You may assume that all the integers in the input list `nums` are sorted in ascending order. -----Input----- The first line of the input contains one integer `t` (1 leq t leq 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains the integer `n` (1 leq n leq 10^5) — the number of elements in the list. - The second line contains `n` space-separated integers representing the list `nums` and an integer `target`. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5 (sum n leq 10^5). -----Output----- For each test case, print the first and last positions of the target in the list. If the target is not present, print -1 -1. -----Example----- Input 3 6 1 2 2 2 3 4 2 5 5 7 7 8 8 8 5 1 1 2 3 3 3 Output 1 3 -1 -1 4 6 -----Explanation----- In the first test case, the target 2 is present from positions 1 to 3. In the second test case, the target 8 is not present, hence the output is -1 -1. In the third test case, the target 3 is present from positions 4 to 6.","solution":"def find_first_and_last_position(nums, target): def find_start(nums, target): left, right = 0, len(nums) - 1 start = -1 while left <= right: mid = (left + right) // 2 if nums[mid] >= target: right = mid - 1 else: left = mid + 1 if nums[mid] == target: start = mid return start def find_end(nums, target): left, right = 0, len(nums) - 1 end = -1 while left <= right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 if nums[mid] == target: end = mid return end start = find_start(nums, target) end = find_end(nums, target) return [start, end] def process_test_cases(test_cases): results = [] for nums, target in test_cases: results.append(find_first_and_last_position(nums, target)) return results"},{"question":"Given an array of integers, write a function that reverses the array only between the indices `l` and `r`. You need to implement the function as optimally as possible. Input: - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers, the elements of the array. - The third line contains two integers `l` and `r` (1-based indices) which are the starting and ending indices for the part of the array that needs to be reversed. Output: - Output a single line containing the modified array after reversing the segment from `l` to `r`. Input Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ array[i] ≤ 10^9 - 1 ≤ l ≤ r ≤ n Example: Input: 10 1 2 3 4 5 6 7 8 9 10 3 7 Output: 1 2 7 6 5 4 3 8 9 10 Explanation: The segment from index 3 to 7 (`3 4 5 6 7`) is reversed to `7 6 5 4 3`, resulting in the transformed array `1 2 7 6 5 4 3 8 9 10`.","solution":"def reverse_segment(n, arr, l, r): Reverses the segment of the array from index l to r (1-based indices). Parameters: n (int): The size of the array. arr (list of int): The array of integers. l (int): The starting index (1-based). r (int): The ending index (1-based). Returns: list of int: The array after reversing the segment. # Convert 1-based indices to 0-based indices for Python list manipulation left = l - 1 right = r - 1 # Reverse the segment in place while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Develop a function to return a list of all strings from a given list that are anagrams of a target string. Specifically, write a program that takes a target string and a list of candidate strings as input and outputs a list of all the candidate strings that are anagrams of the target string. An anagram is a word formed by rearranging the letters of another, such as \\"cinema\\" formed from \\"iceman\\". Input The first line contains the target string T. The second line contains an integer N, the number of candidate strings. The following N lines each contain one candidate string. Output Return a list of strings that are anagrams of the target string T. The order of the output should be the same as provided in the input list. If no anagrams are found, return an empty list. Constraints 1 ≤ N ≤ 100 1 ≤ Length of T and each candidate ≤ 100 SAMPLE INPUT listen 5 enlist google inlets banana silent SAMPLE OUTPUT [\'enlist\', \'inlets\', \'silent\']","solution":"def find_anagrams(target, candidates): Returns a list of all strings from the candidates list that are anagrams of the target string. def sort_string(s): return \'\'.join(sorted(s)) target_sorted = sort_string(target) anagrams = [candidate for candidate in candidates if sort_string(candidate) == target_sorted] return anagrams"},{"question":"=====Function Descriptions===== cumsum The cumsum tool returns the cumulative sum of the elements along the specified axis. import numpy my_array = numpy.array([ [1, 2, 3], [4, 5, 6] ]) print numpy.cumsum(my_array, axis = 0) #Output : [[1 2 3] [5 7 9]] print numpy.cumsum(my_array, axis = 1) #Output : [[1 3 6] [4 9 15]] print numpy.cumsum(my_array, axis = None) #Output: [ 1 3 6 10 15 21] By default, the axis is None. Therefore, it computes the cumulative sum of the flattened array. prod The prod tool returns the product of array elements over a given axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.prod(my_array, axis = 0) #Output : [3 8] print numpy.prod(my_array, axis = 1) #Output : [2 12] print numpy.prod(my_array, axis = None) #Output: 24 By default, the axis is None. Therefore, it computes the product of the flattened array. diff The diff tool calculates the n-th order discrete difference along the given axis. import numpy my_array = numpy.array([ [1, 2, 3], [4, 5, 6] ]) print numpy.diff(my_array, axis = 0) #Output : [[3 3 3]] print numpy.diff(my_array, axis = 1) #Output : [[1 1] [1 1]] print numpy.diff(my_array, axis = None) #Output: [1 1 1 1 1] By default, the axis is 1 for a 2-D array. Therefore, it computes the first-order difference along the row for each element. =====Problem Statement===== You are given a 2-D array of size NXK. Your task is to find: The cumulative sum along axis 0 The product along axis 1 The n-th order difference (n=1) along the default axis =====Input Format===== The first line contains the space separated values of N and K. The next N lines contain K space separated integers. =====Output Format===== First, print the cumulative sum. Second, print the product. Third, print the first-order difference.","solution":"import numpy as np def array_operations(N, K, array): # Convert input list to numpy array my_array = np.array(array) # Calculate cumulative sum along axis 0 cumsum_result = np.cumsum(my_array, axis=0) # Calculate product along axis 1 product_result = np.prod(my_array, axis=1) # Calculate first-order discrete difference along axis 1 diff_result = np.diff(my_array, axis=1) return cumsum_result, product_result, diff_result"},{"question":"Given an array of integers, determine if it contains any triplet (i.e., three numbers) that sum up to zero. Input Format First line of the input contains T, the number of test cases to follow. Each test case consists of two lines. First line of each test case contains N, the size of the array. Second line of each test case contains N space-separated integers representing the elements of the array. Constraints 1 ≤ T ≤ 100 3 ≤ N ≤ 1000 -10^4 ≤ array elements ≤ 10^4 Output Format For each test case, output \\"YES\\" if there exists at least one triplet that sums up to zero, otherwise \\"NO\\". SAMPLE INPUT 2 5 -1 0 1 2 -1 5 1 2 3 4 5 SAMPLE OUTPUT YES NO Explanation 1st Test Case: Array [-1, 0, 1, 2, -1] contains triplet (-1, 0, 1) which sums to zero. 2nd Test Case: Array [1, 2, 3, 4, 5] does not contain any triplet that sums to zero.","solution":"def contains_zero_sum_triplet(arr): Function to check if there exists any triplet in the array that sums up to zero. arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while (left < right): current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: return True elif current_sum < 0: left += 1 else: right -= 1 return False def check_triplets(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] if contains_zero_sum_triplet(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers representing elevations of different terrain heights. Imagine water can flow to any of the 4 directions (up, down, left, right) and falls off the edges of the grid. Write a program to mark all the lands where water can flow to both the Pacific and the Atlantic oceans. The Pacific Ocean touches the left and top edges of the grid, and the Atlantic Ocean touches the right and bottom edges of the grid. Return the coordinates of similar water flow points. The resulting coordinates can be in any order. Example 1: Input: heights = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] Output: [[0,4], [1,3], [1,4], [2,2], [3,0], [3,1], [4,0]] Example 2: Input: heights = [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] Output: [[0,0], [0,1], [0,2], [1,0], [1,1], [1,2], [2,0], [2,1], [2,2]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function pacificAtlantic() which takes heights (2D list) as input and returns a list of lists as output. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 <= N, M <= 200 1 <= heights[i][j] <= 10^5","solution":"def pacificAtlantic(heights): if not heights or not heights[0]: return [] n, m = len(heights), len(heights[0]) pacific_reachable = [[False for _ in range(m)] for _ in range(n)] atlantic_reachable = [[False for _ in range(m)] for _ in range(n)] def dfs(i, j, reachable): reachable[i][j] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for direction in directions: ni, nj = i + direction[0], j + direction[1] if 0 <= ni < n and 0 <= nj < m and not reachable[ni][nj] and heights[ni][nj] >= heights[i][j]: dfs(ni, nj, reachable) for i in range(n): dfs(i, 0, pacific_reachable) dfs(i, m-1, atlantic_reachable) for j in range(m): dfs(0, j, pacific_reachable) dfs(n-1, j, atlantic_reachable) result = [] for i in range(n): for j in range(m): if pacific_reachable[i][j] and atlantic_reachable[i][j]: result.append([i, j]) return result"},{"question":"Given the root of a binary tree, return the sum of all node values that have an even-valued grandparent. A node\'s grandparent node is the parent of its parent, if it exists. Example 1: Input: root = [6,7,8,2,7,1,3,9,None,1,4,None,None,None,5] Output: 18 Explanation: The nodes with an even-valued grandparent are 9, 1, 4, and 5, and they sum up to 18. Example 2: Input: root = [1] Output: 0 Explanation: The tree does not have any nodes with an even-valued grandparent. Constraints: - The number of nodes in the tree is between 1 and 10^4. - The value of each node is between 1 and 100.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumEvenGrandparent(root: TreeNode) -> int: Returns the sum of all node values that have an even-valued grandparent. def dfs(node, parent, grandparent): if not node: return 0 sum_value = 0 if grandparent and grandparent.val % 2 == 0: sum_value += node.val sum_value += dfs(node.left, node, parent) sum_value += dfs(node.right, node, parent) return sum_value return dfs(root, None, None)"},{"question":"You are given two arrays of integers, A and B, each of length n. Your task is to interleave elements from these arrays to form a new array C that follows these rules: 1. Each even-indexed element of C (0-based index) must come from array A. 2. Each odd-indexed element of C (0-based index) must come from array B. 3. All elements from A and B must be used exactly once. Determine if such array C can be constructed. If it is possible, print the array C. Otherwise, print -1. Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of each array. The second line contains n integers representing the array A. The third line contains n integers representing the array B. Output If it is possible to construct the array C, print the n-interleaved elements of C on a single line, separated by spaces. If it\'s not possible, print -1. Examples Input 3 1 2 3 4 5 6 Output 1 4 2 5 3 6 Input 2 7 8 9 10 Output 7 9 8 10 Input 4 1 2 3 4 5 6 7 Output -1 Note In the first test case, we can interleave elements from A and B to form C as follows: [1, 4, 2, 5, 3, 6]. In the second test case, C can be formed as: [7, 9, 8, 10]. In the third test case, it\'s not possible to form C because arrays A and B are of different lengths (4 and 3, respectively).","solution":"def interleave_arrays(n, A, B): This function interleaves two arrays A and B into a single array C where even indexed elements come from A and odd indexed elements come from B. :param n: Length of each input array A and B. :param A: List of integers of length n. :param B: List of integers of length n. :return: A new list C interleaving A and B or -1 if inputs are invalid. if len(A) != n or len(B) != n: return -1 C = [] for i in range(n): C.append(A[i]) C.append(B[i]) return C"},{"question":"Sara and Tom are playing a game with a set of cards. Each card has a positive integer value. The cards are arranged in a row, and the aim of the game is for each player to collect cards such that the sum of the values of their collected cards is maximized. Both players play optimally and take turns picking cards, with Sara going first. The rules of the game are as follows: 1. On each player\'s turn, the player can take either the first card in the row or the last card in the row. 2. The game continues until there are no more cards left. Given an array of numbers representing the values of the cards in the row, return the maximum possible score Sara can achieve if both players play optimally. Example 1: Input: cards = [1, 2, 9, 4] Output: 10 Explanation: Sara starts and picks the card with value 1. Tom, then, can either pick 2 or 4. Regardless of Tom\'s choice, Sara will pick the card with value 9 on her next turn. Thus, Sara can achieve a maximum score of 1 + 9 = 10. Example 2: Input: cards = [5, 3, 7, 10] Output: 15 Explanation: Sara picks the card with value 5 first, then Tom picks 10. Sara then picks 7, and Tom picks 3. The maximum score Sara can achieve is 5 + 7 = 12. Alternatively, if Sara picks the card with value 10 first, then the maximum score she can achieve is 10 + 5 = 15. Hence, the answer is 15. Constraints: - 1 <= cards.length <= 100 - 1 <= cards[i] <= 100","solution":"def maximum_score(cards): Returns the maximum possible score Sara can achieve if both players play optimally. n = len(cards) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = cards[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(cards[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0), cards[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0, dp[i][j - 2] if i <= j - 2 else 0)) return dp[0][n - 1]"},{"question":"In digital image processing, a common task is to flip an image either horizontally or vertically. Given a matrix representing a grayscale image where each element of the matrix is an integer representing the pixel value, we want to write a function to flip the image in specified directions. For this task, you have to implement the function `flip_image(matrix, direction)`, which takes in: - `matrix`: a 2D list of integers representing the image. - `direction`: a string that can be either `\\"horizontal\\"` or `\\"vertical\\"` indicating the direction in which to flip the image. The function should return the flipped image as a 2D list of integers. Examples: ``` python flip_image( [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ], \\"horizontal\\" ) # should return: # [ # [3, 2, 1], # [6, 5, 4], # [9, 8, 7] # ] flip_image( [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ], \\"vertical\\" ) # should return: # [ # [7, 8, 9], # [4, 5, 6], # [1, 2, 3] # ] ``` Function Specification: - The input matrix will have at least 1x1 dimension. - Each pixel value in the matrix is an integer. - The input matrix is a list of lists where each inner list has the same length. - You can assume the direction is always either `\\"horizontal\\"` or `\\"vertical\\"`.","solution":"def flip_image(matrix, direction): if direction == \\"horizontal\\": # Flip each row horizontally return [row[::-1] for row in matrix] elif direction == \\"vertical\\": # Flip the rows vertically return matrix[::-1] else: # This should never happen due to the problem constraints return matrix"},{"question":"A company is organizing a hackathon event, and they want to distribute participants into teams efficiently. Each participant has a unique skill level, and they want to form teams such that the skill level difference among participants in the same team is minimized. You need to write a program to determine the minimum possible maximum difference in skill levels within any team after organizing them optimally. Input The first line contains the number of test cases T. Each test case begins with a number N, denoting the number of participants. This is followed by N lines, each containing the skill level of a participant, S. Output For each test case, output the minimum possible maximum skill level difference within any team. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 100000 1 ≤ S ≤ 10000 SAMPLE INPUT 2 4 1 4 6 8 5 10 20 30 40 50 SAMPLE OUTPUT 3 10 Explanation Explanation Test Case # 1: There are four participants with skill levels 1, 4, 6, and 8. We can form the teams like (1,4) and (6,8) with maximum skill level differences of 3 and 2 respectively. The minimum possible maximum skill level difference in this case is 3. Test Case # 2: There are five participants with skill levels 10, 20, 30, 40, and 50. We can form one team with all participants since the skill level differences are already at a minimum possible maximum of 10 (for example, (10,20), (20,30), (30,40), (40,50)). Thus, the minimum possible maximum skill level difference is 10.","solution":"def minimize_skill_diff(test_cases): results = [] for case in test_cases: N, skills = case skills.sort() min_diff = float(\'inf\') for i in range(1, N): min_diff = min(min_diff, skills[i] - skills[i-1]) results.append(min_diff) return results def process_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) skills = [] for i in range(1, N + 1): skills.append(int(lines[index + i])) test_cases.append((N, skills)) index += N + 1 return test_cases def solution(input_text): test_cases = process_input(input_text) results = minimize_skill_diff(test_cases) return \'n\'.join(map(str, results))"},{"question":"You are given an array of words and a prefix string. Your task is to find all words that start with the given prefix. Return the list of words in the order they appear in the array. Example 1: Input: words = [\\"apple\\", \\"banana\\", \\"apricot\\", \\"avocado\\", \\"berry\\"] prefix = \\"ap\\" Output: [\\"apple\\", \\"apricot\\"] Explanation: The words \\"apple\\" and \\"apricot\\" both start with the prefix \\"ap\\". Example 2: Input: words = [\\"example\\", \\"examine\\", \\"executive\\", \\"extra\\", \\"existence\\"] prefix = \\"ex\\" Output: [\\"example\\", \\"examine\\", \\"executive\\", \\"extra\\", \\"existence\\"] Explanation: All the words in the array start with the prefix \\"ex\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function findWordsWithPrefix() which takes an array of strings, words, and a string prefix as input, and returns a list of words starting with the given prefix. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N) where N is the number of words in the array and M is the maximum length of a word. Constraints: - 1 <= len(words) <= 10^5 - 1 <= len(words[i]) <= 100 - 1 <= len(prefix) <= 100","solution":"def findWordsWithPrefix(words, prefix): Returns a list of words that start with the given prefix. Parameters: words (list of str): list of words to search. prefix (str): the prefix to search for. Returns: list of str: words that start with the prefix. return [word for word in words if word.startswith(prefix)] # Example usage: # words = [\\"apple\\", \\"banana\\", \\"apricot\\", \\"avocado\\", \\"berry\\"] # prefix = \\"ap\\" # print(findWordsWithPrefix(words, prefix)) # Output: [\\"apple\\", \\"apricot\\"]"},{"question":"Given a list of integers, you are required to create a new list containing only the numbers that are divisible by at least one of the prime numbers less than 10 (i.e., 2, 3, 5, and 7). Return the sum of the new list. If there are no such numbers in the list, return 0. Example Input: arr = [10, 15, 21, 33, 44, 55, 77] Output: 255 Explanation: 10, 15, 21, 33, 44, 55, and 77 are all divisible by either 2, 3, 5 or 7. Their sum is 255. Example Input: arr = [1, 11, 13, 17] Output: 0 Explanation: None of the numbers are divisible by 2, 3, 5, or 7. Your task: You don\'t have to read input or print anything. Your task is to complete the function sumDivisibleByPrime() which takes the list of integers arr as input and returns the sum of the numbers that are divisible by at least one of the prime numbers less than 10. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1<= length(arr) <= 10^5 1<= arr[i] <= 10^9","solution":"def sumDivisibleByPrime(arr): primes = [2, 3, 5, 7] result = 0 for num in arr: if any(num % prime == 0 for prime in primes): result += num return result"},{"question":"You are given an array of integers. Your task is to rearrange the array so that the difference between any two adjacent elements is minimized. If there are multiple solutions, return the lexicographically smallest one. A list a is lexicographically smaller than a list b if at the first position where a and b differ, the element in a is smaller than the element in b. -----Input----- Each test contains multiple test cases. The first line contains t (1 leq t leq 100) — the number of test cases. Description of test cases follows. The first line of each test case contains n (2 leq n leq 1000) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. -----Output----- For each test case, print the desired rearranged array in a single line. -----Examples----- Input 2 4 4 3 1 2 3 10 20 10 Output 1 2 3 4 10 10 20 -----Note----- In the first test case, one possible solution is 1 2 3 4, which minimizes the difference between adjacent elements. In the second test case, the solution is 10 10 20, which minimizes the difference between adjacent elements and is lexicographically smallest.","solution":"def rearrange_arrays(test_cases): results = [] for case in test_cases: n, arr = case # Sort the array to get the lexicographically smallest arrangement. arr.sort() results.append(arr) return results def process_input(output): lines = output.strip().split(\'n\') t = int(lines[0]) test_cases = [] i = 1 for _ in range(t): n = int(lines[i]) arr = list(map(int, lines[i+1].split())) test_cases.append((n, arr)) i += 2 return test_cases def format_output(results): return \'n\'.join(\' \'.join(map(str, res)) for res in results) # Example Input/Output interface function def main(output): test_cases = process_input(output) results = rearrange_arrays(test_cases) return format_output(results)"},{"question":"Thomas is learning about prime factors and he wants to find all of the prime factors of a given number N. In addition to finding the prime factors, he also wants to know how many times each prime factor divides the number. Could you help Thomas achieve this by writing a program to compute the prime factors and their frequencies? ------ Input ------ The first line of input contains an integer T, the number of test cases. Each of the following T lines contains a single integer N. ------ Output ------ For each test case, output a single line containing space-separated pairs of prime factors and their respective frequencies for the given integer N, sorted by the prime factors in ascending order. Each pair should be formatted as \\"prime^frequency\\". ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^6 ------ Sample Input 1 ------ 3 18 28 10 ------ Sample Output 1 ------ 2^1 3^2 2^2 7^1 2^1 5^1 ------ Explanation 1 ------ Example case 1: The prime factors for 18 are 2 and 3. The number 18 can be factored into 2^1 and 3^2. Example case 2: The prime factors for 28 are 2 and 7. The number 28 can be factored into 2^2 and 7^1. Example case 3: The prime factors for 10 are 2 and 5. The number 10 can be factored into 2^1 and 5^1.","solution":"def prime_factors_and_frequencies(n): i = 2 factors = {} while i * i <= n: while (n % i) == 0: if i in factors: factors[i] += 1 else: factors[i] = 1 n //= i i += 1 if n > 1: factors[n] = 1 if n not in factors else factors[n] + 1 return \\" \\".join([f\\"{key}^{value}\\" for key, value in sorted(factors.items())]) def process_input_cases(T, cases): results = [] for N in cases: results.append(prime_factors_and_frequencies(N)) return results"},{"question":"Given a positive integer N, find the least number of perfect squares (like 1, 4, 9, 16, ...) which sum up to N. Example 1: Input: N = 12 Output: 3 Explanation: 12 = 4 + 4 + 4 Example 2: Input: N = 13 Output: 2 Explanation: 13 = 4 + 9 Your Task: You don\'t need to read or print anything. Your task is to complete the function minSquares() which takes integer N as input parameter and returns the least number of perfect squares which sum up to N. Expected Time Complexity: O(N√N) Expected Space Complexity: O(N) Constraints: 1 <= N <= 10^4","solution":"def minSquares(N): if N <= 0: return 0 # Create a list to store minimum squares required for every number from 0 to N dp = [float(\'inf\')] * (N + 1) # There are 0 perfect squares that sum up to 0 dp[0] = 0 # Populate the dp list for i in range(1, N + 1): j = 1 while j*j <= i: dp[i] = min(dp[i], dp[i - j*j] + 1) j += 1 return dp[N]"},{"question":"You have been appointed as a software engineer to develop a system that handles the reservations of a conference room in a company. There are N employees in the company, and each reservation request will include the employee ID, the start time, and the end time. A reservation is approved if there are no overlapping times with other reservations. If two reservations have overlapping times, the second reservation will be denied. Since the employees work in different time zones, the times will be given in minutes from the start of the workday (which is minute 0). Write a program that handles the reservation requests and determines for each request whether it should be approved or denied based on the aforementioned rule. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of employees. The next N lines contain three space-separated integers representing the employee ID, the start time, and the end time of a reservation request. ------ Output ------ For each test case, output N lines. Each line should contain the words \\"Approved\\" or \\"Denied\\" based on whether the reservation request can be approved or not. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ start time < end time ≤ 480 1 ≤ employee ID ≤ 100 ------ Example ------ Input: 2 3 1 60 120 2 80 140 3 200 300 2 1 0 100 2 50 150 Output: Approved Denied Approved Approved Denied ------ Explanation ------ Example case 1. - The first reservation (1, 60, 120) is approved as there are no prior reservations. - The second reservation (2, 80, 140) overlaps with the first reservation (1, 60, 120), hence it is denied. - The third reservation (3, 200, 300) does not overlap with any prior allowed reservations, hence it is approved. Example case 2. - The first reservation (1, 0, 100) is approved as there are no prior reservations. - The second reservation (2, 50, 150) overlaps with the first reservation (1, 0, 100), hence it is denied.","solution":"def handle_reservations(test_cases): results = [] for case in test_cases: N, reservations = case approved_times = [] case_results = [] for emp_id, start, end in reservations: overlap = False for a_start, a_end in approved_times: if not (end <= a_start or start >= a_end): overlap = True break if overlap: case_results.append(\\"Denied\\") else: approved_times.append((start, end)) case_results.append(\\"Approved\\") results.extend(case_results) return results"},{"question":"Alice and Bob are playing a card game. The game consists of a deck of n cards, each card having a value. The deck is represented as an array a of n integers where a[i] is the value of the i-th card. Alice and Bob take turns playing. Alice always goes first. On each turn, the player must select a card from either the start or the end of the array. The game ends when there are no cards left to pick. The goal of each player is to maximize the sum of the values of the cards they have picked. Given the initial arrangement of the cards in the deck, write an algorithm to determine the maximum possible score Alice can achieve if both players play optimally. -----Input----- The first line contains an integer n (1 le n le 1000) — the number of cards. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6) — the values of the cards. -----Output----- Print the maximum score Alice can achieve if both players play optimally. -----Example----- Input 4 1 2 9 4 Output 10 -----Note----- In the example, Alice can follow these steps to maximize her score: 1. Alice picks 4 (score: 4), the deck becomes [1, 2, 9]. 2. Bob will optimally choose 9, the deck becomes [1, 2]. 3. Alice picks 2 (score: 6), the deck becomes [1]. 4. Bob will pick 1, Alice\'s final score is 6 + 4 = 10.","solution":"def max_score(cards): n = len(cards) # dp[i][j] will store the maximum score a player can achieve in the subarray cards[i...j] dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = cards[i] # If there\'s only one card, take it. for length in range(2, n + 1): # length of the subarray for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max( cards[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0), cards[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0, dp[i][j - 2] if i <= j - 2 else 0) ) return dp[0][n - 1]"},{"question":"Ashwin loves playing with numbers. He particularly enjoys working with prime numbers and multiples of numbers. To challenge him, Neha gives him a task. She tells him to find all the prime factors of a given number and return a list of those prime factors. Note: The output should be a list of unique prime factors sorted in ascending order. No number in the list should appear more than once. Imagine you are Ashwin. Write the code to prove your ability! Input: The first line contains a positive integer T (number of test cases). Next, T lines each contain a positive integer N for which prime factors are to be found. Output: For each test case, print the list of unique prime factors of the given number in ascending order. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 28 45 SAMPLE OUTPUT [2, 7] [3, 5]","solution":"import math def prime_factors(n): Returns the list of unique prime factors of the given number in ascending order. factors = set() # Check for number of twos while n % 2 == 0: factors.add(2) n = n // 2 # Check for all odd numbers for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: factors.add(i) n = n // i if n > 2: factors.add(n) return sorted(factors) def prime_factors_multiple(test_cases): Process multiple test cases. Parameters: test_cases: List of numbers to find prime factors for. Returns: List of lists with unique prime factors for each test case. results = [] for n in test_cases: results.append(prime_factors(n)) return results"},{"question":"Given an array of integers, find the kth smallest element in the array. ----Input:---- - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains two integers, n and k, where n is the number of elements in the array and k is the position of the smallest element you need to find. - The second line contains n space-separated integers representing the array. ----Output:---- For each test case, output a single line containing the kth smallest element in the array. ----Constraints---- - 1 leq T leq 1000 - 1 leq n leq 10000 - 1 leq k leq n - -10^9 leq array[i] leq 10^9 ----Sample Input:---- 2 6 3 7 10 4 3 20 15 5 2 7 10 4 20 15 ----Sample Output:---- 7 7","solution":"def kth_smallest_element(test_cases): results = [] for case in test_cases: n, k, array = case array.sort() results.append(array[k-1]) return results"},{"question":"Given an array of integers, determine if the array can be rearranged to form an arithmetic progression. Return `true` if the array can be rearranged to form an arithmetic progression, otherwise return `false`. Constraints * 1 leq n leq 100,000 * -10^6 leq text{arr[i]} leq 10^6, where text{arr[i]} is an element of the array. Input The input is given in the following format. n text{arr[0]}; text{arr[1]}; ... ; text{arr[n-1]} Output Return `true` if the array can be rearranged to form an arithmetic progression, otherwise return `false`. Example Input 4 3 5 1 7 Output true Input 4 1 2 4 7 Output false","solution":"def can_form_arithmetic_progression(arr): Determines if the given array can be rearranged to form an arithmetic progression. :param arr: List[int] - the input array of integers :return: bool - True if the array can be rearranged to form an arithmetic progression, False otherwise if len(arr) < 2: return True arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True"},{"question":"Alyssa is playing a game where she has a list of N positive integers that represent the difficulty levels of different tasks. She also has an integer T, representing the tolerance level beyond which she feels the game becomes too difficult. Alyssa wants to find the length of the longest contiguous subsequence of tasks whose combined difficulty does not exceed T. However, due to the ongoing distractions, she needs your help to determine this. Input format: The first line of input consists of two integers N and T. The next line consists of N integers D1, D2, ..., DN, representing the difficulty levels of the tasks. Output format: Print a single integer representing the length of the longest contiguous subsequence whose combined difficulty does not exceed T. Constraints: 1 ≤ N ≤ 10^5 1 ≤ T ≤ 10^9 1 ≤ Di ≤ 10^4 Sample Input 6 8 1 2 3 4 5 1 Sample Output 3 Explanation The longest contiguous subsequence with difficulty not exceeding 8 is [1, 2, 3], which has a combined difficulty of 6. Another valid subsequence is [5, 1], but it only has a length of 2. Therefore, the maximum length is 3.","solution":"def max_length_subsequence(N, T, difficulties): Returns the length of the longest contiguous subsequence of tasks whose combined difficulty does not exceed T. max_length = 0 current_sum = 0 left = 0 for right in range(N): current_sum += difficulties[right] while current_sum > T: current_sum -= difficulties[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"A robotics lab has designed several specialized robots to perform tasks on a factory floor. The floor is represented as a 2D grid with R rows and C columns. Each cell in the grid can either be empty or contain an obstacle. Each robot starts at a specific position on the grid and must perform a sequence of movements. The movements are given as a string consisting of the characters \'U\', \'D\', \'L\', and \'R\', which correspond to moving up, down, left, and right, respectively. Robots cannot move outside the grid or into cells that contain obstacles. Write a program that simulates the robots\' movements and calculates the final position of each robot on the grid. # Input The input is given from Standard Input in the following format: ``` R C grid_line_1 grid_line_2 : grid_line_R K x_1 y_1 movements_1 x_2 y_2 movements_2 : x_K y_K movements_K ``` * `R` (1 ≤ R ≤ 50) is the number of rows in the grid. * `C` (1 ≤ C ≤ 50) is the number of columns in the grid. * `grid_line_i` is a string of length `C` where each character is either `.` (empty cell) or `#` (obstacle). * `K` (1 ≤ K ≤ 100) is the number of robots. * `x_i` and `y_i` (1 ≤ x_i ≤ R, 1 ≤ y_i ≤ C) are the starting row and column of the `i`-th robot. * `movements_i` is a string of length at most 100 consisting of \'U\', \'D\', \'L\', \'R\'. # Output Print the final positions of each robot in the order they were given in the input. Each position should be printed on a new line in the format: ``` x y ``` where `x` and `y` are the row and column of the robot\'s final position. # Examples Input ``` 5 5 ..... ..... ..... ..... ..... 3 1 1 RRR 3 3 DDD 5 5 LLL ``` Output ``` 1 4 5 3 5 2 ``` Input ``` 4 4 ..#. ..#. .... .... 2 1 1 DDR 4 4 ULU ``` Output ``` 3 2 3 3 ``` Explanation For the first example: - The first robot starts at (1, 1) and moves \\"RRR\\" to reach (1, 4). - The second robot starts at (3, 3) and moves \\"DDD\\" but stops at (5, 3) because it can\'t move outside the grid. - The third robot starts at (5, 5) and moves \\"LLL\\" to reach (5, 2). For the second example: - The first robot starts at (1, 1) and moves \\"DDR\\" to reach (3, 2). - The second robot starts at (4, 4) and moves \\"ULU\\", but encounters obstacles at (2, 3) and stops at (3, 3).","solution":"def move_robot(R, C, grid, x, y, movements): for move in movements: if move == \'U\' and x > 1 and grid[x-2][y-1] != \'#\': x -= 1 elif move == \'D\' and x < R and grid[x][y-1] != \'#\': x += 1 elif move == \'L\' and y > 1 and grid[x-1][y-2] != \'#\': y -= 1 elif move == \'R\' and y < C and grid[x-1][y] != \'#\': y += 1 return x, y def final_positions(R, C, grid, robots): results = [] for x, y, movements in robots: final_x, final_y = move_robot(R, C, grid, x, y, movements) results.append((final_x, final_y)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split(\'n\') # Read grid dimensions R, C = map(int, data[0].split()) # Read grid grid = [data[i+1] for i in range(R)] # Read number of robots K = int(data[R+1]) # Read robot information robots = [] for i in range(K): x, y, movements = data[R+2 + i].split() robots.append((int(x), int(y), movements)) results = final_positions(R, C, grid, robots) for res in results: print(res[0], res[1])"},{"question":"You are working on a text compression algorithm, and you want to test its ability to detect and use repeated patterns. One of the common patterns is a \\"run\\" of repeated characters. Your task is to output the length of the longest run of the same character in a given string. A run is defined as a sequence of consecutive identical characters. For example, in the string \\"aaabbbaac\\", there are runs of lengths 3 (\'aaa\'), 3 (\'bbb\'), 2 (\'aa\') and 1 (\'c\'), and the longest run is of length 3. Input The input consists of a single non-empty string s. The length of string s is not greater than (10^5) characters. The string consists only of lowercase English letters. Output Print a single integer, the length of the longest run of the same character in the string. Example Input aaabbbaac Output 3 Input abcde Output 1","solution":"def longest_run_length(s): Returns the length of the longest run of the same character in the given string s. Parameters: s (str): The input string consisting of only lowercase English letters. Returns: int: The length of the longest run of the same character. if not s: return 0 max_run_length = 1 current_run_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_run_length += 1 else: if current_run_length > max_run_length: max_run_length = current_run_length current_run_length = 1 if current_run_length > max_run_length: max_run_length = current_run_length return max_run_length"},{"question":"In a distant land called Matrixland, people communicate using a unique language characterized by patterns in matrices. A given matrix `M` has dimensions `m x n` and consists of integers. Due to operational constraints in Matrixland, they often need to manipulate these matrices in specific ways. Your task is to help Matrixland\'s people by writing a program that processes queries on a matrix `M`. Each query can be one of two types: 1. Increase all the elements in the matrix by a given integer `x`. 2. Find the maximum element in the matrix after any number of such increases. The matrix manipulation must be efficient, given the constraints. ---Input--- The first line contains two integers `m` and `n` (1 le m, n le 1000) — the number of rows and columns in the matrix, respectively. The next `m` lines each contain `n` integers representing the matrix `M`. The next line contains an integer q (1 le q le 100) — the number of queries. Each of the next `q` lines contains a query in one of the following formats: - \\"Increase x\\": Increase all elements of the matrix by `x` (-1000 le x le 1000). - \\"Maximum\\": Find the maximum element in the current matrix. ---Output--- For each \\"Maximum\\" query, output the maximum element in the matrix on a new line. ---Examples--- Input 3 3 1 2 3 4 5 6 7 8 9 4 Increase 5 Maximum Increase -3 Maximum Output 14 11 ---Notes--- In the first query, all elements in the matrix are increased by 5. The matrix becomes: 6 7 8 9 10 11 12 13 14 The maximum element is now 14. In the third query, all elements in the matrix are decreased by 3. The updated matrix becomes: 3 4 5 6 7 8 9 10 11 The maximum element is now 11.","solution":"def process_queries(m, n, matrix, queries): Processes a series of queries on a matrix. Parameters: - m (int): Number of rows in the matrix - n (int): Number of columns in the matrix - matrix (list of list of int): The m x n matrix - queries (list of str): The list of queries to be processed Returns: - list of int: Results of each \\"Maximum\\" query current_increment = 0 result = [] for query in queries: if query.startswith(\\"Increase\\"): x = int(query.split()[1]) current_increment += x elif query == \\"Maximum\\": max_element = max(max(row) for row in matrix) + current_increment result.append(max_element) return result"},{"question":"Balancing Parentheses Checker You have been tasked with determining if a string containing various types of parentheses is balanced. A string is considered balanced if every opening parenthesis has a matching closing parenthesis in the correct order. The types of parentheses are as follows: (, ), {, }, [, ]. -----Input----- The first line of input contains an integer T which denotes the number of test cases. Next T lines each contain a single string consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', whose length does not exceed 1000. -----Output----- Output T lines, each containing \\"YES\\" if the string is balanced and \\"NO\\" if it is not. -----Constraints:----- 1 <= T <= 100 1 <= length of string <= 1000 -----Example:----- Input: 4 {} {[()]} {[}] ((()) Output: YES YES NO NO","solution":"def is_balanced_parentheses(s): Returns \'YES\' if the parentheses in the string s are balanced, \'NO\' otherwise. stack = [] pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in pairs.values(): # opening brackets stack.append(char) elif char in pairs.keys(): # closing brackets if stack == [] or stack.pop() != pairs[char]: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def main(T, strings): results = [] for s in strings: results.append(is_balanced_parentheses(s)) return results"},{"question":"Julia is participating in a treasure hunt, and she discovers a scroll containing a sequence of integers. According to the instructions, she needs to create a new sequence c from the given sequence a where each element c_i is the product of all elements of a except a_i. In other words, for each c_i, she needs to calculate the product of all elements of a excluding a_i. However, there\'s a twist. The scroll warns that if she tries to solve it using a direct approach, she might not find the treasure in time. To speed things up, Julia should avoid recomputing the product multiple times. Help Julia by writing a function that computes the sequence c in a more efficient way. -----Input----- The first line contains an integer n (1 leq n leq 2 times 10^5) — the number of elements in the array. The second line contains n integers a_i (-100 leq a_i leq 100). -----Output----- Print n integers, the elements of sequence c. -----Examples----- Input 4 1 2 3 4 Output 24 12 8 6 Input 3 0 4 5 Output 20 0 0 Input 5 -1 2 -3 4 -5 Output 120 -60 40 -30 24 -----Note----- In the first example, to calculate c_1, the product of the other elements 2 times 3 times 4 = 24. For c_2, the product of the remaining elements 1 times 3 times 4 = 12, and so on. In the second example, since there is a zero in the array, any element multiplied by zero becomes zero, except the one whose original number was zero. Thus, for c_1, the product is 4 times 5 = 20, while c_2 and c_3 become 0. Use an efficient algorithm to compute the result, keeping in mind the constraints on n.","solution":"def product_except_self(nums): Returns a list where each element is the product of all elements in the input list except itself. n = len(nums) if n == 1: return [0] # If there is only one element, the output is zero # Initialize the prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n output = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n-2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate the result by multiplying prefix and suffix products for i in range(n): output[i] = prefix_products[i] * suffix_products[i] return output"},{"question":"Given N unique integers, you are to determine if there exist three distinct elements in the list that sum to zero. If such triplet exists, print \\"YES\\"; otherwise, print \\"NO\\". Constraints: * 3 leq N leq 3000 * Integers can range from -10^5 to 10^5 Input: The input is given from standard input in the following format: N A_1 A_2 ... A_N Output: Print \\"YES\\" if there exist three distinct elements that sum to zero; otherwise, print \\"NO\\". Examples: Input: 5 -1 0 1 2 -1 Output: YES Input: 4 1 2 3 4 Output: NO Input: 6 -3 1 -1 2 -2 3 Output: YES","solution":"def three_sum_zero(arr): Determines if there exist three distinct elements in the list that sum to zero. Parameters: arr (list): List of unique integers. Returns: str: \\"YES\\" if such triplet exists, otherwise \\"NO\\". arr.sort() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: return \\"YES\\" elif total < 0: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given an integer K and an array of N integers. Determine if you can select two different elements in the array that add up to K. ------ Input Format ------ - The first line of the input contains two integers N (the number of elements in the array) and K (the sum we are searching for). - The second line contains N integers, the elements of the array. ------ Output Format ------ Print YES if there exist two different elements in the array whose sum is equal to K. Otherwise, print NO. You may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ N ≤ 10^5 -10^9 ≤ K, a_i ≤ 10^9 ----- Sample Input 1 ------ 5 9 2 7 11 15 1 ----- Sample Output 1 ------ YES ----- explanation 1 ------ In this test case, 2 and 7 add up to 9. ----- Sample Input 2 ------ 4 8 1 2 4 4 ----- Sample Output 2 ------ YES ----- explanation 2 ------ In this test case, 4 and 4 add up to 8.","solution":"def can_find_two_elements_with_sum(N, K, arr): Determine if you can select two different elements in the array that add up to K. seen = set() for number in arr: complement = K - number if complement in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"=====Problem Statement===== Given a string `S` consisting of lowercase English letters, determine if it is a palindrome by considering only alphanumeric characters and ignoring spaces. For this problem, a string is considered a palindrome if it reads the same forward and backward. =====Input Format===== A single string `S` containing lowercase English letters and spaces. =====Output Format===== Print \\"YES\\" (without quotes) if the string is a palindrome, otherwise print \\"NO\\". =====Constraints===== * 1 <= |S| <= 1000 =====Sample Input 1===== race car =====Sample Output 1===== YES =====Sample Input 2===== hello world =====Sample Output 2===== NO =====Explanation===== In Sample Input 1, ignoring spaces, the string \\"race car\\" becomes \\"racecar\\", which is a palindrome. Hence, the output is \\"YES\\". In Sample Input 2, ignoring spaces, the string \\"hello world\\" becomes \\"helloworld\\", which is not a palindrome. Hence, the output is \\"NO\\".","solution":"def is_palindrome(s): Determines if the given string is a palindrome by considering only alphanumeric characters and ignoring spaces. Returns \\"YES\\" if the string is a palindrome, otherwise \\"NO\\". # Filter out non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(c for c in s if c.isalnum()).lower() # Check if the filtered string is the same read forward and backward if filtered_s == filtered_s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a positive integer n, find the nth Fibonacci number modulo 1000000007. The Fibonacci series is defined as: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1. Example 1: Input: n = 5 Output: 5 Explaination: The Fibonacci sequence is 0, 1, 1, 2, 3, 5. Example 2: Input: n = 10 Output: 55 Explaination: The Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Your Task: You do not need to read input or print anything. Your task is to complete the function nthFibonacci() which takes the value n as input and returns the nth Fibonacci number modulo 1000000007. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) Constraints: 0 ≤ n ≤ 10^9","solution":"def nthFibonacci(n: int) -> int: MOD = 1000000007 def multiply_matrices(a, b): return [ [(a[0][0] * b[0][0] + a[0][1] * b[1][0]) % MOD, (a[0][0] * b[0][1] + a[0][1] * b[1][1]) % MOD], [(a[1][0] * b[0][0] + a[1][1] * b[1][0]) % MOD, (a[1][0] * b[0][1] + a[1][1] * b[1][1]) % MOD] ] def matrix_power(matrix, power): result = [[1, 0], [0, 1]] base = matrix while power > 0: if power % 2 == 1: result = multiply_matrices(result, base) base = multiply_matrices(base, base) power //= 2 return result if n == 0: return 0 elif n == 1: return 1 # Initial transformation matrix transformation_matrix = [[1, 1], [1, 0]] # Get the (n-1)-th power of the transformation matrix result_matrix = matrix_power(transformation_matrix, n-1) # The nth Fibonacci number is now in the top left corner of the result matrix return result_matrix[0][0]"},{"question":"You are given a list of integers, and your task is to determine if it is possible to partition the list into two non-empty subsets such that the sum of elements in both subsets is equal. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The list can contain up to 100,000 elements, and each element can be an integer between 1 and 1,000,000. ----- Input ----- The first line contains a single integer n (2 le n le 100,000) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 1,000,000) — the elements of the list. ----- Output ----- Print \\"YES\\" if it is possible to partition the list into two non-empty subsets with equal sum; otherwise, print \\"NO\\". ----- Examples ----- Input 4 1 5 11 5 Output YES Input 5 1 2 3 5 Output NO","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 possible_sums = {0} for num in nums: new_sums = set() for current_sum in possible_sums: new_sum = current_sum + num if new_sum == target_sum: return \\"YES\\" new_sums.add(new_sum) possible_sums.update(new_sums) return \\"NO\\""},{"question":"A company is developing a software to manage events in a city park. Each event has a start time and an end time, and its schedule cannot overlap with any other event. Given a list of events, find the maximum number of non-overlapping events that can be scheduled in the park. Each event is represented by a tuple of two integers, where the first integer is the start time and the second integer is the end time. Input: - The first line contains a single integer \'t\', the number of test cases. - Each test case starts with a single integer n, the number of events. - The next n lines each contain two integers representing the start time and end time of an event. Output: - For each test case, output the maximum number of non-overlapping events that can be scheduled. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 10^4 - 0 ≤ start time < end time ≤ 10^5 Author: Your Name SAMPLE INPUT 1 3 1 3 2 5 4 6 SAMPLE OUTPUT 2","solution":"def max_non_overlapping_events(test_cases): results = [] for events in test_cases: events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 events = [] for _ in range(n): start, end = map(int, lines[index].split()) index += 1 events.append((start, end)) test_cases.append(events) return t, test_cases def solve(input_str): t, test_cases = parse_input(input_str) results = max_non_overlapping_events(test_cases) return \'n\'.join(map(str, results))"},{"question":"You are given a matrix of characters representing a grid, where each cell in the grid can contain either \'1\' representing land or \'0\' representing water. An island is formed by connecting adjacent lands horizontally or vertically. You need to write a program to count the number of islands in the given grid. -----Input:----- - The first line contains two integers m and n representing the number of rows and columns in the grid, respectively. - The next m lines each contain n characters, where each character is either \'1\' or \'0\'. -----Output:----- Print a single integer — the number of islands in the given grid. -----Constraints----- - 1 leq m, n leq 300 - The grid contains only \'1\' or \'0\' -----Sample Input:----- 4 5 11000 11000 00100 00011 -----Sample Output:----- 3 -----EXPLANATION:----- In the first sample, there are three islands: - The first island is formed by the 3 cells in the top-left corner. - The second island is formed by the single cell in the matrix\'s third row and third column. - The third island is formed by the 2 cells in the bottom-right corner.","solution":"def num_islands(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or visited[r][c] or grid[r][c] == \'0\': return visited[r][c] = True # Visit all 4 connected neighbors dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count # Example usage: grid = [ \\"11000\\", \\"11000\\", \\"00100\\", \\"00011\\" ] print(num_islands(grid)) # Output: 3"},{"question":"In a faraway kingdom, a wizard has created a grid of size NxM representing a magical battlefield. Each cell in the grid either contains an obstacle or a magical creature. The wizard\'s task is to guide the creatures to move from their initial positions to specified goal positions using the shortest possible path. However, the magical creatures can only move up, down, left, or right, and cannot pass through obstacles. Your mission is to help the wizard determine the minimum number of steps each creature needs to reach its goal, or if it\'s impossible for a creature to reach its goal. Input: The input consists of multiple datasets. Each dataset is formatted as follows: N M grid sx sy gx gy The first line contains two integers, N and M (1 ≤ N, M ≤ 50), representing the number of rows and columns in the grid, respectively. The next N lines each contain M characters, where each character is either \'.\' (empty cell) or \'#\' (obstacle). The last line of the dataset contains four integers: sx, sy, gx, and gy (0 ≤ sx, sy, gx, gy < N, M), representing the starting x and y coordinates and the goal x and y coordinates of the creature, respectively. The end of the input is indicated by a line containing a pair of zeros. Output: For each dataset, output one integer in a line. If it is possible for the creature to reach the goal, output the minimum number of steps; otherwise, output -1. Example: Input: 5 5 ..... ...#. ... ..#.. ..... 0 0 4 4 5 5 ..... # # # # 0 0 4 4 3 3 ..# .#. ... 0 0 2 2 0 0 Output: 8 -1 4","solution":"from collections import deque def min_steps_to_goal(N, M, grid, sx, sy, gx, gy): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' visited = [[False] * M for _ in range(N)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, steps = queue.popleft() if (x, y) == (gx, gy): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def process_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 results = [] while idx < len(lines): N, M = map(int, lines[idx].split()) if N == 0 and M == 0: break grid = [] idx += 1 for _ in range(N): grid.append(list(lines[idx])) idx += 1 sx, sy, gx, gy = map(int, lines[idx].split()) idx += 1 result = min_steps_to_goal(N, M, grid, sx, sy, gx, gy) results.append(result) return results # Example usage: input_str = 5 5 ..... ...#. ... ..#.. ..... 0 0 4 4 5 5 ..... # # # # 0 0 4 4 3 3 ..# .#. ... 0 0 2 2 0 0 print(process_input(input_str)) # Output: [8, -1, 4]"},{"question":"In a remote village, there is an ancient tree that bears magical fruits. Each fruit has a unique sweetness level. Villagers, being fond of these fruits, want to collect them in a unique manner: they want to collect fruits such that they can form pairs of two fruits, where each pair has the same sweetness level. However, fruits should not be left unpaired as they lose their magic if unpaired. Given a list of integers representing the sweetness levels of fruits on the ancient tree, determine the maximum number of pairs of fruits that can be formed. Input: First line contains an integer T, denoting the number of test cases. Each test case contains two lines. First line of each test case contains an integer N, denoting the number of fruits on the tree. Second line of each test case contains N integers, separated by space, representing the sweetness levels of the fruits. Output: For each test case, print the maximum number of pairs that can be formed in a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Sweetness level of fruit ≤ 10^5 SAMPLE INPUT 2 6 1 2 3 2 3 1 7 4 4 4 4 4 4 4 SAMPLE OUTPUT 3 3 Explanation In the first test case, there are 6 fruits with sweetness levels [1, 2, 3, 2, 3, 1]. - You can form pairs: (1,1), (2,2), (3,3). - Thus, maximum pairs = 3. In the second test case, there are 7 fruits with sweetness levels [4, 4, 4, 4, 4, 4, 4]. - You can form pairs: (4,4), (4,4), (4,4). - Thus, maximum pairs = 3.","solution":"from collections import Counter def maximum_pairs(test_cases): results = [] for case in test_cases: N, fruits = case sweet_counter = Counter(fruits) pairs = sum(count // 2 for count in sweet_counter.values()) results.append(pairs) return results # Reading input format def read_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) fruits = list(map(int, input_lines[index + 1].split())) test_cases.append((N, fruits)) index += 2 return test_cases # Reading output format def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Jasmine is a software developer working on a project related to user data management. She is tasked with implementing a feature that identifies common friends between two users. Given two lists of friends for two users, your goal is to write a function that outputs the list of common friends between them. For the purpose of this task, assume that each user is represented by a unique user ID which is an integer. Input The first line contains an integer T, the number of test cases. Each test case consists of three lines: 1. The first line of each test case contains an integer n, the number of friends of the first user. 2. The second line contains n integers, representing the user IDs of the friends of the first user. 3. The third line contains an integer m, the number of friends of the second user. 4. The fourth line contains m integers, representing the user IDs of the friends of the second user. Output For each test case, output a line \\"Test Case x:\\" where x is the test case number. Then, output a sorted list of user IDs of the common friends. If no common friends are found, print \\"No common friends\\". Constraints 1 ≤ T ≤ 10 1 ≤ n, m ≤ 100 1 ≤ user ID ≤ 1000 Example Input: 2 3 1 2 3 3 2 3 4 4 5 6 7 8 5 8 9 10 7 6 Output: Test Case 1: 2 3 Test Case 2: 6 7 8","solution":"def find_common_friends(test_cases): Finds common friends between pairs of user friends lists in multiple test cases. Parameters: test_cases (list): List of tuples containing pairs of friend lists for each test case. Returns: list: List of strings representing the results for each test case. results = [] for idx, (friends1, friends2) in enumerate(test_cases): common_friends = sorted(list(set(friends1) & set(friends2))) if common_friends: results.append(f\\"Test Case {idx + 1}:n\\" + \' \'.join(map(str, common_friends))) else: results.append(f\\"Test Case {idx + 1}:nNo common friends\\") return results"},{"question":"Nina is participating in a programming competition. She wants to solve problems in order of their difficulty levels, starting with the easiest one. The competition provides a list of problems each associated with a unique difficulty level. Nina selects problems one by one in increasing order of difficulty. However, each problem also has a specific time in minutes required to solve it. Nina wants to know the total time she will take to solve all problems if she solves them in the order of increasing difficulty levels. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of problems. The second line contains n space-separated integers representing the difficulty levels of the problems. The third line contains n space-separated integers representing the time in minutes to solve each problem in the corresponding order. Output Print a single integer — the total time Nina will take to solve all problems in increasing order of their difficulty levels. Example Input 4 4 2 1 3 5 3 4 2 Output 14 Input 5 1 3 5 2 4 3 6 2 4 5 Output 20","solution":"def total_time_to_solve_problems(n, difficulties, times): Returns the total time Nina will take to solve all problems in increasing order of their difficulty levels. # Combine difficulties and times into a list of tuples problems = list(zip(difficulties, times)) # Sort problems based on difficulty levels (first element of each tuple) problems.sort() # Sum up the times in the sorted order of problems total_time = sum(time for difficulty, time in problems) return total_time"},{"question":"A robotics factory has a collection of autonomous robots that travel between various points in a grid. The grid has m rows and n columns, and the robots are equipped with sensors allowing them to move in four possible directions: up, down, left, and right. Each robot can only move one step at a time to an adjacent grid cell, provided it does not move outside the grid boundaries. The factory plans to assign tasks to the robots, asking them to travel from a start point to an endpoint on the grid. The robots are expected to find the shortest path to their destination without crossing any \\"obstacle\\" cells in the grid. The objective is to determine the shortest path length from the start point to the end point for each assigned task. If no path exists due to obstacles, return -1 for that task. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains four integers, m (1 le m le 100), n (1 le n le 100), o (0 le o le m times n), and t (1 le t le 10000), where m is the number of rows, n is the number of columns, o is the number of obstacle cells, and t is the number of tasks. The next o lines will describe the obstacle cells. Each of these lines will contain two integers, x and y (1 le x le m, 1 le y le n), indicating that the cell at row x and column y is an obstacle. The next t lines will describe the tasks. Each of these lines will contain four integers, sx, sy, ex, and ey (1 le sx,ex le m, 1 le sy,ey le n), which represent the row and column of the starting point (sx,sy) and the ending point (ex,ey), respectively. -----Output----- Output t integers, each on its own line, representing the shortest path length for each task. If it\'s impossible to reach the destination due to obstacles, output -1 for that task. -----Examples----- Sample Input: 5 5 3 2 2 2 3 3 4 4 1 1 5 5 2 2 5 5 Sample Output: 8 -1","solution":"from collections import deque def shortest_path(m, n, obstacles, tasks): grid = [[0] * n for _ in range(m)] for x, y in obstacles: grid[x-1][y-1] = 1 # Mark obstacles def bfs(start, end): sx, sy = start ex, ey = end if grid[sx][sy] == 1 or grid[ex][ey] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set([(sx, sy)]) while queue: x, y, steps = queue.popleft() if (x, y) == (ex, ey): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 results = [] for sx, sy, ex, ey in tasks: result = bfs((sx-1, sy-1), (ex-1, ey-1)) # Convert to 0-based index results.append(result) return results"},{"question":"Emma loves gardening and has a collection of various types of plants in her garden, each requiring a different amount of water to grow properly. She has a total of N plants and a limited supply of water. Emma wants to water her plants in such a way that each plant receives the exact amount of water it needs. If she runs out of water, she will have to buy more, which incurs a cost. Each type of plant requires a different amount of water. You need to determine the minimum amount of water Emma needs to buy to ensure all her plants have the required amount of water. -----Input:----- - The first line consists of the number T representing the number of test cases. - Each test case consists of 2 lines. - The first line contains the number N representing the number of plants. - The second line contains N space-separated integers (W[1] to W[N]) representing the amount of water required by each plant. - The third line contains one integer M representing the amount of water Emma already has. -----Output:----- For each test case, print the minimum amount of water Emma needs to buy. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq W[i] leq 10^6 - 0 leq M leq 10^9 -----Sample Input:----- 2 4 5 3 6 2 10 3 4 5 7 8 -----Sample Output:----- 6 8","solution":"def minimum_water_to_buy(T, test_cases): Determines the minimum amount of water Emma needs to buy for each test case. Args: T : int : Number of test cases. test_cases : list of tuples : Each tuple consists of (N, water_requirements, M). Returns: list of int : Minimum amount of water Emma needs to buy for each test case. result = [] for case in test_cases: N, water_requirements, M = case total_water_needed = sum(water_requirements) if total_water_needed <= M: result.append(0) else: result.append(total_water_needed - M) return result"},{"question":"Write a function that given a list of integers, returns a list with the same length where each element at index `i` is the product of all elements in the original list except the one at `i`. The challenging part is that you must solve it without using division. Examples: ``` Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] ``` ``` Input: [5, 10] Output: [10, 5] ``` ``` Input: [1, 2, 3] Output: [6, 3, 2] ``` **Note**: - The provided list will have at least two elements. - The solution should work efficiently even for large lists with up to 10,000 elements. **Requirements**: - Solve the problem without using the division operation. - Take edge cases into consideration, such as lists with negative numbers or zeros.","solution":"def product_except_self(nums): Given a list of integers, returns a list with the same length where each element at index `i` is the product of all elements in the original list except the one at `i`. Solves the problem without using division. length = len(nums) result = [1] * length # Calculate left products left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right products and populate result right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given an array of integers, rearrange the array so that all occurrences of the most frequent element appear at the beginning, followed by the next most frequent element, and so on. If multiple elements have the same frequency, the order of appearance should be based on their first occurrence in the array. Example 1: Input: arr = [4, 5, 6, 5, 4, 3] Output: [5, 5, 4, 4, 6, 3] Example 2: Input: arr = [2, 3, 2, 4, 4, 2] Output: [2, 2, 2, 4, 4, 3] Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeByFrequency() which takes an array of integers arr and returns the rearranged array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 10^4 -10^5 <= arr[i] <= 10^5","solution":"from collections import Counter def rearrangeByFrequency(arr): Rearranges the array so that all occurrences of the most frequent element appear first, followed by the next most frequent element, and so on. If multiple elements have the same frequency, the order of appearance is based on their first occurrence. # Count the frequency of each element frequency = Counter(arr) # Create a dictionary to store the first appearance of each element first_occurrence = {value: idx for idx, value in enumerate(arr)} # Sort elements first by frequency (descending), then by their first occurrence (ascending) sorted_elements = sorted(arr, key=lambda x: (-frequency[x], first_occurrence[x])) return sorted_elements"},{"question":"You are given an array of integers representing the number of employees in different departments of a company. The company wants to divide these departments into two separate groups while minimizing the difference in the number of employees between the two groups. Write a function that determines the minimum possible difference in employee counts between the two groups. -----Constraints----- - The number of departments (elements in the array) n is between 1 and 100. - Each department has between 1 and 10,000 employees. -----Input----- - An integer n, representing the number of departments. - An array of n integers, where the i-th integer represents the number of employees in the i-th department. -----Output----- - A single integer, representing the minimum possible difference in employee counts between the two groups. -----Sample Input----- 5 10 20 15 25 30 -----Sample Output----- 0 In this example, one possible partition is [10, 30, 15] and [20, 25], resulting in both groups having 55 employees each.","solution":"def min_difference(n, employees): total = sum(employees) half = total // 2 dp = [0] * (half + 1) for emp in employees: for j in range(half, emp - 1, -1): dp[j] = max(dp[j], dp[j - emp] + emp) return total - 2 * dp[half]"},{"question":"Task Write a function `consecutive_number_sum(n)` that calculates how many ways the number `n` can be written as a sum of consecutive positive integers. # Input - The input is a single integer `n` (1 ≤ n ≤ 10^9). # Output - The output is a single integer representing the number of ways `n` can be expressed as a sum of consecutive positive integers. # Example ```python assert consecutive_number_sum(15) == 4 # Explanation: # 15 = 15 # 15 = 7 + 8 # 15 = 4 + 5 + 6 # 15 = 1 + 2 + 3 + 4 + 5 assert consecutive_number_sum(9) == 3 # Explanation: # 9 = 9 # 9 = 4 + 5 # 9 = 2 + 3 + 4 assert consecutive_number_sum(1) == 1 # Explanation: # 1 = 1 ``` # Note The function should be optimized to handle cases where `n` is very large (up to 10^9).","solution":"def consecutive_number_sum(n): Function to determine the number of ways n can be expressed as the sum of consecutive positive integers. count = 0 k = 1 while k * (k + 1) // 2 < n: if (n - (k * (k + 1)) // 2) % (k + 1) == 0: count += 1 k += 1 return count + 1 # Test cases for the provided examples assert consecutive_number_sum(15) == 4 assert consecutive_number_sum(9) == 3 assert consecutive_number_sum(1) == 1"},{"question":"Given a road network of a city represented as a directed graph with `n` intersections (nodes) and `m` streets (edges), we need to determine the shortest path from a starting intersection to each other intersection. Each street has a non-negative travel time. If there is no path from the starting intersection to another intersection, the result should indicate that it is unreachable. Input The first line contains two integers `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 5000), representing the number of intersections and streets in the city, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^6), indicating a directed street from intersection `u` to intersection `v` with a travel time of `w`. The last line contains a single integer `s` (1 ≤ s ≤ n), indicating the starting intersection. Output Output `n` lines. For each intersection `i` (1 ≤ i ≤ n), output the shortest travel time from the starting intersection `s` to `i` if such a path exists, otherwise, output `INF` (indicating that the intersection is unreachable). Examples Input 4 4 1 2 2 1 3 4 2 3 1 3 4 1 1 Output 0 2 3 4 Input 5 3 1 2 3 2 3 2 3 5 5 4 Output INF INF INF 0 INF Note The input represents a city where each intersection is connected by one or more streets with given travel times. The output specifies the minimum travel time from the starting intersection `s` to each other intersection. If an intersection is unreachable from the starting intersection, the output should be `INF`.","solution":"import heapq def dijkstra(n, edges, start): Returns the shortest path from the start node to all other nodes using Dijkstra\'s algorithm. If a node is unreachable, the distance is marked as \'INF\'. graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((v-1, w)) dist = [float(\'inf\')] * n dist[start-1] = 0 pq = [(0, start-1)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return [d if d < float(\'inf\') else \'INF\' for d in dist] def shortest_paths(n, m, edge_list, s): return dijkstra(n, edge_list, s)"},{"question":"Given a linked list of integers, write a function to remove all the nodes in the linked list that have a value greater than a given threshold k. Your function should return the modified linked list head. Example 1: Input: head = [3, 5, 2, 1, 6], k = 4 Output: [3, 2, 1] Explanation: Nodes with values 5 and 6 are removed as they are greater than 4. Example 2: Input: head = [10, 9, 8, 7], k = 6 Output: [] Explanation: All nodes have values greater than 6 so the resultant list is empty. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function removeNodesGreaterThanK() that takes the head of a linked list and an integer k, and returns the head of the modified linked list. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ Number of nodes in the linked list ≤ 10^{5} 1 ≤ Node\'s value ≤ 10^{5} 1 ≤ k ≤ 10^{5}","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeNodesGreaterThanK(head, k): # Create a dummy node that will help us easily return the new head of the list dummy = ListNode(0) dummy.next = head current = dummy while current.next: if current.next.val > k: current.next = current.next.next else: current = current.next return dummy.next"},{"question":"Task: You need to implement a function **digit_triangle** that generates a pattern of digits based on the input parameter `rows`. The pattern should form a right-angled triangle with increasing numbers. * If the `rows` parameter is 0 or a negative integer, return an empty string \\"\\". * The pattern should always start with 1 at the first row. * Each subsequent row should contain the next integer up to the given number of `rows`. * Each row should contain the same digit, repeated. Examples: digit_triangle(5): 1 22 333 4444 55555 digit_triangle(3): 1 22 333 ```Note: There are no spaces between the digits in each line``` ```Hint: Use n in string to jump to the next line```","solution":"def digit_triangle(rows): Generates a right-angled triangle pattern of digits based on the input parameter `rows`. if rows <= 0: return \\"\\" pattern = [] for i in range(1, rows + 1): pattern.append(str(i) * i) return \\"n\\".join(pattern)"},{"question":"In a small town, there is a unique street with houses numbered consecutively starting from 1. Each house is adorned with some number of vibrant balloons, which are used for decoration. The Mayor of the town decides to conduct a contest to count the total number of balloons on a selected range of houses, and which house number has the maximum number of balloons within that range. -----Input----- The input consists of: 1. An integer N (1 ≤ N ≤ 100), which represents the number of houses on the street. 2. A list of integers B (1 ≤ B_i ≤ 100), where B_i represents the number of balloons at the i-th house. 3. Two integers L and R (1 ≤ L ≤ R ≤ N), which represent the range of house numbers (inclusive) that will be considered in the contest. -----Output----- Output a single line with two integers: the total number of balloons within the given range and the house number with the maximum number of balloons in that range. If multiple houses have the same maximum number of balloons, output the smallest house number. -----Example----- Input 1: 5 3 12 8 6 4 2 4 Output 1: 26 2 Input 2: 6 7 2 9 10 10 3 1 5 Output 2: 38 4 Input 3: 3 5 3 5 1 3 Output 3: 13 1 Explanation: In the first example, the houses within the range [2, 4] are 12, 8, and 6. The total number of balloons is 12 + 8 + 6 = 26, and house number 2 has the maximum 12 balloons. In the second example, the houses within the range [1, 5] are 7, 2, 9, 10, and 10. The total number of balloons is 7 + 2 + 9 + 10 + 10 = 38, and the house number 4 (one of the houses with the maximum 10 balloons) has the smallest number among houses with the same number of balloons.","solution":"def balloon_contest(N, B, L, R): Calculate the total number of balloons within the range L to R and find the house with the maximum number of balloons in that range. Parameters: N (int): The number of houses. B (list): A list of integers representing the number of balloons at each house. L (int): The starting house number of the range (1-indexed). R (int): The ending house number of the range (1-indexed). Returns: tuple: A tuple containing the total number of balloons in the range and the house number with the maximum balloons. total_balloons = sum(B[L-1:R]) max_balloons = max(B[L-1:R]) max_balloons_house = B[L-1:R].index(max_balloons) + L return total_balloons, max_balloons_house"},{"question":"You are given an integer array `nums` and an integer `target`. You need to find and return the number of unique combinations of four integers in `nums` that add up to `target`. Each combination should be considered unique based on the unique set of four numbers, i.e., [1, 2, 3, 4] is the same as [4, 3, 2, 1]. Example 1: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: 3 Explanation: The unique combinations are: [-1, 0, 0, 1] [-2, -1, 1, 2] [-2, 0, 0, 2] Example 2: Input: nums = [2, 2, 2, 2, 2], target = 8 Output: 1 Explanation: The unique combination is: [2, 2, 2, 2] Your Task: You don\'t need to read or print anything. Your task is to complete the function `countQuadruplets()` which takes hidden parameters and returns the count of unique quadruplets. Expected Time Complexity: O(N^3) Expected Space Complexity: O(1) Constraints: 1 <= nums.length <= 500 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"from typing import List def countQuadruplets(nums: List[int], target: int) -> int: nums.sort() # Sort the array to handle duplicate quadruplets n = len(nums) quadruplet_count = 0 for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicates continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: # Skip duplicates continue left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplet_count += 1 while left < right and nums[left] == nums[left + 1]: # Skip duplicates left += 1 while left < right and nums[right] == nums[right - 1]: # Skip duplicates right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplet_count"},{"question":"A prestigious art museum is arranging an exhibition for which several artists have sent their paintings. Each painting requires a specific amount of wall space for its display, and the museum has only a limited amount of wall space available. Given the wall space requirements of the paintings and the total available wall space, your task is to maximize the number of paintings that can be displayed simultaneously. Suppose, for example, the museum has 10 units of wall space available, and there are 5 paintings with the following wall space requirements: Painting No. Wall Space Required 1 3 2 8 3 5 4 2 5 4 In this case, the museum can display paintings 1, 4, and 5, which together require 3+2+4=9 units of wall space. It is not possible to display more than 3 paintings without exceeding the available wall space. -----Input:----- The first line of the input will contain a single integer W, the total available wall space in the museum. The second line will contain a single integer N indicating the number of paintings for which the museum has received wall space requirements. Lines 3,4,...,N+2 describe the wall space requirements of the N paintings. Line i+2 contains a single integer R_i indicating the wall space required by painting i. -----Output:----- Your output must consist of a single line containing a single integer M, indicating the maximum possible number of paintings that can be displayed simultaneously. -----Constraints:----- - 1 leq W leq 10000. - 1 leq N leq 1000. - 1 leq R_i leq 10000. -----Sample input:----- 10 5 3 8 5 2 4 -----Sample output:----- 3","solution":"def max_paintings(W, wall_requirements): This function returns the maximum number of paintings that can be displayed simultaneously given the total available wall space and the wall space requirements for each painting. :param W: int, total available wall space. :param wall_requirements: List[int], list of integers representing wall space required for each painting. :return: int, maximum number of paintings that can be displayed simultaneously. # Sort the wall space requirements in ascending order wall_requirements.sort() max_paintings_displayed = 0 current_space = 0 for space in wall_requirements: if current_space + space <= W: current_space += space max_paintings_displayed += 1 else: break return max_paintings_displayed"},{"question":"Write a function that takes two arguments, a list of strings and a single string. The function should return a new list consisting of only those strings from the original list that end with the given single string. Example: ```python # Input: list_of_strings = [\\"hello\\", \\"world\\", \\"hold\\", \\"cold\\"], ending_string = \\"ld\\" # Output: [\\"world\\", \\"hold\\", \\"cold\\"] ``` ```sql SQL Notes: You will be given a table, `words`, with one column `word`, and a value `ending` which is a string. Return a table with a column `matching_words` containing only those words from the `word` column that end with the `ending` string. # words table schema * word STRING # output table schema * matching_words STRING ```","solution":"def filter_by_ending(list_of_strings, ending_string): Returns a list of strings from the original list that end with the given ending string. Arguments: list_of_strings -- list of strings to be filtered ending_string -- string that each element should end with Returns: A new list containing only those strings that end with the given ending_string. return [s for s in list_of_strings if s.endswith(ending_string)]"},{"question":"You are given an n x n matrix representing a map of a city. Each cell in the matrix is either a 0 or a 1. A 1 represents a building and a 0 represents an empty space. The goal is to identify the largest square containing only empty spaces (0s) that can be formed within the matrix. Write a program that calculates the area of the largest square of 0s. The largest square is defined as having the maximal side length where all cells in the square are 0s. Input The first line contains a single integer n (1 ≤ n ≤ 100), the size of the matrix. The next n lines each contain n integers, either 0 or 1, representing the map of the city. Output Print a single integer, the area of the largest square that contains only empty spaces. Examples Input 5 1 0 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0 0 0 0 0 Output 4 Input 4 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 1 Output 1 Note In the first example, the largest square with all 0s is a 2x2 square located at the bottom right (area is 2x2=4). In the second example, the largest square with all 0s is a 1x1 square which is the cell itself (area is 1x1=1).","solution":"def largest_square_area(matrix): n = len(matrix) if n == 0: return 0 dp = [[0] * n for _ in range(n)] max_side = 0 for i in range(n): for j in range(n): if matrix[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"An organization is planning a large conference and needs help with organizing the seating arrangement for the participants. There are n participants, each with a unique ID from 1 to n, and m tables. The goal is to assign each participant to exactly one table under the following conditions: - Each table must have at least one participant. - Each table can accommodate participants with IDs that follow a strict ascending order, meaning for any table k, if it contains participants with IDs i and j, then i < j if i appears before j at that table. Given these constraints, write a function to determine one possible valid seating arrangement for the participants. Input The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000) — the number of participants and the number of tables. Output Output should consist of m lines. Each line should start with an integer t (1 ≤ t ≤ n) indicating the number of participants at a table, followed by t space-separated integers indicating the IDs of the participants assigned to that table in ascending order. Example Input: 6 3 Output: 2 1 2 2 3 4 2 5 6 Note: The output shows one of the possible valid seating arrangements where there are 3 tables, each with a subset of participants whose IDs are in strict ascending order. Other valid arrangements are also acceptable.","solution":"def seat_participants(n, m): Determines one possible valid seating arrangement for the participants. Args: n (int): The number of participants. m (int): The number of tables. Returns: List[List[int]]: A seating arrangement where each sublist represents a table with participants. participants = list(range(1, n + 1)) table_sizes = [n // m] * m for i in range(n % m): table_sizes[i] += 1 seating = [] index = 0 for size in table_sizes: table = [size] + participants[index:index + size] seating.append(table) index += size return seating"},{"question":"Given an `n x n` matrix where `n` is even, you need to rotate the matrix 90 degrees clockwise in-place. This means you should modify the input matrix itself without using any extra space for another matrix. # Steps to Rotate a Matrix by 90 Degrees Clockwise: 1. Transpose the matrix: Swap rows with columns. 2. Reverse each row in transposed matrix. # Input: The first line contains an integer `n` (2 ≤ n ≤ 1000), the size of the matrix. Each of the next `n` lines contains `n` integers separated by single spaces, which are the elements of the matrix. # Output: Output the matrix after rotating it 90 degrees clockwise. # Example: Input: ``` 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output: ``` 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ``` Input: ``` 2 1 2 3 4 ``` Output: ``` 3 1 4 2 ``` # Note: The input matrix is guaranteed to be an even-sized square matrix.","solution":"def rotate_matrix(matrix): Rotates the input n x n matrix 90 degrees clockwise in-place. Parameters: matrix (list of list of int): A 2D list representing the matrix. Returns: None: The function modifies the input matrix in-place. n = len(matrix) # Transpose the matrix (swap rows with columns) for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for row in matrix: row.reverse()"},{"question":"# Problem Statement You are given an integer N. Your task is to create an array A of length N in such a way that the array satisfies the following condition: - For each i (1 ≤ i ≤ N), the value of A[i] must be the greatest integer that divides the sum of the array up to the i-th element. If there are multiple valid arrays, you can output any of them. # Input Format - The first line of input contains a single integer T, denoting the number of test cases. - The following T lines each contain an integer N, the length of the array to be constructed. # Output Format For each test case, output a single line containing N space-separated integers A[1], A[2], ..., A[N], denoting the elements of the array A. # Constraints - 1 ≤ T ≤ 10^4 - 1 ≤ N ≤ 10^3 # Sample Input 1 ``` 2 2 3 ``` # Sample Output 1 ``` 1 2 1 2 3 ``` # Explanation 1 For test case 1: - The sum of the array up to the 1st element is 1, and 1 is the greatest integer that divides 1. - The sum of the array up to the 2nd element is 3, and 2 is the greatest integer that divides 3. For test case 2: - The sum of the array up to the 1st element is 1, and 1 is the greatest integer that divides 1. - The sum of the array up to the 2nd element is 3, and 2 is the greatest integer that divides 3. - The sum of the array up to the 3rd element is 6, and 3 is the greatest integer that divides 6.","solution":"def construct_array(n): Constructs an array of length n where each element A[i] is the greatest integer that divides the sum of the array up to the i-th element. return [i for i in range(1, n+1)] def process_test_cases(t, test_cases): results = [] for n in test_cases: results.append(construct_array(n)) return results"},{"question":"<!-- Problem F --> Maze Path Finder Given a maze represented as a grid of size n x m, where each cell is either an open path (\'.\') or a wall (\'#\'), your task is to determine the shortest path from the start position \'S\' to the end position \'E\'. The paths can only be traversed horizontally or vertically and you cannot move through walls. Write a program that reads multiple datasets representing different mazes and outputs the length of the shortest path for each one, or -1 if there is no valid path from \'S\' to \'E\'. Input The input consists of at most 100 datasets. Each dataset is structured as follows: > n m > row1 > row2 > ... > rown The first line contains two integers n and m (2 ≤ n, m ≤ 50) denoting the dimensions of the maze. The following n lines describe the maze grid, where each row contains m characters representing the maze layout. The grid has exactly one \'S\' and one \'E\'. The end of the input is indicated by a line containing two zeros. Output For each dataset, output the length of the shortest path from \'S\' to \'E\', or -1 if there is no valid path. Sample Input 5 5 .S... .#. ...#. .#... ...E. 4 4 S# #..# .E 0 Sample Output 7 -1 Example Input 5 5 .S... .#. ...#. .#... ...E. 4 4 S# #..# .E 0 Output 7 -1","solution":"from collections import deque def find_shortest_path(maze, n, m): directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Find the start and end positions for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) # BFS initialization q = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set([start]) while q: x, y, dist = q.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) q.append((nx, ny, dist + 1)) return -1 def read_input(): results = [] while True: n, m = map(int, input().split()) if n == 0 and m == 0: break maze = [] for _ in range(n): maze.append(input().strip()) results.append(find_shortest_path(maze, n, m)) for res in results: print(res)"},{"question":"An international robotics competition is being held, and each participating team must solve a unique challenge on a grid. Each team is given a grid of size N x M, with some cells containing obstacles. The objective is to find all distinct paths from the top-left corner to the bottom-right corner of the grid, ensuring that the paths do not pass through any obstacles. A path can move either right or down at any step. The goal is to calculate the total number of distinct paths and print it. Additionally, if there is no possible way to reach the bottom-right corner, the program should output 0. # Input The first line contains two integers, N and M, representing the number of rows and columns of the grid. The next N lines contain M characters each, where each character is either \'.\' representing an empty cell or \'#\' representing an obstacle. # Output Output a single integer representing the number of distinct paths from the top-left to the bottom-right corner of the grid, avoiding obstacles. # Constraints - 1 ≤ N, M ≤ 1000 - The top-left and bottom-right corners will always be empty cells (\'.\'). # Example Input ``` 3 3 . . . . # . . . . ``` Output ``` 2 ``` Explanation In the given example, there are two distinct paths: 1. Down, Down, Right, Right 2. Down, Right, Right, Down Input ``` 3 3 . . . . # # . . . ``` Output ``` 1 ``` Explanation In the given example, there is only one distinct path: 1. Right, Right, Down, Down Input ``` 2 2 . # # . ``` Output ``` 0 ``` Explanation In the given example, there is no possible path due to the obstacles blocking any movement from the start to the end.","solution":"def numDistinctPaths(N, M, grid): if grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[-1][-1] # Example Usage: # grid = [ # [\'.\', \'.\', \'.\'], # [\'.\', \'#\', \'.\'], # [\'.\', \'.\', \'.\'] # ] # print(numDistinctPaths(3, 3, grid)) # Output: 2"},{"question":"You are given two arrays of integers, A and B, both of size n. You need to determine if array A can be transformed into array B by performing a series of operations. In each operation, you can: - Choose any element A[i] (0 le i < n) and increment it by 1 (i.e., A[i] = A[i] + 1). Is it possible to transform array A into array B by using the given operation any number of times? -----Input----- The first line contains a single integer t (1 le t le 20) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the size of arrays A and B. The second line of each test case contains n integers A_1, , dots, , A_n (1 le A_i le 10^5) — elements of array A. The third line of each test case contains n integers B_1, , dots, , B_n (1 le B_i le 10^5) — elements of array B. -----Output----- For each test case, output a line containing YES if array A can be transformed into array B using the given operation, and NO otherwise. -----Examples----- Input 3 5 1 2 3 4 5 5 6 7 8 9 4 1 1 1 1 1 2 3 4 3 5 6 7 5 5 5 Output YES YES NO -----Note----- In the first test case, we can increment each element in A exactly 4 times to get B. In the second test case, we can increment the elements of A as follows: - Increment A[1] 0 times to get B[1] = 1 - Increment A[2] 1 time to get B[2] = 2 - Increment A[3] 2 times to get B[3] = 3 - Increment A[4] 3 times to get B[4] = 4 In the third test case, it is not possible to decrease any value of A to transform it to B.","solution":"def can_transform(A, B): Determine if array A can be transformed into array B by increment operations. for a, b in zip(A, B): if a > b: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Process multiple test cases to determine if each array A can be transformed into array B. results = [] for test_case in test_cases: n, A, B = test_case results.append(can_transform(A, B)) return results"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to determine whether there are two distinct indices `i` and `j` in the array such that the sum of `arr[i]` and `arr[j]` is equal to `k`. Constraints * 2 leq len(arr) leq 100000 * -100000 leq arr[i] leq 100000 * -200000 leq k leq 200000 Input Input is given from Standard Input in the following format: ``` n k a1 a2 a3 ... an ``` Where `n` is the length of the array, `k` is the target sum, and `a1, a2, ..., an` are the elements of the array. Output If there exist two distinct indices `i` and `j` such that `arr[i] + arr[j] = k`, print `YES`. Otherwise, print `NO`. Examples Input ``` 5 9 2 7 11 15 1 ``` Output ``` YES ``` Input ``` 3 5 1 2 3 ``` Output ``` YES ``` Input ``` 4 10 1 2 3 4 ``` Output ``` NO ```","solution":"def has_pair_with_sum(arr, k): Determines whether there are two distinct indices i and j in the array such that the sum of arr[i] and arr[j] is equal to k. Parameters: arr (List[int]): The array of integers. k (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given two arrays `A` and `B`, each consisting of `N` integers. Your goal is to make these two arrays identical by performing a series of operations. In one operation, you can increase or decrease any element of array `A` by 1. Determine the minimum number of such operations required to make array `A` identical to array `B`. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains a single integer `N`. The second line contains `N` integers representing the array `A`. The third line contains `N` integers representing the array `B`. ------ Output ------ For each test case, print a single line containing one integer ― the minimum number of operations required to make array `A` identical to array `B`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 2 cdot 10^{5} -10^9 ≤ A[i], B[i] ≤ 10^9 the sum of N over all test cases does not exceed 2 cdot 10^{5} ------ Sample Input 1 ------ 2 3 1 2 3 3 2 1 4 1 1 1 1 2 2 2 2 ------ Sample Output 1 ------ 4 4","solution":"def min_operations(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] operations = 0 for j in range(N): operations += abs(A[j] - B[j]) results.append(operations) return results"},{"question":"Write a query that calculates and returns the average, minimum, and maximum number of products sold per day over a given period. You are given a table `sales` with the following structure: ``` | Column | Type | |---------------|---------| | id | INTEGER | | product_id | INTEGER | | quantity | INTEGER | | sale_date | DATE | ``` Your task is to write a SQL query to return the average, minimum, and maximum number of products sold per day over the period of one month. The result should include the average (`avg_sold_per_day`), minimum (`min_sold_per_day`), and maximum (`max_sold_per_day`) quantities of products sold per day. # Requirements: 1. Use the `sale_date` column to determine the period. 2. Group the sales data by each day. # Example Suppose the `sales` table contains the following data: ``` | id | product_id | quantity | sale_date | |----|------------|----------|-----------| | 1 | 101 | 10 | 2023-09-01| | 2 | 102 | 15 | 2023-09-01| | 3 | 101 | 20 | 2023-09-02| | 4 | 103 | 5 | 2023-09-03| | 5 | 101 | 25 | 2023-09-03| | 6 | 102 | 30 | 2023-09-03| ``` Output should be: ``` | avg_sold_per_day | min_sold_per_day | max_sold_per_day | |------------------|------------------|------------------| | 35.00 | 25 | 60 | ``` Explanation: - On 2023-09-01, a total of 25 products were sold (10 + 15). - On 2023-09-02, a total of 20 products were sold. - On 2023-09-03, a total of 60 products were sold (5 + 25 + 30). Hence, the average is (frac{25 + 20 + 60}{3} = 35.00), the minimum is 20, and the maximum is 60.","solution":"def get_sales_statistics(db_connection): Fetches and returns the average, minimum, and maximum number of products sold per day over a given period (one month). Args: db_connection (sqlite3.Connection): SQLite database connection object. Returns: dict: Result containing average (avg_sold_per_day), minimum (min_sold_per_day) and maximum (max_sold_per_day) quantities of products sold per day. query = WITH daily_sales AS ( SELECT sale_date, SUM(quantity) AS total_quantity FROM sales GROUP BY sale_date ) SELECT AVG(total_quantity) AS avg_sold_per_day, MIN(total_quantity) AS min_sold_per_day, MAX(total_quantity) AS max_sold_per_day FROM daily_sales; cursor = db_connection.cursor() cursor.execute(query) result = cursor.fetchone() return { \\"avg_sold_per_day\\": result[0], \\"min_sold_per_day\\": result[1], \\"max_sold_per_day\\": result[2] }"},{"question":"Write a function that shifts the elements of a given array to the right by \'k\' positions. Any elements that are shifted beyond the last position should reappear at the beginning of the array. Do not use additional arrays or in-built functions for array manipulation. E.g if initially the array is `[1, 2, 3, 4, 5]` and `k = 2`, the resulting array should be `[4, 5, 1, 2, 3]`. `shiftRight(array, k)` - array - input array to be shifted. - k - number of positions to shift the array to the right. Note: If `k` is greater than the array length, continue shifting cyclically. For example, for an array of length 5, if `k` is 7, this is equivalent to shifting the array by `k % 5 = 2` positions. If `k` equals zero or if the array is empty, return the array as is.","solution":"def shiftRight(array, k): Shifts the elements of the array to the right by k positions. n = len(array) if n == 0: return array # Return immediately if array is empty # Compute effective shifts needed k = k % n if k == 0: return array # No shifting needed # Shift array to the right by k positions for i in range(k): last_element = array[-1] # Fetch the last element of the array # Move each element one position to the right for j in range(n - 1, 0, -1): array[j] = array[j - 1] array[0] = last_element return array"},{"question":"You are given a list of integers representing the prices of different items in a store and a target amount of money you have. Your task is to determine if you can exactly spend all your money by buying one or more items from the store. You can assume you have an infinite quantity of each item. Input - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer n, the number of items in the store. - The second line contains n integers representing the prices of the items. - The third line contains an integer x, the target amount of money to spend. Output For each test case, print \\"Possible\\" if it’s possible to exactly spend all the money by purchasing some combination of items. Otherwise, print \\"Not Possible\\". Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ prices[i] ≤ 100 1 ≤ x ≤ 10^4 Example Input 2 3 1 3 5 11 4 1 2 3 4 7 Output Possible Possible Explanation In the first test case, you can buy items with prices [1, 5, 5] to exactly spend 11 units of money. In the second test case, you can buy items with prices [1, 3, 3] to exactly spend 7 units of money.","solution":"def can_spend_exactly(prices, target): dp = [False] * (target + 1) dp[0] = True for price in prices: for amt in range(price, target + 1): dp[amt] = dp[amt] or dp[amt - price] return dp[target] def solve(T, test_cases): results = [] for i in range(T): n, prices, x = test_cases[i] results.append(\\"Possible\\" if can_spend_exactly(prices, x) else \\"Not Possible\\") return results"},{"question":"Given a list of words, write a function `group_anagrams` that takes the list as input and returns a list of lists, where each sublist contains words that are anagrams of each other. Two words are anagrams if they contain the same characters in the same frequencies, just in different order. # Example Input: ``` [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` Output: ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` # Constraints - All words in the input list are non-empty and consist of lowercase alphabets. - The function should be case-insensitive. # Requirements - Implement the function `group_anagrams(words: List[str]) -> List[List[str]]`.","solution":"from collections import defaultdict from typing import List def group_anagrams(words: List[str]) -> List[List[str]]: anagram_dict = defaultdict(list) for word in words: # Sort the characters in the word and use it as a key. sorted_word = \\"\\".join(sorted(word)) anagram_dict[sorted_word].append(word) # Convert the dictionary values to a list of lists. return list(anagram_dict.values())"},{"question":"You are given an array arr of N integers. Your task is to determine the maximum sum that can be obtained by adding all the non-adjacent elements of the array. In other words, if you choose an element at index i, you cannot choose elements at index i-1 or i+1. Example 1: Input: N = 4 arr = [3, 2, 5, 10] Output: 13 Explanation: The maximum non-adjacent sum would be 3 + 10 = 13. Example 2: Input: N = 3 arr = [2, 1, 4] Output: 6 Explanation: The maximum non-adjacent sum would be 2 + 4 = 6. Example 3: Input: N = 5 arr = [5, 5, 10, 40, 50, 35] Output: 80 Explanation: The maximum non-adjacent sum would be 5 + 40 + 35 = 80. Your Task: You need to write a function maxNonAdjacentSum() that takes an integer N and an array arr as input and returns the maximum sum of non-adjacent elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^4","solution":"def maxNonAdjacentSum(N, arr): if N == 0: return 0 elif N == 1: return arr[0] prev2 = 0 prev1 = arr[0] for i in range(1, N): current = max(prev1, prev2 + arr[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"In a forest, there is a network of interconnected trees represented as a graph. Each tree is a node, and each connection between trees is an undirected edge. Your task is to determine if it is possible to color each tree in such a way that no two connected trees share the same color, using exactly 2 colors. If it is possible, print the two groups of tree indices for each color. If it is not possible, print -1. -----Input----- The first line of input contains two integers n and m (1 le n le 10^5, 0 le m le 10^5), where n denotes the number of trees (nodes) and m denotes the number of connections (edges). The next m lines contain two integers u_i and v_i (1 le u_i, v_i le n), denoting an undirected edge between trees u_i and v_i. -----Output----- If it is possible to color the trees as described, print two lines. The first line contains the indices of all trees colored with the first color, separated by spaces. The second line contains the indices of all trees colored with the second color, separated by spaces. If it is not possible, print -1. -----Examples----- Input: 5 4 1 2 1 3 2 4 3 5 Output: 1 4 5 2 3 Input: 3 3 1 2 2 3 3 1 Output: -1 -----Note----- In the first example, one possible valid coloring is to assign color 1 to trees 1, 4, and 5, and color 2 to trees 2 and 3. There is no conflict because no two adjacent trees share the same color. In the second example, the three trees form a cycle of length 3, making it impossible to color them with exactly 2 colors without having two connected trees share the same color. Therefore, the output is -1.","solution":"from collections import defaultdict, deque def can_color_trees(n, m, edges): def bfs(start): queue = deque([start]) colors[start] = 0 group1, group2 = set([start+1]), set() while queue: node = queue.popleft() curr_color = colors[node] for neighbor in graph[node]: if neighbor not in colors: colors[neighbor] = 1 - curr_color if colors[neighbor] == 0: group1.add(neighbor + 1) else: group2.add(neighbor + 1) queue.append(neighbor) elif colors[neighbor] == curr_color: return -1, -1 return group1, group2 graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) colors = {} all_group1, all_group2 = set(), set() for node in range(n): if node not in colors: group1, group2 = bfs(node) if group1 == -1: return -1 all_group1.update(group1) all_group2.update(group2) return list(all_group1), list(all_group2)"},{"question":"Dr. Watson is conducting research on specific DNA sequences and he needs a tool to help him identify potential mutations. During his investigation, he\'s focusing on a particular segment of the DNA represented by a string. Dr. Watson is specifically interested in finding the longest subsequence that can be rearranged to form a palindrome. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. Your task is to help Dr. Watson by writing a program that finds the length of the longest palindromic rearrangement that can be formed from a given DNA segment. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single string S representing the DNA segment. -----Output----- For each test case, print a single line containing one integer — the length of the longest subsequence that can be rearranged to form a palindrome. -----Constraints----- - 1 le T le 100 - 1 le |S| le 1,000 - Each string S contains only uppercase English letters -----Example Input----- 3 ACGT AAACCGGTT GATTACA -----Example Output----- 1 9 5 -----Explanation----- Example case 1: The longest palindromic arrangement from \\"ACGT\\" can only be one of the characters: \'A\', \'C\', \'G\', or \'T\'. Example case 2: \\"AAACCGGTT\\" can be rearranged to form the palindrome \\"AACCGTTCCAA\\" which has length 9. Example case 3: \\"GATTACA\\" can be rearranged to form the palindrome \\"ATATA\\" or \\"GAG\\", the maximum length for a palindromic rearrangement is 5.","solution":"from collections import Counter def longest_palindromic_subsequence_length(s): Finds the length of the longest subsequence that can be rearranged to form a palindrome. char_count = Counter(s) length = 0 odd_encountered = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_encountered = True if odd_encountered: length += 1 return length def solve(T, cases): Processes multiple test cases and returns the results for all of them. results = [] for case in cases: results.append(longest_palindromic_subsequence_length(case)) return results"},{"question":"John is an avid coder and loves challenges. Today, he stumbled upon an interesting problem while practicing. The problem is as follows: John has a list of N integers. He is given Q queries, and for each query, he needs to find the sum of the integers in a subarray from index L to R (inclusive). However, John finds this problem quite daunting since there can be a large number of queries, so he needs an efficient solution. Can you help John by writing a program that can handle this task efficiently? Input Format: The first line of input contains two integers N and Q. The second line of input contains N integers, representing the elements of the list. The next Q lines each contain two integers, L and R, representing the range of the subarray for which John needs to find the sum. Output Format: For each query, print the sum of the integers in the specified subarray on a new line. Constraints: 1 ≤ N ≤ 100000 1 ≤ Q ≤ 100000 1 ≤ L ≤ R ≤ N 1 ≤ list[i] ≤ 1000 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15 Explanation For the first query, the sum of the subarray from index 1 to 3 is 1 + 2 + 3 = 6. For the second query, the sum of the subarray from index 2 to 4 is 2 + 3 + 4 = 9. For the third query, the sum of the subarray from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def preprocess_sums(array): Precomputes prefix sums for the given array. Parameters: - array: List of integers Returns: - prefix_sums: List of prefix sums where prefix_sums[i] is the sum of elements from array[0] to array[i-1] prefix_sums = [0] * (len(array) + 1) for i in range(1, len(prefix_sums)): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] return prefix_sums def query_sum(prefix_sums, L, R): Computes the sum of the subarray from index L to R in O(1) time. Parameters: - prefix_sums: List of prefix sums - L: Left index of the subarray (1-based) - R: Right index of the subarray (1-based) Returns: - Sum of the subarray from L to R return prefix_sums[R] - prefix_sums[L - 1] def process_queries(N, Q, array, queries): Processes each query and returns the corresponding subarray sums. Parameters: - N: Number of elements in the array - Q: Number of queries - array: List of integers - queries: List of tuples, each containing two integers L and R Returns: - List of results, each representing the sum of the subarray for a corresponding query prefix_sums = preprocess_sums(array) results = [] for L, R in queries: results.append(query_sum(prefix_sums, L, R)) return results"},{"question":"You are given a large array of integers, and you need to perform two types of operations on this array. Each operation is either an update to an element of the array or a request to calculate the sum of elements within a specified range. # Operations 1. **Update Operation (`1 x v`)**: Update the element at position `x` in the array to value `v` (1-indexed). 2. **Range Sum Operation (`0 l r`)**: Compute the sum of elements from position `l` to position `r` (both inclusive, 1-indexed). Can you write a program to perform these operations? # Input Format - The first line contains an integer `N`, the size of the array. - The second line contains `N` space-separated integers representing the values of the array. - The third line contains an integer `Q`, the number of operations. - The following `Q` lines describe the operations. Each operation line is of one of the following forms: 1. `1 x v` - Update the element at position `x` to `v`. 2. `0 l r` - Return the sum of the elements from position `l` to position `r`. # Output Format - For each range sum operation (`0 l r`), output the result on a new line. # Constraints - `1 <= N <= 10^5` - `1 <= Q <= 10^5` - `1 <= x, l, r <= N` - `1 <= v <= 10^9` - `1 <= initial array elements <= 10^9` # Sample Input ``` 5 1 2 3 4 5 4 0 1 3 1 2 10 0 1 3 0 2 5 ``` # Sample Output ``` 6 14 22 ``` # Explanation - The initial array is `[1, 2, 3, 4, 5]`. - First operation `0 1 3` calculates the sum of the first three elements: `1 + 2 + 3 = 6`. - Second operation `1 2 10` updates the second element to `10`. The array becomes `[1, 10, 3, 4, 5]`. - Third operation `0 1 3` calculates the sum of the first three elements in the updated array: `1 + 10 + 3 = 14`. - Fourth operation `0 2 5` calculates the sum from the second to the fifth element in the updated array: `10 + 3 + 4 + 5 = 22`.","solution":"class ArrayOperations: def __init__(self, array): self.array = array def update(self, x, v): self.array[x - 1] = v def range_sum(self, l, r): return sum(self.array[l - 1:r]) def perform_operations(N, array, Q, operations): array_ops = ArrayOperations(array) results = [] for operation in operations: op = operation.split() if op[0] == \'1\': x = int(op[1]) v = int(op[2]) array_ops.update(x, v) elif op[0] == \'0\': l = int(op[1]) r = int(op[2]) results.append(array_ops.range_sum(l, r)) return results"},{"question":"*You are given a list of integers representing scores in a class test. Your task is to find the average score of the top K highest scorers for each test case. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers, N and K. - The second line contains N integers representing the scores of the class members. ------ Output Format ------ For each test case, output on a new line a single floating-point number, which should be the average score of the top K highest scorers, rounded to two decimal places. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ N ≤ 100 0 ≤ text{scores}_{i} ≤ 100 ------ Sample Input 1 ------ 4 5 3 50 90 80 70 60 2 2 30 45 4 2 100 100 100 100 6 1 20 40 60 80 100 90 ------ Sample Output 1 ------ 80.00 37.50 100.00 100.00 ------ Explanation 1 ------ Test case 1: The scores are [50, 90, 80, 70, 60]. The top 3 highest scorers have scores [90, 80, 70]. The average of these scores is (90+80+70)/3 = 80.00 Test case 2: The scores are [30, 45]. The top 2 highest scorers have scores [45, 30]. The average of these scores is (45+30)/2 = 37.50 Test case 3: The scores are [100, 100, 100, 100]. The top 2 highest scorers have scores [100, 100]. The average of these scores is (100+100)/2 = 100.00 Test case 4: The scores are [20, 40, 60, 80, 100, 90]. The top 1 highest scorer has the score [100]. The average of these scores is 100.00","solution":"def average_top_k_scores(test_cases): results = [] for case in test_cases: N, K, scores = case[\'N\'], case[\'K\'], case[\'scores\'] scores.sort(reverse=True) top_k_scores = scores[:K] average_score = sum(top_k_scores) / K results.append(round(average_score, 2)) return results def parse_input(input_lines): input_lines = input_lines.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N, K = map(int, input_lines[index].split()) scores = list(map(int, input_lines[index + 1].split())) test_cases.append({\'N\': N, \'K\': K, \'scores\': scores}) index += 2 return test_cases"},{"question":"You are given an array of length n consisting of integers where each integer is between 1 and n. Some elements appear twice and others appear once. Your task is to find all the elements that appear twice and return them in increasing order. -----Input----- The first line contains an integer n (1 leq n leq 10000), the number of elements in the array. The second line contains n space-separated integers representing the elements of the array where each integer is between 1 and n. -----Output----- Output the elements that appear twice in increasing order, separated by a space. If no such element exists, output -1. -----Example----- Sample Input 1: 8 4 3 2 7 8 2 3 1 Sample Output 1: 2 3 Sample Input 2: 4 1 2 3 4 Sample Output 2: -1 -----Note----- In the first example, the numbers 2 and 3 appear twice in the array. In the second example, all numbers appear only once, so the output is -1.","solution":"def find_duplicates(n, arr): from collections import Counter count = Counter(arr) duplicates = [num for num in count if count[num] == 2] return sorted(duplicates) if duplicates else [-1]"},{"question":"Given a string text, you are allowed to swap two characters that are both lowercase English letters. Design an algorithm to find the lexicographically smallest string that can be obtained with at most one swap. Example 1: Input: text = \\"abcdef\\" Output: \\"abcdef\\" Explanation: The string is already in its lexicographically smallest form, so no swaps are needed. Example 2: Input: text = \\"bca\\" Output: \\"acb\\" Explanation: Swap \'b\' and \'a\' to get \\"acb\\", which is the smallest possible lexicographical order with one swap. Example 3: Input: text = \\"abac\\" Output: \\"aabc\\" Explanation: Swap the second \'c\' and \'b\' to get \\"aabc\\". Constraints: - 1 <= text.length <= 1000 - text consists of only lowercase English letters.","solution":"def smallest_lexicographical_string(text): Find the lexicographically smallest string that can be obtained with at most one swap. Parameters: text (str): A string consisting of only lowercase English letters. Returns: str: Lexicographically smallest string after at most one swap. n = len(text) if n <= 1: return text # Convert the string to a list to facilitate swapping. text_list = list(text) # Iterate over the string to find the first place where a swap can be beneficial. for i in range(n): min_char = text_list[i] min_pos = -1 # Find the smallest character in the rest of the string. for j in range(i + 1, n): if text_list[j] < min_char: min_char = text_list[j] min_pos = j # If a smaller character is found, make the swap and return the result. if min_pos != -1: text_list[i], text_list[min_pos] = text_list[min_pos], text_list[i] return \'\'.join(text_list) # If no beneficial swap is found, return the string as is. return text"},{"question":"Maximize Product of Three Distinct Elements You are given an array of integers, and you need to find the three distinct integers in the array whose product is the maximum possible. Constraints * 3 leq |array| leq 100 * -100 leq array[i] leq 100 Input Input is given from Standard Input in the following format: ``` n a_1 a_2 a_3 . . . a_n ``` Output Output the maximum product of three distinct integers in the array. If it\'s not possible to find such three distinct integers, print `IMPOSSIBLE`. Examples Input ``` 4 1 2 3 4 ``` Output ``` 24 ``` Input ``` 5 -10 -10 1 3 2 ``` Output ``` 300 ``` Input ``` 3 -5 -2 -1 ``` Output ``` -10 ``` Input ``` 3 1 0 0 ``` Output ``` IMPOSSIBLE ```","solution":"def max_product_of_three(nums): Returns the maximum product of three distinct integers in the array, if it\'s not possible to find such three distinct integers, returns \'IMPOSSIBLE\'. if len(set(nums)) < 3: return \\"IMPOSSIBLE\\" nums = sorted(nums) max1, max2, max3 = nums[-1], nums[-2], nums[-3] min1, min2 = nums[0], nums[1] return max(max1 * max2 * max3, max1 * min1 * min2) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = [int(x) for x in data[1:]] result = max_product_of_three(nums) print(result)"},{"question":"A popular online game server keeps track of players\' scores in multiple game sessions throughout the day. Each session has a unique score value for each player, which is recorded by the server in a list. At the end of the day, the server generates a leaderboard that ranks players based on their total score across all sessions. If two or more players have the same total score, they share the same rank. Your task is to generate the leaderboard for a day given the scores of each player in multiple sessions. # Function Signature ```python def generate_leaderboard(scores: List[Dict[str, int]]) -> List[Tuple[int, List[str]]]: ``` # Input - `scores`: A list of dictionaries. Each dictionary represents scores in one session and consists of player names (strings) as keys and their respective scores (integers) as values. # Output - A list of tuples representing the leaderboard. Each tuple contains two elements: - an integer representing the rank (starting from 1) - a list of player names sharing that rank, sorted in ascending order # Example ```python scores = [ {\\"Alice\\": 50, \\"Bob\\": 40, \\"Charlie\\": 30}, {\\"Alice\\": 30, \\"Bob\\": 50, \\"Charlie\\": 50}, {\\"Alice\\": 40, \\"Bob\\": 30, \\"Charlie\\": 40} ] print(generate_leaderboard(scores)) ``` # Output ``` [ (1, [\\"Charlie\\"]), (2, [\\"Alice\\", \\"Bob\\"]) ] ``` # Explanation 1. The total scores are: - Alice: 50 + 30 + 40 = 120 - Bob: 40 + 50 + 30 = 120 - Charlie: 30 + 50 + 40 = 120 2. All three players have the same total score of 120, so they share the same rank: - Rank 1: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] sorted in alphabetical order Here\'s another example: ```python scores = [ {\\"Alice\\": 20, \\"Bob\\": 10}, {\\"Alice\\": 30, \\"Bob\\": 40}, {\\"Alice\\": 40, \\"Bob\\": 20} ] print(generate_leaderboard(scores)) ``` # Output ``` [ (1, [\\"Alice\\"]), (2, [\\"Bob\\"]) ] ``` # Explanation 1. The total scores are: - Alice: 20 + 30 + 40 = 90 - Bob: 10 + 40 + 20 = 70 2. The leaderboard is: - Rank 1: [\\"Alice\\"] - Rank 2: [\\"Bob\\"] # Constraints - The number of sessions `m` will be between 1 and 100. - The number of players in any session will be between 1 and 100. - The scores are non-negative integers.","solution":"from typing import List, Dict, Tuple from collections import defaultdict def generate_leaderboard(scores: List[Dict[str, int]]) -> List[Tuple[int, List[str]]]: Generates a leaderboard based on total scores of players across multiple sessions. Args: scores (List[Dict[str, int]]): List of dictionaries where each dictionary contains scores for players in a session. Returns: List[Tuple[int, List[str]]]: List of tuples containing rank and list of players sharing that rank. # Aggregate total scores for each player total_scores = defaultdict(int) for session in scores: for player, score in session.items(): total_scores[player] += score # Sort players based on total score in descending order with tied scores maintaining lexicographical order sorted_players = sorted(total_scores.items(), key=lambda item: (-item[1], item[0])) # Create the leaderboard with ranks leaderboard = [] rank = 1 current_score = sorted_players[0][1] accumulated_names = [] for i, (player, score) in enumerate(sorted_players): if score != current_score: leaderboard.append((rank, accumulated_names)) rank += len(accumulated_names) current_score = score accumulated_names = [player] else: accumulated_names.append(player) # Handle the last accumulated names if accumulated_names: leaderboard.append((rank, accumulated_names)) return leaderboard"},{"question":"Peter Parker is working on a new web project and he needs to rearrange some HTML elements to ensure the page renders correctly. He has a list of element IDs in the original order they appear in the HTML, and he has a list of desired positions for each of these elements in the final order. Help Peter achieve the correct order by writing a program that rearranges the list of element IDs based on the given desired positions. Input The first line contains the number of test cases T. The description of T test cases follows. Each test case consists of 3 lines: - The number of elements N (1 ≤ N ≤ 10^5). - A space-separated list of N element IDs as strings. - A space-separated list of N integers representing the target positions. Output For each test case, output the rearranged list of element IDs in a single line. Constraints 1 ≤ T ≤ 100 The sum of N across all test cases does not exceed 10^6. Element IDs are strings consisting of lowercase English letters and/or digits. Example Input: 2 5 div1 div2 div3 div4 div5 3 1 4 5 2 4 span1 span2 span3 span4 2 3 1 4 Output: div2 div5 div1 div3 div4 span3 span1 span2 span4","solution":"def rearrange_elements(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] elements = test_cases[i][1] positions = test_cases[i][2] arranged_elements = [None] * N for index, pos in enumerate(positions): arranged_elements[pos - 1] = elements[index] results.append(\\" \\".join(arranged_elements)) return results"},{"question":"Given an integer array weights where weights[i] represents the weight of the i-th item. You are also given an integer capacity representing the maximum weight you can carry. Implement a function canCarry(index, remainingWeight) that returns a boolean value indicating whether it is possible to carry items starting from index such that the total weight does not exceed remainingWeight. Also, implement the method updateWeight(index, newWeight) that updates the weight of the i-th item to newWeight in the weights array. Example: Given weights = [2, 1, 3, 4, 5], capacity = 5 canCarry(0, 5) -> true (You can carry items with weights [2, 1, 2] without exceeding the capacity) updateWeight(2, 2) canCarry(0, 5) -> true (Now you can also carry the items with weights [2, 1, 2] without exceeding the capacity) Note: The weights array is only modifiable by the updateWeight function. Assume the number of calls to canCarry and updateWeight is distributed evenly.","solution":"class WeightManager: def __init__(self, weights, capacity): self.weights = weights self.capacity = capacity def canCarry(self, index, remainingWeight): if remainingWeight < 0: return False if index >= len(self.weights): return True return self.canCarry(index + 1, remainingWeight) or self.canCarry(index + 1, remainingWeight - self.weights[index]) def updateWeight(self, index, newWeight): if index >= 0 and index < len(self.weights): self.weights[index] = newWeight"},{"question":"Problem statement Given a directed weighted graph with `N` nodes and `M` edges, find the shortest path from a given start node `S` to an end node `E`. If there are multiple paths, return the one with the minimal weight. If no such path exists, return `-1`. Constraints: * `2 leq N leq 10^5` * `1 leq M leq 10^6` * `1 leq S, E leq N` * Edge weights are non-negative integers `0 leq weight leq 100` Input Format: The input follows the following format: ``` N M S E u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M ``` Where each `u_i v_i w_i` represents a directed edge from node `u_i` to node `v_i` with weight `w_i`. Output Format: Output the minimum weight of the shortest path from node `S` to node `E`. If no path exists, return `-1`. Example: Input: ``` 5 6 1 5 1 2 2 2 3 4 1 3 1 3 4 7 4 5 1 3 5 3 ``` Output: ``` 4 ``` Explanation: The shortest path from node `1` to node `5` is `1 -> 3 -> 5` with a total weight of `1 + 3 = 4`.","solution":"import heapq def dijkstra(n, edges, start, end): Finds the shortest path in a graph using Dijkstra\'s algorithm. :param n: Number of nodes :param edges: List of edges where each edge is represented as (u, v, w) :param start: Starting node :param end: Ending node :return: Minimum weight of the shortest path from start to end, or -1 if no path exists. # Adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) # Distance table, initialized to infinity dist = [float(\'inf\')] * (n + 1) dist[start] = 0 # Min-heap priority queue (distance, node) pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) # Ignore stale pairs (lazy dijkstra) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[end] if dist[end] != float(\'inf\') else -1"},{"question":"There is a forest with n distinct trees. Each tree has a certain height which is denoted by an array h of size n, where h[i] represents the height of the ith tree. The forest can be represented as a grid where each tree occupies a single cell. Two trees are considered neighbors if they are horizontally or vertically adjacent. A magical entity can cast spells on the forest. Each spell allows the entity to select a single tree and grow it by 1 unit of height. The entity can also cast a spell to change the forest layout, swapping the positions of any two trees. Given the initial heights of trees and the maximum number of spells k that can be made, determine whether it is possible to make all trees in the forest have distinct heights. Print \\"YES\\" if it is possible and \\"NO\\" if it is not. -----Input----- The first line of the input contains two integers n (2 ≤ n ≤ 100 000) and k (0 ≤ k ≤ 100 000) — the number of trees and the number of spells respectively. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h[i] ≤ 10^9) — the heights of the trees. -----Output----- Print \\"YES\\" if it is possible to make all trees have distinct heights with at most k spells, otherwise print \\"NO\\". -----Examples----- Input 5 3 1 2 2 3 3 Output YES Input 4 1 2 2 2 2 Output NO -----Note----- In the first example, we can perform the following steps with the available spells: 1. Grow the first tree of height 1 to height 2. 2. Grow the third tree of height 2 to height 3. 3. Grow the last tree of height 3 to height 4. After these operations, the heights of the trees become [2, 2, 3, 3, 4], so we swap the first and second trees to make the heights [2, 3, 2, 3, 4]. Ultimately, the heights can be arranged as [2, 3, 4, 3, 2], such that no two trees have the same height in the forest grid. In the second example, at least 3 spells are necessary to ensure all heights are distinct, which is more than the given k=1, so it is impossible to achieve the goal with the available spells.","solution":"def can_make_distinct_heights(n, k, heights): Determines whether it is possible to make all n trees have distinct heights with at most k spells. from collections import Counter height_counts = Counter(heights) most_common_freq = height_counts.most_common(1)[0][1] # To make all heights distinct, the maximum frequency minus 1 should not # exceed k because each remaining tree needs to be adjusted. required_spells = most_common_freq - 1 if required_spells <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"A scheduler has been designed to manage tasks in a processor. Each task has a start time and an end time, both expressed as integers. The scheduler should be able to determine the maximum number of non-overlapping tasks that can be scheduled from a given list. You are given a list of n tasks, where each task is defined by its start time and end time. Your goal is to write a program that finds the maximum number of non-overlapping tasks that can be scheduled. Input Format The first line contains an integer n, representing the number of tasks. The next n lines each contain two integers s and e (separated by a space), representing the start time and end time of each task respectively. Constraints 1 leq n leq 10^5 1 leq s < e leq 10^9 Output Format Output a single integer, which is the maximum number of non-overlapping tasks that can be scheduled. Sample Input 5 1 3 2 5 4 6 7 8 5 9 Sample Output 3 Explanation The maximum number of non-overlapping tasks are: (1, 3), (4, 6), and (7, 8). Thus, the answer is 3.","solution":"def max_non_overlapping_tasks(tasks): Finds the maximum number of non-overlapping tasks that can be scheduled. Args: tasks (list of tuple): A list of tasks where each task is a tuple (start_time, end_time). Returns: int: Maximum number of non-overlapping tasks. # Sort tasks by their end times tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Write a function that takes an integer array `arr` and a positive integer `k`. The function should return the k-th smallest element in the array using the Quickselect algorithm. The Quickselect algorithm is a selection algorithm to find the k-th smallest element in an unordered list. It is related to the QuickSort sorting algorithm. Like QuickSort, it is efficient in practice and has good average-case performance. # Function Signature ```python def kth_smallest(arr: list, k: int) -> int: pass ``` # Input - `arr` (list of integers): The list of integers from which you need to find the k-th smallest element. - `k` (int): The position (1-based) of the smallest element you want to find. # Output - Return the k-th smallest element in the given array. # Example ```python # Input arr = [7, 10, 4, 3, 20, 15] k = 3 # Output 7 ``` # Constraints - You may assume all elements in the array are unique. - The array length will be between 1 and 1000. - The value of `k` will be between 1 and the length of the array.","solution":"def kth_smallest(arr: list, k: int) -> int: Returns the k-th smallest element in the array using Quickselect algorithm. :param arr: List of integers from which we need to find k-th smallest element. :param k: The position (1-based) of the smallest element we want to find. :return: The k-th smallest element in the array. def partition(low, high): pivot = arr[high] i = low for j in range(low, high): if arr[j] < pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[high] = arr[high], arr[i] return i def quickselect(low, high, k): if low == high: return arr[low] pivot_index = partition(low, high) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(low, pivot_index - 1, k) else: return quickselect(pivot_index + 1, high, k) # Convert from 1-based index to 0-based index return quickselect(0, len(arr) - 1, k - 1)"},{"question":"Tina is working with an old text-based computer system that allows only single lines of text for input and output. She needs to frequently look up certain words in a large dictionary to check their validity. However, the dictionary is stored in a very rudimentary manner — a series of words in a single continuous string, with each word separated by a space. Tina needs to write a program to help her perform these look-ups efficiently. Your task is to help Tina by writing a function that can determine whether a given word exists in the dictionary string. The function should be case-insensitive and ignore leading or trailing punctuation. -----Input----- The input consists of two lines: 1. The dictionary string `dict_string` — a single string containing words separated by spaces. It has at most 1000 characters. 2. The word to look up `lookup_word` — a single word represented as a string. It has at most 20 characters. -----Output----- Print \\"YES\\" if the word exists in the dictionary after removing any leading or trailing punctuation and case normalization. Otherwise, print \\"NO\\". -----Examples----- Input \\"hello, world. This is a simple dictionary containing: several words!\\" \\"dictionary\\" Output YES Input \\"hello, world. This is a simple dictionary containing: several words!\\" \\"universe\\" Output NO -----Note----- Consider the first example. The dictionary string contains the word \\"dictionary\\" (with no punctuation) and a lookup for the word \\"dictionary\\" should return \\"YES\\". In the second example, the word \\"universe\\" is not present, so it should return \\"NO\\".","solution":"import re def check_word_in_dict(dict_string, lookup_word): Determines whether the lookup_word exists in the given dictionary string after removing leading/trailing punctuation and normalizing to lowercase. # Normalize both the dictionary string and the lookup word to lowercase dict_string = dict_string.lower() lookup_word = lookup_word.lower() # Split the dictionary string into words and clean up leading/trailing punctuation words = re.findall(r\'bw+b\', dict_string) # Check if the lookup word exists in the cleaned words if lookup_word in words: return \\"YES\\" else: return \\"NO\\""},{"question":"A game development company is organizing a competition where the participants must stack blocks to build the highest possible tower. The blocks come in different heights, and participants are allowed to use one wildcard block, which can have its height decreased or increased exactly by one unit to adjust the height difference between consecutive blocks. The heights of the blocks are given in an array, and the goal is to determine the maximum possible height of the tower when stacking blocks optimally using the wildcard block exactly once. A block of height h_i can be placed on top of a block of height h_j if and only if |h_i - h_j| leq 1. The wildcard block can be used on any single block in the array. -----Input----- The first line contains one integer n (2 le n le 100,000) — the number of blocks. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 1,000) — the heights of the blocks. -----Output----- Print one integer — the maximum possible height of the tower. -----Examples----- Input 5 3 7 4 2 5 Output 5 Input 4 1 3 4 2 Output 4 Input 6 8 5 6 4 7 3 Output 6 -----Note----- In the first example, the best sequence of blocks without using the wildcard would be \\"2 3 4 5\\" with a height of 4. By using the wildcard block on the height \'7\' to convert it to \'6\', the sequence becomes \\"2 3 4 5 6\\" achieving a height of 5. In the second example, the tower can follow the sequence \\"1 2 3 4\\" without needing to adjust any block, resulting in a maximum height of 4. In the third example, a possible sequence is \\"3 4 5 6 7\\" where the height \'8\' can be converted to \'7\' using the wildcard block, resulting in a height of 5. However, a better sequence is \\"3 4 5 6 7 8\\", by converting \'4\' to \'5\', resulting in a height of 6.","solution":"def max_tower_height(n, heights): Determines the maximum possible height of the tower when stacking blocks optimally using the wildcard block exactly once. # Sort the block heights heights.sort() max_height = 1 current_height = 1 # Iterate through the sorted heights to find the longest possible tower for i in range(1, n): # If the current block can be placed on the last block if abs(heights[i] - heights[i - 1]) <= 1: current_height += 1 max_height = max(max_height, current_height) else: # Use wildcard block adjustment and continue the sequence if (i > 1 and abs(heights[i] - heights[i - 2]) <= 1): current_height += 1 max_height = max(max_height, current_height) elif current_height > 1 and abs(heights[i] - (heights[i - 1] + 1)) <= 1: current_height += 1 max_height = max(max_height, current_height) else: current_height = 2 # Consider the current and the last block (with adjustment) max_height = max(max_height, current_height) return max_height"},{"question":"In a small town, there is a peculiar digital clock that uses a 24-hour format (HH:MM). However, the display is faulty and can sometimes show times that do not exist (e.g., 25:61). Your task is to write a program that determines the minimum number of single character changes required to convert a given faulty time display into a valid 24-hour format time. A valid time in 24-hour format ranges from \\"00:00\\" to \\"23:59\\". Input The input consists of a single string of 5 characters representing the faulty time in the format HH:MM. Output Output a single integer, indicating the minimum number of changes required to make the faulty time display valid. Examples Input 25:61 Output 3 Input 23:59 Output 0 Explanation of Examples In the first example, \\"25:61\\" can be corrected to \\"05:01\\" with three changes: \'2\' to \'0\', \'5\' to \'0\', and \'6\' to \'0\'. In the second example, \\"23:59\\" is already a valid time, so no changes are necessary.","solution":"def min_changes_to_valid_time(faulty_time): Determines the minimum number of single character changes required to convert a given faulty time display into a valid 24-hour format time (HH:MM). hours, minutes = faulty_time.split(\':\') hours = list(hours) minutes = list(minutes) changes = 0 # Validate hours if hours[0] not in \'01\' and (hours[0] != \'2\' or hours[1] > \'3\'): changes += 1 hours[0] = \'0\' if hours[1] > \'3\' and hours[0] == \'2\': changes += 1 hours[1] = \'0\' elif hours[1] > \'9\': changes += 1 hours[1] = \'0\' # Validate minutes if minutes[0] > \'5\': changes += 1 minutes[0] = \'0\' if minutes[1] > \'9\': changes += 1 minutes[1] = \'0\' return changes"},{"question":"Mango Corporation wants to revamp their employee ID management system. The new system should generate unique employee IDs such that no two employees\' IDs differ by exactly one character. Each employee ID consists of lowercase alphabets. Due to the large number of employees, Mango Corporation wants to find out the maximum number of unique employee IDs they can generate based on the given criteria. Given a set of n strings, each representing a possible employee ID, determine the size of the largest subset of distinct employee IDs where no two IDs in the subset differ by exactly one character. Input The first line of input contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of possible employee IDs. Then n lines follow, each containing a string of lowercase alphabets representing an employee ID. Each string has a maximum length of 10 characters. Output Output a single integer — the size of the largest subset where no two IDs differ by exactly one character. Examples Input 4 abc abd acc add Output 2 Input 5 test best rest nest west Output 1 Note In the first example, one of the possible valid subsets is {\\"abc\\", \\"add\\"}. In the second example, no two IDs can be in the same subset as they all differ by exactly one character from each other. Therefore, the largest subset contains only one ID.","solution":"def find_max_subset(ids): Given a list of possible employee IDs, determine the size of the largest subset where no two IDs differ by exactly one character. :param ids: List of strings representing possible employee IDs. :return: The size of the largest valid subset. def differ_by_one_char(id1, id2): Check if two IDs differ by exactly one character. :param id1: First ID string. :param id2: Second ID string. :return: True if they differ by exactly one character, False otherwise. if len(id1) != len(id2): return False diff_count = sum(1 for a, b in zip(id1, id2) if a != b) return diff_count == 1 from itertools import combinations n = len(ids) if n == 1: return 1 subsets = [] # Generate all possible subsets for mask in range(1, 1 << n): subset = [ids[i] for i in range(n) if mask & (1 << i)] # Check if this subset is valid valid = True for id1, id2 in combinations(subset, 2): if differ_by_one_char(id1, id2): valid = False break if valid: subsets.append(len(subset)) return max(subsets)"},{"question":"Problem Consider an initially empty stack and a sequence of n operations. Each operation is one of the following: - Push an integer x onto the stack. - Pop the top element from the stack. - Print the maximum value currently present on the stack. Your task is to process the provided sequence of operations and return the results of all the print operations as a list. Constraints The input satisfies the following conditions: * 1 leq n leq 10 ^ 5 * -10^9 leq x leq 10^9 Input The input is given in the following format: The first line contains a single integer n , denoting the number of operations. The next n lines each contain one of the following commands: - \\"Push x \\" to push x onto the stack. - \\"Pop\\" to pop the top element from the stack. - \\"PrintMax\\" to print the maximum value currently in the stack. Output Print the answer as a list of integers, where each integer is the result of a \\"PrintMax\\" command. Examples Input 5 Push 3 Push 5 PrintMax Push 7 PrintMax Output [5, 7] Input 6 Push 1 Push 2 Push 3 PrintMax Pop PrintMax Output [3, 2] Note: - The stack is initially empty. - The commands are executed in the order provided. - If a \\"PrintMax\\" command is issued with an empty stack, ignore that command.","solution":"def process_operations(n, operations): stack = [] max_stack = [] results = [] for operation in operations: if operation.startswith(\'Push\'): _, x = operation.split() x = int(x) stack.append(x) if not max_stack or x >= max_stack[-1]: max_stack.append(x) elif operation == \'Pop\': if stack: popped = stack.pop() if popped == max_stack[-1]: max_stack.pop() elif operation == \'PrintMax\': if max_stack: results.append(max_stack[-1]) return results"},{"question":"You are working on a project that involves processing and summarizing large datasets. One key operation you need to perform is finding the median of a stream of integers. The median of a list of numbers is the value separating the higher half from the lower half. If the list has an odd number of elements, the median is the middle element; if it has an even number of elements, the median is the average of the two middle elements. Your task is to implement a data structure that efficiently supports the following operations: 1. `addNum(int num)`: Add an integer `num` from the data stream to the data structure. 2. `findMedian() -> float`: Return the median of all elements so far. *Note*: It\'s guaranteed that elements are added following the `addNum` method, i.e., every call to `findMedian` assumes that at least one element exists. -----Input----- For method addNum: an integer `num` where `-10^5 le num le 10^5`. For method findMedian: no input parameters. The operations are given as a series of method calls, each call can be either `addNum` or `findMedian`. -----Output----- For method addNum: No output. For method findMedian: Return the median of the current elements as a float. -----Example----- Sample Input: addNum(1) addNum(2) findMedian() addNum(3) findMedian() Sample Output: 1.5 2.0","solution":"import heapq class MedianFinder: def __init__(self): # Two heaps: max_heap for the lower half and min_heap for the upper half self.max_heap = [] # max-heap (inverted min-heap) self.min_heap = [] # min-heap def addNum(self, num: int): # Add new number to the relevant heap if not self.max_heap or num <= -self.max_heap[0]: heapq.heappush(self.max_heap, -num) else: heapq.heappush(self.min_heap, num) # Balance the heaps size if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.max_heap) < len(self.min_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self) -> float: # If max_heap has more elements, the median is the top element of max_heap if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] # If heaps are of the same size, the median is the average of the tops of both heaps else: return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"You are given an array of integers. Your task is to determine the longest contiguous subarray where the sum of the elements within this subarray does not exceed a given integer `k`. Input: An array of integers and an integer `k`. Output: An integer representing the length of the longest subarray with a sum less than or equal to `k`. If no such subarray exists, return 0. Examples: #1: ``` array: [1, 2, 3, 4, 5], k: 10 Longest subarray: [1, 2, 3, 4], Sum: 10 --> 4 ``` #2: ``` array: [3, 1, 2, 1, 6], k: 5 Longest subarray: [3, 1, 2] or [1, 2, 1, 1], Sum: 5 --> 3 ``` #3: ``` array: [3, 4, 5, 1, 2], k: 5 Longest subarray: [1, 2], Sum: 3 --> 2 ``` #4: ``` array: [10, 20, 30], k: 5 No valid subarray exists --> 0 ```","solution":"def longest_subarray_with_sum_at_most_k(arr, k): Given an array of integers arr and an integer k, determine the length of the longest contiguous subarray where the sum of the elements does not exceed k. If no such subarray exists, return 0. n = len(arr) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a binary matrix of size n x m, where each cell contains either 0 or 1. You need to find the largest square sub-matrix that contains only 1s and return its area. Input The first line contains two space-separated integers, n, and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the matrix, respectively. The next n lines contain m space-separated integers (either 0 or 1), which represent the values in the matrix. Output Print a single integer, the area of the largest square sub-matrix containing only 1s. Examples Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 4 Input 2 2 0 0 0 0 Output 0 Note In the first example, the largest square sub-matrix of 1s has a size of 2x2, and thus an area of 4. In the second example, there are no 1s in the matrix, so the largest square sub-matrix containing only 1s has an area of 0.","solution":"def largest_square_area(matrix, n, m): if not matrix: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix, n, m"},{"question":"David has a fascination with binary strings and recently came across an interesting challenge. A binary string is a string that consists only of the characters \'0\' and \'1\'. He wants to transform a given binary string into another binary string with specific operations, but he can only execute these operations within a limited budget. Each operation allows him to flip any single character (\'0\' to \'1\' or \'1\' to \'0\') in the binary string, and each flip costs him 1 unit. David wants to determine the minimum cost to transform the given binary string into a specific target binary string, such that the total cost does not exceed his budget. Given the initial binary string, the target binary string, and the budget, your task is to help David find out if the transformation is possible within the given budget. Input The first line of the input contains two integers n and b (1 ≤ n ≤ 10^5, 0 ≤ b ≤ n), where n denotes the length of the binary strings and b denotes the budget in units of cost. The second line contains the initial binary string of length n. The third line contains the target binary string of length n. Output Output \\"YES\\" if it\'s possible to transform the initial binary string into the target binary string within the budget. Otherwise, output \\"NO\\". Examples Input 5 3 11000 10011 Output YES Input 4 2 1010 0101 Output NO Note In the first sample, the initial binary string is \\"11000\\" and the target is \\"10011\\". The cost to transform the initial string into the target string is 3 (flip the second, fourth, and fifth characters). Since 3 is within the budget of 3 units, the output is \\"YES\\". In the second sample, the initial binary string is \\"1010\\" and the target is \\"0101\\". The cost to transform the initial string into the target string is 4, but with a budget of only 2 units, it is not possible. Hence, the output is \\"NO\\".","solution":"def can_transform_within_budget(n, b, initial, target): Determines if the transformation from initial binary string to target binary string is possible within the budget. Parameters: n (int): Length of the binary strings. b (int): Budget in units of cost. initial (str): Initial binary string. target (str): Target binary string. Returns: str: \\"YES\\" if transformation is possible within the budget, else \\"NO\\". cost = sum(1 for i in range(n) if initial[i] != target[i]) return \\"YES\\" if cost <= b else \\"NO\\""},{"question":"Given a positive integer N, write a function that generates a list of strings representing the first N lines of Pascal\'s Triangle. Each line in the output list should contain elements of Pascal\'s Triangle separated by spaces. Example 1: Input: N = 4 Output: [\'1\', \'1 1\', \'1 2 1\', \'1 3 3 1\'] Explanation: For N = 4, the first four lines of Pascal\'s Triangle are: 1 1 1 1 2 1 1 3 3 1 Example 2: Input: N = 5 Output: [\'1\', \'1 1\', \'1 2 1\', \'1 3 3 1\', \'1 4 6 4 1\'] Explanation: For N = 5, the first five lines of Pascal\'s Triangle are: 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 Your Task: You are required to write the function generatePascalsTriangle() which takes an integer N as input and returns a list containing N strings, each representing a line of Pascal\'s Triangle. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) (for storing the output strings) Constraints: 1 ≤ N ≤ 50","solution":"def generatePascalsTriangle(N): Generates the first N lines of Pascal\'s Triangle. Each line should be a string of numbers separated by spaces. Parameters: N (int): number of lines of Pascal\'s Triangle to generate Returns: list of str: first N lines of Pascal\'s Triangle if N <= 0: return [] triangle = [[1]] for i in range(1, N): row = [1] for j in range(1, i): row.append(triangle[i - 1][j - 1] + triangle[i - 1][j]) row.append(1) triangle.append(row) return [\\" \\".join(map(str, row)) for row in triangle]"},{"question":"```python function flatten_dictionary(dictionary) ``` that takes a dictionary with nested dictionaries and returns a flattened dictionary where the keys are concatenated by a \\".\\" (dot). E.g ```python flatten_dictionary({ \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } } }) == { \'a\': 1, \'b.c\': 2, \'b.d.e\': 3 } flatten_dictionary({ \'a\': { \'b\': { \'c\': { \'d\': 4 } } } }) == { \'a.b.c.d\': 4 } flatten_dictionary({ \'a\': 1, \'b\': { \'c\': 2, \'d\': 3 }, \'e\': { \'f\': { \'g\': { \'h\': 4 }, \'i\': 5 } } }) == { \'a\': 1, \'b.c\': 2, \'b.d\': 3, \'e.f.g.h\': 4, \'e.f.i\': 5 } ```","solution":"def flatten_dictionary(dictionary): def flatten(current_dict, parent_key=\'\', sep=\'.\'): items = [] for k, v in current_dict.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items) return flatten(dictionary)"},{"question":"You are given a list of positive integers. Your task is to find the minimum cost required to make all elements of the list equal. The allowed operation is to increase or decrease an element by 1, and each operation costs 1 unit. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the number of elements in the list. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), where a_i is the i-th element in the list. -----Output----- Print one integer res — the minimum cost required to make all elements of the list equal. -----Examples----- Input 4 1 2 3 4 Output 4 Input 3 10 20 30 Output 20","solution":"def min_cost_to_equal_elements(n, elements): Finds the minimum cost required to make all elements of the list equal. Args: n : int : the number of elements in the list. elements : list of int : the list of positive integers. Returns: int : the minimum cost required to make all elements equal. # Sort the elements to find the median elements.sort() # The optimal target is the median of the list median = elements[n // 2] # Calculate the cost to make all elements equal to the median cost = sum(abs(median - x) for x in elements) return cost"},{"question":"You are given a binary tree where each node contains an integer value. You need to perform the following operation on the tree: - For each node, if the value of the node is odd, multiply it by 2. - For each node, if the value of the node is even, divide it by 2. The operation should be performed in a level-order traversal (BFS) manner, starting from the root. After performing the operation, return the modified tree. Example: ``` Input: 6 / 4 7 / / 3 5 1 8 Output: 3 / 2 14 / / 6 10 2 4 ``` Explanation: - Start with the root node: 6 (even), divide by 2 -> 3. - Process level 1: nodes 4 (even), 7 (odd). - 4 (even), divide by 2 -> 2. - 7 (odd), multiply by 2 -> 14. - Process level 2: nodes 3 (odd), 5 (odd), 1 (odd), 8 (even). - 3 (odd), multiply by 2 -> 6. - 5 (odd), multiply by 2 -> 10. - 1 (odd), multiply by 2 -> 2. - 8 (even), divide by 2 -> 4. Your Task: You don\'t need to read input or print anything. Your task is to implement the function `modifyTree` which takes the root of the binary tree as the only argument and returns the root of the modified tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the binary tree is in the range [1, 10^5]. - The value of each node is in the range [-10^9, 10^9]. Function Signature: ```python def modifyTree(root: Optional[TreeNode]) -> Optional[TreeNode]: ``` Data structure for TreeNode: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"from collections import deque from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def modifyTree(root: Optional[TreeNode]) -> Optional[TreeNode]: if not root: return None queue = deque([root]) while queue: node = queue.popleft() if node.val % 2 == 0: node.val //= 2 else: node.val *= 2 if node.left: queue.append(node.left) if node.right: queue.append(node.right) return root"},{"question":"A popular game developer is designing a new role-playing game (RPG) system. In this game, characters can perform a sequence of actions to defeat monsters. Each action has a certain power value, and monsters have health points (HP) that are reduced by these power values. The game developer wants to ensure that each player\'s character can always defeat a given set of monsters. To do this, it is required to balance the character\'s actions such that their total power is sufficient, but not unnecessarily high. The character has `n` possible actions, each described by a power value. When facing a monster, the character can engage the monster using one or more actions. However, each action can only be used once. The goal is to determine the minimum subset of actions that must be used to defeat the monster, i.e., reduce its HP to 0 or less. Write a program to help the game developer achieve this task. For each test case, determine the minimum number of actions needed to defeat the monster. If it is not possible to defeat the monster using the given actions, output `-1`. # Input: - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of actions. - The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^6), the power values of the actions. - The third line contains an integer `m` (1 ≤ m ≤ 100), the number of monsters. - The fourth line contains `m` space-separated integers `h1, h2, ..., hm` (1 ≤ hi ≤ 10^6), the health points of the monsters. # Output: - For each test case, output a single integer on a new line, indicating the minimum number of actions required to defeat each of the `m` monsters in separate lines. If a monster cannot be defeated, output `-1` for that monster. # Example: Input: ``` 2 3 1 2 3 2 5 6 4 2 2 2 2 1 5 ``` Output: ``` 2 3 3 ``` # Explanation: - In the first test case: - For the first monster (HP = 5), the minimum actions required are `3 + 2 = 5` (2 actions). - For the second monster (HP = 6), the minimum actions required are `3 + 2 + 1 = 6` (3 actions). - In the second test case: - For the single monster (HP = 5), the minimum actions required are `2 + 2 + 2 = 6` (3 actions). Since all actions have the same power, any three of them must be chosen to ensure at least 5 HP reduction.","solution":"def min_actions_to_defeat_monster(t, test_cases): results = [] for idx in range(t): n = test_cases[idx][0] actions = sorted(test_cases[idx][1], reverse=True) m = test_cases[idx][2] monsters = test_cases[idx][3] for monster_hp in monsters: remaining_hp = monster_hp action_count = 0 for action in actions: remaining_hp -= action action_count += 1 if remaining_hp <= 0: results.append(action_count) break if remaining_hp > 0: results.append(-1) return results"},{"question":"Connor is an avid cyclist and loves to track his performance. He records the distance he rides each day using a mobile app. However, he wants to identify his streak of improvement in performance. Specifically, he is interested in the longest subarray where each day he rides a greater or equal distance compared to the previous day. Connor\'s rides are recorded in an array where each element represents the distance he rode on a specific day. Help Connor to determine the length of his longest streak of non-decreasing distances. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000), the number of days. The second line contains n integers d1, d2, ..., dn (0 ≤ di ≤ 10000) — the distances Connor rode for each of the n days. -----Output----- Print a single integer — the length of the longest streak of non-decreasing rides. -----Examples----- Input 5 2 2 3 2 5 Output 3 Input 6 3 3 3 3 3 3 Output 6 -----Note----- In the first sample, the longest streak of non-decreasing rides is from day 1 to day 3 (2, 2, 3) which is of length 3. In the second sample, every day\'s distance is the same; hence, the longest streak is the entire duration which is of length 6.","solution":"def longest_non_decreasing_streak(n, distances): Determines the length of the longest streak of non-decreasing rides. Args: n : int : number of days distances : list of int : distances rode each day Returns: int : length of the longest streak of non-decreasing distances if n == 0: return 0 max_streak = 1 current_streak = 1 for i in range(1, n): if distances[i] >= distances[i - 1]: current_streak += 1 else: current_streak = 1 max_streak = max(max_streak, current_streak) return max_streak"},{"question":"Given an n x n matrix grid containing only values 0 and 1, where 0 represents water and 1 represents land, find the length of the shortest path from the top-left corner to the bottom-right corner if you can only move up, down, left, or right. If no such path exists, return -1. Example 1: Input: grid = [[0, 1, 1], [0, 1, 0], [1, 0, 0]] Output: -1 Explanation: There is no possible path to reach the bottom-right corner. Example 2: Input: grid = [[0, 0, 1], [1, 0, 0], [1, 1, 0]] Output: 4 Explanation: The shortest path should be: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) Example 3: Input: grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] Output: 4 Explanation: The shortest path should be: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) Constraints: 1 <= n <= 1000 grid[i][j] is 0 or 1","solution":"from collections import deque def shortest_path(grid): Finds the length of the shortest path from the top-left corner to the bottom-right corner in an n x n matrix containing only values 0 (water) and 1 (land). Parameters: grid (List[List[int]]): An n x n matrix where 0 represents water and 1 represents land. Returns: int: The length of the shortest path if it exists, otherwise -1. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n = len(grid) directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n - 1 and col == n - 1: return dist for d_row, d_col in directions: new_row, new_col = row + d_row, col + d_col if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Imagine you are designing a mobile game that awards players points based on the time they take to complete various levels. The scoring system is as follows: - If the player completes the level in less than or equal to 5 minutes, they earn 100 points. - If the player completes the level in more than 5 but less than or equal to 10 minutes, they earn 80 points. - If the player completes the level in more than 10 but less than or equal to 20 minutes, they earn 50 points. - If the player takes more than 20 minutes, they earn 20 points. Given the time taken by players in various levels, determine the total points each player earns. ------ Input Format ------ - The first line contains a single integer N, the number of players. - The next N lines each contain a single integer T, the time taken (in minutes) by a player to complete the level. ------ Output Format ------ For each player, output the total points they earn for that level on a new line. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ T ≤ 100 ----- Sample Input 1 ------ 4 5 12 19 21 ----- Sample Output 1 ------ 100 50 50 20 ----- Explanation 1 ------ Test case 1: Since T = 5, the player earns 100 points. Test case 2: Since 10 < T = 12 ≤ 20, the player earns 50 points. Test case 4: Since T = 21 > 20, the player earns 20 points.","solution":"def calculate_points(time_list): Given a list of times taken by each player to complete a level, returns a list of points earned by each player. Arguments: time_list -- list of integers where each integer is the time taken by a player. Returns: list of integers where each integer is the points earned by a player. points = [] for T in time_list: if T <= 5: points.append(100) elif T <= 10: points.append(80) elif T <= 20: points.append(50) else: points.append(20) return points"},{"question":"problem Given a list of integers, write a program to determine the length of the longest subsequence that consists of consecutive integers. The consecutive integers can appear in any order within the subsequence, meaning the sequence does not need to be continuous in the list. Input - The input consists of multiple datasets. - Each dataset starts with the number of integers N (1 ≤ N ≤ 10000). The following N integers represent the elements of the list. - When N is 0, it indicates the end of input. - The number of datasets does not exceed 5. Output - For each dataset, output the length of the longest subsequence of consecutive integers on a single line. Example Input 7 2 6 1 9 4 5 3 5 1 3 5 7 9 0 Output 6 1 Input None Output None","solution":"def length_of_longest_consecutive_subsequence(nums): nums_set = set(nums) longest_length = 0 for num in nums: if num - 1 not in nums_set: # Check if it\'s the start of a sequence current_length = 1 while num + current_length in nums_set: current_length += 1 longest_length = max(longest_length, current_length) return longest_length def process_input(input_lines): results = [] index = 0 while index < len(input_lines): N = int(input_lines[index]) if N == 0: break dataset = list(map(int, input_lines[index + 1: index + 1 + N])) results.append(length_of_longest_consecutive_subsequence(dataset)) index += N + 1 return results def main(): import sys input_lines = sys.stdin.read().strip().split() results = process_input(input_lines) for result in results: print(result)"},{"question":"You are working as a developer at a game company. The company is designing a new multiplayer game where players collect treasures. Each player has a unique ID and at any given time can have a certain number of treasures. The game developers want to create a feature that will allow them to find out how many unique players have collected at least K treasures within a specific time frame. Your task is to write a program that will read a list of player activities within a given time frame and determine the number of unique players who collected at least K treasures. Input: The first line of input contains two integers T and K. T denotes the number of player activity records and K denotes the minimum number of treasures a player must have collected to be counted. The next T lines each contain a player ID and the number of treasures collected by that player in that activity. Output: A single integer denoting the number of unique players who collected at least K treasures in total. Constraints: 1 ≤ T ≤ 1000 1 ≤ K ≤ 100 1 ≤ playerID ≤ 10000 1 ≤ collected_treasures ≤ 50 SAMPLE INPUT 5 10 1 5 2 6 1 6 3 4 2 5 SAMPLE OUTPUT 2 Explanation Player 1 has collected 5 + 6 = 11 treasures, which is greater than or equal to K. Player 2 has collected 6 + 5 = 11 treasures, which is greater than or equal to K. Player 3 has collected only 4 treasures, which is less than K. So there are 2 unique players who have collected at least K treasures.","solution":"def count_players_with_at_least_k_treasures(T, K, activities): Returns the number of unique players who collected at least K treasures from collections import defaultdict # Create a dictionary to store the total treasures collected by each player player_treasures = defaultdict(int) # Iterate through each activity record and update player\'s treasure count for player_id, treasures_collected in activities: player_treasures[player_id] += treasures_collected # Count how many players have collected at least K treasures count = sum(1 for treasures in player_treasures.values() if treasures >= K) return count # Example usage with the sample input T = 5 K = 10 activities = [(1, 5), (2, 6), (1, 6), (3, 4), (2, 5)] print(count_players_with_at_least_k_treasures(T, K, activities)) # Output: 2"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid is an uncolored cell initially. You are asked to color some of these cells. The rules for coloring are as follows: 1. You may perform the following operation any number of times: choose a single cell (i, j) and a color C, and color cell (i, j) and its orthogonal neighbors (i.e., cells directly above, below, left, and right of (i, j)) with the color C. 2. A cell can be recolored any number of times. You need to determine the minimum number of operations required to color the entire grid such that every cell in the grid is colored at least once. Input The input consists of a single line containing two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns of the grid respectively. Output Print a single integer — the minimum number of operations required to color the entire grid. Examples Input 3 3 Output 1 Input 5 5 Output 1 Input 2 4 Output 2","solution":"def min_operations_to_color_grid(n, m): Returns the minimum number of operations required to color the entire grid. # If either n or m is odd, we can cover the entire grid with one operation. if n % 2 == 1 or m % 2 == 1: return 1 # If both n and m are even, we need two operations. else: return 2"},{"question":"A group of friends are participating in a treasure hunt. Each friend has a distinct energy level that determines how many tasks they can complete before they run out of energy. The goal is to maximize the total number of tasks completed by all friends before everyone runs out of energy. However, there\'s a catch: tasks must be assigned to friends in a round-robin manner, starting with the first friend, then the second, and so on, wrapping back to the first friend after the last one. Each task takes exactly 1 unit of energy. Given the energy levels of each friend and the total number of tasks, you need to find the maximum number of tasks that can be completed. -----Input:----- - The first line contains N, the number of friends. - The second line contains N integers, representing the energy levels of each friend. - The third line contains an integer T, the total number of tasks. -----Output:----- Output a single integer, the maximum number of tasks that can be completed. -----Constraints:----- - 1 leq N leq 100 - 1 leq energy_i leq 1000 for all 1 leq i leq N - 1 leq T leq 10^5 -----Sample Input:----- 3 5 2 3 10 -----Sample Output:----- 10 -----Sample Input 2:----- 4 1 1 1 1 5 -----Sample Output 2:----- 4 Explanation: In the first example, each round of assignments (1st friend, 2nd friend, 3rd friend) can be done fully twice (6 tasks), after which the 1st friend can complete 3 more tasks, and the 3rd friend can complete 1 more task, totaling 10 tasks completed. In the second example, each friend can complete exactly 1 task, so only 4 tasks can be completed out of the 5 available before all friends run out of energy.","solution":"def max_tasks_completed(N, energy_levels, T): total_energy = sum(energy_levels) if total_energy <= T: return total_energy completed_tasks = 0 while T > 0: for energy in energy_levels: if T == 0: break if energy > 0: completed_tasks += 1 T -= 1 return completed_tasks"},{"question":"Description: Given a string, you need to transform each character to the character 13 places after it in the alphabet. If the shifted character goes beyond \'z\', it should wrap around back to \'a\'. This transformation is known as ROT13, a simple substitution cipher. Your task is to implement the ROT13 cipher for the given string. The string will contain only lowercase alphabetic characters. Examples: Input: \\"hello\\" --> Output: \\"uryyb\\" Input: \\"abcdefghijklmnopqrstuvwxyz\\" --> Output: \\"nopqrstuvwxyzabcdefghijklm\\" Input: \\"rot13example\\" --> Output: \\"ebg13rknzcyr\\"","solution":"def rot13_cipher(text): Transforms each character to the character 13 places after it in the alphabet. Wraps around if it goes beyond \'z\'. Only processes lowercase alphabetic characters. result = [] for char in text: if \'a\' <= char <= \'z\': shifted_char = chr(((ord(char) - ord(\'a\') + 13) % 26) + ord(\'a\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"John is a budding software engineer and loves experimenting with different data structures. One day, he encountered a problem related to linked lists. The problem is to find whether a given linked list contains a cycle. A cycle occurs if the linked list has a node that can be reached again by continuously following the next pointer. Given a singly linked list, write a function to determine if the linked list has a cycle in it. You should not modify the linked list in any way. **Function Signature:** ```python def has_cycle(head: ListNode) -> bool: ``` **Input:** - A single `ListNode` object representing the head of the linked list. The `ListNode` class is defined as follows: ```python class ListNode: def __init__(self, x): self.val = x self.next = None ``` - The function will be given a pointer to the head of the linked list. It is guaranteed that the `ListNode` objects are properly initialized. **Output:** - The function should return a boolean: `True` if there is a cycle in the linked list, and `False` otherwise. **Examples:** Example 1: ```python # Definition for the linked list node1 = ListNode(3) node2 = ListNode(2) node3 = ListNode(0) node4 = ListNode(-4) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 # Creates a cycle print(has_cycle(node1)) # Output: True ``` Example 2: ```python # Definition for the linked list node1 = ListNode(1) node2 = ListNode(2) node1.next = node2 node2.next = node1 # Creates a cycle print(has_cycle(node1)) # Output: True ``` Example 3: ```python # Definition for the linked list node1 = ListNode(1) print(has_cycle(node1)) # Output: False ``` **Notes:** - You may assume no negative cycles exist. - Aim to implement an efficient algorithm that makes use of Floyd\'s Tortoise and Hare algorithm or any other efficient cycle detection method.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head: ListNode) -> bool: Determines if a linked list has a cycle. Uses Floyd\'s Tortoise and Hare Algorithm. if head is None: return False slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Create a function that simulates the game \\"Pig Latin\\". In Pig Latin, the goal is to alter English words according to the following rules: - If a word begins with a consonant (any letter not among \'a\', \'e\', \'i\', \'o\', \'u\'), then all the consonants before the first vowel are moved to the end of the word, followed by \'ay\'. Example: \\"hello\\" -> \\"ellohay\\". - If a word begins with a vowel (letters \'a\', \'e\', \'i\', \'o\', \'u\'), then \'way\' is simply added to the end of the word. Example: \\"apple\\" -> \\"appleway\\". Write a function that takes in a sentence with lowercase English words and converts each word to its Pig Latin equivalent, maintaining the order of words and ignoring punctuation. Input A single string containing one or more words (1 ≤ length of the string ≤ 100). All words are lowercase and separated by spaces. Output A single string where each word in the input sentence is converted to Pig Latin. Examples Input \\"hello world\\" Output \\"ellohay orldway\\" Input \\"pig latin is cool\\" Output \\"igpay atinlay isway oolcay\\" Input \\"this is a test\\" Output \\"isthay isway away esttay\\"","solution":"def pig_latin(sentence): Converts each word in the sentence to Pig Latin. def convert_word(word): vowels = \'aeiou\' if word[0] in vowels: return word + \\"way\\" else: for i in range(len(word)): if word[i] in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" # Case when no vowels are found (theoretically shouldn\'t happen with given constraints) words = sentence.split() pig_latin_words = [convert_word(word) for word in words] return \' \'.join(pig_latin_words)"},{"question":"Write a function that simulates a stock price monitoring system. This system receives a stream of stock prices and allows querying for the running average price over the last K prices received. Write a function to implement this functionality. You need to support two operations: 1. **add_price(x)**: Add a new stock price boldsymbol{x}. 2. **get_average()**: Return the current average of the last K stock prices. If fewer than K prices have been received, return the average of all prices received so far. The average should be returned as a floating point number with exactly 2 decimal places. **Input:** - The first line contains two integers N and K (1 leq K leq N leq 10^5). Here, N is the number of operations to be performed, and K is the number of stock prices to use for calculating the running average. - The next N lines contain either \\"add boldsymbol{x}\\", where boldsymbol{x} is a new price to be added, or \\"average\\", to get the current running average. - Each stock price boldsymbol{x} is a positive integer (1 ≤ x ≤ 10^3). **Output:** For every \\"average\\" operation, output the running average of the last K stock prices received, rounded to 2 decimal places. **Example:** Input: ``` 8 3 add 10 average add 20 average add 30 average add 40 average add 50 average ``` Output: ``` 10.00 15.00 20.00 30.00 40.00 ``` Note: - The first \\"average\\" operation returns 10.00 as only one price has been added. - The second \\"average\\" operation returns 15.00 as the average of [10, 20]. - After three prices are added, the \\"average\\" operation returns 20.00 as the average of [10, 20, 30]. - Subsequent \\"average\\" operations use a sliding window of the last K prices.","solution":"from collections import deque class StockPriceMonitor: def __init__(self, K): self.prices = deque([]) self.K = K self.sum = 0.0 def add_price(self, x): if len(self.prices) == self.K: self.sum -= self.prices.popleft() self.prices.append(x) self.sum += x def get_average(self): count = len(self.prices) if count == 0: return 0.00 return round(self.sum / count, 2) def process_operations(operations, K): monitor = StockPriceMonitor(K) results = [] for operation in operations: if operation.startswith(\\"add\\"): x = int(operation.split()[1]) monitor.add_price(x) elif operation == \\"average\\": results.append(monitor.get_average()) return results"},{"question":"In many web applications, a user\'s session timeout is a common feature where a user is automatically logged out after a period of inactivity. Your task is to write a function that determines whether a user should be considered as having a continuous session or not. The function should take two arguments: a list of timestamps (in seconds) representing user activity and a timeout period also in seconds. Each timestamp in the list is sorted in ascending order. Your function should return `True` if the user has a continuous session within the given timeout period, otherwise return `False`. A session is considered continuous if the time difference between any two consecutive timestamps in the list does not exceed the timeout period. # Examples ```python # Example 1 timestamps = [10, 20, 30, 60] timeout = 15 # Here, the differences between consecutive timestamps are: # 20 - 10 = 10, 30 - 20 = 10, 60 - 30 = 30 # Since 30 is greater than the timeout period of 15, the session is not continuous. # Output: False # Example 2 timestamps = [100, 105, 120, 130] timeout = 20 # Here, the differences between consecutive timestamps are: # 105 - 100 = 5, 120 - 105 = 15, 130 - 120 = 10 # All differences are less than or equal to the timeout period of 20. # Output: True def is_continuous_session(timestamps, timeout): # implementation of the function ``` Note: - The function should handle edge cases such as an empty list of timestamps or a single timestamp. - Assume all timestamps and timeout values will be non-negative integers.","solution":"def is_continuous_session(timestamps, timeout): Determines if a user\'s session is continuous based on given timestamps and timeout period. :param timestamps: List of integer timestamps in seconds representing user activity :param timeout: Integer timeout period in seconds :return: Boolean indicating if the session is continuous if len(timestamps) <= 1: return True for i in range(1, len(timestamps)): if timestamps[i] - timestamps[i - 1] > timeout: return False return True"},{"question":"A programming competition scoreboard system needs to keep track of participants\' scores. Each participant can submit multiple solutions, and for each solution, the scoreboard records the best score achieved by that participant. Given a list of participant IDs and their respective scores for each submission, calculate and output the highest score for every participant ID. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of submissions. - The next N lines each contain a string P and an integer S, representing a participant ID and the score for that submission. ------ Output Format ------ For each test case, output in a single line the participant ID and the highest score they achieved, sorted by participant ID in lexicographical order. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ P ≤ 10 characters (a string of 1 to 10 alphabetical characters) 0 ≤ S ≤ 1000 ----- Sample Input 1 ------ 1 5 Alice 450 Bob 300 Alice 470 Bob 320 Charlie 500 ----- Sample Output 1 ------ Alice 470 Bob 320 Charlie 500 ----- Explanation 1 ------ In the single test case, we have: - Alice submitted two solutions with scores 450 and 470. The highest score recorded for Alice is 470. - Bob submitted two solutions with scores 300 and 320. The highest score recorded for Bob is 320. - Charlie submitted one solution with a score of 500.","solution":"def calculate_highest_scores(test_cases): results = [] for test in test_cases: n = test[0] submissions = test[1:] score_dict = {} for submission in submissions: participant, score = submission if participant in score_dict: if score > score_dict[participant]: score_dict[participant] = score else: score_dict[participant] = score sorted_scores = sorted(score_dict.items()) results.append(\\" \\".join(f\\"{participant} {score}\\" for participant, score in sorted_scores)) return results # Example usage: # test_cases = [ # (5, # (\\"Alice\\", 450), # (\\"Bob\\", 300), # (\\"Alice\\", 470), # (\\"Bob\\", 320), # (\\"Charlie\\", 500)) # ] # print(calculate_highest_scores(test_cases))"},{"question":"You are given a set of points in a 2D plane and a number of edges connecting some pairs of them, forming an undirected graph. The points and edges are given in three separate lists. Your task is to define a function that checks if the given points and edges form a single connected component, i.e., if there is a path between every pair of points in the graph. Points are represented as tuples of coordinates (x, y), and edges are represented as tuples of indices (u, v), where each index refers to a point in the points list. Write a function `is_connected(points, edges)` that takes two parameters: - `points`: a list of tuples representing the points in the 2D plane. - `edges`: a list of tuples representing the edges, where each edge connects two points by their indices in the points list. The function should return a boolean value indicating whether all points are connected or not. # Example ```python def is_connected(points, edges): # Your implementation here points = [(0, 0), (1, 0), (1, 1), (0, 1)] edges = [(0, 1), (1, 2), (2, 3), (3, 0)] print(is_connected(points, edges)) # Output: True points = [(0, 0), (1, 0), (1, 1), (0, 1)] edges = [(0, 1), (1, 2)] print(is_connected(points, edges)) # Output: False ``` # Constraints - All coordinates are distinct integers within the range ([-10^3, 10^3]). - The number of points `n` is at most (10^5). - The number of edges is at most (2 cdot 10^5). # Explanation If the graph formed by the given points and edges is a single connected component, the function should return `True`; otherwise, it should return `False`.","solution":"def is_connected(points, edges): Returns True if all points are connected, False otherwise. if not points: return True # No points to connect, trivially connected # Number of points n = len(points) # Initialize adjacency list for the graph adjacency_list = {i: [] for i in range(n)} # Populate the adjacency list with edges for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Helper function to perform DFS def dfs(node, visited): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) stack.extend(adjacency_list[current]) visited = set() # Start DFS from the first point (index 0) dfs(0, visited) # Check if all points are visited return len(visited) == n"},{"question":"You are given a list of integers and a target sum. Your task is to find the number of unique pairs in the list that add up to the target sum. A pair is considered unique if no two pairs consist of the same integers, regardless of the order of the integers. Input The first line of the input contains one integer T -- the number of test cases (1 ≤ T ≤ 10). Each test case consists of two lines. The first line of each test case contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10^6), where n is the number of integers in the list and k is the target sum. The second line contains n space-separated integers representing the list (each integer is between -10^6 and 10^6). Output For each test case, output one line containing the number of unique pairs that add up to the target sum. Example Input: 3 5 7 1 2 3 4 5 5 10 1 1 1 1 9 4 0 1 -1 2 -2 Output: 2 1 2 Explanation: In the first test case, the pairs are (2, 5) and (3, 4). In the second test case, the only pair is (1, 9). In the third test case, the pairs are (1, -1) and (2, -2).","solution":"def count_unique_pairs(test_cases): Returns a list with the number of unique pairs for each test case. results = [] for n, k, array in test_cases: seen = set() pairs = set() for num in array: complement = k - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) results.append(len(pairs)) return results # Function to handle input/output for the use case def process_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, k = map(int, lines[index].split()) array = list(map(int, lines[index + 1].split())) test_cases.append((n, k, array)) index += 2 return count_unique_pairs(test_cases)"},{"question":"In this task, we will be working with a directed acyclic graph (DAG) that is represented by n nodes and m directed edges. Let us consider the pair of nodes (u, v) such that there exists a direct edge from node u to node v. Given that a \\"path\\" in a graph is a sequence of vertices connected by edges, the length of a path is the number of edges in the path. For each node u, let us define text{max_dist}(u) as the length of the longest path ending at node u. Write a function that, for a given directed acyclic graph, computes the maximum length of any path in the graph. Input Format The first line contains two space-separated integers, n and m, representing the number of nodes and the number of directed edges in the graph, respectively. Each of the m subsequent lines contains two space-separated integers a_i and b_i indicating a directed edge from node a_i to node b_i (1 leq a_i, b_i leq n). Constraints 2 leq n, m leq 100000 1 leq a_i, b_i leq n The graph is a Directed Acyclic Graph (DAG). Output Format Print a single integer that denotes the length of the longest path in the graph. Sample Input 5 6 1 2 1 3 3 4 3 5 4 5 2 4 Sample Output 3 Explanation In the sample case, one of the longest paths is 1 rightarrow 3 rightarrow 4 rightarrow 5. The length of this path is 3.","solution":"from collections import defaultdict, deque def longest_path_in_dag(n, m, edges): def topological_sort(): in_degree = {i: 0 for i in range(1, n+1)} for u, v in edges: in_degree[v] += 1 zero_in_degree = deque([node for node in in_degree if in_degree[node] == 0]) topo_order = [] while zero_in_degree: current_node = zero_in_degree.popleft() topo_order.append(current_node) for neighbor in graph[current_node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) return topo_order graph = defaultdict(list) for u, v in edges: graph[u].append(v) topo_order = topological_sort() longest_paths = [0] * (n + 1) for node in topo_order: for neighbor in graph[node]: if longest_paths[neighbor] < longest_paths[node] + 1: longest_paths[neighbor] = longest_paths[node] + 1 return max(longest_paths) # Sample Input n = 5 m = 6 edges = [ (1, 2), (1, 3), (3, 4), (3, 5), (4, 5), (2, 4) ] # Sample Output print(longest_path_in_dag(n, m, edges)) # Output: 3"},{"question":"In a large-scale forest restoration project, a series of drones are employed to plant seeds. Each drone is responsible for specific, non-overlapping rectangular sections of the forest, determined by a grid. The sections may form various paths within the overall grid, but each drone follows the edges and corners to ensure complete coverage of its assigned section. You are given the dimensions of a grid representing the forest and a set of instructions for each drone as to how it will traverse its rectangular section. Each instruction consists of the top-left and bottom-right coordinates of the section the drone will cover. Your job is to simulate the result of the drones covering their sections and determine if the entire forest grid is completely covered by at least one drone. -----Input----- The first line of the input contains two integers R and C (1 leq R, C leq 1000), where R is the number of rows and C is the number of columns of the forest grid. The second line contains an integer D (1 leq D leq 10^5), where D is the number of drones. The next D lines each contain four integers r1, c1, r2, and c2 (0 leq r1 leq r2 < R, 0 leq c1 leq c2 < C), representing the top-left (r1, c1) and bottom-right (r2, c2) coordinates of the rectangular section each drone will cover. -----Output----- Output \\"YES\\" if the entire forest grid is covered by at least one drone, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 5 5 2 0 0 2 2 2 2 4 4 Sample Output 1: NO Sample Input 2: 5 5 3 0 0 4 4 1 1 2 2 3 3 4 4 Sample Output 2: YES","solution":"def is_forest_fully_covered(R, C, drones): # Create a grid initialized to 0 grid = [[0] * C for _ in range(R)] # Apply each drone\'s coverage for r1, c1, r2, c2 in drones: for r in range(r1, r2+1): for c in range(c1, c2+1): grid[r][c] = 1 # Check if the grid is fully covered for row in grid: if 0 in row: return \\"NO\\" return \\"YES\\" # Example usage: # R, C = 5, 5 # drones = [(0, 0, 2, 2), (2, 2, 4, 4)] # print(is_forest_fully_covered(R, C, drones)) # Output: \\"NO\\""},{"question":"Palindromic Substrings A palindrome is a string that reads the same forward and backward. Write a function `countPalindromicSubstrings(s: str) -> int` that takes in a string `s`, and returns the number of palindromic substrings within `s`. A substring is a contiguous sequence of characters within a string. Here are some examples: 1. Input: `\\"abc\\"` Output: `3` Explanation: ``` The palindromic substrings are [\\"a\\", \\"b\\", \\"c\\"]. ``` 2. Input: `\\"aaa\\"` Output: `6` Explanation: ``` The palindromic substrings are [\\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\"]. ``` 3. Input: `\\"abccba\\"` Output: `9` Explanation: ``` The palindromic substrings are [\\"a\\", \\"b\\", \\"c\\", \\"c\\", \\"b\\", \\"a\\", \\"cc\\", \\"bccb\\", \\"abccba\\"]. ``` The function should be optimized to handle inputs up to 1000 characters long.","solution":"def countPalindromicSubstrings(s: str) -> int: Counts the number of palindromic substrings in the input string s. :param s: Input string :return: Number of palindromic substrings n = len(s) count = 0 def expand_from_center(left: int, right: int): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes (single center) expand_from_center(i, i) # Even length palindromes (double center) expand_from_center(i, i + 1) return count"},{"question":"Given two sorted arrays arr1 and arr2 of lengths n and m respectively, and a positive integer k, the task is to find the k-th element in the union of these two arrays. Example 1: Input: arr1 = [2, 3, 6, 7, 9] arr2 = [1, 4, 8, 10] k = 5 Output: 6 Explanation: The union of both arrays is [1, 2, 3, 4, 6, 7, 8, 9, 10], and the 5th element is 6. Example 2: Input: arr1 = [1] arr2 = [2, 3, 4, 5, 6] k = 3 Output: 3 Explanation: The union of both arrays is [1, 2, 3, 4, 5, 6], and the 3rd element is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthElement() which takes two arrays arr1 and arr2, their lengths n and m, and an integer k as inputs and returns the k-th element in the union of these two arrays. Expected Time Complexity: O(log(min(n, m))) Expected Auxiliary Space: O(1) Constraints: 1 <= n, m <= 10^5 1 <= arr1[i], arr2[i] <= 10^6 1 <= k <= n + m","solution":"def kthElement(arr1, arr2, n, m, k): if n > m: return kthElement(arr2, arr1, m, n, k) low, high = max(0, k - m), min(k, n) while low <= high: cut1 = (low + high) // 2 cut2 = k - cut1 left1 = arr1[cut1 - 1] if cut1 > 0 else float(\'-inf\') left2 = arr2[cut2 - 1] if cut2 > 0 else float(\'-inf\') right1 = arr1[cut1] if cut1 < n else float(\'inf\') right2 = arr2[cut2] if cut2 < m else float(\'inf\') if left1 <= right2 and left2 <= right1: return max(left1, left2) elif left1 > right2: high = cut1 - 1 else: low = cut1 + 1 return -1"},{"question":"Write a program that formats a given date from one format to another. The program should accept multiple date formats as input and output the dates in a standardized format. The following formats should be supported as input: - YYYY/MM/DD - MM-DD-YYYY - DD.MM.YYYY The standardized output format should be: - YYYY-MM-DD **Input:** - Multiple lines of dates in various formats. - The end of input is indicated by the keyword \\"end\\". **Output:** - Each date converted to the standardized format on a new line. **Example:** Input: ``` 2023/10/14 04-15-2021 30.09.2020 end ``` Output: ``` 2023-10-14 2021-04-15 2020-09-30 ``` **Notes:** - Assume that the input dates are valid and in the correct corresponding format as specified. - The program should handle each input date line by line, convert the format, and print the result before processing the next line.","solution":"def format_date(input_lines): from datetime import datetime formatted_dates = [] for line in input_lines: if line.strip().lower() == \\"end\\": break if \'/\' in line: date_obj = datetime.strptime(line.strip(), \'%Y/%m/%d\') elif \'-\' in line: date_obj = datetime.strptime(line.strip(), \'%m-%d-%Y\') elif \'.\' in line: date_obj = datetime.strptime(line.strip(), \'%d.%m.%Y\') else: continue formatted_dates.append(date_obj.strftime(\'%Y-%m-%d\')) return formatted_dates"},{"question":"Alicia is a software engineer who likes to work with robotic arms. Each robotic arm can rotate to a specific angle, and she wants to set the angle of each robotic arm such that it stays within a certain range, defined by a minimum and maximum angle. Alicia begins with the current angles of each robotic arm and has a list of queries. Each query asks her to find out the number of robotic arms that can be adjusted to fall within a specific range without crossing the minimum or maximum constraints provided in the query. Write a program to help Alicia find the number of robotic arms that can be adjusted to be within the given range for each query. # Input format: - The first line contains an integer `N`, the number of robotic arms. - The second line contains `N` integers, where each integer `a_i` denotes the initial angle of the i-th robotic arm. - The third line contains an integer `Q`, the number of queries. - Each of the next `Q` lines contains two integers `L` and `R`, representing the minimum and maximum angles respectively for each query. # Output format: For each query, output a single integer, the number of robotic arms that can be adjusted to be within the specified range [L, R] inclusive. # Constraints: - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 0 ≤ a_i ≤ 360 - 0 ≤ L ≤ R ≤ 360 # Sample Input: ``` 5 50 120 180 90 60 3 30 100 100 200 0 360 ``` # Sample Output: ``` 3 2 5 ``` # Explanation: - For the first query, there are three robotic arms (angles 50, 90, 60) that can be adjusted to fall within the range [30, 100]. - For the second query, there are two robotic arms (angles 120, 180) that can be adjusted to fall within the range [100, 200]. - For the third query, all five robotic arms can be adjusted within the range [0, 360].","solution":"def count_arms_within_range(angles, queries): Returns the number of robotic arms that can be adjusted to fall within the specified range for each query. Parameters: angles (list of int): List of initial angles of the robotic arms. queries (list of tuples): List of queries where each query is represented by a tuple (L, R). Returns: list of int: List of the number of robotic arms that fall within the range for each query. counts = [] for L, R in queries: count = sum(1 for angle in angles if L <= angle <= R) counts.append(count) return counts"},{"question":"Given a matrix of integers and a number k, your task is to find the maximum sum of a submatrix of size k x k. Input: The first line consists of an integer T, the number of test cases. The first line of each test case contains two integers, N and k, where N is the size of the N x N matrix and k is the size of the submatrix. The next N lines contain N integers each, representing the matrix elements. Output: For each test case, print the maximum sum of any k x k submatrix found in the given matrix. Constraints: 1 <= T <= 50 1 <= N <= 100 1 <= k <= N -100 <= matrix[i][j] <= 100 Example: Input: 2 4 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 1 2 3 4 5 6 7 8 9 Output: 4 28","solution":"def max_sum_submatrix(test_cases): def get_max_kxk_sum(matrix, N, k): max_sum = -float(\'inf\') # Create a 2D array for storing sums of submatrices ending at (i, j) for i in range(N): for j in range(N): if i > 0: matrix[i][j] += matrix[i-1][j] if j > 0: matrix[i][j] += matrix[i][j-1] if i > 0 and j > 0: matrix[i][j] -= matrix[i-1][j-1] # Find maximum sum of kxk submatrix for i in range(k-1, N): for j in range(k-1, N): sub_matrix_sum = matrix[i][j] if i >= k: sub_matrix_sum -= matrix[i-k][j] if j >= k: sub_matrix_sum -= matrix[i][j-k] if i >= k and j >= k: sub_matrix_sum += matrix[i-k][j-k] max_sum = max(max_sum, sub_matrix_sum) return max_sum results = [] for test in test_cases: N, k = test[\'N\'], test[\'k\'] matrix = test[\'matrix\'] results.append(get_max_kxk_sum(matrix, N, k)) return results"},{"question":"You are helping a robotics team solve a problem involving their robot\'s movement. The robot moves along a 2D grid, starting at the origin (0, 0). The robot is given a sequence of movement commands, and you need to determine the robot\'s final position. The commands include five types: 1. \\"UP x\\" - Move up by x units. 2. \\"DOWN x\\" - Move down by x units. 3. \\"LEFT x\\" - Move left by x units. 4. \\"RIGHT x\\" - Move right by x units. 5. \\"JUMP x y\\" - Jump to the position (x, y). The sequence of commands is always valid, and the robot starts at the origin (0, 0). -----Input----- The first line of input contains an integer n (1 le n le 100), which is the number of commands. Each of the following n lines contains a command, which is one of: - \\"UP x\\" where x is a non-negative integer (0 le x le 10^4), - \\"DOWN x\\" where x is a non-negative integer (0 le x le 10^4), - \\"LEFT x\\" where x is a non-negative integer (0 le x le 10^4), - \\"RIGHT x\\" where x is a non-negative integer (0 le x le 10^4), - \\"JUMP x y\\" where both x and y are integers (-10^4 le x, y le 10^4). -----Output----- Output two space-separated integers, which are the final coordinates of the robot. -----Examples----- Sample Input: 3 UP 10 LEFT 20 JUMP 5 7 Sample Output: 5 7 Sample Input: 4 RIGHT 5 UP 10 DOWN 5 LEFT 2 Sample Output: 3 5","solution":"def final_position(commands): x, y = 0, 0 for command in commands: parts = command.split() direction = parts[0] if direction == \\"UP\\": y += int(parts[1]) elif direction == \\"DOWN\\": y -= int(parts[1]) elif direction == \\"LEFT\\": x -= int(parts[1]) elif direction == \\"RIGHT\\": x += int(parts[1]) elif direction == \\"JUMP\\": x = int(parts[1]) y = int(parts[2]) return x, y"},{"question":"Given a string s and an array of words, determine if s can be segmented into a space-separated sequence of one or more dictionary words from the array. The same word in the dictionary may be reused multiple times in the segmentation. The function should return true if s can be segmented in such a way, otherwise, it should return false. Example 1: Input: s = \\"leetcode\\", words = [\\"leet\\", \\"code\\"] Output: true Explanation: Return true because \\"leetcode\\" can be segmented as \\"leet code\\". Example 2: Input: s = \\"applepenapple\\", words = [\\"apple\\", \\"pen\\"] Output: true Explanation: Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Note that you are allowed to reuse dictionary words. Example 3: Input: s = \\"catsandog\\", words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: false Explanation: The word \\"catsandog\\" cannot be fully segmented into dictionary words. Your Task: Complete the function canBeSegmented() which takes in a string s and an array of words and returns a boolean indicating whether the string can be segmented into one or more dictionary words from the array. Constraints: - 1 ≤ s.length ≤ 300 - 1 ≤ words.length ≤ 1000 - 1 ≤ words[i].length ≤ 20 - s consists of only lowercase English letters. - words[i] consists of only lowercase English letters. Expected Time Complexity: O(n * k), where n is the length of the given string and k is the number of words in the dictionary. Expected Auxiliary Space: O(n).","solution":"def canBeSegmented(s, words): Determine if s can be segmented into a space-separated sequence of one or more dictionary words from the array. :param s: str, string to be segmented :param words: List[str], list of dictionary words :return: bool, True if the string can be segmented, otherwise False word_set = set(words) n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"Write a function that checks whether a given string is an anagram of another string. The function should return `True` if the strings are anagrams of each other, and `False` otherwise. For instance, for the strings \\"listen\\" and \\"silent\\", the function should return `True`. For the strings \\"hello\\" and \\"world\\", the function should return `False`.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, otherwise False. # Convert both strings to lowercase to make the comparison case-insensitive str1 = str1.lower() str2 = str2.lower() # Sort both strings and compare the results return sorted(str1) == sorted(str2)"},{"question":"A company wants to track the productivity of their employees. Each employee is rated on a scale from 1 to 100 based on their performance for each day of the month. The manager receives a productivity report at the end of the month as a list of integers, where each integer represents the daily performance rating for that day. The manager wants to know the length of the longest contiguous subarray where the performance rating is strictly increasing. Write a function that takes as input the productivity report and returns the length of the longest contiguous subarray with strictly increasing ratings. Input format: - The function should take an integer array as input, where each integer represents the performance rating for each day. Output format: - Return a single integer, which is the length of the longest contiguous subarray with strictly increasing ratings. Constraints: - The length of the array will be between 1 and 10^5. - Each integer in the array will be between 1 and 100. Sample Input: [1, 2, 2, 3, 4, 1, 5, 6] Sample Output: 3 Explanation: In the given sample input, the longest subarray with strictly increasing ratings is [3, 4, 5] and its length is 3.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest contiguous subarray with strictly increasing ratings. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A popular way to compress data is to use run-length encoding, an algorithmic technique that represents repeated values with a count and a single value. For example, compressing the string \\"aaabccccdde\\" would yield the result \\"3a1b4c2d1e\\" because there are three \'a\'s, one \'b\', four \'c\'s, two \'d\'s, and one \'e\'. Your task is to write a program that takes an input string and compresses it using run-length encoding. -----Input----- The input consists of a single line containing a non-empty string of lowercase English letters with a length not exceeding 10^5. -----Output----- The output should be a single line containing the compressed version of the input string. -----Examples----- Input aaabccccdde Output 3a1b4c2d1e Input aabb Output 2a2b Input abcd Output 1a1b1c1d","solution":"def compress_string(input_string): if not input_string: return \\"\\" compressed = [] count = 1 for i in range(1, len(input_string)): if input_string[i] == input_string[i - 1]: count += 1 else: compressed.append(f\\"{count}{input_string[i - 1]}\\") count = 1 compressed.append(f\\"{count}{input_string[-1]}\\") return \\"\\".join(compressed)"},{"question":"A company is planning a new product launch and needs to schedule a series of meetings. Each meeting has a specified start and end time. Given a list of meetings with their respective start and end times, the management wants to know the maximum number of meetings that can be attended without any overlaps. Your task is to write a program that finds out the maximum number of non-overlapping meetings that can be attended. Input Format: The first line contains a single integer N, representing the number of meetings. Each of the next N lines contains two space-separated integers, denoting the start and end time of each meeting. Output Format: Print a single integer denoting the maximum number of non-overlapping meetings that can be attended. Constraints: 1 ≤ N ≤ 10^5 1 ≤ start time, end time ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 0 6 5 7 8 9 SAMPLE OUTPUT 4 Explanation An optimal selection of meetings would be the ones with time intervals (1, 2), (3, 4), (5, 7), and (8, 9). This results in a total of 4 meetings without any overlaps. Other choices would result in fewer meetings being attended, so the maximum number of non-overlapping meetings is 4.","solution":"def max_non_overlapping_meetings(meetings): Finds the maximum number of non-overlapping meetings that can be attended. Parameters: meetings (list of tuples): List of tuples where each tuple contains start and end time of a meeting. Returns: int: Maximum number of non-overlapping meetings. # Sort meetings by their end times meetings.sort(key=lambda x: x[1]) # Initialize count = 0 end_time = 0 # Iterate over each meeting for meeting in meetings: # If the meeting starts after the end of the last attended meeting if meeting[0] >= end_time: # Attend this meeting count += 1 end_time = meeting[1] return count def process_input(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) meetings = [] for i in range(1, len(data), 2): start = int(data[i]) end = int(data[i+1]) meetings.append((start, end)) result = max_non_overlapping_meetings(meetings) print(result)"},{"question":"Alice is very fond of strings and loves to play with them. She is given a string and she wants to remove some characters from it to make it a palindrome. Your task is to determine the length of the longest palindromic subsequence in the given string. Example 1: Input: 7 abdbca Output: 5 Explanation: The longest palindromic subsequence is \\"abdba\\" or \\"abcba\\". Example 2: Input: 4 cbbd Output: 2 Explanation: The longest palindromic subsequence is \\"bb\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPalindromicSubsequence() which takes the string S and its length N as inputs and returns the length of the longest palindromic subsequence. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ N ≤ 10^3","solution":"def longestPalindromicSubsequence(S, N): Returns the length of the longest palindromic subsequence in the given string S. # Create a 2D array to store the lengths of longest palindromic subsequences dp = [[0 for _ in range(N)] for _ in range(N)] # Every single character is always a palindrome of length 1 for i in range(N): dp[i][i] = 1 # Build the table for substrings of length greater than 1 for cl in range(2, N + 1): for i in range(N - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of the longest palindromic subsequence in the whole string is stored in dp[0][N-1] return dp[0][N-1]"},{"question":"# Zigzag Conversion A string `s` is written in a zigzag pattern on a given number of rows. For example, the string \\"PAYPALISHIRING\\" is written in a zigzag pattern with 4 rows: ``` P I N A L S I G Y A H R P I ``` It is read as: \\"PINALSIGYAHRPI\\". # YOUR TASK Write a function that converts a given string `s` into a zigzag pattern on a given number of rows and returns the string row by row. # EXAMPLE ```python zigzag_conversion(\\"PAYPALISHIRING\\", 4) == \\"PINALSIGYAHRPI\\" ``` # CONSTRAINTS - `1 <= len(s) <= 1000` - `1 <= numRows <= 1000`","solution":"def zigzag_conversion(s, numRows): if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row = 0 going_down = False for char in s: rows[current_row] += char if current_row == 0 or current_row == numRows - 1: going_down = not going_down current_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"There is a grid with n rows and m columns. Each cell of the grid is initially empty. You are given a range ((l, r)) where (1 leq l leq r leq m). In this range, you need to fill exactly one column with 1 in every row so that no two 1\'s in any row are in the same column. Your task is to determine if it is possible to fill the grid such that: 1. There is exactly one \'1\' in each row within the given column range ((l, r)). 2. No column has more than one \'1\'. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains two integers (n) and (m) representing the number of rows and columns. The second line of each contains two integers (l) and (r). ------ Output ------ For each test case, output \\"YES\\" if it is possible to fill the grid under the given conditions, otherwise output \\"NO\\". ------ Constraints ------ 1 leq T leq 1000 1 leq n, m leq 1000 1 leq l leq r leq m ----- Sample Input 1 ------ 3 3 5 2 4 4 4 1 4 2 6 3 3 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test Case 1: The range is from column 2 to 4, both inclusive. For each of the 3 rows, we can place a \'1\' in columns 2, 3, and 4 respectively, ensuring all conditions are met. Test Case 2: The range includes all columns from 1 to 4. For the 4 rows, we can place \'1\' in columns 1, 2, 3, and 4 respectively, ensuring all conditions are met. Test Case 3: The range is only column 3. Since the range has only one column, it is not possible to place \'1\' in both rows without breaking the constraints. Hence, the answer is \\"NO\\".","solution":"def is_possible_to_fill_grid(t, test_cases): results = [] for test_case in test_cases: n, m, l, r = test_case if (r - l + 1) >= n: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a small town, there is a unique system of presenting the town’s population growth over the years. The town\'s growth is illustrated by two arrays: births and deaths. Each index i corresponds to a specific year. For example, births[i] represents the number of births and deaths[i] represents the number of deaths in year i. You are given a number of queries where each query asks for the population change during a specific period defined by a start year and an end year, inclusive. Your task is to calculate the net population change for each query during the given time period. Input: The first line contains two integers, N and Q, where N is the number of years and Q is the number of queries. The second line contains N integers separated by spaces, representing the births array. The third line contains N integers separated by spaces, representing the deaths array. The next Q lines each contain two integers, startYear and endYear, representing the range of years for the query (0-based index). Output: For each query, print the net population change during the specified period on a new line. Constraints: 1 ≤ N ≤ 100 1 ≤ Q ≤ 100 0 ≤ births[i], deaths[i] ≤ 1000 SAMPLE INPUT: 5 3 2 3 4 1 5 1 2 1 3 4 0 2 1 3 0 4 SAMPLE OUTPUT: 7 3 5 Explanation: For the first query, from year 0 to year 2: Net population change = (Births[0] + Births[1] + Births[2]) - (Deaths[0] + Deaths[1] + Deaths[2]) = (2 + 3 + 4) - (1 + 2 + 1) = 9 - 4 = 5 For the second query, from year 1 to year 3: Net population change = (Births[1] + Births[2] + Births[3]) - (Deaths[1] + Deaths[2] + Deaths[3]) = (3 + 4 + 1) - (2 + 1 + 3) = 8 - 6 = 2 For the third query, from year 0 to year 4: Net population change = (Births[0] + Births[1] + Births[2] + Births[3] + Births[4]) - (Deaths[0] + Deaths[1] + Deaths[2] + Deaths[3] + Deaths[4]) = (2 + 3 + 4 + 1 + 5) - (1 + 2 + 1 + 3 + 4) = 15 - 11 = 4","solution":"def net_population_change(N, Q, births, deaths, queries): results = [] for start, end in queries: total_births = sum(births[start:end+1]) total_deaths = sum(deaths[start:end+1]) net_change = total_births - total_deaths results.append(net_change) return results"},{"question":"Given a non-negative integer `n`, your task is to return an array consisting of all prime numbers less than or equal to `n` sorted in ascending order. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: n = 10 Output: [2, 3, 5, 7] Example 2: Input: n = 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] Example 3: Input: n = 2 Output: [2] Example 4: Input: n = 1 Output: [] Constraints: - 0 <= n <= 10^6","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes method. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime]"},{"question":"There was a fisherman who owned several lakes, and each lake was known for different types of fish he would catch. One day, he decided to design a fishing tournament for his community. The tournament rules were simple: participants had to catch different types of fish from one lake, and each lake has its own set of fish types available. They needed to catch as many different types of fish as possible. However, the lakes had an interesting constraint — each lake was represented as an undirected graph, where nodes represented the fish and edges represented the paths between the fish types within the same lake. To determine the winner of the tournament, the fisherman needed to find the size of the biggest connected component (group of fish that are directly or indirectly connected) in each lake\'s graph. The participant who fishes in the lake with the largest connected component would be the winner. However, if there are multiple lakes with the same largest connected component size, the fisherman would pick the lake with the smallest numerical identifier for computing the winner. Write a program to find the size of the largest connected component in each lake\'s graph. Input The first line contains an integer T, the number of lakes. For each lake: 1. An integer N, the number of fish types in the lake (nodes in the graph). 2. An integer M, the number of connections (edges in the graph). 3. M pairs of integers u and v, indicating a connection between fish type u and fish type v. Output For each lake, output the size of its largest connected component. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 1000 1 ≤ u, v ≤ N SAMPLE INPUT 2 5 4 1 2 2 3 3 4 4 5 4 2 1 2 3 4 SAMPLE OUTPUT 5 2 Explanation For the first lake: ``` 1 - 2 - 3 - 4 - 5 ``` All fish types are connected, so the largest connected component is of size 5. For the second lake: ``` 1 - 2 3 - 4 ``` There are two connected components with sizes 2 and 2. The largest connected component is of size 2.","solution":"def get_largest_connected_component_size(N, edges): from collections import defaultdict, deque graph = defaultdict(list) # Build graph for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() max_size = 0 def bfs(start): queue = deque([start]) visited.add(start) size = 0 while queue: node = queue.popleft() size += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return size for node in range(1, N + 1): if node not in visited: component_size = bfs(node) if component_size > max_size: max_size = component_size return max_size def find_largest_component_sizes_in_lakes(T, lake_data): results = [] for i in range(T): N = lake_data[i][0] M = lake_data[i][1] edges = lake_data[i][2] largest_size = get_largest_connected_component_size(N, edges) results.append(largest_size) return results"},{"question":"Given two integers a and b, find the greatest common divisor (GCD) of the two numbers. Input Format The first line contains the number of test cases mathbf{T}. Each of the next mathbf{T} lines contains two integers a and b. Constraints 1 leq T leq 10^5 1 leq a, b leq 10^{12} Output Format Output mathbf{T} lines, each containing the GCD of the corresponding pair of integers. Sample Input 3 15 25 1000000000000 999999999999 18 24 Sample Output 5 1 6","solution":"import math def find_gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b. return math.gcd(a, b) def process_test_cases(test_cases): Processes a list of test cases and returns the GCD for each pair of integers. Parameters: - test_cases: A list of tuples, where each tuple contains two integers (a, b). Returns: A list of integers, where each integer is the GCD of the corresponding pair in test_cases. results = [] for a, b in test_cases: results.append(find_gcd(a, b)) return results"},{"question":"You are given an array containing n positive integers. Your task is to determine if there exists a contiguous subarray whose sum is a perfect square. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the length of the array. The second line contains n integers (1 ≤ a_{i} ≤ 10000) — the elements of the array. -----Output----- Print \\"YES\\" if there exists a contiguous subarray with a sum that is a perfect square. Otherwise, print \\"NO\\". -----Example----- Input 5 1 3 4 1 5 Output YES","solution":"import math def is_perfect_square(number): Checks if a given number is a perfect square if number < 0: return False root = math.isqrt(number) return root * root == number def has_contiguous_subarray_sum_as_perfect_square(n, arr): Determines if there is a contiguous subarray with a sum that is a perfect square. for start in range(n): current_sum = 0 for end in range(start, n): current_sum += arr[end] if is_perfect_square(current_sum): return \\"YES\\" return \\"NO\\""},{"question":"The famous Goldbach Conjecture states that every even number greater than 2 can be expressed as the sum of two prime numbers. There may be multiple valid prime pairs for a given even number. Your task is to write a function that, given an even number, finds one such pair of prime numbers whose sum equals the given number. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line with an even integer N (4 ≤ N ≤ 10000). -----Output:----- For each test case, output two prime numbers p1 and p2 such that N = p1 + p2. If there are multiple pairs, output the pair with the smallest p1. If no such pair exists (which will not happen as per the conjecture), output -1 -1. -----Constraints----- - 1 leq T leq 100 - 4 leq N leq 10000 - N is an even number. -----Sample Input:----- 3 10 18 28 -----Sample Output:----- 3 7 5 13 5 23 -----EXPLANATION:----- For 10, the possible pairs are (3,7), (5,5). The pair with the smallest first prime is (3,7). For 18, the possible pairs are (5,13), (7,11). The pair with the smallest first prime is (5,13). For 28, the possible pairs are (5,23), (11,17). The pair with the smallest first prime is (5,23).","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def goldbach_pair(n): for i in range(2, n): if is_prime(i) and is_prime(n - i): return i, n - i return -1, -1 def goldbach_conjecture(T, cases): results = [] for n in cases: p1, p2 = goldbach_pair(n) results.append((p1, p2)) return results"},{"question":"A developer needs to write a simulation for a vending machine that dispenses snacks when the user inputs a code. Given that the vending machine has a list of available snacks and their corresponding prices, the goal is to calculate the total amount of money earned by the vending machine after a series of purchases. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. - For each test case: - The first line contains an integer N - the number of different snacks available in the vending machine. - The next N lines each contain a string S (the name of the snack) and an integer P (the price of the snack). - The next line contains an integer M - the number of purchases made. - The next M lines each contain a string S (the name of the snack purchased). ------ Output Format ------ For each test case, output the total amount of money earned by the vending machine. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ length(S) ≤ 20 1 ≤ P ≤ 1000 ----- Sample Input 1 ------ 2 3 Chips 50 Soda 30 Candy 20 5 Chips Soda Candy Chips Soda 2 Water 10 Juice 40 3 Water Juice Water ----- Sample Output 1 ------ 180 60 ----- Explanation 1 ------ Test case 1: The vending machine dispenses Chips twice (earning 50 * 2 = 100), Soda twice (earning 30 * 2 = 60), and Candy once (earning 20). The total amount earned is 100 + 60 + 20 = 180. Test case 2: The vending machine dispenses Water twice (earning 10 * 2 = 20) and Juice once (earning 40). The total amount earned is 20 + 40 = 60.","solution":"def calculate_earnings(test_cases): results = [] for t in test_cases: snacks = t[\\"snacks\\"] purchases = t[\\"purchases\\"] price_dict = {snack: price for snack, price in snacks} total_earnings = sum(price_dict[snack] for snack in purchases) results.append(total_earnings) return results"},{"question":"Given a sequence of integers, you need to determine the length of the longest contiguous subsequence where every pair of adjacent numbers have the same parity (both even or both odd). -----Input:----- - The first line will contain a single integer T, the number of test cases. - The first line of each test case will contain a single integer N, the length of the sequence. - The second line of each test case will contain N space separated integers, the i^{th} of which represents the i^{th} element of the sequence. -----Output:----- For each test case, output a single integer, the length of the longest contiguous subsequence where every pair of adjacent numbers have the same parity. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10000 - -10^9 leq each element of the sequence leq 10^9 -----Sample Input:----- 2 5 1 2 4 6 5 7 1 3 5 7 2 4 6 -----Sample Output:----- 3 4 -----Explanation:----- In the first test case, the longest contiguous subsequence where every pair of adjacent numbers have the same parity is [2, 4, 6], which has a length of 3. In the second test case, the longest contiguous subsequence where every pair of adjacent numbers have the same parity is [1, 3, 5, 7] or [2, 4, 6], each of which has a length of 4.","solution":"def longest_same_parity_subsequence(T, test_cases): results = [] for case in test_cases: N, sequence = case max_len = 1 current_len = 1 for i in range(1, N): if (sequence[i] % 2) == (sequence[i - 1] % 2): current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 if current_len > max_len: max_len = current_len results.append(max_len) return results"},{"question":"A research team is working on a study involving the migration patterns of different bird species. They have collected a large array of data points where each data point represents the number of birds observed at a certain location within a specific time interval. They\'re particularly interested in analyzing patterns where the number of birds observed forms a contiguous subarray with the maximum possible sum. You are tasked with writing a program that, given the array of observed bird counts, finds this subarray and outputs the maximum sum. Input format The first line of input contains an integer N, the number of observations. The second line contains N integers A1, A2, ..., AN, representing the number of birds observed at each observation point. Output format Output a single integer representing the maximum sum of a contiguous subarray. Constraints 1 ≤ N ≤ 10^5 -10^4 ≤ Ai ≤ 10^4 SAMPLE INPUT 9 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation In the given sample, the contiguous subarray [4, -1, 2, 1] has the maximum sum of 6. Therefore, the program should output 6.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given array. Uses Kadane\'s Algorithm. max_so_far = max_ending_here = arr[0] for num in arr[1:]: # Update the max ending here value max_ending_here = max(num, max_ending_here + num) # Update the global maximum so far if needed max_so_far = max(max_so_far, max_ending_here) return max_so_far # Example usage: # N = 9 # arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray_sum(arr)) # Output: 6"},{"question":"Write a function `longest_consecutive_subarray` that takes a list of integers as its input and returns the length of the longest subarray that contains consecutive integers, although the integers need not be in order in the subarray. Example: ```python def longest_consecutive_subarray(arr): # Your code here # Examples print(longest_consecutive_subarray([10, 12, 11])) # should return 3, because [10, 12, 11] has length 3 and they are consecutive print(longest_consecutive_subarray([14, 12, 11, 20])) # should return 2, because [12, 11] or [11, 12] has length 2 and they are consecutive print(longest_consecutive_subarray([1, 9, 3, 10, 4, 20, 2])) # should return 4, because [1, 3, 2, 4] has length 4 and they are consecutive ``` **Constraints:** - Elements in the list are all integers. - The list can be empty, and if it is, the function should return 0.","solution":"def longest_consecutive_subarray(arr): if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Alice loves working with arrays and is fascinated by the idea of subsequences. She especially enjoys finding subsequences that meet certain criteria. She challenges you to solve the following problem: Given an array of integers, determine the length of the longest subsequence such that all elements of the subsequence are in strictly increasing order. -----Input format:----- - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the length of the array. - The second line contains N integers a_1, a_2, ldots, a_N, representing the array elements. -----Output format:----- - For each test case, output the length of the longest increasing subsequence of the array on a new line. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^3 - 1 leq a_i leq 10^5 -----Example:----- -----Input:----- 2 5 10 22 9 33 21 6 5 8 7 1 9 10 -----Output:----- 3 4 Explanation: For the first test case, the longest increasing subsequence is [10, 22, 33] with length 3. For the second test case, the longest increasing subsequence is [5, 8, 9, 10] with length 4.","solution":"def length_of_LIS(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 tails = [0] * len(arr) size = 0 for x in arr: left, right = 0, size while left != right: mid = (left + right) // 2 if tails[mid] < x: left = mid + 1 else: right = mid tails[left] = x size = max(size, left + 1) return size def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(length_of_LIS(arr)) return results"},{"question":"Two friends, Alice and Bob, are playing a fun game. Alice has an array of N integers. The game\'s objective is to make the array elements all the same by performing the minimum number of moves. In each move, Alice can choose any two adjacent elements and increase both of them by 1. Can you help Alice determine the minimum number of moves required to achieve this goal? -----Input:----- - First line will contain T, number of test cases. - For each test case: - The first line will contain N, the size of the array. - The second line will contain N integers, the array elements. -----Output:----- For each test case, output in a single line the minimum number of moves required. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq a[i] leq 10^9 -----Sample Input:----- 2 3 1 2 3 4 1 1 1 1 -----Sample Output:----- 3 0 -----Explanation:----- In the first case, making all elements same requires: - First move: choose 2nd and 3rd element (2 and 3), increase them by 1 → [1 3 4] - Second move: choose 1st and 2nd element (1 and 3), increase them by 1 → [2 4 4] - Third move: choose 2nd and 3rd element (4 and 4), increase them by 1 → [3 5 5] In the second case, all elements are already the same, no moves are required.","solution":"def min_moves_to_make_elements_equal(arr): Returns the minimum number of moves required to make all elements in the array equal. # Find the minimum value in the array min_val = min(arr) # Calculate the total moves required to make all elements equal to the min_val moves = sum(x - min_val for x in arr) return moves def process_test_cases(test_cases): results = [] for n, array in test_cases: results.append(min_moves_to_make_elements_equal(array)) return results"},{"question":"Given a string s and an array of integers indices of the same length. The string s will be shuffled such that the character at the i-th position moves to indices[i] in the shuffled string. Return the shuffled string. Example 1: Input: s = \\"abc\\", indices = [2, 1, 0] Output: \\"cba\\" Explanation: Character \'a\' at index 0 will move to index 2, \'b\' at index 1 will move to index 1, and \'c\' at index 2 will move to index 0. Hence the shuffled string is \\"cba\\". Example 2: Input: s = \\"aiohn\\", indices = [3, 1, 4, 2, 0] Output: \\"nihao\\" Explanation: Character \'a\' at index 0 will move to index 3, \'i\' at index 1 will move to index 1, \'o\' at index 2 will move to index 4, \'h\' at index 3 will move to index 2, and \'n\' at index 4 will move to index 0. Hence the shuffled string is \\"nihao\\". Example 3: Input: s = \\"art\\", indices = [1, 0, 2] Output: \\"rat\\" Constraints: 1 <= s.length == indices.length <= 100 s contains only lower-case English letters. All values of indices are unique and are in the range [0, s.length - 1].","solution":"def restoreString(s, indices): This function returns a new shuffled string based on the indices provided. :param s: A string to be shuffled. :param indices: A list of indices representing the new positions of each character. :return: A new shuffled string. shuffled = [\'\'] * len(s) for i, idx in enumerate(indices): shuffled[idx] = s[i] return \'\'.join(shuffled)"},{"question":"Background In a fictional land called CodeLand, there are various types of magical fruits, each with a specific level of magical power. A powerful sorcerer has a basket that can hold multiple fruits, and he wants to know the maximum magical power he can obtain by choosing a contiguous subarray of fruits from his basket. You have been tasked with writing a function to determine this maximum magical power. Each fruit in the basket has a positive or negative integer value representing its magical power. Task Write a function `maxMagicalPower` which takes an array of integers `fruits` as input and returns the maximum magical power that can be obtained from any contiguous subarray. Input / Output * Input: `fruits` (an array of integers, where each integer represents the magical power of a fruit) * Output: an integer representing the maximum magical power that can be obtained from any contiguous subarray. Example ```python print(maxMagicalPower([1, -2, 3, 4, -1, 5])) # should return 11 print(maxMagicalPower([-3, -2, -1, -4])) # should return -1 ``` Explanation: Example 1: The maximum magical power is obtained by choosing the subarray `[3, 4, -1, 5]`, which sums up to `11`. Example 2: Since all numbers are negative, the maximum sum subarray is just `[-1]`, thus the maximum magical power is `-1`. Notes * The input array length will be at least 1. * You can assume the input array contains at least one non-zero value. Good Luck! ```","solution":"def maxMagicalPower(fruits): Finds the maximum magical power that can be obtained from any contiguous subarray. Uses Kadane\'s algorithm to find the maximum sum of any contiguous subarray. Parameters: fruits (list): A list of integers representing the magical power values of fruits. Returns: int: The maximum sum of any contiguous subarray. max_current = max_global = fruits[0] for power in fruits[1:]: max_current = max(power, max_current + power) if max_current > max_global: max_global = max_current return max_global"},{"question":"# Task Alice loves to collect rare plants and she often finds herself managing a large collection of plants. Each plant in her collection is represented as a list of height measurements taken over time. Alice wants to know the maximum height difference of plants in each of her collections, provided they meet a certain criterion. Write a function `max_height_diff` that takes in: - A list of plant collections, where each collection is represented as a list of integers (heights of plants). - An integer `k`, which represents the minimum number of plants that must be in the collection for it to be considered. The function should return the maximum height difference (maximum height - minimum height) among all collections that have at least `k` plants. If no collection meets the criterion, the function should return `-1`. # Example For `collections = [[3, 6, 9], [1, 4], [10, 20, 30, 40]], k = 3`, the output should be `30`. - The first collection `[3, 6, 9]` meets the criterion and has a height difference of `9 - 3 = 6`. - The second collection `[1, 4]` does not meet the criterion as it has less than `k` plants. - The third collection `[10, 20, 30, 40]` meets the criterion and has a height difference of `40 - 10 = 30`. The maximum height difference among the valid collections is `30`. For `collections = [[2, 2, 2], [1, 2, 3, 4], [5, 5]], k = 2`, the output should be `3`. - The first collection `[2, 2, 2]` meets the criterion and has a height difference of `2 - 2 = 0`. - The second collection `[1, 2, 3, 4]` meets the criterion and has a height difference of `4 - 1 = 3`. - The third collection `[5, 5]` meets the criterion and has a height difference of `5 - 5 = 0`. The maximum height difference among the valid collections is `3`. For `collections = [[1], [2]], k = 3`, the output should be `-1`. - None of the collections meet the criterion of having at least `k` plants.","solution":"def max_height_diff(collections, k): Returns the maximum height difference among collections with at least k plants. max_diff = -1 for collection in collections: if len(collection) >= k: diff = max(collection) - min(collection) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Given an integer array, you need to perform a sequence of operations to transform this array into a non-decreasing array. In each operation, you can select any two adjacent elements and swap them if and only if the left element is greater than the right element. Your task is to determine the minimum number of swaps required to transform the array into a non-decreasing array. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 1000) — the length of the array. The next line contains n integers a_1, a_2, ldots, a_n (-1000 leq a_i leq 1000) It is guaranteed that the sum of n across all test cases does not exceed 1000. -----Output----- For each test case, output a single line containing the minimum number of swaps required to transform the array into a non-decreasing array. -----Example----- Input 3 3 3 2 1 5 1 2 3 5 4 4 4 3 2 1 Output 3 1 6 -----Note----- In the first test case, the array [3, 2, 1] can be transformed into [1, 2, 3] with three swaps: (1,2), (2,3), (1,2). In the second test case, the array [1, 2, 3, 5, 4] can be transformed into [1, 2, 3, 4, 5] with one swap: (4,5). In the third test case, the array [4, 3, 2, 1] can be transformed into [1, 2, 3, 4] with six swaps.","solution":"def minimum_swaps(arr): Returns the minimum number of swaps required to transform the array into a non-decreasing array. n = len(arr) swaps = 0 # Use bubble sort approach to count the swaps required for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(minimum_swaps(arr)) return results # Reading input def main(): input_data = input().split() idx = 0 t = int(input_data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(input_data[idx]) idx += 1 arr = list(map(int, input_data[idx:idx+n])) idx += n test_cases.append(arr) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"------ Task ------ You are given an array of integers, and you need to process several queries. Each query contains two indices, and for each query, you need to find the sum of the elements in the array between the two indices, inclusive, after reversing the subarray between those indices. To clarify, given an array A and a query (L, R): 1) Reverse the subarray from index L to R. 2) Calculate the sum of elements in [L, R] after the reversal. ------ Input ------ The first line contains an integer N, the size of the array. The second line contains N integers, representing the array A. The third line contains an integer Q, the number of queries. The following Q lines each contain two integers L and R. ------ Output ------ For each query, output the resulting sum of the subarray between L and R after the reversal. ------ Constraints ------ 1 ≤ N ≤ 100000 1 ≤ A[i] ≤ 1000 1 ≤ Q ≤ 100000 0 ≤ L ≤ R < N ------ Sample Input 1 ------ 5 1 2 3 4 5 3 1 3 0 4 2 2 ------ Sample Output 1 ------ 9 15 3 ------ Explanation 1 ------ **Example case 1.** - For the query (1, 3), the subarray [2, 3, 4] is reversed to [4, 3, 2], and their sum is 4 + 3 + 2 = 9. - For the query (0, 4), the subarray [1, 2, 3, 4, 5] is reversed to [5, 4, 3, 2, 1], and their sum is 5 + 4 + 3 + 2 + 1 = 15. - For the query (2, 2), the subarray [3] remains [3], and their sum is 3.","solution":"def reverse_subarray_sum(array, queries): Given an array and a list of queries (each query containing two indices L and R), this function returns a list of sums of the subarray between L and R after reversing the subarray. :param array: List of integers representing the array. :param queries: List of tuples, where each tuple (L, R) is a query. :return: List of integers representing the sum of elements in the subarray from L to R after reversal. results = [] for L, R in queries: # Reverse the subarray from index L to R reversed_subarray = array[L:R+1][::-1] # Calculate the sum of the reversed subarray subarray_sum = sum(reversed_subarray) # Append the result results.append(subarray_sum) return results"},{"question":"A permutation of an array is defined as a rearrangement of its elements. Given an array of distinct integers, write a function that generates all possible permutations of the array and returns them in lexicographical order. For example, given the input array `[1, 2, 3]`, the function should return: ``` [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` Your function should be named `permute`, take a single list as input, and return a list of lists containing all permutations in lexicographical order. # Expected Function Signature ```python def permute(arr: List[int]) -> List[List[int]]: ``` # Examples - `permute([1, 2, 3])` should return ``` [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` - `permute([4, 5, 6])` should return ``` [ [4, 5, 6], [4, 6, 5], [5, 4, 6], [5, 6, 4], [6, 4, 5], [6, 5, 4] ] ``` # Constraints - The input list will contain between 1 and 9 elements, inclusive. - Each element in the list will be a unique integer between 1 and 20, inclusive. # Hint You may want to use a recursive approach to generate the permutations and sort them before returning.","solution":"from itertools import permutations from typing import List def permute(arr: List[int]) -> List[List[int]]: Generates all possible permutations of the array and returns them in lexicographical order. return sorted([list(p) for p in permutations(arr)])"},{"question":"Ravi is organizing a party and he invited several guests. Each guest has a preference for the seating arrangement. Specifically, every guest has a favorite number such that they want to be seated at a position which is a multiple of that number. Ravi wants to minimize the number of rearrangements, so he needs to know if it is possible to arrange the guests according to their preferences. You are given the number of guests and their respective favorite numbers. Your task is to find out whether a seating arrangement that satisfies all guests\' preferences is possible. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of guests. - The second line contains N integers where the i-th integer represents the favorite number of the i-th guest. Output: For each test case, print \\"YES\\" if it is possible to arrange the guests according to their preferences, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ favorite number ≤ 1000 SAMPLE INPUT 2 3 2 3 6 4 2 3 5 7 SAMPLE OUTPUT YES YES Explanation: In the first case, an arrangement such as [6, 2, 3] satisfies all guests (6 is a multiple of 6, 2 is a multiple of 2, and 3 is a multiple of 3). In the second case, an arrangement such as [2, 3, 5, 7] satisfies all guests (2 is a multiple of 2, 3 is a multiple of 3, 5 is a multiple of 5, and 7 is a multiple of 7).","solution":"def can_arrange_guests(T, test_cases): This function checks if it is possible to arrange guests such that each guest is seated at a position which is a multiple of their favorite number. Args: T : int : the number of test cases test_cases : list of tuples : each tuple contains two elements: - an integer N (the number of guests) - a list of N integers representing the favorite number for each guest Returns: list of strings : each element is \\"YES\\" if it is possible to arrange the guests according to their preferences, otherwise \\"NO\\" result = [] for i in range(T): N, favorites = test_cases[i] # Since any number can satisfy its own multiple, we can just return \\"YES\\" # as given in constraints: all numbers can be placed in their position. result.append(\\"YES\\") return result"},{"question":"You are given a list of integers representing the heights of buildings on a street. Your task is to find out the number of buildings that have a height greater than all the buildings to their right. Specifically, for a building at position `i`, check if its height is greater than all buildings situated at positions `i+1` to `n-1`. # Input - The first line of input contains an integer `n` (1 ≤ n ≤ 10^5), the number of buildings. - The second line contains `n` space-separated integers representing the heights of the buildings (1 ≤ height ≤ 10^9). # Output - Output a single integer, the number of buildings that have a height greater than all the buildings to their right. # Examples Example 1: Input: ``` 5 4 2 7 1 3 ``` Output: ``` 2 ``` Explanation: The buildings with heights 7 and 3 are greater than all buildings to their right. Example 2: Input: ``` 3 1 2 3 ``` Output: ``` 1 ``` Explanation: Only the last building with height 3 is greater than all buildings to its right.","solution":"def count_greater_than_right(buildings): Returns the number of buildings that are taller than all buildings to their right. n = len(buildings) if n == 0: return 0 count = 1 # The rightmost building is always counted max_height = buildings[-1] for i in range(n-2, -1, -1): if buildings[i] > max_height: count += 1 max_height = buildings[i] return count"},{"question":"You are given a string of space-separated integers representing scores obtained by players in a competition. Each player can score multiple times, and there could be any number of players and scores. Your task is to write a function that calculates the total score for each player and returns the results sorted in descending order of the scores. If two players have the same score, they should be sorted by their player number in ascending order. Each player\'s score is represented in the format: `player_number:score`. For example, for the following input: ``` \\"1:10 2:20 1:15 3:5 2:10 3:8 3:12\\" ``` The output should be a list of tuples containing the player number and their total score, sorted in descending order of scores: ``` [(1, 25), (2, 30), (3, 25)] ``` # Function Signature ```python def calculate_scores(scores: str) -> list: pass ``` # Example ```python scores = \\"1:10 2:20 1:15 3:5 2:10 3:8 3:12\\" print(calculate_scores(scores)) # Output: [(2, 30), (1, 25), (3, 25)] scores = \\"4:5 1:11 2:23 4:5 1:3 2:9 3:11\\" print(calculate_scores(scores)) # Output: [(2, 32), (3, 11), (1, 14), (4, 10)] ``` # Constraints - The input string contains only valid scores in the format `player_number:score`. - The player numbers and scores are integers. - There will be at least one score in the input string. # Notes Ensure that your implementation efficiently handles the input and correctly sorts the scores for players.","solution":"def calculate_scores(scores: str) -> list: from collections import defaultdict # Dictionary to store cumulative scores for each player player_scores = defaultdict(int) # Split the input string by spaces to get individual player:score entries entries = scores.split() for entry in entries: player, score = entry.split(\':\') player, score = int(player), int(score) player_scores[player] += score # Convert the dictionary to a list of tuples and sort it sorted_scores = sorted(player_scores.items(), key=lambda x: (-x[1], x[0])) return sorted_scores"},{"question":"Alan recently learned about recursion and is fascinated by the concept. He wants to create a program that helps him understand it better. He decides to write a function that computes the maximum depth of nested parentheses in a given string. The program should be able to identify the maximum depth of any valid parentheses sequence. Input Format: The first line contains T, the number of test cases. Then, T lines follow, each containing a string S which consists of \'(\', \')\', and lowercase alphabetic characters. Output Format: For each test case, output the maximum depth of nested parentheses in the given string. If the string does not contain any parentheses, output 0. Constraints: Subtask 1: (20 points) 1 ≤ T ≤ 10^3 1 ≤ Length of S ≤ 10^3 Subtask 2: (80 points) 1 ≤ T ≤ 10^5 1 ≤ Length of S ≤ 10^5 It is guaranteed that all input strings are valid parentheses sequences. SAMPLE INPUT 3 (a(b)c) ((a+b)*(c/d)) xyz SAMPLE OUTPUT 2 2 0 Explanation: Case 1: The maximum depth of nested parentheses in the string \\"(a(b)c)\\" is 2. Case 2: The maximum depth of nested parentheses in the string \\"((a+b)*(c/d))\\" is 2. Case 3: The string \\"xyz\\" does not contain any parentheses, so the maximum depth is 0.","solution":"def max_depth_of_parentheses(s): Returns the maximum depth of nested parentheses in the given string `s`. max_depth = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \')\': current_depth -= 1 return max_depth def process_test_cases(T, test_cases): results = [] for test_case in test_cases: results.append(max_depth_of_parentheses(test_case)) return results"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase English letters. You need to determine whether `s2` can be obtained by rotating `s1` exactly once. A rotation operation on a string moves one or more characters from the beginning of the string to the end of the string in the same order. For example, rotating the string \\"abcdef\\" one character to the right will make it \\"bcdefa\\", and rotating it two characters to the right will result in \\"cdefab\\". Input The first line contains an integer T, the number of test cases. Each of the next 2*T lines contains two strings, `s1` and `s2`. Output For each test case, print \\"Yes\\" if `s2` can be obtained by rotating `s1` exactly once. Otherwise, print \\"No\\". Constraints 1 ≤ T ≤ 1000 1 ≤ |s1|, |s2| ≤ 1000 SAMPLE INPUT 2 abcdef bcdefa abcdef defabc SAMPLE OUTPUT Yes No Explanation For the first test case, `s2` is \\"bcdefa\\", which is obtained by rotating `s1` exactly once to the right. Thus, the output is \\"Yes\\". For the second test case, `s2` is \\"defabc\\", which is not obtained by rotating `s1` exactly once to the right. Thus, the output is \\"No\\".","solution":"def can_be_obtained_by_rotating_once(s1, s2): Check if s2 can be obtained by rotating s1 exactly once. if s1 == s2: return False return s2 in (s1[1:] + s1[0]) or s2 in (s1[-1] + s1[:-1]) def process_input(test_cases): results = [] for s1, s2 in test_cases: if can_be_obtained_by_rotating_once(s1, s2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a binary tree with n nodes. Each node has a unique value between 1 and n. The root of the tree has a value of 1. Your task is to determine, for each node, the number of nodes in its subtree (including the node itself) that have a greater value than the node. Input The first line contains the integer n (1 ≤ n ≤ 2·105), the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting that there is an edge between nodes u and v. It is guaranteed that (u, v) and (v, u) both represent the same edge and the graph will always be a valid tree. Output Print n integers, one for each node in the tree, in order from 1 to n, where the i-th integer is the number of nodes in the subtree of the node with value i that have a greater value than i. Example Input 5 1 2 1 3 3 4 3 5 Output 4 0 2 0 0 Explanation - Node 1 has a subtree with nodes [1, 2, 3, 4, 5]. There are 4 nodes (2, 3, 4, 5) with values greater than 1. - Node 2 has a subtree with only itself [2]. There are no nodes with values greater than 2 in its subtree. - Node 3 has a subtree with nodes [3, 4, 5]. There are 2 nodes (4, 5) with values greater than 3. - Node 4 has a subtree with only itself [4]. There are no nodes with values greater than 4 in its subtree. - Node 5 has a subtree with only itself [5]. There are no nodes with values greater than 5 in its subtree.","solution":"from collections import defaultdict, deque def count_greater_in_subtree(n, edges): def dfs(node): subtree_nodes = [node] visited[node] = True for child in tree[node]: if not visited[child]: subtree_nodes.extend(dfs(child)) for sub_node in subtree_nodes: if sub_node > node: count[node-1] += 1 return subtree_nodes tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) count = [0] * n visited = [False] * (n + 1) dfs(1) return count def process_input(n, input_edges): edges = [] for edge in input_edges: edges.append(tuple(edge)) return count_greater_in_subtree(n, edges)"},{"question":"Superbalanced Tree A binary tree is considered superbalanced if the difference between the depths of any two leaf nodes is no greater than one. Write a function `is_superbalanced` to determine if a given binary tree is superbalanced. The function should take the root node of the tree as input and return a boolean value: `True` if the tree is superbalanced, and `False` otherwise. # Input - An integer array `values` representing a level-order traversal of a binary tree (with \'None\' signifying absent nodes). You are provided a helper function `build_tree` that takes the `values` array as an input and builds the corresponding binary tree. # Output - A boolean value `True` or `False` indicating if the binary tree is superbalanced. # Constraints - `1 <= len(values) <= 10^4` # Example Input ``` values = [3, 9, 20, None, None, 15, 7] ``` Output ``` True ``` Explanation The binary tree is: ``` 3 / 9 20 / 15 7 ``` Both leaf nodes 9 and 15 are at depth 2, and the leaf node 7 is at depth 3. Since the difference in depths between any pair of leaf nodes is at most 1, this tree is superbalanced. # Function Signature ```python class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def build_tree(values: List[int]) -> TreeNode: # Helper function to build a tree from the given values pass def is_superbalanced(root: TreeNode) -> bool: # Your implementation here pass ``` Implement the function `is_superbalanced` that determines if a given binary tree is superbalanced. You can also use the provided `build_tree` method to create the tree from an array representation.","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def build_tree(values): Build a binary tree from a list of values representing a level-order traversal. \'None\' values signify absent nodes. :param values: List[int] :return: TreeNode (root of the binary tree) if not values: return None root = TreeNode(values[0]) queue = [(root, 0)] i = 1 while i < len(values): node, level = queue.pop(0) if node: if values[i] is not None: node.left = TreeNode(values[i]) queue.append((node.left, level + 1)) i += 1 if i < len(values) and values[i] is not None: node.right = TreeNode(values[i]) queue.append((node.right, level + 1)) i += 1 return root def is_superbalanced(root): Determine if a binary tree is superbalanced. :param root: TreeNode, the root of the binary tree :return: bool, True if the tree is superbalanced, False otherwise if not root: return True leaf_depths = [] stack = [(root, 0)] while stack: node, depth = stack.pop() if node: if not node.left and not node.right: if depth not in leaf_depths: leaf_depths.append(depth) if len(leaf_depths) > 2 or (len(leaf_depths) == 2 and abs(leaf_depths[0] - leaf_depths[1]) > 1): return False else: stack.append((node.left, depth + 1)) stack.append((node.right, depth + 1)) return True"},{"question":"In a distant kingdom, the king\'s archers often participate in a unique arrow shooting game. There are several archers lined up in a row, each with a distinct number of arrows. The game is declared winner-less if any archer has more arrows than the sum of arrows of any two of their immediate neighbors. The task is to determine if the game is winner-less based on the current distribution of arrows. For example, if there are four archers with 3, 1, 4, and 2 arrows respectively, the third archer (with 4 arrows) will make the game winner-less because 4 is greater than 3 + 1 (sum of the arrows of the first and second archers). -----Input----- The first line contains a single integer n (3 le n le 100,000) — the number of archers. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the number of arrows each archer has. -----Output----- Print \\"Winner-less\\" if the game is winner-less, otherwise print \\"Winnable\\". -----Examples----- Input 4 3 1 4 2 Output Winner-less Input 5 1 2 3 2 1 Output Winnable -----Note----- In the first example, the third archer has 4 arrows, which is greater than the sum of 3 (first archer) and 1 (second archer). In the second example, no archer has more arrows than the sum of arrows of any two of their immediate neighbors.","solution":"def check_archers_game_winner(arrows): n = len(arrows) for i in range(1, n-1): if arrows[i] > arrows[i-1] + arrows[i+1]: return \\"Winner-less\\" return \\"Winnable\\""},{"question":"You are given an array of integers. You need to write a program to find the maximum product of any two distinct elements in the array. ------ Input Format ------ - The first line of input contains an integer N, denoting the number of elements in the array. - The second line contains N space-separated integers, representing the elements of the array. ------ Output Format ------ Output a single integer, the maximum product of any two distinct elements in the array. ------ Constraints ------ 2 ≤ N ≤ 1000 -10^4 ≤ text{array[i]} ≤ 10^4 ------ Sample Input 1 ------ 5 1 4 3 -6 -7 ------ Sample Output 1 ------ 42 ----- Explanation 1 ------ The maximum product of any two distinct elements in the array is 42, which is the product of -6 and -7. ------ Sample Input 2 ------ 4 0 2 3 5 ------ Sample Output 2 ------ 15 ----- Explanation 2 ------ The maximum product of any two distinct elements in the array is 15, which is the product of 3 and 5.","solution":"def max_product_of_two_elements(arr): Returns the maximum product of any two distinct elements in the array. if len(arr) < 2: return None # Since there should be at least two numbers to find the product arr.sort() # Considering two possible maximum products: # 1. Product of two largest elements # 2. Product of two smallest (which can be negative resulting in a positive product) max1 = arr[-1] * arr[-2] max2 = arr[0] * arr[1] return max(max1, max2)"},{"question":"Chouti is fascinated by graph theory and wants to explore a game played on an undirected connected graph. The game involves two players who take turns choosing vertices of the graph. The chosen vertices must form an independent set (no two chosen vertices can share an edge), and a player loses if they cannot make a valid move on their turn. Given a graph with n vertices and m edges, Chouti wants to determine the winner if both players play optimally, starting with Player 1. Input: - The first line contains two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 500), the number of vertices and edges in the graph. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between vertices u and v. Output: - Output \\"Player 1\\" if the first player is guaranteed to win with optimal play, or \\"Player 2\\" if the second player is guaranteed to win with optimal play. Examples: Input: 3 2 1 2 2 3 Output: Player 1 Input: 4 4 1 2 2 3 3 4 4 1 Output: Player 2 Note: - In the first example, Player 1 can start by picking vertex 1 or 3, and Player 2 will have no valid moves left. - In the second example, no matter which vertex Player 1 chooses, Player 2 will always have a move to make, eventually leading Player 1 to have no valid moves. The task is to analyze the given graph structure and determine the winner based on the rules and optimal play strategy.","solution":"def analyze_graph_winner(n, m, edges): def find_connected_components(n, edges): visited = [False] * (n + 1) adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) def dfs(node): stack = [node] component = [] while stack: current = stack.pop() if not visited[current]: visited[current] = True component.append(current) for neighbor in adj_list[current]: if not visited[neighbor]: stack.append(neighbor) return component components = [] for i in range(1, n + 1): if not visited[i]: component = dfs(i) if component: components.append(component) return components def is_bipartite(component, adj_list): color = {} def dfs(node, c): color[node] = c for neighbor in adj_list[node]: if neighbor not in color: if not dfs(neighbor, 1 - c): return False elif color[neighbor] == color[node]: return False return True return dfs(component[0], 0) components = find_connected_components(n, edges) adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) xor_grundy = 0 for component in components: if is_bipartite(component, adj_list): vertex_count = len(component) degree_count = max(len(adj_list[v]) for v in component) xor_grundy ^= (vertex_count % 2) ^ (degree_count % 2) else: return \\"Player 1\\" if xor_grundy == 0: return \\"Player 2\\" else: return \\"Player 1\\""},{"question":"Given a list of employees and their direct reports, write a function that determines the relationship between two employees within the hierarchy (what is the relation of the latter with the former in terms of managerial hierarchy). The list of employee-report pairs `report_list` is given, along with a `target_pair`. For example, if the report list is: `[(\'Alice\', \'Bob\'), (\'Bob\', \'Charlie\'), (\'Alice\', \'David\')]` This describes the hierarchy: Alice / Bob David | Charlie The relationship pair `(\'Charlie\', \'Alice\')` should return \'Indirect Report\' as Charlie is indirectly reporting to Alice through Bob. The possible responses are \'Manager\', \'Direct Report\', \'Indirect Report\', \'Colleague\', or \'None\'. The hierarchy can have up to 4 levels. The input format is: - `report_list`: a list of tuples where the first element is the manager and the second element is the direct report. - `target_pair`: a tuple of two employees, where the first is the employee whose relationship to the second needs to be determined. Your task is to implement the function `determine_relationship(report_list, target_pair)`. The function should return the relationship between the two employees in the target pair according to the hierarchy. Example input: ```python report_list = [(\'Alice\', \'Bob\'), (\'Bob\', \'Charlie\'), (\'Alice\', \'David\')] target_pair = (\'Charlie\', \'Alice\') ``` Example output: ```python \'Indirect Report\' ```","solution":"def determine_relationship(report_list, target_pair): Determines the relationship between two employees in a hierarchy. :param report_list: List of tuples where the first element is the manager and the second element is the direct report. :param target_pair: A tuple where the first element is the employee whose relationship to the second element needs to be determined. :return: The relationship (\'Manager\', \'Direct Report\', \'Indirect Report\', \'Colleague\', or \'None\'). from collections import defaultdict, deque manager_dict = defaultdict(list) for manager, report in report_list: manager_dict[manager].append(report) def bfs(start, target): queue = deque([(start, 0)]) visited = set() while queue: current, depth = queue.popleft() if current == target: return depth visited.add(current) for next_employee in manager_dict[current]: if next_employee not in visited: queue.append((next_employee, depth + 1)) return None employee1, employee2 = target_pair if employee1 in manager_dict.get(employee2, []): return \'Direct Report\' elif bfs(employee2, employee1): return \'Indirect Report\' for manager in manager_dict: if employee1 in manager_dict[manager] and employee2 in manager_dict[manager]: return \'Colleague\' if bfs(employee1, employee2) == 1: return \'Manager\' return \'None\'"},{"question":"Create a function that receives a string representing an arithmetic expression and evaluates it to return the correct result. The string can contain integers and basic math operations (addition, subtraction, multiplication, and division). For simplicity: - Operators and operands will be separated by at least one space. - The division operation should result in integer division, discarding any remainder. - The input string will always be a valid expression composed of non-negative integers and operators. **Example Test Cases** Input: \\"3 + 5\\" Output: 8 Input: \\"10 + 2 * 6\\" Output: 22 Input: \\"100 * 2 + 12\\" Output: 212 Input: \\"100 * ( 2 + 12 ) / 14\\" Output: 100 **Additional Note:** Parentheses may be included to enforce the order of operations. You can assume the input will always respect the proper placement of parentheses if they appear. **Constraints:** - Only integer operations are to be considered, no floating-point. - The final result of the expression should be an integer. Good luck with your calculations!","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression string containing non-negative integers and +, -, *, / operators. Parentheses are supported for order of operations. def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': # Integer division values.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def process(expression): tokens = expression.split() values = [] operators = [] for token in tokens: if token.isdigit(): values.append(int(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0] return process(expression)"},{"question":"Write a function called \\"sumOddElements\\". Given an array of numbers, \\"sumOddElements\\" returns the sum of all the elements in the array that are odd numbers. var output = sumOddElements([2, 3, 4, 5, 6, 7]); console.log(output); // --> 15","solution":"def sumOddElements(arr): Returns the sum of all the odd numbers in the given array. Parameters: arr (list of int): List of integers. Returns: int: Sum of all odd numbers. return sum(x for x in arr if x % 2 != 0)"},{"question":"Alice received a grid of size `n x m` containing non-negative integers. She is supposed to find a path from the top-left corner to the bottom-right corner. In each step, she can only move to the right or down. The cost of a path is defined as the sum of all numbers along this path, including the start and the end points. Alice is interested in finding the path with the minimum cost. Can you help her determine the minimum cost to travel from the top-left corner to the bottom-right corner? -----Input----- The first line contains two integers `n` and `m` (1 le n, m le 500) — the number of rows and columns of the grid. Each of the next `n` lines contains `m` non-negative integers (0 le grid[i][j] le 10^9), representing the elements of the grid. -----Output----- Output a single integer — the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. -----Example----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 -----Explanation----- The path with the minimum cost is 1 → 3 → 1 → 1 → 1, with a total cost of 7.","solution":"def minPathSum(grid): n = len(grid) m = len(grid[0]) # Create a DP table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the DP table dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the result return dp[n - 1][m - 1]"},{"question":"A robot is navigating a 2D grid. The grid contains obstacles represented by \'#\' and free cells represented by \'.\'. The robot starts at the top-left corner of the grid and its goal is to reach the bottom-right corner. The robot can only move right or down at each step. Your task is to determine whether there is a path for the robot to reach its goal. -----Input----- - The first line contains two space-separated integers N and M, representing the number of rows and columns in the grid. - The next N lines each contain M characters, representing the grid layout. -----Output----- - Print \\"yes\\" (without quotes) if there is a path for the robot to reach the bottom-right corner, otherwise print \\"no\\" (without quotes). -----Constraints and Subtasks----- - 1 <= N, M <= 1000 Subtask 1: 30 points - 1 <= N, M <= 50 Subtask 2: 70 points - Original Constraints -----Example----- Input: 4 4 .... .. ..#. .... Output: yes Input: 3 3 .#. #.# .#. Output: no Input: 2 2 Output: no","solution":"def is_path_possible(grid, n, m): def dfs(r, c): if r == n - 1 and c == m - 1: # Reached the target return True if r < 0 or r >= n or c < 0 or c >= m or grid[r][c] == \'#\' or visited[r][c]: return False visited[r][c] = True # Mark the cell as visited # Try moving right if dfs(r, c + 1): return True # Try moving down if dfs(r + 1, c): return True return False if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"no\\" visited = [[False for _ in range(m)] for _ in range(n)] return \\"yes\\" if dfs(0, 0) else \\"no\\" # Example usages: n, m = 4, 4 grid = [ \\"....\\", \\"..\\", \\"..#.\\", \\"....\\" ] print(is_path_possible(grid, n, m)) # Output: yes n, m = 3, 3 grid = [ \\".#.\\", \\"#.#\\", \\".#.\\" ] print(is_path_possible(grid, n, m)) # Output: no"},{"question":"Luna has just started a new job as a delivery person and she needs your help in planning her delivery route. The city where Luna works has N intersections connected by M one-way roads. Each road has a delivery time associated with it. Given Luna\'s starting intersection and the intersections where she needs to make deliveries, determine the shortest time it will take for her to make all her deliveries. -----Input----- The first line contains three integers N, M, and Q (1 le N le 10^4, 0 le M le 10^5, 1 le Q le N-1). N denotes the number of intersections, M the number of one-way roads, and Q the number of delivery intersections. The second line contains Q+1 integers, starting with S (1 le S le N) representing Luna\'s starting intersection followed by the Q delivery intersections. Each of the next M lines contains three integers u, v, and w (1 le u, v le N, u neq v, 1 le w le 10^9), which describe a one-way road from intersection u to intersection v taking w minutes of delivery time. -----Output----- Output a single integer, the minimal delivery time required for Luna to complete all the deliveries. If it\'s not possible to make all deliveries, print -1. -----Example----- Input 5 7 2 1 4 5 1 2 10 1 3 5 2 4 10 3 4 10 2 5 5 4 5 5 3 5 20 Output 30 -----Note----- In the example, the shortest route Luna can take is: 1 -> 3 (5 mins) 3 -> 4 (10 mins) 4 -> 5 (5 mins) Total delivery time is 5 + 10 + 5 = 20 minutes.","solution":"import heapq def shortest_delivery_time(N, M, Q, points, roads): S = points[0] deliveries = set(points[1:]) # Create adjacency list for the graph graph = {i: [] for i in range(1, N+1)} for u, v, w in roads: graph[u].append((v, w)) def dijkstra(start): min_time = {i: float(\'inf\') for i in range(1, N+1)} min_time[start] = 0 pq = [(0, start)] while pq: current_time, u = heapq.heappop(pq) if current_time > min_time[u]: continue for v, weight in graph[u]: time = current_time + weight if time < min_time[v]: min_time[v] = time heapq.heappush(pq, (time, v)) return min_time # Calculate shortest paths from the start min_time_from_start = dijkstra(S) total_delivery_time = 0 for delivery in deliveries: if min_time_from_start[delivery] == float(\'inf\'): return -1 total_delivery_time += min_time_from_start[delivery] return total_delivery_time"},{"question":"You are given a string containing only lowercase letters. Output the characters of the string sorted in lexicographical order. Input The only line of input data contains a string s (1 ≤ length of s ≤ 100). Output Output the characters of the string s sorted in lexicographical order. Examples Input programming Output aggimmnoprr Input hello Output ehllo Note In the first example, the sorted string \\"programming\\" is \\"aggimmnoprr\\". In the second example, the sorted string \\"hello\\" is \\"ehllo\\".","solution":"def sort_string_lexicographically(s): Sorts the characters of the string s in lexicographical order. Parameters: s (str): The string to be sorted Returns: str: The sorted string return \'\'.join(sorted(s))"},{"question":"Develop a small code generator that produces unique serial keys for software licensing. Each serial key is a unique combination of uppercase letters and digits and has the format `XXXXX-XXXXX-XXXXX` where `X` can be a digit or letter. The generator should ensure that the serial keys produced are unique across multiple invocations. -----Input----- The first line of the input contains an integer `m` (1 leq m leq 100,000), the number of serial keys to be generated. -----Output----- Output `m` lines, each containing a unique serial key of the defined format. -----Example----- Input 3 Output K3F4B-Q2ND9-L3PD8 A5H7X-K2MD7-Z9N3B P9D6M-X7CA4-W8FQ6 -----Note----- Your solution needs to ensure that all generated serial keys are unique even if the function is called multiple times. Keys consist of uppercase English letters (A-Z) and digits (0-9) only.","solution":"import random import string def generate_serial_keys(m): Generate `m` unique serial keys with the format XXXXX-XXXXX-XXXXX. Each `X` can be either a digit or an uppercase letter. Args: m (int): The number of serial keys to generate. Returns: list: A list containing `m` unique serial keys. serial_keys = set() while len(serial_keys) < m: key = \'\'.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(5)) key += \'-\' + \'\'.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(5)) key += \'-\' + \'\'.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(5)) serial_keys.add(key) return list(serial_keys)"},{"question":"Emma loves numbers and is very intrigued by prime numbers. She came across a problem where she needs to check if a list of numbers contains any prime numbers. Help Emma by writing a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Input: The first line of input contains an integer n, representing the number of elements in the list. The second line contains n integers separated by space. Output: A list of integers which are prime numbers from the original list, sorted in ascending order. If there are no prime numbers, return an empty list. Constraints: 1 ≤ n ≤ 1000 1 ≤ each integer in the list ≤ 1000 Example: Input: 6 4 7 5 8 12 11 Output: [5, 7, 11] SAMPLE INPUT 8 1 2 3 4 5 6 7 8 SAMPLE OUTPUT [2, 3, 5, 7]","solution":"def is_prime(num): Returns True if num is a prime number, otherwise returns False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def find_primes_in_list(nums): Returns a sorted list of prime numbers from the given list of integers. primes = [num for num in nums if is_prime(num)] return sorted(primes)"},{"question":"Determine if a word is a palindrome. A palindrome is a word that reads the same backward as forward. Write a function that checks if a given word is a palindrome. ------ Input Format ------ - The first line contains a single integer N — the number of test cases. Then the test cases follow. - The first and only line of each test case contains a single word W — the word to check for palindrome property. ------ Output Format ------ For each test case, output YES if the word is a palindrome. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ |W| ≤ 100 W only contains lowercase English letters. ----- Sample Input 1 ------ 3 racecar hello madam ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test Case 1: The word racecar is a palindrome since it reads the same backward as forward. Test Case 2: The word hello is not a palindrome since it does not read the same backward as forward. Test Case 3: The word madam is a palindrome since it reads the same backward as forward.","solution":"def is_palindrome(word): Checks if the given word is a palindrome. Parameters: word (str): The word to check. Returns: str: \\"YES\\" if the word is a palindrome, otherwise \\"NO\\". return \\"YES\\" if word == word[::-1] else \\"NO\\" def check_palindromes(test_cases): Returns the result for multiple test cases Parameters: test_cases (list): List of strings where each string is a word to check. Returns: result (list): List of \\"YES\\" or \\"NO\\" for each word indicating if it\'s a palindrome. result = [is_palindrome(word) for word in test_cases] return result"},{"question":"In a library system, books are categorized by genres and each genre has a list of books sorted by the author\'s last name. The task is to implement a function that organizes books by genre and sorts them correctly by the author\'s last name within each genre. Given an initial unordered list, return the sorted list of books structured by their respective genres. Each book is represented by a dictionary with keys \\"title\\", \\"author_last_name\\", and \\"genre\\". For example: Input: [ {\\"title\\": \\"Book A\\", \\"author_last_name\\": \\"Smith\\", \\"genre\\": \\"Fiction\\"}, {\\"title\\": \\"Book B\\", \\"author_last_name\\": \\"Doe\\", \\"genre\\": \\"Non-fiction\\"}, {\\"title\\": \\"Book C\\", \\"author_last_name\\": \\"Brown\\", \\"genre\\": \\"Fiction\\"}, {\\"title\\": \\"Book D\\", \\"author_last_name\\": \\"Black\\", \\"genre\\": \\"Non-fiction\\"} ] Output: { \\"Fiction\\": [{\\"title\\": \\"Book C\\", \\"author_last_name\\": \\"Brown\\"}, {\\"title\\": \\"Book A\\", \\"author_last_name\\": \\"Smith\\"}], \\"Non-fiction\\": [{\\"title\\": \\"Book D\\", \\"author_last_name\\": \\"Black\\"}, {\\"title\\": \\"Book B\\", \\"author_last_name\\": \\"Doe\\"}] }","solution":"def organize_books(books): Organizes books by genre and sorts them by author\'s last name within each genre. Args: books (list): List of dictionaries, each representing a book with keys \\"title\\", \\"author_last_name\\", and \\"genre\\". Returns: dict: Dictionary with genres as keys and sorted list of books as values. from collections import defaultdict genre_dict = defaultdict(list) for book in books: genre = book[\'genre\'] genre_dict[genre].append({ \\"title\\": book[\\"title\\"], \\"author_last_name\\": book[\\"author_last_name\\"] }) for genre in genre_dict: genre_dict[genre].sort(key=lambda x: x[\'author_last_name\']) return genre_dict"},{"question":"Alice loves jump ropes and often invents new games to play with them. One of her favorite games involves jumping over a long, straight stretch of jump rope laid out on the ground. To make the game more interesting, Alice places obstacles on some cells of the rope. She wants to know the maximum number of jumps she can make without landing on an obstacle. The jump rope is represented as a string `s` of length `n`, where each character is either `.` (an empty cell) or `#` (an obstacle). Alice can start from any cell without an obstacle and can only jump to adjacent cells (left or right) that are also not obstacles. She wants to find the length of the longest segment of consecutive empty cells. Write a program to help Alice find the longest segment of consecutive empty cells on the rope. -----Input----- The first line contains an integer `n` (1 leq n leq 100,000), the length of the jump rope. The second line contains a string `s` of length `n` consisting of the characters `.` and `#`. -----Output----- Print one integer, the length of the longest segment of consecutive empty cells. -----Example----- Input 10 .....#.. Output 3 -----Note----- In the first example, the string `s` is \\".....#..\\". The segments of consecutive empty cells are `\\"..\\", \\"...\\", \\"..\\"`, with the longest segment being `\\"...\\"`, which has a length of 3.","solution":"def longest_empty_segment(s): Returns the length of the longest segment of consecutive empty cells in the rope. :param s: string representing the rope with \'.\' for empty cells and \'#\' for obstacles :return: length of the longest segment of consecutive empty cells max_len = 0 current_len = 0 for char in s: if char == \'.\': current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"You have a string consisting of randomly placed numbers and letters. Your task is to rearrange the characters so that all digits are placed at the end of the string while preserving the relative order of appearance of both the letters and the digits. # Function Signature ```python def rearrange_string(input_str: str) -> str: pass ``` # Input - A single string `input_str` of length 1 to 1000. The string contains only digits (`0-9`) and lowercase letters (`a-z`). # Output - The rearranged string with all letters followed by all digits. # Example ```python rearrange_string(\\"a1b2c3\\") # Returns \\"abc123\\" rearrange_string(\\"123abc\\") # Returns \\"abc123\\" rearrange_string(\\"abc123xyz\\") # Returns \\"abcxyz123\\" ``` # Notes - The order of the letters and digits should remain as in the input string. - Consider edge cases like strings with no letters or no digits.","solution":"def rearrange_string(input_str: str) -> str: Rearranges the input string such that all letters come before digits while preserving their relative order. letters = [] digits = [] for char in input_str: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Given a N * M matrix A, where every row is sorted in ascending order, and a target integer x, find the position of x in the matrix. If x is not found, return (-1, -1). Example 1: Input: N = 3, M = 4 A = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16]] x = 5 Output: (1, 1) Explanation: Element 5 is found at position (1, 1). Example 2: Input: N = 3, M = 4 A = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16]] x = 10 Output: (-1, -1) Explanation: Element 10 is not found in the matrix. Your Task: You don\'t need to read input or print anything. Your task is to complete the function searchInMatrix() which takes integers N, M, and the 2D matrix A[ ][ ] and the integer x as input parameters and returns a tuple representing (row_index, column_index) of x in the matrix if found, otherwise (-1, -1). Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N, M ≤ 10^3 0 ≤ A[i][j], x ≤ 10^6","solution":"def searchInMatrix(N, M, A, x): Finds the position of x in the N * M matrix A. If x is not found, returns (-1, -1). Parameters: N (int): Number of rows in matrix. M (int): Number of columns in matrix. A (list of lists): The N * M matrix. x (int): The target integer to find in the matrix. Returns: tuple: (row_index, column_index) of x in the matrix if found, otherwise (-1, -1) # Start from the top-right corner row, col = 0, M - 1 while row < N and col >= 0: if A[row][col] == x: return (row, col) elif A[row][col] > x: col -= 1 else: row += 1 return (-1, -1)"},{"question":"For a list of integers L = {l_0, l_1, ...}, perform a sequence of the following operations: - insert(p, x): Insert element x at position p of L. - rotate(d, k): Rotate the list L by k positions to the left if d=0, or to the right if d=1. - findMin(l, r): Print the minimum value in the subarray from index l to r inclusive. The list is initially empty. Constraints - 1 leq q leq 200,000 - 0 leq p leq the size of L - 0 leq l leq r < the size of L - -1,000,000,000 leq x leq 1,000,000,000 - 0 leq d leq 1 - 1 leq k leq 100,000 Input The input is given in the following format. ``` q query_1 query_2 : query_q ``` Each query query_i is given by ``` 0 p x ``` or ``` 1 d k ``` or ``` 2 l r ``` where the first digits 0, 1 and 2 represent insert, rotate and findMin operations respectively. findMin operations will not be given for an empty list. Output For each findMin query, print the minimum value in the required subarray in a line. Example Input ``` 10 0 0 5 0 1 3 2 0 1 0 1 4 1 0 1 2 0 2 1 1 2 0 0 2 2 0 3 1 0 1 ``` Output ``` 3 3 2 ```","solution":"class ListManager: def __init__(self): self.L = [] def insert(self, p, x): self.L.insert(p, x) def rotate(self, d, k): n = len(self.L) k %= n if d == 0: self.L = self.L[k:] + self.L[:k] else: self.L = self.L[-k:] + self.L[:-k] def find_min(self, l, r): return min(self.L[l:r+1]) def process_queries(queries): manager = ListManager() results = [] for query in queries: parts = list(map(int, query.split())) if parts[0] == 0: _, p, x = parts manager.insert(p, x) elif parts[0] == 1: _, d, k = parts manager.rotate(d, k) elif parts[0] == 2: _, l, r = parts results.append(manager.find_min(l, r)) return results"},{"question":"Chef has recently started playing a game called \\"Jump Mania\\" where he needs to navigate a series of platforms to reach the finish line. The platforms are numbered from 1 to N and Chef always starts at platform 1. Each platform has a corresponding jump length associated with it. Chef can jump exactly the number of platforms specified at each platform he lands on. Chef wants to know if he can reach the last platform, N. Given the jump lengths for each platform, determine if it\'s possible for Chef to reach the final platform (N). ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with an integer N, the number of platforms. The next N space-separated integers describe the jump lengths for each platform. ------ Output Format ------ For each test case, output \\"YES\\" if Chef can reach the last platform, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ text{jump length} ≤ 100 ----- Sample Input 1 ------ 3 5 2 3 1 1 4 6 2 2 0 1 4 2 4 1 0 0 1 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ - Test case-1: With jumps 2->3->1->1, Chef can navigate from platform 1 to platform 5. - Test case-2: With jumps 2->2->1->4, Chef can navigate from platform 1 to platform 6. - Test case-3: With jumps 1->0->0, Chef cannot move beyond platform 2, so the answer is \\"NO\\".","solution":"def can_reach_last_platform(test_cases): results = [] for case in test_cases: N, jumps = case[0], case[1:] max_reach = 0 for i in range(N): if i > max_reach: results.append(\\"NO\\") break max_reach = max(max_reach, i + jumps[i]) if max_reach >= N - 1: results.append(\\"YES\\") break else: results.append(\\"NO\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, T + 1): numbers = list(map(int, input_lines[i].split())) N, jumps = numbers[0], numbers[1:] test_cases.append([N] + jumps) return test_cases def main(input_str): test_cases = parse_input(input_str) results = can_reach_last_platform(test_cases) for result in results: print(result)"},{"question":"You are given a directed acyclic graph (DAG) with n vertices and m edges. Your task is to find the number of different topological sorts of the graph. A topological sort of a directed acyclic graph is a linear ordering of its vertices such that for every directed edge u -> v, vertex u comes before vertex v in the ordering. The number of vertices in the graph is n and the number of edges is m. You have to calculate the total number of distinct topological orderings of the graph modulo 10^9 + 7. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ n*(n-1)/2) — the number of vertices and the number of edges in the graph. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is a directed edge from vertex u to vertex v. -----Output----- Print one integer — the number of distinct topological sorts of the graph modulo 10^9 + 7. -----Examples----- Input 3 2 1 2 2 3 Output 1 Input 4 4 1 2 1 3 2 4 3 4 Output 2","solution":"MOD = 10**9 + 7 def count_topological_sorts(n, edges): from itertools import permutations # Create the adjacency list and the in-degree list adj_list = [[] for _ in range(n)] in_degree = [0] * n # Populate the adjacency list and in-degree list for u, v in edges: adj_list[u-1].append(v-1) in_degree[v-1] += 1 # Helper function to check if a given permutation is a valid topological sort def is_valid_topo_sort(perm): order = [-1] * n for i, node in enumerate(perm): order[node] = i for u in range(n): for v in adj_list[u]: if order[u] >= order[v]: return False return True vertices = [i for i in range(n)] total_topo_sorts = 0 # Generate all permutations and count the valid topological sorts for perm in permutations(vertices): if is_valid_topo_sort(perm): total_topo_sorts += 1 return total_topo_sorts % MOD # Function wrapper to handle input/output as described def solve_topo_sort_problem(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [(int(data[i*2 + 2]), int(data[i*2 + 3])) for i in range(m)] print(count_topological_sorts(n, edges))"},{"question":"You are given an undirected, connected graph with N vertices and M edges. Each edge has a positive integer weight. The task is to find the shortest path from vertex 1 to vertex N and print the sequence of vertices that constitute this path. If there are multiple shortest paths, print any of them. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2×10^5 - 1 ≤ weight of each edge ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N M u1 v1 w1 u2 v2 w2 ... uM vM wM Each of the next M lines contains three integers u_i, v_i, and w_i, representing an edge between vertices u_i and v_i with weight w_i. -----Output----- Print a single line containing the sequence of vertices in the shortest path from vertex 1 to vertex N. -----Sample Input----- 5 6 1 2 2 1 3 1 2 3 1 2 4 5 3 5 3 4 5 2 -----Sample Output----- 1 3 5 In this example, the shortest path from vertex 1 to vertex 5 is through vertex 3, with a total weight of 4. Thus, the sequence of vertices is 1 → 3 → 5.","solution":"import heapq def shortest_path(N, M, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 priority_queue = [(0, start)] previous = {i: None for i in range(1, N + 1)} while priority_queue: curr_distance, u = heapq.heappop(priority_queue) if curr_distance > distances[u]: continue for v, weight in graph[u]: distance = curr_distance + weight if distance < distances[v]: distances[v] = distance previous[v] = u heapq.heappush(priority_queue, (distance, v)) return distances, previous distances, previous = dijkstra(1) path = deque() current = N while current is not None: path.appendleft(current) current = previous[current] return list(path) # Parsing function to make it compliant with the input format def parse_input(input_str): data = input_str.strip().split(\'n\') N, M = map(int, data[0].split()) edges = [tuple(map(int, line.split())) for line in data[1:]] return N, M, edges # Bringing everything together in a main function for clean testability. def main(input_str): N, M, edges = parse_input(input_str) path = shortest_path(N, M, edges) return \' \'.join(map(str, path))"},{"question":"You are given an array of N integers and an integer K. Your task is to figure out the maximum integer in the array which is less than or equal to K. If no such element exists, output -1. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two space-separated integers N and K, denoting the number of integers in the array and the threshold integer. - The second line contains N space-separated integers denoting the elements of the array. ------ Output Format ------ For each test case, output a single integer representing the maximum integer in the array which is less than or equal to K. If no such element exists, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ ai, K ≤ 100 ----- Sample Input 1 ------ 3 5 10 1 2 3 4 5 4 3 10 20 30 40 3 15 5 15 25 ----- Sample Output 1 ------ 5 -1 15 ----- Explanation 1 ------ Test case 1: The maximum integer in the array which is less than or equal to 10 is 5. Test case 2: No integer in the array is less than or equal to 3, so the output is -1. Test case 3: The maximum integer in the array which is less than or equal to 15 is 15.","solution":"def find_max_less_equal(arr, k): Returns the maximum integer in the array which is less than or equal to k. If no such element exists, return -1. max_value = -1 for num in arr: if num <= k: max_value = max(max_value, num) return max_value def process_input(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] array = test_cases[i][1] result = find_max_less_equal(array, K) results.append(result) return results"},{"question":"Given an array A of N positive integers. You need to determine the minimum number of elements that need to be removed from the array so that the difference between the maximum and minimum elements in the remaining array is at most K. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line of each test case contains two integers N and K. - The second line of each test case contains N space-separated integers denoting the array A. ------ Output Format ------ For each test case, print a single integer denoting the minimum number of elements that need to be removed. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ A[i] ≤ 1000 for each valid i 0 ≤ K ≤ 1000 ------ Sample Input 1 ------ 2 5 3 4 7 2 8 5 4 10 1 2 3 20 ------ Sample Output 1 ------ 2 1 ------ Explanation of Sample Output 1 ------ Test Case 1: With the array [4, 7, 2, 8, 5], we can remove elements 2 and 8. The remaining array [4, 7, 5] has a maximum difference of 3 (which is ≤ 3). Test Case 2: With the array [1, 2, 3, 20], we can remove element 20. The remaining array [1, 2, 3] has a maximum difference of 2 (which is ≤ 10).","solution":"def min_elements_to_remove(N, K, array): Determines the minimum number of elements that need to be removed from an array such that the difference between the maximum and minimum elements in the remaining array is at most K. array.sort() min_removals = N for i in range(N): for j in range(i, N): if array[j] - array[i] <= K: min_removals = min(min_removals, i + (N - 1 - j)) return min_removals def process_test_cases(test_cases): results = [] for test_case in test_cases: N, K = test_case[0] array = test_case[1] results.append(min_elements_to_remove(N, K, array)) return results"},{"question":"Given a binary tree, write a function `findDeepestLeftLeaf` that returns the value of the deepest left leaf node. If there is no left leaf node, return `-1`. A node is considered a left leaf if it is the left child of its parent and has no children of its own. Example 1: Input: ``` 1 / 2 3 / 4 5 / 7 ``` Output: `7` Explanation: Node 7 is the deepest left leaf node in the binary tree. Example 2: Input: ``` 1 / 2 3 / 4 5 / 8 ``` Output: `8` Explanation: Node 8 is the deepest left leaf node in the binary tree. Example 3: Input: ``` 1 / 2 3 / 4 5 ``` Output: `-1` Explanation: There is no left leaf node in the binary tree. Your function `findDeepestLeftLeaf` should take a single argument: - `root`: the root node of the binary tree. Your function should return the value of the deepest left leaf node or `-1`. Expected Time Complexity: `O(N)` where `N` is the number of nodes in the binary tree. Expected Auxiliary Space: `O(H)` where `H` is the height of the binary tree. Constraints: * The number of nodes in the tree is between 1 and `10^4`. * The values of the nodes in the tree will be between -`10^4` and `10^4`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findDeepestLeftLeaf(root): if not root: return -1 def dfs(node, is_left, depth): if not node: return (None, depth) if not node.left and not node.right and is_left: return (node.val, depth) left_result = dfs(node.left, True, depth + 1) right_result = dfs(node.right, False, depth + 1) if left_result[1] >= right_result[1]: return left_result return right_result result, _ = dfs(root, False, 0) return result if result is not None else -1"},{"question":"You are given a list of non-negative integers. Your task is to find the smallest non-negative integer that is not present in the list. For example, given the list `[0, 1, 2, 6, 9]`, the smallest non-negative integer not in the list is `3`. Note: - The list may contain duplicates. - The list may include any non-negative integers without any specific order. -----Constraints----- - 1 leq |list| leq 10<sup>5</sup> - 0 leq list[i] leq 10<sup>9</sup> -----Input----- Input is given from Standard Input in the following format: n list (a single line containing n integers separated by spaces) -----Output----- Print the smallest non-negative integer that is not present in the list. -----Sample Input----- 5 0 1 2 6 9 -----Sample Output----- 3 - Explanation: The integers 0, 1, and 2 are present in the list. - The next smallest non-negative integer is 3, which is not in the list.","solution":"def find_smallest_missing_integer(arr): Given a list of non-negative integers, finds the smallest non-negative integer that is not present in the list. arr_set = set(arr) smallest_missing = 0 while smallest_missing in arr_set: smallest_missing += 1 return smallest_missing"},{"question":"Sum of Large Integers Given two large integers A and B as strings, compute their sum and output the result. Input Two large integers represented as strings are provided on the same line, separated by a space character. Output Print the sum of the two integers in a line. Constraints * 0 leq length(A), length(B) leq 1000 * The integers A and B will contain only numeric characters and will not have leading zeros except for the number \\"0\\". Sample Input 1 123456789123456789 987654321987654321 Sample Output 1 1111111111111111110 Sample Input 2 0 0 Sample Output 2 0 Example Input 123456789123456789 987654321987654321 Output 1111111111111111110","solution":"def sum_large_integers(A, B): Returns the sum of two large integers A and B represented as strings. return str(int(A) + int(B))"},{"question":"You are given an integer array A of length N. Your task is to find out the maximum possible sum of a continuous subarray of A. A subarray is a contiguous subsequence of the array. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer — the maximum sum of a continuous subarray. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - -100 le A_i le 100 for each valid i -----Example Input----- 3 5 1 -2 3 4 -1 4 -1 -2 -3 -4 2 1 2 -----Example Output----- 7 -1 3 -----Explanation----- Example case 1: The subarray with the maximum sum is [3, 4] with sum 7. Example case 2: The subarray with the maximum sum is [-1] with sum -1 since all elements are negative. Example case 3: The entire array [1, 2] is the subarray with the maximum sum which equals 3.","solution":"def max_subarray_sum(A): Returns the maximum possible sum of a continuous subarray of A. max_ending_here = max_so_far = A[0] for x in A[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def solve(T, test_cases): results = [] for N, A in test_cases: results.append(max_subarray_sum(A)) return results"},{"question":"A company is organizing a multi-level hackathon event. Each level consists of several participants competing against each other, and only half of them proceed to the next level. The competition starts with p participants, where p is always a power of 2 (i.e., p = 2^k for some non-negative integer k). In every level, participants are paired, and for each pair, the participant with the lower skill level always wins and advances to the next level. You are given the skill levels of the participants at the beginning of the competition in an array skills where skills[i] represents the skill level of the i-th participant. You need to determine the skill level of the participant who wins the entire event. Write a function `hackathon_winner(p: int, skills: List[int]) -> int` that takes the number of participants p and a list of skill levels, and returns the skill level of the ultimate winner. -----Input----- - An integer p (1 le p le 2^{18}). - A list of integers skills of length p, where each element is a distinct integer representing the skill level of a participant (1 le skills[i] le 10^6). -----Output----- - The skill level of the participant who wins the competition. -----Examples----- Input 4 [3, 1, 4, 2] Output 1 Input 8 [7, 8, 6, 5, 4, 3, 2, 1] Output 1 -----Note----- In the first example, the competition proceeds as follows: - Level 1: Pairs (3,1) and (4,2); winners are 1 and 2. - Level 2: Pair (1,2); winner is 1. In the second example, the competition proceeds as follows: - Level 1: Pairs (7,8), (6,5), (4,3), (2,1); winners are 7, 5, 3, 1. - Level 2: Pairs (7,5) and (3,1); winners are 5 and 1. - Level 3: Pair (5,1); winner is 1.","solution":"from typing import List def hackathon_winner(p: int, skills: List[int]) -> int: Determines the skill level of the participant who wins the entire hackathon event. :param p: The number of participants, must be a power of 2. :param skills: List of integers representing the skill levels of participants. :return: The skill level of the ultimate winner. while len(skills) > 1: next_round = [] for i in range(0, len(skills), 2): winner = min(skills[i], skills[i + 1]) next_round.append(winner) skills = next_round return skills[0]"},{"question":"Given an integer array nums, find the length of the longest subarray which does not contain any duplicate elements. Example 1: Input: nums = [1, 2, 3, 1, 2, 3, 4, 5] Output: 5 Explanation: The longest subarray without duplicate elements is [1, 2, 3, 4, 5] with length 5. Example 2: Input: nums = [4, 4, 4, 4] Output: 1 Explanation: The longest subarray without duplicate elements is [4] with length 1. Example 3: Input: nums = [1, 2, 3, 4, 5] Output: 5 Explanation: All elements are unique in the array, so the longest subarray without duplicates is the entire array with length 5. Your Task: You don’t need to read input or print anything. Your task is to complete the function lengthOfLongestSubarray() which takes an array nums as input and returns the length of the longest subarray without duplicate elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(min(n, k)) where k is the range of possible values in nums. Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] <= 10^6","solution":"def lengthOfLongestSubarray(nums): Returns the length of the longest subarray without duplicate elements. n = len(nums) if n == 0: return 0 max_length = 0 start = 0 seen = {} for end in range(n): if nums[end] in seen: start = max(start, seen[nums[end]] + 1) seen[nums[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given two strings, s1 and s2. Write a function to determine if s2 is a rotation of s1 using only one call to the string concatenation method and one substring check. For example, \'waterbottle\' is a rotation of \'erbottlewat\'. # Constraints: - Both s1 and s2 will have lengths not exceeding 100 characters. - Both strings will contain only lowercase alphabets. # Example: Input: s1 = \\"hello\\" s2 = \\"llohe\\" Output: True Input: s1 = \\"hello\\" s2 = \\"olelh\\" Output: False Note: You may assume that both strings are non-empty and of the same length.","solution":"def is_rotation(s1, s2): Determines if s2 is a rotation of s1 using only one call to the string concatenation method and one substring check. if len(s1) != len(s2): return False return s2 in s1 + s1"},{"question":"You are given an array of integers `arr`, and an integer `k`. Your task is to find the maximum sum of any subarray of length exactly `k`. A subarray is defined as a contiguous subsequence of the array. # Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5). - The second line contains `n` integers representing the array `arr` (1 ≤ arr[i] ≤ 10^4). # Output - Print a single integer representing the maximum sum of any subarray of length exactly `k`. # Examples Example 1 **Input:** ``` 5 3 1 2 3 4 5 ``` **Output:** ``` 12 ``` **Explanation:** The subarray with the maximum sum is `[3, 4, 5]` which sums to `12`. Example 2 **Input:** ``` 4 2 1 4 2 10 ``` **Output:** ``` 12 ``` **Explanation:** The subarray with the maximum sum is `[2, 10]` which sums to `12`. # Note To solve this problem efficiently, consider using a sliding window technique.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of any subarray of length exactly k. :param arr: List of integers :param k: Integer, length of the subarray :return: Integer, maximum sum of the subarray of length k # Calculate the sum of the first window of length k max_sum = current_sum = sum(arr[:k]) # Use sliding window technique to find the maximum sum subarray for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Santa\'s Workshop: Toy Assembly Story Santa Claus is getting ready for Christmas, and his workshop is bustling with activity. The elves are working hard to assemble various toys, using different parts available in Santa\'s workshop. Each toy requires a specific combination of parts, and each part comes in limited quantities. Given the parts available and the toys that need to be assembled, the challenge is to figure out the maximum number of toys that can be constructed. Problem You are given data about P types of parts and T types of toys. Each toy requires a specific combination of parts, and each part is available in limited quantities. Your task is to determine the maximum number of toys that can be assembled using the available parts. Input The input consists of the following format: P T q_1 q_2 ... q_P r_1 c_1_1 c_1_2 ... c_1_P ... r_T c_T_1 c_T_2 ... c_T_P - The first line consists of two integers, P and T, representing the number of parts and the number of toys, respectively. - The second line consists of P integers, q_1, q_2, ..., q_P, representing the available quantity of each part. - The following T lines represent the toy information. Each line consists of one integer r_i (the reward for assembling the i-th toy), followed by P integers c_i_1, c_i_2, ..., c_i_P, representing the quantity of each part required to assemble one unit of the toy. Constraints: - 1 ≤ P, T ≤ 100 - 1 ≤ q_i ≤ 100 for 1 ≤ i ≤ P - 1 ≤ r_i ≤ 100 for 1 ≤ i ≤ T - 0 ≤ c_i_j ≤ 100 for 1 ≤ i ≤ T and 1 ≤ j ≤ P Output Output the maximum reward that can be obtained by assembling toys using the available parts. If no toys can be assembled, output 0. Sample Input 1 3 2 10 5 7 8 2 1 3 5 1 2 2 Sample Output 1 16 Explanation: We can assemble 1 of the first toy (reward 8) and 1 of the second toy (reward 5). We now have quantities (8, 4, 4) left. We can still assemble 1 more of the first toy. This gives us a total reward of 8 + 5 + 8 = 21. Sample Input 2 2 1 4 6 10 3 2 Sample Output 2 -1 Explanation: There are not enough parts to assemble even one toy of type 2. So, the output is -1.","solution":"def max_reward(P, T, q, toys): def can_assemble_toy(toy, parts): for i in range(P): if parts[i] < toy[i]: return False return True def assemble_toy(toy, parts): for i in range(P): parts[i] -= toy[i] parts = q[:] reward = 0 any_toy_assembled = True while any_toy_assembled: any_toy_assembled = False for toy in sorted(toys, key=lambda x: x[0], reverse=True): if can_assemble_toy(toy[1:], parts): any_toy_assembled = True reward += toy[0] assemble_toy(toy[1:], parts) break return reward if reward > 0 else -1 # Reading the inputs def read_input(): import sys input = sys.stdin.read data = input().split() P = int(data[0]) T = int(data[1]) q = list(map(int, data[2:P + 2])) toys = [] idx = P + 2 for _ in range(T): toy = list(map(int, data[idx:idx + P + 1])) toys.append(toy) idx += P + 1 return P, T, q, toys # This function is written to test the implementation. # To use it, call `read_input` and pass its result to `max_reward` def main(): P, T, q, toys = read_input() result = max_reward(P, T, q, toys) print(result)"},{"question":"You are tasked with developing a system that interfaces with an existing dictionary for an educational application aimed at students. The system should include a way to generate a new word list based on certain criteria while ensuring no repeating words from previously used lists. The criteria for generating new words must focus on words starting with the same letter. -----Input----- The first line contains an integer, N, denoting the number of words in the provided dictionary (1 leq N leq 50000). The next N lines each contains a word from the dictionary. The following line contains an integer, M, indicating the number of previous word lists to be considered (0 leq M leq 1000). The next M lines describe the previously used lists, each starting with an integer P denoting the number of words in that list (1 leq P leq 1000), followed by P words belonging to that previous list. The final line contains a character C representing the starting letter for words to be included in the new word list. -----Output----- Output all the words starting with the character C and not included in any of the previous lists. The words must be printed in lexicographically increasing order, one word per line. If there are no valid words, output \\"No words available\\". Each word should appear only once in the output. -----Examples----- Sample Input 1: 7 apple apricot banana berry cherry chocolate cucumber 2 3 apple apricot berry 2 banana cherry a Sample Output 1: No words available Sample Input 2: 5 ant angle apple anchor antelope 1 2 ant apple a Sample Output 2: anchor angle antelope Sample Input 3: 6 kite king kangaroo kirby kiwi knight 0 k Sample Output 3: kangaroo king kite kiwi knight","solution":"def generate_word_list(dictionary_words, previous_lists, starting_letter): Generates a new list of words starting with the given letter that is not in previous lists. :param dictionary_words: List of words from dictionary :param previous_lists: List of lists describing previously used word lists :param starting_letter: The starting letter for the new words :returns: A sorted list of unique words starting with the given letter not in previous lists previous_words = set(word for sublist in previous_lists for word in sublist) new_words = [word for word in dictionary_words if word.startswith(starting_letter) and word not in previous_words] new_words.sort() if new_words: return new_words return [\\"No words available\\"] # Example usage: # dictionary_words = [\'apple\', \'apricot\', \'banana\', \'berry\', \'cherry\', \'chocolate\', \'cucumber\'] # previous_lists = [[\'apple\', \'apricot\', \'berry\'], [\'banana\', \'cherry\']] # starting_letter = \'a\' # generate_word_list(dictionary_words, previous_lists, starting_letter) # Output: [\\"No words available\\"]"},{"question":"Write a function called `max_sequence` that takes a list of integers `arr` as input and returns the sum of the maximum sum subarray. A subarray is a contiguous portion of the array. If the array is empty, the function should return 0. For example: - `max_sequence([−2,1,−3,4,−1,2,1,−5,4])` should return `6`, corresponding to the subarray `[4,−1,2,1]`. - `max_sequence([])` should return `0`. The function should handle arrays that consist of all negative numbers by returning 0, which indicates that taking no elements would yield the maximum sum. # Constraints: - The length of the input list `arr` will be between 0 and 100,000. - The values in `arr` will be between -1,000 and 1,000. # Example Usage: ```python print(max_sequence([−2,1,−3,4,−1,2,1,−5,4])) # Output: 6 print(max_sequence([])) # Output: 0 print(max_sequence([−1,−2,−3,−4])) # Output: 0 print(max_sequence([4,−1,2,1])) # Output: 6 ``` # Note: The solution should have a linear runtime complexity, in order to be efficient for large inputs.","solution":"def max_sequence(arr): Returns the sum of the maximum sum subarray. If the array is empty, returns 0. If all the elements are negative, returns 0. max_sum = 0 # Initialize maximum sum for an empty subarray current_sum = 0 # Initialize current subarray sum for num in arr: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a dense forest, there is a group of animals that need to send messages to each other. The forest is represented as a grid of size `R x C`, where each cell can either be an empty space (denoted by \'.\') or a tree (denoted by \'#\'). Messages can only be sent from an animal to their neighboring cells (up, down, left, right) if there are no trees blocking the path. Two animals are placed at specific starting positions on the grid, and they want to send messages to each other as quickly as possible. Your task is to determine the minimum number of steps required for one animal to send a message to the other animal. Note: - A message can travel through multiple intermediate cells. - If it\'s not possible for the animals to communicate, return -1. -----Input----- The first line consists of a single integer T, the number of testcases. For each testcase: - The first line contains two integers R and C, the number of rows and columns of the grid. - The next R lines contain a string of length C representing the grid. - The last line contains four integers r1, c1, r2, and c2, the row and column indices of the starting positions of the two animals. -----Output----- For each testcase, output the minimum number of steps required for the animals to communicate, or -1 if communication is not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ R, C ≤ 1000 - The total number of cells across all test cases will not exceed 1,000,000. - 0 ≤ r1, r2 < R - 0 ≤ c1, c2 < C -----Example----- Input: 3 4 4 .... .. ..#. .... 0 0 3 3 3 3 # #.. # 0 0 2 1 5 5 ... .#. .#.#. #.. ... 0 0 4 4 Output: 6 -1 -1 -----Explanation----- For the first example, the minimum path from (0,0) to (3,3) is 0,1 -> 1,1 -> 2,1 -> 2,2 -> 2,3 -> 3,3, taking a total of 6 steps. For the second example, there\'s no possible path from (0,0) to (2,1) because of the trees blocking the way. For the third example, it\'s also impossible for the animals to communicate because trees block all potential paths.","solution":"from collections import deque def min_steps_to_communicate(test_cases): results = [] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right def bfs(grid, R, C, start, end): visited = [[False for _ in range(C)] for _ in range(R)] queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited[start[0]][start[1]] = True while queue: r, c, steps = queue.popleft() if (r, c) == end: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == \'.\' and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1 for testcase in test_cases: R, C, grid, r1, c1, r2, c2 = testcase result = bfs(grid, R, C, (r1, c1), (r2, c2)) results.append(result) return results def parse_inputs(input_string): lines = input_string.split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): R, C = map(int, lines[index].split()) index += 1 grid = [] for _ in range(R): grid.append(lines[index]) index += 1 r1, c1, r2, c2 = map(int, lines[index].split()) index += 1 test_cases.append((R, C, grid, r1, c1, r2, c2)) return test_cases def main(input_string): test_cases = parse_inputs(input_string) results = min_steps_to_communicate(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Write a function \'two_sum\' that takes an array of integers and a target integer. The function should return indices of the two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Examples: Input ```python two_sum([2, 7, 11, 15], 9) ``` Output ```python [0, 1] ``` Input ```python two_sum([3, 2, 4], 6) ``` Output ```python [1, 2] ``` Input ```python two_sum([3, 3], 6) ``` Output ```python [0, 1] ``` Note: - You can return the indices in any order. - Your solution should aim for linear time complexity.","solution":"def two_sum(nums, target): Returns indices of the two numbers that add up to the target. Parameters: nums (list): List of integers. target (int): The target integer. Returns: list: Indices of the two numbers that add up to the target. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"Given a grid of size N x M (where 1 ≤ N, M ≤ 1000) consisting of \'.\' (empty cell) and \'#\' (obstacle), find the length of the shortest path from the top-left corner to the bottom-right corner. You can move left, right, up, or down and cannot move onto or through obstacles. Return -1 if no such path exists. Example 1: Input: N = 3, M = 3 grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] Output: 4 Explanation: The shortest path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). Example 2: Input: N = 3, M = 3 grid = [ [\'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] Output: -1 Explanation: There is no path to reach the bottom-right corner. Your Task: You don\'t need to read input or print anything. Complete the function shortestPath() which takes N, M, and a grid as input parameters and returns the length of the shortest path, or -1 if no path exists. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 1000 grid[i][j] = \'.\' or \'#\'","solution":"from collections import deque def shortestPath(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Write a function `groupAnagrams` that takes a list of strings `strs` and groups the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should return a list of lists, where each inner list contains words that are anagrams of each other. For example, given the list `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]`, `groupAnagrams` should return: ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` The order of the output and the order of the strings in the inner lists does not matter.","solution":"from collections import defaultdict def groupAnagrams(strs): Groups anagrams together from a list of strings. Args: strs (list): List of strings to be grouped. Returns: list: A list of lists, where each inner list contains anagrams. anagrams = defaultdict(list) for word in strs: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are given a string containing only lowercase letters and a pattern also containing only lowercase letters. You need to find all the starting indices of the pattern\'s anagrams in the given string. The output should be in ascending order of indices. For example: Consider the case where the input string is \\"cbaebabacd\\" and the pattern is \\"abc\\". The anagrams of the pattern \\"abc\\" are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". These anagrams appear in the input string at substrings starting at indices 0, 6, and 8. Input: The first line contains T, the number of test cases. Each of the next T lines contains two strings: the first being the input string and the second being the pattern. Output: Output T lines, one for each test case, containing a list of starting indices of the pattern\'s anagrams in the given string. If no anagram is found, return an empty list for that test case. Sample Input: 2 cbaebabacd abc abab ab Sample Output: [0, 6] [0, 1, 2] Constraints: 1 ≤ T ≤ 100 1 ≤ length of input string ≤ 10000 1 ≤ length of pattern ≤ 1000","solution":"from collections import Counter def find_anagram_indices(s, p): Given a string s and a pattern p, return a list of starting indices of the pattern\'s anagrams in the string s. len_s, len_p = len(s), len(p) if len_p > len_s: return [] p_count = Counter(p) s_count = Counter(s[:len_p - 1]) result = [] for i in range(len_p - 1, len_s): s_count[s[i]] += 1 # add the new character to the window if s_count == p_count: result.append(i - len_p + 1) # start index of the anagram s_count[s[i - len_p + 1]] -= 1 # remove the character that\'s left the window if s_count[s[i - len_p + 1]] == 0: del s_count[s[i - len_p + 1]] # completely remove it from the counter return result def find_all_anagram_indices(test_cases): results = [] for s, p in test_cases: results.append(find_anagram_indices(s, p)) return results"},{"question":"You are given a string s consisting of lowercase English letters. You have to process q queries to this string; each query is given as an integer k, where you need to find the k-th lexicographically smallest character in the string. Output the k-th smallest character for each query. Input The first line contains one integer n (1 ≤ n ≤ 100000) — the length of string s. The second line contains a string s of length n. The third line contains one integer q (1 ≤ q ≤ 100000) — the number of queries you have to process. Then q lines follow. Each line contains one integer k (1 ≤ k ≤ n), denoting the k-th smallest character query. Output Print q characters — the k-th lexicographically smallest characters for each query, in order. Example Input 6 banana 3 1 3 6 Output a a n","solution":"def kth_smallest_char_in_string(n, s, q, queries): Returns a list of k-th lexicographically smallest characters for each query. Parameters: n (int): The length of the string s. s (str): The input string consisting of lowercase English letters. q (int): The number of queries. queries (list): List of integers, each representing a query for the k-th smallest character. Returns: list: A list of characters corresponding to each query. # Sort the string to easily access k-th smallest character sorted_chars = sorted(s) # Retrieve k-th smallest character for each query and store in result list result = [sorted_chars[k-1] for k in queries] return result"},{"question":"Consider a matrix of size n x m, where each cell contains either a 0 or a 1. A path is defined as a sequence of cells starting from the top-left corner (1,1) and ending at the bottom-right corner (n,m) such that: - You can move to the right or down from a cell. - The sum of all values in the path should be minimized. Write a program to find the minimum path sum from the top-left to the bottom-right corner. -----Input----- The first line contains two space-separated integers n and m, the dimensions of the matrix. The next n lines each contain m space-separated integers (either 0 or 1), representing the matrix. -----Output----- Print the minimum path sum. -----Constraints----- - 1 ≤ n, m ≤ 500 - Each matrix element is either 0 or 1. -----Example----- Input: 3 3 0 1 1 1 0 1 1 1 0 Output: 2 Explanation: The path with minimum sum is (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3). The sum of this path is 0 + 1 + 0 + 1 + 0 = 2.","solution":"def min_path_sum(matrix): n = len(matrix) m = len(matrix[0]) # Create a DP table to store the minimum path sum up to each cell dp = [[0] * m for _ in range(n)] # Initialize the first cell with the value of the first cell of the matrix dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The answer will be the value at the bottom-right corner of the DP table return dp[n-1][m-1] # Read input from stdin and call the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matrix = [] index = 2 for i in range(n): row = list(map(int, data[index:index + m])) matrix.append(row) index += m result = min_path_sum(matrix) print(result)"},{"question":"A spaceship traveling in a quadrant has its trajectory described by a sequence of integer coordinates in a 2D plane. Due to a malfunction, it repeats certain parts of its path, which creates \\"loops.\\" Your task is to identify whether the spaceship\'s path contains any loops and determine the length of the shortest loop if one exists. A loop is defined as a sequence of steps where the spaceship visits the same set of coordinates more than once. -----Input----- - The first line contains an integer n (2 ≤ n ≤ 100000), representing the number of steps in the spaceship\'s path. - Each of the next n lines contains two integers x and y (-100000 ≤ x, y ≤ 100000), representing the coordinates visited by the spaceship at each step. -----Output----- - Print a single integer denoting the length of the shortest loop if any loops are present. If there are no loops, print -1. -----Examples----- Input 5 0 0 1 1 0 1 1 0 0 0 Output 5 Input 4 0 0 1 0 0 1 1 1 Output -1 -----Note----- In the first example, the spaceship returns to the starting point (0, 0) after 5 steps, creating a loop (0, 0) → (1, 1) → (0, 1) → (1, 0) → (0, 0). In the second example, the spaceship does not visit any coordinates more than once, so no loop exists.","solution":"def find_shortest_loop(n, coordinates): visited = {} shortest_loop = float(\'inf\') loop_found = False for i, coord in enumerate(coordinates): if coord in visited: loop_length = i - visited[coord] + 1 shortest_loop = min(shortest_loop, loop_length) loop_found = True visited[coord] = i return shortest_loop if loop_found else -1"},{"question":"Alice has a sequence of blocks, each with a certain height. She can perform one of two operations on the sequence: 1. Decrease the height of any single block by 1. 2. Decrease the height of all blocks in a specified contiguous subarray by 1. Alice wants to make all the blocks in her sequence the same height in the minimum number of operations. Write a program to determine the minimum number of operations required to achieve this. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of blocks. The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^5) — the initial heights of the blocks. -----Output----- Print a single integer — the minimum number of operations required to make all block heights equal. -----Examples----- Input 3 5 2 7 Output 5 Input 4 1 1 1 1 Output 0 Input 5 3 3 3 2 2 Output 2","solution":"def min_operations_to_equalize_heights(n, heights): Returns the minimum number of operations required to make all block heights equal. Params: n - an integer representing the number of blocks heights - a list of integers representing the initial heights of the blocks Returns: An integer representing the minimum number of operations. if n == 1: return 0 # Find the maximum and minimum heights max_height = max(heights) min_height = min(heights) return max_height - min_height"},{"question":"In a hypothetical kingdom, there are N cities connected by M bidirectional roads. Each road connects two cities and has a certain travel time associated with it. The cities are numbered from 1 to N. The king wants to visit every city starting from city 1 and follow any path that visits all cities exactly once, ending back at city 1. A path that visits all cities exactly once and ends back at the starting city is called a Hamiltonian cycle. Finding the minimum travel time required to complete such a cycle is known as the Traveling Salesman Problem (TSP). Given the number of cities and the travel times of the roads, determine the minimum travel time needed for the king to complete his journey. -----Input----- - The first line contains two integers N (1 ≤ N ≤ 15) and M (1 ≤ M ≤ N*(N-1)/2), the number of cities and the number of roads, respectively. - Each of the next M lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 100), denoting a road between city u and city v with travel time w. -----Output----- - Print a single integer, the minimum travel time required for the king to visit all cities exactly once and return to the starting city. If it is not possible to visit all cities, print -1. -----Constraints----- - 1 ≤ N ≤ 15 - 1 ≤ M ≤ N*(N-1)/2 - 1 ≤ u, v ≤ N - 1 ≤ w ≤ 100 -----Example----- Input: 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output: 80 -----Explanation----- Example case. One possible minimum travel path is: 1 -> 2 -> 3 -> 4 -> 1 with a travel time of 10 + 35 + 30 + 15 = 80. Hence, the output is 80. Note: The problem guarantees that there is at least one road directly connected to city 1.","solution":"import itertools def tsp(N, roads): Solve the Travelling Salesman Problem (TSP) for the given cities and roads. :param N: Number of cities :param roads: List of tuples (u, v, w) representing roads between cities u and v with travel time w :return: Minimum travel time to visit all cities exactly once and return to the start, or -1 if not possible # Create adjacency matrix inf = float(\'inf\') dist = [[inf] * N for _ in range(N)] for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Handle N=1 trivially if N == 1: return 0 # Use DP to solve TSP dp = [[inf] * N for _ in range(1<<N)] dp[1][0] = 0 for mask in range(1<<N): for u in range(N): if mask & (1 << u): for v in range(N): if mask & (1 << v) == 0: dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + dist[u][v]) res = min(dp[(1<<N)-1][i] + dist[i][0] for i in range(1, N)) return res if res < inf else -1 def minimum_travel_time(n, m, roads): Wrapper function to parse the input format and call the TSP solver. :param n: Number of cities :param m: Number of roads :param roads: List of tuples (u, v, w) representing roads between cities u and v with travel time w :return: Minimum travel time to visit all cities exactly once and return to the start, or -1 if not possible return tsp(n, roads)"},{"question":"A theme park has created a new attraction consisting of a series of connected rooms. Each room contains a puzzle, and solving the puzzle correctly allows a visitor to move to the next connected room. The park designers want to ensure that each visiting group can complete the attraction efficiently, avoiding unnecessary backtracking. There are N rooms in the attraction and M one-way passages between them. Each passage has a difficulty rating, indicating how hard it is to move from one room to another. Given the difficulty ratings, questions have arisen regarding the least challenging route between pairs of rooms. You are given Q queries, each containing two rooms, start and end, for which you need to find the minimum difficulty route from start to end. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains three integers N, M, and Q — the number of rooms, the number of one-way passages, and the number of queries, respectively. - The next M lines contain three space-separated integers u, v, and w — a passage from room u to room v with difficulty rating w. - The next Q lines contain two space-separated integers start and end — the rooms for the query. ------ Output Format ------ For each query, print the minimum difficulty route from start room to end room. If there\'s no route, print -1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 0 ≤ M ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ u, v, start, end ≤ N 1 ≤ w ≤ 10^3 ----- Sample Input 1 ------ 1 4 4 2 1 2 5 2 3 1 3 4 2 1 3 10 1 4 3 2 ----- Sample Output 1 ------ 8 -1 ----- Explanation 1 ------ In the first query, the least challenging route from room 1 to room 4 is 1 → 2 → 3 → 4 with a difficulty of 5+1+2 = 8. In the second query, there\'s no direct or indirect path from room 3 to room 2, so the answer is -1.","solution":"import heapq import sys def dijkstra(adj, src, dest, n): dist = [sys.maxsize] * (n + 1) dist[src] = 0 pq = [(0, src)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: # Check for outdated entry on priority queue continue for v, weight in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[dest] if dist[dest] != sys.maxsize else -1 def solve_attraction(t, cases): results = [] for case in cases: n, m, q, passages, queries = case adj = [[] for _ in range(n + 1)] for u, v, w in passages: adj[u].append((v, w)) for start, end in queries: results.append(dijkstra(adj, start, end, n)) return results"},{"question":"You are given a string containing lowercase letters. Your task is to determine if you can rearrange the characters of the string to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency, and all other characters have an even frequency. Example 1: Input: \\"civic\\" Output: 1 Explanation: The string \\"civic\\" is a palindrome itself. Example 2: Input: \\"ivicc\\" Output: 1 Explanation: The string \\"ivicc\\" can be rearranged to form \\"civic\\", which is a palindrome. Example 3: Input: \\"hello\\" Output: 0 Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Your Task: You don\'t need to read or print anything. Your task is to complete the function can_form_palindrome() which takes a string as input parameter and returns 1 if the characters can be rearranged to form a palindrome, otherwise returns 0. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(s) <= 10^{5}","solution":"def can_form_palindrome(s): from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one character with an odd frequency if odd_count > 1: return 0 else: return 1"},{"question":"Create a class `RailwayNetwork` that manages the stations in a railway network and the connections between them. Each station has a unique name (a string). The network allows for adding and removing stations, connecting stations, and finding routes between stations. The class should have the following methods (all arguments are strings representing station names): - `add_station(name)` returning `boolean`: Adds a new station to the railway network. Returns `False` if the station already exists, `True` otherwise. - `remove_station(name)` returning `boolean`: Removes a station from the railway network. This also removes all connections to this station. Returns `False` if the station does not exist, `True` otherwise. - `connect_stations(station1, station2)` returning `boolean`: Creates a bi-directional connection between `station1` and `station2`. Returns `False` if either station does not exist or if a connection already exists, `True` otherwise. - `disconnect_stations(station1, station2)` returning `boolean`: Removes the bi-directional connection between `station1` and `station2`. Returns `False` if either station does not exist or if no connection exists, `True` otherwise. - `has_connection(station1, station2)` returning `boolean`: Returns `True` if there is a direct connection between `station1` and `station2`, `False` otherwise. - `find_route(start_station, end_station)` returning `list of strings`: Returns a list of station names representing a path from `start_station` to `end_station`. If no such path exists, return an empty list. # Example ```python network = RailwayNetwork() print(network.add_station(\\"A\\")) # True print(network.add_station(\\"B\\")) # True print(network.add_station(\\"A\\")) # False (Station A already exists) print(network.connect_stations(\\"A\\", \\"B\\")) # True print(network.has_connection(\\"A\\", \\"B\\")) # True print(network.connect_stations(\\"A\\", \\"C\\")) # False (Station C does not exist) print(network.add_station(\\"C\\")) # True print(network.connect_stations(\\"A\\", \\"C\\")) # True print(network.find_route(\\"A\\", \\"C\\")) # [\\"A\\", \\"C\\"] print(network.find_route(\\"A\\", \\"B\\")) # [\\"A\\", \\"B\\"] print(network.find_route(\\"B\\", \\"C\\")) # [\\"B\\", \\"A\\", \\"C\\"] print(network.disconnect_stations(\\"A\\", \\"B\\")) # True print(network.has_connection(\\"A\\", \\"B\\")) # False print(network.find_route(\\"A\\", \\"B\\")) # [] print(network.remove_station(\\"B\\")) # True print(network.find_route(\\"A\\", \\"B\\")) # [] ```","solution":"class RailwayNetwork: def __init__(self): self.stations = {} def add_station(self, name): if name in self.stations: return False self.stations[name] = set() return True def remove_station(self, name): if name not in self.stations: return False for station in self.stations: self.stations[station].discard(name) del self.stations[name] return True def connect_stations(self, station1, station2): if station1 not in self.stations or station2 not in self.stations: return False if station2 in self.stations[station1] or station1 in self.stations[station2]: return False self.stations[station1].add(station2) self.stations[station2].add(station1) return True def disconnect_stations(self, station1, station2): if station1 not in self.stations or station2 not in self.stations: return False if station2 not in self.stations[station1] or station1 not in self.stations[station2]: return False self.stations[station1].remove(station2) self.stations[station2].remove(station1) return True def has_connection(self, station1, station2): if station1 not in self.stations or station2 not in self.stations: return False return station2 in self.stations[station1] def find_route(self, start_station, end_station): if start_station not in self.stations or end_station not in self.stations: return [] visited = set() queue = [(start_station, [start_station])] while queue: current, path = queue.pop(0) if current == end_station: return path visited.add(current) for neighbor in self.stations[current]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return []"},{"question":"Create a program that finds the largest rectangular sub-matrix within a given matrix of 0\'s and 1\'s, where all the elements in the sub-matrix are 1\'s. The program should output the area of this largest rectangle for each provided dataset. The matrix is provided as multiple datasets. The end of the input is indicated by a line containing two zeros. Each dataset first gives the dimensions of the matrix followed by the matrix itself. # Input The first line of each dataset contains two integers, N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns in the matrix, respectively. The following N lines each contain M integers (either 0 or 1) separated by spaces, representing the rows of the matrix. The end of the input is indicated by a line containing two zeros. # Output For each dataset, output the area of the largest rectangular sub-matrix consisting only of 1\'s. # Example: Input: ``` 4 4 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 3 3 1 0 0 1 1 0 0 1 1 0 0 ``` Output: ``` 6 2 ``` # Explanation: For the first matrix: ``` 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 ``` The largest rectangular sub-matrix consisting of only 1\'s has an area of 6 (formed by rows 1-2 and columns 2-4). For the second matrix: ``` 1 0 0 1 1 0 0 1 1 ``` The largest rectangular sub-matrix consisting of only 1\'s has an area of 2 (formed by rows 1-2 and columns 1-2).","solution":"def maximal_rectangle(matrix): if not matrix: return 0 def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top = stack.pop() area = (histogram[top] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top = stack.pop() area = (histogram[top] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_rectangle = 0 dp = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): dp[i] = dp[i] + 1 if row[i] == \'1\' else 0 max_rectangle = max(max_rectangle, max_histogram_area(dp)) return max_rectangle def find_largest_rectangles(inputs): results = [] idx = 0 while idx < len(inputs): n, m = map(int, inputs[idx].split()) if n == 0 and m == 0: break matrix = [inputs[idx + i + 1].split() for i in range(n)] results.append(maximal_rectangle(matrix)) idx += n + 1 return results"},{"question":"You are given an initially empty tank, and you need to fill it such that it contains a specific ratio of two different liquids, A and B. The required ratio can be represented as a:b, where `a` and `b` are integers. In each step, you can pour either one unit of liquid A or one unit of liquid B into the tank. What is the minimum number of steps required to achieve the desired ratio of A to B in the tank? The total amount of liquid in the tank should be the smallest possible that maintains the ratio a:b. For example, if the ratio is 1:2 (a = 1, b = 2), the tank should have 1 unit of liquid A and 2 units of liquid B. ----Input---- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains two integers a and b (1 leq a, b leq 100) — the desired ratio of liquid A to liquid B in the tank. ----Output---- For each test case, print the minimum number of steps required to fill the tank with the desired ratio a:b. ----Examples---- Input 4 1 2 3 5 2 2 7 10 Output 3 8 2 17 ----Note---- In the first test case, you should pour 1 unit of liquid A and 2 units of liquid B into the tank to get the desired ratio of 1:2. In the second test case, you should pour 3 units of liquid A and 5 units of liquid B into the tank to get the desired ratio of 3:5. In the third test case, you should pour 2 units of liquid A and 2 units of liquid B (which simplifies to 1:1) into the tank to get the desired ratio of 2:2. In the fourth test case, you should pour 7 units of liquid A and 10 units of liquid B into the tank to get the desired ratio of 7:10.","solution":"def min_steps_to_achieve_ratio(a, b): Given two integers a and b representing the ratio of two liquids A and B respectively, returns the minimum number of steps required to fill the tank with the desired ratio of a:b. gcd_ab = gcd(a, b) return (a // gcd_ab) + (b // gcd_ab) def gcd(x, y): Helper function to compute the Greatest Common Divisor (GCD) of two numbers x and y. while y: x, y = y, x % y return x def min_steps_test_cases(t, cases): results = [] for case in cases: a, b = case results.append(min_steps_to_achieve_ratio(a, b)) return results"},{"question":"You are given a matrix consisting of \'0\'s and \'1\'s. Your task is to find the size of the largest square that contains only \'1\'s and return the area of that square. If no such square exists, return 0. Example 1: Input: matrix = [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"] ] Output: 4 Explanation: The largest square has a side length of 2, so the area is 2*2 = 4. Example 2: Input: matrix = [ [\\"0\\",\\"1\\"], [\\"1\\",\\"0\\"] ] Output: 1 Explanation: The largest square has a side length of 1, so the area is 1*1 = 1. Your Task: Complete the function maximalSquare() which takes a matrix and returns an integer representing the area of the largest square that contains only \'1\'s. The printing is done by the driver code. Constraints: - The matrix dimensions are m x n. - 1 ≤ m, n ≤ 300 - matrix[i][j] is \'0\' or \'1\'. Expected Time Complexity: O(m*n) Expected Auxiliary Space: O(m*n)","solution":"def maximalSquare(matrix): if not matrix: return 0 rows = len(matrix) cols = len(matrix[0]) dp = [[0] * (cols + 1) for _ in range(rows + 1)] max_side = 0 for i in range(1, rows + 1): for j in range(1, cols + 1): if matrix[i - 1][j - 1] == \'1\': dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 max_side = max(max_side, dp[i][j]) # The area of the largest square is side_length * side_length. return max_side * max_side"},{"question":"Find common elements in two arrays. Write a function that takes two lists of integers and returns a list of their common elements, sorted in ascending order. The output list should not contain any duplicates. The function should handle edge cases where one or both of the lists are empty. In such cases, the function should return an empty list, as there are no common elements. Example input ============= ``` list1 = [1, 2, 2, 3, 4] list2 = [3, 4, 4, 5, 6] ``` Example output ============== ``` [3, 4] ``` Example input ============= ``` list1 = [1, 1, 1] list2 = [2, 2, 2] ``` Example output ============== ``` [] ```","solution":"def find_common_elements(list1, list2): Returns a list of common elements in two lists, sorted and without duplicates. # Convert lists to sets to find the intersection set1 = set(list1) set2 = set(list2) # Find common elements common_elements = set1.intersection(set2) # Return sorted list of common elements return sorted(common_elements)"},{"question":"Alice is working on a project where she needs to find out if a given year is a leap year or not. A leap year is exactly divisible by 4 except for century years (years ending in 00). The century year is a leap year only if it is evenly divisible by 400. Write a function to determine if the given year is a leap year. ```if:shell In bash the script is ran with the following argument: `year` ```","solution":"def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: return True return False"},{"question":"You are given two strings, s and t, consisting of lowercase English letters. Your task is to determine if t is a rotation of s. A string t is a rotation of s if you can obtain t by rotating s some number of times (possibly zero times). Formally, t is a rotation of s if there exists an integer k (0 ≤ k < |s|) such that the substring s[k:] followed by the substring s[:k] is equal to t, where |s| is the length of string s. For example, if s = \\"abcde\\" and t = \\"cdeab\\", then t is a rotation of s because rotating s two times to the right (\\"eabcd\\", then again \\"deabc\\") results in t. Write a function `is_rotation(s, t)` that returns `True` if t is a rotation of s, and `False` otherwise. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. - Each of the next 2*T lines contains: - A string s (1 ≤ |s| ≤ 10^5) - A string t (1 ≤ |t| ≤ 10^5) ------ Output Format ------ For each test case, print `True` if t is a rotation of s, and `False` otherwise. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |s|, |t| ≤ 10^5 ------ Sample Input 1 ------ 3 abcde cdeab abcde abdec aa aa ------ Sample Output 1 ------ True False True ------ Explanation ------ In the first test case, t = \\"cdeab\\" is a rotation of s = \\"abcde\\". In the second test case, t = \\"abdec\\" cannot be obtained by rotating s = \\"abcde\\". In the third test case, t = \\"aa\\" is a rotation of s = \\"aa\\".","solution":"def is_rotation(s, t): if len(s) != len(t): return False return t in (s + s)"},{"question":"Liam and Owen are playing a game involving n rounds of coin flips. Each round consists of a coin flip that can result in either \'H\' (heads) or \'T\' (tails). The goal is to determine if the number of heads is more than the number of tails, or if the number of tails is more than the number of heads, or if they are equal. Help Liam and Owen determine the outcome of their game by analyzing the results of the coin flips. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of rounds in the game. The second line contains a string s, consisting of n uppercase English letters \'H\' and \'T\' — the result of each coin flip. The i-th character of the string is equal to \'H\' if the coin flip resulted in heads and \'T\' if the coin flip resulted in tails. -----Output----- If the number of heads is more than the number of tails, print \\"Heads\\" (without quotes) in the only line of the output. If the number of tails is more than the number of heads, print \\"Tails\\" (without quotes) in the only line of the output. If the number of heads and tails are equal, print \\"Tie\\" (without quotes). -----Examples----- Input 5 HTHTH Output Heads Input 4 TTHT Output Tails Input 6 HTTTHH Output Tie -----Note----- In the first sample, there are 3 heads and 2 tails, so the answer is \\"Heads\\". In the second sample, there are 3 tails and 1 head, so the answer is \\"Tails\\". In the third sample, there are 3 heads and 3 tails, so the answer is \\"Tie\\".","solution":"def coin_flip_outcome(n, s): Determines the outcome of the game based on the number of heads and tails. Parameters: - n (int): Number of rounds. - s (str): String containing \'H\' and \'T\' representing the results of the coin flips. Returns: - str: \\"Heads\\" if the number of heads is more than tails. \\"Tails\\" if the number of tails is more than heads. \\"Tie\\" if the number of heads and tails are equal. heads_count = s.count(\'H\') tails_count = s.count(\'T\') if heads_count > tails_count: return \\"Heads\\" elif tails_count > heads_count: return \\"Tails\\" else: return \\"Tie\\""},{"question":"There\'s a linear park with n fountains numbered from 1 to n. Each fountain is designed to spray water in a circular region centered at its position. The i-th fountain sprays water in a circle with radius ri. Your task is to help the park administration find whether it\'s possible to position a water-resistant bench such that it is not wet by exactly k fountains. We\'ll say that a point is wet by a fountain if the point lies inside or on the boundary of the fountain\'s circular spray region. Input The first line contains two space-separated integers n and k (1 ≤ n, k ≤ 50). The second line contains n space-separated integers r1, r2, ..., rn (1 ≤ ri ≤ 109). It is guaranteed that all fountains have distinct radii. Output If there exists a point in the park that is not wet by exactly k fountains, print its coordinates x and y (0 ≤ x, y ≤ 109). If there are multiple valid points, you may print any of them. If there is no such point, print \\"-1\\" (without quotes). Examples Input 4 2 5 1 3 6 Output 6 0 Input 3 3 2 4 1 Output -1 Input 5 1 7 3 2 5 9 Output 3 6","solution":"def find_bench_position(n, k, radii): Finds a point in the park that is not wet by exactly k fountains. Input: - n: number of fountains - k: number of fountains that should not wet the point - radii: list of integers representing the radii of the fountains Output: - tuple (x, y) representing the coordinates of the point, or -1 if no such point exists radii_sorted = sorted(radii) critical_radius = radii_sorted[n - k] if k < n else radii_sorted[-1] + 1 # such a point exists at the distance of the critical radius from the origin return (critical_radius, 0) if k != n else -1"},{"question":"Given a list of words, determine if there is a way to rearrange the letters of one word to become another word (anagram) within the list. If so, return the pairs of words as a list of tuples. If no such pairs exist, return an empty list. Example: ```python find_anagrams([\'listen\', \'silent\', \'enlist\', \'hello\', \'world\']) # [(\'listen\', \'silent\'), (\'listen\', \'enlist\'), (\'silent\', \'enlist\')] find_anagrams([\'abc\', \'def\', \'ghi\']) # [] ``` Note: - Words in the pairs should be in the same order as they appear in the input list. - Each pair should appear only once in the resulting list.","solution":"from collections import defaultdict def find_anagrams(word_list): Given a list of words, returns a list of tuples indicating pairs of anagrams found in the list. If no such pairs exist, returns an empty list. # This dictionary will map sorted word to list of original words anagram_dict = defaultdict(list) # Populate the dictionary with sorted versions of the words for word in word_list: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) # Now collect pairs of anagrams anagram_pairs = [] for words in anagram_dict.values(): if len(words) > 1: # Create pairwise combinations of the words for i in range(len(words)): for j in range(i + 1, len(words)): anagram_pairs.append((words[i], words[j])) return anagram_pairs"},{"question":"Imagine you are working with nested lists and you need to flatten them into a single list. However, you want to maintain a specific order of elements as they appear from left to right, traversing each sublist. A nested list could comprise other lists or single elements. Your task is to write a function that takes in such a complex structure and returns a flattened list preserving the order of appearance. Input A nested list that can contain integers or other lists. The depth of nesting can go up to 100. Output A single list with all the elements from the nested structure in their original order, without any nesting. Examples Input [[1, 2, [3, 4]], 5, [6, [7, 8]], 9] Output [1, 2, 3, 4, 5, 6, 7, 8, 9] Input [1, [2, [3, [4, [5]]]], 6] Output [1, 2, 3, 4, 5, 6] Note - You need to recursively check the elements of the nested list. - Preserve the order of elements as you flatten the list.","solution":"def flatten(nested_list): Flattens a nested list into a single list preserving the order of appearance. Args: nested_list (list): A list that can contain integers or other lists. Returns: list: A single list with all the elements from the nested structure in their original order. flat_list = [] for element in nested_list: if isinstance(element, list): flat_list.extend(flatten(element)) else: flat_list.append(element) return flat_list"},{"question":"Given an array of integers, find a contiguous subarray having the largest sum. Return the sum and the indices of the starting and ending elements of the subarray. If there are multiple subarrays with the same largest sum, return the one with the smallest starting index. If there is still a tie, return the one with the smallest ending index. For example: ``` Input: [-2,1,-3,4,-1,2,1,-5,4] Output: (6, 3, 6) Explanation: The subarray [4,-1,2,1] has the largest sum 6, starting at index 3 and ending at index 6. ``` Another example: ``` Input: [1,2,3,-2,5] Output: (9, 0, 4) Explanation: The subarray [1, 2, 3, -2, 5] has the largest sum 9, starting at index 0 and ending at index 4. ```","solution":"def max_subarray_sum(arr): Returns the sum of the subarray with the largest sum, along with the starting and ending indices of the subarray. If there are multiple subarrays with the same largest sum, the one with the smallest starting index is returned. If there is still a tie, the one with the smallest ending index is returned. max_sum = float(\'-inf\') current_sum = 0 start_index = 0 end_index = 0 temp_start = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start end_index = i elif current_sum == max_sum: if (i - temp_start) < (end_index - start_index): start_index = temp_start end_index = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return (max_sum, start_index, end_index)"},{"question":"You are working on a project involving a robotic painting arm that is tasked with painting several walls. Each wall can have different heights, and the painting arm can paint up to a certain height in one go. You need to determine the minimum number of operations needed to paint all the walls completely. In each operation, the arm can paint all walls up to a height `H`, such that `H` is equal to or less than the height of the tallest unpainted part of the wall. In each operation, the height `H` must be such that the arm paints a segment of the walls with equal length. For example, if the heights of the walls are initially `[4, 3, 5]`, then some valid values for `H` in the first operation are `3` and `4` — the arm paints an upper segment of two walls with lengths `[1, 1]` and `[2, 2]` respectively. H = 2 is not a valid choice because it would paint segments with lengths `[2, 1, 3]`, which are not all equal. Your task is to implement a function to find the minimum number of operations needed to paint all the walls fully. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains a single integer `N`. The second line contains `N` space-separated integers `H1, H2, ..., HN` representing the heights of the walls. ------ Output ------ For each test case, print a single line containing one integer — the minimum number of operations needed to paint all the walls. ------ Constraints ------ - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 10^5 - 0 ≤ Hi ≤ 10^9 for each valid `i` ------ Sample Input ------ 1 3 4 3 5 ------ Sample Output ------ 3 ------ Explanation ------ Example case 1: The robot can perform the following three operations: - Paint up to height `3`. The heights of the walls after this operation are `[4, 3, 3]`. - Paint up to height `2`. The heights of the walls after this operation are `[2, 2, 2]`. - Paint up to height `0`. The heights of the walls after this operation are `[0, 0, 0]`, with all walls completely painted.","solution":"def min_operations_heights(heights): Calculate the minimum number of operations needed to paint all walls. Parameters: - heights (List[int]): A list of wall heights. Returns: - int: Minimum number of operations needed to paint the walls completely. return len(set(heights)) def min_operations_for_test_cases(test_cases): Calculate the minimum number of operations for a series of test cases. Parameters: - test_cases (List[List[int]]): A list containing multiple lists of wall heights. Returns: - List[int]: A list of results for each test case. results = [] for heights in test_cases: results.append(min_operations_heights(heights)) return results # Main function to handle multiple test cases def process_input(input_data): Processes the input data and executes the algorithm. Parameters: - input_data (List[str]): A list of strings as input data. Returns: - List[int]: Calculated results for each test case. data_iter = iter(input_data) T = int(next(data_iter)) test_cases = [] for _ in range(T): N = int(next(data_iter)) heights = list(map(int, next(data_iter).split())) test_cases.append(heights) return min_operations_for_test_cases(test_cases)"},{"question":"Given two strings S and T, your task is to determine the minimum number of operations required to transform string S into string T. You are allowed to perform the following operations: 1. Insert a character into S. 2. Delete a character from S. 3. Replace a character in S with another character. Input: The first line contains an integer Q, the number of test cases. Each of the next Q lines contains two strings S and T. Output: For each test case, print the minimum number of operations required to transform string S into string T. Constraints: 1 ≤ Q ≤ 100 1 ≤ |S|, |T| ≤ 1000 Both S and T will consist of lowercase English letters. Example Input: 3 kitten sitting flaw lawn intention execution Example Output: 3 2 5","solution":"def levenshtein_distance(S, T): Returns the minimum number of operations required to transform string S into string T. Operations allowed: insert a character, delete a character, replace a character. m, n = len(S), len(T) # Create a (m+1)x(n+1) matrix to store distances dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the matrix for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute distances for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # delete dp[i][j - 1] + 1, # insert dp[i - 1][j - 1] + 1) # replace return dp[m][n] def minimum_operations(Q, test_cases): results = [] for S, T in test_cases: results.append(levenshtein_distance(S, T)) return results"},{"question":"Problem Given a sequence A consisting of N integers, you are required to perform Q operations, where each operation can be one of the following: 1. **Update (i, x) :** Replace the i th element of the sequence with x . 2. **Query (l, r) :** Retrieve the sum of elements in the subarray starting from the l th element to the r th element (both inclusive). You need to output the result of each query operation. Input The input is given in the following format. N Q A_1 A_2 ... A_N op_1 op_2 ... op_Q The first line contains two integers N and Q , the number of elements in the sequence and the number of operations. The second line contains N integers A_1, A_2, ldots, A_N , the elements of the sequence. Each of the next Q lines contains an operation represented by either: - **1 i x**: Update the i th element to x . - **2 l r**: Query the sum of the subarray from l to r . Output For each query operation, output the sum of the specified subarray in one line. Constraints The input satisfies the following conditions. - 1 le N le 10^5 - 1 le Q le 10^5 - 1 le A_i le 10^9 for all 1 le i le N - 1 le i le N - 1 le l, r le N - l le r Examples Input 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 Output 6 14 Input 6 4 5 2 7 1 3 9 2 2 5 1 4 6 2 3 6 1 5 8 Output 13 31","solution":"class Sequence: def __init__(self, n, arr): Initialize the sequence with n elements. self.n = n self.arr = arr def update(self, i, x): Update the ith element to x. self.arr[i-1] = x def query(self, l, r): Retrieve sum of the subarray from l to r. return sum(self.arr[l-1:r])"},{"question":"Given a 2D matrix of size NxM where each cell contains a non-negative integer, you need to find the maximum sum of a sub-grid of size KxK within the matrix. A sub-grid is any block of cells chosen from the given grid, and cells in the sub-grid must be contiguous and form a KxK square. Example 1: Input: N = 4, M = 5, K = 3 matrix = [ [1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20] ] Output: 126 Explanation: The sub-grid with size 3x3 yielding the maximum sum is: 7 8 9 12 13 14 17 18 19 Its sum is 126. Example 2: Input: N = 3, M = 3, K = 2 matrix = [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] Output: 4 Explanation: Any of the 2x2 sub-grids will have the maximum sum of 4 as all elements are 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxSumSubGrid()` which takes the 2D matrix, and integers N, M, and K as input parameters, and returns the maximum sum of any KxK sub-grid. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 500 1 ≤ K ≤ min(N, M) 0 ≤ matrix[i][j] ≤ 1000","solution":"def maxSumSubGrid(matrix, N, M, K): Returns the maximum sum of any KxK sub-grid in the given matrix. # Generate a prefix sum matrix prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) max_sum = float(\'-inf\') # Iterate over all possible KxK subgrids for i in range(K, N + 1): for j in range(K, M + 1): current_sum = (prefix_sum[i][j] - prefix_sum[i-K][j] - prefix_sum[i][j-K] + prefix_sum[i-K][j-K]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a string, return the longest substring that contains at most two distinct characters. If there are multiple substrings with the same length, return the one which appears first. ``` longestTwoDistinctSubstring(inputString) longestTwoDistinctSubstring(\\"eceba\\") Returning substring \\"ece\\" has length 3 longestTwoDistinctSubstring(\\"ccaabbb\\") Returning substring \\"aabbb\\" has length 5 ``` Input is a string of length [1, 10^5] containing only lowercase English letters.","solution":"def longestTwoDistinctSubstring(s): Given a string s, return the longest substring that contains at most two distinct characters. If there are multiple substrings with the same length, return the one which appears first. from collections import defaultdict start = 0 max_len = 0 max_substr = \'\' char_map = defaultdict(int) for end in range(len(s)): char_map[s[end]] += 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end+1] return max_substr"},{"question":"Given a binary tree consisting of N vertices. Each vertex of the binary tree is numbered from 1 to N, and each edge has a weight associated with it. Your task is to find the length of the longest path of the tree that is characterized by consecutive primes, in other words, a path where every consecutive edge weight is a prime number. For simplicity, you may assume you have a function `is_prime(x)` available to you which returns `True` if `x` is a prime number, and `False` otherwise. # Input Format The input consists of multiple lines: - The first line contains the integer N, the number of vertices in the tree. - The following N-1 lines each contain three integers u, v, and w, indicating there is an edge between vertices u and v with weight w. # Output Format Output a single integer representing the length of the longest path consisting of consecutive prime weights. # Constraints - 2 ≤ N ≤ 100,000 - 1 ≤ u, v ≤ N - 1 ≤ w ≤ 10^9 # Example Input ``` 5 1 2 3 2 3 5 3 4 7 4 5 4 ``` # Example Output ``` 3 ``` # Explanation In the given example, the longest path with consecutive prime weights is: 3 (1->2), 5 (2->3), and 7 (3->4), yielding a length of 3.","solution":"def is_prime(x): if x < 2: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True from collections import defaultdict, deque def longest_prime_path(N, edges): # Create adjacency list adj = defaultdict(list) for (u, v, w) in edges: adj[u].append((v, w)) adj[v].append((u, w)) def bfs(start): # BFS to find the farthest node from the start queue = deque([(start, 0)]) visited = set() max_len = 0 farthest_node = start while queue: node, length = queue.popleft() if node in visited: continue visited.add(node) if length > max_len: max_len = length farthest_node = node for neighbor, weight in adj[node]: if weight in primes and neighbor not in visited: queue.append((neighbor, length + 1)) return farthest_node, max_len primes = set() for u, v, w in edges: if is_prime(w): primes.add(w) # Start BFS from any node, say node 1, to find a node at the end of some longest path farthest_node, _ = bfs(1) # Start BFS from the farthest node found in previous step to find the actual longest path _, longest_path_length = bfs(farthest_node) return longest_path_length"},{"question":"matrix_product The matrix product of two arrays depends on the dimensions of the arrays. If the arrays are two-dimensional, the matrix product is equivalent to the dot product of the two matrices. If the arrays have a different number of dimensions, then it creates the array product according to the rules of NumPy\'s broadcasting. Example: import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[2, 0], [1, 3]]) print(np.matmul(A, B)) # Output : [[ 4 6] # [10 12]] transpose The transpose of an array \\"swaps\\" the dimensions of the array, turning rows into columns and vice versa. Example: import numpy as np A = np.array([[1, 2], [3, 4]]) print(np.transpose(A)) # Output : [[1 3] # [2 4]] inv The inv tool computes the (multiplicative) inverse of a matrix. Example: import numpy as np A = np.array([[1, 2], [3, 4]]) print(np.linalg.inv(A)) # Output : [[-2. 1. ] # [ 1.5 -0.5]] det The det tool computes the determinant of a matrix. Example: import numpy as np A = np.array([[1, 2], [3, 4]]) print(np.linalg.det(A)) # Output: -2.0000000000000004 Task You are given a 2x2 square matrix boldsymbol{A}. Your task is to compute the dot product of the matrix A and its inverse. Input Format The input consists of a single line containing four space-separated values, representing the elements of matrix boldsymbol{A} in row-major order. Output Format Print the resulting 2x2 matrix after computing the dot product of boldsymbol{A} with its inverse. Sample Input 1 2 3 4 Sample Output [[ 1.00000000e+00 0.00000000e+00] [ 0.00000000e+00 1.00000000e+00]]","solution":"import numpy as np def matrix_product_inverse(input_list): Computes the dot product of the given 2x2 matrix and its inverse. :param input_list: List of four space-separated values representing a 2x2 matrix in row-major order :return: Resulting 2x2 matrix after computing the dot product of the matrix with its inverse A = np.array(input_list).reshape(2, 2) A_inv = np.linalg.inv(A) product = np.dot(A, A_inv) return product"},{"question":"You are given a sequence of n integers and two types of queries. You need to process q queries of the following types: 1 x v : Change the value of the element at position x to v. 2 x y : Calculate and print the sum of the elements in the subarray from position x to position y inclusive. All array indices are 1-based, meaning the first element of the array is at position 1. -----Input----- The first line contains two integers n and q (1 le n, q le 100,000) — the length of the sequence and the number of queries. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^9) — the elements of the initial sequence. Each of the following q lines contains three integers. The first integer is t (1 le t le 2) — the type of query. If t = 1, the second integer is x (1 le x le n) and the third integer is v (0 le v le 10^9) — change the value of the element at position x to v. If t = 2, the second integer is x (1 le x le n) and the third integer is y (x le y le n) — calculate the sum of the elements from position x to position y inclusive. -----Output----- For each query of the second type, print a single integer — the answer to the query. -----Examples----- Input 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 Output 6 14 -----Explanation----- Initially, the array is [1, 2, 3, 4, 5]. The first operation is to calculate and print the sum of elements from positions 1 to 3, which is 1 + 2 + 3 = 6. The second operation changes the value at position 2 to 10, updating the array to [1, 10, 3, 4, 5]. The third operation calculates and prints the sum of elements from positions 1 to 3, which is 1 + 10 + 3 = 14.","solution":"def process_queries(n, q, arr, queries): # Process the queries results = [] for query in queries: if query[0] == 1: # Update the value at position x to v x, v = query[1], query[2] arr[x - 1] = v elif query[0] == 2: # Sum the elements from position x to y x, y = query[1], query[2] results.append(sum(arr[x - 1:y])) return results"},{"question":"You are given a sequence of brackets consisting only of characters \'(\' and \')\'. A balanced bracket sequence is defined as follows: - An empty sequence is a balanced bracket sequence. - If \\"S\\" is a balanced bracket sequence, then the sequence \\"(\\" + S + \\")\\" is also a balanced bracket sequence. - If \\"S\\" and \\"T\\" are balanced bracket sequences, then the concatenation of \\"S\\" and \\"T\\" is also a balanced bracket sequence. Your task is to check whether the given sequence of brackets is balanced or not. -----Constraints----- - The length of the sequence will be in the range [1, 100]. -----Input----- Input is given as a single string S consisting of only \'(\' and \')\'. -----Output----- Print \\"Yes\\" if the string is a balanced bracket sequence, otherwise print \\"No\\". -----Sample Input 1----- ()() -----Sample Output 1----- Yes -----Sample Input 2----- (()() -----Sample Output 2----- No","solution":"def is_balanced_bracket_sequence(S): Returns \'Yes\' if the given string S is a balanced bracket sequence, otherwise \'No\'. stack = [] for char in S: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"No\\" stack.pop() return \\"Yes\\" if not stack else \\"No\\""},{"question":"A factory has an assembly line consisting of ( N ) stations arranged in a row, where each station produces a certain number of units per hour. Due to a technical issue, some stations may become inactive at times, denoted by a production rate of 0 units per hour. Your task is to determine the maximum number of units that can be produced in any contiguous subarray of the assembly line stations. ------ Input ------ The first line of input contains a single integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. The first line of each test case contains a single integer ( N ) denoting the number of stations in the assembly line. The second line contains ( N ) space-separated integers ( P_{1}, P_{2}, ..., P_{N} ) where ( P_{i} ) is the production rate of the ( i )-th station. ------ Output ------ For each test case, output a single line containing one integer - the maximum number of units that can be produced in any contiguous subarray of stations. ------ Constraints ------ Subtask 1 (30 points): ( 1 leq N leq 100 ) Subtask 2 (70 points): ( 1 leq N leq 100000 ) Subtask 3 (100 points): ( 1 leq P_{i} leq 1000 ) for all test cases ------ Sample Input 1 ------ 2 5 1 2 0 3 4 4 -1 -2 -3 -4 ------ Sample Output 1 ------ 7 -1 To solve this, consider using an efficient algorithm to handle large inputs, such as Kadane’s algorithm for the maximum subarray problem.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray using Kadane\'s algorithm. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_units_produced(test_cases): Processes multiple test cases to find the maximum sum for each case. results = [] for case in test_cases: N, production_rates = case results.append(max_subarray_sum(production_rates)) return results"},{"question":"Write a function named `rotate_matrix` that takes a 2D list (a square matrix) as input and returns the matrix rotated 90 degrees clockwise. If the input matrix is `n x n`, you should not use any additional matrices and the rotation should be performed in-place. The function should return the modified input matrix. If the input matrix is empty or not a square matrix, the function should return `None`. For example, given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output matrix should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotate_matrix(matrix): Rotate the matrix 90 degrees clockwise in-place. If the matrix is not square or is empty, return None. if not matrix or any(len(row) != len(matrix) for row in matrix): return None n = len(matrix) for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): offset = i - first # save top element top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top return matrix"},{"question":"You are given an integer array a consisting of n elements, initially all zeros. You can perform the following operation any number of times: choose an index i (1 leq i leq n) and set a_i = leftlfloor frac{a_{text{prev}} + a_{text{next}}}{2} rightrfloor where text{prev} and text{next} are the indices immediately before and after i respectively (taking array indices in a circular manner, i.e., if i = 1, then text{prev} = n and if i = n, then text{next} = 1). Your goal is to make all elements of the array equal to a given integer k in no more than 2n steps. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains two integers n and k (2 leq n leq 2 cdot 10^5, 0 leq k leq 10^6) — the length of array a and the desired integer value. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print one integer m (m leq 2n) — the number of operations required to make all elements of the array equal to k. Then, print m pairs of integers i and j (1 leq i, j leq n) — the indices i on which the operation is performed and the helper index j indicating the element used in the operation (either prev or next). It can be proved that for the given constraints it\'s always possible to find a valid sequence of operations. -----Examples----- Input 2 3 4 4 2 Output 2 1 prev 3 next 3 1 next 2 prev 4 prev -----Note----- In the first test case, starting with array a = [0, 0, 0], to reach all elements equal to 4: choose 1, prev: a_1 = leftlfloor frac{a_3 + a_2}{2} rightrfloor. Assume some updates occur to eventually reach the goal. choose 3, next: a_3 = 4 and array becomes [0, 0, 4], continuing appropriately until all elements are 4. In the second test case, with array a = [0, 0, 0, 0], to make all elements equal to 2: choose 1, next: a_1 = 0 + updates. choose 2, prev: a_2 = 0 + updates leading to needed values through steps. The specific sequence will depend on intermediate state changes towards the goal of k.","solution":"def make_all_elements_equal(t, test_cases): results = [] for n, k in test_cases: operations = [] m = 2 * n # maximum number of operations for i in range(1, n+1): operations.append((i, \'next\')) operations.append((i, \'prev\')) if len(operations) >= 2*n: break results.append((m, operations[:2*n])) return results # helper function to format the output def format_output(results): output = [] for m, operations in results: output.append(f\\"{m}\\") for op in operations: output.append(f\\"{op[0]} {op[1]}\\") return \\"n\\".join(output) # example usage t = 2 test_cases = [(3, 4), (4, 2)] results = make_all_elements_equal(t, test_cases) print(format_output(results))"},{"question":"# Task: Implement a function that receives a list of sentences and returns the longest common prefix of those sentences. The longest common prefix is the longest string that is a prefix (i.e. at the start) of all sentences in the list. - parameters: `sentences` a list of strings. - return: a string representing the longest common prefix. # Example: Input: ``` sentences: [\\"the quick brown fox\\", \\"the quick brown dog\\", \\"the quick\\"] ``` Output: ``` \\"The quick\\" ``` # Additional Info: - The input list `sentences` will contain at least one sentence. - All sentences will consist of lowercase English letters and spaces only. - If there is no common prefix, the function should return an empty string. # Explanation: In the provided example: - The common prefix for \\"the quick brown fox\\", \\"the quick brown dog\\", and \\"the quick\\" is \\"the quick\\". - So the function should return \\"The quick\\".","solution":"def longest_common_prefix(sentences): Returns the longest common prefix from a list of sentences. :param sentences: List of strings :return: Longest common prefix string if not sentences: return \\"\\" # Start with the entire first sentence as a prefix prefix = sentences[0] # Compare prefix with each sentence for sentence in sentences[1:]: # Reduce the prefix length until it matches the start of the current sentence while not sentence.startswith(prefix): prefix = prefix[:-1] if prefix == \\"\\": return \\"\\" return prefix"},{"question":"Write a program to determine if a given string is a valid palindrome. A string is a valid palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Input The input file consists of several lines. Each line contains a single string. The strings exclusively consist of printable ASCII characters. Output Your program should print \\"True\\" if the string is a valid palindrome and \\"False\\" otherwise. Print each result on a new line. Example Input A man, a plan, a canal: Panama race a car Output True False","solution":"def is_valid_palindrome(s): Determines if a given string is a valid palindrome. A string is considered valid palindrome if, after converting all uppercase letters to lowercase and removing all non-alphanumeric characters, it reads the same forward and backward. Args: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Normalize the string: convert to lowercase and remove non-alphanumeric characters. normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forward and backward. return normalized_str == normalized_str[::-1]"},{"question":"Luffy and Zoro are sailing with the crew and they are hungry. They have a supply of fruits represented by a string `F`. They know that both of them love mangoes. They will only eat if the string `F` contains the substring `MAN`. If it does not contain `MAN`, they will remain hungry. Determine whether the string `F` contains the substring `MAN`. Constraints * 1 ≤ |F| ≤ 20 * F consists of uppercase English letters. Input Input is given from Standard Input in the following format: F Output If `F` contains `MAN`, print `Yes`; otherwise, print `No`. Examples Input MANGO Output Yes Input APPLE Output No Input PINEAPPLE Output No","solution":"def check_mango(F): Returns \'Yes\' if the string F contains the substring \'MAN\', otherwise \'No\'. if \'MAN\' in F: return \'Yes\' else: return \'No\'"},{"question":"Aunt Matilda has a beautiful garden filled with numerous types of flowers. Recently, she decided to categorize each of her flowers into groups based on their color. Each type of flower can belong to only one color group. However, some flowers have the same color, and Matilda wants to ensure that every flower within a color group has alphabetically sorted names. You are tasked to help Aunt Matilda by writing a program that processes the flower data and outputs the flowers in each color group in alphabetical order. -----Input----- The first line contains single integer n (1 ≤ n ≤ 10^5) — the number of flowers in the garden. The next n lines describe each flower with its name and color. Each line has a form of \\"flower_name color\\", where \\"flower_name\\" is a string of lowercase English letters (of length from 1 to 20) representing the name of the flower, and \\"color\\" is a string of lowercase English letters (of length from 1 to 20) representing the color group of the flower. Both flower names and colors are guaranteed to be distinct within their respective categories. -----Output----- Print the flowers grouped by their color in alphabetical order. For each color group, print the color name first, followed by a list of flower names in that color group, all in separate lines. -----Example----- Input 7 rose red tulip yellow daisy white sunflower yellow lily red orchid white violet blue Output blue violet red lily rose white daisy orchid yellow sunflower tulip","solution":"from collections import defaultdict def categorize_flowers(n, flowers): Categorize flowers by their color in alphabetical order. :param n: int, number of flowers :param flowers: List of tuples, each containing the flower name and its color :return: Dictionary with colors as keys and lists of flower names as values, all sorted alphabetically color_groups = defaultdict(list) # Group flowers by color for flower_name, color in flowers: color_groups[color].append(flower_name) # Sort flower names within each color group for color in color_groups: color_groups[color].sort() # Prepare the result in the required order result = [] for color in sorted(color_groups): result.append(color) result.extend(color_groups[color]) return \\"n\\".join(result) # Example usage: # flowers = [ # (\\"rose\\", \\"red\\"), # (\\"tulip\\", \\"yellow\\"), # (\\"daisy\\", \\"white\\"), # (\\"sunflower\\", \\"yellow\\"), # (\\"lily\\", \\"red\\"), # (\\"orchid\\", \\"white\\"), # (\\"violet\\", \\"blue\\") # ] # print(categorize_flowers(7, flowers))"},{"question":"John loves to collect different kinds of coins. He has recently gone to a coin exhibition and bought some rare coins. Each coin he bought has a unique year inscribed on it. John wants to arrange these coins in such a way that the sequence of the years inscribed on the coins forms a strictly increasing sequence when viewed from left to right. However, he also has some restrictions due to the limited number of slots available in his coin organizer. The task at hand is as follows: You are given a list of years that are inscribed on the coins John bought, and an integer K. Your goal is to find the length of the longest subsequence of these years that is strictly increasing and does not exceed the size limit K. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and K, where N is the number of different years on the coins and K is the maximum number of slots available in the organizer. - The second line contains N space-separated integers denoting the years inscribed on the coins. Output: For each test case, output a single line containing the length of the longest strictly increasing subsequence of years that fits within the K slots of the organizer. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N - All years are between 1 and 2000 (inclusive) SAMPLE INPUT 3 6 4 1970 1980 1990 2000 1940 1950 5 3 1960 1980 1970 1990 1940 4 2 2000 1995 2005 2010 SAMPLE OUTPUT 4 3 2","solution":"def longest_increasing_subsequence_with_limit(years, K): Find the length of the longest strictly increasing subsequence that fits within the K slots. N = len(years) dp = [1] * N for i in range(1, N): for j in range(i): if years[i] > years[j]: dp[i] = max(dp[i], dp[j] + 1) return min(max(dp), K) def process_test_cases(test_cases): results = [] for N, K, years in test_cases: result = longest_increasing_subsequence_with_limit(years, K) results.append(result) return results"},{"question":"Given a string s consisting of lowercase alphabets. You need to find the longest subsequence that can be formed from this string such that each letter in the subsequence appears exactly twice and the first occurrence of any letter appears before the second occurrence. Example 1: Input: s = \\"aabbcc\\" Output: 6 Explanation: The longest subsequence where each character appears exactly twice is \\"aabbcc\\". Example 2: Input: s = \\"xxyyz\\" Output: 4 Explanation: The longest subsequence where each character appears exactly twice is \\"xxyy\\". Your Task: Complete the function findLongestSubsequence() which takes a string s as input and returns the length of the longest subsequence which follows the given condition. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= s.length <= 1000","solution":"def findLongestSubsequence(s): Finds the length of the longest subsequence in which each character appears exactly twice and the first occurrence of any letter appears before the second occurrence in the string. from collections import Counter count = Counter(s) total_length = 0 for char in count: total_length += (count[char] // 2) * 2 return total_length"},{"question":"In a fantasy world, there are n cities connected by bidirectional roads. Each road has a fixed travel cost associated with it. A traveler, starting their journey from city 1, wants to visit every city at least once with the minimum possible cost. Each traveler\'s journey should start from city 1 and should return back to city 1 after visiting all other cities. Your task is to determine the minimum cost for the traveler to accomplish this. -----Input----- The first line contains an integer n (2 le n le 15), representing the number of cities. The next n lines each contain n integers. The j-th integer in the i-th line represents the travel cost between city i and city j (1 le cost_{i,j} le 10^3). It\'s guaranteed that cost_{i,i} = 0 for all i and cost_{i,j} = cost_{j,i} for all pairs i, j. -----Output----- Output a single integer, which is the minimum travel cost required to visit all cities starting and ending at city 1. -----Example----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 -----Note----- In the given example, the optimal path would be: 1 -> 2 -> 4 -> 3 -> 1 with a total cost of 10 + 25 + 30 + 15 = 80.","solution":"def tsp_min_cost(n, cost_matrix): This function solves the Traveling Salesman Problem (TSP) using dynamic programming. Starting from city 1 to visit all cities and return to city 1 with minimal cost. Parameters: n (int): Number of cities cost_matrix (list of list of int): Cost matrix representing cost between each pair of cities Returns: int: Minimum cost to visit all cities starting and ending at city 1 from functools import lru_cache @lru_cache(None) def visit(city, visited): Recursive helper function to visit cities with memoization to store intermediate results. Parameters: city (int): Current city to start the journey from. visited (int): Bitmap of visited cities represented as an integer. Returns: int: Minimum cost to visit the remaining cities and return to the start. if visited == (1 << n) - 1: return cost_matrix[city][0] min_cost = float(\'inf\') for next_city in range(n): if not visited & (1 << next_city): min_cost = min(min_cost, cost_matrix[city][next_city] + visit(next_city, visited | (1 << next_city))) return min_cost # We use 1 as the starting city, which is represented as index 0 return visit(0, 1)"},{"question":"You are given a rectangular grid of size n times m. In each cell of the grid, you can place a square tile of size 1 times 1. You can also place rectangular tiles of size 2 times 1 or 1 times 2. However, you cannot overlap the tiles or place them outside the grid boundaries. Your task is to find out if you can fill the entire grid using these square and rectangular tiles. If possible, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid for the respective test case. -----Output----- For each test case, print \\"YES\\" if it is possible to fill the grid completely using the given tiles, otherwise print \\"NO\\". -----Example----- Input 3 2 2 3 3 4 5 Output YES NO YES -----Note----- In the first test case, you can place four square tiles of size 1 times 1 to fill the grid completely. Thus, the output is \\"YES\\". In the second test case, it is not possible to exactly fill the 3 times 3 grid with the given tiles without overlapping or leaving cells empty. Thus, the output is \\"NO\\". In the third test case, one possible way to fill the grid is to use: - Ten rectangular tiles of 2 times 1 to cover the first four rows completely. Thus, the output is \\"YES\\".","solution":"def can_fill_grid(t, test_cases): results = [] for n, m in test_cases: results.append(\\"YES\\" if (n * m) % 2 == 0 else \\"NO\\") return results # To test our function, we can use the example input given: # Input: # 3 # 2 2 # 3 3 # 4 5 # Expected Output: # YES # NO # YES"},{"question":"You are given a large set of K strings, where the length of each string does not exceed 100 characters. Each character in the string is an uppercase English letter (\'A\'-\'Z\'). You want to determine the minimum possible number of distinct characters that need to be changed in each string to make all the K strings identical. For example, consider the set of strings: \\"SAME\\", \\"SAME\\", \\"SAMP\\". The minimum number of changes required to make all strings identical is 1 (change the last character of the third string from \'P\' to \'E\'). Write a function to determine the minimum number of changes required. ------ Input: ------ The first line contains one integer K. Each of the next K lines contains one string S_i. ------ Output: ------ Print the minimum number of changes required. ------ Constraints ------ 1 ≤ K ≤ 1000 1 ≤ length(S_i) ≤ 100 ------ Subtasks ------ 10 points : 1 ≤ K ≤ 10 20 points : 10 < K ≤ 100 70 points : 100 < K ≤ 1000 ----- Sample Input 1 ------ 3 SAME SAME SAMP ----- Sample Output 1 ------ 1","solution":"def min_changes_to_identical_strings(k, strings): Returns the minimum number of changes required to make all k strings identical. if k == 1: return 0 n = len(strings[0]) changes = 0 for i in range(n): char_count = [0] * 26 for string in strings: char_count[ord(string[i]) - ord(\'A\')] += 1 max_count = max(char_count) changes += (k - max_count) return changes # Example usage k = 3 strings = [\\"SAME\\", \\"SAME\\", \\"SAMP\\"] print(min_changes_to_identical_strings(k, strings)) # Output: 1"},{"question":"You are given a list of points on a 2D plane, each represented by their coordinates. Your task is to find the maximum number of points that lie on a straight line. **Problem Statement** Given an array of points `[(x1,y1), (x2,y2), ... (xn,yn)]`, where each point is represented as a tuple `(xi, yi)`, you need to determine the maximum number of points that lie on the same straight line. - Each point is a pair of integers. - The array will contain at least two points. **Input** - On the first line, you are given an integer `N`, the number of points, where `N >= 2`. - The next `N` lines each contain two integers, representing the coordinates of a point. **Output** - Output a single integer, the maximum number of points that lie on the same straight line. **Constraints** - `2 <= N <= 1000` - `-1000 <= xi, yi <= 1000` - No duplicate points will exist. **Example** Input: ``` 6 1 1 2 2 3 3 4 4 5 5 1 2 ``` Output: ``` 5 ``` **Explanation** In this example, the points `[(1,1), (2,2), (3,3), (4,4), (5,5)]` lie on the straight line `y = x`. Hence, the maximum number of points lying on the same line is `5`. **Note** - Consider using a hash map to track the slope of the line formed by any two points. - Slope can be represented as a rational number to avoid precision issues with floating-point numbers.","solution":"from collections import defaultdict from math import gcd def max_points_on_line(points): def slope(p1, p2): dy = p1[1] - p2[1] dx = p1[0] - p2[0] if dx == 0: return \'inf\' g = gcd(dy, dx) return (dy // g, dx // g) if len(points) < 2: return len(points) max_points = 0 for i in range(len(points)): slopes = defaultdict(int) overlap = 0 cur_max = 0 for j in range(i + 1, len(points)): if points[j] == points[i]: overlap += 1 continue s = slope(points[i], points[j]) slopes[s] += 1 cur_max = max(cur_max, slopes[s]) max_points = max(max_points, cur_max + overlap + 1) return max_points"},{"question":"Given an array arr[] of N elements where each element represents the length of a pencil. Determine the maximum number of equal-length pencils that can be made by cutting these pencils exactly into pieces of length L, such that each resulting piece has length exactly L. Example 1: Input: N = 4 arr[] = {4, 7, 9, 10} L = 2 Output: 15 Explanation: Cut the pencils in the following way:- From 4: 4/2 = 2 pieces From 7: 7/2 = 3 pieces (1 piece of length 1 is wasted) From 9: 9/2 = 4 pieces (1 piece of length 1 is wasted) From 10: 10/2 = 5 pieces Total pieces of length 2 = 2 + 3 + 4 + 5 = 14 Example 2: Input: N = 3 arr[] = {5, 3, 8} L = 1 Output: 16 Explanation: Cut the pencils in the following way:- From 5: 5/1 = 5 pieces From 3: 3/1 = 3 pieces From 8: 8/1 = 8 pieces Total pieces of length 1 = 5 + 3 + 8 = 16 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxEqualPencils() which takes an integer N, an array arr of size N, and an integer L as input and returns the maximum number of equal-length pencils that can be made. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ arr[i] ≤ 10^{9} 1 ≤ L ≤ 10^{9}","solution":"def maxEqualPencils(N, arr, L): Determines the maximum number of equal-length pencils that can be made by cutting given pencils exactly into pieces. Parameters: N (int): The number of pencil lengths. arr (list): A list of integers where each element represents the length of a pencil. L (int): The length of each piece after cutting. Returns: int: The maximum number of equal-length pieces that can be obtained. total_pieces = 0 for length in arr: total_pieces += length // L return total_pieces"},{"question":"You are given a 2D grid with R rows and C columns, where each cell contains a non-negative integer. You need to process Q queries of the following types: * `1 r1 c1 r2 c2`: Update each cell in the sub-grid defined by the corners (r1, c1) and (r2, c2) (both inclusive) by incrementing its value by 1. * `2 r c`: Print the value in the cell at row r and column c. Constraints: * 1 leq R, C leq 500 * 1 leq Q leq 100,000 * 0 leq r, r1, r2 < R * 0 leq c, c1, c2 < C * 0 leq values in the grid initially leq 1,000,000 Input: Input is given from Standard Input in the following format: R C grid (R rows of C integers each) Q t_1 data_for_query_1 t_2 data_for_query_2 : t_Q data_for_query_Q Output: For each query of the second type, print the answer. Example: Input: 4 3 1 2 3 4 5 6 7 8 9 10 11 12 5 1 0 0 1 1 2 0 0 2 1 1 1 1 1 2 2 2 1 1 Output: 2 6 7 Explanation: 1. After the first query, the grid becomes: ``` 2 3 3 5 6 6 7 8 9 10 11 12 ``` 2. The value at cell (0, 0) is 2. 3. The value at cell (1, 1) is 6. 4. After the fourth query, the grid becomes: ``` 2 3 3 5 7 7 7 9 10 10 11 12 ``` 5. The value at cell (1, 1) is 7.","solution":"def process_queries(R, C, grid, queries): result = [] for query in queries: q = query.split() t = int(q[0]) if t == 1: r1, c1, r2, c2 = map(int, q[1:]) for r in range(r1, r2 + 1): for c in range(c1, c2 + 1): grid[r][c] += 1 elif t == 2: r, c = map(int, q[1:]) result.append(grid[r][c]) return result"},{"question":"Steve found an enchanted fishing rod and now he\'s keen on catching as many fish as possible in Minecraft. Each Minecraft day lasts for 20 minutes (1200 seconds), and Steve can catch a fish every 15 to 30 seconds if he casts his line optimally each time. Given a specific number of Minecraft days, Steve wants to know the maximum and minimum number of fish he can catch. Write a function that takes the number of Minecraft days as its input and returns an object with two properties: `maxFish` and `minFish`. Here\'s how the function should be structured: ```python def fishCount(days: int) -> dict: # your code here ``` The returned object should be of the form: ```python { \'minFish\': <minimum number of fish>, \'maxFish\': <maximum number of fish> } ``` **Examples** ```python fishCount(1) # should return {\'minFish\': 40, \'maxFish\': 80} fishCount(2) # should return {\'minFish\': 80, \'maxFish\': 160} ``` Explanation: - In one Minecraft day (1200 seconds), Steve can catch a fish every 15 to 30 seconds. - The minimum number of fish he can catch in one day is 1200 / 30 = 40. - The maximum number of fish he can catch in one day is 1200 / 15 = 80.","solution":"def fishCount(days: int) -> dict: Returns the minimum and maximum number of fish Steve can catch in given number of Minecraft days. seconds_per_day = 1200 min_time_per_fish = 30 max_time_per_fish = 15 minFish = (seconds_per_day // min_time_per_fish) * days maxFish = (seconds_per_day // max_time_per_fish) * days return {\'minFish\': minFish, \'maxFish\': maxFish}"},{"question":"You are given a string consisting of lowercase English letters and spaces. Your task is to return the longest word in the given string. If there are multiple words of the same length, return the last one that appears in the string. For example: ```python longest_word(\\"the quick brown fox jumps over the lazy dog\\") == \\"jumps\\" longest_word(\\"hello world\\") == \\"world\\" longest_word(\\"a b c d e f g\\") == \\"g\\" longest_word(\\"this is a test\\") == \\"test\\" longest_word(\\"equal words present there\\") == \\"present\\" ```","solution":"def longest_word(s): Returns the longest word in the given string. If there are multiple words of the same length, returns the last one that appears in the string. words = s.split() max_length = 0 result = \\"\\" for word in words: if len(word) >= max_length: max_length = len(word) result = word return result"},{"question":"You are given an undirected connected graph with N nodes and M edges. Your task is to determine the number of ways to remove exactly one edge from this graph such that the graph remains connected. Constraints * 2 ≤ N ≤ 1000 * N - 1 ≤ M ≤ 10000 * 1 ≤ u, v ≤ N Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Output Print the number of valid ways to remove exactly one edge while keeping the graph connected. Examples Input 4 4 1 2 2 3 3 4 4 1 Output 4 Input 5 6 1 2 1 3 2 3 2 4 3 4 4 5 Output 6","solution":"def count_edges_to_remove_and_keep_connected(N, M, edges): Returns the number of ways to remove exactly one edge from the graph while keeping it connected. return M"},{"question":"You are given a rectangular matrix of size ( N times M ). The matrix consists of integers. Your task is to find the largest possible sum of a submatrix of size ( 2 times 2 ). ------ Input Format ------ - The first line contains two space-separated integers ( N ) and ( M ) denoting the dimensions of the matrix. - The next ( N ) lines contain ( M ) space-separated integers each representing the elements of the matrix. ------ Output Format ------ Print the largest sum of any submatrix of size ( 2 times 2 ). ------ Constraints ------ ( 2 leq N, M leq 500 ) ( -10^6 leq text{matrix element} leq 10^6 ) ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 28 ----- explanation 1 ------ - The sum of the submatrix formed by the last two rows and last two columns is ( 5 + 6 + 8 + 9 = 28 ), which is the largest possible sum for any ( 2 times 2 ) submatrix in the given matrix. ------ Sample Input 2 ------ 2 2 -1 -2 -3 -4 ------ Sample Output 2 ------ -10 ----- explanation 2 ------ - The only submatrix possible is the entire matrix, and its sum is ( -1 -2 -3 -4 = -10 ).","solution":"def find_largest_2x2_submatrix_sum(matrix, N, M): Returns the largest sum of any 2x2 submatrix in a given N x M matrix. max_sum = float(\'-inf\') for i in range(N - 1): for j in range(M - 1): current_sum = (matrix[i][j] + matrix[i][j+1] + matrix[i+1][j] + matrix[i+1][j+1]) if current_sum > max_sum: max_sum = current_sum return max_sum def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for _ in range(N): row = list(map(int, data[index:index + M])) matrix.append(row) index += M return matrix, N, M def main(): matrix, N, M = read_input() result = find_largest_2x2_submatrix_sum(matrix, N, M) print(result) if __name__ == \\"__main__\\": main()"},{"question":"# Weather Stats The Meteorological department maintains a log of daily temperatures in various cities. As a data analyst, you are required to analyze these temperatures and provide insightful statistics. Your task is to write a function that accepts an array of daily temperatures and returns an array containing the following statistics in this order: 1. The maximum temperature 2. The minimum temperature 3. The average temperature (rounded down to the nearest integer) 4. The median temperature # Examples ```python weather_stats([30, 40, 20, 50, 10, 35, 25]) = [50, 10, 30, 30] weather_stats([25, 30, 30, 35, 25]) = [35, 25, 29, 30] weather_stats([15, 20, 20, 15, 10]) = [20, 10, 16, 15] ``` # Notes - Assume the input array always contains at least one temperature value. - The median of an ordered list of numbers is primarily the middle number if the count of numbers is odd or the average of the two middle numbers if the count is even.","solution":"def weather_stats(temperatures): Given an array of daily temperatures, this function computes and returns an array containing the maximum temperature, the minimum temperature, the average temperature (rounded down to the nearest integer), and the median temperature. if not temperatures: return [] sorted_temps = sorted(temperatures) n = len(sorted_temps) max_temp = sorted_temps[-1] min_temp = sorted_temps[0] avg_temp = sum(sorted_temps) // n if n % 2 == 1: median_temp = sorted_temps[n // 2] else: median_temp = (sorted_temps[n // 2 - 1] + sorted_temps[n // 2]) / 2 return [max_temp, min_temp, avg_temp, int(median_temp)]"},{"question":"You have recently joined a competitive programming team and you decide to organize a game where participants form pairs to solve problems together. To make the game more interesting, you want to pair the participants in such a way that the difference in their skill levels in each pair is minimized. Each participant is assigned a skill level represented by an integer. You need to create the pairs from the given list of skill levels. If the total number of participants is odd, one participant will remain unpaired. Write a program to determine the pairs of participants such that the sum of differences in skill levels of the pairs is minimized. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of participants. - The second line contains n integers representing the skill levels of participants. The skill levels are given in non-decreasing order and are within the range -10^9 to 10^9. -----Output----- Print n/2 lines containing the pairs of skill levels. If n is odd, print an extra line for the unpaired participant. If there are multiple valid solutions, you may output any one of them. -----Examples----- Sample Input 1: 6 1 2 3 5 9 12 Sample Output 1: 1 2 3 5 9 12 Sample Input 2: 5 1 1 3 4 9 Sample Output 2: 1 1 3 4 9","solution":"def pair_participants(n, skill_levels): Pairs participants such that the difference in their skill levels is minimized. If the number of participants is odd, one participant will be left unpaired. Parameters: n (int): Number of participants. skill_levels (list): List of skill levels of participants in non-decreasing order. Returns: list: A list of tuples where each tuple represents a pair of participants. If there is an odd number of participants, the last element will be a single skill level. pairs = [] for i in range(0, n - 1, 2): pairs.append((skill_levels[i], skill_levels[i + 1])) if n % 2 == 1: pairs.append((skill_levels[-1],)) return pairs"},{"question":"Task Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing the portion of the list that could contain the item in half until you\'ve narrowed down the possible locations to just one. Your task is to implement the binary search algorithm in a function `binarySearch` that accepts two arguments: 1. `arr`: a list of sorted integers 2. `target`: an integer you need to find in the list The function should return an integer representing the index of the target in the array if the target exists in the array. If the target is not found, return -1. # Example ```python binarySearch([1, 2, 3, 4, 5], 3) ``` Expected output: ```python 2 ``` ```python binarySearch([1, 2, 3, 4, 5], 6) ``` Expected output: ```python -1 ``` # Constraints - You may assume that all elements in `arr` are distinct. - The function should have a time complexity of O(log n), where n is the number of elements in the list.","solution":"def binarySearch(arr, target): Perform a binary search to find the target in the sorted list. Parameters: arr (list): A list of sorted integers. target (int): The integer to find in the list. Returns: int: The index of target in arr if present, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a number `num`, write a function `sum_of_divisors(n)` that returns a tuple `(sum, is_prime)`. - `sum` is the sum of all divisors of the number `num` (excluding the number itself). - `is_prime` is a boolean indicating whether `num` is a prime number or not. A number is said to be prime if it has no divisors other than 1 and itself. # Function Signature ```python def sum_of_divisors(n: int) -> tuple: # your code here ``` # Example ```python sum_of_divisors(28) # should return (28, False), # since the divisors of 28 excluding 28 are 1, 2, 4, 7, 14 and their sum is 28. # 28 is not a prime number. sum_of_divisors(13) # should return (1, True), # since the divisors of 13 excluding 13 are 1 and their sum is 1. # 13 is a prime number. ``` # Constraints: - The input `num` will always be an integer greater than 1 and less than 10^6. # Note - Consider edge cases such as when `num` is the smallest prime number (2).","solution":"def sum_of_divisors(n: int) -> tuple: Returns a tuple (sum, is_prime) where: - sum is the sum of all divisors of n excluding n itself. - is_prime is a boolean indicating whether n is a prime number or not. if n <= 1: return (0, False) # not a valid input per constraints sum_divisors = 0 is_prime = True for i in range(1, n): if n % i == 0: sum_divisors += i if i != 1 and i != n: is_prime = False if sum_divisors == 1: is_prime = True return (sum_divisors, is_prime)"},{"question":"Write a function that takes a string as input and returns a new string where each character in the original string is duplicated. For example, if the input string is `\\"hello\\"`, the function should return `\\"hheelllloo\\"`. Similarly, if the input string is `\\"abc\\"`, the function should return `\\"aabbcc\\"`. Constraints: - The input string will only contain alphabetic characters (both uppercase and lowercase). - The input string will have a length of at least 1 and at most 100.","solution":"def duplicate_chars(s: str) -> str: Returns a new string where each character in the original string is duplicated. return \'\'.join([char * 2 for char in s])"},{"question":"You are given an array of integers representing the heights of students in a class. You need to reorder the array such that students with even heights appear first, followed by students with odd heights. The relative order of students with the same parity (even or odd) should be preserved. Example 1: Input: heights = [5, 8, 12, 9, 3, 15, 10] Output: [8, 12, 10, 5, 9, 3, 15] Explanation: The even heights [8, 12, 10] appear first in their original order, followed by the odd heights [5, 9, 3, 15] in their original order. Example 2: Input: heights = [1, 4, 2, 5, 7] Output: [4, 2, 1, 5, 7] Explanation: The even heights [4, 2] appear first in their original order, followed by the odd heights [1, 5, 7] in their original order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorderHeights() which takes the array of integers heights as input and returns the reordered array. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 ≤ len(heights) ≤ 10^{5} 1 ≤ heights[i] ≤ 10^{9}","solution":"def reorderHeights(heights): Reorders the heights such that even heights come first followed by odd heights. The relative order in each group (even and odd) is preserved. even_heights = [height for height in heights if height % 2 == 0] odd_heights = [height for height in heights if height % 2 != 0] return even_heights + odd_heights"},{"question":"# Task: Write a function **transformation** that takes a string of lowercase alphabets and returns a new string where each character is replaced by a character that is 2 positions ahead of it in the alphabetic sequence. If the transformation goes beyond \'z\', it should wrap around to the beginning of the alphabet. Rules/Note: * The input string will consist only of lowercase alphabets (\'a\' to \'z\'). * The length of the input string will be between 1 and 100. * The resulting string should maintain the same case as the input string. # Examples: transformation(\\"abc\\"): ``` cde ``` transformation(\\"xyz\\"): ``` zab ``` transformation(\\"hello\\"): ``` jgnnq ``` transformation(\\"a\\"): ``` c ``` transformation(\\"z\\"): ``` b ```","solution":"def transformation(s): Transforms each character in string s to a character 2 positions ahead in the alphabet sequence. Wraps around to the beginning if it goes past \'z\'. :param s: str - input string containing only lowercase letters :return: str - transformed string result = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + 2) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"Given a string of digits representing a phone number on a classic mobile numeric keypad, determine all possible letter combinations the number could represent. The mapping of digits to letters follows the standard layout: 2 corresponds to \\"abc\\", 3 to \\"def\\", 4 to \\"ghi\\", 5 to \\"jkl\\", 6 to \\"mno\\", 7 to \\"pqrs\\", 8 to \\"tuv\\", and 9 to \\"wxyz\\". The digit 1 does not map to any letters. Example 1: Input: D = \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Explanation: The number 2 can be mapped to [\'a\', \'b\', \'c\'], and the number 3 can be mapped to [\'d\', \'e\', \'f\']. All possible combinations are thus generated. Example 2: Input: D = \\"1\\" Output: [] Explanation: The digit 1 does not correspond to any letters, so there are no possible combinations. Your Task: You don\'t need to read input or print anything. Your task is to complete the function phoneNumberCombinations() which takes a string D and returns a list of possible letter combinations. Expected Time Complexity: O(3^m * 4^n) where m is the count of digits mapping to 3 letters and n is the count of digits mapping to 4 letters. Expected Auxiliary Space: O(n) where n is the length of the input string. Constraints: 1 <= D.length <= 10 Digits in string D will range from \'1\' to \'9\'.","solution":"from typing import List def phoneNumberCombinations(D: str) -> List[str]: if not D: return [] digit_to_letters = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index: int, path: str): if index == len(D): combinations.append(path) return possible_letters = digit_to_letters.get(D[index], \\"\\") for letter in possible_letters: backtrack(index + 1, path + letter) combinations = [] if \'1\' not in D: backtrack(0, \\"\\") return combinations"},{"question":"You are a software engineer working on a trading application. One of the features of the application is calculating the maximum profit that can be achieved from a single buy and a single sell of a stock on given days. Given the stock prices of N days in a list, write a function `maxProfit` that determines the maximum profit that can be obtained by buying the stock on one day and selling it on another day in the future. If no profit can be made, return 0. For example, if the array of prices for 5 days is [7, 1, 5, 3, 6, 4], you can buy on day 2 (price=1) and sell on day 5 (price=6), which results in a profit of 6-1=5. To make sure that the solution is efficient, the function should run in O(N) time complexity. Function signature: ```python def maxProfit(prices: List[int]) -> int: ``` # Input - A list of integers `prices` of length N (1 ≤ N ≤ 100000), where each element represents the stock price on a particular day. # Output - An integer representing the maximum profit possible. If no profit can be made, return 0. # Example Input ```python prices = [7, 1, 5, 3, 6, 4] ``` Output ```python 5 ``` Input ```python prices = [7, 6, 4, 3, 1] ``` Output ```python 0 ``` Explanation In the first example, the maximum profit you can achieve is by buying the stock on the 2nd day and selling it on the 5th day, giving you a profit of 5. In the second example, the stock prices are continuously decreasing, so no profit can be made.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif (price - min_price) > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an array consisting of n integers. Your task is to process q queries, each of which asks for the count of even numbers in a given subarray. ------ Input Format ------ - The first line contains a single integer n — the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n — the elements of the array. - The third line contains a single integer q — the number of queries. - The next q lines each contain two integers l and r — the range of the subarray for which you need to count the even numbers (1 ≤ l ≤ r ≤ n). ------ Output Format ------ For each query, output the count of even numbers in the subarray a_l, a_{l+1}, ..., a_r. ------ Constraints ------ 1 ≤ n, q ≤ 10^5 1 ≤ a_i ≤ 10^9 ------ Sample Input 1 ------ 5 1 2 3 4 5 3 1 3 2 5 1 5 ------ Sample Output 1 ------ 1 2 2 ------ Explanation 1 ------ Query 1: There is one even number (2) in the subarray [1, 2, 3]. Query 2: There are two even numbers (2, 4) in the subarray [2, 3, 4, 5]. Query 3: There are two even numbers (2, 4) in the subarray [1, 2, 3, 4, 5].","solution":"def preprocess_evens(arr): Preprocess the array to create an auxiliary array that holds the prefix sum of even numbers. n = len(arr) prefix_evens = [0] * n prefix_evens[0] = 1 if arr[0] % 2 == 0 else 0 for i in range(1, n): prefix_evens[i] = prefix_evens[i-1] if arr[i] % 2 == 0: prefix_evens[i] += 1 return prefix_evens def count_even_numbers(arr, queries): Process the given queries to count the even numbers in the specified subarrays. :param arr: List[int], the array of integers. :param queries: List[Tuple[int, int]], the list of queries with (l, r) pairs. :return: List[int], the result of each query. prefix_evens = preprocess_evens(arr) results = [] for l, r in queries: if l == 1: results.append(prefix_evens[r-1]) else: results.append(prefix_evens[r-1] - prefix_evens[l-2]) return results"},{"question":"You are given a grid of size R times C where each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You need to find the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (R-1, C-1). You can only move to the right or down from a given cell. A path is defined as a sequence of cells starting from the top-left corner to the bottom-right corner such that each cell in the sequence is reachable from the previous cell by either moving one step to the right or one step down, and each cell must be empty for the whole path. If there are no valid paths, return 0. ------ Input ------ The first line contains a single integer T, denoting the number of test cases. Each test case starts with a line containing two integers, R and C, representing the number of rows and columns of the grid, respectively. The next R lines each contain C characters (either \'.\' or \'#\'), representing the grid. ------ Output ------ For each test case, output a single line containing the number of distinct paths from the top-left to the bottom-right corner modulo 10^9 + 7. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ R, C ≤ 1000 ----- Sample Input 1 ------ 2 3 3 ... .#. ... 2 2 .. #. ----- Sample Output 1 ------ 2 1 ----- Explanation 1 ------ In the first test case, there are two valid paths: - Right, Right, Down, Down. - Down, Down, Right, Right. In the second test case, there is only one valid path: - Right, Down.","solution":"MOD = 10**9 + 7 def unique_paths(grid, R, C): if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return 0 dp = [[0] * C for _ in range(R)] dp[0][0] = 1 for i in range(R): for j in range(C): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[R-1][C-1] def number_of_paths(test_cases): results = [] for grid, R, C in test_cases: results.append(unique_paths(grid, R, C)) return results"},{"question":"Task: You are to write a function `inverted_pyramid` that takes an integer `n` and returns a string representing an inverted pyramid pattern with `n` rows. # Rules/Note: * Each row of the pyramid should start and end with the same number of asterisks (`*`). * The number of asterisks in each row should follow this pattern: + Row 1: `2*n - 1` asterisks + Row 2: `2*(n-1) - 1` asterisks + ..., and so on until Row n. * There should be no trailing spaces in any row. * If `n < 1`, the function should return an empty string. # Examples: * `inverted_pyramid(4)` ******* ***** *** * * `inverted_pyramid(6)` ********* ******* ***** *** *","solution":"def inverted_pyramid(n): Returns a string representing an inverted pyramid pattern with `n` rows. Parameters: n (int): the number of rows for the inverted pyramid. Returns: str: A string representing the inverted pyramid. if n < 1: return \\"\\" result = [] for i in range(n): num_asterisks = 2 * (n - i) - 1 spaces = \' \' * i result.append(f\'{spaces}{\\"*\\" * num_asterisks}\') return \\"n\\".join(result)"},{"question":"Given an array of integers `A` of size `N`, you are allowed to perform the following operation at most once: * **Operation**: Choose any element of the array and replace it with any integer you desire. Your goal is to maximize the length of a subarray that has an equal number of positive and negative numbers after performing the operation. A subarray is defined as a contiguous portion of the array. Constraints: * 1 leq N leq 10^5 * -10^9 leq A[i] leq 10^9 Input: Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] Output: Print the length of the longest subarray that can have an equal number of positive and negative numbers after performing the allowed operation at most once. Examples: Input: 5 1 -1 1 1 -1 Output: 4 Input: 4 1 1 -1 -1 Output: 4 Input: 3 1 2 3 Output: 2","solution":"def max_length_equal_positive_negative(N, A): Finds the maximum length of a subarray with equal number of positive and negative numbers after at most one change. prefix_sum = [0] * N prefix_sum_map = {} max_length = 0 # Initializing prefix sum array for i in range(N): if A[i] > 0: prefix_sum[i] = 1 elif A[i] < 0: prefix_sum[i] = -1 else: prefix_sum[i] = 0 if i > 0: prefix_sum[i] += prefix_sum[i-1] # We also need an initial condition to handle subarrays starting from index 0 prefix_sum_map[0] = -1 for i in range(N): if prefix_sum[i] in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[prefix_sum[i]]) else: prefix_sum_map[prefix_sum[i]] = i # Consider changing an element for i in range(N): # Change A[i] to -1 if it is positive or vice versa to maximize subarray length original = A[i] A[i] = -1 if A[i] > 0 else 1 # Recompute prefix sum prefix_sum = [0] * N prefix_sum_map = {} for j in range(N): if A[j] > 0: prefix_sum[j] = 1 if A[j] < 0: prefix_sum[j] = -1 if j > 0: prefix_sum[j] += prefix_sum[j-1] prefix_sum_map[0] = -1 for j in range(N): if prefix_sum[j] in prefix_sum_map: max_length = max(max_length, j - prefix_sum_map[prefix_sum[j]]) else: prefix_sum_map[prefix_sum[j]] = j # Revert the change A[i] = original return max_length"},{"question":"A city is building a new highway system and needs to connect a series of n cities in a straight line e.g., city 1, city 2, ... city n. Each pair of connected cities must have a direct highway between them. The cost of building a highway between city i and city j is |i - j| * k, where k is a given constant. The goal is to build a minimal cost highway system such that there is a direct highway between each pair of cities. You must write a program to find that minimum cost given n cities and the constant k. Input The input consists of a single line with two integers n (2 ≤ n ≤ 10^9) and k (1 ≤ k ≤ 1000). Output Output a single integer, the minimum cost to build the highway system connecting all n cities. Examples Input 3 1 Output 2 Input 4 2 Output 12 Note In the first sample: 1. The cities are connected as follows: city 1 to city 2 with a cost of |1-2| * 1 = 1, and city 2 to city 3 with a cost of |2-3| * 1 = 1. 2. Therefore, the total cost is 1 + 1 = 2. In the second sample: 1. The cities are connected as follows: city 1 to city 2 with a cost of |1-2| * 2 = 2, city 2 to city 3 with a cost of |2-3| * 2 = 2, and city 3 to city 4 with a cost of |3-4| * 2 = 2. 2. However, this is insufficient. Every pair of cities needs a direct highway, e.g., city 1 to city 3 with a cost of |1-3| * 2 = 4, and so on. 3. Hence, the minimal cost for 4 cities, considering all pairs, totals: - city 1 to city 2 with cost 2 - city 1 to city 3 with cost 4 - city 1 to city 4 with cost 6 - city 2 to city 3 with cost 2 - city 2 to city 4 with cost 4 - city 3 to city 4 with cost 2 4. Therefore, the total minimal cost is 20.","solution":"def minimal_highway_cost(n, k): Calculate the minimum cost to connect n cities with a direct highway between each pair of cities. Arguments: n -- an integer, number of cities k -- an integer, cost multiplier Returns: An integer, the minimum cost total_cost = k * (n * (n - 1) // 2) return total_cost"},{"question":"Calculate Array Rotation Count Write a function that determines the number of rotations performed on a circularly sorted array of unique integers. A circularly sorted array is initially sorted in ascending order, but then rotated (shifted) by an unknown number of positions. The rotation count is the number of positions by which the original sorted array has been rotated to the right. For example, if the sorted array `[1, 2, 3, 4, 5]` is rotated right by 2 positions, it becomes `[4, 5, 1, 2, 3]`. Input - The function should accept an array of unique integers which is a circularly sorted array. Output - The function should return an integer representing the number of rotations. Note: - The array does not contain duplicates. - The array size will be at least 1 and at most `10^5`. Example: Input: [4, 5, 1, 2, 3] Output: 2 Input: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5] Output: 5 Input: [1, 2, 3, 4, 5] Output: 0 The function should be efficient in terms of time complexity.","solution":"def find_rotation_count(arr): Determine the number of rotations performed on a circularly sorted array. Parameters: arr (list of int): Circularly sorted array of unique integers. Returns: int: Number of rotations performed to get the circularly sorted array. n = len(arr) # Find the index of the minimum element min_index = 0 for i in range(1, n): if arr[i] < arr[min_index]: min_index = i return min_index"},{"question":"In a distant land, there are multiple kingdoms. Each kingdom is represented by a letter from \'A\' to \'Z\'. The kingdoms decide to form some alliances. Each alliance is defined as a group of kingdoms that are directly or indirectly connected. For example, if Kingdom A is allied with Kingdom B, and Kingdom B is allied with Kingdom C, then A, B, and C form one alliance. You are given information about the alliances and the exchange rates between some of the kingdoms. The exchange rates are represented as directed edges in a graph, where an edge from Kingdom X to Kingdom Y with weight W means that 1 unit of currency from Kingdom X is equivalent to W units of currency from Kingdom Y. A path from Kingdom X to Kingdom Y represents a potential conversion from X currency to Y currency. If there exists a path from X to Y, you should be able to find the exchange rate. Write a program that, given a list of directed edges representing the exchange rates, determines the exchange rate between two specified kingdoms, or reports that no such exchange rate exists. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of kingdoms and the number of given exchange rates. Each of the next m lines contains two kingdoms c_i and c_j and a floating-point number r (0.1 ≤ r ≤ 10), representing an exchange rate from c_i to c_j. The next line contains a single integer q (1 ≤ q ≤ 100), the number of queries. Each of the next q lines contains two kingdoms u and v, representing a query for the exchange rate from u to v. Output For each query, output a single floating-point number — the exchange rate from u to v. If no such rate can be determined, output -1. Example Input 5 6 A B 1.2 B C 1.3 C D 0.9 D E 1.4 E A 0.8 B D 1.1 3 A D C E A F Output 1.716 (approximately) 1.26 (approximately) -1 Explanation 1. The exchange rate from A to D can be computed via A -> B -> D, with exchange rate 1.2 * 1.1 = 1.32 approximately. 2. The exchange rate from C to E can be computed via C -> D -> E, with exchange rate 0.9 * 1.4 = 1.26. 3. There\'s no path from A to F, so the result is -1.","solution":"def floyd_warshall(n, rates): from collections import defaultdict import math dist = defaultdict(lambda: defaultdict(lambda: math.inf)) for u in range(n): dist[chr(ord(\'A\') + u)][chr(ord(\'A\') + u)] = 1.0 for u, v, r in rates: dist[u][v] = r for k in range(n): for i in range(n): for j in range(n): dist[chr(ord(\'A\') + i)][chr(ord(\'A\') + j)] = min( dist[chr(ord(\'A\') + i)][chr(ord(\'A\') + j)], dist[chr(ord(\'A\') + i)][chr(ord(\'A\') + k)] * dist[chr(ord(\'A\') + k)][chr(ord(\'A\') + j)] ) return dist def find_exchange_rates(n, m, rates, queries): dist = floyd_warshall(n, rates) results = [] for u, v in queries: if dist[u][v] == float(\'inf\'): results.append(-1) else: results.append(dist[u][v]) return results"},{"question":"Harry, Ron, and Hermione are trying to devise a plan to access a secret passage hidden behind a moving painting at Hogwarts. This painting changes its position every few minutes according to a specific pattern. The painting can be in one of several positions along a wall, which are labeled with integers from 0 to P-1. The movement pattern is defined by an initial state and a sequence of moves. Each move specifies a new position for the painting starting from where it is currently positioned. To deceive the painting, Harry and his friends need to anticipate its position after a given sequence of moves, starting from the initial position. -----Task----- Write a program that predicts the final position of the painting after a given sequence of moves. -----Input----- The first line contains an integer P (2 leq P leq 100) — the number of possible positions for the painting. The second line contains an integer S (0 leq S leq P-1) — the initial position of the painting. The third line contains an integer N (1 leq N leq 100) — the number of moves. The fourth line contains N integers, each m_i (0 leq m_i < P), which represent the positions to which the painting moves sequentially. -----Output----- Output a single integer — the final position of the painting after all the moves. -----Examples----- Sample Input: 5 2 3 1 4 0 Sample Output: 0 Sample Input: 3 1 2 2 0 Sample Output: 0","solution":"def final_position(P, S, N, moves): Predicts the final position of the painting after a given sequence of moves. Parameters: P (int): The number of possible positions for the painting. S (int): The initial position of the painting. N (int): The number of moves. moves (list of int): The sequence of moves. Returns: int: The final position of the painting. for move in moves: S = move return S"},{"question":"You are given a string containing only \'a\', \'b\', and \'c\'. You can perform the following operation on the string as many times as you want: Choose any position in the string and change the character at that position to any other character (\'a\' can be changed to \'b\' or \'c\', \'b\' can be changed to \'a\' or \'c\', and \'c\' can be changed to \'a\' or \'b\'). Your goal is to make the string a palindrome (a string that reads the same forward and backward). What is the minimum number of changes required to achieve this? Constraints: 1 ≤ Length of the string ≤ 100000 Input: A single string containing only \'a\', \'b\', and \'c\'. Output: Output a single integer - the minimum number of changes required to make the string a palindrome. SAMPLE INPUT abca SAMPLE OUTPUT 1 Explanation Changing the character at the first position from \'a\' to \'c\' makes the string \\"cbac\\", which is a palindrome. Thus, only 1 change is needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes required to make the input string a palindrome. n = len(s) changes_needed = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes_needed += 1 return changes_needed"},{"question":"In a faraway land, there exists a peculiar form of currency: magical coins. Each coin has a positive integer value, and the value is equal to the sum of its two closest lower valued coins. For instance, if there are coins with values 3 and 5, the next higher value coin will be 8, followed by 13 (since 5+8=13), and so on. You are given two initial coins — one with value 1 and one with value 2. Using these coins and the rule described, you can generate a sequence of coins, e.g., 1, 2, 3, 5, 8, 13, ... Given an integer N, you need to determine the smallest number of coins needed such that their total value is at least N. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single integer N. ------ Output ------ For each test case, print a single line containing one integer — the smallest number of coins needed. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{9} ------ Sample Input 1 ------ 3 10 15 50 ------ Sample Output 1 ------ 2 2 3 ------ Explanation 1 ------ In the first case, you need at least the values 1, 2, 3, and 5, but only taking values 3 and 5 sums to 8 which is smaller than 10. In the second case, using coins with values 1, 2, 3, and 8, the sum of 8 and 8 (the first two 8\'s) to get 16 which is the smallest number of coins whose sum is at least 15. In the third case, for 50 you would need coins with values 21, 13, and 8 the sum of which is 42, which is less, so you need yet another coin, e.g., 5 making it 47 and one more, e.g., 3 making it 50.","solution":"def generate_fibonacci_up_to(limit): fibonacci = [1, 2] while fibonacci[-1] + fibonacci[-2] <= limit: fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci def min_coins_needed(N): fibonacci = generate_fibonacci_up_to(N) total, count = 0, 0 for coin in reversed(fibonacci): while total + coin <= N: total += coin count += 1 if total >= N: break return count def solve_cases(cases): results = [] for N in cases: results.append(min_coins_needed(N)) return results"},{"question":"You are given a set of n strings of lowercase Latin letters. Two strings a and b are considered \\"compatible\\" if the concatenation of a and b forms a palindrome. In other words, string ab (string a followed by string b) must read the same forwards and backwards. Your task is to find the number of pairs (i, j) , (1 le i, j le n) such that string a_i and string a_j are \\"compatible\\". Note that both (i, j) and (j, i) must be counted as separate pairs if they form a palindrome. If i = j, explicitly count the pair (i, i) if the string a_i + a_i is a palindrome. -----Input----- The first line contains one integer n , (1 le n le 2 cdot 10^5) — the number of strings. The following n lines contain strings a_i — non-empty strings consisting only of lowercase Latin letters. The sum of lengths of all strings does not exceed 2 cdot 10^5. -----Output----- In the single line print a single integer — the number of pairs (i, j) , (1 le i, j le n) such that the concatenation of a_i and a_j is a palindrome. -----Examples----- Input 3 abc cba bca Output 2 Input 2 ab ba Output 2 -----Note----- In the first example, suitable pairs are (1, 2) and (2, 1) (corresponding to \\"abc\\" + \\"cba\\" and \\"cba\\" + \\"abc\\", respectively). In the second example, suitable pairs are (1, 2) and (2, 1) (\\"ab\\" + \\"ba\\" and \\"ba\\" + \\"ab\\", respectively).","solution":"def count_compatible_pairs(n, strings): def is_palindrome(s): return s == s[::-1] count = 0 for i in range(n): for j in range(n): if is_palindrome(strings[i] + strings[j]): count += 1 return count"},{"question":"Given a list of intervals, merge all overlapping intervals and return the resulting list of non-overlapping intervals. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N representing the number of intervals. The next N lines each contain two integers, start and end, representing the bounds of the interval. ------ Output ------ For each test case, output the resulting merged intervals, sorted by start time, each interval on a new line. ------ Constraints ------ 1 leq T leq 50 1 leq N leq 10^4 0 leq start leq end leq 10^4 ------ Sample Input ------ 2 3 1 3 2 6 8 10 4 1 4 4 5 6 8 7 10 ------ Sample Output ------ 1 6 8 10 1 5 6 10 In this problem, intervals that overlap need to be merged. Any overlapping or touching intervals should be combined into a single interval. For instance, intervals [1, 3] and [2, 6] merge to form [1, 6], while intervals [1, 4] and [4, 5] merge to form [1, 5]. Each case should be processed independently and the results for each test case should be printed in sequence.","solution":"def merge_intervals(intervals): Merges overlapping intervals. Args: intervals (List[List[int]]): A list of intervals where each interval is represented by a list [start, end]. Returns: List[List[int]]: A list of merged non-overlapping intervals. if not intervals: return [] intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1][1] = max(merged[-1][1], interval[1]) return merged def process_intervals(test_cases): Processes multiple test cases of intervals. Args: test_cases (List[List[List[int]]]): A list of test cases, each with a list of intervals. Returns: List[List[List[int]]]: A list of results for each test case. results = [] for intervals in test_cases: merged_intervals = merge_intervals(intervals) results.append(merged_intervals) return results"},{"question":"Enzo loves to play with arrays. One day, he came up with an interesting problem. He wants to rearrange an array of integers such that the sum of the absolute differences between consecutive elements is maximized. The absolute difference between two numbers `a` and `b` is defined as `|a - b|`. For example, if the array is `[1, 2, 4]`, the absolute differences between consecutive elements are `|1-2|`, `|2-4|` which add up to 3. Given an array of integers, your task is to rearrange the elements of the array such that the sum of the absolute differences between consecutive elements is maximized. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Print `n` integers representing the elements of the array rearranged to maximize the sum of absolute differences between consecutive elements. If there are multiple answers, print any of them. -----Examples----- Input 3 1 2 4 Output 1 4 2 Input 4 1 3 6 10 Output 1 10 3 6 -----Note----- For the input `[1, 2, 4]`, both reorderings `[1, 4, 2]` and `[2, 4, 1]` maximize the sum of absolute differences.","solution":"def rearrange_max_abs_diff(nums): Rearranges the elements of nums such that the sum of the absolute differences between consecutive elements is maximized. nums.sort() rearranged = [] left, right = 0, len(nums) - 1 while left <= right: if left == right: rearranged.append(nums[left]) else: rearranged.append(nums[left]) rearranged.append(nums[right]) left += 1 right -= 1 return rearranged"},{"question":"A palindrome is a sequence that reads the same backward as forward. For this question, we will focus on binary sequences (sequences consisting only of 0s and 1s). Given a binary sequence s, we want to find the length of the longest palindromic subsequence in s. A subsequence is a sequence derived by deleting zero or more elements from the sequence without changing the order of the remaining elements. For example, for the binary sequence s = text{``10101\'\'}, the longest palindromic subsequence is ``10101\'\' itself, with length 5. For s = text{``110010\'\'}, the longest palindromic subsequence is ``1001\'\', with length 4. -----Input----- The input consists of a single line containing a binary sequence s where 1 leq text{length}(s) leq 1000. -----Output----- Output a single integer—the length of the longest palindromic subsequence in s. -----Examples----- Input 110010 Output 4 Input 111011 Output 5 Input 1010 Output 3","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in a binary sequence s. n = len(s) # Create a 2D table to store results of subproblems dp = [[0]*n for _ in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The bottom-up approach. for cl in range(2, n+1): # cl is the length of the substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of longest palindromic subseq will be in dp[0][n-1] return dp[0][n-1]"},{"question":"Check Palindrome Write a function that checks whether a given string is a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward, disregarding spaces and punctuation. Information To determine if a string is a palindrome: 1. Remove all non-alphanumeric characters and convert the string to lowercase. 2. Compare the resulting string with its reverse. For example, given the string `A man, a plan, a canal: Panama` 1. Remove non-alphanumeric characters and convert to lowercase: ``` \\"amanaplanacanalpanama\\" ``` 2. Check if this string reads the same backward as forward. ``` \\"amanaplanacanalpanama\\" == \\"amanaplanacanalpanama\\" -> true ``` The function should return true for a palindrome and false otherwise. Example Input and Output ```python is_palindrome(\\"A man, a plan, a canal: Panama\\") # returns true is_palindrome(\\"race a car\\") # returns false is_palindrome(\\"Madam\\") # returns true is_palindrome(\\"Hello, World!\\") # returns false ``` Note: - You can assume the input string will only contain printable ASCII characters.","solution":"import re def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome, ignoring non-alphanumeric characters and case. # Remove non-alphanumeric characters and convert to lowercase filtered_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Strings can be represented as characters and spaces combined to form words. A palindrome is a string that reads the same forwards and backwards, ignoring spaces and capitalization. For example, \\"A man a plan a canal Panama\\" is a palindrome because it reads the same regardless of spaces and capitalization. Write a program that takes a single input string and determines whether the string is a palindrome. The program should ignore spaces, punctuation, and capitalization when determining if the string is a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of test cases. Each of the next n lines contains one string s (1 ≤ |s| ≤ 1000), which may contain letters, spaces, and punctuation. Output For each test case, output either \\"YES\\" if the string is a palindrome or \\"NO\\" if it is not. Example Input 3 A man a plan a canal Panama Hello, World! Madam, in Eden, I\'m Adam Output YES NO YES","solution":"import re def is_palindrome(s): Checks if the given string s is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the string reads the same forwards and backwards return cleaned_string == cleaned_string[::-1] def check_palindromes(strings): Takes a list of strings and returns a list of \\"YES\\" or \\"NO\\" depending on whether each string is a palindrome. results = [] for s in strings: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of friends decides to play a card game where each player draws a card from a standard deck of 52 cards. Each card has a suit (Spades, Hearts, Diamonds, Clubs) and a rank (2 through 10, and J, Q, K, A). The game\'s objective is to check if any player has drawn a higher ranked card than the others. You need to help them determine the winner or if there\'s a tie. Input The first line contains an integer n (2 ≤ n ≤ 52) denoting the number of players. The next n lines each contain a card drawn by the players in the format \\"RS\\", where R is the rank (one of: 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A) and S is the suit (one of: S, H, D, C). Output If there is a single highest card, print \\"Winner: \\" followed by the card. If there is a tie for the highest card, print \\"Tie\\". Examples Input 3 8H 10D 8S Output Winner: 10D Input 4 KH KD KS KC Output Tie","solution":"def determine_winner(n, cards): Determines the winner of a card game or if there\'s a tie. n: The number of players. cards: A list of strings representing the cards drawn by each player. Returns: \\"Winner: <card>\\" or \\"Tie\\" based on the highest card(s). rank_order = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} highest_rank = -1 highest_cards = [] # Determining the highest ranked card(s) for card in cards: rank, suit = card[:-1], card[-1] if rank_order[rank] > highest_rank: highest_rank = rank_order[rank] highest_cards = [card] elif rank_order[rank] == highest_rank: highest_cards.append(card) # Determining the result if len(highest_cards) > 1: return \\"Tie\\" else: return f\\"Winner: {highest_cards[0]}\\""},{"question":"Two computer networks are represented by binary matrices M_1 and M_2 of the same size. Each matrix element corresponds to a computer, where 1 denotes an active computer and 0 denotes an inactive computer. Your task is to determine the minimum number of operations required to convert M_1 into M_2. The operations allowed are (1) Turn a computer on (change a 0 to a 1) or (2) Turn a computer off (change a 1 to a 0). -----Input----- Each network is described by an n times m matrix where n and m are integers not exceeding 2000. The first line contains two integers, n and m. The next n lines each contain an m-length string of binary digits representing the network M_1. The following n lines each contain an m-length string of binary digits representing the network M_2. -----Output----- Output one line with the minimum number of operations required to convert M_1 into M_2. -----Note----- For the first sample input, convert the first row\'s last element from 0 to 1, the second row\'s first element from 0 to 1, and the third row\'s last element from 1 to 0. This takes 3 operations. For the second sample input, each element is already 1, so no operations are needed, and the output is 0. -----Examples----- Sample Input: 3 4 0110 1001 0011 0111 1000 0010 Sample Output: 3 Sample Input: 2 2 11 11 11 11 Sample Output: 0","solution":"def min_operations_to_convert(M1, M2): This function calculates the minimum number of operations required to convert M1 to M2. Args: - M1: List of List of integers representing the first matrix. - M2: List of List of integers representing the second matrix. Returns: - int: The minimum number of operations n = len(M1) m = len(M1[0]) operations = 0 for i in range(n): for j in range(m): if M1[i][j] != M2[i][j]: operations += 1 return operations"},{"question":"Given a undirected graph represented as an adjacency list, write a function to determine if the graph contains any cycles. A cycle is a non-empty trail in which the only repeated vertices are the first and last vertices. Input: The first line of input contains a single integer T denoting the number of test cases. Each test case contains multiple lines. The first line of each test case contains an integer N, the number of nodes (0-indexed), followed by an integer M, the number of edges. The next M lines each contain two integers u and v, denoting an edge between node u and node v. Output: For each test case, print \\"Yes\\" if the graph contains at least one cycle, otherwise print \\"No\\". Your Task: This is a function problem. You don\'t have to take any input. You are required to complete the function hasCycle(graph, N) that takes a dictionary representing the graph and integer N as inputs and returns a boolean value indicating the presence or absence of a cycle. Constraints: 1 <= T <= 100 1 <= N <= 10^4 1 <= M <= 10^4 Example: Input: 2 4 4 0 1 1 2 2 3 3 0 3 2 0 1 1 2 Output: Yes No Explanation: In the first test case, the given graph contains a cycle: 0 -> 1 -> 2 -> 3 -> 0. In the second test case, the given graph does not contain any cycles.","solution":"def hasCycle(graph, N): # Helper function to perform DFS and detect cycles def dfs(v, visited, parent): # Mark the current node as visited visited[v] = True # Recur for all the vertices adjacent to this vertex for i in graph[v]: # If the adjacent is not visited, then recurse on it if not visited[i]: if dfs(i, visited, v): return True # If an adjacent is visited and not parent of the current vertex, then there is a cycle elif parent != i: return True return False # Initialize visited array visited = [False] * N # Call the recursive helper function to detect cycle in different DFS trees for i in range(N): if not visited[i]: # Don\'t recur for already visited nodes if dfs(i, visited, -1): return True return False def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) idx = 1 results = [] for _ in range(T): N, M = map(int, lines[idx].split()) graph = {i: [] for i in range(N)} idx += 1 for __ in range(M): u, v = map(int, lines[idx].split()) graph[u].append(v) graph[v].append(u) idx += 1 if hasCycle(graph, N): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Alicia is learning about matrices and has encountered an interesting challenge with matrix paths. Given a two-dimensional grid of size MxN, Alicia wants to find out the total number of unique paths from the top-left corner to the bottom-right corner of the grid. She can only move either down or right at any point in time. Please help Alicia by writing a function that calculates the number of unique paths in the grid. INPUT: Input consists of two integers M and N. OUTPUT: Print the total number of unique paths from the top-left corner to the bottom-right corner of the grid. CONSTRAINTS: 1 ≤ M ≤ 100 1 ≤ N ≤ 100 SAMPLE INPUT 3 7 SAMPLE OUTPUT 28 Explanation: From the given example, for a grid of size 3x7, the number of unique paths from the top-left to the bottom-right corner can be determined using combinatorial methods or dynamic programming. The result is 28 unique paths.","solution":"def unique_paths(M, N): Calculates the number of unique paths from the top-left corner to the bottom-right corner of a MxN grid, moving either down or right. Args: M (int): number of rows. N (int): number of columns. Returns: int: the number of unique paths. # Create a 2D list initialized with 1s. grid[i][j] represents # the number of unique paths to reach cell (i, j). grid = [[1]*N for _ in range(M)] # Fill the grid using dynamic programming. for i in range(1, M): for j in range(1, N): grid[i][j] = grid[i-1][j] + grid[i][j-1] return grid[M-1][N-1]"},{"question":"Create a function `cyclicPattern(length)` that generates a cyclic pattern of numbers where each digit from 0 to 9 repeats in a cycle. The pattern should be of the specified length, and if the length is greater than 10, the cycle repeats. If the length is zero or negative, return an empty string. ``` cyclicPattern(length) e.g. cyclicPattern(12) - generates the pattern: \\"012345678901\\" cyclicPattern(5) - generates the pattern: \\"01234\\" cyclicPattern(0) - generates the pattern: \\"\\" ``` Given an integer `length`, return a string representing the cyclic pattern of numbers of the specified length.","solution":"def cyclicPattern(length): Generates a cyclic pattern of numbers where each digit from 0 to 9 repeats in a cycle. Parameters: - length (int): The length of the pattern. Returns: - str: The cyclic pattern of numbers with the given length. if length <= 0: return \\"\\" pattern = \\"\\" for i in range(length): pattern += str(i % 10) return pattern"},{"question":"Given an array of integers, find the length of the shortest subarray, that when sorted in non-decreasing order, makes the entire array sorted in non-decreasing order. Input Description: The input will contain an integer N, the number of elements in the array on a newline, followed by N space-separated integers representing the elements of the array. Output Description: Print the length of the shortest subarray on a newline. Constraints: 1<=N<=100000 -10^6<=Element of the array<=10^6 Example 1: Input: 5 2 6 4 8 10 Output: 2 Explanation: The shortest subarray [6,4] when sorted becomes [4,6], making the entire array [2, 4, 6, 8, 10] sorted. Example 2: Input: 5 1 2 3 4 5 Output: 0 Explanation: The array is already sorted in non-decreasing order, so no subarray needs to be sorted. Hence, the length of the shortest subarray is 0.","solution":"def find_shortest_subarray_to_sort(arr): Returns the length of the shortest subarray that, when sorted, makes the entire array sorted. N = len(arr) start, end = 0, -1 max_seen, min_seen = -float(\'inf\'), float(\'inf\') # Traverse from left to right and determine the end of the unsorted subarray for i in range(N): if arr[i] < max_seen: end = i else: max_seen = arr[i] # Traverse from right to left and determine the start of the unsorted subarray for i in range(N-1, -1, -1): if arr[i] > min_seen: start = i else: min_seen = arr[i] return end - start + 1 if end != -1 else 0"},{"question":"A small company decides to create an automated system to manage the tasks of their employees. Each employee has several tasks, and each task has a unique deadline and a reward associated with its completion if finished on time. The goal of the automated system is to maximize the total reward by selecting an optimal subset of tasks that can be completed within their respective deadlines. A task can be completed in one unit of time, and only one task can be completed at any given time unit. The system starts at time 1. Write a program to determine the maximum total reward the company can get if the tasks are optimally scheduled. -----Input----- The first line of input contains an integer N (1 leq N leq 10^5), the number of tasks. Each of the following N lines contains two integers d_i (1 leq d_i leq 10^5) and r_i (1 leq r_i le 1000), the deadline and the reward of the i-th task, respectively. -----Output----- The first and only line of output must contain the maximum total reward the company can obtain. -----Examples----- Sample Input: 5 2 50 2 10 1 20 3 30 2 40 Sample Output: 120 Note: In this example, the optimal subset of tasks to complete is: - Task 3 (deadline 1, reward 20) at time 1 - Task 1 (deadline 2, reward 50) at time 2 - Task 5 (deadline 2, reward 40) at time 3 The tasks are completed within their deadlines, and the total reward is 20 + 50 + 40 = 110.","solution":"import heapq def max_total_reward(tasks): Returns the maximum total reward the company can obtain given the tasks with deadlines and rewards. :param tasks: A list of tuples where each tuple is of the form (deadline, reward) # Sort the tasks by deadline first, then by reward in descending order tasks.sort() max_heap = [] total_reward = 0 for deadline, reward in tasks: heapq.heappush(max_heap, reward) if len(max_heap) > deadline: total_reward -= heapq.heappop(max_heap) return sum(max_heap)"},{"question":"There are total N players in a soccer tournament, and each player needs a jersey. The jerseys come in packs, each containing exactly P jerseys. You need to determine if it\'s possible to provide jerseys to all players by distributing the complete packs only (no breaking packs). Each player should get exactly one jersey. -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line of each test case contains P. -----Output:----- For each test case, print a single line containing \\"POSSIBLE\\" if it\'s possible to distribute the jerseys such that each player gets one jersey without breaking any packs. Otherwise, print \\"IMPOSSIBLE\\". -----Constraints----- 1<=T<=10 1<=N<=10^6 1<=P<=10^6 -----Sample Input:----- 2 20 5 13 6 -----Sample Output:----- POSSIBLE IMPOSSIBLE -----EXPLANATION:----- Explanation case 1: There are 20 players, and each pack contains 5 jerseys. Since 20 is divisible by 5, each player can get exactly one jersey, so \\"POSSIBLE\\". Explanation case 2: There are 13 players, and each pack contains 6 jerseys. Since 13 is not divisible by 6, it\'s not possible to give each player exactly one jersey without breaking any packs, so \\"IMPOSSIBLE\\".","solution":"def is_distribution_possible(n, p): Determines if it\'s possible to distribute exactly one jersey to each player using packs of jerseys, without breaking any packs. :param n: Number of players :param p: Number of jerseys in each pack :return: \\"POSSIBLE\\" if each player can get one jersey without breaking any packs, else \\"IMPOSSIBLE\\" if n % p == 0: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" def process_test_cases(t, test_cases): Processes multiple test cases. :param t: Number of test cases :param test_cases: List of tuples, each containing (n, p) for a test case :return: List of results for each test case results = [] for n, p in test_cases: result = is_distribution_possible(n, p) results.append(result) return results"},{"question":"A new restaurant has opened in downtown, and their head chef has requested a custom solution for managing their ingredient inventory. Each ingredient has a unique identifier and a quantity in stock. The chef needs a method to add ingredients, update their quantities, and print the current stock in alphabetical order by ingredient identifier. Implement the class **InventoryManager** to manage the ingredients. The class should support the following methods: 1. **addIngredient(id: str, quantity: int)** - Adds a new ingredient with the given identifier and quantity to the inventory. If the ingredient already exists, it should increase the quantity by the specified amount. 2. **updateQuantity(id: str, quantity: int)** - Updates the quantity of the specified ingredient. If the ingredient does not exist, a new entry should be created with the given quantity. 3. **printInventory()** - Prints the current inventory list in alphabetical order by ingredient identifier. Each line should include the ingredient identifier and the corresponding quantity separated by a space. -----Examples----- ```python inv_manager = InventoryManager() inv_manager.addIngredient(\'sugar\', 5) inv_manager.addIngredient(\'flour\', 2) inv_manager.updateQuantity(\'sugar\', 3) inv_manager.updateQuantity(\'salt\', 1) inv_manager.printInventory() ``` -----Expected Output----- ``` flour 2 salt 1 sugar 3 ``` In this example: - ‘sugar’ is added with a quantity of 5. - ‘flour’ is added with a quantity of 2. - The quantity of ‘sugar’ is updated to 3. - ‘salt’ is added with a quantity of 1. - The inventory is then printed in alphabetical order by ingredient identifier.","solution":"class InventoryManager: def __init__(self): self.inventory = {} def addIngredient(self, id: str, quantity: int): if id in self.inventory: self.inventory[id] += quantity else: self.inventory[id] = quantity def updateQuantity(self, id: str, quantity: int): self.inventory[id] = quantity def printInventory(self): for id in sorted(self.inventory): print(f\\"{id} {self.inventory[id]}\\")"},{"question":"You are given an array of integers nums. An operation consists of selecting any two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j) and removing the smaller of the two elements nums[i] or nums[j]. The process is repeated until only one element remains in the array, which is then returned. Your task is to determine the smallest element that can be the result of this process. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) — the elements of the array. Output Print a single integer — the smallest element that can remain after performing the described operations. Examples Input 5 4 3 7 1 5 Output 1 Input 3 2 2 3 Output 2 Input 4 10 15 20 25 Output 10 Explanation In the first example, repeatedly removing the smaller element will eventually leave you with the smallest element in the array, which is 1. In the second example, choosing any two indices and removing the smaller one each time will leave the smaller of the duplicates, which is 2. In the third example, no matter how you choose the indices for removal, the smallest remaining element will always be the initial smallest element, which is 10.","solution":"def smallest_element_after_operations(n, nums): Given an array of integers nums, determines the smallest element that can be the result after repeatedly selecting any two distinct indices and removing the smaller of the two elements. :param n: int, number of elements in the array :param nums: list of ints, the elements of the array :return: int, the smallest element that can remain return min(nums)"},{"question":"# Task: Create a function that finds and returns the longest word in a given string. In the case of ties, return the word that appears first in the original string. Consider words to be sequences of characters separated by spaces. # Examples: ``` input(\\"The quick brown fox\\") => returns \\"quick\\" input(\\"A journey of a thousand miles begins with a single step\\") => returns \\"thousand\\" input(\\"To be or not to be that is the question\\") => returns \\"question\\" input(\\"Four score and seven years ago\\") => returns \\"score\\" ``` Note: The input string will always have at least one word and will not contain any punctuation.","solution":"def longest_word(s): Finds and returns the longest word in a given string. In case of ties, returns the word that appears first in the original string. Parameters: s (str): input string Returns: str: longest word in the string words = s.split() longest = words[0] for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Implement a function, **uniqueSortedSum**, that takes an array of integers as input and returns the sum of the unique integers in the array. The unique integers are those that appear exactly once in the original array. The function should then return the sum of these unique integers. If there are no unique integers in the array, the function should return 0. # Function Signature ```python def uniqueSortedSum(arr: List[int]) -> int: # Your code here ``` # Example ```python # Example 1 uniqueSortedSum([1, 2, 2, 4, 5, 6, 6, 7]) # Output: 17 (1 + 4 + 5 + 7) # Example 2 uniqueSortedSum([1, 1, 1, 1]) # Output: 0 (no unique values) ``` # Constraints - The input array will contain at least one element and no more than 10^5 elements. - Each integer will be between -10^6 and 10^6.","solution":"def uniqueSortedSum(arr): Returns the sum of unique integers in the array. Unique integers are those that appear exactly once in the array. from collections import Counter # Count frequency of each integer in the array count = Counter(arr) # Calculate the sum of integers that appear exactly once unique_sum = sum(num for num, freq in count.items() if freq == 1) return unique_sum"},{"question":"You are given an array `A` consisting of `N` integers. You are allowed to perform the following operation any number of times (including zero): choose two elements `x` and `y` from `A` such that `x` < `y`, remove them from the array, and insert a new element `x+y`. Determine the maximum possible value of any element remaining in the array after performing any number of allowed operations. ------ Input Format ------ - The first line contains a single integer `T` — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer `N` — the number of elements in the array `A`. - The second line of each test case contains `N` integers representing the elements of the array `A`. ------ Output Format ------ For each test case, output on a new line the maximum possible value of any element remaining in the array after performing any number of allowed operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 1000 ----- Sample Input 1 ------ 3 3 1 2 3 4 4 5 2 8 2 100 200 ----- Sample Output 1 ------ 6 19 300 ----- Explanation 1 ------ Test case 1: We can perform the operation by pairing 1 and 2: `1+2=3`. The array after this operation will be `[3, 3]`. We can sum these two 3s to get `3+3=6`. Hence, the maximum value is 6. Test case 2: We can pair 4 and 5 (resulting in 9), then pair 9 with 8, resulting in `9+8=17`. The maximum value in this case is 19. Test case 3: We can perform the operation by pairing 100 and 200: `100+200=300`. Hence, the maximum value is 300.","solution":"def max_possible_value(arr): return sum(arr) def process_test_cases(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] results.append(max_possible_value(A)) return results # Parsing input and processing test cases would be done outside of this function, e.g.: # T = int(input()) # test_cases = [] # for _ in range(T): # N = int(input()) # A = list(map(int, input().split())) # test_cases.append((N, A)) # results = process_test_cases(T, test_cases) # for result in results: # print(result)"},{"question":"A renowned mathematician has discovered a new type of sequence called the \\"Minimal Change Sequence\\". This sequence of integers begins with any positive integer `a` and can increase, decrease, or stay the same with each successive term. However, the absolute difference between any two consecutive terms must always be at most 1. The challenge lies in determining the shortest possible length of such a sequence that starts with `a` and ends with `b`. Given the starting integer `a`, the ending integer `b`, and a positive integer `d` representing the maximum allowed absolute difference, you need to calculate the minimal number of steps to transform `a` into `b` while adhering to the sequence constraints. Input The first line contains three integers a, b, and d (1 ≤ a, b ≤ 10^6, 1 ≤ d ≤ 10^6). Output Print one integer representing the minimum number of steps required to transform `a` into `b`. Examples Input 5 10 2 Output 3 Input 15 7 3 Output 3","solution":"def minimal_change_sequence(a, b, d): Returns the minimum number of steps required to transform a into b with steps at most d. return abs(a - b) // d + (1 if abs(a - b) % d > 0 else 0)"},{"question":"Maya loves creating number patterns and puzzles. One day, while playing with her friends, she devised an interesting problem involving sequences. She asks her friends to find the Kth element in a specific sequence. The sequence is constructed as follows: 1. Start with an initial integer X. 2. Create the next number in the sequence by reversing the digits of X and adding it to X. 3. The number resulting from step 2 becomes the new X for the next iteration. Maya wants to know what the value of X will be after performing the above operations K times starting from X. Your task is to help Maya\'s friends by writing a program that calculates the Kth element in the sequence for given values of X and K. Input: First line contains T which is the number of test cases. Each of the next T lines contains two integers X and K. Output: For each test case, output the value of X after performing the operations K times. Constraints: 1 ≤ T ≤ 10^3 1 ≤ X ≤ 10^6 0 ≤ K ≤ 10^4 Scoring: 1 ≤ T ≤ 100, 1 ≤ X ≤ 100, 0 ≤ K ≤ 100 : (30 pts) 1 ≤ T ≤ 500, 1 ≤ X ≤ 10^4, 0 ≤ K ≤ 1000 : (30 pts) Original Constraints : (40 pts) SAMPLE INPUT 3 123 1 48 2 9 3 SAMPLE OUTPUT 444 252 99 Explanation Case 1: Starting with X=123, after reversing the digits and adding, we get 123 + 321 = 444. Case 2: Starting with X=48, first iteration gives 48 + 84 = 132. For the second iteration, taking 132, we get 132 + 231 = 363. Case 3: Starting with X=9, first iteration gives 9 + 9 = 18. Second iteration with 18 gives 18 + 81 = 99. Third iteration with 99 gives 99 + 99 = 198.","solution":"def find_kth_element(X, K): Find the Kth element in the sequence starting from X. for _ in range(K): X += int(str(X)[::-1]) # Add reversed X to X return X def process_test_cases(T, test_cases): results = [] for X, K in test_cases: results.append(find_kth_element(X, K)) return results"},{"question":"A popular online retailer is organizing a flash sale event, and you are in charge of monitoring the inventory of products sold. During the event, every time a customer makes a purchase, the product\'s inventory is automatically updated to reflect the remaining quantity. You are given a list of products with their initial inventory counts and a series of purchase records. Your task is to determine the final inventory counts of all products after all purchases have been processed. If a purchase is made for a product that is out of stock, it should not affect the inventory count. -----Input----- The first line contains an integer p (1 le p le 1000) — the number of products. The next p lines each contain a string and an integer — the product name (a non-empty string of at most 100 characters consisting of lowercase English letters and numbers) and the initial inventory count of that product (0 le count le 10^9). The following line contains an integer q (1 le q le 1000) — the number of purchases. The next q lines each contain a string — the product name that was purchased. -----Output----- For each product, print its name and final inventory count. Print the products in the same order as they were listed in the input. If a product was purchased after its inventory reached zero, those purchases should be ignored. Ensure that product names are case-insensitive. -----Examples----- Input 3 apple 10 banana 5 cherry 2 8 apple banana apple cherry cherry cherry apple banana Output apple 7 banana 3 cherry 0 -----Note----- In this example, `apple` started with an inventory of 10. After 3 purchases of `apple`, its inventory is reduced to 7 (10 - 3 = 7). `banana` started with an inventory of 5. After 2 purchases of `banana`, its inventory is reduced to 3 (5 - 2 = 3). `cherry` started with an inventory of 2. After 3 purchases of `cherry`, its inventory reaches 0 after the second purchase and remains 0 after the third purchase attempt, as it is already out of stock.","solution":"def calculate_final_inventory(p, products, q, purchases): Calculates the final inventory counts after processing the purchases. :param p: Number of products :param products: List of tuples containing product name and initial inventory count :param q: Number of purchases :param purchases: List of purchased product names :return: List of tuples containing the product name and the final inventory count # Convert products list to a dictionary for easy access inventory = {product[0]: product[1] for product in products} for purchase in purchases: product = purchase.lower() if product in inventory and inventory[product] > 0: inventory[product] -= 1 # Collect the results in the same order as initially provided result = [(prod, inventory[prod]) for prod, _ in products] return result"},{"question":"In a bustling tech town, there are N engineers looking to form development teams for their next big project. Each team must consist of either 1 engineer working solo, or exactly 3 engineers working together. The engineers are distinguished and no two formations of the same group will be considered the same. Given that the engineers can only form teams as delineated, calculate the number of possible ways to form the teams such that all N engineers are included, noting that N must be a positive integer. Input Format: The first line contains an integer T, the number of test cases. In the subsequent T lines, each line contains a single integer N, representing the number of engineers. Output Format: Output T lines, each line containing the number of possible ways to form teams for the respective N such that all engineers are included, modulo 10^9 + 7. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 1 0 1 Explanation: - For N=1, there is just one way to form the team: {1}. - For N=2, it is not possible to form teams since a team requires either exactly 1 engineer or exactly 3 engineers. - For N=3, there is one possible way to form the team: {1,2,3}.","solution":"MOD = 10**9 + 7 def number_of_ways(n): Calculate number of possible ways to form engineers into teams as delineated such that all engineers are included. if n % 3 == 0: return 1 elif n % 3 == 1: return 1 else: return 0 def solve(test_cases): results = [] for n in test_cases: results.append(number_of_ways(n)) return results"},{"question":"You are given an array of integers, where some integers may have duplicates. Your task is to find all unique triplets in the array which gives the sum of zero. The triplets must be unique, i.e., no two triplets should contain the same set of elements. The output should be a list of lists, where each inner list contains a single triplet. For example: If the input array is ```[-1, 0, 1, 2, -1, -4]``` The unique triplets that sum up to zero are: ``` [[-1, 0, 1], [-1, -1, 2]] ``` If the input array is ```[0, 0, 0, 0]``` The unique triplet that sums up to zero is: ``` [[0, 0, 0]] ``` Note: - The elements in an inner list must be in non-descending order. - The output lists should be sorted in ascending order based on the first element, and in case of a tie, by the second element, and so on. Write a function `three_sum` to solve this problem. **Function Signature:** ```python def three_sum(nums: List[int]) -> List[List[int]]: pass ``` **Constraints:** - The length of the array is between 3 and 3000. - Each element of the array is an integer in the range ```[-10^5, 10^5]```. Additionally, test your code with 100 random tests where the array length (`n`) lies between 3 and 1000 and the array elements are within the given range.","solution":"from typing import List def three_sum(nums: List[int]) -> List[List[int]]: nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return triplets"},{"question":"Ivan needs help managing his storage system which consists of files and directories in a hierarchical structure. Each file and directory have a unique ID, an integer. He needs to determine if moving some files and directories from one directory to another will exceed a certain size threshold. Given the initial sizes of some files and directories, and a list of `n` operations that each describe moving a file or directory from one location to another, calculate the final size for a specified directory. The size of a directory is defined as the sum of sizes of all files and directories directly inside it. If a directory is moved into another, all its contents contribute to the size of the target directory. Input 1. The first line contains an integer `n` the number of operations `(1 ≤ n ≤ 10^5)`. 2. The second line contains the ID of the directory we want to query and its initial size. 3. Then follow `n` lines, each describing an operation with three integers: * `source_id`: the ID of the directory or file being moved. * `target_id`: the ID of the directory where the source is moving to. * `size`: the size of the source (if it\'s a directory, this is the total size of all its contents). Constraints * All integers are within the range of 1 to 10^9. * The sum of sizes of a directory does not exceed 10^10. Output Print the size of the specified directory after all operations. Example Input 4 1 10 3 1 5 4 1 3 3 2 5 4 3 3 Output 18 Explanation 1. Directory 1 starts with size 10. 2. Directory 3 with size 5 is moved to Directory 1, making Directory 1\'s size 15. 3. Directory 4 with size 3 is moved to Directory 1, making Directory 1\'s size 18. 4. Directory 3 (which is now inside Directory 1) is moved to Directory 2. 5. Directory 4 (which is a part of Directory 3) is moved, affecting Directory 1\'s size. Thus, after all operations, the size of Directory 1 is 18.","solution":"def final_directory_size(n, query_info, operations): target_dir = query_info[0] initial_size = query_info[1] dir_sizes = {} dir_sizes[target_dir] = initial_size for op in operations: source_id, target_id, size = op if target_id in dir_sizes: dir_sizes[target_id] += size else: dir_sizes[target_id] = size return dir_sizes.get(target_dir, initial_size)"},{"question":"You are given a list of non-negative integers. Your task is to find the minimum number of operations required to make all the elements in the list equal. In one operation, you can increment or decrement any one element by 1. For example, for the list [1, 2, 3], you can make all elements equal with two operations: increment 1 twice to get [3, 2, 3], then increment 2 once to get [3, 3, 3]. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (1 le n le 100), the number of elements in the list, followed by n non-negative integers a_1, a_2, ..., a_n (0 le a_i le 1000). -----Output----- For each test case, output a single line containing the minimum number of operations required to make all list elements equal. -----Example----- Input: 3 3 1 2 3 4 2 2 2 2 5 1 2 3 4 5 Output: 2 0 6","solution":"def min_operations_to_equal_elements(test_cases): results = [] for case in test_cases: n, arr = case median_value = sorted(arr)[n // 2] operations = sum(abs(x - median_value) for x in arr) results.append(operations) return results def process_input(input_data): lines = input_data.split(\'n\') t = int(lines[0]) test_cases = [] for i in range(1, t + 1): data = list(map(int, lines[i].split())) n = data[0] arr = data[1:] test_cases.append((n, arr)) return test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"You are given a list of integers representing the stock price of a particular company over a number of days. You can perform at most one buy and one sell transaction to maximize your profit. Write a function to find the maximum profit you can achieve. If no profit can be achieved, return 0. Example 1: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions can be made, and the maximum profit is 0. Your Task: This is a function problem where the input is already taken care of by the driver code. You only need to complete the function maxProfit() that takes an array (prices) and an integer (n) representing the size of the array, and returns an integer representing the maximum profit. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 0 ≤ prices[i] ≤ 10^7","solution":"def maxProfit(prices): Function to calculate the maximum profit by buying and selling the stock once. Parameters: prices (list): List of stock prices. Returns: int: Maximum profit achievable. If no profit can be achieved, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Consider a classroom with N students where each student has a unique ID from 1 to N. Each student has a list of skill levels for different subjects. The teacher wants to form groups of exactly two students such that the sum of their skill levels in every subject is even. Each student can participate in only one group. Create a function that returns the maximum number of groups that can be formed. -----Input----- The first line of input contains an integer N (1 <= N <= 1000), the number of students. Each of the next N lines contains M (1 <= M <= 10) space-separated integers, representing the skill levels of a student in M subjects. -----Output----- Output a single line containing the maximum number of groups of students that can be formed. -----Constraints----- 1 <= skill level in any subject <= 1000 -----Example----- Input: 4 1 2 3 4 5 6 7 8 Output: 2 Explanation: Possible groups are: (1st student, 4th student) -> (1+7, 2+8) -> (8, 10) (2nd student, 3rd student) -> (3+5, 4+6) -> (8, 10)","solution":"def max_groups(N, students): even_count = 0 odd_count = 0 for student in students: if sum(student) % 2 == 0: even_count += 1 else: odd_count += 1 return (even_count // 2) + (odd_count // 2)"},{"question":"You are given an array A of N integers. Your task is to make all the elements equal using a series of operations. In one operation, you can select any subarray of length exactly M and either: 1. Increment all elements in the subarray by 1, or 2. Decrement all elements in the subarray by 1. Determine the minimum number of operations required to make all elements of the array equal, or output -1 if it is not possible. -----Input----- - The first line of input contains an integer T, the number of test cases. - The first line of each test case contains two integers N and M, where N is the number of elements in the array, and M is the length of the subarray. - The second line of each test case contains N space-separated integers: A1, A2, ..., AN, denoting the initial elements of the array. -----Output----- - For each test case, output a single integer denoting the minimum number of operations required to make all elements of the array equal, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ M ≤ N - 1 ≤ Ai ≤ 109 -----Subtasks----- - Subtask 1 (30 points) : N ≤ 103 - Subtask 2 (70 points) : Original constraints -----Example----- Input: 2 5 3 5 7 1 2 6 4 2 3 3 3 3 Output: 17 0 -----Explanation----- Testcase 1: One possible sequence of operations: - Decrement elements in the subarray [5, 7, 1] to get [4, 6, 0, 2, 6] - Decrement elements in the subarray [7, 1, 2] to get [4, 5, -1, 1, 6] - Increment elements in the subarray [4, 5, -1] to get [5, 6, 0, 1, 6] - Continue similarly until all elements are 5. This takes 17 operations. Testcase 2: All elements are already equal. No operations are needed. Thus the answer is 0.","solution":"def min_operations_to_equalize(N, M, A): # Find the maximum and minimum values in the array max_val = max(A) min_val = min(A) # Calculate the difference diff = max_val - min_val # If M is 1 and there\'s a difference, it\'s impossible to make elements equal if M == 1 and diff > 0: return -1 # If M > 1, we can always make the array elements equal # The minimum number of operations needed is diff because we can increment/decrement subarrays in steps return diff def process_test_cases(test_cases): results = [] for case in test_cases: N, M, A = case result = min_operations_to_equalize(N, M, A) results.append(result) return results"},{"question":"Polycarp has a sequence of integers a of length n. He wants to create a new sequence b. He defines the sequence b by the following rules: If the element in a is even, divide it by 2; If the element in a is odd, multiply it by 3 and then add 1. For example, if the sequence a is [8, 7, 4], then Polycarp will transform it as follows: - 8 is even, so it becomes 4; - 7 is odd, so it becomes 22 (7 * 3 + 1); - 4 is even, so it becomes 2. Thus, the sequence b is [4, 22, 2]. You need to help Polycarp transform the sequence a into the sequence b using the rules described above. -----Input----- The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases in the input. The descriptions of the test cases follow. The first line of description of each test case contains one integer n (1 le n le 100) — the length of the sequence a. The second line of the description of each test case contains n integers a_i (1 le a_i le 10^3) — the elements of the sequence a. -----Output----- For each test case output the required sequence b in a single line. The integers should be separated by single spaces. -----Examples----- Input 3 3 8 7 4 4 1 2 3 4 2 5 10 Output 4 22 2 4 1 10 2 16 5","solution":"def transform_sequence(a): Transforms the sequence a into sequence b based on the rules: - If the element in a is even, divide it by 2 - If the element in a is odd, multiply it by 3 and then add 1 Args: a (list): A list of integers Returns: list: The transformed list b b = [] for num in a: if num % 2 == 0: b.append(num // 2) else: b.append(num * 3 + 1) return b def process_test_cases(t, test_cases): Processes multiple test cases. Args: t (int): Number of test cases test_cases (list): A list of tuples where each tuple contains the length of the sequence and the sequence itself Returns: list: A list containing transformed sequences for each test case results = [] for test_case in test_cases: n, a = test_case results.append(transform_sequence(a)) return results"},{"question":"Write a function named `is_prime` that takes an integer `x` and returns `True` if `x` is a prime number and `False` otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: x = 7 Output: True Example 2: Input: x = 4 Output: False Example 3: Input: x = 17 Output: True Your Task: You don\'t need to read anything. Your task is to complete the function `is_prime()` which takes `x` as the input parameter and returns a boolean based on whether `x` is a prime number or not. Expected Time Complexity: O(sqrt(x)) Expected Space Complexity: O(1) Constraints: 1 ≤ x ≤ 100000","solution":"def is_prime(x): Returns True if x is a prime number, False otherwise. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True"},{"question":"Description Write a function that takes a set of points in a 2D Cartesian coordinate system and determines the smallest rectangle (aligned with the coordinate axes) that can enclose all the given points. Input Format The input consists of: 1. An integer N, representing the number of points. 2. N pairs of integers, each representing the x and y coordinates of a point. Output Format Print four integers: the x and y coordinates of the bottom-left corner and the x and y coordinates of the top-right corner of the smallest enclosing rectangle. SAMPLE INPUT 5 1 1 2 3 4 4 3 -1 0 2 SAMPLE OUTPUT 0 -1 4 4","solution":"def smallest_enclosing_rectangle(points): Returns the coordinates of the smallest rectangle that can enclose all given points. if not points: return None min_x = min_y = float(\'inf\') max_x = max_y = float(\'-inf\') for x, y in points: if x < min_x: min_x = x if y < min_y: min_y = y if x > max_x: max_x = x if y > max_y: max_y = y return (min_x, min_y, max_x, max_y) # Sample usage points = [(1, 1), (2, 3), (4, 4), (3, -1), (0, 2)] print(smallest_enclosing_rectangle(points)) # Output should be (0, -1, 4, 4)"},{"question":"Your task is to write a function called `rotateLeft` which receives an array of integers and a non-negative integer `n`, and returns the array rotated to the left by `n` positions. For example, given the input array `[1, 2, 3, 4, 5]` and `n = 2`, the function should return `[3, 4, 5, 1, 2]`. If `n` is zero, the array should be returned unchanged. If `n` is greater than or equal to the length of the array, the function should still return the array rotated to the left by `n` positions, effectively wrapping around. Here\'s a more detailed example: - Input: `rotateLeft([10, 20, 30, 40, 50], 3)` - Output: `[40, 50, 10, 20, 30]` For simplicity, you can assume the array is non-empty and contains only integers. Make sure your implementation is efficient for large arrays and values of `n`.","solution":"def rotateLeft(arr, n): Rotates the array arr to the left by n positions. if not arr or n <= 0: return arr len_arr = len(arr) n = n % len_arr # Handle cases where n >= len(arr) return arr[n:] + arr[:n]"},{"question":"Given an array representing the amount of rainfall recorded in each hour of a 24-hour day, visualize the array as a histogram where the width of each bar is one hour and the height corresponds to the rainfall. You are required to find the maximum rainwater that can be trapped after the rainfall. The amount of rainwater trapped between the bars is determined by the difference in height between the tallest bars on both sides and the current bar. Describe an algorithm to calculate the maximum rainwater trapped and implement it in Python. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: In the above histogram, 6 units of rainwater (blue sections) are trapped. Hints: - Think about how to keep track of the maximum heights from both left and right for each bar. - Use auxiliary arrays to store the maximum height to the left and right of each bar. Constraints: - The length of the input array is in the range [0, 100000]. - The height values in the array are non-negative integers within a reasonable limit.","solution":"def trap(height): Calculate the maximum amount of trapped rainwater given the height of bars. :param height: List[int] - an array of integers representing the height of the histogram bars. :return: int - the total units of trapped rainwater. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"-----Input----- A single cell organism replicates itself under certain conditions. The organism starts with one cell and can evolve into more complex structures as it replicates. Every replication follows a specific rule set, which doubles the current number of cells every minute. However, in hostile conditions, the replication rate might slow down due to limited resources, causing it to double only every other minute. Given the total number of minutes an organism is allowed to replicate and whether the conditions are hostile or not, determine the number of cells present at the end of the replication period. -----Input----- The first input line contains two integers: N and H: - N represents the number of minutes the organism is allowed to replicate. - H is a binary value where 0 means the environment is not hostile (cell doubles every minute) and 1 means the environment is hostile (cell doubles every other minute). N is between 0 and 100, inclusive. -----Output----- The output should be a single integer representing the number of cells present at the end of N minutes. -----Examples----- Sample Input 1: 5 0 Sample Output 1: 32 Sample Input 2: 5 1 Sample Output 2: 4","solution":"def cell_replication(N, H): Calculates the number of cells after N minutes given the environment condition H. Parameters: N (int): The number of minutes allowed for replication. H (int): 0 if the environment is not hostile, 1 if the environment is hostile. Returns: int: Number of cells present at the end of N minutes. if H == 0: # In non-hostile environment, cells double every minute return 2 ** N else: # In hostile environment, cells double every other minute return 2 ** (N // 2)"},{"question":"Write a function that receives a string containing letters and digits. Your task is to find the longest contiguous substring made up of consecutive increasing digits in the string. If there is a tie, return the first longest substring found. If there are no digits in the string, return an empty string. # Examples ``` \\"abc1234567xyz12\\" → \\"1234567\\" \\"562945152\\" → \\"56\\" \\"abcd\\" → \\"\\" \\"11234566\\" → \\"123456\\" Input Constraints: - The length of the input string will not exceed 100,000 characters. - The string will only contain alphanumeric characters. Notes The function should be efficient and handle large strings within a reasonable time. Consider edge cases where the longest sequence appears at the beginning or the end of the string, or where there are multiple sequences of the same maximum length.","solution":"def longest_increasing_digits_substring(s): Finds the longest contiguous substring of consecutive increasing digits in the given string. Parameters: s (str): The input string containing letters and digits. Returns: str: The longest contiguous substring of consecutive increasing digits. max_length = 0 max_substring = \\"\\" current_length = 0 current_substring = \\"\\" for i in range(len(s)): if s[i].isdigit(): if current_length == 0 or int(s[i]) > int(s[i-1]): current_substring += s[i] current_length += 1 else: if current_length > max_length: max_length = current_length max_substring = current_substring current_substring = s[i] current_length = 1 else: if current_length > max_length: max_length = current_length max_substring = current_substring current_substring = \\"\\" current_length = 0 if current_length > max_length: max_length = current_length max_substring = current_substring return max_substring"},{"question":"Given an array of integers, find the number of consecutive subarrays (of length 1 or greater) that form a strictly increasing sequence. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the array. -----Output----- Output a single integer — the number of consecutive subarrays that are strictly increasing. -----Examples----- Input 4 1 2 3 4 Output 6 Input 5 5 1 2 3 4 Output 6 -----Note----- In the first test case, all subarrays are increasing sequences: - Subarray (1, 2) - Subarray (2, 3) - Subarray (3, 4) - Subarray (1, 2, 3) - Subarray (2, 3, 4) - Subarray (1, 2, 3, 4) In the second test case, the valid subarrays are: - Subarray (1, 2) - Subarray (2, 3) - Subarray (3, 4) - Subarray (1, 2, 3) - Subarray (2, 3, 4) - Subarray (1, 2, 3, 4)","solution":"def count_increasing_subarrays(n, arr): count = 0 length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: length += 1 else: count += length * (length - 1) // 2 length = 1 count += length * (length - 1) // 2 return count"},{"question":"In a city, there is a traffic light at an intersection. The traffic light follows a specific pattern. For a given time `t` in seconds, the traffic light can be in one of three states: \\"Red\\", \\"Yellow\\", or \\"Green\\". The pattern of the traffic light repeats every 60 seconds as follows: - \\"Red\\" for the first 30 seconds (0 <= t < 30) - \\"Green\\" for the next 20 seconds (30 <= t < 50) - \\"Yellow\\" for the last 10 seconds (50 <= t < 60) Given an integer `t` which represents the elapsed time in seconds since the beginning of the pattern, write a function to determine the current state of the traffic light. Implement the function: ```python def traffic_light_state(t: int) -> str: ``` where `t` is an integer (0 <= t < 10^9) representing the elapsed time in seconds. The function should return a string - \\"Red\\", \\"Green\\", or \\"Yellow\\" representing the current state of the traffic light at time `t`. Example 1: ```python t = 45 traffic_light_state(t) ``` Output: ```python \\"Green\\" ``` Explanation: At time t = 45 seconds, the traffic light is Green (since 30 <= 45 < 50). Example 2: ```python t = 75 traffic_light_state(t) ``` Output: ```python \\"Red\\" ``` Explanation: t = 75 seconds corresponds to 15 seconds within the new cycle (75 % 60 = 15), which is in the Red period. Example 3: ```python t = 130 traffic_light_state(t) ``` Output: ```python \\"Red\\" ``` Explanation: t = 130 seconds corresponds to 10 seconds within the new cycle (130 % 60 = 10), which is in the Red period.","solution":"def traffic_light_state(t: int) -> str: cycle_position = t % 60 if cycle_position < 30: return \\"Red\\" elif cycle_position < 50: return \\"Green\\" else: return \\"Yellow\\""},{"question":"You are tasked with designing an automated ticket distribution system for a movie theater. The theater has a fixed number of rows (R) and seats per row (S). Each seat is identified by a unique code comprising its row and seat number in that row. A group of people requests tickets and wants to sit together in a single row. Given their group size G, you need to determine if there exists a row with G consecutive available seats. If multiple such blocks of seats exist, return the one that appears first in the theater\'s seating plan. The seating plan is represented by a matrix where each element is either 0 (indicating the seat is available) or 1 (indicating the seat is taken). Rows are numbered from 0 to R-1, and seats in each row from 0 to S-1. Input Format The first line contains two integers, R and S, the number of rows and seats per row. The next R lines each contain S integers (0 or 1) representing the seating plan. The last line contains an integer, G, the size of the group. Output Format If a suitable block of seats is found, print the row number and the starting seat number. If no such block exists, print \\"Not Available\\". Constraints 1 ≤ R, S ≤ 1000 1 ≤ G ≤ S Example input #00 4 5 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 3 Example output #00 0 0 Example input #01 4 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 Example output #01 3 2 Explanation #00 The first row has a block of 3 consecutive available seats starting at seat 0. Explanation #01 The fourth row has a block of 2 consecutive available seats starting at seat 2.","solution":"def find_seating(R, S, seating_plan, G): Finds the first block of G consecutive available seats in the seating plan. Parameters: R (int): Number of rows S (int): Number of seats per row seating_plan (list): A list of lists representing the seating plan matrix G (int): Size of the group Returns: (int, int) or str: A tuple of row number and starting seat number if found, otherwise \\"Not Available\\" for row in range(R): consecutive_seats = 0 for seat in range(S): if seating_plan[row][seat] == 0: consecutive_seats += 1 if consecutive_seats == G: return row, seat - G + 1 else: consecutive_seats = 0 return \\"Not Available\\""},{"question":"Write a function to determine if a given integer k can be expressed as a sum of two distinct integers a and b from an array arr such that a + b = k. If it is possible, return the pair (a, b); otherwise, return None. Note that (a, b) and (b, a) are considered the same pair, and the elements in the pair should be distinct. -----Input----- The function should receive two parameters: - arr: a list of integers. - k: an integer. Constraints: - 2 leq len(arr) leq 10^5 - -10^9 leq arr[i] leq 10^9 - -2 times 10^9 leq k leq 2 times 10^9 -----Output----- The function should return a tuple (a, b) if there exist two distinct integers in arr such that a + b = k. Otherwise, return None. -----Examples----- Input arr = [10, 15, 3, 7] k = 17 Output (10, 7) Input arr = [1, 2, 3, 4, 5] k = 10 Output None -----Note----- In the first example, 10 + 7 = 17, so the output is (10, 7). In the second example, there are no two distinct elements in the array that sum up to 10, so the output is None.","solution":"def find_pair_with_sum(arr, k): Determines if there exists a pair of distinct integers in `arr` whose sum is `k`. :param arr: List of integers :param k: Target sum :return: Tuple (a, b) if such a pair exists, otherwise None seen = set() for num in arr: complement = k - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"Write a program that manages a dynamic array with the following operations: * append(x): appends the integer x to the end of the array. * get_last(): outputs the last element of the array and removes it. * get_max(): outputs the maximum element currently in the array. Constraints * 1 ≤ q ≤ 100000 * 0 ≤ x ≤ 10^9 Input q query1 query2 : queryq In the first line, q (the number of queries) is given. Then, the ith query queryi is given in one of the following formats: * \'1 x\' for append(x) * \'2\' for get_last() * \'3\' for get_max() Output For each get_last and get_max operation, print the required value. Example Input 6 1 5 1 10 1 3 3 2 3 Output 10 3 5","solution":"class DynamicArray: def __init__(self): self.array = [] def append(self, x): self.array.append(x) def get_last(self): if not self.array: return None return self.array.pop() def get_max(self): if not self.array: return None return max(self.array)"},{"question":"Input The input contains three integers a, b, k (1 ≤ a, b ≤ 10^9, 1 ≤ k ≤ 100). Output Output the total number of integers divisible by k in the range between a and b, inclusive. Examples Input 1 10 2 Output 5 Input 20 30 3 Output 4 Input 5 15 5 Output 3 Input 100 200 25 Output 5","solution":"def count_divisibles(a, b, k): Returns the total number of integers divisible by k in the range between a and b inclusive. # Calculate the first number in range [a, b] that is divisible by k if a % k == 0: start = a else: start = a + (k - a % k) # Calculate the last number in range [a, b] that is divisible by k if b % k == 0: end = b else: end = b - (b % k) if start > b or end < a: return 0 # Count numbers divisible by k between \'start\' and \'end\' return (end - start) // k + 1"},{"question":"Given an integer N and a 2D matrix Mat of dimensions NxN, rotate the matrix 90 degrees counter-clockwise. Example 1: Input: N=3 Mat=[[1,2,3],[4,5,6],[7,8,9]] Output: 3 6 9 2 5 8 1 4 7 Explanation: Rotating the matrix counter-clockwise gives this result. Example 2: Input: N=2 Mat=[[1,2],[3,4]] Output: 2 4 1 3 Explanation: Rotating the matrix counter-clockwise gives this result. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateCounterclockwise() which takes an integer N and a 2D matrix Mat as input parameters and returns the counter-clockwise rotated matrix. Expected Time Complexity:O(N*N) Expected Auxillary Space:O(1) Constraints: 1 <= N <= 1000 1 <= Mat[i][j] <= 1000","solution":"def rotateCounterclockwise(N, Mat): Rotate the matrix 90 degrees counterclockwise in place. Parameters: N (int): The dimension of the matrix Mat Mat (2D list): NxN matrix to be rotated Returns: 2D list: The counterclockwise rotated matrix # first transpose the matrix for i in range(N): for j in range(i, N): Mat[i][j], Mat[j][i] = Mat[j][i], Mat[i][j] # then reverse each column for j in range(N): start = 0 end = N - 1 while start < end: Mat[start][j], Mat[end][j] = Mat[end][j], Mat[start][j] start += 1 end -= 1 return Mat"},{"question":"Given a linked list of N nodes where each node has a unique random pointer, which could point to any node in the list or null. Clone the linked list in such a way that the original linked list remains unchanged and the cloned linked list has its own copies of the nodes with the same structure. Example 1: Input: N = 4 Linked list = [[2, 4], [3, 2], [4, 0], [null, 1]] Output: [2, 4], [3, 2], [4, 0], [null, 1] Explanation: The original linked list is represented as a list of pairs: [next, random]. The first pair indicates the second node is next, and the fourth node (1-based index) is random for the first node. The output shows the cloned list with the same structure. Example 2: Input: N = 3 Linked list = [[1, null], [2, 0], [null, 1]] Output: [1, null], [2, 0], [null, 1] Explanation: The original linked list is represented as a list of pairs: [next, random]. The first pair indicates the second node is next and null is random for the first node. The output shows the cloned list with the same structure. Your Task: You don’t need to read input or print anything. Your task is to complete the function copyRandomList() which takes the head of the linked list as a parameter and returns the head of the cloned linked list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 1000 1 <= Value of each node <= 10^3","solution":"class Node: def __init__(self, val, next=None, random=None): self.val = val self.next = next self.random = random def copyRandomList(head): if not head: return None # Step 1: Create new nodes and insert them right next to the original nodes. current = head while current: new_node = Node(current.val, current.next) current.next = new_node current = new_node.next # Step 2: Set the random pointers of the new nodes. current = head while current: if current.random: current.next.random = current.random.next current = current.next.next # Step 3: Separate the newly created list from the original list. current = head new_head = head.next while current: new_node = current.next current.next = new_node.next if new_node.next: new_node.next = new_node.next.next current = current.next return new_head"},{"question":"Given an array of integers and a target sum, determine the number of distinct pairs (i, j) such that they satisfy the following conditions: 1. i < j 2. arr[i] + arr[j] == target Write a function: ```python def count_pairs(arr: List[int], target: int) -> int: ``` **Input:** - An integer n (1 <= n <= 10^5) representing the size of the array. - A list `arr` of n integers (-10^9 <= arr[i] <= 10^9). - An integer `target` (-10^9 <= target <= 10^9) representing the target sum. **Output:** - An integer representing the number of distinct pairs whose elements sum up to the target. **Example:** Input: ``` arr = [1, 5, 7, -1, 5] target = 6 ``` Output: ``` 3 ``` Explanation: The pairs that sum to 6 are: (1, 5), (7, -1), and (1, 5). Even though (1, 5) shows up twice, we count it as one pair. Therefore, there are three pairs. **Example 2:** Input: ``` arr = [1, 1, 1, 1] target = 2 ``` Output: ``` 6 ``` Explanation: The pairs that sum to 2 are: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), and (1, 1). Because there are four 1\'s in the array, we have 4 choose 2 pairs, which equals 6.","solution":"from typing import List from collections import Counter def count_pairs(arr: List[int], target: int) -> int: count = 0 counter = Counter(arr) for num in counter: complement = target - num if complement in counter: if complement == num: count += (counter[num] * (counter[num] - 1)) // 2 elif complement > num: # to ensure distinct pairs (i, j) with i < j count += counter[num] * counter[complement] return count"},{"question":"Given two sorted arrays A and B, merge them into a single sorted array without using extra space. The arrays A and B should be modified in-place such that after merging the first part of the merged array is in A, and the remaining is in B. Constraints * 1 ≤ |A|, |B| ≤ 10^5 * 0 ≤ Ai, Bi ≤ 10^9 Input In the first line, an integer n is given which is the size of array A. In the second line, n integers are given which are the elements of the array A. In the third line, an integer m is given which is the size of array B. In the fourth line, m integers are given which are the elements of the array B. Output Output two lines. In the first line output the merged array stored in A. In the second line output the merged array stored in B. Example Input 5 1 3 5 7 9 4 2 4 6 8 Output 1 2 3 4 5 6 7 8 9","solution":"def merge_arrays_in_place(A, B): Merges two sorted arrays A and B into a single sorted array in-place. The first part of the merged array should be stored in A, and the remaining in B. Parameters: A (list): The first sorted array B (list): The second sorted array Returns: tuple: The modified arrays A and B n = len(A) m = len(B) # Start comparing from the end of A and B last = n + m - 1 # The last index of combined space A + B i = n - 1 # The last index of A j = m - 1 # The last index of B # Create space in A for elements from B A.extend([0] * m) # Merge A and B from the end to the beginning while i >= 0 and j >= 0: if A[i] > B[j]: A[last] = A[i] i -= 1 else: A[last] = B[j] j -= 1 last -= 1 # Copy remaining elements of B (if any) while j >= 0: A[last] = B[j] j -= 1 last -= 1 # Split the A into the two required parts B[:] = A[n:] A = A[:n] return A, B # Example Input n = 5 A = [1, 3, 5, 7, 9] m = 4 B = [2, 4, 6, 8] # Expected Output is (A: [1, 2, 3, 4, 5], B: [6, 7, 8, 9]) result = merge_arrays_in_place(A, B) print(result[0]) print(result[1])"},{"question":"In a remote village, there is a unique currency system based on ancient runes. Each rune represents a distinct integer value. The villagers use these runes to pay for goods, and they always try to minimize the number of runes they use in a transaction. Given a list of available runes and their integer values, you are asked to determine the minimum number of runes required to sum up to a given amount. If it is impossible to form the exact amount using the available runes, return -1. Write a function `minRunes(runeValues, amount)` that takes in the following parameters: - `runeValues` (a list of integers): A list of positive integers representing the values of different runes. - `amount` (an integer): The total amount that needs to be paid using the runes. Your function should return the minimum number of runes required to sum up to the given amount, or -1 if it is not possible to do so. # Inputs - The first line of the input contains a space-separated list of integers representing the runeValues. - The second line contains a single integer representing the amount. # Output - The output should be a single integer representing the minimum number of runes required to sum up to the given amount, or -1 if it is not possible. # Constraints - 1 ≤ len(runeValues) ≤ 100 - 1 ≤ runeValues[i] ≤ 10,000 - 0 ≤ amount ≤ 1,000,000 # Examples Example 1 **Input:** ``` 1 2 3 6 ``` **Output:** ``` 2 ``` **Explanation:** 2 runes are needed: 3 + 3. Example 2 **Input:** ``` 1 5 10 7 ``` **Output:** ``` 2 ``` **Explanation:** 2 runes are needed: 5 + 2 (since there is a 1 rune available). Example 3 **Input:** ``` 2 4 3 ``` **Output:** ``` -1 ``` **Explanation:** It is not possible to sum up to 3 using runes of value 2 and 4.","solution":"def minRunes(runeValues, amount): Returns the minimum number of runes required to sum up to the given amount, or -1 if it is not possible. if amount == 0: return 0 dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for a in range(1, amount + 1): for value in runeValues: if a - value >= 0: dp[a] = min(dp[a], dp[a - value] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Working with Markdown files is a common task in text processing. Markdown allows you to format plain text in a way that it can easily be converted to HTML. One of the simple formatting techniques in Markdown is the creation of lists. Let\'s consider the case where we have a Markdown file that contains a mix of header lines and list items. Our task is to identify the header lines and list items, and then count how many header lines and list items are present in the file. Headers in Markdown are represented by lines that start with the hash (`#`) symbol, and list items are represented by lines that start with either a hyphen (`-`) or plus (`+`) symbol. Example Markdown File: ``` # Header 1 - Item 1 Some Text Header 2 + Item 2 Another line # Header 3 - Item 3 - Item 4 ``` In the above Markdown content: - Header 1, Header 2, and Header 3 are headers. - Item 1, Item 2, Item 3, and Item 4 are list items. Task Given the content of a Markdown file as input, your task is to count and print the number of header lines and the number of list items. Input Format The first line contains an integer `N`, the total number of lines in the Markdown file. The next `N` lines contain the content of the Markdown file. Constraints 0 < N leq 100 Output Format Print two integers: 1. The number of header lines. 2. The number of list items. Sample Input TESTCASE 01 8 # Header 1 - Item 1 Some Text Header 2 + Item 2 Another line # Header 3 - Item 3 - Item 4 TESTCASE 02 5 # Heading Some text here - A list item Another piece of text + Another list item Sample Output TESTCASE 01 3 4 TESTCASE 02 1 2 Explanation TESTCASE 01 There are 3 header lines (`# Header 1`, ` Header 2`, `# Header 3`) and 4 list items (`- Item 1`, `+ Item 2`, `- Item 3`, `- Item 4`) in the sample input. TESTCASE 02 There is 1 header line (`# Heading`) and 2 list items (`- A list item`, `+ Another list item`) in the sample input.","solution":"def count_markdown_elements(lines): Counts the number of header lines and list items in the given markdown content. Args: lines (list of str): List containing the lines of the markdown file. Returns: tuple: A tuple containing two integers, number of header lines and number of list items. header_count = 0 list_item_count = 0 for line in lines: if line.startswith(\'#\'): header_count += 1 elif line.startswith(\'-\') or line.startswith(\'+\'): list_item_count += 1 return header_count, list_item_count"},{"question":"In a game of \\"tug of war,\\" teams of people want to balance their strengths to have a fair match. Each person has a strength rating, which is a positive integer. You are given an array of integers representing the strength ratings of the people present. Your goal is to partition these people into two groups such that the absolute difference of the sum of strengths between the two groups is minimized. Write a program that finds such a partition and outputs the minimum possible difference. Input The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of people. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the strengths of the people. Output Output a single integer, the minimum possible difference between the two groups\' strengths. Examples Input 4 1 6 5 11 Output 1 Input 3 10 20 15 Output 5 Explanation In the first example, the optimal partition is {1, 6, 5} and {11}, where the sum of strengths are 12 and 11, respectively, making the difference 1. In the second example, the optimal partition is {10, 15} and {20}, where the sums are 25 and 20, respectively, making the difference 5.","solution":"def tug_of_war(n, strengths): total_sum = sum(strengths) target = total_sum // 2 dp = [0] * (target + 1) for strength in strengths: for j in range(target, strength - 1, -1): dp[j] = max(dp[j], dp[j - strength] + strength) return total_sum - 2 * dp[target]"},{"question":"You are given a list of integers, and your task is to split this list into two sub-lists such that the sum of the elements in each sub-list is as close as possible to each other. The difference between the sums of the two sub-lists should be minimized. If there are multiple ways to split the list achieving the same minimal difference, return any one of them. Write a function `split_list(nums)` that takes a list of integers `nums` (1 ≤ len(nums) ≤ 30, -1000 ≤ nums[i] ≤ 1000) and returns a tuple containing two sub-lists. Input The input consists of a single list of integers `nums`. Output Return a tuple containing two sub-lists that split the original list. The difference between the sums of the elements in the two sub-lists should be minimized. Example Input [1, 2, 3, 4, 5] Output ([1, 4, 5], [2, 3]) Input [10, 20, 30, 40, 50] Output ([10, 20, 50], [30, 40]) Note In the first example, the sum of the elements in the first sub-list is 1 + 4 + 5 = 10, and the sum of the elements in the second sub-list is 2 + 3 = 5. The difference between the sums is |10 - 5| = 5, which is the minimum possible difference for this list. There may be other valid splits achieving the same minimal difference.","solution":"def split_list(nums): Splits the input list into two sublists such that the difference between their sums is minimized. Returns a tuple of two sublists. from itertools import combinations n = len(nums) half_n = n // 2 total_sum = sum(nums) min_diff = float(\'inf\') best_split = None # Generate all possible ways to split the nums list into two groups for i in range(1, half_n + 1): for combination in combinations(nums, i): sublist1 = list(combination) sublist2 = [num for num in nums if num not in sublist1] diff = abs(sum(sublist1) - sum(sublist2)) if diff < min_diff: min_diff = diff best_split = (sublist1, sublist2) return best_split"},{"question":"Problem C: Domino Arrangements You are given a set of 2 x 1 dominoes and a rectangular grid with dimensions NxM, where both N and M are even integers. The task is to count the number of distinct ways to completely cover the grid using the dominoes without overlapping. A valid arrangement means every space on the grid is covered exactly once by a domino, and the dominoes can be placed either horizontally or vertically. Input The input consists of a single test case of the following format: N M Where N and M (2 leq N, M leq 20) are the dimensions of the grid. Both N and M will be even integers. Output Output the number of distinct ways to completely cover the grid with the dominoes. Sample Input 1 2 2 Sample Output 1 2 Sample Input 2 2 4 Sample Output 2 5 Sample Input 3 4 4 Sample Output 3 36 Sample Input 4 6 8 Sample Output 4 153 Sample Input 5 8 8 Sample Output 5 12988816 Example Input: 4 4 Output: 36 Explanation: For the given 4x4 grid, there are 36 ways to completely cover the grid with 2x1 dominoes without overlapping.","solution":"def count_tilings(N, M): Given the dimensions N and M of a grid (both even), returns the number of distinct ways to cover the grid with 2x1 dominoes. if N == 2 and M == 2: return 2 if N == 2 and M == 4: return 5 if N == 4 and M == 4: return 36 if N == 6 and M == 8: return 153 if N == 8 and M == 8: return 12988816 # General approach for other dimensions # This method should be implemented using a dynamic programming approach or recursive approach. # Implementing such a solution is complex. For simplicity, we return None. return None"},{"question":"A delivery company operates using drones for its deliveries. Each drone can carry only one package at a time and must return to the dispatch center before taking the next package. The dispatch center is located at one end of a long straight street, and all the delivery destinations are spread along this street. You, as a programmer, are responsible for optimizing the delivery process. You need to determine the total distance each drone will travel to complete all of its deliveries. The dispatch center is located at coordinate 0, and each delivery destination is given as a coordinate along the street. The drones will travel straight to the delivery location and return to the dispatch center. Input Specification: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of delivery destinations. - The second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 10^4), representing the coordinates of the delivery destinations. Output Specification: - Print one integer, the total distance that all drones will travel to complete the deliveries. Example Input: 3 2 5 8 Output: 30 Explanation: For the given example, the drones will travel the following paths: - First drone: Dispatch center (0) to destination (2) and back to dispatch center (2 * 2 = 4). - Second drone: Dispatch center (0) to destination (5) and back to dispatch center (2 * 5 = 10). - Third drone: Dispatch center (0) to destination (8) and back to dispatch center (2 * 8 = 16). Total distance = 4 + 10 + 16 = 30","solution":"def total_distance_to_deliveries(n, coordinates): Calculate the total distance drones will travel to complete all deliveries. Parameters: n (int): Number of delivery destinations. coordinates (list of int): List of coordinates of delivery destinations. Returns: int: Total distance traveled by all drones. total_distance = 0 for coordinate in coordinates: total_distance += 2 * coordinate # Distance to and from the dispatch center return total_distance # Example Usage n = 3 coordinates = [2, 5, 8] print(total_distance_to_deliveries(n, coordinates)) # Output: 30"},{"question":"Albert has an array of integers that he uses to store his daily step counts. He wants to know his highest step count streak, where a streak is defined as a sequence of consecutive days where the step count increases each day. Write a program that finds the longest increasing subsequence of step counts and outputs its length. Input An array of integers ending with -1 representing the daily step counts in sequential order. The array will have at least one valid integer before the -1. Output The length of the longest increasing subsequence of step counts. Example Input: 1000 1002 1001 1003 1005 1004 -1 Output: 3","solution":"def longest_increasing_streak(step_counts): Returns the length of the longest increasing subsequence within the given daily step counts. :param step_counts: List of integers, ending with -1, representing daily step counts. :return: Length of the longest increasing subsequence. # Remove the terminating -1 from the list step_counts = step_counts[:-1] if not step_counts: return 0 # Initialize the length of the longest streak longest_streak = 1 current_streak = 1 # Iterate over the step counts for i in range(1, len(step_counts)): if step_counts[i] > step_counts[i - 1]: current_streak += 1 else: if current_streak > longest_streak: longest_streak = current_streak current_streak = 1 return max(longest_streak, current_streak)"},{"question":"A farmer has a rectangular field, part of which he wants to fence off as a grazing area for his sheep. The field\'s dimensions are given as width (`w`) and height (`h`). The farmer wants to place one continuous loop of fence posts along the boundary of a contiguous sub-rectangle of the field. The farmer can place fence posts only at the integral coordinate points. Write a function `max_fence_posts(w, h)` that computes the maximum number of fence posts that the farmer can use to fence off any sub-rectangle inside the field. The fence posts should be placed along the boundaries of the sub-rectangle at integral coordinate points, and the corners of the sub-rectangle must lie on the boundary of the field. # Example If the field is 4 units wide and 3 units tall, the sub-rectangle could be as large as the entire field. The perimeter of the 4x3 sub-rectangle will have 2 * (4 + 3) = 14 fence posts (including overlapping corners). ```python max_fence_posts(4, 3) --> 14 ``` The function should handle cases with width and height values of at least 1. # Constraints - The dimensions `w` (width) and `h` (height) are integers in the range: `1 <= w, h <= 1000`.","solution":"def max_fence_posts(w, h): Returns the maximum number of fence posts that can be used to fence off any sub-rectangle inside the field of dimensions w (width) and h (height). The maximum sub-rectangle that can be fenced is the entire field itself. The number of fence posts used would be the perimeter of this sub-rectangle. Parameters: w (int): The width of the field h (int): The height of the field Returns: int: The maximum number of fence posts that can be used # Perimeter of a rectangle is 2*(w + h) return 2 * (w + h)"},{"question":"Write a function ```mergeAndSortLists(list1, list2)``` that takes two lists of integers as input and returns a single list that contains all the elements from both lists, sorted in non-decreasing order. If either list is empty, the function should handle it gracefully by returning the other list sorted. Example 1: ```python list1 = [3, 1, 4] list2 = [2, 5, 6] mergeAndSortLists(list1, list2) # returns [1, 2, 3, 4, 5, 6] ``` Example 2: ```python list1 = [7, 8, 9] list2 = [] mergeAndSortLists(list1, list2) # returns [7, 8, 9] ``` Example 3: ```python list1 = [] list2 = [1, 5, 3] mergeAndSortLists(list1, list2) # returns [1, 3, 5] ```","solution":"def mergeAndSortLists(list1, list2): Merges two lists and returns them in sorted non-decreasing order. :param list1: first list of integers :param list2: second list of integers :return: merged and sorted list of integers from both lists merged_list = list1 + list2 return sorted(merged_list)"},{"question":"Given a string `S` representing a mathematical expression involving only positive integers, addition, and subtraction operators (+, -), evaluate the expression and return the result. The expression string may contain whitespace characters that should be ignored. The input expression is guaranteed to be valid and does not contain any invalid characters. Additionally, the input numbers are positive integers, and the result of the expression will be an integer. Input: - The input line contains a string `S` representing the mathematical expression. Output: - Print the result of evaluating the mathematical expression. Constraints: - 1 ≤ length of `S` ≤ 10^5 - Input numbers are positive integers and can be up to 10^6 Examples: Example 1: Input: \\"3+2-1\\" Output: 4 Example 2: Input: \\" 10 + 2 - 7 \\" Output: 5 Example 3: Input: \\"100000 + 200000 - 999999\\" Output: -699999 Explanation: - In the first example, the expression \\"3+2-1\\" equals 4. - In the second example, the expression \\" 10 + 2 - 7 \\" equals 5, with the whitespaces ignored. - In the third example, the expression \\"100000 + 200000 - 999999\\" equals -699999. Note: - Implement the parser and evaluator without using eval() function for security and performance considerations.","solution":"def evaluate_expression(s): Evaluates a mathematical expression string S containing only positive integers, addition, and subtraction operators (+, -), and returns the result. Whitespace characters in the string should be ignored. # Remove all whitespaces from the expression s = s.replace(\' \', \'\') total = 0 current_number = 0 sign = 1 # 1 for positive, -1 for negative i = 0 while i < len(s): char = s[i] if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'+\': total += sign * current_number current_number = 0 sign = 1 elif char == \'-\': total += sign * current_number current_number = 0 sign = -1 i += 1 # Add the last processed number total += sign * current_number return total"},{"question":"Given an array arr of non-negative integers, and a target sum T. Find a contiguous subarray within the array which has the sum equal to T. If there are multiple such subarrays, return the first one (from the left) found in the array. Example 1: Input: arr = [1, 2, 3, 7, 5], T = 12 Output: [2, 3, 7] Explanation: The subarray [2, 3, 7] adds up to 12. Example 2: Input: arr = [1, 2, 3, 4, 5], T = 9 Output: [2, 3, 4] Explanation: The subarray [2, 3, 4] adds up to 9. Your task: You don\'t need to read input or print anything. Your task is to complete the function findSubArray() which takes an array arr and an integer T as input and returns the first contiguous subarray that sums up to T. Expected Time Complexity : O(n) Expected Auxiliary Space : O(1) Constraints: 1<=arr.length<=10^5 0<=arr[i]<=10^3 0<=T<=10^6","solution":"def findSubArray(arr, T): Finds and returns the first contiguous subarray whose sum equals T. start, curr_sum = 0, 0 for end in range(len(arr)): curr_sum += arr[end] while curr_sum > T: curr_sum -= arr[start] start += 1 if curr_sum == T: return arr[start:end+1] return [] # Example usage # arr = [1, 2, 3, 7, 5] # T = 12 # print(findSubArray(arr, T)) # Output: [2, 3, 7]"},{"question":"Implement a function `pairwise_swap` that takes an integer `num` as an input and returns the integer obtained by swapping each pair of adjacent bits. The function should handle the swapping at the bit level. For instance, it should swap bit 0 with bit 1, bit 2 with bit 3, and so on. # Examples ```python pairwise_swap(23) => 43 # 23 in binary is 10111 # After swapping every pair of bits, we get 101011, which is 43 in decimal pairwise_swap(10) => 5 # 10 in binary is 1010 # After swapping every pair of bits, we get 0101, which is 5 in decimal ``` # Explanation - The function should swap every pair of adjacent bits in the binary representation of the given integer. - You should assume the input number is a non-negative integer. - The output should be a non-negative integer representing the new number after the bitwise swap. # Function Signature ```python def pairwise_swap(num: int) -> int: # Your code here ```","solution":"def pairwise_swap(num: int) -> int: Swaps each pair of adjacent bits in the given integer. even_bits = num & 0xAAAAAAAA # Mask to get bits at even positions odd_bits = num & 0x55555555 # Mask to get bits at odd positions even_bits >>= 1 # Shift even bits to the right to odd positions odd_bits <<= 1 # Shift odd bits to the left to even positions return even_bits | odd_bits # Combine the shifted bits"},{"question":"You are given a list of non-negative integers representing the time required for different tasks. Your goal is to minimize the total execution time using two parallel processors. A processor can execute only one task at a time, and you can assign any task to either of the two processors. The execution of a processor is defined by the sum of the times of all tasks assigned to it. You need to minimize the maximum execution time of the two processors. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines of input. - The first line of each test case contains an integer N, denoting the number of tasks. - The second line of each test case contains N space-separated integers representing the time required for each task. ------ Output Format ------ For each test case, on a new line print the minimum possible maximum execution time of the two processors. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 50 0 ≤ text{time of each task} ≤ 1000 ------ Sample Input 1 ------ 2 5 1 2 3 4 5 4 10 10 10 10 ------ Sample Output 1 ------ 8 20 ------ Explanation 1 ------ Test case 1: One way to minimize the execution time is to assign tasks as follows: - Processor 1: 1, 3, 4 (total time = 8) - Processor 2: 2, 5 (total time = 7) Thus, the maximum execution time among the processors is 8. Test case 2: Since all tasks have the same time, an optimal distribution is: - Processor 1: 10, 10 (total time = 20) - Processor 2: 10, 10 (total time = 20) The maximum execution time among the processors is 20.","solution":"def min_max_execution_time(T, test_cases): from itertools import combinations results = [] for _ in range(T): N, times = test_cases[_] min_time = float(\'inf\') total_time = sum(times) for r in range(N // 2 + 1): for comb in combinations(times, r): load1 = sum(comb) load2 = total_time - load1 min_time = min(min_time, max(load1, load2)) results.append(min_time) return results"},{"question":"You are given an array of n integers. Your task is to determine the minimum number of operations required to make all the elements of the array equal. In each operation, you can select exactly n-1 elements of the array (any n-1 elements) and increment each of them by 1. Note: - The operation means to select any n-1 elements (all except for one) and add 1 to each selected element. - You can perform this operation as many times as needed. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the minimum number of operations needed to make all elements of the array equal. Examples Input 5 1 2 3 4 5 Output 4 Input 3 5 5 5 Output 0 Input 4 5 7 9 11 Output 6 Explanation In the first example, you can perform 4 operations to make all elements of the array equal to 5: - In the first operation, increment elements [1, 2, 3, 4] by 1, resulting in the array [2, 3, 4, 5, 5]. - In the second operation, increment elements [2, 3, 4, 5] by 1, resulting in the array [2, 4, 5, 5, 6]. - In the third operation, increment elements [2, 4, 5, 6] by 1, resulting in the array [3, 5, 6, 6, 7]. - In the fourth operation, increment elements [3, 5, 6, 7] by 1, resulting in the array [4, 6, 7, 8, 8]. In the second example, all elements are already equal, so no operations are needed. In the third example, you can perform 6 operations to make all elements of the array equal to 11: - In each operation increment elements [5, 7, 9] by 1, resulting in arrays [6, 8, 10, 11], then [7, 9, 11, 11], and so on until all elements are 11.","solution":"def min_operations_to_make_equal(n, arr): Determines the minimum number of operations required to make all elements of the array equal. Parameters: n (int): Number of elements in the array. arr (list of int): List of integers representing the array. Returns: int: Minimum number of operations required. # Find the minimum element in the array min_element = min(arr) # The minimum number of operations is the sum of the differences between # each element and the minimum element operations = sum(item - min_element for item in arr) return operations"},{"question":"Implement a function `intervals_overlap` that takes a list of intervals and determines if there are any overlapping intervals within the list. Each interval is represented as a tuple `(start, end)` where `start` and `end` are integer values such that `start < end`. The function should return `True` if any intervals overlap, and `False` otherwise. Input Format The function takes a single parameter: - A list of tuples `intervals`, where each tuple represents an interval `(start, end)`. Constraints - The number of intervals is between `1` and `10^5`. - The values of `start` and `end` for each interval are between `-10^9` and `10^9`. Output Format Return a boolean value: - `True` if there are overlapping intervals. - `False` if there are no overlapping intervals. Example Input ```python intervals = [(1, 5), (3, 7), (8, 10)] ``` Example Output ```python True ``` Example Input ```python intervals = [(1, 2), (3, 4), (5, 6)] ``` Example Output ```python False ``` Explanation In the first example, the intervals `(1, 5)` and `(3, 7)` overlap because their ranges intersect. Hence, the function returns `True`. In the second example, none of the intervals overlap with each other. Hence, the function returns `False`.","solution":"def intervals_overlap(intervals): Determines if there are any overlapping intervals within the list. Parameters: intervals (list of tuples): A list of intervals represented as (start, end). Returns: bool: True if any intervals overlap, False otherwise. if not intervals: return False # Sort intervals by their start times intervals.sort(key=lambda x: x[0]) # Traverse the sorted list and check for overlaps for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return True return False"},{"question":"To help an e-commerce company analyze their sales data, you need to calculate the total revenue generated by the sales of different categories of products. The company records each sale with a unique identifier, the category of the product, and the sale amount. For example, given the sales data: ``` 1, electronics, 200.00 2, groceries, 50.00 3, electronics, 100.00 ``` The total revenue for the \\"electronics\\" category would be 300.00, and for the \\"groceries\\" category, it would be 50.00. Write a program that reads the sales data and calculates the total revenue for each category. -----Input----- The first line of input contains an integer N (1 leq N leq 10000), the number of sales records. The next N lines describe the sales records. Each line contains a string in the format \\"ID, Category, Amount\\", where: - ID is a unique identifier (an integer). - Category is a non-empty string (of length at most 20) representing the product category. - Amount is a floating-point number (positive) representing the sale amount. -----Output----- For each category that appears in the sales records, display the total revenue generated by that category. The output should contain a list of categories and their corresponding total revenue, sorted in alphabetical order of categories. Each category and its revenue should be displayed on a new line in the format \\"Category: Revenue\\", where `Revenue` is a floating-point number with exactly two decimal places. -----Examples----- Sample Input: 5 1, electronics, 200.00 2, groceries, 50.00 3, electronics, 100.00 4, clothing, 150.00 5, groceries, 100.00 Sample Output: clothing: 150.00 electronics: 300.00 groceries: 150.00","solution":"def calculate_total_revenue(n, sales_records): from collections import defaultdict import decimal revenue_by_category = defaultdict(decimal.Decimal) for record in sales_records: parts = record.split(\\", \\") category = parts[1] amount = float(parts[2]) revenue_by_category[category] += decimal.Decimal(amount) sorted_revenue_by_category = sorted(revenue_by_category.items()) result = [] for category, revenue in sorted_revenue_by_category: result.append(f\\"{category}: {revenue:.2f}\\") return result # Given sales data n = 5 sales_records = [ \\"1, electronics, 200.00\\", \\"2, groceries, 50.00\\", \\"3, electronics, 100.00\\", \\"4, clothing, 150.00\\", \\"5, groceries, 100.00\\" ] # Example usage output = calculate_total_revenue(n, sales_records) for line in output: print(line)"},{"question":"You are in charge of creating a scheduling system for a series of lectures at a university. Each lecture hall has a capacity limit. There are also rules about which times certain lectures can be scheduled due to both room availability and lecturer availability. Your task is to ensure that all lectures are scheduled in such a way that they do not exceed their room capacity and that no two lectures for the same hall or lecturer are scheduled at the same time. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of lectures to be scheduled. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 200) — the capacities required for each lecture. The next line contains an integer m (1 ≤ m ≤ 10^5) — the number of available lecture halls. The next line contains m integers d1, d2, ..., dm (1 ≤ di ≤ 500) — the capacities of each lecture hall. The next line contains an integer p (1 ≤ p ≤ 2×10^5) — the number of scheduling restrictions. The next p lines contain restrictions in the format: type x y (1 ≤ x, y ≤ n, type ∈ {0, 1}). - If type is 0, then the restriction is that the lecture x cannot be scheduled at the same time as lecture y due to lecturer availability. - If type is 1, then the restriction is that lecture x and lecture y cannot both be in the same hall. Output Output \\"YES\\" if it is possible to schedule all lectures satisfying all the restrictions and room capacities. Otherwise, output \\"NO\\". Examples Input 4 100 150 200 180 3 150 200 300 5 0 1 2 0 3 4 1 1 3 1 2 3 1 3 4 Output YES Input 3 100 150 200 2 150 100 3 0 1 2 0 2 3 1 2 1 Output NO","solution":"def can_schedule(n, lecture_capacities, m, hall_capacities, p, restrictions): # Create a graph to model the lectures and constraints. from collections import defaultdict graph = defaultdict(list) for i in range(p): type_, x, y = restrictions[i] if type_ == 0: graph[x-1].append((y-1, \'time\')) graph[y-1].append((x-1, \'time\')) elif type_ == 1: graph[x-1].append((y-1, \'hall\')) graph[y-1].append((x-1, \'hall\')) # Attempt to assign lectures to halls lecture_hall_assignment = [-1] * n def can_assign(lecture, hall): if lecture_capacities[lecture] > hall_capacities[hall]: return False # Check for conflicts with restrictions for neighbor, constraint_type in graph[lecture]: if constraint_type == \'time\': if lecture_hall_assignment[neighbor] == hall: return False elif constraint_type == \'hall\': if lecture_hall_assignment[neighbor] == hall: return False return True def backtrack(lecture): if lecture == n: return True for hall in range(m): if can_assign(lecture, hall): lecture_hall_assignment[lecture] = hall if backtrack(lecture + 1): return True lecture_hall_assignment[lecture] = -1 return False # Start backtracking from the first lecture if backtrack(0): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of size n x n, filled with non-negative integers. You need to process q queries on this grid. Each query is defined by four integers x1, y1, x2, y2 and asks for the sum of all elements within the subgrid determined by the corners (x1, y1) and (x2, y2) (inclusive). ----- Input ----- The first line contains one integer n (1 ≤ n ≤ 1000) — the size of the grid. Next n lines follow, each containing n non-negative integers, separated by spaces, representing the grid. The following line contains one integer q (1 ≤ q ≤ 10000) — the number of queries. Then q lines follow, each containing four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ n). ----- Output ----- Print q integers, where i-th integer is the answer to i-th query. ----- Example ----- Input 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 1 3 3 Output 12 45 Input 4 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1 2 2 4 4 Output 78","solution":"def compute_prefix_sums(grid): n = len(grid) prefix_sums = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sums[i][j] = grid[i - 1][j - 1] + prefix_sums[i - 1][j] + prefix_sums[i][j - 1] - prefix_sums[i - 1][j - 1] return prefix_sums def query_subgrid_sum(prefix_sums, x1, y1, x2, y2): return prefix_sums[x2][y2] - prefix_sums[x1 - 1][y2] - prefix_sums[x2][y1 - 1] + prefix_sums[x1 - 1][y1 - 1] def process_queries(grid, queries): prefix_sums = compute_prefix_sums(grid) results = [] for x1, y1, x2, y2 in queries: results.append(query_subgrid_sum(prefix_sums, x1, y1, x2, y2)) return results"},{"question":"There is a warehouse that receives shipments of different items. A shipment is represented as a list of integers where each integer represents the number of items received for a specific type. The warehouse has a limited capacity and some of these items might need to be discarded to avoid exceeding the capacity. The task is to maximize the total number of items kept in the warehouse without exceeding the capacity limit. Additionally, you must keep at most one item of each type. Write a program to determine the maximum number of items that can be kept in the warehouse under these conditions. -----Input----- The first line contains one integer n (1 le n le 100,000) — the number of different types of items. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1,000,000) — the number of items of each type. The third line contains one integer C (1 le C le 100,000,000) — the capacity of the warehouse. -----Output----- Print the maximum number of items that can be kept in the warehouse. -----Examples----- Input 5 2 3 1 4 6 10 Output 10 Input 4 5 8 3 6 7 Output 7 Input 3 4 5 6 2 Output 2 -----Note----- In the first sample, the total number of items is already 10 which does not exceed the capacity, so all items can be kept. In the second sample, choosing 5 from the first type fits exactly into the capacity limit or selecting 3 from the third type as either option is within the capacity limit. In the third sample, the capacity is less than any item type, so only one item can be kept.","solution":"def maximize_items(n, items, C): Determines the maximum number of items that can be kept in the warehouse without exceeding the capacity. Parameters: n (int): The number of different types of items. items (list): A list of integers where each integer represents the number of items received for a specific type. C (int): The capacity of the warehouse. Returns: int: The maximum number of items that can be kept in the warehouse. # Sort items in descending order to take the largest possible elements first items.sort(reverse=True) total_items = 0 for item in items: if C > 0: total_items += min(item, C) C -= min(item, C) else: break return total_items"},{"question":"You have been tasked with creating a function named `deep_merge` that merges two nested dictionaries into one. The function takes two nested dictionaries as arguments and merges them recursively. If both dictionaries share the same keys, the resulting dictionary should combine their values as follows: - If both values are dictionaries, merge them recursively. - If both values are lists, concatenate them. - If the values are of any other type, the value from the second dictionary should overwrite the value from the first dictionary. Here are some examples to illustrate how this function should work: ```python dict1 = { \\"a\\": 1, \\"b\\": {\\"x\\": 5, \\"y\\": [1, 2]}, \\"c\\": {\\"m\\": 7} } dict2 = { \\"b\\": {\\"y\\": [3, 4], \\"z\\": 8}, \\"c\\": {\\"m\\": [10], \\"n\\": 11} } deep_merge(dict1, dict2) # returns { # \\"a\\": 1, # \\"b\\": {\\"x\\": 5, \\"y\\": [1, 2, 3, 4], \\"z\\": 8}, # \\"c\\": {\\"m\\": [10], \\"n\\": 11} # } dict3 = { \\"p\\": {\\"q\\": [7]}, \\"r\\": 3 } dict4 = { \\"p\\": {\\"q\\": [8], \\"s\\": 9}, \\"r\\": {\\"t\\": 10} } deep_merge(dict3, dict4) # returns { # \\"p\\": {\\"q\\": [7, 8], \\"s\\": 9}, # \\"r\\": {\\"t\\": 10} # } ```","solution":"def deep_merge(dict1, dict2): Merge two nested dictionaries into one recursively. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: The merged dictionary. merged = dict1.copy() for key, value in dict2.items(): if key in merged: if isinstance(merged[key], dict) and isinstance(value, dict): merged[key] = deep_merge(merged[key], value) elif isinstance(merged[key], list) and isinstance(value, list): merged[key] = merged[key] + value else: merged[key] = value else: merged[key] = value return merged"},{"question":"You are given a list of student names and their corresponding scores on an exam. Your task is to determine the name of the student with the second highest score. In case of a tie for the highest score, exclude all of those tied for the first position to determine the second highest. # Input The first line contains an integer n (2 le n le 100) — the number of students. The following n lines each contain a student\'s name (a string of lowercase and uppercase English letters) and their score (an integer between 0 and 100). # Output Print the name of the student with the second highest score. If multiple students have the second highest score, print any one of their names. If no such student exists, print \\"No second highest score\\". # Example Input ``` 5 Alice 50 Bob 70 Charlie 70 Dave 60 Eve 55 ``` Output ``` Dave ``` Input ``` 4 Ashley 85 Brian 90 Cara 90 Diana 85 ``` Output ``` Ashley ``` # Note In the first example, the highest score is 70 by Bob and Charlie, and the second highest score is 60 by Dave. In case of the second example, the highest score is 90 by Brian and Cara, thus Ashley or Diana could be the correct answer since they have the score of 85 which is the second highest score.","solution":"def second_highest_student(scores): Finds the student with the second highest score. :param scores: List of tuples, each containing (student_name, score) :return: Name of the student with the second highest score, or \\"No second highest score\\" unique_scores = list(set(score for _name, score in scores)) if len(unique_scores) < 2: return \\"No second highest score\\" unique_scores.sort(reverse=True) second_highest = unique_scores[1] for name, score in scores: if score == second_highest: return name return \\"No second highest score\\""},{"question":"In a remote town, there are n houses situated along a straight street, numbered from 1 to n. Each house uses a different amount of electricity every month, and based on the electricity consumption, they are charged monthly bills. The town administration wants to encourage residents to reduce their power consumption by offering a periodic discount. For this purpose, they plan to assess the electricity consumption of the houses in comparison with their neighbors, as they believe residents would follow the example of their neighbors to save on their bills. They want to perform multiple queries to find the houses with the maximum electricity consumption in a given segment of the street. The length of each segment is dynamic and can vary in each query. Given an array of integers that represent the electricity consumption of each house, and multiple queries defining the segments of the street, determine the house with the maximum consumption for each query. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of houses. The second line contains n space-separated integers e1, e2, ..., en (1 ≤ ei ≤ 109) — the electricity consumption of each house. The third line contains an integer q (1 ≤ q ≤ 105) — the number of queries. The following q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) — defining the segment of street for which the query needs to be performed. Output For each query, output the maximum electricity consumption within the given segment of houses. Example Input: 5 10 20 12 25 18 3 1 3 2 5 1 5 Output: 20 25 25 Note In the first query, the segment defined is from house 1 to house 3. The electricity consumption values within this range are [10, 20, 12], and the maximum consumption is 20. In the second query, the segment defined is from house 2 to house 5. The electricity consumption values within this range are [20, 12, 25, 18], and the maximum consumption is 25. In the third query, the segment defined is from house 1 to house 5. The electricity consumption values within this range are [10, 20, 12, 25, 18], and the maximum consumption is 25.","solution":"def max_consumption(n, consumptions, queries): Function to find maximum electricity consumption in given segments of houses. Parameters: n (int): The number of houses. consumptions (list): List of electricity consumption of each house. queries (list): List of queries where each query contains two integers l and r. Returns: list: List of maximum electricity consumptions for each query. results = [] for l, r in queries: maximum = max(consumptions[l - 1:r]) results.append(maximum) return results"},{"question":"A food delivery company has decided to introduce a new algorithm to optimize the delivery routes for its drivers. The city can be represented as an `n x n` grid, where each cell contains either an empty street (\'.\'), an obstacle (\'#\'), or a starting/ending point of a delivery (\'S\' or \'E\'). The driver starts at \'S\' and must find the shortest path to \'E\', bypassing any obstacles. The driver can move up, down, left, or right (no diagonal moves allowed). Your task is to write a function that determines the minimum number of moves required for the driver to reach the endpoint \'E\' from the starting point \'S\'. If there is no possible path, the function should return -1. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) – the size of the grid. - The next `n` lines each contain `n` characters representing the grid, where: - \'.\' is an empty street. - \'#\' is an obstacle. - \'S\' is the starting point. - \'E\' is the ending point. # Output - Output a single integer representing the minimum number of moves to reach \'E\' from \'S\'. If there is no path from \'S\' to \'E\', return -1. # Example **Input:** ``` 5 S.... .#... ..#.. ..... ....E ``` **Output:** ``` 8 ``` **Explanation:** The shortest path from \'S\' to \'E\' is down two cells, right two cells, up two cells, and right two cells again, making 8 moves in total.","solution":"from collections import deque def min_moves_to_reach(n, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right start, end = None, None # Locate the positions of \'S\' and \'E\' for i in range(n): for j in range(n): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) # If we don\'t have a start or an end, there\'s no valid path if not start or not end: return -1 queue = deque([(*start, 0)]) # (row, col, distance) visited = set([start]) while queue: r, c, dist = queue.popleft() if (r, c) == end: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] != \'#\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If we exhaust the queue without finding \'E\', there\'s no path return -1"},{"question":"You are given a list of intervals, each represented as a pair of two integers (start, end) inclusive. You are required to merge all overlapping intervals into a smaller list of non-overlapping intervals. An interval [a, b] is said to overlap with another interval [c, d] if the two intervals share any common point, i.e., either a <= d and c <= b. Constraints * 1 ≤ number of intervals ≤ 10^5 * -10^9 ≤ start_i ≤ end_i ≤ 10^9 Input The input is given from Standard Input in the following format: n start_1 end_1 start_2 end_2 : start_n end_n Where: * n is the number of intervals * start_i and end_i represent the start and end of the i-th interval Output Output the merged intervals in the same format, each interval on a new line sorted by the starting point. Example Input 6 1 3 2 6 8 10 15 18 17 20 20 25 Output 1 6 8 10 15 25 Input 4 1 4 4 5 9 12 11 14 Output 1 5 9 14","solution":"def merge_intervals(intervals): Returns a list of merged intervals. if not intervals: return [] # Sort the intervals by their start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # if the list of merged intervals is empty or if the current # interval does not overlap with the previous, simply append it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # otherwise, there is overlap, so we merge the current and previous intervals. merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Jacob is a botanist who is studying a new species of plants. Each plant has a unique height that grows at a constant rate per day. Jacob wants to predict the height of each plant after a certain number of days to track their growth. Jacob has a list containing the initial heights of the plants and another list containing the daily growth rates of the plants. He also has a list of the number of days after which he wants to measure the height of each plant. ---Task--- Write a program that takes the initial heights, growth rates, and the days after which the height needs to be measured. The program should calculate the height of each plant after the specified days. ---Input--- The input consists of three lines: - The first line contains n integers representing the initial heights of the n plants. - The second line contains n integers representing the daily growth rates of the n plants. - The third line contains n integers representing the number of days after which the height of each plant needs to be measured. You can assume that 1 le n le 100, 0 le initial height, growth rate le 100, and 1 le number of days le 100. ---Output--- Output n integers on a single line representing the heights of the n plants after the specified number of days. ---Examples--- Sample Input 1: 10 15 20 2 1 3 5 10 15 Sample Output 1: 20 25 65 Sample Input 2: 3 4 5 1 2 3 7 6 5 Sample Output 2: 10 16 20","solution":"def calculate_height(initial_heights, growth_rates, days): Calculate the height of each plant after the specified days. Parameters: initial_heights (list of int): the initial heights of the plants. growth_rates (list of int): the daily growth rates of the plants. days (list of int): the number of days after which to measure the height of each plant. Returns: list of int: the heights of the plants after the specified days. heights_after_days = [] for initial, rate, day in zip(initial_heights, growth_rates, days): height = initial + rate * day heights_after_days.append(height) return heights_after_days"},{"question":"John is trying to develop a small text editor. To ensure that his text editor handles text justification correctly, he needs to know if a particular line of text can be formatted to a specified length without breaking a word. Specifically, John wants to determine if a given line of text can fit into a specified width when word-wrapping is applied. Input: The input begins with a single integer T, the number of test cases. Each test case contains two lines. The first line contains a single integer W, the width the text should be formatted to. The second line contains a string L, representing the line of text. Output: For each test case, print \\"YES\\" (without quotes) if the text can be wrapped within the specified width without breaking a word, otherwise print \\"NO\\" (without quotes). Constraints: 1 ≤ T ≤ 100 1 ≤ W ≤ 100 1 ≤ |L| ≤ 1000 L consists of printable ASCII characters only (no trailing or leading spaces). SAMPLE INPUT 2 10 This is a test 15 Can this fit SAMPLE OUTPUT YES YES Explanation: In the first test case, the text \\"This is a test\\" can be formatted within the width of 10 by wrapping it as follows: ``` This is a test ``` Therefore, it prints \\"YES\\". In the second test case, the text \\"Can this fit\\" fits within a width of 15 without wrapping because its length is less than 15. Therefore, it prints \\"YES\\".","solution":"def can_justify_text(T, test_cases): results = [] for i in range(T): W = test_cases[i][0] L = test_cases[i][1] words = L.split() can_fit = True current_length = 0 for word in words: if len(word) > W: can_fit = False break if current_length + len(word) > W: current_length = 0 if current_length == 0: current_length = len(word) else: current_length += len(word) + 1 if can_fit: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a kingdom far away, there is an ancient library that contains numerous books. Each book has a unique code, which is an integer. The kingdom\'s scholars have come up with a way to organize the books such that the books on each shelf are sorted by their codes in ascending order. Given the sorted list of book codes on each shelf, your task is to help the librarian find out on which shelf a particular book code is located. If the book code is not found on any shelf, you should return \\"Not Found\\" for that query. Input The input consists of multiple parts: 1. An integer `n` representing the number of shelves. 2. `n` lines follow, each containing integers representing the sorted list of book codes on that shelf. Each list is terminated by a newline. 3. An integer `q` representing the number of book code queries. 4. `q` lines follow, each containing a single integer representing the book code to be searched for. Output For each book code query, output the 1-based index of the shelf on which the book is found. If the book is not found, output \\"Not Found\\" for that query. Example Input 3 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 2 40 85 Output 1 Not Found","solution":"def find_book_on_shelf(n, shelves, q, queries): results = [] for query in queries: found = False for i, shelf in enumerate(shelves): if query in shelf: results.append(i + 1) found = True break if not found: results.append(\\"Not Found\\") return results"},{"question":"Given a binary tree, find the level order traversal of the nodes\' values in zigzag pattern. (ie, from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3,9,20,null,null,15,7], ``` 3 / 9 20 / 15 7 ``` return its zigzag level order traversal as: ``` [ [3], [20,9], [15,7] ] ``` Example 1: Input: ``` BinaryTree: [3,9,20,null,null,15,7] ``` Output: ``` [ [3], [20,9], [15,7] ] ``` Explanation: - The first level order traversal is [3]. - The second level order traversal is from right to left, so it becomes [20, 9]. - The third level order traversal is from left to right, so it becomes [15, 7]. Example 2: Input: ``` BinaryTree: [1,2,3,4,null,null,5] ``` Output: ``` [ [1], [3,2], [4,5] ] ``` Explanation: - The first level order traversal is [1]. - The second level order traversal is from right to left, so it becomes [3, 2]. - The third level order traversal is from left to right, so it becomes [4, 5]. Your Task: The task is to complete the function zigzagLevelOrder() which should return a 2D list containing the zigzag level order traversal of the binary tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the binary tree is in the range [1, 2000]. - -100 <= Node.val <= 100","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): Returns the zigzag level order traversal of the nodes\' values. :param root: TreeNode, the root of the binary tree. :return: List of List of integer, zigzag level order traversal of the binary tree. if not root: return [] result = [] q = deque([root]) left_to_right = True while q: level_size = len(q) level = deque() for _ in range(level_size): node = q.popleft() if left_to_right: level.append(node.val) else: level.appendleft(node.val) if node.left: q.append(node.left) if node.right: q.append(node.right) result.append(list(level)) left_to_right = not left_to_right return result"},{"question":"Given an array of integers arr and an integer target, return whether there are two distinct indices i and j in the array such that arr[i] + arr[j] is equal to target. Example: Input: arr = [2, 7, 11, 15], target = 9 Output: True Explanation: arr[0] + arr[1] = 2 + 7 = 9 Note: - The input array will have at least two elements and no more than 10^5 elements. - Each element of the array will be within the range [-10^5, 10^5]. - Indices i and j should be different.","solution":"def has_pair_with_sum(arr, target): Determine if there are two distinct indices i and j in the array such that arr[i] + arr[j] is equal to target. Arguments: arr -- list of integers target -- integer, the target sum Returns: True if such a pair exists, False otherwise seen = {} for index, value in enumerate(arr): if target - value in seen: return True seen[value] = index return False"},{"question":"**Problem:** Alice enjoys solving puzzles, especially those involving strings and pattern matching. She has invented a new string game and would like you to help her solve it. In this game, Alice provides a string `S` consisting of lowercase letters and a pattern string `P` also consisting of lowercase letters. Alice challenges you to find the number of substrings in `S` that can be rearranged to form the pattern `P`. Given `S` and `P`, count how many substrings of `S` are anagrams of `P`. **Input:** - The first line of input contains a single integer `T` representing the number of test cases. - The following `2*T` lines contain pairs of strings `S` and `P` for each test case. **Output:** - For each test case, output the number of substrings of `S` that are anagrams of `P`. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ |S|, |P| ≤ 1000 **Example Input:** ``` 3 cbaebabacd abc abab ab bacaAacba abc ``` **Example Output:** ``` 2 3 3 ``` **Explanation:** **Test Case 1:** Given S = \\"cbaebabacd\\" and P = \\"abc\\", the substrings \\"cba\\" and \\"bac\\" are anagrams of \\"abc\\". **Test Case 2:** Given S = \\"abab\\" and P = \\"ab\\", the substrings \\"ab\\", \\"ba\\", and \\"ab\\" are anagrams of \\"ab\\". **Test Case 3:** Given S = \\"bacaAacba\\" and P = \\"abc\\", the substrings \\"bac\\", \\"acb\\", and \\"cba\\" are anagrams of \\"abc\\". Note: Consider the cases sensitively.","solution":"def count_anagrams(S, P): Returns the number of substrings in S that are anagrams of P. from collections import Counter len_s = len(S) len_p = len(P) count_p = Counter(P) count_subs = 0 for i in range(len_s - len_p + 1): substring = S[i:i + len_p] if Counter(substring) == count_p: count_subs += 1 return count_subs def process_test_cases(T, test_cases): results = [] for i in range(T): S, P = test_cases[i] results.append(count_anagrams(S, P)) return results"},{"question":"A valid password is defined based on the following rules: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must be at least 8 characters long and at most 20 characters long. 5. It must not contain any whitespace characters. You are given a string. Determine if it is a valid password or not. -----Input----- The first line of input contains a string s, (1 ≤ length(s) ≤ 100). This string can contain any printable ASCII characters. -----Output----- Print \\"VALID\\" if the string is a valid password or \\"INVALID\\" if it\'s not. -----Examples----- Input ValidPass1 Output VALID Input invalidpass Output INVALID Input Invalid Pass1 Output INVALID","solution":"def is_valid_password(s): if len(s) < 8 or len(s) > 20: return \\"INVALID\\" if any(c.isspace() for c in s): return \\"INVALID\\" if not any(c.islower() for c in s): return \\"INVALID\\" if not any(c.isupper() for c in s): return \\"INVALID\\" if not any(c.isdigit() for c in s): return \\"INVALID\\" return \\"VALID\\""},{"question":"Given a binary tree, write a function `findLCA()` to find the lowest common ancestor (LCA) of two given nodes in the tree. Input: The input consists of multiple test cases. Each test case contains the following: 1. The first line contains the number of nodes in the binary tree. 2. The second line contains the values of the nodes in level-order (BFS) format where \'-1\' represents a NULL node. 3. The third line contains two integers representing the values of the two nodes for which the LCA needs to be found. Output: Print the LCA of the two given nodes. If either of the nodes is not present in the tree or there is no common ancestor, print -1. Function Signature: ```python def findLCA(root: \'TreeNode\', n1: int, n2: int) -> int: ``` Constraints: 1 <= T <= 50 1 <= Number of nodes <= 1000 1 <= Node values <= 10^5 -1 indicates that there is no child node at that position in the tree. Example: Input: 1 7 3 5 1 6 2 0 8 -1 -1 7 4 5 1 6 4 Output: 1 5 Explanation: Testcase 1: The tree is: 3 / 5 1 / / 6 2 0 8 / 7 4 The LCA of nodes 5 and 1 is 3. The LCA of nodes 6 and 4 is 5.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def findLCA(root, n1, n2): def findLCAHelper(root, n1, n2): if root is None: return None if root.val == n1 or root.val == n2: return root left_lca = findLCAHelper(root.left, n1, n2) right_lca = findLCAHelper(root.right, n1, n2) if left_lca and right_lca: return root return left_lca if left_lca else right_lca lca = findLCAHelper(root, n1, n2) if lca and (existsInTree(root, n1) and existsInTree(root, n2)): return lca.val return -1 def existsInTree(root, val): if root is None: return False if root.val == val: return True return existsInTree(root.left, val) or existsInTree(root.right, val) def build_tree(node_values): if not node_values: return None root = TreeNode(node_values[0]) queue = [root] i = 1 while i < len(node_values) and queue: current = queue.pop(0) if node_values[i] != -1: current.left = TreeNode(node_values[i]) queue.append(current.left) i += 1 if i < len(node_values) and node_values[i] != -1: current.right = TreeNode(node_values[i]) queue.append(current.right) i += 1 return root"},{"question":"You are given an m x n integer matrix called \'maze\' where each cell can either be 0 (representing an open path) or 1 (representing a wall). Your task is to determine if there is a path from the top-left corner of the maze (i.e., maze[0][0]) to the bottom-right corner (i.e., maze[m-1][n-1]) without passing through walls. You can only move up, down, left, or right. Write a function `canEscape(maze)` that returns `true` if there exists such a path and `false` otherwise. Input: - The input consists of a single argument: maze (a list of lists of integers) - `maze` length (number of rows) and its sublists\' length (number of columns) are both at least 1 and do not exceed 1000. - Each element in the matrix is either 0 or 1. Output: - Return `true` if you can escape from top-left to bottom-right, otherwise return `false`. SAMPLE INPUT: [ [0, 1, 0, 0, 1], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [1, 0, 0, 0, 0] ] SAMPLE OUTPUT: true Explanation: In the given sample input, there is a path, one such path is as follows: (0,0) → (1,0) → (1,1) → (1,2) → (2,2) → (3,2) → (3,3) → (3,4).","solution":"def canEscape(maze): Determine if there\'s a path from the top-left to the bottom-right in a maze. Parameters: maze (List[List[int]]): A 2D list representing the maze. Returns: bool: True if there is a path, False otherwise. if not maze or maze[0][0] == 1 or maze[-1][-1] == 1: return False m, n = len(maze), len(maze[0]) visited = [[False for _ in range(n)] for _ in range(m)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y): if x == m - 1 and y == n - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and maze[nx][ny] == 0: if dfs(nx, ny): return True return False return dfs(0, 0)"},{"question":"A team sports coach is preparing for an upcoming tournament and needs to schedule matches between teams. Each match must be scheduled within a specific range of days, and no two matches can occur on the same day. Given the match schedules, determine the minimum number of days required to conduct all matches. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers n and m (1 ≤ n, m ≤ 100000), where n is the number of days the tournament spans, and m is the number of matches. Each of the next m lines will contain two integers a and b (1 ≤ a ≤ b ≤ n), denoting that a particular match can be scheduled on any day from day a to day b, inclusive. -----Output----- Output a single integer, which represents the minimum number of days required to schedule all matches without conflicts. -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: 3 Sample Input 2: 5 2 1 3 3 5 Sample Output 2: 2","solution":"def schedule_matches(n, m, matches): Determines the minimum number of days required to schedule all matches without conflicts. :param n: Number of days the tournament spans. :param m: Number of matches. :param matches: List of tuples, each containing two integers a and b. :return: Minimum number of days required to schedule all matches. # Sorting matches by the end day (b) primarily, and by start day (a) secondarily matches.sort(key=lambda x: (x[1], x[0])) current_day = 0 scheduled_days = set() for a, b in matches: # Find the earliest possible day to schedule the match while current_day < a or current_day in scheduled_days: current_day += 1 scheduled_days.add(current_day) return len(scheduled_days)"},{"question":"Given a positive integer n, your task is to generate a multiplication table of the integer n up to 10. Output this table as a list of strings where each string represents a multiplication operation and its result in the format \\"n * i = result\\" where i goes from 1 to 10. Example 1: Input: 3 Output: [ \\"3 * 1 = 3\\", \\"3 * 2 = 6\\", \\"3 * 3 = 9\\", \\"3 * 4 = 12\\", \\"3 * 5 = 15\\", \\"3 * 6 = 18\\", \\"3 * 7 = 21\\", \\"3 * 8 = 24\\", \\"3 * 9 = 27\\", \\"3 * 10 = 30\\" ] Your Task: You don\'t need to input anything. Complete the function generateMultiplicationTable() which takes an integer n as its input parameter and returns the list of strings representing the multiplication table. Constraints: 1 <= n <= 100","solution":"def generateMultiplicationTable(n): Generates the multiplication table for the given integer n up to 10. Args: n (int): A positive integer Returns: list: A list of strings representing the multiplication table return [f\\"{n} * {i} = {n * i}\\" for i in range(1, 11)]"},{"question":"Jasmine is fascinated with mirrored strings. A mirrored string is defined as a string that reads the same backward as forward. Jasmine has recently learned that a string can be rearranged to form a mirrored string only if the count of each character is even, or at most one character has an odd count. Jasmine wants to create a program that determines if a given string can be rearranged to form a mirrored string. -----Input----- The first line of input contains a single positive integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains a string consisting entirely of lowercase English characters. The length of each string is between 1 and 1000 characters. -----Output----- For each test case, output \\"YES\\" if the string can be rearranged to form a mirrored string, and \\"NO\\" otherwise. -----Examples----- Sample Input: 3 civic ivicc hello Sample Output: YES YES NO","solution":"def can_form_mirrored_string(s): Determines if a given string can be rearranged to form a mirrored string. from collections import Counter # Count frequency of each character char_counts = Counter(s) # Check number of characters with odd frequency odd_count = sum(1 for count in char_counts.values() if count % 2 == 1) # A string can be rearranged to form a mirrored string if there is at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_form_mirrored_string(s)) return results"},{"question":"You are given an array of integers representing the heights of buildings along a street. A sunlight ray is shining from the left (starting from the first building) to the right. A building blocks sunlight for another building if the second building is shorter and to the right of the first. Your task is to determine how many buildings will receive sunlight. Two buildings are not considered blocked if they are the same height. Only strictly taller buildings block shorter ones. -----Input----- The first line contains an integer n (1 le n le 10^6) denoting the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) representing the heights of the buildings. -----Output----- Print one integer: the number of buildings that will receive sunlight. -----Examples----- Input 6 3 5 4 9 2 8 Output 3 Input 5 4 4 4 4 4 Output 5 -----Note----- In the first example, the buildings with heights 3, 5, and 9 receive sunlight. In the second example, all buildings have the same height and therefore all of them receive sunlight.","solution":"def count_sunlit_buildings(n, heights): Returns the count of buildings that receive sunlight. max_height = 0 count = 0 for height in heights: if height >= max_height: count += 1 max_height = height return count"},{"question":"You are given a string S consisting of lowercase alphabets and an integer Q which denotes the number of queries. Each query consists of a character C and two integers L and R. You need to output the number of times the character C appears in the substring of S starting from index L to index R (both 0-based inclusive). Input The first line contains the string S of length N. The second line contains the integer Q, which denotes the number of queries. The next Q lines contain a character C and two integers L and R. Output For each query, output the number of times the character C appears in the substring S[L:R+1]. Constraints 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 0 ≤ L ≤ R < N \'a\' ≤ C ≤ \'z\' SAMPLE INPUT abcdefg 3 a 0 3 d 0 6 g 5 6 SAMPLE OUTPUT 1 1 1","solution":"def count_char_in_substring(s, queries): Returns a list of counts of character occurrences in specified substrings. Params: s (str): The input string. queries (list of tuples): Each tuple contains a character and two integers (C, L, R). Returns: list of int: Count of character C in substring S[L:R+1] for each query. results = [] for char, L, R in queries: substring = s[L:R+1] count = substring.count(char) results.append(count) return results"},{"question":"Write a function that determines whether a given sequence of integers can be rearranged into an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. Your function should return `True` if the sequence can form an arithmetic progression and `False` otherwise. ```python can_form_arithmetic_progression([3, 5, 1]) # True (sequence can be rearranged to [1, 3, 5]) can_form_arithmetic_progression([1, 2, 4]) # False (sequence cannot be rearranged to form an arithmetic progression) can_form_arithmetic_progression([7, 3, 1, 5]) # True (sequence can be rearranged to [1, 3, 5, 7]) can_form_arithmetic_progression([1]) # True (a single-element sequence is trivially an arithmetic progression) can_form_arithmetic_progression([5, 1, 5, 1]) # False (sequence cannot be rearranged to form an arithmetic progression) ``` **Note:** Your solution should aim for efficient computation, as larger lists will be tested. Avoid brute-force solutions that check all possible permutations of the sequence.","solution":"def can_form_arithmetic_progression(sequence): Determines whether a given sequence of integers can be rearranged into an arithmetic progression. Parameters: sequence (list): List of integers. Returns: bool: True if the sequence can form an arithmetic progression, False otherwise. if len(sequence) <= 1: return True sequence_sorted = sorted(sequence) common_difference = sequence_sorted[1] - sequence_sorted[0] for i in range(1, len(sequence_sorted) - 1): if sequence_sorted[i + 1] - sequence_sorted[i] != common_difference: return False return True"},{"question":"Alan is a software developer working on a new text messaging application. One of the features of the application is to track the frequency of certain words within the messages. Alan needs your help to implement a function that will count the frequency of each word in a given message and display the results in ascending order of frequency. Words with the same frequency should be displayed in alphabetical order. -----Input----- The input consists of a single string, the message, which contains only lowercase latin letters and spaces. The total number of characters in the message will not exceed 1000. The words in the message are separated by spaces. -----Output----- Print the words along with their frequencies in ascending order of frequency. Each word and its frequency should be printed on a new line in the format \\"word: frequency\\". If multiple words have the same frequency, print them in alphabetical order. -----Examples----- Input: hello world hello Output: world: 1 hello: 2 Input: this is a test this is only a test Output: a: 2 only: 1 test: 2 this: 2 is: 2 -----Note----- In the first sample example, the word \\"hello\\" appears twice and \\"world\\" appears once. Hence \\"world: 1\\" is printed first followed by \\"hello: 2\\". In the second sample example, \\"a\\", \\"test\\", \\"this\\" and \\"is\\" all appear twice, but \\"only\\" appears once. Thus, \\"a: 2\\", \\"test: 2\\", \\"this: 2\\" and \\"is: 2\\" are printed in alphabetical order after \\"only: 1\\".","solution":"def word_frequency(message): from collections import Counter # Split the message into a list of words words = message.split() # Count the frequency of each word word_count = Counter(words) # Sort words first alphabetically and then by frequency sorted_words = sorted(word_count.items(), key=lambda x: (x[1], x[0])) # Print the words with their frequencies in the desired format for word, count in sorted_words: print(f\\"{word}: {count}\\") # Example usage: # message = \\"this is a test this is only a test\\" # word_frequency(message)"},{"question":"In a game development project, an online multiplayer game allows players to form alliances. Alliances can compete in tournaments, and the score of each alliance is calculated based on the cumulative scores of all players in that alliance. However, scoring rules dictate that only distinct scores from players count towards the alliance\'s total score to prevent repetitive score padding. # Task Your job is to write a function to compute the total score of each alliance based on distinct player scores. # Function Description Complete the function `alliance_score` in the editor below. `alliance_score` has the following parameters: * `int alliances`: an integer representing the number of alliances. * `list[list[int]] scores`: a 2D list where each sublist denotes the scores of players in each alliance. # Returns * `list[int]`: a list of integers representing the distinct total score for each alliance. # Constraints * 1 leq alliances leq 10^3 * Each sublist in `scores` contains up to 100 integers. * Player scores are between 1 and 1000 inclusive. # Input Format * The first line contains a single integer, `alliances`, representing the number of alliances. * Each of the next `alliances` lines contains space-separated integers belonging to a sublist in `scores`. # Sample Input ``` 3 50 40 50 60 30 30 40 40 50 80 90 90 ``` # Sample Output ``` 150 120 170 ``` # Explanation 1. In the first alliance, distinct scores are [50, 40, 60]. Total score is 50 + 40 + 60 = 150. 2. In the second alliance, distinct scores are [30, 40, 50]. Total score is 30 + 40 + 50 = 120. 3. In the third alliance, distinct scores are [80, 90]. Total score is 80 + 90 = 170.","solution":"def alliance_score(alliances, scores): Calculates the total distinct score for each alliance. Parameters: alliances (int): The number of alliances. scores (list[list[int]]): A 2D list where each sublist denotes the scores of players in each alliance. Returns: list[int]: A list of integers representing the distinct total score for each alliance. distinct_scores = [] for score_list in scores: distinct_score_set = set(score_list) total_score = sum(distinct_score_set) distinct_scores.append(total_score) return distinct_scores"},{"question":"Veronica loves working with strings and lately she\'s been fascinated by palindromes. A palindrome is a word that reads the same backward as forward. Veronica is now working on a special problem where she needs to construct the longest possible palindrome by rearranging the characters in a given string. She may use each character in the string zero or more times and can rearrange them in any way. For example, given the string \\"aabb\\", the longest palindrome she can construct is \\"abba\\". For the string \\"abc\\", the longest palindrome she can construct is \\"a\\" or \\"b\\" or \\"c\\". You need to help Veronica by writing a function that returns the length of the longest palindrome that can be constructed from the given string. Example 1: Input: s = \\"abccccdd\\" Output: 7 Explanation: One possible longest palindrome that can be built is \\"dccaccd\\", whose length is 7. Example 2: Input: s = \\"a\\" Output: 1 Explanation: The longest palindrome that can be built is \\"a\\", whose length is 1. Your Task: You don\'t need to read input or print anything. Complete the function longestPalindrome() which takes a string \'s\' as input parameter and returns an integer representing the length of the longest palindrome that can be constructed. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^4 The string consists of lowercase and/or uppercase English letters only.","solution":"def longestPalindrome(s): Returns the length of the longest palindrome that can be constructed from the given string. from collections import Counter char_count = Counter(s) length = 0 odd_count_exists = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_exists = True if odd_count_exists: length += 1 return length"},{"question":"Given a 2D matrix of size n x n, each cell in the matrix can have a value of either 0 or 1. A connected region is defined as a group of adjacent cells with a value of 1. A cell is considered adjacent if it\'s directly above, below, to the left, or to the right of another cell. Determine the size of the largest connected region (in terms of the number of 1s) in the matrix. -----Task----- Write a function that takes an integer n and a 2D list (matrix) of size n x n as input and returns the size of the largest connected region made up of 1s. -----Input----- - An integer n, the size of the matrix (1 ≤ n ≤ 1000). - A 2D list of size n x n containing integers (either 0 or 1). -----Output----- An integer representing the size of the largest connected region of 1s in the matrix. -----Example----- Input: 4 [ [1, 1, 0, 0], [1, 0, 1, 0], [0, 0, 1, 1], [1, 0, 0, 0] ] Output: 3 Explanation: The largest connected region of 1s is formed by the cells at positions (0, 0), (0, 1), and (1, 0) yielding a size of 3.","solution":"def largest_connected_region(n, matrix): Determines the size of the largest connected region of 1s in a matrix. Parameters: n (int): The size of the matrix (nxn). matrix (list of list of int): The nxn matrix containing 0s and 1s. Returns: int: The size of the largest connected region of 1s. def dfs(matrix, x, y, n, visited): # Define directions for left, right, up and down directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True size += 1 for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < n and matrix[nx][ny] == 1 and not visited[nx][ny]: stack.append((nx, ny)) return size visited = [[False for _ in range(n)] for _ in range(n)] max_region_size = 0 for i in range(n): for j in range(n): if matrix[i][j] == 1 and not visited[i][j]: current_region_size = dfs(matrix, i, j, n, visited) max_region_size = max(max_region_size, current_region_size) return max_region_size"},{"question":"Given an undirected graph with `n` nodes labeled from `0` to `n-1` and an integer `array edges[][]` where each `edges[i] = [u_i, v_i]` represents an undirected edge between nodes `u_i` and `v_i`, your task is to determine the length of the shortest cycle in the graph. A cycle is defined as a path that starts and ends at the same node with at least one edge. If no cycle exists, return `-1`. Example: Input: n = 5, m = 6 edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 1], [4, 2]] Output: 3 Explanation: The cycle 1-2-4-1 is the shortest cycle with length 3. Your Task: You are required to complete the function `shortestCycle()` which takes an integer `n` and a 2D integer array `edges` as the input parameters and returns an integer representing the length of the shortest cycle, or `-1` if no cycle exists. Constraints: - 1 <= n, m <= 100 - 0 <= u_i, v_i < n - The graph may contain multiple edges between the same nodes and can also have loops (edges connecting a node to itself). Expected Time Complexity: O(N^2) Expected Space Complexity: O(N)","solution":"from collections import deque, defaultdict def shortestCycle(n, edges): # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): queue = deque([(start, -1, 0)]) visited = {start: 0} while queue: node, parent, dist = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited[neighbor] = dist + 1 queue.append((neighbor, node, dist + 1)) elif neighbor != parent: return dist + visited[node] + 1 return float(\'inf\') shortest = float(\'inf\') for i in range(n): shortest = min(shortest, bfs(i)) return shortest if shortest != float(\'inf\') else -1"},{"question":"In a distant land, there is a large network of magical cities connected by enchanted roads. There are n cities numbered from 1 to n. Each city is connected to at most two cities by undirected roads, and there can be multiple roads connecting the same pair of cities. A sequence of cities connected by roads represents a path in this network. Due to a powerful spell, some roads may suddenly disappear. A path is called magical if it consists of exactly two roads. Magic Council wants to ensure that the network remains robust, by keeping the number of magical paths as small as possible. To achieve this, the council will empower you with the ability to disable some cities. When a city is disabled, all roads connected to it become unusable. Your task is to find a way to disable at most frac{2}{5}n cities so that there are no magical paths in the network. Formally, after disabling some of the cities, there should not be any path that consists of exactly two roads. The council doesn\'t want to disable too many cities. Find any way to disable at most frac{2}{5}n cities to ensure no magical paths exist in the network. -----Input----- The first line contains a single positive integer T — the number of test cases. Each test case is described as follows: The first line of each test case contains two integers n and m (1 leq n leq 2 cdot 10^5, 0 leq m leq 2 cdot 10^5) — the number of cities and roads respectively. The following m lines contain two integers u and v (1 leq u, v leq n, u neq v) — indicating an undirected road connecting cities u and v. Each pair of cities can have multiple roads. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer k (0 leq k leq frac{2}{5}n) — the number of cities to be disabled. In the next line, print k distinct integers — indices of all cities to be disabled, in any order. If there are several answers, you may output any of them. Note that you don\'t have to minimize k. It can be shown that a suitable answer always exists. -----Example----- Input 2 3 2 1 2 2 3 5 7 1 2 2 3 3 4 4 5 1 3 2 4 1 5 Output 1 2 2 2 3","solution":"def disable_cities(T, test_cases): results = [] for case in test_cases: n, m, edges = case k = (2 * n) // 5 disabled_cities = list(range(1, k + 1)) results.append((k, disabled_cities)) return results"},{"question":"There is an upcoming tournament and the match schedule has been provided to you. You need to analyze this schedule and determine the number of matches played during a specified period. Each match is defined by its start and end times. The match schedule is given as a list of tuples, where each tuple represents a match with its start and end times in the format (start, end). You will be given q queries, each defined by a tuple (q_start, q_end), representing a period during which you need to count the number of matches that have at least some overlap with the given period. A match (start, end) is considered to overlap with a period (q_start, q_end) if there exists at least one point in time t such that q_start ≤ t ≤ q_end and start ≤ t ≤ end. # Input - An integer n (1 ≤ n ≤ 10^4), representing the number of matches. - Next, n lines follow, each containing two integers start and end (0 ≤ start < end ≤ 10^9), representing the start and end times of each match. - An integer q (1 ≤ q ≤ 10^4), representing the number of queries. - Next, q lines follow, each containing two integers q_start and q_end (0 ≤ q_start ≤ q_end ≤ 10^9), representing the start and end times of each query period. # Output For each query, output a single integer representing the number of matches that have at least some overlap with the given query period. # Example Input ``` 5 1 4 2 6 5 8 10 12 11 15 3 3 5 9 11 7 14 ``` Output ``` 3 2 3 ``` # Note In the example, the first query period is [3, 5], which overlaps with the matches (1, 4), (2, 6), and (5, 8). Therefore, the output for the first query is 3. The second query period [9, 11] overlaps with matches (10, 12) and (11, 15), so the output for the second query is 2. The third query period [7, 14] overlaps with matches (2, 6), (5, 8), and (11, 15), so the output for the third query is 3.","solution":"def count_overlapping_matches(matches, queries): This function counts overlapping matches for given queries. Args: matches (list of tuples): Each tuple represents a match with (start, end) time. queries (list of tuples): Each tuple represents a query with (q_start, q_end) period. Returns: list of int: Each element is the count of matches overlapping with the corresponding query. overlap_counts = [] for q_start, q_end in queries: count = 0 for start, end in matches: if q_start <= end and q_end >= start: count += 1 overlap_counts.append(count) return overlap_counts"},{"question":"You are a software engineer assigned to develop a novel task scheduler for a server that processes tasks in fixed time intervals. Each task is characterized by its start time, end time, and a specific resource identifier needed to execute the task. The server can handle multiple tasks concurrently as long as they do not require the same resource at the same time. To ensure efficient scheduling and avoid resource conflicts, you need to develop an algorithm that determines if any two tasks overlap in their required intervals on the same resource. If such a conflict occurs, the server cannot schedule these tasks simultaneously, and you must flag them. Write a program that reads a list of tasks and identifies any overlapping tasks that share the same resource. For example, consider the following tasks, each defined by a start time, end time, and a resource identifier: ``` Task 1: Start=2, End=5, Resource=A Task 2: Start=4, End=6, Resource=A Task 3: Start=1, End=3, Resource=B Task 4: Start=7, End=8, Resource=A ``` In this example, Task 1 and Task 2 overlap on resource A (from time 4 to 5). -----Input----- The first line of the input is an integer n (2 leq n leq 100), the number of tasks. The next n lines each describe a task with a start time, end time, and resource identifier, separated by spaces. The start and end times are integers in the range from 1 to 1000, and the resource identifier is a single uppercase letter (A leq Resource leq Z). -----Output----- If no overlapping tasks exist, output \\"no conflicts\\". Otherwise, output the indexes of the two tasks that conflict, separated by a space. The tasks are indexed from 1 to n in the order they appear in the input. If multiple pairs of tasks overlap, output the pair with the smallest first task index, breaking any remaining ties by the smallest second task index. -----Examples----- Sample Input: 4 2 5 A 4 6 A 1 3 B 7 8 A Sample Output: 1 2","solution":"def find_conflicting_tasks(n, tasks): Finds the first pair of conflicting tasks that use the same resource. Parameters: n (int): The number of tasks. tasks (list of dictionaries): Each dictionary contains \'start\', \'end\', and \'resource\'. Returns: str: \\"no conflicts\\" if no tasks overlap on the same resource, otherwise the indices of the conflicting tasks. # Convert input list to a list of dictionaries for easier processing # Example: [{\'start\': 2, \'end\': 5, \'resource\': \'A\'}, ...] for i in range(n): for j in range(i + 1, n): task1 = tasks[i] task2 = tasks[j] if task1[\\"resource\\"] == task2[\\"resource\\"]: if not (task1[\\"end\\"] <= task2[\\"start\\"] or task2[\\"end\\"] <= task1[\\"start\\"]): return f\\"{i + 1} {j + 1}\\" return \\"no conflicts\\" # Example usage: tasks = [ {\\"start\\": 2, \\"end\\": 5, \\"resource\\": \\"A\\"}, {\\"start\\": 4, \\"end\\": 6, \\"resource\\": \\"A\\"}, {\\"start\\": 1, \\"end\\": 3, \\"resource\\": \\"B\\"}, {\\"start\\": 7, \\"end\\": 8, \\"resource\\": \\"A\\"} ] n = len(tasks) print(find_conflicting_tasks(n, tasks)) # Output should be: \\"1 2\\""},{"question":"You are a software developer working on an inventory management system. The system keeps track of unique items with their respective quantities. Each item is identified by a unique string ID and has an associated integer quantity value. Your task is to implement a function that processes a series of commands to update and query this inventory. Commands can be one of the following three types: 1. \\"ADD <item_id> <quantity>\\": Adds a given quantity to the specified item. If the item does not exist, it should be created with the given quantity. 2. \\"REMOVE <item_id> <quantity>\\": Removes a given quantity from the specified item. If the item\'s quantity becomes zero or less, it should be completely removed from the inventory. 3. \\"QUERY <item_id>\\": Outputs the current quantity of the specified item. If the item does not exist, output \\"Item not found\\". Input Format: The first line contains an integer T, representing the number of commands. The next T lines contain commands. Each command is either \\"ADD\\", \\"REMOVE\\", or \\"QUERY\\" followed by the appropriate arguments. Output Format: For each \\"QUERY\\" command, output the quantity of the specified item or \\"Item not found\\" if the item does not exist. Constraints: - 1 ≤ T ≤ 100 - `item_id` is a string containing only alphanumeric characters, and its length does not exceed 20. - 0 ≤ quantity ≤ 10^5 SAMPLE INPUT 6 ADD apple 50 ADD banana 30 QUERY apple REMOVE banana 10 QUERY banana REMOVE apple 50 SAMPLE OUTPUT 50 20 Item not found Explanation: 1. After adding 50 apples, querying the quantity of \\"apple\\" returns 50. 2. After adding 30 bananas, querying the quantity of \\"banana\\" after removing 10 returns 20. 3. Removing all apples reduces their quantity to zero, so querying \\"apple\\" outputs \\"Item not found\\".","solution":"def process_inventory_commands(commands): inventory = {} result = [] for command in commands: parts = command.split() action = parts[0] item_id = parts[1] if action == \\"ADD\\": quantity = int(parts[2]) if item_id in inventory: inventory[item_id] += quantity else: inventory[item_id] = quantity elif action == \\"REMOVE\\": quantity = int(parts[2]) if item_id in inventory: inventory[item_id] -= quantity if inventory[item_id] <= 0: del inventory[item_id] elif action == \\"QUERY\\": if item_id in inventory: result.append(str(inventory[item_id])) else: result.append(\\"Item not found\\") return result # Sample Input commands = [ \\"ADD apple 50\\", \\"ADD banana 30\\", \\"QUERY apple\\", \\"REMOVE banana 10\\", \\"QUERY banana\\", \\"REMOVE apple 50\\" ] print(process_inventory_commands(commands)) # Output: [\'50\', \'20\', \'Item not found\']"},{"question":"You are given a list of coordinates on a 2D plane `coordinates_list` representing the positions of some treasure chests, and your starting position `start_point`. Your task is to identify the nearest treasure to your starting point and return its coordinates. For example, the coordinates list may be given as: `[(3, 4), (1, 2), (5, -1), (-2, -3)]` And the starting point as: `(0, 0)` The distance between two points (x1, y1) and (x2, y2) can be calculated using the Euclidean distance formula: `sqrt((x2 - x1)^2 + (y2 - y1)^2)` In this example, the nearest treasure to the starting point `(0, 0)` is `(1, 2)`. If two coordinates have the same distance to the starting point, you can return any one of them. Note: - You can assume that `coordinates_list` will always contain at least one coordinate. - You can use the `math.sqrt` function for calculating square roots. Write a function `nearest_treasure(start_point, coordinates_list)` that returns the coordinates of the nearest treasure.","solution":"import math def nearest_treasure(start_point, coordinates_list): Given a start point and a list of coordinates, return the coordinates of the nearest treasure. :param start_point: Tuple[int, int] - The starting coordinates (x, y) :param coordinates_list: List[Tuple[int, int]] - List of coordinates (x, y) of the treasures :return: Tuple[int, int] - The coordinates of the nearest treasure min_distance = float(\'inf\') nearest_coordinate = None for coordinate in coordinates_list: distance = math.sqrt((coordinate[0] - start_point[0]) ** 2 + (coordinate[1] - start_point[1]) ** 2) if distance < min_distance: min_distance = distance nearest_coordinate = coordinate return nearest_coordinate"},{"question":"You are given an array of n integers. You are allowed to reverse exactly one subarray (continuous segment) of this array to make the array sorted in non-decreasing order. Determine if it is possible to sort the array using this operation. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the total number of elements in the arrays over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to sort the array using exactly one reverse operation of a subarray, or \\"NO\\" otherwise. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 3 4 1 3 2 4 4 1 2 3 5 5 3 2 1 5 4 Output YES YES NO -----Note----- In the first test case, you can reverse the subarray [3, 2] to get [1, 2, 3, 4]. In the second test case, the array is already sorted, so no reverse operation is needed. In the third test case, there\'s no single subarray that can be reversed to make the entire array sorted.","solution":"def can_sort_by_reversing_subarray(test_cases): results = [] for n, a in test_cases: sorted_a = sorted(a) i, j = 0, n - 1 # Find the first mismatch from the beginning while i < n and a[i] == sorted_a[i]: i += 1 # Find the first mismatch from the end while j > i and a[j] == sorted_a[j]: j -= 1 # Reverse the subarray and check if it makes the whole array sorted if i < j: a[i:j+1] = reversed(a[i:j+1]) results.append(\\"YES\\" if a == sorted_a else \\"NO\\") return results"},{"question":"Given an integer array nums and an integer k, return the number of contiguous subarrays that sum up to k. A subarray is a contiguous part of an array. Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Explanation: There are two subarrays [1,1] with sum 2. Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Explanation: There are two subarrays [1,2] and [3] with sum 3. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function subarraySum() that takes an integer array nums and an integer k, and return the number of subarrays whose sum is k. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ nums.length ≤ 2 * 10^4 -1000 ≤ nums[i] ≤ 1000 -10^7 ≤ k ≤ 10^7","solution":"def subarraySum(nums, k): Returns the number of contiguous subarrays that sum up to k. count = 0 current_sum = 0 sum_dict = {0: 1} # Dictionary to store the cumulative sum frequencies for num in nums: current_sum += num if current_sum - k in sum_dict: count += sum_dict[current_sum - k] sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1 return count"},{"question":"Consider a forest represented as a 2D grid where \'1\' represents a tree and \'0\' represents empty space. Write a program to find the largest rectangular area consisting entirely of trees. -----Input----- The first line of input contains two integers n and m, 1leq n,mleq 1000, denoting the number of rows and columns in the forest grid respectively. Each of the next n lines contains a string of m characters, consisting of \'1\'s and \'0\'s, representing the forest. -----Output----- Output the area of the largest rectangle consisting entirely of trees. -----Examples----- Sample Input 1: 3 4 0100 1111 0110 Sample Output 1: 4 Sample Input 2: 5 5 10100 10111 11111 10010 00111 Sample Output 2: 6","solution":"def maximal_rectangle_area(n, m, forest): def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not forest or n == 0 or m == 0: return 0 max_area = 0 heights = [0] * m for i in range(n): for j in range(m): heights[j] = heights[j] + 1 if forest[i][j] == \'1\' else 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"Given an integer array `arr` of size `n` sorted in non-decreasing order, write a function to find the element that appears more than `n/2` times (the majority element). If no such element exists, return -1. Utilize O(n) time complexity and O(1) space complexity. Example 1: Input: n = 7 arr = [1, 1, 1, 1, 2, 3, 4] Output: 1 Explanation: 1 appears 4 times which is more than 7/2 times. Example 2: Input: n = 5 arr = [1, 2, 3, 4, 5] Output: -1 Explanation: No element appears more than 5/2 times. Constraints: 1 <= n <= 10^5 1 <= arr[i] <= 10^9 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMajorityElement()` which takes `arr[]` as input parameter and returns the majority element or -1 if no majority element exists. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def findMajorityElement(arr): Returns the majority element in arr if it exists, otherwise returns -1. candidate = None count = 0 # Step 1: Find the potential candidate using Boyer-Moore Voting Algorithm for num in arr: if count == 0: candidate = num count += 1 if num == candidate else -1 # Step 2: Verify if the candidate is actually the majority element if arr.count(candidate) > len(arr) // 2: return candidate else: return -1"},{"question":"You are given two arrays `a` and `b` of n integers each. The task is to make these two arrays identical (i.e., (a_i = b_i) for all 1 ≤ i ≤ n) by performing zero or more operations. In one operation, you can: - Increase or decrease any element of array `a` by 1. - Increase or decrease any element of array `b` by 1. You need to determine the minimum number of operations required to make the arrays identical. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in each array. The second line contains n integers (a_1, a_2, ... , a_n) (1 ≤ a_i ≤ 10^9) — elements of the array `a`. The third line contains n integers (b_1, b_2, ... , b_n) (1 ≤ b_i ≤ 10^9) — elements of the array `b`. -----Output----- Output a single integer — the minimum number of operations required to make the arrays identical. -----Examples----- Input 3 1 2 3 3 2 1 Output 4 Input 5 1 1 1 1 1 2 2 2 2 2 Output 5 -----Note----- In the first sample, you can perform the following operations to make `a` and `b` identical: - Increase (a_1) by 2 to get ([3, 2, 3]). - Decrease (a_3) by 2 to get ([3, 2, 1]). In total, 4 operations are required.","solution":"def min_operations_to_make_identical(n, a, b): Return the minimum number of operations required to make the arrays a and b identical. Parameters: n (int): The number of elements in each array. a (List[int]): The first array. b (List[int]): The second array. Returns: int: The minimum number of operations required. total_operations = 0 for x, y in zip(a, b): total_operations += abs(x - y) return total_operations"},{"question":"You are given an MxN grid representing an orchard. Each cell in the grid can either be empty, contain an apple tree, or be occupied by a rock. Harry wants to collect as many apples as possible. Harry can move in four directions from a given cell (left, right, up, or down) but cannot pass through cells occupied by rocks. He can start from any cell containing an apple tree and can only visit each cell once. Your task is to determine the maximum number of apples Harry can collect starting from any apple tree. - \'0\' represents an empty cell. - \'1\' represents a cell with an apple tree. - \'#\'\' represents a cell occupied by a rock. INPUT FORMAT - The first line contains two integers M and N (1 ≤ M, N ≤ 20), the dimensions of the grid. - The next M lines each contain N characters, representing the orchard grid. OUTPUT FORMAT Output an integer representing the maximum number of apples Harry can collect starting from any apple tree. SAMPLE INPUT 4 4 1 1 0 0 0 # 1 0 1 0 1 # # 1 1 0 SAMPLE OUTPUT 4","solution":"def max_apples(grid): M = len(grid) N = len(grid[0]) directions = [(-1,0), (1,0), (0,-1), (0,1)] def dfs(x, y, visited): if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] == \'#\' or visited[x][y]: return 0 if grid[x][y] == \'0\': return 0 visited[x][y] = True apples = 1 if grid[x][y] == \'1\' else 0 for dx, dy in directions: apples += dfs(x + dx, y + dy, visited) return apples max_apples = 0 for i in range(M): for j in range(N): if grid[i][j] == \'1\': visited = [[False]*N for _ in range(M)] max_apples = max(max_apples, dfs(i, j, visited)) return max_apples"},{"question":"# Task **_Given_** a **_list of integers_**, *return the **_highest possible product_** that can be obtained by multiplying exactly two different elements from the list.* __Do not use the same element twice__ ___ # Notes: * There will always be at least two different elements in the list. * The list may contain negative numbers. ___ # Input >> Output Examples ``` maxProduct ({5, 1, 3, 4, 2}) ==> return (20) ``` Explanation: **_(20)_** *is the highest product obtained by multiplying* **_4 and 5_** from **_{5, 1, 3, 4, 2}_** ___ ``` maxProduct({-10, -20, 5, 6}) ==> return (200) ``` Explanation: **_(200)_** *is the highest product obtained by multiplying* **_-10 and -20_** from **_{-10, -20, 5, 6}_** ___ ``` maxProduct({1, 2, 3, 0, -1, -2}) ==> return (6) ``` Explanation: **_(6)_** *is the highest product obtained by multiplying* **_2 and 3_** from **_{1, 2, 3, 0, -1, -2}_** ___","solution":"def maxProduct(lst): Returns the highest possible product that can be obtained by multiplying exactly two different elements from the list. if len(lst) < 2: raise ValueError(\\"The list must contain at least two elements.\\") lst.sort() # Product of the two largest numbers max1 = lst[-1] * lst[-2] # Product of the two smallest numbers (in case of negative numbers) max2 = lst[0] * lst[1] return max(max1, max2)"},{"question":"Nathan is a botanist and he is working on plant classification. He has a dataset containing the heights of various plants. For his research, he needs to determine the tallest and shortest plants in a specific range of the dataset repeatedly. Your task is to help Nathan by writing a function that processes multiple queries efficiently. Each query specifies a range [start, end] within the dataset, and you need to return the heights of the tallest and shortest plants in that range. Write a function `plant_classification(heights: List[int], queries: List[Tuple[int, int]]) -> List[Tuple[int, int]]` that processes such queries efficiently. # Input: - `heights`: A list of integers of length `n` representing the heights of the plants. - `queries`: A list of tuples, where each tuple contains two integers, `start` and `end` (0-indexed) representing a range within the heights list. # Output: - Return a list of tuples, each containing two integers. The first integer of each tuple should be the height of the tallest plant in the given range, and the second integer should be the height of the shortest plant in the given range. # Example: ```python heights = [4, 7, 2, 9, 5, 1, 3] queries = [(1, 4), (0, 6), (2, 5)] print(plant_classification(heights, queries)) ``` # Output: ```python [(9, 2), (9, 1), (9, 1)] ``` # Constraints: - `1 <= len(heights) <= 100,000` - `0 <= start <= end < len(heights)` - `1 <= len(queries) <= 100,000` - The height of plants is a positive integer.","solution":"from typing import List, Tuple def plant_classification(heights: List[int], queries: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Returns the height of the tallest and shortest plants in the given range [start, end] for each query. result = [] for start, end in queries: range_heights = heights[start:end + 1] max_height = max(range_heights) min_height = min(range_heights) result.append((max_height, min_height)) return result"},{"question":"You are given a sequence of integers A, where the length of the sequence is N. Your task is to find the length of the longest subsequence which forms an arithmetic progression (AP). A sequence is an arithmetic progression if there is a constant difference between consecutive terms. For example, in the sequence [1, 5, 3, 2, 8], the subsequence [1, 3, 5] forms an arithmetic progression with a difference of 2. Implement a function to determine the length of the longest arithmetic progression subsequence in the given sequence of integers. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of testcases. The description of the T testcases follow. - Each testcase consists of two lines. - The first line contains a single integer N, the length of the sequence A. - The second line contains N space-separated integers representing the sequence A. ------ Output Format ------ - For each testcase, print in a single line, an integer — the length of the longest subsequence which forms an arithmetic progression. ------ Constraints ------ 1 ≤ T ≤ 4000 1 ≤ N ≤ 2000 1 ≤ A[i] ≤ 10^9 ------ Example Input 1 ------ 3 5 1 7 10 13 14 7 2 4 6 8 10 12 14 6 1 5 3 9 7 11 ------ Example Output 1 ------ 3 7 3 ------ Explanation 1 ------ Test case 1: The longest subsequence which forms an arithmetic progression is [1, 7, 13] with a difference of 6. Test case 2: The given sequence is already an arithmetic progression with a difference of 2. Test case 3: The longest subsequence which forms an arithmetic progression is [1, 5, 9] with a difference of 4.","solution":"def longest_arith_seq_length(A): if len(A) <= 1: return len(A) dp = [{} for _ in range(len(A))] max_length = 2 for i in range(len(A)): for j in range(i): diff = A[i] - A[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length def solve_cases(T, cases): results = [] for i in range(T): N, A = cases[i] results.append(longest_arith_seq_length(A)) return results"},{"question":"While working on a new project, you realize that several of the files in the directory are older versions of data files, and you need to keep only the most recent version of each. Each versioned file follows a specific naming convention with a base name and a version number appended at the end. Given a list of filenames, write a function that will return a list containing only the most recent versions of each file, with the version being an integer at the end of each filename, separated by an underscore. -----Input----- The input will contain a single integer n (1 ≤ n ≤ 10^4) — the number of filenames found in the directory. The next n lines each contain a string representing a filename, where each filename follows the naming convention: [base_name]_[version_number].txt, with [base_name] consisting of alphabetical characters (1 to 100 characters) and [version_number] being a positive integer (1 to 10^6). -----Output----- Output a list of strings representing the filenames with the most recent version for each base name in alphabetical order by base name. -----Example----- Input 6 data_5.txt report_2.txt data_3.txt image_10.txt data_7.txt report_8.txt Output [\'data_7.txt\', \'image_10.txt\', \'report_8.txt\']","solution":"def most_recent_files(n, filenames): Returns a list of the most recent version of each file. :param n: int, the number of filenames :param filenames: list of strings, list of filenames :return: list of strings, the filenames with the most recent version for each base name file_versions = {} for filename in filenames: base_name, version = filename.split(\'_\') version = int(version.split(\'.\')[0]) if base_name not in file_versions: file_versions[base_name] = (version, filename) else: if version > file_versions[base_name][0]: file_versions[base_name] = (version, filename) result = [file_versions[base_name][1] for base_name in sorted(file_versions.keys())] return result"},{"question":"Alan is designing a new game called Binary Tree Destruction. In this game, a binary tree is initially complete, meaning every node has either zero or two children, except at the last level, which is filled from left to right. Alan wants to know how many nodes with exactly two children need to be taken out to convert the tree into a \\"Vine\\" — a structure where every node has at most one child. He can only remove nodes with exactly two children and can remove them in any order. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer h (1 le h le 1000) — the height of the complete binary tree. The height h of a complete tree is defined as the number of edges on the longest path from the root to a leaf. -----Output----- For each test case, print a single integer — the number of nodes with two children that need to be removed to transform the complete binary tree into a vine. -----Examples----- Input 2 1 3 Output 1 7 -----Note----- For h=1, the tree structure is: ``` 1 / 2 3 ``` One removal is required to convert it to a vine. For h=3, the tree structure is: ``` 1 / 2 3 / / 4 5 6 7 / / / / 8 9 10 11 12 13 14 15 ``` Seven removals are needed across different levels to convert it to a vine.","solution":"def nodes_to_remove_for_vine(h): For a complete binary tree of height h, calculates the number of nodes with exactly two children that need to be removed to convert the tree into a vine. :param h: Height of the complete binary tree :return: Number of nodes with two children that need to be removed # The number of nodes with two children in a complete binary tree of height h return 2 ** h - 1 def binary_tree_destruction(test_cases): Processes multiple test cases to determine the number of nodes to be removed for each height. :param test_cases: List of heights of the binary trees :return: List of results for each test case return [nodes_to_remove_for_vine(h) for h in test_cases]"},{"question":"You are planning a road trip and want to visit a series of cities, connected by bidirectional roads of varying lengths. You aim to minimize the overall travel distance. The journey starts from a specific city and visits a set of other cities in a fixed order, returning to the start city at the end. Given the distances between each pair of cities and the order in which you need to visit them, find the minimum total distance you will travel. ------ Input: ------ First line will contain a single integer, T, the number of test cases. The test cases follow. Each test case contains: - The first line containing an integer N, the number of cities. - The second line contains a space-separated list of N integers representing the order in which you need to visit the cities (city indices are 1-based). - N lines follow, each containing N space-separated integers representing the distance matrix. The j^{th} integer in the i^{th} line represents the distance from city i to city j. ------ Output: ------ For each test case, output in a single line the minimum total distance for the journey. ------ Constraints ------ 2 ≤ N ≤ 100 1 ≤ text{distance}≤ 10^{5} The distance from a city to itself, distance[i][i], is always 0. Distances between any two distinct cities are given and may not be symmetric. Sum of N over all tests is at most 500. ------ Sample Input 1 ------ 2 4 1 2 3 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 1 3 2 0 29 20 29 0 15 20 15 0 ------ Sample Output 1 ------ 60 64 ------ Explanation 1 ------ For the first test case, the journey visits the cities in the sequence 1 -> 2 -> 3 -> 4 -> 1 with the distances: 10 + 35 + 30 + 20 = 95. Hence, the minimum travel distance is 60. For the second test case, the journey visits the cities in the sequence 1 -> 3 -> 2 -> 1 with the distances: 20 + 15 + 29 = 64.","solution":"def minimum_travel_distance(T, test_cases): results = [] for case in range(T): N, order, distances = test_cases[case] travel_distance = 0 # Shifting from 1-based index to 0-based index order = [x - 1 for x in order] for i in range(len(order) - 1): travel_distance += distances[order[i]][order[i + 1]] # Add the trip from last city back to the first city travel_distance += distances[order[-1]][order[0]] results.append(travel_distance) return results def parse_input_output(input_str): data = input_str.strip().split(\'n\') T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) order = list(map(int, data[index + 1].split())) distances = [] for i in range(N): distances.append(list(map(int, data[index + 2 + i].split()))) test_cases.append((N, order, distances)) index += N + 2 return T, test_cases def format_output(result): return \'n\'.join(map(str, result))"},{"question":"Given a string S consisting of lowercase and uppercase characters, return the character that appears the most frequently. If there is a tie, return the lexicographically smallest character. Example 1: Input: S = \\"aabbbcc\\" Output: \\"b\\" Explanation: \'b\' appears 3 times, which is the highest frequency. Example 2: Input: S = \\"abBc\\" Output: \\"B\\" Explanation: \'B\' and \'b\' both appear once. \'B\' is lexicographically smaller than \'b\'. Your Task: You do not need to read or print anything. Your task is to complete the function most_frequent_char() which takes S as input parameter and returns the character with the highest frequency, resolving ties by lexicographic order. Expected Time Complexity: O(n) Expected Space Complexity: O(1), considering a fixed character set size Constraints: 1 <= len(S) <= 10^5","solution":"def most_frequent_char(S): from collections import Counter # Count frequency of all characters in the string frequency = Counter(S) # Variable to keep track of the most frequent character and its frequency most_frequent = \'\' max_frequency = -1 # Check each character and update the most frequent accordingly for char in sorted(frequency.keys()): if frequency[char] > max_frequency: most_frequent = char max_frequency = frequency[char] return most_frequent"},{"question":"You are tasked with creating a scheduling algorithm for a series of meetings in a single meeting room. The goal is to schedule the maximum number of non-overlapping meetings. Each meeting has a start time and an end time. Two meetings cannot be scheduled if they overlap in time. Your task is to return the maximum number of meetings that can be scheduled. ------ Input ------ The first line of input contains one number m, the number of test cases. Each test case starts with an integer n, the number of meetings. The following n lines each contain two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^9), representing the start and end times of the ith meeting. ------ Output ------ For each test case, output a single integer, the maximum number of non-overlapping meetings that can be scheduled. ------ Constraints ------ 1 ≤ m ≤ 100 1 ≤ n ≤ 1000 ------ Notes ------ Meetings are considered non-overlapping if the end time of one meeting is less than or equal to the start time of the next meeting. ----- Sample Input 1 ------ 1 3 1 2 3 4 2 3 ----- Sample Output 1 ------ 3 ----- explanation 1 ------ All meetings can be scheduled since none overlap. ----- Sample Input 2 ------ 1 3 1 3 2 4 3 5 ----- Sample Output 2 ------ 2 ----- explanation 2 ------ The first and the third meetings can be scheduled, or the second and the third meetings, but not all three since the second meeting overlaps with the first and the third.","solution":"def max_non_overlapping_meetings(meeting_count, meetings): Given a number of meetings and their start and end times, return the maximum number of non-overlapping meetings. # Sort meetings based on end times meetings.sort(key=lambda x: x[1]) # Initialize count of meetings and the end time of last taken meeting max_meetings = 0 last_meeting_end = 0 for start, end in meetings: if start >= last_meeting_end: # Take this meeting max_meetings += 1 last_meeting_end = end return max_meetings def solve(test_cases): Takes a list of test cases where each test case is a tuple of the number of meetings and the list of start and end times, and returns a list of maximum number of non-overlapping meetings for each test case. results = [] for meeting_count, meetings in test_cases: results.append(max_non_overlapping_meetings(meeting_count, meetings)) return results # Example usage test_cases = [ (3, [(1, 2), (3, 4), (2, 3)]), # Sample Input 1 equivalent (3, [(1, 3), (2, 4), (3, 5)]) # Sample Input 2 equivalent ] print(solve(test_cases)) # Expected output: [3, 2]"},{"question":"# Sum of Squares Given an integer `k`, your task is to find out if it can be expressed as the sum of the squares of two non-negative integers `x` and `y`, i.e., `k == x^2 + y^2`. The function `sum_of_squares(k)` should return a boolean value: `True` if such non-negative integers exist, and `False` otherwise. Your task Implement the function `sum_of_squares(k)` which takes an integer `k` as input and returns a boolean indicating whether `k` can be expressed as the sum of the squares of two non-negative integers `x` and `y` (where `0 <= x, y <= sqrt(k)`). # Examples | **argument** | **returns** | | ---------|---------| | 5 | True | | 3 | False | | 25 | True | | 10 | True | # Explanation For argument `5`, possible values are `(x=1, y=2)` because `1^2 + 2^2 = 5`. For argument `3`, there are no non-negative integers `x` and `y` such that `x^2 + y^2` equals `3`. For argument `25`, possible values are `(x=0, y=5)` because `0^2 + 5^2 = 25`. For argument `10`, possible values are `(x=1, y=3)` because `1^2 + 3^2 = 10`.","solution":"import math def sum_of_squares(k): Determines if an integer k can be expressed as the sum of the squares of two non-negative integers x and y. Parameters: k (int): The integer to be checked. Returns: bool: True if k can be expressed as the sum of two squares, False otherwise. limit = int(math.isqrt(k)) # Get the integer square root of k for x in range(limit + 1): y_square = k - x * x if y_square < 0: continue y = int(math.isqrt(y_square)) if x * x + y * y == k: return True return False"},{"question":"Professor Claire loves rectangles. Every time she finds a rectangular area filled with positive integers, she calculates their sum and stores it. Given a 2D matrix of dimensions N x M filled with positive integers, she wants to find the subrectangle with the highest possible sum. Can you help Professor Claire to determine the maximum possible sum of a subrectangle in the given matrix? -----Input----- The first line of input contains two integers N and M (1 ≤ N, M ≤ 100) that denote the dimensions of the matrix. Each of the following N lines contains M integers separated by spaces, which describe the matrix. Each element in the matrix will be a positive integer not greater than 1000. -----Output----- The output should contain a single integer, the maximum sum of any subrectangle in the given matrix. -----Examples----- Sample Input 1: 3 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 45 Sample Input 2: 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Sample Output 2: 210","solution":"def max_sum_subrectangle(matrix): Function to find the maximum sum of any subrectangle in a given matrix. :param matrix: A 2D list of integers representing the matrix. :return: The maximum sum of any subrectangle in the matrix. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] current_max_sum = max_subarray_sum(temp) max_sum = max(max_sum, current_max_sum) return max_sum def max_subarray_sum(arr): Helper function to find the maximum sum subarray using Kadane\'s algorithm. :param arr: A list of integers. :return: The maximum sum of any subarray in the list. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You have recently started working as a software developer for a music streaming service. Users of the service can create and manage playlists. Each playlist consists of a sequence of songs, and each song is identified by a unique id. Sometimes, users want to shuffle their playlists. Your task is to implement a function that shuffles a given playlist of song ids. The shuffling should rearrange the songs in a random order every time it is called. Function Signature: ```python def shuffle_playlist(playlist: List[int]) -> List[int]: pass ``` Input: - A list of song ids (distinct integers) representing a playlist, e.g., [1, 2, 3, 4, 5]. - The length of the playlist will be between 1 and 1000 (inclusive). Output: - The function should return a new list with the song ids in a randomly shuffled order. Example: ```python playlist = [1, 2, 3, 4, 5] result = shuffle_playlist(playlist) # result can be [3, 1, 4, 5, 2] or any other permutation of the input list ``` Constraints: - The original order of the playlist should not be modified. - Each song must appear exactly once in the shuffled playlist. - Consecutive calls to `shuffle_playlist` should likely result in different orderings.","solution":"import random from typing import List def shuffle_playlist(playlist: List[int]) -> List[int]: Shuffles the given playlist of song ids, returning a new list with the song ids in a random order. :param playlist: List of song ids (distinct integers) :return: A new list with the song ids in a randomly shuffled order shuffled = playlist[:] random.shuffle(shuffled) return shuffled"},{"question":"You are a logistics manager at a warehouse. The warehouse has a conveyor system that can move boxes from section A to section B. The conveyor system can handle at most W units of weight at any given time. Boxes arrive in the warehouse at different times and have varying weights. Your task is to determine the maximum combined weight that can be moved on the conveyor system at any given time without exceeding the weight limit W. The weight of each box that arrives at time t_i is given as w_i, and all boxes are moved to section B at a specific time after all boxes have arrived. Write a program to calculate the maximum combined weight of boxes on the conveyor system such that it does not exceed W units. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ W ≤ 10^9 - 1 ≤ w_i ≤ 10^6 - Each w_i and W are integers. -----Input----- Input is given from Standard Input in the following format: N W w_1 w_2 ... w_N -----Output----- Print a single integer representing the maximum combined weight of boxes that can be moved on the conveyor system without exceeding the weight limit W. -----Sample Input----- 5 20 4 8 5 3 7 -----Sample Output----- 20 -----Explanation----- - The maximum combined weight of boxes that can be moved without exceeding the weight limit is 20. The boxes with weights 8, 5, 3, and 4 can be combined to make up the exact capacity of 20 units. - Alternatively, boxes with weights 8, 7, and 5 can also be combined, but this exceeds the capacity of the conveyor system as their total weight is 20 units. Therefore, the solution that utilizes boxes with weights 8, 5, 4, and 3 is the optimal one.","solution":"def max_combined_weight(N, W, weights): Calculate the maximum combined weight that can be moved on the conveyor system without exceeding the weight limit W. Parameters: N : int : number of boxes W : int : weight limit of the conveyor system weights : list of int : weights of the boxes Returns: int : maximum combined weight that does not exceed W from itertools import combinations max_weight = 0 for r in range(1, N + 1): for comb in combinations(weights, r): comb_weight = sum(comb) if comb_weight <= W: max_weight = max(max_weight, comb_weight) return max_weight"},{"question":"You are given an array of integers `nums` and an integer `k`. You need to find the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element. You may assume that `k` is always valid, 1 ≤ k ≤ nums.length. Example 1: Input: nums = [3,2,1,5,6,4], k = 2 Output: 5 Explanation: The second largest element in the array is 5. Example 2: Input: nums = [3,2,3,1,2,4,5,5,6], k = 4 Output: 4 Explanation: The fourth largest element in the array is 4. Note: - You must solve it in O(n) time complexity if possible. - The array may contain duplicate values.","solution":"import heapq def find_kth_largest(nums, k): Returns the k-th largest element in the array. # Create a min-heap with the first k elements. min_heap = nums[:k] heapq.heapify(min_heap) # Process the remaining elements. for num in nums[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) # The root of the min-heap is the k-th largest element. return min_heap[0]"},{"question":"Alice has been hired to work at a logistics company, where she is in charge of managing the inventory of widgets in a very large warehouse. To make her job easier, she uses an inventory management system that records the number of each type of widget in the warehouse in a list. The system also supports various operations to update and query the inventory. The operations include adding a certain number of widgets to an existing type, removing widgets from an existing type, and checking the total number of widgets in a range of types. Can you help Alice by writing a program that performs these operations efficiently? ------ Input Format ------ - The first line of input contains two integers N and Q denoting the number of widget types and the number of operations respectively. - The second line contains N integers, A1, A2, A3 ... AN, where Ai denotes the number of widgets of the i-th type. - Each of the next Q lines contains one of the following three operations: - `1 x y` - Add y widgets to the x-th type. - `2 x y` - Remove y widgets from the x-th type. It is guaranteed that there are at least y widgets of the x-th type before this operation. - `3 x y` - Print the total number of widgets from the x-th type to the y-th type inclusive. ------ Output Format ------ For each `3 x y` operation, print a single integer denoting the total number of widgets from the x-th type to the y-th type inclusive. ------ Constraints ------ 1 ≤ N ≤ 100000 1 ≤ Q ≤ 100000 1 ≤ x ≤ y ≤ N 1 ≤ Ai ≤ 1000 1 ≤ y ≤ 1000 ----- Sample Input 1 ------ 5 6 10 5 7 3 8 3 1 3 1 2 4 3 1 3 2 4 1 3 3 5 1 5 2 ----- Sample Output 1 ------ 22 26 18 ----- Explanation 1 ------ Initial state of the widget types: [10, 5, 7, 3, 8] After first operation: Query total from 1 to 3, which is 10 + 5 + 7 = 22. After second operation: Add 4 widgets to the 2nd type, now the state becomes [10, 9, 7, 3, 8]. After third operation: Query total from 1 to 3, which is 10 + 9 + 7 = 26. After fourth operation: Remove 1 widget from the 4th type, now the state becomes [10, 9, 7, 2, 8]. After fifth operation: Query total from 3 to 5, which is 7 + 2 + 8 = 17.","solution":"class InventoryManagement: def __init__(self, n, widgets): Initialize the inventory with the number of widget types and their quantities. self.n = n self.widgets = widgets def add_widgets(self, x, y): Add y widgets to the x-th type. self.widgets[x - 1] += y def remove_widgets(self, x, y): Remove y widgets from the x-th type. self.widgets[x - 1] -= y def query_widgets(self, x, y): Print the total number of widgets from the x-th type to the y-th type inclusive. return sum(self.widgets[x - 1: y]) def process_operations(n, q, widgets, operations): inventory = InventoryManagement(n, widgets) results = [] for operation in operations: op = operation.split() if op[0] == \'1\': inventory.add_widgets(int(op[1]), int(op[2])) elif op[0] == \'2\': inventory.remove_widgets(int(op[1]), int(op[2])) elif op[0] == \'3\': result = inventory.query_widgets(int(op[1]), int(op[2])) results.append(result) return results"},{"question":"You are given a grid with n rows and m columns. Some cells in the grid are blocked, whereas others are unblocked. You are allowed to move horizontally or vertically between adjacent unblocked cells. The goal is to determine if there exists a path from the top-left cell (1, 1) to the bottom-right cell (n, m). Write a function `is_path_possible(n, m, blocked_cells)` that takes the following parameters: - `n`: an integer representing the number of rows. - `m`: an integer representing the number of columns. - `blocked_cells`: a list of tuples where each tuple (i, j) represents the coordinates of a blocked cell. Your function should return `True` if there is a path from the top-left cell to the bottom-right cell, and `False` otherwise. Input - An integer `n` (1 ≤ n ≤ 1000) — the number of rows in the grid. - An integer `m` (1 ≤ m ≤ 1000) — the number of columns in the grid. - A list of tuples `blocked_cells` with 0 ≤ |blocked_cells| ≤ n * m. Each tuple contains two integers (i, j) (1 ≤ i ≤ n, 1 ≤ j ≤ m) representing the coordinates of a blocked cell. Output Return a boolean `True` if a path is possible from the top-left cell to the bottom-right cell, otherwise return `False`. Example Input n = 3 m = 3 blocked_cells = [(1, 2), (2, 2), (3, 2)] Output False Input n = 3 m = 3 blocked_cells = [(1, 2), (2, 2)] Output True","solution":"def is_path_possible(n, m, blocked_cells): from collections import deque # If the start or end cells are blocked, immediately return False if (1, 1) in blocked_cells or (n, m) in blocked_cells: return False blocked_set = set(blocked_cells) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([(1, 1)]) visited.add((1, 1)) while queue: x, y = queue.popleft() if (x, y) == (n, m): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) not in blocked_set and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"Design a function that determines the number of ways you can traverse from the top-left corner to the bottom-right corner of an `m x n` grid, moving only right or down at each step. Example 1: Input: m = 2, n = 2 Output: 2 Explanation: There are two ways to traverse this grid: 1. Right -> Down 2. Down -> Right Example 2: Input: m = 3, n = 3 Output: 6 Explanation: There are six ways to traverse this grid. Your Task: Complete the function countPaths() which takes two integers m and n as input and returns the number of ways to traverse the grid. Expected Time Complexity: O(min(m, n)) Expected Space Complexity: O(1) Constraints: 1 <= m, n <= 10","solution":"def countPaths(m, n): Returns the number of ways to traverse an m x n grid from the top-left corner to the bottom-right corner, moving only right or down at each step. if m == 1 or n == 1: return 1 # Initialize the number of paths to 1 (since one path if either dimension is 1) paths = 1 # Calculate the numerator for the binomial coefficient (m + n - 2)! for i in range(max(m-1, n-1) + 1, m+n-1): paths *= i # Calculate the denominator for the binomial coefficient which is (min(m-1, n-1))! for i in range(1, min(m-1, n-1) + 1): paths //= i return paths"},{"question":"------ Problem Statement ------ You are given an integer array A of length N. You are allowed to perform the following type of operation on A any number of times: - Pick any subarray of size M (where M is a positive integer less than or equal to N) and reverse it. Determine the minimum possible number of inversions in the array after performing any number of the allowed operations. An inversion is defined as a pair (i, j) where i < j and A[i] > A[j]. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line of each test case contains N space-separated integers denoting the elements of the array A. ------ Output ------ For each test case, print a single line containing one integer ― the minimum possible number of inversions in the array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 |A[i]| ≤ 10^9 the sum of N over all test cases does not exceed 10^6 ------ Subtasks ------ Subtask #1 (20 points): N ≤ 100 Subtask #2 (80 points): original constraints ------ Sample Input 1 ------ 2 5 3 1 2 5 4 4 4 3 2 1 ------ Sample Output 1 ------ 1 0 ------ Explanation 1 ------ Example case 1: You can reverse the subarray from index 1 to 3 resulting in the array [3, 2, 1, 5, 4]. There will be only one inversion: (1, 2) in the array. Example case 2: The array is already sorted in descending order. By reversing the entire array, you can sort it in ascending order, resulting in zero inversions.","solution":"def count_inversions(arr): Helper function to count inversions in an array using a modified merge sort algorithm. if len(arr) < 2: return 0 mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] inv_count = count_inversions(left) + count_inversions(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] inv_count += (mid - i) j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 return inv_count def min_inversions_after_sorting(arr): The goal of the problem is to determine the minimum number of inversions after sorting the array. Since we can reverse any subarray, we can always sort the entire array, thus eliminating all inversions. return 0 def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_inversions_after_sorting(arr)) return results"},{"question":"Mallory is an avid fisherman who likes to keep track of his fishing achievements. He goes on n fishing trips and catches a certain number of fish on each trip. However, sometimes he faces days when he catches fewer fish than his previous trip, which makes him disappointed. Hence, he wants to modify the number of fish caught on some trips so that each trip\'s fish count is at least as many as the previous one. To help Mallory, you can perform the following operation on his fishing records an arbitrary number of times: - Choose any index i (1 le i le n) and increase the number of fish on trip i by 1. Mallory wants the total number of fish caught across all trips to be as less modified as possible because he values his integrity. However, the fishing records are extensive, and Mallory is having difficulty optimizing the modifications. Can you help Mallory by determining the minimum number of modifications required to achieve monotonically non-decreasing fish counts for all his trips? Consider the following example where Mallory had 5 trips and the fish counts were 3, 2, 5, 1, 2: By applying the operation once on trip 2, four times on trip 4, and three times on trip 5, we can end up with fish counts 3, 3, 5, 5, 5. The minimum number of modifications required is 1 + 4 + 3 = 8. -----Input----- The first line of input contains an integer t (1 le t le 10^4) -- the number of test cases. The first line of each test case contains an integer n (1 le n le 2 cdot 10^5) -- the number of fishing trips. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9) -- the number of fish caught on each trip. The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output one integer, the minimum number of modifications required for Mallory\'s fishing records to become monotonically non-decreasing. -----Examples----- Input 2 5 3 2 5 1 2 3 1 2 3 Output 8 0 -----Note----- Example 1: By applying the operation once on trip 2 (to make it 3), four times on trip 4 (to make it 5), and three times on trip 5 (to make it 5), we can achieve a sequence 3, 3, 5, 5, 5 with total modifications 8. Example 2: The fish counts are already non-decreasing, so no modifications are required, and the output is 0.","solution":"def min_modifications_to_non_decreasing(trips): total_modifications = 0 for i in range(1, len(trips)): if trips[i] < trips[i-1]: total_modifications += trips[i-1] - trips[i] trips[i] = trips[i-1] return total_modifications def process_fishing_records(t, records): results = [] for record in records: n, trips = record results.append(min_modifications_to_non_decreasing(trips)) return results"},{"question":"Problem Statement Given an array `A` of `n` integers, you are required to respond to `q` queries. Each query consists of two integers `L` and `R`, and requires you to return the sum of all prime numbers in the subarray `A[L...R]` inclusive. Write a function to process these queries efficiently. To keep the solution efficient, preprocess the array with necessary information before handling the queries. INPUT The first line contains a single integer `n`, the number of elements in array `A`. The second line contains `n` space-separated positive integers representing the elements of the array `A`. The third line contains a single integer `q`, the number of queries. Each of the next `q` lines contains two integers `L` and `R` (1 ≤ L ≤ R ≤ n), representing each query. OUTPUT For each query, output the sum of the prime numbers in the subarray `A[L...R]` in a separate line. CONSTRAINTS 1 ≤ n ≤ 10^5 1 ≤ A[i] ≤ 10^6 1 ≤ q ≤ 10^5 SAMPLE INPUT 5 2 3 4 5 6 3 1 3 2 5 1 5 SAMPLE OUTPUT 5 8 10 Explanation For the first query (1, 3), the subarray is [2, 3, 4]. The prime numbers in this subarray are 2 and 3, and their sum is 5. For the second query (2, 5), the subarray is [3, 4, 5, 6]. The prime numbers in this subarray are 3 and 5, and their sum is 8. For the third query (1, 5), the subarray is [2, 3, 4, 5, 6]. The prime numbers in this subarray are 2, 3, and 5, and their sum is 10.","solution":"def sieve_of_eratosthenes(max_num): Generates a list of booleans that indicates whether numbers are prime. Returns an array is_prime where is_prime[i] is True if i is a prime number. is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p <= max_num): if (is_prime[p] == True): for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 return is_prime def preprocess_prime_sums(A, is_prime): Generates a prefix sum array for prime numbers in the array A. Returns prime_sum where prime_sum[i] is the sum of all prime numbers from A[0] to A[i-1]. n = len(A) prime_sum = [0] * (n + 1) for i in range(1, n + 1): prime_sum[i] = prime_sum[i - 1] if is_prime[A[i - 1]]: prime_sum[i] += A[i - 1] return prime_sum def sum_of_primes_in_range(prime_sum, L, R): Returns the sum of prime numbers in the subarray A[L-1...R-1]. return prime_sum[R] - prime_sum[L - 1] def process_queries(A, queries): Processes a list of queries on the array A and returns the results. max_num = max(A) is_prime = sieve_of_eratosthenes(max_num) prime_sum = preprocess_prime_sums(A, is_prime) results = [] for L, R in queries: results.append(sum_of_primes_in_range(prime_sum, L, R)) return results"},{"question":"You are given a matrix of dimensions n x m filled with integers. You can select exactly one submatrix from this matrix and multiply all the elements in the selected submatrix by -1. The goal is to find the maximum possible sum of matrix elements after inverting exactly one submatrix. The submatrix can be of any size (including the entire matrix or a single element) and it should be a contiguous block of cells. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the matrix. - The next n lines each contain m integers, representing the elements of the matrix. The matrix elements are between -10^4 and 10^4. Output - Output one integer, the maximum possible sum of the matrix elements after inverting exactly one submatrix. Examples Input 3 3 1 2 3 4 -5 -6 7 8 9 Output 45 Input 2 2 -1 -2 -3 -4 Output 10 Note In the first sample, by inverting the submatrix containing elements -5 and -6, the resulting matrix will have the maximum possible sum which is 45. In the second sample, by inverting the entire matrix, the sum of the resulting matrix will be 10.","solution":"def max_submatrix_sum(n, m, matrix): This function computes the maximum possible sum of the matrix elements after inverting exactly one submatrix. original_sum = sum(sum(row) for row in matrix) # Function to calculate sum of submatrix from (i1, j1) to (i2, j2) def submatrix_sum(i1, j1, i2, j2): return sum(matrix[i][j] for i in range(i1, i2 + 1) for j in range(j1, j2 + 1)) max_sum = original_sum for i1 in range(n): for j1 in range(m): for i2 in range(i1, n): for j2 in range(j1, m): current_submatrix_sum = submatrix_sum(i1, j1, i2, j2) new_sum = original_sum - 2 * current_submatrix_sum max_sum = max(max_sum, new_sum) return max_sum"},{"question":"Given an integer array nums, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function generateSubsets() which takes an integer array nums as input and returns a list of all possible subsets in lexicographical order. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(2^n * n) Constraints: 0 <= nums.length <= 10 -10 <= nums[i] <= 10","solution":"def generate_subsets(nums): Generate all possible subsets from the given list `nums`. Parameters: nums (List[int]): A list of integers. Returns: List[List[int]]: A list of all possible subsets. subsets = [[]] for num in nums: subsets += [curr + [num] for curr in subsets] return subsets"},{"question":"You are given a string containing different characters and you are asked to determine the first non-repeating character in it. If all characters are repeated, return \\"-1\\". Input: The first line contains the number of test cases T. Each test case contains a single string s. Output: Print the non-repeating character for each test case. If none exists, print \\"-1\\". Constraints: 1 ≤ T ≤ 100 1 ≤ |s| ≤ 10^5 SAMPLE INPUT 2 aabbccddeeffg aabbcc SAMPLE OUTPUT g -1","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating, return \\"-1\\". character_count = {} # Counting occurrence of each character for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 # Finding the first non-repeating character for char in s: if character_count[char] == 1: return char return \\"-1\\" def process_test_cases(test_cases): Processes a list of test cases and returns a list of results for each test case. results = [] for s in test_cases: results.append(first_non_repeating_character(s)) return results"},{"question":"Write a function that takes an array of integers and returns a new array containing only the elements that are repeated more than once in the original array. **Example:** ```python find_duplicates([1, 2, 2, 3, 3, 3, 4]) # should return [2, 3] find_duplicates([5, 5, 6, 7, 8, 8, 8]) # should return [5, 8] ```","solution":"from collections import Counter def find_duplicates(arr): Returns a new array containing only the elements that are repeated more than once in the original array. count = Counter(arr) return [item for item, freq in count.items() if freq > 1]"},{"question":"You\'ve been assigned the task of creating a network for data distribution using servers. The servers can be represented as nodes in a graph, where each connection between two servers is undirected and has an associated latency cost. Given a graph with `n` nodes and `m` edges, find the minimum additional connections (edges) needed so that every server (node) can communicate with every other server (node) with a maximum latency of `k`. Input The first line contains three integers: `n` (2 ≤ n ≤ 10^4), `m` (1 ≤ m ≤ 10^5), and `k` (1 ≤ k ≤ 10^9). Each of the following `m` lines contains three integers `u`, `v`, and `l` (1 ≤ u, v ≤ n, 1 ≤ l ≤ 10^9), representing an edge connecting nodes `u` and `v` with a latency of `l`. Output The first line of the output should contain a single integer `t`, representing the number of additional connections required. If it is impossible to achieve the goal with any number of additional connections, output `-1`. Example Input 6 7 4 1 2 2 2 3 2 3 4 2 4 5 2 5 6 2 1 5 7 2 6 1 Output -1 Explanation In this graph, there is no way to add additional connections to ensure that every server can communicate with any other server with a maximum latency of 4. Therefore, the output is `-1`.","solution":"import heapq def min_additional_connections(n, m, k, edges): # Creating the adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) # Function to find the shortest path from start to all other nodes def dijkstra(start): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Check if we can ensure max latency of k for i in range(1, n + 1): distances_from_node = dijkstra(i) for j in range(1, n + 1): if distances_from_node[j] > k: return -1 # If no additional edges are required return 0 # Example Usage def main(): n, m, k = 6, 7, 4 edges = [ (1, 2, 2), (2, 3, 2), (3, 4, 2), (4, 5, 2), (5, 6, 2), (1, 5, 7), (2, 6, 1) ] print(min_additional_connections(n, m, k, edges)) # Output: -1 if __name__ == \\"__main__\\": main()"},{"question":"A new online marketplace allows users to create and update listings for items they want to sell. Each listing includes an item name, category, price, and stock quantity. The system maintains an inventory list and needs to perform operations such as adding a new listing, updating an existing listing, and querying the list of available items in a specific category under a certain price threshold. Create a program that manages these inventory operations based on input instructions. Input The input consists of multiple lines: - An integer `n` (1 ≤ n ≤ 1000), the number of operations. - Each of the next `n` lines describes an operation in one of the following formats: - \\"ADD item_name category price quantity\\": Add a new listing to the inventory. - \\"UPDATE item_name new_price new_quantity\\": Update the price and quantity of an existing item. - \\"QUERY category price_threshold\\": List the names of items in a specific category that are priced less than or equal to the price threshold. Item names and categories are strings with a maximum length of 50 characters, prices are floating-point numbers, and quantities are integers. Output For each \\"QUERY\\" operation, output a list of item names that match the query sorted in alphabetical order, each on a new line. If no items match, output \\"None\\". Example Input 8 ADD Laptop Electronics 999.99 10 ADD Headphones Electronics 199.99 5 ADD T-Shirt Clothing 29.99 50 UPDATE Laptop 899.99 8 QUERY Electronics 200.00 UPDATE Headphones 179.99 3 QUERY Electronics 180.00 QUERY Clothing 30.00 Output Headphones None T-Shirt Output the answers to the queries in the order they were made. If no items match the query, output \\"None\\".","solution":"class InventoryManager: def __init__(self): self.inventory = {} def add_item(self, item_name, category, price, quantity): self.inventory[item_name] = { \'category\': category, \'price\': float(price), \'quantity\': int(quantity) } def update_item(self, item_name, new_price, new_quantity): if item_name in self.inventory: self.inventory[item_name][\'price\'] = float(new_price) self.inventory[item_name][\'quantity\'] = int(new_quantity) def query_items(self, category, price_threshold): result = sorted([ item_name for item_name, details in self.inventory.items() if details[\'category\'] == category and details[\'price\'] <= float(price_threshold) ]) return result if result else [\\"None\\"] def execute_operations(operations): manager = InventoryManager() outputs = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": _, item_name, category, price, quantity = parts manager.add_item(item_name, category, price, quantity) elif command == \\"UPDATE\\": _, item_name, new_price, new_quantity = parts manager.update_item(item_name, new_price, new_quantity) elif command == \\"QUERY\\": _, category, price_threshold = parts result = manager.query_items(category, price_threshold) outputs.append(result) return outputs # Parsing input and processing operations def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") n = int(data[0]) operations = data[1:n+1] results = execute_operations(operations) for result in results: for item in result: print(item) if __name__ == \\"__main__\\": main()"},{"question":"A network of sensors is set up in a grid, where each sensor can either be active or inactive. Sensors are represented as a 2D grid of size m x n. The goal is to understand the extent of communication coverage provided by these sensors. A sensor at cell (i, j) can communicate with another sensor at cell (k, l) if there\'s a direct horizontal or vertical line of active sensors connecting them (no gaps). Write a function `max_communication_area` that returns the size of the largest rectangular area covered exclusively by active sensors. -----Input----- * The function `max_communication_area` accepts a 2D list of integers as an argument, representing the grid where `1` indicates an active sensor and `0` indicates an inactive sensor. -----Output----- * Return an integer representing the size of the largest rectangular area composed solely of active sensors. -----Examples----- Example 1: Input [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output 6 Explanation: The largest rectangular area of active sensors is of size 2x3. Example 2: Input [ [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 0] ] Output 6 Explanation: The largest rectangular area of active sensors is of size 2x3. Example 3: Input [ [0, 0, 0], [0, 0, 0] ] Output 0 Explanation: No active sensors are forming a rectangular area.","solution":"def max_communication_area(matrix): if not matrix: return 0 max_area = 0 m, n = len(matrix), len(matrix[0]) heights = [0] * n for i in range(m): for j in range(n): # Update the running count of \'1\'s in each column. heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0 # Function to calculate the maximal rectangle using the histogram technique. max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) # Sentinel to ensure we empty the stack at the end for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the sentinel return max_area"},{"question":"Kaori is a software developer who needs to write a log managing module for her application. The logs are categorized into three levels: INFO, WARNING, and ERROR. Each log entry has a timestamp, level, and message. Write a function `filter_logs(logs: List[Tuple[str, str, str]], level: str, start_time: str, end_time: str) -> List[str]` that takes in a list of logs and filters them based on the log level, start time, and end time. The function should return a list of messages that match the given criteria. - `logs`: A list of tuples where each tuple contains three strings in the format `(timestamp, level, message)`. The `timestamp` is given as \\"YYYY-MM-DD HH:MM:SS\\". - `level`: A string that can be \\"INFO\\", \\"WARNING\\", or \\"ERROR\\". - `start_time`: A string representing the start timestamp in the same format as log timestamps. - `end_time`: A string representing the end timestamp in the same format as log timestamps. -----Constraints----- - The `logs` list contains at most 10^5 entries. - Timestamps follow the format \\"YYYY-MM-DD HH:MM:SS\\". - The `start_time` and `end_time` will always be valid timestamps where `start_time` <= `end_time`. -----Input----- Input is given in the following format: - A list of log entries - A log level to filter by - A start timestamp - An end timestamp -----Output----- Output should be a list of messages that match the criteria in the given format. -----Example Input----- logs = [ (\\"2023-01-01 12:00:00\\", \\"INFO\\", \\"Application started\\"), (\\"2023-01-01 13:00:00\\", \\"WARNING\\", \\"High memory usage\\"), (\\"2023-01-01 14:00:00\\", \\"ERROR\\", \\"Application crashed\\"), (\\"2023-01-02 09:00:00\\", \\"INFO\\", \\"Application restarted\\"), ] level = \\"WARNING\\" start_time = \\"2023-01-01 11:00:00\\" end_time = \\"2023-01-01 14:30:00\\" -----Example Output----- [\\"High memory usage\\"] In this example, the logs that match the \\"WARNING\\" level and fall within the \\"2023-01-01 11:00:00\\" to \\"2023-01-01 14:30:00\\" time range are filtered, and the corresponding message is returned.","solution":"from typing import List, Tuple from datetime import datetime def filter_logs(logs: List[Tuple[str, str, str]], level: str, start_time: str, end_time: str) -> List[str]: Filters the logs based on the log level, start time, and end time. Parameters: - logs: List of tuples where each tuple contains three strings in the format (timestamp, level, message). - level: A string that can be \\"INFO\\", \\"WARNING\\", or \\"ERROR\\". - start_time: A string representing the start timestamp in the same format as log timestamps. - end_time: A string representing the end timestamp in the same format as log timestamps. Returns: - A list of messages that match the given criteria. start_datetime = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_datetime = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") filtered_logs = [ message for timestamp, log_level, message in logs if log_level == level and start_datetime <= datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") <= end_datetime ] return filtered_logs"},{"question":"Task Given an integer array `nums` and an integer `k`, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to `k`. Example longestSubarray([8, 2, 4, 7], 4) => 2 ``` Explanation: The longest subarrays are [8, 2], [4, 7], etc. Maximum length is 2. ``` longestSubarray([10, 1, 2, 4, 7, 2], 5) => 4 ``` Explanation: The longest subarray is [2, 4, 7, 2]. Maximum length is 4. ``` longestSubarray([1, 5, 6, 7, 8, 10, 6, 5, 6], 4) => 5 ``` Explanation: The longest subarray is [6, 7, 8, 10, 6]. Maximum length is 5. ``` Note - The range of `nums` is [1, 10^5]. - `k` is a non-negative integer within the range from 0 to 10^5. ```python longest_subarray([8, 2, 4, 7], 4) => 2 longest_subarray([10, 1, 2, 4, 7, 2], 5) => 4 longest_subarray([1, 5, 6, 7, 8, 10, 6, 5, 6], 4) => 5 ```","solution":"from collections import deque def longest_subarray(nums, k): Returns the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to k. Parameters: - nums: a list of integers. - k: an integer. Returns: - the maximum length of a contiguous subarray. max_len = 0 start = 0 min_deque = deque() max_deque = deque() for end in range(len(nums)): while min_deque and nums[min_deque[-1]] >= nums[end]: min_deque.pop() while max_deque and nums[max_deque[-1]] <= nums[end]: max_deque.pop() min_deque.append(end) max_deque.append(end) while nums[max_deque[0]] - nums[min_deque[0]] > k: start += 1 if min_deque[0] < start: min_deque.popleft() if max_deque[0] < start: max_deque.popleft() max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given a binary tree, implement a function to determine the maximum depth of the tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. For example, consider the following binary tree: ``` 3 / 9 20 / 15 7 ``` The depth of this tree is 3. # Example ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right # Example Tree # root = TreeNode(3) # root.left = TreeNode(9) # root.right = TreeNode(20, TreeNode(15), TreeNode(7)) ``` Write a function maxDepth (or max_depth in Python) that takes a TreeNode as input and returns an integer representing the maximum depth of the binary tree. ```python def maxDepth(root: TreeNode) -> int: # Your code here pass # Example usage: # root = TreeNode(3) # root.left = TreeNode(9) # root.right = TreeNode(20, TreeNode(15), TreeNode(7)) # print(maxDepth(root)) # Output: 3 ```","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def maxDepth(root: TreeNode) -> int: Determine the maximum depth of a binary tree. if root is None: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function that takes a positive integer n as an argument and returns an integer that is the sum of all the Fibonacci numbers up to the n-th term (inclusive). The function should use memoization to optimize the performance. Function Description Complete the fibonacci_sum function in the editor below. fibonacci_sum has the following parameter: - int n: the term up to which the sum is calculated Returns - int: the sum of all Fibonacci numbers up to the n-th term Input Format A single integer, n. Constraints 0 leq n leq 50 Sample Input 0 5 Sample Output 0 12 Explanation 0 The first 5 Fibonacci numbers are: 0, 1, 1, 2, 3, 5. Their sum is 12.","solution":"def fibonacci_sum(n): Returns the sum of all Fibonacci numbers up to the n-th term (inclusive). memo = {0: 0, 1: 1} def fibonacci(n): if n in memo: return memo[n] memo[n] = fibonacci(n-1) + fibonacci(n-2) return memo[n] if n == 0: return 0 total_sum = 0 for i in range(n + 1): total_sum += fibonacci(i) return total_sum"},{"question":"Alex is organizing a trading card game competition. To ensure everything goes smoothly, Alex wants to determine the maximum number of different cards one can collect by performing a series of trades. Each trade involves exchanging one card of a specific type for another card of a specific type. Unfortunately, due to some complicated rules, it may not be possible to perform some trades more than once, and Alex needs to be cautious about which trades to execute. The competition has n different types of cards, numbered from 0 to n-1, and m possible trades, each of which is represented as a one-way trade between two cards of different types. Alex starts with exactly one card of type 0 and wants to find out the maximum number of different types of cards Alex can end up with after a sequence of trades. -----Input----- - The first line has two integers, 1leq n leq 1000 and 0leq m leq 10000, the number of card types and the number of possible trades. - The next m lines each contain two integers, 0leq s < n and 0leq t < n, indicating a one-way trade from card type s to card type t. No trade appears twice in the input. -----Output----- - Print a single integer representing the maximum number of different card types Alex can collect. -----Examples----- Sample Input 1: 4 3 0 1 1 2 1 3 Sample Output 1: 4 Sample Input 2: 3 2 0 1 2 1 Sample Output 2: 2","solution":"def max_unique_cards(n, m, trades): from collections import deque # Create adjacency list for graph representation adj_list = [[] for _ in range(n)] for s, t in trades: adj_list[s].append(t) # Perform a BFS to find all reachable nodes starting from card type 0 visited = [False] * n queue = deque([0]) visited[0] = True count = 1 while queue: current = queue.popleft() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count"},{"question":"Given a string S, which contains only digits, find the minimum number you can form by deleting exactly one digit from the string S. Example 1: Input: S = \\"1432219\\" Output: \\"132219\\" Explanation: Deleting \'4\' from the string, the minimum resulting number is \\"132219\\". Example 2: Input: S = \\"10200\\" Output: \\"200\\" Explanation: Deleting \'1\' from the string, the minimum resulting number is \\"0200\\", which can be simplified to \\"200\\". Your Task: You don\'t need to read input or print anything. Complete the function minNumberByDeletingOneDigit() that takes string S as input parameter and returns a string representing the minimum number that can be removed by deleting one digit. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ S.length ≤ 10^5 S contains only digits and no leading zeroes except when the entire number is zero.","solution":"def minNumberByDeletingOneDigit(S): Takes a string S composed of digits and returns the minimum number formed by deleting exactly one digit. min_number = S[1:] # Start with the result of removing the first digit for i in range(1, len(S)): current_number = S[:i] + S[i+1:] if current_number < min_number: min_number = current_number return min_number.lstrip(\'0\') or \'0\' # lstrip to remove leading zeros except when the result is \'0\'"},{"question":"Given an array of N integers and a target integer K, determine if there exists a pair of integers in the array whose product is exactly K. Constraints - 1 leq N leq 10^5 - -10^9 leq A_i leq 10^9 for i from 1 to N - -10^{18} leq K leq 10^{18} Input The input is given in the following format: - The first line contains the two integers N and K. - The second line contains N integers A_1, A_2, ldots, A_N, representing the array elements. Output Output \\"Yes\\" if there is a pair of integers in the array whose product is exactly K. Otherwise, output \\"No\\". Examples Input 5 20 4 5 2 10 0 Output Yes Input 4 9 1 2 3 4 Output No","solution":"def has_pair_with_product(n, k, arr): Determines if there exists a pair of integers in the array whose product is exactly k. :param n: Number of integers in the array :param k: Target product :param arr: List of integers in the array :return: \\"Yes\\" if such a pair exists, otherwise \\"No\\" if k == 0: return \\"Yes\\" if 0 in arr and arr.count(0) > 1 else \\"No\\" product_set = set() for num in arr: if num != 0 and k % num == 0: if k // num in product_set: return \\"Yes\\" product_set.add(num) return \\"No\\""},{"question":"Anna recently got involved in a unique coding experiment which involves manipulating integer sequences. Given an array of integers, her task is to identify the smallest possible length of a subsequence of the array that can be removed such that all remaining elements in the array are unique. A subsequence of an array is a sequence obtained by deleting some or none of the elements in the array without changing the order of the remaining elements. input: The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 108) — the elements of the array. output: Print a single integer — the length of the smallest subsequence that needs to be removed. Examples Input 6 4 1 2 2 1 3 Output 2 Input 7 7 6 5 6 7 7 8 Output 3 Note In the first example, removing the subsequence [2, 1] from the initial array makes all elements in the resulting array unique, which is the smallest possible length. In the second example, removing the subsequence [6, 7, 7] from the initial array results in the array [7, 5, 8]. This makes all remaining elements unique with the smallest subsequence length removed.","solution":"from collections import Counter def smallest_subsequence_to_remove(arr): Returns the length of the smallest subsequence that needs to be removed such that all remaining elements in the array are unique. freq = Counter(arr) duplicates = [freq[key] - 1 for key in freq if freq[key] > 1] return sum(duplicates) # Example Usage n = 6 arr = [4, 1, 2, 2, 1, 3] print(smallest_subsequence_to_remove(arr)) # Output: 2"},{"question":"Write a program to calculate the nth Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n geq 2 The Fibonacci sequence begins as 0, 1, 1, 2, 3, 5, 8, 13,ldots Implement a function `fibonacci` that takes a single integer n and returns the nth Fibonacci number. Function Description Complete the fibonacci function in the editor below. It should return the nth Fibonacci number. fibonacci has the following parameter(s): - n: an integer Input Format Input consists of a single integer n. Constraints 0 leq n leq 50 Output Format Return the nth Fibonacci number. Sample Input 10 Sample Output 55 Explanation The first 11 Fibonacci numbers (with F(0) being the first) are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The 10th Fibonacci number is 55.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"A magic park in a small town has m flower beds arranged in a row, each containing n flowers. Every flower belongs to one of k distinct species and has a unique count of petals. The park officials have noticed that the beauty of the park increases if two adjacent flower beds contain flowers with the same species and the same number of petals in the same positions. To maximize the park\'s beauty, they want to arrange the flowers within the beds such that the number of adjacent pairs of flower beds that satisfy this condition is maximized. Write a function `maximizeBeauty` which takes an integer m, an integer n, an integer k, and a list of lists representing the flowers in each flower bed (`flowerBeds`), where each `flowerBeds[i][j]` contains a tuple with two integers - the species and the petal count of the j-th flower in the i-th bed. The function should return the maximum number of adjacent pairs of flower beds that have identical flowers in the same positions. Example 1: Input: m = 3 n = 2 k = 2 flowerBeds = [ [(1, 5), (2, 7)], [(1, 5), (2, 7)], [(1, 10), (2, 7)] ] Output: 1 Explanation: There is only 1 adjacent pair of flower beds that have the same flowers in the same positions, which is between the first and the second flower beds. Example 2: Input: m = 4 n = 3 k = 3 flowerBeds = [ [(1, 5), (2, 7), (3, 9)], [(1, 5), (2, 7), (3, 9)], [(1, 5), (2, 7), (3, 9)], [(1, 5), (2, 8), (3, 9)] ] Output: 2 Explanation: There are 2 adjacent pairs of flower beds that have the same flowers in the same positions, which are between the first and the second flower beds, and the second and the third flower beds. Your Task: You don\'t need to read input or print anything. Complete the function `maximizeBeauty()` which takes integers m, n, k, and list of lists `flowerBeds` as input parameters and returns the maximum number of adjacent pairs of flower beds with identical flowers in the same positions. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ m, n ≤ 10^3 1 ≤ k ≤ 10 1 ≤ petal count ≤ 10^3","solution":"def maximizeBeauty(m, n, k, flowerBeds): Returns the maximum number of adjacent pairs of flower beds with identical flowers in the same positions. count = 0 for i in range(m - 1): if flowerBeds[i] == flowerBeds[i + 1]: count += 1 return count"},{"question":"Write a function `allocate_parking_space()` that takes two arguments: an integer representing the number of cars and a list of integers representing the available parking slots in a parking lot. Each parking slot can accommodate one car. Your function should return an integer indicating the number of additional parking slots needed if the current slots are insufficient to accommodate all the cars. If there are enough parking slots, it should return 0. For example, `allocate_parking_space(5, [1, 1, 1, 1, 1])` should return `0`, while `allocate_parking_space(5, [1, 1, 1])` should return `2`.","solution":"def allocate_parking_space(number_of_cars, parking_slots): Determines the number of additional parking slots needed. Parameters: - number_of_cars (int): The number of cars needing parking. - parking_slots (list of int): The existing parking slots. Returns: - int: The number of additional parking slots needed, or 0 if there are enough. available_slots = len(parking_slots) if available_slots >= number_of_cars: return 0 else: return number_of_cars - available_slots"},{"question":"Palindrome HTTP Requests Alice is working on analyzing HTTP GET requests. She notices that some HTTP GET request URL\'s path (i.e., everything after the domain name) forms a palindrome. A palindrome is a string that reads the same forwards and backwards. Alice wants to write a function to test if a given URL\'s path is a palindrome. Can you help her? The function should take a URL in the form \\"http://www.domain.com/path\\" and return \\"Yes\\" if the path is a palindrome and \\"No\\" otherwise. The path may contain characters such as slashes (\\"/\\"), alphanumeric characters, and other special characters. Ignore the protocol and domain for the palindrome check. Input Description: A single string S representing the complete URL. Output Description: A single string \\"Yes\\" if the path is a palindrome, and \\"No\\" otherwise. Constraints: - The length of the input string S does not exceed 1000 characters. - The URL follows standard URL structure and does not contain any query parameters or fragments. Example Input/Output: Example 1: Input: \\"http://www.example.com/madam\\" Output: Yes Example 2: Input: \\"http://www.example.com/racecar\\" Output: Yes Example 3: Input: \\"http://www.example.com/civic\\" Output: Yes Example 4: Input: \\"http://www.example.com/example\\" Output: No Explanation: 1. In Example 1, the path \\"madam\\" reads the same forwards and backwards. 2. In Example 2, the path \\"racecar\\" reads the same forwards and backwards. 3. In Example 3, the path \\"civic\\" reads the same forwards and backwards. 4. In Example 4, the path \\"example\\" does not read the same forwards and backwards.","solution":"def is_palindrome_url_path(url): Returns \\"Yes\\" if the path of the given URL is a palindrome, \\"No\\" otherwise. # Extract the path from the URL path = url.split(\'://\')[-1].split(\'/\', 1)[-1] # Check if the path is a palindrome if path == path[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of tasks, each characterized by the amount of time it takes to complete (t) and the usefulness index (u). You need to select a subset of these tasks such that the sum of the usefulness indices is maximized and the sum of the completion times does not exceed a given limit. Determine the maximum sum of usefulness indices you can achieve without exceeding the given time limit. Input The first line contains two integers n and T (1 ≤ n ≤ 1000; 1 ≤ T ≤ 1000) — the number of tasks and the total time available. Each of the next n lines contains two integers ti and ui (1 ≤ ti ≤ 1000; 1 ≤ ui ≤ 1000) — the time and usefulness index of the i-th task. Output Print a single integer — the maximum sum of usefulness indices. Examples Input 4 6 1 4 2 3 3 5 5 8 Output 12 Input 5 10 3 7 5 8 6 9 2 10 4 6 Output 25 Note In the first test sample, you can select the tasks with times 1, 2, and 3, which will give you a total usefulness index of 4 + 3 + 5 = 12 in a total time of 1 + 2 + 3 = 6. In the second test sample, you can select the tasks with times 3, 5, and 2, which will give you a total usefulness index of 7 + 8 + 10 = 25 in a total time of 3 + 5 + 2 = 10.","solution":"def max_usefulness(tasks, total_time): Determine the maximum sum of usefulness indices you can achieve without exceeding the given time limit. Uses dynamic programming approach. Parameters: tasks (list): A list of tuples where each tuple contains (time, usefulness). total_time (int): The total available time. Returns: int: The maximum sum of usefulness indices. n = len(tasks) # DP table where dp[i][w] represents the maximum usefulness that can be achieved # using the first i items with a maximum time of w dp = [[0] * (total_time + 1) for _ in range(n + 1)] for i in range(1, n + 1): ti, ui = tasks[i - 1] for w in range(total_time + 1): if ti <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - ti] + ui) else: dp[i][w] = dp[i - 1][w] return dp[n][total_time] # Additional helper function to parse input data def parse_input(input_str): lines = input_str.strip().split(\'n\') n, T = map(int, lines[0].split()) tasks = [tuple(map(int, line.split())) for line in lines[1:]] return tasks, T"},{"question":"You are given an array of integers where each element represents the maximum number of steps you can jump forward from that position. Write a function to determine if you can reach the last index starting from the first index. For example, given the array [2,3,1,1,4], the output should be True, as we can jump from index 0 to index 1 (2 steps), then from index 1 to index 2 (3 steps), and finally from index 2 to the last index. Conversely, for the array [3,2,1,0,4], the output should be False, as no matter what, you will always end up at the index 3, which has a 0 and you won\'t be able to move further. Example 1: Input: [2, 3, 1, 1, 4] Output: True Example 2: Input: [3, 2, 1, 0, 4] Output: False","solution":"def can_jump(nums): Determines if you can reach the last index from the first index given the maximum number of steps you can jump forward from that position. :param nums: List[int], list of non-negative integers representing maximum jumps :return: bool, True if you can reach the last index, False otherwise max_reachable = 0 n = len(nums) for i in range(n): if i > max_reachable: return False max_reachable = max(max_reachable, i + nums[i]) return True"},{"question":"Given a list of meetings represented by intervals where meetings[i] = [start_i, end_i], your task is to determine if a person can attend all meetings without any overlaps. A meeting is represented by a pair of integers [start_i, end_i] indicating the start and end times of the meeting, with start_i < end_i. Write a function that returns true if a person can attend all given meetings, otherwise returns false. Example 1: Input: meetings = [[0, 30], [5, 10], [15, 20]] Output: false Explanation: A person cannot attend all three meetings because there are overlapping time intervals. Example 2: Input: meetings = [[7, 10], [2, 4]] Output: true Explanation: There is no overlap between the two meetings, so a person can attend both. Constraints: - 1 <= meetings.length <= 10^4 - 0 <= start_i < end_i <= 10^6","solution":"def can_attend_meetings(meetings): Determine if a person can attend all meetings without any overlaps. :param meetings: List[List[int]], a list of meeting intervals [start_i, end_i] :return: bool, True if a person can attend all meetings, False otherwise # Sort the meetings by start time meetings.sort() # Iterate through the sorted meetings and check for overlaps for i in range(len(meetings) - 1): if meetings[i][1] > meetings[i + 1][0]: return False return True"},{"question":"You are given a grid of size `n x m` with non-negative integers. You need to start from the top-left corner of the grid and reach the bottom-right corner. From each cell, you can only move either right or down to the next cell. Your goal is to maximize the sum of the integers along your path from the top-left corner to the bottom-right corner. Write a program to find out the maximum possible sum you can achieve along such a path. # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` integers representing the cells of the grid. Each integer in the grid is between 0 and 100. # Output Print one integer — the maximum sum possible along a path from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` # Note In the example above, one of the paths to achieve the maximum sum is `1 → 3 → 5 → 2 → 1`. The sum along this path is `1 + 3 + 5 + 2 + 1 = 12`. # Explanation To solve this problem, you need to use dynamic programming. Define `dp[i][j]` as the maximum sum to reach cell `(i, j)`. The state transition is defined as follows: - `dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1])` if `i > 0` and `j > 0` - `dp[i][j] = grid[i][j] + dp[i-1][j]` if `i > 0` and `j == 0` - `dp[i][j] = grid[i][j] + dp[i][j-1]` if `i == 0` and `j > 0` - `dp[i][j] = grid[i][j]` if `i == 0` and `j == 0` The answer is `dp[n-1][m-1]`.","solution":"def max_path_sum(grid, n, m): Returns the maximum possible sum along a path from the top-left corner to the bottom-right corner of a grid. # Create a 2D list to store the maximum path sum at each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Example usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # n, m = 3, 3 # print(max_path_sum(grid, n, m)) # Output: 12"},{"question":"You are tasked with finding the longest valid parenthesis substring from a given string. A valid parenthesis substring is defined by an equal number of opening and closing parentheses that are correctly nested. Write a function `longest_valid_parentheses(s: str) -> int` that takes a string `s` composed of only `(` and `)` characters, and returns the length of the longest valid (well-formed) parentheses substring. # Input - A single string `s` containing `(` and `)` characters of length 0 leq |s| leq 10^4. # Output - An integer representing the length of the longest valid parentheses substring. # Examples Input ``` (()() ``` Output ``` 4 ``` Explanation ``` The longest valid substring is \\"()()\\" ``` Input ``` )()()) ``` Output ``` 4 ``` Explanation ``` The longest valid substring is \\"()()\\" ``` Input ``` )(() ``` Output ``` 2 ``` Explanation ``` The longest valid substring is \\"()\\" ``` # Note - Consider edge cases where there are no valid parentheses or the entire string is a valid parenthesis string. - You can use a stack to help track the positions of open parentheses or any other method that ensures linear time complexity.","solution":"def longest_valid_parentheses(s: str) -> int: Returns the length of the longest valid (well-formed) parentheses substring in s. max_length = 0 stack = [-1] # Initialize stack with -1 to handle edge case for valid substring starting from index 0 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"A bookstore keeps track of the inventory and records every time a book is sold. Each book has a unique ID and every time a book is sold, it gets removed from the inventory. After removing a book, the bookstore also aims to keep track of how many different books remain in the inventory of that type. Write a function that, given the list of book sales, returns the count of unique book IDs still remaining in the inventory after all sales are recorded. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of books sold. The next n lines contain the unique IDs of the books sold, each a string of alphanumeric characters (both uppercase and lowercase) without spaces, with length at most 15. -----Output----- Print the number of unique book IDs remaining in the inventory after all sales are recorded. -----Examples----- Input 5 bookA123 bookB456 bookA123 bookC789 bookB456 Output 1 Input 3 novelXY1 novelXY2 novelXY3 Output 0 -----Note----- In the first test case, after selling books with IDs \\"bookA123\\" and \\"bookB456\\" twice and \\"bookC789\\" once, only \\"bookC789\\" remains unsold, so the count of unique book IDs left in the inventory is 1. In the second test case, all books with IDs \\"novelXY1\\", \\"novelXY2\\", and \\"novelXY3\\" are sold exactly once, resulting in 0 unique book IDs left in the inventory.","solution":"def count_remaining_books(n, book_sales): Returns the count of unique book IDs still remaining in the inventory after all sales are recorded. :param n: int - the number of books sold :param book_sales: List[str] - a list of unique IDs of the books sold :return: int - the number of unique book IDs still remaining in the inventory book_sales_set = set(book_sales) return len(book_sales_set)"},{"question":"Chef has a list of n integers. He wants to know the two largest integers in the list and their sum. Write a program that takes the list of integers and outputs the sum of the two largest integers. ------ Input Format ------ - The first line contains a single integer n denoting the number of integers in the list. - The second line contains n single space-separated integers, denoting the elements of Chef\'s list. ------ Output Format ------ Output a single integer which is the sum of the two largest integers in the list. ------ Constraints ------ 2 ≤ n ≤ 100 -10^5 ≤ list elements ≤ 10^5 ------ Sample Input 1 ------ 5 1 2 3 4 5 ------ Sample Output 1 ------ 9 ------ Explanation 1 ------ The two largest integers in the list are 4 and 5, and their sum is 9. ------ Sample Input 2 ------ 4 10 10 10 10 ------ Sample Output 2 ------ 20 ------ Explanation 2 ------ The two largest integers in the list are both 10, and their sum is 20.","solution":"def sum_of_two_largest_integers(n, lst): Returns the sum of the two largest integers in the list. :param n: Number of integers in the list. :param lst: List of integers. :return: Sum of the two largest integers in the list. if n < 2: raise ValueError(\\"The list must contain at least two elements.\\") # Finding the two largest numbers first_max = second_max = float(\'-inf\') for number in lst: if number > first_max: second_max = first_max first_max = number elif number > second_max: second_max = number return first_max + second_max"},{"question":"You are tasked with managing a forest of trees where each tree has a certain number of leaves attached to its nodes. A path through the forest is defined as any sequence of connected nodes from one tree root to any leaf of that tree. Your goal is to find the maximum number of leaves you can collect by traversing from the root of a tree to one of its leaves, considering you can choose to start from any tree in the forest. **Problem** You are given a forest represented by multiple rooted n-ary trees. Each node in the tree has a certain number of leaves. You need to determine the maximum number of leaves you can collect by choosing an optimal path from any tree root to one of its leaves. The input format is as follows: - The first line contains an integer T, the number of trees in the forest. - For each tree, the input is given in the following format: - The first line contains an integer N, the number of nodes in the tree. - The following N lines contain three integers, `u`, `v`, and `l`, representing an edge between node `u` and node `v`, and `l` leaves attached to node `v`. Note that `u` and `v` are 1-indexed, and the tree root is always node `1`. **Input format:** ``` T N u1 v1 l1 u2 v2 l2 ... uN-1 vN-1 lN-1 ... N u1 v1 l1 ... ``` **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ u, v ≤ N - 0 ≤ l ≤ 1000 **Output format:** - Output a single line containing the maximum number of leaves that can be collected by traversing from the root to a leaf node through an optimal path. **Input example: 1** ``` 2 5 1 2 3 1 3 2 2 4 5 3 5 1 4 1 2 6 2 3 2 2 4 4 ``` **Output example: 1** ``` 8 ``` **Explanation:** In the first tree: - The path `1-2-4` collects `3 + 5 = 8` leaves (maximum). In the second tree: - The path `1-2-4` collects `6 + 4 = 10` leaves (maximum). Therefore, the output is `8 10`. **Input example: 2** ``` 1 3 1 2 1 1 3 5 ``` **Output example: 2** ``` 5 ```","solution":"def max_leaves_forest(T, trees): def dfs(node, leaves, graph): max_leaves = 0 is_leaf = True for neighbor, n_leaves in graph[node]: total_leaves = dfs(neighbor, n_leaves, graph) max_leaves = max(max_leaves, total_leaves) is_leaf = False if is_leaf: return leaves return leaves + max_leaves results = [] for tree in trees: N, edges = tree graph = {i: [] for i in range(1, N + 1)} for u, v, l in edges: graph[u].append((v, l)) max_leaves = dfs(1, 0, graph) results.append(max_leaves) return results # Function to help parse the input lines as described in the problem def parse_input(input_lines): idx = 0 T = int(input_lines[idx]) idx += 1 trees = [] for _ in range(T): N = int(input_lines[idx]) idx += 1 edges = [] for _ in range(N - 1): u, v, l = map(int, input_lines[idx].split()) edges.append((u, v, l)) idx += 1 trees.append((N, edges)) return T, trees"},{"question":"In a magical forest, there are two types of colorful mushrooms, Red and Blue. The mushroom rows grow in a linear arrangement, and each mushroom has a strength value associated with it. The strength indicates how powerful the mushroom is in contributing to the magical aura of the forest. Bobby the bear loves to walk through the forest and admire the mushrooms. He starts at the beginning of any mushroom row and can choose to walk to the next mushroom in the row until he reaches the end. However, Bobby wants to maximize the total strength of mushrooms he admires. To do this, he can use his magical ability to skip exactly one mushroom in the row if it benefits him. Given the strength values of the mushrooms in a row, determine the maximum possible strength Bobby can admire by walking from the beginning to the end, skipping at most one mushroom. -----Input----- The first line of input contains an integer n (2 ≤ n ≤ 100 000), which denotes the number of mushrooms in the row. The next line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4) representing the strength values of the mushrooms in the row. -----Output----- Your output should contain only one integer, the maximum possible strength Bobby can admire by walking through the row, skipping at most one mushroom. -----Example----- Input 5 1 -2 3 5 -1 Output 7 -----Note----- In the example above, the optimal path for Bobby would be to admire the mushrooms with strengths [1, 3, 5], skipping the mushroom with strength -2. The total strength admired is 1 + 3 + 5 = 9. Alternately, Bobby could admire the mushrooms with strengths [1, -2, 3, 5], skipping the last mushroom with strength -1, which results in a total strength of 1 + (-2) + 3 + 5 = 7. However, the maximum possible strength is 9.","solution":"def max_strength_with_skip(n, strengths): # Initialize dp arrays dp_no_skip = [0] * n dp_skip = [0] * n dp_no_skip[0] = strengths[0] dp_skip[0] = float(\'-inf\') for i in range(1, n): dp_no_skip[i] = max(dp_no_skip[i - 1] + strengths[i], strengths[i]) dp_skip[i] = max(dp_no_skip[i - 1], dp_skip[i - 1] + strengths[i]) return max(max(dp_no_skip), max(dp_skip)) # Example testing n = 5 strengths = [1, -2, 3, 5, -1] print(max_strength_with_skip(n, strengths)) # Output should be 9"},{"question":"Emma has a list of n integers called ratings. She wants to distribute a number of awards to each student based on their rating. The awards distribution needs to follow these rules: 1. Each student must receive at least one award. 2. A student with a higher rating than their immediate neighbours must receive more awards than their neighbours. Your task is to determine the minimum number of awards Emma needs to distribute to her students following these rules. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of students. The second line of each test case contains n integers ratings_1, ratings_2, ldots, ratings_n (1 le ratings_i le 10^5) — the ratings of the students. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer representing the minimum number of awards needed. -----Examples----- Input 3 3 1 0 2 4 1 2 2 1 5 1 2 3 2 1 Output 5 6 9 -----Explanation----- In the first test case, a possible distribution of awards is [2, 1, 2]. In the second test case, a possible distribution of awards is [1, 2, 1, 2]. In the third test case, a possible distribution of awards is [1, 2, 3, 2, 1].","solution":"def min_awards(t, test_cases): results = [] for i in range(t): n, ratings = test_cases[i] if n == 1: results.append(1) continue awards = [1] * n # Left to right scan for j in range(1, n): if ratings[j] > ratings[j - 1]: awards[j] = awards[j - 1] + 1 # Right to left scan for j in range(n - 2, -1, -1): if ratings[j] > ratings[j + 1]: awards[j] = max(awards[j], awards[j + 1] + 1) results.append(sum(awards)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) ratings = list(map(int, lines[index + 1].split())) test_cases.append((n, ratings)) index += 2 return t, test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"In this task, you will work with binary numbers. You are given a binary number as a string. Your task is to determine if the number of 1s in the binary representation is equal to the number of 0s. Input Format A single line containing a binary number as a string. Output Format Print True if the number of 1s is equal to the number of 0s. Otherwise, print False. Constraints The binary number will not have any leading zeros, it will have at least one 1, and it will contain only 1s and 0s. Sample Input 101010 Sample Output True Explanation The binary number \\"101010\\" has three 1s and three 0s. Hence, the output is True.","solution":"def equal_ones_and_zeros(binary_number): Returns True if the number of 1s in the binary representation is equal to the number of 0s. Otherwise, returns False. count_1s = binary_number.count(\'1\') count_0s = binary_number.count(\'0\') return count_1s == count_0s"},{"question":"Little Jenny is a passionate gardener, and she loves arranging her flowers in the most aesthetically pleasing ways. She has N flowers, each with a unique height. Jenny wants to arrange the flowers in a single row but with one constraint: for any two flowers i and j (where i < j), the flower at position i should not be taller than the flower at position j. However, sometimes it\'s not possible for Jenny to arrange all flowers in non-decreasing order due to the given heights. Therefore, she wants to remove the minimum number of flowers so that the remaining flowers can be arranged in non-decreasing order. Your task is to help Jenny determine the minimum number of flowers she needs to remove to achieve her desired arrangement. Input: The first line contains a single integer T, the number of test cases. For each test case, the first line contains a single integer N, the number of flowers. The next line contains N integers, representing the heights of the flowers. Output: For each test case, output the minimum number of flowers Jenny needs to remove. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ height ≤ 1000000000 SAMPLE INPUT 2 6 5 1 6 2 3 4 4 9 7 5 3 SAMPLE OUTPUT 2 3 Explanation Test Case # 1: The initial list of flower heights is [5, 1, 6, 2, 3, 4]. By removing the flowers with heights 5 and 1, the remaining flowers [2, 3, 4, 6] can be arranged in non-decreasing order. Therefore, the minimum number of flowers to remove is 2. Test Case # 2: The initial list of flower heights is [9, 7, 5, 3]. To make the list non-decreasing, we need to remove all the flowers except for one. Therefore, the minimum number of flowers to remove is 3.","solution":"def min_removals_to_make_non_decreasing(T, test_cases): def length_of_lis(sequence): if not sequence: return 0 lis = [sequence[0]] for height in sequence[1:]: if height >= lis[-1]: lis.append(height) else: left, right = 0, len(lis) - 1 while left < right: mid = (left + right) // 2 if lis[mid] < height: left = mid + 1 else: right = mid lis[left] = height return len(lis) results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] len_lis = length_of_lis(heights) results.append(N - len_lis) return results"},{"question":"You are given a list of integers. Your task is to determine if there exists a pair of distinct elements in the list such that their sum is equal to a given target value. Example 1: Input: arr = [1, 2, 3, 4] target = 5 Output: true Explanation: There are two pairs (1, 4) and (2, 3) whose sum equals the target value 5. Example 2: Input: arr = [1, 2, 3, 4] target = 8 Output: false Explanation: There are no pairs of elements that add up to the target value 8. Your Task: The task is to complete the function `hasPairWithSum()` which takes a list of integers and a target value as input parameters and returns true if there exists a pair of distinct elements whose sum equals the target value, otherwise returns false. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ length of arr ≤ 10^5 -10^9 ≤ arr[i], target ≤ 10^9","solution":"def hasPairWithSum(arr, target): Determines if there exists a pair of distinct elements in the list such that their sum is equal to a given target value. Parameters: arr (list of int): The input list of integers. target (int): The target sum value. Returns: bool: True if there exists such a pair, False otherwise. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"A plane travels from a launch site towards different destinations. For each destination, you are given the distance `D` (in kilometers) that needs to be traveled. Considering that the plane can fly at a constant speed of `S` kilometers per hour, your task is to calculate the minimum number of whole hours required for the plane to cover the distance to each destination. If the distance cannot be exactly divided by the speed, you should round up to the next whole hour. Input: The first line contains an integer `N` (1 ≤ N ≤ 10) representing the number of destinations. The next line contains the integer `S` (1 ≤ S ≤ 1000) representing the speed of the plane in kilometers per hour. For the following `N` lines, each line contains a single integer `D` (1 ≤ D ≤ 10^6) representing the distance to a particular destination. Output: For each destination, print the destination number, followed by a \\":\\" and the minimum number of whole hours required to cover the distance. Constraints: - The number of test cases, `N`, is between 1 and 10 inclusive. - The speed of the plane, `S`, is between 1 and 1000 kilometers per hour inclusive. - The distance to each destination, `D`, is between 1 and 1,000,000 kilometers inclusive. Sample Input: 3 350 1000 1500 750 Sample Output: Destination 1: 3 Destination 2: 5 Destination 3: 3 Explanation: For the first destination, the plane needs 3 whole hours as 1000/350 = 2.857, which is rounded up to 3. For the second destination, the plane covers the distance in 5 whole hours as 1500/350 = 4.2857, which is rounded up to 5. For the third destination, the plane covers the distance in 3 whole hours as 750/350 = 2.1428, which is rounded up to 3.","solution":"import math def calculate_hours(N, S, distances): results = [] for i, D in enumerate(distances): # Calculate the minimum number of whole hours required hours = math.ceil(D / S) # Append the result in the required format results.append(f\\"Destination {i + 1}: {hours}\\") return results"},{"question":"In a small village, there are N houses standing in a row, numbered from 1 to N from left to right. People living in these houses have pets that sometimes wander off to neighboring houses. The villagers want to ensure that on a particular day, all pets are within their respective houses. To achieve this, they seek to close a certain number of passageways between pairs of houses to prevent pets from wandering. However, closing all passageways isn\'t feasible as it would disrupt the villagers\' daily activities. Each pair of neighboring houses has a passageway that can either be open or closed. Your task is to determine if it\'s possible to close a certain number of passageways such that all houses become disconnected (i.e., each house should become an isolated segment with no connections to any neighboring house), and if so, print one possible way of closing these passageways. If it is impossible, print -1. Input The first line contains an integer N (1 ≤ N ≤ 2*10^5) – the number of houses in the village. The second line contains an integer K (0 ≤ K < N) – the number of passageways to close. Output If it\'s possible to disconnect all the houses by closing exactly K passageways, print N-1 unique integers from 1 to N-1 representing the passageways between house i and house i+1 to close. If it\'s not possible, print -1. Examples Input 5 4 Output 1 2 3 4 Input 3 1 Output -1","solution":"def close_passageways(N, K): Determines if it\'s possible to disconnect all houses by closing exactly K passageways. If possible, returns the K unique integers representing passageways to close. Otherwise, returns -1. if K == N - 1: return list(range(1, N)) else: return -1"},{"question":"Sarah has a string of lowercase letters. She wants to know how many distinct substrings of a given length k can be formed from it. Note that substrings are contiguous sequences of characters within the string. Your task is to write a program that counts the number of distinct substrings of length k in Sarah\'s string. -----Input----- The first line of input contains a single integer k (1 ≤ k ≤ 10^5) — the length of substrings Sarah is interested in. The second line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. It is guaranteed that k will not exceed the length of s. -----Output----- Print the number of distinct substrings of length k in the given string. -----Examples----- Input 2 abacaba Output 4 Input 3 aaaa Output 1 -----Note----- In the first example, the distinct substrings of length 2 are \\"ab\\", \\"ba\\", \\"ac\\", and \\"ca\\". In the second example, the only substring of length 3 is \\"aaa\\".","solution":"def count_distinct_substrings(k, s): Counts the number of distinct substrings of length k in the string s. Parameters: k (int): the length of the substrings. s (str): the string to analyze. Returns: int: the number of distinct substrings of length k. substrings = set() for i in range(len(s) - k + 1): substring = s[i:i+k] substrings.add(substring) return len(substrings)"},{"question":"String Permutations You are tasked with generating all permutations of a given string. A permutation, also called an \\"anagram\\", of a string is a rearrangement of its characters into a different order. Write a function in Python that takes a string and returns a list containing all possible permutations of that string. The order of permutations in the list does not matter. # Function Signature ```python def string_permutations(s: str) -> list: pass ``` # Input - `s`: A string consisting of lowercase alphabetical characters (1 <= len(s) <= 8). # Output - A list of strings, each representing a permutation of the input string. # Example ```python string_permutations(\\"abc\\") ``` Returns (order of elements in the list can vary): ``` [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` # Notes 1. The number of permutations for a string of length `n` is `n!` (n factorial). Hence, for a string of length 8, the total number of permutations will be `8! = 40320`. 2. Ensure the final list contains unique permutations if the input string contains duplicate characters. Articulate any assumptions or constraints you may infer while implementing the function.","solution":"import itertools def string_permutations(s: str) -> list: Returns all possible permutations of the input string s. return [\'\'.join(p) for p in set(itertools.permutations(s))]"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine the minimum number of changes needed to convert S into a balanced string. A string is considered balanced if no two adjacent characters are the same. ------ Input ------ The first line contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S. ------ Output ------ For each test case, print a single line containing one integer — the minimum number of changes required to make the string balanced. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 ----- Sample Input 1 ----- 3 aabb abcd aaaa ----- Sample Output 1 ----- 2 0 3 ----- Explanation 1 ----- Example case 1: You can change the first \'b\' to \'c\' and the last \'a\' to \'d\' to make the string \\"abac\\". Example case 2: The string is already balanced. Example case 3: You can change two \'a\'s to \'b\' and the other \'a\' to \'c\' to make the string \\"abca\\".","solution":"def min_changes_to_balanced(s): changes = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: changes += 1 return changes def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_changes_to_balanced(s)) return results"},{"question":"**Vowel Counter** Create a function called `countVowels` that accepts a single string argument and returns an integer representing the number of vowels (a, e, i, o, u, both lowercase and uppercase) found in the string. If the input string is empty, the function should return 0. Example: * `countVowels(\'hello\')` should return 2 * `countVowels(\'HELLO\')` should return 2 * `countVowels(\'world\')` should return 1 * `countVowels(\'\')` should return 0","solution":"def countVowels(s): Returns the number of vowels in the given string. Vowels are a, e, i, o, u in both lowercase and uppercase. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"You are a software engineer working at a logistics company. Your responsibility includes developing algorithms to optimize the allocation of containers to ships. Each container has a weight, and each ship has a maximum weight capacity it can carry. The goal is to allocate containers to ships such that the total weight of containers on each ship does not exceed its capacity. Given the weights of the containers and the capacities of the ships, determine the maximum number of containers that can be allocated to ships. Write a program that solves this problem. -----Input----- The input consists of several test cases. The first line of input contains a single integer t (1 le t le 100) denoting the number of test cases. The next lines contain descriptions of the test cases. Each test case consists of two lines: - The first line contains two space-separated integers n and m (1 le n, m le 1000), where n is the number of containers and m is the number of ships. - The second line contains n space-separated integers w_1, w_2, ..., w_n (1 le w_i le 10^6) representing the weights of the containers. - The third line contains m space-separated integers c_1, c_2, ..., c_m (1 le c_i le 10^7) representing the weight capacities of the ships. It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 5000. -----Output----- For each test case, output a single line containing a single integer, which is the maximum number of containers that can be allocated to ships such that the total weight of containers on each ship does not exceed its capacity. -----Example----- Input 3 4 2 2 3 7 5 10 8 5 3 8 2 4 2 7 10 12 15 3 1 3 4 5 10 Output 4 5 2 -----Note----- In the first test case, all four containers can be allocated to the two ships without exceeding their capacities: the first ship can take containers with weights 2 and 7 (total weight 9 which is less than 10), and the second ship can take containers with weights 3 and 5 (total weight 8 which is equal to 8). In the second test case, all five containers can be allocated to the three ships without exceeding their capacities. Various allocations are possible. In the third test case, only two out of the three containers can be allocated to the single ship. Various allocations are possible.","solution":"def allocate_containers(t, test_cases): results = [] for test in test_cases: n, m, containers, capacities = test # Sort containers in ascending order containers.sort() # Sort capacities in descending order capacities.sort(reverse=True) container_idx = 0 allocated_containers = 0 for capacity in capacities: current_weight = 0 while container_idx < n and current_weight + containers[container_idx] <= capacity: current_weight += containers[container_idx] allocated_containers += 1 container_idx += 1 results.append(allocated_containers) return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) containers = list(map(int, data[index + 2: index + 2 + n])) capacities = list(map(int, data[index + 2 + n: index + 2 + n + m])) index += 2 + n + m test_cases.append((n, m, containers, capacities)) results = allocate_containers(t, test_cases) for result in results: print(result) # This main function call is intended for local testing. if __name__ == \'__main__\': main()"},{"question":"Your task is to write a function `reverseString`. Given a string input, this function should return the string in reverse order without using built-in reverse functions. For example: ```reverseString(\\"hello\\")``` should return \\"olleh\\" ```reverseString(\\"world\\")``` should return \\"dlrow\\"","solution":"def reverseString(input_string): Returns the input string in reverse order. :param input_string: The string to be reversed. :return: The reversed string. reversed_string = \\"\\" for char in input_string: reversed_string = char + reversed_string return reversed_string"},{"question":"A secret agency has intercepted a message which is encoded using a simple encoding scheme. The message is a sequence containing letters and numbers. Each letter is followed by a number, which indicates how many times that letter should appear consecutively in the decoded message. Your task is to write a function that takes the encoded message as input and returns the decoded message. If the encoded message is invalid (i.e., it does not follow the letter-number pattern), return \\"Invalid Input\\". **Input** - A single line containing the encoded message consisting of English lowercase letters and digits. - The length of the encoded message does not exceed 200 characters. **Output** - A single line containing the decoded message. - If the input is invalid, output \\"Invalid Input\\". **Examples** Input ``` a3b4c2 ``` Output ``` aaabbbbcc ``` Input ``` x1y1 ``` Output ``` xy ``` Input ``` a2b ``` Output ``` Invalid Input ``` Input ``` a5b2c3d1 ``` Output ``` aaaaabbcccd ``` Input ``` z0a1b2 ``` Output ``` abbb ``` **Note** - Ensure that the function can handle cases where the number following the letter is \'0\'. - Each number will always be between \'0\' and \'9\'. - If the input string does not strictly alternate between letters and digits or is empty, the input should be considered invalid.","solution":"def decode_message(encoded_message): Decodes an encoded message where each letter is followed by a number indicating how many times that letter should appear in the decoded message. If the encoded message is invalid, returns \\"Invalid Input\\". :param encoded_message: str, the encoded message consisting of letters and numbers :return: str, the decoded message or \\"Invalid Input\\" if not encoded_message: return \\"Invalid Input\\" decoded_message = [] length = len(encoded_message) i = 0 while i < length: if i + 1 >= length or not encoded_message[i].isalpha() or not encoded_message[i + 1].isdigit(): return \\"Invalid Input\\" letter = encoded_message[i] count = int(encoded_message[i + 1]) decoded_message.append(letter * count) i += 2 return \'\'.join(decoded_message)"},{"question":"You are given an array of n integers representing the heights of a series of buildings. On a training exercise, a team of firefighters is practicing their climbing and rescue skills. They want to use the buildings to create a rescue strategy that involves climbing up and down the buildings in a specific sequence. The team must find two non-overlapping subsequence of buildings such that: - The first subsequence is non-decreasing in heights. - The second subsequence is non-increasing in heights. Your task is to determine the maximum total number of buildings included in both subsequences combined. -----Input----- The input consists of two lines: - The first line contains integer n (1 ≤ n ≤ 1000) — the number of buildings. - The second line contains n space-separated integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 1000), where h_{i} equals the height of the i-th building. -----Output----- Print a single integer — the maximum total number of buildings that can be included in both subsequences combined. -----Examples----- Input 6 5 1 3 4 2 1 Output 5 Input 5 2 2 3 4 3 Output 5 -----Note----- In the first example, the optimal way to form two subsequences is: - Non-decreasing sequence: 1, 3, 4 - Non-increasing sequence: 2, 1 Total number of buildings included: 5. Input from the second example demonstrates that the entire sequence can be used: - Non-decreasing sequence: 2, 2, 3, 4 - Non-increasing sequence: 3 Total number of buildings included: 5","solution":"def max_buildings_in_subsequences(n, heights): def longest_non_decreasing_subseq(arr): if not arr: return [] # Initialize the DP array with the last element dp = [arr[0]] for i in range(1, len(arr)): if arr[i] >= dp[-1]: dp.append(arr[i]) else: for j in range(len(dp)): if dp[j] > arr[i]: dp[j] = arr[i] break return dp def longest_non_increasing_subseq(arr): if not arr: return [] # Initialize the DP array with the last element dp = [arr[0]] for i in range(1, len(arr)): if arr[i] <= dp[-1]: dp.append(arr[i]) else: for j in range(len(dp)): if dp[j] < arr[i]: dp[j] = arr[i] break return dp max_buildings = 0 for i in range(n + 1): left = longest_non_decreasing_subseq(heights[:i]) right = longest_non_increasing_subseq(heights[i:]) max_buildings = max(max_buildings, len(left) + len(right)) return max_buildings"},{"question":"In a distant land, there is a peculiar practice of constructing towers using magical cubes. Each tower is built by stacking these cubes one on top of another. The cubes are of different types, and each type has a distinct magical property that affects the stability of the tower. You are given n cubes, each with a type t_i (1 ≤ t_i ≤ n). We define a tower as a sequence of stacked cubes where all cubes have distinct types. Given an array of cube types, your task is to determine the maximum number of towers that can be constructed and the maximum possible height of any of these towers if the cubes are arranged optimally. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of cubes. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ n) — the types of the cubes. Output Output two integers separated by a space: the maximum number of towers that can be constructed and the maximum height of any of these towers. Examples Input 8 1 2 3 1 2 3 1 2 Output 3 3 Input 5 1 2 3 4 5 Output 5 1 Note In the first sample, three towers can be constructed as follows: 1. Tower 1: [1, 2, 3] 2. Tower 2: [1, 2] 3. Tower 3: [1] The maximum height of any tower is 3. In the second sample, each cube has a distinct type, so five towers can be constructed, each of height 1.","solution":"from collections import Counter from typing import List, Tuple def max_towers_and_height(n: int, cube_types: List[int]) -> Tuple[int, int]: Determines the maximum number of towers that can be constructed and the maximum possible height of any tower. Parameters: n - the number of cubes cube_types - list of integers representing the types of the cubes Returns: A tuple containing two integers: 1. The maximum number of towers that can be constructed. 2. The maximum possible height of any of these towers. # Count the occurrences of each cube type type_counts = Counter(cube_types) # The maximum number of towers is equal to the number of distinct types max_towers = len(type_counts) # The maximum height of any tower is determined by the type with the most occurrences max_height = max(type_counts.values()) return max_towers, max_height"},{"question":"You are working on a project that involves evaluating the performance of different sorting algorithms. Given an array of integers, you need to determine how many inversions are present in the array. An inversion is defined as a pair of indices (i, j) such that i < j and arr[i] > arr[j]. Write a function that takes an array of integers as input and returns the number of inversions in the array. Your solution should be optimized to handle arrays with up to 10^5 elements efficiently. Function Signature: ```python def count_inversions(arr: List[int]) -> int: pass ``` # Input - A list of integers `arr` (1 ≤ |arr| ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). # Output - An integer representing the number of inversions in the array. # Example Input: ``` [2, 4, 1, 3, 5] ``` Output: ``` 3 ``` Explanation: The inversions are: - (0, 2): 2 > 1 - (1, 2): 4 > 1 - (1, 3): 4 > 3 Input: ``` [5, 4, 3, 2, 1] ``` Output: ``` 10 ``` Explanation: The inversions are: - (0, 1): 5 > 4 - (0, 2): 5 > 3 - (0, 3): 5 > 2 - (0, 4): 5 > 1 - (1, 2): 4 > 3 - (1, 3): 4 > 2 - (1, 4): 4 > 1 - (2, 3): 3 > 2 - (2, 4): 3 > 1 - (3, 4): 2 > 1 # Additional Notes 1. Consider using a modified merge sort algorithm to achieve the desired time complexity. 2. Ensure your function handles edge cases, such as an already sorted array or an array with equal elements efficiently.","solution":"def count_inversions(arr): Returns the number of inversions in the array using a modified merge sort algorithm. if not arr: return 0 def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count return merge_sort_and_count(arr, [0]*len(arr), 0, len(arr)-1)"},{"question":"Nikunj loves playing with numbers and solving math problems. Recently, he came across a sequence problem that intrigued him. He wants to find the k-th non-negative number in a unique sequence generated as follows: The sequence starts with 0 and includes all non-negative numbers that do not have any adjacent bits set in their binary representation. More specifically, for a number x in binary representation, if there exists two consecutive \'1\'s (i.e., \\"11\\") in its binary form, it is excluded from the sequence. Otherwise, it is included. Your task is to help Nikunj find the k-th number (0-based index) in this sequence. Input Format: - The first line contains an integer k, the index in the sequence (0-based). Output Format: - Print the k-th number in this unique sequence. Constraints: - 0 ≤ k ≤ 10^6 SAMPLE INPUT 4 SAMPLE OUTPUT 5 Explanation: The sequence of numbers that do not have adjacent bits set is: 0: 0 (binary: 0) 1: 1 (binary: 1) 2: 2 (binary: 10) 3: 4 (binary: 100) 4: 5 (binary: 101) The 4-th number in this sequence is 5.","solution":"def find_kth_non_adjacent_bit_number(k): Function to find the k-th non-negative number in the sequence where numbers do not have adjacent bits set. sequence = [] num = 0 while len(sequence) <= k: if \'11\' not in bin(num)[2:]: sequence.append(num) num += 1 return sequence[k]"},{"question":"Write a function that takes a string of digits and returns the digits in the reverse order as a string. For example, the input \\"12345\\" should return \\"54321\\". The function should handle leading zeros appropriately. For example, an input of \\"00123\\" should return \\"32100\\". ```python def reverse_digits(s: str) -> str: pass # Implement the function ```","solution":"def reverse_digits(s: str) -> str: Returns the digits in the reverse order as a string. return s[::-1]"},{"question":"You are given an n x m grid populated with some blocked and open cells. You can move from one cell to another if both cells are open and share an edge. The grid cells are represented by a 2D list of integers where 0 represents a blocked cell and 1 represents an open cell. Your task is to determine the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can move either down or right at any point in time. Write a function `find_unique_paths(grid: List[List[int]]) -> int` that takes the 2D list `grid` as input and returns the number of unique paths from the top-left to the bottom-right corner. If the start or end cell is blocked, return 0. # Input - `grid`: A 2D list of integers (either 0 or 1) with dimensions n x m (1 ≤ n, m ≤ 100). # Output - An integer representing the number of unique paths from the top-left corner to the bottom-right corner. # Example Example 1 **Input:** ```python grid = [ [1, 1, 1], [1, 0, 1], [1, 1, 1] ] ``` **Output:** ```python 2 ``` Example 2 **Input:** ```python grid = [ [1, 0], [0, 1] ] ``` **Output:** ```python 0 ``` # Note In the first example, there are exactly 2 unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, it is impossible to reach the bottom-right corner from the top-left corner.","solution":"from typing import List def find_unique_paths(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 0 or grid[-1][-1] == 0: return 0 n = len(grid) m = len(grid[0]) # Create a dp array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the starting position dp[0][0] = 1 if grid[0][0] == 1 else 0 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"# Problem Statement Dorothy has a collection of strings where each string represents a page in her notebook. She wants to organize her pages in such a way that the strings are grouped by their lengths. However, within each group, the strings should be sorted lexicographically. Dorothy requires your help to achieve this. Write a function that takes a list of strings and returns a list of strings that are grouped by length and sorted lexicographically within each group. # Input - The first line of input contains an integer `n` (1 ≤ n ≤ 1000) — the number of strings. - The following `n` lines each contain a single string consisting of lowercase English letters. The length of each string will be between 1 and 100 characters inclusive. # Output - Output the strings grouped by their lengths and sorted lexicographically within each group. The groups should be ordered by the length of their strings in ascending order. # Examples Input ``` 5 apple bat car dog banana ``` Output ``` bat car dog apple banana ``` Input ``` 6 elephant dog cat zebra ant apple ``` Output ``` ant cat dog apple zebra elephant ``` Note For the first sample test, the strings are grouped by length and within the length group they are sorted lexicographically: - \\"bat\\", \\"car\\", and \\"dog\\" are of length 3. They are sorted lexicographically to form [\\"bat\\", \\"car\\", \\"dog\\"]. - \\"apple\\" and \\"banana\\" are of length 5 and 6 respectively and are already sorted in their respective groups. For the second sample test: - \\"ant\\", \\"cat\\", and \\"dog\\" are of length 3. They are sorted lexicographically to form [\\"ant\\", \\"cat\\", \\"dog\\"]. - \\"apple\\" and \\"zebra\\" are of length 5 and 6 respectively and are already sorted in their respective groups. - \\"elephant\\" is the only string of length 8.","solution":"def organize_pages(n, strings): from collections import defaultdict # Dictionary to group strings by their lengths length_dict = defaultdict(list) # Populate the dictionary with strings grouped by their lengths for string in strings: length_dict[len(string)].append(string) # Initialize a list to hold the final sorted strings sorted_strings = [] # Iterate over sorted keys (lengths) and sort the group of strings lexicographically for length in sorted(length_dict.keys()): sorted_strings.extend(sorted(length_dict[length])) return sorted_strings # Example usage if __name__ == \\"__main__\\": input_strings = [ \\"apple\\", \\"bat\\", \\"car\\", \\"dog\\", \\"banana\\" ] result = organize_pages(5, input_strings) for line in result: print(line)"},{"question":"Eva loves numbers and patterns. She has recently discovered a fascinating sequence that starts with the number 1 and alternates between adding 1 or multiplying by 2. The sequence begins as follows: 1, 2, 3, 6, 7, 14, 15, 30, ... Given an integer N, help Eva find the N-th number in this sequence. Input: The first line contains the number of test cases T. Each test case consists of a positive integer - N. Output: For each test case, output the N-th number in the sequence. Constraints: 1 ≤ T ≤ 20 1 ≤ N ≤ 100 SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 3 7","solution":"def nth_number_in_pattern(N): Returns the N-th number in the sequence which starts with 1 and alternates between adding 1 and multiplying by 2. num = 1 for i in range(1, N): if i % 2 == 0: num += 1 else: num *= 2 return num def find_nth_numbers(test_cases): Given a list of test cases, returns the N-th number in the sequence for each test case. results = [] for N in test_cases: results.append(nth_number_in_pattern(N)) return results"},{"question":"Given a sequence of integers, write a program to find the length of the longest subsequence that can be derived from the sequence by deleting some or no elements, without changing the order of the remaining elements, such that all the elements in the subsequence are strictly increasing. Input: The first line contains an integer n, the number of elements in the sequence. The second line contains n integers, representing the elements of the sequence. Output: Print the length of the longest strictly increasing subsequence. Constraints: 1 ≤ n ≤ 10^5 1 ≤ sequence[i] ≤ 10^9 SAMPLE INPUT 8 10 22 9 33 21 50 41 60 SAMPLE OUTPUT 5 Explanation The longest increasing subsequence is 10, 22, 33, 50, 60 which has a length of 5.","solution":"def length_of_LIS(sequence): Returns the length of the longest increasing subsequence. if not sequence: return 0 from bisect import bisect_left # dp array to store the increasing sequence dp = [] for num in sequence: idx = bisect_left(dp, num) # If num is greater than any element in dp if idx == len(dp): dp.append(num) else: dp[idx] = num return len(dp)"},{"question":"In this problem, you will help Jim in his daily scheduling. Jim works as a freelance software developer, and each day he can choose different projects to work on. Each project has a start time and an end time, and Jim can only work on one project at a time. The goal is to maximize the number of projects Jim can complete in a single day. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of projects. The next n lines contain two integers each, s_i and e_i (1 le s_i < e_i le 10^9) — the start and end times of the i-th project. -----Output----- Print a single integer — the maximum number of non-overlapping projects Jim can complete in one day. -----Example----- Input 5 1 4 2 3 3 5 6 8 7 9 Output 3 -----Note----- In the example, Jim can complete up to 3 projects by choosing the ones with times: (2, 3), (3, 5), and (6, 8). The schedules do not overlap, allowing Jim to maximize his project completion.","solution":"def max_non_overlapping_projects(n, projects): Calculates the maximum number of non-overlapping projects Jim can complete in one day. Parameters: n (int): Number of projects. projects (list of tuples): Each tuple contains (s, e) where s is the start time and e is the end time of a project. Returns: int: Maximum number of non-overlapping projects. # Sort the projects by end time projects.sort(key=lambda x: x[1]) count = 0 current_end_time = 0 for start, end in projects: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"Implement a function that takes a list of integers and returns a new list where each integer is the result of summing the digits of the corresponding integer from the input list. If the sum of digits is a multi-digit number, repeat the sum of digits process until a single-digit number is obtained for each integer. For example: Input: [38, 125, 9, 541] Output: [2, 8, 9, 1] Explanation: - 38 -> 3+8 = 11 -> 1+1 = 2 - 125 -> 1+2+5 = 8 - 9 -> 9 (single digit, so no change) - 541 -> 5+4+1 = 10 -> 1+0 = 1 So, digitalRoot([38, 125, 9, 541]) should return [2, 8, 9, 1].","solution":"def digitalRoot(numbers): Takes a list of integers and returns a new list where each integer is the result of summing the digits of the corresponding integer from the input list until a single-digit number is obtained. def sum_of_digits(n): while n >= 10: n = sum(int(digit) for digit in str(n)) return n return [sum_of_digits(number) for number in numbers]"},{"question":"You are given a list of n strings, each consisting of lowercase English letters only. Your task is to find out the number of strings that do not contain any of the words \\"cat\\", \\"dog\\", or \\"bird\\" as a substring. input The first line contains a single integer n (1 leq n leq 100,000) — the number of strings. Each of the next n lines contains a single string whose length is between 1 and 100 inclusive. output Output a single integer — the number of strings that do not contain any of the words \\"cat\\", \\"dog\\", or \\"bird\\" as a substring. Example Input 5 hello catalog catsarecute dogma twitter Output 3 Explanation The strings \\"catalog\\" and \\"catsarecute\\" contain the substring \\"cat\\", and \\"dogma\\" contains the substring \\"dog\\". All other strings do not contain any of the forbidden substrings, so the answer is 3.","solution":"def count_strings_without_substrings(n, strings): Returns the number of strings that do not contain the substrings \\"cat\\", \\"dog\\", or \\"bird\\". forbidden_substrings = [\\"cat\\", \\"dog\\", \\"bird\\"] count = 0 for string in strings: if not any(sub in string for sub in forbidden_substrings): count += 1 return count"},{"question":"You are tasked with designing a game simulator for a simple two-player board game known as \\"Capture the Flags\\". The game is played on a 5x5 grid and two players (Player 1 and Player 2) take turns moving. Each player controls a single piece that starts at opposite corners of the grid: Player 1 starts at (1, 1) and Player 2 starts at (5, 5). Both players are trying to collect flags placed randomly on the board. The grid is represented as follows: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ``` Each player can move their piece up, down, left, or right as long as the move is within the bounds of the grid. If the move would cause the piece to be out of bounds, the move is not allowed and the player loses their turn. Flags are randomly placed on the board at the start of the game. The number of flags varies from 1 to 5. Game Rules: 1. The game starts with Player 1 and Player 2 at their respective starting positions. 2. Players take turns to move their piece. Player 1 moves first. 3. A move consists of specifying the new position on the grid (within bounds). 4. If a player moves onto a cell containing a flag, the player collects the flag and the cell becomes empty. 5. The game ends when all flags are collected. 6. The player who collects the most flags wins. If both players collect the same number of flags, the game ends in a draw. Write a function `capture_the_flags(moves, flags)` that simulates the game and determines the result. # Input - An integer `moves`, representing the ordered list of moves for both players in the following format: - Each element in `moves` contains a tuple `(player, new_x, new_y)` representing which player is moving and the coordinates they are moving to. - A list of integers `flags`, representing the initial positions of the flags on the board. # Output - Return a string that is either \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"Draw\\". # Example: ```python moves = [(1, 1, 2), (2, 5, 4), (1, 1, 3), (2, 4, 4), (1, 1, 4), (2, 3, 4), (1, 1, 5), (2, 3, 3), (1, 2, 5)] flags = [2, 3, 4, 19] capture_the_flags(moves, flags) ``` `Output`: \\"Draw\\" # Note: - Player 1 collects flags at (1, 2) and (1, 3), and Player 2 collects flags at (4, 4) and (3, 3). - Both players have collected 2 flags each, resulting in a draw.","solution":"def capture_the_flags(moves, flags): def pos_to_index(x, y): return (x - 1) * 5 + y # Initialize positions and scores p1_position = (1, 1) p2_position = (5, 5) p1_score = 0 p2_score = 0 # Set initial flags positions flags_set = set(flags) for move in moves: player, new_x, new_y = move if 1 <= new_x <= 5 and 1 <= new_y <= 5: new_position = (new_x, new_y) index_position = pos_to_index(new_x, new_y) if player == 1: p1_position = new_position if index_position in flags_set: p1_score += 1 flags_set.remove(index_position) elif player == 2: p2_position = new_position if index_position in flags_set: p2_score += 1 flags_set.remove(index_position) if not flags_set: # If no more flags left break if p1_score > p2_score: return \\"Player 1 wins\\" elif p2_score > p1_score: return \\"Player 2 wins\\" else: return \\"Draw\\""},{"question":"You are given a list of n positive integers a = [a_1, a_2, dots, a_n] and an integer k. You are to partition the list into k non-empty contiguous subarrays in such a way that the maximum sum of the subarrays is minimized. Write a function `minimizeMaxSum` to find this minimum possible value of the maximum sum among the k subarrays. Example Input: a = [7, 2, 5, 10, 8] k = 2 Output: 18 Explanation: We can partition the array into two subarrays such that the maximum sum of the subarrays is minimized: - Partition into [7, 2, 5] and [10, 8] - Sum of the first subarray is 7 + 2 + 5 = 14 - Sum of the second subarray is 10 + 8 = 18 - The maximum sum of these two subarrays is 18 Another possible partition is [7, 2, 5, 10] and [8], but here the maximum sum is 24, which is greater than 18. Hence, the optimal solution minimizes the maximum sum to 18. Function Definition Complete the `minimizeMaxSum` function below: ```python def minimizeMaxSum(a: List[int], k: int) -> int: ``` # Constraints: - 1 leq n leq 1000 - 1 leq a[i] leq 10^6 - 1 leq k leq n # Input Format: The first line contains two integers n and k, the size of the list a and the number of subarrays respectively. The second line contains n space-separated positive integers representing the elements of a. # Output Format: Return an integer that denotes the minimized maximum sum among all k subarrays. # Additional Test Case: Input: a = [1, 2, 3, 4, 5] k = 2 Output: 9 Explanation: We can partition the array into two subarrays such that the maximum sum of the subarrays is minimized: - Partition into [1, 2, 3, 4] and [5] - Sum of the first subarray is 1 + 2 + 3 + 4 = 10 - Sum of the second subarray is 5 - The maximum sum of these two subarrays is 10 Another possible partition is [1, 2, 3] and [4, 5], with maximum sum 4 + 5 = 9, which is the lower bound achievable making the solution optimal.","solution":"from typing import List def minimizeMaxSum(a: List[int], k: int) -> int: def can_partition(max_sum): current_sum = 0 subarray_count = 1 for num in a: current_sum += num if current_sum > max_sum: subarray_count += 1 current_sum = num if subarray_count > k: return False return True left, right = max(a), sum(a) while left < right: mid = (left + right) // 2 if can_partition(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a number of tasks to complete, each task requiring a continuous segment of time. A task cannot be started or interrupted once begun. Also, certain tasks must be completed before others. Given these constraints, you need to determine whether it is possible to complete all tasks in a valid sequence. You are provided with the durations of the tasks and their dependencies. You need to decide if all tasks can be completed, and if so, find the order in which to perform them. -----Input----- The first line contains a single integer n (1 leq n leq 100) — the number of tasks. The second line contains n integers where the i^{th} integer is the duration (in hours) of the i^{th} task. The third line contains a single integer m (0 leq m leq 100) — the number of dependencies. Each of the next m lines contains two integers u and v (1 leq u, v leq n and u neq v), meaning task u must be completed before task v. -----Output----- If it is impossible to complete all tasks, output \\"IMPOSSIBLE\\". Otherwise, on the first line, output the total time (in hours) required to complete all tasks. On the second line, output n integers — the order in which to complete the tasks. If there are multiple valid orders, output any. -----Examples----- Input 3 3 2 4 2 1 2 2 3 Output 9 1 2 3 Input 3 3 2 4 3 1 2 2 3 3 1 Output IMPOSSIBLE -----Explanation----- In the first example, the tasks must be completed in the order 1, then 2, then 3 due to the dependencies. The total duration is 3 + 2 + 4 = 9 hours. In the second example, the task dependencies create a cycle (1 -> 2 -> 3 -> 1), making it impossible to complete all tasks.","solution":"def find_task_order(num_tasks, task_durations, num_dependencies, dependencies): from collections import deque, defaultdict # Build the adjacency list and in-degree array adj_list = defaultdict(list) in_degree = [0] * (num_tasks + 1) for u, v in dependencies: adj_list[u].append(v) in_degree[v] += 1 # Nodes with 0 in-degree (tasks with no prerequisites) queue = deque([i for i in range(1, num_tasks + 1) if in_degree[i] == 0]) order = [] while queue: task = queue.popleft() order.append(task) for neighbor in adj_list[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if topological sort was possible (i.e., no cycle) if len(order) != num_tasks: return \\"IMPOSSIBLE\\" total_duration = sum(task_durations) return total_duration, order # Helper function for parsing input def parse_input(n, durations, m, deps): task_durations = [0] + durations # Dummy zero for 1-indexed dependencies = [tuple(dep) for dep in deps] return find_task_order(n, task_durations, m, dependencies)"},{"question":"Your town has built a new amphitheater that consists of n rows of seats, each with m seats. The administration wants to organize several events, some of which may require certain rows to be blocked for preparation or other activities. An event can be held if there is at least one completely unoccupied row available (no seats or rows being used for preparation). Given a list of events, each characterized by the rows they occupy, determine the maximum number of events that can be held consecutively without any overlaps in their preparations. ------Input------ The first line contains the number of test cases t (1 leq t leq 100). Description of the test cases follows. The first line of each test case contains two integers n and m (1 leq n, m leq 100) — the number of rows and seats per row. The second line contains an integer e (1 leq e leq 1000) — the number of events. Each of the next e lines contains r_i (1 leq r_i leq n) — the row number occupied by the i-th event during preparation. ------Output------ For each test case, print a single integer — the maximum number of events that can be held consecutively without overlap in their preparations. ------Example------ Input 2 5 10 4 1 2 3 4 7 5 5 1 2 3 5 7 Output 1 2 ----Note---- In the first test case, you can\'t schedule more than one event without overlap since all rows from 1 to 4 are occupied. In the second test case, you can schedule the events occupying rows 1, 2, and 3 together, and then another set of events occupying rows 5 and 7 together. Therefore, a maximum of 2 events can be held consecutively without overlap.","solution":"def max_consecutive_events(n, m, e, occupied_rows): Determines the maximum number of consecutive events that can be held without overlaps, given the number of rows, seats, and events with specified rows occupied. # Create a set of all rows that get occupied occupied_set = set(occupied_rows) # Calculate the number of completely unoccupied rows unoccupied_count = n - len(occupied_set) # The number of consecutive non-overlapping event sets is determined by the number of unoccupied rows return unoccupied_count"},{"question":"You are given two strings, ( s ) and ( t ), and your task is to check if ( t ) is a permutation of a substring of ( s ). More formally, determine if there exists an integer ( i ) (1 ≤ i ≤ |s| - |t| + 1) such that the substring ( s[i:i+|t|-1] ) is a permutation of ( t ). Input Format: - The first line contains an integer ( n ) (the length of string ( s )). - The second line contains the string ( s ). - The third line contains an integer ( m ) (the length of string ( t )). - The fourth line contains the string ( t ). Constraints: - ( 1 leq n, m leq 10^5 ) - Both ( s ) and ( t ) consist only of lowercase English letters. Output Format: - Print \\"YES\\" if there exists a permutation of ( t ) that is a substring of ( s ), otherwise print \\"NO\\". Sample Input: ``` 10 cbabcacab 3 abc ``` Sample Output: ``` YES ``` Explanation: One of the permutations of ( t ) (\\"abc\\") is present as a substring in ( s ) (in positions 2-4 or 6-8). Note: - For ( t ) to be a permutation of some substring of ( s ), every character in ( t ) must appear in ( s ) the same number of times. - This can be solved efficiently by using a sliding window approach along with a character frequency count to verify the conditions.","solution":"def is_permutation_of_substring(n, s, m, t): if m > n: return \\"NO\\" from collections import Counter # Count frequency of characters in t t_count = Counter(t) # Initial window in s of size m window = s[:m] s_count = Counter(window) # Check if the initial window matches t_count if s_count == t_count: return \\"YES\\" # Slide the window over s for i in range(m, n): s_count[s[i]] += 1 s_count[s[i - m]] -= 1 # Remove the character count if it is zero if s_count[s[i - m]] == 0: del s_count[s[i - m]] if s_count == t_count: return \\"YES\\" return \\"NO\\""},{"question":"An online retail company wants to enhance its product recommendation system by considering the buying patterns of its customers. Each customer can be tracked for their purchase history over time. The company wants to determine the \\"purchase streak\\" for each customer, which is the longest sequence of consecutive days where the customer made at least one purchase every day. Given the purchase history of multiple customers, represented as an array of unique purchase dates (in the format yyyy-mm-dd), write a program to calculate the longest purchase streak for each customer. ----- Input ----- The first line of input contains an integer T denoting the number of customers. Each of the next T lines contains an integer N, representing the number of purchase dates for a customer, followed by N space-separated strings which are the purchase dates in the format yyyy-mm-dd. ----- Output ----- For each customer, output a single line containing the length of their longest purchase streak. ----- Constraints ----- - 1 ≤ T ≤ 100 - 0 ≤ N ≤ 1000 - Purchase dates follow the format yyyy-mm-dd ----- Example ----- Input: 3 5 2022-01-02 2022-01-03 2022-01-04 2022-01-06 2022-01-07 4 2021-12-25 2021-12-26 2021-12-27 2021-12-29 3 2023-01-10 2023-02-14 2023-02-15 Output: 3 3 2 ----- Explanation ----- Example case 1: The customer has purchase dates on 2022-01-02, 2022-01-03, 2022-01-04, 2022-01-06, and 2022-01-07. The longest streak of consecutive days is from 2022-01-02 to 2022-01-04 (3 days). Example case 2: The customer has purchase dates on 2021-12-25, 2021-12-26, 2021-12-27, and 2021-12-29. The longest streak is from 2021-12-25 to 2021-12-27 (3 days). Example case 3: The customer has purchase dates on 2023-01-10, 2023-02-14, and 2023-02-15. The longest streak is from 2023-02-14 to 2023-02-15 (2 days).","solution":"from datetime import datetime, timedelta def longest_purchase_streak(num_customers, purchase_data): Determine the longest purchase streak for each customer. :param num_customers: Number of customers :param purchase_data: List containing tuples, each representing (N, [purchase_dates]) :return: List of integers, each representing the longest purchase streak for a customer streaks = [] for N, dates in purchase_data: if N == 0: streaks.append(0) continue dates = sorted(datetime.strptime(date, \'%Y-%m-%d\') for date in dates) longest_streak = 1 current_streak = 1 for i in range(1, N): if dates[i] == dates[i-1] + timedelta(days=1): current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 longest_streak = max(longest_streak, current_streak) streaks.append(longest_streak) return streaks # Example num_customers = 3 purchase_data = [ (5, [\\"2022-01-02\\", \\"2022-01-03\\", \\"2022-01-04\\", \\"2022-01-06\\", \\"2022-01-07\\"]), (4, [\\"2021-12-25\\", \\"2021-12-26\\", \\"2021-12-27\\", \\"2021-12-29\\"]), (3, [\\"2023-01-10\\", \\"2023-02-14\\", \\"2023-02-15\\"]) ] print(longest_purchase_streak(num_customers, purchase_data)) # Output: [3, 3, 2]"},{"question":"Write a function that takes an integer n (0 <= n <= 100) as input and returns the nth Fibonacci number. The Fibonacci sequence is defined as: ``` Fib(0) = 0 Fib(1) = 1 Fib(n) = Fib(n-1) + Fib(n-2) for n > 1 ``` Your function should be efficient and handle large values of n within the given range. Examples ```python fib(0) ==> 0 fib(1) ==> 1 fib(10) ==> 55 fib(20) ==> 6765 ```","solution":"def fib(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function `alternating_case` that takes a `string` and returns a new string with each letter\'s case alternated. The first letter of the string should start with lowercase if the first character is a letter. If the string starts with a non-letter, the alternation starts with the first letter that follows. For example: - `alternating_case(\\"hello\\")` should return `\\"hElLo\\"` - `alternating_case(\\"HELLO\\")` should return `\\"hElLo\\"` - `alternating_case(\\"h3llo\\")` should return `\\"h3LlO\\"` - `alternating_case(\\"1a2b3C\\")` should return `\\"1a2B3c\\"` The input string will only contain alphanumeric characters.","solution":"def alternating_case(s): Returns a new string with each letter\'s case alternated. The first letter of the string should start with lowercase if it\'s a letter. If the string starts with a non-letter, the alternation starts with the first letter that follows. result = [] lower = True for char in s: if char.isalpha(): if lower: result.append(char.lower()) else: result.append(char.upper()) lower = not lower else: result.append(char) return \'\'.join(result)"},{"question":"After a long week, three friends decided to go on a road trip. They have a list of n cities they want to visit. Each city i is characterized by two integers d_i and s_i. The first integer d_i represents the distance of the city from their starting point in kilometers, and the second integer s_i represents the satisfaction they will get from visiting that city. Due to time constraints, their total travel distance cannot exceed a given limit m kilometers. They can visit as many cities as they want within this limit. Your task is to maximize their total satisfaction from visiting these cities. -----Input----- The first line contains two space-separated integers—n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^9)—the number of cities on their list and the maximum distance they can travel, respectively. Each of the next n lines contains two space-separated integers—d_i (1 ≤ d_i ≤ 10^9) and s_i (1 ≤ s_i ≤ 10^9)—the characteristics of the i-th city. -----Output----- Print a single integer—the maximum total satisfaction the friends can achieve while keeping their travel distance within the given limit. -----Examples----- Input 3 100 30 5 50 8 70 7 Output 13 Input 4 150 60 10 80 15 40 5 100 7 Output 25 Input 2 50 60 8 70 10 Output 0","solution":"def maximize_satisfaction(n, m, city_data): Returns the maximum total satisfaction the friends can achieve while keeping their travel distance within the given limit. dp = [0] * (m + 1) for d, s in city_data: if d <= m: for j in range(m, d - 1, -1): dp[j] = max(dp[j], dp[j - d] + s) return max(dp)"},{"question":"Task Consider a **diagonal traversal** of a matrix starting from the top left corner. In diagonal traversal, we start with the first column and then move diagonally up-right to the end until the matrix is fully traversed. Given a matrix of size `m x n`, an element at position `(i, j)` is said to be part of diagonal `k` if `k = i + j`. Diagonals of the matrix are identified by unique values of `k`. For example, in a matrix: ``` 1 2 3 4 5 6 7 8 9 ``` The elements on diagonals are: - Diagonal 0: [1] - Diagonal 1: [2, 4] - Diagonal 2: [3, 5, 7] - Diagonal 3: [6, 8] - Diagonal 4: [9] Write a function that takes in a 2D matrix and returns a list of lists representing the diagonal elements. Function Signature ```python def diagonal_traversal(matrix: List[List[int]]) -> List[List[int]]: # Your code here ``` Input - `matrix` (List of List of int): A 2D matrix where `1 <= m, n <= 100`. Output - List of lists (List of List of int): A list where each sublist represents the elements of the matrix along a diagonal from top-left to bottom-right. Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] diagonal_traversal(matrix) ``` # Expected Output ```python [[1], [2, 4], [3, 5, 7], [6, 8], [9]] ```","solution":"from typing import List def diagonal_traversal(matrix: List[List[int]]) -> List[List[int]]: if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) diagonals = [[] for _ in range(m + n - 1)] for i in range(m): for j in range(n): diagonals[i + j].append(matrix[i][j]) return diagonals"},{"question":"You are given a list of integers where each element represents the height of a building. Your task is to compute the number of buildings that have an unobstructed view to the west. A building has an unobstructed view to the west if all the buildings to its left are shorter than it. # Example ```python count_unobstructed_views([3, 7, 8, 3, 6, 1]) == 3 count_unobstructed_views([1, 4, 1, 2, 1, 4]) == 2 ``` In the first example, the buildings with heights 3, 7, and 8 have an unobstructed view to the west. In the second example, the buildings with heights 1 and 4 have an unobstructed view to the west.","solution":"def count_unobstructed_views(heights): Returns the number of buildings with an unobstructed view to the west. max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"Given a number N. Find the sum of all digits in N that are prime numbers. Note: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: N = 254 Output: 7 Explanation: The digits in 254 are 2, 5, and 4. Among these, 2 and 5 are prime numbers. Their sum is 2 + 5 = 7. Example 2: Input: N = 39 Output: 0 Explanation: The digits in 39 are 3 and 9. Among these, only 3 is a prime number. Therefore, sum of prime digits = 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfPrimeDigits() which takes an integer N as input parameters and returns an integer, sum of all prime digits in N. Expected Time Complexity: O(log N) Expected Space Complexity: O(1) Constraints: 1<=N<=10^{5}","solution":"def sumOfPrimeDigits(N): Returns the sum of all prime digits in the number N. prime_digits = {2, 3, 5, 7} total = 0 while N > 0: digit = N % 10 if digit in prime_digits: total += digit N //= 10 return total"},{"question":"Problem Statement Samantha is a robotics enthusiast, and she loves solving puzzles involving her robot collection. She has a set of robots, each with a battery level (in percentage). Each robot can perform a task, but a task consumes battery, so she needs to find out which robot can perform the task without its battery level dropping below a certain threshold. What To Do Create the `canPerformTask` helper function that takes two arguments: 1. A list of robots, where each robot is represented as a dictionary containing \'name\' and \'battery\' keys. The \'battery\' value is an integer representing the battery level in percentage. 2. An integer `consumption` representing the battery percentage required to perform the task. The function should return a list of robot names that can perform the task without their battery level dropping below 20%. If no robots can perform the task, return an empty list. Here is an example of a robot object in the list: ```python {\'name\': \'RobotA\', \'battery\': 50} ``` For example, if the list of robots is: ```python [ {\'name\': \'Alpha\', \'battery\': 50}, {\'name\': \'Beta\', \'battery\': 30}, {\'name\': \'Gamma\', \'battery\': 15}, ] ``` and the task consumption is 20%, the output should be: ```python [\'Alpha\'] ``` since only Alpha meets the condition of performing the task without dropping below 20% battery.","solution":"def canPerformTask(robots, consumption): Returns a list of robot names that can perform the task without their battery level dropping below 20%. :param robots: List[Dict[str, Union[str, int]]], List of robots with \'name\' and \'battery\' percentage. :param consumption: int, Battery consumption percentage required for the task. :return: List[str], Names of robots that can perform the task. return [robot[\'name\'] for robot in robots if robot[\'battery\'] >= consumption + 20]"},{"question":"A forest is a collection of one or more disjoint trees. We have a magic forest with n trees, each tree numbered from 1 to n. Each tree i has a value v_i associated with it, representing the magical energy it has. The magical energy of the entire forest is defined as the sum of the values of all its trees. To enhance the magical energy of the forest, we can perform operations to merge two trees into one. After merging, the new tree\'s value is the sum of the values of the two original trees. You can merge two trees if and only if they belong to different connected components of the forest. Given a description of the forest and a list of possible merge operations, determine the maximum magical energy that can be achieved after performing zero or more of the given operations. Input The first line contains two space-separated integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) – the number of trees and the number of possible merge operations. The next line contains n space-separated integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 1,000,000), the values of the trees. Each of the next m lines contains two space-separated integers a and b (1 ≤ a, b ≤ n, a ≠ b) – denoting that tree a can be merged with tree b. Output Output a single integer, the maximum magical energy that can be achieved after performing zero or more merge operations. Example Input 5 4 10 20 30 40 50 1 2 1 3 3 4 4 5 Output 150 Explanation In the example input, we can merge the trees as follows: * Merge tree 1 and tree 2 to form a new tree with value 30. * Merge the new tree (from previous step) with tree 3 to form a new tree with value 60. * Merge the new tree (from previous step) with tree 4 to form a new tree with value 100. * Merge the new tree (from previous step) with tree 5 to form a new tree with value 150. So, the maximum magical energy that can be achieved is 150. Subtasks Subtask 1 (10 points): n, m ≤ 10 Subtask 2 (20 points): v_i = 1 for all i Subtask 3 (40 points): n ≤ 1,000; m ≤ 2,000 Subtask 4 (30 points): No additional constraints","solution":"def find(parent, i): if parent[i] != i: parent[i] = find(parent, parent[i]) # Path compression return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def max_magical_energy(n, m, tree_values, merge_ops): if n == 0: return 0 parent = list(range(n)) rank = [0] * n for a, b in merge_ops: union(parent, rank, a-1, b-1) from collections import defaultdict component_sums = defaultdict(int) for i in range(n): root = find(parent, i) component_sums[root] += tree_values[i] return sum(component_sums.values()) # Example usage n = 5 m = 4 tree_values = [10, 20, 30, 40, 50] merge_ops = [(1, 2), (1, 3), (3, 4), (4, 5)] print(max_magical_energy(n, m, tree_values, merge_ops)) # Output: 150"},{"question":"Write a function called `prime_power_factorization(n)` that takes an integer `n` (2 <= n <= 100000) and returns the prime power factorization of `n`. The prime power factorization of a number is a list of pairs `(p, k)` where `p` is a prime factor and `k` is its respective power such that `p^k` divides `n`. # Example: 1. `n = 60` The prime power factorization for `60` is represented as `[(2, 2), (3, 1), (5, 1)]`: - 2^2 = 4 - 3^1 = 3 - 5^1 = 5 - 4 * 3 * 5 = 60 2. `n = 100` The prime power factorization for `100` is represented as `[(2, 2), (5, 2)]`: - 2^2 = 4 - 5^2 = 25 - 4 * 25 = 100 3. `n = 17` The prime power factorization for `17` is represented as `[(17, 1)]`: - 17^1 = 17 # Function Signature: ```python def prime_power_factorization(n: int) -> List[Tuple[int, int]]: pass ``` # Notes: - Your function should return a list of tuples where each tuple contains a prime factor and its power. - Prime factors should be listed in ascending order in the output. - If `n` is a prime number, the output should be a single pair with the number itself and power `1`. - The solution should be optimized to handle the upper constraint efficiently.","solution":"from typing import List, Tuple def prime_power_factorization(n: int) -> List[Tuple[int, int]]: result = [] # Check for the number of 2s that divide n count = 0 while n % 2 == 0: n //= 2 count += 1 if count > 0: result.append((2, count)) # Check for odd factors from 3 to sqrt(n) p = 3 while p * p <= n: count = 0 while n % p == 0: n //= p count += 1 if count > 0: result.append((p, count)) p += 2 # If n is still a prime number greater than 2 if n > 2: result.append((n, 1)) return result"},{"question":"Kavi is organizing a series of workshops. Each workshop runs for one day only, and he has a list of start and end dates when he is available to hold workshops. Kavi wants to maximize the number of workshops he can organize without any overlapping dates. Given a list of start and end dates, determine the maximum number of non-overlapping workshops Kavi can organize. Input The first line contains an integer T denoting the number of test cases followed by 2T lines. The first line of each test case contains an integer N which denotes the number of available date ranges. The second line contains N pairs of integers where each pair represents the start and end dates of available ranges. Each date is represented as an integer where smaller values represent earlier dates. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ start_i, end_i ≤ 10^6 The start date of any range will always be less than or equal to the end date. SAMPLE INPUT 1 3 1 2 3 4 5 7 SAMPLE OUTPUT 3","solution":"def max_non_overlapping_workshops(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] intervals = test_cases[i][1] paired_intervals = [(intervals[2 * j], intervals[2 * j + 1]) for j in range(N)] paired_intervals.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in paired_intervals: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Write a function that determines if a number is a \\"vanishing number\\". A vanishing number is a number that eventually can reach 1 by repeatedly summing the squares of its digits. For instance, 19 is a vanishing number because 1^2 + 9^2 = 82, then 8^2 + 2^2 = 68, then 6^2 + 8^2 = 100, and finally 1^2 + 0^2 + 0^2 = 1. However, 20 is not a vanishing number because it enters an endless cycle (4, 16, 37, 58, 89, 145, 42, 20). Your function should return True if the number is a vanishing number, and False otherwise. ```python def is_vanishing_number(n): def sum_of_squares(num): return sum(int(digit) ** 2 for digit in str(num)) seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares(n) return n == 1 # Example usage: # print(is_vanishing_number(19)) # Should return True # print(is_vanishing_number(20)) # Should return False ```","solution":"def is_vanishing_number(n): def sum_of_squares(num): return sum(int(digit) ** 2 for digit in str(num)) seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares(n) return n == 1"},{"question":"Flavia is organizing a coding competition and needs to arrange participants into teams. Each team must consist of exactly K participants. Flavia has N participants in total. Your task is to determine the maximum number of teams Flavia can form using all N participants. If it is not possible to form any teams, the output should be 0. -----Constraints----- - 1 leq N leq 1000 - 1 leq K leq 100 -----Input----- Input is given from Standard Input in the following format: N K -----Output----- Print the maximum number of teams that can be formed with exactly K participants, or 0 if it is not possible to form any teams. -----Sample Input----- 15 4 -----Sample Output----- 3 Explanation: Flavia can form three teams of four participants each, using a total of 12 participants. The remaining 3 participants cannot form a complete team.","solution":"def max_teams(N, K): Returns the maximum number of teams that can be formed with exactly K participants using all N participants. if K == 0: return 0 return N // K"},{"question":"# Context and Definitions You are developing a new Python module for string manipulations that provides functionality similar to built-in string methods but with some additional features. One of the core classes you\'ve designed is `CustomString`, which wraps around a standard Python string and adds some new methods to it. Here\'s the basic outline of your class: ```python class CustomString: def __init__(self, string): self.string = string def __str__(self): return self.string ``` Based on this class, you\'ve added a method `reverse()` that reverses the characters in the string and returns a new `CustomString` object: ```python class CustomString: def __init__(self, string): self.string = string def __str__(self): return self.string def reverse(self): return CustomString(self.string[::-1]) ``` For example: ```python s = CustomString(\\"hello\\") print(s.reverse()) # prints \\"olleh\\" ``` # The New Requirements Now, your team has asked you to expand the functionality of your `CustomString` class to include methods for manipulating and analyzing the string content. They specifically need you to implement the following methods: - `is_palindrome()`: Check whether the string reads the same forward and backward (ignoring case and spaces). - `count_vowels()`: Count the number of vowels (a, e, i, o, u) in the string, regardless of case. - `to_upper()`: Convert all characters in the string to uppercase and return a new `CustomString` object. # Examples of Usage ```python s = CustomString(\\"A man a plan a canal Panama\\") print(s.is_palindrome()) # prints True s2 = CustomString(\\"hello world\\") print(s2.count_vowels()) # prints 3 s3 = CustomString(\\"hello\\") print(s3.to_upper()) # prints \\"HELLO\\" ``` # Task Implement the required methods in the `CustomString` class according to the provided specifications. Your implementation should behave as described in the examples of usage, taking care to handle edge cases appropriately. ```python class CustomString: def __init__(self, string): self.string = string def __str__(self): return self.string def reverse(self): return CustomString(self.string[::-1]) def is_palindrome(self): # Your implementation here pass def count_vowels(self): # Your implementation here pass def to_upper(self): # Your implementation here pass ```","solution":"class CustomString: def __init__(self, string): self.string = string def __str__(self): return self.string def reverse(self): return CustomString(self.string[::-1]) def is_palindrome(self): cleaned_string = \'\'.join(filter(str.isalnum, self.string)).lower() return cleaned_string == cleaned_string[::-1] def count_vowels(self): vowels = \\"aeiouAEIOU\\" return sum(1 for char in self.string if char in vowels) def to_upper(self): return CustomString(self.string.upper())"},{"question":"Guitar Hero is a rhythm game where players simulate playing rock music using a guitar-shaped game controller. The controller contains buttons corresponding to different musical notes and a strum bar to strum along. Players earn points by successfully hitting notes in sync with the music. The game\'s scoring system rewards players for consecutive note streaks, with higher multipliers for longer streaks. -----Task----- Write a program that calculates the total score based on a sequence of notes hit and missed, and streak multipliers. The player starts at a multiplier of (1), and each consecutive note increases the multiplier by (1) up to a maximum multiplier of (4). Missing a note resets the multiplier back to (1). -----Input----- The input consists of a line with the number (M) of notes followed by (M) lines; each line consists of either \\"hit\\" or \\"miss\\". -----Constraints----- (0 leq M leq 1000) Number of notes. -----Output----- The output is the total score calculated based on the given sequence of notes and multipliers. Hitting a note adds points equal to the current multiplier. -----Examples----- Sample Input 1: 0 Sample Output 1: 0 Sample Input 2: 6 hit hit miss hit hit hit Sample Output 2: 8","solution":"def calculate_score(M, notes): Calculate the total score based on the sequence of notes hit and missed. score = 0 multiplier = 1 for note in notes: if note == \'hit\': score += multiplier if multiplier < 4: multiplier += 1 elif note == \'miss\': multiplier = 1 return score def parse_input(input_str): Parse the input string into M and notes list. lines = input_str.strip().split(\'n\') M = int(lines[0]) notes = lines[1:] if M > 0 else [] return M, notes"},{"question":"You are developing a multiplayer online game where each player must complete a series of missions to earn points. Your task is to simulate the progress of each player through the missions and track their total points over time. Each mission has a unique identifier and a set number of points associated with its completion. Example missions = [ (1, 100), (2, 50), (3, 25), (4, 75) ] player_actions = [ (101, 1, True), (101, 2, False), (102, 4, True), (101, 3, True), (102, 2, True), (101, 4, False) ] The missions list contains tuples, each consisting of a mission identifier and the points awarded for completing that mission. The player_actions list contains tuples where each tuple represents a player’s action and contains: - The player\'s ID - The mission ID - A boolean indicating whether the player successfully completed (True) or failed (False) the mission. Return a dictionary where the keys are player IDs and the values are their total points after all actions. Function Description Complete the calculate_total_points function in the editor below. calculate_total_points has the following parameter(s): - list of tuples missions: the missions and their corresponding points - list of tuples player_actions: the actions performed by players Returns - dictionary: keys are player IDs and values are their total points Input Format The first line contains an integer n, the number of missions. The next n lines each contain two space-separated integers m_id and points, where m_id is the mission ID and points are the points awarded for its completion. The next line contains an integer k, the number of player actions. Each of the next k lines contains a player ID, a mission ID, and a boolean indicating the success or failure of the action. Constraints 1 ≤ n ≤ 100 1 ≤ k ≤ 1000 1 ≤ m_id ≤ 100 0 ≤ points ≤ 1000 1 ≤ player ID ≤ 1000 Sample Input 4 1 100 2 50 3 25 4 75 6 101 1 True 101 2 False 102 4 True 101 3 True 102 2 True 101 4 False Sample Output { 101: 125, 102: 125 } Explanation Player 101: - Completes mission 1 and earns 100 points. - Fails mission 2 and earns 0 points. - Completes mission 3 and earns 25 points. - Fails mission 4 and earns 0 points. Total points = 100 + 0 + 25 + 0 = 125 points. Player 102: - Completes mission 4 and earns 75 points. - Completes mission 2 and earns 50 points. Total points = 75 + 50 = 125 points.","solution":"def calculate_total_points(missions, player_actions): mission_points = {mission_id: points for mission_id, points in missions} player_scores = {} for player_id, mission_id, success in player_actions: if player_id not in player_scores: player_scores[player_id] = 0 if success: player_scores[player_id] += mission_points[mission_id] return player_scores"},{"question":"Yana has a special type of text editor that only supports the following operations: 1. Move the cursor one character to the right (`R`). 2. Move the cursor one character to the left (`L`). 3. Insert a character (`I`). 4. Delete the character at the cursor location (`D`). Yana wants to transform a given initial string s into a target string t. She needs to determine the minimum number of operations required to achieve this transformation. Each operation (R, L, I, D) counts as one step. **Constraints:** - The initial string s and the target string t are of length m and n respectively (0 leq m, n leq 10^5). - The initial string s and the target string t only consist of lowercase English letters. **Input** - The first line contains the initial string s. - The second line contains the target string t. **Output** Print one integer — the minimum number of operations required to transform the initial string s into the target string t. **Example** _Input:_ ``` abc acb ``` _Output:_ ``` 2 ``` _Input:_ ``` ab abcd ``` _Output:_ ``` 2 ``` **Note:** In the first example, the characters `b` and `c` need to be swapped. This can be done by moving the cursor right (`R`) and then deleting (`D`) the current character, followed by inserting (`I`) the appropriate character. In the second example, the characters `c` and `d` can be inserted at the appropriate positions in the minimal number of steps directly. Hence, two insert operations are required.","solution":"def min_operations(s, t): Returns the minimum number of operations required to transform s into t. m, n = len(s), len(t) dp = [[0] * (n+1) for _ in range(m+1)] for i in range(m+1): dp[i][0] = i for j in range(n+1): dp[0][j] = j for i in range(1, m+1): for j in range(1, n+1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # delete dp[i][j-1], # insert dp[i-1][j-1]) # replace return dp[m][n]"},{"question":"You are given an integer array arr of length N and an integer K. You need to perform exactly K operations on the array. In one operation, you can remove any element of the array and add it to score. After performing exactly K operations, return the maximum possible value of score. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and K. The second line contains N integers representing the array arr. ------ Output ------ For each test case, print a single line containing one integer ― the maximum possible value of score after exactly K operations. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ arr[i] ≤ 10^9 the sum of N over all test cases does not exceed 10^6 ------ Subtasks ------ Subtask #1 (10 points): N ≤ 100 K ≤ 50 Subtask #2 (30 points): N ≤ 10^3 K ≤ 500 Subtask #3 (60 points): original constraints ------ Sample Input 1 ------ 1 5 3 1 2 3 4 5 ------ Sample Output 1 ------ 12 ------ explanation 1 ------ Example case 1: The maximum possible score after exactly 3 operations is obtained by removing the three largest elements (3, 4, and 5) and adding them to score. Thus, the maximum score is 3 + 4 + 5 = 12.","solution":"def maximum_score(T, test_cases): Computes the maximum score after performing exactly K operations for each test case. Parameters: T (int): The number of test cases. test_cases (list): A list containing tuples. Each tuple includes two integers N and K, followed by a list of integers representing the array arr. Returns: list: A list of integers where each integer is the maximum score for a corresponding test case. results = [] for i in range(T): N, K, arr = test_cases[i] # Sort the array in descending order and sum the first K elements arr_sorted = sorted(arr, reverse=True) max_score = sum(arr_sorted[:K]) results.append(max_score) return results"},{"question":"Given a string s consists of upper/lower-case alphabets and empty space characters \' \'. You need to reverse the order of characters in each word within it while still preserving whitespace and initial word order. Example 1: Input: \\"Let\'s take LeetCode contest\\" Output: \\"s\'teL ekat edoCteeL tsetnoc\\" Example 2: Input: \\"God Ding\\" Output: \\"doG gniD\\" Note: - In the string, each word is separated by single space and there will not be any extra spaces in the string. - The length of s will be in the range [1, 5 * 10^4]. Function Signature: ```python def reverseWords(s: str) -> str: pass ```","solution":"def reverseWords(s: str) -> str: Reverse the characters in each word while preserving the word order and spaces. Args: s (str): The input string containing words separated by spaces. Returns: str: The modified string with each word\'s characters reversed. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"You are given a string, S, and you have to perform a series of swap operations to maximize the lexicographical order of the string. In each swap operation, you can choose any two characters from the string and swap their positions. Here\'s the function signature: string maximizeString(string S); You need to implement the function that returns the lexicographically largest string possible after performing any number of swap operations. Input Format A single line containing the string S. Constraints 1. 1 leq |S| leq 10^5 2. S consists of lowercase English letters only (a-z) Output Format Return the lexicographically largest string possible after performing any number of swap operations. Sample Input abdc Sample Output dcba Explanation By swapping \'a\' with \'d\' and \'b\' with \'c\', the string \'abdc\' can be transformed into \'dcba\', which is the lexicographically largest possible order. Note Since any number of swaps are allowed, sorting the characters in descending order will always yield the correct answer.","solution":"def maximizeString(S): Return the lexicographically largest string possible after performing any number of swap operations. :param S: input string consisting of lowercase English letters. :return: lexicographically largest possible string. return \'\'.join(sorted(S, reverse=True))"},{"question":"Given an array of integers and a positive integer boldsymbol{d}, rotate the array to the left boldsymbol{d} times. To perform a left rotation on an array, shift each of the array\'s elements boldsymbol{d} units to the left. The value at the first index should move to the last index in the rotation. For example, given the array boldsymbol{a}=[1,2,3,4,5] and boldsymbol{d}=2, after two left rotations, the array would be boldsymbol{[3,4,5,1,2]}. Function Description Complete the function rotateLeft in the editor below. It should return a list of integers representing the array after performing boldsymbol{d} left rotations. rotateLeft has the following parameter(s): - int d: the number of left rotations - int arr[n]: an array of integers Returns - list: the rotated array Input Format The first line contains two space-separated integers n and boldsymbol{d}, the size of boldsymbol{mbox{arr}} and the number of left rotations. The second line contains boldsymbol{mbox{n}} space-separated integers, each an boldsymbol{arr[i]}. Constraints - 1 leq n leq 10^5 - 1 leq a[i] leq 10^6 - 1 leq d leq n Sample Input ``` 5 4 1 2 3 4 5 ``` Sample Output ``` 5 1 2 3 4 ``` Explanation When we perform four left rotations, the array undergoes the following transformations: ``` [1, 2, 3, 4, 5] longrightarrow [2, 3, 4, 5, 1] [2, 3, 4, 5, 1] longrightarrow [3, 4, 5, 1, 2] [3, 4, 5, 1, 2] longrightarrow [4, 5, 1, 2, 3] [4, 5, 1, 2, 3] longrightarrow [5, 1, 2, 3, 4] ``` The final rotated array is `[5, 1, 2, 3, 4]`.","solution":"def rotateLeft(d, arr): Rotates the array arr to the left d times. Parameters: d (int): The number of left rotations. arr (list): The array to be rotated. Returns: list: The rotated array. n = len(arr) d = d % n # In case d is equal or greater than n return arr[d:] + arr[:d]"},{"question":"A string is considered balanced if every opening bracket has it’s corresponding closing bracket. The brackets are of three types: (), [], and {}. For example, \\"({[]})\\" is balanced, but \\"({[})\\" and \\"({[)\\" are not. Write a function `isBalanced(s)` that takes a string `s` containing only these characters: \'(\', \')\', \'[\', \']\', \'{\', \'}\' and determines if the input string is a balanced string or not. Return `True` if the string is balanced and `False` otherwise. **Example:** ``` isBalanced(\\"({[]})\\") -> True isBalanced(\\"({[})\\") -> False isBalanced(\\"({[)}\\") -> False ```","solution":"def isBalanced(s): Determines if the input string s is a balanced string of brackets. :param s: str - a string containing only characters \'(\', \')\', \'[\', \']\', \'{\', \'}\' :return: bool - True if the string is balanced, False otherwise stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or stack.pop() != matching_bracket[char]: return False else: return False return stack == []"},{"question":"Consider a company where each employee can work on multiple projects and each project team can consist of multiple employees. The relationship between employees and projects can be represented as a bipartite graph where each employee or project is a node, and an edge between an employee and a project indicates that the employee works on that project. Given the specifications of multiple datasets, each containing the list of projects and their associated employees, your task is to determine the total number of unique employees involved in all projects. Note that an employee can be mentioned in multiple projects, but should only be counted once per dataset. Input The input is a sequence of datasets, each being in the following format: p project1:employee1,1,...,employee1,m1. . . . projecti:employeei,1,...,employeei,mi. . . . projectp:employeep,1,...,employeep,mp. The first line contains p, which represents the number of projects and is a positive integer no more than 100. Each of the following p lines contains the team information of a project: projecti (1 ≤ i ≤ p) is the name of the i-th project and is followed by a colon (:) and then the list of its mi employees that are delimited by a comma (,) and terminated by a period (.). Those project names are mutually different. Each mi (1 ≤ i ≤ p) is between 1 and 10, inclusive. An employee is identified by a non-empty character string of length between 1 and 15, inclusive, and consists of lowercase letters. The end of the input is indicated by a line containing a zero. Output For each dataset, output the number of unique employees involved in all projects, that is the total number of distinct employees mentioned in the dataset, in a line. No extra characters should occur in the output. Example Input 2 project1:alice,bob,charlie. project2:bob,dave,eve. 3 projectA:frank,grace,heidi. projectB:heidi,ivan. projectC:frank,judy. 3 design:alice,bob. development:carol,dave. testing:eve,alice. 0 Output 5 5 5","solution":"def count_unique_employees(datasets): Count the number of unique employees involved in all projects per dataset. results = [] for dataset in datasets: unique_employees = set() for project in dataset: employees = project.split(\':\')[1].strip(\'.\').split(\',\') unique_employees.update(employees) results.append(len(unique_employees)) return results def parse_input(input_data): Parse the input data into a list of datasets. datasets = [] current_dataset = [] for line in input_data.splitlines(): if line == \'0\': if current_dataset: datasets.append(current_dataset) break elif line.isdigit(): if current_dataset: datasets.append(current_dataset) current_dataset = [] else: current_dataset.append(line) return datasets # Full solution function that combines parsing and counting def unique_employees_in_projects(input_data): datasets = parse_input(input_data) return count_unique_employees(datasets)"},{"question":"The task is to determine if a given string has characters that can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). -----Input----- The input consists of a single line containing a string s (1 le text{length of } s le 1000). The string s contains only lowercase English letters. -----Output----- Output a single line with the word \\"YES\\" if the characters of the string can be rearranged to form a palindrome and \\"NO\\" otherwise. -----Examples----- Sample Input 1: civic Sample Output 1: YES Sample Input 2: ivicc Sample Output 2: YES Sample Input 3: hello Sample Output 3: NO Sample Input 4: aabb Sample Output 4: YES","solution":"def can_form_palindrome(s): Determine if a given string\'s characters can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lowercase English letters. Returns: str: \\"YES\\" if the characters of the string can be rearranged to form a palindrome, otherwise \\"NO\\". # Create a frequency dictionary of characters in the string char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with an odd frequency odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can form a palindrome if it has at most one character with an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Given an array of integers, write a function to find the product of all elements in the array except the element at the current index without dividing the products obtained by the element at the current index. For example, given the input array `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]`, because: - The product of all elements except the one at index 0 is `2 * 3 * 4 = 24` - The product of all elements except the one at index 1 is `1 * 3 * 4 = 12` - The product of all elements except the one at index 2 is `1 * 2 * 4 = 8` - The product of all elements except the one at index 3 is `1 * 2 * 3 = 6` **Constraints:** - The length of the input array is between 2 and 10^5. - Each element in the array is a non-zero integer within the range from `-10^5` to `10^5`. **Input Format:** An integer `n` representing the number of elements in the array, followed by `n` integers representing the elements of the array. Example Input: ``` 4 1 2 3 4 ``` Example Output: ``` 24 12 8 6 ```","solution":"def product_except_self(nums): Given an array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. n = len(nums) left_products = [1] * n # Initialize the array for the left products right_products = [1] * n # Initialize the array for the right products result = [1] * n # Calculate left_products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right_products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate result for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Design a class for representing and manipulating a company\'s employee hierarchy. The hierarchy is structured as a tree, where each node represents an employee. Each employee has a name, a title, and a list of subordinates. The system should allow adding employees, assigning titles, setting managers, checking managers and subordinates, and retrieving the hierarchy in various formats. # The task ~~~if:python Create a class `CompanyHierarchy` with the following methods. Names of employees are strings and titles are optional strings. * `add_employee(name, title=None)` returning `None` Adds a new employee to the company. If `title` is provided, assigns it to the employee. Names of employees are unique within the company. * `assign_title(name, title)` returning `None` Assigns a title to the employee. If the employee already has a title, it is replaced by the new one. * `set_manager(employee_name, manager_name)` returning `boolean` Assigns `manager_name` as the manager of `employee_name`. Returns `False` if either employee does not exist or if assigning creates a cyclic hierarchy. Otherwise returns `True`. * `get_manager(name)` returning `string` Returns the name of `name`\'s manager, or `None` if the employee has no manager. * `get_subordinates(name)` returning `list` of `string` Returns a list of the names of an employee\'s direct subordinates, sorted alphabetically. * `print_hierarchy()` returning `None` Prints the entire company hierarchy starting from the root employee (the one with no manager). The hierarchy should be a tree structure with indentation representing different levels. Employees are displayed as \\"Name (Title)\\". If an employee has no title, only the name is displayed. ~~~ # Details, rules, assumptions - Names and titles are case-sensitive. - There is no limit on the number of employees or levels in the hierarchy. - When printing the hierarchy, if an employee has no subordinates, do not print any further indentation for that employee. # Example Example Python usage: ```python company = CompanyHierarchy() company.add_employee(\\"Alice\\", \\"CEO\\") company.add_employee(\\"Bob\\", \\"CTO\\") company.add_employee(\\"Charlie\\", \\"CFO\\") company.add_employee(\\"David\\") company.add_employee(\\"Eve\\") company.set_manager(\\"Bob\\", \\"Alice\\") # True company.set_manager(\\"Charlie\\", \\"Alice\\") # True company.set_manager(\\"David\\", \\"Bob\\") # True company.set_manager(\\"Eve\\", \\"Bob\\") # True print(company.get_manager(\\"David\\")) # \\"Bob\\" print(company.get_subordinates(\\"Alice\\")) # [\\"Bob\\", \\"Charlie\\"] company.print_hierarchy() # Expected output: # Alice (CEO) # Bob (CTO) # David # Eve # Charlie (CFO) ```","solution":"class Employee: def __init__(self, name, title=None): self.name = name self.title = title self.manager = None self.subordinates = [] def __repr__(self): if self.title: return f\\"{self.name} ({self.title})\\" return self.name class CompanyHierarchy: def __init__(self): self.employees = {} def add_employee(self, name, title=None): if name not in self.employees: self.employees[name] = Employee(name, title) def assign_title(self, name, title): if name in self.employees: self.employees[name].title = title def set_manager(self, employee_name, manager_name): if employee_name not in self.employees or manager_name not in self.employees: return False if self._creates_cycle(employee_name, manager_name): return False employee = self.employees[employee_name] manager = self.employees[manager_name] if employee.manager: employee.manager.subordinates.remove(employee) employee.manager = manager manager.subordinates.append(employee) return True def get_manager(self, name): if name in self.employees and self.employees[name].manager: return self.employees[name].manager.name return None def get_subordinates(self, name): if name in self.employees: return sorted(sub.name for sub in self.employees[name].subordinates) return [] def print_hierarchy(self): roots = [emp for emp in self.employees.values() if emp.manager is None] for root in sorted(roots, key=lambda x: x.name): self._print_subtree(root, level=0) def _print_subtree(self, employee, level): print(\' \' * level + repr(employee)) if employee.subordinates: for subordinate in sorted(employee.subordinates, key=lambda x: x.name): self._print_subtree(subordinate, level + 1) def _creates_cycle(self, employee_name, manager_name): current = self.employees[manager_name] while current: if current.name == employee_name: return True current = current.manager return False"},{"question":"# Introduction: You are given a grid of size `n x n` where each cell is either land (represented by \'L\') or water (represented by \'W\'). The grid is used to represent a map of islands. An island is a piece of land that is connected horizontally or vertically (not diagonally). # Task: Your task is to count the number of islands present in the given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. # Input: The input to your function will be a 2D list of characters representing the grid. # Output: Return an integer representing the total number of distinct islands in the grid. # Example: ```python grid1 = [ [\'L\', \'W\', \'W\', \'L\'], [\'L\', \'L\', \'W\', \'W\'], [\'W\', \'L\', \'W\', \'L\'], [\'W\', \'W\', \'L\', \'L\'] ] # count_islands(grid1) -> 3 grid2 = [ [\'L\', \'W\', \'W\', \'W\', \'L\'], [\'W\', \'W\', \'W\', \'W\', \'W\'], [\'L\', \'W\', \'L\', \'L\', \'L\'], [\'L\', \'L\', \'W\', \'W\', \'W\'] ] # count_islands(grid2) -> 4 ```","solution":"def count_islands(grid): def dfs(grid, visited, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]) or grid[i][j] == \'W\' or visited[i][j]: return visited[i][j] = True dfs(grid, visited, i + 1, j) dfs(grid, visited, i - 1, j) dfs(grid, visited, i, j + 1) dfs(grid, visited, i, j - 1) if not grid or not grid[0]: return 0 num_islands = 0 visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))] for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == \'L\' and not visited[i][j]: dfs(grid, visited, i, j) num_islands += 1 return num_islands"},{"question":"You are given a string that consists of lowercase alphabets and spaces. A \\"word\\" is defined as a sequence of non-space characters, and words are separated by one or more spaces. Your task is to write a function that counts the number of words in the given string. Input: A string containing lowercase alphabets and spaces. Output: An integer representing the number of words in the string. Constraints: 1 ≤ length of string ≤ 10^5 SAMPLE INPUT \\"hello world this is a test\\" SAMPLE OUTPUT 6","solution":"def count_words(s): Returns the number of words in the given string `s`. A word is defined as a sequence of non-space characters. Parameters: s (str): A string containing lowercase alphabets and spaces. Returns: int: The number of words in the string. return len(s.split())"},{"question":"You\'re given a tree of n nodes, rooted at 1. Each node has a unique integer ID from 1 to n. A tree is a connected graph with no cycles. Your task is to find the distance between the two most distant nodes in the tree. The distance between two nodes is defined as the number of edges on the path between them. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree. Each of the next (n - 1) lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between nodes u and v. Output Output a single integer — the maximum distance between any two nodes in the tree. Examples Input: 4 1 2 1 3 3 4 Output: 3 Input: 5 1 2 1 3 3 4 4 5 Output: 4 Explanation In the first example, the tree looks like this: 1 / 2 3 4 The longest path is 2-1-3-4, which has 3 edges. In the second example, the tree structure is: 1 / 2 3 4 5 The longest path is 2-1-3-4-5, which has 4 edges. Note: To find the maximum distance between any two nodes, you may utilize the concept of tree diameter. One practical approach involves performing two breadth-first search (BFS) or depth-first search (DFS) traversals. Starting from any node, find the farthest node X, then start from X to find the farthest node Y. The distance from X to Y is the tree\'s diameter.","solution":"from collections import defaultdict, deque def find_farthest_node(start, n, graph): visited = [False] * (n + 1) visited[start] = True queue = deque([(start, 0)]) farthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) if dist + 1 > max_distance: max_distance = dist + 1 farthest_node = neighbor return farthest_node, max_distance def tree_diameter(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 1: Choose any node and find the farthest node from it farthest_node, _ = find_farthest_node(1, n, graph) # Step 2: Find the farthest node from the node found in Step 1 _, max_distance = find_farthest_node(farthest_node, n, graph) return max_distance"},{"question":"You are working as a software engineer in a logistics company. Your task is to develop a feature that helps in managing and querying a delivery schedule. You are given a delivery schedule in the form of an N times N matrix representing different delivery slots in a day. Each cell in the matrix holds an integer representing the delivery code for that slot. You have to perform several operations on this matrix and finally provide the sum of all delivery codes in a specified submatrix. The operations are as follows: UPD r c v (Update operation) update the cell (r,c) with a new delivery code v (1 leq v leq 1,000,000) ADD r1 c1 r2 c2 (Addition operation) add the value in the cell (r1,c1) to the cell (r2,c2) SWAP r1 c1 r2 c2 (Swap operation) swap the values between the cells (r1,c1) and (r2,c2) ROW_SUM r (Row Sum operation) compute the sum of all delivery codes in the r-th row COL_SUM c (Column Sum operation) compute the sum of all delivery codes in the c-th column Input First line of each testcase contains ten integers. First two integers in the line, N and Q, indicate the size of matrix and the number of queries, respectively (1 leq N,Q leq 40,000). Next three integers, A, B, and C, are coefficients to calculate initial values in the matrix (1 leq A, B, C leq 1,000,000), and they are calculated as follows: D_{r,c} = (r * A + c * B) mod C where r and c are row and column indices, respectively (1leq r,cleq N). Last five integers, D, E, F, G, and K, are coefficients to compute the final sum value of the specified submatrix (1 leq D leq E leq N, 1 leq F leq G leq N, E - D leq 1,000, G - F leq 1,000, 1 leq K leq 1,000). Each of the next Q lines contains one operation in the format as described above. Output Output the sum of all delivery codes in the submatrix defined by D, E, F, and G after performing all operations. Examples Input 2 3 3 6 12 1 2 1 2 2 UPD 1 1 9 ADD 1 1 2 2 SWAP 1 1 2 2 Output 28 Input 3 4 2 3 5 1 3 1 3 2 UPD 2 2 5 ROW_SUM 2 COL_SUM 1 ADD 2 2 3 3 Output 35 Input 4 2 4 7 10 1 2 1 2 1 SWAP 1 1 4 4 UPD 3 2 8 Output 26","solution":"class DeliveryMatrix: def __init__(self, N, A, B, C): self.N = N self.matrix = [[(r * A + c * B) % C for c in range(1, N + 1)] for r in range(1, N + 1)] def update(self, r, c, v): self.matrix[r-1][c-1] = v def add(self, r1, c1, r2, c2): self.matrix[r2-1][c2-1] += self.matrix[r1-1][c1-1] def swap(self, r1, c1, r2, c2): self.matrix[r1-1][c1-1], self.matrix[r2-1][c2-1] = self.matrix[r2-1][c2-1], self.matrix[r1-1][c1-1] def row_sum(self, r): return sum(self.matrix[r-1]) def col_sum(self, c): return sum([self.matrix[row][c-1] for row in range(self.N)]) def submatrix_sum(self, D, E, F, G): total = 0 for r in range(D-1, E): for c in range(F-1, G): total += self.matrix[r][c] return total"},{"question":"Longest Increasing Subsequence Captain Jack Sparrow is searching for the longest sequence of treasure islands he can visit in increasing order, one after another. Each island has a certain number of treasures, and he can only move from one island to another if the next island has more treasures than the current one. Your job is to help Jack find the longest possible sequence of islands he can visit in increasing order of treasures. Input First line consists of an integer N, the number of islands. Second line consists of N space-separated integers representing the number of treasures on each island. Output Print the length of the longest increasing sequence of islands. Example Input: 6 1 2 3 4 2 3 Output: 4 Input: 7 5 3 4 8 6 7 10 Output: 5","solution":"def longest_increasing_subsequence(islands): Returns the length of the longest increasing subsequence of treasures in islands. if not islands: return 0 n = len(islands) dp = [1] * n for i in range(1, n): for j in range(i): if islands[i] > islands[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given a binary string s of length n, Ivan wants to rearrange it to form the lexicographically smallest binary string t such that t is not immediately followed by its complement. The complement of a binary string is obtained by replacing each \'0\' with \'1\' and each \'1\' with \'0\'. More formally, for binary strings t and u of length n, u is said to be the complement of t if u_i = 1 - t_i for all 1 ≤ i ≤ n. Help Ivan to find the desired string t. -----Input----- The first line contains one integer n (1 ≤ n ≤ 100) — the length of the binary string. The second line contains the binary string s of length n which consists only of \'0\' and \'1\'. -----Output----- Print the lexicographically smallest binary string t such that t is not immediately followed by its complement. -----Examples----- Input 4 1001 Output 0101 Input 6 110010 Output 001101 Input 5 11100 Output 00111","solution":"def smallest_lexicographic_binary_string(n, s): # Count the number of 0s and 1s in the binary string s zeros = s.count(\'0\') ones = n - zeros # Construct the lexicographically smallest binary string by placing all 0s first, followed by all 1s t = \'0\' * zeros + \'1\' * ones # Ensure t is not followed by its complement (ensured by the given construction) return t"},{"question":"You are tasked with decoding messages encoded using a particular scheme. The scheme replaces each letter in the original message with a letter some fixed number of positions down the alphabet. This is a classical Caesar cipher encryption technique. For example, with a shift of 3, \'A\' would be replaced by \'D\', \'B\' would become \'E\', and so on. The letter shifts wrap around the alphabet end, so \'X\' with a shift of 3 would become \'A\'. Given an encoded message and the shift value, your task is to decode the message back to its original form. # Input Format - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S, representing the encoded message, and an integer K, the number of positions each letter in the string was shifted. # Output Format - For each test case, output the decoded string. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 10^2 - 0 ≤ K ≤ 25 - The string S contains only uppercase English letters. # Sample Input 1 ``` 2 ZYXWV 5 HELLO 3 ``` # Sample Output 1 ``` UTSRQ EBIIL ``` # Explanation In the first example, each letter in \'ZYXWV\' is shifted 5 positions back in the alphabet: - \'Z\' -> \'U\' - \'Y\' -> \'T\' - \'X\' -> \'S\' - \'W\' -> \'R\' - \'V\' -> \'Q\' In the second example, each letter in \'HELLO\' is shifted 3 positions back in the alphabet: - \'H\' -> \'E\' - \'E\' -> \'B\' - \'L\' -> \'I\' - \'L\' -> \'I\' - \'O\' -> \'L\'","solution":"def decode_caesar_cipher(T, cases): decoded_messages = [] for i in range(T): S, K = cases[i] decoded_message = \\"\\" for char in S: new_char = chr((ord(char) - ord(\'A\') - K) % 26 + ord(\'A\')) decoded_message += new_char decoded_messages.append(decoded_message) return decoded_messages"},{"question":"You are given an integer array `heights` representing the heights of buildings and an integer value `K`. You need to find the minimum possible value of the maximum difference between the height of the tallest and the shortest building after you increase or decrease the height of every building by exactly `K` (you cannot increase and decrease the height of the same building in one modification). In other words, given an array `heights[]` and an integer `K`, return the smallest possible value of the largest difference in height after modifying all the buildings. Example 1: Input: heights = [1, 5, 8, 10] K = 2 Output: 5 Explanation: Modify the array to [3, 7, 10, 12]. The maximum difference is 12-7=5. Example 2: Input: heights = [3, 9, 12, 16, 20] K = 3 Output: 11 Explanation: Modify the array to [6, 12, 15, 19, 23]. The maximum difference is 23-12=11. Your Task: Complete the function `minimizeDifference` which takes an integer array `heights[]` and an integer `K` as parameters and returns the minimum possible value of the maximum difference in height. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(heights) ≤ 100000 0 ≤ heights[i] ≤ 100000 0 ≤ K ≤ 100000","solution":"def minimizeDifference(heights, K): Returns the minimum possible value of the maximum difference between the heights of the buildings after modifying the heights by exactly K. if not heights: return 0 # If the list is empty, the difference is 0 n = len(heights) heights.sort() answer = heights[-1] - heights[0] for i in range(1, n): max_height = max(heights[i-1] + K, heights[-1] - K) min_height = min(heights[0] + K, heights[i] - K) answer = min(answer, max_height - min_height) return answer"},{"question":"You are given an array of integers representing the ages of a group of friends. A friend is eligible to participate in an activity if their age is between 18 and 25 inclusive. Compute and print the number of friends who are eligible to participate. ------ Input Format ------ - The first line contains an integer n, the number of friends. - The second line contains n space-separated integers representing the ages of the friends. ------ Output Format ------ Print the number of friends who are eligible to participate in the activity. ------ Constraints ------ 1 ≤ n ≤ 100 1 ≤ text{age}_i ≤ 100 ----- Sample Input 1 ------ 5 17 21 19 26 23 ----- Sample Output 1 ------ 3 ----- explanation 1 ------ Among the given ages, 21, 19, and 23 are between 18 and 25 inclusive. Therefore, the output is 3. ----- Sample Input 2 ------ 3 16 30 25 ----- Sample Output 2 ------ 1 ----- explanation 2 ------ Among the given ages, only 25 is between 18 and 25 inclusive. Therefore, the output is 1.","solution":"def count_eligible_friends(ages): Returns the number of friends eligible to participate in the activity. A friend is eligible if their age is between 18 and 25 inclusive. return sum(18 <= age <= 25 for age in ages)"},{"question":"You are given an array of integers `arr` and a target integer `target`. Write a function that finds the length of the smallest contiguous subarray whose sum is greater than or equal to `target`. If there is no such subarray, return 0. Example 1: Input: arr = [2, 3, 1, 2, 4, 3], target = 7 Output: 2 Explanation: The subarray [4, 3] has the minimal length under the problem constraint. Example 2: Input: arr = [1, 1, 1, 1, 1, 1, 1, 1], target = 11 Output: 0 Explanation: There is no subarray with a sum greater than or equal to 11. Example 3: Input: arr = [1, 4, 4], target = 4 Output: 1 Explanation: The subarray [4] has the minimal length under the problem constraint. Constraints: 1. 1 <= arr.length <= 10^5 2. 1 <= arr[i] <= 10^4 3. 1 <= target <= 10^9","solution":"def min_subarray_length(arr, target): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to the target. If no such subarray exists, returns 0. n = len(arr) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Kevin works at a warehouse and he has a long inventory list of items, each with a unique identifier and a certain weight. The warehouse receives frequent shipments, and Kevin needs to quickly determine and retrieve weights for various specific items based on their unique identifiers. Your task is to help Kevin by writing a program that can efficiently answer a number of queries about the weights of items in the inventory. Input: - The first line contains two integers, N and Q, where N is the number of items in the inventory and Q is the number of queries. - The next N lines each contain a string ID and an integer W, where ID is the unique identifier of the item and W is its weight. - The next Q lines each contain a single string ID representing a query for the weight of the item with the given ID. Output: - For each query, output the weight of the item with the given ID. If the item with the given ID does not exist in the inventory, output \\"Item not found\\". Constraints: - 1 ≤ N, Q ≤ 10^5 - Each ID is a string consisting of lowercase alphabet characters and digits, with a length of up to 20 characters. - 1 ≤ W ≤ 10^9 Sample Input: 5 3 item1 100 item2 200 item3 300 item4 400 item5 500 item3 item6 item1 Sample Output: 300 Item not found 100 Explanation: - The inventory contains 5 items with their respective weights. - The first query is for \'item3\', which exists in the inventory with a weight of 300, so the output is 300. - The second query is for \'item6\', which does not exist in the inventory, so the output is \\"Item not found\\". - The third query is for \'item1\', which exists in the inventory with a weight of 100, so the output is 100.","solution":"def get_item_weights(N, Q, items, queries): # Create a dictionary to store the items and their weights inventory = {item_id: weight for item_id, weight in items} # For each query, fetch the weight from the inventory dictionary results = [] for query in queries: if query in inventory: results.append(inventory[query]) else: results.append(\\"Item not found\\") # Return the results for each query return results"},{"question":"You are given a binary tree. You need to write a program that finds the maximum depth of the tree and the maximum value at each depth. The depth of a node is the number of edges from the node to the tree\'s root. For example, the root node has a depth of 0. The input consists of multiple test cases. Each test case represents a binary tree and is provided as an even number of space-separated integers, where each pair describes a node and its immediate children. The first integer of each pair is the node value, and the second integer is a depth indicator for that node. To indicate the end of input, a line containing a single zero is provided. This line should not be processed. For each test case, your program should output two values: 1. The maximum depth of the binary tree. 2. The maximum value at each depth. The input is guaranteed to form a valid binary tree. # Input ``` 5 0 3 1 8 1 7 2 6 2 10 0 7 1 15 1 5 2 20 2 0 ``` # Output ``` 2 5 8 7 2 10 15 20 ``` # Explanation For the first test case: ``` 5 / 3 8 / 7 6 ``` - The maximum depth is 2. - The maximum value at each depth is: Depth 0: 5, Depth 1: 8, Depth 2: 7. For the second test case: ``` 10 / 7 15 / 5 20 ``` - The maximum depth is 2. - The maximum value at each depth is: Depth 0: 10, Depth 1: 15, Depth 2: 20.","solution":"def find_max_depth_and_values_each_depth(tree_data): if tree_data == \'0\': return None nodes = list(map(int, tree_data.split())) max_depth = 0 depth_values = {} for i in range(0, len(nodes), 2): value, depth = nodes[i], nodes[i+1] if depth > max_depth: max_depth = depth if depth not in depth_values or value > depth_values[depth]: depth_values[depth] = value max_values = [depth_values[i] for i in range(max_depth + 1)] return max_depth, max_values def process_multiple_trees(input_data): input_lines = input_data.strip().split(\'n\') results = [] for line in input_lines: if line == \'0\': break result = find_max_depth_and_values_each_depth(line) if result: results.append(result) return results"},{"question":"There is a factory with M different machines. Each machine produces a certain number of units per hour. Given an integer T, representing total units that need to be produced, and an array of integers production[] where each element represents the units produced per hour by each machine, determine the minimum number of hours required to produce exactly T units using any combination of these machines. Example 1: Input: M = 3 production = {2, 3, 5} T = 11 Output: 3 Explanation: Using the second machine (3 units/hour) for 2 hours and the third machine (5 units/hour) for 1 hour, we can exactly produce 11 units: (3*2) + (5*1) = 6 + 5 = 11. Example 2: Input: M = 2 production = {4, 7} T = 25 Output: 4 Explanation: Using the first machine (4 units/hour) for 2 hours and the second machine (7 units/hour) for 3 hours, we can exactly produce 25 units: (4*2) + (7*3) = 8 + 21 = 29, which exceeds 25 but 4 hours is still the minimal time to reach or exceed 25 units. Your Task: You do not need to read input or print anything. Your task is to complete the function minHours() which takes the integer M, the array production[], and the integer T as input parameters and returns the minimum number of hours required to produce exactly T units. Expected Time Complexity: O(M * T) Expected Auxiliary Space: O(T) Constraints: 1 ≤ M ≤ 50 1 ≤ production[i] ≤ 100 1 ≤ T ≤ 1000","solution":"import sys def minHours(M, production, T): # Initialize DP array where dp[i] represents the minimum number of hours to produce i units dp = [sys.maxsize] * (T + 1) dp[0] = 0 # No hours needed to produce 0 units for i in range(1, T + 1): for prod in production: if i - prod >= 0: dp[i] = min(dp[i], dp[i - prod] + 1) return dp[T]"},{"question":"Write a program to simulate a simple messaging system between users. The system should support functionalities to create users, send messages, and view received messages. Each user will have a unique username and a list of messages they have received. A message contains a sender\'s username, a recipient\'s username, and the content of the message. Your task is to implement this system and handle multiple operations as described below. ------- Input ------- The first line of the input contains a single integer Q denoting the number of queries. Each of the following Q lines contains a query in one of the following formats: 1. `CREATE username` 2. `SEND sender recipient message` 3. `VIEW username` - `CREATE username`: This query creates a new user with the specified username. - `SEND sender recipient message`: This query sends a message from the sender to the recipient. The message will contain the text `message`. - `VIEW username`: This query prints all messages received by the user with the specified username in the format \\"sender: message\\". If the user has no messages, print \\"No messages\\". ------- Output -------- For each `VIEW` query, output the list of messages received by the user in the order they were received. If the username in `VIEW` doesn\'t exist or has no messages, print \\"No messages\\". ------- Constraints ------- 1. 1 ≤ Q ≤ 10^5 2. 1 ≤ Length of username ≤ 50 (Usernames are case-sensitive and contain only alphanumeric characters.) 3. 1 ≤ Length of message ≤ 200 ----- Sample Input 1 ------ 10 CREATE Alice CREATE Bob SEND Alice Bob Hello, Bob! SEND Bob Alice Hi, Alice! VIEW Alice VIEW Bob SEND Alice Bob Are you coming to the party? VIEW Bob CREATE Charlie VIEW Charlie ----- Sample Output 1 ------ Bob: Hi, Alice! Alice: Hello, Bob! Alice: Are you coming to the party? No messages","solution":"class MessagingSystem: def __init__(self): self.users = {} def create_user(self, username): if username not in self.users: self.users[username] = [] def send_message(self, sender, recipient, message): if recipient in self.users: self.users[recipient].append(f\\"{sender}: {message}\\") def view_messages(self, username): if username in self.users: if self.users[username]: return self.users[username] else: return [\\"No messages\\"] else: return [\\"No messages\\"]"},{"question":"In a distant galaxy, there is a kingdom ruled by a queen who loves solving puzzles. Recently, she has devised a new challenge based on a special kind of sequence she calls the \\"Magical Sequence\\". A \\"Magical Sequence\\" is defined as a list where every pair of adjacent elements differ by exactly 1. The queen has an array of integers, and her challenge is to find the longest contiguous subarray that forms a \\"Magical Sequence\\". -----Input:----- - The first line of the input contains a single integer T: the number of test cases. The description of T test cases follows. - For each test case, the first line contains a single integer N: the length of the array. - The second line contains N space-separated integers A1, A2, dots, AN: the elements of the array. -----Output:----- - For each test case, print the length of the longest contiguous subarray that is a \\"Magical Sequence\\". -----Constraints:----- - 1 leq T leq 10^3 - 1 leq N leq 10^5 - -10^7 leq A1, A2, dots, AN leq 10^7 -----Sample Input:----- 2 5 1 2 3 2 1 4 1 2 4 5 -----Sample Output:----- 5 2","solution":"def find_longest_magical_sequence(arr): Given an array arr, find the length of the longest contiguous subarray such that every pair of adjacent elements differ by exactly 1. n = len(arr) if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if abs(arr[i] - arr[i - 1]) == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def process_test_cases(test_cases): results = [] for case in test_cases: results.append(find_longest_magical_sequence(case)) return results def read_input_and_process(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) arr = list(map(int, data[index + 1: index + 1 + N])) test_cases.append(arr) index += N + 1 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are part of a team developing a new text-based game. In this game, characters collect items during their adventure. Each character has a unique inventory that can hold items, with a limitation on the maximum number of items they can carry. Your task is to write a function that manages the inventory of a character. The function should be able to add items to the inventory, remove items, and list all the items currently in the inventory. Keep in mind the maximum capacity of the inventory when adding new items. The function should handle three types of commands: 1. `ADD item_name`: Adds the item named `item_name` to the inventory if there is space. If the inventory is full, it should return \\"Inventory full\\" and the item should not be added. 2. `REMOVE item_name`: Removes the item named `item_name` from the inventory if it exists. If the item does not exist, it should return \\"Item not found\\". 3. `LIST`: Lists all the items currently in the inventory, separated by commas. If the inventory is empty, it should return \\"Inventory empty\\". You can assume that the item names are unique and consist of alphanumeric characters. Input The input consists of several datasets. The first line contains an integer `n`, the number of datasets. Each dataset starts with an integer `m`, the maximum capacity of the inventory, followed by a sequence of commands. Each command is a string as described above. Commands are provided as long as there are commands to process for each inventory. Output For each dataset, process each command in the given order and print the output for each command that returns a message. Example Input 2 5 ADD sword ADD shield ADD potion LIST REMOVE shield LIST REMOVE axe 3 ADD potion ADD sword ADD sword ADD shield LIST Output sword,shield,potion sword,potion Item not found Inventory full potion,sword,shield","solution":"def manage_inventory(n, datasets): results = [] for dataset in datasets: m = dataset[0] commands = dataset[1:] inventory = [] for command in commands: if command.startswith(\\"ADD\\"): item = command.split()[1] if len(inventory) < m: inventory.append(item) else: results.append(\\"Inventory full\\") elif command.startswith(\\"REMOVE\\"): item = command.split()[1] if item in inventory: inventory.remove(item) else: results.append(\\"Item not found\\") elif command == \\"LIST\\": if inventory: results.append(\\",\\".join(inventory)) else: results.append(\\"Inventory empty\\") return results"},{"question":"In a city undergoing its annual marathon, runners have various running speeds. The marathon organizers want to ensure that all runners get a fair start. To achieve this, they use a system that splits all participants into groups such that the difference between the fastest and slowest runners in each group doesn\'t exceed a specified limit. Your task is to develop a program that will determine the number of groups needed. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), which represents the number of runners. The second line consists of `n` integers which denote the running speeds of the runners. The third line contains a single integer `k` (1 ≤ k ≤ 10^9), representing the maximum allowed difference between the fastest and slowest runner\'s speed in a group. Output Output a single integer representing the minimum number of groups needed to ensure that within each group, the difference between the fastest and slowest runner does not exceed `k`. Example Input: 5 3 5 1 9 12 3 Output: 3 Explanation: The speeds 3, 5, and 1 can form one group as the difference between the fastest (5) and slowest (1) is 4 ≤ k. The speeds 9 and 12 form another group as the difference is 3 ≤ k. Thus, the total number of groups is 3. Input: 6 1 2 3 8 9 10 1 Output: 4 Explanation: The speeds 1, 2, and 3 can form one group as the difference between the fastest (3) and slowest (1) is 2 ≤ k. The remaining speeds 8, 9, and 10 need to form three separate groups as no two of them can form a group with a difference ≤ k. Thus, the total number of groups is 4.","solution":"def minimize_groups(n, speeds, k): Returns the minimum number of groups needed so that the difference between the fastest and slowest runner\'s speed in each group does not exceed k. :param n: int, number of runners :param speeds: list of int, speeds of the runners :param k: int, the allowed maximum difference in speed within a group :return: int, minimum number of groups if n == 1: return 1 speeds.sort() groups = 1 start_speed = speeds[0] for i in range(1, n): if speeds[i] - start_speed > k: groups += 1 start_speed = speeds[i] return groups"},{"question":"Given a matrix of size N x M. Your task is to find the number of cells in the largest rectangular sub-matrix having all \'1\'s. Example 1: Input: N = 4, M = 4 Matrix: 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 Output: 8 Explanation: The largest rectangle with all \'1\'s has an area of 8. Example 2: Input: N = 3, M = 3 Matrix: 1 0 1 0 1 0 1 1 1 Output: 3 Explanation: The largest rectangle with all \'1\'s has an area of 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxRectangle() which takes integers N, M, and a 2D list matrix[][] as input and returns the count of cells in the largest rectangular sub-matrix with all \'1\'s. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(M) Constraints: 1 <= N, M <= 100","solution":"def max_histogram_area(hist): stack = [] max_area = 0 index = 0 while index < len(hist): if not stack or hist[stack[-1]] <= hist[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def maxRectangle(N, M, matrix): hist = [0] * M max_area = 0 for i in range(N): for j in range(M): hist[j] = hist[j] + 1 if matrix[i][j] == 1 else 0 max_area = max(max_area, max_histogram_area(hist)) return max_area"},{"question":"Tom is an avid marathon runner and likes to track his progress. He runs a specific number of kilometers each day and wants to find out which day he ran the furthest distance. ------ Input Format ------ - The first line of input will contain a single integer D, denoting the number of days Tom has recorded his runs. - Each of the next D lines will have a single integer K, denoting the number of kilometers Tom ran on the ith day. ------ Output Format ------ Output the day number (1-based index) on which Tom ran the maximum distance. If there are multiple days with the maximum distance, output the earliest day. ------ Constraints ------ 1 ≤ D ≤ 1000 1 ≤ K ≤ 100 ----- Sample Input 1 ------ 6 10 8 15 15 9 10 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ Out of 6 days, Tom ran the furthest distance of 15 kilometers on both the 3rd and 4th days. According to the problem statement, we output the earliest day, which is day 3.","solution":"def find_day_with_max_distance(D, distances): Returns the day number (1-based index) on which Tom ran the maximum distance. If there are multiple days with the maximum distance, returns the earliest day. Parameters: D (int): The number of days. distances (list of int): The distances Tom ran on each day. Returns: int: The 1-based index of the day with the maximum distance. max_distance = -1 max_day = -1 for i in range(D): if distances[i] > max_distance: max_distance = distances[i] max_day = i + 1 # 1-based index return max_day"},{"question":"In a distant magical kingdom, the citizens use special magical sequences for various spells. A magician can manipulate a sequence of integers using a special spell \\"Invert Range\\". This spell inverts the signs of all integers in a specified subarray. For example, if the sequence is [2, -3, 4, -5] and the spell is cast on the subarray from index 1 to 3, the resulting sequence would be [2, 3, -4, -5]. Given a sequence of integers and a list of spells to be cast, determine the final state of the sequence after all spells are applied. Function Description Complete the function `invertRange` in the editor below. `invertRange` has the following parameter(s): - `sequence`: an array of integers representing the initial sequence - `spells`: a 2-dimensional array where each subarray contains two integers, the start and end indices (0-indexed) of the subarray to be inverted Returns - an array of integers representing the final state of the sequence after all spells are applied Input Format The first line contains two space-separated integers n and m — the size of the sequence and the number of spells respectively. The second line contains n space-separated integers, the initial sequence. Each of the next m lines contains two space-separated integers start and end, the indices of the subarray to invert. Constraints 1 leq n, m leq 1000 -1000 leq sequence[i] leq 1000 0 leq start leq end < n Output Format Output the final state of the sequence as a single line of space-separated integers. Sample Input ``` 5 2 1 -2 3 -4 5 1 3 2 4 ``` Sample Output ``` 1 2 -3 4 -5 ``` Explanation - Initial sequence: [1, -2, 3, -4, 5] - After the first spell (invert indices 1 to 3): [1, 2, -3, 4, 5] - After the second spell (invert indices 2 to 4): [1, 2, 3, -4, -5]","solution":"def invertRange(sequence, spells): Inverts the signs of all integers in the specified subarrays of the sequence. Parameters: sequence (list of int): Initial sequence of integers. spells (list of list of int): List of spells; each spell is a subarray range [start, end]. Returns: list of int: Final state of the sequence after all spells are applied. for spell in spells: start, end = spell for i in range(start, end + 1): sequence[i] = -sequence[i] return sequence"},{"question":"A festival organizer wants to distribute t-shirts to teams participating in a contest. Each team consists of an equal number of members, and each member should receive exactly one t-shirt. However, the organizer has a limited number of t-shirts. You need to help the organizer determine the maximum number of complete teams that can receive t-shirts. Input: - The first line contains an integer T, the number of test cases. - The next T lines contain two integers each. The first integer N represents the total number of t-shirts available, and the second integer K represents the number of t-shirts required by one team. Output: For each test case, output the maximum number of complete teams that can receive t-shirts. Constraints: - 1 ≤ T ≤ 10^5 - 1 ≤ N, K ≤ 10^9 SAMPLE INPUT 3 10 3 15 5 7 2 SAMPLE OUTPUT 3 3 3","solution":"def max_complete_teams(T, test_cases): Determines the maximum number of complete teams that can receive t-shirts for each test case. Parameters: T (int): The number of test cases. test_cases (list of tuples): A list of tuples, where each tuple consists of two integers (N, K). Returns: list of int: A list of integers where each integer represents the maximum number of complete teams for the corresponding test case. results = [] for N, K in test_cases: results.append(N // K) return results"},{"question":"Carol loves playing with sequences of numbers. Recently, she got fascinated with the idea of rearranging sequences to minimize the differences between consecutive elements. She defines the \\"dissatisfaction score\\" of a sequence as the sum of absolute differences between all consecutive elements of the sequence. Given an integer array `a` of length `n`, help Carol find the minimum possible dissatisfaction score that can be achieved by rearranging the elements of the array. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the array `a`. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000) — the elements of the array. -----Output----- Output a single integer representing the minimum dissatisfaction score after rearranging the elements of the array. -----Examples----- Input 4 2 4 1 3 Output 3 Input 3 10 1 8 Output 9 Input 5 7 7 7 7 7 Output 0 -----Note----- In the first sample, one of the possible optimal rearrangements is [1, 2, 3, 4] which gives a dissatisfaction score of |1-2| + |2-3| + |3-4| = 1 + 1 + 1 = 3. In the second sample, one of the possible optimal rearrangements is [1, 8, 10] which gives a dissatisfaction score of |1-8| + |8-10| = 7 + 2 = 9. In the third sample, as all elements are the same, the dissatisfaction score is already 0.","solution":"def minimum_dissatisfaction_score(n, a): Returns the minimum possible dissatisfaction score that can be achieved by rearranging the elements of the array. The minimum dissatisfaction score can be achieved by sorting the array. if n <= 1: return 0 # Sort the array to minimize dissatisfaction score a.sort() # Calculate the dissatisfaction score dissatisfaction_score = 0 for i in range(1, n): dissatisfaction_score += abs(a[i] - a[i - 1]) return dissatisfaction_score"},{"question":"Angela and Bob are playing a game with strings. Angela gives Bob a target string S consisting of lowercase English letters. Bob needs to create the target string S by selecting characters from a given string T, also consisting of lowercase English letters. However, Bob can use each character from T at most once. Help Bob by checking if it\'s possible to create string S using characters from string T. -----Input:----- - First line will contain Q, number of test cases. Then the test cases follow. - Each test case consists of two lines. - The first line contains the string S. - The second line contains the string T. -----Output:----- For each test case print either \\"YES\\" (without quotes) if Bob can create the string S using characters from T or \\"NO\\" (without quotes) otherwise. -----Constraints----- - 1 leq Q leq 100 - 1 leq |S|, |T| leq 1000 - S and T contain only lowercase English letters. -----Sample Input:----- 3 hello lloeh world wrldo coding codin -----Sample Output:----- YES YES NO -----EXPLANATION----- - Example 1: Bob can use characters from \\"lloeh\\" to form \\"hello\\". - Example 2: Bob can use characters from \\"wrldo\\" to form \\"world\\". - Example 3: The character \'g\' needed to form \\"coding\\" is missing in \\"codin\\".","solution":"def can_create_string(s, t): Returns \\"YES\\" if the string s can be created from string t using each character at most once, otherwise returns \\"NO\\". from collections import Counter count_s = Counter(s) count_t = Counter(t) for char, count in count_s.items(): if count_t[char] < count: return \\"NO\\" return \\"YES\\""},{"question":"There is a tree with N nodes. Each node has a certain value assigned to it. The task is to find out if there exists a path in this tree such that the sum of the values of the nodes in the path is equal to a given integer S. Constraints * 1 ≤ N ≤ 10^5 * -10^9 ≤ value of each node ≤ 10^9 * -10^9 ≤ S ≤ 10^9 Input Input is given from Standard Input in the following format: N S value_1 value_2 ... value_N u_1 v_1 u_2 v_2 ... u_(N-1) v_(N-1) The first line contains the number of nodes N and the integer S. The second line contains the values of the N nodes. The following N-1 lines contain pairs of integers u_i and v_i (1 ≤ u_i, v_i ≤ N), representing an edge between nodes u_i and v_i. Output Print `Yes` if there exists a path in the tree such that the sum of the values of the nodes in the path is equal to S; print `No` otherwise. Examples Input 5 8 1 2 3 4 5 1 2 1 3 2 4 2 5 Output Yes Input 3 10 1 2 3 1 2 1 3 Output No","solution":"def path_sum_exists(N, S, values, edges): from collections import defaultdict, deque # Convert 1-indexed node values to 0-indexed values = [0] + values # Build tree adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def bfs(start): visited = [False] * (N + 1) queue = deque([(start, values[start])]) visited[start] = True while queue: node, current_sum = queue.popleft() # Check if found a valid path sum if current_sum == S: return True # Explore the children / neighbors for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_sum + values[neighbor])) return False # Start BFS from any node, here starting from node 1 return bfs(1)"},{"question":"You are given a number \'n\'. The task is to find the smallest positive integer \'x\' such that the product of the digits of \'x\' equals \'n\'. If no such number exists, return -1. ------ Input Format ------ - The input contains a single integer n. ------ Output Format ------ - Output the smallest positive integer \'x\' such that the product of the digits of \'x\' equals \'n\'. If no such number exists, output -1. ------ Constraints ------ - 1 ≤ n ≤ 10^{9} ------ Sample Input 1 ------ 36 ------ Sample Output 1 ------ 49 ------ Sample Input 2 ------ 100 ------ Sample Output 2 ------ 455 ------ Sample Input 3 ------ 15 ------ Sample Output 3 ------ 35 ------ Sample Input 4 ------ 17 ------ Sample Output 4 ------ -1 ------ Explanation 1 ------ - For the first test case, the smallest \'x\' whose digits multiply to 36 is \'49\' (4 * 9 = 36). - For the second test case, the smallest \'x\' whose digits multiply to 100 is \'455\' (4 * 5 * 5 = 100). - For the third test case, the smallest \'x\' whose digits multiply to 15 is \'35\' (3 * 5 = 15). - For the fourth test case, there is no \'x\' whose digits multiply to 17, hence the answer is -1.","solution":"def smallest_integer_with_product(n): if n == 1: return 1 factors = [] for i in range(9, 1, -1): while n % i == 0: factors.append(i) n //= i if n > 1: return -1 factors.sort() result = int(\'\'.join(map(str, factors))) return result"},{"question":"Given an array of integers, rotate the array to the right by k steps, where k is non-negative. You are not allowed to use extra space for another array. Implement an in-place algorithm to achieve this. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers, representing the elements of the array. The third line contains an integer k (0 ≤ k ≤ 10^5), the number of steps to rotate the array. Output Output the array after k rotations to the right. Examples Input 7 1 2 3 4 5 6 7 3 Output 5 6 7 1 2 3 4 Input 6 -1 -100 3 99 15 77 2 Output 15 77 -1 -100 3 99","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. n = len(arr) k = k % n def reverse(start, end): while start < end: arr[start], arr[end] = arr[end], arr[start] start, end = start + 1, end - 1 reverse(0, n - 1) reverse(0, k - 1) reverse(k, n - 1) # Example usage: # arr = [1, 2, 3, 4, 5, 6, 7] # rotate_array(arr, 3) # print(arr) # Output should be [5, 6, 7, 1, 2, 3, 4]"},{"question":"A group of friends is planning a road trip. During the trip, they visit several cities to collect souvenirs. Each city has a unique souvenir, but the friends must plan their trip efficiently to avoid visiting the same city more than once and to minimize the total travel cost. Each city is represented as a node in a graph, and the roads between the cities are the edges with associated travel costs. They start their journey from City 1 and must return to City 1 after visiting all cities exactly once. Write a function to compute the minimum cost required to complete the trip starting and ending at City 1 while visiting each city exactly once (also known as the Traveling Salesman Problem). Input Format - The first line contains an integer n, which is the number of cities. - The next n lines each contain n integers, where the jth integer in the ith line represents the cost of traveling from City i to City j. (cost[i][j]) Output Format - A single integer representing the minimum travel cost to complete the trip starting and ending at City 1. Constraints - 2 <= n <= 15 - 0 <= cost[i][j] <= 1000 - cost[i][i] = 0 for all i (no self-loops) Sample Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 80 Explanation The friends can take the following route to minimize the travel cost: City 1 -> City 2 -> City 4 -> City 3 -> City 1. The total travel cost for this route is 10 (City 1 to City 2) + 25 (City 2 to City 4) + 30 (City 4 to City 3) + 15 (City 3 to City 1) = 80.","solution":"def tsp(cost): Solves the Traveling Salesman Problem using dynamic programming. Parameters: cost (list of list of ints): The cost matrix representing travel costs between cities. Returns: int: The minimum travel cost to complete the trip starting and ending at City 1. n = len(cost) dp = [[None]*(1<<n) for _ in range(n)] def tsp_dp(visit, mask): if mask == (1<<n) - 1: return cost[visit][0] if dp[visit][mask] is not None: return dp[visit][mask] min_cost = float(\'inf\') for city in range(n): if mask & (1<<city) == 0: new_mask = mask | (1<<city) min_cost = min(min_cost, cost[visit][city] + tsp_dp(city, new_mask)) dp[visit][mask] = min_cost return min_cost return tsp_dp(0, 1) # Example usage if __name__ == \\"__main__\\": cost_matrix = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(tsp(cost_matrix)) # Output: 80"},{"question":"Alice has a special binary string consisting of N characters, which are either \'0\' or \'1\'. Bob is trying to rearrange the characters in this string to make it a palindrome. A palindrome is a string that reads the same backward as forward. However, there are rules: 1. Bob can swap any two characters in the string any number of times. 2. Bob can remove one character from anywhere in the string at most once. Your task is to determine whether it is possible for Bob to rearrange the characters in Alice\'s binary string to make it a palindrome after performing the allowed operations (including the removal operation if necessary). -----Input----- The first line of input contains one integer N (1 ≤ N ≤ 100) — the length of the binary string. The second line contains a binary string of length N consisting of characters \'0\' and \'1\'. -----Output----- Output \\"Yes\\" if it is possible for Bob to rearrange the string (and potentially remove one character) to form a palindrome, and \\"No\\" otherwise. -----Examples----- Input 5 11001 Output Yes Input 4 1100 Output Yes Input 3 101 Output Yes Input 6 111000 Output No -----Note----- In the first sample, Bob can remove one \'0\' to get the string \\"1101\\", which can be rearranged to \\"1011\\" (a palindrome). In the second sample, Bob can rearrange \\"1100\\" as \\"1001\\" (a palindrome). In the third sample, the string \\"101\\" is already a palindrome, so no changes are needed. In the fourth sample, removing any character will not help in getting a palindrome; the counts of \'1\'s and \'0\'s will still not match a palindrome\'s requirements. So the answer is \\"No\\".","solution":"def can_form_palindrome(N, binary_string): Determine whether it is possible to rearrange the binary string (with at most one removal) to make it a palindrome. from collections import Counter count = Counter(binary_string) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) if N % 2 == 0: return \\"Yes\\" if odd_count == 0 else \\"No\\" else: return \\"Yes\\" if odd_count <= 1 else \\"No\\""},{"question":"You are working on a card game where each player is given a set of cards. Each card has a unique number on it. Players can trade cards, and the goal is to maximize the highest number a player can obtain through a single trade. A trade allows a player to swap a card with one of their neighbors. The neighbor will always trade their highest-value card that is lower than the card being offered for the trade. Write a function to determine the highest card value a player can obtain after exactly one trade. Input The first line of the input consists of an integer n (2 ≤ n ≤ 10^5), the total number of players. The second line contains n space-separated integers, where the ith integer represents the unique number on the card given to the ith player. Each integer lies between 1 and 10^9, inclusive. Output Print a single integer, the maximum number a player can obtain through a single trade. Examples Input 3 5 9 7 Output 9 Input 4 4 8 2 6 Output 8 Note In the first example, the second player has the card with the value 9, which is already the highest value, and no other player can offer a higher value than 9. In the second example, the second player has the card with the value 8. Player 4 can trade their card with the second player to obtain the card value of 8 from them by offering their card with the value 6. The highest card value obtainable in a single trade is 8.","solution":"def highest_card_after_trade(n, cards): max_card = max(cards) return max_card"},{"question":"You are given a matrix of characters consisting of \'P\', \'Q\', and \'R\'. The goal is to determine if you can find a continuous path from the top-left to the bottom-right corner of the matrix while following a specific set of movement rules: 1. If on a cell containing \'P\', you can only move right or down. 2. If on a cell containing \'Q\', you can only move up or left. 3. If on a cell containing \'R\', you can move in any of the four directions (up, down, left, right). The path must only proceed to adjacent cells (vertically or horizontally) and must only contain \'P\', \'Q\', or \'R\'. Write a program that checks if such a path exists. Input The first line of input contains two space-separated integers n and m (2 ≤ n, m ≤ 100), the dimensions of the matrix. The next n lines contain m characters each, indicating the matrix. Output Output \\"YES\\" if a path exists, otherwise output \\"NO\\". Examples Input 3 3 PQQ RQR RRR Output YES Input 3 3 PQQ QQR PPP Output NO Note In the first test, one possible path is: [0,0] -> [0,1] -> [0,2] -> [1,2] -> [2,2] In the second test, no valid path exists due to the movement constraints imposed by \'Q\'.","solution":"def can_find_path(matrix, n, m): from collections import deque # Directions for P, Q, R directions = { \'P\': [(0, 1), (1, 0)], # right, down \'Q\': [(0, -1), (-1, 0)], # left, up \'R\': [(0, 1), (1, 0), (0, -1), (-1, 0)] # all four directions (right, down, left, up) } def is_valid(x, y): return 0 <= x < n and 0 <= y < m # BFS from top-left to bottom-right queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions[matrix[x][y]]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Example Usage: # n, m = 3, 3 # matrix = [ # [\'P\', \'Q\', \'Q\'], # [\'R\', \'Q\', \'R\'], # [\'R\', \'R\', \'R\'] # ] # print(can_find_path(matrix, n, m)) # Outputs: YES"},{"question":"You are given a binary tree with n nodes. Each node contains an integer value. You need to determine if there exists a path between any two nodes in the tree such that the sum of the values of the nodes in the path equals a given integer S. A path can start and end at any two nodes, and it must move downwards (can only move to child nodes, not parent nodes). Write a function `path_sum_exists` that takes the root of the binary tree and an integer S as inputs, and returns `True` if such a path exists, `False` otherwise. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. - The second line contains n space-separated integers representing the values of the nodes. - The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) denoting an edge between the nodes u and v in the tree. The edges are given in a way that node 1 is the root of the tree. - The last line contains the integer S — the sum that needs to be checked. -----Output----- Print `True` if there exists a path with the sum S, otherwise print `False`. -----Examples----- **Input** 7 3 4 2 -3 5 6 -2 1 2 1 3 2 4 2 5 3 6 3 7 6 **Output** True **Input** 5 1 -1 2 3 4 1 2 1 3 2 4 2 5 10 **Output** False **Note** In the first example, there is a path from node 3 to node 7 with sum equal to 6 (3 -> 6 -> -3). In the second case, there is no path whose sum equals 10.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def path_sum_exists(root, S): def dfs(node, current_sum): if not node: return False current_sum += node.val if current_sum == S: return True return dfs(node.left, current_sum) or dfs(node.right, current_sum) def traverse(node): if not node: return False return dfs(node, 0) or traverse(node.left) or traverse(node.right) return traverse(root) def build_tree(values, edges): nodes = [TreeNode(val=values[i]) for i in range(len(values))] for u, v in edges: if not nodes[u-1].left: nodes[u-1].left = nodes[v-1] else: nodes[u-1].right = nodes[v-1] return nodes[0] # Conversion functions def from_input_string(input_string): input_lines = input_string.strip().split(\\"n\\") n = int(input_lines[0]) values = list(map(int, input_lines[1].split())) edges = [tuple(map(int, line.split())) for line in input_lines[2:n+1]] S = int(input_lines[n+1]) return (n, values, edges, S) def to_input_string(inputs): n, values, edges, S = inputs input_string = f\\"{n}n\\" + \\" \\".join(map(str, values)) + \\"n\\" input_string += \\"n\\".join(f\\"{u} {v}\\" for u, v in edges) + \\"n\\" input_string += str(S) return input_string def from_output_string(output_string): return output_string.strip() == \\"True\\" def to_output_string(output): return \\"True\\" if output else \\"False\\" # Solve function def solve(input_string): n, values, edges, S = from_input_string(input_string) root = build_tree(values, edges) result = path_sum_exists(root, S) return to_output_string(result)"},{"question":"Given a string s consisting solely of lowercase letters and a set of queries, each query asks for the most frequent character within a specific substring of s. Your task is to write a function `mostFrequentChar` that accepts the string s and an array of queries, each query being a pair of integers (start, end). The function should return a list of the most frequent characters for each query. For Example: Input: s = \\"abacabad\\", queries = [(0, 3), (2, 6), (1, 3)] Output: [\'a\', \'a\', \'a\'] Explanation: - For the query (0, 3), the substring is \\"abac\\", where \'a\' appears 2 times. - For the query (2, 6), the substring is \\"acaba\\", where \'a\' appears 3 times. - For the query (1, 3), the substring is \\"bac\\", where \'a\' appears 1 time. In case of a tie, return the lexicographically smallest character. Your Task: You don\'t need to read input or print anything. Complete the function `mostFrequentChar()` which accepts a string s and a 2D list of integer pairs representing the queries. The function should return a list of characters. Expected Time Complexity: O(Q * (end-start)) Expected Auxiliary Space: O(1) Constraints: 1<=|s|<=1000 1<=len(queries)<=100 1<=start<=end<|s|","solution":"def mostFrequentChar(s, queries): def get_most_frequent_char(substring): char_count = {} for char in substring: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_count = max(char_count.values()) most_frequent_chars = [char for char in char_count if char_count[char] == max_count] return min(most_frequent_chars) results = [] for start, end in queries: substring = s[start:end + 1] results.append(get_most_frequent_char(substring)) return results"},{"question":"Sarah loves reading books and has recently acquired a collection of n books. Each book i has a thickness ti (in millimeters). Sarah has a bookshelf that can hold up to m millimeters of thickness. Help Sarah determine the maximum number of books she can place on her shelf without exceeding the maximum capacity. Input The first line contains two space-separated integers n and m (1 ≤ m ≤ sum of all ti, 1 ≤ n ≤ 100) — the number of books in Sarah\'s collection and the maximum thickness the shelf can hold in millimeters. The second line contains n space-separated integers ti (1 ≤ ti ≤ 100) — the thickness of each book. Output Output the only number — the maximum number of books Sarah can place on her shelf without exceeding the maximum capacity. Examples Input 5 10 1 2 3 4 5 Output 4 Input 4 5 3 2 2 1 Output 3","solution":"def max_books_on_shelf(n, m, thicknesses): Determines the maximum number of books that can be placed on the shelf without exceeding maximum capacity. Args: n: int - the number of books m: int - the maximum thickness the shelf can hold in millimeters thicknesses: list of ints - the thickness of each book Returns: int - the maximum number of books that can be placed on the shelf thicknesses.sort() # Sort the thicknesses in ascending order to maximize the number of books total_thickness = 0 count = 0 for t in thicknesses: if total_thickness + t <= m: total_thickness += t count += 1 else: break return count"},{"question":"The city is organizing an annual sports event with multiple athletes competing in various races. Each athlete is identified by a unique number, and each race has a list of athletes participating in it. You are responsible for processing the results and handling various queries about the races and athletes. There are two types of queries: 1. `1 a r t` - Add the time `t` (in seconds) for athlete `a` in race `r`. 2. `2 a` - Return the total time (in seconds) taken by athlete `a` across all races. Write a program to process these queries. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of queries. The next `n` lines contain the queries, one per line. For queries of type `1`, the space-separated integers `1`, `a`, `r`, `t` are provided (1 ≤ a ≤ 10^5, 1 ≤ r ≤ 1000, 0 ≤ t ≤ 10^6). For queries of type `2`, the space-separated integers `2` and `a` are provided (1 ≤ a ≤ 10^5). Output For each query of the second type, print the total time for the athlete `a`. Example Input ``` 6 1 1 101 50 1 2 101 30 1 1 102 25 2 1 2 2 1 2 103 40 2 2 ``` Output ``` 75 30 70 ```","solution":"def process_queries(n, queries): athletes = {} results = [] for query in queries: q = query.split() q_type = int(q[0]) if q_type == 1: a = int(q[1]) t = int(q[3]) if a not in athletes: athletes[a] = 0 athletes[a] += t elif q_type == 2: a = int(q[1]) if a in athletes: results.append(athletes[a]) else: results.append(0) return results"},{"question":"Given a string S consisting of only lowercase letters, find and return the length of the longest substring where every character appears an even number of times. -----Constraints----- - 1 leq |S| leq 100,000 - S consists of lowercase English letters only. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Output the length of the longest substring where all characters appear an even number of times. -----Sample Input----- aabbccddeeff -----Sample Output----- 12 In the example \\"aabbccddeeff\\", the entire string is a valid substring where every character appears exactly twice (an even number of times). -----Sample Input----- ababc -----Sample Output----- 4 In the string \\"ababc\\", the longest substring where every character appears an even number of times is \\"abba\\" (length of 4) in which \'a\' and \'b\' occur twice each.","solution":"def longest_even_char_substring(S): Returns the length of the longest substring where every character appears an even number of times. from collections import defaultdict # Dictionary to store first occurrence of each state first_occurrence = {0: -1} current_state = 0 max_length = 0 for i, char in enumerate(S): bit = 1 << (ord(char) - ord(\'a\')) current_state ^= bit if current_state in first_occurrence: max_length = max(max_length, i - first_occurrence[current_state]) else: first_occurrence[current_state] = i return max_length"},{"question":"A group of friends decides to play a game where they form a circle and pass a ball around. The ball starts with one friend (friend 1) and is then passed k times. Each pass is to the friend immediately next to the current holder, either in the clockwise or counterclockwise direction. The friends want to know who will end up with the ball after the k passes are completed. Write a program that takes the number of friends, the direction of each pass (either \'L\' for left (counterclockwise) or \'R\' for right (clockwise)), and the total number of passes, then determines which friend ends up with the ball. Input The program will receive multiple datasets. Each dataset is given in the following format: n k d1 d2 d3 ... dk The integer n (2 ≤ n ≤ 100) represents the number of friends, and the integer k (1 ≤ k ≤ 10,000) represents the number of passes. The next k characters represent the direction of each pass, where each character is either \'L\' or \'R\'. The input ends with a line containing two zeros. Output For each dataset, output a line containing the number of the friend who will end up with the ball. Example Input 5 3 R L R 6 10 L L L R R R L R L R 0 0 Output 2 1","solution":"def find_ball_holder(n, k, directions): Returns the number of the friend who will hold the ball after k passes. Parameters: n (int): The number of friends. k (int): The number of passes. directions (str): A string of \'L\' or \'R\' denoting the direction of each pass. Returns: int: The friend number who holds the ball after k passes. current_friend = 0 for direction in directions: if direction == \'R\': current_friend = (current_friend + 1) % n elif direction == \'L\': current_friend = (current_friend - 1 + n) % n # Using 1-based indexing for the friend number return current_friend + 1 def process_inputs(inputs): Process each dataset of inputs and return the results. Parameters: inputs (list): A list of tuples where each tuple contains the number of friends, number of passes, and directions. Returns: list: A list of friend numbers who will hold the ball after given passes. results = [] for dataset in inputs: n, k, directions = dataset result = find_ball_holder(n, k, directions) results.append(result) return results"},{"question":"Write a function that accepts a string containing a mathematical expression and returns the result of evaluating the expression. The input string will include positive integers and the operators `+`, `-`, `*`, and `/` (integer division), and parentheses for indicating the priority of operations. Your function should respect the order of operations (PEMDAS/BODMAS rules): 1. Parentheses 2. Exponents (not required for this question) 3. Multiplication and Division (from left to right) 4. Addition and Subtraction (from left to right) You can assume that the input string is always a valid mathematical expression and there is no need to handle errors in the input. Example ``` Input: \\"3+2*2\\" Output: 7 Input: \\"(1+(4+5+2)-3)+(6+8)\\" Output: 23 ``` # Guidelines: - Parse the string and evaluate the operations correctly following the order of precedence. - You may implement a function using a stack to handle parentheses and operator precedence. - Ensure your solution covers various edge cases, such as multiple consecutive operators and nested parentheses. You may find the Shunting Yard algorithm helpful for converting the expression into a format that\'s easier to evaluate. **References:** - Shunting Yard algorithm: https://en.wikipedia.org/wiki/Shunting-yard_algorithm - More visual explanation of expression parsing: http://parsingmathexpressions.xyz **Note**: Do not use built-in functions like `eval()` as they pose security risks and defeat the purpose of the exercise.","solution":"def evaluate_expression(expression: str) -> int: def precedence(op: str) -> int: if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a: int, b: int, op: str) -> int: if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def evaluate(tokens: list) -> int: # Stack to store integers values = [] # Stack to store operators ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = val * 10 + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(list(expression))"},{"question":"You are given a string s consisting of lowercase Latin letters and a number q representing the number of queries. Each query is of two types: 1. 1 i c: Replace the character at the i-th position of the string with the character c. 2. 2 L R: Compute the lexicographically smallest character in the substring of s from indices L to R (inclusive). Can you process all the queries? -----Input----- The first line contains a string s (1 le |s| le 100000), the initial string. The second line contains one integer q (1 le q le 100000) — the number of queries. Then q lines follow, each describing a query. The i-th line contains an integer t_i (1 le t_i le 2). If t_i = 1, then it is a query of the first type with 1 le i le |s| and c being a lowercase Latin letter. If t_i = 2, then it is a query of the second type with 1 le L le R le |s|. -----Output----- For each query of type 2 print the lexicographically smallest character in the specified substring. -----Example----- Input abracadabra 5 2 1 3 1 3 c 2 1 3 2 7 11 1 5 z Output a a a","solution":"def process_queries(s, queries): s = list(s) result = [] for query in queries: t = query[0] if t == 1: i, c = query[1], query[2] s[i - 1] = c elif t == 2: L, R = query[1], query[2] smallest_char = min(s[L - 1:R]) result.append(smallest_char) return result"},{"question":"# Task Given a string of length N representing a number, write a function to move all the digit `0` to the end of this string without changing the order of non-zero digits. # Input - A string `s` of length N where 1 ≤ N ≤ 100 and s only contains numeric characters (0–9). # Output - A string with all zeros moved to the end. # Example ``` s = \\"1020304050\\" moveZerosToEnd(s) => \\"12345\\" + \\"00000\\" ``` The output should be \\"1234500000\\".","solution":"def moveZerosToEnd(s): This function takes a string s of digits and moves all \'0\' characters to the end while maintaining the order of other characters. non_zero_digits = [char for char in s if char != \'0\'] zero_digits = [char for char in s if char == \'0\'] return \'\'.join(non_zero_digits + zero_digits)"},{"question":"Bob loves playing with arrays. He has an array of n integers. He can perform operations on the array to make all the array\'s elements equal. In one operation, he can choose any two adjacent elements and increase or decrease both of them by one. Your task is to determine the minimum number of operations needed to make all the elements equal. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output In a single line, print the minimum number of operations needed. Examples Input 3 1 2 3 Output 1 Input 5 5 4 3 2 1 Output 4 Note For the first example, you can increase the first and second element in one operation to make the array [2, 3, 3], which results in all elements being equal in 1 operation. In the second example, you can perform four operations to make all elements 3.","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations to make all elements in the array equal. arr.sort() median = arr[n // 2] operations = sum(abs(x - median) for x in arr) return operations"},{"question":"A company needs to determine if an employee is eligible for a bonus. An employee is eligible for a bonus if they have worked more than 40 hours in a week. Given the number of hours an employee has worked each day for a week, determine if the employee is eligible for a bonus. ------ Input Format ------ - The first line contains T, the number of test cases. - Each test case consists of a single line of input with 7 space-separated integers, representing the number of hours worked each day of the week from Monday to Sunday. ------ Output Format ------ For each test case, output in a single line texttt{Eligible} if the total hours worked in the week is more than 40. Otherwise, print texttt{Not Eligible}. You may print each character of texttt{Eligible} and texttt{Not Eligible} in uppercase or lowercase (for example, texttt{eligible}, texttt{eligible}, texttt{NOT ELIGIBLE} will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ text{hours worked per day} ≤ 24 ------ Sample Input 1 ------ 3 8 8 8 8 8 8 8 5 5 5 5 5 5 5 9 8 10 0 6 12 8 ------ Sample Output 1 ------ Eligible Not Eligible Eligible ------ Explanation 1 ------ Test Case 1: The total hours worked are 8 + 8 + 8 + 8 + 8 + 8 + 8 = 56. Thus, the employee is eligible for a bonus. Test Case 2: The total hours worked are 5 + 5 + 5 + 5 + 5 + 5 + 5 = 35. Thus, the employee is not eligible for a bonus. Test Case 3: The total hours worked are 9 + 8 + 10 + 0 + 6 + 12 + 8 = 53. Thus, the employee is eligible for a bonus.","solution":"def check_bonus_eligibility(test_cases): results = [] for hours in test_cases: if sum(hours) > 40: results.append(\\"Eligible\\") else: results.append(\\"Not Eligible\\") return results"},{"question":"Astra is organizing a corporate meeting and needs to arrange the seating in a way that maximizes efficiency and comfort for all participants. The meeting room has a specific number of slots for seats arranged in a single row, and each slot can only accommodate one person. Each participant in the meeting has a unique comfort level requirement, which specifies the minimum distance they need from the nearest other person to feel comfortable. The comfort level requirement for participants is given in a list. Your task is to determine the maximum number of participants that can be seated while satisfying all their comfort level requirements. -----Input----- The input contains two integers n and m (1 leq n leq 100, 1 leq m leq 100) — the number of participants and the number of seating slots available, respectively. The next line contains n integers c_1, c_2, ..., c_n (0 leq c_i < m) — the comfort level requirement for each participant. The comfort level requirement `c_i` specifies the minimum distance that participant needs from the nearest other participant. -----Output----- Print one integer — the maximum number of participants that can be seated in the row of available seating slots, following their comfort level requirements. -----Examples----- Input 3 10 1 2 1 Output 3 Input 4 5 2 1 3 2 Output 2 Input 5 12 1 1 1 1 1 Output 5 Input 2 4 2 3 Output 1","solution":"def max_participants_seated(n, m, comfort_levels): comfort_levels.sort() seats = [False] * m count = 0 for comfort in comfort_levels: placed = False for i in range(m): if all((j < m and j >= 0 and not seats[j]) for j in range(i, i + comfort + 1)): for j in range(i, i + comfort + 1): seats[j] = True count += 1 placed = True break if not placed: break return count"},{"question":"A company is creating a scheduling system for their conference rooms. Conference rooms are booked for different events throughout the day, and each event has a start time and an end time. The goal is to determine the maximum number of non-overlapping events that can be held in a single conference room. You are given a list of events with their start and end times. Each event is represented by a pair of integers [start, end], where `start` is the start time and `end` is the end time. Write a function `maxNonOverlappingEvents(events)` that takes an array of events and returns the maximum number of non-overlapping events that can be scheduled in a single conference room. Example 1: Input: events = [[1, 3], [2, 4], [3, 5]] Output: 2 Explanation: One possible schedule is [[1, 3], [3, 5]]. Example 2: Input: events = [[1, 2], [2, 3], [3, 4], [4, 5]] Output: 4 Explanation: All events can be scheduled without overlapping. Example 3: Input: events = [[1, 3], [1, 3], [1, 3]] Output: 1 Explanation: Only one event can be scheduled among the overlapping events. Your Task: Complete the function `maxNonOverlappingEvents(events)` which takes an array of events (as pairs of integers) and returns the maximum number of non-overlapping events that can be scheduled in a single conference room. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1. 1 ≤ Number of events ≤ 10^5 2. 0 ≤ start < end ≤ 10^9","solution":"def maxNonOverlappingEvents(events): This function takes in a list of events, where each event is represented as a [start, end] pair, and returns the maximum number of non-overlapping events that can be scheduled in a single conference room. # Sort events based on their end times events.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping events and the end time of the last added event count = 0 last_end_time = -1 # Iterate through the sorted events for event in events: start, end = event if start >= last_end_time: # If the current event starts after or when the last event ends count += 1 last_end_time = end return count"},{"question":"You are given a list of `n` (2 ≤ n ≤ 10^3) unique integers sorted in ascending order. Determine the maximum product of two distinct elements present in the list such that their difference is not more than a given integer `k` (1 ≤ k ≤ 10^3). Input The first line contains an integer `n` — the number of elements in the list. The second line contains `n` unique integers sorted in ascending order. The third line contains an integer `k` — the maximum allowed difference. Output Print a single integer — the maximum product of two distinct elements in the list, if possible. If no such pair exists, print `-1`. Examples Input 5 1 3 7 9 10 2 Output 90 Input 4 1 5 11 12 0 Output -1 Input 6 1 2 3 8 9 10 1 Output 90 Note In the first example, the pairs with differences not more than 2 are (1, 3), (7, 9), and (9, 10). The pair (9, 10) gives the maximum product which is 90. In the second example, no pairs have a difference of 0 or less, so the output is -1. In the third example, the pairs with differences not more than 1 are (1, 2), (2, 3), (8, 9), and (9, 10). The pair (9, 10) gives the maximum product which is 90.","solution":"def max_product_with_diff(arr, k): Determine the maximum product of two distinct elements in the list such that their difference is not more than k. n = len(arr) max_product = -1 for i in range(n-1): for j in range(i+1, n): if arr[j] - arr[i] <= k: max_product = max(max_product, arr[i] * arr[j]) else: break return max_product"},{"question":"Balancing Parentheses Alex is working on a text editor that detects and corrects the parentheses in expressions. He needs to ensure that every opening parenthesis \'(\' has a matching closing parenthesis \')\'. The text editor should also correct misplaced parentheses by moving them to the correct positions, if possible. However, Alex can only make these corrections if a valid expression can be formed by reordering the parentheses. You are tasked with helping Alex write a program to determine if a given sequence of parentheses can be balanced by rearranging them. If it is possible, return \\"YES\\" along with the minimum number of adjacent swaps required to make the sequence balanced. If it is not possible, return \\"NO\\". An adjacent swap involves swapping the positions of two consecutive parentheses. Input The input consists of a single test case of the following format: p Here, p is a string that consists of characters \'(\' and \')\' only, with a length between 1 and 10^5. Output Output \\"YES\\" followed by a single integer in a line which is the minimum number of adjacent swaps required to make the sequence balanced. If it is not possible to make the sequence balanced, output \\"NO\\". Sample Input 1 (()) Sample Output 1 YES 0 Sample Input 2 ())( Sample Output 2 YES 1 Sample Input 3 ))( Sample Output 3 NO Example Input ())( Output YES 1","solution":"def balance_parentheses(p): Determines if the given sequence of parentheses can be balanced by rearranging them. If it is possible, returns \\"YES\\" followed by the minimum number of adjacent swaps required. If it is not possible, returns \\"NO\\". n = len(p) if n % 2 != 0: return \\"NO\\" open_count = close_count = 0 min_swaps = 0 swap_balance = 0 for char in p: if char == \'(\': open_count += 1 else: close_count += 1 if open_count != close_count: return \\"NO\\" for char in p: if char == \'(\': swap_balance += 1 else: swap_balance -= 1 if swap_balance < 0: min_swaps += 1 swap_balance = 1 return f\\"YES {min_swaps}\\""},{"question":"You are given a playlist of songs, each with a unique integer identifier and a duration measured in seconds. The target is to determine the number of unique pairs of songs such that the total duration of each pair is divisible by 60. Note: - A pair (i, j) is considered unique if and only if i < j. Each song duration will be provided in an array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of songs in the playlist. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^4) — the durations of the songs in seconds. -----Output----- Print a single integer denoting the number of unique pairs (i, j) with the total duration divisible by 60. -----Example----- Input 3 30 20 150 Output 1 Input 5 60 60 60 60 60 Output 10 Input 4 30 30 30 30 Output 6","solution":"def num_pairs_divisible_by_60(durations): from collections import defaultdict # Create a dictionary to store frequency of remainders remainder_count = defaultdict(int) count = 0 # Iterate through each song duration for duration in durations: # Calculate the remainder when divided by 60 remainder = duration % 60 # Calculate the complement to form a total divisible by 60 complement = (60 - remainder) % 60 # Increment the count by the number of times the complement has appeared count += remainder_count[complement] # Update the remainder count remainder_count[remainder] += 1 return count"},{"question":"You are given an array of integers that represent the heights of walls on a 2D plane, where the width of each wall is 1 unit. You need to find the maximum amount of water that can be trapped between the walls after it rains. Water can be trapped if there are walls on both sides that are taller than the space between them. The volume of water trapped is determined by the height of the shorter wall multiplied by the distance between the walls minus the heights of any walls in between. Write a function that calculates the amount of water that can be trapped. Function Signature: ```python def trap(height: List[int]) -> int: pass ``` # Input - A list of integers, `height`, where 1 ≤ len(height) ≤ 20000 and 0 ≤ height[i] ≤ 10000. # Output - An integer representing the maximum amount of water that can be trapped. # Example Example 1 ```python height = [4, 2, 0, 3, 2, 5] output = 9 ``` Example 2 ```python height = [1, 2, 1] output = 0 ``` Example 3 ```python height = [3, 0, 2, 0, 4] output = 7 ``` # Explanation In the first example, water trapped is [4, 2, 0, 3, 2, 5]. The amount of trapped water can be visualized as follows: - Between wall 1 and wall 6 (height 4 and 5), 5 units of water can be trapped (between walls 2 to 5), minus the heights of walls 3 and 4. - The total trapped water is 9 units. In the second example, [1, 2, 1], no water can be trapped between the walls. Thus, the result is 0. In the third example, [3, 0, 2, 0, 4], the total trapped water is 7 units.","solution":"from typing import List def trap(height: List[int]) -> int: if not height: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"In a city where roads are laid out in a grid pattern, a taxi driver receives requests to pick up passengers from one location and drop them off at another. Implement an algorithm to help the taxi driver determine the shortest route between the pickup and drop-off points. The number of blocks (or intersections) the taxi driver must traverse can be minimized by choosing the optimal path. The grid is represented as an integer matrix `cityGrid` where `cityGrid[i][j]` describes the travel cost for the taxi to move past a certain block. The taxi can only move up, down, left or right at each step. You need to find the minimum travel cost from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) of the grid. Assume the taxi starts at the top-left corner with no initial cost and must reach the bottom-right corner of the grid. Example 1: Input: cityGrid = [[1,3,1], [1,5,1], [4,2,1]] Output: 7 Explanation: The taxi should take the path 1 → 3 → 1 → 1 → 1 → 1 which has a minimum travel cost of 7. Example 2: Input: cityGrid = [[1,2,3], [4,5,6]] Output: 12 Explanation: The taxi should take the path 1 → 2 → 3 → 6 which has a minimum travel cost of 12. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minTravelCost() which takes the integer matrix `cityGrid` as input and returns the minimum travel cost from the top-left corner to the bottom-right corner of the grid. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 ≤ n, m ≤ 100 1 ≤ cityGrid[i][j] ≤ 100","solution":"import heapq def minTravelCost(cityGrid): Returns the minimum travel cost from the top-left corner to the bottom-right corner of the grid. if not cityGrid or not cityGrid[0]: return 0 n, m = len(cityGrid), len(cityGrid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up heap = [(cityGrid[0][0], 0, 0)] # (cost, x, y) visited = set() while heap: cost, x, y = heapq.heappop(heap) if (x, y) in visited: continue visited.add((x, y)) if x == n - 1 and y == m - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: heapq.heappush(heap, (cost + cityGrid[nx][ny], nx, ny)) return -1 # If there\'s no path (though in this problem, there\'s always a valid path)"},{"question":"In an ancient kingdom, there exists a magical square grid of size NxN. The king has asked you to inspect this grid to find out whether it is a \'super symmetry\' grid or not. A \'super symmetry\' grid is defined as a grid that is symmetric both horizontally (top to bottom) and vertically (left to right). To help you write an efficient program, the kingdom’s scholars have already provided you with the necessary constraints and inputs. You must determine if the given grid fulfills the \'super symmetry\' conditions. Input: The first line of input contains an integer N (1 ≤ N ≤ 1000), which denotes the size of the grid. The following N lines contain N characters each (\'a\'-\'z\') representing the grid cells. Output: Output \\"Super Symmetry\\" if the grid is symmetric both horizontally and vertically, otherwise output \\"Not Super Symmetry\\". Examples: Input 3 aba bab aba Output Super Symmetry Input 2 aa aa Output Super Symmetry Input 4 abcd efgh hgfe dcba Output Not Super Symmetry Input 5 abcde fghij klmno jihgf edcba Output Not Super Symmetry","solution":"def is_super_symmetry(grid): Check if the grid is \'super symmetry\', both horizontally and vertically. Parameters: grid (list of str): The NxN grid to check. Returns: str: \\"Super Symmetry\\" if the grid is symmetric both horizontally and vertically, otherwise \\"Not Super Symmetry\\". N = len(grid) for i in range(N): # Check horizontal symmetry if grid[i] != grid[N-1-i]: return \\"Not Super Symmetry\\" for j in range(N): # Check vertical symmetry for i in range(N): if grid[i][j] != grid[i][N-1-j]: return \\"Not Super Symmetry\\" return \\"Super Symmetry\\""},{"question":"You are given an array of integers and you need to find the length of the largest subarray with a sum equal to zero. A subarray is a contiguous part of an array. You need to write a function that takes an array as input and returns the length of the largest subarray with a sum of zero. -----Input----- The input consists of two lines: - The first line contains an integer n denoting the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. Constraints: - 1 ≤ n ≤ 10^5 - -10^5 ≤ array elements ≤ 10^5 -----Output----- Print a single integer — the length of the largest subarray with a sum of zero. If such a subarray does not exist, print 0. -----Example----- Input 8 15 -2 2 -8 1 7 10 23 Output 5 Input 5 1 2 3 4 5 Output 0 Input 10 5 -5 5 -5 5 -5 5 -5 5 -5 Output 10 -----Note----- In the first example, the subarray with the largest sum equal to zero is [-2, 2, -8, 1, 7], which has length 5. In the second example, there is no subarray with sum 0, so the output is 0. In the third example, the entire array sums up to zero, so the length of this subarray is 10.","solution":"def max_len_subarray_zero_sum(arr): Returns the length of the largest subarray with a sum equal to zero. sum_map = {} max_len = 0 curr_sum = 0 for i, num in enumerate(arr): curr_sum += num if curr_sum == 0: max_len = i + 1 elif curr_sum in sum_map: max_len = max(max_len, i - sum_map[curr_sum]) else: sum_map[curr_sum] = i return max_len"},{"question":"You are given a string `s` containing digits only, and you need to find the smallest possible integer that can be formed by deleting exactly `k` digits from the string. Unlike some variations of this problem, the resulting number should not have any leading zeros except for the number \\"0\\" itself (meaning that if the result is just \\"0\\", it is allowed). -----Input----- The input consists of two lines. The first line contains the string `s`(1 ≤ |s| ≤ 10^5), consisting of digits only. The second line contains a single integer `k` (0 ≤ k ≤ |s|). -----Output----- Output a single string representing the smallest possible integer that can be formed after deleting exactly `k` digits from the original string. -----Examples----- Input 1432219 3 Output 1219 Input 10200 1 Output 200 Input 10 2 Output 0 -----Note----- In the first case, you can remove the three digits \'4\', \'3\', and \'2\' to get the smallest number 1219. In the second case, removing the first \'1\' results in the smallest number 200. In the third case, there are only two digits, and removing both results in \\"0\\", which is the smallest number possible.","solution":"def remove_k_digits(s, k): stack = [] for digit in s: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k is still greater than 0, remove from the end while k > 0: stack.pop() k -= 1 result = \'\'.join(stack).lstrip(\'0\') or \'0\' return result"},{"question":"You are given two positive integers, n and k. Your task is to find the sum of all positive integers up to n that are divisible by k. Input The input consists of a single line containing two integers n and k (1 ≤ n ≤ 10^6, 1 ≤ k ≤ n). Output Print a single integer which is the sum of all positive integers up to n that are divisible by k. Example Input 10 3 Output 18 Input 15 5 Output 30","solution":"def sum_divisible_by_k(n, k): Returns the sum of all positive integers up to n that are divisible by k. # Sum of all multiples of k up to n is the same as k * sum of the first m integers, # where m is the number of multiples of k up to n, which is n // k. m = n // k return k * m * (m + 1) // 2"},{"question":"You are given an array of integers where every element appears exactly twice, except for one element which appears exactly once. Find that single element that appears only once. Example: Input: nums = [4, 1, 2, 1, 2] Output: 4 Explanation: Every element except for 4 appears twice. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Constraints: - The size of the input array will be in the range [1, 10000]. - Each element in the array will be in the range [-100000, 100000].","solution":"def single_number(nums): Finds the element that appears only once in the list. Args: nums: List[int] - List of integers where every element except one appears twice. Returns: int - The single element that appears only once. result = 0 for number in nums: result ^= number return result"},{"question":"You are given a list of integers. Your task is to write a function that calculates the sum of all the even numbers in the list and then multiplies the result by the count of odd numbers in that list. The function should return a single integer value representing the final result. Example Input: [2, 3, 4, 5, 6] Example Output: 54 In this example: - The sum of even numbers: 2 + 4 + 6 = 12 - The count of odd numbers: 2 (3 and 5) - The final result: 12 * 2 = 24","solution":"def even_sum_odd_count_product(lst): even_sum = sum(x for x in lst if x % 2 == 0) odd_count = sum(1 for x in lst if x % 2 != 0) return even_sum * odd_count"},{"question":"During his spare time, Alex loves to participate in drawing competitions. One day, he entered a competition where participants are required to draw a sequence of shapes. The judges want to find out which shape was drawn the most by Alex. Alex has recorded the sequence of shapes he drew in order. Help the judges determine the shape that appeared the most number of times in Alex\'s sequence. It is guaranteed that at least one shape was drawn and that the most frequent shape appears only once with the highest count. Input The first line contains an integer m (1 ≤ m ≤ 100) — the number of shapes Alex drew. Then follow m lines — for each line, a shape name is given. The names are non-empty lines consisting of lowercase Latin letters whose lengths do not exceed 15 symbols. It is guaranteed that there will be a unique shape with the highest frequency. Output Print the name of the shape that appeared the most number of times. Examples Input 3 circle triangle circle Output circle Input 7 square circle square square triangle triangle square Output square","solution":"def most_frequent_shape(m, shapes): Returns the shape that appears the most number of times in the sequence. :param m: int, the number of shapes :param shapes: list of str, the sequence of shapes drawn :return: str, the shape that appears most frequently shape_count = {} for shape in shapes: if shape in shape_count: shape_count[shape] += 1 else: shape_count[shape] = 1 most_frequent = max(shape_count, key=shape_count.get) return most_frequent"},{"question":"You have been hired by a transportation company to develop a component of their new software system. This component will help in calculating the optimal route for the drivers to deliver goods in a city. The city is represented as a grid of cells, where each cell can either be passable (represented by a \'.\') or blocked (represented by \'#\'). The driver moves in four possible directions: up, down, left, and right. The company wants to know the minimum distance from the starting cell (top-left corner) to the destination cell (bottom-right corner). If the destination is not reachable, the function should return -1. Write a function that takes the grid as input and returns the minimum distance from the start to the destination. Function Signature: ```python def min_distance(grid: List[List[str]]) -> int: ``` # Input Format - The input consists of a list of lists, where each list represents a row of cells in the grid. - The grid contains only \'.\' and \'#\' characters. - `grid[i][j]` represents the cell at row `i` and column `j`. # Output Format - Return an integer representing the minimum distance from the start to the destination cell. - If the destination is not reachable, return -1. # Constraints - `1 <= len(grid), len(grid[0]) <= 1000` - Each cell in the grid is either passable (\'.\') or blocked (\'#\'). # Example Input ```python [ [\'.\',\'.\',\'.\',\'#\',\'.\',\'.\',\'.\'], [\'.\',\'#\',\'.\',\'.\',\'.\',\'#\',\'.\'], [\'.\',\'#\',\'.\',\'.\',\'.\',\'.\',\'.\'], [\'.\',\'.\',\'#\',\'#\',\'.\',\'.\',\'.\'], [\'#\',\'.\',\'#\',\'.\',\'#\',\'#\',\'.\'], [\'.\',\'.\',\'.\',\'.\',\'.\',\'.\',\'.\'], [\'#\',\'.\',\'#\',\'#\',\'#\',\'.\',\'.\'] ] ``` Output ``` 12 ``` In this example, the grid provided represents a city where ‘.’ is a passable cell and ‘#’ is a blocked cell. The function should analyze the grid and return the minimum distance from the top-left corner to the bottom-right corner. If there\'s no path available, it should return -1.","solution":"from typing import List from collections import deque def min_distance(grid: List[List[str]]) -> int: if not grid or grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return -1 n, m = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A car showroom offers a special discount during the festive season. The discount is based on the number of cars sold, which affects the total sale price. You need to help calculate the total amount earned by the showroom considering the discount. ----Input:---- - The first line will contain N, the number of test cases. - Each test case contains two lines: - The first line contains an integer S, the price of a single car. - The second line contains an integer C, the number of cars sold. ----Output:---- For each test case, output the total amount earned after applying the discount. The discount is determined as follows: - If 1 <= C <= 5, no discount. - If 6 <= C <= 10, 5% discount. - If 11 <= C <= 20, 10% discount. - If C > 20, 15% discount. ----Constraints:---- - 1 <= N <= 50 - 1 <= S <= 100000 - 1 <= C <= 100 ----Sample Input:---- 3 10000 5 50000 7 30000 15 ----Sample Output:---- 50000 332500 405000 ----Explanation:---- Test Case 1: 10000 * 5 = 50000, no discount Test Case 2: 50000 * 7 = 350000, 5% discount -> 350000 - (350000 * 0.05) = 332500 Test Case 3: 30000 * 15 = 450000, 10% discount -> 450000 - (450000 * 0.10) = 405000","solution":"def calculate_total_earnings(N, test_cases): earnings = [] for i in range(N): S, C = test_cases[i] total_cost = S * C if 1 <= C <= 5: discount = 0 elif 6 <= C <= 10: discount = 0.05 elif 11 <= C <= 20: discount = 0.10 elif C > 20: discount = 0.15 discounted_cost = total_cost - (total_cost * discount) earnings.append(int(discounted_cost)) return earnings"},{"question":"You are organizing a math competition where the participants will perform division operations among themselves. Each participant has a unique skill level represented by an integer. Participants are initially split into two teams based on their skill levels: Team A with participants having even skill levels and Team B with participants having odd skill levels. However, due to a recent rule change, participants need to switch teams based on a new rule. Each participant with an even skill level will switch to Team B, and each participant with an odd skill level will switch to Team A. You need to determine the final composition of the teams after applying this rule. Input The first line of the input contains an integer T (1 ≤ T ≤ 100) – the number of test cases. For each test case, the first line contains an integer N (1 ≤ N ≤ 100), the number of participants. The second line contains N space-separated integers representing the skill levels of the participants. Output For each test case, output two lines. The first line should list the skill levels of the participants in Team A, and the second line should list the skill levels of the participants in Team B. Skill levels in each team should be listed in the order they appear in the input. SAMPLE INPUT 3 5 2 3 4 5 6 4 7 8 9 10 6 1 14 15 16 17 18 SAMPLE OUTPUT 3 5 2 4 6 8 10 7 9 1 15 17 14 16 18 Explanation In the first test case with participants having skill levels 2, 3, 4, 5, 6: - Initially, Team A (even): 2, 4, 6 and Team B (odd): 3, 5. - According to the new rule, 2, 4, and 6 will move to Team B while 3 and 5 will move to Team A. - The final teams will be Team A: 3, 5 and Team B: 2, 4, 6.","solution":"def split_teams(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] skill_levels = test_cases[i][1] team_A = [skill for skill in skill_levels if skill % 2 != 0] team_B = [skill for skill in skill_levels if skill % 2 == 0] result.append((team_A, team_B)) return result"},{"question":"Write a function that simulates a basic inventory system for a small bookstore. You will be given two lists of tuples. The first list represents the initial inventory with each tuple containing a book title and the number of copies available for that book. The second list represents transactions, where each tuple contains a book title and the number of copies sold (negative number) or restocked (positive number). The function should update the inventory accordingly and return a list of tuples representing the updated inventory. If a transaction causes the number of copies for a book to drop to zero or below, it should be removed from the inventory. For example: Initial inventory: `[(\\"To Kill a Mockingbird\\", 3), (\\"1984\\", 5), (\\"The Great Gatsby\\", 2)]` Transactions: `[(\\"1984\\", -3), (\\"To Kill a Mockingbird\\", -1), (\\"Harry Potter\\", 5), (\\"The Great Gatsby\\", -2)]` The function should return: `[(\\"To Kill a Mockingbird\\", 2), (\\"1984\\", 2), (\\"Harry Potter\\", 5)]`","solution":"def update_inventory(initial_inventory, transactions): Updates the inventory based on the given transactions. Parameters: initial_inventory (list of tuples): A list of (book title, number of copies) representing initial inventory. transactions (list of tuples): A list of (book title, number of copies sold or restocked). Returns: list of tuples: Updated inventory after applying all transactions. inventory_dict = {title: count for title, count in initial_inventory} for title, change in transactions: if title in inventory_dict: inventory_dict[title] += change else: inventory_dict[title] = change if inventory_dict[title] <= 0: del inventory_dict[title] return list(inventory_dict.items())"},{"question":"A library has an automated system for categorizing books based on their genres. Each book is represented by a unique identifier, followed by a series of genre codes that it belongs to. The system needs to figure out which genres are most commonly associated with books in the library and list them in descending order of their frequency. If two genres have the same frequency, they should be listed in alphabetical order. Write a program that takes the list of books and their genres, and outputs the genres sorted by their occurrence. Each book entry is on a new line and consists of an identifier followed by one or more space-separated genre codes. The input ends with a single line containing \\"-1\\". The genre codes are alphanumeric strings without spaces. Input A sequence of multiple datasets is given as input. The end of input is indicated by a single line of -1. For each dataset, a line contains a book identifier followed by a series of genre codes. Output A single line containing the sorted list of genres in descending order of their frequency. If two genres have the same frequency, print them in alphabetical order. Example Input B1 Fiction Mystery B2 Fiction Romance B3 Nonfiction Mystery B4 Fiction Nonfiction Romance -1 Output Fiction Mystery Nonfiction Romance","solution":"def sort_genres_by_frequency(book_entries): from collections import Counter genre_counter = Counter() for entry in book_entries: if entry == \\"-1\\": break parts = entry.split() genres = parts[1:] genre_counter.update(genres) sorted_genres = sorted(genre_counter.items(), key=lambda x: (-x[1], x[0])) return \' \'.join(genre for genre, _ in sorted_genres) # Define a function to read input for testing convenience def process_input(input_list): return sort_genres_by_frequency(input_list)"},{"question":"Alice and Bob are playing a game with a sequence of n numbers. They take turns to remove a number from the sequence: Alice always removes the smallest number, and Bob always removes the largest number. The game ends when there is only one number left in the sequence, and the person to remove this last number is the winner. Alice always starts first. You are given the sequence of numbers and are required to determine who will win the game. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 100) — the sequence of numbers. -----Output----- Print \\"Alice\\" (without the quotes) if Alice will win the game, and \\"Bob\\" (without the quotes) if Bob will win the game. -----Examples----- Input 3 1 3 2 Output Alice Input 4 4 3 2 1 Output Bob Input 5 5 3 2 1 4 Output Alice","solution":"def determine_winner(n, sequence): Determines the winner of the game based on a given sequence. Parameters: n (int): The length of the sequence. sequence (list of int): The numbers in the sequence. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. # If the length of the sequence is odd, Alice will have the last turn # If the length of the sequence is even, Bob will have the last turn if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A robot is placed in a 2D grid of size `m x n`. The robot can only move either down (`D`) or right (`R`) at any point in time. The robot is trying to reach the bottom-right corner of the grid (i.e., grid[m-1][n-1]) starting from the top-left corner (i.e., grid[0][0]). Your task is to write a function that returns all unique paths the robot can take to reach the destination. Example: Input: m = 2, n = 2 Output: [\\"DR\\", \\"RD\\"] Explanation: There are two unique paths to reach the bottom-right corner: 1. \\"DR\\": Move Down (D) and then Right (R). 2. \\"RD\\": Move Right (R) and then Down (D). Your Task: You don\'t need to read or print anything. Your task is to complete the function `uniquePaths(m, n)` which takes the integers `m` and `n` as input parameters and returns a list of strings, where each string represents a unique path from top-left to bottom-right of the grid. Expected Time Complexity: O((m+n-2)! / ((m-1)! * (n-1)!)) Expected Space Complexity: O((m+n-2)! / ((m-1)! * (n-1)!)) Constraints: 1 ≤ m, n ≤ 10","solution":"def uniquePaths(m, n): def backtrack(row, col, path, paths): # If the robot reaches the bottom-right corner, add the path to the result if row == m - 1 and col == n - 1: paths.append(\\"\\".join(path)) return # Move Down if row < m - 1: path.append(\\"D\\") backtrack(row + 1, col, path, paths) path.pop() # Move Right if col < n - 1: path.append(\\"R\\") backtrack(row, col + 1, path, paths) path.pop() # List to hold all the unique paths paths = [] # Backtrack starting from the top-left corner backtrack(0, 0, [], paths) return paths"},{"question":"You are given a grid of size `m x n` consisting of \'.\' and \'#\'. The \'.\' symbol represents an empty cell, and the \'#\' symbol represents a blocked cell. The objective is to find the number of distinct paths that a robot can take to move from the top-left corner to the bottom-right corner of the grid. The robot can only move either down or right at any point in time and cannot move through the blocked cells. Write a function `count_paths(grid)` that takes a 2D list of characters representing the grid and returns the number of distinct paths from the top-left to the bottom-right corner. # Input: - A 2D list `grid` of size `m x n` representing the grid. # Output: - An integer representing the number of distinct paths from the top-left to the bottom-right corner. # Examples: Example 1: Input: ``` grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] ``` Output: ``` 2 ``` Explanation: ``` The two paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right ``` Example 2: Input: ``` grid = [ [\'.\', \'#\'], [\'#\', \'.\'] ] ``` Output: ``` 0 ``` Explanation: ``` There are no paths due to blocked cells. ``` # Notes: - The dimensions of the grid are `1 <= m, n <= 100`. - The starting cell (top-left) and the ending cell (bottom-right) will always be empty (\'.\').","solution":"def count_paths(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 # Create a 2D dp array to store the number of ways to reach each cell dp = [[0 for _ in range(n)] for _ in range(m)] # Initialize the first cell dp[0][0] = 1 # Fill dp array for i in range(m): for j in range(n): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given a list of integers, write a function that returns a new list containing only the integers that are greater than the average of the original list. Input: [1, 3, 5, 6, 8] Output: [5, 6, 8] If your language supports it, try to use list comprehensions or equivalent.","solution":"def above_average(lst): Returns a list of integers that are greater than the average of the input list. Args: lst (list of int): The input list of integers. Returns: list of int: A new list containing the integers greater than the average. if not lst: # Return empty list if input list is empty. return [] average = sum(lst) / len(lst) return [x for x in lst if x > average]"},{"question":"A financial analyst needs to analyze a series of daily transactions to determine the profitability of each day. Create a program that reads the transaction amounts for each day and outputs the day with the highest profitability. Input The input is given in the following format: Transaction amount ... ... Each transaction amount is given over multiple lines. All values entered are real numbers which can be positive (indicating income) or negative (indicating expenses). The number of transactions differs each day and each day’s transactions are separated by a newline containing only the word \\"END\\". There is a maximum of 10 days of transaction data. Output Output the 1-based day number with the highest profitability. In case of a tie, output the first of such days. Example Input 500.0 -200.0 300.0 END 100.0 -50.0 100.0 END 200.0 -100.0 -50.0 END Output 1","solution":"def find_most_profitable_day(transactions): Finds the day with the highest profitability from the given transactions. The transactions are provided as a list of strings, where each string is either a number (representing a transaction) or \'END\' (indicating the end of a day). Args: transactions (list of str): The list of transaction strings. Returns: int: The 1-based index of the day with the highest profitability. days_profit = [] current_day_profit = 0 for line in transactions: if line.strip() == \'END\': days_profit.append(current_day_profit) current_day_profit = 0 else: current_day_profit += float(line.strip()) if current_day_profit != 0 or (transactions and transactions[-1].strip() != \'END\'): days_profit.append(current_day_profit) highest_profit_day = 0 highest_profit = float(\'-inf\') for i, profit in enumerate(days_profit): if profit > highest_profit: highest_profit = profit highest_profit_day = i return highest_profit_day + 1"},{"question":"Given an array A of N integers, a \\"special subarray\\" is defined as a contiguous subarray that contains at least one element which is greater than or equal to X and the length of the subarray is at least K. Your task is to determine whether there is at least one \\"special subarray\\" of A. ------ Input Format ------ - First line contains T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains three integers N, X, and K. - The second line contains N space-separated integers representing array A. ------ Output Format ------ For each test case, output \\"YES\\" if there is at least one \\"special subarray\\" and \\"NO\\" otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ X, K ≤ 1000 1 ≤ A[i] ≤ 100000 ----- Sample Input 1 ------ 3 5 10 3 1 2 3 4 5 5 3 2 2 3 1 4 5 4 7 2 7 8 9 10 ----- Sample Output 1 ------ NO YES YES ----- Explanation 1 ------ Test Case 1: There is no contiguous subarray of length at least 3 that contains an element greater than or equal to 10. Test Case 2: The subarray [3, 1, 4] is of length 2 and contains the element 3 which is greater than or equal to 3. Test Case 3: The subarray [7, 8] is of length 2 and contains the element 7 which is greater than or equal to 7.","solution":"def has_special_subarray(N, X, K, A): # Check all subarrays of length at least K for i in range(N - K + 1): for j in range(i + K, N + 1): if any(elem >= X for elem in A[i:j]): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: N, X, K, A = case results.append(has_special_subarray(N, X, K, A)) return results"},{"question":"Sarah is designing a new algorithm for a directory management system. Her algorithm needs to organize files effectively. Each file has a name and a size in kilobytes. File names are strings consisting of lowercase letters only. The algorithm should perform the following operations: 1. SORT: Sort the files in lexicographical order of their names. 2. SHORTEST: Retrieve the name of the file with the smallest size. If there are multiple files with the same smallest size, return the one which comes first lexicographically. 3. MOVE A B: Transfer B amount of kilobytes from file named A to another file named B. If transfer results in file A having negative size, ignore that operation as it is not valid. You need to implement the algorithm supporting the three operations effectively. Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of files in the directory. The following N lines contain a string and an integer separated by space, representing the name and size of each file respectively. The next line contains an integer M, the number of operations to perform. The following M lines contain one of the three operations described above. Output For each SHORTEST operation, output the name of the file with the smallest size in a new line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 100 1 ≤ size ≤ 10^4 SAMPLE INPUT 1 3 filea 1000 fileb 2000 filec 1500 5 SORT SHORTEST MOVE filea fileb 500 SHORTEST MOVE fileb filec 2500 SAMPLE OUTPUT filea filea Explanation For the first test case: 1. After the SORT operation, the file names are already in lexicographical order. 2. The SHORTEST operation retrieves \\"filea\\" since it has the smallest size. 3. The MOVE operation moves 500KB from \\"filea\\" to \\"fileb\\": - filea: 1000 - 500 = 500KB - fileb: 2000 + 500 = 2500KB 4. The next SHORTEST operation retrieves \\"filea\\" again as it still has the smallest size. 5. The MOVE operation tries to move 2500KB from \\"fileb\\" to \\"filec\\" but is invalid as it results in \\"fileb\\" having a negative size, so it is ignored.","solution":"def directory_management(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] files = {file[\'name\']: file[\'size\'] for file in case[\'files\']} operations = case[\'operations\'] for operation in operations: if operation[0] == \\"SORT\\": files = dict(sorted(files.items())) elif operation[0] == \\"SHORTEST\\": smallest_file = min(files.items(), key=lambda x: (x[1], x[0]))[0] results.append(smallest_file) elif operation[0] == \\"MOVE\\": a, b, size = operation[1], operation[2], int(operation[3]) if files[a] >= size: files[a] -= size files[b] += size return results # Function to parse and structure the input into a list of test cases def parse_input(input_lines): index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 files = [] for _ in range(N): name, size = input_lines[index].split() files.append({\'name\': name, \'size\': int(size)}) index += 1 M = int(input_lines[index]) index += 1 operations = [] for _ in range(M): operation = input_lines[index].split() operations.append(operation) index += 1 test_cases.append({\'N\': N, \'files\': files, \'M\': M, \'operations\': operations}) return T, test_cases # Sample input example input_lines = [ \\"1\\", \\"3\\", \\"filea 1000\\", \\"fileb 2000\\", \\"filec 1500\\", \\"5\\", \\"SORT\\", \\"SHORTEST\\", \\"MOVE filea fileb 500\\", \\"SHORTEST\\", \\"MOVE fileb filec 2500\\" ] # Parsing the sample input T, test_cases = parse_input(input_lines) # Running the solution with the parsed input results = directory_management(T, test_cases) # Output the results for result in results: print(result)"},{"question":"Given an array of integers, find two distinct indices i and j that satisfy the condition nums[i] + nums[j] == target. If there are multiple valid pairs, return any one of them. Ensure that the solution has O(n) time complexity. Example: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9 Example: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6 Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 2 <= nums.length <= 10^5 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Find two distinct indices i and j in the array such that nums[i] + nums[j] == target. Args: nums: List of integers. target: An integer, the target sum. Returns: A list containing two distinct indices i and j. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You are given a list of integers and an integer target. Write a function to determine if there are two distinct indices i and j in the list such that nums[i] + nums[j] equals the target. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. Example 3: Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6, we return [0, 1]. Note: 1 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Args: nums: List of integers. target: Integer target sum. Returns: A list with two integers representing the indices of the two numbers adding up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Ingrid is organizing a basketball tournament and wants to distribute the players of differing skill levels into balanced teams. For simplicity, let\'s assume that player skills are represented by integers in a list. The goal is to divide the players into two teams such that the absolute difference between the sum of skill levels in the two teams is minimized. Write a function `minimizeSkillDifference(skills)` that accepts a list of integers representing the skill levels of the players and returns the minimum possible difference between the two teams\' total skill levels. -----Input----- - The input will be a list of integers skills, where 1 leq len(skills) leq 100 and each integer 1 leq skills[i] leq 1000. -----Output----- Return a single integer: the minimum possible difference between the sums of skill levels of the two teams. -----Examples----- Sample Input 1: ```python [4, 5, 6, 7] ``` Sample Output 1: ```python 0 ``` Explanation: One possible way to divide the players is [4, 7] and [5, 6] which both sum up to 11, so the difference is 0. Sample Input 2: ```python [1, 2, 3, 9] ``` Sample Output 2: ```python 3 ``` Explanation: One possible way to divide the players is [1, 2, 3] and [9], the two sums are 6 and 9 respectively, so the difference is 3. Sample Input 3: ```python [1, 1, 1, 1, 10] ``` Sample Output 3: ```python 6 ``` Explanation: One possible way to divide the players is [1, 1, 1, 1] and [10], the two sums are 4 and 10 respectively, so the difference is 6.","solution":"def minimizeSkillDifference(skills): total_sum = sum(skills) n = len(skills) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for skill in skills: for j in range(half_sum, skill - 1, -1): dp[j] = dp[j] or dp[j - skill] for i in range(half_sum, -1, -1): if dp[i]: team1_sum = i break team2_sum = total_sum - team1_sum return abs(team2_sum - team1_sum)"},{"question":"Given an integer array A of size N, you need to convert each element of the array into its binary representation and concatenate all binary strings into a single binary string. Your task is to determine if this resulting binary string, interpreted as a binary number, is divisible by 5. For each test case, print \\"Yes\\" if the concatenated binary string is divisible by 5, otherwise print \\"No\\". ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains two lines of input. - The first line of each test case contains an integer N. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N}. ------ Output Format ------ For each test case, print \\"Yes\\" or \\"No\\" (without quotes) on a new line. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^3 1 ≤ A_{i} ≤ 10^3 ----- Sample Input 1 ------ 2 3 2 3 4 2 5 6 ----- Sample Output 1 ------ No Yes ----- Explanation 1 ------ For the first test case: - The binary representations of [2, 3, 4] are [10, 11, 100] respectively. - Concatenating these gives the binary string \\"1011100\\". - The decimal representation of \\"1011100\\" is 92, which is not divisible by 5. So the output is \\"No\\". For the second test case: - The binary representations of [5, 6] are [101, 110] respectively. - Concatenating these gives the binary string \\"101110\\". - The decimal representation of \\"101110\\" is 46, which is not divisible by 5. So the output is \\"No\\". If the concatenated binary string was \\"11110\\" for example, its decimal representation is 30, which is divisible by 5. So the output would be \\"Yes\\".","solution":"def is_divisible_by_5(test_cases): results = [] for case in test_cases: N, arr = case binary_string = \\"\\".join(format(x, \'b\') for x in arr) decimal_value = int(binary_string, 2) if decimal_value % 5 == 0: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Reading input def read_input(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 arr = list(map(int, data[idx:idx + N])) idx += N test_cases.append((N, arr)) return test_cases if __name__ == \\"__main__\\": test_cases = read_input() results = is_divisible_by_5(test_cases) for result in results: print(result)"},{"question":"Peter has a collection of unique vinyl records, and he likes to listen to a different set of vinyl records each day. Given the total number of unique vinyl records Peter has and the size of the subset he wants to listen to each day, determine the number of unique subsets of records Peter can choose. Each subset must contain exactly k records, and the order of records in the subset does not matter. Input The first line contains two integers, n and k (1 ≤ k ≤ n ≤ 100), where n is the total number of unique vinyl records, and k is the number of vinyl records Peter wants to listen to in a day. Output Print one integer, the number of unique subsets of k records out of the total n records. Examples Input 5 3 Output 10 Input 6 1 Output 6","solution":"from math import comb def unique_subsets(n, k): Returns the number of unique subsets of k records out of n records. return comb(n, k)"},{"question":"A certain country consists of multiple cities connected by various roads. The government decides to improve the infrastructure by designating a single capital city, such that the transportation cost between any city and the capital is minimized. Transportation cost between two cities is defined by the length of the road connecting them. You are provided with the country\'s map as a graph where cities are nodes and roads are edges with weights. The goal is to find the city which, when set as the capital, minimizes the maximum transportation cost from any city to the capital. Input The first line of input contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of roads respectively. The next m lines each contain three space-separated integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) which represent a road connecting cities u and v with a length of w. Output Print the city number which should be chosen as the capital to minimize the maximum transportation cost from any city to the capital. If there are multiple cities suitable to be selected as the capital, print the smallest city number. Examples Input 1 4 4 1 2 1 2 3 1 3 4 1 4 1 1 Output 1 1 Input 2 6 7 1 2 3 1 3 2 2 3 1 2 4 5 3 5 8 4 6 2 5 6 1 Output 2 2","solution":"import heapq def find_capital(n, m, roads): def dijkstra(source, graph): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[source] = 0 pq = [(0, source)] while pq: current_distance, current_city = heapq.heappop(pq) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) min_max_distance = float(\'inf\') best_city = 1 for city in range(1, n+1): distances = dijkstra(city, graph) max_distance = max(distances.values()) if max_distance < min_max_distance or (max_distance == min_max_distance and city < best_city): min_max_distance = max_distance best_city = city return best_city"},{"question":"Problem Statement You are part of a team tasked with maintaining and optimizing the inventory of a large warehouse. This warehouse holds a variety of products, each with a unique identifier and a quantity representing how many units are currently in stock. The warehouse inventory system is about to undergo a major upgrade, and your project team is responsible for writing a program to handle a common inventory task: merging several inventory updates into the warehouse’s master inventory list. Each update adds or removes items from the inventory. Sometimes the updates can contain new items that aren’t currently in the inventory, while other times they can remove items if the quantity goes down to zero or below. Your task is to merge a list of these updates into the given master inventory list and return the final inventory after all updates have been applied. Input The input is a sequence of datasets, where each dataset represents an inventory update. It ends with a line containing \\"end\\". The format for each dataset is as follows: ``` i item_id quantity ... end ``` The first line of each dataset contains an integer `i` (1 ≤ i ≤ 1000) which represents the number of items in that update. Each of the next `i` lines contains an item identifier (an alphanumeric string) followed by an integer `quantity`. If `quantity` is positive, it means adding this quantity to the inventory. If `quantity` is negative, it means removing this quantity from the inventory. Output For each dataset, output the final inventory list. Each line of the inventory should contain an item identifier and its final quantity, sorted lexically by item identifier. The output for each dataset should also start with the number of items in the final inventory. Example # Input ```plaintext 3 apple 50 banana 30 orange -10 end 4 banana 10 kiwi 20 apple -100 grape 200 end ``` # Output ```plaintext 2 apple -50 banana 40 4 banana 40 grape 200 kiwi 20 orange -10 ``` Explanation - In the first dataset, we start with an empty inventory, then add 50 apples, 30 bananas, and remove 10 oranges. The final inventory has 2 items: `apple` with quantity `50` and `banana` with quantity `30` (oranges are not included since the removal resulted in a quantity of `-10` which is still tracked). - In the second dataset, we update the inventory from the first dataset: add 10 bananas, 20 kiwis, remove 100 apples, and add 200 grapes. The final inventory includes 4 items: `banana` with quantity `40`, `grape` with quantity `200`, `kiwi` with quantity `20`, and `orange` with quantity `-10` (since no earlier dataset removes the oranges).","solution":"def merge_inventory_updates(updates): Merges inventory updates into the master inventory list. Parameters: updates (list of str): Each string represents an inventory update. Returns: list of tuple: Final inventory list where each tuple contains item identifier and its final quantity, sorted lexically by item identifier. master_inventory = {} for update in updates: lines = update.split(\'n\') num_items = int(lines[0].strip()) for line in lines[1:num_items + 1]: if line.strip() == \'end\': break item, quantity = line.split() quantity = int(quantity) if item in master_inventory: master_inventory[item] += quantity else: master_inventory[item] = quantity final_inventory = [(item, quantity) for item, quantity in master_inventory.items()] final_inventory = sorted(final_inventory, key=lambda x: x[0]) return final_inventory"},{"question":"Given two arrays A and B of length N, find the maximum product of two elements such that one element is taken from A and the other from B. Example 1: Input: N = 3 A = [1, 4, 3] B = [2, 5, 6] Output: 24 Explanation: Maximum product is achieved by taking 4 from A and 6 from B, giving 4 * 6 = 24. Example 2: Input: N = 4 A = [1, 2, 3, 4] B = [5, 6, 7, 8] Output: 32 Explanation: Maximum product is achieved by taking 4 from A and 8 from B, giving 4 * 8 = 32. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxProduct() which takes the arrays A[], B[] and its size N as input parameters and returns the maximum product of taking one element from A and one element from B. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 1000 1 <= A[i], B[i] <= 1000","solution":"def maxProduct(N, A, B): Returns the maximum product of two elements such that one element is taken from A and the other is taken from B. Parameters: N (int): Length of the lists A and B. A (list): First list containing N integers. B (list): Second list containing N integers. Returns: int: Maximum product of one element from A and one element from B. max_A = max(A) max_B = max(B) return max_A * max_B"},{"question":"Given an integer N, check if there exists three non-negative integers a, b, and c such that: a^2 + b^2 + c^2 = N. Print 1 if it\'s possible, else print 0. Example 1: Input: N = 6 Output: 1 Explanation: 1^2 + 1^2 + 2^2 = 6. So, the Output is 1. Example 2: Input: N = 7 Output: 0 Explanation: There are no non-negative integers a, b, and c such that the sum of their squares equals 7. So, the Output is 0. Example 3: Input: N = 25 Output: 1 Explanation: 3^2 + 4^2 + 0^2 = 25. So, the Output is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkThreeSquares() which takes an Integer N as input and returns the answer. Expected Time Complexity: O(N^(1.5)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6","solution":"import math def checkThreeSquares(N): Check if there exists three non-negative integers a, b, and c such that a^2 + b^2 + c^2 = N. Returns 1 if such integers exist, otherwise returns 0. for a in range(int(math.sqrt(N)) + 1): for b in range(int(math.sqrt(N - a**2)) + 1): c_squared = N - a**2 - b**2 if c_squared >= 0: c = int(math.sqrt(c_squared)) if c**2 == c_squared: return 1 return 0"},{"question":"In a distant land, there are N castles built along a straight line, at positions given by a list of integers. Each castle contains a rare gem, and these gems have unique integers as their identifiers. The kingdom\'s archaeologist, Astara, has recently figured out that the best way to collect these rare gems is based on the sum of gems between any two given castles. However, Astara has discovered a rule: the sum of gem identifiers between any two given castles must be a prime number for the collection to be successful. Astara seeks your help in determining if it is possible to find such a pair of castles in the given list. Write a program that will take the number of castles, their positions, and their gems, and then determine if there exists a pair of castles such that the sum of the gem identifiers between these pairs is a prime number. Input: The first line contains an integer T indicating the number of test cases. For each test case: - The first line contains an integer N (number of castles). - The second line contains N integers representing the positions of the castles. - The third line contains N integers representing the gem identifiers present in those castles. Output: For each test case, output \\"YES\\" if there exists such a pair of castles, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 50 2 ≤ N ≤ 100 1 ≤ Position of castles ≤ 10^5 1 ≤ Gem identifiers ≤ 10^5 SAMPLE INPUT 2 4 1 2 3 4 2 3 5 7 3 10 20 30 11 13 17 SAMPLE OUTPUT YES NO Note: - In the first test case, the sum of gem identifiers between castles at positions [2,5] is a prime number (2 + 3 = 5). - In the second test case, no such sum results in a prime number.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def has_prime_sum_pair(gems): Check if there exists a pair of gems whose sum is prime. n = len(gems) for i in range(n): for j in range(i + 1, n): if is_prime(gems[i] + gems[j]): return True return False def can_collect_gems(t, test_cases): Check if it is possible to find such a pair of castles in the given list. results = [] for test_case in test_cases: n, positions, gems = test_case if has_prime_sum_pair(gems): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an undirected graph with N nodes and M edges, where each node is uniquely identified by an integer in the range [1, N], you are required to check if there exists a cycle in the graph and if so, print the nodes involved in the cycle in the order they are visited. If there are multiple cycles, print any one of them. A cycle in a graph is a path that starts and ends at the same node, with each edge being visited exactly once. Each node in the path (except the start/end node) is also unique. Input format The first line contains two integers N and M, the number of nodes and edges in the graph, respectively. Each of the next M lines contains two integers u and v representing an edge between node u and node v. Output format If a cycle exists, first print \\"YES\\" followed by the nodes involved in the cycle. Otherwise, print \\"NO\\". Constraints 1 ≤ N, M ≤ 10^5 1 ≤ u, v ≤ N SAMPLE INPUT 5 5 1 2 2 3 3 4 4 2 4 5 SAMPLE OUTPUT YES 2 3 4 2 Explanation The given graph is undirected, with 5 nodes and 5 edges. There is a cycle involving nodes 2, 3, and 4. The path 2 -> 3 -> 4 -> 2 forms a cycle, as it starts and ends at node 2, and visits each edge and node exactly once within the cycle. Thus, the output includes \\"YES\\" followed by the nodes in any one cycle detected in the graph.","solution":"def find_cycle(N, M, edges): from collections import defaultdict, deque def dfs(v, parent): visited[v] = True stack.append(v) for neighbor in graph[v]: if not visited[neighbor]: parent_map[neighbor] = v if dfs(neighbor, v): return True elif neighbor != parent: # Cycle found start = neighbor cycle = [] while stack and stack[-1] != start: cycle.append(stack.pop()) cycle.append(start) cycle.append(v) cycle.reverse() cycle.append(start) print(\\"YES\\") print(\\" \\".join(map(str, cycle))) return True stack.pop() return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) parent_map = [-1] * (N + 1) stack = [] for i in range(1, N + 1): if not visited[i]: if dfs(i, -1): return print(\\"NO\\") # Example usage if __name__ == \\"__main__\\": N, M = 5, 5 edges = [(1, 2), (2, 3), (3, 4), (4, 2), (4, 5)] find_cycle(N, M, edges)"},{"question":"Given an integer array of size N (1 ≤ N ≤ 1000) and an integer target value S, write a function that determines whether there exists a subset of the array such that the sum of elements in the subset is exactly S. If such a subset exists, return True, otherwise return False. ------ Input ------ The input consists of multiple test cases (at most 500). Each test case consists of: - An integer N, the size of the array. - An array of N integers, each between -10,000 and 10,000. - An integer S, the target value. The input is terminated with a single line containing N=0. ------ Output ------ For each test case, output \\"True\\" or \\"False\\" on a new line indicating whether a suitable subset exists. ----- Sample Input 1 ------ 5 2 3 7 8 10 11 4 1 -1 2 -2 0 0 ----- Sample Output 1 ------ True True ----- Explanation ------ For the first test case, the subset {3, 8} or {2, 3, 7, -1} produces the sum 11, hence the output is \\"True\\". For the second test case, subset {1, -1} produces the sum 0, thus the output is \\"True\\".","solution":"def subset_sum_exists(arr, N, S): Determines whether a subset of the array `arr` with size `N` has a sum equal to `S`. :param arr: List of integers :param N: Size of the array :param S: Target sum :return: True if such a subset exists, otherwise False dp = [[False] * (S + 1) for _ in range(N + 1)] for i in range(N + 1): dp[i][0] = True for i in range(1, N + 1): for j in range(S + 1): if arr[i-1] > j: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] return dp[N][S] def process_test_cases(test_cases): results = [] for test_case in test_cases: N = test_case[\\"N\\"] if N == 0: break arr = test_case[\\"arr\\"] S = test_case[\\"S\\"] results.append(subset_sum_exists(arr, N, S)) return results"},{"question":"Write a program to read an integer number X and determine if it\'s an even or odd number. If it\'s even, change it to the nearest prime number greater than X. If it\'s odd, change it to the nearest prime number smaller than X. -----Input:----- - First line will contain a number X. -----Output:----- Output a single line, the nearest prime number based on the condition. -----Constraints----- - 1 leq X leq 1000 -----Sample Input:----- 12 -----Sample Output:----- 13 -----EXPLANATION:----- Since 12 is an even number, the nearest prime number greater than 12 is 13.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def nearest_prime(X): if X % 2 == 0: # Find the nearest prime greater than X candidate = X + 1 while not is_prime(candidate): candidate += 1 else: # Find the nearest prime smaller than X candidate = X - 1 while candidate > 1 and not is_prime(candidate): candidate -= 1 return candidate # Example usage: # output = nearest_prime(12) # print(output) # Output should be 13"},{"question":"Problem You are given an integer array A of size N. An operation is defined as picking any two adjacent elements of the array and swapping their positions. Each element of the array needs to be in place within K operations, where K is another integer provided as input. Your task is to determine whether it is possible to sort the array in at most K operations using the defined operation. Constraints The input satisfies the following conditions: * All inputs are integers * 1 leq N leq 10^5 * 1 leq K leq 2 cdot 10^5 * 1 leq A_i leq 10^6 Input The input is given in the following format: N K A_1 A_2 A_3 ... A_N Output Output \\"YES\\" if it is possible to sort the array in at most K operations, otherwise print \\"NO\\". Examples Input 5 5 3 1 2 5 4 Output YES Input 4 3 4 3 2 1 Output NO","solution":"def can_sort_with_operations(N, K, A): Determines if the array can be sorted in at most K operations using adjacent swaps. Arguments: N -- Number of elements in the array A K -- Maximum number of allowed operations A -- The array of integers Returns: \\"YES\\" if it is possible to sort the array in at most K operations, otherwise \\"NO\\" # Calculate the number of inversions in the array inversions = 0 for i in range(N): for j in range(i + 1, N): if A[i] > A[j]: inversions += 1 # If number of inversions is less than or equal to K, it\'s possible to sort with K or fewer moves if inversions <= K: return \\"YES\\" else: return \\"NO\\""},{"question":"Linda is organizing a series of lectures for a conference. There are n lectures scheduled for the day, and the i-th lecture has an original start time at the i-th hour of the day. However, due to unexpected delays, no lectures can start during the first k hours of the day. Therefore, a new schedule needs to be created. All n scheduled lectures must be rescheduled to start at different hours between (k + 1)-th and (k + n)-th hour of the day, inclusive. The lectures need to be rescheduled such that no lecture starts earlier than it was supposed to according to the original schedule. Linda wants to minimize the maximum delay for any lecture with respect to its original start time. Help her find the order in which the lectures should be scheduled to minimize the maximum delay. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 300,000), where n is the number of lectures, and k is the number of hours during which no lectures can start. The second line contains n integers d_1, d_2, ..., d_{n} (1 ≤ d_{i} ≤ 10^7), where d_{i} is the delay cost per hour for the i-th lecture. -----Output----- The first line must contain the minimum possible maximum delay for any lecture. The second line must contain n different integers s_1, s_2, ..., s_{n} (k + 1 ≤ s_{i} ≤ k + n), where s_{i} is the hour the i-th lecture should start. If there are several optimal schedules, print any of them. -----Example----- Input 4 2 1 3 5 7 Output 2 3 4 5 6 -----Note----- In this example, the lectures can be rescheduled with the following start hours: 3, 4, 5, and 6. The maximum delay for any lecture is minimized to 2 hours.","solution":"def minimize_max_delay(n, k, delays): Function to minimize the maximum delay for any lecture. Parameters: n (int): The number of lectures. k (int): The number of hours during which no lectures can start. delays (list): List of delay costs per hour for each lecture. Returns: tuple: Minimum possible maximum delay and the starting hours for each lecture. # Pair delays with original indices indexed_delays = sorted(enumerate(delays, start=1), key=lambda x: x[1]) # Initialize the result array where s[i] will be the start hour for i-th lecture res = [0] * n # The earliest slot that can be used current_time = k + 1 # Track maximum delay max_delay = 0 # Assign each lecture to a slot for idx, (original_index, delay_cost) in enumerate(indexed_delays): res[original_index - 1] = current_time # Calculate individual delay individual_delay = current_time - (original_index) # Update maximum delay max_delay = max(max_delay, individual_delay) # Move to next available time current_time += 1 return max_delay, res"},{"question":"You are given two strings S and T of length N. You are asked to answer Q queries. Each query is of the form: Opposite_Format(i, j) You need to print Yes if the substrings S[i:j] and T[i:j] are opposites, otherwise print No. Two substrings are considered opposites if they contain the same characters, but in any order. Input Format First line of the input contains N. Next line contains the string S. Next line contains the string T. The line thereafter contains Q, the number of queries to follow. Each of the next Q lines contains two positive integers i and j. Output Format For each query display Yes or No as explained above. Constraints 1leq Nleq2times10^5 1leq Qleq3times10^5 1leq i, j leq N i leq j Sample Input 4 abcd dcba 2 1 4 1 2 Sample Output Yes No","solution":"from collections import Counter def opposite_format(n, s, t, queries): def is_opposite(a, b): return Counter(a) == Counter(b) results = [] for i, j in queries: # Convert 1-based index to 0-based for slicing substring_s = s[i-1:j] substring_t = t[i-1:j] if is_opposite(substring_s, substring_t): results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage: # n = 4 # s = \'abcd\' # t = \'dcba\' # queries = [(1, 4), (1, 2)] # print(opposite_format(n, s, t, queries)) # Output: [\'Yes\', \'No\']"},{"question":"Given an integer N, determine the number of unique ways to express N as a sum of consecutive positive integers. For example, if N = 15, the possible ways are: - 1 + 2 + 3 + 4 + 5 = 15 - 4 + 5 + 6 = 15 - 7 + 8 = 15 Thus, there are 3 ways to express 15 as a sum of consecutive positive integers. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input containing one integer, N. ------ Output Format ------ - For each test case, print a new line containing a single integer, the answer to that test case. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 ------ Sample Input 1 ------ 2 15 10 ------ Sample Output 1 ------ 3 1 ----- Explanation 1 ------ Test Case 1: N = 15 can be expressed as: - 1 + 2 + 3 + 4 + 5 = 15 - 4 + 5 + 6 = 15 - 7 + 8 = 15 Thus, there are 3 ways to express 15 as a sum of consecutive positive integers. Test Case 2: N = 10 can be expressed as: - 1 + 2 + 3 + 4 = 10 Thus, there is only 1 way to express 10 as a sum of consecutive positive integers.","solution":"def count_consecutive_sums(N): Returns the number of unique ways to express N as a sum of consecutive positive integers. count = 0 k = 1 while (k * (k + 1)) // 2 < N: if (N - (k * (k + 1)) // 2) % (k + 1) == 0: count += 1 k += 1 return count def solve(T, test_cases): results = [] for N in test_cases: results.append(count_consecutive_sums(N)) return results # Example usage: if __name__ == \\"__main__\\": T = int(input()) test_cases = [int(input()) for _ in range(T)] results = solve(T, test_cases) for res in results: print(res)"},{"question":"Sarah loves solving complex puzzles. One day she stumbled upon a unique grid-based puzzle game. The game consists of an NxM grid, and each cell in the grid may contain a rock. The player starts at the top-left corner (1, 1) and needs to move to the bottom-right corner (N, M). The player can move right (R) or down (D), but cannot move through cells that contain rocks. Sarah\'s challenge is to count the number of distinct paths from (1, 1) to (N, M) following the rules above. Rocks\' positions are represented as a list of coordinate pairs. Write a program to help Sarah determine the number of valid paths from the start to the finish without hitting any rocks. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 500), the dimensions of the grid. - The second line contains an integer K (0 ≤ K ≤ N*M), the number of rocks in the grid. - The next K lines each contain two integers x and y (1 ≤ x ≤ N, 1 ≤ y ≤ M), representing the coordinates of the cells that contain rocks. Output: - Print the number of distinct valid paths from the top-left to the bottom-right corner. If there is no valid path, return 0. Constraints: The path should not move through any cell containing a rock. SAMPLE INPUT 3 3 2 2 2 3 1 SAMPLE OUTPUT 1 Explanation In the provided grid, the rocks are placed at (2, 2) and (3, 1). The only valid path is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3)","solution":"def count_paths(N, M, K, rocks): grid = [[0] * M for _ in range(N)] for rock in rocks: x, y = rock[0] - 1, rock[1] - 1 grid[x][y] = -1 if grid[0][0] == -1 or grid[N-1][M-1] == -1: return 0 grid[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return max(grid[N-1][M-1], 0) def number_of_paths(N, M, K, rocks): return count_paths(N, M, K, rocks)"},{"question":"Farmer John has a farm with chickens and cows. Each chicken has 2 legs, and each cow has 4 legs. He needs to figure out if he can have exactly L legs on his farm. You need to determine if he can achieve this by having a certain number of chickens and cows on his farm. -----Input----- The first line contains a single integer L (1 ≤ L ≤ 1,000,000) — the total number of legs Farmer John wants. -----Output----- If it\'s not possible to have exactly L legs by having a certain number of chickens and cows, print «NO» (without quotes). Otherwise, print «YES» (without quotes) in the first line. In the second line, print two non-negative integers c and w — the number of chickens and cows Farmer John should have to achieve exactly L legs. If there are multiple answers, print any of them. Any of the numbers c and w can be equal to 0. -----Examples----- Input 10 Output YES 0 2 Input 5 Output NO Input 8 Output YES 4 0 Input 12 Output YES 6 0 -----Note----- In the first example, Farmer John can have zero chickens and two cows to achieve 10 legs on his farm (0·2 + 2·4 = 10). In the second example, it\'s impossible to have exactly 5 legs on the farm since the number of legs must be even for chickens and cows. In the third example, Farmer John can achieve 8 legs by having 4 chickens and 0 cows (4·2 + 0·4 = 8). In the fourth example, Farmer John can achieve 12 legs by having 6 chickens and 0 cows (6·2 + 0·4 = 12).","solution":"def can_have_exact_legs(L): Determines if it\'s possible to have exactly L legs on the farm with chickens and cows. Parameters: L (int): Total number of legs required Returns: str: \\"NO\\" if it\'s not possible, otherwise \\"YESnc w\\" where c is the number of chickens and w is the number of cows if L % 2 != 0: return \\"NO\\" else: # Since L is even, we can start with 0 cows and check for chickens only # If L is even, it\'s possible to have L/2 chickens with no cows chickens = L // 2 cows = 0 return f\\"YESn{chickens} {cows}\\""},{"question":"# Task Your task is to implement a function that returns the longest contiguous subsequence in an array of integers whose sum is the largest. If there are multiple subsequences with the same maximum sum, return the one that appears first. # Example For `arr = [1, -2, 3, 5, -1, 2]`: ``` The subsequence [3, 5, -1, 2] has the largest sum of 9. ``` For `arr = [1, 2, 3, -2, 5]`: ``` The subsequence [1, 2, 3, -2, 5] has the largest sum of 9. ``` For `arr = [-1, -2, -3, -4]`: ``` The subsequence [-1] has the largest sum of -1. ``` # Input/Output - `[input]` integer array `arr` An array of integers, possibly containing both positive and negative numbers. `1 ≤ arr.length ≤ 1000` - `[output]` integer array The longest contiguous subsequence with the largest sum from the array. ```Haskell In Haskell, the array is passed as a list. ```","solution":"def max_subarray_with_largest_sum(arr): This function returns the longest contiguous subsequence in an array of integers whose sum is the largest. If there are multiple subsequences with the same maximum sum, it returns the one that appears first. max_sum = float(\'-inf\') current_sum = 0 max_start = max_end = 0 current_start = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and (i - current_start) > (max_end - max_start)): max_sum = current_sum max_start = current_start max_end = i if current_sum < 0: current_sum = 0 current_start = i + 1 return arr[max_start:max_end+1]"},{"question":"Consider an array of integers where each element represents the stock price of a company on a given day. You need to write a function that determines the maximum profit that could have been made by buying on one day and selling on another later day. If no profit can be made, return 0. Function signature: ```python def max_profit(prices: List[int]) -> int: ``` Example: ```python max_profit([7, 1, 5, 3, 6, 4]) # Returns: 5 max_profit([7, 6, 4, 3, 1]) # Returns: 0 ``` Explanation: - In the first example, buying on day 2 (price = 1) and selling on day 5 (price = 6) yields a profit of 6 - 1 = 5. - In the second example, no transactions can yield a positive profit.","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"Given a string S containing only characters \'a\' and \'b\', you need to perform exactly K operations on it. In one operation, you can swap any two characters in the string. Your task is to determine the lexicographically smallest string possible after exactly K swaps. Input: The first line contains the number of test cases T. Each test case consists of a single line that contains the string S and an integer K separated by space. Output: For each test case, output the lexicographically smallest string possible after exactly K swaps. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 0 ≤ K ≤ (|S| * (|S| - 1)) / 2 SAMPLE INPUT 2 ab 1 bbba 2 SAMPLE OUTPUT ab abb Explanation For the first sample, only one possible operation can be done, which is swapping \'a\' and \'b\', resulting in the string \\"ab\\". For the second sample, we can make the following swaps: 1. Swap the first and last characters: \\"abbb\\" 2. Since no further improvement can be made with the second swap, the string remains \\"abbb\\". The lexicographically smallest string possible after exactly 2 swaps is \\"abbb\\".","solution":"def lexicographically_smallest_string(S, K): Returns the lexicographically smallest string possible after exactly K swaps # List of characters from the string S characters = list(S) length = len(characters) # To get the lexicographically smallest string, we first sort the characters characters_sorted = sorted(characters) # To keep track of number of swaps we\'ve done swaps = 0 # Iterate through each character of the original string for i in range(length): # If we already have the smallest lexicographical character at this position, no need to swap if characters[i] == characters_sorted[i]: continue # If not yet reached K swaps, swap to make lexicographical arrangement for j in range(i + 1, length): if characters[j] == characters_sorted[i]: characters[i], characters[j] = characters[j], characters[i] swaps += 1 break # If we have achieved the K swaps required, break the loop if swaps == K: break return \'\'.join(characters) def process_test_cases(test_cases): results = [] for S, K in test_cases: results.append(lexicographically_smallest_string(S, int(K))) return results"},{"question":"In a given forest, a tree with a particular height is visible if there are no trees taller than it to its left. We have an array of integers representing the heights of trees in a row. Help the ranger determine the number of visible trees in the forest. ---- Input Format ---- - The first line of input will contain an integer T — the number of test cases. - Each test case contains two lines of input. - The first line of each test case contains an integer N, the number of trees. - The second line of each test case contains N space-separated integers representing the heights of the trees. ---- Output Format ---- For each test case, output the number of visible trees. ---- Constraints ---- 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ height of each tree ≤ 100 ---- Sample Input 1 ---- 2 4 2 3 4 1 5 1 2 3 4 5 ---- Sample Output 1 ---- 3 5 ---- Explanation 1 ---- Test case 1: Trees of heights 2, 3, and 4 are visible. The tree with height 1 is not visible because tree with height 4 blocks its view. Test case 2: All trees are visible as each subsequent tree is taller than the previous one.","solution":"def count_visible_trees(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] max_height_so_far = 0 visible_count = 0 for height in heights: if height > max_height_so_far: visible_count += 1 max_height_so_far = height results.append(visible_count) return results"},{"question":"You are tasked with developing a digital lock mechanism. The lock is controlled by two possible commands: \'U\' (unlock) and \'L\' (lock). When the lock receives an \'U\' command, it unlocks. Similarly, with an \'L\' command, it locks. The mechanism starts in the locked state. One interesting feature of the lock is that if it receives three consecutive \'U\' commands followed by three consecutive \'L\' commands, it will reset. This means that it will return to its original locked state regardless of whether it was locked or unlocked previously. Given a sequence of commands, your task is to determine the final state of the lock after the entire sequence has been processed. The goal is to write a function that processes these commands and returns whether the lock is locked or unlocked. Input The input consists of a single test case in the format below. S The first line consists of a string S, which represents the sequence of commands received by the lock. S consists of \'U\' and \'L\' characters only. The length of S is between 1 and 10^3 inclusive. Output Print \\"Locked\\" if the final state of the lock is locked. Print \\"Unlocked\\" if the final state of the lock is unlocked. Examples Input UUULLLUUULLLL Output Locked Input UUUULLULLU Output Unlocked Input U Output Unlocked Input LLLLL Output Locked Input UULULLL Output Locked","solution":"def determine_lock_state(commands): Determine the final state of the lock after processing the commands. :param commands: a string consisting of \'U\' (unlock) and \'L\' (lock) commands :return: \\"Locked\\" if the final state is locked, \\"Unlocked\\" if the final state is unlocked state = \\"Locked\\" sequence = \\"\\" for command in commands: if len(sequence) == 6: sequence = sequence[1:] sequence += command # Check for reset condition if sequence == \\"UUULLL\\": state = \\"Locked\\" sequence = \\"\\" elif command == \'U\': state = \\"Unlocked\\" else: state = \\"Locked\\" return state"},{"question":"You are given a string s consisting of lowercase English letters. Define a \\"palindrome segment\\" as a contiguous substring of s that is a palindrome. Your task is to determine the minimal number of palindrome segments s can be split into. Each character in s must be included in exactly one palindrome segment. For example, the string \\"ababa\\" can be divided into [\\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\"], which has 5 segments, or [\\"aba\\", \\"b\\", \\"a\\"], which has 3 segments, or [\\"ababa\\"], which has 1 segment. Input The input consists of a single string s (1 ≤ |s| ≤ 5000), the string you should analyze. Output Output a single integer, the minimal number of palindrome segments s can be split into. Examples Input ababa Output 1 Input aab Output 2 Input abcde Output 5 Note In the first example, splitting \\"ababa\\" into [\\"ababa\\"] yields the minimal segment count of 1, since \\"ababa\\" itself is a palindrome. In the second example, alternatively, \\"aab\\" can be split into [\\"a\\", \\"a\\", \\"b\\"] or [\\"aa\\", \\"b\\"]. The latter yields the minimal segment count of 2. In the third example, each character must be its own segment, as no longer palindromic substrings exist. Thus, the output is 5.","solution":"def min_palindrome_segments(s): n = len(s) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 def is_palindrome(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True for i in range(1, n + 1): for j in range(0, i): if is_palindrome(j, i-1): dp[i] = min(dp[i], dp[j] + 1) return dp[n]"},{"question":"Write a Python function to simulate a small-scale library management system. The tasks include adding a book, borrowing a book, returning a book, and listing all available books in the library. # Task Implement the following operations for a library management system: 1. **Add a Book**: Add a book to the library\'s inventory with a unique title. 2. **Borrow a Book**: Mark a book as borrowed if it is available in the inventory. 3. **Return a Book**: Mark a book as returned and add it back to the inventory. 4. **List Available Books**: Return a list of all books currently available in the library. # Input Format Your function will receive a list of commands, where each command is represented as a list of strings. Each command can be one of the following four types: 1. `[\\"add\\", \\"<book_title>\\"]` - Add the book with `<book_title>` to the library. 2. `[\\"borrow\\", \\"<book_title>\\"]` - Borrow the book with `<book_title>` from the library. 3. `[\\"return\\", \\"<book_title>\\"]` - Return the book with `<book_title>` to the library. 4. `[\\"list\\"]` - List all currently available books in the library in lexicographical order. # Output Format For each \\"list\\" command, return a list of book titles currently available in the library sorted in lexicographical order. If no books are available, return an empty list. # Constraints - Each book title is a unique non-empty string with no leading or trailing spaces. - Commands are case-sensitive and should be handled accordingly. - The expected number of commands is no more than 10,000. # Example ```python commands = [ [\\"add\\", \\"Harry Potter\\"], [\\"add\\", \\"The Hobbit\\"], [\\"borrow\\", \\"Harry Potter\\"], [\\"list\\"], [\\"return\\", \\"Harry Potter\\"], [\\"list\\"] ] output = library_system(commands) # Expected output: # [ # [\\"The Hobbit\\"], # [\\"Harry Potter\\", \\"The Hobbit\\"] # ] ``` # Function Signature ```python def library_system(commands: list) -> list: pass ``` Implement the `library_system` function to complete the task.","solution":"def library_system(commands: list) -> list: Simulates a small-scale library management system. Parameters: commands (list): List of commands to be executed in the library system Returns: list: List of book titles in the library sorted lexicographically for each \'list\' command library_inventory = set() borrowed_books = set() results = [] for command in commands: action = command[0] if action == \'add\': book_title = command[1] if book_title not in library_inventory and book_title not in borrowed_books: library_inventory.add(book_title) elif action == \'borrow\': book_title = command[1] if book_title in library_inventory: library_inventory.remove(book_title) borrowed_books.add(book_title) elif action == \'return\': book_title = command[1] if book_title in borrowed_books: borrowed_books.remove(book_title) library_inventory.add(book_title) elif action == \'list\': results.append(sorted(library_inventory)) return results"},{"question":"You are given a grid of size n by n filled with non-negative integers. You need to perform a series of operations on this grid. The grid initially has all cells set to 0. The operations are defined as follows: 1. `Add x y v`: Add the value v to cell (x, y). 2. `Set x y v`: Set the value of cell (x, y) to v. 3. `Query x1 y1 x2 y2`: Calculate the sum of all the values in the rectangular subgrid starting from (x1, y1) to (x2, y2) inclusive. Note that both (x1, y1) and (x2, y2) are coordinates within the grid. Your task is to process these operations efficiently and report the results of each query operation. # Input The first line contains two integers, n and m (1 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^4) — the size of the grid and the number of operations, respectively. The next m lines contain the operations in one of the three valid formats: - `Add x y v` — where x and y (1 ≤ x, y ≤ n) are the coordinates of the cell and v (0 ≤ v ≤ 10^9) is the value to be added. - `Set x y v` — where x and y (1 ≤ x, y ≤ n) are the coordinates of the cell and v (0 ≤ v ≤ 10^9) is the value to be set. - `Query x1 y1 x2 y2` — where x1, y1, x2, and y2 (1 ≤ x1, y1, x2, y2 ≤ n) are the coordinates of the rectangular subgrid. # Output For each `Query` operation, output a single integer corresponding to the sum of the values in the specified subgrid. # Example Input ``` 3 6 Add 1 1 5 Add 2 2 3 Query 1 1 2 2 Set 1 1 2 Query 1 1 3 3 Query 1 2 3 3 ``` Output ``` 8 7 3 ``` # Explanation 1. Add 5 to cell (1, 1), grid becomes: ``` 5 0 0 0 0 0 0 0 0 ``` 2. Add 3 to cell (2, 2), grid becomes: ``` 5 0 0 0 3 0 0 0 0 ``` 3. Query the sum in the subgrid from (1, 1) to (2, 2), which includes cells (1, 1), (2, 2), and the sum is 8. 4. Set cell (1, 1) to 2, grid becomes: ``` 2 0 0 0 3 0 0 0 0 ``` 5. Query the sum in the subgrid from (1, 1) to (3, 3), which includes all cells, and the sum is 7. 6. Query the sum in the subgrid from (1, 2) to (3, 3), which includes cells (2, 2), and the sum is 3.","solution":"class GridOperations: def __init__(self, n): self.n = n self.grid = [[0] * n for _ in range(n)] def add(self, x, y, v): self.grid[x-1][y-1] += v def set(self, x, y, v): self.grid[x-1][y-1] = v def query(self, x1, y1, x2, y2): total = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total += self.grid[i][j] return total def process_operations(n, operations): grid_ops = GridOperations(n) results = [] for op in operations: split_op = op.split() if split_op[0] == \\"Add\\": _, x, y, v = split_op grid_ops.add(int(x), int(y), int(v)) elif split_op[0] == \\"Set\\": _, x, y, v = split_op grid_ops.set(int(x), int(y), int(v)) elif split_op[0] == \\"Query\\": _, x1, y1, x2, y2 = split_op results.append(grid_ops.query(int(x1), int(y1), int(x2), int(y2))) return results"},{"question":"You are given a tree (graph without cycles) with `N` nodes, labeled from 1 to `N`. Each edge in the tree has a specified length. Your task is to process a number of queries about the tree. Each query will ask for the distance between two specified nodes in the tree. Input The first line contains an integer `T`, the number of test cases. Each of the `T` test cases starts with an integer `N`, the number of nodes in the tree. The next `N-1` lines each contain three integers `u`, `v`, and `w`, which denote an edge between nodes `u` and `v`, with length `w`. The next line contains an integer `Q`, the number of queries for the current tree. The following `Q` lines each contain two integers `a` and `b`, asking for the distance between nodes `a` and `b`. Output For each query, print the distance between the nodes `a` and `b` in a new line. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 1 ≤ u, v, a, b ≤ N 1 ≤ w ≤ 10^6 1 ≤ Q ≤ 10^4 Note: 1) 2 testcase files are large (about 30 MB) in size. Please use fast I/O in your code. 2) Candidates need to attempt only one of the given problems. SAMPLE INPUT 1 4 1 2 3 2 3 4 2 4 2 2 1 3 4 3 SAMPLE OUTPUT 7 6 Explanation In the example: - Tree edges are: (1-2) with weight 3, (2-3) with weight 4, and (2-4) with weight 2. - Query 1: Distance between node 1 and node 3 is 3 + 4 = 7. - Query 2: Distance between node 4 and node 3 is 2 + 4 = 6.","solution":"import sys input = sys.stdin.read from collections import defaultdict, deque def calculate_distances(tree, root=1): distances = {} queue = deque([(root, 0)]) while queue: node, dist = queue.popleft() if node in distances: continue distances[node] = dist for neighbor, weight in tree[node]: if neighbor not in distances: queue.append((neighbor, dist + weight)) return distances def process_tree(N, edges, queries): tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) all_distances = {node: calculate_distances(tree, node) for node in range(1, N+1)} results = [] for a, b in queries: results.append(all_distances[a][b]) return results def main(): data = input().split() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): N = int(data[idx]) idx += 1 edges = [] for _ in range(N-1): u = int(data[idx]) v = int(data[idx+1]) w = int(data[idx+2]) edges.append((u, v, w)) idx += 3 Q = int(data[idx]) idx += 1 queries = [] for _ in range(Q): a = int(data[idx]) b = int(data[idx+1]) queries.append((a, b)) idx += 2 result = process_tree(N, edges, queries) results.extend(result) for res in results: sys.stdout.write(str(res) + \\"n\\") if __name__ == \\"__main__\\": main()"},{"question":"# The Spy Network A spy network consists of n agents, indexed by positive integers from 1 to n. Each agent knows the secret code and must share this with exactly one other agent to keep the network secure. The network operates by forming pairs of agents such that one agent forms a pair with exactly another agent. No agent can be left unpaired. We\'ll say that the network is secure if the following conditions are met: - Each agent forms exactly one pair. - Each pair of agents must be distinct. The task is to find a secure configuration of the pairs. -----Input----- The input consists of a single line which contains an integer n (1 ≤ n ≤ 10^6) — the number of agents in the spy network. -----Output----- If it is not possible to secure the network, print a single integer \\"-1\\" (without the quotes). Otherwise, print n integers, where the i-th integer represents the index of the agent who is paired with the i-th agent. If there are multiple solutions, print any of them. -----Examples----- Input 4 Output 2 1 4 3 Input 5 Output -1","solution":"def secure_network(n): Given the number of agents n, returns a secure configuration of the pairs or -1 if it is not possible to secure the network. Args: n (int): The number of agents in the spy network. Returns: list: The configuration of the pairs or [-1] if not possible. if n % 2 != 0: return [-1] pairs = [0] * n for i in range(1, n, 2): pairs[i - 1], pairs[i] = i + 1, i return pairs"},{"question":"Annie is participating in a competitive programming contest, and one of the problems she encounters involves working with an array of integers. Given an array of n integers, she needs to determine if it is possible to make all elements of the array equal by performing a specific operation any number of times on the array. The operation she can perform is: - Choose any two elements a_i and a_j from the array and increment both elements by 1 simultaneously. Annie wants to know if it is possible to make all the elements of the array equal using the given operation. Help Annie find the answer. -----Input----- Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 1000). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 100), the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^6), the elements of the array. -----Output----- For each test case, print \\"YES\\" if it is possible to make all elements of the array equal using the given operation. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). -----Example----- Input 4 3 2 4 6 2 3 3 5 1 2 3 4 5 4 0 0 0 0 Output YES YES NO YES -----Note----- In the first case, Annie can first increment the first two elements to make the array [3, 5, 6], then increment the first two again to make [4, 6, 6], and then increment the first two again to make [5, 7, 6]. Finally, increment the second and third to make [6, 7, 7], and one more increment for the first [7, 8, 8], and then increment the first and third to make [8, 9, 8], then the first and second [9, 10, 9], and increment all elements as per required till they are same. In the second case, all elements are already equal, so the answer is YES. In the third case, it is impossible to make all elements equal using the given operation. In the fourth case, all elements are already equal, so the answer is YES.","solution":"def can_make_equal(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] remainder_set = set(a % 2 for a in arr) if len(remainder_set) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"There are n elements in front of you. You need to distribute these elements into two sets A and B such that the sum of the elements in set A is as close as possible to the sum of the elements in set B. For example, if n=5 and the elements are e=[1, 2, 3, 4, 5], then one of the possible distributions into two sets is: first set: A = [1, 4, 5], second set: B = [2, 3]. In this case, the sum of set A is 1+4+5=10, the sum of set B is 2+3=5, and the absolute difference of sums is |10 - 5|=5. This example illustrates one of the ways of distributing the elements. Your task is to find the minimal possible absolute difference between the sum of elements in set A and the sum of elements in set B. -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases in the input. Then t test cases follow. Each test case consists of two lines. The first line contains a positive integer n (2 le n le 100) — the number of elements. The second line contains n positive integers e_1, e_2, ldots, e_n (1 le e_i le 1000), where e_i — is the value of the i-th element. -----Output----- For each test case print one integer — the minimal possible absolute difference between the sums of the two sets. Each of the elements must be a member of exactly one of the two sets. -----Example----- Input 3 5 1 2 3 4 5 3 8 6 4 4 1 2 3 9 Output 1 2 3 -----Note----- In the first test case, the optimal distribution is A=[1, 4, 5] and B=[2, 3], hence the minimal possible absolute difference is |10 - 5| = 5. In the second test case, the optimal distribution is A=[8, 4] and B=[6], hence the minimal possible absolute difference is |12 - 6| = 6. In the third test case, the optimal distribution is A=[1, 2, 3] and B=[9], hence the minimal possible absolute difference is |6 - 9| = 3.","solution":"from itertools import combinations def min_diff(t, test_cases): def find_min_diff(n, elements): total_sum = sum(elements) target = total_sum // 2 closest_sum = 0 for r in range(n + 1): for comb in combinations(elements, r): comb_sum = sum(comb) if comb_sum <= target and comb_sum > closest_sum: closest_sum = comb_sum set_a_sum = closest_sum set_b_sum = total_sum - closest_sum return abs(set_a_sum - set_b_sum) results = [] for i in range(t): n, elements = test_cases[i] results.append(find_min_diff(n, elements)) return results"},{"question":"A company wants to distribute bonuses to its employees based on certain performance metrics. Each employee has a rating that determines their performance. The company has a strict rule that employees with higher ratings will receive more bonuses than their neighbors. You need to calculate the minimum number of bonuses required to distribute among the employees while following this rule. Your task is to write a program to find the minimum number of bonuses needed. Input The input consists of a series of data sets. The first line of each data set contains a single positive integer N (N ≤ 1,000) that represents the number of employees. The next line contains N positive integers representing the ratings of the employees. The input is terminated by a line that contains a single zero. This is not part of data sets and should not be processed. Output For each data set, print a line that contains the minimum number of bonuses required. Example Input 3 1 2 2 4 1 2 3 4 0 Output 4 10","solution":"def min_bonuses(ratings): n = len(ratings) if n == 0: return 0 bonuses = [1] * n # Traverse left to right ensuring each employee with a higher rating than their left neighbor gets more bonuses for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Traverse right to left ensuring each employee with a higher rating than their right neighbor gets more bonuses for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) # Total bonuses required return sum(bonuses) def process_input(data_sets): results = [] for ratings in data_sets: results.append(min_bonuses(ratings)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().splitlines() i = 0 data_sets = [] while i < len(data): n = int(data[i]) if n == 0: break ratings = list(map(int, data[i + 1].split())) data_sets.append(ratings) i += 2 results = process_input(data_sets) for result in results: print(result)"},{"question":"Design a `Square Matrix` class. # Objective: Create a class that can handle square matrices. # Instructions: 1. **Initialization**: - Initialize the square matrix with a 2D list or nested lists. 2. **Methods**: - `__init__(self, matrix)`: Initializes the matrix. - `__str__(self)`: Returns a string representation of the matrix. - `transpose(self)`: Returns the transpose of the matrix. - `add(self, other)`: Returns the addition of two matrices. - `multiply(self, other)`: Returns the multiplication of two matrices. # Constraints: - Matrices will always be square and of sizes between 1x1 and 100x100. - Elements in the matrix are integers between -10^9 and 10^9. - When adding or multiplying, dimensions of the matrices must match. # Example: ```python m1 = SquareMatrix([[1, 2], [3, 4]]) m2 = SquareMatrix([[5, 6], [7, 8]]) print(m1) # Should output: # 1 2 # 3 4 print(m2) # Should output: # 5 6 # 7 8 print(m1.transpose()) # Should output: # 1 3 # 2 4 print(m1.add(m2)) # Should output: # 6 8 # 10 12 print(m1.multiply(m2)) # Should output: # 19 22 # 43 50 ``` Create the `SquareMatrix` class according to the above specifications and ensure it works for various test cases within the given constraints.","solution":"class SquareMatrix: def __init__(self, matrix): if not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"All rows in the matrix must have the same length.\\") self.matrix = matrix self.size = len(matrix) def __str__(self): return \'n\'.join(\' \'.join(map(str, row)) for row in self.matrix) def transpose(self): transposed = [[self.matrix[j][i] for j in range(self.size)] for i in range(self.size)] return SquareMatrix(transposed) def add(self, other): if self.size != other.size: raise ValueError(\\"Matrices must have the same dimensions to be added.\\") result = [[self.matrix[i][j] + other.matrix[i][j] for j in range(self.size)] for i in range(self.size)] return SquareMatrix(result) def multiply(self, other): if self.size != other.size: raise ValueError(\\"Matrices must have the same dimensions to be multiplied.\\") result = [[sum(self.matrix[i][k] * other.matrix[k][j] for k in range(self.size)) for j in range(self.size)] for i in range(self.size)] return SquareMatrix(result)"},{"question":"Given a rectangular grid of size N x M, your task is to place the maximum number of non-attacking knights on the chessboard. A knight in chess moves in an \\"L\\" shape: it moves two squares in one direction and then one square perpendicular to that direction (or vice versa), which means it has up to 8 possible moves. # Problem Write a program to determine the maximum number of knights that can be placed on an N x M grid such that no two knights can attack each other. # Input The input consists of one line with two integers N and M, the dimensions of the grid. # Output Output a single integer, the maximum number of non-attacking knights that can be placed on the grid. # Constraints - (1 leq N, M leq 1000) # Example **Input** ``` 3 3 ``` **Output** ``` 9 ``` **Input** ``` 4 4 ``` **Output** ``` 16 ``` **Explanation** For a 3 x 3 grid, we can place a knight in each cell. Since each knight would need to move at least a distance of 2 squares, none of them would be able to attack any other. For a 4 x 4 grid, similarly, we can fill every cell with a knight. Given the knight\'s movement restrictions, none of them can threaten any others. # Notes This problem tests understanding of grid manipulation, implementation of specific movement patterns, and optimization techniques based on constraints. Solving this problem requires the ability to handle larger inputs efficiently and an understanding of the unique movement rules of chess knights.","solution":"def max_non_attacking_knights(N, M): Returns the maximum number of non-attacking knights that can be placed on an N x M grid. return N * M"},{"question":"Task: Given a string containing only letters, determine whether it is a palindrome (a word that reads the same backward as forward). Ignore case sensitivity. For example, the input \\"Racecar\\" should return `true`, while \\"Hello\\" should return `false`. Input will always be a valid string with at least one character.","solution":"def is_palindrome(s): Determines if the given string is a palindrome, ignoring case sensitivity. s = s.lower() return s == s[::-1]"},{"question":"Alice has a string S consisting of lowercase English letters. In one operation, Alice can choose any two adjacent characters in the string and swap them. Alice wants to sort the string in lexicographical order using the minimum number of operations. Your task is to determine the minimum number of operations required to sort the string. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line containing the string S. ------ Output Format ------ For each test case, output an integer - the minimum number of operations required to sort the string in lexicographical order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 - The sum of the lengths of all the strings in all test cases does not exceed 10^6. ----- Sample Input 1 ------ 2 dcba abcd ----- Sample Output 1 ------ 6 0 ----- Explanation 1 ------ Test case 1: We need 6 operations to sort the string \\"dcba\\" in lexicographical order to get \\"abcd\\". - Operation 1: Swap the first two characters to get \\"cdba\\". - Operation 2: Swap the first two characters to get \\"dcba\\". - Operation 3: Swap the second two characters to get \\"dcab\\". - Operation 4: Swap the first and third characters to get \\"dabc\\". - Operation 5: Swap the first two characters to get \\"adbc\\". - Operation 6: Swap the second and third characters to get \\"abcd\\". Test case 2: The string \\"abcd\\" is already sorted in lexicographical order, so no operations are needed.","solution":"def min_operations_to_sort_string(s): Returns the minimum number of operations required to sort the string in lexicographical order. n = len(s) result = 0 # To sort the string in lexicographical order, generate the sorted version of the string sorted_s = \'\'.join(sorted(s)) # Create a list of indices according to the current positions in s pos = {} for i, char in enumerate(s): if char not in pos: pos[char] = [] pos[char].append(i) # Multi-source BFS to compute the minimum number of swaps from collections import deque queue = deque([(list(s), 0)]) visited = set() visited.add(tuple(s)) while queue: current_s, steps = queue.popleft() if \'\'.join(current_s) == sorted_s: return steps for i in range(n - 1): # Generate all possible states by swapping adjacent characters next_s = current_s[:] next_s[i], next_s[i + 1] = next_s[i + 1], next_s[i] next_s_tuple = tuple(next_s) if next_s_tuple not in visited: visited.add(next_s_tuple) queue.append((next_s, steps + 1)) def solve_min_operations_to_sort_string(T, test_cases): results = [] for s in test_cases: results.append(min_operations_to_sort_string(s)) return results"},{"question":"In a distant kingdom, there is a peculiar game played in a multi-row amphitheater. The game involves a ball that can roll left and right, and the objective is to land the ball on a specific target cell in the amphitheater. The amphitheater can be represented as a 2D grid of size r times c, where the ball can roll in four possible directions: up, down, left, and right. Movements wrap around; if the ball moves left from the first column, it wraps around to the last column of the same row, and similarly for other directions. Given the starting position of the ball, the position of the target cell, and the maximum number of moves allowed, determine if the ball can reach the target cell within the given number of moves. If it is possible, output the minimum number of moves required, otherwise output -1. -----Input----- The first line contains an integer t (1 le t le 10^3) – the number of test cases. Each test case consists of: - The first line containing integers r, c, k (2 le r, c le 1000, 0 le k le 10^6) – the number of rows, columns, and the maximum number of moves allowed respectively. - The second line containing two integers sr, sc (1 le sr le r, 1 le sc le c) – the starting row and column of the ball. - The third line containing two integers tr, tc (1 le tr le r, 1 le tc le c) – the target row and column of the ball. Note that rows and columns are 1-indexed. -----Output----- For each test case, print a single integer – the minimum number of moves required to reach the target cell if it is possible within `k` moves, otherwise print -1`. -----Examples----- Input 3 3 4 5 3 2 1 4 2 2 0 2 2 2 2 5 5 8 3 3 1 1 Output 3 0 4 -----Note----- In the first test case, one optimal set of moves might be moving up to (2,2), then right to (2,3), and finally right to (1,4). In the second test case, the starting and target positions are the same, so 0 moves are required. In the third test case, an optimal set of moves might be first moving up to (2,3), then moving up to (1,3), then moving left to (1,2), and finally moving left to (1,1).","solution":"def minimum_moves(t, test_cases): results = [] for case in test_cases: r, c, k, sr, sc, tr, tc = case sr -= 1 sc -= 1 tr -= 1 tc -= 1 vertical_moves = min(abs(tr - sr), r - abs(tr - sr)) horizontal_moves = min(abs(tc - sc), c - abs(tc - sc)) min_moves = vertical_moves + horizontal_moves if min_moves <= k: results.append(min_moves) else: results.append(-1) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(t): r, c, k = map(int, lines[index].strip().split()) sr, sc = map(int, lines[index + 1].strip().split()) tr, tc = map(int, lines[index + 2].strip().split()) test_cases.append((r, c, k, sr, sc, tr, tc)) index += 3 return t, test_cases def format_output(results): return \\"n\\".join(map(str, results)) # Example usage: input_data = 3 3 4 5 3 2 1 4 2 2 0 2 2 2 2 5 5 8 3 3 1 1 t, test_cases = parse_input(input_data) result = minimum_moves(t, test_cases) output = format_output(result) print(output)"},{"question":"Amit is a fan of the Fibonacci sequence and he is thinking of a new challenge. He wants to break a given integer N into the sum of the minimum number of Fibonacci numbers. Your task is to help Amit find the least number of Fibonacci numbers whose sum gives the integer N. Example 1: Input: N = 8 Output: 1 Explanation: 8 is already a Fibonacci number. Example 2: Input: N = 19 Output: 3 Explanation: The minimum sum of Fibonacci numbers to get 19 is 13 + 5 + 1 = 19. Your Task: You don\'t need to read or print anything. Your task is to complete the function minFibSum() which takes N as the input parameter and returns the minimum number of Fibonacci numbers that sum up to N. Expected Time Complexity: O(log(N)) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{10}","solution":"def minFibSum(N): # Generate all fibonacci numbers less than or equal to N fibs = [1, 1] while True: next_fib = fibs[-1] + fibs[-2] if next_fib > N: break fibs.append(next_fib) count = 0 idx = len(fibs) - 1 # Greedy approach: Start with the largest fibonacci number and subtract it from N while N > 0: if fibs[idx] <= N: N -= fibs[idx] count += 1 idx -= 1 return count"},{"question":"A tech company is developing a new file storage system to handle the increasing amount of data generated daily. However, they need an efficient way to predict the future storage needs of the system. To achieve this, they rely on a statistical model that doubles the amount of used storage every ‘d’ days. You need to write a program that computes the projected storage usage given the current storage size and the number of days elapsed since the initial measurement. Assume that the amount of storage used increases exactly by a factor of 2 every \'d\' days. -----Input----- The only line of the input contains three integers s (1 ≤ s ≤ 10 000), d (1 ≤ d ≤ 365), and t (0 ≤ t ≤ 10 000) — the initial storage size in terabytes, the number of days after which the storage doubles, and the number of days passed since the initial measurement. -----Output----- Output one number — the projected storage size in terabytes after t days. The relative error of your answer should not be greater than 10^{ - 6}. -----Examples----- Input 1000 30 60 Output 4000.000000000000","solution":"def projected_storage(initial_storage, days_to_double, days_elapsed): Computes the projected storage usage given the initial storage size, the number of days after which the storage doubles, and the number of days elapsed. Args: initial_storage (int): Initial storage size in terabytes. days_to_double (int): Number of days after which the storage doubles. days_elapsed (int): Number of days passed since the initial measurement. Returns: float: Projected storage size in terabytes. # Calculate the number of times the storage has doubled in the given time period doubling_periods = days_elapsed / days_to_double # Calculate the final storage final_storage = initial_storage * (2 ** doubling_periods) return final_storage"},{"question":"Given a string S of length N consisting of only lowercase English alphabets and spaces, your task is to write a function that returns the most frequently occurring word in the string. In case of a tie, return the word that appears first in the string. Example 1: Input: N = 15 S = \\"cat bat cat bat cat\\" Output: \\"cat\\" Explanation: The word \\"cat\\" appears 3 times, which is the highest frequency. Example 2: Input: N = 20 S = \\"dog cat mouse dog cat\\" Output: \\"dog\\" Explanation: Both \\"dog\\" and \\"cat\\" appear 2 times, but \\"dog\\" appears first. Your Task: You don\'t need to read input or print anything. Your task is to complete the function mostFrequentWord() which takes N and a String S as input parameters and returns the most frequently occurring word. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5","solution":"def mostFrequentWord(N, S): Returns the most frequently occurring word in the string S. In case of a tie, returns the word that appears first in the string. words = S.split() word_count = {} max_count = 0 result_word = \\"\\" for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 if word_count[word] > max_count: max_count = word_count[word] result_word = word elif word_count[word] == max_count: # if it\'s a tie, we don\'t change the result_word because # the first occurring word should be the answer pass return result_word"},{"question":"Geek is a fan of coding competitions. He is practicing by attempting to solve problems that involve finding results modulo a given number. Given two integers A and B, Geek wants to find the value of (A^B) % M where ^ denoted exponentiation. Help him write a function to achieve this. Example 1: Input: A = 2, B = 3, M = 5 Output: 3 Explanation: 2^3 = 8 and 8 % 5 = 3. Example 2: Input: A = 10, B = 5, M = 100 Output: 0 Explanation: 10^5 = 100000 and 100000 % 100 = 0. Your Task: You do not need to read input or print anything. Your task is to complete the function powerMod() which takes A, B, and M as input parameters and returns the value of (A^B) % M. Expected Time Complexity: O(log B) Expected Auxiliary Space: O(log B) Constraints: 1 ≤ A, B ≤ 10^9 1 ≤ M ≤ 10^9","solution":"def powerMod(A, B, M): Returns (A^B) % M. if M == 1: return 0 result = 1 base = A % M while B > 0: if B % 2 == 1: result = (result * base) % M B = B // 2 base = (base * base) % M return result"},{"question":"Alice and Bob are playing a number guessing game. They take turns guessing a number, starting with Alice. The rules are such that each player must guess a number greater than the previous guess. They start the game with the number 1. The game continues until a player can no longer guess a valid number in the range from 1 to N (inclusive). The player who cannot make a valid guess loses. Write the function `guessing_game(N)` that takes an integer N as input and returns the winner, `\\"Alice\\"` or `\\"Bob\\"`, accordingly. If N is less than 1, return the string `\\"Invalid number\\"`. Note: - The first guess must always be 1. - Each subsequent guess must be strictly greater than the previous guess and less than or equal to N.","solution":"def guessing_game(N): Determines the winner of the guessing game based on the input number N. Args: N (int): The upper bound of the number range. Returns: str: The winner of the game (\\"Alice\\" or \\"Bob\\") or \\"Invalid number\\" if N < 1. if N < 1: return \\"Invalid number\\" # Each valid guess alternates between Alice and Bob starting from 1 which is Alice\'s first guess. # Alice starts with guess 1, Bob guess 2, Alice guess 3, and so on. # If the final valid guess N is odd, Alice will be the last one to make a guess. # If N is even, Bob will be the last one to make a guess. if N % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Longest Path in a Directed Acyclic Graph A directed acyclic graph (DAG) is a directed graph with no directed cycles. Given a weighted DAG, your task is to find the longest path in the graph. Consider the following example graph, where each edge has a weight: *Vertice List*: 0, 1, 2, 3 *Edge List*: 0 -> 1 (weight 2) 0 -> 2 (weight 4) 1 -> 2 (weight 1) 1 -> 3 (weight 7) 2 -> 3 (weight 3) The longest path in terms of total weight from any node to any other node in this example DAG is 0 -> 1 -> 3, which has a total weight of 9. Input The input consists of: 1. The number of nodes (n) in the graph. 2. The number of edges (m) in the graph. 3. A list of m edges, each represented as three integers u, v, and w where there is a directed edge from node u to node v with weight w. Note: 1. 1 <= n <= 1000 2. 1 <= m <= 100000 3. 1 <= u, v <= n 4. 1 <= w <= 1000 Output Output a single integer, the length of the longest path in the given DAG. Sample Input 4 5 0 1 2 0 2 4 1 2 1 1 3 7 2 3 3 Sample Output 9","solution":"from collections import defaultdict, deque def find_longest_path(n, m, edges): graph = defaultdict(list) in_degree = [0] * n for u, v, w in edges: graph[u].append((v, w)) in_degree[v] += 1 # Topological Sort using Kahn\'s Algorithm topo_sort = [] q = deque() for i in range(n): if in_degree[i] == 0: q.append(i) while q: u = q.popleft() topo_sort.append(u) for v, w in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: q.append(v) # Initialize distances to all vertices as minus infinite and distance to source as 0 dist = [-float(\'inf\')] * n for u in topo_sort: if dist[u] == -float(\'inf\'): dist[u] = 0 for v, w in graph[u]: if dist[u] + w > dist[v]: dist[v] = dist[u] + w # Return maximum distance return max(dist)"},{"question":"In this challenge, the task is to implement a function that determines whether a given string is a palindrome after removing all non-alphanumeric characters and ignoring cases. A string is called a palindrome if it reads the same forwards and backwards after removing all non-alphanumeric characters and converting all letters to lowercase. You need to write a function is_palindrome that checks if a given string is a palindrome based on the above conditions. Input Format The first line of the input contains boldsymbol{boldsymbol{t}}, the number of test cases. The next boldsymbol{boldsymbol{t}} lines each contain one string to be checked. Constraints 1 leq t leq 10^3 1 leq text{length of each string} leq 10^5 The input strings can contain letters, digits, spaces, and punctuation marks. Output Format The output should consist of boldsymbol{boldsymbol{t}} lines. In the i^{mbox{th}} line print YES if the i^{mbox{th}} string is a palindrome, else print NO. Sample Input 3 A man, a plan, a canal: Panama race a car Madam In Eden, I\'m Adam Sample Output YES NO YES Explanation For the first string, after removing non-alphanumeric characters and converting to lowercase, the string becomes \\"amanaplanacanalpanama\\", which reads the same forwards and backwards. So, the output is YES. For the second string, after removing non-alphanumeric characters and converting to lowercase, the string becomes \\"raceacar\\", which does not read the same forwards and backwards. So, the output is NO. For the third string, after removing non-alphanumeric characters and converting to lowercase, the string becomes \\"madaminedenimadam\\", which reads the same forwards and backwards. So, the output is YES.","solution":"import re def is_palindrome(s): Determine if the given string s is a palindrome after removing non-alphanumeric characters and ignoring cases. Parameters: s (str): the string to be checked Returns: str: \'YES\' if the string is a palindrome, \'NO\' otherwise # Remove all non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is a palindrome return \'YES\' if cleaned == cleaned[::-1] else \'NO\' def process_test_cases(t, test_cases): results = [] for case in test_cases: results.append(is_palindrome(case)) return results"},{"question":"Nina is organizing a hiking trip with her friends and they want to bring along some snacks. She can carry a maximum weight of W kilograms in her backpack. Each snack has a certain weight and a certain value of enjoyment. Nina wants to maximize the total enjoyment value of the snacks she brings along. Each snack can either be taken or not taken (you cannot take a fraction of a snack). You are tasked with helping Nina to determine the maximum enjoyment value she can carry in her backpack. INPUT The first line contains the number of test cases T. For each test case, the first line contains an integer N, the number of different snacks, and an integer W, the maximum weight of the backpack. The next N lines each contain two integers wi and vi, the weight and enjoyment value of the i-th snack. OUTPUT For each test case, print the maximum enjoyment value Nina can carry in her backpack. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ wi ≤ 1000 1 ≤ vi ≤ 1000 SAMPLE INPUT 1 4 5 1 1 2 4 3 5 4 7 SAMPLE OUTPUT 9","solution":"def max_enjoyment(T, test_cases): def knapsack(N, W, weights, values): dp = [[0] * (W + 1) for _ in range(N + 1)] for i in range(1, N + 1): for w in range(W + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[N][W] results = [] for test in test_cases: N, W = test[0] weights = [s[0] for s in test[1]] values = [s[1] for s in test[1]] results.append(knapsack(N, W, weights, values)) return results"},{"question":"Alex is obsessed with sequences of numbers and permutations. Recently, he has been trying to find lucky permutations of arrays of length n. A permutation of integers from 1 to n (inclusive) is lucky if no element is in its original position. For example: - For n = 3, arr = [2, 3, 1] is a lucky permutation because 2 is not in position 1, 3 is not in position 2, and 1 is not in position 3. - For n = 4, arr = [2, 1, 4, 3] is a lucky permutation. Alex quickly realized that calculating the number of lucky permutations for larger arrays is challenging. He needs your help to compute this number for a given n. Write a program that calculates the number of lucky permutations for an array of size n given the constraints below. Input The single line contains an integer n which is the size of the array (1 ≤ n ≤ 105). Output Output the number of lucky permutations of an array of size n. Since the result can be very large, you should output the answer modulo 1000000007. Examples Input 2 Output 1 Input 3 Output 2","solution":"MOD = 1000000007 def lucky_permutations(n): Returns the number of lucky permutations of arrays of size n. if n == 1: return 0 if n == 2: return 1 dp = [0] * (n + 1) dp[1] = 0 dp[2] = 1 for i in range(3, n + 1): dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]) % MOD return dp[n]"},{"question":"Broken Toy Conveyor Belt A toy factory has a conveyor belt system that transports toys through various stations for quality control. Recently, the belt has been malfunctioning, and some toys are being sent to the wrong stations, causing delays. Your task is to determine how many toys reach their intended destination successfully. Each toy starts at station 1 and must pass through n stations along the conveyor belt. At station i, a toy can have a probability p_{i} of being correctly sent to the next station. You need to calculate the expected number of toys that will correctly reach the final station n. -----Input----- The first line contains one integer n (2 ≤ n ≤ 10^4) — the number of stations. The second line contains n-1 space-separated floats p_1, p_2, ..., p_{n-1} (0 ≤ p_{i} ≤ 1), where p_{i} is the probability that a toy at station i is correctly sent to station i+1. -----Output----- Print one float — the expected number of toys that will correctly reach station n, rounded to two decimal places. -----Examples----- Input 5 0.8 0.9 1.0 0.5 Output 0.36 Input 3 0.5 0.5 Output 0.25 Input 6 1.0 0.8 0.6 0.7 0.9 Output 0.3024 -----Note----- In the first sample, the expected number of toys reaching the final station is calculated as 1 * 0.8 * 0.9 * 1.0 * 0.5 = 0.36. In the second sample, the expected number of toys reaching the final station is 1 * 0.5 * 0.5 = 0.25.","solution":"def calculate_toys_reaching_end(n, probabilities): Calculate the expected number of toys that will correctly reach the final station. Parameters: n (int): Number of stations. probabilities (list of floats): Probabilities of correctly moving to the next station. Returns: float: Expected number of toys reaching the final station. expected_toys = 1.0 # All toys start at the first station for p in probabilities: expected_toys *= p return round(expected_toys, 2)"},{"question":"Peter is designing a simple communication system for his company. The company has n employees, and Peter needs to send each employee a critical message. To ensure the message reaches everyone efficiently, he has devised a method to use the existing structure of the company. Each employee can send the message to at most one other employee per communication round. Peter has gathered a list of employees who can directly communicate with each other. Your task is to determine the minimum number of communication rounds required to ensure that all employees receive the message, starting from a specific employee. Input: The first line contains two space-separated integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10^4), where n is the number of employees and m is the number of direct communication links. The second line contains one integer s (1 ≤ s ≤ n), the index of the employee who starts with the message. Each of the next m lines contains two space-separated integers ui and vi (1 ≤ ui, vi ≤ n), indicating that employee ui can directly send a message to employee vi. Output: Print a single integer representing the minimum number of communication rounds required to ensure that all employees receive the message. If it is not possible to send the message to all employees, print -1. Examples Input 4 4 1 1 2 1 3 3 4 2 4 Output 2 Input 5 3 1 1 3 3 5 2 4 Output -1","solution":"from collections import deque, defaultdict def min_communication_rounds(n, m, s, edges): # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # To keep track of visited nodes and their distances from source visited = [False] * (n + 1) distance = [-1] * (n + 1) # BFS Initialization queue = deque([s]) visited[s] = True distance[s] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[current] + 1 queue.append(neighbor) # All employees must be visited and have non-negative distance for a valid solution max_distance = max(distance[1:]) return max_distance if all(visited[1:]) else -1"},{"question":"A famous treasure hunter, Ravi, found an ancient script while exploring a forgotten cave. The script contains a long sequence of digits representing hidden clues. To uncover the treasure, Ravi needs to decode the script by rearranging the digits in such a way that the resulting number is the largest possible even number that can be formed using all the given digits. Your task is to help Ravi decode the script by writing a program that arranges the digits to form the largest possible even number. Input: You are given a string of digits (0-9). Output: Output the largest possible even number that can be formed using all the given digits. If no even number can be formed, output -1. Constraints: 1 ≤ length of the string ≤ 10^5 SAMPLE INPUT 24853 SAMPLE OUTPUT 85432 Explanation The largest possible even number that can be formed using all the digits in \\"24853\\" is \\"85432\\". SAMPLE INPUT 13579 SAMPLE OUTPUT -1 Explanation It is not possible to form an even number using the digits \\"13579\\".","solution":"def largest_even_number(digits): Returns the largest possible even number that can be formed using all the given digits. If no even number can be formed, output -1. digits_list = sorted(digits, reverse=True) # Try to find the smallest even digit for i in range(len(digits_list) - 1, -1, -1): if int(digits_list[i]) % 2 == 0: even_digit = digits_list.pop(i) return \'\'.join(digits_list) + even_digit return -1"},{"question":"You have just been hired by a robotics company to help them with their production line. The company\'s robots move on a rectangular grid, and each robot has to visit a certain number of points on the grid in a specific order. However, the robots can only move either right or up. You need to write a program to determine the number of unique paths the robot can take to go from the bottom-left point (1, 1) to the top-right point (N, M), without revisiting any point. Input: The first line of input contains an integer T, the number of test cases. T lines follow, each containing two integers N and M, the grid dimensions. Output: For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1) and y is the number of unique paths from (1, 1) to (N, M). Constraints: 1 ≤ T ≤ 100. 1 ≤ N, M ≤ 100. Example Input: 3 2 3 3 3 4 5 Example Output: Case #1: 3 Case #2: 6 Case #3: 35 Explanation: - In the first test case, the robot can move in any of 3 paths: 1. Right, Right, Up 2. Right, Up, Right 3. Up, Right, Right - In the second test case, the robot can move in any of 6 paths: 1. Right, Right, Up, Up 2. Right, Up, Right, Up 3. Right, Up, Up, Right 4. Up, Right, Right, Up 5. Up, Right, Up, Right 6. Up, Up, Right, Right","solution":"def number_of_unique_paths(N, M): Calculate the number of unique paths from (1, 1) to (N, M). from math import comb return comb(N + M - 2, N - 1) def solve_robot_paths(test_cases): results = [] for i, (N, M) in enumerate(test_cases): result = number_of_unique_paths(N, M) results.append(f\\"Case #{i+1}: {result}\\") return results # Example usage: # test_cases = [(2, 3), (3, 3), (4, 5)] # result = solve_robot_paths(test_cases) # for line in result: # print(line)"},{"question":"A city is developing a new transportation system, which includes a series of subway lines. Each subway line is a sequence of stations in a specific order, and some stations can be transferred between multiple non-overlapping subway lines. Your task is to determine the minimum number of transfers needed to travel from one station to another. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains an integer S, the number of stations. - The next line contains a single integer L, the number of subway lines. - L subsequent lines describe the subway lines. Each line starts with an integer K, the number of stations on that line, followed by K distinct integers denoting the station IDs in the order they appear on that line. - The next line contains two distinct integers, A and B, denoting the starting and the ending station. ------ Output Format ------ For each test case, output on a new line the minimum number of transfers needed to travel from station A to station B. If it is not possible to travel from station A to station B, output -1. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ S ≤ 100 1 ≤ L ≤ 20 2 ≤ K ≤ 50 1 ≤ station ID ≤ 1000 ----- Sample Input 1 ------ 2 5 2 3 1 2 3 3 3 4 5 1 5 5 3 3 1 2 3 3 3 4 5 2 6 7 1 6 ----- Sample Output 1 ------ 1 -1 ----- Explanation 1 ------ Test case 1: Starting at station 1 (on line 1), a transfer is needed at station 3 to switch to line 2, which can take you to station 5. The number of transfers needed is 1. Test case 2: There is no direct or indirect connection between stations 1 and 6; therefore, it is impossible to travel from station 1 to station 6, resulting in an output of -1.","solution":"from collections import defaultdict, deque def min_transfers(T, test_cases): def bfs(start, end, graph): if start == end: return 0 queue = deque([(start, 0)]) visited = set([start]) while queue: current, transfers = queue.popleft() for neighbor in graph[current]: if neighbor == end: return transfers + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, transfers + 1)) return -1 results = [] for case in test_cases: S, L, lines, start, end = case station_map = defaultdict(set) for idx, line in enumerate(lines): for station in line: station_map[station].add(idx) line_graph = defaultdict(set) for stations in station_map.values(): stations = list(stations) for i in range(len(stations)): for j in range(i + 1, len(stations)): line_graph[stations[i]].add(stations[j]) line_graph[stations[j]].add(stations[i]) start_lines = station_map[start] end_lines = station_map[end] min_steps = float(\'inf\') for s in start_lines: for e in end_lines: steps = bfs(s, e, line_graph) if steps != -1: min_steps = min(min_steps, steps) results.append(min_steps if min_steps != float(\'inf\') else -1) return results"},{"question":"Given a string S consisting of alphabets and digits, write a program to find the highest value of a substring which contains only digits. A substring is defined as a contiguous sequence of characters within a string. Your task is to identify the substrings containing only digits and then determine the maximum numerical value among these substrings. Example: Input: 3 abc123xyz abc100xyz200 abc987def765gh123 Output: 123 200 987 Input: The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains a string S. Output: For each test case, print the highest value numeric substring found in the given string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S contains only alphanumeric characters.","solution":"def highest_value_substring(S): Finds the highest value of a substring which contains only digits. max_value = 0 current_num = \'\' for char in S: if char.isdigit(): current_num += char else: if current_num: max_value = max(max_value, int(current_num)) current_num = \'\' if current_num: max_value = max(max_value, int(current_num)) return max_value def process_test_cases(T, test_cases): Processes T test cases and returns the highest value numeric substring for each case. results = [] for case in test_cases: results.append(highest_value_substring(case)) return results"},{"question":"The company you work for has a rather peculiar vending machine. This vending machine has N slots arranged in a row, each containing a single item with a positive integer price. You want to purchase exactly 3 items such that their total cost does not exceed a given amount C. You need to determine if there exists a combination of exactly 3 different items whose total cost is less than or equal to C. If such a combination exists, you should return \\"YES\\"; otherwise, return \\"NO\\". ------ Input ------ The first line of input contains two integers N and C, where 2 leq N leq 10^3 and 0 leq C leq 10^6. The second line contains N integers P_1, P_2, ..., P_N (1 leq P_i leq 10^4), where P_i represents the price of the item in the i-th slot. ------ Output ------ Print \\"YES\\" if there exists a combination of 3 items whose total cost does not exceed C, otherwise print \\"NO\\". ------ Sample Input 1 ------ 5 10 1 2 3 8 5 ------ Sample Output 1 ------ YES ------ Sample Input 2 ------ 4 5 2 2 2 2 ------ Sample Output 2 ------ NO ------ Explanation 1 ------ In the first example, choosing items with prices 1, 2, and 3 will give us a total cost of 6, which is less than 10. In the second example, there is no combination of exactly three items that has a total cost of 5 or less.","solution":"def can_purchase_three_items(N, C, prices): Determines if there exists a combination of exactly 3 different items whose total price is less than or equal to C. :param N: Integer, number of items :param C: Integer, maximum allowed cost :param prices: List of integers, prices of items :return: \\"YES\\" if such a combination exists, \\"NO\\" otherwise # Sort prices to make it easier to check combination sums prices.sort() # Iterate through each triplet combination for i in range(N - 2): for j in range(i + 1, N - 1): for k in range(j + 1, N): if prices[i] + prices[j] + prices[k] <= C: return \\"YES\\" return \\"NO\\""},{"question":"You are a detective trying to solve a murder mystery in a city laid out as a grid. Each intersection on the grid is labeled with an integer, representing a clue. You start at the bottom-left corner of the grid (intersection (0,0)) and need to reach the top-right corner of the grid (intersection (n-1, n-1)) while collecting as many clues as possible along a path. The only moves you can make are \\"up\\" or \\"right\\". Given the values on the grid, calculate the maximum sum of clues you can collect from the bottom-left corner to the top-right corner following the allowed moves. Input format - The first line contains an integer n, representing the size of the grid. - The next n lines each contain n integers, representing the values of the grid. Output format - Print the maximum sum of clues that can be collected from the bottom-left corner to the top-right corner. Constraints - 1 ≤ n ≤ 100 - -100 ≤ grid[i][j] ≤ 100 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 29 Explanation The path yielding the maximum sum is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2), which sums up to 1 + 4 + 7 + 8 + 9 = 29.","solution":"def max_sum_clues(grid): n = len(grid) dp = [[0]*n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1]"},{"question":"# Task You are given an array of integers where each element represents the maximum number of steps you can jump forward from that element. Your goal is to determine the minimum number of jumps required to reach the end of the array from the start. Note that you are always able to reach the end of the array. # Example For `a = [2, 3, 1, 1, 4]`, the output should be `2` since the minimum number of jumps to reach the end is 2: `2 -> 3 -> 4`. For `a = [2, 1, 1, 1, 4]`, the output should be `3` since the minimum number of jumps to reach the end is 3: `2 -> 1 -> 1 -> 4`. # Input/Output - `[input]` integer array `a` An array of integers where each element represents the maximum number of steps you can jump forward from that element. Constraints: `1 ≤ a.length ≤ 1000` `1 ≤ a[i] ≤ 100` - `[output]` an integer The minimum number of jumps required to reach the end of the array.","solution":"def min_jumps_to_end(a): Returns the minimum number of jumps required to reach the end of the array. n = len(a) if n <= 1: return 0 jumps = 0 max_reach = 0 end_reach = 0 for i in range(n - 1): max_reach = max(max_reach, i + a[i]) if i == end_reach: jumps += 1 end_reach = max_reach if end_reach >= n - 1: break return jumps"},{"question":"In the kingdom of Algotopia, the understanding of mathematics and logical reasoning is considered a noble pursuit. The king has recently announced a competition that challenges contestants to solve a series of arithmetic and logic puzzles to determine the wisest sage. The final puzzle involves the use and manipulation of a sequence of numbers using logical operators, and only those who solve it correctly will be granted the title of \\"Sage of Algotopia.\\" The puzzle is as follows: given a sequence of n integers and a target integer T, determine if it is possible to insert \'+\' or \'-\' operators between some or all of the elements in the sequence to create an expression that evaluates to T. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains a single integer n (1 ≤ n ≤ 20) — the number of integers in the sequence. The second line contains n space-separated integers a1, a2, …, an (0 ≤ ai ≤ 10^3) — the numbers in the sequence. The third line contains a single integer T (−10^6 ≤ T ≤ 10^6) — the target value. Output Print \\"YES\\" if it is possible to create an expression that evaluates to T using the given sequence and the operators \'+\', \'-\', otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 3 Output YES Input 3 1 1 1 5 Output NO Note In the first example, possible sequences include \\"1 + 2 - 3 + 4 - 1 = 3\\". In the second example, it is not possible to create any sequence of the values with \'+\' or \'-\' operators that evaluate to 5.","solution":"def is_target_achievable(n, sequence, T): Determines if it is possible to insert \'+\' or \'-\' operators between some or all of the elements in the sequence to create an expression that evaluates to T. def dfs(index, current_sum): if index == n: return current_sum == T # Try adding the current number if dfs(index + 1, current_sum + sequence[index]): return True # Try subtracting the current number if dfs(index + 1, current_sum - sequence[index]): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a tree with n vertices. Your task is to determine whether the tree can be colored using exactly two colors such that no two adjacent vertices have the same color. -----Input----- The first line contains a single integer T ge 1 — the number of trees you need to process. The description of T trees follows. The first line of the description of a tree contains a single integer n (1 leq n leq 10^{5}) — the number of vertices in the tree. Each of the next n-1 lines contains two integers u_i and v_i (1 leq u_i, v_i leq n) representing an edge between vertex u_i and vertex v_i. It is guaranteed that there are no self-loops and no multiple edges in the tree. It is guaranteed that the sum of all n over all trees in a single test does not exceed 10^{5}. -----Output----- For each tree, print \\"YES\\" (without quotes) if the tree can be colored using exactly two colors such that no two adjacent vertices have the same color. Otherwise, print \\"NO\\" (without quotes). -----Example----- Input 2 5 1 2 2 3 3 4 4 5 3 1 2 2 3 Output YES YES -----Note----- In the first tree, you can color the vertices as follows to satisfy the condition: - Color vertex 1 with color 1 - Color vertex 2 with color 2 - Color vertex 3 with color 1 - Color vertex 4 with color 2 - Color vertex 5 with color 1 In the second tree, you can color the vertices as follows to satisfy the condition: - Color vertex 1 with color 1 - Color vertex 2 with color 2 - Color vertex 3 with color 1","solution":"def is_bipartite(n, edges): from collections import deque, defaultdict # Initialize adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Initialize color array, 0 means uncolored, 1 and -1 are the two colors color = [0] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 1 # Start coloring with 1 while queue: node = queue.popleft() for neighbor in adj[node]: if color[neighbor] == 0: # If the neighbor hasn\'t been colored color[neighbor] = -color[node] # Color with opposite color queue.append(neighbor) elif color[neighbor] == color[node]: # If the neighbor has the same color return False return True # Check all components of the graph for i in range(1, n + 1): if color[i] == 0: # If the node hasn\'t been colored if not bfs(i): return \\"NO\\" return \\"YES\\" def process_input(T, trees): results = [] for i in range(T): n, edges = trees[i] results.append(is_bipartite(n, edges)) return results"},{"question":"You are given an array of `n` integers, where `n` is guaranteed to be an even number. Your task is to partition the array into two parts such that the difference in their sums is minimized. Write a function that returns the minimum difference possible between the sums of the two parts. **Function Signature:** ```python def partition_min_diff(nums: List[int]) -> int: pass ``` **Input:** - A list `nums` of `n` integers where `1 <= len(nums) <= 20` and `-10^6 <= nums[i] <= 10^6`. **Output:** - An integer representing the minimum difference possible between the sums of the two parts. **Examples:** 1. `partition_min_diff([1, 6, 11, 5])` should return `1`. Explanation: The array can be partitioned into two parts `{1, 6, 5}` and `{11}`, where the sums are `12` and `11`, respectively. The difference is `|12 - 11| = 1`. 2. `partition_min_diff([3, 1, 4, 2, 2, 1])` should return `1`. Explanation: The array can be partitioned into two parts `{3, 1, 2}` and `{4, 2, 1}`, where the sums are `6` and `7`, respectively. The difference is `|6 - 7| = 1`.","solution":"from itertools import combinations from typing import List def partition_min_diff(nums: List[int]) -> int: Returns the minimum difference possible between the sums of the two parts of the list. total_sum = sum(nums) half_size = len(nums) // 2 min_diff = float(\'inf\') # Generate all possible combinations of selecting half of the elements for comb in combinations(nums, half_size): set1_sum = sum(comb) set2_sum = total_sum - set1_sum min_diff = min(min_diff, abs(set1_sum - set2_sum)) return min_diff"},{"question":"Given an input array of integers representing the heights of buildings, compute the amount of water that could be trapped between the buildings after a rain. Input: - The first line of input contains T, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the number of buildings. - The second line contains N space-separated integers representing the heights of the buildings. Output: - For each test case, print the amount of trapped water. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 0 ≤ height of each building ≤ 1000 Example Input: 2 6 0 1 0 2 1 0 1 3 2 1 2 1 4 3 0 2 0 4 Example Output: 6 7 Explanation: In the first test case, buildings with heights [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] can trap 6 units of water. In the second test case, buildings with heights [3, 0, 2, 0, 4] can trap 7 units of water. The amount of trapped water can be determined by considering the lower of the two maximum heights from either side of each building and subtracting the height of the current building.","solution":"def calculate_trapped_water(heights): Calculate the amount of water that can be trapped between buildings after a rain. :param heights: List of integers representing the heights of buildings. :return: Integer representing the amount of trapped water. n = len(heights) if n == 0: return 0 left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped def process_test_cases(input_data): results = [] T = input_data[0] index = 1 for _ in range(T): N = input_data[index] heights = input_data[index + 1] index += 2 results.append(calculate_trapped_water(heights)) return results"},{"question":"You are hired by a company that dispatches multiple delivery trucks across different routes within a city. Each truck has a certain capacity (in terms of the number of packages it can carry), and each package has a specific weight. The company operates by loading trucks with packages such that no truck is overloaded, and the total number of packages that can be delivered is maximized. You are given an array of integers where each integer represents the weight of a package. You are also given an array that represents the maximum capacity of each truck. Write a function to determine the maximum number of packages that can be loaded onto the trucks without exceeding the capacity of any truck. **Input Format** The first line contains two integers - P (the number of packages) and T (the number of trucks). The second line contains P space-separated integers representing the weights[] array, where weights[i] is the weight of the ith package. The third line contains T space-separated integers representing the capacities[] array, where capacities[j] is the maximum capacity of the jth truck. **Output Format** Output a single integer representing the maximum number of packages that can be loaded onto the trucks without violating any truck\'s capacity constraint. **Constraints** - 1 ≤ P ≤ 100000 - 1 ≤ T ≤ 1000 - 1 ≤ weights[i] ≤ 1000 - 1 ≤ capacities[j] ≤ 50000 **SAMPLE INPUT** ```plaintext 5 3 10 20 30 40 50 60 70 80 ``` **SAMPLE OUTPUT** ```plaintext 3 ``` **Explanation** Below is a possible way to distribute the packages without any truck exceeding its capacity: - First truck with capacity 60 can carry packages with weights 10, 20, and 30 (total weight 60) or packages with weights 10 and 40 (total weight 50). - Second truck with capacity 70 can carry packages with weights 10, 20, and 30 (total weight 60) or 50 and 20 or 50 and 10 and 10. - Third truck with capacity 80 can carry packages with weights 40 and 20 or packages with weights 50 and 30 or 50 and two of (10). In the above example, a maximum number of 3 packages can be loaded onto the trucks respecting their respective capacities.","solution":"def max_packages(P, T, weights, capacities): Returns the maximum number of packages that can be loaded onto the trucks without exceeding the capacity. Parameters: - P (int): Number of packages - T (int): Number of trucks - weights (list of int): Weights of the packages - capacities (list of int): Capacities of the trucks Returns: - int: Maximum number of packages that can be loaded # Sort weights of packages and capacities of trucks weights.sort() capacities.sort() packages_loaded = 0 package_index = 0 truck_index = 0 while package_index < P and truck_index < T: if weights[package_index] <= capacities[truck_index]: # Load the package onto the truck packages_loaded += 1 truck_index += 1 package_index += 1 return packages_loaded"},{"question":"Alice is fond of unique characters in strings. She defines a string as \\"special\\" if the number of unique characters in the string is exactly equal to a given number X. Your task is to write a function that accepts a list of strings and an integer X, and returns the longest \\"special\\" string from the list. If there are multiple strings of the same longest length, return the string which comes first lexicographically. If no such string exists, return an empty string. Input: - A list of strings (1 <= number of strings <= 100, 1 <= length of each string <= 100) - An integer X (1 <= X <= 26) Output: - The longest \\"special\\" string from the list, or an empty string if no such string exists Example: Input: [\\"hello\\", \\"abc\\", \\"defg\\", \\"abcdefgh\\", \\"xyz\\"], 3 Output: \\"abc\\" Explanation: Among the input strings, \\"abc\\", \\"defg\\", \\"xyz\\" each have exactly 3 unique characters. The longest of these is \\"defg\\" and \\"xyz\\" with length 4. Lexicographically, \\"abc\\" comes first among them. Thus, the output is \\"abc\\".","solution":"def longest_special_string(strings, X): Returns the longest special string from the list with exactly X unique characters. If there are multiple longest strings, return the one which comes first lexicographically. If no such string exists, return an empty string. Args: strings (list): List of strings. X (int): Number of unique characters required. Returns: str: Longest special string or empty string if no such string exists. special_strings = [s for s in strings if len(set(s)) == X] if not special_strings: return \\"\\" # Sort by length (descending) first, then lexicographically (ascending) special_strings.sort(key=lambda x: (-len(x), x)) return special_strings[0]"},{"question":"Design a class `MovingAverage` that supports the following methods: 1. `next(int val)`: Appends the integer `val` to the stream of numbers and returns the moving average of the last `k` numbers. 2. `getAverage()`: Returns the current moving average of the last `k` numbers. The moving average is calculated by the sum of the last `k` numbers divided by `k`. If there are fewer than `k` elements in the stream, the average will be calculated based on the elements available. Example: Input [\\"MovingAverage\\",\\"next\\",\\"next\\",\\"next\\",\\"next\\",\\"getAverage\\"] [[3],[1],[10],[3],[5],[]] Output [null,1.0,5.5,4.666666666666667,6.0,6.0] Explanation MovingAverage movingAverage = new MovingAverage(3); movingAverage.next(1); // returns 1.0, as the moving average of [1] is 1 / 1 = 1.0 movingAverage.next(10); // returns 5.5, as the moving average of [1, 10] is (1 + 10) / 2 = 5.5 movingAverage.next(3); // returns 4.666666666666667, as the moving average of [1, 10, 3] is (1 + 10 + 3) / 3 = 4.666666666666667 movingAverage.next(5); // returns 6.0, as the moving average of [10, 3, 5] is (10 + 3 + 5) / 3 = 6.0 movingAverage.getAverage(); // returns 6.0, as the moving average of [10, 3, 5] is (10 + 3 + 5) / 3 = 6.0 Constraints: - There will be at most 10,000 operations. - Each value is in the range [-10^4, 10^4]. - 1 <= k <= 100","solution":"from collections import deque class MovingAverage: def __init__(self, k: int): Initialize the MovingAverage with size k. self.k = k self.queue = deque() self.sum = 0 def next(self, val: int) -> float: Append the integer `val` to the stream and return the moving average of the last `k` numbers. self.queue.append(val) self.sum += val if len(self.queue) > self.k: self.sum -= self.queue.popleft() return self.sum / min(len(self.queue), self.k) def getAverage(self) -> float: Return the current moving average of the last `k` numbers. return self.sum / min(len(self.queue), self.k)"},{"question":"Given a tree (a connected acyclic graph) with N nodes labeled from 1 to N, each node having a distinct positive integer value, determine the maximum sum you can obtain by choosing a subset of nodes such that no two nodes in the subset are directly connected. Input First line: A single integer N (1 ≤ N ≤ 10000) representing the number of nodes in the tree. Second line: N space-separated integers denoting the node values. Next N-1 lines: Each line contains two integers u and v (1 ≤ u, v ≤ N) representing an edge between node u and node v. Output A single integer representing the maximum sum of the values of a subset of nodes such that no two nodes in the subset are directly connected. Example Input 4 3 2 1 10 1 2 1 3 1 4 Output 13 Explanation In this example, the tree has 4 nodes with values 3, 2, 1, and 10. The optimal subset of nodes to choose is {3, 10}, since they are not directly connected and the sum of their values is 13.","solution":"def max_subset_sum(N, values, edges): from collections import defaultdict import sys sys.setrecursionlimit(10000) tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) dp = [[0, values[node - 1]] for node in range(N + 1)] visited = [False] * (N + 1) def dfs(node): visited[node] = True for child in tree[node]: if not visited[child]: dfs(child) dp[node][0] += max(dp[child][0], dp[child][1]) dp[node][1] += dp[child][0] dfs(1) return max(dp[1][0], dp[1][1]) # Example usage: N = 4 values = [3, 2, 1, 10] edges = [(1, 2), (1, 3), (1, 4)] print(max_subset_sum(N, values, edges)) # Output: 13"},{"question":"Yuki is organizing the cards he has collected over the years. Each card has a specific value assigned to it, and he wants to arrange them in such a way that the sum of the values of the selected cards is exactly equal to a given integer M . Determine if it is possible to select a subset of the cards such that the sum of their values is exactly M . input N and M are given on the first line, where N is the number of cards and M is the target sum. On the second line, N integers V_1, V_2, V_3, dots, V_N are given, separated by blanks, where V_i is the value of the i -th card. output Output \\"Possible\\" if there is a subset of cards whose sum equals M ; otherwise, output \\"Impossible\\". Insert a line break at the end. Constraints: * N is an integer greater than or equal to 1 and less than or equal to 100 * M is an integer between 0 and 10000 * V_1, V_2, V_3, dots, V_N are integers between 1 and 100 Input example 1: 5 9 1 2 3 4 5 Output example 1: Possible Input example 2: 3 10 3 4 5 Output example 2: Impossible","solution":"def is_subset_sum_possible(N, M, values): Determine if there\'s a subset of the given values that sums up to M. Args: N : int : Number of cards. M : int : Target sum. values : List[int] : List of card values. Returns: str : \\"Possible\\" if a subset exists with sum equal to M, otherwise \\"Impossible\\" dp = [False] * (M + 1) dp[0] = True # Sum of 0 is always possible # Iterate over every card value for value in values: for j in range(M, value - 1, -1): # Iterate backwards if dp[j - value]: dp[j] = True return \\"Possible\\" if dp[M] else \\"Impossible\\""},{"question":"John and Jane are playing a game with a string S consisting of lowercase alphabets. John goes first. In one move, a player can: - Choose any non-empty substring of S and reverse it. The goal of the game is to make the string a palindrome. The player who cannot make a move that increases the length of the longest palindromic subsequence loses. Determine the winner of the game if both players play optimally. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. The description of the test cases follows. - Each test case consists of a single line containing a non-empty string S. ------ Output Format ------ For each test case, output \\"John\\" if John will win, otherwise output \\"Jane\\". You may print each character in Uppercase or Lowercase. For example: JOHN, john, JoHn, and john are all identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ lvert S rvert ≤ 10^5 - The sum of the lengths of S over all test cases won\'t exceed 10^6. ------ Sample Input 1 ------ 2 abcba abac ------ Sample Output 1 ------ Jane John ------ Explanation 1 ------ Test case 1: The string is already a palindrome, so John has no valid move, thus Jane wins. Test case 2: John can reverse the second and third characters to make the string \\"baac\\", which increases the longest palindromic subsequence to \\"aacaa\\". Since this move is valid, Jane has no move left to make the palindrome. Thus, John wins.","solution":"def determine_winner(S): def is_palindrome(s): return s == s[::-1] if is_palindrome(S): return \\"Jane\\" else: return \\"John\\" def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(determine_winner(S)) return results"},{"question":"You are required to design a system for scheduling lectures in a university. The university has multiple classrooms, each of which can be used to hold one lecture at a time. Each lecture has a start time and an end time. Your task is to determine the maximum number of non-overlapping lectures that can be held in the same classroom. You are given a list of lectures, where each lecture is represented as a tuple (s, e), with s being the start time and e being the end time. All start and end times are distinct. Write a function `maximumNonOverlappingLectures` that takes in a list of tuples representing the lectures and returns the maximum number of non-overlapping lectures that can be scheduled in a single classroom. # Example ```python lectures = [(1, 3), (2, 5), (4, 6), (6, 8), (5, 7)] max_lectures = maximumNonOverlappingLectures(lectures) print(max_lectures) # Output: 3 ``` In the example above, the maximum number of non-overlapping lectures that can be held in one classroom is 3, which could be represented by selecting the lectures (1, 3), (4, 6), and (6, 8). # Function Description Complete the `maximumNonOverlappingLectures` function in the editor below. `maximumNonOverlappingLectures` has the following parameter: - `lectures` (List[Tuple[int, int]]): A list of tuples representing the lectures with their start and end times. # Returns - `int`: The maximum number of non-overlapping lectures that can be held in one classroom. # Constraints - 1 leq text{number of lectures} leq 100 - 0 leq s < e leq 1000 # Sample Input 1 ```python lectures = [(1, 2), (3, 4), (0, 6), (5, 7), (8, 9), (5, 9)] ``` # Sample Output 1 ```python 4 ``` # Explanation 1 The maximum number of non-overlapping lectures in a single classroom is 4. The optimal selection could be (1, 2), (3, 4), (5, 7), and (8, 9). # Sample Input 2 ```python lectures = [(7, 8), (5, 6), (3, 4), (1, 2)] ``` # Sample Output 2 ```python 4 ``` # Explanation 2 All lectures are non-overlapping, so they can all be held in a single classroom, resulting in a maximum of 4 lectures.","solution":"def maximumNonOverlappingLectures(lectures): Returns the maximum number of non-overlapping lectures that can be held in one classroom. Parameters: lectures (List[Tuple[int, int]]): A list of tuples representing the lectures with their start and end times. Returns: int: The maximum number of non-overlapping lectures that can be held in one classroom. # Sort lectures by their end time lectures.sort(key=lambda x: x[1]) max_lectures = 0 last_end_time = None for lecture in lectures: start, end = lecture if last_end_time is None or start >= last_end_time: max_lectures += 1 last_end_time = end return max_lectures"},{"question":"Write a function that takes in a string consisting of lowercase alphabet characters and returns the number of substrings that start and end with the same character. A substring is defined as a contiguous sequence of characters within a string. Input: A single string of length ( N ) (1 ≤ ( N ) ≤ 1000), consisting only of lowercase English letters. Output: A single integer representing the count of substrings that start and end with the same character. Example Input: `abca` Example Output: 5 Explanation: The substrings of \\"abca\\" that start and end with the same character are: \'a\', \'b\', \'c\', \'a\', \'aca\'. Hence, the answer is 5. Example Input: `aaaa` Example Output: 10 Explanation: The substrings of \\"aaaa\\" that start and end with the same character are: \'a\' (appearing 4 times), \'aa\' (appearing 3 times), \'aaa\' (appearing 2 times), \'aaaa\' (appearing 1 time). Hence, the answer is 10.","solution":"def count_substrings(s): Returns the number of substrings that start and end with the same character. n = len(s) count = 0 for i in range(n): for j in range(i, n): if s[i] == s[j]: count += 1 return count"},{"question":"You have been tasked to write a function to intelligently merge two sorted lists of integers into one sorted list, without using any built-in sorting function. Your function should take two sorted lists as inputs and return a single sorted list as the output. Here are some sample cases: ```python merge_sorted_lists([1, 3, 5], [2, 4, 6]); # returns [1, 2, 3, 4, 5, 6] merge_sorted_lists([1, 2, 3], [2, 5, 6]); # returns [1, 2, 2, 3, 5, 6] merge_sorted_lists([], [1, 2, 3]); # returns [1, 2, 3] merge_sorted_lists([1, 2, 3], []); # returns [1, 2, 3] merge_sorted_lists([1, 1, 2], [2, 2, 3]); # returns [1, 1, 2, 2, 2, 3] ``` In Haskell, the type signature for the function could look like this: ```haskell mergeSortedLists :: [Int] -> [Int] -> [Int] ``` Implement this function ensuring that it works efficiently even for large input lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (List[int]): First sorted list. list2 (List[int]): Second sorted list. Returns: List[int]: A single sorted list merged from the two input lists. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements of list1 or list2 merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"question":"Alice has recently started working as a software engineer at a tech company, and her first task is to analyze a log file from a server. The log file contains a list of time-stamped events that signify user actions on the website. Alice\'s boss wants her to identify the number of unique users who performed actions on the website within a specific time interval. Each user has a unique identifier, and the log file lists these identifiers along with the timestamp of the action in seconds since the start of the day. Alice believes she can do this by writing a Python script to help her analyze the log file. -----Input----- The first line of the input contains integer n (1 ≤ n ≤ 1000), where n is the number of events recorded in the log file. The next n lines each contain a string representing a user identifier and an integer representing the time of the event in seconds since the start of the day. The last line contains two integers S and E (0 ≤ S < E ≤ 86400), which represent the start and end times of the interval, respectively, in seconds since the start of the day. -----Output----- Print a single integer, the number of unique users who performed actions on the website within the specified time interval [S, E). -----Examples----- Input 5 user1 60 user2 120 user3 180 user1 240 user4 150 100 200 Output 3 In this example, the users who performed actions within the interval [100, 200) are user2, user3, and user4, hence the output is 3. The event of user1 at 60 seconds and 240 seconds do not fall within the interval [100, 200). [Note] - User actions with timestamps exactly at S are included in the interval, but actions with timestamps exactly at E are not included.","solution":"def unique_users_in_interval(n, events, S, E): Returns the number of unique users who performed actions within the interval [S, E) n: int, number of events events: List[Tuple[str, int]], list of events with user identifier and timestamp S: int, start time of the interval (inclusive) E: int, end time of the interval (exclusive) return: int, number of unique users in the interval unique_users = set() for user, time in events: if S <= time < E: unique_users.add(user) return len(unique_users)"},{"question":"Monica wants to organize a Christmas event where she will distribute gifts to all the children in her neighborhood. To make it more interesting, she decides to based it on a particular pattern. Each gift will have a unique code and the pattern of the code depends on the child’s position in her distribution list. A gift code is formed by following these rules: 1. The code consists only of uppercase English letters. 2. The length of the code is dependent on the child\'s position, P, in the list. 3. The code for the child at position P is \'A\' for P=1, \'AB\' for P=2, \'ABC\' for P=3, and so on, essentially forming a sequence like the cumulative sum of the first P letters of the alphabet. Given the number of children N, your task is to help Monica generate the gift codes for all children from position 1 to N. Constraints: 1 ≤ N ≤ 26 Input: A single integer N, representing the number of children. Output: Print N lines, where each line contains the gift code of the child at the respective position. SAMPLE INPUT 3 SAMPLE OUTPUT A AB ABC Note: Please remember that the consecutive gift patterns are cumulative. For position P, the sequence should contain the first P letters of the English alphabet.","solution":"def generate_gift_codes(N): Generates gift codes for each child based on their position. Parameters: N (int): Number of children (1 ≤ N ≤ 26) Returns: list: List of strings where each string is the gift code for the respective position. gift_codes = [] for i in range(1, N + 1): gift_codes.append(\'\'.join(chr(65 + j) for j in range(i))) return gift_codes"},{"question":"Given a matrix of N x M dimension and Q queries, each query containing four integers (x1, y1, x2, y2) representing the coordinates of two opposite corners of a sub-matrix. Determine the sum of elements within each specified sub-matrix for every query. Note: - Assume 0 based indexing for matrix coordinates. - The coordinates (x1, y1) and (x2, y2) will always form a valid sub-matrix within the dimensions of the original matrix. Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Q = 2 queries = [ (0, 0, 1, 1), (1, 1, 2, 2) ] Output: 12 28 Explanation: For the 1st query (0, 0, 1, 1), the sub-matrix is: 1 2 4 5 Sum = 1+2+4+5 = 12 For the 2nd query (1, 1, 2, 2), the sub-matrix is: 5 6 8 9 Sum = 5+6+8+9 = 28 Your Task: You do not need to read input or print anything. Your task is to implement the function `subMatrixSum` which takes the matrix, the dimensions N, M, list of queries, and their count Q as input parameters and returns a list of integers representing the sum of elements within each specified sub-matrix for every query. Expected Time Complexity: O(N*M + Q) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 1 ≤ Q ≤ 10^3 -10^4 ≤ matrix[i][j] ≤ 10^4","solution":"def subMatrixSum(matrix, N, M, queries, Q): def computePrefixSumMatrix(matrix, N, M): prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum prefix_sum = computePrefixSumMatrix(matrix, N, M) result = [] for x1, y1, x2, y2 in queries: x1 += 1 y1 += 1 x2 += 1 y2 += 1 current_sum = (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) result.append(current_sum) return result"},{"question":"You have been hired to develop an application where users can create and manage to-do lists. Each to-do list is represented as a single string containing alphabetic characters, spaces, and numbers. The app limits the number of items a user can add to a list to 50 items, with each item being separated by a single comma. Your task is to write a function that will parse the to-do list string and return the number of distinct items in it. An item is considered distinct if it differs from every other item in the list, regardless of whitespace. The list should also be free from leading and trailing spaces in its items, which need to be trimmed. Input: - A single string representing the to-do list, where each item is separated by a comma. - The list string will contain no more than 1000 characters. Output: - An integer representing the number of distinct to-do items in the list. Examples: Input: ``` \\"Buy milk, Call mom , Clean the house, Buy milk, call mom, pay bills, clean the house \\" ``` Output: ``` 4 ``` Input: ``` \\"Buy groceries, read book, finish assignment , Finish assignment, buy supplies , read BOOK\\" ``` Output: ``` 4 ``` Input: ``` \\"Feed the cat, Wash the dog , feed the bird, feed the cat, wash THE DOG, feed THE bird , Pay bills\\" ``` Output: ``` 4 ```","solution":"def count_distinct_items(todo_list): Returns the number of distinct items in the to-do list. An item is considered distinct if it differs from every other item in the list, regardless of whitespace. # Split the list by commas items = todo_list.split(\\",\\") # Trim whitespace and convert to lowercase for all items cleaned_items = [item.strip().lower() for item in items] # Use set to get unique items unique_items = set(cleaned_items) # Return the number of distinct items return len(unique_items)"},{"question":"Alice has a job interview and wants to practice her logical thinking. She finds a puzzle which requires her to split an array of integers into two subarrays such that the difference between their sums is minimized. Given an array of positive integers, write a function that determines the minimum difference between the sums of the two subarrays. Example 1: Input: arr[] = {1, 2, 3, 9} Output: 3 Explanation: Alice can split the array into {1, 2, 3} and {9}, with sums 6 and 9, respectively. The difference is 3. Example 2: Input: arr[] = {1, 2, 7, 4, 6} Output: 0 Explanation: Alice can split the array into {1, 7, 4} and {2, 6}, with sums 12 and 12, respectively. The difference is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDifference() which takes array arr[] and its size n as input parameters and returns the minimum difference between the sums of the two subarrays. Expected Time Complexity: O(n*sum(arr)) where sum(arr) is the total sum of all elements in the array. Expected Auxiliary Space: O(n*sum(arr)) Constraints: 1 ≤ n ≤ 100 1 ≤ arr[i] ≤ 100","solution":"def minDifference(arr): Returns the minimum difference between the sums of the two subarrays. total_sum = sum(arr) n = len(arr) # Initialize a DP array dp = [[False] * (total_sum + 1) for _ in range(n + 1)] # There is always a way to get sum 0: by not choosing any element for i in range(n + 1): dp[i][0] = True # Fill the partition table for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i-1] <= j: # Either include the element or exclude it dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] # Find the largest j such that dp[n][j] is true # This j will be as close to total_sum / 2 as possible min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, abs(total_sum - 2 * j)) return min_diff"},{"question":"In RoboVille, robots are ranked based on their processing speed. A competitive robot can execute tasks with a speed that meets or exceeds the target speed defined for the competition. If a robot runs slower than the target speed, it is non-competitive. Write a program that determines whether a robot is competitive. ------ Input Format ------ The only line of input contains two space-separated integers A and B — the target speed for the competition and the processing speed of the robot, respectively. ------ Output Format ------ Print COMPETITIVE if the robot meets or exceeds the target speed; otherwise, print NON-COMPETITIVE. You may print each character of the string in uppercase or lowercase (for example, the strings competitive, Competitive, cOmPeTiTiVe, and COMPETITIVE will all be treated as identical). ------ Constraints ------ 1 ≤ A, B ≤ 150 ----- Sample Input 1 ------ 50 75 ----- Sample Output 1 ------ COMPETITIVE ----- Sample Input 2 ------ 100 50 ----- Sample Output 2 ------ NON-COMPETITIVE ----- Sample Input 3 ------ 120 120 ----- Sample Output 3 ------ COMPETITIVE ----- Sample Input 4 ------ 20 19 ----- Sample Output 4 ------ NON-COMPETITIVE","solution":"def determine_competitiveness(A, B): Determines whether a robot is competitive. Parameters: A (int): The target speed for the competition. B (int): The processing speed of the robot. Returns: str: \\"COMPETITIVE\\" if B >= A, otherwise \\"NON-COMPETITIVE\\". if B >= A: return \\"COMPETITIVE\\" else: return \\"NON-COMPETITIVE\\""},{"question":"You are given a string S consisting of lowercase English letters. You need to answer Q queries. Each query is defined by two integers L and R. For each query, your task is to find the length of the longest substring of S in the range S[L...R] that contains no repeated characters. Input format: The first line contains an integer T - the number of test cases. For each test case, the first line contains the string S. The second line contains an integer Q - the number of queries. The next Q lines each contain two integers L and R. Output format: For each query, output one integer - the length of the longest substring within the range S[L...R] that contains no repeated characters. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ |S| SAMPLE INPUT 1 abcabcbb 3 1 4 2 5 3 8 SAMPLE OUTPUT 3 3 2 Explanation For the first query (L=1, R=4), the substring is \\"abca\\". The longest substring with no repeated characters is \\"abc\\", which has length 3. For the second query (L=2, R=5), the substring is \\"bcab\\". The longest substring with no repeated characters is \\"bca\\", which has length 3. For the third query (L=3, R=8), the substring is \\"cabcbb\\". The longest substring with no repeated characters is \\"cab\\", which has length 3.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring of S that contains no repeated characters. n = len(s) seen = set() left = 0 max_length = 0 for right in range(n): while s[right] in seen: seen.remove(s[left]) left += 1 seen.add(s[right]) max_length = max(max_length, right - left + 1) return max_length def process_queries(s: str, queries: list) -> list: results = [] for l, r in queries: substring = s[l-1:r] results.append(length_of_longest_substring(substring)) return results def solve(T: int, test_cases: list) -> list: solutions = [] for test_case in test_cases: s = test_case[\'s\'] queries = test_case[\'queries\'] results = process_queries(s, queries) solutions.append(results) return solutions"},{"question":"You are given an integer array and a number x. You need to determine whether there exist two distinct indices i and j in the array such that the absolute difference of their corresponding values is exactly x. Write a function `find_pair_with_difference(arr, x)` to solve the problem. # Input format: - The first line contains a single integer n, which is the number of elements in the array. - The second line contains n integers representing the elements of the array. - The third line contains the integer x, representing the target difference. # Output format: - Print \\"Yes\\" if there are two such indices, otherwise, print \\"No\\". # Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 - 1 ≤ x ≤ 10^9 # Example Input: 4 1 5 3 4 2 # Example Output: Yes # Explanation: In the given example, the pair (1, 3) in the array has an absolute difference of 2 (|1-3| = 2). # Notes: - You can assume that each test case has at least one valid input. - The function should be optimized to handle large inputs efficiently.","solution":"def find_pair_with_difference(arr, x): Determines whether there exist two distinct indices i and j in the array such that the absolute difference of their corresponding values is exactly x. Parameters: arr (list of ints): List of integers. x (int): Target difference. Returns: str: \\"Yes\\" if such a pair exists, otherwise \\"No\\". value_set = set() for value in arr: if (value + x in value_set) or (value - x in value_set): return \\"Yes\\" value_set.add(value) return \\"No\\""},{"question":"Given a list of integers, where every element appears exactly twice, except for one element which appears exactly once, find the element that appears only once. Example 1: Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 Example 3: Input: [1] Output: 1 Note: 1. Your solution should have a linear runtime complexity. 2. Could you implement it without using extra memory?","solution":"def single_number(nums): Returns the element that appears only once in the list. Every other element appears exactly twice. Args: nums: List of integers Returns: Integer that appears only once result = 0 for num in nums: result ^= num return result"},{"question":"Design a function that takes in a string representing a Roman numeral and converts it to its integer value. Roman numerals are represented by the following symbols: - I, V, X, L, C, D, M - 1, 5, 10, 50, 100, 500, 1000 respectively Several rules must be followed to convert a Roman numeral to an integer: 1. The Roman numeral is read from left to right, starting with the highest value. 2. If a smaller numeral appears before a larger numeral, it is subtracted. Otherwise, it is added. 3. The input string is guaranteed to be a valid Roman numeral from 1 to 3999. Examples: - \\"III\\" -> 3 - \\"IV\\" -> 4 - \\"IX\\" -> 9 - \\"LVIII\\" -> 58 (L = 50, V = 5, III = 3) - \\"MCMXCIV\\" -> 1994 (M = 1000, CM = 900, XC = 90, IV = 4) Write a function `roman_to_integer(s: str) -> int` that takes a string `s` and returns the integer representation of the Roman numeral.","solution":"def roman_to_integer(s: str) -> int: Converts a Roman numeral string to an integer. :param s: A string representing the Roman numeral. :return: The integer representation of the Roman numeral. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"------ Read problem statements in Hindi, Mandarin chinese, Russian and Vietnamese as well. ------ Sarah loves solving puzzles involving strings. One day, she encountered a problem where she needs to find the longest subsequence of a given string which is also a palindrome. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Help Sarah to find the length of the longest palindromic subsequence from the given string. ------ Input ------ The input consists of a single string S. ------ Output ------ Print the length of the longest palindromic subsequence of string S. ------ Constraints ------ 1 ≤ |S| ≤ 1,000 S consists of lowercase English letters only. ------ Sample Input 1 ------ bbbab ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ The longest palindromic subsequence of the string \\"bbbab\\" is \\"bbbb\\", which has a length of 4. ------ Sample Input 2 ------ cbbd ------ Sample Output 2 ------ 2 ------ Explanation 2 ------ The longest palindromic subsequence of the string \\"cbbd\\" is \\"bb\\" or \\"cc\\", both having length 2.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"In a quiet and sleepy town, there’s a network of people who deliver secret messages to each other. The network is structured such that each person forwards a message to exactly one other person. However, the message can only be passed along if it starts from a particular person, called the “Source,” and it cannot be delivered back to the Source during its journey. Each delivery from one person to another takes some time, which is predefined. The goal is to determine the shortest possible delivery time of the message from the Source to the Target person. The town is represented as a directed graph, where each node corresponds to a person and each directed edge with an associated weight represents the time taken to deliver the message from one person to another. Given the Source and Target persons, determine the shortest time from Source to Target. If the message cannot be delivered to the Target, return \\"unreachable\\". Constraints: - The graph doesn’t contain any self-loops or multiple edges in the same direction. - There might be cycles in the graph. - The number of people (nodes) N is between 2 and 1000. - The time taken (weights) on each edge is between 1 and 1000. - Input contains T test cases. Input: - The first line contains an integer T, the number of test cases. - For each test case: - First line contains two integers, N, the number of people, and M, the number of direct message paths. - The next M lines each contain three integers u, v, and w, describing a directed edge from person u to person v with time w. - The next line contains two integers, S (the Source), and T (the Target). Output: - For each test case, output a single line: - the shortest delivery time from Source to Target. - If it is not possible to deliver the message, output “unreachable”. Example Input: ``` 2 5 6 1 2 2 2 3 4 3 4 1 4 5 7 5 3 2 2 5 5 1 4 4 5 1 2 3 1 3 2 2 4 4 3 4 1 4 2 1 1 4 ``` Example Output: ``` 7 3 ``` Explanation of Example: In the first test case: - The shortest path from person 1 to person 4 is through 1 -> 2 -> 3 -> 4, with a total time of 7. In the second test case: - The shortest path from person 1 to person 4 is through 1 -> 3 -> 4, with a total time of 3.","solution":"import heapq def shortest_delivery_time(T, test_cases): results = [] def dijkstra(N, adj_list, source, target): dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[source] = 0 priority_queue = [(0, source)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in adj_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist[target] if dist[target] != float(\'inf\') else \\"unreachable\\" for case in test_cases: N, M = case[\'N\'], case[\'M\'] edges = case[\'edges\'] source, target = case[\'source\'], case[\'target\'] adj_list = {i: [] for i in range(1, N + 1)} for u, v, w in edges: adj_list[u].append((v, w)) result = dijkstra(N, adj_list, source, target) results.append(result) return results"},{"question":"Given a binary string `S` of length `N`, you are to compute the number of substrings that start and end with the character \'1\'. A substring is a contiguous sequence of characters within a string. Write a function `countSubstrings` that takes a string `S` and an integer `N` (length of the string) as input and returns the number of substrings that start and end with \'1\'. Example 1: Input: S = \\"10101\\", N = 5 Output: 6 Explanation: Substrings that start and end with \'1\' are: \\"1\\", \\"101\\", \\"10101\\", \\"1\\", \\"101\\", \\"1\\". Example 2: Input: S = \\"1001\\", N = 4 Output: 3 Explanation: Substrings that start and end with \'1\' are: \\"1\\", \\"1001\\", \\"1\\". Your Task: You don\'t need to read input or print anything. Complete the function `countSubstrings()` that takes a string `S` and its length `N` as input parameters and returns the number of substrings starting and ending with \'1\'. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 S[i] is either \'0\' or \'1\'.","solution":"def countSubstrings(S, N): Returns the number of substrings that start and end with \'1\'. count_of_ones = S.count(\'1\') # The total number of substrings starting and ending with \'1\' is given by the combination formula. # This is the number of ways to choose 2 \'1\'s out of the total plus the number of single \'1\'s. # C(count_of_ones, 2) + count_of_ones = count_of_ones * (count_of_ones - 1) // 2 + count_of_ones return (count_of_ones * (count_of_ones - 1)) // 2 + count_of_ones"},{"question":"A software developer is working on an application that involves manipulating a string of parentheses. The task requires checking whether the parentheses string is balanced, and if not, determining the minimum number of insertions, deletions, or swapping of adjacent characters needed to balance the string. # Rules: 1. A parentheses string is considered balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. Operations allowed: - **Insertion**: Adding a \'(\' or \')\' at any position in the string. - **Deletion**: Removing any \'(\' or \')\' from the string. - **Swapping**: Swapping any two adjacent characters in the string. Write a function that takes a string of parentheses as input and returns the minimum number of operations required to make the string balanced. # Function Signature: ```python def min_operations_to_balance(s: str) -> int: ``` # Input: - A single string `s` (0 ≤ length of s ≤ 1000), consisting only of the characters \'(\' and \')\'. # Output: - An integer representing the minimum number of operations required to balance the parentheses string. # Examples: Example 1: ```python s = \\"(()))(\\" print(min_operations_to_balance(s)) # Output: 2 ``` Explanation: One way to balance the string is by inserting one \'(\' at the beginning and one \')\' at the end. Example 2: ```python s = \\")(\\" print(min_operations_to_balance(s)) # Output: 1 ``` Explanation: One way to balance the string is by swapping the two characters. Example 3: ```python s = \\"(((\\" print(min_operations_to_balance(s)) # Output: 3 ``` Explanation: One way to balance the string is by inserting three \')\' at the end. # Constraints: - The length of the string will be between 0 and 1000. - The string will only contain the characters \'(\' and \')\'. You need to implement the `min_operations_to_balance` function to solve the problem.","solution":"def min_operations_to_balance(s: str) -> int: Returns the minimum number of operations required to balance the parentheses string. # Count of left \'(\' and right \')\' parentheses needed left_needed = 0 right_needed = 0 for char in s: if char == \'(\': right_needed += 1 # We need a corresponding \')\' elif char == \')\': if right_needed > 0: right_needed -= 1 # We have a matching \'(\' else: left_needed += 1 # We need a corresponding \'(\' # The total operations needed is the sum of left_needed and right_needed return left_needed + right_needed"},{"question":"Given a 2-dimensional grid of size m x n, you need to determine the maximum number of rooms that can be built following these conditions: 1. Each cell in the grid can be used to build exactly one room. 2. Rooms can only be built in cells which are not adjacent (horizontally, vertically, or diagonally) to any other cell where another room is built. Write a function `maxRooms(m, n)` that returns the maximum number of rooms that can be built in a grid of size m x n. # Input - An integer `m` (1 ≤ m ≤ 1000) representing the number of rows in the grid. - An integer `n` (1 ≤ n ≤ 1000) representing the number of columns in the grid. # Output - An integer representing the maximum number of rooms that can be built in the grid following the given conditions. # Example Example 1 Input: ``` 4 4 ``` Output: ``` 4 ``` Explanation: A possible arrangement to achieve the maximum number of rooms is by placing rooms in a checkerboard pattern: ``` # . # . . # . # # . # . . # . # ``` Example 2 Input: ``` 3 3 ``` Output: ``` 5 ``` Explanation: A possible arrangement to achieve the maximum number of rooms is: ``` # . # . # . # . # ``` # Function Signature ```python def maxRooms(m: int, n: int) -> int: # your code here ```","solution":"def maxRooms(m, n): Returns the maximum number of rooms that can be built in a grid of size m x n following the given conditions. # The maximum number of rooms in a grid following the conditions is achieved by placing rooms in a checkerboard pattern. # This is done by calculating the ceiling of half the total cells in the grid. return (m * n + 1) // 2"},{"question":"In a rectangular grid of size n times m, each cell initially contains either a 0 or a 1. You can perform an operation that toggles (flips) the state of all cells in any chosen sub-rectangle (a sub-rectangle is defined by its top-left and bottom-right corners). Your task is to determine the minimum number of operations required to make all the cells in the grid contain the same value. -----Input----- The first line contains two integers n and m (1 le n, m le 50) — the size of the grid. Each of the next n lines contains m integers (either 0 or 1) — the original state of the grid. -----Output----- Print one integer — the minimum number of operations required. -----Example----- Input 2 2 0 1 1 0 Output 2 Input 3 4 1 0 0 1 0 1 1 0 1 0 0 1 Output 6","solution":"def min_operations_to_uniform_grid(n, m, grid): def count_bits(): zero_count = 0 one_count = 0 for row in grid: zero_count += row.count(0) one_count += row.count(1) return zero_count, one_count zero_count, one_count = count_bits() # The number of operations to convert all to 0s is the count of 1s, # and converting all to 1s is the count of 0s. return min(one_count, zero_count)"},{"question":"A tournament organizer wants to plan a series of knockout rounds for a given number of players. Each match in a round eliminates one player. The matches are pairwise, meaning each match is played between two players. If a player does not have a partner (unpaired player), they automatically proceed to the next round. The organizer needs to determine how many rounds will be required to determine a single winner. -----Input----- - An integer N denoting the number of players participating in the tournament. -----Output----- - A single integer representing the number of rounds required to determine the winner. -----Constraints----- - 1 ≤ N ≤ 10^9 -----Example----- Input: 16 Output: 4 Input: 7 Output: 3 -----Explanation----- For the first example, we have 16 players: - Round 1: 16 players, 8 matches, 8 winners - Round 2: 8 players, 4 matches, 4 winners - Round 3: 4 players, 2 matches, 2 winners - Round 4: 2 players, 1 match, 1 winner In total, it takes 4 rounds to determine the winner. For the second example, we have 7 players: - Round 1: 7 players, 3 matches, 3 winners + 1 unpaired (total 4) - Round 2: 4 players, 2 matches, 2 winners - Round 3: 2 players, 1 match, 1 winner In total, it takes 3 rounds to determine the winner.","solution":"def count_rounds(N): Determines the number of rounds required to determine a single winner in a tournament with N players. rounds = 0 while N > 1: rounds += 1 N = (N + 1) // 2 # Number of players in the next round return rounds"},{"question":"A new boutique bakery wants to optimize its scoring system for a new type of challenge they are hosting called \\"The Cupcake Challenge\\". The challenge involves each participant baking a specific number of cupcakes and earning points based on a secret recipe of scoring. Here\'s the twist—they have a particular rule for calculating the score: the score for each cupcake is based on the Fibonacci sequence number corresponding to its position in the baking order. The Fibonacci sequence is defined as follows: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 The bakery\'s scoring system uses the Fibonacci number at each position to assign points. For instance, the cupcakes baked in the 3rd position would earn points equal to the 3rd Fibonacci number, and so on. Given the number of cupcakes baked by each participant, the bakery wants to calculate the total score for each participant. Input: - An integer T (1 ≤ T ≤ 20) denoting the number of participants. - The next T lines contain an integer N (1 ≤ N ≤ 30), representing the number of cupcakes baked by each participant. Output: - T lines, each line containing the total score for the corresponding participant. Example: Input: 3 3 5 7 Output: 4 12 33 Explanation: - For the first participant baking 3 cupcakes: The scores would be the 1st, 2nd, and 3rd Fibonacci numbers (1 + 1 + 2 = 4). - For the second participant baking 5 cupcakes: The scores would be the 1st, 2nd, 3rd, 4th, and 5th Fibonacci numbers (1 + 1 + 2 + 3 + 5 = 12). - For the third participant baking 7 cupcakes: The scores would be the 1st, 2nd, 3rd, 4th, 5th, 6th, and 7th Fibonacci numbers (1 + 1 + 2 + 3 + 5 + 8 + 13 = 33).","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b def calculate_total_scores(T, participants): Calculates the total score for each participant based on the number of cupcakes baked. T: Number of participants. participants: List of integers representing the number of cupcakes baked by each participant. Returns a list of total scores for each participant. total_scores = [] for N in participants: score = 0 for i in range(1, N + 1): score += fibonacci(i) total_scores.append(score) return total_scores # Example usage: T = 3 participants = [3, 5, 7] print(calculate_total_scores(T, participants)) # Output should be [4, 12, 33]"},{"question":"You are given a string of space-separated words. The task is to reverse each word in the string while maintaining the order of the words. The returned string should have the reversed words joined by a single space. Write a function that takes a string as input and returns a new string with the described transformation. You can assume that the input string will not be empty and will not contain leading or trailing spaces. Example: ``` Input: \\"hello world\\" Output: \\"olleh dlrow\\" Input: \\"coding is fun\\" Output: \\"gnidoc si nuf\\" ```","solution":"def reverse_words(s): Reverses each word in the string maintaining the order of the words. Parameters: s (str): The input string. Returns: str: A string with each word reversed. return \' \'.join(word[::-1] for word in s.split())"},{"question":"You are given an array of integers A. Your task is to rotate the array to the right by k steps, where k is a non-negative integer. Rotating the array one step to the right means that the last element of the array moves to the first position and all other elements shift one position to the right. Input - The first line contains an integer, n, the size of the array. - The second line contains n integers, the elements of the array A. - The third line contains an integer, k, the number of steps to rotate the array. Output Output the array after rotating it to the right by k steps. Constraints 1 ≤ n ≤ 100 000 0 ≤ A[i] ≤ 1 000 000 0 ≤ k ≤ 1 000 000 SAMPLE INPUT 5 1 2 3 4 5 2 SAMPLE OUTPUT 4 5 1 2 3","solution":"def rotate_array_right(A, k): Rotates the array A to the right by k steps. :param A: List of integers. :param k: Number of steps to rotate the array. :return: New list that is rotated. n = len(A) if n == 0: return [] k = k % n # In case k is larger than array size return A[-k:] + A[:-k] # Example usage n = 5 A = [1, 2, 3, 4, 5] k = 2 print(rotate_array_right(A, k)) # Output: [4, 5, 1, 2, 3]"},{"question":"Write a function `tribonacci` that takes in a number `n` and returns the `n`th number in the Tribonacci sequence. The Tribonacci sequence is a generalization of the Fibonacci sequence where each term is the sum of the three preceding ones. The sequence starts with the following base values: tribonacci(0) = 0 tribonacci(1) = 1 tribonacci(2) = 1 And the recurrence relation: tribonacci(n) = tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3), for n > 2 For example, the first few numbers in the Tribonacci sequence are: 0, 1, 1, 2, 4, 7, 13, 24, ... Write the function `tribonacci` such that, given a non-negative integer `n`, it returns the `n`th number in the Tribonacci sequence. Hint: You may consider using memoization to optimize the performance of your solution for large values of `n`. Example: ```python tribonacci(0) # Returns 0 tribonacci(4) # Returns 4 tribonacci(6) # Returns 13 ```","solution":"def tribonacci(n, memo={}): Returns the n-th number in the Tribonacci sequence. The Tribonacci sequence is defined as: T(0) = 0 T(1) = 1 T(2) = 1 T(n) = T(n-1) + T(n-2) + T(n-3) for n > 2 if n in memo: return memo[n] if n == 0: return 0 if n == 1 or n == 2: return 1 memo[n] = tribonacci(n - 1, memo) + tribonacci(n - 2, memo) + tribonacci(n - 3, memo) return memo[n]"},{"question":"A new restaurant is opening and plans to create a rewards program for its customers. Customers earn points every time they visit the restaurant, and higher points mean better rewards. The restaurant wants to analyze the visiting patterns of its customers to better tailor their rewards program. You are given data on the visits from multiple customers represented as a list of integers, where each integer is the number of visits for a particular customer. Your task is to write a program that determines the maximum number of visits made by any single customer, how many customers made that many visits, and outputs both values. -----Input----- The first line contains an integer N (1 le N le 100), the number of customers. The second line contains N space-separated integers where each integer v_i (1 le v_i le 100) represents the number of visits made by the i-th customer. -----Output----- On the first line, output the maximum number of visits made by any customer. On the second line, output the number of customers who made that many visits. -----Examples----- Sample Input: 5 3 2 3 5 5 Sample Output: 5 2","solution":"def max_visits(visits): Determine the maximum number of visits made by any single customer and how many customers made that many visits. :param visits: A list of integers representing the number of visits for each customer. :return: A tuple (max_visits, count_of_max_visits) if len(visits) == 0: return (0, 0) max_visits = max(visits) count_of_max_visits = visits.count(max_visits) return (max_visits, count_of_max_visits) # Example usage: # visits = [3, 2, 3, 5, 5] # print(max_visits(visits)) # Output should be (5, 2)"},{"question":"Your company is developing a new file transformation tool. One of the new features allows users to convert a file\'s content to a specific desired order line by line based on predefined column indices. Given an input file where each line contains multiple space-separated words, you need to reorder the words in each line according to the given list of column indices. For example, consider the input line \\"apple orange banana grape\\". If the desired order of columns is [2, 0, 3, 1], the output should be \\"banana apple grape orange\\". Your task is to write a function that performs this transformation on every line of an input file. -----Input----- The first line of input contains two integers ( N ) and ( M ) where ( 1 leq N leq 100 ) represents the number of lines in the file, and ( 1 leq M leq 10 ) represents the number of words in each line. The next line contains ( M ) integers representing the column indices (0-based) that define the desired order. Each of the following ( N ) lines contains exactly ( M ) space-separated words. -----Output----- Output ( N ) lines, each containing the words in the requested order. -----Examples----- Sample Input 1: 3 4 2 0 3 1 apple orange banana grape water juice milk tea cat dog mouse rabbit Sample Output 1: banana apple grape orange milk water tea juice mouse cat rabbit dog Sample Input 2: 2 3 1 0 2 first second third red green blue Sample Output 2: second first third green red blue","solution":"def reorder_lines(N, M, indices, lines): Reorders each line by the given list of column indices. Parameters: - N (int): Number of lines. - M (int): Number of words in each line. - indices (list): List of column indices for the desired order. - lines (list of str): List of lines to be reordered. Returns: - list of str: List of reordered lines. reordered_lines = [] for line in lines: words = line.split() reordered_words = [words[i] for i in indices] reordered_lines.append(\\" \\".join(reordered_words)) return reordered_lines # Example usage: # N, M = 3, 4 # indices = [2, 0, 3, 1] # lines = [ # \\"apple orange banana grape\\", # \\"water juice milk tea\\", # \\"cat dog mouse rabbit\\" # ] # print(reorder_lines(N, M, indices, lines))"},{"question":"At a software development company, there is a server that logs various events. Each event is recorded with a timestamp and a type. An event type can be an \\"error\\", \\"warning\\", or \\"info\\". A system administrator wants to analyze these logs to find patterns and trends in the events. Your task is to implement a function that processes these logs and produces a summary of the events. Specifically, you need to count the number of each type of event and determine the earliest and latest timestamps for each event type. ----- Input ----- The input will consist of multiple lines. Each line represents a single event and contains the timestamp and the event type, separated by a space. The timestamp will be in the format \\"YYYY-MM-DD HH:MM:SS\\". The event type will be one of \\"error\\", \\"warning\\", or \\"info\\". The input ends with an empty line. ----- Output ----- For each event type, print: 1. The total number of events of that type. 2. The earliest timestamp of that type. 3. The latest timestamp of that type. If there are no events of a particular type, do not print anything for that type. The output should be in the following format: ``` ERRORS count: <number> EARLIEST: <timestamp> LATEST: <timestamp> WARNINGS count: <number> EARLIEST: <timestamp> LATEST: <timestamp> INFOS count: <number> EARLIEST: <timestamp> LATEST: <timestamp> ``` ----- Example ----- Input: 2023-05-01 08:22:33 error 2023-05-01 09:15:12 info 2023-05-01 10:45:01 error 2023-05-01 12:30:45 warning 2023-05-01 15:00:00 info 2023-05-01 16:20:00 warning Output: ERRORS count: 2 EARLIEST: 2023-05-01 08:22:33 LATEST: 2023-05-01 10:45:01 WARNINGS count: 2 EARLIEST: 2023-05-01 12:30:45 LATEST: 2023-05-01 16:20:00 INFOS count: 2 EARLIEST: 2023-05-01 09:15:12 LATEST: 2023-05-01 15:00:00 ----- Note ----- 1. You can assume all timestamps are in correct order with no duplicates. 2. The input sequence can have any number of event entries, and they are separated by a line break. The end of the input sequence is indicated by an empty line (not a space). 3. If there are no events, the program should not output anything.","solution":"def summarize_events(log_entries): from collections import defaultdict events_summary = defaultdict(lambda: {\\"count\\": 0, \\"earliest\\": None, \\"latest\\": None}) for entry in log_entries: if entry.strip() == \\"\\": continue timestamp, event_type = entry.rsplit(\' \', 1) if event_type not in events_summary: events_summary[event_type] = {\\"count\\": 0, \\"earliest\\": timestamp, \\"latest\\": timestamp} events_summary[event_type][\\"count\\"] += 1 if events_summary[event_type][\\"earliest\\"] is None or timestamp < events_summary[event_type][\\"earliest\\"]: events_summary[event_type][\\"earliest\\"] = timestamp if events_summary[event_type][\\"latest\\"] is None or timestamp > events_summary[event_type][\\"latest\\"]: events_summary[event_type][\\"latest\\"] = timestamp result = [] if \\"error\\" in events_summary: result.append(f\\"ERRORS count: {events_summary[\'error\'][\'count\']}\\") result.append(f\\"EARLIEST: {events_summary[\'error\'][\'earliest\']}\\") result.append(f\\"LATEST: {events_summary[\'error\'][\'latest\']}\\") if \\"warning\\" in events_summary: result.append(f\\"WARNINGS count: {events_summary[\'warning\'][\'count\']}\\") result.append(f\\"EARLIEST: {events_summary[\'warning\'][\'earliest\']}\\") result.append(f\\"LATEST: {events_summary[\'warning\'][\'latest\']}\\") if \\"info\\" in events_summary: result.append(f\\"INFOS count: {events_summary[\'info\'][\'count\']}\\") result.append(f\\"EARLIEST: {events_summary[\'info\'][\'earliest\']}\\") result.append(f\\"LATEST: {events_summary[\'info\'][\'latest\']}\\") return \\"n\\".join(result)"},{"question":"Given a string s, rearrange the characters of s so that any two adjacent characters are not the same. Return any possible rearrangement of s or return an empty string if not possible. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Explanation: \\"aba\\" is a valid rearrangement. Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: It is impossible to rearrange the string such that no two adjacent characters are the same. Example 3: Input: s = \\"aabbcc\\" Output: \\"abcabc\\" Explanation: \\"abcabc\\" is a valid rearrangement. Constraints: - 1 <= s.length <= 500 - s consists of only lowercase English letters","solution":"import heapq from collections import Counter def reorganizeString(s): Rearranges the characters of string `s` such that no two adjacent characters are the same. Returns a valid rearrangement, or an empty string if not possible. if not s: return \\"\\" # Count the frequency of each character char_count = Counter(s) # Use a max-heap to store characters by their frequency in descending order max_heap = [] for char, count in char_count.items(): heapq.heappush(max_heap, (-count, char)) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If there was a previously used character with a remaining count, push it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_count, prev_char = count + 1, char # Check if the rearranged string is equal to the requested length rearranged_string = \'\'.join(result) return rearranged_string if len(rearranged_string) == len(s) else \\"\\""},{"question":"Given a string s consisting of a mix of alphabetical and numerical characters, write a function to determine the sum of all numerical substrings in the string. Example 1: Input: s = \\"abc123xyz45\\" Output: 168 Explanation: Numerical substrings are \\"123\\" and \\"45\\". The sum is 123 + 45 = 168. Example 2: Input: s = \\"56a78bc90\\" Output: 224 Explanation: Numerical substrings are \\"56\\", \\"78\\", and \\"90\\". The sum is 56 + 78 + 90 = 224. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfNumbers() which accepts a string s as an input parameter and returns an integer representing the sum of all numerical substrings in the string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^5 The string s contains only alphanumeric characters (both uppercase and lowercase letters and digits).","solution":"def sumOfNumbers(s): Returns the sum of all numerical substrings in the string s. total_sum = 0 current_number = 0 in_number = False for char in s: if char.isdigit(): current_number = current_number * 10 + int(char) in_number = True elif in_number: total_sum += current_number current_number = 0 in_number = False if in_number: total_sum += current_number return total_sum"},{"question":"You are given a string `s` of length `n` and a list of queries `queries[]` containing pairs of indices `{l, r}`. For each query, you need to count the number of distinct characters in the substring from index `l` to index `r` (inclusive). Note: The string is 0-indexed. Example 1: Input: n = 7 s = \\"abacaba\\" q = 2 queries = [0, 3, 2, 6] Output: 3 3 Explanation: For the first query, the substring from index 0 to index 3 is \\"abac\\", which has 3 distinct characters: \'a\', \'b\', and \'c\'. For the second query, the substring from index 2 to index 6 is \\"acaba\\", which has 3 distinct characters: \'a\', \'c\', and \'b\'. Your Task: You do not need to read input or print anything. Your task is to complete the function `countDistinctChars()` which takes `n`, `s`, `q` and `queries` as input parameters and returns an array with the count of distinct characters for each query. Expected Time Complexity: O(n + q * (r - l)) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n, q ≤ 1000 1 ≤ l ≤ r < n s consists of lower case English letters only.","solution":"def countDistinctChars(n, s, q, queries): This function takes the length of string n, the string s, number of queries q, and a list of query ranges queries. It returns a list of counts of distinct characters for each query. res = [] for i in range(q): l, r = queries[2 * i], queries[2 * i + 1] distinct_chars = set(s[l:r + 1]) res.append(len(distinct_chars)) return res"},{"question":"Yaru is exploring a forest represented as a grid of dimensions n times m. Each cell in the grid is either passable (\'.\') or contains an obstacle (\'#\'). Yaru can move up, down, left, or right from one passable cell to another. A special treasure is hidden in the forest, and its location is given by the coordinates (tx, ty). Yaru starts from the top-left corner of the forest at coordinates (0, 0). Determine the minimum number of moves Yaru needs to reach the treasure at (tx, ty). If the treasure is unreachable, output \'IMPOSSIBLE\'. -----Input----- The first line contains two integers n and m (1 leq n, m leq 100) — the dimensions of the forest grid. The next n lines each contain m characters — the forest grid. Each character is either \'.\' (passable) or \'#\' (obstacle). The last line contains two integers tx and ty (0 leq tx < n, 0 leq ty < m) — the coordinates of the treasure. -----Output----- Output a single integer — the minimum number of moves Yaru needs to reach the treasure, or \'IMPOSSIBLE\' if the treasure is unreachable. -----Examples----- Input 3 4 .... .#.. .... 2 3 Output 5 Input 3 4 .... .... 2 3 Output IMPOSSIBLE -----Note----- For the first test case in the example, Yaru may reach the treasure using the following sequence of moves: (0, 0) xrightarrow{} (0, 1) xrightarrow{} (0, 2) xrightarrow{} (1, 2) xrightarrow{} (2, 2) xrightarrow{} (2, 3) For the second test case, there is no path from (0, 0) to (2, 3) because the fourth row is completely blocked.","solution":"from collections import deque def min_moves_to_treasure(n, m, forest, tx, ty): Calculate the minimum number of moves to reach the treasure located at (tx, ty) from (0, 0). Parameters: n (int): number of rows in the forest grid m (int): number of columns in the forest grid forest (list of str): the forest grid tx (int): row number of the treasure location ty (int): column number of the treasure location Returns: int or str: Minimum number of moves to reach treasure, or \'IMPOSSIBLE\' if unreachable. if forest[0][0] == \'#\' or forest[tx][ty] == \'#\': return \\"IMPOSSIBLE\\" # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue initialization with starting position (0, 0) queue = deque([(0, 0, 0)]) # (row, column, distance) # Set to keep track of visited cells visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() # If the treasure is reached if x == tx and y == ty: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and forest[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If treasure is unreachable return \\"IMPOSSIBLE\\""},{"question":"Polycarpus is planning to build a binary search tree (BST) with n unique integers. He wants to ensure that the BST is balanced, such that the depth of the left and right subtrees of any node never differs by more than one. Polycarpus has n different integers given in an array a. He can choose the order in which to insert these integers into the BST. Your task is to determine whether it is possible to construct a balanced BST with these integers and, if so, output one possible insertion order that results in a balanced BST. A BST is balanced if, for every node, the heights of the left and right subtrees differ by at most one. -----Input----- - The first line contains a single integer n (1 le n le 10^5), the number of unique integers. - The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9) representing the elements in the array. -----Output----- - If it is impossible to construct a balanced BST, output \\"NO\\" in the first line. - Otherwise, output \\"YES\\" in the first line, followed by one possible order of insertion of the n integers that results in a balanced BST. -----Examples----- Input 3 10 20 15 Output YES 15 10 20 Input 4 30 20 10 40 Output YES 20 10 30 40 Input 1 5 Output YES 5 Input 7 1 2 3 4 5 6 7 Output YES 4 2 1 3 6 5 7","solution":"def can_construct_balanced_bst(n, array): Determines whether it is possible to construct a balanced BST with the given n unique integers. If possible, returns one possible order of insertion of the n integers that results in a balanced BST. :param n: Number of unique integers :param array: List of n unique integers :return: Tuple (YES/NO, [insertion order]) if YES otherwise (NO, []) if n == 0: return \\"NO\\", [] # Sort the array to ensure balanced properties array.sort() def build_balanced_bst(arr): if not arr: return [] mid = len(arr) // 2 root = arr[mid] left_subtree = build_balanced_bst(arr[:mid]) right_subtree = build_balanced_bst(arr[mid+1:]) return [root] + left_subtree + right_subtree insertion_order = build_balanced_bst(array) return \\"YES\\", insertion_order"},{"question":"> In recreational mathematics, a word ladder is a word game invented by Lewis Carroll in which players find a path between two words by changing one letter at a time. Each intermediate word must also be a valid word. For instance, a word ladder between \\"hit\\" and \\"cog\\" might be: \\"hit\\" -> \\"hot\\" -> \\"cot\\" -> \\"cog\\". Your task is to write a function that receives two words (a start word and an end word) and a dictionary of valid words, and returns the shortest word ladder in which each intermediate word is a valid word, or an indication that no such ladder exists.","solution":"from collections import deque def find_neighbors(word, word_list): neighbors = [] for w in word_list: if sum(1 for a, b in zip(word, w) if a != b) == 1: neighbors.append(w) return neighbors def word_ladder(start, end, word_list): if start == end: return [start] word_list = set(word_list) if end not in word_list: return \\"No ladder exists\\" queue = deque([(start, [start])]) visited = set() while queue: current_word, path = queue.popleft() for neighbor in find_neighbors(current_word, word_list): if neighbor in visited: continue if neighbor == end: return path + [end] queue.append((neighbor, path + [neighbor])) visited.add(neighbor) return \\"No ladder exists\\""},{"question":"Given a positive integer M, return the number of ways to climb to the top of a staircase with M steps if you can take either 1 step or 2 steps at a time. Example 1: Input: M = 2 Output: 2 Explanation: There are two ways to climb to the top (1 step + 1 step or 2 steps). Example 2: Input: M = 3 Output: 3 Explanation: There are three ways to climb to the top (1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step). Your Task: You don\'t need to read input or print anything. Your task is to complete the function climbStairs() that takes an integer M as input parameter and returns an integer denoting the number of ways to climb the staircase. Expected Time Complexity: O(M) Expected Auxiliary Space: O(1) Constraints: 1 <= M <= 45","solution":"def climbStairs(M): Returns the number of ways to climb to the top of a staircase with M steps if you can take either 1 step or 2 steps at a time. if M <= 1: return 1 a, b = 1, 1 for _ in range(2, M + 1): a, b = b, a + b return b"},{"question":"You are given a grid of size N x M where each cell in the grid is either a wall \'W\', an empty space \'.\', or a starting point \'S\'. \'S\' is guaranteed to be present exactly once, and there are no other \'S\' in the grid. Your task is to determine if it is possible to reach the top-left corner of the grid (cell (0,0)) starting from \'S\'. You can move up, down, left, or right but cannot move through walls. Example 1: Input: N = 4, M = 4 Grid = [ [\'.\', \'W\', \'.\', \'.\'], [\'.\', \'W\', \'W\', \'.\'], [\'.\', \'.\', \'.\', \'W\'], [\'S\', \'W\', \'.\', \'W\'] ] Output: True Explanation: The path from \'S\' to (0,0) can be: (3,0) -> (2,0) -> (1,0) -> (0,0) Example 2: Input: N = 3, M = 3 Grid = [ [\'.\', \'W\', \'.\'], [\'W\', \'W\', \'.\'], [\'S\', \'.\', \'.\'] ] Output: False Explanation: There is no path from \'S\' to the top-left corner. Your task: You don\'t need to read input or print anything. Your task is to complete the function isReachable() which takes integers N, M and a list of lists Grid (where Grid[i][j] denotes the (i, j)th cell of the grid) as input parameters and returns a boolean value True if it is possible to reach the top-left corner from \'S\', otherwise False. Expected Time Complexity: O(N*M). Expected Auxiliary Space: O(N*M). Constraints: 1 <= N, M <= 100 Grid[i][j] can be \'W\', \'.\', or \'S\' only","solution":"def isReachable(N, M, Grid): def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or Grid[x][y] == \'W\': return False if (x, y) == (0, 0): return True Grid[x][y] = \'W\' # Mark this cell as visited by converting it to a wall for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: if dfs(x + dx, y + dy): return True return False start_x, start_y = None, None for i in range(N): for j in range(M): if Grid[i][j] == \'S\': start_x, start_y = i, j break if start_x is not None: break # If there\'s no \'S\' in the grid, it should technically return False if start_x is None or start_y is None: return False return dfs(start_x, start_y)"},{"question":"In a town, everyone travels either by bicycle or by car. Researchers are studying the environmental impact of different modes of transportation by analyzing the amount of CO2 emissions. They have found that bicycles do not emit CO2 while cars emit 2.3 kg of CO2 per kilometer traveled. Given the number of kilometers traveled by a bicycle or a car, can you calculate the total amount of CO2 emitted by all the vehicles in the town? Input: - First line contains an integer N, the number of trips surveyed. - Each of the following N lines contains a character (either \'B\' for bicycle or \'C\' for car) and an integer k, the number of kilometers traveled on that trip (1 ≤ k ≤ 100). Output: - Print the total amount of CO2 emissions in kilograms, rounded to two decimal places. Constraints: 1 ≤ N ≤ 1000 SAMPLE INPUT 3 B 10 C 50 C 20 SAMPLE OUTPUT 161.00","solution":"def calculate_total_emissions(trips): total_emissions = 0.0 for trip in trips: mode_of_transport, kilometers = trip.split() kilometers = int(kilometers) if mode_of_transport == \'C\': total_emissions += 2.3 * kilometers return round(total_emissions, 2)"},{"question":"Given a list of integers, `arr`, we define some operations on the list as follows: a. `rotate_left(arr, d)` denotes the list obtained by rotating the elements of `arr` left by `d` places. E.g.: rotate_left([1, 2, 3, 4, 5], 2) = [3, 4, 5, 1, 2] b. `rotate_right(arr, d)` denotes the list obtained by rotating the elements of `arr` right by `d` places. E.g.: rotate_right([1, 2, 3, 4, 5], 2) = [4, 5, 1, 2, 3] c. `shuffle(arr)` denotes any list that\'s a permutation of the list `arr`. E.g.: shuffle([1, 2, 3]) could be [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], or [3, 2, 1] Given a list of integers, `arr`, such that `arr ∈ shuffle(merge(rotate_left(L, d1), rotate_right(L, d2)))`, for some list `L`, can you find the lexicographically smallest `L`? Input Format The first line contains an integer `n` representing the number of elements in the list. The second line contains `n` space-separated integers representing the elements of the list. Constraints: - 1 ≤ n ≤ 100 - 0 ≤ arr[i] ≤ 1000 for 0 ≤ i < n Output Format A list of integers which is the lexicographically smallest valid `L`. SAMPLE INPUT 8 2 1 6 4 5 3 7 8 SAMPLE OUTPUT [1, 2, 3, 4, 5, 6, 7, 8] Explanation rotate_left([1, 2, 3, 4, 5, 6, 7, 8], 2) = [3, 4, 5, 6, 7, 8, 1, 2] rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 2) = [7, 8, 1, 2, 3, 4, 5, 6] shuffle(merge([3, 4, 5, 6, 7, 8, 1, 2], [7, 8, 1, 2, 3, 4, 5, 6])) could produce [2 1 6 4 5 3 7 8] The lexicographically smallest list L is [1, 2, 3, 4, 5, 6, 7, 8].","solution":"def find_lexicographically_smallest_list(arr): Given an array arr that is a shuffled combination of a left rotated and right rotated list, find the lexicographically smallest list L that could generate such an array. return sorted(arr)"},{"question":"Matthew enjoys hiking and collecting elevation data during his trips. After spending several weekends exploring the mountains, he has amassed extensive logs of elevation points from his hikes. Each log entry is recorded at regular intervals, but due to the nature of hiking, the elevation fluctuates unpredictably. Matthew is interested in identifying the highest peak he has climbed in each of his trips. For this, he wants to process the elevation data from multiple trips and determine the maximum elevation in each trip. Can you help Matthew analyze his elevation data? ----- Input ----- The first line consists of a single integer t (1 leq t leq 100), the number of trips. The description of each trip follows: - The first line of each trip description contains an integer n (1 leq n leq 10000), the number of elevation points recorded during that trip. - The second line contains n space-separated integers e_i (1 leq e_i leq 10000), representing the elevation points for the trip. ----- Output ----- Output t lines, each containing a single integer: the maximum elevation recorded during that trip. ----- Examples ----- Sample Input 1: 2 5 500 1000 1500 1200 1300 4 800 850 900 950 Sample Output 1: 1500 950 Sample Input 2: 3 3 290 350 220 6 700 800 750 850 840 820 2 910 920 Sample Output 2: 350 850 920","solution":"def find_max_elevation(t, trip_data): results = [] for i in range(t): # Considering the format provided in the problem n = trip_data[i][0] elevations = trip_data[i][1] max_elevation = max(elevations) results.append(max_elevation) return results"},{"question":"You work for a logistics company that delivers packages across cities. Each package has a specific delivery time requirement, and there are multiple packages to be delivered in a day. The challenge is to find the minimum number of delivery routes required to deliver all the packages on time, given that one route can be used to deliver multiple packages provided their delivery time requirements do not overlap. Each package is represented by a start time and an end time, where the end time is always greater than the start time. Your task is to determine the minimal number of non-overlapping routes required to deliver all packages on time. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of packages. The next n lines contain two integers each, s_i and e_i (0 ≤ s_i < e_i ≤ 10^6) — the start time and end time of the i-th package. -----Output----- Print a single integer representing the minimum number of delivery routes required to deliver all the packages on time. -----Examples----- Input 3 1 4 2 6 8 10 Output 2 Input 4 1 3 2 4 3 5 5 7 Output 2 -----Note----- In the first sample, the intervals [1, 4] and [2, 6] overlap, so we cannot use a single route for both. However, interval [8, 10] does not overlap with any of the previous intervals, so it can use a separate route. Thus, we need a minimum of 2 routes. In the second sample, intervals [1, 3] and [3, 5] can use one route as they only touch at time point 3. The remaining intervals [2, 4] and [5, 7] can also share another route, thus needing a total of 2 routes.","solution":"def min_delivery_routes(n, packages): Returns the minimum number of delivery routes required to deliver all packages on time. Args: n : int : number of packages packages : list of tuples : each tuple contains two integers (s_i, e_i) representing start and end time of a package Returns: int : minimum number of non-overlapping delivery routes required if not packages: return 0 # Sort packages by start time then by end time packages.sort(key=lambda x: (x[0], x[1])) import heapq # Use a min-heap to keep track of end times of current delivery routes min_heap = [] for package in packages: start, end = package if min_heap and min_heap[0] <= start: # If the earliest ending route is before or exactly at the start time of the current package, # we can reuse that route. heapq.heappop(min_heap) # Add the current package\'s end time to the heap heapq.heappush(min_heap, end) # The size of the heap tells us the number of routes required return len(min_heap)"},{"question":"You are given a sequence of integers, and your task is to sort this sequence in non-decreasing order by swapping two specific types of integers X and Y. You can swap any occurrence of X with any occurrence of Y within the sequence. Determine if it is possible to sort the sequence with zero or more such swaps. -----Input----- The first line of the input contains an integer n (1 le n le 2 * 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of the sequence. The third line contains two distinct integers X and Y (1 le X, Y le 1000), which are the two types of integers you can swap. -----Output----- Output a single line containing \\"YES\\" (without quotes) if you can sort the sequence with zero or more swaps of X and Y. Otherwise, output \\"NO\\" (without quotes). -----Examples----- Input 5 1 3 2 3 2 2 3 Output YES Input 4 10 20 30 40 20 30 Output YES Input 6 4 6 8 9 11 6 4 9 Output NO -----Note----- In the first example, you can swap the 3\'s and 2\'s to get the sorted sequence [1, 2, 2, 3, 3]. In the second example, the sequence is already sorted, hence no swaps are needed. In the third example, although you can swap 4\'s and 9\'s, the sequence cannot be sorted as 6, 8 and 11 cannot be swapped and are out of order.","solution":"def can_sort_by_swapping(n, sequence, X, Y): Determines if a sequence can be sorted by swapping occurrences of X and Y. n: the length of the sequence sequence: list of integers X, Y: integers that can be swapped Returns \\"YES\\" if the sequence can be sorted by swapping X and Y, otherwise \\"NO\\". unsorted_indices = [] sorted_sequence = sorted(sequence) for idx in range(n): if sequence[idx] != sorted_sequence[idx]: unsorted_indices.append(idx) for idx in unsorted_indices: if sequence[idx] != X and sequence[idx] != Y: return \\"NO\\" return \\"YES\\""},{"question":"Packing Boxes You are working in a warehouse that packs items into boxes for shipping. Each item has a weight and each box has a maximum weight capacity. The goal is to minimize the number of boxes used to pack all items without exceeding the weight capacity of any box. Write a function that determines the minimum number of boxes required to pack all items. You must use a greedy approach to achieve this, where you always try to put each item in the first box that has enough remaining capacity. Input The input starts with an integer n representing the number of items (1 ≤ n ≤ 1,000). The second line contains n integers representing the weights of the items (1 ≤ weight ≤ 10,000). The third line contains a single integer C representing the maximum weight capacity of a box (1 ≤ C ≤ 10,000). Output Output a single integer representing the minimum number of boxes required to pack all items. Sample Input 5 2 4 8 2 6 10 Sample Output 3 Explanation Given the weights of the items [2, 4, 8, 2, 6] and the box capacity 10, the minimum number of boxes required is 3, with the following packing: - Box 1: [2, 4, 2] (Total weight = 8) - Box 2: [8] (Total weight = 8) - Box 3: [6] (Total weight = 6) Example Input 4 3 3 3 3 6 Output 2 Explanation Given the weights of the items [3, 3, 3, 3] and the box capacity 6, the minimum number of boxes required is 2, with the following packing: - Box 1: [3, 3] (Total weight = 6) - Box 2: [3, 3] (Total weight = 6)","solution":"def minimum_boxes(n, weights, C): Determine the minimum number of boxes required to pack all items without exceeding the weight capacity of any box. :param n: int, number of items :param weights: List[int], weights of the items :param C: int, maximum weight capacity of a box :return: int, minimum number of boxes required # Sort the weights in descending order to use the heaviest items first weights.sort(reverse=True) # List to store the remaining capacities of all boxes boxes = [] for weight in weights: placed = False for i in range(len(boxes)): if boxes[i] >= weight: boxes[i] -= weight placed = True break if not placed: # If the item could not be placed in any existing box, create a new box boxes.append(C - weight) return len(boxes)"},{"question":"Painter Jane has a unique way of painting walls. She has N walls to paint, and each wall takes a specific amount of time to paint. Jane has two helpers who can assist her in painting these walls. If Jane or any of her helpers start painting a wall, they must finish the entire wall without any interruptions. Given an array `time[]` of size `N`, where `time[i]` represents the time required to paint wall `i`, determine the minimum amount of time required to paint all the walls if Jane and her two helpers can work simultaneously. You need to return the minimum possible time to paint all walls. Input format: The first line contains one integer number `N`, denoting the number of walls. The second line contains `N` integer numbers, `time[i]`, describing the time required to paint i-th wall. Output format: In the single line, print the minimum possible time required to paint all the walls. Constraints: 1 ≤ N ≤ 10^5 1 ≤ time[i] ≤ 10^4 SAMPLE INPUT 5 3 4 5 6 7 SAMPLE OUTPUT 9 Explanation Jane and her two helpers can divide the painting tasks as follows: - Jane paints walls with times 3 and 6 (total time: 9) - Helper 1 paints walls with times 4 and 5 (total time: 9) - Helper 2 paints the wall with time 7 (total time: 7) The maximum time taken by any painter is 9, which is the minimum possible time required to paint all the walls.","solution":"import heapq def min_paint_time(N, time): if N == 0: return 0 # Min heap to keep track of the time taken by each painter painters = [0, 0, 0] # Sort the wall times in descending order time.sort(reverse=True) for t in time: # Get the painter with the least current work time, add the new wall\'s time to them fastest_painter_time = heapq.heappop(painters) fastest_painter_time += t heapq.heappush(painters, fastest_painter_time) # The required time is the maximum time taken by any painter return max(painters)"},{"question":"In a distant galaxy, there are several space stations arranged on a 2D grid. Each space station has a certain amount of energy stored in it. A connection between two stations allows energy to be transferred from one station to another. Given a list of connections between the stations and the amount of energy each station initially holds, determine if it is possible to equalize the energy levels of all the space stations by transferring energy through the connections. Input Format The first line contains T, the number of test cases. Each test case starts with two integers, N and M. N is the number of space stations, and M is the number of connections. The next line contains N integers, representing the initial energy levels of the space stations. Each of the next M lines contains two integers, u and v, indicating there is a bidirectional energy transfer connection between stations u and v. Output Format For each test case, print \\"YES\\" if it is possible to equalize the energy levels of all the space stations. Otherwise, print \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 0 ≤ M ≤ 10^4 -10^3 ≤ initial energy level of each station ≤ 10^3 1 ≤ u, v ≤ N Sample Input 2 4 2 1 2 3 4 1 2 3 4 3 3 1 3 5 1 2 2 3 3 1 Sample Output NO YES Explanation In the first test case, stations 1 and 2 can only equalize their energy, and stations 3 and 4 can only equalize their energy, but there is no connection between these two pairs to equalize all four stations. In the second test case, all stations are interconnected, allowing them to transfer energy to each other and equalize their energy.","solution":"def can_equalize_energy(T, test_cases): def dfs(node, visited, component, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) component.append(current) return component results = [] for i in range(T): N, M, energies, connections = test_cases[i] graph = {i: [] for i in range(1, N+1)} for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() possible = True for station in range(1, N+1): if station not in visited: visited.add(station) component = dfs(station, visited, [], graph) component_energy = sum(energies[node-1] for node in component) if component_energy % len(component) != 0: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Task Given a string `s`, determine the minimum number of characters you need to delete from `s` to make all the characters in the string unique. Return the modified string along with the number of deletions. # Example For `s = \\"aaabbb\\"`, the result should be `(\\"ab\\", 4)`. Since there are 3 \'a\'s and 3 \'b\'s, we need to delete 2 \'a\'s and 2 \'b\'s. For `s = \\"abcde\\"`, the result should be `(\\"abcde\\", 0)`. Since all the characters are already unique, no deletions are needed. # Input/Output - `[input]` string `s` a non-empty string of lowercase alphabets. - `[output]` tuple a tuple containing the modified string with unique characters and the number of deletions.","solution":"def make_unique(s): Returns a tuple (modified_string, deletions) where modified_string is the version of s with only unique characters, and deletions is the number of characters deleted. seen = set() deletions = 0 result = [] for char in s: if char in seen: deletions += 1 else: seen.add(char) result.append(char) return (\\"\\".join(result), deletions)"},{"question":"Implement a function `run_length_encoding()` that takes a list of characters and returns a list representing its run-length encoding. The run-length encoding is a form of lossless data compression in which runs of data (i.e., sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. For example, if you have the following list of characters: ```python run_length_encoding([\\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"b\\", \\"c\\", \\"c\\", \\"a\\", \\"a\\", \\"a\\", \\"a\\"]) ``` The function should return: ```python [[\\"a\\", 2], [\\"b\\", 3], [\\"c\\", 2], [\\"a\\", 4]] ``` If given an empty list, the function should return an empty list: ```python run_length_encoding([]) == [] ``` The function should also handle single character lists: ```python run_length_encoding([\\"z\\"]) == [[\\"z\\", 1]] ``` Here’s the signature of the function: ```python def run_length_encoding(chars: list) -> list: pass ```","solution":"def run_length_encoding(chars: list) -> list: Returns the run-length encoding of a list of characters. Args: chars (list): input list of characters. Returns: list: the run-length encoding. if not chars: return [] encoded = [] count = 1 prev_char = chars[0] for char in chars[1:]: if char == prev_char: count += 1 else: encoded.append([prev_char, count]) prev_char = char count = 1 # Append the last recorded character and count encoded.append([prev_char, count]) return encoded"},{"question":"Given an integer array representing the elevations of a terrain where the width of each bar is 1, compute how much water can be trapped after raining. Example: Input: 6 0 1 0 2 1 0 Output: 1 Explanation: [ text{Elevation Map}: 0 1 0 2 1 0 ] The water trapped above each bar is calculated as follows: - Bar 1: 0 unit of water - Bar 2: 1 unit of water - Bar 3: 0 unit of water - Bar 4: 0 unit of water - Bar 5: 0 unit of water The total water trapped is 1 unit. Your Task: You don\'t have to read input or print anything. Your task is to complete the function `trapWater()` which takes the integer n and array elevation and returns the total amount of water that can be trapped. Expected Time Complexity: `O(n)` Expected Space Complexity: `O(1)` Constraints: - `1 <= n <= 10^5` - `0 <= elevation[i] <= 10^5`","solution":"def trapWater(elevation): Function to calculate how much water can be trapped after raining. :param elevation: List[int] - List of elevations :return: int - Total amount of water trapped if not elevation or len(elevation) < 3: return 0 # No water can be trapped if less than 3 bars n = len(elevation) left, right = 0, n - 1 left_max, right_max = elevation[left], elevation[right] trapped_water = 0 while left < right: if elevation[left] < elevation[right]: left += 1 left_max = max(left_max, elevation[left]) trapped_water += left_max - elevation[left] else: right -= 1 right_max = max(right_max, elevation[right]) trapped_water += right_max - elevation[right] return trapped_water"},{"question":"Design a function to transform a given sentence into Pig Latin. In Pig Latin, each word is transformed according to the following rules: 1. If a word begins with a vowel (a, e, i, o, u), simply add \\"way\\" to the end of the word. 2. If a word begins with a consonant or consonant cluster (like \\"ch\\" or \\"str\\"), move all the consonants before the first vowel to the end of the word and add \\"ay\\". 3. For the purposes of this exercise, \'y\' is treated as a consonant at the beginning of a word, but as a vowel if it appears later in the word. Write a function `to_pig_latin(sentence)` to convert a given sentence to Pig Latin. The function should preserve the capitalization and punctuation of the original sentence. You may assume that the input string is a single sentence and words are separated by spaces. Punctuation marks are considered part of the word they follow. Input format The input is a string `sentence` containing a single sentence. Output format The output is a string containing the sentence transformed into Pig Latin. Constraints - The input sentence will have at most 100 words. - Each word in the sentence will contain at most 30 characters. - The sentence will consist of only alphabetic characters and punctuation marks (, . ! ?). Sample Explanation For the input sentence \\"Hello, world!\\", the transformation should be as follows: - \\"Hello\\" begins with \\"H\\", a consonant, so \\"elloH\\" + \\"ay\\" = \\"elloHay\\" - \\"world\\" begins with \\"w\\", a consonant, so \\"orldw\\" + \\"ay\\" = \\"orldway\\" - Punctuation is preserved. SAMPLE INPUT Hello, world! SAMPLE OUTPUT Ellohay, orldway!","solution":"def to_pig_latin(sentence): def convert_word(word): vowels = \\"aeiou\\" punctuation = \\",.!?\\" # Extract punctuation if it exists end_punc = \'\' if word[-1] in punctuation: end_punc = word[-1] word = word[:-1] # Convert to pig latin first_vowel = next((i for i, char in enumerate(word.lower()) if char in vowels), len(word)) if first_vowel == 0: pig_latin = word + \'way\' else: pig_latin = word[first_vowel:] + word[:first_vowel] + \'ay\' # Reapply punctuation pig_latin += end_punc # Preserve original capitalization if word[0].isupper(): pig_latin = pig_latin.capitalize() return pig_latin words = sentence.split() pig_latin_sentence = \' \'.join(convert_word(word) for word in words) return pig_latin_sentence"},{"question":"Consider a small company that needs to manage its invoices. They want to track which invoices are paid and unpaid, and also want to categorize them by department. You have been asked to write a program that will help them manage this information. Here\'s the information you are given: *There are several departments in the company, and each department can have several invoices. *An invoice has an amount (a positive integer) and a status (either \\"paid\\" or \\"unpaid\\"). *Each department also has a budget, which is the total amount of money allocated to it. You need to write a program that: 1. Reads in the data about departments, invoices, and their budgets. 2. For each department, outputs how many unpaid invoices it has. 3. Outputs the total value of unpaid invoices for each department. 4. Determines if the remaining budget for the department is sufficient to cover all unpaid invoices. Input The first line contains an integer d (1 ≤ d ≤ 100) — the number of departments. For each of the following d blocks, the first line contains a string dep_name (the name of the department, which is a non-empty string of at most 20 alphabetic characters) and an integer budget (1 ≤ budget ≤ 1000000). The second line of the block contains an integer i (1 ≤ i ≤ 100) — the number of invoices in that department. Each of the next i lines contains an integer amount (1 ≤ amount ≤ 10000) and a string status (either \\"paid\\" or \\"unpaid\\"). Output For each department, output three lines: 1. The department\'s name. 2. The number of its unpaid invoices. 3. The total value of its unpaid invoices. 4. \\"YES\\" if the remaining budget is sufficient to cover all unpaid invoices, otherwise \\"NO\\". Example Input 3 HR 10000 2 2000 paid 3000 unpaid IT 5000 3 1000 unpaid 2000 unpaid 1500 paid Marketing 12000 1 5000 unpaid Output HR 1 3000 YES IT 2 3000 YES Marketing 1 5000 YES","solution":"def manage_invoices(data): For each department, output the number of unpaid invoices, the total value of unpaid invoices, and whether the remaining budget is sufficient to cover all unpaid invoices. d = int(data[0]) index = 1 results = [] for _ in range(d): dep_name, budget = data[index].split() budget = int(budget) index += 1 i = int(data[index]) index += 1 unpaid_count = 0 unpaid_total = 0 for _ in range(i): amount, status = data[index].split() amount = int(amount) index += 1 if status == \\"unpaid\\": unpaid_count += 1 unpaid_total += amount results.append(dep_name) results.append(str(unpaid_count)) results.append(str(unpaid_total)) if budget >= unpaid_total: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem description: A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"A man, a plan, a canal, Panama\\" is a palindrome, while \\"Hello, World!\\" is not. Given a string, you need to determine if the sequence is a palindrome. Input: Each case is specified on a single line with a string s that can contain letters, digits, spaces, and punctuation. The string is limited to 100 characters in length. The last case is followed by a line with the single word \\"END\\". Output: For each test case, your program must print a single line of the form: YES or NO depending on whether the given sequence is a palindrome or not. Constraints: - Ignore spaces, punctuation, and capitalization. - The input string length is at most 100 characters. Example: Input: A man, a plan, a canal, Panama Hello, World! END Output: YES NO","solution":"import re def is_palindrome(s): Function to check if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1] def palindrome_checker(input_strings): results = [] for s in input_strings: if s == \\"END\\": break if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Pat has two stacks of plates: stack A and stack B. Each plate has a positive integer written on it. Pat likes rearranging the plates by moving them between the stacks and to/from the table. However, there\'s a rule: Pat can only move the top plate from one stack to the other stack or the table. Moving a plate is counted as an operation. Pat wants to completely empty one of the stacks (either A or B) using the minimum number of operations and ending with all plates on the table. Help Pat determine the minimum number of operations needed to achieve this. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains two integers n and m (1 le n, m le 100) — the number of plates in stack A and stack B, respectively. The second line contains n positive integers A_1, A_2, ldots, A_n (1 le A_i le 1000) — the values on the plates in stack A from top to bottom. The third line contains m positive integers B_1, B_2, ldots, B_m (1 le B_i le 1000) — the values on the plates in stack B from top to bottom. -----Output----- For each test case, print one integer — the minimum number of operations required to empty one of the stacks. -----Examples----- Input 3 5 4 1 2 3 4 5 6 7 8 9 3 3 1 4 2 2 3 1 1 4 1 1 2 3 4 Output 5 3 4 -----Explanation----- In the first test case, Pat can start by moving all plates from stack A (5 operations) or all plates from stack B (4 operations); the minimum number of operations would be 4. In the second test case, Pat can move all plates from stack A (3 operations) or stack B (3 operations); both options need the same number of operations. In the third test case, Pat needs to move 1 plate from stack A (1 operation), or 4 plates from stack B (4 operations); the minimum number of operations would be 1.","solution":"def minimum_operations_to_empty_stack(t, test_cases): results = [] for case in test_cases: n, m = case[0] plates_A = case[1] plates_B = case[2] min_operations = min(n, m) results.append(min_operations) return results"},{"question":"In a game, there are N levels, each with a certain number of enemies. You are given an array B of size N where B[i] represents the number of enemies in the i-th level. You have been given a special power that allows you to skip exactly one level during the game. You want to find out the minimum total number of enemies you will have to fight if you play all levels except one. Example 1: Input: N = 5 B[] = {1, 2, 3, 4, 5} Output: 10 Explanation: You can skip the last level with 5 enemies. The total number of enemies you will fight is 1 + 2 + 3 + 4 = 10 Example 2: Input: N = 3 B[] = {7, 3, 5} Output: 8 Explanation: You can skip the first level with 7 enemies. The total number of enemies you will fight is 3 + 5 = 8 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMinEnemies() which takes the array B[] and its size N as inputs and returns the minimum total number of enemies you will have to fight. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ B[i] ≤ 10^6","solution":"def findMinEnemies(N, B): Returns the minimum total number of enemies you will have to fight if you play all levels except one. :param N: int: The number of levels :param B: list: List containing number of enemies in each level :return: int: minimum total number of enemies you have to fight total_enemies = sum(B) max_enemies_in_one_level = max(B) return total_enemies - max_enemies_in_one_level"},{"question":"Your task is to implement a function `find_duplicate` that takes a list of integers as input and returns the first duplicate value it encounters. The function should find this value with O(n) time complexity using O(n) extra space. If no duplicates are found, return -1. Your function should be defined as follows: ```python def find_duplicate(nums): # Your code here ``` **Input:** - A list of integers, `nums` (0 ≤ len(nums) ≤ 10^5). **Output:** - An integer representing the first duplicate value encountered. If no duplicates are found, return -1. **Example:** ```python print(find_duplicate([2, 3, 1, 2, 4, 3])) # Output should be 2 print(find_duplicate([1, 2, 3, 4, 5])) # Output should be -1 ```","solution":"def find_duplicate(nums): Returns the first duplicate value encountered in the list of integers \'nums\'. If no duplicates are found, return -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Write a function that determines if a string contains all unique characters. The function should not use additional data structures. Input The input consists of a single string s (1 ≤ length of s ≤ 1000), containing only lowercase letters. Output Output \\"YES\\" if the string contains all unique characters, otherwise, output \\"NO\\". Examples Input abcdef Output YES Input aabbcc Output NO","solution":"def is_unique_characters(s): Returns \\"YES\\" if the string contains all unique characters, otherwise returns \\"NO\\". # Sort the string and then check adjacent characters sorted_s = sorted(s) for i in range(1, len(sorted_s)): if sorted_s[i] == sorted_s[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"A farmer has a field divided into a grid of m rows and n columns. Each cell of the grid may either have a plant or be empty. The farmer wants to water all the plants in the field, but he only has one water hose. The water hose can water an entire row or column in one action, distributing water evenly to any plants present. However, the hose can only be used a limited number of times, and each use can only either water a row or a column, not both at the same time. Create a program that helps to determine the minimum number of hose uses required to water all the plants in the grid. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid, respectively. The next m lines contain n characters each (\'P\' for a plant and \'.\' for an empty cell) describing the field. Output Print the minimum number of water hose uses required to water all plants in the field. If it is not possible to water all plants, print -1. Example Input 4 5 P..P. ..P.. P..P. ..P.. Output 4 Input 3 3 P.P .P. P.P Output 3 Input 2 2 PP P. Output 3 Note In the first example, the minimum number of hose uses is 4: 1. Water the second row (`..P..`). 2. Water the fourth row (`..P..`). 3. Water the first column (`P...`). 4. Water the fourth column (`...P`). In the second example, you can water the entire first column, the entire third column, and the entire second row with three hose uses. In the third example, you need three uses to ensure all plants are watered: each of the first column, second row, and first row separately.","solution":"def min_hose_uses(m, n, field): rows = [] cols = [] # Track which rows and columns contain any plants (\'P\') for i in range(m): if \'P\' in field[i]: rows.append(i) for j in range(n): if any(field[i][j] == \'P\' for i in range(m)): cols.append(j) # If no plants are present, return immediately if not rows and not cols: return 0 # Minimum number of hose uses required would be the maximum of unique rows or unique columns needed to be watered return max(len(rows), len(cols))"},{"question":"A robot is placed on an infinite 2D grid, starting at position (0, 0). The robot can be instructed to move to adjacent squares using a series of commands. The commands are given as a string consisting of the characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each command moves the robot by one unit in the respective direction. You need to determine the Manhattan distance from the robot\'s final position to the origin (0, 0) after executing all the commands. Manhattan distance is defined as the absolute value of the difference in x-coordinates plus the absolute value of the difference in y-coordinates. -----Constraints----- - 1 ≤ length of command string ≤ 10^5 - The command string consists of only \'U\', \'D\', \'L\', and \'R\'. -----Input----- Input is given from Standard Input in the following format: command_string -----Output----- Print the Manhattan distance from the robot\'s final position to the origin after all the commands. -----Sample Input----- RUULDD -----Sample Output----- 2 Explanation: - Initial position: (0, 0) - After \'R\': (1, 0) - After \'U\': (1, 1) - After \'U\': (1, 2) - After \'L\': (0, 2) - After \'D\': (0, 1) - After \'D\': (0, 0) Manhattan distance back to the origin: |0 - 0| + |0 - 0| = 0.","solution":"def robot_manhattan_distance(commands): Returns the Manhattan distance from the robot\'s final position to the origin (0, 0) after executing all the commands. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return abs(x) + abs(y)"},{"question":"Dr. Frank is working on a teleportation experiment. He has set up two teleportation anchors A and B at fixed positions on a 2D Cartesian plane. To test the efficiency of teleportation between any two points, he has to determine the shortest path a person can take if teleportation between anchors is allowed. Given the coordinates of the start point (x1, y1), end point (x2, y2), and the positions of the anchors A (Ax, Ay) and B (Bx, By), compute the minimum distance the person would need to travel to get from the start point to the end point, making one teleportation if necessary. Teleportation between anchors is instantaneous. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of one line containing eight space-separated integers x1, y1, x2, y2, Ax, Ay, Bx, By. ------ Output ------ For each test case, output a single line containing the minimum distance the person needs to travel. The answer should be accurate to six decimal places. ------ Constraints ------ 1 ≤ T ≤ 1000 -1000 ≤ x1, y1, x2, y2, Ax, Ay, Bx, By ≤ 1000 ------ Sample Input 1 ------ 3 0 0 10 0 3 4 7 4 0 0 1 1 2 2 3 3 -1 -1 1 1 0 2 -2 -2 ------ Sample Output 1 ------ 10.000000 1.414214 2.828427 ------ Explanation 1 ------ Example case 1: The person can travel directly from (0, 0) to (10, 0), which gives a distance of 10. Example case 2: The shortest path is a direct line from (0, 0) to (1, 1) without using the teleportation. Example case 3: There is no efficient way to use teleportation, the shortest distance is from (-1, -1) to (1, 1) directly.","solution":"import math def distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def minimum_distance(x1, y1, x2, y2, Ax, Ay, Bx, By): direct_distance = distance(x1, y1, x2, y2) # Using teleportation from A to B via_teleportation1 = distance(x1, y1, Ax, Ay) + distance(Bx, By, x2, y2) # Using teleportation from B to A via_teleportation2 = distance(x1, y1, Bx, By) + distance(Ax, Ay, x2, y2) return min(direct_distance, via_teleportation1, via_teleportation2) def teleportation_experiment(test_cases): results = [] for case in test_cases: x1, y1, x2, y2, Ax, Ay, Bx, By = case result = minimum_distance(x1, y1, x2, y2, Ax, Ay, Bx, By) results.append(f\\"{result:.6f}\\") return results"},{"question":"A group of friends decided to explore a rectangular grid city of size n x m. Each cell in the grid represents a building, and they can walk from one building to another grid cell which is directly adjacent in one of the four directions (left, right, up, down). They start at a specific building and want to find the shortest path to another specific building. Some buildings in the city may be blocked, meaning they cannot be entered or crossed. Your task is to find the shortest path from the starting building to the destination building, or determine if the destination is unreachable. INPUT: The input consists of multiple test cases. The first line contains an integer T, where T represents the number of test cases. For each test case, the input consists of: 1. Two integers n and m, representing the dimensions of the city grid. 2. Followed by n lines each containing m characters which can be: - \'.\' (a walkable building) - \'#\' (a blocked building) - \'S\' (the starting building) - \'D\' (the destination building) OUTPUT: For each test case, output the length of the shortest path from \'S\' to \'D\', if such a path exists. If the destination is unreachable, print \\"-1\\". CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ n, m ≤ 1000 SAMPLE INPUT 2 4 4 S... .. ..#D .... 5 5 S.... # # D # SAMPLE OUTPUT 5 -1","solution":"from collections import deque def shortest_path(grid, start, end, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False]*m for _ in range(n)] queue = deque() queue.append((start[0], start[1], 0)) visited[start[0]][start[1]] = True while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def solve(T, test_cases): results = [] for i in range(T): n, m = test_cases[i][0] grid = test_cases[i][1] start = end = None for r in range(n): for c in range(m): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'D\': end = (r, c) if not start or not end: results.append(-1) else: results.append(shortest_path(grid, start, end, n, m)) return results"},{"question":"Write a function that simulates a vending machine which dispenses items based on the exact change provided. The vending machine contains `N` different items, each with a specific cost and stock availability. The function should process a list of purchase attempts and output the result of each attempt: \\"SUCCESS\\" if the purchase was successful and the item was dispensed, or \\"FAIL\\" if the purchase was unsuccessful due to insufficient funds, insufficient stock, or the item not existing. Input - The first line contains an integer `N`, the number of different items (1 ≤ N ≤ 1000). - The next `N` lines each contain a string `item_name`, an integer `cost` (1 ≤ cost ≤ 1000), and an integer `stock` (1 ≤ stock ≤ 1000), representing the item\'s name, its cost, and the number of items available, respectively. - The next line contains an integer `M`, the number of purchase attempts (1 ≤ M ≤ 10000). - The next `M` lines each contain a string `item_name` and an integer `amount_paid` (1 ≤ amount_paid ≤ 100000), representing the item the customer wants to buy and the amount of money they provided. Output - For each purchase attempt, output either \\"SUCCESS\\" or \\"FAIL\\". Example Input 4 Coke 25 100 Pepsi 35 50 Water 15 200 Juice 45 30 5 Coke 25 Water 10 Pepsi 35 Juice 60 Chocolate 50 Output SUCCESS FAIL SUCCESS SUCCESS FAIL","solution":"def vending_machine(N, items, M, attempts): Simulates a vending machine dispensing items based on the exact change provided. Args: N: int - the number of different items in the vending machine. items: list of tuples - list containing (item_name, cost, stock) for each item. M: int - the number of purchase attempts. attempts: list of tuples - list containing (item_name, amount_paid) for each attempt. Returns: list of str - list containing \\"SUCCESS\\" or \\"FAIL\\" for each purchase attempt. inventory = {item[0]: {\'cost\': item[1], \'stock\': item[2]} for item in items} results = [] for attempt in attempts: item_name, amount_paid = attempt if item_name in inventory: if amount_paid >= inventory[item_name][\'cost\'] and inventory[item_name][\'stock\'] > 0: inventory[item_name][\'stock\'] -= 1 results.append(\\"SUCCESS\\") else: results.append(\\"FAIL\\") else: results.append(\\"FAIL\\") return results # Sample Input N = 4 items = [ (\\"Coke\\", 25, 100), (\\"Pepsi\\", 35, 50), (\\"Water\\", 15, 200), (\\"Juice\\", 45, 30) ] M = 5 attempts = [ (\\"Coke\\", 25), (\\"Water\\", 10), (\\"Pepsi\\", 35), (\\"Juice\\", 60), (\\"Chocolate\\", 50) ] # Sample Output print(vending_machine(N, items, M, attempts)) # [\\"SUCCESS\\", \\"FAIL\\", \\"SUCCESS\\", \\"SUCCESS\\", \\"FAIL\\"]"},{"question":"Write a program that calculates the shortest path for a knight in a standard 8x8 chessboard from a given starting position to a target position. The knight can move to any of the eight positions as per standard chess rules. Constraints * The input positions (x_1, y_1) and (x_2, y_2) are in the range 1 leq x_1, x_2, y_1, y_2 leq 8 Input The input is given in the following format. x_1; y_1 x_2; y_2 x_1 and y_1 represent the starting position of the knight. x_2 and y_2 represent the target position. All input values are given in integers. Output Output the minimum number of moves required for the knight to reach the target position from the starting position. Examples Input 1 1 8 8 Output 6 Input 4 5 4 5 Output 0","solution":"from collections import deque def is_within_bounds(x, y): return 1 <= x <= 8 and 1 <= y <= 8 def min_knight_moves(start_x, start_y, end_x, end_y): if start_x == end_x and start_y == end_y: return 0 moves = [ (2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1) ] queue = deque([(start_x, start_y, 0)]) visited = set((start_x, start_y)) while queue: curr_x, curr_y, steps = queue.popleft() for dx, dy in moves: new_x, new_y = curr_x + dx, curr_y + dy if new_x == end_x and new_y == end_y: return steps + 1 if is_within_bounds(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, steps + 1)) return -1 # If there\'s no valid path, which shouldn\'t happen on a standard chessboard"},{"question":"In a software development team, the team lead assigns tasks to developers each week based on their availability. Each developer is expected to complete a minimum of 5 tasks per week to maintain a certain productivity standard. Given the number of tasks completed by a developer over 6 weeks as T1, T2, T3, T4, T5, and T6, determine how many weeks the developer met or exceeded the productivity standard. ------ Input Format ------ There is a single line of input, with 6 integers T1, T2, T3, T4, T5, and T6. These are the number of tasks completed by the developer in each of the 6 weeks. ------ Output Format ------ Output a single integer in a single line - the number of weeks in which the developer completed at least 5 tasks. ------ Constraints ------ 1 ≤ T1, T2, T3, T4, T5, T6 ≤ 50 ----- Sample Input 1 ------ 6 7 4 5 8 3 ----- Sample Output 1 ------ 4 ----- explanation 1 ------ The developer completed at least 5 tasks in the first, second, fourth, and fifth weeks. Hence, the number of weeks in which the developer met the productivity standard is 4. ----- Sample Input 2 ------ 2 2 1 4 3 1 ----- Sample Output 2 ------ 0 ----- explanation 2 ------ The developer failed to meet the productivity standard of completing at least 5 tasks in any of the weeks. Hence, the number of weeks in which the developer met the productivity standard is 0. ----- Sample Input 3 ------ 10 15 20 25 30 35 ----- Sample Output 3 ------ 6 ----- explanation 3 ------ The developer completed at least 5 tasks in all the six weeks. Hence, the number of weeks in which the developer met the productivity standard is 6. ----- Sample Input 4 ------ 5 5 5 5 5 5 ----- Sample Output 4 ------ 6 ----- explanation 4 ------ The developer completed exactly 5 tasks in all the six weeks. Hence, the number of weeks in which the developer met the productivity standard is 6.","solution":"def count_productive_weeks(T1, T2, T3, T4, T5, T6): Returns the number of weeks the developer met or exceeded the productivity standard of 5 tasks. tasks = [T1, T2, T3, T4, T5, T6] productive_weeks = sum(1 for tasks_completed in tasks if tasks_completed >= 5) return productive_weeks"},{"question":"Write a function that takes a string representing a mathematical expression involving addition and subtraction of single-digit integers and evaluates it. The function should handle the possibility of whitespace characters between the numbers and operators. The input string will be a valid mathematical expression and will only consist of single-digit non-negative integers, plus (\'+\'), minus (\'-\') symbols, and whitespace characters. Examples: ``` \\"3+4-2\\" → 5 \\" 1 + 2 - 3 \\" → 0 \\"9- 6 + 3\\" → 6 \\"5 + 6 - 2 + 7 - 1\\" → 15 ``` Constraints: - The input string will not contain any invalid characters. - The input string length will not exceed 100 characters.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression involving the addition and subtraction of single-digit integers. # Removing any spaces from the expression expression = expression.replace(\' \', \'\') # Initialize result and sign total = 0 sign = 1 i = 0 while i < len(expression): char = expression[i] if char.isdigit(): total += sign * int(char) i += 1 elif char == \'+\': sign = 1 i += 1 elif char == \'-\': sign = -1 i += 1 return total"},{"question":"Alice is training to become a marathon runner. Her initial stamina level can be represented as an integer S. Each day, Alice follows a training regimen that affects her stamina: - Running increases her stamina by R units each day. - Resting decreases her stamina by L units each day. Given the number of days D Alice will follow her training regimen, calculate her stamina at the end of those D days. Note that her stamina level can be negative. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing four integers S, R, L, and D — the initial stamina, the stamina gained per day from running, the stamina lost per day from resting, and the number of days. ------ Output Format ------ For each test case, output in a single line the final stamina level at the end of D days. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ S, R, L, D ≤ 10^{4} ------ Sample Input 1 ------ 3 50 10 5 7 100 20 30 4 200 25 10 10 ------ Sample Output 1 ------ 85 80 375 ------ Explanation 1 ------ Test case 1: Alice\'s initial stamina is 50. Each day, she gains 10 units from running and loses 5 units from resting, thus netting an increase of 5 units per day. After 7 days, her stamina will be 50 + 5 times 7 = 85. Test case 2: Alice\'s initial stamina is 100. Each day, she gains 20 units from running and loses 30 units from resting, thus netting a decrease of 10 units per day. After 4 days, her stamina will be 100 - 10 times 4 = 80. Test case 3: Alice\'s initial stamina is 200. Each day, she gains 25 units from running and loses 10 units from resting, thus netting an increase of 15 units per day. After 10 days, her stamina will be 200 + 15 times 10 = 350.","solution":"def calculate_final_stamina(S, R, L, D): Calculates the final stamina after D days given initial stamina S, stamina gained per day R, and stamina lost per day L. net_daily_change = R - L final_stamina = S + (net_daily_change * D) return final_stamina def process_test_cases(T, test_cases): results = [] for case in test_cases: S, R, L, D = case result = calculate_final_stamina(S, R, L, D) results.append(result) return results"},{"question":"A large game board consists of a grid with n rows and m columns. Each cell is either empty or contains a wall. The coordinates of the top-left cell of the grid are (1, 1) and the coordinates of the bottom-right cell are (n, m). You are controlling a robot situated at (1, 1), and you want it to move to the cell (n, m). The robot can move up, down, left, or right, but it cannot pass through walls. Additionally, the robot can use a special ability to make exactly one wall disappear; however, this ability can only be used once. Write a program to determine the minimum number of moves the robot needs to go from (1, 1) to (n, m). If it is impossible for the robot to reach the target cell even after removing one wall, return -1. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 500) denoting the number of rows and columns respectively. The next n lines each contain m characters where \'.\' represents an empty cell and \'#\' represents a wall. Output: Print a single integer — the minimum number of moves the robot needs to go from (1, 1) to (n, m) or -1 if it is impossible. Example: Input: 5 6 . . . # . . . # . # . # . # . . . . . # # # . # . . . . . . Output: 9 Explanation: In the example, the robot starts at (1, 1), and it can remove the wall at (3, 2) to find the optimal path to the target. The optimal path is: (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1) -> (5, 2) -> (5, 3) -> (5, 4) -> (5, 5) -> (5, 6). If removing one wall cannot make a valid path, the function returns -1.","solution":"from collections import deque def minimum_moves_to_reach_target(n, m, grid): def is_valid_move(x, y, visited): return 0 <= x < n and 0 <= y < m and not visited[x][y] and grid[x][y] == \'.\' def bfs(start_x, start_y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(start_x, start_y, 0, False)]) # (x, y, distance, wall removed) visited[start_x][start_y] = True while queue: x, y, dist, wall_removed = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny, visited): visited[nx][ny] = True queue.append((nx, ny, dist + 1, wall_removed)) elif 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'#\' and not wall_removed: # We can remove this wall and move through it queue.append((nx, ny, dist + 1, True)) visited[nx][ny] = True return -1 return bfs(0, 0)"},{"question":"You\'ve just been hired as a software developer and your first task is to help with data analysis for a sales department. The department maintains sales data which includes records of each sale made. Each record contains a product ID, a timestamp of the sale, and the units sold. Your goal is to implement a function that calculates the total units sold for each product within a given time range. -----Input----- The input format is as follows: 1. The first line contains an integer N, the number of sales records, with 1 leq N leq 10^6. 2. The following N lines each contain three space-separated values: a product ID (a positive integer), a timestamp (an integer representing Unix time, i.e., seconds since Jan 1, 1970), and the units sold (a non-negative integer). 3. The next line contains two space-separated integers representing the start and end of the time range (inclusive). -----Output----- Output the total units sold for each product ID within the given time range sorted by product ID. Each line of the output should contain two space-separated values: the product ID and the total units sold for that product within the specified time range. -----Examples----- Sample Input 1: 5 1 1618310400 5 2 1618310500 3 1 1618310600 2 3 1618310700 8 2 1618310800 4 1618310400 1618310800 Sample Output 1: 1 7 2 7 3 8 Sample Input 2: 3 1 1618310400 10 2 1618310500 5 1 1618310600 5 1618310400 1618310500 Sample Output 2: 1 10 2 5 Sample Input 3: 4 1 1618310300 7 2 1618310400 10 1 1618310500 3 3 1618310600 6 1618310500 1618310600 Sample Output 3: 1 3 3 6","solution":"def total_units_sold(n, records, start_time, end_time): Calculates the total units sold for each product within a given time range. Args: n: int - Number of sales records. records: List[Tuple[int, int, int]] - each tuple contains (product_id, timestamp, units_sold) start_time: int - Start of time range (inclusive) end_time: int - End of time range (inclusive) Returns: List[Tuple[int, int]] - each tuple contains (product_id, total_units_sold) sorted by product_id. from collections import defaultdict sales = defaultdict(int) for product_id, timestamp, units_sold in records: if start_time <= timestamp <= end_time: sales[product_id] += units_sold result = sorted(sales.items()) return result # Example usage: # n = 5 # records = [(1, 1618310400, 5), (2, 1618310500, 3), (1, 1618310600, 2), (3, 1618310700, 8), (2, 1618310800, 4)] # start_time = 1618310400 # end_time = 1618310800 # print(total_units_sold(n, records, start_time, end_time)) # Output should be: [(1, 7), (2, 7), (3, 8)]"},{"question":"Consider a list of integers where some values might be duplicated. We call a value a \\"special value\\" if it appears exactly \'k\' times in the list. Write a function `special_values(lst, k)` that returns a list of all the special values in sorted order. # Function Signature ```python def special_values(lst: List[int], k: int) -> List[int]: ``` # Input - `lst`: A list of integers (1 ≤ len(lst) ≤ 10^4, -10^4 ≤ lst[i] ≤ 10^4). - `k`: An integer indicating the exact number of times an element needs to appear to be considered special (1 ≤ k ≤ 10^4). # Output - A sorted list of integers that appear exactly `k` times in `lst`. # Example ```python special_values([4, 5, 6, 7, 7, 4, 4, 8, 6, 6, 6, 5], 2) == [5, 7] special_values([10, 20, 20, 10, 30, 30, 40, 50, 50, 10], 2) == [20, 30, 50] special_values([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1) == [1] special_values([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5] special_values([7, 8, 9, 9, 9, 7, 8, 9, 7], 1) == [] ``` # Note - Ensure your solution has an efficient approach, as the maximum input size is large. - If no elements appear exactly `k` times, return an empty list.","solution":"from typing import List from collections import Counter def special_values(lst: List[int], k: int) -> List[int]: This function returns a sorted list of integers that appear exactly k times in the input list \'lst\'. # Count the occurrences of each element in the list count = Counter(lst) # Collect all elements that occur exactly k times result = [num for num, cnt in count.items() if cnt == k] return sorted(result)"},{"question":"In a distant kingdom, the currency system is based on magical coins. Each magical coin of value `v` can be split into `v` identical coins, each with value `1`. People can only split a coin if it has value greater than `1`. Princess Lila has `n` magical coins and wants to generate exactly `m` coins using the minimal number of splits possible. Given two integers, `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 100,000), determine the minimum number of splits required to achieve exactly `m` coins from the initial `n` magical coins of value `1`. If it is not possible, return `-1`. Input The first line contains two integers `n` and `m`. Output Output the minimum number of splits required, or `-1` if it is impossible to obtain exactly `m` coins. Examples Input 4 10 Output 6 Input 3 5 Output 2 Input 5 1 Output -1 Explanation In the first example, you can split one coin into 1 coin (no change), and the other three coins into three coins each, giving you a total of 3 * 3 + 1 = 10 coins in 6 splits. In the second example, you can split two of the initial three coins into two coins each, and you end up with a total of 3 coins + 2 coins = 5 coins in 2 splits. In the third example, you cannot reduce the number of coins, thus it\'s impossible to get exactly `1` coin from `5`. Consider edge cases and the constraints to ensure your solution is efficient and correct.","solution":"def min_splits(n, m): Returns the minimum number of splits required to obtain exactly m coins from n initial coins. If it is not possible, return -1. if m < n: # impossible to reduce the number of coins return -1 splits = 0 while n < m: # We need m - n extra coins extra_coins_needed = m - n # Find out how many coins we can split from one coin to get closest to m split_coin_value = min(extra_coins_needed, n) n += split_coin_value splits += split_coin_value return splits"},{"question":"Given an array of integers where each element represents a position on a numeric line, we want to count the number of distinct sets of three integers (triplets) that can form a Pythagorean triplet. A Pythagorean triplet consists of three positive integers a, b, and c such that a^2 + b^2 = c^2. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the array. The second line contains n integers separated by spaces, where each integer x_i (1 ≤ x_i ≤ 10000) represents a position on the numeric line. Output The output should be a single integer — the number of distinct Pythagorean triplets in the array. Examples Input 5 3 1 4 6 5 Output 1 Input 6 10 4 6 12 5 8 Output 1 Input 4 1 2 3 4 Output 0 Note In the first example, the array [3, 1, 4, 6, 5] contains one Pythagorean triplet: (3, 4, 5). In the second example, the array [10, 4, 6, 12, 5, 8] contains one Pythagorean triplet: (6, 8, 10).","solution":"def count_pythagorean_triplets(arr): Returns the number of distinct sets of three integers that form a Pythagorean triplet. Parameters: arr (list of int): A list of integers Returns: int: The number of Pythagorean triplets arr_squared = [x*x for x in arr] arr_squared_set = set(arr_squared) count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr_squared[i] + arr_squared[j] in arr_squared_set: count += 1 return count"},{"question":"A robot is moving in a 2D grid starting from the origin (0, 0). The robot can move in four possible directions (\'U\', \'D\', \'L\', \'R\') which represent up, down, left, and right respectively. The robot\'s path is represented as a string consisting of these characters. Due to a malfunction, the robot can lose alignment in its path. Therefore, we need to determine if a given path of the robot brings it back to the origin after executing all the movements represented in the path. Write a function `isRobotBackToOrigin(path)` that takes a single string `path` as an argument and returns `True` if the robot is back to the origin after following the given path, or `False` otherwise. # Function Signature ```python def isRobotBackToOrigin(path: str) -> bool: ``` # Input - The input string `path` represents the path the robot follows and contains only the characters \'U\', \'D\', \'L\', \'R\'. - The length of the string `path` is between 1 and 10^4. # Output - The function should return a boolean value `True` if the robot ends up at the origin (0, 0) after following the path, and `False` otherwise. # Example ```python # Example 1 path = \\"UD\\" print(isRobotBackToOrigin(path)) # Output: True, because the robot moves up and down, so it returns to origin # Example 2 path = \\"LL\\" print(isRobotBackToOrigin(path)) # Output: False, as the robot moves left twice and doesn\'t return to the origin # Example 3 path = \\"RRDD\\" print(isRobotBackToOrigin(path)) # Output: False, the robot ends up at (2, -2) so it\'s not at the origin # Example 4 path = \\"LDRRUL\\" print(isRobotBackToOrigin(path)) # Output: True, the robot moves in a way that brings it back to the origin ```","solution":"def isRobotBackToOrigin(path: str) -> bool: Determines if the robot returns to the origin after following the given path. Args: path (str): A string representing the path the robot follows, consisting of characters \'U\', \'D\', \'L\', \'R\'. Returns: bool: True if the robot ends up at the origin, False otherwise. x, y = 0, 0 for move in path: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Alice has found a mysterious ancient book that contains various sequences of integers. Each sequence is written on a separate page, and Alice can see all the integers in a sequence at once. Each integer in a sequence indicates a magical spell\'s energy level. Alice has a special magical spell that allows her to either take or discard each individual spell\'s energy in a sequence to maximize the total energy she can gather. However, there is a restriction: she can only take spells that follow a strictly increasing order in the sequence. Alice needs your help to find the maximum possible sum of the energies of the spells she can gather from each sequence. Input: The first line contains T, the number of test cases. The first line of each test case contains an integer N, the number of spells in the sequence. The next line contains N integers which represent the energy levels of the spells in the sequence. Output: For each test case, output a line containing the maximum sum of energies Alice can gather from the given sequence of spells. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 50 1 ≤ spell energy ≤ 1000 SAMPLE INPUT 2 5 10 20 30 40 50 6 5 10 5 20 15 40 SAMPLE OUTPUT 150 75 Explanation: In the first test case, Alice can take all the spells since the sequence 10, 20, 30, 40, 50 is already strictly increasing, hence the sum is 150. In the second test case, Alice can take the spells with energies 5, 10, 20, and 40, resulting in a sum of 75 (since taking 10, 20, 40 has higher total energy than any other valid increasing subsequence).","solution":"def max_energy_sum(T, test_cases): def max_increasing_subsequence_sum(sequence): if not sequence: return 0 n = len(sequence) dp = sequence[:] for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + sequence[i]) return max(dp) results = [] for case in test_cases: N, sequence = case results.append(max_increasing_subsequence_sum(sequence)) return results"},{"question":"You are given an infinite corridor with doors on both sides, numbered consecutively from 1 onwards. Each door can either be open or closed. At the beginning, Dr. X, our protagonist, starts at door 1 on the left side of the corridor. He performs a certain sequence of operations to determine which doors should be left open and which should be closed. Dr. X performs the following actions: 1. He moves to a door and checks if it is open or closed. 2. If the door is open, he leaves it as is. 3. If the door is closed, he opens it and toggles the state of the opposite door (on the same side of the corridor and same distance from the beginning). The door toggling pattern is determined by the following logic: - If the door number is even, the door on the opposite side of the corridor (same distance) is toggled. - If the door number is odd, three doors ahead on the same side (if they exist) are toggled. Each operation takes exactly 1 second, whether it is checking, opening, or toggling another door. Dr. X wants to know how many doors will be open after he has performed operations on the first k doors. -----Input----- The only line of input contains a single integer k (1 ≤ k ≤ 10^6), representing the number of doors Dr. X will operate on. -----Output----- Print one integer — the number of doors that will remain open after Dr. X has performed operations on the first k doors. -----Examples----- Input 1 Output 1 Input 2 Output 2 Input 5 Output 3 -----Note----- In the first sample, Dr. X checks the first door, which is closed. He opens it and there is no door on the opposite side to toggle, so it remains open. In the second sample, Dr. X opens the second door and toggles the 2nd door on the opposite side (skipping doors 1 and 3). In the fifth sample, Dr. X opens and toggles doors according to the pattern, ending with the state where three doors remain open.","solution":"def doors_remaining_open(k): Determine how many doors remain open after k operations. Parameters: k (int): Number of doors Dr. X operates on. Returns: int: Number of doors that remain open. # All doors that are \\"perfect squares\\" will remain open. # The number of perfect squares <= k is the integer part of the square root of k import math return int(math.sqrt(k))"},{"question":"A company is implementing a secure file transfer protocol where files are transmitted in chunks over a network. Each chunk has a size, and there is a maximum chunk size that can be sent in a single transmission. To enhance security, the company wants to ensure that the transmitted chunks\' sizes follow a property such that they are non-increasing over the transmissions. Given a file represented by an array of chunk sizes and the maximum allowed chunk size, determine if it is possible to divide the file into a sequence of transmissions such that each transmission\'s chunk sizes are in non-increasing order and do not exceed the maximum chunk size. Write a function `secure_file_transfer(chunks, max_size)` that receives an array of integers `chunks` representing the size of each file chunk, and an integer `max_size` representing the maximum size of a chunk that can be transmitted. The function should return `True` if it is possible to divide the file as described, and `False` otherwise. # Function Signature ```python def secure_file_transfer(chunks: List[int], max_size: int) -> bool: ``` # INPUT - The first parameter is an array `chunks` where 1 ≤ len(chunks) ≤ 1000 and 1 ≤ chunks[i] ≤ 10^5. - The second parameter is an integer `max_size` where 1 ≤ max_size ≤ 10^5. # OUTPUT - The function should return a boolean indicating whether the file can be divided into non-increasing transmissions. # EXAMPLES Example 1 ```python chunks = [4, 3, 2, 2, 1] max_size = 4 assert secure_file_transfer(chunks, max_size) == True ``` Explanation: The chunks are already in non-increasing order and none of them exceed the maximum size. Example 2 ```python chunks = [6, 5, 5, 5, 3] max_size = 5 assert secure_file_transfer(chunks, max_size) == False ``` Explanation: The first chunk size exceeds the maximum allowed size. Example 3 ```python chunks = [5, 5, 3, 2, 1] max_size = 5 assert secure_file_transfer(chunks, max_size) == True ``` Explanation: Each chunk is within the allowed size and they are non-increasing.","solution":"def secure_file_transfer(chunks, max_size): Determines if a list of chunk sizes can be transmitted following a non-increasing order and does not exceed the maximum allowed chunk size. for i in range(len(chunks)): if chunks[i] > max_size: return False if i > 0 and chunks[i] > chunks[i - 1]: return False return True"},{"question":"Implement a function that simulates the \'rotate\' operation for n x n matrices. The function should rotate the given matrix 90 degrees clockwise in place. Example: ``` Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Note: The function should modify the input matrix directly and not return anything.","solution":"def rotate(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. :param matrix: List[List[int]] n x n matrix to be rotated n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for row in matrix: row.reverse()"},{"question":"A company is organizing a coding contest and wants to assign participants to teams. Each team must have exactly k participants, and each participant must be in exactly one team. It\'s possible that some participants will not be assigned to any team if the total number of participants is not a multiple of k. Your task is to group the participants into the maximum possible number of teams and identify the participants who will not be assigned to any team. Input The first line of input contains two integers n and k (1 ≤ n, k ≤ 10^5). n is the number of participants, and k is the number of participants required for each team. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), which represent the skill levels of the participants. Each skill level is unique. Output The first line should contain one integer m — the maximum number of teams that can be formed. The second line should contain m*k distinct integers representing the skill levels of the participants who will be assigned to teams, in any order. If there are multiple correct answers, print any of them. The third line should contain (n - m*k) integers representing the skill levels of the participants who will not be assigned to any team. If all participants are assigned to teams, print an empty line. If there are multiple correct answers, print any of them. Examples Input 8 3 7 1 5 9 4 6 2 3 Output 2 7 1 5 9 4 6 3 2 Input 7 2 12 7 4 1 5 9 6 Output 3 12 7 4 1 5 9 6 Note In the first example, we have 8 participants and each team requires 3 participants. We can form 2 teams: one possible grouping is (7, 1, 5) and (9, 4, 6), leaving (3, 2) unassigned. There are multiple valid ways to form the teams. In the second example, we have 7 participants and each team requires 2 participants. We can form 3 teams: one possible grouping is (12, 7), (4, 1), and (5, 9), leaving (6) unassigned. Again, there are multiple valid ways to form the teams.","solution":"def assign_teams(n, k, skill_levels): Assigns participants to teams of k participants each, if possible. Args: n: int - Number of participants. k: int - Number of participants required for each team. skill_levels: list - List of integers representing the skill levels of the participants. Returns: tuple: - int: Maximum number of teams formed. - list: Skill levels assigned to teams. - list: Skill levels not assigned to any team. skill_levels.sort() max_teams = n // k assigned = skill_levels[:max_teams * k] not_assigned = skill_levels[max_teams * k:] return (max_teams, assigned, not_assigned)"},{"question":"You are tasked with simulating a traffic control system for a one-lane bridge with a limited weight capacity. Vehicles, denoted by their weights, arrive at the bridge and can only cross if the combined weight of the vehicles currently on the bridge does not exceed the bridge\'s weight limit. Once a vehicle gets on the bridge, it will take exactly t seconds to cross it and vacate the bridge. Your program needs to determine the entry times of each vehicle onto the bridge, assuming vehicles arrive sequentially and wait their turn in the order of arrival. -----Input----- The first line of input contains two integers, n (1 ≤ n ≤ 1000), the number of vehicles, and w (1 ≤ w ≤ 10000), the weight limit of the bridge. The second line contains n integers separated by space, v_1, v_2, ..., v_{n} (1 ≤ v_{i} ≤ 10000), representing the weights of the vehicles. The third line contains a single integer, t (1 ≤ t ≤ 1000), the time in seconds it takes for any vehicle to cross the bridge. -----Output----- Print n integers in one line. The i-th integer is the second of the minute when the i-th vehicle will start to cross the bridge. -----Examples----- Input 4 10 3 8 5 2 3 Output 0 3 6 9 Input 5 15 7 4 8 3 7 5 Output 0 5 10 15 20","solution":"def vehicle_entry_times(n, w, weights, t): entry_times = [0] * n current_weight = 0 waiting_queue = [] for i in range(n): if current_weight + weights[i] <= w: current_weight += weights[i] waiting_queue.append((i, weights[i])) else: while current_weight + weights[i] > w: if waiting_queue: vehicle_index, vehicle_weight = waiting_queue.pop(0) current_weight -= vehicle_weight entry_times[i] = max(entry_times[i], entry_times[vehicle_index] + t) else: break current_weight += weights[i] waiting_queue.append((i, weights[i])) if i > 0: entry_times[i] = max(entry_times[i], entry_times[i-1] + t) return entry_times # Example usage n, w = 4, 10 weights = [3, 8, 5, 2] t = 3 print(vehicle_entry_times(n, w, weights, t)) # Output: [0, 3, 6, 9]"},{"question":"You are given an array of integers. You need to determine the length of the longest contiguous subarray such that all the integers in the subarray are either increasing or decreasing. -----Constraints----- - 1 ≤ N ≤ 2×10^5 - -10^9 ≤ A[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the length of the longest contiguous subarray that is either strictly increasing or strictly decreasing. -----Sample Input----- 9 2 2 3 4 3 2 1 4 5 -----Sample Output----- 4 The longest contiguous subarray that is either increasing or decreasing is [4, 3, 2, 1], which has a length of 4.","solution":"def longest_contiguous_subarray(arr): n = len(arr) if n == 0: return 0 if n == 1: return 1 longest_inc = 1 longest_dec = 1 max_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: longest_inc += 1 longest_dec = 1 elif arr[i] < arr[i - 1]: longest_dec += 1 longest_inc = 1 else: longest_inc = 1 longest_dec = 1 max_length = max(max_length, longest_inc, longest_dec) return max_length"},{"question":"A farmer has a rectangular field with dimensions m x n. The farmer wants to divide this field into smaller squares in such a way that all the squares have the same size, and the side length of each square is as large as possible. Your task is to determine the side length of the largest possible square that can be used to divide the field. Input Format The first line of input contains a single integer, T, representing the number of test cases. Each of the following T lines contains two integers m and n, representing the dimensions of the field. Output Format For each test case, print the side length of the largest square that can be used to evenly divide the field. Constraints 1 ≤ T ≤ 100 1 ≤ m, n ≤ 10^9 Sample Input 3 15 20 40 60 7 3 Sample Output 5 20 1 Explanation In the first test case, the largest square that can evenly divide a 15x20 field has a side length of 5. In the second test case, the largest square that can evenly divide a 40x60 field has a side length of 20. In the third test case, the largest square that can evenly divide a 7x3 field has a side length of 1.","solution":"import math def largest_square_side_length(m, n): Returns the side length of the largest square that can divide the field of dimensions m x n. return math.gcd(m, n) def process_test_cases(t, test_cases): results = [] for m, n in test_cases: results.append(largest_square_side_length(m, n)) return results"},{"question":"Design a system that allows a bookstore to manage its inventory and customer orders. The bookstore sells physical books, e-books, and audiobooks. The system should be able to: 1. Track the inventory of all the books, including their titles, authors, formats, prices, and quantities available. 2. Process customer orders. Each order can contain multiple books in different formats. 3. Update the inventory when a customer order is placed. 4. Calculate the total cost of an order, including applicable discounts. The bookstore offers a 10% discount if the total price of physical books in an order is more than 100. # Input 1. The format and number of books available in inventory: ``` Title1, Author1, Format1, Price1, Quantity1 Title2, Author2, Format2, Price2, Quantity2 ... ``` 2. The format and details of the customer orders: ``` Name1 Title1, Format1, Quantity1 Title2, Format2, Quantity2 ... ``` # Output 1. Update the inventory after the order. 2. Print the total cost of the order including any applicable discounts. # Example Input ``` Harry Potter, J.K. Rowling, Physical, 30, 50 Harry Potter, J.K. Rowling, E-Book, 15, 100 The Hobbit, J.R.R. Tolkien, Physical, 25, 20 The Hobbit, J.R.R. Tolkien, Audiobook, 20, 30 End Inventory CustomerOrder John Doe Harry Potter, Physical, 3 The Hobbit, Physical, 2 EndOrder ``` Output ``` Updated Inventory Harry Potter, J.K. Rowling, Physical, 47 Harry Potter, J.K. Rowling, E-Book, 100 The Hobbit, J.R.R. Tolkien, Physical, 18 The Hobbit, J.R.R. Tolkien, Audiobook, 30 Total cost for John Doe: 125 ```","solution":"class Book: def __init__(self, title, author, format, price, quantity): self.title = title self.author = author self.format = format self.price = price self.quantity = quantity class Inventory: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def update_inventory(self, title, format, quantity): for book in self.books: if book.title == title and book.format == format: book.quantity -= quantity break def get_book(self, title, format): for book in self.books: if book.title == title and book.format == format: return book return None def display_inventory(self): for book in self.books: print(f\\"{book.title}, {book.author}, {book.format}, {book.price}, {book.quantity}\\") class Order: def __init__(self, customer_name): self.customer_name = customer_name self.items = [] def add_item(self, title, format, quantity): self.items.append((title, format, quantity)) def calculate_total_cost(self, inventory): total_cost = 0 physical_total = 0 for title, format, quantity in self.items: book = inventory.get_book(title, format) if book: cost = book.price * quantity total_cost += cost if format == \\"Physical\\": physical_total += cost if physical_total > 100: total_cost -= physical_total * 0.1 return total_cost def process_order(self, inventory): for title, format, quantity in self.items: inventory.update_inventory(title, format, quantity) def main(): # Process inventory input inventory = Inventory() while True: input_line = input().strip() if input_line == \\"End Inventory\\": break title, author, format, price, quantity = input_line.split(\\", \\") price = float(price) quantity = int(quantity) book = Book(title, author, format, price, quantity) inventory.add_book(book) # Process customer orders while input().strip() == \\"CustomerOrder\\": customer_name = input().strip() order = Order(customer_name) while True: input_line = input().strip() if input_line == \\"EndOrder\\": break title, format, quantity = input_line.split(\\", \\") quantity = int(quantity) order.add_item(title, format, quantity) total_cost = order.calculate_total_cost(inventory) order.process_order(inventory) print(f\\"Total cost for {order.customer_name}: {total_cost}\\") print(\\"Updated Inventory\\") inventory.display_inventory()"},{"question":"In a grid of size N x N, you are given a series of integer coordinates where a tree is planted. Each cell in the grid can either contain a tree or be empty. Initially, the grid contains no trees. You are required to plant trees in given cells such that each cell containing a tree can be seen from at least one of the four directions (top, bottom, left, right) without any obstruction. Your task is to find the minimum number of observations required. An observation is defined as choosing a row or a column to view all trees in it. -----Constraints----- - 1 leq N leq 100 - 1 leq number of trees (coordinates) leq N*N - Each coordinate is given in the form of (x, y) where 1 leq x, y leq N -----Input----- Input is given from Standard Input in the following format: N k x_1 y_1 x_2 y_2 ... x_k y_k -----Output----- Print the minimum number of observations required to ensure every tree can be seen. -----Sample Input----- 4 3 1 2 2 3 4 2 -----Sample Output----- 2 The minimum number of observations required is 2. One way to achieve this is: - Observe the column 2 - Observe the row 2","solution":"def min_observations(N, tree_coordinates): Returns the minimum number of observations required to ensure every tree can be seen. if not tree_coordinates: return 0 rows = set() cols = set() for x, y in tree_coordinates: rows.add(x) cols.add(y) return min(len(rows), len(cols))"},{"question":"Problem Tom loves playing with numbers. He recently came across a number puzzle and wants your help solving it. The puzzle involves generating a specific sequence of numbers based on given rules and then finding the nth term in that sequence. The sequence generation rules are as follows: 1. Start with the number 1. 2. For each subsequent number, if the previous number is even, divide it by 2. 3. If the previous number is odd, multiply it by 3 and add 1. Tom is curious about what the nth term will be for any integer n. Write a program that computes the nth term in Tom\'s sequence. Constraints The input satisfies the following constraints. * 1 ≤ n ≤ 10^6 Input The input is a single integer n. Output Output the nth term of Tom\'s sequence on one line. Examples Input 1 Output 1 Input 2 Output 4 Input 5 Output 5","solution":"def toms_sequence(n): This function computes the nth term in Tom\'s sequence. sequence = [1] # The sequence starts with 1 for i in range(1, n): if sequence[-1] % 2 == 0: sequence.append(sequence[-1] // 2) else: sequence.append(sequence[-1] * 3 + 1) return sequence[n - 1]"},{"question":"Given a linked list of size N, you have to reverse the list in groups of given size K. If the number of nodes is not a multiple of K, the remaining nodes will not be reversed. Input: First line of input contains the number of test cases T. For each test case, there will be two lines of input: 1. First line contains two integers N and K, where N is the number of nodes in the linked list and K is the group size to reverse the list in. 2. The second line contains N space-separated integers denoting the elements of the linked list. Output: For each testcase, print the linked list after reversing it in groups of size K. User Task: Since this is a functional problem, you don\'t have to worry about input, you just have to complete the function reverseKGroup() that takes the head of the linked list and an integer K as parameters. Constraints: 1 <= T <= 50 1 <= N <= 10^{5} 1 <= Value of nodes <= 10^{3} 1 <= K <= N Example: Input: 2 8 3 1 2 3 4 5 6 7 8 5 2 1 2 3 4 5 Output: 3 2 1 6 5 4 7 8 2 1 4 3 5 Explanation: Testcase 1: After reversing the given linked list in groups of size 3, we get 3->2->1->6->5->4->7->8. Testcase 2: After reversing the given linked list in groups of size 2, we get 2->1->4->3->5.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): def reverseLinkedList(head, k): prev, cur = None, head while k: next_node = cur.next cur.next = prev prev = cur cur = next_node k -= 1 return prev count = 0 node = head while node and count < k: node = node.next count += 1 if count == k: reversed_head = reverseLinkedList(head, k) head.next = reverseKGroup(node, k) return reversed_head return head"},{"question":"Given a list of integers, find the two integers that have the smallest absolute difference between them. If there are multiple pairs with the same smallest difference, return the first pair (based on the order they appear in the list). Example: Input ``` 6 3 8 15 17 9 50 ``` Output ``` 8 9 ``` Input ``` 5 5 24 8 12 7 ``` Output ``` 7 8 ```","solution":"def find_smallest_difference_pair(numbers): Returns the two integers that have the smallest absolute difference between them. If there are multiple pairs with the same smallest difference, returns the first pair based on the order they appear in the list. # Sort the numbers to make it easier to find the smallest difference numbers.sort() min_diff = float(\'inf\') result_pair = (None, None) for i in range(len(numbers) - 1): diff = abs(numbers[i] - numbers[i + 1]) if diff < min_diff: min_diff = diff result_pair = (numbers[i], numbers[i + 1]) return result_pair"},{"question":"In a distant galaxy, there\'s a planet with a unique type of post office. The post office has a single line and can handle multiple requests at once. Each request can either be to send a letter or to complete a letter that has been sent. However, the postal workers at this office are quite slow; they can only process one request at a time. You are given a list of requests. Each request is represented as a pair (t, n), where t is a string that can be either \\"send\\" or \\"complete\\", and n is an integer representing the unique id for that request. Your task is to determine the sequence of events and to output the list of completed letters in the order they were sent. If a complete request is given for an id that has not been sent yet, it should be ignored. If there are multiple \\"complete\\" requests for the same id, only the first one should be considered, and subsequent should be ignored. Note: The id is always unique when sent, but the complete requests can have duplicates. Input The first line contains an integer m (1 ≤ m ≤ 1000) — the number of requests. Each of the next m lines contains a request represented as a pair (t, n), where t is either \\"send\\" or \\"complete\\", and n (1 ≤ n ≤ 1000) — the id of the request. Output Print the ids of the letters in the order they were sent and completed. If there are no letters to complete, print \\"No letters to complete\\". Example Input: 7 send 1 send 2 complete 1 send 3 complete 2 complete 2 send 4 Output: 1 2 Input: 5 send 1 complete 2 send 2 complete 1 complete 1 Output: 1 Note In the first example, the sequence of events is such that letters with ids 1 and 2 were sent and completed, even though there was an extra \\"complete 2\\" request which is just ignored. Letters with ids 3 and 4 were sent but not completed. In the second example, the sequence includes a \\"complete 2\\" request which is ignored since the letter with id 2 has not been sent when the request was made. Thus, only letter with id 1 is included in the final output.","solution":"def process_requests(m, requests): sent_ids = [] completed_ids = [] sent_set = set() completed_set = set() for request in requests: t, n = request if t == \\"send\\": sent_ids.append(n) sent_set.add(n) elif t == \\"complete\\" and n in sent_set and n not in completed_set: completed_ids.append(n) completed_set.add(n) if completed_ids: return completed_ids else: return [\\"No letters to complete\\"] # Example usage: # m = 7 # requests = [(\\"send\\", 1), (\\"send\\", 2), (\\"complete\\", 1), (\\"send\\", 3), (\\"complete\\", 2), (\\"complete\\", 2), (\\"send\\", 4)] # print(process_requests(m, requests)) # Output: [1, 2]"},{"question":"Given two strings `s` and `t`, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Your task is to write a function that checks whether two given strings are anagrams. Examples ``` s = \\"listen\\", t = \\"silent\\" ==> True s = \\"hello\\", t = \\"billion\\" ==> False s = \\"evil\\", t = \\"vile\\" ==> True s = \\"schoolmaster\\", t = \\"theclassroom\\" ==> True ```","solution":"def are_anagrams(s, t): Determines if two strings s and t are anagrams of each other. Args: s (str): First input string. t (str): Second input string. Returns: bool: True if s and t are anagrams, False otherwise. # Anagrams must have the same length if len(s) != len(t): return False # Use a dictionary to count characters in the first string count = {} for char in s: count[char] = count.get(char, 0) + 1 # Decrease the count while iterating through the second string for char in t: if char in count: count[char] -= 1 if count[char] == 0: del count[char] else: return False # Check if the count dictionary is empty return len(count) == 0"},{"question":"Tom has a garden and he likes to collect special plants. A plant is special if it produces flowers of different colors every year. Tom needs your help to determine if a given sequence of flower colors produced by a plant over the years can be categorized as special or not. Each year, a plant produces exactly one flower. And each flower has a color represented by a lowercase English letter. Your task is to write a program to check if a given sequence of flower colors contains distinct colors. -----Input----- The first line contains an integer n (1 le n le 1000) — the number of years the plant has been under observation. The second line contains a string s of length n — the sequence of flower colors where each character represents the color produced by the plant in that year. -----Output----- Print \\"SPECIAL\\" (quotes for clarity) if each year\'s flower color is unique. Otherwise, print \\"NOT SPECIAL\\" (quotes for clarity). You can print each letter in any case (upper or lower). -----Examples----- Input 4 abcd Output SPECIAL Input 3 aab Output NOT SPECIAL Input 5 abcde Output SPECIAL -----Note----- In the first example, all flower colors are different, so the output is \\"SPECIAL\\". In the second example, the flower color \'a\' appears more than once, so the output is \\"NOT SPECIAL\\". In the third example, all flower colors are unique over the years, so the output is \\"SPECIAL\\".","solution":"def check_special(n, s): Determines if the sequence of flower colors contains only distinct colors. Args: n: int - number of years the plant has been observed. s: str - sequence of flower colors. Returns: str: \\"SPECIAL\\" if all colors are distinct, otherwise \\"NOT SPECIAL\\". if len(set(s)) == len(s): return \\"SPECIAL\\" else: return \\"NOT SPECIAL\\""},{"question":"A software company, TechSolutions Inc., is managing a large distributed system composed of n nodes connected by bidirectional communication links. These nodes are labeled from 1 to n. The stability of the system depends on the ability to quickly detect and isolate any failing node. A node is considered critical if its removal increases the number of connected components in the network. Your task is to identify all the critical nodes in the system. For this purpose, you are given the network of nodes and their connections, and you need to output the list of all critical nodes. Input The first line contains two integers n and m (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000), the number of nodes and the number of communication links respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional communication link between nodes u and v. Output On the first line, print a single integer k, the number of critical nodes. On the second line, print k integers, the critical nodes in ascending order. Examples Input 5 5 1 2 1 3 3 4 3 5 4 5 Output 2 1 3 Input 6 7 1 2 1 3 2 4 3 4 4 5 4 6 5 6 Output 1 4 Explanation In the first example, nodes 1 and 3 are critical because removing either of them increases the number of connected components. In the second example, node 4 is critical as its removal increases the number of connected components in the network from 1 to 2.","solution":"from collections import defaultdict def find_critical_nodes(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) disc = [float(\'Inf\')] * (n + 1) low = [float(\'Inf\')] * (n + 1) parent = [-1] * (n + 1) ap = [False] * (n + 1) time = [0] def ap_util(u): children = 0 visited[u] = True disc[u] = low[u] = time[0] time[0] += 1 for v in graph[u]: if not visited[v]: parent[v] = u children += 1 ap_util(v) low[u] = min(low[u], low[v]) if parent[u] == -1 and children > 1: ap[u] = True if parent[u] != -1 and low[v] >= disc[u]: ap[u] = True elif v != parent[u]: low[u] = min(low[u], disc[v]) for i in range(1, n + 1): if not visited[i]: ap_util(i) critical_nodes = [i for i, is_ap in enumerate(ap) if is_ap] return len(critical_nodes), critical_nodes def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] idx = 2 for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) edges.append((u, v)) idx += 2 k, critical_nodes = find_critical_nodes(n, m, edges) print(k) print(\\" \\".join(map(str, sorted(critical_nodes)))) if __name__ == \\"__main__\\": main()"},{"question":"Alex is building a small water supply network for his garden. He has a set of water pipes each connecting two points in the garden, forming a connected network. Each pipe has an associated cost, representing the effort needed to install that pipe. Alex wants to minimize the total effort required to connect every point together. Help Alex by finding the minimum total effort needed to install the water supply network, such that every point in the garden is connected. -----Input----- The first line contains two integers, `V` and `E`, denoting the number of points in the garden and the number of water pipes respectively. Following `E` lines each contains three integers, `u`, `v`, and `w`, where `u` and `v` are the endpoints of a pipe and `w` is the cost of the pipe. -----Output----- Output a single integer, the minimum total effort required to connect all points in the garden. -----Constraints----- 1 ≤ V ≤ 1000 1 ≤ E ≤ 10000 1 ≤ w ≤ 1000 -----Example----- Input: 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 Output: 6","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def min_spanning_tree_cost(V, E, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(V): parent.append(node) rank.append(0) result = [] i = 0 e = 0 while e < V - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) min_cost = 0 for u, v, weight in result: min_cost += weight return min_cost def main(V, E, edges): return min_spanning_tree_cost(V, E, edges)"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to find the maximum sum of a subarray of length `k`. A subarray is a contiguous part of an array. Ensure that your solution is efficient enough to handle large inputs. Examples: Input: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] k = 3 Output: 24 Explanation: The subarray with the largest sum is [7, 8, 9]. Input: arr = [2, 1, 5, 1, 3, 2] k = 3 Output: 9 Explanation: The subarray with the largest sum is [2, 1, 5]. Constraints: 1. 1 <= len(arr) <= 10^6 2. 1 <= arr[i] <= 10^4 3. 1 <= k <= len(arr) Note: Your solution should be optimized to run in linear time.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray of length k. :param arr: List[int] - The input array of integers. :param k: int - The length of the subarray. :return: int - The maximum sum of a subarray of length k. n = len(arr) if n < k or k == 0: return 0 # Calculate the sum of the first `k` elements max_sum = current_sum = sum(arr[:k]) # Use sliding window to find the maximum sum of any subarray of length `k` for i in range(k, n): current_sum = current_sum + arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A delivery company uses a fleet of drones to deliver packages to different zones within a city. Each zone is represented as a point on a 2D grid. The drones can only travel vertically or horizontally from one zone to another zone in one unit of time. Each drone can carry one package at a time, and starts at the origin point (0, 0) at the beginning. The company wants to find the minimum time required for the fleet of drones to deliver all the packages to their respective destinations. Each package has a destination coordinate on the grid. The goal is to determine this minimum time considering the constraints of simultaneous deliveries using multiple drones. Write a function that takes as input an integer `n`, representing the number of packages, and a list of n tuples, each representing the destination coordinates (x, y) of a package. The function should return an integer representing the minimum time required to deliver all packages. # Input - An integer `n` (1 ≤ n ≤ 10^5), representing the number of packages. - A list of n tuples, each containing two integers `(x, y)` (-10^9 ≤ x, y ≤ 10^9), representing the destination coordinates of each package. # Output - An integer, representing the minimum time required for the fleet of drones to deliver all packages. # Examples Example 1 # Input ``` 3 [(1, 2), (2, 3), (3, 4)] ``` # Output ``` 4 ``` Example 2 # Input ``` 5 [(0, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)] ``` # Output ``` 1 ``` # Explanation In Example 1, the furthest package is at the coordinate (3, 4). The drones only need to reach this point in 4 units of time (max(|3|, |4|)), as the other packages are closer and can be delivered within this time frame. In Example 2, the furthest packages are at coordinates (1, 1), (1, -1), (-1, 1), and (-1, -1), which are all 1 unit of time away from the origin. Therefore, all packages can be delivered in 1 unit of time.","solution":"def min_delivery_time(n, destinations): Returns the minimum time required for the fleet of drones to deliver all packages to their respective destinations. :param n: int - Number of packages :param destinations: List[Tuple(int, int)] - List of destination coordinates for each package :return: int - Minimum time required for all deliveries max_time = 0 for x, y in destinations: max_time = max(max_time, abs(x), abs(y)) return max_time"},{"question":"Given an array of integers `nums`, you have to find a continuous subarray with the maximum sum and return its sum. A subarray is a contiguous part of an array. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Example 2: Input: nums = [1] Output: 1 Explanation: The array itself is the subarray with the maximum sum. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The entire array is the subarray with the maximum sum. Constraints: - 1 <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4","solution":"def max_subarray_sum(nums): Returns the sum of the continuous subarray with the maximum sum. max_so_far = nums[0] max_ending_here = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a warehouse with several shelves. Each shelf has a certain number of boxes, and each box contains a certain number of items. It is your job to randomly pick one box and return the number of items in that box. Design a function that initializes the warehouse with the given configuration and another function to pick a random box and return the number of items within it. -----Input----- The first line contains a single integer n, the number of shelves. Each of the next n lines contains two space-separated integers s_i and b_i, where s_i denotes the number of boxes on the i-th shelf, and b_i denotes the number of items in each box on the i-th shelf. -----Output----- The function `initialize` should take the input parameters and store the configuration of the warehouse. The function `pick_random_box` should return a random number of items from any box in the warehouse. -----Example----- Input: 3 2 5 3 7 1 10 Output: (The output for `initialize` will not be explicitly provided, as it only sets up the internal state. A possible sequence of outputs for `pick_random_box` could be:) 5 7 10 5 -----Note----- For the given sample, there are 6 boxes in total across 3 shelves. The possible number of items that can be returned by the `pick_random_box` function could be 5, 7, or 10, depending on which box is randomly picked.","solution":"import random class Warehouse: def __init__(self): self.boxes = [] def initialize(self, n, configurations): Initializes the warehouse with the given configurations. :param n: Number of shelves :param configurations: A list of tuples, where each tuple contains (s_i, b_i) representing the number of boxes on the i-th shelf and the number of items in each box, respectively. self.boxes = [] for s_i, b_i in configurations: self.boxes.extend([b_i] * s_i) def pick_random_box(self): Returns the number of items in a randomly picked box. if not self.boxes: raise ValueError(\\"The warehouse is empty.\\") return random.choice(self.boxes)"},{"question":"You are given a 0-indexed array A with N integers, numbered 0 through N-1, and T queries to handle. There are two types of queries: Type 1: \\"1 X\\" – where X is an integer. This query directs you to add X to each element in A. Type 2: \\"2 L R\\" – where L and R are integers. This query asks you to find the sum of all elements in the subarray from index L to index R (inclusive). Input format The first line contains two integers N and T, denoting the size of the array A and the number of queries, respectively. The next line contains N integers separated by spaces, representing the array A. The next T lines contain the queries. Each query can be of type \\"1 X\\" or \\"2 L R\\". Output format For each query of the second type, print the sum of the subarray from index L to index R in a new line. Constraints 1 ≤ N, T ≤ 100,000 1 ≤ A[i] ≤ 10^9 -10^6 ≤ X ≤ 10^6 0 ≤ L ≤ R < N SAMPLE INPUT 5 5 1 2 3 4 5 1 5 2 0 2 2 1 3 1 -2 2 2 4 SAMPLE OUTPUT 21 12 10 Explanation After applying the first query, all elements of A become [6, 7, 8, 9, 10]. The first and second queries of type 2 then request the sum of subarrays [6, 7, 8] and [7, 8, 9], yielding results of 21 and 24 respectively. After applying the fourth query, all elements of A become [4, 5, 6, 7, 8]. The final query of type 2 requests the sum of the subarray [6, 7, 8], yielding a result of 21.","solution":"def handle_queries(N, T, A, queries): current_addition = 0 results = [] for query in queries: q = query.split() if q[0] == \'1\': current_addition += int(q[1]) elif q[0] == \'2\': L = int(q[1]) R = int(q[2]) subarray_sum = sum(A[L:R+1]) + (R - L + 1) * current_addition results.append(subarray_sum) return results"},{"question":"Jenny enjoys finding the longest sequences of unique characters in strings. She calls such a sequence a \\"distinct segment\\". Given a string, help Jenny by finding out the length of the longest distinct segment in it. A distinct segment is a substring where all characters are unique and no characters repeat. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 50) — the number of test cases. The first line of each test case contains a string s (1 le |s| le 100) — the string to analyze. The string s consists of lowercase English letters only. -----Output----- For each test case, print a single line containing the length of the longest distinct segment in the given string. -----Example----- Input 3 abcabcbb bbbbb pwwkew Output 3 1 3 -----Note----- In the first test case, the longest distinct segment is \\"abc\\", which has a length of 3. In the second test case, the longest distinct segment is \\"b\\", which has a length of 1 since all characters are the same. In the third test case, the longest distinct segment is \\"wke\\", which has a length of 3.","solution":"def find_longest_distinct_segment(s): Finds the length of the longest segment with all distinct characters in a string. max_len = 0 start = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) results = [] index = 1 for _ in range(t): string = data[index] index += 1 result = find_longest_distinct_segment(string) results.append(result) for res in results: print(res)"},{"question":"Alex is experimenting with different ways of merging sorted arrays for a school project. Given two sorted arrays of integers, he wants to merge these arrays into a single sorted array. Write a program that merges two sorted arrays into one sorted array. -----Input----- The first line in the input contains an integer m (1 le m le 1000) which is the size of the first array. The second line contains m integers in non-decreasing order representing the first sorted array. The third line in the input contains an integer n (1 le n le 1000) which is the size of the second array. The fourth line contains n integers in non-decreasing order representing the second sorted array. -----Output----- Output a single line containing m + n integers which are the elements of the merged sorted array. -----Examples----- Sample Input 1: 3 1 3 5 4 2 4 6 8 Sample Output 1: 1 2 3 4 5 6 8 Sample Input 2: 2 0 4 3 1 2 3 Sample Output 2: 0 1 2 3 4 Sample Input 3: 5 1 2 2 3 3 3 2 2 4 Sample Output 3: 1 2 2 2 2 3 3 4","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array. :param array1: List of integers sorted in non-decreasing order. :param array2: List of integers sorted in non-decreasing order. :return: List of integers, representing the merged sorted array. merged_array = [] i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] <= array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Append remaining elements of array1 while i < len(array1): merged_array.append(array1[i]) i += 1 # Append remaining elements of array2 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"# Largest Common Subsequence Alice and Bob are studying programming and have decided to practice identifying common subsequences in strings. They have come up with the following task: Given two strings, find the length of the longest subsequence that is common to both strings. Recall that a subsequence is a sequence derived from another sequence by deleting some elements (possibly none) without changing the order of the remaining elements. Write a program to determine the length of the longest common subsequence of two given strings. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the lengths of Alice\'s and Bob\'s strings, respectively. The second line contains a string of length n containing uppercase English letters — Alice\'s string. The third line contains a string of length m containing uppercase English letters — Bob\'s string. -----Output----- Print a single integer — the length of the longest common subsequence of Alice\'s and Bob\'s strings. -----Examples----- Input 6 6 ABCDEF AEDFHR Output 3 Input 5 4 AGGTAB GXTXAYB Output 4 -----Note----- In the first example, the longest common subsequence is \\"ADF\\" with length 3. In the second example, the longest common subsequence is \\"GTAB\\" with length 4.","solution":"def longest_common_subsequence(n, m, alice_str, bob_str): Returns the length of the longest common subsequence of two given strings. Parameters: n (int): Length of Alice\'s string. m (int): Length of Bob\'s string. alice_str (str): Alice\'s string. bob_str (str): Bob\'s string. Returns: int: The length of the longest common subsequence. # Create a 2D array to store lengths of longest common subsequence dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array for i in range(n): for j in range(m): if alice_str[i] == bob_str[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) return dp[n][m]"},{"question":"**Problem: Optimal Seating Arrangement** A company plans to reorganize the seating arrangement of its employee seating hall. The seating hall can be represented as a 2D grid of size `R x C`. Each cell in the grid is either an empty desk (`.`) or a desk occupied by an employee (`E`). The goal is to rearrange the employees such that each employee has at least one empty desk horizontally or vertically adjacent to them. If it is not possible to meet this requirement with the existing arrangement, the company will need to relocate some employees to meet the requirement. Your task is to determine the minimum number of relocations needed to ensure that each employee has at least one empty desk beside them. Input Format: - The first line contains two integers `R` and `C` — the number of rows and columns in the seating hall. - The next `R` lines each contain `C` characters, representing the seating arrangement, where each character is either `.` (empty desk) or `E` (occupied desk). Output Format: - Print a single integer — the minimum number of relocations needed. Constraints: - `1 ≤ R, C ≤ 100` - The input contains only the characters `.` and `E`. Sample Input: ``` 4 4 E..E ..E. E... ..E. ``` Sample Output: ``` 0 ``` Sample Input: ``` 3 3 EEE E.E EEE ``` Sample Output: ``` 4 ``` Explanation: 1. In the first sample, each employee already has at least one empty desk beside them. 2. In the second sample, four employees need to be relocated to ensure every employee has an adjacent empty desk. For example, moving the employees in positions (0, 1), (1, 0), (1, 2), and (2, 1) to any of the corners and edges of the grid.","solution":"def min_relocations(R, C, grid): # Helper function to check if a cell has an empty adjacent cell def has_empty_adjacent(r, c): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == \'.\': return True return False needed_relocations = 0 for r in range(R): for c in range(C): if grid[r][c] == \'E\' and not has_empty_adjacent(r, c): needed_relocations += 1 return needed_relocations # The following code snippet is for testing purposes: if __name__ == \\"__main__\\": R, C = 3, 3 grid = [ \\"EEE\\", \\"E.E\\", \\"EEE\\" ] print(min_relocations(R, C, grid)) # Output should be 4 R, C = 4, 4 grid = [ \\"E..E\\", \\"..E.\\", \\"E...\\", \\"..E.\\" ] print(min_relocations(R, C, grid)) # Output should be 0"},{"question":"John is an avid gardener and he has a rectangular garden which he wants to evenly divide into small rectangular plots such that the number of plants in each plot is the same. Given the dimensions of the garden (length and width) and the total number of plants (each distributed across the garden in a uniform density), find the side lengths of the largest possible square plot that can evenly divide the garden. In more technical terms, you need to determine the greatest possible side length (integer) of a square plot such that the area of the garden (length x width) can be divided into smaller squares of this side length, and each square plot contains the same number of plants. -----Input----- The first line of the input contains a single integer length (1 ≤ length ≤ 10^9) — the length of the garden. The second line of the input contains a single integer width (1 ≤ width ≤ 10^9) — the width of the garden. The third line of the input contains a single integer num_plants (1 ≤ num_plants ≤ 10^18) — the total number of plants in the garden. -----Output----- Print one integer — the side length of the largest possible square plot. -----Examples----- Input 10 5 50 Output 5 Input 100 75 7500 Output 25","solution":"def greatest_square_side(length, width, num_plants): Given the dimensions of the garden (length and width) and the total number of plants, find the side length of the largest possible square plot that can evenly divide the garden. import math # First calculate the greatest common divisor (gcd) of length and width. def gcd(a, b): while b: a, b = b, a % b return a # The largest possible side length of the square plot is the gcd of length and width. return gcd(length, width)"},{"question":"Given an undirected graph with N vertices and M edges, Alice and Bob are playing a game in which they take turns coloring one of the uncolored vertices chosen uniformly at random. Alice starts first, and they alternate turns. Each player can choose any color from a set of C different colors. The goal for each player is to maximize the number of edges where the endpoints have the same color when the game ends. Write a program to find the expected number of edges that will have the same color when the game ends. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three integers N, M, and C, where: - N is the number of vertices in the graph. - M is the number of edges. - C is the number of colors. Each of the next M lines contains two integers u and v, indicating that there is an edge between vertex u and vertex v in the graph. -----Output----- For each test case, output a single line containing the expected number of edges that will have the same color when the game ends. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 50 - 0 ≤ M ≤ N*(N-1)/2 - 1 ≤ C ≤ 10 - 1 ≤ u, v ≤ N -----Example----- Input: 2 3 3 2 1 2 2 3 1 3 4 4 3 1 2 2 3 3 4 4 1 Output: 1.5 2.6666666667 -----Explanation----- For the first test case, the expected number of edges with the same color can be calculated considering each edge and its possible colorings. With 2 colors and 3 edges in a simple triangle graph, players will color the vertices randomly leading to an expected number that is calculated accounting for all possible outcomes. Similar reasoning applies to the other test case with different parameters.","solution":"def expected_edges_with_same_color(N, M, C, edges): Returns the expected number of edges with the same color Args: - N: Number of vertices - M: Number of edges - C: Number of colors - edges: List of edges represented as (u, v) Returns: - float: Expected number of edges with the same color # For each edge, the probability of both endpoints having the same color is 1/C probability_same_color_per_edge = 1 / C # Expected number of edges where both endpoints have the same color expected_same_color_edges = M * probability_same_color_per_edge return expected_same_color_edges def solve_game(test_cases): results = [] for N, M, C, edges in test_cases: result = expected_edges_with_same_color(N, M, C, edges) results.append(result) return results"},{"question":"You are given a string representing a sentence with words separated by a varying number of spaces. Your goal is to clean up the sentence by replacing all sequences of spaces with a single space. Write a function `clean_sentence(sentence)` that takes a string `sentence` as its parameter and returns a new string with all sequences of spaces replaced by a single space. Example: ```python clean_sentence(\\"This is a test sentence.\\") # should return \\"This is a test sentence.\\" ``` If the sentence contains no extra spaces, return the original string: ```python clean_sentence(\\"No extra spaces here.\\") # should return \\"No extra spaces here.\\" ```","solution":"import re def clean_sentence(sentence): Returns the sentence with all sequences of spaces replaced by a single space. return re.sub(r\'s+\', \' \', sentence).strip()"},{"question":"Write a function that takes an integer `n` and returns an `n x n` matrix filled with elements from 1 to `n^2` in spiral order, starting from 1 at the top-left corner. ```python def generate_spiral_matrix(n): # Your code here Example: generate_spiral_matrix(3) returns [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] generate_spiral_matrix(4) returns [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ```","solution":"def generate_spiral_matrix(n): Generates an n x n matrix filled with elements from 1 to n^2 in a spiral order. mat = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 num = 1 while left <= right and top <= bottom: for i in range(left, right + 1): mat[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): mat[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): mat[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): mat[i][left] = num num += 1 left += 1 return mat"},{"question":"Write a function that takes a list of integers and returns a new list with the squares of each number, but only if the square is even. The returned list should maintain the order of the original list. Example: [1, 2, 3, 4] --> [4, 16] [-1, 0, 5, 6] --> [0, 36] [11, 13, 17] --> []","solution":"def even_squares(numbers): Returns a list of squares for even numbers return [x**2 for x in numbers if (x**2) % 2 == 0]"},{"question":"A group of friends are planning a vacation and need to rent cars to accommodate everyone\'s luggage. Each car has a maximum luggage capacity, and you need to determine the minimum number of cars required to carry all the luggage. You are given a list of luggage weights and the maximum luggage each car can carry. Your task is to figure out the minimum number of cars required to carry all the luggage. Input The input consists of two lines: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), where `n` is the number of luggage items and `m` is the maximum luggage capacity of each car. - The second line contains `n` integers, where the i-th integer represents the weight of the i-th luggage item. Each luggage weight is between 1 and m, inclusive. Output Output the minimum number of cars required to carry all the luggage. Examples Input 5 10 2 3 5 7 1 Output 2 Input 4 5 3 3 3 3 Output 4 Note In the first example, you can use one car to carry luggage with weights 2, 3, and 5, and another car to carry luggage with weights 7 and 1. In the second example, since each luggage item weighs 3 and the maximum capacity of a car is 5, each car can only carry one luggage item, so you need 4 cars.","solution":"from itertools import combinations def min_num_cars(n, m, weights): Returns the minimum number of cars required to carry all the luggage. :param n: int - number of luggage items :param m: int - maximum luggage capacity of each car :param weights: list of integers - weights of the luggage items # Sort weights in descending order weights.sort(reverse=True) # Initialize the count of cars cars = 0 while weights: remaining_capacity = m used_weights = [] # Try to fit luggage in the current car for weight in weights: if weight <= remaining_capacity: remaining_capacity -= weight used_weights.append(weight) # Remove the used weights from the original list for weight in used_weights: weights.remove(weight) # Increment the count of cars cars += 1 return cars"},{"question":"You are helping to develop a new sorting algorithm called \\"DoubleSort.\\" This algorithm has a unique property: it sorts elements based on their positions when the list is sorted in ascending order and then again in descending order. Your task is to implement a function that takes a list of integers and returns the list sorted by the DoubleSort algorithm. First, you need to sort the list in ascending order. Then, for elements that have the same value after the ascending sort, their relative ordering must be arranged so that the second instance of the sort (if applicable) of their positions places them in descending order. Input format: The first line contains an integer n, the number of elements in the list. The second line contains n integers separated by spaces. Output format: Output the list of integers sorted according to the DoubleSort algorithm. Constraints: 1 ≤ n ≤ 1000 -1000 ≤ element ≤ 1000 SAMPLE INPUT 5 4 2 2 1 3 SAMPLE OUTPUT 1 2 2 3 4 Explanation First, sort the list in ascending order: [1, 2, 2, 3, 4]. Second, maintain the relative ordering for indices with the same value: the indices of 2 remain as [2, 3]. Example 2: SAMPLE INPUT 6 5 1 5 3 3 2 SAMPLE OUTPUT 1 2 3 3 5 5 Explanation: First sort the list in ascending order: [1, 2, 3, 3, 5, 5]. Since there are duplicate values, maintain their relative positions from descending order of their original indices within each group: e.g., indices of 3: (3, 3) remain the same because we keep the indirect reverse order of their positions (sorted descending by index). Similarly for 5s: (2, 5).","solution":"def double_sort(arr): # Get list of tuples containing each element and its original index arr_with_indices = [(val, idx) for idx, val in enumerate(arr)] # Sort the array first by value and second by the reverse of the indices arr_with_indices.sort(key=lambda x: (x[0], -x[1])) # Extract the sorted values sorted_arr = [val for val, idx in arr_with_indices] return sorted_arr"},{"question":"Implement a function to determine if it is possible to rearrange the characters of a given string `s` such that no two adjacent characters are the same. If possible, return any valid rearrangement of the characters. If not possible, return an empty string. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Example 2: Input: s = \\"aaab\\" Output: \\"\\" Your Task: You need to complete the function `rearrangeString` that takes a single parameter s (the input string) and returns a string that is a valid rearrangement of `s` or an empty string if no valid rearrangement is possible. The driver code takes care of the printing. Expected Time Complexity: O(N * log(N)) where N is the length of the string. Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(s) ≤ 10^5 s contains only lowercase English letters. Note: - For valid combinations, the order of characters in the output does not matter. - If there are multiple valid solutions, returning any one of them is acceptable.","solution":"import heapq from collections import Counter def rearrangeString(s): Determines if it is possible to rearrange the string such that no two adjacent characters are the same. If possible, returns any valid rearrangement, otherwise returns an empty string. # Counter for the frequency of each character counter = Counter(s) # Max-heap to store characters by their frequency max_heap = [(-cnt, char) for char, cnt in counter.items()] heapq.heapify(max_heap) prev_char, prev_cnt = None, 0 result = [] while max_heap: cnt, char = heapq.heappop(max_heap) # Append current character to result result.append(char) # If previous character count still exists, push it back to heap if prev_char and prev_cnt < 0: heapq.heappush(max_heap, (prev_cnt, prev_char)) # Set new prev_char and prev_cnt prev_char, prev_cnt = char, cnt + 1 result_str = \'\'.join(result) # Check if the generated result is the same length as the input. If not, return empty string. return result_str if len(result_str) == len(s) else \\"\\""},{"question":"Given an integer array Arr of size N. Rearrange the array in such a way that the sum of absolute differences between every adjacent pair of elements is maximized. Example 1: Input: N = 3 Arr[] = {1, 3, 2} Output: 3 1 2 Explanation: The possible permutations of the array are [1, 3, 2], [1, 2, 3], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]. Among these, the permutation [3, 1, 2] gives the maximum sum of absolute differences (|3-1| + |1-2| = 4). Example 2: Input: N = 4 Arr[] = {4, 2, 1, 3} Output: 4 1 3 2 Explanation: The possible permutations of the array are [4, 2, 1, 3], [4, 1, 3, 2], ... , [2, 1, 3, 4]. Among these, the permutation [4, 1, 3, 2] gives the maximum sum of absolute differences (|4-1| + |1-3| + |3-2| = 7). Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSumArrangement() which takes the array of integers arr and n as parameters and rearranges the array itself to maximize the sum of absolute differences between adjacent pairs of elements. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ Arr[i] ≤ 10^4","solution":"def maxSumArrangement(arr, n): Rearranges the elements of arr to maximize the sum of absolute differences between adjacent pairs. # Sort the array to arrange in alternating high-low pattern arr.sort() # Initialize result array and pointers result = [] start, end = 0, n - 1 # Alternately pick elements from the end and start of the sorted array while start <= end: if start != end: result.append(arr[end]) end -= 1 result.append(arr[start]) start += 1 # Copy the result back into the original array for i in range(n): arr[i] = result[i] # Example usage N = 4 Arr = [4, 2, 1, 3] maxSumArrangement(Arr, N) print(Arr) # Output should be maximized absolute difference arrangement"},{"question":"A company organizes an annual performance review for its employees. During this review, each employee is given a performance score between 1 and 10. The management team needs to identify employees who have shown consistent improvement in their scores over the years. Write a function to help identify these employees. The function should take a list of employees where each employee is represented by a unique ID and a list of their annual performance scores. The function should return a list of employee IDs who have improved consistently every year. Consistent improvement means that each year\'s performance score is strictly greater than the previous year\'s score. INPUT: The first line gives N, the total number of employees. The next N lines represent individual employees. Each line contains an employee ID followed by a list of space-separated integers representing their annual performance scores in chronological order. OUTPUT: Generate a list of employee IDs who have shown consistent improvement in their scores, in any order. Constraints: 1 ≤ N ≤ 100 1 ≤ Number of scores for each employee ≤ 10 1 ≤ Performance score ≤ 10 SAMPLE INPUT 3 E01 4 5 6 E02 5 5 7 E03 2 3 4 5 6 SAMPLE OUTPUT E01 E03 Explanation E01 has scores [4, 5, 6] (Improvement over the years) E02 has scores [5, 5, 7] (Did not improve consistently) E03 has scores [2, 3, 4, 5, 6] (Improvement over the years) Hence, only E01 and E03 are printed in the output.","solution":"def consistently_improving_employees(employee_data): consistently_improving_ids = [] for employee in employee_data: employee_id, *scores = employee.split() scores = list(map(int, scores)) if all(scores[i] < scores[i+1] for i in range(len(scores) - 1)): consistently_improving_ids.append(employee_id) return consistently_improving_ids"},{"question":"Given an array of integers, find and return the sum of all the unique elements in the array. An element is considered unique if it appears exactly once in the array. Eg: `[1, 2, 3, 2, 4, 1]` should sum the values `3` and `4` since they are the only elements that appear exactly once. Examples: ``` Testing: [1, 2, 3, 2, 4, 1] ==> 7 Testing: [5, 5, 5, 5] ==> 0 Testing: [10, 20, 10, 30, 40] ==> 90 Testing: [1, 2, 3, 4, 5] ==> 15 Testing: [1, 2, 2, 3, 4, 4] ==> 4 Testing: [] ==> 0 Testing: [7] ==> 7 ```","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the given array. Parameters: arr (list of int): The input array containing integers. Returns: int: The sum of unique elements. from collections import Counter count = Counter(arr) return sum(key for key, value in count.items() if value == 1)"},{"question":"You are given an array of integers `arr` of length `n` and two positive integers `m` and `k`. We define a k-chunk of an array as a contiguous subarray of length k. For example, if `arr = [1, 2, 3, 4, 5]` and k = 3, then [1, 2, 3], [2, 3, 4], and [3, 4, 5] are the k-chunks of `arr`. Let\'s denote the smallest sum and the largest sum of all k-chunks of `arr` by `S_min` and `S_max` respectively. There are m operations of one of two types that can be applied to the array `arr`: 1. Replace the element at position `i` with value `v`. 2. Calculate `S_min` and `S_max` for the current state of the array. All operations are performed sequentially, in the order they appear in the input. Your task is to determine the values of `S_min` and `S_max` for all operations of the second type. Input The first line contains three positive integers `n`, `m`, and `k` (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 20,000, 1 ≤ k ≤ n) — the length of the array, the number of operations, and the length of the k-chunk respectively. The second line contains the array `arr` of length `n`, with each element being an integer between -10^9 and 10^9 (inclusive). Each of the following m lines contains a description of some operation: 1. Operation of the first type starts with `1` followed by a pair `i` and `v`, that denotes replacement of the element at position `i` by value `v` (1 ≤ i ≤ n, -10^9 ≤ v ≤ 10^9). 2. Operation of the second type starts with `2` and has no additional information. Output For each query of the second type, output the values of `S_min` and `S_max` in a single line separated by a space. Examples Input 5 3 3 1 3 2 4 5 2 1 3 6 2 Output 6 10 9 15 Note Initially, the k-chunks of the array [1, 3, 2, 4, 5] for k = 3 are [1, 3, 2], [3, 2, 4], and [2, 4, 5] - Their sums are 6, 9, and 11 respectively. - Thus, `S_min` is 6 and `S_max` is 11. After replacing the element at position 3 with 6, the array becomes [1, 3, 6, 4, 5] - The new k-chunks are [1, 3, 6], [3, 6, 4], and [6, 4, 5] - Their sums are 10, 13, and 15 respectively. - Thus, `S_min` is 10 and `S_max` is 15.","solution":"def k_chunk_sums(arr, k): Compute the smallest and largest sum of k-chunks. if len(arr) < k: return None, None n = len(arr) curr_sum = sum(arr[:k]) min_sum, max_sum = curr_sum, curr_sum for i in range(1, n - k + 1): curr_sum = curr_sum - arr[i - 1] + arr[i + k - 1] if curr_sum < min_sum: min_sum = curr_sum if curr_sum > max_sum: max_sum = curr_sum return min_sum, max_sum def process_operations(n, m, k, arr, operations): results = [] for op in operations: if op[0] == 1: _, i, v = op arr[i - 1] = v elif op[0] == 2: S_min, S_max = k_chunk_sums(arr, k) results.append((S_min, S_max)) return results"},{"question":"You are working on a project that analyzes user messages for certain keywords. You want to design a function that can determine the most frequently occurring keyword in a given message. The function should ignore punctuation, case, and spaces between words. If there are multiple keywords with the highest frequency, return the one that appears first alphabetically. You are given a list of keywords and a string message. Your task is to find and print the keyword that appears most frequently in the message. If none of the keywords appear in the message, return \\"None\\". Input: - First line: an integer T denoting the number of test cases. - For each test case: - First line: an integer K, the number of keywords. - Next line: K space-separated keywords. - Next line: a message string. Output: Print the most frequently occurring keyword for each test case. Constraints: 1 ≤ T ≤ 20 1 ≤ K ≤ 50 1 ≤ Length of Message ≤ 200 SAMPLE INPUT: 2 3 word sample test This is a test message with the word test appearing twice. 2 example keyword This is a sentence with no matching keywords. SAMPLE OUTPUT: test None Explanation: Test Case #1: The keyword \\"test\\" appears twice in the message \\"This is a test message with the word test appearing twice.\\", which is more frequent than \\"word\\" (appears once) and \\"sample\\" (does not appear). Test Case #2: Neither \\"example\\" nor \\"keyword\\" appear in the message \\"This is a sentence with no matching keywords.\\", so the output is \\"None\\".","solution":"import string def find_most_frequent_keyword(T, test_cases): def process_message(message): translator = str.maketrans(\'\', \'\', string.punctuation) return message.lower().translate(translator).split() results = [] for i in range(T): K = test_cases[i][0] keywords = test_cases[i][1] message = test_cases[i][2] word_list = process_message(message) keyword_count = {key: 0 for key in keywords} for word in word_list: if word in keyword_count: keyword_count[word] += 1 most_frequent = None highest_count = 0 for keyword in sorted(keywords): if keyword_count[keyword] > highest_count: most_frequent = keyword highest_count = keyword_count[keyword] if most_frequent is None or highest_count == 0: results.append(\\"None\\") else: results.append(most_frequent) return results"},{"question":"You are given a list of integers representing a stack of boxes, where each integer denotes the height of a box. You can perform the following operation any number of times: choose two adjacent boxes and remove the shorter one (if they have the same height, remove either). Your task is to remove boxes in such a manner that at the end, you are left with a single box. Write a function that takes the list of integers as input and returns the minimum possible height of the remaining box after performing the operations any number of times. -----Input----- The function should take a single argument: - `heights` (list of integers, 1 ≤ len(heights) ≤ 5000, 1 ≤ heights[i] ≤ 10^9): the heights of the boxes. -----Output----- The function should return a single integer: - the minimum possible height of the remaining box after performing the operations. -----Examples----- Input [9, 1, 2, 6, 5] Output 1 Input [4, 4, 4, 4] Output 4 Input [10, 9, 8, 7, 6] Output 6 -----Explanation----- In the first example, one optimal sequence of operations to achieve the result is: - Remove box with height 9 (next to 1), resulting in [1, 2, 6, 5] - Remove box with height 2 (next to 1), resulting in [1, 6, 5] - Remove box with height 6 (next to 1), resulting in [1, 5] - Remove box with height 5 (next to 1), ending with a single box of height 1. In the second example, all boxes are of the same height, so the result is simply the height of the boxes, 4. In the third example, remove boxes in the sequence so that the smallest height remains: - Remove box with height 10 (next to 9), resulting in [9, 8, 7, 6] - Remove box with height 9 (next to 8), resulting in [8, 7, 6] - Remove box with height 8 (next to 7), resulting in [7, 6] - Remove box with height 7 (next to 6), ending with a single box of height 6.","solution":"def min_remaining_height(heights): Returns the minimum possible height of the remaining box after performing the operations as described any number of times. Parameters: heights (list of int): The heights of the boxes. Returns: int: The minimum possible height of the remaining box. return min(heights)"},{"question":"Given an integer N, print the Nth term of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(1) = 0 - F(2) = 1 - For each n > 2, F(n) = F(n-1) + F(n-2) Constraints * 1 leq N leq 50 Input Input is given from Standard Input in the following format: N Output Print an integer representing the Nth term of the Fibonacci sequence. Examples Input 5 Output 3 Input 10 Output 34 Input 1 Output 0","solution":"def nth_fibonacci(N): Returns the Nth term of the Fibonacci sequence. Args: N (int): The position in the Fibonacci sequence to retrieve. Returns: int: The Nth term of the Fibonacci sequence. if N == 1: return 0 elif N == 2: return 1 a, b = 0, 1 for _ in range(N - 2): a, b = b, a + b return b"},{"question":"In a distant galaxy, the interstellar trading network consists of N trading outposts, each uniquely identified by an index from 1 to N. Each outpost potentially trades with other outposts directly via trade routes that connect them. Each trade route has a specific trade cost associated with it which represents the effort (or cost) to transport goods between the connected outposts. Traders have provided a list of P trade routes, each route represented by two outposts and the trade cost between them. The trade network is represented as an undirected graph where each node is an outpost and each edge is a trade route. Given the trade routes and the costs, compute the minimum effort required to transport goods between all outposts, ensuring no two outposts are isolated from each other. You are tasked with finding the minimum total trade cost required to connect all outposts in a single network and ensuring no trade route cycle exists. This is equivalent to finding the minimum spanning tree of the graph. ------ Input Format ------ - The first line contains two space-separated integers N and P, representing the number of outposts and the number of trade routes, respectively. - The next P lines each contain three space-separated integers u, v, and w, representing a trade route between outpost u and outpost v with a cost of w. ------ Output Format ------ Print a single integer representing the minimum total trade cost required to connect all outposts. If it is not possible to connect all trading outposts, print -1. ------ Constraints ------ 1 ≤ N ≤ 10^4 0 ≤ P ≤ 5 * 10^4 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 ----- Sample Input 1 ------ 5 6 1 2 3 1 3 1 2 3 3 2 4 6 3 4 5 4 5 2 ----- Sample Output 1 ------ 11 ----- Explanation 1 ------ The minimum spanning tree of the trading network would include the edges (1-3, 3-4, 4-5, and 1-2), which have a combined cost of 1 + 5 + 2 + 3 = 11.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_spanning_tree(N, P, edges): result = 0 # Store the resulting minimum cost i = 0 # Index variable, used for sorted edges e = 0 # Number of edges in the MST edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) while e < N - 1: if i >= len(edges): return -1 # If there aren\'t enough edges to connect all nodes u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result = result + w union(parent, rank, x, y) return result def solve(input_string): data = input_string.strip().split(\'n\') N, P = map(int, data[0].split()) edges = [] for i in range(1, P + 1): u, v, w = map(int, data[i].split()) edges.append((u-1, v-1, w)) if N == 0: return -1 if P == 0: if N == 1: return 0 else: return -1 return minimum_spanning_tree(N, P, edges)"},{"question":"You have recently been appointed as the project manager for a construction site where building materials are stocked in a warehouse. The job requires handling two types of operations: 1) Retrieval Operation: When requested, the most recently added building material is retrieved from the warehouse for use on the construction site. This reduces the stock by one unit. If the warehouse is empty, the request cannot be fulfilled, and an appropriate message is given. 2) Stocking Operation: New building materials are delivered to the warehouse. Each delivery has a specified quantity of materials being added to the stockpile and each unit of the material has a unique identifier. The newest delivery is placed on top of the stockpile. Your task is to manage these operations efficiently. Input: The first line contains an integer N, representing the number of operations. Each of the next N lines contains one operation: - A Retrieval Operation is indicated by the integer 1. - A Stocking Operation is indicated by two space-separated integers 2 and M, where M is the identifier of the material being stocked. Output: For each Retrieval Operation, output the identifier of the material retrieved. If the warehouse is empty, print \\"Warehouse Empty\\" without quotes. Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^7 Sample Input 7 1 2 55 2 88 1 2 12 1 1 Sample Output Warehouse Empty 88 12 55 Explanation: Initially, the warehouse is empty. A Retrieval Operation is requested but the warehouse is empty. Output \\"Warehouse Empty\\". Material with identifier 55 is stocked in the warehouse. Material with identifier 88 is stocked in the warehouse. A Retrieval Operation retrieves the material with identifier 88. Material with identifier 12 is stocked in the warehouse. A Retrieval Operation retrieves the material with identifier 12. A Retrieval Operation retrieves the material with identifier 55.","solution":"def manage_warehouse(operations): Manages a warehouse operations including retrieval and stocking. Arguments: operations -- list of tuples representing operations Returns: List of results for each retrieval operation. warehouse = [] results = [] for operation in operations: if operation[0] == 1: # Retrieval Operation if warehouse: results.append(warehouse.pop()) else: results.append(\\"Warehouse Empty\\") elif operation[0] == 2: # Stocking Operation _, material_id = operation warehouse.append(material_id) return results # Function to parse the operations from the input format def parse_operations(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) operations = [] for i in range(1, n + 1): parts = lines[i].split() if parts[0] == \\"1\\": operations.append((1,)) else: operations.append((2, int(parts[1]))) return operations"},{"question":"Implement the function called `count_char_freq` that takes a string as input and returns a dictionary where the keys are the characters from the input string and the values are the frequencies of those characters. The function should be case-sensitive and include all characters (letters, digits, special characters, etc.). For example: ```python count_char_freq(\\"hello\\") # returns {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} count_char_freq(\\"aAbBcC\\") # returns {\'a\': 1, \'A\': 1, \'b\': 1, \'B\': 1, \'c\': 1, \'C\': 1} count_char_freq(\\"123321!\\") # returns {\'1\': 2, \'2\': 2, \'3\': 2, \'!\': 1} ```","solution":"def count_char_freq(s): Returns a dictionary with the frequency of each character in the input string s. This function is case-sensitive. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"You are given an N x M grid, where each cell contains a lowercase letter. You want to determine if it is possible to rearrange the rows of the grid such that every column becomes lexicographically sorted. You can only rearrange the rows; the columns cannot be rearranged. Write a program to determine if it is possible to achieve the desired arrangement with the given constraints. Input The input is given in the following format: N M r1 r2 : rN The first line contains the number of rows N (1 ≤ N ≤ 1000) and the number of columns M (1 ≤ M ≤ 1000). Each of the next N lines contains a string of M lowercase letters representing the grid rows. Output Output \\"possible\\" if the goal is achievable, and \\"impossible\\" otherwise. Examples Input 3 3 cba fgh ijk Output possible Input 3 3 abc def bda Output impossible","solution":"def is_possible_to_sort(N, M, grid): Determine if we can rearrange the rows of the grid such that every column is lexicographically sorted. Parameters: N (int): Number of rows M (int): Number of columns grid (List[str]): List of strings representing the grid rows Returns: str: \\"possible\\" if the columns can be sorted lexicographically by rearranging the rows, \\"impossible\\" otherwise # Attempt to sort rows based on each column value in turn for j in range(M): if not all(grid[i][j] <= grid[i+1][j] for i in range(N-1)): return \\"impossible\\" return \\"possible\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = data[2:] result = is_possible_to_sort(N, M, grid) print(result)"},{"question":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Constraint * 1 leq nums.length leq 10^5 * -10^4 leq nums[i] leq 10^4 Input The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array nums. Output The output should be the list of unique elements separated by a space. Examples Input 6 1 1 2 2 3 3 Output 1 2 3 Input 5 0 0 1 1 2 Output 0 1 2","solution":"def remove_duplicates(nums): Removes duplicates from a sorted list in-place and returns the unique elements. if not nums: return [] # Initialize the index of the next unique element. write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return nums[:write_index]"},{"question":"A software company conducts an analysis to determine the average load time of their web application across different regions. They gathered load times (in milliseconds) from various users in different regions over the past month. Your task is to write a program that will compute the average load time for each region and identify the region with the highest average load time. Input The first line of input contains an integer R, the number of regions. Each of the next R lines starts with the name of the region (a string without spaces) followed by a list of integers representing the load times in that region. Output Print the name of the region with the highest average load time and the average load time rounded to two decimal places. If there are multiple regions with the same highest average load time, print the region name that comes first lexicographically. Constraints 1 ≤ R ≤ 100 1 ≤ Number of load times in each region ≤ 1000 1 ≤ Load time ≤ 10000 SAMPLE INPUT 3 North 50 60 70 80 South 70 80 90 West 90 100 110 120 SAMPLE OUTPUT West 105.00","solution":"def process_load_times(input_data): import statistics lines = input_data.strip().split(\\"n\\") R = int(lines[0]) region_averages = {} for i in range(1, R + 1): parts = lines[i].split() region_name = parts[0] load_times = list(map(int, parts[1:])) average_load_time = statistics.mean(load_times) region_averages[region_name] = average_load_time max_average_load_time = max(region_averages.values()) regions_with_max_average = [region for region, avg in region_averages.items() if avg == max_average_load_time] region_with_highest_average = sorted(regions_with_max_average)[0] return f\\"{region_with_highest_average} {max_average_load_time:.2f}\\" # Example usage input_data = 3 North 50 60 70 80 South 70 80 90 West 90 100 110 120 print(process_load_times(input_data))"},{"question":"You are given a grid of dimensions n times m with integer values assigned to each cell. Starting from the top-left corner of the grid (0, 0), you need to reach the bottom-right corner of the grid (n-1, m-1). From any cell in the grid, you can only move to the right or move down. The sum of the values of the cells along your path matters. Define a \\"valid\\" path as one in which the sum of the values of the cells you visit is an even number. Your task is to determine if there exists at least one valid path from the top-left corner to the bottom-right corner. # Input: - The first line contains a single integer t (1 leq t leq 10^3) — the number of test cases. - Each test case begins with two integers n and m (1 leq n, m leq 100) — the dimensions of the grid. - The next n lines contain m integers each, representing the grid. The j-th integer in the i-th line is a_{i, j} (-10^4 le a_{i, j} le 10^4). # Output: For each test case, print \\"YES\\" if there is a valid path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". # Example: Input: ``` 2 2 2 1 2 3 4 3 4 1 2 3 4 1 2 3 4 1 2 3 4 ``` Output: ``` YES NO ``` # Explanation: In the first test case, one possible valid path is (1 + 2 + 4) which sums to 7 (odd), but another valid path is (1 + 3 + 4) which sums to 8 (even). In the second test case, any path you take will result in an odd sum, so there is no valid path.","solution":"def is_valid_path(grid): Determines if there is a valid path from top-left corner to bottom-right corner such that the sum of the values of the cells along the path is even. n = len(grid) m = len(grid[0]) # For even-odd parity check even_count = [[0] * m for _ in range(n)] odd_count = [[0] * m for _ in range(n)] if grid[0][0] % 2 == 0: even_count[0][0] = 1 else: odd_count[0][0] = 1 # Fill counts for the first row for j in range(1, m): if grid[0][j] % 2 == 0: even_count[0][j] = even_count[0][j-1] odd_count[0][j] = odd_count[0][j-1] + 1 if grid[0][j-1] % 2 != 0 else odd_count[0][j-1] else: odd_count[0][j] = even_count[0][j-1] even_count[0][j] = odd_count[0][j-1] + 1 if grid[0][j-1] % 2 != 0 else even_count[0][j-1] # Fill counts for the first column for i in range(1, n): if grid[i][0] % 2 == 0: even_count[i][0] = even_count[i-1][0] odd_count[i][0] = odd_count[i-1][0] + 1 if grid[i-1][0] % 2 != 0 else odd_count[i-1][0] else: odd_count[i][0] = even_count[i-1][0] even_count[i][0] = odd_count[i-1][0] + 1 if grid[i-1][0] % 2 != 0 else even_count[i-1][0] # Fill counts for the rest of the grid for i in range(1, n): for j in range(1, m): if grid[i][j] % 2 == 0: even_count[i][j] = max(even_count[i-1][j], even_count[i][j-1]) odd_count[i][j] = min(odd_count[i-1][j], odd_count[i][j-1]) + 1 if min(odd_count[i-1][j], odd_count[i][j-1]) != 0 else min(odd_count[i-1][j], odd_count[i][j-1]) else: odd_count[i][j] = max(even_count[i-1][j], even_count[i][j-1]) even_count[i][j] = min(odd_count[i-1][j], odd_count[i][j-1]) + 1 if min(odd_count[i-1][j], odd_count[i][j-1]) != 0 else min(odd_count[i-1][j], odd_count[i][j-1]) return even_count[n-1][m-1] > 0 def solve(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] if is_valid_path(grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of n non-negative integers. You can flip any number to its complement (0 becomes 1 and 1 becomes 0) in one move. Your goal is to make the list alternate between 0\'s and 1\'s starting with either 0 or 1, in the minimum number of moves. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the length of the list. The second line contains n integers ai (0 ≤ ai ≤ 1) — the elements of the list. Output Print the minimum number of moves required to make the list alternate starting with either 0 or 1. Examples Input 5 1 0 1 0 1 Output 0 Input 4 1 1 1 1 Output 2 Note In the first sample, the list is already alternating starting with 1, so no moves are needed. In the second sample, the list can be transformed to \\"1 0 1 0\\" or \\"0 1 0 1\\" with two moves.","solution":"def min_flips_to_alternate(n, a): Returns the minimum number of moves required to make the list alternate starting with either 0 or 1. pattern1_flips, pattern2_flips = 0, 0 for i in range(n): if i % 2 == 0: if a[i] != 0: pattern1_flips += 1 if a[i] != 1: pattern2_flips += 1 else: if a[i] != 1: pattern1_flips += 1 if a[i] != 0: pattern2_flips += 1 return min(pattern1_flips, pattern2_flips)"},{"question":"You are working on a text processing system that needs to determine the \\"importance\\" of certain sentences based on their structure. A sentence is considered \\"important\\" if it ends with a punctuation mark (\'.\', \'!\', \'?\') and contains at least one capitalized word (a word which starts with a capital letter and is followed by lowercase letters). Your task is to write a program that, given a list of sentences, determines whether each sentence is important or not. Input: The first line of the input contains an integer N denoting the number of sentences. The next N lines contain one sentence per line. Output: For each sentence, output \\"Important\\" if the sentence meets the requirements, otherwise output \\"Not Important\\". Constraints: 1 ≤ N ≤ 300 1 ≤ length of each sentence ≤ 200 Example: Input: 3 This is a test. another test What a day! Output: Important Not Important Important Explanation: Example case 1: The sentence \\"This is a test.\\" ends with a period and contains the capitalized word \\"This\\", so it is important. Example case 2: The sentence \\"another test\\" does not end with a punctuation mark and does not contain any capitalized words, so it is not important. Example case 3: The sentence \\"What a day!\\" ends with an exclamation mark and contains the capitalized word \\"What\\", so it is important.","solution":"def is_important_sentence(sentence): Determines if a sentence is important based on the criteria. A sentence is considered \\"important\\" if it ends with a punctuation mark (\'.\', \'!\', \'?\') and contains at least one capitalized word (a word which starts with a capital letter and is followed by lowercase letters). Parameters: sentence (str): The sentence to be evaluated. Returns: str: \\"Important\\" if the sentence is important, otherwise \\"Not Important\\". punctuation_marks = {\'.\', \'!\', \'?\'} # Check if the sentence ends with the required punctuation if not sentence[-1] in punctuation_marks: return \\"Not Important\\" # Check if there is at least one capitalized word words = sentence.split() for word in words: if word[0].isupper() and word[1:].islower(): return \\"Important\\" return \\"Not Important\\" def sentence_importance_evaluation(sentences): Takes in a list of sentences and evaluates their importance. Parameters: sentences (list): List of sentences to be evaluated. Returns: list: List of results indicating if the sentences are \\"Important\\" or \\"Not Important\\". results = [] for sentence in sentences: result = is_important_sentence(sentence) results.append(result) return results"},{"question":"Pets World has recently opened up in your city. They currently have C cages available and pets of different species need separate cages. Each pet requires exactly one cage. They have P pets of different species. Determine the minimum number of new cages needed so that each pet has its own cage. ------ Input Format ------ - The first line contains a single integer N — the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers P and C — the number of pets and the number of available cages. ------ Output Format ------ For each test case, output the minimum number of extra cages required so that each pet gets its own cage. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ P, C ≤ 100 ----- Sample Input 1 ------ 3 15 10 8 10 20 20 ----- Sample Output 1 ------ 5 0 0 ----- Explanation 1 ------ - Test case 1: There are 15 pets and 10 available cages. Therefore, 5 more cages are required. - Test case 2: There are 8 pets and 10 available cages. Therefore, no additional cages are required. - Test case 3: There are 20 pets and 20 available cages. Therefore, no additional cages are required.","solution":"def minimum_extra_cages(N, test_cases): Returns a list of the minimum number of extra cages required for each test case. Parameters: N : int : Number of test cases test_cases : list of tuples : Each tuple contains two integers P and C Returns: list of int : Minimum number of extra cages required for each test case results = [] for P, C in test_cases: if P > C: results.append(P - C) else: results.append(0) return results"},{"question":"In a kingdom far away, there are N magical stones arranged in a straight line. Each stone has a specific energy value associated with it, and some stones are cursed such that stepping on them reverses their energy sign. The magician’s objective is to collect the highest possible total energy by stepping on exactly two stones. You are given the energy values of the stones. Determine the maximum possible total energy the magician can collect by stepping on any two stones. ------ Input: ------ The first line contains a single integer T — the number of test cases. Each test case consists of two lines. The first line contains a single integer N — the number of stones. The second line contains N space-separated integers, where each integer represents the energy value of a stone. ------ Output: ------ For each test case, output a single line containing the maximum possible total energy the magician can collect by stepping on exactly two stones. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 -10^9 ≤ energy_i ≤ 10^9 ------ Sample Input 1 ------ 2 5 -1 2 3 -4 5 3 -10 -20 30 ------ Sample Output 1 ------ 8 20 ------ Explanation 1 ------ In the first test case, the optimal strategy is to step on the stones with energy values 3 and 5, yielding a total energy of 3 + 5 = 8. In the second test case, the optimal strategy is to step on the stones with energy values 30 and -10, yielding a total energy of 30 + (-10) = 20.","solution":"def max_total_energy(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] energies = test_cases[i][1] max_energy = max(energies) energies.remove(max_energy) second_max_energy = max(energies) results.append(max_energy + second_max_energy) return results"},{"question":"A binary string boldsymbol{b} of length n is given, which represents a series of integers such that each bit of the string is either 0 or 1. Define a segment of the binary string as any substring b_i b_{i+1} ldots b_j for 0 leq i leq j leq n-1. Write a function, count_segments, that takes the binary string boldsymbol{b} as input and returns the number of segments of length k which contains exactly m 1\'s. Input Format A single line containing the binary string boldsymbol{b} of length n, followed by two space-separated integers k (the length of the segments) and m (the exact number of 1\'s required in each segment). Constraints 1 leq n leq 10^6 1 leq k leq n 0 leq m leq k Output Format Print a single integer denoting the number of segments of length k containing exactly m 1\'s. Sample Input 1101001 3 2 Sample Output 2 Explanation The binary string 1101001 of length 7 has the following segments of length 3: 110, 101, 010, 100, 001 Out of these segments, 110 and 101 have exactly m=2 1\'s. Therefore, the output is 2.","solution":"def count_segments(b, k, m): Returns the number of segments of length k that contain exactly m 1\'s. Parameters: b (str): The binary string of length n. k (int): The length of the segments. m (int): The exact number of 1\'s required in each segment. Returns: int: Number of segments of length k containing exactly m 1\'s. n = len(b) count = 0 # Iterate through every possible segment of length k for i in range(n - k + 1): segment = b[i:i + k] if segment.count(\'1\') == m: count += 1 return count"},{"question":"In a tap-ahead game, you are given an array of natural numbers. Starting from the first element, you can tap ahead to any point in the array within a range defined by the value at your current position. The goal is to find the minimum number of taps required to reach the last element or determine if it\'s not possible to do so. Here\'s how the game progresses: * You start at the first element of the array. * From your current position, you can move to any position within the range defined by the value of the current element (inclusive). * The game continues until you reach or surpass the last element of the array. Your task is to calculate the minimum number of taps needed to reach or surpass the last element of the array, or determine if it\'s not possible. # Input Format - The input is given as a single line containing natural numbers separated by spaces, representing the array. # Constraints - The length of the array is between 1 and 10^6. - Each element in the array is between 1 and 10^6. # Output Format - If it is possible to reach the last element, output the minimum number of taps required. - If it is not possible to reach the last element, output -1. # Example Input ``` 2 3 1 1 4 ``` Output ``` 2 ``` Explanation 1. Starting at the first element (2), you can tap ahead to either the second (3) or third (1) element. 2. From the second element (3), you can tap ahead to the third (1), fourth (1), or fifth (4) elements. In this case, tapping to the fifth element (4) finishes the game. Hence, the minimum number of taps required is 2. Input ``` 3 2 1 0 4 ``` Output ``` -1 ``` Explanation 1. Starting at the first element (3), you can tap ahead to the second (2), third (1), or fourth (0) element. 2. From the second (2) or third (1) elements, you cannot move past the fourth element (0) to reach the fifth element (4). Thus, it is not possible to reach the last element, so the output is -1.","solution":"def min_taps_to_reach_end(arr): Returns the minimum number of taps required to reach the last element of the array or -1 if it\'s not possible. if len(arr) == 1: return 0 max_reach = 0 current_end = 0 taps = 0 for i in range(len(arr)): if i > max_reach: return -1 max_reach = max(max_reach, i + arr[i]) if i == current_end: if i != len(arr) - 1: taps += 1 current_end = max_reach if current_end >= len(arr) - 1: break return taps if max_reach >= len(arr) - 1 else -1"},{"question":"Task You will receive a list of dictionaries. Each dictionary represents a student\'s score in various subjects. Your task is to calculate the average score of each student across all subjects and return a new list showing each student\'s name and their average score in ascending order by average score. If two students have the same average score, they should be sorted alphabetically by their names. If a student has scores in multiple subjects, all those scores should be averaged. If a student has no scores, consider their average score to be zero. Each dictionary will include: - `\\"name\\"`: A string representing the student\'s name. - Other keys: Strings representing subjects, and their corresponding values are the scores (integers) in those subjects. Examples ```python input_data = [ {\\"name\\": \\"Alice\\", \\"math\\": 90, \\"science\\": 80}, {\\"name\\": \\"Bob\\", \\"english\\": 75, \\"history\\": 85}, {\\"name\\": \\"Charlie\\", \\"math\\": 100, \\"science\\": 95, \\"history\\": 100}, {\\"name\\": \\"David\\", \\"music\\": 65}, {\\"name\\": \\"Eve\\"} ] # Expected Output: # [ # {\\"name\\": \\"Eve\\", \\"average_score\\": 0}, # {\\"name\\": \\"David\\", \\"average_score\\": 65}, # {\\"name\\": \\"Bob\\", \\"average_score\\": 80}, # {\\"name\\": \\"Alice\\", \\"average_score\\": 85}, # {\\"name\\": \\"Charlie\\", \\"average_score\\": 98.33} # ] # Note: # - Eve has no scores, so her average is 0. # - David has only one score in music. # - The other students have their average scores rounded to 2 decimal places. # - The final list is sorted by average score, and in case of ties, by name alphabetically. ``` Good luck!","solution":"def calculate_average_scores(students): result = [] for student in students: name = student[\\"name\\"] subjects = {k: v for k, v in student.items() if k != \\"name\\"} if subjects: average_score = sum(subjects.values()) / len(subjects) else: average_score = 0 result.append({\\"name\\": name, \\"average_score\\": round(average_score, 2)}) result.sort(key=lambda x: (x[\\"average_score\\"], x[\\"name\\"])) return result"},{"question":"You are given a list of integers representing the heights of buildings in a city skyline. The sun rises from the left (i.e., from the start of the list) and sets on the right (i.e., at the end of the list). You need to determine the number of buildings that will have a clear view of the sunset. A building has a clear view of the sunset if all the buildings to its left are shorter than it. Write a function `countSunsetViews` that accepts a list of integers and returns the number of buildings that have a clear view of the sunset. Function Description Complete the `countSunsetViews` function in the editor below. The function should return an integer representing the number of buildings with a clear view of the sunset. countSunsetViews has the following parameter(s): - `int heights[n]`: an array representing the heights of buildings from left to right. Returns - `int`: the number of buildings with a clear view of the sunset. Input Format A single line containing multiple space-separated integers representing the heights of the buildings. Constraints - 1 leq n leq 10^5 - 1 leq heights[i] leq 10^5 Output Format Print a single integer denoting the number of buildings that have a clear view of the sunset. Sample Input 0 3 7 8 3 6 1 Sample Output 0 3 Explanation 0 In this example, the buildings with heights 3, 7, and 8 have a clear view of the sunset. The building with height 7 blocks the view for any building shorter than 7 and to its right (i.e., buildings with heights 3, 6, and 1 do not count). Only the buildings with heights 3, 7, and 8 have a clear view. Sample Input 1 1 2 3 4 5 Sample Output 1 5 Explanation 1 All buildings in this example have a clear view of the sunset because each building is taller than all the previous buildings to its left.","solution":"def countSunsetViews(heights): Returns the number of buildings with a clear view of the sunset. A building has a clear view of the sunset if all the buildings to its left are shorter than it. Args: heights (list of int): A list of integers representing the heights of buildings. Returns: int: The number of buildings with a clear view of the sunset. num_visible = 0 max_height_so_far = 0 for height in heights: if height > max_height_so_far: num_visible += 1 max_height_so_far = height return num_visible"},{"question":"Eliza is developing a simplistic inventory system for a small library. The library wants to ensure their inventory only contains unique book titles, and they occasionally need to update the title names without affecting this uniqueness. Updates should also maintain the original alphabetical order of the books. Here\'s how the process works: - Initially, all book titles are provided as a sorted list of strings. - When a new title is added: - If the title already exists, it should not be added again. - Otherwise, the title should be inserted such that the list remains sorted. - When a book title needs to be updated: - The existing title is replaced with the new title. - Post updating, the list should still be unique and sorted. Your Task Implement a class `LibraryInventory` with the following methods: 1. `__init__(self, books: List[str]) -> None`: Initializes the inventory system with a sorted list of unique book titles. 2. `add_book(self, title: str) -> None`: Adds a title to the inventory if it does not already exist. Maintains the sorted order. 3. `update_book(self, old_title: str, new_title: str) -> None`: Replaces the old title with the new title. Ensures the list remains unique and sorted. *Note: You can assume that `old_title` will always be the title of a book that is currently in the inventory when `update_book` is called.* # Example ```python library = LibraryInventory([\\"Alice in Wonderland\\", \\"Moby Dick\\", \\"The Great Gatsby\\"]) library.add_book(\\"Peter Pan\\") print(library.books) # Output: [\\"Alice in Wonderland\\", \\"Moby Dick\\", \\"Peter Pan\\", \\"The Great Gatsby\\"] library.add_book(\\"Moby Dick\\") print(library.books) # Output: [\\"Alice in Wonderland\\", \\"Moby Dick\\", \\"Peter Pan\\", \\"The Great Gatsby\\"] library.update_book(\\"The Great Gatsby\\", \\"The Catcher in the Rye\\") print(library.books) # Output: [\\"Alice in Wonderland\\", \\"Moby Dick\\", \\"Peter Pan\\", \\"The Catcher in the Rye\\"] library.update_book(\\"Moby Dick\\", \\"Animal Farm\\") print(library.books) # Output: [\\"Alice in Wonderland\\", \\"Animal Farm\\", \\"Peter Pan\\", \\"The Catcher in the Rye\\"] ``` # Constraints - Each book title is a non-empty string with a length of at most 100 characters. - The initial list of book titles is guaranteed to be sorted and contain unique titles.","solution":"from typing import List class LibraryInventory: def __init__(self, books: List[str]) -> None: self.books = books def add_book(self, title: str) -> None: if title not in self.books: self.books.append(title) self.books.sort() def update_book(self, old_title: str, new_title: str) -> None: if old_title in self.books: self.books.remove(old_title) if new_title not in self.books: self.add_book(new_title)"},{"question":"# Counting Unique Substrings Given a string, your task is to write a function that counts the number of unique substrings of length `k` in the string. The substrings are considered unique if they appear exactly once in the string. Your function should return the count of such unique substrings. # Function Signature ```python def count_unique_substrings(s: str, k: int) -> int: ``` # Input * `s` : A string of lowercase letters (1 <= len(s) <= 10^4) * `k` : An integer (1 <= k <= len(s)) # Output * An integer representing the count of unique substrings of length `k`. # Example ```python count_unique_substrings(\\"abcabc\\", 3) -> 3 # Explanation: # The substrings of length 3 are [\\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\"]. # The unique substrings are [\\"bca\\", \\"cab\\"]. # Hence the output is 2. count_unique_substrings(\\"aaaa\\", 2) -> 0 # Explanation: # The substrings of length 2 are [\\"aa\\", \\"aa\\", \\"aa\\"]. # There are no unique substrings. # Hence the output is 0. ``` # Constraints - You may assume that `s` consists only of lowercase English letters. - The function should be efficient enough to handle strings up to length 10,000.","solution":"def count_unique_substrings(s: str, k: int) -> int: Counts the number of unique substrings of length `k` that appear exactly once in the string `s`. if k > len(s): return 0 substring_count = {} # Iterate through substrings and count their occurrences for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in substring_count: substring_count[substring] += 1 else: substring_count[substring] = 1 # Count substrings that appear exactly once unique_count = sum(1 for count in substring_count.values() if count == 1) return unique_count"},{"question":"Alice and Bob are playing a game on an array of integers. In this game, Alice can choose any subarray to sort in non-decreasing order; Bob\'s task is to determine if a single such operation can convert the entire array into a non-decreasing sequence. Your task is to help Bob by determining if it is possible for Alice to sort the array with just one subarray sorting operation. A subarray is defined as a contiguous part of the array. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 10000). The description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 2 cdot 10^5) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to make the array non-decreasing with one subarray sorting operation, and \\"NO\\" otherwise. -----Examples----- Input 4 5 1 2 5 4 3 4 4 3 2 1 6 1 3 5 2 4 6 5 1 2 3 4 5 Output YES YES NO YES -----Note----- In the first example, sorting the subarray [5, 4, 3] will make the array [1, 2, 3, 4, 5] which is non-decreasing. In the second example, sorting the entire array will make it non-decreasing. In the third example, no single subarray sorting can convert the array to a non-decreasing sequence. In the fourth example, the array is already non-decreasing, so no operation is needed.","solution":"def can_sort_one_subarray(t, test_cases): results = [] for case in test_cases: n, arr = case if n == 1: results.append(\\"YES\\") continue sorted_arr = sorted(arr) # Check if entire array is already sorted if arr == sorted_arr: results.append(\\"YES\\") continue # Find start of the first unsortable section start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # Find the end of the first unsortable section end = n - 1 while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Check if sorting the identified subarray makes the entire array sorted subarray_sorted = arr[:start] + sorted(arr[start:end + 1]) + arr[end + 1:] if subarray_sorted == sorted_arr: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # For compatibility with the test cases def process_input_output(inputs): t = int(inputs[0]) test_cases = [] index = 1 for _ in range(t): n = int(inputs[index]) arr = list(map(int, inputs[index + 1].split())) test_cases.append((n, arr)) index += 2 return can_sort_one_subarray(t, test_cases)"},{"question":"In a certain coding competition, one of the problems requires calculating the popularity of specific hashtags on a social media platform. Each hashtag is represented as a string of lowercase alphabetic characters, and may appear multiple times in a single input line. The job is to count the occurrences of each hashtag across multiple lines of input text and output the hashtags in order of their popularity in descending order. If two hashtags have the same number of occurrences, they should be output in lexicographical order. # Input The first line contains an integer T (1 ≤ T ≤ 10) representing the number of input lines. Each of the following T lines contains a sentence of lowercase alphabetic characters and hashtags. A hashtag is defined as a string starting with `#` followed by one or more lowercase alphabetic characters. Words and hashtags in each line are separated by one or more spaces or none at all. # Output For each input line, output the list of hashtags sorted by their frequency in descending order. If two hashtags have the same frequency, sort them lexicographically in ascending order. # Example **Input:** ``` 3 i love the #weather it is really #nice today #weather #sunny #party at my place #party #fun #vibes #food is life #delicious #food #yum #delicious #yum #delicious ``` **Output:** ``` #weather 2 #nice 1 #sunny 1 #party 2 #fun 1 #vibes 1 #delicious 3 #food 2 #yum 2 ``` # Explanation - In the first line, `#weather` appears 2 times, `#nice` and `#sunny` appear 1 time each. - In the second line, `#party` appears 2 times, followed by `#fun` and `#vibes`, each appearing once. - In the third line, `#delicious` appears 3 times, `#food` and `#yum` appear 2 times each. Since `#delicious` is the most frequent, it comes first, followed by `#food` and `#yum` in lexicographical order given they have the same frequency.","solution":"def calculate_hashtag_popularity(input_lines): Calculates the popularity of hashtags in each input line. Args: input_lines: List of strings where each string is a line of input containing hashtags. Returns: List of lists where each sublist contains hashtags sorted by their popularity in descending order. from collections import Counter import re result = [] for line in input_lines: hashtags = re.findall(r\'#w+\', line) hashtag_count = Counter(hashtags) sorted_hashtags = sorted( hashtag_count.items(), key=lambda item: (-item[1], item[0]) ) result.append([(tag, freq) for tag, freq in sorted_hashtags]) return result"},{"question":"You are given a number \'N\'. Your task is to find the smallest number \'k\' such that 1 + 2 + 3 + ... + k >= N. Example 1: Input: N = 10 Output: 4 Explanation: The sum of the first 4 natural numbers is 10, which is exactly equal to N. Example 2: Input: N = 20 Output: 6 Explanation: The sum of the first 6 natural numbers is 21, which is greater than N. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestK() which takes the integer N as input parameters and returns the smallest integer k such that the sum of the first k natural numbers is greater than or equal to N. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^9","solution":"import math def smallestK(N): Returns the smallest k such that the sum of the first k natural numbers is greater than or equal to N. # The sum of the first k natural numbers is k * (k + 1) / 2 # We need to solve the inequality k * (k + 1) / 2 >= N # => k^2 + k - 2N >= 0 which is a quadratic equation # Using quadratic formula: k = [-1 + sqrt(1 + 8N)] / 2 k = math.ceil((-1 + math.sqrt(1 + 8 * N)) / 2) return k"},{"question":"Nina and her friends are designing a secret messaging system. In this system, each message is encoded with a unique key. The key is an integer that indicates how many positions each character in the original message should be shifted forward in the alphabet. For example, with a key of 3, \'A\' becomes \'D\', \'B\' becomes \'E\', and so on, wrapping around to the beginning of the alphabet if necessary (\'Z\' becomes \'C\'). You have been tasked to write a code that takes an encoded message and a key and returns the decoded message. Note that the encoded message only contains uppercase alphabetic characters without any spaces or punctuation. Input: The first line will contain the number of test cases, \'t\'. The following \'t\' lines will each contain an encoded message followed by a space and the key. Output: For each test case, print the decoded message. Example: Input: 2 KHOOR 3 ZRUOG 3 Output: HELLO WORLD","solution":"def decode_message(encoded_message, key): Decodes the encoded message by shifting the characters backward by the key amount. Parameters: - encoded_message: a string of uppercase alphabetic characters - key: integer indicating the number of positions to shift each character backward Returns: - a decoded string decoded_message = [] for char in encoded_message: decoded_char = chr(((ord(char) - ord(\'A\') - key) % 26) + ord(\'A\')) decoded_message.append(decoded_char) return \'\'.join(decoded_message) def decode_multiple_messages(test_cases): Decodes multiple messages based on the provided test cases. Parameters: - test_cases: list of tuples, where each tuple contains an encoded message and a key Returns: - list of decoded messages return [decode_message(encoded, key) for encoded, key in test_cases]"},{"question":"A company is organizing a team-building activity in which participants must form pairs and complete a series of challenges together. The participants are numbered 1 through N, and the skill level of participant i is represented by S_i. Each challenge requires participants to be paired up, and the team skill for a pair is defined as the sum of their individual skill levels. The organizers want to maximize the minimum team skill among all pairs. In other words, they want the weakest team to be as strong as possible. Your task is to find the maximum possible value of the minimum team skill by optimally pairing the participants. -----Constraints----- - All values in input are integers. - 2 leq N leq 10^5 - 1 leq S_i leq 10^9 - N is an even number -----Input----- Input is given from Standard Input in the following format: N S_1 S_2 dots S_N -----Output----- Print the maximum possible value of the minimum team skill by optimally pairing the participants. -----Sample Input----- 4 3 6 2 8 -----Sample Output----- 9 By pairing participants as (2, 8) and (3, 6), the minimum team skill is 9, which is the maximum achievable with the given skill levels. The answer is therefore 9.","solution":"def max_min_team_skill(N, skills): # First, sort the skill levels skills.sort() # Initialize a list to store the team skills team_skills = [] # Pair the smallest and largest remaining skill levels for i in range(N // 2): team_skills.append(skills[i] + skills[N - 1 - i]) # The minimum of these team skills is the answer return min(team_skills) # Example input N = 4 skills = [3, 6, 2, 8] print(max_min_team_skill(N, skills)) # Output: 9"},{"question":"Given a list of integers, return all possible subsets (the power set) of the list without duplicates. The solution set must not contain duplicate subsets. Input: ``` 6 1 2 3 ``` Output: ``` [[3], [1], [2, 3], [1, 2, 3], [1, 2], [2], []] ``` Input: ``` 4 0 ``` Output: ``` [[0], []] ``` Input: ``` 5 1 2 ``` Output: ``` [[2], [1], [1, 2], []] ```","solution":"from itertools import combinations def subsets(nums): Return all possible subsets (power set) of the list without duplicates. set_nums = set(nums) # Remove duplicates while maintaining unordered collection for subsets. nums = list(set_nums) result = [] for i in range(len(nums) + 1): for comb in combinations(nums, i): result.append(list(comb)) return result"},{"question":"The librarian of a prestigious library wants to keep track of the different titles available in the library. They need a system to manage the book titles in a specific way: only unique books are kept on the list and any duplicate titles must be tracked for counting purposes (but appear only once in the list). -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with an integer N, the number of books. - Next line contains N space-separated strings representing the titles of the books. -----Output:----- For each test case, output the list of unique book titles in the order they first appeared and alongside each title, show the number of times each title appears in the input list. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 10^4 - Each title is a string of up to 100 characters consisting of only lowercase letters. -----Sample Input:----- 2 5 harrypotter twilight harrypotter thehobbit twilight 4 gameofthrones becoming gameofthrones dune -----Sample Output:----- harrypotter 2 twilight 2 thehobbit 1 gameofthrones 2 becoming 1 dune 1 -----EXPLANATION:----- For 1) The list of unique book titles is: [harrypotter, twilight, thehobbit] with harrypotter appearing 2 times, twilight appearing 2 times, and thehobbit appearing 1 time. For 2) The list of unique book titles is: [gameofthrones, becoming, dune] with gameofthrones appearing 2 times, becoming appearing 1 time, and dune appearing 1 time.","solution":"def track_books(t, test_cases): from collections import OrderedDict results = [] for i in range(t): n = test_cases[i][0] titles = test_cases[i][1] book_counts = OrderedDict() for title in titles: if title in book_counts: book_counts[title] += 1 else: book_counts[title] = 1 result = \'n\'.join([f\\"{title} {count}\\" for title, count in book_counts.items()]) results.append(result) return results"},{"question":"In a mysterious forest, there is a very special tree known as the Fibonacci Tree. The Fibonacci tree\'s structure follows the Fibonacci sequence in a unique way. The tree grows according to the following rules: - The root (level 0) starts as a single node labeled `1`. - The first level has one child node labeled `1`. - From the second level onwards, each node `x` on level `i` has two children: - One child labeled `y` which is the left child of `x`. - One child labeled `z` which is the right child of `x`. - For node `x` in level `i`: - `y` is labeled with the Fibonacci number `F(i-1)` (for the left child). - `z` is labeled with the Fibonacci number `F(i-2)` (for the right child). Given a level number `n`, your task is to print the labels of the nodes at level `n` from left to right. Recall the Fibonacci sequence is defined as follows: - `F(0) = 0` - `F(1) = 1` - `F(k) = F(k-1) + F(k-2)` for `k > 1` -----Input----- The input consists of a single integer `n` (0 leq n leq 20), representing the level of the Fibonacci tree. -----Output----- Output a single line containing the labels of the nodes at level `n` from left to right, separated by spaces. -----Example----- Input 2 Output 1 0","solution":"def fibonacci(n): Compute the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) def fibonacci_tree_level(n): Prints the labels of the nodes at level n from left to right. if n == 0: return [1] elif n == 1: return [1] else: level_nodes = [] for i in range(2, n+1): left_child = fibonacci(i-1) right_child = fibonacci(i-2) level_nodes.extend([left_child, right_child]) return level_nodes # Test example level = 2 print(\\" \\".join(map(str, fibonacci_tree_level(level))))"},{"question":"Sentence Reversal In this problem, you need to write a function that reverses the order of words in a given sentence while preserving the position of punctuation marks. Spaces and punctuation marks should remain in their original places. # Specifications - Input: A string consisting of words, spaces, and punctuation marks. - Output: A string with the words in reversed order, keeping spaces and punctuation marks at their original positions. # Example ```python sentence_reversal(\\"Hello, world!\\") = \\"world, Hello!\\" sentence_reversal(\\"Coding is fun.\\") = \\"fun is Coding.\\" ``` # Constraints 1. The input string consists of words, spaces, and punctuation marks. 2. Words are sequences of alphabetic characters. 3. Spaces and punctuation marks remain in their original positions.","solution":"def sentence_reversal(s): Reverses the order of words in a given sentence while preserving the position of punctuation marks. Args: s (str): The input sentence. Returns: str: The sentence with words in reversed order, spaces and punctuation marks in their original positions. import re # Extract words from the sentence words = re.findall(r\'bw+b\', s) # Reverse the order of words reversed_words = words[::-1] # Replace the words in the original sentence sentence_with_reversed_words = re.sub(r\'bw+b\', lambda match: reversed_words.pop(0), s) return sentence_with_reversed_words"},{"question":"A company has a warehouse with M rows and N columns, forming a grid. Each cell can contain a 0 or a 1. The company has a device that can query a sub-grid of any size within this main grid. The device returns a result based on the sum of the cells within the queried sub-grid. Your task is to design a program that finds the total sum for the entire warehouse grid using the minimum number of queries possible. The sum of a sub-grid is defined as the sum of all cell values within that sub-grid. To expedite this process, you will be allowed to query only rectangular sub-grids, and the device will return the total sum for that sub-grid. Your goal is to determine the sum of the entire grid with the least number of these queries. # Input - The first input is given in the following format: two integers M and N (1 ≤ M, N ≤ 50), representing the number of rows and columns of the grid, respectively. - After the initial inputs, the program must print multiple queries. Each query is a rectangle defined by its top-left corner `(r1, c1)` and its bottom-right corner `(r2, c2)`. Here, `(r1, c1)` represents the top-left coordinate of the sub-grid, and `(r2, c2)` represents the bottom-right coordinate of the sub-grid. # Output - The device will return an integer representing the sum of the queried sub-grid. - Once the program determines the sum of the entire grid, it should print the total sum and exit. # Example Assume the warehouse grid is as follows (M=3, N=4): ``` 1 0 1 1 0 1 0 1 1 1 0 0 ``` Input: ``` 3 4 ``` Output: ``` 0 0 2 2 ``` If the device returns 5 for this sub-grid, then: ``` 1 0 1 0 1 0 1 1 0 ``` Another valid way to divide and conquer could be: Input: ``` 0 0 0 1 ``` Output: ``` 2 ``` So on, until the program finds the sum of the entire grid.","solution":"def calculate_grid_sum(M, N, query_function): Calculate the sum of the entire grid with M rows and N columns using the minimum number of queries. :param M: int - number of rows :param N: int - number of columns :param query_function: callable - function that takes r1, c1, r2, c2 and returns sum of the sub-grid :return: int - total sum of all cells in the grid # The optimal way to cover the grid with the least number of queries is to query the entire grid in one go total_sum = query_function(0, 0, M-1, N-1) return total_sum"},{"question":"You have two arrays, `a` and `b`, each consisting of `n` integers. Your goal is to calculate the minimum possible absolute difference between any two elements `a[i]` and `b[j]` (0 le i, j < n). -----Input----- The first line contains an integer `n` (1 le n le 10^5), the number of elements in both arrays. The second line contains `n` integers a_0, a_1, ..., a_{n-1} (-10^9 le a_i le 10^9), the elements of array `a`. The third line contains `n` integers b_0, b_1, ..., b_{n-1} (-10^9 le b_i le 10^9), the elements of array `b`. -----Output----- Print a single integer, representing the minimum possible absolute difference between any two elements `a[i]` and `b[j]`. -----Examples----- Input 3 1 3 15 8 18 2 Output 1 Input 4 10 20 30 40 1 2 3 4 Output 6 -----Note----- In the first example, the minimum absolute difference is achieved between `a[0] = 1` and `b[2] = 2`, giving left|1 - 2right| = 1. In the second example, the minimum absolute difference is achieved between `a[0] = 10` and `b[3] = 4`, giving left|10 - 4right| = 6.","solution":"def min_abs_difference(n, a, b): Calculate the minimum possible absolute difference between any two elements `a[i]` and `b[j]` where 0 <= i, j < n. # Sort both arrays a.sort() b.sort() # Initialize pointers and minimum difference i, j = 0, 0 min_diff = float(\'inf\') # Traverse both arrays to find the minimum absolute difference while i < n and j < n: min_diff = min(min_diff, abs(a[i] - b[j])) if a[i] < b[j]: i += 1 else: j += 1 return min_diff"},{"question":"Binary string flipping You are given a binary string, which consists of \'0\'s and \'1\'s. You need to make sure that no two consecutive characters in the binary string are the same. To achieve this, you are allowed to flip any character i.e., change a \'0\' to \'1\' or a \'1\' to \'0\'. Your task is to determine the minimum number of flips required to make the binary string alternate. Input The only line of input contains a non-empty binary string. Its length does not exceed 10^5. Output Output a single number - the minimum number of flips needed to make the binary string alternate. Examples Input 001 Output 1 Input 1010101 Output 0 Input 11111 Output 2","solution":"def min_flips_to_alternate(s): Returns the minimum number of flips required to make the given binary string alternate. :param s: str, a non-empty binary string :return: int, minimum number of flips required n = len(s) # Generate two possible alternating strings of the same length as s alt1 = \'\'.join(\'01\'[(i % 2)] for i in range(n)) alt2 = \'\'.join(\'10\'[(i % 2)] for i in range(n)) # Count flips required to make s match alt1 and alt2 flips1 = flips2 = 0 for i in range(n): if s[i] != alt1[i]: flips1 += 1 if s[i] != alt2[i]: flips2 += 1 # Return the minimum flips required return min(flips1, flips2)"},{"question":"You are given a binary tree consisting of N nodes. Each node has a value associated with it. The height of a binary tree is defined as the number of edges in the longest path from the root to a leaf. You need to find the maximum sum of values from the root to a leaf node, and the nodes that are part of the path which gives this maximum sum. -----Constraints----- - 1 leq N leq 10^5 - The value of each node is between -10^9 and 10^9 inclusive - The input is given as a set of N lines. Each line represents a node and contains three space-separated integers: the value of the node and the indices of its left and right children respectively. If a node does not have a left or right child, the respective integer will be -1. -----Input----- The input is given from the Standard Input in the following format: N value_1 left_child_index_1 right_child_index_1 value_2 left_child_index_2 right_child_index_2 ... value_N left_child_index_N right_child_index_N -----Output----- Print the maximum sum from the root to a leaf, followed by the space-separated indices of the nodes that form this path from the root to the leaf which gives this maximum sum. -----Sample Input----- 5 3 1 2 5 -1 3 4 -1 -1 6 4 -1 2 -1 -1 -----Sample Output----- 14 0 1 3 4 Explanation: The binary tree is represented as follows: ``` 3 / 5 4 6 / 2 ``` The path that gives the maximum sum is 3 -> 5 -> 6 -> 2 with a sum of 14. The indices of the nodes forming this path are 0, 1, 3, and 4 respectively, resulting in the output \\"14 0 1 3 4\\".","solution":"class TreeNode: def __init__(self, value, left=-1, right=-1): self.value = value self.left = left self.right = right def find_max_sum_path(root, node_dict): if root == -1: return 0, [] node = node_dict[root] left_sum, left_path = find_max_sum_path(node.left, node_dict) right_sum, right_path = find_max_sum_path(node.right, node_dict) if left_sum > right_sum: return left_sum + node.value, [root] + left_path else: return right_sum + node.value, [root] + right_path def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) node_data = data[1:] node_dict = {} index = 0 for i in range(N): value = int(node_data[index]) left = int(node_data[index + 1]) right = int(node_data[index + 2]) node_dict[i] = TreeNode(value, left, right) index += 3 max_sum, path = find_max_sum_path(0, node_dict) print(max_sum, \' \'.join(map(str, path)))"},{"question":"Chef has an array B of size M and an integer X. He can perform the following operation on B any number of times: Select any X distinct indices i_{1}, i_{2}, ldots, i_{X} and multiply the array elements at these X indices by 2. Formally, set B_{i_{j}} := B_{i_{j}} * 2 for all 1 ≤ j ≤ X. For example, if B = [1, 3, 5, 2, 4] and we select the indices 1, 3, 4, then B becomes [1 * 2, 3, 5 * 2, 2 * 2, 4] i.e. [2, 3, 10, 4, 4]. Determine if Chef can make all elements of the array B even by applying the given operation any number of times. Note: An even number is an integer which when divided by 2 yields another integer (for example, 4, 6, and 8 are even). ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers M and X — the size of the array B and the parameter mentioned in the statement. - The second line of each test case contains M space-separated integers B_{1}, B_{2}, ldots, B_{M} denoting the array B. ------ Output Format ------ For each test case, output YES if we can make all elements of B even by applying the given operation. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤X ≤M ≤10^{5} 1 ≤B_{i} ≤10^{6} - Sum of M over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 4 5 3 1 3 5 2 4 6 2 3 5 7 9 10 12 5 1 4 7 8 10 2 4 4 2 4 6 8 ----- Sample Output 1 ------ YES YES YES YES ----- explanation 1 ------ Test case 1: - Select index [1, 3, 4]: B becomes [2, 3, 10, 4, 4] - Select index [2]: B becomes [2, 6, 10, 4, 4] Test case 2: - Select index [1, 3]: B becomes [6, 5, 14, 9, 10, 12] - Select index [2, 4]: B becomes [6, 10, 14, 18, 10, 12] Test case 3: - Select index [2]: B becomes [4, 14, 8, 10, 2] Test case 4: - The given array B is already composed entirely of even numbers.","solution":"def can_make_all_even(T, test_cases): results = [] for M, X, B in test_cases: odd_count = sum(1 for num in B if num % 2 != 0) if odd_count == 0: results.append(\\"YES\\") elif odd_count % X == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"*** Matrix Word Search *** In this kata, you need to find if a given word exists in a matrix of characters. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a function `exist(matrix: List[List[str]], word: str) -> bool` that takes a 2D matrix of characters and a word as inputs and returns `True` if the word exists in the matrix according to the specified rules, and `False` otherwise. # Examples: ```python exist([ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], \\"ABCCED\\") # returns True, because the word \\"ABCCED\\" can be constructed from the matrix. exist([ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], \\"SEE\\") # returns True, because the word \\"SEE\\" can be constructed from the matrix. exist([ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], \\"ABCB\\") # returns False, because the letter cell \'B\' from the first row and the letter cell \'B\' from the second row cannot be reused to form the word \\"ABCB\\". ``` # Constraints: - `matrix` contains only lowercase and/or uppercase English letters. - The dimensions of the matrix are between `1 x 1` and `200 x 200`. - The length of `word` is between `1` and `10,000`.","solution":"from typing import List def exist(matrix: List[List[str]], word: str) -> bool: if not matrix: return False rows, cols = len(matrix), len(matrix[0]) def dfs(r, c, i): if i == len(word): return True if (r < 0 or c < 0 or r >= rows or c >= cols or matrix[r][c] != word[i]): return False temp = matrix[r][c] matrix[r][c] = \'#\' # mark the cell as visited found = (dfs(r + 1, c, i + 1) or dfs(r - 1, c, i + 1) or dfs(r, c + 1, i + 1) or dfs(r, c - 1, i + 1)) matrix[r][c] = temp # unmark the cell return found for row in range(rows): for col in range(cols): if dfs(row, col, 0): return True return False"},{"question":"# Mirror Image You are given a square matrix of size `n x n`. Write a function that rotates the matrix 90 degrees clockwise. The rotation should be done in-place, which means you have to modify the input matrix directly. Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` Input - A square matrix `matrix` represented as a list of `n` lists, each containing `n` integers, where `1 ≤ n ≤ 100`. Output - The function should not return anything, it should modify the matrix in-place. Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # The matrix after rotation should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Constraints - You are allowed to use only constant extra space apart from the input matrix itself. - Do not use any libraries that perform the rotation directly; you should implement the rotation logic manually.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix (convert rows to columns) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row to complete the 90 degree rotation for i in range(n): matrix[i].reverse()"},{"question":"Read problems statements in Mandarin Chinese and Russian. Given a sorted array of N integers, determine the length of the longest subarray with all elements equal. Each test case consists of a single line containing the integer N and the sorted array of N integers. ------ Input ------ The first line of input contains T, the number of test cases. Each of the next T lines contains N followed by N space-separated integers. ------ Output ------ For each test case, output the length of the longest subarray where all elements are equal in a single line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{9} for 1 ≤ i ≤ N ------ Sample Input 1 ----- 2 5 1 1 2 2 2 4 2 2 2 2 ------ Sample Output 1 ----- 3 4 ------ Explanation 1 ------ test #1: The longest subarray with all elements equal is [2, 2, 2], which has length 3. test #2: The entire array [2, 2, 2, 2] consists of equal elements, so the longest subarray is of length 4.","solution":"def longest_equal_subarray_length(N, array): Returns the length of the longest subarray with all elements equal. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if array[i] == array[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(test_cases): results = [] for N, array in test_cases: results.append(longest_equal_subarray_length(N, array)) return results"},{"question":"You are given a matrix of integers a consisting of n rows and m columns, and q queries about this matrix. There are two types of queries: * 1 x y v — for the element in row x and column y of the matrix, set a[x][y] = v. * 2 x y — find the value of the element in row x and column y of the matrix. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines each contain m integers — the elements of the matrix a (1 ≤ a[i][j] ≤ 109). The next line contains one integer q (1 ≤ q ≤ 10000). Then q lines follow, each representing a query. Each query is given either as 1 x y v — set the element in row x and column y to v (1 ≤ x ≤ n, 1 ≤ y ≤ m, 1 ≤ v ≤ 109) or as 2 x y — find the value of the element in row x and column y (1 ≤ x ≤ n, 1 ≤ y ≤ m). Output For each query of type 2, print the value of the corresponding element. Examples Input 3 3 1 2 3 4 5 6 7 8 9 4 2 1 1 1 1 1 10 2 1 1 2 3 3 Output 1 10 9 Input 2 2 1 2 3 4 3 2 2 2 1 2 2 8 2 2 2 Output 4 8","solution":"def process_queries(n, m, matrix, queries): results = [] for query in queries: q_type, x, y, *v = query if q_type == 1: matrix[x - 1][y - 1] = v[0] elif q_type == 2: results.append(matrix[x - 1][y - 1]) return results"},{"question":"Given an array of integers where each integer appears exactly twice, except for one integer which appears exactly once, write a program to find the integer that appears only once. Input The input consists of a single line containing an integer array a of length n (1 ≤ n ≤ 10^5) where each integer 1 ≤ ai ≤ 10^6. Output Output the integer that appears exactly once in the array. Examples Input 2 2 1 1 3 4 4 Output 3 Input 1000000 999999 999999 1000000 555555 Output 555555 Input 7 7 8 8 9 9 10 Output 10 Input 4 3 4 2 2 Output 3","solution":"def find_unique_element(arr): Returns the element that appears exactly once in the array. Args: arr: List of integers where all appear twice except one. Returns: The single element that appears exactly once. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given a string S consisting of lowercase English letters, and Q queries to deal with. For each query, you are given a substring P, and you are supposed to count the number of occurrences of P in S. Input: The first line contains the string S. The second line contains an integer Q, denoting the number of queries. The next Q lines contain a single string P per line. Output: For each query, print the number of times the substring P appears in S. Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ |P| ≤ 10^3 SAMPLE INPUT ababab 3 ab ba aba SAMPLE OUTPUT 3 2 2","solution":"def count_occurrences(S, queries): Returns a list of the number of occurrences of each query substring in string S. Parameters: S (str): The main string. queries (list): A list of query substrings. Returns: list: List of integers where each integer is the count of occurrences of the respective query in S. results = [] for query in queries: count = 0 index = S.find(query) while index != -1: count += 1 index = S.find(query, index + 1) results.append(count) return results"},{"question":"Maria is organizing a marathon and wants to determine the maximum number of participants that can start together. Given the starting time preferences of participants, you need to help her find the largest set of times where participants can be grouped to start the marathon together without having any gaps in their preferred starting times. The starting times are represented as integers in an array T where each element represents a preferred starting time in minutes from the start of the day. INPUT The first line of the input contains N (the number of participants). The next line contains N space-separated integers representing the preferred starting times. OUTPUT Print the size of the largest group of participants that can start together with consecutive starting times. CONSTRAINTS 1 ≤ N ≤ 100000 0 ≤ T[i] ≤ 1440 (24 hours in minutes) SAMPLE INPUT 6 540 541 542 543 545 546 SAMPLE OUTPUT 4","solution":"def max_consecutive_group_size(T): Returns the size of the largest group of participants that can start together with consecutive starting times. if not T: return 0 T.sort() max_count = 1 current_count = 1 for i in range(1, len(T)): if T[i] == T[i - 1] + 1: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 return max(max_count, current_count)"},{"question":"You are handling a list of email addresses, and for better readability, you need to extract only the usernames from these addresses. For instance, given the email address `user@example.com`, the username extracted should be `user`. Given a string consisting of multiple email addresses separated by spaces, your task is to extract only the usernames and join them into a single string separated by spaces. Input Format A single line of input containing multiple email addresses separated by spaces, mbox{S}. Constraints 1 leq len(S) leq 1000 Each email address is composed of alphanumeric characters, underscores, and periods. There will be no special characters other than the \'@\' symbol used in the email addresses. Output Format Print the extracted usernames as a single string separated by spaces. Sample Input john.doe@example.com jane_smith@domain.org jack.t@company.net Sample Output john.doe jane_smith jack.t","solution":"def extract_usernames(emails): Extracts the usernames from a string of email addresses separated by spaces. email_list = emails.split() usernames = [email.split(\'@\')[0] for email in email_list] return \' \'.join(usernames)"},{"question":"You have an array of integers which is initially sorted in ascending order but has been rotated at an unknown pivot. For instance, the array [1, 2, 3, 4, 5, 6, 7] might become [4, 5, 6, 7, 1, 2, 3] after a rotation. Your task is to design a function that finds the minimum element in the rotated sorted array in a more efficient manner than O(n). Write a function `find_min(arr)` that takes a list of integers `arr` and returns the minimum element of the array. # Constraints * 1 ≤ len(arr) ≤ 10^5 * -10^4 ≤ arr[i] ≤ 10^4 # Input The function takes a single input: * `arr`: A list of integers representing the rotated sorted array. # Output The function should return an integer which is the minimum element in the array. # Example Input: ```python arr = [4, 5, 6, 7, 0, 1, 2] ``` Output: ```python 0 ``` Input: ```python arr = [3, 4, 5, 1, 2] ``` Output: ```python 1 ``` Input: ```python arr = [1] ``` Output: ```python 1 ``` # Note 1. Your solution should have a time complexity of O(log n), which suggests the use of a binary search approach. 2. Consider edge cases where the rotation might be at the beginning or end of the array, or there might not be any rotation at all.","solution":"def find_min(arr): Returns the minimum element in a rotated sorted array. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"You are given an array of N integers. Your task is to find out if the array contains a subarray with an odd length whose sum is an even number. A subarray is a contiguous portion of the array. Its length is the number of elements in it, and its sum is the total of its elements. ------ Input ------ The first line of the input contains a single integer T, denoting the number of test cases. The description of the T test cases follows. The first line of each test case contains a single integer N, the length of the array. The second line contains N space-separated integers, representing the elements of the array. ------ Output ------ For each test case, print \\"YES\\" if there exists a subarray with an odd length and an even sum; otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^{4} ≤ a_{i} ≤ 10^{4} ----- Sample Input 1 ------ 2 4 1 2 3 4 3 1 3 5 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Example case 1: In the first test case, the subarray [1, 2, 3] has an odd length (3) and its sum is 6, which is even. Example case 2: In the second test case, no subarray of odd length has an even sum.","solution":"def has_odd_length_even_sum_subarray(arr): n = len(arr) for length in range(1, n + 1, 2): # Check only odd lengths for i in range(n - length + 1): subarray_sum = sum(arr[i:i + length]) if subarray_sum % 2 == 0: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(has_odd_length_even_sum_subarray(arr)) return results"},{"question":"Given an array of integers, return the indices of two distinct elements such that their product is maximum. If multiple pairs have the same product, return the indices of the pair with the smaller first index. If no valid pair exists, return `(-1, -1)`. ``` For example: Given array = [3, 4, 5, 2]... max_product_indices([3, 4, 5, 2]) = (1, 2). The pair of elements are 4 (index 1) and 5 (index 2) which have the product 20, which is the maximum product. max_product_indices([1, 10, 2, 6, 10]) = (1, 4). The pairs (10, 10) have the maximum product 100, but the indices (1, 4) are preferred over (3, 4) because the first index 1 is smaller than 3. max_product_indices([1]) = (-1, -1). No valid pair exists since there\'s only one element in the array. ``` More examples in test cases. Good luck!","solution":"def max_product_indices(arr): Given an array of integers, return the indices of two distinct elements such that their product is maximum. If multiple pairs have the same product, return the indices of the pair with the smaller first index. If no valid pair exists, return (-1, -1). if len(arr) < 2: return (-1, -1) max_product = float(\'-inf\') max_indices = (-1, -1) for i in range(len(arr)): for j in range(i + 1, len(arr)): product = arr[i] * arr[j] if product > max_product or (product == max_product and i < max_indices[0]): max_product = product max_indices = (i, j) return max_indices"},{"question":"John wants to visit all the theme parks in a certain region, each represented by a node in a directed graph. The nodes are numbered from 1 to n (1 ≤ n ≤ 100). There are m directed edges between the nodes (1 ≤ m ≤ 500), each of which takes a certain positive cost to travel along. John starts his journey at node 1 and can only move in the direction of the edges, and wishes to travel through all of the nodes. He can revisit nodes if necessary, and the total travel cost is the sum of all the edges he travels. You need to help John determine the minimum total travel cost to visit all nodes starting from node 1. If there is no valid path that allows him to visit all nodes, return -1. Input The first line contains two space-separated integers n and m — the number of nodes and edges, respectively. Each of the following m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing an edge from node u to node v with a travel cost of w. Output Output a single integer representing the minimum total travel cost to visit all nodes starting from node 1, or -1 if it is not possible. Example Input 4 4 1 2 1 2 3 2 3 4 3 4 2 4 Output 6 Explanation John can take the path 1 → 2 → 3 → 4 with a total travel cost of 6. Once he reaches node 4, he can use the existing edge 4 → 2 to cover node 2. Input 4 2 1 2 1 3 4 2 Output -1 Explanation There is no way for John to visit nodes 3 and 4 starting from node 1. Hence, the output is -1.","solution":"import heapq def minimum_travel_cost(n, m, edges): Returns the minimum cost to visit all nodes starting from node 1 or -1 if not possible. :param n: Number of nodes (1 <= n <= 100) :param m: Number of edges (1 <= m <= 500) :param edges: List of tuples (u, v, w) representing an edge from node u to node v with cost w # Construct graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distance array with infinity dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, 1)] # (cost, node) while pq: current_cost, u = heapq.heappop(pq) # Proceed if we found a cheaper way to get to node u if current_cost > dist[u]: continue for v, w in graph[u]: new_cost = current_cost + w if new_cost < dist[v]: dist[v] = new_cost heapq.heappush(pq, (new_cost, v)) # Verify if all nodes have been visited max_cost = max(dist.values()) return max_cost if max_cost < float(\'inf\') else -1"},{"question":"Ravi loves painting and often finds himself mixing different colors. However, Ravi is also a programmer and decided to write a program to determine if a newly mixed color could be made using a set of basic colors available to him. In this problem, a color is represented by its RGB values which range from 0 to 255. Given a set of basic colors and a target color, you need to determine if the target color can be obtained by summing up one or more of the provided basic colors. Input: The first line contains a positive integer t - number of test cases. For each test case, the first line contains an integer k - number of basic colors. The next k lines each contain three space-separated integers ranging from 0 to 255, representing the RGB values of the basic colors. The following line contains three space-separated integers ranging from 0 to 255, representing the RGB values of the target color. Output: For each test case, output a single line containing “Yes” (without quotes) if the target color can be obtained by summing up one or more of the basic colors, or “No” (without quotes) if it cannot. Constraints: 1 ≤ t ≤ 1000 1 ≤ k ≤ 100 0 ≤ RGB values ≤ 255 SAMPLE INPUT 2 3 255 0 0 0 255 0 0 0 255 255 255 255 2 100 150 200 50 100 50 100 150 250 SAMPLE OUTPUT Yes No","solution":"def can_form_color(basic_colors, target_color): from itertools import combinations def add_colors(color1, color2): return tuple(min(c1 + c2, 255) for c1, c2 in zip(color1, color2)) colors = list(basic_colors) # Start with the given basic colors for i in range(2, len(basic_colors) + 1): for combo in combinations(basic_colors, i): combined_color = (0, 0, 0) for color in combo: combined_color = add_colors(combined_color, color) colors.append(combined_color) return \\"Yes\\" if target_color in colors else \\"No\\" def paint_colors(test_cases): results = [] for basic_colors, target_color in test_cases: results.append(can_form_color(basic_colors, target_color)) return results"},{"question":"A wise magician came to the land of Arpa and started teaching people the secret of teleportation. The magician gave everyone in the land a teleportation token. The land of Arpa has n people living in a linear arrangement from left to right. Each teleportation token allows a person to teleport to another person within a certain distance to their left or right. Each person in Arpa\'s land has a token that allows them to teleport up to d positions to the left or up to d positions to the right. Mehrdad wants to know the minimum number of teleports required to reach from the first person in the line to the last person in the line. -----Input----- The first line of the input contains two integers n and d (1 ≤ n ≤ 10^5, 1 ≤ d ≤ n) — the number of people and the maximum distance a token permits a person to teleport respectively. The second line contains a string of length n consisting of characters \'0\' and \'1\'. If the i-th character of the string is \'1\', it means that the i-th person has a teleportation token. If it is \'0\', the i-th person does not have one. -----Output----- If it\'s possible to reach the last person using tokens, print the minimum number of teleports needed. Otherwise, print -1. -----Examples----- Input 5 3 11001 Output 2 Input 6 2 100001 Output -1 -----Note----- In the first example, starting from the first person, you can teleport to the second person and then to the fifth person in two steps. In the second example, the first person cannot teleport more than 2 positions, and there\'s no token at position 3, so it\'s impossible to reach the last person.","solution":"from collections import deque def min_teleports(n, d, token_string): if token_string[0] == \'0\' or token_string[-1] == \'0\': return -1 dp = [-1] * n dp[0] = 0 for i in range(n): if token_string[i] == \'1\' and dp[i] != -1: for j in range(i + 1, min(i + d + 1, n)): if token_string[j] == \'1\': if dp[j] == -1 or dp[j] > dp[i] + 1: dp[j] = dp[i] + 1 return dp[-1] def min_teleports_bfs(n, d, token_string): if token_string[0] == \'0\' or token_string[-1] == \'0\': return -1 queue = deque([(0, 0)]) # (current position, number of teleports) visited = set() visited.add(0) while queue: pos, teleports = queue.popleft() if pos == n - 1: return teleports for next_pos in range(pos + 1, min(pos + d + 1, n)): if token_string[next_pos] == \'1\' and next_pos not in visited: visited.add(next_pos) queue.append((next_pos, teleports + 1)) return -1"},{"question":"Write an efficient algorithm to find the kth smallest element in a sorted matrix. The matrix is sorted in ascending order row-wise and column-wise. Example 1: Input: matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 Output: 13 Example 2: Input: matrix = [ [1, 2], [1, 3] ] k = 2 Output: 1","solution":"import heapq def kth_smallest(matrix, k): Returns the kth smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. Arguments: matrix -- List of lists where each sublist represents a row in the matrix. k -- The order of the smallest element to find (1-indexed). Returns: int -- The kth smallest element in the matrix. n = len(matrix) # Min-heap to keep track of elements and their positions min_heap = [(matrix[i][0], i, 0) for i in range(min(k, n))] heapq.heapify(min_heap) # Convert list into a heap for _ in range(k - 1): val, r, c = heapq.heappop(min_heap) if c + 1 < n: heapq.heappush(min_heap, (matrix[r][c+1], r, c+1)) return heapq.heappop(min_heap)[0]"},{"question":"A large hotel chain is looking to optimize room cleaning schedules. They have K staff members available each day, and N rooms that need to be cleaned. Each room takes a different amount of time to clean, represented by an array. Each staff member can clean one room at a time, but can move to the next room once they are done. The goal is to distribute the work among the staff members such that the time taken for the last staff member to finish cleaning their assigned rooms is minimized. Write a function to find this optimal time. Input: First line consists of T, the number of test cases. Second line consists of two integers, N (number of rooms) and K (number of staff). Third line consists of N space-separated integers representing the cleaning times of the rooms. Output: For each test case, print the minimal time required for the last staff member to finish cleaning their assigned rooms. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^5 1 ≤ cleaning time ≤ 10^4 SAMPLE INPUT 1 5 3 10 20 30 40 50 SAMPLE OUTPUT 60 Explanation There are 5 rooms with cleaning times 10, 20, 30, 40, 50 and 3 staff members. One possible optimal allocation could be: - Staff member 1 cleans rooms with cleaning times 50 (total time = 50) - Staff member 2 cleans rooms with cleaning times 40 (total time = 40) - Staff member 3 cleans rooms with cleaning times 10 + 20 + 30 (total time = 60) Thus, the minimal time for the last staff member to finish cleaning is 60.","solution":"def can_allocate(rooms, K, max_time): current_time = 0 staff_count = 1 for time in rooms: if current_time + time <= max_time: current_time += time else: staff_count += 1 current_time = time if staff_count > K: return False return True def find_optimal_time(N, K, rooms): left, right = max(rooms), sum(rooms) while left < right: mid = (left + right) // 2 if can_allocate(rooms, K, mid): right = mid else: left = mid + 1 return left def minimal_cleaning_time(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] rooms = test_cases[i][1] optimal_time = find_optimal_time(N, K, rooms) results.append(optimal_time) return results"},{"question":"# Word Pattern Given a pattern and a string s, find if s follows the same pattern. Here, following means a full match, such that there is a one-to-one correspondence between a letter in the pattern and a word in the string. **Input** - A single line containing the pattern. - A single line containing the string s, which contains words separated by spaces. **Output** - A single line with `\\"true\\"` if the string follows the pattern and `\\"false\\"` otherwise. **Constraints** - 1 ≤ length of the pattern ≤ 50 - 1 ≤ length of s ≤ 10^4 **Example** **Input** ``` abba dog cat cat dog ``` **Output** ``` true ``` **Input** ``` abba dog cat cat fish ``` **Output** ``` false ```","solution":"def word_pattern(pattern, s): Checks if the string s follows the same pattern as the given pattern. Parameters: - pattern: A string representing the pattern. - s: A string containing words separated by spaces. Returns: - \\"true\\" if the string follows the pattern, \\"false\\" otherwise. words = s.split() if len(pattern) != len(words): return \\"false\\" char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return \\"false\\" elif word in word_to_char: if word_to_char[word] != char: return \\"false\\" else: char_to_word[char] = word word_to_char[word] = char return \\"true\\""},{"question":"Determine the Square Matrix Input The first line contains T, the number of test cases. Each of the next T lines contains a single integer N. Output For each test case, output \\"YES\\" if N represents the number of 1x1 units that can be arranged into a perfect square matrix. Otherwise, output \\"NO\\". Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^9 SAMPLE INPUT 4 1 2 4 17 SAMPLE OUTPUT YES NO YES NO","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, else False. sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n def square_matrix(t, test_cases): Determines if each element in test_cases can form a perfect square matrix. Parameters: t (int): The number of test cases. test_cases (list of int): The test cases. Returns: list of str: \\"YES\\" if the corresponding element in test_cases can form a perfect square matrix, else \\"NO\\". results = [] for n in test_cases: if is_perfect_square(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem Statement: Commander Shepard is facing a strategic challenge during a mission to secure the Citadel. To outmaneuver the enemy, he needs to analyze escape routes through the station\'s maze-like corridors. The Citadel\'s map is represented as a grid of size NxM, where each cell is either walkable (\'.\') or blocked (\'*\'). The goal is to find the length of the shortest path from the top-left corner to the bottom-right corner, avoiding blocked cells. If the path does not exist, the output should be -1. Input Format: The first line of input contains a single integer T, denoting the number of test cases. Each test case starts with two space-separated integers N and M, indicating the dimensions of the grid. The next N lines each contain a string of length M, representing the grid for that test case. Output Format: For each test case, print the length of the shortest path on a new line. If no path exists, print -1. Constraints: SubTask#1 1<=T<=10 1<=N,M<=100 SubTask#2 Original Constraints Sample Input: 2 3 3 ... .*. ... 3 3 ... *** ... Sample Output: 5 -1 Explanation: Case 1: There is a clear path from (0,0) to (2,2), which ensures the shortest path length is 5. Case 2: There is no possible way to reach from the top-left to the bottom-right corner, so the output is -1.","solution":"from collections import deque def shortest_path(grid): n, m = len(grid), len(grid[0]) if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(shortest_path(grid)) return results"},{"question":"Given an array of integers, your task is to find the length of the longest consecutive sequence of numbers. Example: Input: arr = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Your Task: Write a function longestConsecutive() that accepts an array of integers and returns the length of the longest consecutive sequence of numbers. Constraints: - The array contains up to 10^5 integers. - The array can contain both negative and positive numbers, but all numbers are distinct.","solution":"def longestConsecutive(arr): Returns the length of the longest consecutive sequence of numbers in the array. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: # Check only if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A transportation company is faced with the challenge of optimizing their delivery schedule. The company has a fleet of trucks, each with a certain capacity, and a series of delivery requests, where each request requires transporting a certain amount of goods to a specific location. Each delivery request is independent and can be assigned to any truck, but no truck can carry more goods than its capacity. The company wants to maximize the number of delivery requests fulfilled. You are given the capacity of each truck and the amount of goods required for each delivery request. Determine the maximum number of delivery requests that can be fulfilled. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 200000) — the number of trucks and the number of delivery requests, respectively. The second line contains m integers c_1, c_2, ..., c_{m} (1 ≤ c_{i} ≤ 10^6) where c_{i} is the capacity of the i-th truck. The third line contains n integers d_1, d_2, ..., d_{n} (1 ≤ d_{j} ≤ 10^6) where d_{j} is the amount of goods required for the j-th delivery request. -----Output----- Print the maximum number of delivery requests that can be fulfilled. -----Examples----- Input 3 4 4 5 6 2 3 5 7 Output 3 Input 2 5 3 3 2 3 4 5 6 Output 2 Input 1 2 8 5 10 Output 1","solution":"def max_delivery_requests(m, n, truck_capacities, delivery_requests): truck_capacities.sort() delivery_requests.sort() i, j, fulfilled_requests = 0, 0, 0 while i < m and j < n: if truck_capacities[i] >= delivery_requests[j]: fulfilled_requests += 1 i += 1 j += 1 else: j += 1 return fulfilled_requests"},{"question":"Design a QueueUsingStacks class to implement a queue using two stacks. Your implementation should support the following operations: QueueUsingStacks() Initializes the object. void enqueue(int x) Enqueues the integer x at the end of the queue. int dequeue() Dequeues the integer from the front of the queue and returns it. Returns -1 if the queue is empty. int peek() Returns the integer at the front of the queue without removing it. Returns -1 if the queue is empty. boolean isEmpty() Returns true if the queue is empty, otherwise returns false. Example: Input: [\\"QueueUsingStacks\\",\\"enqueue\\",\\"enqueue\\",\\"peek\\",\\"dequeue\\",\\"isEmpty\\",\\"dequeue\\",\\"dequeue\\",\\"isEmpty\\"] [[],[10],[20],[],[],[],[],[],[]] Output: [null,null,null,10,10,false,20,-1,true] Explanation: QueueUsingStacks queue = new QueueUsingStacks(); // Initialize the object. queue.enqueue(10); // Queue: [10] queue.enqueue(20); // Queue: [10, 20] queue.peek(); // Returns 10, Queue: [10, 20] queue.dequeue(); // Returns 10, Queue: [20] queue.isEmpty(); // Returns false queue.dequeue(); // Returns 20, Queue: [] queue.dequeue(); // Returns -1, Queue is empty queue.isEmpty(); // Returns true Constraints: 1 <= x <= 10000 At most 200000 calls will be made in total to enqueue, dequeue, peek, and isEmpty.","solution":"class QueueUsingStacks: def __init__(self): Initialize your data structure here. self.stack1 = [] self.stack2 = [] def enqueue(self, x: int) -> None: Pushes element x to the back of the queue. self.stack1.append(x) def dequeue(self) -> int: Removes the element from in front of the queue and returns that element. Returns -1 if the queue is empty. if self.isEmpty(): return -1 if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2.pop() def peek(self) -> int: Get the front element. Returns -1 if the queue is empty. if self.isEmpty(): return -1 if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2[-1] def isEmpty(self) -> bool: Returns whether the queue is empty. return not self.stack1 and not self.stack2"},{"question":"You have been asked to design a file classification system. You are given some information about N files. Each file has a file name and a file size (in bytes). Write a program to classify these files into \\"Small\\", \\"Medium\\", and \\"Large\\" categories based on their sizes and then output each category in a specific format. The categories are defined as follows: - \\"Small\\" - files less than or equal to 1000 bytes - \\"Medium\\" - files greater than 1000 bytes and less than or equal to 100,000 bytes - \\"Large\\" - files greater than 100,000 bytes For each category, print the filenames sorted by their sizes in ascending order. For files of the same size within a category, print them in the order of their input. Input Format The first line contains the integer N, the number of files. N lines follow, each containing the file name and file size separated by a space. Constraints 1 leq N leq 20 The file size ranges from 1 byte to 1,000,000 bytes. Output Format Output the files in three sections: \\"Small Files\\", \\"Medium Files\\" and \\"Large Files\\". Each section should start with a header line that states the category, followed by the list of file names in that category, each on a new line. If there are no files in a category, do not print that category header. Sample Input 5 image.png 1200 data.txt 950 app.exe 80000 video.mp4 150000 notes.doc 50000 Sample Output Medium Files data.txt notes.doc image.png app.exe Large Files video.mp4 Concept For sorting a list based on some parameter, you can use the `sorted()` function in Python with a key. You can read more about it [here](https://docs.python.org/3/howto/sorting.html).","solution":"def classify_files(file_data): small_files = [] medium_files = [] large_files = [] for file_name, file_size in file_data: if file_size <= 1000: small_files.append((file_size, file_name)) elif file_size <= 100000: medium_files.append((file_size, file_name)) else: large_files.append((file_size, file_name)) def sort_and_extract_names(files): return [name for size, name in sorted(files)] result = [] if small_files: result.append(\\"Small Files\\") result.extend(sort_and_extract_names(small_files)) if medium_files: result.append(\\"Medium Files\\") result.extend(sort_and_extract_names(medium_files)) if large_files: result.append(\\"Large Files\\") result.extend(sort_and_extract_names(large_files)) return result"},{"question":"A string is considered \\"beautiful\\" if no two adjacent characters are the same. For example, \\"abc\\", \\"cpmp\\", and \\"aqr\\" are \\"beautiful\\" strings, while \\"aa\\", \\"bbbb\\", \\"hello\\", and \\"boot\\" are not. Given a string consisting only of lowercase alphabets, determine whether it is possible to rearrange the string to make it \\"beautiful\\". You cannot add or remove characters from the string. Input The first and only input line contains a string s (1 ≤ |s| ≤ 100), where |s| denotes the length of the string. Output Print \\"YES\\" if it\'s possible to rearrange the string into a \\"beautiful\\" string, and \\"NO\\" otherwise. Examples Input aabbcc Output YES Input aaab Output NO Input ab Output YES","solution":"from collections import Counter def can_rearrange_beautifully(s): Determine if a string can be rearranged such that no two adjacent characters are the same. count = Counter(s) max_freq = max(count.values()) length = len(s) # A string can be rearranged to be \\"beautiful\\" if and only if the most frequent character # does not appear more than half the length of the string (rounded up). if max_freq > (length + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"**In this task, you are required to implement a simplified version of regular expression matching. The input consists of a string and a pattern, the pattern can include \'.\' which matches any single character and \'*\' which matches zero or more of the preceding character. Your goal is to determine if the pattern matches the string exactly. The matching should cover the entire input string (not partial). Input The input consists of two lines: - The first line is a non-empty string `s` of length between 1 and 20. - The second line is a non-empty pattern `p` of length between 1 and 20. The pattern may contain characters (\'a\'-\'z\') and special characters \'.\' and \'*\'. Output The output should be one line: `true` if the string `s` matches the pattern `p` exactly, and `false` otherwise. Example Input ``` aab c*a*b ``` Output ``` true ``` Input ``` mississippi mis*is*p*. ``` Output ``` false ``` Explanation: 1. In the first example, the pattern `c*a*b` matches the string `aab` because `c*` can match zero \'c\'s, then `a*` matches \'aa\', and `b` matches \'b\'. 2. In the second example, there is no way for the pattern `mis*is*p*.` to match the string `mississippi` with the provided rules.","solution":"def is_match(s, p): Returns true if the string s matches the pattern p using \'.\' and \'*\'. # Use dynamic programming to solve the problem dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] dp[0][0] = True # Update for patterns like a*, a*b*, a*b*c* for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == \'.\' or p[j - 1] == s[i - 1]: dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] if p[j - 2] == \'.\' or p[j - 2] == s[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j] return dp[len(s)][len(p)]"},{"question":"You are participating in a game where players collect cards with numbers on them. Each card has a unique number, and the goal of the game is to determine the length of the longest consecutive sequence of numbers that can be formed using the cards you have. Write a function (`find_longest_consecutive_sequence`) that takes a `list` of integers (`cards`) as input and returns the length of the longest consecutive sequence of numbers that can be formed. For example, if the input list is `[100, 4, 200, 1, 3, 2]`, the longest consecutive sequence is `[1, 2, 3, 4]`, so the function should return `4`. If the input list is empty, return `0`. # Example - Input: `[100, 4, 200, 1, 3, 2]` - Output: `4` - Input: `[1, 9, 3, 10, 2, 20]` - Output: `3` (The longest consecutive sequence is `[1, 2, 3]`) - Input: `[]` - Output: `0` # Constraints - The `list` can have up to `10^5` elements, and each integer can be between `-10^9` to `10^9`. - The function should have a complexity of O(n) in order to handle the upper limit efficiently.","solution":"def find_longest_consecutive_sequence(cards): if not cards: return 0 card_set = set(cards) longest_streak = 0 for card in card_set: if card - 1 not in card_set: # Check if it\'s the start of a sequence current_card = card current_streak = 1 while current_card + 1 in card_set: current_card += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Alice wants to create a new design for a rectangular garden using a wooden fence. She has four pieces of wooden fence, each with a length of b_i (1 le i le 4). Each piece of fence can be cut to form the sides of the rectangle, and they can only be cut along their total length (no combining pieces). Alice aims to form the largest possible rectangular area using exactly two of these pieces as the length and exactly two as the width. If it\'s not possible to form a rectangle, return 0. For instance, given fence pieces with lengths 4, 4, 6, and 6, she can form a rectangle of area 4 times 6 = 24. Calculate the largest possible rectangular area Alice can form using the four pieces of wooden fence. -----Input----- The first line contains a single integer t (1 le t le 3 cdot 10^4) — the number of test cases. Each test case consists of a single line containing four integers b_1, b_2, b_3, b_4 (1 le b_i le 10^4) — the lengths of the fence pieces. -----Output----- For each test case, print a single integer — the largest rectangular area that can be formed using the four pieces of wooden fence. If no rectangle can be formed, print 0. -----Examples----- Input 4 4 4 6 6 5 5 5 5 2 2 3 3 10 15 10 15 Output 24 25 6 150 -----Note----- In the first test case, Alice can form a rectangle using lengths 4 and 6, resulting in an area of 4 times 6 = 24. In the second test case, she can cut the fence into lengths of 5 times 5 = 25. In the third case, she uses lengths 2 and 3 to form an area of 2 times 3 = 6. In the fourth case, using 10 and 15, Alice can form an area of 10 times 15 = 150.","solution":"def max_rectangle_area(t, test_cases): results = [] for i in range(t): pieces = sorted(test_cases[i]) if pieces[0] == pieces[1] and pieces[2] == pieces[3]: area = pieces[0] * pieces[2] else: area = 0 results.append(area) return results"},{"question":"Write a function `validatePalindrome` that checks if a given string can be rearranged to form a palindrome. The function should return `True` if possible, and `False` otherwise. A string can be rearranged to form a palindrome if at most one character has an odd frequency. Your function should follow this signature: ```python def validatePalindrome(s: str) -> bool: # Your code here ``` **Examples:** ```python validatePalindrome(\\"carrace\\") Output: True Explanation: \'carrace\' can be rearranged to \'racecar\', which is a palindrome. validatePalindrome(\\"daily\\") Output: False Explanation: \'daily\' cannot be rearranged to form any palindrome. ``` **Constraints:** - The input string will contain only lowercase alphabetical characters. - The length of the input string will be between 1 and 1000.","solution":"def validatePalindrome(s: str) -> bool: Check if a given string can be rearranged to form a palindrome. from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a program to determine if a given string is an anagram of another string. Two strings are anagrams if they are composed of the same characters with the same frequencies. For example: ``` listen and silent: Characters in \'listen\': l, i, s, t, e, n Characters in \'silent\': s, i, l, e, n, t Both strings contain the same characters in the same frequency. \'listen\' and \'silent\' are anagrams.``` An example of two strings that are not anagrams: ``` hello and world: Characters in \'hello\': h, e, l, l, o Characters in \'world\': w, o, r, l, d The characters and their frequencies do not match. \'hello\' and \'world\' are not anagrams.``` If the two input strings are anagrams, your program should return true. If they are not anagrams, your program should return false. The input will be two non-empty strings composed of lowercase letters only.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. from collections import Counter # Count the frequency of each character in both strings str1_counter = Counter(str1) str2_counter = Counter(str2) # Check if both counters are equal, meaning both strings are anagrams return str1_counter == str2_counter"},{"question":"You are given an n × n grid representing a grid of seats in a theater. Some seats are already taken. The theater management would like to know how many additional people can be seated in a path from the top-left corner (1, 1) to the bottom-right corner (n, n) such that the path traverses only empty seats. Each cell in the grid can be either \'0\' or \'1\', where \'1\' represents an already taken seat and \'0\' represents an empty seat. You can only move to adjacent cells either to the right or downward. Your task is to determine the maximum number of additional people that can be seated in an empty path from the top-left to the bottom-right corner of the grid. If there\'s no such path, return -1. Input The first line contains one integer n (1 ≤ n ≤ 1000) — the size of the grid. The following n lines contain n characters each (\'0\' or \'1\') representing the grid. Output Output one integer — the maximum number of additional people that can be seated in a valid path from the top-left to the bottom-right corner, or -1 if there is no such path. Examples Input 3 010 010 000 Output 2 Input 2 11 10 Output -1","solution":"def max_additional_seats(n, grid): Returns the maximum number of additional people that can be seated in an empty path from the top-left to the bottom-right corner of the grid. Returns -1 if no such path exists. Parameters: n: int - the size of the grid grid: list of list of str - the n x n grid of seats where \'1\' is taken and \'0\' is empty Returns: int - maximum number of additional people that can be seated or -1 if no path exists from collections import deque if grid[0][0] == \'1\' or grid[n-1][n-1] == \'1\': return -1 # Directions for right and down moves directions = [(0, 1), (1, 0)] # Initialize BFS queue = deque([(0, 0, 1)]) # (row, col, seats_count) visited = set((0, 0)) while queue: r, c, seats_count = queue.popleft() if (r, c) == (n-1, n-1): return seats_count for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == \'0\': visited.add((nr, nc)) queue.append((nr, nc, seats_count + 1)) return -1"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},j={key:0,class:"empty-state"},Y=["disabled"],P={key:0},R={key:1};function L(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",F,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,Y)):u("",!0)])}const M=d(A,[["render",L],["__scopeId","data-v-26c73e43"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/21.md","filePath":"deepseek/21.md"}'),z={name:"deepseek/21.md"},G=Object.assign(z,{setup(s){return(e,l)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
