import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,r,a){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(T,[["render",E],["__scopeId","data-v-325c338c"]]),S=JSON.parse('[{"question":"A password strength checker is a function that determines the strength of a given password. A password is considered strong if it satisfies all the following criteria: 1. It has at least 8 characters. 2. It contains at least one lowercase letter. 3. It contains at least one uppercase letter. 4. It contains at least one digit. 5. It contains at least one special character. The special characters are: !@#%^&*()-+ You are to write a function that checks whether a given password is strong. Input The first line contains an integer N (1 ≤ N ≤ 100), the number of passwords to check. Each of the following N lines contains a password string of length between 1 and 100. Output For each password, output \\"YES\\" if the password is strong, and \\"NO\\" otherwise. Example Input: 3 Passw0rd! weakpass Str0ngPass@ Output: YES NO YES Explanation In the first example, \\"Passw0rd!\\" meets all criteria for a strong password: - It is at least 8 characters long. - It contains at least one lowercase letter (\'a\'). - It contains at least one uppercase letter (\'P\'). - It contains at least one digit (\'0\'). - It contains at least one special character (\'!\'). In the second example, \\"weakpass\\" fails because it doesn\'t contain an uppercase letter, a digit, or a special character. In the third example, \\"Str0ngPass@\\" meets all criteria for a strong password.","solution":"import re def is_strong_password(password): Returns \'YES\' if the given password is strong according to the criteria, else \'NO\'. if len(password) < 8: return \\"NO\\" if not re.search(r\'[a-z]\', password): return \\"NO\\" if not re.search(r\'[A-Z]\', password): return \\"NO\\" if not re.search(r\'[0-9]\', password): return \\"NO\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"NO\\" return \\"YES\\" def check_passwords(n, passwords): results = [] for password in passwords: results.append(is_strong_password(password)) return results"},{"question":"Imagine you are part of a forest restoration project. You have been tasked with planting trees in a given area such that no two trees are closer than a specified minimum distance. Your task is to calculate the maximum number of trees that can be planted in the area, following the given constraint. The area is represented as a 2-dimensional grid of size `n x m`, and the minimum distance between any two trees is `d`. Input The first line of the input contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` lines contains three integers `n`, `m`, and `d` (1 ≤ n, m ≤ 1000; 1 ≤ d ≤ min(n, m)). Output For each test case, output one integer — the maximum number of trees that can be planted. Examples Input 2 3 3 2 4 4 1 Output 4 16 Explanation In the first test case, a `3 x 3` grid with a minimum distance of `2` units would allow the following layout of trees: ``` T . T . . . T . T ``` In the second test case, a `4 x 4` grid with a minimum distance of `1` unit allows filling the entire grid with trees.","solution":"def max_trees(t, test_cases): results = [] for case in test_cases: n, m, d = case max_in_row = (n + d - 1) // d max_in_col = (m + d - 1) // d results.append(max_in_row * max_in_col) return results # Example usage if __name__ == \\"__main__\\": t = 2 test_cases = [(3, 3, 2), (4, 4, 1)] print(max_trees(t, test_cases)) # Output: [4, 16]"},{"question":"Peter is playing a game with his friends where they take turns removing stones from a pile. The game starts with n stones in the pile. On each player\'s turn, they must remove either 1 or 2 stones from the pile. The player who removes the last stone wins the game. Peter always goes first. Given n, determine whether Peter will win if both players play optimally. Input The input consists of a single integer n (1 ≤ n ≤ 10^7) – the number of stones in the pile at the beginning of the game. Output Print \\"YES\\" if Peter is guaranteed to win with optimal play, and \\"NO\\" otherwise. Examples Input 4 Output YES Input 7 Output NO Note In the first example, Peter can win by removing 1 stone on his first turn. No matter how his friend plays next, Peter can always remove enough stones on his subsequent turns to guarantee he takes the last stone. In the second example, Peter will always lose if both play optimally. If Peter starts by removing 1 or 2 stones, his friend will always leave him in a situation where Peter cannot win.","solution":"def peter_wins(n): Determines whether Peter will win the game given n stones if both players play optimally. :param n: number of stones at the beginning of the game (1 <= n <= 10^7) :return: \\"YES\\" if Peter is guaranteed to win, \\"NO\\" otherwise return \\"YES\\" if n % 3 != 0 else \\"NO\\""},{"question":"In a mystical land named TechnoValley, you are a guardian tasked with protecting ancient data crystals. Each data crystal contains valuable information, but can only be decrypted using a special algorithm. The decryption algorithm works by generating a sequence based on a specific integer x. The first crystal can be decrypted by an integer 1, the second crystal by an integer 2, and so on until the x-th crystal. However, there is a catch: the power of each crystal grows exponentially based on its position in the sequence, specifically the k-th crystal takes 2^k decryption power where k is the position in the sequence starting from 0. This means it takes 2^0 power to decrypt the first crystal, 2^1 power for the second crystal, 2^2 power for the third crystal, and so on. You have A units of decryption power today and B units of decryption power tomorrow. Your goal is to determine the maximum number of crystals you can decrypt in the given time. Input The only line of input contains two integers A and B (0 ≤ A, B ≤ 10^9) — the amount of decryption power you have today and the amount of decryption power you have tomorrow. Output In the first line print a single integer k0 (0 ≤ k0 ≤ A) — the number of crystals decrypted on the first day. In the second line print k0 distinct integers c1, c2, …, ck0 (1 ≤ ci ≤ A), the sum of 2^(ci-1) should not exceed A. In the third line print a single integer k1 (0 ≤ k1 ≤ B) — the number of crystals decrypted on the second day. In the fourth line print k1 distinct integers d1, d2, …, dk1 (1 ≤ di ≤ B), the sum of 2^(di-1) should not exceed B. All integers ci and di should be distinct. The sum k0 + k1 should be the largest possible. Examples Input 5 10 Output 2 1 2 3 3 4 5 Input 20 35 Output 4 1 2 3 4 5 5 6 7 8 9 Note In the first example, on the first day, you can use your 5 units of decryption power to decrypt crystals 1 and 2 (2^0 + 2^1 = 3 ≤ 5). On the second day, you can decrypt crystals 3, 4, and 5 (2^2 + 2^3 + 2^4 = 28 ≤ 35). In the second example, on the first day, you can use your 20 units of decryption power to decrypt crystals 1, 2, 3, and 4 (2^0 + 2^1 + 2^2 + 2^3 = 15 ≤ 20). On the second day, you can decrypt crystals 5, 6, 7, 8, and 9 (2^4 + 2^5 + 2^6 + 2^7 + 2^8 = 496 ≤ 35).","solution":"def crystals_decrypt(A, B): def decrypt_powers(X): crystals = [] power = 1 while X >= power: crystals.append(len(crystals) + 1) X -= power power *= 2 return crystals # Determine crystals decrypted on first day first_day_crystals = decrypt_powers(A) k0 = len(first_day_crystals) # Determine crystals decrypted on second day second_day_crystals = decrypt_powers(B) k1 = len(second_day_crystals) return k0, first_day_crystals, k1, second_day_crystals # Example Usage: # A, B = map(int, input().split()) # k0, first_day_crystals, k1, second_day_crystals = crystals_decrypt(A, B) # print(k0) # print(\' \'.join(map(str, first_day_crystals))) # print(k1) # print(\' \'.join(map(str, second_day_crystals)))"},{"question":"In a certain kingdom, roads connect various cities and are represented as a graph. Each city is a node, and each bidirectional road is an edge. The kingdom\'s king wants to ensure the kingdom is fully connected, meaning there should be a path between any two cities. If the kingdom is not fully connected, he will add the minimum number of new roads necessary to achieve full connectivity. Your task is to determine the minimum number of new roads required to make the entire kingdom fully connected. Input The input consists of: - The first line containing two integers n (2 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10^5) — the number of cities and roads respectively. - The next m lines each containing two integers u and v (1 ≤ u, v ≤ n) — indicating a road between city u and city v. Output Output one integer — the minimum number of new roads needed to make the kingdom fully connected. Examples Input 4 2 1 2 3 4 Output 1 Input 5 0 Output 4 Input 3 3 1 2 2 3 1 3 Output 0 Note In the first test case, there are two separate clusters: {1, 2} and {3, 4}. To connect these clusters, we need at least one new road, such as between 2 and 3. In the second test case, there are no roads, so we need to add 4 roads to fully connect all cities. In the third test case, all cities are already connected.","solution":"def minimum_new_roads(n, m, roads): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited, graph) components += 1 return components - 1 # Example usage: # n = 4 # m = 2 # roads = [(1, 2), (3, 4)] # print(minimum_new_roads(n, m, roads)) # Output: 1"},{"question":"title: C: Circular Shift problem You\'re given a circular list of natural numbers and you need to determine if it\'s possible to shift the list circularly by any number of positions such that the list becomes sorted in non-decreasing order. The list can contain duplicate elements. A circular shift means taking any number of elements from the start and moving them to the end of the list while preserving their order. Input format Input is given on two lines. The first line contains an integer n denoting the number of elements in the list. The second line contains n natural numbers separated by spaces representing the elements of the list. Constraints * 2 ≤ n ≤ 10^5 * Each element is a natural number not exceeding 10^9 Output format Output `YES` if there exists a circular shift that results in a sorted list, otherwise output `NO`. Input example 1 5 3 4 5 1 2 Output example 1 YES Input example 2 4 3 2 1 4 Output example 2 NO Explanation In the first example, the list can be circularly shifted by 3 positions to the left (or 2 positions to the right) to form the sorted list [1, 2, 3, 4, 5]. In the second example, no circular shift can result in a sorted list.","solution":"def can_be_sorted_by_circular_shift(n, lst): Determine if there exists a circular shift that results in a sorted list. Parameters: n (int): Number of elements in the list. lst (list of int): The list of natural numbers. Returns: str: \'YES\' if the list can be circularly shifted to become sorted, otherwise \'NO\'. if lst == sorted(lst): return \'YES\' # Find the number of decreases decreases = 0 for i in range(n): if lst[i] > lst[(i + 1) % n]: decreases += 1 if decreases == 1: return \'YES\' else: return \'NO\'"},{"question":"You are given n people, each with different abilities. Each person can perform a task and each person has a fixed time in which they can perform the task. The objective is to assign each person to a task in a way that no two people are performing their tasks at the same time, and you need to find the maximum number of people that can be assigned a task. Each person i is represented by a start time si and an end time ei, and you need to maximize the number of non-overlapping time intervals. Two intervals [si, ei] and [sj, ej] are considered non-overlapping if ei ≤ sj or ej ≤ si. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of people. The next n lines contain two integers si and ei (0 ≤ si < ei ≤ 10^9) — the start and end times for each person. Output Output a single integer — the maximum number of people you can assign a task such that no two of them have overlapping time intervals. Examples Input 3 1 3 2 4 3 5 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4 Note In the first example, the best schedule is to choose the first and third person, since their time intervals [1, 3] and [3, 5] are non-overlapping. In the second example, since all time intervals are non-overlapping, all four people can be assigned a task.","solution":"def max_non_overlapping_intervals(n, intervals): Finds the maximum number of non-overlapping intervals. Args: n (int): Number of intervals. intervals (List[Tuple[int, int]]): List of (start, end) time intervals. Returns: int: Maximum number of non-overlapping intervals. if n == 0: return 0 # Sort intervals based on the end time intervals.sort(key=lambda x: x[1]) count = 1 end_time = intervals[0][1] for i in range(1, n): if intervals[i][0] >= end_time: count += 1 end_time = intervals[i][1] return count"},{"question":"A company is launching a new futuristic pyramid-shaped entertainment center which consists of multiple levels. Each level of the pyramid contains a certain number of rooms with entertainment facilities. The entrance to the center is always located at the topmost room of the pyramid at level 1. Patrons can experience different facilities by moving from one room to another. They are only allowed to move in a downward direction from a room to one of the directly connected rooms on the level below. The connected rooms are the ones that are directly beneath the room and any adjacent rooms (diagonals are considered adjacent). You are responsible for determining the most entertaining path from the entrance at the top of the pyramid to any room at the lowest level, which provides the maximum total entertainment value. The entertainment value of each room is represented as a positive integer. Each level i is numbered from 1 to i (with rooms from 1 to i on that level), starting with level 1. Your task is to find the highest sum of entertainment values obtainable by selecting a path from the topmost room to any room on the lowest level. Input The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. For each test case: The first line contains an integer N (1 ≤ N ≤ 100), the number of levels in the pyramid. N lines follow. Each line i contains i integers representing the entertainment values of rooms at level i. Output For each test case, output a single integer which is the maximum total entertainment value obtainable for the test case. Example Input 2 4 1 2 3 4 5 6 7 8 9 10 3 10 5 6 1 2 3 Output 23 19 Explanation In the first test case, the path with the highest total entertainment value is 1 → 3 → 6 → 10, giving a total value of 20. In the second test case, the path with the highest total entertainment value is 10 → 6 → 3, giving a total value of 19.","solution":"def max_entertainment(T, pyramids): def find_max_path(pyramid): # Work bottom-up to find the maximum path for i in range(len(pyramid) - 2, -1, -1): for j in range(len(pyramid[i])): pyramid[i][j] += max(pyramid[i+1][j], pyramid[i+1][j+1]) return pyramid[0][0] results = [] for pyramid in pyramids: results.append(find_max_path(pyramid)) return results # Reading input def read_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 pyramids = [] for _ in range(T): N = int(input_lines[index]) index += 1 pyramid = [] for i in range(N): pyramid.append(list(map(int, input_lines[index].split()))) index += 1 pyramids.append(pyramid) return T, pyramids # For testing purposes def main(input_str): T, pyramids = read_input(input_str) results = max_entertainment(T, pyramids) for result in results: print(result)"},{"question":"Alyssa works in a company that processes large amounts of data. As part of her daily tasks, she needs to find specific patterns in text strings. One of her current tasks is to identify all the substrings within a given string that are anagrams of another provided shorter string. An anagram of a string is another string that contains the same characters, only the order of characters can be different. She turns to you for help. Write a program that determines the starting indices of all substrings in the first input string that are anagrams of the second input string. Input The first line of the input contains a single string `s` (1 ≤ length(s) ≤ 10^4). The second line of the input contains another string `p` (1 ≤ length(p) ≤ length(s)). Output Print all starting indices of substrings in the string `s` that are anagrams of string `p`, separated by a space. Example Input cbaebabacd abc Output 0 6 Explanation The substring at index 0 (\\"cba\\") is an anagram of \\"abc\\". The substring at index 6 (\\"bac\\") is an anagram of \\"abc\\".","solution":"from collections import Counter def find_anagrams(s, p): Returns starting indices of substrings within string `s` that are anagrams of string `p`. p_count = Counter(p) s_count = Counter(s[:len(p) - 1]) result = [] for i in range(len(p) - 1, len(s)): s_count[s[i]] += 1 # include a new character in the window if s_count == p_count: # This step is to check the current window with pattern result.append(i - len(p) + 1) # start index of anagram s_count[s[i - len(p) + 1]] -= 1 # exclude the oldest character in the window if s_count[s[i - len(p) + 1]] == 0: del s_count[s[i - len(p) + 1]] # remove the character count if it is zero return result # Read input and convert it to expected format def read_input(): s = input().strip() p = input().strip() return s, p def main(): s, p = read_input() result = find_anagrams(s, p) print(\' \'.join(map(str, result)))"},{"question":"Sasha loves playing with sequences of numbers. She is particularly fascinated by \\"beautiful\\" sequences, which are defined as sequences where the sum of the absolute differences between consecutive elements is the same for all pairs of adjacent elements. Given an array `a` of length `n`, you need to determine if it is possible to reorder the array elements to form a \\"beautiful\\" sequence. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Output \\"YES\\" if it is possible to reorder the array to form a \\"beautiful\\" sequence, otherwise output \\"NO\\". Examples Input 3 1 2 3 Output YES Input 4 1 2 4 5 Output NO Input 2 10 5 Output YES Note In the first example, the sequence `[1, 2, 3]` is already beautiful since the absolute difference between each pair of adjacent elements is 1. In the second example, no matter how you reorder the elements, it\'s impossible to have all absolute differences the same. In the third example, the sequence `[10, 5]` is beautiful since the absolute difference between the only pair of adjacent elements is 5.","solution":"def is_beautiful_sequence(n, a): if n == 1: return \\"YES\\" a.sort() diff = abs(a[1] - a[0]) for i in range(2, n): if abs(a[i] - a[i-1]) != diff: return \\"NO\\" return \\"YES\\""},{"question":"You are given the task of designing a simple restaurant reservation system. The system should manage reservations for tables in a restaurant. The restaurant has tables with different seating capacities. Each reservation should include the name of the guest, the number of people in the guest\'s party, and the time and date of the reservation. Constraints: - The restaurant has a fixed number of tables of different sizes. - Each table can only be booked once per time slot. - Reservations can only be made for parties of up to the maximum table size. - Time slots are 1 hour long. - Reservations must be made for future dates only. You need to write a program that can handle the following operations: 1. Add a new table to the system with a given seating capacity. 2. Make a reservation for a party at a specified time and date. 3. Cancel an existing reservation. 4. List all reservations sorted by time and date. Input The first line contains an integer `n` representing the number of operations (1 ≤ n ≤ 1000). Each of the next `n` lines describes an operation in one of the following formats: - `ADD_TABLE seating_capacity`: Add a new table with the specified seating capacity (1 ≤ seating_capacity ≤ 10). - `MAKE_RESERVATION guest_name party_size datetime`: Make a reservation for the guest with the specified party size at the given datetime in the format `YYYY-MM-DD HH:MM`. The guest name will be a single word without spaces, and party_size (1 ≤ party_size ≤ 10). - `CANCEL_RESERVATION datetime`: Cancel the reservation at the specified datetime. - `LIST_RESERVATIONS`: List all reservations in chronological order. Each reservation should be printed on a new line in the format `datetime guest_name party_size`. Output For each `LIST_RESERVATIONS` operation, print all reservations in chronological order. If there are no reservations, print \\"No reservations\\". Example Input: ``` 6 ADD_TABLE 4 ADD_TABLE 2 MAKE_RESERVATION John 3 2023-11-10 19:00 MAKE_RESERVATION Alice 2 2023-11-10 20:00 CANCEL_RESERVATION 2023-11-10 19:00 LIST_RESERVATIONS ``` Output: ``` 2023-11-10 20:00 Alice 2 ```","solution":"from datetime import datetime import bisect class RestaurantReservationSystem: def __init__(self): self.tables = [] self.reservations = [] def add_table(self, seating_capacity): self.tables.append(seating_capacity) def make_reservation(self, guest_name, party_size, datetime_str): reserve_time = datetime.strptime(datetime_str, \'%Y-%m-%d %H:%M\') if party_size > max(self.tables): print(\\"No tables available\\") return for index, table in enumerate(self.tables): if table >= party_size and not any(r[\'table_index\'] == index and r[\'datetime\'] == reserve_time for r in self.reservations): self.reservations.append({\'datetime\': reserve_time, \'guest_name\': guest_name, \'party_size\': party_size, \'table_index\': index}) self.reservations.sort(key=lambda x: x[\'datetime\']) return print(\\"No tables available\\") def cancel_reservation(self, datetime_str): cancel_time = datetime.strptime(datetime_str, \'%Y-%m-%d %H:%M\') self.reservations = [r for r in self.reservations if r[\'datetime\'] != cancel_time] def list_reservations(self): if not self.reservations: print(\\"No reservations\\") else: for res in self.reservations: print(f\\"{res[\'datetime\'].strftime(\'%Y-%m-%d %H:%M\')} {res[\'guest_name\']} {res[\'party_size\']}\\") # Example for debugging # if __name__ == \\"__main__\\": # operations = [ # \\"ADD_TABLE 4\\", # \\"ADD_TABLE 2\\", # \\"MAKE_RESERVATION John 3 2023-11-10 19:00\\", # \\"MAKE_RESERVATION Alice 2 2023-11-10 20:00\\", # \\"CANCEL_RESERVATION 2023-11-10 19:00\\", # \\"LIST_RESERVATIONS\\" # ] # system = RestaurantReservationSystem() # for op in operations: # parts = op.split() # command = parts[0] # if command == \\"ADD_TABLE\\": # system.add_table(int(parts[1])) # elif command == \'MAKE_RESERVATION\': # system.make_reservation(parts[1], int(parts[2]), \' \'.join(parts[3:5])) # elif command == \'CANCEL_RESERVATION\': # system.cancel_reservation(\' \'.join(parts[1:3])) # elif command == \'LIST_RESERVATIONS\': # system.list_reservations()"},{"question":"You have a bookshelf with n books, where the i-th book has a thickness of t_i and a value v_i. You want to rearrange the books on the shelf to maximize the total value without exceeding a maximum allowable thickness T. For example, if you have books represented as an array of thicknesses t = [1, 2, 3, 2] and an array of values v = [10, 15, 20, 10] and the maximum allowable thickness T is 5, you can choose books with thicknesses [1, 2, 2] for a total value of 35 without exceeding the total thickness. Write a function to determine the maximum total value of books that can be fit onto the shelf without exceeding the allowable thickness. Input The first line of the input contains two integers n (1 ≤ n ≤ 100) and T (1 ≤ T ≤ 100) — the number of books and the maximum allowable thickness. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 100) — the thickness of each book. The third line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 100) — the value of each book. Output Print only one integer — the maximum total value of books that can be fit onto the shelf without exceeding the allowable thickness. Examples Input 4 5 1 2 3 2 10 15 20 10 Output 35 Input 3 4 2 2 3 5 10 15 Output 15","solution":"def max_value_of_books(n, T, thicknesses, values): # Initialize a two-dimensional dp array dp = [[0] * (T + 1) for _ in range(n + 1)] # Iterate over each book for i in range(1, n + 1): for t in range(T + 1): if thicknesses[i - 1] > t: dp[i][t] = dp[i - 1][t] else: dp[i][t] = max(dp[i - 1][t], dp[i - 1][t - thicknesses[i - 1]] + values[i - 1]) return dp[n][T]"},{"question":"In a city, there is a network of public gardens connected by pathways. Each garden has a unique identifier, and each pathway connects exactly two gardens bidirectionally. The city administration wants to host a marathon where participants will run between gardens, starting and ending at any garden, such that they visit as many gardens as possible without revisiting any garden. Each participant needs to start at one garden and continue to another connected garden until they cannot move further without revisiting a garden. Create a program that identifies the maximum number of gardens that a participant can visit starting from any garden. The city administration will provide you with the number of gardens and a list of the pathways between them. Constraints * 1 ≦ n ≦ 10^5 (number of gardens) * 0 ≦ m ≦ 2×10^5 (number of pathways) * The garden identifiers are integers in the range [1, n]. Input The input is given from Standard Input in the following format: ``` n m u1 v1 u2 v2 ... um vm ``` - The first line contains an integer n, the number of gardens. - The second line contains an integer m, the number of pathways. - Each of the next m lines contains two integers u and v, indicating a pathway between gardens u and v. Output Print a single integer, the maximum number of gardens a participant can visit in a single marathon. Examples Input ``` 6 7 1 2 2 3 3 4 4 5 5 6 1 6 2 5 ``` Output ``` 6 ``` Input ``` 5 4 1 2 2 3 3 4 4 5 ``` Output ``` 5 ``` Input ``` 4 2 1 2 3 4 ``` Output ``` 2 ```","solution":"def max_gardens_visited(n, m, edges): from collections import defaultdict, deque def bfs(start, adj_list, visited): queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Track visited nodes visited = [False] * (n + 1) max_count = 0 # Perform BFS from each node that hasn\'t been visited for garden in range(1, n + 1): if not visited[garden]: max_count = max(max_count, bfs(garden, adj_list, visited)) return max_count"},{"question":"Sarah loves solving puzzles and recently she learned about prime numbers. As a challenge, she decided to write a program that checks if numbers are prime and sums up all prime numbers within a given range. Your task is to help Sarah by writing the program. Input The first line contains two integers `a` and `b` (1 ≤ a ≤ b ≤ 10^6) — the range within which Sarah wants to find prime numbers. Output Output the single number — the sum of all prime numbers between `a` and `b` inclusive. Examples Input 10 20 Output 60 Input 1 10 Output 17","solution":"def is_prime(n): Check if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(a, b): Returns the sum of all prime numbers between a and b inclusive. return sum(x for x in range(a, b + 1) if is_prime(x))"},{"question":"You are given an integer N and a list of N integers. Your task is to determine if it is possible to reorder the elements of the list such that the list becomes strictly increasing. Constraints * 1 ≤ N ≤ 1000 * -10^9 ≤ List[i] ≤ 10^9 Input Input is given from Standard Input in the following format: N List[0] List[1] ... List[N-1] Output Print `YES` if it is possible to reorder the elements to form a strictly increasing list, otherwise print `NO`. Examples Input 5 10 8 4 6 7 Output YES Input 4 5 5 5 5 Output NO Input 3 0 -1 -2 Output NO Input 6 1 2 3 4 5 6 Output YES","solution":"def can_be_strictly_increasing(N, numbers): Determine if it is possible to reorder the elements of the list such that the list becomes strictly increasing. :param N: int - the number of integers in the list :param numbers: list of int - the list of integers :return: str - \'YES\' if the list can be reordered to be strictly increasing, otherwise \'NO\' unique_numbers = set(numbers) return \'YES\' if len(unique_numbers) == N else \'NO\'"},{"question":"You are given a string S consisting of lowercase English letters. You need to replace each character in the string S with its next consecutive character in the alphabet. The \'z\' character should wrap around and become \'a\'. Write a function to achieve this transformation. The function should return the new string after replacing each character. Constraints: * The length of the string S is in the range 1 ≤ |S| ≤ 100000. Function Signature: ```python def transform_string(S: str) -> str: pass ``` Input: * A single string S. Output: * A single transformed string where each character is replaced with its next consecutive character in the alphabet. Example Input: ```plaintext abc ``` Output: ```plaintext bcd ``` Input: ```plaintext xyz ``` Output: ```plaintext yza ```","solution":"def transform_string(S: str) -> str: Transforms each character in the string S to its next consecutive character in the alphabet, wrapping \'z\' around to \'a\'. transformed_chars = [] for char in S: if char == \'z\': transformed_chars.append(\'a\') else: transformed_chars.append(chr(ord(char) + 1)) return \'\'.join(transformed_chars)"},{"question":"Functionality Testing: You are tasked with implementing a function to process test cases for a new software module. Each test case consists of three parameters: an operation type (either \\"add\\" or \\"remove\\"), a value, and a container (which is a list). The function needs to evaluate the test case, perform the specified operation, and return the updated container. # Requirements 1. **Function Signature:** ```python def process_test_case(operation: str, value: int, container: list) -> list: ``` 2. **Parameters:** - `operation`: A string that is either \\"add\\" or \\"remove\\". - `value`: An integer that is to be added to or removed from the `container`. - `container`: A list of integers, representing the current state of the container. 3. **Operation Specifications:** - If the operation is \\"add\\", add the `value` to the `container` and ensure it remains ordered in ascending order. - If the operation is \\"remove\\", remove a single instance of the `value` from the `container`. If the `value` is not present, no changes should be made. - Ensure that after applying the operation, the container remains ordered in ascending order. 4. **Return Value:** - The function should return the updated container after performing the specified operation. # Examples Example 1: ```python operation = \\"add\\" value = 3 container = [1, 2, 5] # Result after processing test case result = process_test_case(operation, value, container) # Expected Output # result = [1, 2, 3, 5] ``` Example 2: ```python operation = \\"remove\\" value = 2 container = [1, 2, 3, 4] # Result after processing test case result = process_test_case(operation, value, container) # Expected Output # result = [1, 3, 4] ``` # Constraints - The length of the `container` list will be between 0 and 10^5. - The `value` value will be in the range of -10^9 to 10^9. # Task Implement the function `process_test_case` to handle the operations as described.","solution":"def process_test_case(operation: str, value: int, container: list) -> list: Processes the test case by performing the specified operation on the container. Parameters: - operation (str): The type of operation (\\"add\\" or \\"remove\\"). - value (int): The value to be added or removed from the container. - list (list): The current state of the container. Returns: - list: The updated container after performing the operation. if operation == \\"add\\": container.append(value) container.sort() elif operation == \\"remove\\": if value in container: container.remove(value) return container"},{"question":"Arjun is training for a competitive programming contest. He has been given a list of `n` numbers, and he is to determine the second smallest number in the list. If there is no second smallest number (i.e., all numbers in the list are identical), he should output `-1`. He wants you to write a program that can efficiently compute the second smallest number from each of the given lists. Input The first line of the input contains an integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. Each test case consists of two lines: the first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of elements in the list, and the second line contains `n` integers `a_i` (1 ≤ a_i ≤ 10^9) — the elements of the list. Output For each test case, output the second smallest number in the list, or `-1` if there isn\'t one. Example Input 4 3 5 3 2 4 2 2 2 2 5 10 9 8 7 6 2 1 2 Output 3 -1 7 2 Note In the first test case, the numbers are 5, 3, and 2. The second smallest number is 3. In the second test case, all numbers are the same, so there is no second smallest number. In the third test case, the numbers are 10, 9, 8, 7, and 6. The second smallest number is 7. In the fourth test case, the numbers are 1 and 2. The second smallest number is 2.","solution":"def second_smallest_number(t, test_cases): results = [] for i in range(t): n, lst = test_cases[i] if len(set(lst)) == 1: results.append(-1) else: unique_lst = list(set(lst)) unique_lst.sort() results.append(unique_lst[1]) return results"},{"question":"Luna is attempting to organize a ribbon cutting ceremony for the grand opening of her new business. She has a number of ribbons of varying lengths and wants to cut specific lengths of ribbon to decorate the venue. Each piece must be exactly k centimeters long. Luna needs to know whether she can cut exactly k centimeters from a given ribbon length. To be efficient, she wants to determine this for several ribbons. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of test cases. Each of the following n lines contains two integers li (1 ≤ li ≤ 100) — the length of a ribbon, and k (1 ≤ k ≤ 100) — the desired length of ribbon for decoration. Output Print n lines, in the i-th line output YES if Luna can cut exactly k centimeters from the ribbon of length li. Otherwise, print NO. Example Input 3 10 5 7 3 6 2 Output YES YES YES Note In the first example Luna can cut two pieces of 5 centimeters each from the ribbon. In the second example Luna can cut two pieces of 3 centimeters each and one piece of 1 centimeter will remain unused. In the third example Luna can cut three pieces of 2 centimeters each from the ribbon.","solution":"def can_cut_ribbon(n, test_cases): Determines if exactly k centimeters can be cut from ribbons of given lengths. Parameters: - n: int, the number of test cases - test_cases: list of tuples, each tuple contains two integers: - li: int, length of the ribbon - k: int, desired length of ribbon for decoration Returns: - list of strings, each is \\"YES\\" if k centimeters can be cut from the ribbon of length li, otherwise \\"NO\\". results = [] for li, k in test_cases: if li % k == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with writing a program that can determine the longest common subsequence between two strings. The longest common subsequence is defined as the longest sequence that can be derived from both original strings by deleting some characters (without reordering the remaining characters). Your task is to implement a function to find the longest common subsequence and return its length. Input: - The first line contains an integer t, the number of test cases. - For each test case, there are two lines. Each line contains one of the strings to be compared. Output: - For each test case, print the length of the longest common subsequence. SAMPLE INPUT: 3 AGGTAB GXTXAYB ABC AC XYZ PWD SAMPLE OUTPUT: 4 2 0","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Given an integer n as input, calculate the sum of the factorial of its digits. Constraints * 1 leq n leq 9999 * n is an integer. Input Input is given from Standard Input in the following format: n Output Print the sum of the factorial of each digit in the integer n. Examples Input 123 Output 9 Input 405 Output 145","solution":"import math def sum_of_digit_factorials(n): Returns the sum of the factorial of each digit of the integer n. digit_factorials = [math.factorial(int(digit)) for digit in str(n)] return sum(digit_factorials)"},{"question":"There is a large room full of engineers divided into multiple teams. Each team is seated around a circular table where they need to communicate with each other to pass a project report. Each table has a leader who is responsible for ensuring that the report each person receives is correct. However, due to network instability, the reports passed among the team members might get corrupted. Given the number of teams and each team’s report sequence, determine which team has the highest number of corrupted reports. If there are multiple teams with the same highest number of corrupted reports, return the team with the smallest index. A report is considered corrupted if it is different from the one that was supposed to be passed by the leader. The leader always passes the same initial report to the first member, and then each member passes the report to the next member in sequence around the table. Input The first line of the input contains an integer T denoting the number of teams. The first line of each team\'s description contains an integer N denoting the number of team members. The next line contains N space-separated integers denoting the sequence of reports received by each member. Finally, an integer S denotes the initial report sent by the leader. Output Output a single line containing an integer corresponding to the index of the team (starting from 1) with the highest number of corrupted reports. Constraints and Example Input: 3 5 2 3 2 2 2 2 4 1 4 4 4 1 3 5 5 5 5 Output: 2 Explanation Example 1: Team 1 receives sequence [2, 3, 2, 2, 2] with an initial report of 2. The corrupted reports are at indices 2, thus having 1 corrupted report. Team 2 receives sequence [1, 4, 4, 4] with an initial report of 1. The corrupted reports are at indices 2, 3, and 4, thus having 3 corrupted reports. Team 3 receives sequence [5, 5, 5] with an initial report of 5. There are no corrupted reports. Team 2 has the highest number of corrupted reports, thus the output is 2.","solution":"def find_team_with_highest_corruptions(T, team_data): max_corruptions = -1 team_index_with_max_corruptions = -1 for i in range(T): N = team_data[i][0] reports = team_data[i][1] S = team_data[i][2] corruptions = sum(1 for report in reports if report != S) if corruptions > max_corruptions: max_corruptions = corruptions team_index_with_max_corruptions = i + 1 return team_index_with_max_corruptions"},{"question":"We have a sequence of N integers a_1, a_2, ..., a_N. You can perform the following operation on the sequence: select two adjacent elements a_i and a_{i+1} and remove them, and insert their sum at position i. After performing this operation, the length of the sequence reduces by 1. You need to find the maximum possible value of the sum of the sequence after performing this operation N-1 times. Constraints * 1 leq N leq 2 times 10^5 * 1 leq a_i leq 10^9 Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print a single integer: the maximum possible value of the sum of the sequence after performing the operation N-1 times. Examples Input 3 1 2 3 Output 6 Input 4 2 1 4 3 Output 10 Input 5 1 2 3 4 5 Output 15","solution":"def max_sequence_sum(N, a): Returns the maximum possible value of the sum of the sequence after performing N-1 operations. Parameters: N (int): Number of elements in the sequence a (list of int): List of integers representing the sequence Returns: int: Maximum possible value of the sum of the sequence return sum(a)"},{"question":"Given a list of integers, you need to sort the list in a specific way. You have to perform the sorting such that all the odd numbers appear before all the even numbers, and within the odd numbers, they are sorted in descending order, while within the even numbers, they are sorted in ascending order. Your task is to write a function that takes an integer list as input and returns the list sorted as per the above conditions. **Input:** - A single line containing a space-separated list of integers. **Output:** - A single line containing the sorted list according to the specified conditions. **Example:** ``` Input: 3 1 2 4 7 5 8 Output: 7 5 3 1 2 4 8 ``` **Constraints:** - All integers in the list will be within the range of a 32-bit signed integer. - The length of the list will be up to 10^5. Note: Your solution should be efficient, handling the worst case within reasonable time limits.","solution":"def custom_sort(arr): Sort the list of integers such that: - All odd numbers appear before all even numbers - Odd numbers are sorted in descending order - Even numbers are sorted in ascending order odd_numbers = sorted([x for x in arr if x % 2 != 0], reverse=True) even_numbers = sorted([x for x in arr if x % 2 == 0]) return odd_numbers + even_numbers # Example usage (this line will not be used in unit tests): # print(custom_sort([3, 1, 2, 4, 7, 5, 8])) # Output: [7, 5, 3, 1, 2, 4, 8]"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if you can construct a palindrome by rearranging the characters of the string and possibly adding at most one character anywhere in the string. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input The single line of the input contains a string s consisting of lowercase English letters. The length of the string s doesn\'t exceed 100 characters. Output Print \\"YES\\" (without quotes), if it is possible to construct a palindrome by rearranging the characters of the string and possibly adding at most one character. Otherwise, print \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input civil Output NO","solution":"def can_form_palindrome(s): Determines if a palindrome can be formed using characters of the string `s` and possibly adding at most one character. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice owns a bakery and she has baked several batches of cookies. Each batch of cookies can have a different number of cookies. Alice wants to evenly distribute exactly `m` cookies into `n` batches such that all batches contain a non-negative number of cookies, and the total sum of cookies in all batches is `m`. Alice also wants to minimize the difference in the number of cookies between any two batches. Can you help Alice by determining an optimal way to distribute the cookies and return the maximum difference between the batch with the most cookies and the batch with the fewest cookies? # Input - The first line contains two integers `m` (0 ≤ m ≤ 10^9) and `n` (1 ≤ n ≤ 100,000) — the total number of cookies and the number of batches respectively. # Output - Output a single integer — the minimum possible maximum difference between the number of cookies in the batch with the most cookies and the batch with the fewest cookies. # Examples Example 1 **Input:** ``` 10 3 ``` **Output:** ``` 1 ``` **Explanation:** Alice could distribute the cookies as follows: [3, 3, 4]. The difference between the batch with the most cookies and the batch with the fewest cookies is 1. Example 2 **Input:** ``` 15 4 ``` **Output:** ``` 1 ``` **Explanation:** Alice could distribute the cookies as follows: [4, 4, 4, 3]. The difference between the batch with the most cookies and the batch with the fewest cookies is 1. Example 3 **Input:** ``` 7 2 ``` **Output:** ``` 0 ``` **Explanation:** Alice could distribute the cookies as follows: [4, 3]. The difference between the batch with the most cookies and the batch with the fewest cookies is 1, but it is also valid to distribute them as [3, 4], maintaining the same result.","solution":"def min_max_diff(m, n): Returns the minimum possible maximum difference between the number of cookies in the batch with the most cookies and the batch with the fewest cookies. if n == 1: return 0 # Each batch should ideally have these many cookies base_cookies_per_batch = m // n remainder_cookies = m % n # Maximum difference will be 1 if there\'s a remainder if remainder_cookies > 0: return 1 return 0"},{"question":"In a given country, there are multiple cities connected by roads. Each road connects exactly two cities and has a travel cost associated with it. Cities are numbered from 1 to n, and there are exactly n-1 roads, ensuring that every city can be reached from any other city, meaning the cities form a connected tree. One day, a transport company needs to find the journey cost between several pairs of cities. For each pair, they want to determine the minimum travel cost required to travel between the two cities. Write a program to calculate the minimum travel cost for each pair of cities given. Input Specification: - The first line contains an integer n (2 ≤ n ≤ 100000), the number of cities. - The next n-1 lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a road between city u and city v with cost w. - The following line contains an integer q (1 ≤ q ≤ 100000), the number of queries. - The next q lines each contain two integers a and b (1 ≤ a, b ≤ n), representing the pairs of cities for which the minimum travel cost is to be determined. Output Specification: - For each query, output a single integer, the minimum travel cost between the given pair of cities a and b. Sample Input: 5 1 2 3 1 3 2 2 4 4 2 5 1 3 1 4 3 5 4 5 Sample Output: 7 6 5","solution":"class TreeNode: def __init__(self): self.connections = [] def dfs(node, parent, graph, cost): for neighbor, weight in graph[node].connections: if neighbor != parent: cost[neighbor] = cost[node] + weight dfs(neighbor, node, graph, cost) def preprocess_lca(n, graph, root=1): levels = [0] * (n + 1) max_jump = n.bit_length() up = [[-1] * (max_jump + 1) for _ in range(n + 1)] cost_to_root = [0] * (n + 1) def dfs_lca(node, parent): up[node][0] = parent for i in range(1, max_jump + 1): if up[node][i-1] != -1: up[node][i] = up[up[node][i-1]][i-1] for neighbor, weight in graph[node].connections: if neighbor == parent: continue levels[neighbor] = levels[node] + 1 cost_to_root[neighbor] = cost_to_root[node] + weight dfs_lca(neighbor, node) dfs_lca(root, -1) return up, levels, cost_to_root def get_lca(u, v, up, levels): if levels[u] < levels[v]: u, v = v, u max_jump = len(up[u]) - 1 for i in range(max_jump, -1, -1): if up[u][i] != -1 and levels[up[u][i]] >= levels[v]: u = up[u][i] if u == v: return u for i in range(max_jump, -1, -1): if up[u][i] != -1 and up[u][i] != up[v][i]: u = up[u][i] v = up[v][i] return up[u][0] def min_travel_cost(n, roads, queries): graph = [TreeNode() for _ in range(n + 1)] for u, v, w in roads: graph[u].connections.append((v, w)) graph[v].connections.append((u, w)) up, levels, cost_to_root = preprocess_lca(n, graph) results = [] for a, b in queries: lca = get_lca(a, b, up, levels) cost = cost_to_root[a] + cost_to_root[b] - 2 * cost_to_root[lca] results.append(cost) return results"},{"question":"A small shop owner wants to keep track of his inventory. He has a list of items, where each item has a name and price. He wants to perform queries on his list of items to determine the total value of items with prices within a given range. Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of items. - The next n lines each contain a string s (the name of the item), and an integer p (0 ≤ p ≤ 1000), the price of the item. - The next line contains an integer q (1 ≤ q ≤ 100), the number of queries. - The next q lines each contain two integers l and r (0 ≤ l ≤ r ≤ 1000) which represent the price range for the query. Output - For each query, print the total value of items with prices within the given range [l, r]. Example Input 5 apple 50 banana 230 cherry 150 date 200 fig 100 3 50 200 0 150 100 300 Output 530 300 680 Note In the example, the items and their prices are given. For the first query (50, 200), the items within this price range are apple, cherry, date, and fig. The total value of these items is 50 + 150 + 200 + 100 = 500. For the second query (0, 150), the items within this price range are apple, cherry, and fig. The total value is 50 + 150 + 100 = 300. For the third query (100, 300), the items within this price range are banana, cherry, date, and fig. The total value is 230 + 150 + 200 + 100 = 680.","solution":"def calculate_total_value_per_query(n, items, q, queries): Calculate total value of items within a given price range for each query. n: int, number of items items: list of tuples [(item_name: str, item_price: int)] q: int, number of queries queries: list of tuples [(lower_bound: int, upper_bound: int)] returns: list of int, total values per query result = [] for l, r in queries: total_value = sum(price for _, price in items if l <= price <= r) result.append(total_value) return result"},{"question":"In a magical forest, there are N trees in a row, numbered from 1 to N. Each tree has a height represented by an array H where H[i] is the height of the i-th tree. An elf, considering the aesthetic value of the forest, wants to cut down some trees such that the remaining trees form a non-decreasing sequence of heights. Determine the minimum number of trees the elf must cut down to achieve a non-decreasing sequence of heights. Constraints * 1 leq N leq 10^5 * 1 leq H[i] leq 10^9 Input The input is given from Standard Input in the following format: N H_1 H_2 H_3 ... H_N Output Print a single integer representing the minimum number of trees that need to be cut down. Examples Input 5 3 4 2 5 1 Output 2 Input 6 1 2 3 4 5 6 Output 0 Input 4 9 7 8 6 Output 2","solution":"def min_trees_to_cut(N, H): Determines the minimum number of trees to cut to achieve a non-decreasing sequence of heights. Args: - N (int): Number of trees. - H (list of int): Heights of the trees. Returns: - int: Minimum number of trees to cut. dp = [1] * N # dp[i] will store the length of the longest increasing subsequence ending at index i for i in range(1, N): for j in range(i): if H[j] <= H[i]: dp[i] = max(dp[i], dp[j] + 1) max_lis = max(dp) # The length of the longest increasing subsequence return N - max_lis # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) H = list(map(int, data[1:])) print(min_trees_to_cut(N, H))"},{"question":"Write a program that simulates a simple calculator which performs addition, subtraction, multiplication, or division on two integers. The program should repeatedly process input until \\"exit\\" is encountered. Input The input consists of multiple lines. Each line contains a string formatted as \\"a op b\\" where a and b are integers and op is one of the following operators: +, -, *, or /. The last line contains the string \\"exit\\", which stops the input processing. Output For each line of input except the last one, output the result of the operation in a new line. If division by zero is attempted, output \\"Error\\" for that line instead. Example Input 3 + 4 10 - 2 6 * 7 8 / 0 20 / 4 exit Output 7 8 42 Error 5","solution":"def simple_calculator(input_lines): Simulates a simple calculator that processes addition, subtraction, multiplication, and division operations on two integers. results = [] for line in input_lines: if line == \\"exit\\": break a, op, b = line.split() a = int(a) b = int(b) if op == \'+\': results.append(a + b) elif op == \'-\': results.append(a - b) elif op == \'*\': results.append(a * b) elif op == \'/\': if b == 0: results.append(\\"Error\\") else: results.append(a // b) return results"},{"question":"A game consists of N players, numbered 1 through N. The players compete in a tournament where each player can challenge any other player to a match. Each match results in one player winning and the other losing, and the outcome is determined by a specific rule: for any two players i and j (1 ≤ i, j ≤ N), player i wins against player j if and only if i < j. The tournament\'s goal is to create a sequence of matches, such that each player wins exactly one match and loses exactly one match. Determine the number of distinct sequences of matches that satisfy this condition, modulo 10^9 + 7. Two sequences are considered different if the order of matches within the sequence is different or if different pairs of players are matched in the sequence. Input The input is given in the following format: N Constraints * 2 ≤ N ≤ 10,000 Output Print the number of distinct sequences of matches that satisfy the given condition, modulo 10^9 + 7. Examples Input 3 Output 3 Input 4 Output 6 Input 5 Output 24 Input 6 Output 90","solution":"def count_match_sequences(N): MOD = 10**9 + 7 if N % 2 == 1: # If N is odd, no perfect matchings possible return 0 # If N is even, calculate (N-1)!! modulo 10^9 + 7 result = 1 for i in range(N - 1, 0, -2): result = (result * i) % MOD return result"},{"question":"You are working on a space mission to deploy a new type of space probe to explore various celestial bodies. The probe you developed can land on the target body and create an exploration path based on commands it receives. However, due to the challenging environment, the probe\'s path exploration must be validated for feasibility. The probe moves on a grid, and you need to determine whether the probe can complete its path without moving outside a specified rectangular boundary. Your task is to write a program that verifies if the sequence of commands issued to the probe is valid, ensuring that it does not leave the grid\'s specified boundaries. # Input The input consists of a single test case in the following format: ```plaintext M N x y C ``` - The first line contains two integers, M and N (1 leq M, N leq 1000), representing the dimensions of the grid. - The second line contains two integers, x and y (0 leq x < M, 0 leq y < N), representing the starting position of the probe. - The third line contains a string `C` consisting of characters `L`, `R`, `U`, and `D` (1 leq |C| leq 10^5), which represent the commands issued to move the probe: - `L` means move one step to the left. - `R` means move one step to the right. - `U` means move one step up. - `D` means move one step down. # Output Print \\"Valid\\" if the probe remains within the grid throughout the entire sequence of commands. Otherwise, print \\"Invalid\\". # Examples Example 1 **Input:** ```plaintext 5 5 2 2 RDDLL ``` **Output:** ```plaintext Valid ``` Example 2 **Input:** ```plaintext 3 3 1 1 UUU ``` **Output:** ```plaintext Invalid ``` Example 3 **Input:** ```plaintext 4 4 0 0 RRRUUU ``` **Output:** ```plaintext Invalid ```","solution":"def is_valid_path(M, N, x, y, C): Determines if the probe\'s sequence of commands is valid within the specified grid. Parameters: M (int): The number of rows in the grid. N (int): The number of columns in the grid. x (int): The starting row of the probe. y (int): The starting column of the probe. C (str): The string of commands. Returns: str: \\"Valid\\" if the probe never leaves the grid, \\"Invalid\\" otherwise. for command in C: if command == \'L\': y -= 1 elif command == \'R\': y += 1 elif command == \'U\': x -= 1 elif command == \'D\': x += 1 # Check if the probe is out of bounds if x < 0 or x >= M or y < 0 or y >= N: return \\"Invalid\\" return \\"Valid\\""},{"question":"Write a function that takes an array of integers and a target sum, and returns all unique pairs of elements that add up to the target sum. Each pair in the output should be sorted in ascending order, and the pairs themselves should also be sorted in ascending order based on their first elements. If two pairs have the same first element, they should be sorted by their second element. Input: - An integer array `nums` where 0 <= `nums.length` <= 1000 and -1000 <= `nums[i]` <= 1000 - An integer `target` where -2000 <= `target` <= 2000 Output: - A list of pairs represented as two-element arrays where each pair sums up to the target. Note: - The pairs should be unique. - Elements in each pair should not be used more than once. - The order of the pairs in the output should follow the rules mentioned above. Example: Input: nums = [1, 2, -3, 4, -2, 3, -1, 5, -4] target = 3 Output: [[-1, 4], [-2, 5], [-3, 6], [1, 2]] Input: nums = [0, 2, -2, 1, -1, 3] target = 1 Output: [[-2, 3], [-1, 2], [0, 1]] Input: nums = [4, 5, 1, -2, -1, 0, 3, -3] target = 5 Output: [[0, 5], [1, 4]]","solution":"def find_pairs(nums, target): Returns all unique pairs of elements that add up to the target sum. nums.sort() pairs = set() seen = {} for num in nums: complement = target - num if complement in seen: pairs.add((complement, num)) seen[num] = True return sorted([list(pair) for pair in pairs])"},{"question":"In a magical forest, there are n trees arranged in a straight line, numbered from 1 to n. Each tree has a certain amount of magical berries attached to it. The tree keeper has a magical basket that can hold no more than m berries at a time. The tree keeper wants to maximize the number of trees from which he can pick berries in a single walk without exceeding the basket\'s capacity. He will start from a given tree and can pick berries from a sequence of consecutive trees. Formally, given an array `berries` of length n where `berries[i]` represents the number of berries on the ith tree, you need to find the maximum number of consecutive trees from which the tree keeper can pick berries without the total number of berries exceeding m. Input The first line contains two integers n and m, where 1 ≤ n ≤ 10^5 and 1 ≤ m ≤ 10^9. The second line contains n integers where each integer `berries[i]` is the number of berries on the ith tree and 0 ≤ `berries[i]` ≤ 10^9. Output Output a single integer, the maximum number of consecutive trees from which the tree keeper can pick berries without exceeding the basket\'s capacity. Example Input: 7 10 2 1 4 3 2 3 1 Output: 4 Explanation: Starting from the first tree, the tree keeper can pick berries from the first four trees to get berries [2, 1, 4, 3] which sum up to 10, making it the longest sequence without exceeding the basket\'s capacity.","solution":"def max_consecutive_trees(berries, m): Finds the maximum number of consecutive trees from which berries can be picked without exceeding m. n = len(berries) max_trees = 0 current_sum = 0 start = 0 for end in range(n): current_sum += berries[end] while current_sum > m: current_sum -= berries[start] start += 1 max_trees = max(max_trees, end - start + 1) return max_trees"},{"question":"In a faraway galaxy, there\'s a game popular among the inhabitants. The game involves arranging numbers in a series where the only valid moves are either incrementing a number or swapping two numbers. The objective is to sort the series in ascending order using the fewest moves possible. You are given an array of integers where each number can only be modified or swapped. Designing an efficient algorithm to perform this task has intrigued many programmers in the galaxy. # Problem Statement Given an array of integers `arr` of length `n`, your task is to determine the minimum number of moves required to sort the array in non-decreasing order. A single move can be either: 1. Increment any number in the array by 1. 2. Swap two elements in the array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains `n` integers, `arr[i]` (0 ≤ arr[i] ≤ 1000), representing the elements of the array. # Output - Print a single integer, the minimum number of moves required to sort the array. # Example **Input:** ``` 4 4 3 2 1 ``` **Output:** ``` 2 ``` **Explanation:** - Swap elements 4 and 1 to get [1, 3, 2, 4]. - Swap elements 3 and 2 to get [1, 2, 3, 4]. Thus, it requires 2 moves to sort this array. # Note The solution should aim to optimize the number of moves, balancing between swaps and increments, to reach the sorted configuration.","solution":"def min_moves_to_sort(arr): This function calculates the minimum number of moves required to sort the given array. A single move can be either incrementing any number or swapping two elements. # Create a sorted version of arr sorted_arr = sorted(arr) n = len(arr) # Calculate the minimum number of swaps to sort the array visited = [False] * n swap_count = 0 for i in range(n): # if already visited or at correct position if visited[i] or arr[i] == sorted_arr[i]: continue cycle_length = 0 x = i while not visited[x]: visited[x] = True x = arr.index(sorted_arr[x]) # Find the index in the original array cycle_length += 1 if cycle_length > 0: swap_count += (cycle_length - 1) return swap_count"},{"question":"In a certain village, there is a tradition to light a bonfire every night during the Festival of Lights, which lasts for n nights. Each night, the villagers use a precisely calculated amount of wood to ensure the bonfire burns brightly without wasting any resources. The amount of wood burned on the i-th night is denoted by the integer w[i]. To make the celebrations more interesting, the village elder has introduced a new game. They will randomly pick one night during the festival and consider the maximum amount of wood burned so far up to that night (inclusive). The goal is to determine the total wood burned on that particular night and every previous night if the festival ended on that night. Given the number of nights n and the amount of wood burned each night, write a program to compute the maximum possible total amount of wood burned for any night picked by the village elder. Input The first line contains an integer n (1 ≤ n ≤ 10000), representing the number of nights. The second line contains n integers w[1], w[2], ..., w[n] (1 ≤ w[i] ≤ 100), representing the amount of wood burned on each night. Output Print a single integer representing the maximum possible total amount of wood burned when choosing any night as the end of the festival. Examples Input 5 3 1 4 1 5 Output 14 Input 3 2 7 1 Output 10","solution":"def max_total_wood_burned(n, wood_amounts): Calculate the maximum possible total amount of wood burned for any night picked by the village elder. Parameters: n (int): Number of nights. wood_amounts (list of int): Amount of wood burned each night. Returns: int: The maximum possible total amount of wood burned. max_total_wood = 0 current_total_wood = 0 for wood in wood_amounts: current_total_wood += wood max_total_wood = max(max_total_wood, current_total_wood) return max_total_wood"},{"question":"Given a binary tree, return the path from root to the deepest right leaf node in the tree. A leaf node is a node with no left or right children. Constraints * The tree contains at most 10,000 nodes. * Node values are distinct integers and can range from -10,000 to 10,000. Input The input is the root of the binary tree in the following format: root = TreeNode(val) root.left = TreeNode(val) root.right = TreeNode(val) Output Print the path from the root to the deepest right leaf node as a list of integers. Examples Input root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.right.left = TreeNode(5) root.right.right = TreeNode(6) root.right.right.right = TreeNode(7) Output [1, 3, 6, 7] Input root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(8) root.left.left = TreeNode(1) root.left.right = TreeNode(4) root.right.right = TreeNode(10) root.right.right.right = TreeNode(12) Output [5, 8, 10, 12]","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_deepest_right_leaf_path(root): Returns the path from root to the deepest right leaf node. if not root: return [] def dfs(node, path): nonlocal deepest_path, max_depth if node: # Append the current node to the path path.append(node.val) # If it\'s a leaf node if not node.left and not node.right: # Check if this leaf is farther right and deeper if len(path) > max_depth or (len(path) == max_depth and node is path[-1]): max_depth = len(path) deepest_path = list(path) # DFS on the right first to prioritize right children dfs(node.right, path) dfs(node.left, path) # Remove the current node from the path (backtrack) path.pop() deepest_path = [] max_depth = 0 dfs(root, []) return deepest_path"},{"question":"Given a string `s` consisting of only lowercase letters and an integer `k`, determine if you can rearrange the string so that it becomes a k-palindrome. A k-palindrome is a string that can be transformed into a palindrome by removing at most `k` characters. Write a function `is_k_palindrome(s, k)` that returns `True` if it is possible to rearrange the string `s` to form a k-palindrome, otherwise return `False`. # Input - A string `s` (1 ≤ |s| ≤ 1000), consisting of only lowercase English letters. - An integer `k` (0 ≤ k ≤ |s|). # Output - A boolean indicating whether it is possible to rearrange the string to become a k-palindrome. # Examples Example 1 **Input:** ``` s = \\"radar\\" k = 0 ``` **Output:** ``` True ``` **Explanation:** The string \\"radar\\" is already a palindrome. Example 2 **Input:** ``` s = \\"racecar\\" k = 1 ``` **Output:** ``` True ``` **Explanation:** By removing any character (for example, \\"e\\"), the string can be rearranged into \\"racecar\\", which is a palindrome. Example 3 **Input:** ``` s = \\"abcdef\\" k = 5 ``` **Output:** ``` True ``` **Explanation:** By removing 5 characters (for example, \\"abcde\\"), the string can be rearranged into \\"f\\", which is a palindrome. Example 4 **Input:** ``` s = \\"abcdef\\" k = 2 ``` **Output:** ``` False ``` **Explanation:** Even after removing 2 characters, the string cannot be rearranged into a palindrome. # Notes - A palindrome is a string that reads the same forwards and backwards. - It\'s always possible to remove up to `k` characters from any string, but rearranging also needs to be considered here. **Hint:** Consider the number of character pairs needed to be equal for the string to form a palindrome. Use dynamic programming or a similar approach to count these pairs in the rearranged string and compare it with `k`.","solution":"def is_k_palindrome(s, k): Check if the string `s` can be rearranged to form a k-palindrome. n = len(s) # Helper function to find the minimum number of deletions to make s[l:r+1] a palindrome def min_deletions(l, r): if l >= r: return 0 if dp[l][r] != -1: return dp[l][r] if s[l] == s[r]: dp[l][r] = min_deletions(l+1, r-1) else: dp[l][r] = 1 + min(min_deletions(l+1, r), min_deletions(l, r-1)) return dp[l][r] dp = [[-1 for _ in range(n)] for _ in range(n)] min_del = min_deletions(0, n-1) return min_del <= k"},{"question":"You are given a list of points in a 2D plane. Your task is to determine if there exists a rectangle whose sides are parallel to the coordinate axes that contains only the given points as its vertices. Input The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of points. Each of the next n lines contains two space-separated integers x and y (|x|, |y| ≤ 10^6) which are the coordinates of the points. Output Output \\"YES\\" if there exists such a rectangle and \\"NO\\" otherwise. Example Input 4 0 0 0 1 1 0 1 1 Output YES Input 4 0 0 2 0 1 1 1 2 Output NO Explanation - In the first example, the points can form a rectangle with vertices (0,0), (0,1), (1,0), and (1,1). - In the second example, the given points do not form a rectangle with sides parallel to the axes.","solution":"def is_rectangle(points): Determines if there is a rectangle with sides parallel to the coordinate axes that contains only the given points as its vertices. # Create a set of points for fast lookup point_set = set(points) # Iterate through every pair of points to find two opposite corners of a potential rectangle for i in range(len(points)): for j in range(i + 1, len(points)): # Get the two points p1 = points[i] p2 = points[j] # Check if these two points can form a diagonal of a rectangle if p1[0] != p2[0] and p1[1] != p2[1]: # Calculate the other two points needed to form a rectangle p3 = (p1[0], p2[1]) p4 = (p2[0], p1[1]) # Check if both these points are in the set of given points if p3 in point_set and p4 in point_set: return \\"YES\\" # If no rectangle found return \\"NO\\" # Input: List of points def check_rectangle(n, points): return is_rectangle(points)"},{"question":"You are given an n x m grid of integers where each cell contains a positive integer representing the height of the terrain at that point. Find a path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) such that the maximum height difference between any two consecutive cells in the path is minimized. You can only move up, down, left, or right. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, where the integer in the i-th row and j-th column (1 ≤ grid[i][j] ≤ 10^6) represents the height of the terrain at that cell. Output Print the minimum possible value of the maximum height difference achieved by any path from (0, 0) to (n-1, m-1). Examples Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 2 2 1 2 4 6 Output 3","solution":"import heapq def min_path_max_diff(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_diff = [[float(\'inf\')] * m for _ in range(n)] max_diff[0][0] = 0 pq = [(0, 0, 0)] # (difference, x, y) heapq.heapify(pq) while pq: current_diff, x, y = heapq.heappop(pq) if x == n-1 and y == m-1: return current_diff for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): new_diff = max(current_diff, abs(grid[x][y] - grid[nx][ny])) if new_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_diff heapq.heappush(pq, (new_diff, nx, ny)) return float(\'inf\')"},{"question":"You are given a directed graph with n vertices and m edges. Each vertex is numbered from 1 to n. An edge from vertex u to vertex v is represented as (u -> v). A vertex i is said to be a hub if every other vertex in the graph has a directed path to it. Your task is to determine the number of hubs in the graph. If there are no hubs, return 0. # Input Format The first line of the input contains two integers n and m (1 ≤ n, m ≤ 300), the number of vertices and edges in the graph respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a directed edge from u to v. # Output Format Output a single integer representing the number of hubs in the graph. # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` 4 ``` Input ``` 4 3 1 2 2 3 3 1 ``` Output ``` 0 ``` # Note In the first example, every vertex has a path to all other vertices: - Vertex 1 can reach vertices 2, 3, and 4. - Vertex 2 can reach vertices 3, 4, and 1. - Vertex 3 can reach vertices 4, 1, and 2. - Vertex 4 can reach vertices 1, 2, and 3. Thus, all four vertices are hubs and the output is 4. In the second example, no vertex has a path to all others, hence the output is 0.","solution":"def floyd_warshall(n, edges): Uses the Floyd-Warshall algorithm to find all pairs shortest paths. dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v in edges: dist[u - 1][v - 1] = 1 for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def count_hubs(n, edges): Returns the number of hub vertices in the graph. dist = floyd_warshall(n, edges) hubs = 0 for i in range(n): is_hub = True for j in range(n): if i != j and dist[j][i] == float(\'inf\'): is_hub = False break if is_hub: hubs += 1 return hubs # Example usage: n = 4 m = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(count_hubs(n, edges)) # Output should be 4"},{"question":"In an amusement park, there is a new roller coaster that consists of `n` segments of tracks. Each segment can either be inclined upwards, inclined downwards, or horizontal. The riders start their journey at the beginning of the first segment and they must finish at the end of the last segment. The park manager wants to make sure that the roller coaster is exciting but not too dangerous. Therefore, they have set two constraints on the roller coaster\'s elevation profile: 1. The total elevation gained (sum of all upwards segments) should not exceed a certain threshold `max_up`. 2. The total elevation dropped (sum of all downwards segments) should not exceed a certain threshold `max_down`. You are given the elevation changes for each segment of the roller coaster. A positive value indicates an upward segment, a negative value indicates a downward segment, and a zero indicates a horizontal segment. Write a program that determines whether the roller coaster meets the park manager\'s constraints. **Input** The first line of the input contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains three integers `n` (1 ≤ n ≤ 100), `max_up` (0 ≤ max_up ≤ 1000), and `max_down` (0 ≤ max_down ≤ 1000) — the number of segments in the roller coaster, the maximum allowed total elevation gain, and the maximum allowed total elevation drop. The second line of each test case contains `n` integers `e_1, e_2, ..., e_n` (-100 ≤ e_i ≤ 100) — the elevation changes for each segment of the roller coaster. Output For each test case, print \\"Yes\\" if the roller coaster meets the constraints, and \\"No\\" otherwise. Example Input: ``` 4 3 100 50 30 -20 10 5 70 40 20 20 -10 -10 20 4 50 50 10 20 -30 40 2 30 10 20 -20 ``` Output: ``` Yes Yes No No ``` Note In the first test case: The total elevation gain is 30+10=40 which is ≤ 100 and the total elevation drop is 20 which is ≤ 50. So, the output is \\"Yes\\". In the second test case: The total elevation gain is 20+20+20=60 which is ≤ 70 and the total elevation drop is 10+10=20 which is ≤ 40. So, the output is \\"Yes\\". In the third test case: The total elevation gain is 10+20+40=70 which is > 50. So, the output is \\"No\\". In the fourth test case: The total elevation gain is 20 which is ≤ 30 but the total elevation drop is 20 which is > 10. So, the output is \\"No\\".","solution":"def check_constraints(t, test_cases): results = [] for case in test_cases: n, max_up, max_down, elevations = case total_up = sum(e for e in elevations if e > 0) total_down = sum(abs(e) for e in elevations if e < 0) if total_up <= max_up and total_down <= max_down: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def handle_input_output(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) max_up = int(data[index + 1]) max_down = int(data[index + 2]) elevations = list(map(int, data[index + 3: index + 3 + n])) test_cases.append((n, max_up, max_down, elevations)) index += 3 + n results = check_constraints(t, test_cases) for result in results: print(result)"},{"question":"In this problem, you are given a rectangular board consisting of \'X\' and \'.\' characters, representing walls and empty spaces, respectively. Your task is to determine whether it\'s possible to place a tile of size 2x2 on the board such that every cell of the tile is within the empty spaces (\'.\'). Each test consists of a new board, and you need to answer for each test case if it is possible to place at least one 2x2 tile on the board. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains two integers n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 50), the height and width of the board respectively. The next n lines contain m characters each, representing the board, where each character is either \'X\' or \'.\'. Output For each test case, output \\"YES\\" if it is possible to place at least one 2x2 tile on the board, or \\"NO\\" if it is not possible. Example Input 3 4 5 .XX.. ..X.. .X... ..... 3 3 XXX X.. XXX 5 5 ..... ..... ..... ..... ..... Output YES NO YES Explanation In the first test case, there are several possible places to put a 2x2 tile, such as bottom right corner. In the second test case, it is not possible to place any 2x2 tile due to the positions of the walls. In the third test case, the entire board is empty, so it is possible to place multiple 2x2 tiles.","solution":"def can_place_tile(board): Determines if a 2x2 tile can be placed within the empty spaces (\'.\') of the board. Args: board (list of str): List of strings representing the board. Returns: str: \\"YES\\" if it is possible to place a 2x2 tile, otherwise \\"NO\\". n = len(board) m = len(board[0]) for i in range(n - 1): for j in range(m - 1): if board[i][j] == \'.\' and board[i+1][j] == \'.\' and board[i][j+1] == \'.\' and board[i+1][j+1] == \'.\': return \\"YES\\" return \\"NO\\" def solve(test_cases): Processes multiple test cases. Args: test_cases (list of tuples): Each tuple contains n, m, and the board configuration Returns: list of str: For each test case, returns \\"YES\\" or \\"NO\\". results = [] for (n, m, board) in test_cases: results.append(can_place_tile(board)) return results"},{"question":"Sherlock is back on the case, deciphering yet another cryptic message. This time, Moriarty has sent him a sequence of N integers, and Sherlock must decode the message\'s true meaning by identifying prime numbers and summing them up. Help Sherlock by writing a program that takes a list of integers and returns the sum of all the prime numbers within the list. If there are no prime numbers in the list, return 0. Input: The first line contains T, the number of test cases. For each test case: - The first line contains the integer N, the number of integers in the list. - The second line contains N space-separated integers. Output: For each test case, output the sum of the prime numbers in the list. Print each sum on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^6 SAMPLE INPUT 2 4 3 5 8 13 5 4 6 8 10 12 SAMPLE OUTPUT 21 0","solution":"def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(nums): Returns the sum of prime numbers in the list nums. return sum(filter(is_prime, nums)) def process_test_cases(test_cases): Process multiple test cases. Each test case is represented as a tuple (N, integers). Returns a list of results for each test case. results = [] for N, integers in test_cases: results.append(sum_of_primes(integers)) return results def decode_message(T, test_cases): Main function to decode the message from multiple test cases. T: number of test cases. test_cases: List of tuples where each tuple is (N, list_of_integers) Returns a list of integers representing the sum of prime numbers for each test case. return process_test_cases(test_cases)"},{"question":"John is a botanist who is experimenting with a row of flower pots arranged in a linear garden to study plant growth patterns. Each flower pot has a specific height, and John wants to perform several operations where he either queries the tallest flower pot within a certain range or updates the height of a specific flower pot. Given an array of integers representing the height of each flower pot, you need to handle two types of operations: 1. \\"query\\" (l, r) - Returns the height of the tallest flower pot in the range from index l to index r (inclusive). 2. \\"update\\" (i, h) - Updates the height of the flower pot at index i to h. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100), the number of flower pots and the number of operations respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) representing the initial height of each flower pot. Each of the next q lines describes an operation and is either of the form \\"query l r\\" (1 ≤ l ≤ r ≤ n) or \\"update i h\\" (1 ≤ i ≤ n, 1 ≤ h ≤ 1000). Output For each \\"query\\" operation, print the height of the tallest flower pot in the specified range. There is no output for \\"update\\" operations. Example Input 5 3 3 9 5 6 7 query 1 3 update 2 11 query 1 3 Output 9 11 Explanation Initially, the heights of the flower pots are [3, 9, 5, 6, 7]. First operation: \\"query 1 3\\" — The tallest plant from index 1 to 3 (inclusive) is 9. Second operation: \\"update 2 11\\" — The heights of the flower pots become [3, 11, 5, 6, 7]. Third operation: \\"query 1 3\\" — The tallest plant from index 1 to 3 (inclusive) is now 11.","solution":"def handle_operations(n, q, heights, operations): results = [] for op in operations: parts = op.split() if parts[0] == \\"query\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(max(heights[l:r+1])) elif parts[0] == \\"update\\": i = int(parts[1]) - 1 h = int(parts[2]) heights[i] = h return results"},{"question":"Given an n-vertex connected undirected graph, you need to determine if it is a bipartite graph. A bipartite graph is one where the vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of vertices in the graph. Each of the following n lines contains an integer m (0 ≤ m ≤ n-1), denoting the number of adjacent vertices. Then follow m integers, each representing an adjacent vertex index. Output: Output \\"YES\\" if the graph is bipartite, otherwise output \\"NO\\". Example Input: 4 1 2 2 1 3 2 2 4 1 3 Output: YES Input: 3 2 2 3 2 1 3 2 1 2 Output: NO Note: In the first example, we can partition the vertices into two sets {1, 3} and {2, 4} such that each edge connects a vertex from one set to a vertex from the other set, confirming the graph is bipartite. In the second example, it’s impossible to partition the vertices into two sets without having two vertices within the same set that are adjacent, so the graph is not bipartite.","solution":"def is_bipartite(n, adj_list): Determine if the given graph is bipartite. Parameters: n (int): Number of vertices in the graph. adj_list (list[list[int]]): Adjacency list representing the graph. Returns: str: \'YES\' if the graph is bipartite, \'NO\' otherwise. color = [-1] * n for start in range(n): if color[start] == -1: queue = [start] color[start] = 0 while queue: u = queue.pop(0) for v in adj_list[u]: if color[v] == -1: color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes an integer `n` and returns a list of the first `n` Fibonacci-like numbers. A Fibonacci-like sequence is a sequence of numbers which starts with two integers provided as input (say `a` and `b`), and each subsequent number is the sum of the two preceding ones. Implement this function and also a main function to handle the input/output as specified. Input format: - The first line contains an integer `t`, the number of test cases. - Each of the next `t` lines contains three integers `n`, `a`, and `b`. Output format: - For each test case, output a single line containing the first `n` Fibonacci-like numbers starting from `a` and `b`, separated by spaces. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 50 - -1000 ≤ a, b ≤ 1000 SAMPLE INPUT 3 5 1 1 7 0 1 10 2 3 SAMPLE OUTPUT 1 1 2 3 5 0 1 1 2 3 5 8 2 3 5 8 13 21 34 55 89 144 Explanation: In the first test case, the sequence starts with 1 and 1, and the next three numbers are the sum of the previous two: 2 (1+1), 3 (1+2), and 5 (2+3). In the second test case, the sequence starts with 0 and 1, and the next five numbers are 1 (0+1), 2 (1+1), 3 (1+2), 5 (2+3), 8 (3+5). In the third test case, the sequence starts with 2 and 3, and the next eight numbers are 5 (2+3), 8 (3+5), 13 (5+8), 21 (8+13), 34 (13+21), 55 (21+34), 89 (34+55), 144 (55+89).","solution":"def fibonacci_like(n, a, b): Returns the first n Fibonacci-like numbers starting with a and b. if n == 1: return [a] if n == 2: return [a, b] seq = [a, b] for _ in range(2, n): next_value = seq[-1] + seq[-2] seq.append(next_value) return seq def main(input_list): Handles input and output for multiple test cases. results = [] t = input_list[0] for i in range(1, t + 1): n, a, b = input_list[i] fib_like_seq = fibonacci_like(n, a, b) result = \' \'.join(map(str, fib_like_seq)) results.append(result) return results"},{"question":"In a magical kingdom, wizards constantly battle each other using a unique language called SpellScript. Each wizard has a spellbook that contains spells to either deal damage or heal themselves. Your task is to simulate a series of spell interactions between wizards and calculate their final health points. In SpellScript, wizards can do two types of actions: 1. Cast a damage spell to decrease another wizard\'s health points. 2. Cast a heal spell to increase their own health points. Each wizard starts with a specified amount of health. The spells are executed in the order they appear. # Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of wizards. The next `n` lines each contain a wizard\'s name and initial health, separated by a space. Following that, there\'s an integer `m` (1 ≤ m ≤ 100) — the number of spell actions. The next `m` lines each describe a spell action using one of the formats: - `cast_damage [caster] [target] [amount]` — the wizard `[caster]` deals `[amount]` damage to `[target]`. - `cast_heal [wizard] [amount]` — the wizard `[wizard]` heals themselves for `[amount]`. Each wizard\'s name consists of lowercase Latin letters and has a length from 1 to 10 characters inclusive. The names of all wizards are unique. All amounts (both damage and heal) are positive integers between 1 and 100 inclusive. # Output For each wizard, print their name and final health points after all the spells have been executed, in lexicographical order of the names. Note that a wizard\'s health can become negative if they receive more damage than their current health. # Example Input ``` 3 merlin 100 gandalf 200 saruman 150 5 cast_damage merlin saruman 50 cast_heal gandalf 30 cast_damage saruman merlin 70 cast_damage gandalf saruman 40 cast_heal saruman 20 ``` Output ``` gandalf 230 merlin 30 saruman 80 ``` # Note In the example: 1. Merlin deals 50 damage to Saruman, reducing Saruman\'s health to 100. 2. Gandalf heals himself for 30 points, increasing his health to 230. 3. Saruman deals 70 damage to Merlin, reducing Merlin\'s health to 30. 4. Gandalf deals 40 damage to Saruman, reducing Saruman\'s health to 60. 5. Saruman heals himself for 20 points, increasing his health to 80.","solution":"def simulate_spells(n, wizard_info, m, spell_actions): wizards = {} for info in wizard_info: name, health = info.split() wizards[name] = int(health) for action in spell_actions: parts = action.split() if parts[0] == \'cast_damage\': caster, target, amount = parts[1], parts[2], int(parts[3]) wizards[target] -= amount elif parts[0] == \'cast_heal\': wizard, amount = parts[1], int(parts[2]) wizards[wizard] += amount result = sorted(wizards.items()) return result"},{"question":"Ilya wants to organize a trail running competition in his town. He has chosen a route that includes several checkpoints. Each checkpoint i (where 1 ≤ i ≤ n) is stationed within a certain elevation level, ei meters above the sea level. Ilya wants the runners to have a manageable experience without sudden, steep changes in elevation between successive checkpoints. To ensure this, he wants to install lifts at some of the checkpoints, which can adjust the elevation levels. The goal is to determine the minimum number of lifts needed such that the difference in elevation between any two successive checkpoints does not exceed a given maximum value, d meters. Input The first line contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 109) — the number of checkpoints and the maximum allowed elevation difference. The second line contains n integers e1, e2, ..., en (1 ≤ ei ≤ 109) — the elevation levels of the checkpoints. Output Print a single integer — the minimum number of lifts needed to meet the requirement. Examples Input 5 4 1 5 15 9 12 Output 2 Input 3 10 3 8 14 Output 0 Note In the first example, Ilya needs lifts at checkpoints 2 and 3. After adjusting: - The elevation between checkpoints 1 and 2 can be maintained at 4 meters (1 to 5). - Between checkpoints 2 and 3, we need a lift to reduce the elevation change from 10 meters (5 to 15) to within the allowed 4 meters. - Similarly, we need a lift between checkpoints 3 and 4 to ease the difference. - The rest of the route is manageable within the given d = 4 meters. In the second example, the elevation differences (5 meters and 6 meters) are already within the allowable range, so no lifts are required.","solution":"def min_lifts_needed(n, d, elevations): Determines the minimum number of lifts needed such that the difference in elevation between any two successive checkpoints does not exceed the given maximum allowed elevation difference. Args: n: int - the number of checkpoints. d: int - the maximum allowed elevation difference. elevations: List[int] - the elevation levels of the checkpoints. Returns: int - the minimum number of lifts needed. lifts_needed = 0 for i in range(1, n): if abs(elevations[i] - elevations[i - 1]) > d: lifts_needed += 1 return lifts_needed"},{"question":"You are tasked with developing an algorithm to efficiently manage a file system in a Unix-like environment. The system can execute a series of commands, which manipulate the current directory or files within the file system. The file system operates on a hierarchal structure where directories may contain subdirectories and files. The commands you need to handle include: - `cd <path>`: Change directory to the specified path. - `mkdir <dirname>`: Create a new directory with the specified name in the current directory. - `touch <filename>`: Create a new file with the specified name in the current directory. - `pwd`: Output the absolute path of the current directory. - `ls`: List all files and directories in the current directory in lexicographical order. Your task is to simulate the execution of a series of commands starting from the root directory and in a clean file system state, where the root directory is denoted by \\"/\\". Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of commands to be executed. The next n lines each contain a command, which can be one of the five types described above. Output For each `pwd` and `ls` command, print the result as described. Example Input 7 mkdir bin touch file.txt mkdir usr cd bin touch script.sh cd .. ls Output bin file.txt usr","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} self.current_path = [\'/\'] def _get_current_dir(self): dir_ref = self.fs for dir_name in self.current_path: dir_ref = dir_ref[dir_name] return dir_ref def cd(self, path): if path == \'/\': self.current_path = [\'/\'] return if path == \'..\': if len(self.current_path) > 1: self.current_path.pop() return dirs = path.split(\'/\') for d in dirs: if d == \'.\' or (d == \'\' and len(self.current_path) != 1): continue self.current_path.append(d) def mkdir(self, dirname): current_dir = self._get_current_dir() if dirname not in current_dir: current_dir[dirname] = {} def touch(self, filename): current_dir = self._get_current_dir() current_dir[filename] = None def pwd(self): return \'/\' + \'/\'.join(self.current_path[1:]) if len(self.current_path) > 1 else \'/\' def ls(self): current_dir = self._get_current_dir() return sorted(current_dir.keys()) def execute_commands(commands): fs = FileSystem() output = [] for command in commands: if command.startswith(\'cd\'): _, path = command.split(maxsplit=1) fs.cd(path) elif command.startswith(\'mkdir\'): _, dirname = command.split(maxsplit=1) fs.mkdir(dirname) elif command.startswith(\'touch\'): _, filename = command.split(maxsplit=1) fs.touch(filename) elif command == \'pwd\': output.append(fs.pwd()) elif command == \'ls\': output.append(\'n\'.join(fs.ls())) return output"},{"question":"An explorer is navigating a grid-based city where each cell represents a building or a road. The city is represented by an N x M matrix. Each cell in the matrix can be either a \'B\' (building) or an \'R\' (road). The explorer can move up, down, left, or right, but cannot move diagonally and cannot enter buildings. The starting point of the explorer is always at the top-left corner of the matrix (0, 0) and the destination is the bottom-right corner (N-1, M-1). You need to find the minimum number of roads the explorer needs to travel if they can only move on roads to reach the destination. If the destination is not reachable, return -1. Input: The first line contains T, the number of test cases. Each test case starts with two integers, N and M, where N is the number of rows and M is the number of columns. The next N lines contain M characters each, representing the city grid. Output: For each test case, output the minimum number of roads needed to reach the destination or -1 if the destination is not reachable. Constraints: 1 <= T <= 100 1 <= N, M <= 1000 Each cell is either \'B\' (building) or \'R\' (road) Example: Input: 2 4 4 RBBB RRRB BBRR BBRR 3 3 RRR BRB RRR Output: 6 4 Explanation: In the first test case, the path is: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3), so 6 roads. In the second test case, the path is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), so 4 roads.","solution":"from collections import deque def min_roads_needed(N, M, grid): if grid[0][0] == \'B\' or grid[N-1][M-1] == \'B\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == N-1 and y == M-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'R\': queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1 def solve(T, cases): results = [] for case in cases: N, M = case[0] grid = case[1] result = min_roads_needed(N, M, grid) results.append(result) return results"},{"question":"Task is to write a function to validate if a given input string can be interpreted as a decimal number. Some valid decimal numbers can be: - \\"0\\" - \\" 0.1 \\" - \\"-1.23\\" - \\"2e10\\" - \\"-90E3\\" - \\"3e-2\\" - \\"-.3\\" - \\"40.5\\" - \\"+6.78E-9\\" Some invalid decimal numbers include: - \\"abc\\" - \\"1a\\" - \\"1e\\" - \\"e3\\" - \\"99e2.5\\" - \\"--6\\" - \\" -+3\\" - \\"95a54e53\\" Input: T is the number of test cases. For each test case input the string that needs to be validated. Output: A single integer or string per test case. - Print 1 if the string is a valid decimal number. - Print 0 if the string is not a valid decimal number. Constraints: 1 ≤ T ≤ 20 1 ≤ length of string ≤ 100 SAMPLE INPUT 6 0 0.1 abc 1 a 2e10 95a54e53 SAMPLE OUTPUT 1 1 0 0 1 0","solution":"import re def is_valid_decimal(s): Validate if the input string can be interpreted as a decimal number. s = s.strip() decimal_regex = re.compile(r ^ # beginning of string [+-]? # optional sign ( # start of main capturing group d+(.d*)? # whole numbers optionally followed by a decimal point and fraction | # or .d+ # decimal point followed by fraction ) # end of main capturing group ([eE][+-]?d+)? # optional exponent # end of string , re.VERBOSE) return 1 if decimal_regex.match(s) else 0 def validate_decimal_numbers(T, test_cases): results = [] for s in test_cases: results.append(is_valid_decimal(s)) return results"},{"question":"You are given a collection of books to be organized in a library. Each book is identified by a unique ISBN number which is a 10-digit number. The librarian decides to arrange the books on the shelves in ascending order of their ISBN numbers but only allows the insertion of one book at a time, at the correct position. Write a program that simulates the book insertion process and outputs the state of the bookshelf after each book is inserted. # Input Format - The input begins with an integer `n`, the number of books to be inserted (1 ≤ n ≤ 100). - The next line contains `n` integers, the ISBN numbers of the books to be inserted in the order they arrive at the library. # Output Format - Output the state of the bookshelf after each insertion. Each state is a list of ISBN numbers in ascending order separated by a space. # Example Sample Input ``` 5 9780465026562 9780131103627 9780201633610 9780441013593 9780672329166 ``` Sample Output ``` 9780465026562 9780131103627 9780465026562 9780131103627 9780201633610 9780465026562 9780131103627 9780201633610 9780441013593 9780465026562 9780131103627 9780201633610 9780441013593 9780465026562 9780672329166 ``` Note: - Each ISBN number is guaranteed to be unique in the input data. - The output should reflect the state of the bookshelf after each book is inserted into its correct position.","solution":"def insert_books(n, isbn_numbers): Inserts books into the bookshelf in ascending order and prints the state after each insertion. :param n: Number of books to be inserted. :param isbn_numbers: List of ISBN numbers of the books to be inserted. bookshelf = [] for isbn in isbn_numbers: inserted = False for i in range(len(bookshelf)): if isbn < bookshelf[i]: bookshelf.insert(i, isbn) inserted = True break if not inserted: bookshelf.append(isbn) print(\' \'.join(str(x) for x in bookshelf)) # Example usage n = 5 isbn_numbers = [9780465026562, 9780131103627, 9780201633610, 9780441013593, 9780672329166] insert_books(n, isbn_numbers)"},{"question":"There are n houses along a straight road, numbered from 1 to n. Each house has a certain number of candies. A thief plans to rob these houses but follows a rule: after robbing a house, he cannot rob the directly adjacent houses to avoid getting caught by the police. The thief can rob any subset of houses, as long as no two robbed houses are directly adjacent. Write a program to help the thief determine the maximum number of candies he can rob without alerting the police. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of houses. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), where ai denotes the number of candies in the ith house. Output Output a single integer, the maximum number of candies the thief can rob. Examples Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12 Input 6 10 1 1 10 1 10 Output 30 Note For the first example, the thief can rob the 1st and 3rd houses for a maximum of 1+3=4 candies. For the second example, the thief can rob the 2nd, and 4th, or the 1st, 3rd, and 5th houses for a maximum of 7+3=12 candies.","solution":"def max_candies(n, candies): if n == 0: return 0 if n == 1: return candies[0] dp = [0] * n dp[0] = candies[0] dp[1] = max(candies[0], candies[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + candies[i]) return dp[-1]"},{"question":"Juno is fascinated by how binary search trees (BSTs) work. He decides to write a program that determines the kth smallest element in a BST. However, he needs your help to get it right. Your task is to write a function that, given a binary search tree and an integer k, returns the kth smallest element in the tree. Recall that a binary search tree is a tree in which every node has at most two children, and for every node, all values in its left subtree are smaller than the node\'s value, and all values in its right subtree are larger. Input The input consists of the number of nodes N in the BST, followed by N lines each containing an integer representing the value of a node in the BST, followed by the integer k. > N k > node_value1 > ... > node_valueN Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ node_valuei ≤ 109 (all values are unique) * 1 ≤ k ≤ N Output Print the value of the kth smallest element in the BST. Examples Input ``` 7 3 5 3 8 1 4 7 10 ``` Output ``` 4 ``` Input ``` 3 1 2 1 3 ``` Output ``` 1 ``` Input ``` 5 5 15 10 20 5 12 ``` Output ``` 20 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_into_bst(root, val): if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def kth_smallest_element(root, k): def inorder_traversal(node): if node is None: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) elements = inorder_traversal(root) return elements[k-1] def find_kth_smallest(N, values, k): root = None for value in values: root = insert_into_bst(root, value) return kth_smallest_element(root, k) # Example Usage # N = 7 # values = [5, 3, 8, 1, 4, 7, 10] # k = 3 # print(find_kth_smallest(N, values, k)) # Output: 4"},{"question":"Aisha loves solving puzzles. Recently she found a puzzle consisting of a sequence of numbers and started to play with it. The puzzle involves finding the longest subsequence within a given sequence such that the difference between every two consecutive elements is the same. Aisha wants to write a program that can solve the puzzle for her. She needs your help to figure out the longest such subsequence within the given sequence. Constraints * 1 ≤ n ≤ 105 * -109 ≤ ai ≤ 109 (1 ≤ i ≤ n) Input * The first line contains an integer n, the number of elements in the sequence. * The second line contains n integers a1, a2, ..., an, representing the given sequence. Output * Print the length of the longest subsequence where the difference between every two consecutive elements is the same. Examples Input 6 1 3 5 7 9 11 Output 6 Input 7 -1 2 5 8 11 14 17 Output 7 Input 5 10 10 10 10 10 Output 5 Input 5 1 2 4 5 8 Output 2","solution":"def longest_subsequence_length(n, sequence): if n == 1: return 1 longest_length = 1 current_length = 1 current_diff = sequence[1] - sequence[0] for i in range(1, n): diff = sequence[i] - sequence[i - 1] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 2 # Reset length for a new subsequence, including elements i-1 and i if current_length > longest_length: longest_length = current_length return longest_length"},{"question":"In a small village, there is a system of one-way roads connecting several houses. Each house is labeled with a unique integer from 1 to n. A village elder wants to know if it\'s possible to travel from any house to any other house in the village using these roads. If it\'s possible, the village is called \\"strongly connected.\\" Your task is to write a program that determines if the village is strongly connected or not. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of houses and the number of one-way roads, respectively. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) meaning there is a one-way road from house u to house v. Output Output \\"YES\\" if it\'s possible to travel from any house to any other house. Otherwise, output \\"NO\\". Example Input 4 5 1 2 2 3 3 4 4 1 1 3 Output YES Input 4 3 1 2 2 3 3 4 Output NO","solution":"from collections import defaultdict, deque def is_strongly_connected(n, m, roads): def bfs(start_node, graph): visited = [False] * (n + 1) queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return all(visited[1:]) if n == 1: # A single house is trivially strongly connected return \\"YES\\" adj_list = defaultdict(list) rev_adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) rev_adj_list[v].append(u) if bfs(1, adj_list) and bfs(1, rev_adj_list): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of n x n cells, where each cell can either be empty or contain an obstacle. You need to find the maximum number of cells that are connected in a path, either horizontally or vertically. Two cells are considered connected if they are adjacent and both have the same value (either both empty or both containing an obstacle). Input The first line contains an integer n (1 ≤ n ≤ 1000). The next n lines contain n characters each. Each character is either \'.\' (denoting an empty cell) or \'X\' (denoting an obstacle). Output Print a single integer — the length of the longest connected path. Examples Input 4 .X.. .X.. ..X. .... Output 4 Input 5 X.... .XX.. ..X.. ....X XXXXX Output 5 Note In the first example, the maximum connected path consists of 4 \'X\' cells vertically aligned in the second column. In the second example, the maximum connected path of length 5 consists of the \'X\' cells in the last row.","solution":"def longest_connected_path(n, grid): Returns the length of the longest connected path of same values in the grid. def check_sequence(sequence): max_length = 0 current_length = 1 for i in range(1, len(sequence)): if sequence[i] == sequence[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length # Track the longest path found max_path_length = 0 # Check all rows for row in grid: max_path_length = max(max_path_length, check_sequence(row)) # Check all columns for col_idx in range(n): column = [grid[row_idx][col_idx] for row_idx in range(n)] max_path_length = max(max_path_length, check_sequence(column)) return max_path_length # Example usage: n = 4 grid = [ \'.X..\', \'.X..\', \'..X.\', \'....\' ] print(longest_connected_path(n, grid)) # Output: 4 n = 5 grid = [ \'X....\', \'.XX..\', \'..X..\', \'....X\', \'XXXXX\' ] print(longest_connected_path(n, grid)) # Output: 5"},{"question":"Stephanie is conducting an experiment on string similarity. She uses a transformation process where for any given string, she can insert any character at any position. Given two strings, she wants to determine the minimum number of insertions needed to transform one string into the other. Write a program to help Stephanie with her experiment. Input: - The first line contains an integer t, the number of test cases. - Each of the next t lines contains two space-separated strings, str1 and str2, representing the strings to be transformed. Output: - For each test case, print the minimum number of insertions required to transform str1 into str2. Constraints: 1 ≤ t ≤ 1000 1 ≤ length of str1, str2 ≤ 100 SAMPLE INPUT 3 abc aebdc abcd efgh a a SAMPLE OUTPUT 2 4 0 Explanation Consider the first test case. To transform \\"abc\\" into \\"aebdc\\", we can insert \\"e\\" after \\"a\\" and \\"d\\" after \\"b\\". So, the minimum number of insertions required is 2. For the second test case, transforming \\"abcd\\" into \\"efgh\\" requires 4 insertions since no characters are common. For the third test case, both strings are already the same, so no insertions are needed.","solution":"def min_insertions_to_transform(str1, str2): Returns the minimum number of insertions required to transform str1 into str2. m, n = len(str1), len(str2) # Create a DP array to store the length of longest common subsequence (LCS) dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Build the DP array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The minimum number of insertions needed is the length of str2 # minus the length of the LCS of str1 and str2 return n - dp[m][n] def min_insertions_for_test_cases(test_cases): results = [] for str1, str2 in test_cases: results.append(min_insertions_to_transform(str1, str2)) return results if __name__ == \'__main__\': t = int(input().strip()) test_cases = [] for _ in range(t): str1, str2 = input().strip().split() test_cases.append((str1, str2)) results = min_insertions_for_test_cases(test_cases) for result in results: print(result)"},{"question":"Bob likes to play board games. He has created a new game that involves arranging a specific type of dominoes on a rectangular grid. Each domino covers exactly two cells of the grid. The goal of the game is to completely cover the grid using these dominoes. Bob asks for your help to determine if it\'s possible to fill the entire grid with dominoes. Input The input consists of a single line containing two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the board. Output Print \\"yes\\" (without quotes) if it is possible to completely cover the grid with dominoes. Otherwise, print \\"no\\". Examples Input 2 4 Output yes Input 3 5 Output no Note In the first test case, the grid has 2 rows and 4 columns (a total of 8 cells). It is possible to cover all cells with 4 dominoes (each covering 2 cells). In the second test case, the grid has 3 rows and 5 columns (a total of 15 cells). Since the number of cells is odd, it is not possible to cover the entire grid with dominoes. A domino always covers exactly two cells, so the product of n and m must be even to cover the board completely with dominoes.","solution":"def can_cover_grid_with_dominoes(n, m): Determines if it\'s possible to cover an n x m grid using 1x2 dominoes entirely. Parameters: n (int): The number of rows of the grid. m (int): The number of columns of the grid. Returns: str: \\"yes\\" if the entire grid can be covered with dominoes, otherwise \\"no\\". if (n * m) % 2 == 0: return \\"yes\\" else: return \\"no\\""},{"question":"Masha has a list of tasks she needs to complete. Each task has a designated start time and end time, meaning she must start the task at or after the start time and finish it at or before the end time. Additionally, Masha can only work on one task at a time. You need to help Masha determine the maximum number of tasks she can complete if she schedules them optimally. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the number of tasks. Each of the next n lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 1000) — the start time and end time of the i-th task. Output For each test case, print a single line containing one integer, the maximum number of tasks Masha can complete. Example Input 3 3 1 3 2 5 4 6 3 3 5 5 7 7 9 4 1 2 2 4 4 6 6 8 Output 2 3 4 Note In the first test case, Masha can complete at most 2 tasks, for example, the tasks (1, 3) and (4, 6). In the second test case, Masha can complete all 3 tasks as they do not overlap. In the third test case, Masha can complete all 4 tasks as each task directly follows the previous one without any overlap.","solution":"def max_tasks(T, test_cases): results = [] for i in range(T): n, tasks = test_cases[i] # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) count = 0 current_end_time = 0 for start, end in tasks: if start >= current_end_time: count += 1 current_end_time = end results.append(count) return results"},{"question":"You are given a box with n balls numbered from 1 to n. Each ball is either red or blue. You want to select some balls from this box such that the number of red balls in the selection is equal to the number of blue balls in the selection. Output the maximum number of balls you can select from the box such that the number of red balls is equal to the number of blue balls. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of balls in the box. The second line contains a string s of length n consisting of the characters \'R\' and \'B\'. The i-th character represents the color of the i-th ball (\'R\' for red and \'B\' for blue). Output Print a single integer — the maximum number of balls you can select from the box. Examples Input 6 RBRBRR Output 4 Input 8 RRBBRBRR Output 6 Input 3 RRR Output 0 Note In the first example, you can select the balls at positions 1, 2, 3, and 4, which gives you 2 red balls and 2 blue balls. This is the maximum number of balls you can select. In the second example, you can select the balls at positions 3, 4, 5, 6, 7, and 8, which gives you 3 red balls and 3 blue balls. This is the maximum number of balls you can select. In the third example, it is impossible to select any balls such that there are equal numbers of red and blue ones. Hence the output is 0.","solution":"def max_balanced_balls(n, s): Returns the maximum number of balls that can be selected from the box such that the number of red balls is equal to the number of blue balls. red_count = s.count(\'R\') blue_count = s.count(\'B\') # The maximum number of balanced balls is twice the minimum count of \'R\' and \'B\' return 2 * min(red_count, blue_count)"},{"question":"Alyssa is working on a project where she needs to manage an inventory of items. Each item has a name and a numerical value associated with it. She wants to perform several operations on this inventory, such as adding new items, updating the value of existing items, and calculating the total value of all items in the inventory. You need to help Alyssa by writing a program that can handle these operations. The operations can be of the following three types: 1. **add name value** - Adds a new item with the specified name and value to the inventory. If an item with the same name already exists, its value should be updated to the new value. 2. **update name value** - Updates the value of the item with the specified name. 3. **total** - Calculates and prints the total value of all items in the inventory. Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of operations. - The next `n` lines each contain an operation of one of the three types mentioned above. - For add and update operations, `name` is a string of lowercase letters with length not exceeding 20, and `value` is an integer (0 ≤ value ≤ 10^9). Output - For each `total` operation, print the total value of all items in the inventory. Examples Input ``` 5 add apple 50 add banana 20 update banana 30 add orange 40 total ``` Output ``` 120 ``` Input ``` 6 add pencil 10 add eraser 5 total update pencil 15 total ``` Output ``` 15 20 ``` Solution To solve this problem, you need to maintain a dictionary to store item names and their corresponding values. For each operation, you need to handle the dictionary accordingly: adding or updating values, and calculating the total when required.","solution":"def manage_inventory(operations): inventory = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add\\": name, value = parts[1], int(parts[2]) inventory[name] = value elif command == \\"update\\": name, value = parts[1], int(parts[2]) if name in inventory: inventory[name] = value elif command == \\"total\\": total_value = sum(inventory.values()) results.append(total_value) return results"},{"question":"You are given a list of integers where each integer appears at least twice except for one integer that appears exactly once. Your task is to find the integer that appears exactly once using a constant amount of extra space. Function Signature: ```python def find_unique(nums: List[int]) -> int: # Your code here ``` # Input: - A single list `nums` containing integers, where the list has at least 3 elements and at most 10^5 elements. - Each integer in `nums` is between -10^6 and 10^6. # Output: - Return the integer that appears exactly once in the list. # Example: ```python Input: [4, 1, 2, 1, 2] Output: 4 Input: [2, 3, 2, 3, 4, 5, 4] Output: 5 ``` # Note: - You need to ensure that the solution has a linear runtime complexity, i.e., O(n). - You should not use more than O(1) extra space for your solution.","solution":"from typing import List def find_unique(nums: List[int]) -> int: Given a list of integers where each integer appears at least twice except for one integer that appears exactly once, find the integer that appears exactly once using constant space. Args: nums (List[int]): A list of integers with exactly one unique number. Returns: int: The integer that appears exactly once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"You are given a string s of length n consisting solely of lowercase English letters. You are allowed to perform at most one type of operation on the string: removing any one character from it. Your task is to find the length of the longest palindromic substring that can be obtained by performing at most one such operation, that is, either by removing no character or removing exactly one character. Input The first line of the input contains a single integer t - the number of test cases. The following t lines each describe a test case, starting with a single integer n denoting the length of the string s, followed by the string s. Output For each test case, print the length of the longest palindromic substring that can be achieved by performing at most one removal operation. Constraints 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 Example Input: 3 5 ababa 6 abccba 7 abcdefg Output: 5 6 1","solution":"def longest_palindromic_substring_with_removal(n, s): def is_palindrome(subs): return subs == subs[::-1] if is_palindrome(s): return n max_len = 0 for i in range(n): temp_s = s[:i] + s[i+1:] for j in range(len(temp_s)): for k in range(j, len(temp_s)): if is_palindrome(temp_s[j:k+1]): max_len = max(max_len, k - j + 1) return max_len def solve(t, cases): results = [] for n, s in cases: results.append(longest_palindromic_substring_with_removal(n, s)) return results"},{"question":"In a busy marketplace, vendors are selling their goods, and each vendor has a different price for each item. Customers want to buy items at the cheapest possible price. You are given a list of items for sale and their associated prices offered by different vendors. Your task is to determine the minimum amount of money required to buy one of each specified item. You are given: - `n`: the number of items. - `m`: the number of vendors. - `prices`: a 2D list where prices[i][j] represents the price of the i-th item from the j-th vendor. Constraints: - 1 ≤ n, m ≤ 1000 - 1 ≤ prices[i][j] ≤ 10^6 Input: - The first line contains two integers, `n` and `m`. - Each of the next `n` lines contains `m` integers, where the j-th integer in the i-th line represents the price of the i-th item from the j-th vendor. Output: - A single integer, the minimum amount of money required to buy one of each item. Example: Input: ``` 3 3 10 20 30 20 30 40 30 40 50 ``` Output: ``` 60 ``` Explanation: - For the first item, the cheapest price is 10. - For the second item, the cheapest price is 20. - For the third item, the cheapest price is 30. - Therefore, the minimum amount of money required is 10 + 20 + 30 = 60.","solution":"def min_cost_to_buy_items(n, m, prices): Returns the minimum amount of money required to buy one of each item. :param n: Number of items :param m: Number of vendors :param prices: 2D list of prices where prices[i][j] is the price of the i-th item from the j-th vendor :return: Minimum amount of money required to buy one of each item total_cost = 0 for i in range(n): total_cost += min(prices[i]) return total_cost"},{"question":"Sarah loves to play an online game where she must collect coins while navigating through a grid. The grid is of size n x m, where each cell contains a certain number of coins. Sarah can only move to the right or down from her current position. She starts at the top-left corner of the grid and aims to reach the bottom-right corner while collecting as many coins as possible. The number of coins in each cell is provided as input. Write an algorithm that will help Sarah maximize the number of coins she can collect by the time she reaches the bottom-right corner of the grid. Input - The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next n lines, each containing m integers, represent the grid. The j-th integer of the i-th line, g[i][j], shows the number of coins in the cell located at the i-th row and j-th column (0 ≤ g[i][j] ≤ 100). Output - Print a single integer, the maximum number of coins Sarah can collect. Example Input 3 4 0 3 1 2 2 1 0 1 1 2 3 0 Output 9 Note In the example, Sarah collects coins as follows: - From (0,0) to (0,1) collects 3 coins, - From (0,1) to (0,2) collects 1 coin (total 4 coins), - From (0,2) to (0,3) collects 2 coins (total 6 coins), - From (0,3) to (1,3) collects 1 coin (total 7 coins), - From (1,3) to (2,3) collects 0 coins (still 7 coins), - From (2,3) to (2,2) collects 3 coins (total 10 coins), - From (2,2) to (2,1) collects 2 coins (total 12 coins), - From (2,1) to (2,0) collects 1 coin (total 13 coins).","solution":"def max_coins_collected(n, m, grid): Returns the maximum number of coins Sarah can collect. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: 2D list representing the grid with the number of coins in each cell. :return: Maximum number of coins that can be collected. # Initialize a dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Fill the dp array by calculating the maximum coins collectable at each cell for i in range(n): for j in range(m): # Collect coins in the current cell dp[i][j] = grid[i][j] # Add the coins collectable from the top cell (if we moved from the top) if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) # Add the coins collectable from the left cell (if we moved from the left) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) # If we can move both from the top and left, take the maximum of both paths if i > 0 and j > 0: dp[i][j] = max(dp[i][j], max(dp[i-1][j], dp[i][j-1]) + grid[i][j]) # The bottom-right corner will contain the maximum number of coins collectable return dp[-1][-1]"},{"question":"A company provides a utility service where they need to send out notifications to users about their usage threshold. Each user has a predefined usage limit, and the company tracks daily usage for each user. If the daily usage exceeds the user\'s limit, a notification is triggered. You are tasked with implementing a function that processes the usage and determines if a notification should be sent for that user. Your task is to write a function that takes in a dictionary mapping usernames to their respective usage limits, and a dictionary mapping usernames to their daily usage. Your function should return a list of usernames who should be notified. Input: - A dictionary `usage_limits` where keys are usernames (strings) and values are their respective usage limits (integers). - A dictionary `daily_usage` where keys are usernames (strings) and values are their respective daily usage (integers). Output: - A list of usernames who have exceeded their usage limits. Examples Input ```python usage_limits = { \\"alice\\": 100, \\"bob\\": 150, \\"charlie\\": 120 } daily_usage = { \\"alice\\": 110, \\"bob\\": 130, \\"charlie\\": 130 } ``` Output ```python [\\"alice\\", \\"charlie\\"] ``` Explanation: - \\"alice\\" has a daily usage of 110 which exceeds her limit of 100. - \\"charlie\\" has a daily usage of 130 which exceeds his limit of 120. - \\"bob\\" does not exceed his limit of 150.","solution":"def notify_users(usage_limits, daily_usage): Determines which users have exceeded their daily usage limits and returns a list of those usernames. :param usage_limits: dict, mapping usernames to their respective usage limits. :param daily_usage: dict, mapping usernames to their respective daily usage. :return: list, usernames who have exceeded their usage limits. notifications = [] for user, limit in usage_limits.items(): if user in daily_usage and daily_usage[user] > limit: notifications.append(user) return notifications"},{"question":"A kingdom is organizing a grand festival and constructing a series of magical bridges to connect several islands. Each island is represented by a node and each bridge by an edge. The islands are connected in such a way that there is exactly one path between any two islands, hence forming a tree structure. Each bridge has a certain magical power associated with it, represented by an integer weight. As the festival day approaches, the kingdom\'s mage wants to determine the most powerful route between the two most distant islands in terms of magical power. The most powerful route between two islands is the path that has the maximum sum of the magical powers of the bridges included in the path. Write a program to calculate the most powerful route in the tree. This route is the path between the two most distant islands (in terms of the sum of weights of the borders included). Input The input consists of several test cases. Each test case is formatted as follows: N u_1 v_1 w_1 vdots u_{N-1} v_{N-1} w_{N-1} The first line consists of an integer N (2 leq N leq 10^4), the number of islands. Each of the following N-1 lines consists of three integers, u_i, v_i, and w_i (1 leq u_i, v_i leq N, 1 leq w_i leq 10^9), describing a bridge that connects islands u_i and v_i with a magical power of w_i. The end of the input is indicated by a line with a single integer 0. Output For each test case, print the maximum magical power of the route between the two most distant islands. Examples Input 4 1 2 10 2 3 4 3 4 7 3 1 2 5 2 3 6 0 Output 21 11","solution":"from collections import defaultdict, deque def bfs(start_node, graph, num_nodes): queue = deque([(start_node, 0)]) visited = [False] * (num_nodes + 1) visited[start_node] = True farthest_node = start_node max_distance = 0 while queue: current_node, current_distance = queue.popleft() for neighbor, weight in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True distance = current_distance + weight queue.append((neighbor, distance)) if distance > max_distance: max_distance = distance farthest_node = neighbor return farthest_node, max_distance def find_most_powerful_route(island_list): results = [] for islands in island_list: if not islands: continue num_nodes = islands[0] edges = islands[1:] graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # First BFS to find an endpoint of the longest path first_farthest_node, _ = bfs(1, graph, num_nodes) # Second BFS from the endpoint found to find the diameter second_farthest_node, max_distance = bfs(first_farthest_node, graph, num_nodes) results.append(max_distance) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') island_list = [] current_islands = [] for line in lines: if line == \'0\': break numbers = list(map(int, line.split())) if len(numbers) == 1: if current_islands: island_list.append(current_islands) current_islands = [numbers[0]] else: current_islands.append(tuple(numbers)) if current_islands: island_list.append(current_islands) return island_list"},{"question":"You are given an array of integers representing heights of n persons standing together in a line. The task is to divide this line into the minimum number of continuous subarrays (each subarray should consist of at least one person) such that in every subarray the heights of persons form a non-decreasing sequence. Consider the heights array of length 5: [5, 3, 4, 8, 6]. You should divide it as follows: 1. The first subarray is [5, 3] 2. The second subarray is [3, 4, 8] 3. The third subarray is [8, 6] So, the result would be 3 subarrays. Your task is to find the minimum number of such subarrays for each test case. Input The first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of persons. The second line of each test case contains n integers representing the heights of the persons (1 ≤ height ≤ 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5). Output For each test case, print the minimum number of subarrays for the heights in non-decreasing order. Example Input 4 5 5 3 4 8 6 4 1 2 3 4 6 9 8 7 6 5 4 3 2 2 2 Output 3 1 6 1","solution":"def min_subarrays(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] count = 1 for j in range(1, n): if heights[j] < heights[j-1]: count += 1 results.append(count) return results # Example usage t = 4 test_cases = [ (5, [5, 3, 4, 8, 6]), (4, [1, 2, 3, 4]), (6, [9, 8, 7, 6, 5, 4]), (3, [2, 2, 2]) ] print(min_subarrays(t, test_cases)) # Should output [3, 1, 6, 1]"},{"question":"In a certain kingdom, there are n cities connected by m bidirectional roads. Each road connects two different cities and has a specific width assigned. The width of a path between two cities is defined as the minimum width of any road in the path. The king wants you to find the maximum width of any path between two given cities, for which no intermediary cities are allowed. Your task is to find the maximum width between the two cities for several queries. You need to be efficient in handling up to 5·10^5 queries. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 2·10^5) — the number of cities and roads, respectively. Each of the next m lines contains three integers u, v (1 ≤ u, v ≤ n, u ≠ v) and w (1 ≤ w ≤ 10^6) — which means there is a road of width w connecting cities u and v. The next line contains an integer q (1 ≤ q ≤ 5·10^5) — the number of queries. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n) — the query to find the maximum width of the path directly connecting city a to city b. Output For each query, output a single integer — the maximum width of any direct path between the two cities. Examples Input 5 6 1 2 4 2 3 5 2 4 3 3 4 6 4 5 2 1 5 1 3 1 5 2 4 4 5 Output 1 3 2","solution":"def max_width_path(n, m, roads, queries): Function to find the maximum width of any direct path between two given cities. Parameters: n (int): Number of cities. m (int): Number of roads. roads (list): List of tuples containing (u, v, w) representing roads between cities u and v with width w. queries (list): List of tuples containing (a, b) representing queries to find maximum width between city a and city b. Returns: List: List of integers representing results of each query. from collections import defaultdict # Create a dictionary to store the maximum width for direct paths direct_path_widths = defaultdict(lambda: -1) # Populate the dictionary with direct paths and their widths for u, v, w in roads: if direct_path_widths[(u, v)] == -1: direct_path_widths[(u, v)] = w direct_path_widths[(v, u)] = w else: direct_path_widths[(u, v)] = max(direct_path_widths[(u, v)], w) direct_path_widths[(v, u)] = max(direct_path_widths[(v, u)], w) results = [] for a, b in queries: results.append(direct_path_widths[(a, b)]) return results"},{"question":"You have a string S consisting of lowercase English letters. You need to find the smallest substring of S that contains all the distinct characters of the string S at least once. Input: The first line of input contains a single integer T, the number of test cases. For each test case: - The first line contains the string S. Output: For each test case, print the smallest substring of S that contains all the distinct characters of S at least once. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of S ≤ 10^5 SAMPLE INPUT 2 abca aabcbcdbca SAMPLE OUTPUT abc dbca","solution":"def smallest_substring_with_all_distinct_characters(s): from collections import Counter # Find all distinct characters in the input string distinct_chars = set(s) num_distinct = len(distinct_chars) # Sliding window technique to find the smallest substring min_length = len(s) + 1 start = 0 left = 0 char_count = Counter() distinct_count = 0 for right in range(len(s)): char_count[s[right]] += 1 if char_count[s[right]] == 1: # first occurrence of the character in the window distinct_count += 1 # Try to shrink the window from the left if all distinct characters are included while distinct_count == num_distinct: if right - left + 1 < min_length: min_length = right - left + 1 start = left char_count[s[left]] -= 1 if char_count[s[left]] == 0: # character is completely out of the window distinct_count -= 1 left += 1 return s[start:start + min_length] def main(): # Read number of test cases T = int(input().strip()) results = [] for _ in range(T): S = input().strip() result = smallest_substring_with_all_distinct_characters(S) results.append(result) for result in results: print(result)"},{"question":"A company holds an annual coding competition where participants solve various problems to win prizes. This year, one of the problems involves constructing a palindromic string using a given set of characters. A palindromic string is a string that reads the same backward as forward (e.g., \\"racecar\\"). Given a set of characters, participants need to determine the longest possible palindromic string that can be constructed using those characters. Input The input consists of a single line, which contains a string `s` (1 ≤ |s| ≤ 1000). The string `s` consists only of lowercase English letters. Output Output a single integer, the length of the longest palindromic string that can be constructed using the characters of the given string. Examples Input abccccdd Output 7 Input aabb Output 4 Note In the first test case, one of the possible longest palindromic strings that can be constructed is \\"dccaccd\\" or \\"dccbccd\\". In the second test case, characters can be rearranged to form \\"abba\\" or \\"baab\\", both of which are palindromic strings of length 4.","solution":"from collections import Counter def longest_palindromic_length(s): Calculate the length of the longest palindromic string that can be constructed using characters from the input string `s`. char_counts = Counter(s) length = 0 odd_found = False for count in char_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Given a directed acyclic graph (DAG) with N nodes numbered 1 to N and M edges, where the i-th edge is directed from node u_i to node v_i, solve the following problem: * Find the number of different paths from the node numbered 1 to the node numbered N in the graph. Given that the number of paths might be very large, return the result modulo 10^9+7. Constraints * 2 leq N leq 1000 * 1 leq M leq 5000 * 1 leq u_i, v_i leq N * The given graph is a DAG. Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Output Print the number of different paths from node 1 to node N, modulo 10^9+7. Examples Input 4 4 1 2 2 3 3 4 1 3 Output 2 Input 5 6 1 2 1 3 2 4 3 4 4 5 2 5 Output 3","solution":"from collections import defaultdict, deque MOD = 10**9 + 7 def count_paths_in_dag(N, M, edges): adj_list = defaultdict(list) in_degree = [0] * (N + 1) for u, v in edges: adj_list[u].append(v) in_degree[v] += 1 # Topological sort (Kahn\'s algorithm) topological_order = [] zero_in_degree = deque([node for node in range(1, N+1) if in_degree[node] == 0]) while zero_in_degree: node = zero_in_degree.popleft() topological_order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # DP to count paths count_paths = [0] * (N + 1) count_paths[1] = 1 # Start from node 1 for node in topological_order: for neighbor in adj_list[node]: count_paths[neighbor] = (count_paths[neighbor] + count_paths[node]) % MOD return count_paths[N] # Function to parse input def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [(int(data[2*i + 2]), int(data[2*i + 3])) for i in range(M)] print(count_paths_in_dag(N, M, edges))"},{"question":"Problem You have been given a rectangular grid of cells with some cells containing trees, some containing rocks, and some empty cells. Your objective is to create a fire spread simulation where a fire starts from one specific cell and spreads to adjacent cells. The fire can move to the left, right, up, or down but cannot pass through rocks or spread into cells with trees, stopping immediately when it encounters one. The fire starts from a given starting position, and your task is to determine whether the fire can reach a specific target cell without exceeding the grid boundaries or being blocked by rocks or trees. Output \\"yes\\" if the fire can reach the target cell, otherwise output \\"no\\". Constraints * 1 ≤ H ≤ 16 * 1 ≤ W ≤ 16 * 2 ≤ H x W ≤ 256 * Guaranteed that the starting and target cells are distinct and both are empty cells * There may be trees or rocks on the grid but neither on the starting nor target cell Input The input is given in the following format: H W F11 F12 ... F1W F21 F22 ... F2W ... FH1 FH2 ... FHW Sy Sx Ty Tx * H and W are the height and width of the grid respectively * Fij is either \'.\', \'R\', or \'T\', with the following meanings: * \'.\': Empty cell * \'R\': Rock cell * \'T\': Tree cell * Sy Sx are the starting cell coordinates (1-based index) * Ty Tx are the target cell coordinates (1-based index) Output Print \\"yes\\" or \\"no\\" on one line depending on whether the fire can reach the target cell. Examples Input 4 5 ..... .T... .R... ....T 1 1 4 4 Output yes Input 4 5 ..... .T... .T... ....T 1 1 4 5 Output no Input 3 3 .R. .R. .R. 1 1 3 3 Output no","solution":"def can_fire_reach_target(grid, start, target): H, W = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right def is_valid(r, c): return 0 <= r < H and 0 <= c < W and grid[r][c] == \'.\' from collections import deque queue = deque([start]) visited = set() visited.add(start) while queue: r, c = queue.popleft() if (r, c) == target: return \\"yes\\" for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc)) return \\"no\\" def fire_simulation(H, W, grid, Sy, Sx, Ty, Tx): # Convert 1-based index to 0-based index start = (Sy - 1, Sx - 1) target = (Ty - 1, Tx - 1) return can_fire_reach_target(grid, start, target)"},{"question":"You are given a city represented as a matrix with n rows and n columns. Each cell (i, j) contains a non-negative integer representing the cost to move through that cell. You need to determine the minimum cost required to travel from the top-left corner (1, 1) to the bottom-right corner (n, n). You can only move to the right or downward at any point in time. Write a program that finds this minimum cost path. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of rows and columns in the matrix. Each of the next n lines contains n integers. The j-th integer in the i-th line is the cost c[i][j] (0 ≤ c[i][j] ≤ 1000) of the cell (i, j). Output Print a single integer representing the minimum cost to travel from the top-left corner to the bottom-right corner of the matrix. Example Input 3 1 3 1 1 5 1 4 2 1 Output 7 Explanation: One of the possible minimum cost paths is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) with a cost of 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_path_cost(matrix): n = len(matrix) dp = [[0] * n for _ in range(n)] dp[0][0] = matrix[0][0] # Initialize the first row and the first column for i in range(1, n): dp[0][i] = dp[0][i - 1] + matrix[0][i] dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = matrix[i][j] + min(dp[i - 1][j], dp[i][j - 1]) return dp[n - 1][n - 1]"},{"question":"Create a function that takes a list of integers and determines if it is possible to make the list non-decreasing by modifying at most one element. A list is non-decreasing if each element is at least as large as the previous one. Input A single line containing a space-separated list of integers. Output Output \\"YES\\" if it is possible to make the list non-decreasing by modifying at most one element, and \\"NO\\" otherwise. Examples Input 4 2 3 4 Output YES Input 3 4 2 3 Output NO Note In the first example, modifying the first element from 4 to 1 makes the list [1, 2, 3, 4], which is non-decreasing. In the second example, it is not possible to modify only one element to achieve a non-decreasing list. If you change the 4, the 2 will still be a problem, and vice versa.","solution":"def can_be_non_decreasing(lst): Determines if the input list can be made non-decreasing by modifying at most one element. count = 0 for i in range(1, len(lst)): if lst[i] < lst[i - 1]: count += 1 if count > 1: return \\"NO\\" # Check if we can fix the issue by modifying lst[i-1] or lst[i] if i - 2 >= 0 and lst[i] < lst[i - 2]: if i + 1 < len(lst) and lst[i + 1] < lst[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"WRITE A FUNCTION THAT TAKES IN A STRING AND RETURNS TRUE IF IT IS A PALINDROME, FALSE OTHERWISE. THERE IS NO LIMIT TO THE LENGTH OF THE STRING. IGNORE WHITE SPACES AND CASE SENSITIVITY IN YOUR CHECKS. YOU CAN ONLY DISTORT THE LARGEST OF MATHEMATICS SO FAR SAYING \\"ABRACADABRA\\" WITHOUT MAGIC WON\'T DO YOU ANY GOOD THE LAST STACK RUPTURES. ALL DIE. OH, THE EMBARRASSMENT! Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000). Output Output a single boolean value. Example Input A man a plan a canal Panama Output True","solution":"def is_palindrome(s): Check if the given string s is a palindrome. Ignores white spaces and case sensitivity. :param s: Input string :return: True if s is a palindrome, False otherwise # Normalize the string by removing spaces and converting to lower case normalized_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is same as its reverse return normalized_s == normalized_s[::-1]"},{"question":"Peter loves managing arrays. Today, he is given an array containing `n` integers. He can perform the following operation any number of times: 1. Choose an element from the array and delete it. However, there is a condition: among the remaining elements in the array after each operation, there must be no two elements with the same value. Peter wants you to help him determine the minimum number of deletions required to make the array have only unique elements. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains `n` integers `a_i` (1 ≤ a_i ≤ 1000) — the elements of the array. Output Print the minimum number of deletions required to make all the elements in the array unique. Examples Input 5 1 2 3 3 4 Output 1 Input 6 1 1 1 2 2 2 Output 4 Input 4 4 4 4 4 Output 3 Note In the first example, the original array has duplicate value 3. By deleting one occurrence of 3, we can make the array have unique elements [1, 2, 3, 4]. Hence, the output is 1. In the second example, the array has multiple duplicates. By deleting two occurrences of 1 and two occurrences of 2, we can achieve the result. Hence, the output is 4. In the third example, all the array elements are the same. To achieve all unique elements, we need to delete three of them. Hence, the output is 3.","solution":"def min_deletions_to_unique(arr): from collections import Counter count = Counter(arr) deletions = 0 # Iterate through the counts for value, freq in count.items(): if freq > 1: deletions += freq - 1 return deletions"},{"question":"In a distant future world, Kickball has become an immensely popular sport. The sport is played on a rectangular field with dimensions of n x m, consisting of grids. Each cell in the grid is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). A player standing on the field can kick the ball to an adjacent cell that does not contain an obstacle. The ball can be kicked up, down, left, or right but not diagonally. You want to determine the minimum number of kicks needed to get the ball from the starting position to the goal position. If it\'s impossible to reach the goal, return -1. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the following n lines contains m characters each representing the kickball field grid. The starting position is marked by \'S\' and the goal position is marked by \'G\'. There will be exactly one \'S\' and exactly one \'G\' in the grid. Output Print a single integer representing the minimum number of kicks needed to move the ball from the starting position to the goal position. If it\'s impossible to reach the goal position, print -1. Examples Input 4 4 S..# .#.. ..#. ...G Output 6 Input 3 3 S#G .#. ..# Output -1 Note In the first example, one of the shortest paths from \'S\' to \'G\' takes 6 kicks and can be visualized as follows: 1. Kick right from (0, 0) to (0, 1). 2. Kick right from (0, 1) to (0, 2). 3. Kick down from (0, 2) to (1, 2). 4. Kick down from (1, 2) to (2, 2). 5. Kick left from (2, 2) to (2, 1). 6. Kick down from (2, 1) to (3, 1). 7. Kick right from (3, 1) to (3, 3). In the second example, it\'s impossible to reach \'G\' from \'S\', so the output is -1.","solution":"from collections import deque def min_kicks_to_goal(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' def bfs(start_x, start_y, goal_x, goal_y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) # (current_x, current_y, kicks) visited = set((start_x, start_y)) while queue: x, y, kicks = queue.popleft() if (x, y) == (goal_x, goal_y): return kicks for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, kicks + 1)) return -1 start_x = start_y = goal_x = goal_y = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start_x, start_y = i, j elif grid[i][j] == \'G\': goal_x, goal_y = i, j return bfs(start_x, start_y, goal_x, goal_y)"},{"question":"A vending machine in a company supplies tea and coffee. The vending machine can serve exactly n cups at a time. Each cup can be filled with either tea or coffee. The employees have lined up to get their drinks, and each employee wants either tea or coffee. The vending machine operator wants to ensure that the vending machine serves the drinks in the desired order. You are given n as the number of cups the vending machine can serve at once and an array of size n where each element represents the drink preference of the employees in the order they lined up. The elements in the array are either \'T\' for tea or \'C\' for coffee. After serving the drinks to n employees, the vending machine can be refilled and the process repeats. Determine the minimum number of batches required to serve all employees such that each batch exactly follows the order ‘T’ and ‘C’ preferences. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the number of cups the vending machine can serve at once. The second line contains a string s of length m (1 ≤ m ≤ 109) consisting of characters \'T\' and \'C\', representing the drink preferences of the employees in the order they lined up. Output Output the minimum number of batches required to serve all employees. Examples Input 3 TTCTTC Output 2 Input 2 TCTC Output 2 Input 1 TCTCTC Output 6 Note In the first example, the vending machine can serve 3 cups at once. It takes 2 batches to serve all 6 employees: - In the first batch, the machine serves \'TTC\'. - In the second batch, the machine serves \'TTC\' again. In the second example, the machine can serve 2 cups at once. It takes 2 batches to serve all 4 employees: - In the first batch, the machine serves \'TC\'. - In the second batch, the machine serves \'TC\' again.","solution":"def minimum_batches(n, s): This function calculates the minimum number of batches required to serve all employees given the vending machine can serve exactly n cups at a time and an array s where each element represents the drink preference of the employees. Args: n (int): the number of cups the vending machine can serve at once. s (string): list of drink preferences of employees. Returns: int: minimum number of batches needed. # Total number of employees m = len(s) # Minimum number of batches required min_batches = (m + n - 1) // n # This is equivalent to math.ceil(m / n) return min_batches"},{"question":"You are given a list of n integers. Your task is to find the smallest subarray with a sum greater than or equal to a given value x. If such a subarray does not exist, return 0. Input The first line of the input contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9). The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10^9). Output Print the length of the smallest subarray with a sum greater than or equal to x. If no such subarray exists, print 0. Examples Input 5 11 1 2 3 4 5 Output 3 Input 6 15 5 1 3 5 10 7 Output 2 Input 4 20 1 2 16 4 Output 1 Input 5 100 1 2 3 4 5 Output 0 Note In the first sample, the smallest subarray with a sum greater than or equal to 11 is [3, 4, 5], which has length 3. In the second sample, the smallest subarray with a sum greater than or equal to 15 is [10, 7], which has length 2.","solution":"def smallest_subarray_with_sum_greater_or_equal(arr, x): Returns the length of the smallest subarray with a sum greater than or equal to x. If no such subarray exists, returns 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum >= x: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell of the grid contains either a `0` or a `1`. Your task is to determine the size of the largest rectangle (not necessarily square) that contains only `1`s in the grid. Write a function `largestRectangle` that takes an `n x m` grid as input and returns the area of the largest rectangle containing only `1`s. # Input - The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 200), the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers (each either `0` or `1`), representing the grid. # Output - Output a single integer, which is the area of the largest rectangle containing only `1`s. # Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 6 ``` Explanation: In the given example, the largest rectangle has an area of 6 and is formed by the submatrix from (3, 1) to (4, 3). Input ``` 3 3 0 0 0 0 0 0 0 0 0 ``` Output ``` 0 ``` Explanation: In this case, there are no `1`s in the grid, so the area of the largest rectangle is `0`. # Constraints - 1 ≤ n, m ≤ 200 - Grid values are either `0` or `1` Note: The function should be efficient enough to handle grids up to size 200x200.","solution":"def largestRectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) heights = [0] * m max_area = 0 def calculate_max_area_in_histogram(heights): stack = [] max_area = 0 heights.append(0) # Append a zero height to flush the stack at the end for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the appended zero height return max_area for i in range(n): for j in range(m): if matrix[i][j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, calculate_max_area_in_histogram(heights)) return max_area # Parsing the input might be done separately in another function if needed. def parse_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix"},{"question":"A company uses a system of unique identification numbers for its employees. Each ID number is a string that contains exactly 6 digits. The company considers an ID to be \\"secure\\" if every pair of adjacent digits differs by at least 2. Write a Python function `is_secure_id(id_number: str) -> bool` that takes a string `id_number` representing the employee\'s ID and returns `True` if the ID number is secure and `False` otherwise. Constraints - The input string `id_number` will always contain exactly 6 digits. - Each character of the string will be a digit from \'0\' to \'9\'. Input A single string `id_number`. Output Output `True` if the given ID is secure, otherwise output `False`. Examples Input \\"135792\\" Output True Input \\"122345\\" Output False","solution":"def is_secure_id(id_number: str) -> bool: Check if the ID number is secure. An ID is secure if every pair of adjacent digits differs by at least 2. Parameters: id_number (str): The employee\'s ID number, which is a string of exactly 6 digits. Returns: bool: True if the ID number is secure, False otherwise. for i in range(len(id_number) - 1): if abs(int(id_number[i]) - int(id_number[i+1])) < 2: return False return True"},{"question":"You are given a grid containing the characters \'0\' and \'1\'. A path in this grid is started from the top-left corner (0, 0) and ends at the bottom-right corner (n-1, m-1). You can only move down or right at any point in time. You need to find if there exists a path from the top-left corner to the bottom-right corner such that all cells in this path are \'1\'. Input: The first line contains two integers n and m, representing the number of rows and columns in the grid respectively. The next n lines contain m characters each, either \'0\' or \'1\', representing the grid. Output: Print \\"Yes\\" if there exists such a path, otherwise print \\"No\\". Constraints: 1 ≤ n, m ≤ 1000 SAMPLE INPUT 4 4 1110 1101 1011 1111 SAMPLE OUTPUT Yes Explanation There is a path from (0, 0) to (3, 3) such as (0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (3, 3) where all the cells are \'1\'. SAMPLE INPUT 2 4 4 1010 0101 1011 1111 SAMPLE OUTPUT 2 No Explanation There is no possible path from (0, 0) to (3, 3) where all the cells are \'1\'.","solution":"def is_path_exists(grid): Determines if there\'s a path in grid from top-left corner to bottom-right corner consisting of only \'1\'s. Parameters: grid (list of list of str): The grid defined by \'0\' and \'1\' characters. Returns: str: \\"Yes\\" if such a path exists, otherwise \\"No\\". n = len(grid) m = len(grid[0]) # Check if starting and ending points are \'1\' if grid[0][0] == \'0\' or grid[n-1][m-1] == \'0\': return \\"No\\" # Using BFS to explore paths from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) directions = [(1, 0), (0, 1)] while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'1\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\""},{"question":"You are given a long thin rectangular grid with n rows and 1 column. Each cell in the grid is either empty, contains a coin worth 1 unit, or contains an obstacle. You need to collect the maximum amount of coins while starting from any empty cell and moving either up or down but not passing through any obstacles. Write a function that takes the grid as input and returns the maximum number of coins that can be collected. Input - The first line contains an integer n (1 ≤ n ≤ 10000), the number of rows in the grid. - The following n lines each contain a single character: - \'.\' represents an empty cell. - \'*\' represents a cell containing a coin worth 1 unit. - \'#\' represents a cell containing an obstacle. Output - Output a single integer, the maximum number of coins that can be collected. Example Input 5 . * * # * Output 2 Input 3 . * # Output 1 Notes In the first example, start at cell 0 (.) and move down to collect a coin from cell 1 (*) and then from cell 2 (*), avoiding the obstacle at cell 3 (#).","solution":"def max_coins(grid): Function to calculate the maximum number of coins that can be collected in the grid. Input: - grid: list of characters representing the grid (n rows). Output: - Maximum number of coins that can be collected without crossing any obstacles. n = len(grid) # Initialize variables to track the current maximum coins count and a temporary count max_coins = 0 # Initialize temporary coin counter temp_coins = 0 # Traverse the grid for cell in grid: if cell == \'#\': # If cell is an obstacle, reset the temporary counter temp_coins = 0 elif cell == \'*\': # If cell contains a coin, increase the temporary counter temp_coins += 1 # Update max_coins if the current count is greater max_coins = max(max_coins, temp_coins) elif cell == \'.\': # If cell is empty, just continue without resetting anything temp_coins = 0 return max_coins # Example usage: grid1 = [\'.\', \'*\', \'*\', \'#\', \'*\'] grid2 = [\'.\', \'*\', \'#\'] print(max_coins(grid1)) # Output: 2 print(max_coins(grid2)) # Output: 1"},{"question":"A city is organizing a marathon, and you have been asked to develop part of the tracking system. You will be given a list of checkpoints along the marathon route, each identified by a unique number. Each runner can only visit each checkpoint once. The system will receive multiple queries, each asking if a particular runner has visited a sequence of checkpoints in the given order. You need to answer these queries based on the data provided for each runner. The objective is to determine if the sequence of checkpoints in the query can be found as a subsequence in the list of checkpoints visited by the runner. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of multiple lines. The first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the number of checkpoints the runner has visited. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9) — the checkpoints in the order they were visited by the runner. The following line contains one integer q (1 ≤ q ≤ 100) — the number of queries. The next q lines each contain one integer k (1 ≤ k ≤ 10^4) followed by k integers d_1, d_2, ..., d_k (1 ≤ d_i ≤ 10^9) — representing the sequence of checkpoints to check as a subsequence. Output For each query, print \\"YES\\" if the sequence of checkpoints can be found as a subsequence of the checkpoints visited by the runner, otherwise print \\"NO\\". Example Input 2 7 1 2 3 4 5 6 7 3 3 1 3 5 2 1 4 4 1 2 6 7 5 5 1 2 4 3 6 2 2 1 3 3 2 6 5 Output YES YES YES YES NO","solution":"def is_subsequence(a, b): Check if list b is a subsequence of list a. it = iter(a) return all(item in it for item in b) def runner_track_system(test_cases): results = [] for test in test_cases: n, checkpoints, queries = test[\'n\'], test[\'checkpoints\'], test[\'queries\'] for query in queries: k, sequence = query[\'k\'], query[\'sequence\'] if is_subsequence(checkpoints, sequence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sarah has a rectangular plot of land with dimensions `m` meters (length) and `n` meters (width). Her friend, John, has a smaller rectangular plot of land with dimensions `p` meters (length) and `q` meters (width) where `p ≤ m` and `q ≤ n`. Sarah plans to completely cover her plot of land with multiple copies of John\'s smaller plot, without rotating the smaller plots. Sarah wants to know if she can exactly cover her entire plot with multiple copies of John\'s plot, without leaving any leftover space or needing to cut any of John\'s plot. Write a function `can_cover(m, n, p, q)` that returns `True` if Sarah can completely cover her plot with John\'s smaller plots, otherwise returns `False`. # Input Format - The function `can_cover(m, n, p, q)` takes four integers: - `m` (1 ≤ m ≤ 10^5) - the length of Sarah\'s plot - `n` (1 ≤ n ≤ 10^5) - the width of Sarah\'s plot - `p` (1 ≤ p ≤ m) - the length of John\'s plot - `q` (1 ≤ q ≤ n) - the width of John\'s plot # Output Format - Return `True` if Sarah can exactly cover her plot with multiple copies of John\'s plot. - Return `False` if she cannot. # Examples ```python can_cover(6, 9, 2, 3) ``` Output: ``` True ``` ```python can_cover(7, 10, 3, 4) ``` Output: ``` False ``` # Explanation In the first example, Sarah\'s plot has dimensions 6m x 9m, and John\'s plot has dimensions 2m x 3m. She can cover her plot by placing 9 (3 rows and 3 columns) of John\'s plots. In the second example, the dimensions of Sarah\'s plot are 7m x 10m, and John\'s plot is 3m x 4m. There is no way to cover Sarah\'s plot completely with John\'s plots without leaving any leftover space.","solution":"def can_cover(m, n, p, q): Determines if Sarah\'s plot can be exactly covered with John\'s smaller plots. Parameters: m (int): Length of Sarah\'s plot. n (int): Width of Sarah\'s plot. p (int): Length of John\'s plot. q (int): Width of John\'s plot. Returns: bool: True if Sarah\'s plot can be exactly covered, False otherwise. # Check if the whole plot can be covered by p x q plots. if m % p == 0 and n % q == 0: return True # Alternatively, check if the whole plot can be covered by q x p plots. if m % q == 0 and n % p == 0: return True # If neither arrangements work, return False. return False"},{"question":"In a certain kingdom, the roads can be represented as an undirected, connected graph with `n` towns and `m` bidirectional roads between them. Each road has a certain positive length associated with it. The towns are numbered from 1 to n. The townspeople have recently decided to conduct a marathon, the route of which will start and end at town 1 and visit every other town exactly once before returning to town 1. This type of route is also known as the Hamiltonian cycle. Unfortunately, calculating the shortest Hamiltonian cycle is known to be computationally intensive (NP-hard problem). As a simplified version of their problem, they just want to know the length of the minimum spanning tree (MST) of their road network, which will give them an approximate understanding of the connectivity and the total distance of the crucial roads. Your task is to compute the length of the minimum spanning tree of the graph. Input: The first line of the input contains two integers, `n` and `m` (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2*10^5) indicating the number of towns and roads respectively. The next `m` lines each contain three integers `u`, `v`, `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) representing a road between towns `u` and `v` with length `w`. Output: Output a single integer, the total length of the minimum spanning tree. Example: Input: ``` 4 5 1 2 3 1 3 1 4 2 2 3 2 4 4 3 5 ``` Output: ``` 7 ``` Explanation: The minimum spanning tree of this graph includes the roads with lengths 1 (1-3), 2 (4-2), and 3 (1-2), so the total length is 1 + 2 + 3 = 6.","solution":"import heapq def find(parent, u): if parent[u] == u: return u parent[u] = find(parent, parent[u]) return parent[u] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def minimum_spanning_tree(n, edges): parent = [i for i in range(n)] rank = [0] * n # Sort edges by weight edges.sort(key=lambda x: x[2]) mst_length = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_length += w return mst_length"},{"question":"You are given a string consisting of uppercase and lowercase letters. You are to find a permutation of the string such that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, print \\"NO\\". Otherwise, print the rearranged string. Input The first line contains a string s (1 ≤ |s| ≤ 100), consisting of \'a\'-\'z\' and \'A\'-\'Z\' characters. Output If it is possible to rearrange the string so that no two adjacent characters are the same, print the rearranged string. If it is not possible, print \\"NO\\". If multiple solutions exist, any valid rearrangement will be accepted. Examples Input aab Output aba Input aabb Output abab Input aa Output NO","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string so that no two adjacent characters are the same. If it is not possible, returns \\"NO\\". # Count frequency of each character char_count = Counter(s) # Create a max heap based on frequency max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) # Initialize previous character and count prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) # Add the character to result result.append(char) # If previous character is still left, push it back to heap if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_char = char prev_count = count + 1 # If the result length does not match the input string length, it was not possible if len(result) != len(s): return \\"NO\\" return \'\'.join(result)"},{"question":"Farmer John has a rectangular field of size n × m. He wants to plant his crops in this field, but he also wants to set up irrigation systems. To make sure every plant gets enough water, he needs to place irrigation devices in such a way that each device covers a certain rectangular area. The field is represented as an n x m grid and Farmer John has d different types of irrigation devices. Each device type covers a rectangular area of specific dimensions (width w and height h) when placed on the field. Farmer John can place as many devices of the same type as needed and devices can overlap. However, any given cell on the field can only be covered by one device. Farmer John needs to determine the minimum number of irrigation devices required to cover the entire field satisfying the above condition. Input The first line of the input contains three positive integers n, m and d (1 ≤ n, m ≤ 100, 1 ≤ d ≤ 10) representing the dimensions of the field and the number of different types of irrigation devices. The next d lines each contain two positive integers wi and hi (1 ≤ wi, hi ≤ max(n, m)) representing the width and height of the i-th type of irrigation device. Output A single integer, the minimum number of irrigation devices required to cover the entire field. Examples Input 4 4 2 2 2 3 3 Output 4 Input 5 3 3 1 2 2 1 3 1 Output 5","solution":"def min_irrigation_devices(n, m, devices): Calculate the minimum number of irrigation devices required to cover the field. :param n: int, rows of the field :param m: int, columns of the field :param devices: list of tuples, where each tuple represents (width, height) of each device type :return: int, minimum number of irrigation devices required min_number = float(\'inf\') for width, height in devices: dev_x = (n + height - 1) // height # devices needed to cover height dev_y = (m + width - 1) // width # devices needed to cover width devices_needed = dev_x * dev_y min_number = min(min_number, devices_needed) dev_x = (n + width - 1) // width # devices needed to cover height (when rotated) dev_y = (m + height - 1) // height # devices needed to cover width (when rotated) devices_needed = dev_x * dev_y min_number = min(min_number, devices_needed) return min_number"},{"question":"You have decided to build a simple software application for tracking the stock prices of various companies in real-time. Your application receives updates on the stock prices and needs to compute the highest and lowest prices for each stock symbol over a certain period. For each update, you receive the stock symbol, the updated price, and a timestamp. You need to keep track of the highest and lowest prices for each stock symbol from the start of the tracking period until the current update. When a new stock update arrives, it should update the tracking information accordingly. Write a program that processes a series of stock price updates and outputs the highest and lowest prices for each stock symbol after processing all updates. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of stock price updates. Each of the next n lines contains a string s (1 ≤ |s| ≤ 10) — the stock symbol, a float p (0.01 ≤ p ≤ 10000.00) — the stock price, and an integer t (1 ≤ t ≤ 10^9) — the timestamp of the update, separated by spaces. It is guaranteed that all updates for each stock symbol arrive in chronological order. Output For each unique stock symbol, output the stock symbol followed by the highest price and the lowest price seen for that stock symbol during the given period. The output for each stock symbol should be in the order they first appeared in the input. Examples Input 5 AAPL 150.50 1 GOOGL 2000.00 2 AAPL 152.00 3 GOOGL 1990.50 4 AAPL 149.00 5 Output AAPL 152.00 149.00 GOOGL 2000.00 1990.50 Note In the first example: - For stock symbol \\"AAPL\\", the highest price is 152.00 and the lowest price is 149.00. - For stock symbol \\"GOOGL\\", the highest price is 2000.00 and the lowest price is 1990.50.","solution":"def track_stock_price_updates(n, updates): Processes a series of stock price updates and returns the highest and lowest prices for each stock symbol. :param n: Number of stock price updates :param updates: List of tuples with stock symbol, price, and timestamp :return: Dictionary with stock symbol as keys and a tuple of (highest price, lowest price) stock_prices = {} for update in updates: symbol, price, timestamp = update if symbol not in stock_prices: stock_prices[symbol] = (price, price) else: current_high, current_low = stock_prices[symbol] new_high = max(current_high, price) new_low = min(current_low, price) stock_prices[symbol] = (new_high, new_low) return stock_prices # Example usage: # n = 5 # updates = [ # (\\"AAPL\\", 150.50, 1), # (\\"GOOGL\\", 2000.00, 2), # (\\"AAPL\\", 152.00, 3), # (\\"GOOGL\\", 1990.50, 4), # (\\"AAPL\\", 149.00, 5) # ] # print(track_stock_price_updates(n, updates))"},{"question":"Given an array of n integers, each integer can be increased or decreased by 1 at most k times. You need to determine if it is possible to make all elements of the array equal after performing the allowed operations. Input: The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1000) - the number of integers in the array and the maximum number of operations allowed per integer. The second line contains n integers a1, a2, ..., an, where each integer ai (1 ≤ ai ≤ 1000). Output: Print \\"YES\\" (without quotes) if it is possible to make all elements of the array equal using at most k operations per element, and \\"NO\\" (without quotes) otherwise. Examples: Input: 5 3 4 8 6 4 6 Output: YES Input: 4 1 1 2 3 4 Output: NO In the first example, you can make all elements equal to 6 - by increasing or decreasing each integer as necessary within the allowed operations. In the second example, it is not possible to make all elements equal since the maximum allowed operations per element (k = 1) are insufficient to achieve equality across the array.","solution":"def can_make_equal(n, k, arr): Determine if all elements of the array can be made equal with at most k operations per element. :param n: int - the number of integers in the array. :param k: int - the maximum number of operations allowed per integer. :param arr: List[int] - the array of integers. :return: str - \\"YES\\" if it is possible to make all elements equal, \\"NO\\" otherwise. max_value = max(arr) min_value = min(arr) if (max_value - min_value) <= 2 * k: return \\"YES\\" else: return \\"NO\\""},{"question":"Priti loves prime numbers and enjoys working with large datasets. She has come up with an interesting problem involving prime numbers and their sums. Consider a list of the first N prime numbers. Priti wants to know the maximum sum of any contiguous subarray of these prime numbers. Write a program to help Priti determine the maximum sum of any contiguous subarray of the first N prime numbers. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N. Output For each test case, output the maximum sum of any contiguous subarray of the first N prime numbers. Constraints T (1 ≤ T ≤ 100) N (1 ≤ N ≤ 10^5) Example Input: 2 4 5 Output: 17 28 Explanation: For the first test case, the first 4 prime numbers are [2, 3, 5, 7]. The maximum sum of any contiguous subarray is 2 + 3 + 5 + 7 = 17. For the second test case, the first 5 prime numbers are [2, 3, 5, 7, 11]. The maximum sum of any contiguous subarray is 2 + 3 + 5 + 7 + 11 = 28.","solution":"import sympy def maximum_sum_contiguous_subarray(prime_count): Function to find the maximum sum of any contiguous subarray of the first N prime numbers. Here, we directly return the sum of all first N primes for maximum sum as the entire array itself will give the maximum sum since all primes are positive. # Generate the first `prime_count` prime numbers primes = list(sympy.primerange(1, sympy.prime(prime_count) + 1))[:prime_count] # The maximum sum of any contiguous subarray in this case is the sum of the full array return sum(primes) def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(maximum_sum_contiguous_subarray(N)) return results"},{"question":"You are tasked with counting the number of unique integers in a given list. Implement a function that receives a list of integers and returns the count of unique integers in the list. Constraints * The length of the list will be between 1 and 1000. * Each integer in the list will be between -1000 and 1000. Input An integer list `L` where: * L: A list of integers. Output Return the count of unique integers in the list. Examples Input [1, 2, 2, 3, 4, 4, 4, 5] Output 5 Input [10, 10, -10, -10, 0] Output 3","solution":"def count_unique_integers(L): Returns the count of unique integers in the list L. unique_integers = set(L) return len(unique_integers)"},{"question":"You are given a 2D grid of size n x m (1 ≤ n, m ≤ 1000) and a sequence of commands for your toy robot. The robot can start at any position on the grid and execute the commands. The commands are given as a string where \'U\' indicates moving up, \'D\' indicates moving down, \'L\' indicates moving left, and \'R\' indicates moving right. Each move takes the robot one step in the respective direction. The robot can perform these moves infinitely across the grid edges. For instance, if the robot moves up from the top row, it appears at the bottom row in the same column. You need to figure out if there exists a starting position (i, j) such that after executing the given sequence of commands, the robot returns to the starting position (i, j). Input The first line contains one integer T (1 ≤ T ≤ 1000) — the number of test cases. The next line for each test case contains three integers n, m (1 ≤ n, m ≤ 1000) and k (1 ≤ k ≤ 10^5) — the dimensions of the grid and the length of the commands, respectively. The following line for each test case contains a string s of length k — the sequence of commands (s_i ∈ {U, D, L, R}). Output For each test case, output \\"YES\\" if there exists a starting position (i, j) such that the robot returns to the starting position after executing the sequence of commands. Otherwise, output \\"NO\\". Example Input 3 3 3 4 URDL 4 4 5 URULR 2 2 8 ULDRULDR Output YES NO YES Explanation In the first query, no matter where the robot starts, after performing the sequence \'URDL\', it returns to the same starting position. In the second query, there is no starting position where the robot returns to the original position after performing the sequence \'URULR\'. In the third query, the robot will always cycle back to the original position after performing \'ULDRULDR\' in a 2x2 grid.","solution":"def does_robot_return_to_start(T, test_cases): results = [] for case in test_cases: n, m, k, s = case x, y = 0, 0 for command in s: if command == \'U\': x = (x - 1 + n) % n elif command == \'D\': x = (x + 1) % n elif command == \'L\': y = (y - 1 + m) % m elif command == \'R\': y = (y + 1) % m if x == 0 and y == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage T = 3 test_cases = [ (3, 3, 4, \'URDL\'), (4, 4, 5, \'URULR\'), (2, 2, 8, \'ULDRULDR\') ] print(does_robot_return_to_start(T, test_cases))"},{"question":"Given an N x N matrix of integers, rotate the matrix 90 degrees clockwise. Constraints * 1 leq N leq 10 * All values in the matrix are integers between -100 and 100. Input The input is given from Standard Input in the following format: The first line contains the integer N. The next N lines each contain N integers separated by single spaces, representing the rows of the matrix. Output Print the rotated matrix, with each row on a new line and each value separated by a single space. Example Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix(matrix): Rotates the given N x N matrix 90 degrees clockwise. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix def main(): # Read input import sys input = sys.stdin.read data = input().splitlines() N = int(data[0]) matrix = [list(map(int, row.split())) for row in data[1:N+1]] # Rotate matrix result = rotate_matrix(matrix) # Print output for row in result: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"Emely and the logging mechanism Emely is testing a logging mechanism for her new software application, which records certain significant events. Each event has a unique ID and occurs at specific time moments and follows some rules: The events are stored in a log, where the first event appears at time 1, the second at time 2, and so forth. Given a list \'L\' of event IDs, Emely needs to retrieve the times at which these events occurred from the log. The logging mechanism can handle a given list of event IDs, \'L\', and fetch the respective event occurrence times. However, after processing each event retrieval, the subsequent event logs are adjusted by removing the fetched event. Your task is to implement the mechanism to fetch the appropriate times of the given event IDs in the list \'L\'. Also, assure command sequence returned for retrieval must be in increasing order of event occurrence time. For example, if the initial log contains events [1, 2, 3, 4,...], and you need to retrieve events at indices [2, 4], the output should be: a) 2 - for event 2 retrieved from log b) 2 - for event 4 retrieved from shifted log position Constraints: 1 ≤ |L| ≤ 100000 The list L contains unique indices. Input: First line of input contains an integer S, where S denotes the length of the list \'L\' of event IDs to be retrieved. Second line of input contains S integers - event IDs that need to be retrieved. Output: Output in one line what are the times at which events occurred in the order given. Example: Initially, event logs are [1, 2, 3, 4, ...]. L = [2, 4] After 2 is retrieved, log becomes [1, 3, 4, 5, ...]. After 4 is retrieved (it becomes second in the updated log), output must be: 2 2 SAMPLE INPUT 2 2 4 SAMPLE OUTPUT 2 2","solution":"def get_event_times(L): Function to fetch occurrence times of event IDs from the log. Args: L (list): List of event IDs that need to be retrieved. Returns: list: List of times at which events occurred in the order given. result = [] for event_id in L: result.append(event_id) return result"},{"question":"A biologist is studying the growth patterns of different species of plants. Each species grows in cycles, where in each cycle the plant either grows in height or branches out. The growth patterns repeat after a certain number of cycles. Given the number of cycles and the height or branching patterns for each cycle, help the biologist determine the final height of the plant after a series of cycles. Each cycle may have one of two types of growth: 1. \'H\' - The plant height increases by a specified amount. 2. \'B\' - The plant branches out, but the height remains the same. Write a program to calculate the total height after a given number of cycles, following the repeating pattern of growth. Input The first line contains the number of test cases T. Each test case begins with 2 integers N and M where N is the number of cycles and M is the number of unique patterns. The next M lines each contain the pattern for a single cycle, consisting of a character (\'H\' or \'B\') and an integer K, which represents either the amount of height increase if the character is \'H\', or branching factor ignored if it is \'B\'. Output For each test case, print the final height of the plant after N cycles in a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 1 ≤ M ≤ 100 1 ≤ K ≤ 1000 Example Input: 2 3 2 H 2 B 3 4 3 H 1 B 2 H 3 Output: 6 8 Explanation: Case 1: The repeating pattern is (H 2, B 3). After 3 cycles: - Cycle 1: Height increased by 2 -> height = 2 - Cycle 2: Branch out but height remains -> height = 2 - Cycle 3: Height increased by 2 -> height = 4 Total height after 3 cycles = 6 Case 2: The repeating pattern is (H 1, B 2, H 3). After 4 cycles: - Cycle 1: Height increased by 1 -> height = 1 - Cycle 2: Branch out but height remains -> height = 1 - Cycle 3: Height increased by 3 -> height = 4 - Cycle 4: Height increased by 1 -> height = 5 Total height after 4 cycles = 8","solution":"def final_height(cycles, patterns): total_increase_per_pattern = sum(increase for kind, increase in patterns if kind == \'H\') full_patterns = cycles // len(patterns) remaining_cycles = cycles % len(patterns) height = full_patterns * total_increase_per_pattern for i in range(remaining_cycles): if patterns[i][0] == \'H\': height += patterns[i][1] return height def process_test_cases(test_cases): results = [] for cycles, patterns in test_cases: results.append(final_height(cycles, patterns)) return results"},{"question":"Mike loves playing with strings, specifically with k-palindromes. A string is called a k-palindrome if it can be transformed into a palindrome by removing at most k characters from it. Given a string s of length n and an integer k, you need to determine if it\'s possible to make it a palindrome by removing at most k characters. Input The first line contains a single integer t, the number of test cases (1 ≤ t ≤ 10). Each of the next t cases comprises a string s (1 ≤ |s| ≤ 2000) and an integer k (0 ≤ k ≤ 100). Output For each test case, print \\"YES\\" if the string can be made into a palindrome by removing at most k characters, otherwise print \\"NO\\". Examples Input 3 abca 1 abcdef 2 racecar 0 Output YES NO YES Note For the first example, you can remove character \'b\' to make the string \\"aca\\", which is a palindrome. For the second example, you cannot make \\"abcdef\\" a palindrome by removing just 2 characters. For the third example, \\"racecar\\" is already a palindrome, so you don’t need to remove any characters.","solution":"def is_k_palindrome(s, k): def longest_palindromic_subsequence(x): n = len(x) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if x[i] == x[j]: if cl == 2: dp[i][j] = 2 else: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] n = len(s) lps_length = longest_palindromic_subsequence(s) min_deletions = n - lps_length return \\"YES\\" if min_deletions <= k else \\"NO\\" def k_palindrome_test_cases(t, test_cases): results = [] for s, k in test_cases: results.append(is_k_palindrome(s, k)) return results"},{"question":"You are given an array of integers and a positive integer k. Determine whether it\'s possible to rearrange the elements in the array such that the difference between any two consecutive elements is at least k. If possible, provide one such rearrangement. Constraints * 2 ≤ n ≤ 10^5, where n is the number of elements in the array. * 1 ≤ k ≤ 10^9 * 1 ≤ a_i ≤ 10^9, where a_i is an element of the array. Input If the input is given from Standard Input in the following format: n k a_1 a_2 ... a_n Output If there does not exist an arrangement that satisfies the condition, print `No`. Otherwise, print `Yes` in the first line, and print the rearranged array in the second line. Examples Input 5 3 1 4 7 2 10 Output Yes 1 4 7 10 2 Input 3 6 1 2 3 Output No Input 4 5 10 1 8 3 Output Yes 1 10 3 8","solution":"def rearrange_possible(n, k, a): Rearranges the array such that consecutive differences are at least k if possible. a.sort() rearranged = [] i, j = 0, n - 1 while i <= j: if len(rearranged) % 2 == 0: rearranged.append(a[i]) i += 1 else: rearranged.append(a[j]) j -= 1 for i in range(1, len(rearranged)): if abs(rearranged[i] - rearranged[i-1]) < k: return \\"No\\" return \\"Yesn\\" + \\" \\".join(map(str, rearranged))"},{"question":"You are developing a new messaging app, and you need to implement a feature that detects spam messages. For simplicity, let\'s consider a message to be spam if it contains any one of a predefined list of \\"spam words.\\" Your task is to write a function that determines whether a given message is spam based on the provided list of spam words. The function should take two inputs: 1. A list of n spam words, where 1 <= n <= 10^4. 2. A string representing the message to be checked, where the length of the message is between 1 and 10^5 characters. The function should return `True` if the message contains any of the spam words (case insensitive), and `False` otherwise. For example, if the list of spam words is [\\"buy\\", \\"free\\", \\"click\\"], and the message is \\"Hurry and Buy now!\\", the function should return `True` because the word \\"buy\\" is in the message (even though the case does not match). If the message is \\"Hello, how are you?\\", the function should return `False` because it does not contain any of the spam words. Input The first line contains a single integer n (1 ≤ n ≤ 10000), the number of spam words. The next n lines contain one spam word each. The last line contains the message to be checked. Output Output a single boolean value: `True` if the message is spam, and `False` otherwise. Examples Input 3 buy free click Hurry and Buy now! Output True Input 2 win prize Hello, how are you? Output False","solution":"def is_spam(spam_words, message): Checks if the message contains any spam words. :param spam_words: List of spam words :param message: The message to check :return: True if the message contains any spam words, otherwise False message_lower = message.lower() for spam_word in spam_words: if spam_word.lower() in message_lower: return True return False"},{"question":"A telecommunications company is planning to place its cell towers across a city in such a manner that every residential building in the city gets the best possible signal. For simplicity, assume the city is represented as a 2D grid. Each cell tower has a fixed range and can cover buildings within that range in a perfect circular area. Given the number of cell towers, their respective ranges, and the positions of residential buildings, determine the minimum number of towers required to cover all buildings. Input: - First line contains an integer T, the number of test cases. - Each test case starts with an integer M, the number of cell towers. - The next M lines each contain three floating point values representing the x and y position of the tower and its range. - The next line contains an integer N, the number of residential buildings. - The next N lines each contain two floating point values representing the x and y position of the residential buildings. Output: For each test case, print the minimum number of towers required to cover all the residential buildings. If it\'s not possible to cover all the buildings with the given towers, output -1. Constraints: 1 ≤ T ≤ 50 1 ≤ M ≤ 100 1 ≤ N ≤ 500 -1000 ≤ x, y ≤ 1000 SAMPLE INPUT 1 4 0 0 5 10 10 5 5 5 2 -5 -5 10 3 2 2 8 8 -3 -3 SAMPLE OUTPUT 2 Explanation: In the sample input, we have 4 towers and their ranges. The towers at (0, 0) and (-5, -5) can cover the buildings at (2, 2) and (-3, -3) respectively. The tower at (10, 10) can cover the building at (8, 8). Therefore, the minimum number of towers required is 2.","solution":"import math from typing import List, Tuple def minimum_towers_to_cover_buildings(towers: List[Tuple[float, float, float]], buildings: List[Tuple[float, float]]) -> int: def is_within_range(tower, building): tx, ty, tr = tower bx, by = building return math.sqrt((tx - bx) ** 2 + (ty - by) ** 2) <= tr def can_cover_all_buildings_with_towers(selected_towers_indices): covered_buildings = set() for idx in selected_towers_indices: tower = towers[idx] for building in buildings: if is_within_range(tower, building): covered_buildings.add(building) return len(covered_buildings) == len(buildings) num_towers = len(towers) num_buildings = len(buildings) if num_buildings == 0: return 0 min_towers_required = float(\'inf\') for i in range(1, 1 << num_towers): # Iterate over all subsets of towers selected_towers_indices = [j for j in range(num_towers) if (i & (1 << j))] if can_cover_all_buildings_with_towers(selected_towers_indices): min_towers_required = min(min_towers_required, len(selected_towers_indices)) return min_towers_required if min_towers_required != float(\'inf\') else -1 def process_input(input_str: str) -> str: lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 results = [] for _ in range(T): M = int(lines[index]) index += 1 towers = [] for _ in range(M): x, y, r = map(float, lines[index].split()) towers.append((x, y, r)) index += 1 N = int(lines[index]) index += 1 buildings = [] for _ in range(N): x, y = map(float, lines[index].split()) buildings.append((x, y)) index += 1 result = minimum_towers_to_cover_buildings(towers, buildings) results.append(result) return \'n\'.join(map(str, results))"},{"question":"Alice is working on a new online learning platform and she is developing a feature to analyze student engagement. One metric to measure engagement is the \'attention streak\'—the maximum number of days a student has spent at least a certain amount of time studying, without missing any days in between. You are given a list of study records for several students. Each record details the number of minutes a student spent studying on a certain day. Your task is to determine the maximum attention streak for each student. An attention streak only counts days where the student studied for at least a given threshold of minutes. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers N (the number of records) and M (the attention threshold in minutes). - The next N lines contain two integers each: D (the day, represented as an integer) and P (the number of minutes spent studying on that day). Output: For each test case, output a single line with the maximum attention streak for the student. Constraints: 1 ≤ T ≤ 500 1 ≤ N ≤ 10000 1 ≤ D ≤ 50000 0 ≤ P ≤ 1440 (number of minutes in a day) Note: Days (D values) in each test case are provided in non-decreasing order. SAMPLE INPUT 2 5 60 1 30 2 70 3 80 4 90 5 60 4 45 1 50 2 50 3 30 4 50 SAMPLE OUTPUT 4 2 Explanation In the first test case, the student studied for at least 60 minutes continuously on days 2 to 5, so the maximum attention streak is 4. In the second test case, the student studied for at least 45 minutes continuously on days 1 and 2, missed the threshold on day 3, but met it again on day 4, so the maximum attention streak is 2.","solution":"def max_attention_streak(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] study_records = test_cases[i][1] max_streak = 0 current_streak = 0 for day, minutes in study_records: if minutes >= M: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 results.append(max_streak) return results"},{"question":"In a far galaxy, there exists a peculiar form of transportation known as the Wormhole Hyperloop (WHL). The WHL network is made up of several wormholes, each represented as a line segment between two three-dimensional coordinates (x, y, z). A spaceship travels through the network using these wormholes to reach its destination. However, due to a recent spatial distortion event, certain wormholes have been disrupted. Each affected wormhole can only be traversed if a specific conditional alignment criterion based on the spaceship\'s current energy level is met. The condition is that for each wormhole, the spaceship can pass through it only if the sum of the coordinates of both ends of the wormhole is an even number. Create a program that determines whether the spaceship can travel from its starting location to its destination using a sequence of defined wormholes, considering the alignment criterion. Constraints: * There can be multiple wormholes, but no more than 50 wormholes. * Each coordinate (x, y, z) is within the range -100 ≤ x, y, z ≤ 100. * The spaceship\'s starting point and the destination are never the same. Input: The format of the input data is as follows: The first line contains the starting coordinates of the spaceship (x, y, z) (integer, half-width space delimited) The second line contains the destination coordinates of the spaceship (x, y, z) (integer, half-width space delimited) The third line contains the number of wormholes n (integer) The following n lines each contain the coordinates of the two endpoints of a wormhole (x, y, z) (integer, half-width space delimited). Output: Output \\"POSSIBLE\\" if it is feasible for the spaceship to travel from the starting point to the destination using the defined wormholes. If not, output \\"IMPOSSIBLE\\". Examples: Input: 0 0 0 10 10 10 3 0 0 0 2 2 2 2 2 2 10 10 10 0 0 0 5 5 5 Output: POSSIBLE Input: 0 0 0 10 10 10 2 0 0 0 5 5 5 5 5 6 10 10 10 Output: IMPOSSIBLE","solution":"def can_travel_through_wormhole(start, dest, wormholes): def is_passing_possible(coord1, coord2): return (sum(coord1) + sum(coord2)) % 2 == 0 from collections import deque visited = set() to_visit = deque([start]) while to_visit: current = to_visit.popleft() if current == dest: return \\"POSSIBLE\\" for wormhole in wormholes: endpoint1, endpoint2 = wormhole if current in [endpoint1, endpoint2]: next_point = endpoint1 if current == endpoint2 else endpoint2 if is_passing_possible(endpoint1, endpoint2) and next_point not in visited: visited.add(next_point) to_visit.append(next_point) return \\"IMPOSSIBLE\\" def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') start = tuple(map(int, data[0].split())) dest = tuple(map(int, data[1].split())) n = int(data[2]) wormholes = [] for i in range(3, 3 + n): coords = list(map(int, data[i].split())) wormholes.append((tuple(coords[:3]), tuple(coords[3:]))) print(can_travel_through_wormhole(start, dest, wormholes)) if __name__ == \\"__main__\\": main()"},{"question":"A social media company is rolling out a new feature that allows users to create \\"highlight reels\\" from their posts. Each post is identified by a unique ID and has a timestamp. Users want to create highlight reels that consist of consecutive posts ordered by timestamp. Given a list of post IDs and their corresponding timestamps, we need to determine the length of the longest consecutive sequence of posts that can form a highlight reel. The posts in the highlight reel must be strictly consecutive by timestamp. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of posts. The next n lines each contain a pair of integers id and timestamp (1 ≤ id ≤ 10^5, 1 ≤ timestamp ≤ 10^9), where id is the identifier for the post and timestamp indicates when the post was created. Output Output a single integer – the length of the longest consecutive sequence of posts that can form a highlight reel. Examples Input 5 101 1 102 2 103 3 104 5 105 6 Output 3 Input 4 201 10 202 20 203 30 204 40 Output 1 Note In the first example, the longest consecutive sequence by timestamp is {101, 102, 103} with lengths being {1, 2, 3}. In the second example, there are no consecutive timestamps, so the maximum length is 1.","solution":"def longest_consecutive_reel(posts): This function returns the length of the longest consecutive sequence of posts that can form a highlight reel based on their timestamps. :param posts: List of tuples containing post ID and timestamp :return: integer — length of the longest consecutive sequence if not posts: return 0 sorted_posts = sorted(posts, key=lambda x: x[1]) longest_streak = 1 current_streak = 1 for i in range(1, len(sorted_posts)): if sorted_posts[i][1] == sorted_posts[i-1][1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Amanda owns a software company and she needs to distribute n identical software licenses among m different departments in her company. Each department must get at least one software license and no two departments should receive the same number of software licenses. Help Amanda find such a possible distribution or determine if it\'s impossible. Input The first line consists of two integers n and m (1 ≤ m ≤ 1000, 1 ≤ n ≤ 10^6) — the number of software licenses and the number of departments. Output Output \\"No\\" (without quotes) in a single line if there does not exist such distribution. Otherwise, output \\"Yes\\" (without quotes) in the first line, and m numbers separated by space in the second line — the number of software licenses each department will receive in the required distribution. Ensure that the sum of the numbers you output in the second line equals n and every number is distinct. Examples Input 10 4 Output Yes 1 2 3 4 Input 15 6 Output No Input 7 2 Output Yes 3 4 Note Sample 1: The distribution (1, 2, 3, 4) sums up to 10 and each department receives a different number of licenses. Sample 2: It\'s impossible to distribute 15 licenses among 6 departments such that each department gets a distinct number of licenses and the sum equals 15. Sample 3: The distribution (3, 4) sums up to 7 and each department receives a different number of licenses.","solution":"def distribute_licenses(n, m): Distributes n software licenses among m departments such that each department receives at least one license and no two departments receive the same number of licenses, or returns \\"No\\" if it\'s not possible. if m * (m + 1) // 2 > n: return \\"No\\" licenses = list(range(1, m + 1)) remaining = n - sum(licenses) licenses[-1] += remaining return \\"Yes\\", licenses"},{"question":"You are planning a holiday that spans a continuous number of days, and you want to maximize the enjoyment across those days. The enjoyment of each day is represented by a list of integers where each integer can have a positive or negative value. Given an integer array `enjoyment` representing the enjoyment value of each day of your holiday, determine the maximum sum of enjoyment you can achieve by continuously selecting some of the days (at least one). Constraints * 1 <= len(enjoyment) <= 1000 * -1000 <= enjoyment[i] <= 1000 (for each day i) Input Input is given from Standard Input in the following format: ``` N enjoyment[1] enjoyment[2] ... enjoyment[N] ``` Where `N` is the number of days and `enjoyment` is the list of integers representing the enjoyment value of each day. Output Print the maximum sum of enjoyment possible by selecting some continuous days. Example Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation: The subarray with the maximum sum is `[4, -1, 2, 1]`, and its sum is 6.","solution":"def max_enjoyment_sum(enjoyment): n = len(enjoyment) max_sum = curr_sum = enjoyment[0] for i in range(1, n): curr_sum = max(enjoyment[i], curr_sum + enjoyment[i]) max_sum = max(max_sum, curr_sum) return max_sum if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) enjoyment = list(map(int, data[1:])) print(max_enjoyment_sum(enjoyment))"},{"question":"You are given a binary string s consisting of n characters, where each character is either \'0\' or \'1\'. You can perform the following operation at most once: choose a non-empty contiguous subsegment of s and flip all the bits in this segment (i.e., change all \'0\'s to \'1\'s and all \'1\'s to \'0\'s). Your task is to maximize the number of contiguous \'1\'s in the binary string after performing the operation at most once. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the length of the binary string. The second line contains a binary string s of length n. Output Print the maximum number of contiguous \'1\'s in the binary string after performing the operation at most once. Examples Input 7 1001100 Output 5 Input 5 11111 Output 5 Input 4 0000 Output 4","solution":"def maximize_contiguous_ones(n, s): Returns the maximum number of contiguous \'1\'s in the binary string s after performing at most one flip operation on a contiguous subsegment. ones = [0] * (n + 1) for i in range(1, n + 1): ones[i] = ones[i - 1] + (1 if s[i - 1] == \'1\' else 0) max_ones = ones[n] for l in range(n): for r in range(l, n): ones_in_flip_segment = (r - l + 1) - (ones[r + 1] - ones[l]) total_ones = ones[n] - (ones[r + 1] - ones[l]) + ones_in_flip_segment max_ones = max(max_ones, total_ones) return max_ones"},{"question":"You are given a list of points in the x-y plane. These points form the vertices of a non-self-intersecting polygon. You are required to determine the area of the given polygon. The points are given in counter-clockwise order. Input The input consists of multiple datasets. Each dataset is formatted as follows. n x1 y1 x2 y2 : xn yn A dataset starts with n (3 ≤ n ≤ 100), the number of vertices of the polygon. Each of the following n lines contains two integers, xi and yi, which are the coordinates of the i-th vertex of the polygon. The input is terminated by a single zero. Output For each dataset, output a line containing the area of the polygon rounded to the closest integer value. Example Input 4 0 0 4 0 4 3 0 3 3 1 1 3 1 2 4 0 Output 12 3","solution":"def polygon_area(points): Calculates the area of a polygon given its vertices using the Shoelace formula. Points are given in counter-clockwise order. :param points: List of (x, y) tuples representing the vertices of the polygon :return: The area of the polygon rounded to the closest integer x = [p[0] for p in points] y = [p[1] for p in points] n = len(points) # Shoelace formula area = 0.5 * abs(sum(x[i] * y[(i + 1) % n] - y[i] * x[(i + 1) % n] for i in range(n))) return round(area) def process_datasets(datasets): Processes multiple datasets containing polygons and returns their areas. :param datasets: List of datasets, each containing a list of (x, y) tuples :return: List of areas of the polygons result = [] for points in datasets: area = polygon_area(points) result.append(area) return result def parse_input(input_str): Parses the input string to extract datasets of polygon points. :param input_str: The input string with multiple datasets :return: List of datasets, each containing a list of (x, y) tuples lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break points = [] for j in range(i + 1, i + 1 + n): x, y = map(int, lines[j].split()) points.append((x, y)) datasets.append(points) i += 1 + n return datasets def main(input_str): datasets = parse_input(input_str) results = process_datasets(datasets) for result in results: print(result)"},{"question":"Bytelandian Network Connection In Byteland, a network consists of `n` computers and `m` bidirectional connections between them. Each computer is labelled with a distinct integer from 0 to n-1. Your task is to determine the maximum number of direct connections any single computer can have and identify any such computer if it exists. You will be given two integers, n (number of computers) and m (number of connections), followed by m pairs of integers that describe the connections between computers. Each pair consists of two integers a and b (0 ≤ a, b < n and a ≠ b) indicating a direct connection between computer a and computer b. Determine the maximum number of connections (degree) any single computer has and provide the label of one such computer. If there are multiple computers with the same maximum degree, any one of them can be returned. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of computers and the number of connections, respectively. The next m lines each contain two integers a and b describing a direct connection between computer a and computer b. Output In the first line, print a single integer d — the maximum number of direct connections any computer has. In the second line, print a single integer c — the label of one computer with d connections. Examples Input 5 4 0 1 0 2 1 3 2 3 Output 2 0 Input 3 2 0 1 1 2 Output 2 1","solution":"def find_max_connections(n, m, connections): Returns the maximum number of direct connections any computer has and the label of one such computer. :param n: int, number of computers in the network :param m: int, number of connections :param connections: list of tuples, each containing two integers representing a connection between two computers :return: tuple of two integers, the maximum degree and one computer with that degree from collections import defaultdict # Initialize a dictionary to count connections for each computer connection_count = defaultdict(int) # Iterate over each connection and update the counts for a, b in connections: connection_count[a] += 1 connection_count[b] += 1 max_degree = 0 computer_with_max_degree = 0 # Find the computer with the maximum connections for computer, degree in connection_count.items(): if degree > max_degree: max_degree = degree computer_with_max_degree = computer return max_degree, computer_with_max_degree"},{"question":"In a city, there are N warehouses connected by M bidirectional roads. Each road has a travel time associated with it. The travel time between any two warehouses is determined by the shortest path. Given Q pairs of warehouses, you need to determine the shortest travel time for each pair. Constraints * 1 <= N <= 300 * 0 <= M <= N*(N-1)/2 * 1 <= Q <= 1000 * 1 <= travel_time_i <= 1000 * 1 <= warehouse_a_i, warehouse_b_i <= N Input Input is given from standard input in the following format: N M u_1 v_1 travel_time_1 u_2 v_2 travel_time_2 : u_M v_M travel_time_M Q warehouse_a_1 warehouse_b_1 warehouse_a_2 warehouse_b_2 : warehouse_a_Q warehouse_b_Q Output For each pair of warehouses, output the shortest travel time on a new line. If the warehouses are not connected, output -1. Examples Input 4 4 1 2 4 2 3 1 3 4 2 4 1 7 2 1 3 4 1 Output 5 7 Input 3 2 1 2 5 2 3 10 1 3 1 Output 15","solution":"def find_shortest_travel_time(N, M, roads, Q, queries): # Initialization of adjacency matrix for Floyd-Warshall inf = float(\'inf\') travel_time = [[inf] * N for _ in range(N)] # Self-loops have 0 travel time for i in range(N): travel_time[i][i] = 0 # Fill initial travel times from roads input for u, v, w in roads: travel_time[u-1][v-1] = w travel_time[v-1][u-1] = w # Floyd-Warshall algorithm to find shortest path between all pairs for k in range(N): for i in range(N): for j in range(N): if travel_time[i][j] > travel_time[i][k] + travel_time[k][j]: travel_time[i][j] = travel_time[i][k] + travel_time[k][j] # Answering queries results = [] for a, b in queries: result = travel_time[a-1][b-1] results.append(result if result < inf else -1) return results # To handle input/output format if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() idx = 0 N = int(data[idx]) M = int(data[idx + 1]) idx += 2 roads = [] for _ in range(M): u = int(data[idx]) v = int(data[idx + 1]) travel_time = int(data[idx + 2]) roads.append((u, v, travel_time)) idx += 3 Q = int(data[idx]) idx += 1 queries = [] for _ in range(Q): a = int(data[idx]) b = int(data[idx + 1]) queries.append((a, b)) idx += 2 results = find_shortest_travel_time(N, M, roads, Q, queries) for result in results: print(result)"},{"question":"A rectangular garden of dimensions N x M is covered in tiles arranged in an N-row and M-column grid. Each tile can either be a flower tile (represented by \'F\') or a grass tile (represented by \'G\'). You want to determine the largest contiguous rectangular block of flower tiles. Write a program that, given the garden\'s dimensions and its tile layout, computes the area of the largest contiguous rectangle composed entirely of flower tiles. Input The input consists of multiple datasets. Each dataset consists of several lines: - The first line contains two integers N and M separated by a single space, representing the dimensions of the garden with 0 < N, M ≤ 100. - The next N lines each contain a string of M characters, where each character is either \'F\' or \'G\', representing the tile at that position in the garden grid. The input terminates with a line containing two zeros, which should not be processed. Output For each dataset, print the area of the largest contiguous rectangle of flower tiles on a new line. If there are no flower tiles, the area should be 0. Example Input 4 5 FGFFF FGGFF FFGFF FFFFG 3 3 GGG GGG GGG 0 0 Output 6 0","solution":"def max_flower_rectangle_area(grid): # Helper function using dynamic programming to find the largest rectangular area in histogram def largest_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not grid: return 0 # Initialize the histogram N = len(grid) M = len(grid[0]) histogram = [0] * M max_area = 0 for i in range(N): for j in range(M): if grid[i][j] == \'F\': histogram[j] += 1 else: histogram[j] = 0 # Find the maximum area with this row as the base max_area = max(max_area, largest_histogram_area(histogram)) return max_area def solve_garden(input_data): lines = input_data.strip().split(\\"n\\") i = 0 results = [] while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break garden = [] for j in range(n): garden.append(lines[i + 1 + j]) results.append(max_flower_rectangle_area(garden)) i += n + 1 return results"},{"question":"A large company is consolidating its employee records from multiple departments. Each department maintains a list of employee IDs, which may contain duplicates within the same department. The company wants to generate a consolidated list of unique employee IDs across all departments. Write a function that takes multiple lists of employee IDs and returns a consolidated list of unique employee IDs sorted in ascending order. Input: The input consists of multiple lines. Each line contains a list of space-separated integers representing employee IDs from one department. Output: Output the consolidated list of unique employee IDs, each ID on a new line in ascending order. Constraints: - The number of departments is between 1 and 100. - The number of employee IDs in each department list is between 1 and 10^5. - Each employee ID is a non-negative integer less than or equal to 10^6. Example Input: 3 1 4 1 2 1 2 3 5 3 2 1 Example Output: 1 2 3 4 5","solution":"def consolidate_employee_records(*departments): Accepts multiple lists of employee IDs and returns a sorted list of unique employee IDs across all departments. unique_ids = set() for department in departments: unique_ids.update(department) return sorted(unique_ids)"},{"question":"The new semester at the code academy has started, and the students are excited to dive into their new coursework. In their latest assignment, they come across an interesting problem related to string manipulation. A palindrome is a string that reads the same forward and backward. A k-palindrome is a string that can be transformed into a palindrome by changing at most k characters. Your task is to help the students by writing a program that checks if a given string can be transformed into a palindrome by changing at most k characters. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string. - The second line contains a string s of length n, consisting of lowercase English letters. - The third line contains an integer k (0 ≤ k ≤ n). Output: - Print \\"YES\\" if the string can be transformed into a palindrome by changing at most k characters; otherwise, print \\"NO\\". Examples: Input: 5 abcaa 1 Output: YES Input: 5 abcde 1 Output: NO Note: In the first example, changing the last character from \\"a\\" to \\"b\\" would make the string \\"abcba\\", which is a palindrome. In the second example, even if one character is changed, it is impossible to transform \\"abcde\\" into a palindrome.","solution":"def can_be_palindrome(n, s, k): Returns \\"YES\\" if the string s can be transformed into a palindrome by changing at most k characters. Otherwise, returns \\"NO\\". mismatches = 0 # Check the number of mismatched characters from both ends of the string for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 # If the number of mismatches is less than or equal to k, it can be transformed into a palindrome if mismatches <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a grid of size n x m, where each cell contains a non-negative integer, you need to perform exactly k moves. In each move, you can choose any cell (i, j) in the grid and increment its value by 1. Your goal is to make the sum of all cells in the grid equals to a given value S after exactly k moves. Determine if it\'s possible to achieve the desired sum S after exactly k moves. If it is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 10^6) — the number of rows in the grid, the number of columns in the grid, and the number of moves you need to perform. The next n lines contain m integers each, where the j-th integer in the i-th line is a_ij (0 ≤ a_ij ≤ 10^6) — the initial values in the grid. The last line contains a single integer S (0 ≤ S ≤ 10^12) — the desired sum after k moves. Output Print a single line containing \\"YES\\" if the desired sum can be achieved after exactly k moves. Otherwise, print \\"NO\\". Examples Input 3 3 5 1 2 3 4 5 6 7 8 9 60 Output YES Input 3 3 5 1 2 3 4 5 6 7 8 9 59 Output NO Note In the first example, the initial sum of all the cells in the grid is 45. After exactly 5 moves, the sum will be 45 + 5 = 50. To achieve the desired sum of 60, we need to perform additional 10 moves. Since the number of moves required (10) matches the given number of moves (5), the answer is \\"YES\\". In the second example, the initial sum of all the cells in the grid is 45. After exactly 5 moves, the sum will be 45 + 5 = 50. To achieve the desired sum of 59, we need to perform additional 9 moves. However, the number of moves required (9) is larger than the number of given moves (5), thus the answer is \\"NO\\".","solution":"def is_possible_to_achieve_sum(n, m, k, grid, S): Determines if it\'s possible to achieve the sum S after exactly k moves on an n x m grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param k: Number of moves to perform :param grid: 2D list representing the grid :param S: Desired sum after k moves :return: \\"YES\\" if the desired sum can be achieved, \\"NO\\" otherwise current_sum = sum(sum(row) for row in grid) required_sum = current_sum + k return \\"YES\\" if required_sum == S else \\"NO\\""},{"question":"In a faraway kingdom named Techland, a new programming competition is being held. Each participant in the competition is given a string, and they need to transform it into a palindrome by performing at most one character replacement. A string is considered a palindrome if it reads the same backward as forward. Your task is to determine whether it is possible to transform the given string into a palindrome by changing at most one of its characters. # Input The input consists of a single string `s` (1 ≤ |s| ≤ 10^5). The string `s` will only contain lowercase English letters. # Output Print \\"YES\\" (without quotes) if it is possible to transform the string into a palindrome by changing at most one character. Otherwise, print \\"NO\\" (without quotes). # Examples Input ``` abca ``` Output ``` YES ``` Input ``` abcba ``` Output ``` YES ``` Input ``` abcde ``` Output ``` NO ``` # Explanation 1. For the string `abca`, changing the last character \'a\' to \'b\' will result in the palindrome `abca`. 2. The string `abcba` is already a palindrome, so no changes are needed. 3. The string `abcde` requires more than one character change to become a palindrome. For example, changing just ‘a’ or ‘e’ won\'t help. This challenge tests your ability to handle palindrome logic and character manipulation within given constraints.","solution":"def can_become_palindrome(s): Checks if the given string can be transformed into a palindrome by changing at most one character. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # If there is a mismatch, check the two possibilities return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True def can_be_palindrome(s): if can_become_palindrome(s): return \\"YES\\" return \\"NO\\""},{"question":"We live in the era of digital notebooks where people create, store, and manage their notes and to-do lists electronically. A popular feature in such applications is the notion of \\"tags\\" — labels which can be associated with each note for better categorization and retrieval. Your task is to implement a simple note-taking system that supports tagging and provides a query feature to find notes with specific tags. # Features Required: 1. **Create Note**: Add a new note with a given title, body content, and an optional set of tags. 2. **Tag Note**: Add one or more tags to an existing note. 3. **Retrieve Notes by Tags**: Query and retrieve notes that have one or more specified tags. # Constraints: - Each note has a unique title. - Tags for notes are represented as strings containing only lowercase alphabets. # Input The input consists of several commands, each representing an operation on the note-taking system. The commands will be given in the following formats: - `CREATE` title `BODY` body `TAGS` [tag1, tag2, ...] - `TAG` title [tag1, tag2, ...] - `QUERY` [tag1, tag2, ...] Commands are provided one per line. The input ends with a line containing the word `STOP`. - `title` is a unique string of up to 100 alphanumeric characters. - `body` is a string of up to 256 alphanumeric characters. - Each `tag` is a lowercase string of up to 20 characters. # Output For each `QUERY` command, print the titles of the notes that have at least one of the specified tags, one per line, in any order. If no matching notes are found, print `No matching notes`. # Example Input ``` CREATE Homework BODY Math and Science exercises TAGS [school, math] CREATE Shopping BODY Buy groceries TAGS [personal, daily] CREATE Meeting BODY Discuss project TAGS [work] TAG Meeting [important, urgent] QUERY [school] QUERY [important, math] QUERY [travel] STOP ``` Output ``` Homework Meeting Homework No matching notes ``` # Explanation - The first command creates a note with the title \\"Homework\\", body \\"Math and Science exercises\\", and tags \\"school\\" and \\"math\\". - The second command creates another note titled \\"Shopping\\" and tags it with \\"personal\\" and \\"daily\\". - The third command creates a note titled \\"Meeting\\" with tags \\"work\\". - The `TAG` command adds two additional tags \\"important\\" and \\"urgent\\" to the note titled \\"Meeting\\". - The first `QUERY` command searches for notes tagged with \\"school\\", and returns \\"Homework\\". - The second `QUERY` command searches for notes tagged with either \\"important\\" or \\"math\\", and returns \\"Homework\\" and \\"Meeting\\". - The third `QUERY` command searches for notes tagged with \\"travel\\", and as no notes have this tag, it returns \\"No matching notes\\".","solution":"class NoteTakingSystem: def __init__(self): self.notes = {} def create_note(self, title, body, tags): if title in self.notes: raise ValueError(\\"Note with the same title already exists.\\") self.notes[title] = {\'body\': body, \'tags\': set(tags)} def tag_note(self, title, tags): if title not in self.notes: raise ValueError(\\"Note with the given title does not exist.\\") self.notes[title][\'tags\'].update(tags) def retrieve_notes_by_tags(self, tags): result = [] for title, note in self.notes.items(): if any(tag in note[\'tags\'] for tag in tags): result.append(title) return result if result else [\\"No matching notes\\"]"},{"question":"Given an array of integers, identify whether it is possible to rearrange the array such that no two adjacent elements are the same. If possible, provide one such rearrangement; otherwise, inform that it cannot be done. Input The first line of input contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5), which denotes the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), which denotes the elements of the array. Output If it is possible to rearrange the array such that no two adjacent elements are the same, output \\"YES\\" followed by one such rearrangement of the array. Otherwise, output \\"NO\\". Examples Input 6 4 1 1 2 2 3 Output YES 1 2 1 2 3 4 Input 4 1 1 1 1 Output NO Note In the first example, one possible valid rearrangement is 1 2 1 2 3 4. In the second example, it\'s not possible to rearrange the array such that no two adjacent elements are the same because all elements are the same.","solution":"from collections import Counter import heapq def can_rearrange(arr): freq = Counter(arr) max_heap = [(-count, num) for num, count in freq.items()] heapq.heapify(max_heap) if -max_heap[0][0] > (len(arr) + 1) // 2: return \\"NO\\", [] prev_count, prev_num = 0, \'\' result = [] while max_heap: count, num = heapq.heappop(max_heap) result.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count, prev_num = count + 1, num return \\"YES\\", result def solution(n, array): result, rearrangement = can_rearrange(array) if result == \\"NO\\": return \\"NO\\" else: return f\\"YESn{\' \'.join(map(str, rearrangement))}\\""},{"question":"Given a list of integers representing the maximum heights of buildings on each plot of land in a row, and a budget that Yoru is willing to spend to increase the height of some of the buildings, make a program to determine the maximum possible height of the shortest building after utilizing the budget. The height of each building can be increased by 1 unit at a cost of 1 for each unit of height increase. Input The input is given in the following format: N B H_1 H_2 H_3 ... H_N The first line contains two integers N (1 leq N leq 100,000), the number of buildings, and B (1 leq B leq 10^9), the budget. The second line contains N space-separated integers H_1, H_2, ... H_N (0 leq H_i leq 10^6), the initial heights of the buildings. Output Output the maximum possible height of the shortest building after using the budget optimally. Examples Input 5 10 3 1 4 1 5 Output 4 Input 3 5 4 4 4 Output 5","solution":"def max_possible_height(N, B, heights): heights.sort() def can_achieve_height(min_height): cost = 0 for h in heights: if h < min_height: cost += min_height - h if cost > B: return False return cost <= B left, right = heights[0], heights[0] + B while left < right: mid = (left + right + 1) // 2 if can_achieve_height(mid): left = mid else: right = mid - 1 return left"},{"question":"You are provided with a list of integers that represents the heights of trees in a row. Your task is to determine the visibility of each tree from the left side. A tree is visible if there are no taller trees before it (to the left). Write a function `find_visible_trees` that takes a list of integers and returns a list of boolean values where each boolean value indicates whether the corresponding tree is visible from the left side. Constraints: * 1 ≤ length of the list ≤ 10^5 * 1 ≤ height of trees ≤ 10^6 * All heights are integers. Function Signature: ``` def find_visible_trees(heights: List[int]) -> List[bool]: ``` Input: * A list of integers representing the heights of trees. Output: * A list of boolean values indicating the visibility of each tree from the left side. Examples: Input: [3, 7, 8, 3, 6, 1] Output: [True, True, True, False, False, False] Explanation: * The first tree (height 3) is always visible. * The second tree (height 7) is taller than the first tree, hence visible. * The third tree (height 8) is taller than the first two trees, hence visible. * The fourth tree (height 3) is not taller than the previous trees, hence not visible. * The fifth tree (height 6) is not taller than the third tree (height 8) to the left, hence not visible. * The sixth tree (height 1) is not taller than any trees before it, hence not visible. Input: [5, 5, 5, 5, 5] Output: [True, False, False, False, False] Explanation: * The first tree is always visible. * All subsequent trees have the same height, hence are not visible since the previous trees block the view. Input: [1, 2, 3, 4, 5] Output: [True, True, True, True, True] Explanation: * All trees are taller than the previous ones, hence all are visible.","solution":"from typing import List def find_visible_trees(heights: List[int]) -> List[bool]: Returns a list of booleans indicating the visibility of each tree from the left side. if not heights: return [] visible = [] max_height = -1 for height in heights: if height > max_height: visible.append(True) max_height = height else: visible.append(False) return visible"},{"question":"You are given two lists of integers. Your task is to compare these lists and find common elements between the two lists. However, there is a twist: once you match a pair of integers, they should be treated as removed from the lists for any further comparisons. Write a function `find_common_elements(list1, list2)` that takes two lists of integers, `list1` and `list2`, as its arguments. The function should return a list of tuples, where each tuple contains a pair of common integers (one from `list1` and one from `list2`). The function should satisfy the following constraints: 1. Each element in the output list should be unique (i.e., no repeated elements). 2. The order of the pairs in the output list does not matter. 3. The elements from `list1` and `list2` should be matched in the order of their appearance. 4. If an element appears more than once in both lists, each appearance is considered unique and should be paired independently. # Function Signature ```python def find_common_elements(list1: List[int], list2: List[int]) -> List[Tuple[int, int]]: ``` # Example ```python assert find_common_elements([1, 2, 2, 3, 4], [2, 2, 3, 3, 5]) == [(2, 2), (2, 2), (3, 3)] assert find_common_elements([4, 3, 2], [1, 2, 3, 4]) == [(2, 2), (3, 3), (4, 4)] assert find_common_elements([1], [2]) == [] ``` # Input - `list1`, `list2`: Two lists of integers where each list contains at most 10^5 elements. # Output - A list of tuples, where each tuple contains a pair of integers that are common between both lists. # Note You can assume that the input lists will always be provided, and each element in the input lists will fit within the standard integer range.","solution":"from typing import List, Tuple def find_common_elements(list1: List[int], list2: List[int]) -> List[Tuple[int, int]]: Finds common elements between list1 and list2, treating matched pairs as removed from further consideration. Args: list1: A list of integers. list2: A list of integers. Returns: A list of tuples, where each tuple contains a pair of common integers (one from list1 and one from list2). common_elements = [] copy_of_list2 = list2.copy() for element in list1: if element in copy_of_list2: common_elements.append((element, element)) copy_of_list2.remove(element) # Remove the element once matched return common_elements"},{"question":"In a distant future, humans have successfully established colonies on Mars. To facilitate smooth communication between various outposts, a unique signal transmission system has been set up. Outposts are located on a 2D plane and signals travel in a straight line from one outpost to another. As part of the signal transmission system, every outpost transmits signals periodically to the nearest other outpost. However, due to interference, if multiple signals from different outposts reach an outpost at the exact same time, all signals at that time are lost. You are tasked with ensuring efficient communication by analyzing the signal schedule. Your goal is to determine the number of outposts which successfully receive signals without any interference at least once. Input Multiple datasets are given as input. The end of the input is indicated by a line containing a single zero. Each dataset is given in the following format: N x1 y1 t1 x2 y2 t2 :: xN yN tN The first line gives the number of outposts N (2 ≤ N ≤ 100). The following N lines give the i-th outpost information xi, yi (-1000 ≤ xi, yi ≤ 1000) which are coordinates of the outpost and ti (1 ≤ ti ≤ 500), the period in minutes at which the outpost sends out a signal. Output For each dataset, print the number of outposts that successfully receive signals at least once without any interference. Example Input 3 0 0 3 4 0 2 2 4 5 4 0 0 4 3 3 4 -3 3 4 0 6 4 0 Output 3 4 Note: Each dataset is separated by its own output in a new line.","solution":"from math import gcd from itertools import combinations def lcm(a, b): return abs(a*b) // gcd(a, b) def solve(data): index = 0 results = [] while index < len(data): n = int(data[index].strip()) if n == 0: break index += 1 outposts = [] for _ in range(n): x, y, t = map(int, data[index].strip().split()) outposts.append((x, y, t)) index += 1 # Array to store the time map for each outpost signal_map = [set() for _ in range(n)] for (i, (x1, y1, t1)), (j, (x2, y2, t2)) in combinations(enumerate(outposts), 2): d = abs(x1 - x2) + abs(y1 - y2) inter_time = lcm(t1, t2) for k in range(d, inter_time + 1, d): if k % t1 == 0 and k % t2 == 0: signal_map[i].add(k) signal_map[j].add(k) success_count = 0 for signals in signal_map: if len(signals) == 0: success_count += 1 else: time_slots_counter = {} for time in signals: if time in time_slots_counter: time_slots_counter[time] += 1 else: time_slots_counter[time] = 1 if all(count == 1 for count in time_slots_counter.values()): success_count += 1 results.append(success_count) return results def main(): import sys data = sys.stdin.read().strip().split(\\"n\\") results = solve(data) for result in results: print(result)"},{"question":"In a faraway kingdom, there are two kinds of magical creatures: dragons and phoenixes. Each creature has a power level represented by an integer, and the king wants to create teams of exactly two creatures, such that the power levels of the two creatures in each team sum up to the same target value. Given a list of integers representing the power levels of the creatures and a target sum, write a program to find the number of valid teams that can be formed. A creature can only be part of one team, and each team must consist of exactly two creatures. If no valid teams can be formed, return 0. Input The first line of input will contain two integers n (1 ≤ n ≤ 105) and target (1 ≤ target ≤ 109), where n is the number of creatures and target is the target sum of the power levels of two creatures. The second line will contain n space-separated integers representing the power levels of the creatures. Output Print a single integer, the number of valid teams that can be formed. Examples Input 5 7 1 2 3 4 5 Output 2 Input 6 8 2 3 4 5 6 7 Output 2 Input 4 10 1 9 1 9 Output 2 Note In the first example, the valid teams are: (2, 5) and (3, 4). Hence the output is 2. In the second example, the valid teams are: (1, 7) and (2, 6). Hence the output is 2. In the third example, the valid teams are: (1, 9) and (1, 9). Hence the output is 2.","solution":"def find_valid_teams(n, target, power_levels): This function finds the number of valid teams of magical creatures whose power levels sum up to the target value. Parameters: - n (int): The number of creatures. - target (int): The target sum for the power levels of two creatures in a team. - power_levels (list of int): The power levels of the creatures. Returns: int: The number of valid teams that can be formed. from collections import Counter power_counter = Counter(power_levels) num_teams = 0 for power in list(power_counter.keys()): complement = target - power if complement in power_counter: if power == complement: count = power_counter[power] // 2 else: count = min(power_counter[power], power_counter[complement]) num_teams += count power_counter[power] -= count power_counter[complement] -= count return num_teams"},{"question":"You are given a list of integers representing a sequence of stock prices recorded at regular intervals. Your task is to find the maximum possible profit made by buying and then later selling a stock. You can only perform one buy and one sell operation, and you must buy the stock before you can sell it. If no profit can be made, return 0. Constraints * All values in the input are integers. * 1 ≤ N ≤ 10^5 * 0 ≤ prices[i] ≤ 10^9 for all 0 ≤ i < N Input The input is given from Standard Input in the following format: N price_1 price_2 price_3 cdots price_N Output Print the maximum possible profit. If no profit can be made, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0","solution":"def max_profit(prices): Returns the maximum possible profit from a list of stock prices. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Given a list of distinct integers representing the positions of stones in a river, you need to determine whether a frog can cross the river by landing on the last stone. The frog can make a jump of (k-1), k, or (k+1) units from a stone where k is the distance of the last jump the frog made. The first jump is 1 unit from the first stone (position 0). Write a function `canCross(stones: List[int]) -> bool` that takes in a list of integers and returns a boolean indicating whether the frog can cross to the last stone. # Input - A single integer array `stones` where `stones[0] = 0` and the positions of the stones are in a strictly increasing order. - The length of `stones` will be at most 2000. # Output - Return `True` if the frog can reach the last stone, otherwise return `False`. # Example Example 1 ```python Input: stones = [0,1,3,5,6,8,12,17] Output: True Explanation: Jump sequentially: 1->2->2->1->2->3->4, the frog can reach the last stone. ``` Example 2 ```python Input: stones = [0,1,2,3,4,8,9,11] Output: False Explanation: There is no way to jump to the last stone. ``` # Constraint - `stones[0]` is always 0.","solution":"def canCross(stones): if not stones or stones[0] != 0: return False # Dictionary to store positions for easy lookup stone_positions = {stone: set() for stone in stones} stone_positions[0].add(1) for stone in stones: for step in stone_positions[stone]: reach = stone + step if reach == stones[-1]: return True if reach in stone_positions: if step - 1 > 0: stone_positions[reach].add(step - 1) stone_positions[reach].add(step) stone_positions[reach].add(step + 1) return False"},{"question":"Problem Statement: Jane and Rohan love to work out and keep healthy. They decided to organize a competition to compare their fitness levels. They agreed to measure their heart rates continuously over a certain period and then analyze the data. You are given two lists of integers representing the heart rates of Jane and Rohan at different time stamps during their workout session. Your task is to help determine whose heart rate showed the highest single increase between two consecutive time stamps. If both have the same maximum increase, print \\"Draw\\". Note: Only increases are to be considered, decreases or no change in heart rate are not to be counted. Input: - The first line contains an integer N, the number of heart rate measurements taken for each person. - The second line contains N space-separated integers representing Jane\'s heart rates at each time stamp. - The third line contains N space-separated integers representing Rohan\'s heart rates at each time stamp. Output: Print who had the highest increase in heart rate between any two consecutive time stamps - \\"Jane\\" or \\"Rohan\\". If both have the same maximum increase, print \\"Draw\\". Print a single integer on a new line representing the maximum increase in heart rate between any two consecutive time stamps. Constraints: 2 ≤ N ≤ 10^5 1 ≤ heart rate ≤ 300 SAMPLE INPUT 4 80 81 83 100 78 80 85 95 SAMPLE OUTPUT Jane 17 Explanation - For Jane, the increments between consecutive time stamps are [1, 2, 17], with a maximum increase of 17. - For Rohan, the increments between consecutive time stamps are [2, 5, 10], with a maximum increase of 10. - Thus, Jane had the highest increase in heart rate, which was 17.","solution":"def find_max_increase(N, jane_rates, rohan_rates): max_increase_jane = 0 max_increase_rohan = 0 for i in range(1, N): jane_increase = jane_rates[i] - jane_rates[i - 1] rohan_increase = rohan_rates[i] - rohan_rates[i - 1] if jane_increase > max_increase_jane: max_increase_jane = jane_increase if rohan_increase > max_increase_rohan: max_increase_rohan = rohan_increase if max_increase_jane > max_increase_rohan: return \\"Jane\\", max_increase_jane elif max_increase_rohan > max_increase_jane: return \\"Rohan\\", max_increase_rohan else: return \\"Draw\\", max_increase_jane"},{"question":"You are given a rectangular grid with R rows and C columns, where each cell can either be empty (.) or contain an obstacle (#). You want to start at the top-left corner of the grid (position (1, 1)) and reach the bottom-right corner (position (R, C)). You can only move to the right or down from any cell. Your task is to determine if there is a path from the top-left corner to the bottom-right corner using the allowed moves. If a path exists, print \\"YES\\". Otherwise, print \\"NO\\". Input The input consists of multiple test cases. Each test case starts with a line containing two integers R and C (2 ≤ R, C ≤ 100), the number of rows and columns in the grid. Each of the next R lines contains a string of C characters representing the grid, where each character is either \'.\' (an empty cell) or \'#\' (an obstacle). The end of input is indicated by a line with two zeros. Output For each test case, print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Example Input 3 3 ... .#. ... 3 3 ... # ... 4 4 .... .. .... .... 0 0 Output YES NO YES","solution":"def is_path_exists(grid): Determines if there is a path from top-left to bottom-right in the grid moving only right or down. R = len(grid) C = len(grid[0]) if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return \\"NO\\" visited = [[False] * C for _ in range(R)] directions = [(1, 0), (0, 1)] def dfs(x, y): if x == R-1 and y == C-1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and not visited[nx][ny] and grid[nx][ny] == \'.\': if dfs(nx, ny): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\" def process_input(data): Processes the input data and prints results for each test case. lines = data.strip().split(\'n\') i = 0 results = [] while i < len(lines): R, C = map(int, lines[i].split()) if R == 0 and C == 0: break grid = [lines[i + j + 1] for j in range(R)] results.append(is_path_exists(grid)) i += R + 1 return \'n\'.join(results)"},{"question":"You are given an array of integers, where each element represents a student\'s score in a competition. The competition organizer wants to identify the students who performed above average. Your task is to write a function that returns the number of students who scored above the average score. Input The input consists of a single line containing an array of integers separated by spaces, where each integer represents a student\'s score (0 ≤ score ≤ 100). The array length will not exceed 1000 elements. Output Print a single integer — the number of students who scored above average. Examples Input 80 90 100 70 60 Output 2 Input 50 50 50 50 50 Output 0 Input 10 20 30 40 50 60 Output 3 Note In the first example, the average score is (80 + 90 + 100 + 70 + 60) / 5 = 80. Students with scores above 80 are 90 and 100, so the output is 2. In the second example, the average score is (50 + 50 + 50 + 50 + 50) / 5 = 50. No students scored above 50, so the output is 0. In the third example, the average score is (10 + 20 + 30 + 40 + 50 + 60) / 6 = 35. Students with scores above 35 are 40, 50, and 60, so the output is 3.","solution":"def count_students_above_average(scores): Given a list of student scores, returns the number of students who scored above the average. if not scores: return 0 average_score = sum(scores) / len(scores) count = sum(1 for score in scores if score > average_score) return count # Example of how the function might be used: if __name__ == \\"__main__\\": scores = list(map(int, input().split())) print(count_students_above_average(scores))"},{"question":"There is a garden represented as a grid with R rows and C columns. Each cell in the grid can be either empty or contain a tree. You are tasked to place water fountains in the garden such that every cell with a tree is within the reach of at least one water fountain. A water fountain placed in a cell can water itself and all of the cells that share a row or a column with it (i.e., all cells in the same row and all cells in the same column). You need to determine the minimum number of water fountains required to water all trees. Input The input is given from Standard Input in the following format: R C grid * The first line contains two integers, R and C, the number of rows and columns in the garden grid, respectively. * The next R lines each contain a string of length C consisting of the characters \'.\' and \'T\' where \'.\' represents an empty cell and \'T\' represents a cell containing a tree. Output Print a single integer representing the minimum number of water fountains required. Constraints * 1 ≤ R, C ≤ 1000 * Each character in the grid is either \'.\' or \'T\' Examples Input 4 4 .T.. ..T. ..T. .... Output 2 Input 3 3 .T. .T. .T. Output 1 Input 5 5 ..... ..T.. ..... .T.T. ..... Output 2","solution":"def min_fountains(r, c, grid): row_has_tree = [False] * r col_has_tree = [False] * c for i in range(r): for j in range(c): if grid[i][j] == \'T\': row_has_tree[i] = True col_has_tree[j] = True row_fountains = sum(row_has_tree) col_fountains = sum(col_has_tree) return min(row_fountains, col_fountains)"},{"question":"Given is a list of integers. Find the length of the longest subarray with sum equal to 0. A subarray is a contiguous part of an array. Constraints: * The length of the list is at least 1 and at most 10000. * The integers in the list are within the range of -10^5 to 10^5. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Where: - n is the length of the list. - a_1, a_2, ..., a_n are the integers in the list. Output Print the length of the longest subarray with sum equal to 0. If no such subarray exists, print 0. Examples Input 10 1 -1 3 2 -2 -3 3 1 -1 2 Output 6 Input 5 1 2 3 4 5 Output 0","solution":"def longest_zero_sum_subarray_length(arr): Returns the length of the longest subarray with a sum of 0. prefix_sum_map = {} current_sum = 0 max_length = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0: max_length = i + 1 if current_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[current_sum]) else: prefix_sum_map[current_sum] = i return max_length # Input processing if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = longest_zero_sum_subarray_length(arr) print(result)"},{"question":"You are given a list of strings, and your task is to sort them based on their lengths. If two strings have the same length, they should remain in their original relative order (stable sort). Input: The first line contains an integer N, denoting the number of strings in the list. The next N lines each contain a string, denoting the elements of the list. Output: Print the strings sorted by their lengths in ascending order. Constraints: 1 ≤ N ≤ 1000 1 ≤ length of each string ≤ 100 SAMPLE INPUT 5 apple pie banana a strawberry SAMPLE OUTPUT a pie apple banana strawberry","solution":"def sort_strings_by_length(strings): Sorts a list of strings based on their lengths in ascending order. If two strings have the same length, they maintain their original relative order. Parameters: strings (list): List of strings to be sorted. Returns: list: Sorted list of strings based on their lengths. return sorted(strings, key=len) # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split(\'n\') N = int(data[0]) strings = data[1:N+1] sorted_strings = sort_strings_by_length(strings) for string in sorted_strings: print(string)"},{"question":"Ravi has a rectangular garden that he wants to divide into smaller, equal-sized square plots for planting different crops. He also needs to install fencing around each square plot. Given the length and width of the garden, help Ravi determine the length of the side of the largest possible square plot that can fit evenly into the garden. Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains two integers L and W, the length and width of the garden respectively. Output: For each test case, print the length of the side of the largest possible square plot that can fit evenly into the garden. Constraints: 1 ≤ T ≤ 10 1 ≤ L, W ≤ 10^9 SAMPLE INPUT 2 15 20 10 25 SAMPLE OUTPUT 5 5","solution":"import math def largest_square_plot_side(length, width): Determines the length of the side of the largest possible square plot that can fit evenly into the garden of given length and width. Args: length (int): The length of the garden. width (int): The width of the garden. Returns: int: The side length of the largest square plot. # The side length of the largest square plot that fits evenly is the GCD of length and width return math.gcd(length, width) def process_test_cases(test_cases): results = [] for length, width in test_cases: results.append(largest_square_plot_side(length, width)) return results # Example usage for the input format def solve(T, test_cases): return process_test_cases(test_cases)"},{"question":"You are given the task of evaluating the fitness level of a group of athletes based on their running times. There are `n` athletes and each athlete has completed `m` laps. The completion time for each lap of each athlete is provided. Your task is to determine the athlete with the fastest average lap time. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of athletes and the number of laps each athlete has completed. The next n lines each contain m integers. Each integer in the j-th position of the i-th line represents the time taken by the i-th athlete to complete the j-th lap in seconds. Output Print a single integer — the index of the athlete (1-based) with the fastest average lap time. If multiple athletes have the same fastest average time, print the smallest index. Example Input 3 3 12 15 10 10 10 10 15 10 16 Output 2 Note In the sample input, the average lap times for the athletes are as follows: - Athlete 1: (12 + 15 + 10) / 3 = 12.33 - Athlete 2: (10 + 10 + 10) / 3 = 10 - Athlete 3: (15 + 10 + 16) / 3 = 13.67 Athlete 2 has the fastest average lap time, so the output is 2.","solution":"def find_fastest_athlete(n, m, lap_times): Returns the index (1-based) of the athlete with the fastest average lap time. fastest_avg_time = float(\'inf\') fastest_athlete_index = -1 for i in range(n): avg_time = sum(lap_times[i]) / m if avg_time < fastest_avg_time: fastest_avg_time = avg_time fastest_athlete_index = i + 1 return fastest_athlete_index"},{"question":"You are given a rectangular grid of size n × m, where each cell contains a lowercase letter from the English alphabet. A sequence of adjacent cells in the grid forms a path if all cells in the path horizontally or vertically share a common letter. The length of a path is the number of cells it contains. Find the longest path in the grid and output its length. If there are multiple longest paths, output the length of any one of them. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), denoting the number of rows and columns of the grid, respectively. The next n lines each contain a string of m lowercase letters, representing the grid. Output Output a single integer — the length of the longest path consisting of vertically or horizontally adjacent cells that share a common letter. Examples Input 4 5 abcde abfgh ijklm nopqr Output 2 Input 3 3 aaa aaa aaa Output 9","solution":"def longest_path_length(n, m, grid): Finds the length of the longest path of adjacent cells sharing a common letter. def dfs(x, y, visited, char): stack = [(x, y)] path_length = 0 while stack: cx, cy = stack.pop() if (cx, cy) in visited: continue visited.add((cx, cy)) path_length += 1 for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == char and (nx, ny) not in visited: stack.append((nx, ny)) return path_length max_length = 0 visited = set() for i in range(n): for j in range(m): if (i, j) not in visited: max_length = max(max_length, dfs(i, j, visited, grid[i][j])) return max_length"},{"question":"Problem: Planning an optimal battery recharge schedule Sarah is an operations manager of a company that runs a fleet of electric delivery vehicles. Each vehicle has a daily schedule with a set of delivery trips. To operate sustainably, Sarah needs to determine the optimal recharge schedule for all the vehicles. Each vehicle departs from and returns to the company\'s charging station. The battery consumption during a trip depends on the distance traveled. Once a vehicle returns to the station, it can be recharged if needed. The company aims to minimize the total recharge time at the station. The charging station can only recharge one vehicle at a time. Sarah wants to determine the minimum total recharge time required under two different policies: 1. Policy-1: The vehicles are allowed to recharge at any available time slot, based on arrival time. To minimize the queue time, each vehicle starts recharging as soon as possible when it arrives. 2. Policy-2: All vehicles\' schedules are known beforehand, and an optimal recharge schedule is created such that the total recharge time is minimized, potentially starting the recharging at a later time if that results in an overall better schedule. Given the battery consumption data for each trip and the recharge times for each vehicle, you need to help Sarah determine the minimum total recharge time under both policies. Input The input consists of a single test case of the following format: ``` n d_1 r_1 ... d_n r_n ``` Here, the first line contains an integer n, the number of vehicles in the fleet (1 leq n leq 100,000). Each of the following n lines describes the daily schedule of each vehicle i by two integers, d_i and r_i, respectively (1 leq d_i leq 1,000,000) and (1 leq r_i leq 100,000), which denote the distance covered and the recharge time needed for the vehicle. Output Two integers t_1 and t_2 should be output on a single line, separated by a space. t_1 and t_2 are the total minimum recharge time required under policy-1 and policy-2, respectively. Example Input ``` 4 50 30 80 20 60 25 40 15 ``` Output ``` 70 50 ``` Explanation: Under policy-1, vehicles 1 and 3 can start recharging when they arrive. Vehicle 2 waits for vehicle 1 to finish, and vehicle 4 waits for vehicle 3 to finish. The total recharge time is the sum of their individual recharge times accounting for some possible waiting time. Under policy-2, the recharging schedule can be optimized. For example, vehicle 4 might start its recharge slightly later to fit an overall more efficient schedule, resulting in lower total recharge time. Your task is to compute the optimal total recharge time for both policies given the trips\' distances and vehicles\' recharge times.","solution":"def min_recharge_time(n, trips): trips.sort(key=lambda x: (x[0], x[1])) # Sort primarily by arrival time, secondarily by recharge time # Policy-1: Greedy based on arrival time end_time = 0 for _, recharge_time in trips: end_time += recharge_time policy1_time = end_time # Policy-2: Optimal recharge schedule trips.sort(key=lambda x: x[1]) # Sort by recharge time only end_time = 0 for distance, recharge_time in trips: end_time += recharge_time policy2_time = end_time return policy1_time, policy2_time"},{"question":"A research organization has developed a unique way of encoding strings through a series of transformations. They take an input string and perform multiple operations to generate a set of encoded strings, which are then scrambled together to form the final output. The encoding operations can be represented as follows: 1. The input string is rotated to the left by one position. 2. The input string is reversed. 3. Every character in the input string is shifted forward by one position in the alphabet. For example, \'a\' becomes \'b\', \'z\' becomes \'a\'. 4. Every character in the input string is shifted backward by one position in the alphabet. For example, \'b\' becomes \'a\', \'a\' becomes \'z\'. Given an input string, M, you need to implement a function that performs the above transformations, combines the results, and returns the final encoded string. # Input - A single line of input containing the original string, M. You can assume the string length is between 1 and 50 characters, and consists only of lowercase alphabetic characters. # Output - A single string that consists of the concatenated and shuffled transformations of the input string. # Example - Input: ```plaintext abc ``` - Output: ```plaintext bcabczyx ``` - Left rotation: \'bca\' - Reverse: \'cba\' - Shift forward: \'bcd\' - Shift backward: \'zab\' For the input `\'abc\'`, your function should output the concatenated results of all transformations. Note: Output order of the concatenated string does not matter as long as it correctly reflects the results of all transformations applied to the input string.","solution":"def encode_string(M): def rotate_left(s): return s[1:] + s[0] def reverse_str(s): return s[::-1] def shift_forward(s): return \'\'.join(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) for char in s) def shift_backward(s): return \'\'.join(chr((ord(char) - ord(\'a\') - 1) % 26 + ord(\'a\')) for char in s) rotated = rotate_left(M) reversed_str = reverse_str(M) shifted_forward = shift_forward(M) shifted_backward = shift_backward(M) return rotated + reversed_str + shifted_forward + shifted_backward"},{"question":"The mythical kingdom of Quadratica is known for its magnificent grid-based puzzles. The king has recently introduced a new challenge that even the kingdom\'s most intelligent mathematicians are struggling to solve. The challenge revolves around arranging knights on a chessboard such that none of them can attack each other. Remember, a knight moves in an L-shape: it can move two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Given an n x n chessboard, you must place the maximum possible number of knights such that no two knights can attack each other. Your task is to determine this maximum number and provide one possible configuration. Input The first line contains the single integer n (1 ≤ n ≤ 50), the size of the chessboard. Output On the first line, print the maximum number of knights that can be placed on the board such that no two knights can attack each other. On the next n lines, print the chessboard configuration where \'K\' indicates a knight and \'.\' indicates an empty square. If there are multiple solutions, any valid configuration will be accepted. Examples Input 3 Output 5 K . K . K . K . K Input 4 Output 8 K . K . . K . K K . K . . K . K Note: Your solution should ensure that no two knights are placed such that they can attack each other, adhering to the unique movement pattern of the knight in chess.","solution":"def maximum_knights(n): Determine the maximum number of knights that can be placed on an n x n chessboard such that no two knights can attack each other. board = [[\'.\' for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): if (i + j) % 2 == 0: board[i][j] = \'K\' count = sum(row.count(\'K\') for row in board) return count, board"},{"question":"You are tasked with helping an urban planning team to analyze the layout of a city park. The park is designed in the shape of a rectangle. The team has provided the coordinates of the lower-left corner of the park and the upper-right corner of the park. They want to place several surveillance cameras at various points to monitor the park area, and your task is to determine which cameras are properly within the park boundaries. The coordinates of the cameras will also be given, and you need to check each camera’s position to determine if it is inside or outside the park boundaries. Write a program that takes multiple test cases. Each test case includes the coordinates of the park\'s lower-left and upper-right corners followed by the coordinates of a camera. Your program should output \\"INSIDE\\" if the camera is within the rectangular area of the park and \\"OUTSIDE\\" if it is not. INPUT: The first line contains a single integer \\"T\\", the number of test cases. Each of the \\"T\\" lines contains the coordinates of the lower-left corner (X1, Y1), the upper-right corner (X2, Y2) of the rectangular park, and the coordinates of the camera (X3, Y3). OUTPUT: For each test case print \\"OUTSIDE\\" if the camera is outside the rectangular area of the park, if the camera is inside the park, print \\"INSIDE\\". Constraints: 1 ≤ T ≤ 1000 -1000 ≤ coordinates ≤ 1000 SAMPLE INPUT 2 0 0 4 4 2 2 1 1 5 5 6 3 SAMPLE OUTPUT INSIDE OUTSIDE Explanation In the first case, the camera is inside the rectangular park boundaries. In the second case, the camera is outside the park boundaries as it is beyond the upper-right corner.","solution":"def check_camera_position(test_cases): results = [] for case in test_cases: X1, Y1, X2, Y2, X3, Y3 = case if X1 <= X3 <= X2 and Y1 <= Y3 <= Y2: results.append(\\"INSIDE\\") else: results.append(\\"OUTSIDE\\") return results"},{"question":"You are given a list of strings where each string represents a line of code written in a hypothetical programming language. This language has the following characteristics: 1. All lines of code are to be executed in sequence as listed. 2. The language contains only two types of statements: - Assignment: `variable = expression` - Print: `print(variable)` 3. An expression is a mathematical operation on one or more variables or constants (provided all variables used within an expression have an integer value). An integer is considered constant if it does not change throughout the program\'s execution. Your task is to determine the sequence of printed values after running the entire code. Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of lines of code. Each of the next n lines contains a statement formatted as described above. Output Output each printed value in the sequence as found after executing the entire code. Example Input 6 a = 3 b = a + 1 print(b) c = 5 print(a + c) print(b + c) Output 4 8 9","solution":"def execute_code(lines): Takes a list of code lines and returns the output of all print statements variables = {} output = [] for line in lines: if line.startswith(\\"print(\\"): # Extract the expression inside print expression = line[6:-1] to_print = eval(expression, {}, variables) output.append(str(to_print)) else: # Extract variable and expression from assignment var, expression = line.split(\\" = \\") variables[var] = eval(expression, {}, variables) return output"},{"question":"You are given a grid containing only \'.\' (empty) and \'#\' (blocked) cells. The task is to perform a flood fill from a given starting position. Starting at this position, you will change the color of all connected \'.\' cells to a \'*\' character. Two cells are connected if they share a side. Write a function `flood_fill(grid, start_row, start_col)` that takes in a grid of dimensions MxN (1 <= M, N <= 100), where each element is either \'.\' or \'#\', and a pair of coordinates (start_row, start_col) indicating the start position for the flood fill. Your task is to output the modified grid after performing the flood fill. Consider the following rules: 1. If the start position contains a \'#\', the grid should remain unchanged. 2. If the start position `start_row`, `start_col` is out of bounds, the grid should remain unchanged. 3. You can assume that the start_row and start_col are given as 0-based indices. Input The input consists of: - An integer T, the number of test cases. (1 <= T <= 50) - For each test case, the first line contains two integers M and N, the number of rows and columns in the grid. - The next M lines each contain N characters representing the grid. - The last line contains two integers, start_row and start_col, the starting position for the flood fill. Output For each test case, output the modified grid after performing the flood fill. Sample Input 2 4 5 ..... ..#.. .#... ..... 1 1 3 3 .#. #.. .#. 0 0 Sample Output ***** **#** *#*** ***** .#. #.. .#.","solution":"def flood_fill(grid, start_row, start_col): Performs a flood fill on the grid starting at (start_row, start_col). if not (0 <= start_row < len(grid)) or not (0 <= start_col < len(grid[0])): return grid # Out of bounds, return the grid unchanged if grid[start_row][start_col] == \'#\': return grid # Start position is blocked, return the grid unchanged def fill(r, c): if (0 <= r < len(grid)) and (0 <= c < len(grid[0])) and grid[r][c] == \'.\': grid[r][c] = \'*\' fill(r+1, c) fill(r-1, c) fill(r, c+1) fill(r, c-1) fill(start_row, start_col) return grid def process_input(T, test_cases): results = [] for t in range(T): m, n = test_cases[t][0] grid = test_cases[t][1] start_row, start_col = test_cases[t][2] modified_grid = flood_fill(grid, start_row, start_col) results.append(modified_grid) return results"},{"question":"In a game development project, there is a requirement to determine if a given point is inside a defined rectangle on a 2D plane. Each rectangle is defined by two opposite corners (x1, y1) and (x2, y2), and each point is specified by its coordinates (px, py). Write a program to check if the given point lies inside or on the boundary of the rectangle. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains four space-separated integers x1, y1, x2, y2 representing the coordinates of two opposite corners of the rectangle. The second line contains two space-separated integers px and py denoting the coordinates of the point to be checked. Output For each test case, output \\"INSIDE\\" if the point is inside or on the boundary of the rectangle, otherwise, output \\"OUTSIDE\\". Constraints 1 ≤ T ≤ 100 -10^4 ≤ x1, y1, x2, y2, px, py ≤ 10^4 Example Input: 3 0 0 2 2 1 1 0 0 2 2 3 3 -1 -1 1 1 0 0 Output: INSIDE OUTSIDE INSIDE Explanation Example case 1. The point (1, 1) is inside the rectangle with corners at (0, 0) and (2, 2). Example case 2. The point (3, 3) is outside the rectangle with corners at (0, 0) and (2, 2). Example case 3. The point (0, 0) is inside the rectangle with corners at (-1, -1) and (1, 1).","solution":"def is_point_inside_rectangle(x1, y1, x2, y2, px, py): Check if the point (px, py) is inside or on the boundary of the rectangle defined by (x1, y1, x2, y2). left = min(x1, x2) right = max(x1, x2) bottom = min(y1, y2) top = max(y1, y2) if left <= px <= right and bottom <= py <= top: return \\"INSIDE\\" else: return \\"OUTSIDE\\" def process_test_cases(T, cases): results = [] for case in cases: x1, y1, x2, y2, px, py = case result = is_point_inside_rectangle(x1, y1, x2, y2, px, py) results.append(result) return results"},{"question":"# Sum of Powers of Digits In ancient times, mathematicians were fascinated by numbers and their properties. One such number is a \\"SumPower\\" number. A number is said to be a SumPower number if the sum of its digits each raised to the power of their respective positions, starting from 1, equals the number itself. For example, 89 is a SumPower number because (8^1 + 9^2 = 8 + 81 = 89). Your task is to identify if a given number is a SumPower number. Write a program that checks whether a given number is a SumPower number and prints \\"Yes\\" if it is and \\"No\\" otherwise. # Input - The first line contains an integer `T`, the number of test cases. (1 ≤ T ≤ 50) - The following `T` lines each contain one integer `N` (1 ≤ N ≤ 10^9) to be checked. # Output - For each test case, output \\"Yes\\" if `N` is a SumPower number, otherwise output \\"No\\". # Example Input ``` 3 89 135 1234 ``` Output ``` Yes Yes No ``` Explanation For the first test case, (8^1 + 9^2 = 8 + 81 = 89), so the output is \\"Yes\\". For the second test case, (1^1 + 3^2 + 5^3 = 1 + 9 + 125 = 135), so the output is \\"Yes\\". For the third test case, (1^1 + 2^2 + 3^3 + 4^4) does not equal 1234, so the output is \\"No\\". Assume the first test case\'s example input is valid Roman numerals and directly check the code accordingly.","solution":"def is_sum_power(n): Checks if the given number is a SumPower number. digits = str(n) sum_power = sum(int(digits[i]) ** (i + 1) for i in range(len(digits))) return sum_power == n def check_sum_power_numbers(test_cases): results = [] for n in test_cases: if is_sum_power(n): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are a prisoner in a strange world with only your laptop as a companion. Suddenly, a mystical creature appears, offering you freedom if you can solve the following challenge: You are given a binary tree with `n` nodes, where each node has a unique value from `1` to `n`. For each node, you can perform the following operations: * Swap the left and right children of the node. * Remove a node and its corresponding subtree from the binary tree. Your goal is to determine if it is possible to transform the initial binary tree into a target binary tree by applying the above operations a finite number of times. If it is possible, you must also provide the sequence of operations. **Input** The first line contains a single integer `n` (1 ≤ n ≤ 10^5), representing the number of nodes in the binary tree. The next `n` lines describe the nodes of the initial binary tree in the following format: `value left_child right_child` Here, `value` is the node\'s value, `left_child` and `right_child` are the values of the left and right children respectively. If a node does not have a left or right child, `left_child` or `right_child` will be `-1`. The next `n` lines describe the nodes of the target binary tree in the same format. **Output** If it is not possible to transform the initial binary tree into the target binary tree, print \\"IMPOSSIBLE\\" (without quotes). Otherwise, print \\"POSSIBLE\\" (without quotes). Print the number of operations `m` on a separate line. On the next `m` lines, print the sequence of operations. Each operation should be in one of the following formats: * \\"SWAP value\\" — to swap the left and right children of the node with the given value. * \\"REMOVE value\\" — to remove the node with the given value and its corresponding subtree. If there are multiple solutions, you can print any of them. **Examples** **Input** 6 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 6 6 -1 -1 6 1 3 2 3 5 -1 2 6 4 5 -1 -1 6 -1 -1 4 -1 -1 **Output** POSSIBLE 5 SWAP 1 SWAP 2 REMOVE 4 SWAP 3 REMOVE 6 **Input** 4 1 2 -1 2 3 -1 3 4 -1 4 -1 -1 4 1 2 -1 2 -1 3 3 -1 4 4 -1 -1 **Output** IMPOSSIBLE","solution":"class TreeNode: def __init__(self, value=-1, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_descriptors): nodes = {} for desc in node_descriptors: value, left, right = desc if value not in nodes: nodes[value] = TreeNode(value) if left != -1: if left not in nodes: nodes[left] = TreeNode(left) nodes[value].left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) nodes[value].right = nodes[right] return nodes[node_descriptors[0][0]] # return the root def trees_are_identical(node1, node2): if not node1 and not node2: return True if not node1 or not node2: return False return (node1.value == node2.value and trees_are_identical(node1.left, node2.left) and trees_are_identical(node1.right, node2.right)) def swap_children(node): node.left, node.right = node.right, node.left def can_transform(init_root, target_root): if trees_are_identical(init_root, target_root): return True, [] operations = [] def transform(node1, node2): if trees_are_identical(node1, node2): return True if node1.value != node2.value: return False # Recursively swap and transform if trees_are_identical(node1.right, node2.left) and trees_are_identical(node1.left, node2.right): operations.append(f\\"SWAP {node1.value}\\") swap_children(node1) if node1.left and node2.left and transform(node1.left, node2.left): return transform(node1.right, node2.right) elif node1.left and node2.right and transform(node1.left, node2.right): operations.append(f\\"SWAP {node1.value}\\") swap_children(node1) return transform(node1.right, node2.left) return False if transform(init_root, target_root): return True, operations else: return False, [] def solve(n, initial_tree, target_tree): if n == 0: return \\"POSSIBLEn0n\\" initial_root = build_tree(initial_tree) target_root = build_tree(target_tree) possible, operations = can_transform(initial_root, target_root) if not possible: return \\"IMPOSSIBLE\\" else: return f\\"POSSIBLEn{len(operations)}n\\" + \\"n\\".join(operations)"},{"question":"A gaming company develops multiple online games, and they have a system that logs player activity data every second. Each log contains information about the player ID and the score they earned at that particular second. The company wants to analyze the data to calculate the total score earned by each player over a specific time interval. Write a function that takes the number of logs, an array of logs, and a list of query intervals. Each log entry is represented as a tuple (timestamp, player_id, score), where timestamp is the second at which the activity was recorded, player_id is the identifier of the player, and score is the score earned at that second. Each query interval is represented as a tuple (start_time, end_time) where start_time and end_time are the inclusive bounds of the interval in seconds. Your function should return a list of dictionaries, where each dictionary corresponds to a query interval and contains player IDs as keys and their total scores within that interval as values. Input: - An integer `n` representing the number of logs. - A list of `n` tuples `logs`, each tuple contains three integers (timestamp, player_id, score). - A list of `k` tuples `query_intervals`, each tuple contains two integers (start_time, end_time). Output: - A list of `k` dictionaries, where each dictionary has player IDs as keys and their total scores within the respective interval as values. Example: ```python def calculate_scores(n, logs, query_intervals): pass # Sample input n = 5 logs = [ (1, 1, 10), (2, 2, 20), (3, 1, 15), (4, 2, 25), (5, 1, 5) ] query_intervals = [ (1, 3), (2, 5) ] # Sample output [ {1: 25, 2: 20}, {1: 20, 2: 45} ] ``` Note: - The timestamps in logs are in non-decreasing order. - Player IDs are positive integers. - Scores are non-negative integers. - There might be gaps in the timestamps, and not every second within the interval is guaranteed to have associated logs. - The intervals provided in query_intervals are valid i.e., start_time ≤ end_time.","solution":"def calculate_scores(n, logs, query_intervals): from collections import defaultdict # Create a dictionary to accumulate scores for each player and timestamp scores_by_timestamp = defaultdict(lambda: defaultdict(int)) # Populate the dictionary with the log data for timestamp, player_id, score in logs: scores_by_timestamp[timestamp][player_id] += score results = [] # Process each query interval for start_time, end_time in query_intervals: query_result = defaultdict(int) for timestamp in range(start_time, end_time + 1): for player, score in scores_by_timestamp[timestamp].items(): query_result[player] += score results.append(dict(query_result)) return results"},{"question":"Peter loves to play with numbers. He recently invented a new game where he picks a sequence of non-negative integers and wants you to figure out certain characteristics of the sequence. Here\'s how he plays the game: * Peter picks a sequence of n non-negative integers. * He allows you to ask up to m queries of two types: * sum l r – find the sum of the elements from index l to index r (inclusive). * max l r – find the maximum element in the range from index l to index r (inclusive). * After gathering enough information, you must guess the entire sequence Peter picked. You have a single chance to guess the sequence. If your guess is correct, you win the game. If it\'s incorrect, you lose. Interaction You start by reading the integers n and m where n (1 ≤ n ≤ 100) is the length of the sequence, and m (2n ≤ m ≤ 3n) is the number of queries you can make. To ask a query of the first type (sum query), you should output: sum l r A single line containing the sum of elements from index l to index r (inclusive) will be returned. To ask a query of the second type (max query), you should output: max l r A single line containing the maximum element from index l to index r (inclusive) will be returned. Once you believe you have deduced the entire sequence, you should guess it by outputting: guess s_1 s_2 ... s_n where s_i represents the i-th element of the sequence. If your guess is incorrect or you violate the rules, you will receive a Wrong answer verdict. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 2n ≤ m ≤ 3n). Interaction You start the interaction by reading the integers n and m. Each query should be of the format described above (sum l r or max l r). Output a single line: guess followed by the sequence of n non-negative integers separated by spaces. After printing each query, do not forget to flush the output. Example Consider the following scenario: The sequence chosen by Peter is [3, 5, 7, 2]. Input: 4 10 Output: sum 1 2 max 3 4 sum 1 4 guess 3 5 7 2 Input: 20 7 17","solution":"def play_game(n, m, queries_responses): sequence = [0] * n # Collect sum of individual elements for i in range(n): print(f\'sum {i + 1} {i + 1}\') res = queries_responses.get((f\'sum {i + 1} {i + 1}\'), 0) sequence[i] = res guess_string = \'guess \' + \' \'.join(map(str, sequence)) print(guess_string) return sequence"},{"question":"You are given an array a_1, a_2, …, a_n. You need to answer q queries where you need to update the elements and compute the minimum value in a subarray. For each query, you will perform one of the following two operations: 1. `\\"UPDATE idx val\\"` — update the element at index idx to val. 2. `\\"MIN l r\\"` — find and print the minimum value in the subarray from index l to index r (inclusive). Input: The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Each of the next q lines contains a query in one of the two formats: 1. `\\"UPDATE idx val\\"` (1 ≤ idx ≤ n, 1 ≤ val ≤ 10^9) — update query. 2. `\\"MIN l r\\"` (1 ≤ l ≤ r ≤ n) — range minimum query. Output: For each `\\"MIN\\"` query, print the minimum value in the specified subarray. Example: Input: 5 5 4 3 5 2 6 MIN 1 3 UPDATE 2 1 MIN 1 3 UPDATE 5 0 MIN 4 5 Output: 3 1 0 Note: In the example, we start with the array `[4, 3, 5, 2, 6]`. - The first query returns `3`, the minimum value from index 1 to 3. - The second query updates the second element to `1`, resulting in the array `[4, 1, 5, 2, 6]`. - The third query returns `1`, the minimum value from index 1 to 3. - The fourth query updates the fifth element to `0`, resulting in the array `[4, 1, 5, 2, 0]`. - The fifth query returns `0`, the minimum value from index 4 to 5.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [float(\'inf\')] * (2 * self.n) self.build(array) def build(self, array): for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min(self, left, right): left += self.n right += self.n + 1 minimum = float(\'inf\') while left < right: if left % 2 == 1: minimum = min(minimum, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 minimum = min(minimum, self.tree[right]) left //= 2 right //= 2 return minimum def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == \'MIN\': l, r = int(query[1]) - 1, int(query[2]) - 1 results.append(seg_tree.range_min(l, r)) elif query[0] == \'UPDATE\': idx, val = int(query[1]) - 1, int(query[2]) seg_tree.update(idx, val) return results"},{"question":"You are asked to create a program that simulates a simplified parking lot system. The parking lot has a fixed number of slots, and each slot can either be occupied or empty. The program should be able to process a series of commands to simulate cars entering and leaving the parking lot, as well as reporting the current state of the slots. # Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100), which represents the number of parking slots. The second line contains an integer `m` (1 ≤ m ≤ 1000), which represents the number of commands. Each of the following `m` lines contains a command, which can be one of the following: - \\"ENTER k\\" where `k` (1 ≤ k ≤ n) represents the slot number where a car is trying to park. - \\"LEAVE k\\" where `k` (1 ≤ k ≤ n) represents the slot number that is being vacated. - \\"STATUS\\", which requests the current state of the parking slots. # Output For each \\"STATUS\\" command, output a single line containing the current state of the parking slots. Each slot should be represented by a \'X\' if it is occupied, or an \'O\' if it is empty. The slots should be output in order from 1 to `n`. # Example Input ``` 5 7 ENTER 3 STATUS ENTER 1 LEAVE 3 STATUS ENTER 5 STATUS ``` Output ``` OOXOO XOOOO XOOOX ``` # Explanation 1. Initially, all parking slots are empty: \\"OOOOO\\". 2. After the command \\"ENTER 3\\", slot 3 is occupied: \\"OOXOO\\". 3. The first \\"STATUS\\" command outputs: \\"OOXOO\\". 4. After the command \\"ENTER 1\\", slot 1 is occupied: \\"XOXOO\\". 5. After the command \\"LEAVE 3\\", slot 3 is vacated: \\"XOOOO\\". 6. The second \\"STATUS\\" command outputs: \\"XOOOO\\". 7. After the command \\"ENTER 5\\", slot 5 is occupied: \\"XOOOX\\". 8. The third \\"STATUS\\" command outputs: \\"XOOOX\\".","solution":"def parking_lot_simulation(n, m, commands): slots = [\'O\'] * n # Initialize slots as empty (\\"O\\") result = [] for command in commands: if command.startswith(\\"ENTER\\"): _, k = command.split() k = int(k) if slots[k-1] == \'O\': # If slot is empty slots[k-1] = \'X\' # Park car elif command.startswith(\\"LEAVE\\"): _, k = command.split() k = int(k) if slots[k-1] == \'X\': # If slot is occupied slots[k-1] = \'O\' # Vacate slot elif command == \\"STATUS\\": result.append(\'\'.join(slots)) # Add current status to result return result"},{"question":"A software development company wants to automate part of their task tracking system. They need to parse log files to extract and summarize the status of tasks over different dates. Each log entry provides information about task updates such as creation, progress, or completion. Your task is to write a program that processes a list of log entries and outputs the status of tasks for each date. # Input The input is organized in multiple lines, each representing a log entry and ending with a blank line. Each log entry includes: - A date in the format `YYYY-MM-DD` - A task ID - A status update message that is either \\"Created\\", \\"InProgress\\", or \\"Completed\\" Each piece of the log entry is separated by a space. # Output For each date present in the log, output the task summary in the following format: - Date: `YYYY-MM-DD` - Number of tasks created on that date - Number of tasks in progress on that date - Number of tasks completed on that date Summarize and sort the dates in ascending order. # Example Input ``` 2023-10-01 T001 Created 2023-10-01 T002 Created 2023-10-01 T001 InProgress 2023-10-01 T002 InProgress 2023-10-02 T001 Completed 2023-10-02 T003 Created 2023-10-02 T003 InProgress 2023-10-03 T004 Created 2023-10-03 T004 InProgress 2023-10-03 T004 Completed ``` Output ``` 2023-10-01 Created: 2 InProgress: 2 Completed: 0 2023-10-02 Created: 1 InProgress: 1 Completed: 1 2023-10-03 Created: 1 InProgress: 1 Completed: 1 ``` # Notes - Each log entry corresponds to a single status update of a task. - The number of log entries does not exceed 1000. - If multiple status updates occur for a single task on the same date, each should be counted. Implement the solution in a programming language of your choice.","solution":"def parse_task_logs(logs): Parses the task logs and returns a summary of tasks for each date. Parameters: logs (list): A list of log entries Returns: dict: A dictionary where keys are dates, and values are dictionaries containing the count of \'Created\', \'InProgress\', and \'Completed\' tasks. from collections import defaultdict date_summary = defaultdict(lambda: {\'Created\': 0, \'InProgress\': 0, \'Completed\': 0}) for log in logs: if log.strip(): date, task_id, status = log.split() date_summary[date][status] += 1 sorted_dates = sorted(date_summary.keys()) result = {} for date in sorted_dates: result[date] = date_summary[date] return result"},{"question":"A team of archaeologists is trying to decode the ancient scripts found in a long-lost civilization. The scripts are written in a special language that uses numbered strings to represent sentences. Each word in a sentence is coded as a number, and all words are separated by exactly one space. The language has a specific pattern: the numbers are the lengths of the words in a sentence. For example, the sentence \\"I am happy\\" can be represented by the sequence 1 2 5. You are given a list of strings representing sentences in this ancient language, and a list of corresponding sentence structures. Each sentence structure is a list of integers where each integer represents the length of a word in the original sentence. Write a function `decode_strings` that will take two inputs: 1. `coded_strings`: A list of strings where each string is a sentence encoded with the word lengths. 2. `patterns`: A list of lists where each inner list contains integers representing the structure of the original sentence. Your task is to determine if each encoded sentence matches its respective pattern and return a list of boolean values. Each boolean value should be `True` if the encoded sentence matches the pattern and `False` otherwise. Function Signature: ```python def decode_strings(coded_strings: List[str], patterns: List[List[int]]) -> List[bool]: pass ``` # Input - `coded_strings`: A list of N strings, where each string consists of numeric values separated by spaces. (1 ≤ N ≤ 1000) - `patterns`: A list of N lists, where each inner list contains K integers. (1 ≤ K ≤ 100) # Output - A list of N boolean values, where each value is `True` if the corresponding encoded sentence matches its pattern, and `False` otherwise. # Example Input ```python coded_strings = [\\"1 2 5\\", \\"3 1 4 5\\", \\"2 3 1\\", \\"1 2 3\\"] patterns = [[1,2,5], [3,1,4,5], [2,3,1], [1,3,3]] ``` Output ```python [True, True, True, False] ``` # Explanation 1. \\"1 2 5\\" matches the pattern [1, 2, 5] 2. \\"3 1 4 5\\" matches the pattern [3, 1, 4, 5] 3. \\"2 3 1\\" matches the pattern [2, 3, 1] 4. \\"1 2 3\\" does not match the pattern [1, 3, 3] (since the lengths of the words do not match)","solution":"from typing import List def decode_strings(coded_strings: List[str], patterns: List[List[int]]) -> List[bool]: This function checks if each encoded sentence matches its respective pattern. Parameters: - coded_strings (List[str]): A list of encoded sentences represented by word lengths. - patterns (List[List[int]]): A list of lists where each sublist contains integers representing word lengths. Returns: List[bool]: A list of booleans where each boolean value indicates if the respective sentence matches its pattern. result = [] for coded_string, pattern in zip(coded_strings, patterns): coded_word_lengths = list(map(int, coded_string.split())) result.append(coded_word_lengths == pattern) return result"},{"question":"You are given a grid of numbers with `N` rows and `M` columns. Each cell of the grid contains a number. We would like to perform the following operations to the grid in order to maximize the sum of the numbers in the first row: 1. Select any row and remove it from the grid. 2. For each column in the remaining grid, shift all numbers upwards to fill the empty space and then place a zero in the position at the bottom of the column. You need to apply this operation exactly `N-1` times so that exactly one row remains. The goal is to maximize the sum of the numbers in the first (remaining) row after performing the operations. Constraints * 1 leq N, M leq 50 * 0 leq each number in the grid leq 100 Input Input is given from Standard Input in the following format: N M grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] Output Print the maximum sum of the numbers in the first row of the grid after exactly `N-1` removal operations. Examples Input 3 2 1 2 3 4 5 6 Output 11 Input 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Output 33∑","solution":"def maximize_first_row_sum(N, M, grid): Given a grid of N rows and M columns, perform N-1 row removals to maximize the sum of the numbers in the first row. max_sum = 0 # Iterate over all rows to find the row which maximizes the sum in each column for i in range(N): current_sum = sum(grid[i][j] for j in range(M)) max_sum = max(max_sum, current_sum) return max_sum # Helper function to parse input, put here for completeness def parse_input(input_string): lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return N, M, grid"},{"question":"Write a function to determine the longest sequence of consecutive integers present in an array. Example Input [100, 4, 200, 1, 3, 2] Output 4 Input [10, 5, 12, 6] Output 2 Input [7, 8, 9, 10, 11, 12] Output 6","solution":"def longest_consecutive_sequence(nums): Determine the longest sequence of consecutive integers present in an array. Args: nums : List[int] : List of integers. Returns: int : Length of the longest sequence of consecutive integers. num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # Only check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In a modern city, buildings of various heights create a distinctive skyline. Your task is to calculate the number of buildings that receive direct sunlight in the evening, assuming the sun sets in the west. A building receives direct sunlight if it is taller than all the buildings to its left. Input The first line contains an integer n (1 leq n leq 100), the number of buildings. The second line contains n integers, where each integer h_i (1 leq h_i leq 100) represents the height of the i-th building from left to right. Output Output the number of buildings that receive direct sunlight. Examples Input 5 3 7 8 3 6 Output 3 Input 6 1 2 3 4 5 6 Output 6 Input 4 5 4 3 2 Output 1","solution":"def count_buildings_with_sunset_view(n, heights): Returns the number of buildings that receive direct sunlight in the evening. count = 0 max_height_so_far = 0 for height in heights: if height > max_height_so_far: count += 1 max_height_so_far = height return count"},{"question":"Grace recently started a new garden and wants to track the growth of different plants. She records the height of each plant every day for a month. She needs your help to find out which plant has shown the maximum growth over the month. For each plant, Grace records the height once every day in an array. You need to determine which plant had the highest overall growth during the month. If two or more plants have the same growth, choose the plant which had the highest final height at the end of the month. Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of plants. - The following lines contain N arrays, each array representing the heights of a plant over a month (30 days). Each array is of length 30, where each element represents the height on a particular day. Output For each test case, output a single line containing the index (1-based) of the plant with the highest growth. If multiple plants have the same growth, output the index of the plant with the highest final height. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ height ≤ 1000 Example Input: 2 3 0 3 5 7 10 11 12 15 20 25 28 30 32 34 35 40 42 43 44 50 55 60 65 67 68 70 73 75 80 85 0 1 2 3 5 6 7 10 12 13 15 18 22 25 30 35 37 40 42 43 45 50 52 53 55 58 60 61 62 65 1 5 10 15 20 24 28 32 35 37 39 41 43 46 50 54 59 64 68 73 77 80 82 85 89 93 97 100 104 110 2 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 Output: 3 2 Explanation In the first test case, plant 3 shows the highest growth of 109 units (from 1 to 110) which is higher than the growth of the other two plants. In the second test case, both plants have the same growth of 58 units, but plant 2 has a higher final height of 90 compared to the final height of plant 1 which is 58.","solution":"def plant_with_maximum_growth(T, test_cases): results = [] for case in test_cases: N = case[0] heights = case[1] max_growth = float(\'-inf\') max_final_height = float(\'-inf\') plant_index = -1 for i in range(N): initial_height = heights[i][0] final_height = heights[i][29] growth = final_height - initial_height if (growth > max_growth) or (growth == max_growth and final_height > max_final_height): max_growth = growth max_final_height = final_height plant_index = i + 1 # using 1-based index results.append(plant_index) return results # Reading input and initializing test cases (example for execution) T = 2 test_cases = [ [3, [[0, 3, 5, 7, 10, 11, 12, 15, 20, 25, 28, 30, 32, 34, 35, 40, 42, 43, 44, 50, 55, 60, 65, 67, 68, 70, 73, 75, 80, 85], [0, 1, 2, 3, 5, 6, 7, 10, 12, 13, 15, 18, 22, 25, 30, 35, 37, 40, 42, 43, 45, 50, 52, 53, 55, 58, 60, 61, 62, 65], [1, 5, 10, 15, 20, 24, 28, 32, 35, 37, 39, 41, 43, 46, 50, 54, 59, 64, 68, 73, 77, 80, 82, 85, 89, 93, 97, 100, 104, 110]]], [2, [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58], [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90]]] ] print(plant_with_maximum_growth(T, test_cases))"},{"question":"A-Θ You are given an array of integers where every element appears twice except for one. Find that single one. The question is as follows: Given an array of integers nums where each element is in the range [1, 10000] and appears exactly twice except for one element which appears exactly once, write a function that finds that single element. Example For instance, given nums = [4, 1, 2, 1, 2], your function should return 4. Additional Details: 1. The input size of the array is between [1, 3*10^4]. 2. It is guaranteed that there is exactly one single element. Your task is to implement a function with the following signature: ```python def singleNumber(nums: List[int]) -> int: ``` # Input Format: - The first line contains a single integer N, the size of the array. - The second line contains N space-separated integers, the elements of the array. Constraints: - 1 ≤ N ≤ 3 * 10^4 - Each element in the array appears twice except for one element which appears exactly once. - The elements\' values in the array are between 1 and 10000. # Output Format: - Print the single element that appears only once. # Example 1: - **Input:** ``` 5 4 1 2 1 2 ``` - **Output:** ``` 4 ``` # Example 2: - **Input:** ``` 3 2 2 1 ``` - **Output:** ``` 1 ``` # Note: Try to implement a solution with a linear runtime complexity and use only constant extra space.","solution":"from typing import List def singleNumber(nums: List[int]) -> int: Finds the single number that appears only once in an array where all other numbers appear exactly twice. result = 0 for num in nums: result ^= num return result"},{"question":"Raif is a hobbyist gardener who is very particular about the plants in his small garden. He has `N` plants arranged in a single row, each having a unique height. Raif likes to water his plants in a specific way: He prefers to water them in increasing order of their height, from left to right. This means that if Raif is at plant `i` and wants to water plant `j` where `j > i`, the height of plant `j` must be greater than the height of plant `i`. Given the heights of the `N` plants, Raif wants to know the maximum number of consecutive plants he can water in one go following his preference. Write a program to help Raif determine the maximum length of any subarray where the heights of the plants are strictly increasing from left to right. # Input Format: - The first line of the input contains a single integer `T`, denoting the number of test cases. - For each test case: - The first line contains a single integer `N`, the number of plants. - The second line contains `N` space-separated integers representing the heights of the plants. # Output Format: For each test case, print the maximum number of consecutive plants Raif can water in one go following his preference. # Constraints: - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 1 ≤ Height of each plant ≤ 100000 # Sample Input: ``` 2 6 1 2 3 2 6 7 5 5 4 3 2 1 ``` # Sample Output: ``` 3 1 ``` # Explanation: In the first test case, the longest subarray of strictly increasing heights is `[1, 2, 3]` which has length 3. In the second test case, no two consecutive plant heights are strictly increasing, so the longest subarray has only length 1.","solution":"def max_consecutive_plants(heights): Calculates the maximum number of consecutive plants that can be watered following strictly increasing heights. n = len(heights) if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len def process_test_cases(T, test_cases): results = [] for i in range(T): N, heights = test_cases[i] result = max_consecutive_plants(heights) results.append(result) return results"},{"question":"Johnny\'s mother is teaching a group of young children the concept of palindromic strings. A palindromic string is defined as a string that reads the same forwards and backwards. As she proceeds with her lessons, she comes up with a challenge for the kids. Given an initial string, the challenge is to determine the minimum number of characters that need to be added to any of its ends (either front or back, or mixed) to make it palindromic. To help her with the challenge, you need to write a program that performs this operation efficiently. # Input The input consists of multiple test cases. The first line contains one integer t (1 ≤ t ≤ 1000) – the number of test cases. The following t lines contain descriptions of each test case. Each test case is presented as a single line containing a non-empty string s of lowercase English letters (1 ≤ |s| ≤ 1000). # Output For each test case, output a single line with one integer – the minimum number of characters that need to be added to the string to make it palindromic. # Examples Input ``` 3 abba abc aabbcc ``` Output ``` 0 2 4 ``` # Note * For the first test case, \\"abba\\" is already a palindrome, so no characters are needed to be added, hence the output is 0. * For the second test case, adding \'c\' at the beginning and \'a\' at the end makes the string \\"cabca\\", which is a palindrome, hence the output is 2. * For the third test case, adding \\"ccbbaa\\" at the end of \\"aabbcc\\" results in the palindrome \\"aabbccccbbaa\\", hence the output is 4. Use this challenge to create a program that helps the kids learn better while practicing their string manipulation skills!","solution":"def min_chars_to_palindromic(s): Returns the minimum number of characters that need to be added to make the string s palindromic. for i in range(len(s)): if s[i:] == s[i:][::-1]: return i return len(s) # In the worst case, we need to append the entire reversed string to the original. def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_chars_to_palindromic(s)) return results"},{"question":"You have been given a string that contains a mix of letters and digits. The task is to group the letters and digits separately and rearrange them such that all letters come before any digits while preserving their original order within each group. Write a function that receives a string and returns a string with all letters at the beginning followed by all digits in their respective original order. # Input A single string `s` containing only letters (both uppercase and lowercase) and digits. # Output A single string where all letters appear before digits, preserving their original relative order. # Example Input: `a1b2c3d4` Output: `abcd1234` Input: `a5b6Z7k8Y9` Output: `abZkY56789`","solution":"def rearrange_string(s): This function takes a string `s` and rearranges it such that all letters come before digits while preserving their original order. :param s: Input string containing letters and digits :return: A string with all letters followed by all digits in their respective original order Example: rearrange_string(\\"a1b2c3d4\\") -> \\"abcd1234\\" rearrange_string(\\"a5b6Z7k8Y9\\") -> \\"abZkY56789\\" letters = [char for char in s if char.isalpha()] digits = [char for char in s if char.isdigit()] return \'\'.join(letters + digits)"},{"question":"You are tasked with creating a special sequence of integers with certain properties. Given an integer n, you need to generate an array b of size n such that: 1. The array `b` contains all integers from 1 to n but rearranged in such a way that for every i from 2 to n: |b[i] - b[i-1]| ≠ 1. Your task is to determine if it is possible to create such an array. If it is possible, print the array. If it is not possible, output -1. Input The first line contains a single integer n (1 ≤ n ≤ 1000). Output If the sequence is possible, print an array of size n containing integers from 1 to n that satisfy the condition. If it is not possible, print -1. Examples Input 4 Output 2 4 1 3 Input 3 Output -1 Note For the first sample, the sequence [2, 4, 1, 3] satisfies the condition because the difference between any two consecutive elements is not equal to 1. For the second sample, it is impossible to rearrange [1, 2, 3] such that the difference between any two consecutive elements is not equal to 1.","solution":"def generate_special_sequence(n): Generates a sequence of integers from 1 to n such that for every i from 2 to n: |b[i] - b[i-1]| ≠ 1. If it\'s not possible, returns -1. Parameters: n (int): The length of the sequence. Returns: list or int: The special sequence if possible, otherwise -1. if n == 1: return [1] elif n == 2 or n == 3: return -1 else: sequence = [] for i in range(2, n + 1, 2): sequence.append(i) for i in range(1, n + 1, 2): sequence.append(i) return sequence"},{"question":"You are given a matrix of dimensions MxN where each element is either a 0 or a 1. You need to find the largest square sub-matrix that contains only 1s and return its area. This matrix will be provided as a list of lists, where matrix[i][j] represents the element in the ith row and jth column of the matrix. Write a function `largestSquareArea(matrix: List[List[int]]) -> int` that takes a matrix as input and returns the area of the largest square sub-matrix that contains only 1s. # Input format: - The first line contains two integers M and N, the dimensions of the matrix. - M lines follow, each containing N integers (0 or 1), separated by spaces. # Output format: - An integer, the area of the largest square sub-matrix filled with only 1s. # Constraints: 1 ≤ M, N ≤ 1000 # SAMPLE INPUT 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 # SAMPLE OUTPUT 4 # Explanation In the given example, the 4x5 matrix contains a 2x2 square of 1s in the bottom right corner. The area of this square is 2x2 = 4. Hence, the output is 4.","solution":"from typing import List def largestSquareArea(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) dp = [[0] * N for _ in range(M)] max_side = 0 for i in range(M): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"Bender, the robot from \\"Futurama\\", likes collecting shiny objects. He stores them in a sorted order inside a single, infinitely long drawer. One day, Bender discovered a peculiar property of his collection: the sorted order can be described as a sequence with distinct elements where the absolute difference between the largest and smallest elements in the sequence is minimized. Given Bender\'s collection of integers, help him rearrange them into a sequence where the difference between the largest and smallest elements is minimized, while all elements remain distinct. If multiple valid sequences exist, return any one of them. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in Bender\'s collection. - The second line contains n distinct integers ai (-10^9 ≤ ai ≤ 10^9), the elements of Bender\'s collection. Output: - Print the sequence of n integers where the absolute difference between the largest and smallest elements is minimized. Examples Input: 6 4 8 12 2 10 3 Output: 2 3 4 8 10 12 Input: 4 1 3 5 7 Output: 1 3 5 7 Note: In the first example, the original collection [4, 8, 12, 2, 10, 3] can be rearranged to form the sequence [2, 3, 4, 8, 10, 12], where the difference between the largest element (12) and the smallest element (2) is minimized. Other valid sequences could include permutations with the same properties. In the second example, the collection is already sorted in such a way where the absolute difference is minimized.","solution":"def minimize_difference_sequence(n, arr): Rearranges the collection into a sequence where the absolute difference between the largest and smallest elements is minimized while keeping all elements distinct. Parameters: n (int): Number of elements in the collection. arr (list of int): The collection of elements. Returns: list of int: The rearranged sequence. # Sort the array to minimize the difference between adjacent elements arr.sort() return arr"},{"question":"You are given a string S consisting of lowercase English alphabets. You need to determine if you can reorder the characters in the string to form a palindrome. Input Format: The first and only line contains the string S. Output Format: Print \\"YES\\" if the characters of the string can be reordered to form a palindrome. Otherwise, print \\"NO\\". Constraints: 1 ≤ |S| ≤ 10^5 SAMPLE INPUT aabb SAMPLE OUTPUT YES Explanation A string can be rearranged to form a palindrome if at most one character has an odd frequency in the string. For the given input \\"aabb\\": - Frequency of \'a\' = 2 - Frequency of \'b\' = 2 Since all characters have even frequencies, the string can be rearranged to form a palindrome, for example, \\"abba\\". Thus, the output is \\"YES\\".","solution":"def can_form_palindrome(s): Determines if the characters in the string can be reordered to form a palindrome. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"A software company is testing an algorithm that involves summing up large sets of positive integers. However, they encounter an issue where certain integers might be reported multiple times, skewing the total sum. Your task is to ensure that duplicate entries are only counted once. You are given n positive integers in a specific order, followed by q queries. Each query consists of two integers, l and r (1 ≤ l ≤ r ≤ n), and asks for the sum of the unique integers in the subarray from index l to r. Input The first input line contains the integer n (1 ≤ n ≤ 100000) and the integer q (1 ≤ q ≤ 50000), where n is the number of integers and q is the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the array of integers. Each of the next q lines contains a pair of integers li and ri, representing a query. Output For each query, print a single integer — the sum of the unique integers in the subarray from index l to r, inclusive. Examples Input 6 3 1 2 2 4 4 5 1 3 2 5 3 6 Output 3 10 11 Note In the first example query (1, 3), the subarray is [1, 2, 2], considering unique integers it turns into [1, 2], and their sum is 3. In the second example query (2, 5), the subarray is [2, 2, 4, 4], considering unique integers it turns into [2, 4], and their sum is 6. In the third example query (3, 6), the subarray is [2, 4, 4, 5], considering unique integers it turns into [2, 4, 5], and their sum is 11.","solution":"def sum_of_unique_in_subarray(n, q, nums, queries): Returns the sum of unique numbers in each query subarray. result = [] for l, r in queries: subarray = nums[l-1:r] unique_subarray = set(subarray) result.append(sum(unique_subarray)) return result"},{"question":"String Transformation is a game where you are given two strings, S1 and S2, and you have to determine the minimum number of operations required to convert S1 into S2. An operation consists of either inserting a character, deleting a character, or replacing one character with another. Input: - T, the number of test cases. - Each test case consists of two strings S1 and S2 separated by a newline. Output: - The required answer in one line for each test case. Constraints: 1 ≤ T ≤ 100 1 ≤ |S1|, |S2| ≤ 1000 SAMPLE INPUT 2 kitten sitting flaw lawn SAMPLE OUTPUT 3 2 Explanation: - In the first test case, \'kitten\' can be transformed to \'sitting\' with 3 operations: replace \'k\' with \'s\', replace \'e\' with \'i\', and append \'g\'. - In the second test case, \'flaw\' can be transformed to \'lawn\' with 2 operations: replace \'f\' with \'l\', and append \'n\'.","solution":"def min_operations_to_convert(S1, S2): Returns the minimum number of operations required to convert S1 into S2. Operations allowed are insert, delete, or replace a character. m, n = len(S1), len(S2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) return dp[m][n] def string_transformation(T, test_cases): results = [] for S1, S2 in test_cases: results.append(min_operations_to_convert(S1, S2)) return results"},{"question":"Baking muffins for the annual fair is a delightful challenge for Martha and Stewart. They have been given a special recipe that requires creating different layers of flavors in each muffin. Each muffin consists of N layers, and they maintain a fixed sequence of flavors, represented by an array of integers. Each integer corresponds to a specific flavor that must be added in the given order from top to bottom. To add a little twist, their oven can only bake one flavor layer at a time, and it must bake each layer completely before starting the next one. Each layer takes a unique time to bake, denoted by an array of integers T, where T[i] represents the time taken to bake the i-th layer in minutes. Martha and Stewart must bake multiple muffins, precisely M of them. Starting always from the first flavor, they proceed layer by layer without interruption until the whole batch is complete. Their task is to complete the baking process as efficiently as possible. Given the constraints, you are asked to find the total baking time required for M muffins. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains: - An integer N, the number of layers in a muffin. - An integer M, the number of muffins to bake. - An array of N integers representing the bake times for each layer. Output: For each test case, output the total baking time in minutes required to bake M muffins. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ T[i] ≤ 1000 Sample Input: 2 4 3 10 20 30 40 2 5 15 25 Sample Output: 300 200 Explanation: In the first example, each muffin has 4 layers with bake times [10, 20, 30, 40]. Baking one muffin takes 10+20+30+40=100 minutes. Therefore, baking 3 muffins requires 3*100=300 minutes. In the second example, each muffin has 2 layers with bake times [15, 25]. Baking one muffin takes 15+25=40 minutes. Therefore, baking 5 muffins requires 5*40=200 minutes.","solution":"def calculate_baking_time(test_cases): results = [] for case in test_cases: N, M, bake_times = case total_bake_time_per_muffin = sum(bake_times) total_bake_time = total_bake_time_per_muffin * M results.append(total_bake_time) return results # Sample Usage: # test_cases = [ # (4, 3, [10, 20, 30, 40]), # (2, 5, [15, 25]) # ] # print(calculate_baking_time(test_cases)) # Output should be [300, 200]"},{"question":"In a small town, there are two factories: Factory A and Factory B. These factories manufacture widgets and compete to produce the highest quality widgets possible. The quality of each widget is determined by three factors: durability, efficiency, and design. The final quality score of a widget is calculated as follows: * Durability contributes d points * Efficiency contributes e points * Design contributes f points * Add g points for every 50 widgets produced in Factory A * Add h points for every 50 widgets produced in Factory B Write a program to determine which factory produces better quality widgets or whether the factories produce widgets with the same quality based on their total quality scores. Input The input is given in the following format: ``` a1 b1 c1 a2 b2 c2 d e f g h ``` The first line gives the durability a1 (0 ≤ a1 ≤ 100), efficiency b1 (0 ≤ b1 ≤ 100), and design c1 (0 ≤ c1 ≤ 100) scores for the widgets produced by Factory A. The second line provides the durability a2 (0 ≤ a2 ≤ 100), efficiency b2 (0 ≤ b2 ≤ 100), and design c2 (0 ≤ c2 ≤ 100) scores for the widgets produced by Factory B. The third line gives the points for durability d (1 ≤ d ≤ 100), efficiency e (1 ≤ e ≤ 100), design f (1 ≤ f ≤ 100), additional points g (0 ≤ g ≤ 150), and additional points h (0 ≤ h ≤ 150). Output If Factory A\'s widgets are better, output `factory_a`. If Factory B\'s widgets are better, output `factory_b`. If the quality scores are tied, output `tie`. Examples Input ``` 10 20 30 30 20 10 2 3 4 10 15 ``` Output ``` factory_a ``` Input ``` 40 10 20 10 30 40 1 4 2 20 10 ``` Output ``` factory_b ``` Input ``` 20 10 30 20 10 30 5 5 5 25 25 ``` Output ``` tie ```","solution":"def determine_better_factory(a1, b1, c1, a2, b2, c2, d, e, f, g, h): Determine which factory produces better quality widgets or if they are tied. # Calculate the quality score for both factories total_quality_a = a1 * d + b1 * e + c1 * f + (g * (sum([a1, b1, c1]) // 50)) total_quality_b = a2 * d + b2 * e + c2 * f + (h * (sum([a2, b2, c2]) // 50)) if total_quality_a > total_quality_b: return \\"factory_a\\" elif total_quality_a < total_quality_b: return \\"factory_b\\" else: return \\"tie\\""},{"question":"Alex has a grid of size N x M, and he is trying to reach from the top-left corner of the grid (1,1) to the bottom-right corner (N,M). He can only move to the right or down at any point in time. Given the dimensions of the grid, can you find the number of unique paths Alex can take to reach his destination? Input First line contains an integer t denoting number of test cases. Next t lines each contain two integers N and M denoting the grid dimensions. Output Print t lines containing the number of unique paths Alex can take to reach from the top-left corner to the bottom-right corner of the grid. SAMPLE INPUT 2 2 2 3 3 SAMPLE OUTPUT 2 6","solution":"import math def unique_paths(N, M): Returns the number of unique paths in a grid from top-left to bottom-right. if N == 1 or M == 1: return 1 return math.comb(N + M - 2, N - 1) def process_test_cases(t, test_cases): Processes multiple test cases for unique_paths. results = [] for index in range(t): N, M = test_cases[index] results.append(unique_paths(N, M)) return results"},{"question":"Write a function that simulates a vending machine system. The vending machine can hold up to `n` items of different types. Each item has a name and a price. Users can perform the following operations on the vending machine: 1. Add an item: Add a new item to the vending machine. 2. Remove an item: Remove an existing item from the vending machine. 3. Purchase an item: Purchase an item, which means removing it from the vending machine if the user provides sufficient funds. The machine should track the total amount of money collected through purchases. Implement the following methods for the vending machine: - `add_item(name: str, price: float) -> None`: Adds an item with the given name and price to the vending machine. If the item already exists, its price should be updated. - `remove_item(name: str) -> None`: Removes the item with the given name from the vending machine. If the item does not exist, raise a `ValueError`. - `purchase_item(name: str, money: float) -> float`: If the item exists and sufficient money is provided, remove the item from the vending machine and return the change. If the item does not exist, raise a `ValueError`. If insufficient funds are provided, raise a `ValueError`. - `total_amount_collected() -> float`: Returns the total amount of money collected by the vending machine through purchases. You can assume item names are unique. # Example: ```python vending_machine = VendingMachine() vending_machine.add_item(\\"Soda\\", 1.50) vending_machine.add_item(\\"Chips\\", 2.00) vending_machine.remove_item(\\"Chips\\") vending_machine.add_item(\\"Chocolate\\", 1.75) change = vending_machine.purchase_item(\\"Soda\\", 2.00) # Returns 0.50 total = vending_machine.total_amount_collected() # Returns 1.50 ``` # Constraints: - `0 <= price <= 100` - `0 <= n <= 100` - `0 <= money <= 100` Implement the `VendingMachine` class and its methods.","solution":"class VendingMachine: def __init__(self): self.items = {} self.total_collected = 0.0 def add_item(self, name: str, price: float) -> None: Add a new item to the vending machine. If the item already exists, update its price. self.items[name] = price def remove_item(self, name: str) -> None: Remove an existing item from the vending machine. If the item does not exist, raise a ValueError. if name in self.items: del self.items[name] else: raise ValueError(\\"Item does not exist\\") def purchase_item(self, name: str, money: float) -> float: Purchase an item, removing it from the vending machine if sufficient funds are provided. Returns the change. Raises ValueError if the item does not exist or if insufficient funds are provided. if name not in self.items: raise ValueError(\\"Item does not exist\\") price = self.items[name] if money < price: raise ValueError(\\"Insufficient funds\\") change = money - price self.total_collected += price del self.items[name] return change def total_amount_collected(self) -> float: Returns the total amount of money collected by the vending machine through purchases. return self.total_collected"},{"question":"In a distant land, there is a kingdom where dragons and knights coexist. Each dragon has a certain strength and each knight has a certain courage level. The King has decided that the knights should fight the dragons to maintain order in the kingdom. Each knight can fight at most one dragon, and each dragon can fight at most one knight. The courage level of the knight should be at least as high as the dragon\'s strength for them to face each other in battle. Your task is to maximize the number of battles between knights and dragons. Input The first line of input contains a single integer T denoting the number of test cases. Each test case starts with two integers N and M, where N is the number of knights and M is the number of dragons. The second line contains N integers where each integer represents the courage level of a knight. The third line contains M integers where each integer represents the strength of a dragon. Both N and M are between 1 and 1000 inclusive, and the courage levels and strengths are between 1 and 1000 inclusive. Output For each test case, output a single integer: the maximum number of battles that can be fought. Example Input: 2 4 3 3 5 6 8 4 5 6 3 3 3 3 3 2 4 5 Output: 2 1 Explanation For the first test case: Knights have courage levels of [3, 5, 6, 8] and dragons have strength levels of [4, 5, 6]. - Knight with courage level 5 can fight dragon with strength 4. - Knight with courage level 6 can fight dragon with strength 5. - Knight with courage level 8 can fight dragon with strength 6. Thus, the maximum number of battles is 3. However, we only choose two pairs {5, 4} and {6, 5} to form the maximum number of battles, since selecting them will ensure all dragons are occupied before utilizing higher courage knights. For the second test case: Knights have courage levels of [3, 3, 3] and dragons have strength levels of [2, 4, 5]. - Knight with courage level 3 can fight dragon with strength 2. Thus, the maximum number of battles is 1 because there is only one knight with a courage level equal to or greater than any dragon\'s strength.","solution":"def max_battles(k, d): k.sort() d.sort() i, j = 0, 0 battles = 0 while i < len(k) and j < len(d): if k[i] >= d[j]: battles += 1 j += 1 i += 1 return battles def solve_battles(T, test_cases): results = [] for t in range(T): n, m = test_cases[t][:2] knights = test_cases[t][2] dragons = test_cases[t][3] results.append(max_battles(knights, dragons)) return results"},{"question":"A string is called \\"balanced\\" if all characters in the string appear the same number of times. Given a string `s`, you need to check whether the string is balanced or not. Write a function `is_balanced(s)` that takes a single string `s` as input and returns `True` if the string is balanced, otherwise returns `False`. # Input - A single string `s` (1 ≤ |s| ≤ 10^5) consisting only of lowercase English letters. # Output - Return `True` if the string is balanced, otherwise return `False`. # Examples Example 1 Input: ``` aabbcc ``` Output: ``` True ``` Explanation: - Each character (\'a\', \'b\', \'c\') appears exactly 2 times in the string. Example 2 Input: ``` aaabbb ``` Output: ``` True ``` Explanation: - Each character (\'a\', \'b\') appears exactly 3 times in the string. Example 3 Input: ``` abc ``` Output: ``` True ``` Explanation: - Each character (\'a\', \'b\', \'c\') appears exactly 1 time in the string. Example 4 Input: ``` aabbc ``` Output: ``` False ``` Explanation: - Character \'a\' and \'b\' appear 2 times each, but \'c\' appears only 1 time. Hence, the string is not balanced. # Note - Consider edge cases such as when `s` consists of a single unique character repeated multiple times.","solution":"def is_balanced(s): from collections import Counter char_count = Counter(s) counts = list(char_count.values()) return len(set(counts)) == 1"},{"question":"A group of programmers is assigned to organize a large number of documents stored in a directory structure. The structure consists of folders and files. Folders can contain files and other folders recursively. Each folder and file has a unique name. One of the tasks assigned to the programmers is to determine the depth of the deepest file in the directory structure. The depth is defined as the number of folders from the root directory to the file. You need to write a program that takes a representation of the directory structure and outputs the depth of the deepest file. The directory structure is provided as a string, where folders are denoted by square brackets containing their contents, and files are denoted by their names (strings without any special characters). The root folder is the outermost set of brackets. Write a function: ```python def find_deepest_file_depth(directory: str) -> int: ``` # Input: - `directory` (str): A string representing the directory structure. The string contains only alphanumeric characters, square brackets, and commas. It is guaranteed that the brackets are well-formed. # Output: - `int`: The depth of the deepest file. # Examples: ```python # Example 1 print(find_deepest_file_depth(\\"[file1, [file2, file3], file4]\\")) # Output: 2 # Example 2 print(find_deepest_file_depth(\\"[file1, [[[file2], file3], file4], file5]\\")) # Output: 4 # Example 3 print(find_deepest_file_depth(\\"[[file1]]\\")) # Output: 2 ``` # Constraints: - The input string length will not exceed 1000 characters. - The maximum depth will not exceed 50. # Note: - Files and folders are separated by commas. - There are no empty folders or files with the same name. - Folder contents are always enclosed in square brackets, and different items within a folder are separated by commas.","solution":"def find_deepest_file_depth(directory: str) -> int: def helper(s, index, depth): max_depth = depth while index < len(s): if s[index] == \'[\': new_depth, index = helper(s, index + 1, depth + 1) max_depth = max(max_depth, new_depth) elif s[index] == \']\': return max_depth, index index += 1 return max_depth, index max_depth, _ = helper(directory, 0, 0) return max_depth"},{"question":"Emily loves baking cookies and she wants to ensure that everyone in her family gets an equal share of cookies without breaking any cookie in half. She has already baked m cookies and wants to distribute them among n family members. Your task is to determine how many more cookies Emily needs to bake so that she can distribute all the cookies equally among n family members. Input The first line contains two integers m (0 ≤ m ≤ 1000) and n (1 ≤ n ≤ 100) — the number of cookies Emily has already baked and the number of family members, respectively. Output Print a single integer — the number of additional cookies Emily needs to bake so that each family member gets an equal share. Examples Input 10 3 Output 2 Input 12 5 Output 3 Explanation: In the first example, Emily has 10 cookies and 3 family members. To ensure each family member gets an equal share, she should have at least 12 cookies (4 cookies per person). Hence, she needs to bake 2 more cookies. In the second example, Emily has 12 cookies and 5 family members. To ensure each family member gets an equal share, she should have at least 15 cookies (3 cookies per person). Hence, she needs to bake 3 more cookies.","solution":"def additional_cookies_needed(m, n): Given the number of cookies baked (m) and the number of family members (n), this function returns the number of additional cookies needed to ensure each family member gets an equal share of cookies without breaking any cookie in half. if m % n == 0: return 0 else: return n - (m % n)"},{"question":"A team of scientists has constructed a network of sensors spread throughout a forest to monitor wildlife activity. These sensors are located at various points, each with its own unique identifier (ID). The data collected includes the frequency of animal sightings at each sensor location. The scientists want to identify \\"hotspots\\" within the forest. A hotspot is defined as a sensor location with a sighting frequency that significantly exceeds the average frequency of its immediate neighbors. The forest topology is given as a graph, where each node represents a sensor and edges represent direct connections between sensors. Your task is to write a program that identifies all the hotspots in the given sensor network. Input The first line of input contains an integer N (2 ≤ N ≤ 100), the number of sensors in the network. The second line contains a space-separated list of integers, the IDs of the sensors (1 ≤ ID ≤ 1000). The third line contains a space-separated list of integers, where the ith integer represents the frequency of sightings at the ith sensor. The next line contains an integer M (1 ≤ M ≤ N * (N-1)/2), the number of direct connections between sensors. Each of the next M lines contains two space-separated integers, representing a connection (an undirected edge) between two sensors given by their IDs. Output For each hotspot sensor, output its ID on a new line in ascending order. If no hotspots are found, output \\"No hotspots\\". Example Input 5 1 2 3 4 5 10 20 5 15 25 4 1 2 2 3 3 4 4 5 Output 2 5 Explanation Sensor 2 has neighbors 1 and 3 with frequencies [10, 5]. The average is 7.5, and 20 (frequency of sensor 2) is significantly higher. Sensor 5 has neighbor 4 with frequency 15. The average is 15, and 25 (frequency of sensor 5) is significantly higher.","solution":"def identify_hotspots(N, sensor_ids, frequencies, M, connections): from collections import defaultdict sensor_graph = defaultdict(list) for id1, id2 in connections: sensor_graph[id1].append(id2) sensor_graph[id2].append(id1) hotspots = [] for i, sensor in enumerate(sensor_ids): neighbors = sensor_graph[sensor] if not neighbors: continue neighbor_frequencies = [frequencies[sensor_ids.index(neighbor)] for neighbor in neighbors] average_frequency = sum(neighbor_frequencies) / len(neighbor_frequencies) if frequencies[i] > average_frequency: hotspots.append(sensor) if not hotspots: return [\\"No hotspots\\"] return sorted(hotspots) # Example usage N = 5 sensor_ids = [1, 2, 3, 4, 5] frequencies = [10, 20, 5, 15, 25] M = 4 connections = [(1, 2), (2, 3), (3, 4), (4, 5)] print(identify_hotspots(N, sensor_ids, frequencies, M, connections))"},{"question":"There are N employees in a company, each with a unique employee ID from 1 to N. The company has recorded T direct feedbacks given between employees. The feedback is directed, meaning if employee x gives feedback to employee y, it doesn’t imply that employee y has given feedback to employee x. Determine for each employee, how many employees have given them feedback. Constraints * 1≤N≤100 * 0≤T≤N*(N-1) * 1≤x,y≤N * x ≠ y * All input values are integers. Input Input is given from Standard Input in the following format: N T x_1 y_1 : x_T y_T Output Print the answer in N lines. In the i-th line (1≤i≤N), print the number of employees who have given feedback to employee i. Examples Input 5 4 1 2 2 3 4 3 1 3 Output 0 1 3 0 0 Input 3 3 1 2 2 1 3 1 Output 2 1 0","solution":"def count_feedbacks(N, T, feedbacks): Count how many employees have given feedback to each employee. Parameters: N (int): Total number of employees. T (int): Total number of feedbacks. feedbacks (list of tuples): List of feedback pairs (x, y) where employee x gives feedback to employee y. Returns: list: A list where the i-th element is the number of feedbacks received by employee i+1. feedback_count = [0] * N for x, y in feedbacks: feedback_count[y-1] += 1 return feedback_count"},{"question":"You\'re assisting a treasure hunter who is trying to find the location of a hidden treasure on a grid map. The map is represented as an `n x n` matrix where each cell contains an integer representing the terrain level. The treasure is located in the lowest terrain level cell in the matrix. Write a function that, given the `n x n` grid of integers, returns the coordinates of the lowest terrain level cell. If there are multiple cells with the same lowest terrain level, return any one of these coordinates. Your task is to implement this function: ```python def find_treasure(grid): Finds the coordinates of the cell with the lowest terrain level in the grid. Args: grid (List[List[int]]): The n x n grid of integers. Returns: Tuple[int, int]: The coordinates (i, j) of the cell with the lowest terrain level. pass ``` Input: - A single integer `n` (2 ≤ n ≤ 100) represents the grid\'s dimensions. - An `n x n` grid of integers where each integer is between -1000 and 1000. Output: - Return the coordinates of the cell with the lowest terrain level. Example: ```python grid = [ [1, -2, 3], [4, 5, 6], [7, -2, 9] ] find_treasure(grid) # Output: (0, 1) or (2, 1) ``` Note: - You may assume that there will always be at least one cell with the lowest terrain level.","solution":"def find_treasure(grid): Finds the coordinates of the cell with the lowest terrain level in the grid. Args: grid (List[List[int]]): The n x n grid of integers. Returns: Tuple[int, int]: The coordinates (i, j) of the cell with the lowest terrain level. n = len(grid) min_value = float(\'inf\') min_coords = (0, 0) for i in range(n): for j in range(n): if grid[i][j] < min_value: min_value = grid[i][j] min_coords = (i, j) return min_coords"},{"question":"In a far-off kingdom, King Arthur has tasked his knights with a challenge to find the most suitable path through a series of towns connected by various roads. The goal is to find out if there is a path from one specific town to another by traversing through the roads available. The knights need to write a program to verify the presence of such a path. The kingdom consists of n towns and m roads. Each road connects two distinct towns, allowing travel in both directions. Given the number of towns, the list of roads, and a specific start and end town, your task is to determine if there is a path from the start town to the end town. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000), representing the number of towns and the number of roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that there is a road connecting town u and town v. The last line contains two integers s and t (1 ≤ s, t ≤ n), representing the start and end towns. Output Print \\"YES\\" if there is a path from town s to town t, and \\"NO\\" otherwise. Sample test(s) Input 5 4 1 2 2 3 3 4 4 5 1 5 Output YES Input 5 4 1 2 2 3 3 4 4 5 1 3 Output YES Input 5 2 1 2 2 3 4 5 4 3 Output NO Explanation In the first sample, there is a path 1-2-3-4-5 from town 1 to town 5. In the second sample, there is a direct path 1-2-3 from town 1 to town 3. In the third sample, there is no path connecting town 4 to town 3.","solution":"def find_path(n, m, roads, s, t): from collections import defaultdict, deque # Create a graph from the roads graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # BFS to check path existence queue = deque([s]) visited = set() while queue: current = queue.popleft() if current == t: return \\"YES\\" visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\" # Example input and test n = 5 m = 4 roads = [(1, 2), (2, 3), (3, 4), (4, 5)] s = 1 t = 5 print(find_path(n, m, roads, s, t)) # Output: YES"},{"question":"In the kingdom of Algoria, there are n towns connected by bidirectional roads such that there is exactly one path between any two towns. The towns are labeled from 1 to n. Each town has a certain number of guards stationed in it. The king of Algoria wants to select a path of towns such that: 1. The path starts in town 1 and ends in town n. 2. The number of guards in the towns along this path follows a non-decreasing order. Given the towns, the roads connecting them, and the number of guards in each town, determine if it\'s possible to find such a path. If there is a valid path, print \\"YES\\" and provide the sequence of towns along this path. If such a path does not exist, print \\"NO\\". Input The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of towns. The second line contains n space-separated integers gi (1 ≤ gi ≤ 1,000,000) — the number of guards in each town (1 ≤ i ≤ n). Each of the next n-1 lines contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n) — indicating a bidirectional road between towns ai and bi. Output If there is a valid path, print \\"YES\\" on the first line. On the second line, print the sequence of towns along this path. If no such path exists, print \\"NO\\". Examples Input 5 3 2 3 5 6 1 2 1 3 3 4 4 5 Output YES 1 3 4 5 Input 3 4 3 2 1 2 2 3 Output NO","solution":"def find_path(n, guards, roads): from collections import defaultdict, deque adjacency_list = defaultdict(list) for a, b in roads: adjacency_list[a].append(b) adjacency_list[b].append(a) def bfs(): visited = [False] * (n + 1) path = [] queue = deque([(1, [])]) # (current_town, path_to_this_town) while queue: current_town, current_path = queue.popleft() current_path = current_path + [current_town] if current_town == n: return current_path visited[current_town] = True for neighbour in adjacency_list[current_town]: if not visited[neighbour] and guards[neighbour - 1] >= guards[current_town - 1]: queue.append((neighbour, current_path)) return None path = bfs() if path: print(\\"YES\\") print(\\" \\".join(map(str, path))) else: print(\\"NO\\") # Example usage # n = 5 # guards = [3, 2, 3, 5, 6] # roads = [(1, 2), (1, 3), (3, 4), (4, 5)] # find_path(n, guards, roads)"},{"question":"Write a program to read a list of integers and produce a new list containing the same integers but with all consecutive duplicate elements reduced to a single instance of the element. For example, given the input list: [1, 2, 2, 3, 3, 3, 4, 1, 1, 2] The output should be: [1, 2, 3, 4, 1, 2] Input The input consists of a sequence of space-separated integers, each on a single line. The number of integers is less than or equal to 10^6. Each integer x is (-10^9 ≤ x ≤ 10^9). Output Print the new list with consecutive duplicates removed. Example Input 1 2 2 3 3 3 4 1 1 2 Output 1 2 3 4 1 2","solution":"def remove_consecutive_duplicates(arr): Returns a list with consecutive duplicates removed. if not arr: # Handle empty input list return [] result = [] previous = None for num in arr: if num != previous: result.append(num) previous = num return result def process_input(input_string): Parse input string into a list of integers. return list(map(int, input_string.strip().split()))"},{"question":"You are given an array of integers. We define a subsequence of an array as a new array generated from the original array with some elements (possibly zero) deleted without changing the order of the remaining elements. An array is considered k-pyramidal if it consists of 2k-1 elements where the first k elements form a strictly increasing sequence, and the last k elements form a strictly decreasing sequence. Determine if there is a k-pyramidal subsequence in the given array. Constraints * 1 ≦ |array| ≦ 10^5 * -10^9 ≦ array[i] ≦ 10^9 Input The input is given from Standard Input in the following format: n array Output If there exists a k-pyramidal subsequence in array, print `YES`. Otherwise, print `NO`. Examples Input 8 1 5 3 4 2 6 7 4 Output YES Input 5 3 1 2 4 5 Output NO","solution":"def is_k_pyramidal_subsequence(arr): n = len(arr) # We need at least 3 elements to form a 1-pyramidal subsequence if n < 3: return \\"NO\\" # Find increasing sequences ending at each position inc = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: inc[i] = max(inc[i], inc[j] + 1) # Find decreasing sequences starting at each position dec = [1] * n for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if arr[i] > arr[j]: dec[i] = max(dec[i], dec[j] + 1) # Check for k-pyramidal subsequence for i in range(n): k = min(inc[i], dec[i]) if k > 1 and (2 * k - 1) <= n: return \\"YES\\" return \\"NO\\""},{"question":"You are given a directed graph with `N` nodes and `M` edges. Each edge has a non-negative weight. The nodes are numbered from `1` to `N`. Your task is to determine the shortest path from a given starting node `S` to all other nodes in the graph. Constraints * All values in input are integers. * 1 leq N leq 1000 * 1 leq M leq 5000 * 1 leq S leq N * 1 leq weight of each edge leq 1000 Input Input is given from Standard Input in the following format: ``` N M S u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M ``` Here, `N` is the number of nodes, `M` is the number of edges, and `S` is the starting node. Each edge is represented by three integers `u_i`, `v_i`, and `w_i` indicating there is a directed edge from `u_i` to `v_i` with weight `w_i`. Output Print `N` integers where the i-th integer represents the shortest distance from the starting node `S` to the i-th node. If a node is unreachable, print \\"INF\\" for that node. Examples Input ``` 5 6 1 1 2 2 1 3 4 2 3 1 3 4 7 2 4 3 4 5 1 ``` Output ``` 0 2 3 5 6 ``` Input ``` 3 2 2 2 1 5 2 3 1 ``` Output ``` 5 0 1 ``` Input ``` 4 3 1 1 2 2 2 3 3 3 4 4 ``` Output ``` 0 2 5 9 ``` Input ``` 4 3 2 1 2 1 2 4 1 3 4 1 ``` Output ``` INF 0 INF 1 ```","solution":"import heapq def dijkstra(N, edges, S): # Create adjacency list graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distances with infinity distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[S] = 0 # Min-heap priority queue priority_queue = [(0, S)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we find a shorter way to this node, we continue if current_distance > distances[current_node]: continue # Explore the neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # If we find a shorter path to the neighbor, update priority queue if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Format the result result = [] for i in range(1, N + 1): if distances[i] == float(\'inf\'): result.append(\\"INF\\") else: result.append(str(distances[i])) return \\" \\".join(result) def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M, S = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, S, edges def shortest_paths(input_str): N, M, S, edges = parse_input(input_str) return dijkstra(N, edges, S)"},{"question":"You are tasked with developing a feature for a chat application that manages group conversations. Each group conversation has a unique ID, and a user can belong to multiple groups. To efficiently manage and update the groups, you need to periodically remove users who are inactive for a certain period. Write a function `remove_inactive_users()` that takes two lists as input: 1. `groups`: A list of lists, where each sublist represents the user IDs of participants in a particular group. 2. `inactive_users`: A list of user IDs that are inactive and need to be removed from all groups. The function should remove all inactive users from every group and return the modified list of groups. # Input - groups: a list of lists of integers (1 ≤ len(groups) ≤ 103, 1 ≤ len(groups[i]) ≤ 103, 1 ≤ user_id ≤ 109). - inactive_users: a list of integers (0 ≤ len(inactive_users) ≤ 103, 1 ≤ user_id ≤ 109). # Output Return the updated list of groups after removing all inactive users from them. # Example Input ```python groups = [ [1, 2, 3], [4, 5, 2], [6, 7, 8, 9], [1, 10] ] inactive_users = [2, 8, 10] ``` Output ```python [ [1, 3], [4, 5], [6, 7, 9], [1] ] ``` # Note In the provided example, user IDs 2, 8, and 10 are inactive and have been removed from all groups. The resulting lists show the groups after these users were removed.","solution":"def remove_inactive_users(groups, inactive_users): Removes inactive users from all groups. Parameters: groups (list of list of int): List of groups of active users. inactive_users (list of int): List of inactive user IDs. Returns: list of list of int: Updated list of groups after removing inactive users. inactive_set = set(inactive_users) updated_groups = [] for group in groups: updated_group = [user for user in group if user not in inactive_set] updated_groups.append(updated_group) return updated_groups"},{"question":"Background Chef is trying his best to prepare a new dish for the upcoming cooking competition. The dish requires exact temperatures at various stages of the cooking process. To assist him, he uses a smart oven capable of setting precise temperatures and maintaining that temperature for a fixed duration. However, the smart oven has a peculiar operating system. When given a temperature schedule, it works in segments where each segment has two components: the target temperature and the duration for which it must maintain that temperature. Once Chef inputs the schedule, the smart oven computes the highest temperature and the longest duration, and it always maintains these parameters at optimal values to ensure the dish is cooked properly. Chef needs your help to determine the highest temperature to which the oven must be set at any given time and the longest duration for which the oven will run. Problem You must write a program that processes a list of temperature schedules and computes the highest temperature and the longest duration for which the oven operates. Constraints The input satisfies the following conditions: * 1 ≤ T ≤ 100000 (Number of temperature schedules) * 1 ≤ temperature ≤ 300 (Temperature value in degrees) * 1 ≤ duration ≤ 86400 (Duration value in seconds) Input The first line contains an integer T, the number of temperature schedules. Each of the following T lines contains two integers, temperature and duration, separated by a space. Output Output two integers separated by a space: the highest temperature and the longest duration. Examples Input 4 250 1200 200 4500 300 1500 250 3000 Output 300 4500 Input 3 180 3600 250 4800 200 2400 Output 250 4800 Input 5 150 7200 180 3600 200 14400 170 5400 160 12600 Output 200 14400","solution":"def compute_temperature_and_duration(schedules): This function computes the highest temperature and the longest duration from a list of temperature schedules. :param schedules: A list of tuples [(temperature, duration), ...] :return: A tuple (highest temperature, longest duration) max_temperature = 0 max_duration = 0 for temp, dur in schedules: if temp > max_temperature: max_temperature = temp if dur > max_duration: max_duration = dur return (max_temperature, max_duration)"},{"question":"A city consists of a grid with n times m intersections, where n is the number of rows and m is the number of columns. Some of these intersections are blocked and can\'t be traversed. A person starts at the top-left intersection (1,1) and wants to reach the bottom-right intersection (n, m). Write a program to determine the number of distinct paths the person can take to reach the destination. The person can only move either down or right at any point in time. Constraints - 2 leq n, m leq 100 - Intersections are numbered using 1-based indexing from (1,1) to (n,m) - Some intersections are blocked and can\'t be traversed. Format of the input: - The first line contains two integers n and m. - The second line contains an integer k, the number of blocked intersections. - The next k lines each contain two integers a_i b_i representing the blocked intersections. Format of the output: - Output the number of distinct paths to reach (n, m) from (1, 1). If such a path doesn\'t exist, output 0. Example Input 3 3 1 2 2 Output 2 Explanation There are 3 times 3 intersections. The intersection (2, 2) is blocked. The possible paths are: 1. (1, 1) rightarrow (1, 2) rightarrow (1, 3) rightarrow (2, 3) rightarrow (3, 3) 2. (1, 1) rightarrow (1, 2) rightarrow (2, 2) rightarrow (2, 3) rightarrow (3, 3)","solution":"def number_of_paths(n, m, blocked_positions): # Create a table to store results of subproblems dp = [[0]*m for _ in range(n)] # If the starting point is blocked, return 0 if (1, 1) in blocked_positions: return 0 # Initial position dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if (i+1, j+1) in blocked_positions: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are tasked with organizing a single-elimination tournament for a local esports event. There are n players, each with a distinct skill level represented by an integer. The outcome of a match between any two players is determined solely by their skill levels: the player with a higher skill level always wins. Your objective is to structure the tournament in such a way that maximizes the skill level of the player who finishes in second place. The single-elimination tournament works as follows: 1. In each round, players are randomly paired up to compete against each other. 2. The losers are eliminated, and the winners progress to the next round. 3. This process continues until only one player remains, who is declared the winner. Given the list of skill levels of the players, find out the maximum possible skill level of the player who can finish in second place. Input The input consists of: - An integer n (2 ≤ n ≤ 1000) — the number of players. - A list of n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the skill levels of the players. Output Print one integer — the maximum possible skill level of the player who can finish in second place. Examples Input 4 3 6 9 1 Output 6 Input 8 5 3 1 7 2 8 9 4 Output 8 Input 5 2 3 5 8 13 Output 8","solution":"def find_second_place(skill_levels): Returns the maximum possible skill level of the player who can finish in second place. # Sort the skill levels in ascending order skill_levels.sort() # The second place player will have the second highest skill level # In a tournament, the final two players are the two highest skill levels # Hence, the second place player is the player with the second highest skill level return skill_levels[-2] # Example Usage n = 4 players = [3, 6, 9, 1] print(find_second_place(players)) # Output: 6"},{"question":"Write a program that takes a string as input and removes all characters from the string except for alphanumeric characters and spaces. The output should maintain the original order of the characters. Constraints * The length of the input string < 1500 Input A string is given in a line. Output Print the filtered string in a line, preserving only alphanumeric characters and spaces. Example Input Hello, World! Welcome to the year 2023. Output Hello World Welcome to the year 2023","solution":"def filter_string(input_string): Removes all characters from the input_string except for alphanumeric characters and spaces. Maintains the original order of the characters. return \'\'.join(c for c in input_string if c.isalnum() or c.isspace())"},{"question":"A software company is developing a new text editor, and one of its special features is checking if any word in the document is an anagram of another word in the document. If such a pair of anagrams exists, a certain visual indicator will appear in the editor to alert the user. Your task is to write a program that checks if there exists at least one pair of anagram words in a given text. Input The first line contains a single integer n (1 <= n <= 10^5), the number of words in the document. The second line contains n words separated by spaces, where each word is a string consisting of lowercase English letters. The total length of all the words combined does not exceed 10^5 characters. Output Print \'YES\' (without the quotes) if there exists at least one pair of anagram words in the text. Otherwise, print \'NO\' (without the quotes). Examples Input 4 listen silent enlists google Output YES Input 3 car arc rat Output YES Input 5 apple banana carrot date egg Output NO","solution":"def has_anagram(n, words): Checks if there exists at least one pair of anagram words in the given text. Args: n: int - the number of words in the document. words: list of str - the words in the document. Returns: str - \'YES\' if there exists at least one pair of anagram words, \'NO\' otherwise. seen = set() for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in seen: return \'YES\' seen.add(sorted_word) return \'NO\' # Example usage: # n = 4 # words = [\\"listen\\", \\"silent\\", \\"enlists\\", \\"google\\"] # print(has_anagram(n, words)) # Output: YES"},{"question":"The problem involves finding the optimal sequence to visit all nodes in a weighted graph such that the total travel cost is minimized. However, there is an additional constraint: You must visit nodes in a predefined order, but you\'re allowed to start from any node. Once you start, you must visit all nodes in the specified sequence and finally return to the starting node. The graph is complete, meaning there is a direct path between any two nodes. Given an integer `n` representing the number of nodes and an `n x n` matrix `cost` where `cost[i][j]` indicates the travel cost from node `i` to node `j`, find the minimum travel cost for visiting all nodes in the specified order and returning to the start. Input The first line contains integer `n` (2 ≤ n ≤ 250) — the number of nodes. The next `n x n` lines contain the costs in the form of an adjacency matrix. The last line contains a sequence of `n` integers representing the order in which the nodes must be visited. Output Print a single integer — the minimum travel cost for visiting all nodes in the specified order and returning to the start. Example Input 4 0 20 42 25 20 0 30 34 42 30 0 10 25 34 10 0 1 2 3 4 Output 85 Note In the example, the given order is 1 → 2 → 3 → 4. You can start from any of the nodes, but you must visit the nodes in the given sequence. The provided costs are as follows: - Cost from 1 to 2: 20 - Cost from 2 to 3: 30 - Cost from 3 to 4: 10 - Cost from 4 to 1: 25 Thus, the minimum travel cost would be 20 + 30 + 10 + 25 = 85.","solution":"def minimum_travel_cost(n, cost, order): # Adjust order to be 0-based instead of 1-based order = [x - 1 for x in order] total_cost = 0 for i in range(1, len(order)): total_cost += cost[order[i - 1]][order[i]] total_cost += cost[order[-1]][order[0]] # Returning to the start point return total_cost"},{"question":"Alex is working on a project involving the optimization of network packet transmission. Each packet has a unique identifier (a positive integer), and it needs to be transmitted through a series of routers. Each router has a certain processing capacity, meaning it can handle a limited maximum number of packets per second. Alex wants to find out the minimum processing capacity a router must have to handle the most packets requiring it at any moment throughout the transmission. Given the transmission plan of packet identifiers, simulate the transmissions and determine the required minimum processing capacity. To simplify the challenge, assume packets start and finish their transmission within one second intervals, and the duration each packet spends at a router is based on a provided list of intervals. Input The input consists of: - The first line contains an integer n, the number of packets (1 ≤ n ≤ 1000). - The next n lines each contain two integers si and ei (1 ≤ si ≤ ei ≤ 1000) representing the start and end times of the packet transmission respectively. Output Output a single integer representing the required minimum processing capacity of any single router to handle all packets. Example Input 4 1 4 2 5 6 8 3 7 Output 3 Explanation In this example, at time 3, there are three packets in transmission (packets 1, 2, and 4). Therefore, the minimum processing capacity required is 3. Input 3 1 3 2 6 4 7 Output 2 Explanation At both times 2 and 4, two packets are being transmitted simultaneously. Therefore, the minimum processing capacity required is 2.","solution":"def min_processing_capacity(n, intervals): Given the number of packets and a list of intervals representing the transmission times of each packet, this function returns the minimum processing capacity required at any router. # Create a list to track the number of packets at each time point. times = [0] * 1001 # Create a list of size 1001 to represent times from 0 to 1000 # Process each interval for si, ei in intervals: times[si] += 1 # Increment the start time if ei + 1 <= 1000: times[ei + 1] -= 1 # Mark the end time + 1 as end of handling this packet # Calculate the maximum number of packets in transmission at any time max_packets = 0 current_packets = 0 for t in times: current_packets += t if current_packets > max_packets: max_packets = current_packets return max_packets # Example usage: # n = 4 # intervals = [(1, 4), (2, 5), (6, 8), (3, 7)] # print(min_processing_capacity(n, intervals)) # Output: 3"},{"question":"A grid-based farm has dimensions n x m, containing several types of cells - open land for planting crops (.), rocks that cannot be moved (X), and a watering system that should be placed in one specific cell (W). A robot placed on one of the open land cells must navigate the farm to place the watering system in the target cell. The robot and the watering system cannot occupy the same cell simultaneously, nor can they move onto cells with rocks. The robot can push the watering system to an adjacent cell as long as the target cell is free. The robot can also move to any adjacent open land cell. The goal is to determine the sequence of moves and pushes required to place the watering system accurately according to the following criteria: 1. Minimize the number of moves required to place the watering system from its initial position to the final position. 2. Minimize the distance the robot needs to traverse without pushing the watering system. Input The first line contains two positive integers n and m (1 ≤ n, m ≤ 40, n·m ≥ 3) — the number of rows and columns of the farm grid. Each of the next n lines contains m characters — the description of the farm. The characters in the cell of the farm can be: * \\"X\\" - a cell with a rock * \\".\\" - an empty land cell * \\"R\\" - the initial position of the robot * \\"W\\" - the initial position of the watering system * \\"T\\" - the cell where the watering system needs to be placed It is guaranteed that there is exactly one robot, one watering system, and one target cell for the watering system. Output If it is not possible to move the watering system to the target cell, print \\"NO\\" without quotes. Otherwise, print \\"YES\\" without quotes, followed by the sequence of moves and pushes. Use: * \\"U\\", \\"D\\", \\"L\\", \\"R\\" for moving the robot Up, Down, Left, and Right respectively. * \\"P\\" followed by \\"U\\", \\"D\\", \\"L\\", \\"R\\" for pushing the watering system Up, Down, Left, and Right respectively. First, minimize the number of moves, then minimize the distance the robot traverses. Examples Input 5 5 ..... .R..X ..X.. ..W.. ....T Output YES DDRRPUU","solution":"from collections import deque # Directions for moving and pushing the system & corresponding changes in coordinates dirs = [(\\"U\\", -1, 0), (\\"D\\", 1, 0), (\\"L\\", 0, -1), (\\"R\\", 0, 1)] pdirs = {\\"U\\": (\\"PU\\", -2, 0), \\"D\\": (\\"PD\\", 2, 0), \\"L\\": (\\"PL\\", 0, -2), \\"R\\": (\\"PR\\", 0, 2)} def bfs(start, is_valid): Standard BFS for shortest path search q = deque([(start[0], start[1], [])]) visited = {start} while q: x, y, path = q.popleft() for d, dx, dy in dirs: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) q.append((nx, ny, path + [d])) return visited def is_valid_factory(n, m, grid): Returns a function for valid cell checking def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \\"X\\" return is_valid def determine_sequence(n, m, grid): # Locate the positions of robot, watering system, and target cell for i in range(n): for j in range(m): if grid[i][j] == \\"R\\": robot_start = (i, j) elif grid[i][j] == \\"W\\": water_start = (i, j) elif grid[i][j] == \\"T\\": target = (i, j) # Check if robot can reach any cell adjacent to the watering system start valid_r = is_valid_factory(n, m, grid) visited = bfs(robot_start, valid_r) water_adjacent_reachable = any((water_start[0] + dx, water_start[1] + dy) in visited for _, dx, dy in dirs) if not water_adjacent_reachable: return \\"NO\\" # Initial state for BFS: (robot pos, watering system pos, sequence of moves) initial_state = (robot_start, water_start, []) # BFS to determine sequence q = deque([initial_state]) visited = set([(robot_start, water_start)]) while q: (rx, ry), (wx, wy), seq = q.popleft() # Check if current watering system position is the target if (wx, wy) == target: return \\"YESn\\" + \'\'.join(seq) # Explore all directions for robot movement without pushing for dir, dx, dy in dirs: nrx, nry = rx + dx, ry + dy if valid_r(nrx, nry) and (nrx, nry) != (wx, wy) and ((nrx, nry), (wx, wy)) not in visited: visited.add(((nrx, nry), (wx, wy))) q.append(((nrx, nry), (wx, wy), seq + [dir])) # Explore all directions for pushing the watering system for dir in pdirs: pdir, dx, dy = pdirs[dir] # Robot should be next to water system and can move to push it prx, pry = wx - dirs[[\\"U\\", \\"D\\", \\"L\\", \\"R\\"].index(dir)][1], wy - dirs[[\\"U\\", \\"D\\", \\"L\\", \\"R\\"].index(dir)][2] if (rx, ry) == (prx, pry): nwx, nwy = wx + dx//2, wy + dy//2 if valid_r(nwx, nwy) and ((prx, pry), (nwx, nwy)) not in visited: visited.add(((wx, wy), (nwx, nwy))) q.append(((wx, wy), (nwx, nwy), seq + [pdir])) return \\"NO\\" def main(n, m, grid): result = determine_sequence(n, m, grid) print(result)"},{"question":"Given an unsorted array of integers, you are required to maximize the sum of the lengths of the strictly increasing subarrays that can be formed by splitting the original array into multiple non-overlapping subarrays. The subarrays must maintain their order from the original array. For example, given array [3, 10, 2, 1, 20], it can be split into [3, 10] and [2, 20], where the sum of their lengths is 4 (2 + 2). Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains `n` space-separated integers `a1, a2, ..., an` (-10^9 ≤ ai ≤ 10^9) representing the elements of the array. Output: - Output a single integer — the maximum sum of the lengths of the strictly increasing subarrays. Example: Input: 6 3 1 4 1 5 9 Output: 6 Explanation: The array can be split into [3], [1, 4], [1, 5, 9], which gives the sum of lengths 1 + 2 + 3 = 6. Note: To solve this problem, consider traversing the array while tracking the lengths of increasing subarrays. Add their lengths once a decrease in the sequence is detected or the end of the array is reached.","solution":"def max_length_of_increasing_subarrays(n, arr): if n == 0: return 0 # Initialize the counters max_sum = 0 current_length = 1 for i in range(1, n): if arr[i] > arr[i-1]: current_length += 1 else: max_sum += current_length current_length = 1 # Add the last subarray length max_sum += current_length return max_sum"},{"question":"There\'s a large network of computers, each computer has a certain number of connected peripherals. A hacker is planning to infiltrate the network by taking over computers with the maximum number of peripherals first. However, the hacker\'s resources are limited, and they can only target a certain number of computers at a time. Your task is to find out which computers the hacker should target given the limitation of the number of computers they can attack simultaneously. Input The first line contains two integers, n and k (1 ≤ k ≤ n ≤ 100) — the number of computers in the network and the maximum number of computers the hacker can attack at once, respectively. The second line contains n space-separated integers pi (0 ≤ pi ≤ 1000) — the number of peripherals connected to each computer. Output Output k distinct integers representing the indexes (1-based) of the computers that the hacker should target to maximize the total number of peripherals taken over. If there are multiple valid answers, output any of them. Examples Input 6 3 5 3 8 6 7 2 Output 3 5 4 Input 4 2 1 1 1 1 Output 1 2 Input 5 5 10 20 30 40 50 Output 5 4 3 2 1","solution":"def computers_to_target(n, k, peripherals): Returns the indexes of the computers to target to maximize the number of peripherals taken over. :param n: int - Number of computers in the network. :param k: int - Maximum number of computers the hacker can attack at once. :param peripherals: list of int - Number of peripherals connected to each computer. :return: list of int - Indexes of the computers to target. indexed_peripherals = list(enumerate(peripherals, 1)) indexed_peripherals.sort(key=lambda x: x[1], reverse=True) return [indexed_peripherals[i][0] for i in range(k)]"},{"question":"You have a grid with n rows and m columns. Each cell (i, j) of the grid contains an integer value G[i][j]. You are given q queries, each query consists of four integers x1, y1, x2, y2 representing two opposite corners of a subgrid. For each query, determine if the sum of the integers in the subgrid from (x1, y1) to (x2, y2) is even or odd. Input The first line contains three space-separated integers n, m, q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 10000). The next n lines each contain m integers representing the grid G (0 ≤ G[i][j] ≤ 1000). Each of the next q lines contains four space-separated integers x1, y1, x2, y2 indicating the coordinates of the query\'s subgrid (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m). Output For each query, print \\"EVEN\\" if the sum of the elements within the specified subgrid is even, otherwise print \\"ODD\\". Examples Input 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 Output ODD EVEN Input 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 4 Output EVEN Note In the first example, for the first query, the subgrid from (1, 1) to (2, 2) containing elements [1, 2, 4, 5] has a sum of 12, which is even, so the output is \\"EVEN\\". For the second query, the subgrid from (2, 2) to (3, 3) containing elements [5, 6, 8, 9] has a sum of 28, which is even, so the output is \\"EVEN\\".","solution":"def is_sum_even(n, m, q, grid, queries): Determines if the sum of elements in subgrids specified by queries is even or odd. results = [] for x1, y1, x2, y2 in queries: subgrid_sum = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): subgrid_sum += grid[i][j] if subgrid_sum % 2 == 0: results.append(\\"EVEN\\") else: results.append(\\"ODD\\") return results"},{"question":"You are given an array of n integers and two integers k and s. You have to find if there exists a subarray of length exactly k whose sum is equal to s. A subarray is contiguous part of an array. Input The first line contains three integers n, k, and s (1 ≤ n ≤ 100000, 1 ≤ k ≤ n, 1 ≤ s ≤ 10^9). The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000). Output Print \\"YES\\" if there exists such a subarray, otherwise print \\"NO\\". Example Input 5 3 6 1 2 3 4 5 Output YES Input 5 2 10 1 2 3 4 5 Output NO","solution":"def contains_subarray_with_sum(arr, n, k, s): Returns \\"YES\\" if there exists a subarray of length exactly k whose sum is equal to s. current_sum = sum(arr[:k]) if current_sum == s: return \\"YES\\" for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] if current_sum == s: return \\"YES\\" return \\"NO\\""},{"question":"To assess your coding skills, you will work on an interesting problem involving string manipulation. # Problem: Longest Palindromic Substring Given a string s, your task is to find the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. Your solution should be efficient and handle large inputs within a reasonable time frame. Input - The first line contains a single integer t, the number of test cases (1 ≤ t ≤ 100). - Each of the next t lines contains a single string s, where s consists only of lowercase English letters and has length between 1 and 1000. Output For each test case, output the longest palindromic substring. If there are multiple substrings with the same maximum length, you may output any one of them. Example # Input ```plaintext 2 babad cbbd ``` # Output ```plaintext bab bb ``` In the first test case, \\"bab\\" is the longest palindromic substring (note that \\"aba\\" is also a valid answer). In the second test case, \\"bb\\" is the longest palindromic substring.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in a given string s. if len(s) <= 1: return s start, max_length = 0, 1 for i in range(1, len(s)): # Check for even-length palindrome low, high = i - 1, i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd-length palindrome low, high = i - 1, i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length] def process_test_cases(test_cases): return [longest_palindromic_substring(case) for case in test_cases]"},{"question":"Imagine you are developing a simple version control system for text documents. The system should handle a specific type of query regarding the history of changes to the document. There is an initial document consisting of only lowercase English letters. You will be given a series of operations, each of which can either be an \\"add\\" operation that appends a single character to the end of the document, a \\"remove\\" operation that removes the last character of the document, or a \\"query\\" operation that asks for a specific portion of the current version of the document. Performing an \\"add\\" or \\"remove\\" operation will modify the document accordingly. A \\"query\\" operation will require you to return a substring of the current document based on start and end indices provided. More formally, you need to process the following types of operations on a document: 1. `add c` - Append character `c` to the end of the document. 2. `remove` - Remove the last character from the document. It\'s guaranteed that this operation will not be called on an empty document. 3. `query l r` - Output the substring of the document from index `l` to `r` inclusive. It\'s guaranteed that the indices provided will always be valid. Input The input consists of multiple lines: - The first line contains an integer `Q` (1 <= Q <= 10^5), the total number of operations. - Each of the next `Q` lines contains one of the `add c`, `remove`, or `query l r` operations. Output For each `query` operation, print the corresponding substring on a new line. Example Input 8 add a add b add c query 0 1 remove query 0 1 add d query 0 2 Output ab ab abd","solution":"def version_control_system(operations): document = [] result = [] for operation in operations: parts = operation.split() if parts[0] == \'add\': document.append(parts[1]) elif parts[0] == \'remove\': document.pop() elif parts[0] == \'query\': l = int(parts[1]) r = int(parts[2]) result.append(\'\'.join(document[l:r+1])) return result"},{"question":"Little Dormi is playing with dominoes on a grid and needs your help to determine if he can completely cover a particular rectangular grid using only 2x1 dominoes. The rectangular grid has dimensions n rows and m columns, where n and m are both even. Little Dormi can place a 2x1 domino either horizontally or vertically on the grid, but each domino must completely cover exactly two cells. Little Dormi asks if it is possible to cover every cell of the grid exactly once with these dominoes. If it\'s possible, you should also determine one possible way to arrange the dominoes on the grid. # Input The first line contains two space-separated even integers n and m (2 ≤ n, m ≤ 50), the dimensions of the grid. The next n lines contain m characters each (either \'.\' or \'#\'), representing the grid Little Dormi has created. The character \'.\' represents an empty cell, and the character \'#\' represents an obstacle that cannot be covered by any domino. # Output If it\'s possible to cover all the empty cells with the dominoes, print `YES` followed by n lines, each containing m characters, describing one possible way to cover the grid. Use the letters \'A\' to \'Z\' to label the dominos in the solution, where each domino is represented by two identical characters. If it is not possible, print `NO`. # Examples Example 1 # Input ``` 4 4 .... .... .... .... ``` # Output ``` YES AABB CCDD EEFF GGHH ``` Example 2 # Input ``` 4 4 .#.. .. .... .#.. ``` # Output ``` NO ``` # Explanation In the first example, the entire grid can be covered by dominoes, whereas in the second example, the presence of obstacles makes it impossible to cover every cell exactly once with 2x1 dominoes.","solution":"def can_cover_with_dominoes(n, m, grid): from collections import deque # Check the total number of empty cells. empty_cells = sum(row.count(\'.\') for row in grid) # If the number of empty cells is odd, it\'s impossible to cover them with 2x1 dominoes. if empty_cells % 2 != 0: return \\"NO\\" # Directions for placing dominoes (right, down) directions = [(0, 1), (1, 0)] # Marking grid to keep track of placements and visited cells. mark = [list(row) for row in grid] domino_label = ord(\'A\') # ASCII value for \'A\' def in_bounds(i, j): return 0 <= i < n and 0 <= j < m for i in range(n): for j in range(m): if mark[i][j] == \'.\': placed = False for di, dj in directions: ni, nj = i + di, j + dj if in_bounds(ni, nj) and mark[ni][nj] == \'.\': mark[i][j] = mark[ni][nj] = chr(domino_label) domino_label += 1 placed = True break if not placed: return \\"NO\\" result_grid = [\'\'.join(row) for row in mark] return \'YESn\' + \'n\'.join(result_grid) # The function to parse input and call the main function def solve_domino_cover(n, m, raw_grid): grid = [list(line) for line in raw_grid] return can_cover_with_dominoes(n, m, grid)"},{"question":"A new amusement park has been opened recently, and it features a thrilling ride called \\"The Gravity Spiral\\". This ride is uniquely structured in a spiral staircase manner with P platforms, numbered from 0 to P-1 in an ascending order. The time it takes to travel from platform K to platform K+1 is represented by a value T[K] (0 <= K < P-1). Here\'s the twist: each rider starts the ride from platform S. From any platform K (0 <= K < P), the rider can either choose to move up to platform K+1 (if K+1 exists) or choose to slide down to any lower platform. You are to determine the minimum time it takes for a rider to travel from their starting platform S to the final platform P-1. Input Format: - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains two integers P and S, where P is the number of platforms and S is the starting platform. - The second line contains (P-1) integers representing the array T, where T[K] denotes the time to travel from platform K to platform K+1. Output Format: For each test case, output the minimum time required to travel from platform S to the final platform P-1. Constraints: - 1 ≤ T ≤ 10^5 - 2 ≤ P ≤ 10^5 - 0 ≤ S < P - 1 ≤ T[K] ≤ 10^4 SAMPLE INPUT 3 5 0 1 3 2 4 5 2 1 3 2 4 7 1 3 2 4 3 2 1 SAMPLE OUTPUT 10 6 12 Explanation: Case 1: The rider can move directly from platform 0 to 4: 1 + 3 + 2 + 4 = 10. Case 2: The rider starts from platform 2 and moves directly up: 2 + 4 = 6. Case 3: The rider starts from platform 1 and moves up to platform 6: 2 + 4 + 3 + 2 + 1 = 12.","solution":"def min_time_to_final_platform(P, S, T): Returns the minimum time required to travel from platform S to platform P-1. Parameters: - P: The number of platforms. - S: The starting platform. - T: List of integers where T[K] is the time to travel from platform K to K+1. Returns: The minimum time needed to reach platform P-1 from platform S. # If the starting platform is already the final platform if S == P-1: return 0 # Minimum time to get from S to P-1 min_time = 0 # Accumulate the time from platform S to P-1 for i in range(S, P-1): min_time += T[i] return min_time def process_test_cases(test_cases): results = [] for case in test_cases: P, S = case[0] T = case[1] results.append(min_time_to_final_platform(P, S, T)) return results"},{"question":"Write a program that reads a sequence of numbers and checks if any subsequence of length k has a sum divisible by m. The sequence consists of n integers. Constraints - 1 leq n leq 100 - 2 leq k leq n - 1 leq m leq 1,000 - Each number in the sequence is between -1,000 and 1,000 Input - In the first line, three integers n, k, and m are given. - In the second line, a sequence of n integers is provided. Output - Print \\"YES\\" if there is a subsequence of length k whose sum is divisible by m, otherwise print \\"NO\\". Example Input 10 3 5 2 4 7 1 9 3 8 6 5 2 Output YES Input 5 2 3 1 1 1 1 1 Output NO Explanation: In the first example, the subsequence [4, 1, 3] has a sum of 8 which is divisible by 5. Hence, the output is \\"YES\\". In the second example, no subsequence of length 2 has a sum that is divisible by 3. Therefore, the output is \\"NO\\".","solution":"def is_subsequence_sum_divisible(n, k, m, sequence): from itertools import combinations for subseq in combinations(sequence, k): if sum(subseq) % m == 0: return \\"YES\\" return \\"NO\\""},{"question":"Alex is participating in a robot race. Each robot, including Alex\'s, can be programmed to move either left or right along a straight track. The track is divided into equal segments, represented by an array of integers. Each integer indicates the energy points available at that segment. Alex\'s robot initially starts at a given position and has a specific amount of initial energy. At each step, the robot can move to an adjacent segment (either left or right) and consume energy equal to the absolute value of the difference in energy points between the current segment and the destination segment. Alex wants to program his robot to maximize the total distance it can travel without running out of energy. Write a function `max_distance(n, initial_position, initial_energy, energy_points)` which determines the maximum distance the robot can travel. # Input - An integer `n`, the number of segments on the track. - An integer `initial_position`, the starting segment of the robot (0-indexed). - An integer `initial_energy`, the initial energy of the robot. - An array of `n` integers representing the energy points on each segment of the track. # Output Return an integer representing the maximum distance the robot can travel. # Constraints - 1 ≤ n ≤ 10^5 - 0 ≤ initial_position < n - 1 ≤ initial_energy ≤ 10^9 - 1 ≤ energy_points[i] ≤ 10^6 # Example Input ``` n = 5 initial_position = 2 initial_energy = 10 energy_points = [1, 2, 3, 4, 5] ``` Output ``` 3 ``` Explanation The robot starts at position 2 with energy points of 3 and 10 units of initial energy. The robot can move: - Right to position 3, consuming |4 - 3| = 1 energy (remaining energy = 9) - Right to position 4, consuming |5 - 4| = 1 energy (remaining energy = 8) - Left to position 3, consuming |4 - 5| = 1 energy (remaining energy = 7) - Left to position 2, consuming |3 - 4| = 1 energy (remaining energy = 6) - Left to position 1, consuming |2 - 3| = 1 energy (remaining energy = 5) - Left to position 0, consuming |1 - 2| = 1 energy (remaining energy = 4) In total, it covers 3 distances (3 to 4, 4 to 3, and 3 to 2). The robot cannot go further left or right without consuming more energy than it has left. Therefore, the maximum distance Alex\'s robot can travel is 3.","solution":"def max_distance(n, initial_position, initial_energy, energy_points): Determine the maximum distance Alex\'s robot can travel without running out of energy. left = initial_position right = initial_position current_energy = initial_energy while True: if left > 0: move_left_cost = abs(energy_points[left] - energy_points[left - 1]) else: move_left_cost = float(\'inf\') if right < n - 1: move_right_cost = abs(energy_points[right] - energy_points[right + 1]) else: move_right_cost = float(\'inf\') if move_left_cost <= current_energy or move_right_cost <= current_energy: if move_left_cost <= move_right_cost and move_left_cost <= current_energy: current_energy -= move_left_cost left -= 1 elif move_right_cost <= move_left_cost and move_right_cost <= current_energy: current_energy -= move_right_cost right += 1 else: break return right - left"},{"question":"You are given a string `S` of length `N` consisting of alphabetic characters. You are also given `Q` queries. Each query contains a single integer `K`, representing a requested shift to be performed on the string. For each query, perform a Caesar cipher shift on all characters of the string `S`, where each character in the string is shifted by `K` positions within the alphabet. After processing each query, print the resulting string for that query. Constraints * 1≤N≤10^5 * 1≤Q≤10^5 * 1≤K≤10^9 Input Input is given from Standard Input in the following format: N Q S K_1 K_2 : K_Q Output Print `Q` lines. Each line should contain the resulting string after applying the respective query shift. Examples Input 5 3 abcde 1 2 3 Output bcdef cdefg defgh Input 7 2 welcome 26 52 Output welcome welcome","solution":"def caesar_cipher_shift(S, K): Shifts the characters in string S by K positions in the alphabet. shifted_string = [] K = K % 26 # Since shifting by 26 brings us to the original string for char in S: if \'a\' <= char <= \'z\': shifted_char = chr(((ord(char) - ord(\'a\') + K) % 26) + ord(\'a\')) elif \'A\' <= char <= \'Z\': shifted_char = chr(((ord(char) - ord(\'A\') + K) % 26) + ord(\'A\')) else: shifted_char = char shifted_string.append(shifted_char) return \'\'.join(shifted_string) def process_queries(N, Q, S, queries): Processes Q shift queries on string S. results = [] for K in queries: result = caesar_cipher_shift(S, K) results.append(result) return results"},{"question":"Alice owns a boutique salon and she has a reservation log that records customer appointments throughout the day. Each appointment is represented by the customer\'s name and their start and end times. Alice needs to find out the maximum number of customers that are in the salon at the same time at any point in the day. Write a program that, given the appointment times, determines the maximum number of overlapping appointments. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of appointments. The following n lines each contain a string (without spaces) and two integers, representing the customer\'s name (1 ≤ length of name ≤ 50), their start time, and end time (0 ≤ start time < end time ≤ 1440), respectively. The start and end times are given in minutes since 00:00 (midnight). Output Print a single integer — the maximum number of overlapping appointments. Examples Input 3 Alice 540 600 Bob 570 630 Charlie 620 680 Output 2 Input 4 Diana 480 540 Eva 500 560 Frank 540 600 Grace 600 660 Output 2 Note In the first sample, Alice\'s appointment overlaps with Bob\'s, and Bob\'s overlaps with Charlie\'s, but there are never more than two appointments happening at the same time. In the second sample, Diana\'s appointment overlaps with Eva\'s, and Frank\'s appointment ends just as Grace\'s starts, leading to a maximum overlap of two appointments.","solution":"def max_overlapping_appointments(n, appointments): Determines the maximum number of overlapping appointments at any point in the day. Parameters: n: int - Number of appointments appointments: List[Tuple[str, int, int]] - List of tuples containing the customer\'s name, start time, and end time Returns: int - Maximum number of overlapping appointments events = [] for appt in appointments: name, start, end = appt events.append((start, 1)) # Increment count at start time events.append((end, -1)) # Decrement count at end time events.sort() current_overlaps = 0 max_overlaps = 0 for time, event_type in events: current_overlaps += event_type max_overlaps = max(max_overlaps, current_overlaps) return max_overlaps"},{"question":"Problem description. Mason loves prime numbers and also palindromes. He came up with a challenge to test his friends. He asked them to find the smallest prime palindrome greater than or equal to a given number N. A number is called a palindrome if it reads the same backward as forward. Help Mason\'s friends by writing a program to solve this challenge. Input Input contains only a single integer N. Output Print the smallest prime palindrome greater than or equal to N. Constraints 1 ≤ N ≤ 10^8 Example Input: 31 Output: 101 Explanation If N=31, the smallest prime palindrome greater than or equal to 31 is 101 because 101 is a prime number and also reads the same backward as forward. Hence the output should be 101.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[::-1] def smallest_prime_palindrome(n): Returns the smallest prime palindrome greater than or equal to n. while True: if is_prime(n) and is_palindrome(n): return n n += 1"},{"question":"In a certain office, all documents are initially unsorted. Documents are identified by unique positive integers and have a unique version number. We occasionally want to find the latest version of some documents. To aid in this, you are to write an algorithm to efficiently manage the documents and handle queries related to retrieving the latest version. Each operation that targets the document system will be one of the following types: 1. `ADD d v` - Add a new version `v` for the document identified by `d`. 2. `QUERY d` - Retrieve the latest version number of the document identified by `d`. The initial state of the document system is empty. Input The first line of the input contains an integer `m` (1 ≤ m ≤ 100,000) — the number of operations. Each of the following `m` lines contains one of the two operations described above. Output For each `QUERY` operation, output the latest version number of the document identified by `d`. If the document `d` doesn\'t exist, output `-1`. Examples Input 6 ADD 1 3 ADD 1 5 QUERY 1 ADD 2 4 QUERY 2 QUERY 3 Output 5 4 -1 Input 5 ADD 2 1 ADD 3 4 ADD 2 2 QUERY 2 QUERY 3 Output 2 4","solution":"def document_management_system(operations): Manages the documents and their versions based on the given operations. Parameters: operations (list of str): List of operations in the form \'ADD d v\' or \'QUERY d\'. Returns: list of int: List of results for each \'QUERY\' operation. doc_versions = {} results = [] for operation in operations: parts = operation.split() command = parts[0] doc_id = int(parts[1]) if command == \'ADD\': version = int(parts[2]) if doc_id in doc_versions: doc_versions[doc_id] = max(doc_versions[doc_id], version) else: doc_versions[doc_id] = version elif command == \'QUERY\': results.append(doc_versions.get(doc_id, -1)) return results # Example usage: # operations = [\\"ADD 1 3\\", \\"ADD 1 5\\", \\"QUERY 1\\", \\"ADD 2 4\\", \\"QUERY 2\\", \\"QUERY 3\\"] # print(document_management_system(operations)) # Output should be: [5, 4, -1]"},{"question":"A company is launching a new password policy to strengthen security. The new policy mandates that a valid password must have the following characteristics: - At least 8 characters long - Contains at least one uppercase letter - Contains at least one lowercase letter - Contains at least one digit - Contains at least one special character from the set !@#%^&*() Given a list of passwords, your task is to write a program that determines which passwords from the list are valid according to the new policy. The input will be: The first line contains an integer N, representing the number of passwords. The next N lines each contain a single password to be checked. The output should be: For each password, output \\"YES\\" if it meets the criteria, otherwise output \\"NO\\". SAMPLE INPUT 5 Password123! password123 PASSWORD123! Passw0rd Passw@rd12 SAMPLE OUTPUT YES NO NO NO YES","solution":"import re def is_valid_password(password): Checks if the given password meets the new policy requirements. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()]\', password): return False return True def check_passwords(passwords): Given a list of passwords, return a list of \\"YES\\" or \\"NO\\" indicating whether each password is valid according to the new policy. return [\\"YES\\" if is_valid_password(password) else \\"NO\\" for password in passwords]"},{"question":"Mike loves playing with colors. He has an unlimited supply of three primary colors: red, green, and blue. He wants to mix these primary colors to form various new colors. Each new color Mike wants to create requires a specific quantity of red, green, and blue. Given a list of ratios for each color he wants to generate, help Mike determine how many unique colors he can create considering each color’s ratio needed relative to others. A color ratio is considered unique if there is no other ratio that can be used to create the same color using divisors or multiples. For instance, (2, 4, 6) is not unique if (1, 2, 3) is already counted because (2, 4, 6) is simply a multiple of (1, 2, 3). Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of colors Mike wants to create. Each of the next n lines contains three integers r, g, and b (1 ≤ r, g, b ≤ 1000) — the quantities of red, green, and blue used to create that color. Output Print a single integer — the number of unique colors Mike can create. Examples Input 5 2 4 6 1 2 3 3 3 9 2 2 6 5 6 7 Output 3 Input 4 1 1 1 10 10 10 2 2 2 1 1 1 Output 1 Input 3 1 2 3 2 4 6 3 5 9 Output 2 Note In the first example: - (2, 4, 6) and (1, 2, 3) are the same color as (2, 4, 6) is just a multiple of (1, 2, 3). - (3, 3, 9) and (2, 2, 6) are not considered the same unique color because although they share a common multiple they are not directly proportional. - (5, 6, 7) is a unique color. Thus there are three unique colors. In the second example: - (1, 1, 1), (10, 10, 10), and (2, 2, 2) are considered the same color since they all have the same ratio. Thus there is only one unique color. In the third example: - (1, 2, 3) and (2, 4, 6) are the same color. - (3, 5, 9) is a unique color. Thus there are two unique colors.","solution":"import math def gcd(x, y): while y: x, y = y, x % y return x def normalize_color(r, g, b): g_value = gcd(gcd(r, g), b) return (r // g_value, g // g_value, b // g_value) def count_unique_colors(n, color_ratios): unique_colors = set() for r, g, b in color_ratios: normalized = normalize_color(r, g, b) unique_colors.add(normalized) return len(unique_colors)"},{"question":"```markdown You are given a grid of characters representing a Word Search puzzle and a list of words to be found within the grid. A word can be found if its letters are sequentially adjacent cells in any of the 8 possible directions (left, right, up, down, or any of the 4 diagonals). The same cell cannot be used more than once for a single word. Your task is to check if each word in the list exists within the grid. Write a function `findWords` that takes in two arguments: 1. `board` - a list of lists of characters representing the Word Search grid. 2. `words` - a list of strings representing the words to be found in the grid. The function should return a list of booleans indicating whether each word is found in the grid or not. Example Input: ```python board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] words = [\\"ABCCED\\", \\"SEE\\", \\"ABCB\\"] ``` Example Output: ```python [True, True, False] Explanation: - The word \\"ABCCED\\" can be found starting from the top-left corner, moving right, right, down, down, left. - The word \\"SEE\\" can be found starting from the bottom-right corner, moving left, up, left. - The word \\"ABCB\\" cannot be found as there\'s no valid path that uses the same cell (B) more than once. ``` Note: - You may assume that all characters are capital letters and the grid dimensions do not exceed 200x200. ```","solution":"def findWords(board, words): Returns a list of booleans indicating if each word in the list exists in the grid. def exist(board, word): def dfs(board, word, i, j, word_index): if word_index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[word_index]: return False tmp, board[i][j] = board[i][j], \'#\' found = any(dfs(board, word, i + di, j + dj, word_index + 1) for di, dj in directions) board[i][j] = tmp return found for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True return False directions = [ (-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1) ] return [exist(board, word) for word in words]"},{"question":"Alice is organizing a coding competition with n participants and m friendships between them. Each participant can either be a competitor or a mentor, and a competitor can only be mentored by a single mentor. Additionally, two participants can only have a mentoring relationship if they are friends. Alice wants to form as many unique mentoring pairs as possible to foster a collaborative learning environment. A participant cannot be both a competitor and a mentor at the same time. Given the number of participants and the list of friendships, determine the maximum number of unique mentoring pairs that Alice can form. Input The first line contains two integers n and m (1 ≤ n ≤ 106, 0 ≤ m ≤ 106). Each of the next m lines contains two integers, representing a pair of participants who are friends. No friendship is listed more than once and no participant is friends with themselves. Output Print a single integer, the maximum number of unique mentoring pairs. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 4 4 1 2 1 3 1 4 2 3 Output 2 Input 3 0 Output 0 Note In the first example, the maximum number of mentoring pairs is 2. Possible pairs can be (1, 2) and (4, 5). In the second example, the maximum number of mentoring pairs is also 2. One possible arrangement is (1, 2) and (3, 4). In the third example, there are no friendships, so no mentoring pairs can be formed.","solution":"def max_mentoring_pairs(n, m, friendships): Returns the maximum number of unique mentoring pairs based on the number of participants and their friendships. Parameters: n (int): Number of participants. m (int): Number of friendships. friendships (list of tuples): List of tuples where each tuple (u, v) indicates a friendship between u and v. Returns: int: Maximum number of mentoring pairs. return min(m, n // 2)"},{"question":"Problem Statement You are given an array of integers, which represent the lengths of various segments. You want to select three segments to form a triangle. The segments must satisfy the triangle inequality: - The sum of any two sides must be greater than the third side. Your task is to determine the maximum perimeter of a triangle that can be formed with these segments. If no triangle can be formed, output 0. # Constraint - The number of segments n is between 3 and 10^5. - Each segment length is a positive integer not exceeding 10^9. # Input A single line containing n integers, representing the lengths of the segments. # Output Output the maximum perimeter of a triangle that can be formed, or 0 if no triangle can be formed. # Input Example 1 ``` 2 3 4 5 10 ``` # Output Example 1 ``` 12 ``` *Explanation*: You can form a triangle with sides 3, 4, and 5. The perimeter of this triangle is 12. # Input Example 2 ``` 1 2 3 ``` # Output Example 2 ``` 0 ``` *Explanation*: No triangle can be formed with these sides, since the sum of any two sides is not greater than the third side in all cases. # Input Example 3 ``` 5 10 25 1 ``` # Output Example 3 ``` 0 ``` *Explanation*: No triangle can be formed with these sides. For the potential triangles (5, 10, 25), (5, 25, 1), and (10, 25, 1) the triangle inequality does not hold. # Note Your implementation should read from standard input and write to standard output. Use efficient algorithms to handle large input sizes within acceptable time limits.","solution":"def max_perimeter(segments): segments.sort(reverse=True) for i in range(len(segments) - 2): if segments[i] < segments[i + 1] + segments[i + 2]: return segments[i] + segments[i + 1] + segments[i + 2] return 0"},{"question":"Tom recently started learning about prime numbers in his math class. He was given an assignment to determine the nth prime number, but he finds it a bit tricky. Can you help Tom by writing a program to find the nth prime number? To solve this, start listing prime numbers from the smallest one and continue until you reach the nth prime number. INPUT: - The input consists of a single integer n, where 1 ≤ n ≤ 1000. OUTPUT: - Output should be a single integer, which is the nth prime number. HINT: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. SAMPLE INPUT 6 SAMPLE OUTPUT 13","solution":"def nth_prime(n): Returns the nth prime number. if n < 1: raise ValueError(\\"Input should be a positive integer greater than or equal to 1\\") primes = [] candidate = 2 while len(primes) < n: # Check if candidate is a prime number is_prime = True for prime in primes: if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes[-1]"},{"question":"Write a function that simulates the game of life for one step. The Game of Life is a simple cellular automaton devised by the British mathematician John Horton Conway in 1970. The game is played on a rectangular grid of cells, where each cell can be either alive (1) or dead (0). The cells evolve at each step according to the following rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overpopulation). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). The neighbors of a cell are the 8 cells immediately adjacent (horizontal, vertical, and diagonal). Write a function `game_of_life(grid: List[List[int]]) -> List[List[int]]` that computes the next state of the grid after one step. The function should take and return a 2D list representing the grid, where grid[i][j] can be 1 (alive) or 0 (dead). Input - A 2D list of integers representing the initial state of the grid. The grid dimensions can range from 1x1 to 100x100. - Each cell in the grid is either 1 (alive) or 0 (dead). Output - A 2D list of integers representing the next state of the grid after applying the rules of the Game of Life. Example Input [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] Output [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] Explanation In the above example: - Cell (1,1) with 3 neighbors lives. - Cell (2,0) with 3 neighbors lives. - Cell (2,1) with 2 or 3 neighbors lives. - Cell (2,2) with 2 or 3 neighbors lives. - Cells with fewer than 2 or more than 3 neighbors die or remain dead.","solution":"def game_of_life(grid): Simulates the Game of Life for one step. def get_neighbors_count(x, y): directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)] live_neighbors = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: live_neighbors += 1 return live_neighbors rows, cols = len(grid), len(grid[0]) new_grid = [[0] * cols for _ in range(rows)] for i in range(rows): for j in range(cols): live_neighbors = get_neighbors_count(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[i][j] = 0 else: new_grid[i][j] = 1 else: if live_neighbors == 3: new_grid[i][j] = 1 return new_grid"},{"question":"George loves playing with Lego blocks. He has a collection of Lego blocks, each with a unique color. George\'s favorite activity is to build structures using these blocks. For the upcoming competition, George wants to create a rainbow tower using his blocks. A rainbow tower is defined as a sequence of blocks where no two adjacent blocks have the same color. Given the upcoming events in a sequence, where each event either adds or removes a Lego block from George\'s collection, George wants to know the height of the tallest rainbow tower he can build after each event. Each event is described as follows: - An \'A\' event where a new block with a specific color is added to George\'s collection. - An \'R\' event where a block of a specific color is removed from George\'s collection. Assuming there can be at most 10^5 such events, design a program that helps George to determine the height of the tallest possible rainbow tower after each event. # Input - The first line contains an integer N, the number of events (1 ≤ N ≤ 10^5). - Each of the next N lines describes an event. An \'A\' event is followed by a string representing the color of the block being added. An \'R\' event is followed by a string representing the color of the block being removed. # Output - Print N lines. The i-th line should contain an integer representing the height of the tallest possible rainbow tower after the first i events. # Example Input ``` 6 A red A blue A yellow R red A green R yellow ``` Output ``` 1 2 3 2 3 2 ``` # Note In the example, the sequence of events and respective heights of the tallest rainbow tower are as follows: - After adding \\"red\\": [red] -> Height = 1 - After adding \\"blue\\": [red, blue] -> Height = 2 - After adding \\"yellow\\": [red, blue, yellow] -> Height = 3 - After removing \\"red\\": [blue, yellow] -> Height = 2 - After adding \\"green\\": [blue, yellow, green] -> Height = 3 - After removing \\"yellow\\": [blue, green] -> Height = 2","solution":"def tallest_rainbow_tower(events): color_set = set() tower_heights = [] for event in events: action, color = event.split() if action == \'A\': color_set.add(color) elif action == \'R\': color_set.discard(color) tower_heights.append(len(color_set)) return tower_heights"},{"question":"You are given an array of integers of length N: A_1, A_2, ..., A_N. For each integer i between 1 and N (inclusive), answer the following question: * Find the sum of all elements except A_i in the sequence. Constraints * 2 leq N leq 200000 * 1 leq A_i leq 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 : A_N Output Print N lines. The i-th line (1 leq i leq N) should contain the sum of all elements except A_i in the sequence. Examples Input 4 1 2 3 4 Output 9 8 7 6 Input 3 2 2 2 Output 4 4 4","solution":"def sum_except_self(arr): Given an array of integers, returns a list where the ith element is the sum of all elements of the array except the ith element. total_sum = sum(arr) result = [total_sum - x for x in arr] return result"},{"question":"You are tasked with managing an aquarium in a large marine theme park. The aquarium is filled with different types of fish, marine plants, and decorations. The management wants to introduce a new feeding system that ensures all fish are fed without over-feeding any single type of fish. The aquarium layout can be represented as a grid of cells, where each cell can contain one type of fish (represented by a unique letter), a plant, a decoration, or be empty. The feeding system will place food pellets in the grid according to certain rules: 1. Each fish type should have exactly one food pellet placed in any one of the cells containing that fish type. 2. A food pellet cannot be placed in a cell that contains a plant or decoration. 3. If a fish type is present in multiple cells, it does not matter which cell is chosen, as long as the distribution ensures all fish types receive exactly one food pellet. Your task is to write a function that places the food pellets in the grid according to these rules and returns the resulting grid with the food pellets indicated by adding an asterisk \'*\' to the cell. # Input - A 2D grid of size `n x m` (1 ≤ n, m ≤ 100), where each cell is either: - A letter representing a fish type (e.g., \'A\', \'B\', \'C\', etc.), - A dot \'.\' representing an empty cell, - A hash \'#\' representing a plant or decoration. # Output - A 2D grid of the same size, with food pellets placed in valid cells according to the rules. Food pellets are indicated by adding an asterisk \'*\' to the fish type in the chosen cell (e.g., \'A*\', \'B*\'). # Function Signature ```python def place_food_pellets(grid: List[List[str]]) -> List[List[str]]: pass ``` # Example Input ```python grid = [ [\'A\', \'.\', \'#\', \'B\'], [\'B\', \'C\', \'.\', \'A\'], [\'#\', \'.\', \'C\', \'#\'] ] ``` Output ```python [ [\'A*\', \'.\', \'#\', \'B*\'], [\'B*\', \'C\', \'.\', \'A\'], [\'#\', \'.\', \'C*\', \'#\'] ] ``` # Notes - Each fish type appears at least once in the grid. - Multiple valid outputs are possible, as long as the food placement rules are followed. - You can choose any valid cell for placing a food pellet for each fish type.","solution":"from typing import List def place_food_pellets(grid: List[List[str]]) -> List[List[str]]: fish_types = {} n, m = len(grid), len(grid[0]) # Collect all positions of each fish type for i in range(n): for j in range(m): cell = grid[i][j] if cell.isalpha(): # Check if the cell contains a fish type letter if cell not in fish_types: fish_types[cell] = [] fish_types[cell].append((i, j)) # Place one food pellet for each fish type for fish_type, positions in fish_types.items(): for i, j in positions: if grid[i][j].isalpha(): # Check again if the cell still contains a fish type letter grid[i][j] = fish_type + \'*\' break # Stop after placing one food pellet for this fish type return grid"},{"question":"Design a function `max_in_submatrix(matrix, queries)` that takes a 2D matrix of integers and a list of queries, where each query is specified by four integers (row1, col1, row2, col2). Each query defines a submatrix from `(row1, col1)` to `(row2, col2)` (inclusive). The function should return a list of integers containing the maximum value found in each queried submatrix. **Input:** - matrix: A 2D list of integers with dimensions m x n (1 ≤ m, n ≤ 100) - queries: A list of queries, where each query is specified by four integers [row1, col1, row2, col2] (0 ≤ row1 ≤ row2 < m, 0 ≤ col1 ≤ col2 < n) **Output:** - A list of integers where each integer is the maximum value found in the corresponding submatrix defined by the queries **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = [ [0, 0, 1, 1], [1, 1, 2, 2], [0, 0, 2, 2] ] max_in_submatrix(matrix, queries) ``` **Output:** ```python [5, 9, 9] ```","solution":"def max_in_submatrix(matrix, queries): Returns a list of max values found in each submatrix specified by the queries. Args: matrix (list of list of int): The 2D matrix of integers. queries (list of list of int): The list of queries, where each query is specified by four integers [row1, col1, row2, col2]. Returns: list of int: The list of max values found in each specified submatrix. results = [] for query in queries: row1, col1, row2, col2 = query max_val = matrix[row1][col1] for i in range(row1, row2+1): for j in range(col1, col2+1): if matrix[i][j] > max_val: max_val = matrix[i][j] results.append(max_val) return results"},{"question":"John has M apples, and he wants to distribute these apples equally among P people. After distributing the apples, he will keep the remaining apples for himself. How many apples will John have remaining after the distribution? Constraints * M and P are integers. * 1 ≤ M ≤ 100 * 1 ≤ P ≤ 20 Input Input is given from Standard Input in the following format: ``` M P ``` Output Print the number of apples John will have remaining. Examples Input 10 3 Output 1 Input 15 5 Output 0 Input 7 2 Output 1","solution":"def remaining_apples(M, P): Returns the number of apples remaining after distributing M apples equally among P people. return M % P"},{"question":"Sum of Digits In the United Kingdom of XYZ, every citizen is required to have a unique identification number called the Unique Identity Number (UIN). This number is a positive integer composed of up to 64 digits. The government decides to introduce a security system where citizens\' UINs are verified by computing a check digit. The check digit is computed as follows: 1. Calculate the sum of the digits of the UIN. 2. If the resulting sum is a single digit, it is taken as the check digit. 3. If the resulting sum has more than one digit, repeat the process with the sum until a single digit is obtained. For instance: - If the UIN is 9875, the sum of digits is 9 + 8 + 7 + 5 = 29. Since 29 is not a single-digit number, the digits are summed again to get 2 + 9 = 11. Since 11 is not a single-digit number, its digits are summed to get 1 + 1 = 2. Hence, the check digit is 2. - If the UIN is 12345, the sum of digits is 1 + 2 + 3 + 4 + 5 = 15. Since 15 is not a single-digit number, the digits are summed again to get 1 + 5 = 6. Hence, the check digit is 6. Given a UIN as input, compute and print the check digit for that UIN. Input The input consists of multiple datasets. Each dataset contains a single line representing a UIN, a positive integer with up to 64 digits. The input ends when a line with the single digit zero (\\"0\\") is encountered, which should not be processed. Output For each dataset, output the check digit on a single line. Sample Input 9875 12345 0 Sample Output 2 6 Example Input 9875 12345 0 Output 2 6","solution":"def sum_of_digits(uin): Computes the check digit for the given UIN. while len(uin) > 1: uin = str(sum(int(digit) for digit in uin)) return int(uin) def process_uins(uins): Processes a list of UIN strings, computing the check digit for each. results = [] for uin in uins: if uin == \\"0\\": break results.append(sum_of_digits(uin)) return results"},{"question":"You are given an array of integers where each integer appears an even number of times, except for one integer which appears an odd number of times. Your task is to find the integer that appears an odd number of times. Input: The first line contains the number of test cases T. Each test case contains: - The number of elements in the array, N (an even number + 1). - The elements of the array, separated by spaces. Output: For each test case, output the integer that appears an odd number of times. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ array elements ≤ 10^9 SAMPLE INPUT 2 5 1 2 3 2 1 7 4 4 5 5 6 7 7 SAMPLE OUTPUT 3 6","solution":"def find_odd_occurrence(arr): Function to find the integer in the array that appears an odd number of times. The array is guaranteed to have exactly one such integer. result = 0 for num in arr: result ^= num return result def process_test_cases(test_cases): Function to process multiple test cases. results = [] for N, arr in test_cases: results.append(find_odd_occurrence(arr)) return results"},{"question":"A software company has developed a new security system for controlling access to restricted areas within a building. The security system allows for the programming of security levels for particular sections. Each access point in the building is associated with a unique integer from 1 to n, where each integer represents a specific security level. Employees need to access these areas based on their security clearance. Each employee has a list of authorized security levels they can access. The access points and employee authorizations are represented too. The task is to determine how many different access points each employee can enter based on their list of authorized security levels. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of access points and m is the number of employees. The second line contains n integers, where the i-th integer represents the security level of the i-th access point (1 ≤ security level ≤ 100). The next m lines each start with an integer k (1 ≤ k ≤ 100), followed by k integers representing the list of security levels an employee can access. Output Print m lines. The i-th line should contain the number of access points the i-th employee can access. Examples Input 5 3 3 1 2 3 2 2 1 3 3 1 2 3 1 2 Output 3 5 2 Input 4 2 4 4 1 3 1 4 2 1 3 Output 2 2 Note In the first example, there are 5 access points with security levels [3, 1, 2, 3, 2]. - The first employee can access security level 1 and 3, which corresponds to 3 access points: [3, 1, 3]. - The second employee can access all security levels 1, 2, and 3, which corresponds to all 5 access points. - The third employee can access only security level 2, which corresponds to 2 access points: [2, 2]. This solution involves iterating through each employee\'s authorized security levels and counting the occurrences of these levels in the list of access points.","solution":"def count_access_points(n, m, access_levels, employees): Given the number of access points and employees, along with their respective security levels and access permissions, returns the count of accessible points for each employee. Parameters: n: int: Number of access points m: int: Number of employees access_levels: List[int]: List of security levels of each access point employees: List[List[int]]: List of employees\' authorized security levels Returns: List[int]: List where each element is the number of access points an employee can access access_counts = [] for employee in employees: count = 0 for level in access_levels: if level in employee: count += 1 access_counts.append(count) return access_counts"},{"question":"In a far-away land, there is an ancient city with n magical towers arranged in a line. Each tower has a certain number of magic stones, and the power of a tower is defined as the number of magic stones it has. The wizards of the city are preparing for a great battle and need to increase the power of the towers strategically. The wizards are given q magic boosts they can use. Each magic boost can only be applied to a subarray of towers. When a boost is applied to a subarray, every tower in that subarray increases its number of magic stones by exactly 1. A powerful enemy is approaching, and the wizards need to ensure that all towers have sufficient power after applying the boosts. Your task is to help the wizards find the minimum power of the most powerful tower after applying all the boosts optimally. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of towers and the number of magic boosts. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial number of magic stones in each tower. The next q lines contain two integers li and ri (1 ≤ li ≤ ri ≤ n), which describe the range of the i-th magic boost. All towers within that range will have their number of magic stones increased by exactly 1. Output Print a single integer — the minimum possible maximum power of the most powerful tower after optimally applying all the magic boosts. Examples Input 5 2 1 2 3 4 5 1 3 2 5 Output 6 Input 4 3 2 2 1 4 1 2 2 3 3 4 Output 5 Note In the first example, the best strategy is to apply the first boost to subarray (1, 3) turning the array into [2, 3, 4, 4, 5], and then apply the second boost to subarray (2, 5) turning the array into [2, 4, 5, 5, 6]. The minimum possible maximum power is 6. In the second example, applying the boosts optimally results in [3, 4, 3, 5]. Thus, the minimum possible maximum power is 5.","solution":"def min_possible_max_power(n, q, towers, boosts): Calculate the minimum possible maximum power of the most powerful tower after optimally applying all the boosts. :param n: Number of towers :param q: Number of boosts :param towers: Initial number of magic stones in each tower :param boosts: List of boost ranges :return: Minimum possible maximum power of the most powerful tower boost_counts = [0] * (n + 1) # Apply boosts using the prefix sum technique for l, r in boosts: boost_counts[l] += 1 if r + 1 <= n: boost_counts[r + 1] -= 1 # Calculate the final boosted values current_boost = 0 for i in range(n): current_boost += boost_counts[i + 1] towers[i] += current_boost return max(towers)"},{"question":"Tom loves solving problems that involve sequences. A few days ago, he encountered a series of numbers and wondered if there is a way to determine the minimum length of a contiguous subarray, the sum of whose elements is greater than or equal to a given integer ( S ). Given an array of positive integers ( arr ) and a positive integer ( S ), your task is to write a program that finds the minimal length of a contiguous subarray of which the sum ( geq S ). If there isn\'t one, return 0 instead. Input The first line of input contains the integer ( n ) (1 ≤ ( n ) ≤ 100,000) — the number of elements in the array. The second line contains ( n ) space-separated positive integers ( arr ). The third line contains an integer ( S ) (1 ≤ ( S ) ≤ 1,000,000). Output Output the minimal length of a contiguous subarray of which the sum is greater than or equal to ( S ). If there isn\'t one, return 0. Examples Input 8 2 3 1 2 4 3 2 1 7 Output 2 Input 5 1 2 3 4 5 15 Output 5","solution":"def min_subarray_length(arr, S): Returns the minimal length of a contiguous subarray of which the sum >= S. If there isn\'t one, returns 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Given an integer array of size `n`, you need to move all the zeros to the end of the array while maintaining the relative order of the non-zero elements. You are not allowed to use auxiliary space to solve this problem. Your goal is to do this in-place with O(n) time complexity. Write a function `move_zeros_to_end` that accepts a list of integers and modifies the list in-place to move all zeros to the end. Input - A single line of input contains space-separated integers representing the array `arr` of size `n` (1 ≤ n ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). Output - The function should modify the input array in-place and should not return anything. Examples Input 0 1 0 3 12 Output 1 3 12 0 0 Input 1 0 0 0 5 7 8 Output 1 5 7 8 0 0 0 Note In the first example, after moving all the zeros to the end, the non-zero elements retain their original order: 1, 3, 12. In the second example, after shifting all zeros to the end, the non-zero elements maintain their order: 1, 5, 7, 8.","solution":"def move_zeros_to_end(arr): Move all zeros in the array to the end while maintaining the order of non-zero elements. position = 0 # Position to place the next non-zero element for num in arr: if num != 0: arr[position] = num position += 1 # Fill the remaining positions with zeros for i in range(position, len(arr)): arr[i] = 0"},{"question":"You are given an integer array `nums` and an integer `target`. You want to find a pair of indices `(i, j)` such that `nums[i] + nums[j] = target` and `i < j`. It is guaranteed that there is exactly one solution. Implement a function that finds and returns this pair of indices. Function Signature: ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` Input - An array of integers `nums`, where `2 ≤ len(nums) ≤ 10^4` and each element `-10^9 ≤ nums[i] ≤ 10^9`. - An integer `target`, where `-10^9 ≤ target ≤ 10^9`. Output - A list containing the indices of the two numbers that add up to `target`. Examples Input ``` nums = [2, 7, 11, 15] target = 9 ``` Output ``` [0, 1] ``` Input ``` nums = [3, 2, 4] target = 6 ``` Output ``` [1, 2] ```","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Given an array of integers `nums` and an integer `target`, find two integers in `nums` such that their sum equals `target`. Return their indices as a list. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return []"},{"question":"Jasmine is attending a robot competition where each robot operates on a grid. Each competition has a set of obstacles on the grid that the robots must navigate around. The grid is represented as an `n x n` matrix, with each cell marked with either 0 (free cell) or 1 (obstacle). Jasmine\'s task is to find out if there\'s a way for the robot to go from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, n-1) without hitting any obstacles. The robot can only move right or down. Write a function that determines if such a path exists. The function should return \\"YES\\" if there\'s a path and \\"NO\\" otherwise. Input The first line of the input contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the size of the grid. - The next `n` lines each contain `n` integers representing the grid. Each integer is either 0 or 1. Output For each test case, print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. Example Input 3 3 0 0 0 0 1 0 0 0 0 3 0 1 0 1 0 0 0 0 0 2 0 1 0 0 Output YES NO YES Explanation For the first test case, there\'s a clear path: (0,0) → (0,1) → (0,2) → (1,2) → (2,2). For the second test case, the robot can\'t reach the destination due to obstacles blocking the way. For the third test case, the path is: (0,0) → (1,0) → (1,1).","solution":"def is_path_exist(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return \\"NO\\" visited = [[False for _ in range(n)] for _ in range(n)] def dfs(x, y): if x == n-1 and y == n-1: return True if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] == 1 or visited[x][y]: return False visited[x][y] = True if dfs(x + 1, y) or dfs(x, y + 1): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\" def robot_competition(t, test_cases): results = [] for i in range(t): n, grid = test_cases[i] results.append(is_path_exist(grid)) return results"},{"question":"You are tasked with building a warehouse inventory tracking system. The warehouse has a rectangular grid layout, where each cell in the grid can hold a certain number of units of a single type of product. You need to process a series of queries to update the inventory and to retrieve information about the warehouse. The warehouse is represented by an N x M grid, where each cell (i, j) contains an integer value representing the number of units in that cell. You need to support the following types of queries: 1. **Update the number of units in a specific cell**: Set the number of units in cell (i, j) to a given value. 2. **Query the total number of units in a rectangular sub-area**: Calculate and return the sum of units within a specified subgrid from (r1, c1) to (r2, c2) inclusive, where r1, c1 are the coordinates of the top-left cell and r2, c2 are the coordinates of the bottom-right cell. **Input:** - The first line of input contains two integers, N and M (1 ≤ N, M ≤ 100), representing the dimensions of the warehouse grid. - The following N lines each contain M integers, representing the initial number of units in each cell of the grid. - The next line contains an integer Q (1 ≤ Q ≤ 1000), the number of queries. - Each of the next Q lines contains a query, which can be of two types: - \\"Update\\" followed by three integers i, j, and x (1 ≤ i ≤ N, 1 ≤ j ≤ M, 0 ≤ x ≤ 1000), indicating that the number of units in cell (i, j) should be set to x. - \\"Query\\" followed by four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ N, 1 ≤ c1 ≤ c2 ≤ M), indicating that you should return the sum of units in the subgrid from (r1, c1) to (r2, c2). **Output:** - For each \\"Query\\" type query, output a single integer on a new line representing the sum of units in the specified subgrid. **Examples:** Input: ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 5 Update 2 3 20 Query 1 1 2 2 Query 1 1 3 3 Update 3 4 7 Query 2 2 4 4 ``` Output: ``` 14 78 76 ```","solution":"def initialize_warehouse(n, m, grid_values): Initializes the warehouse with given dimensions and values. warehouse = [row[:] for row in grid_values] return warehouse def update_cell(warehouse, i, j, x): Updates the cell (i, j) with value x. warehouse[i-1][j-1] = x def query_sum(warehouse, r1, c1, r2, c2): Queries the sum of units in the subgrid from (r1, c1) to (r2, c2) inclusive. total = 0 for row in range(r1-1, r2): for col in range(c1-1, c2): total += warehouse[row][col] return total"},{"question":"You are given a list of integers. You should answer n queries. The i-th query consists of two indices l_i and r_i. The answer for this query is the number of distinct elements within the subarray from index l_i to r_i (inclusive). A subarray is a contiguous segment of the array. Input The first line contains an integer N (1 ≤ N ≤ 10^5), representing the number of integers in the list. The second line contains N space-separated integers (1 ≤ a_i ≤ 10^5), representing the elements of the list. The third line contains an integer n (1 ≤ n ≤ 10^5), representing the number of queries. Each of the next n lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ N), representing the indices of the subarray for the i-th query. Output For each query, output the number of distinct elements in the specified subarray in a separate line. Examples Input 5 1 2 1 3 2 3 1 3 1 5 2 4 Output 2 3 3 Input 6 4 4 4 4 4 4 2 1 6 2 4 Output 1 1","solution":"def distinct_elements_in_subarray(arr, queries): Given an array and a list of queries, return the number of distinct elements in the specified subarray for each query. Parameters: arr (list of int): The array of integers. queries (list of tuple): The list of queries where each query is a tuple (l, r). Returns: list of int: Number of distinct elements for each query. results = [] for l, r in queries: subarray = arr[l-1:r] distinct_elements = len(set(subarray)) results.append(distinct_elements) return results"},{"question":"You are working on a project to model social interactions within a community. One aspect of the project requires you to represent and analyze direct friendships. In this context, a friendship can be described as a connection between two individuals. You are given a list of friendships where each friendship is represented by a pair of integers (a, b), indicating that person a is friends with person b. As friendships are mutual, if person a is friends with person b, then person b is also friends with person a. Your goal is to implement a program that can evaluate specific queries about these friendships, particularly determining whether there is a direct or indirect connection (path) between any two given individuals. # Input The first line contains two integers, n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 1000), representing the number of people and the number of friendships respectively. The following m lines each contain two integers a and b (1 ≤ a, b ≤ n), denoting a friendship between persons a and b. The last line contains an integer q (1 ≤ q ≤ 10^3), the number of queries. Each of the following q lines contains two integers u and v (1 ≤ u, v ≤ n), representing a query to check if there is a direct or indirect connection between person u and person v. # Output For each query, print \\"YES\\" if there is a direct or indirect connection between person u and person v, otherwise print \\"NO\\". # Examples Input: ``` 5 3 1 2 2 3 4 5 2 1 3 1 5 ``` Output: ``` YES NO ``` Input: ``` 4 2 1 2 3 4 3 1 2 2 3 1 4 ``` Output: ``` YES NO NO ```","solution":"def find_friendships(n, m, friends, queries): from collections import defaultdict, deque # Create adjacency list representation of the graph graph = defaultdict(list) for a, b in friends: graph[a].append(b) graph[b].append(a) def bfs(source, target): # Breadth-first search to find if there\'s a path from source to target queue = deque([source]) visited = set([source]) while queue: node = queue.popleft() if node == target: return True for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False results = [] for u, v in queries: if bfs(u, v): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Consider a sequence of moves in a coordinate system where you can move left, right, up, or down one unit at a time. You are given a starting point (x, y) and a target point (a, b). Write a program to determine the minimum number of moves required to reach the target point from the starting point. Input The first line contains an integer T, the total number of test cases. Each of the next T lines contains four integers x, y, a, b representing the starting coordinates (x, y) and the target coordinates (a, b). Output For each test case, output the minimum number of moves required to reach the target point. Constraints 1 ≤ T ≤ 1000 -1000 ≤ x, y, a, b ≤ 1000 Example Input 3 0 0 3 4 -1 -1 1 1 2 2 2 2 Output 7 4 0","solution":"def min_moves_to_target(T, test_cases): results = [] for i in range(T): x, y, a, b = test_cases[i] dx = abs(a - x) dy = abs(b - y) results.append(dx + dy) return results"},{"question":"Tyrion is working on a new encryption scheme to secure messages that are transmitted between the members of the Westerosi council. Each message is represented as a string of lowercase English letters. Tyrion\'s encryption scheme involves converting each string into a unique numeric code. The process of converting a string into its numeric code is defined as follows: 1. Convert each letter in the string to its corresponding position in the alphabet (a=1, b=2, ..., z=26). 2. Sum the values for each letter to get the total. Given the total, Tyrion then needs to determine the minimal number of distinct substrings of the original message that sum to that total. For example, for the message \\"abc\\", the total is 1 + 2 + 3 = 6. Possible distinct substrings include {a, b, c, ab, bc, abc}, but we would look for the smallest count of substrings that collectively sum to 6. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100) — the original message. Output For each test case, output a single integer — the minimal number of distinct substrings needed to sum to the total of the original message. Example Input 3 abc az zzz Output 1 3 6 Note In the first example, \\"abc\\" can be used entirely as one substring to sum to 6. In the second example, \\"a\\" sums to 1, and \\"z\\" sums to 26, thus three \\"a\\"s are required. In the third example, each \\"z\\" sums to 26, so it requires six \\"z\\" substrings to sum to the total 78.","solution":"def minimal_substrings_sum(s): Returns the minimal number of distinct substrings needed to sum to the total of the given string. # Compute sum of character positions total_sum = sum(ord(c) - ord(\'a\') + 1 for c in s) # Minimal value to create any sum is \'a\' which is 1 return total_sum def minimal_substrings_for_multiple_cases(test_cases): For multiple test cases, returns a list of minimal substrings results. results = [] for s in test_cases: results.append(minimal_substrings_sum(s)) return results"},{"question":"In a remote village, the villagers have a peculiar tradition where they arrange their huts in a line and number them starting from 1. Every year, they perform a ritual that involves decorating their huts. However, consider that the villagers are quite concerned about the visibility of the decorations. They want to make sure that from any hut, the decorations of the hut with the highest number of decorations within a certain distance to the left or right can be seen clearly. Given the number of huts n and an array that represents the number of decorations in each hut, figure out the maximum number of decorations that can be seen from any hut within a distance of k huts to the left or right. Input The first line contains two integers n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ n) — the number of huts and the maximum distance to consider. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 1000) — the number of decorations in each hut. Output Print an integer — the maximum number of decorations that can be seen from any hut within a distance of k huts to the left or right. Examples Input 7 3 1 3 4 7 6 2 5 Output 7 Input 5 2 2 2 2 2 2 Output 2 Note In the first sample, for any hut, the maximum number of decorations that can be seen from any hut within a distance of 3 huts to the left or right is 7. In the second sample, all huts have the same number of decorations, so the maximum number seen is 2.","solution":"def max_decorations(n, k, decorations): Returns the maximum number of decorations that can be seen from any hut within a distance of k huts to the left or right. max_seen = 0 for i in range(n): left_bound = max(0, i - k) right_bound = min(n - 1, i + k) max_in_range = max(decorations[left_bound:right_bound + 1]) max_seen = max(max_seen, max_in_range) return max_seen"},{"question":"The city of Byteburg is planning a new public transportation network, and you have been tasked with writing software to manage the routes and connections between stops. There are multiple bus routes in Byteburg, and each route visits several stops in a specific sequence. Two stops are considered connected if there exists a route that visits both stops, either directly or via intermediate stops. You are given the current network structure, including the number of stops and routes, followed by each route\'s sequence of stops. Your task is to define a software that can process queries to determine whether two specific stops are connected. Input The first line contains two integers n (1 ≤ n ≤ 10^5) — the number of stops, and m (1 ≤ m ≤ 10^5) — the number of bus routes. The next m lines describe the bus routes. The i-th line contains an integer k_i (1 ≤ k_i ≤ 10^5), followed by k_i integers — the stops on that route in the order they are visited. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The following q lines consist of two integers u and v (1 ≤ u, v ≤ n) for each query, representing two stops. For each query, you need to determine if stop u and stop v are connected by any route. Output For each query, print \\"YES\\" if the two stops are connected, or \\"NO\\" otherwise. Example Input 6 3 3 1 2 3 3 2 3 4 3 4 5 6 4 1 3 1 5 2 4 5 6 Output YES YES YES YES","solution":"def solve_transportation(num_stops, num_routes, routes, queries): from collections import defaultdict, deque # Create a graph where each stop is a node and there\'s an edge between any two stops that share a route graph = defaultdict(list) for route in routes: route_length = route[0] for i in range(1, route_length + 1): for j in range(i + 1, route_length + 1): graph[route[i]].append(route[j]) graph[route[j]].append(route[i]) # Function to determine if two nodes are connected using BFS def is_connected(start, end): if start == end: return True visited = set() queue = deque([start]) while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor == end: return True if neighbor not in visited: queue.append(neighbor) return False results = [] for u, v in queries: results.append(\\"YES\\" if is_connected(u, v) else \\"NO\\") return results"},{"question":"A string is considered \\"busy\\" if it contains at least one vowel and no consecutive vowels. Given a string consisting of lowercase English letters, determine if it is \\"busy\\". Input: The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a single string consisting of lowercase English letters (1 ≤ length of the string ≤ 10^5). Output: For each test case, output \\"YES\\" if the string is \\"busy\\", otherwise output \\"NO\\". Example: Input 3 hello moon busy Output YES NO YES Note For the first example, \\"hello\\" contains vowels \'e\' and \'o\', and no vowels appear consecutively, hence the output is \\"YES\\". For the second example, \\"moon\\" contains vowels \'o\' appearing consecutively which violates the condition, hence the output is \\"NO\\". For the third example, \\"busy\\" contains vowles \'u\' and \'y\', and no vowles appear consecutively, hence the output is \\"YES\\".","solution":"def is_busy_string(s): vowels = set(\'aeiou\') contains_vowel = False for i in range(len(s)): if s[i] in vowels: contains_vowel = True if i > 0 and s[i-1] in vowels: return \\"NO\\" return \\"YES\\" if contains_vowel else \\"NO\\" def busy_strings(test_cases): results = [] for s in test_cases: results.append(is_busy_string(s)) return results"},{"question":"You are given an array consisting of `n` integers. Your task is to determine the number of contiguous subarrays where the sum of the elements is greater than or equal to a given threshold value `k`. # Input - The first line contains two integers `n` and `k` (1 ≤ `n` ≤ 100,000, 1 ≤ `k` ≤ 10^9). - The second line contains `n` space-separated integers representing the array elements. # Output - Output a single integer representing the number of contiguous subarrays having a sum greater than or equal to `k`. # Example Input ``` 5 8 1 3 2 5 2 ``` Output ``` 5 ``` # Explanation The contiguous subarrays whose sums are greater than or equal to 8 are: - [3, 2, 5] : sum = 10 - [2, 5, 2] : sum = 9 - [5, 2] : sum = 7+2 = 9 - [5] : sum = 5 - [2, 5] : sum = 7","solution":"def count_subarrays_with_sum_at_least_k(n, k, array): count = 0 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += array[end] if current_sum >= k: count += 1 return count"},{"question":"Given a list of non-negative integers representing the heights of tubes, where each tube has a diameter of 1 unit, calculate the maximum amount of water that can be trapped between the tubes after raining. The height of the tubes determines their ability to trap water, with taller tubes trapping more water than shorter ones. Input The input consists of a single line containing a list of non-negative integers separated by space. Each integer represents the height of a tube. The number of integers does not exceed 105, and the value of each integer does not exceed 104. Output Output a single integer representing the maximum amount of water that can be trapped between the tubes. Examples Input 4 2 0 3 2 5 Output 9 Input 1 2 3 4 5 Output 0","solution":"def max_water_trapped(heights): Given a list of non-negative integers representing the heights of tubes, this function calculates the maximum amount of water that can be trapped between the tubes after raining. :param heights: List of non-negative integers. :return: Integer representing the maximum amount of water trapped. if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) trapped_water += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += max(0, right_max - heights[right]) return trapped_water"},{"question":"In a magical kingdom, there is a vast library of spells. Each spell is represented by a unique string of lowercase letters. A wizard has a spellbook containing several spells, and each spell has a magical power value associated with it. The magical power of a string is defined as the sum of the powers of its characters. Each character\'s power is given by its position in the alphabet (a=1, b=2, ..., z=26). For example, the power of the string \\"abc\\" is 1 + 2 + 3 = 6. The wizard wants to determine the maximum magical power he can obtain by using any single spell from his spellbook. You need to write a program that, given the spellbook, finds the spell with the maximum magical power and outputs this power. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of spells in the wizard\'s spellbook. The next n lines contain one spell each — a non-empty string of lowercase letters. The length of each spell is between 1 and 100 characters. Output Print a single integer — the maximum magical power of any single spell from the spellbook. Examples Input 4 abc zxy mno pqrst Output 82 Input 3 ggg zzz aaa Output 78 Note In the first example, the powers of the spells are 1+2+3=6, 26+24+25=75, 13+14+15=42, and 16+17+18+19+20=90. The maximum power is 90. In the second example, the powers of the spells are 7+7+7=21, 26+26+26=78, and 1+1+1=3. The maximum power is 78.","solution":"def max_spell_power(spellbook): Given a spellbook, determine the maximum magical power of any single spell. Parameters: spellbook (list of str): List of spells (strings of lowercase letters). Returns: int: Maximum magical power of any single spell. def spell_power(spell): Calculate the magical power of a spell. Parameters: spell (str): The spell string. Returns: int: Magical power of the spell. return sum(ord(char) - ord(\'a\') + 1 for char in spell) return max(spell_power(spell) for spell in spellbook) # Example usage: # spells = [\\"abc\\", \\"zxy\\", \\"mno\\", \\"pqrst\\"] # print(max_spell_power(spells)) # Output: 82"},{"question":"Given a binary tree with N nodes, where each node has a unique value from 1 to N, write a function to determine the number of unique binary trees that can be formed given an array of N integers representing the tree\'s in-order traversal and another array representing the tree\'s pre-order traversal. Constraints: * 1 leq N leq 10^3 Input: * The first line contains an integer N. * The second line contains N space-separated integers representing the in-order traversal of the tree. * The third line contains N space-separated integers representing the pre-order traversal of the tree. Output: * Return the number of unique binary trees that can be formed. Examples: Input 3 1 2 3 2 1 3 Output 1 Input 4 4 2 1 3 1 2 4 3 Output 1","solution":"def count_unique_binary_trees(N, in_order, pre_order): Returns the number of unique binary trees that can be created from given in-order and pre-order traversals. # The problem constraints imply that there is only one unique binary tree # that can be formed from given in-order and pre-order traversals. return 1"},{"question":"Misha is fascinated by permutations and how they can transform a sequence of numbers. A permutation is defined as an arrangement of a set of elements in a specific order. Given a permutation `P` of numbers from `1` to `N`, your task is to find the next lexicographically greater permutation of the sequence. If such a permutation does not exist (the current permutation is the greatest possible), return the smallest permutation (sorted in ascending order). INPUT: - First line of input contains an integer `T`, the number of test cases. - Each test case contains two lines. The first line contains a single integer `N`, representing the number of elements in the permutation. The second line contains `N` space-separated integers constituting the permutation `P`. OUTPUT: - For each test case, print the next permutation in a single line. If no such permutation exists, return the smallest permutation. Constraints: 1 ≤ T ≤ 10000 1 ≤ N ≤ 100000 Elements of permutation P are unique and range from `1` to `N`. SAMPLE INPUT 2 4 1 2 3 4 4 4 3 2 1 SAMPLE OUTPUT 1 2 4 3 1 2 3 4 Explanation For the first test case, the next permutation of `1 2 3 4` is `1 2 4 3`. For the second test case, the next permutation of `4 3 2 1` does not exist, so the smallest permutation `1 2 3 4` is returned.","solution":"def next_permutation(arr): Modifies arr to the next lexicographical permutation; if no such permutation exists, it rearranges to the lowest permutation (sorted in ascending order). n = len(arr) # Find the first index \'i\' where arr[i] < arr[i+1] from the back i = n - 2 while i >= 0 and arr[i] >= arr[i + 1]: i -= 1 if i == -1: # This means the entire array is in descending order arr.reverse() return arr # Find the first element larger than arr[i] from the back j = n - 1 while arr[j] <= arr[i]: j -= 1 # Swap the found elements arr[i], arr[j] = arr[j], arr[i] # Reverse the elements from i+1 to the end of the array arr[i + 1:] = reversed(arr[i + 1:]) return arr def process_test_cases(test_cases): Processes multiple test cases and return the results as a list of lists. results = [] for N, P in test_cases: next_permutation(P) results.append(P) return results # Example Usage: def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 P = list(map(int, data[index:index + N])) index += N test_cases.append((N, P)) results = process_test_cases(test_cases) for result in results: print(\' \'.join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Jack loves prime numbers. According to him, a prime number is an integer greater than 1 that has no positive divisors other than 1 and itself. While preparing for a math competition, he encounters many lists of numbers and wants to find prime numbers in these lists. He also wants to count how many primes are there in each list. You need to help Jack by writing a program that takes multiple lists of numbers and determines the count of prime numbers in each list. Input: The first line contains an integer N, denoting the number of lists. Each of the next N lines contains a list of space-separated integers. Output: Print the count of prime numbers for each list, each result on a new line. Constraints: 1 ≤ N ≤ 10 If N is not in this range, print \\"Invalid Test\\" (without the quotes) Each list will contain between 1 and 100 numbers. Each number in the list will be between 1 and 1000. If a list contains any element not in the range 1 to 1000, print \\"Invalid Input\\" (without the quotes). For Example, if the input is: 0 3 5 7 Print \\"Invalid Test\\" (without the quotes) SAMPLE INPUT 2 1 2 3 4 5 6 7 8 9 10 11 13 17 19 23 24 25 26 SAMPLE OUTPUT 4 5","solution":"def is_prime(num): Helper function to check if a number is prime if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False # Other even numbers are not primes for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def count_prime_numbers(lists): Takes a list of lists of numbers and returns a list of counts of prime numbers in each sublist. # Verify the number of lists if len(lists) < 1 or len(lists) > 10: return \\"Invalid Test\\" prime_counts = [] for lst in lists: count = 0 # Verify each number in the list is within the valid range for num in lst: if num < 1 or num > 1000: return \\"Invalid Input\\" if is_prime(num): count += 1 prime_counts.append(count) return prime_counts"},{"question":"You are given a list of n integers, and a target number k. Your task is to determine if there exists two distinct elements in the list that sum up to k. If such a pair exists, output the indices (1-based) of the two elements. If multiple pairs are possible, return any one of them. If no such pair exists, output -1. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9). The second line contains n integers, each between 1 and 10^9. The integers are not necessarily distinct. Output If a pair of elements that sum up to k exists, print the indices of the two elements in any order. If there are multiple such pairs, print any one of them. If no such pair exists, print -1. Examples Input 5 9 2 7 11 15 3 Output 1 2 Input 4 6 3 2 4 4 Output 2 3 Input 3 10 1 2 3 Output -1 Note In the first example, the pair of numbers that sum up to 9 are 2 and 7, and their indices are 1 and 2 respectively. In the second example, the pair of numbers that sum up to 6 can be 2 and 4, with their indices being 2 and 3. In the third example, there is no pair of numbers that sum up to 10.","solution":"def find_pair_with_sum(n, k, numbers): Returns the 1-based indices of two distinct elements that sum up to k. If no such pair exists, returns -1. num_map = {} for i, num in enumerate(numbers): complement = k - num if complement in num_map: return (num_map[complement] + 1, i + 1) num_map[num] = i return -1"},{"question":"Given a string `s`, return the length of the longest substring containing distinct characters. A substring is defined as a contiguous sequence of characters within the string. Input: A single string `s`. Output: An integer representing the length of the longest substring with unique characters. Constraints: - The length of the string `s` will be between 1 and 10^5. - The string `s` will consist of printable ASCII characters. SAMPLE INPUT: abcabcbb SAMPLE OUTPUT: 3 Explanation: The longest substring with all distinct characters is \\"abc\\", which has a length of 3.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring with all unique characters in the given string s. n = len(s) seen = {} left, max_length = 0, 0 for right in range(n): if s[right] in seen: left = max(seen[s[right]] + 1, left) seen[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform one operation on this string: choose any lowercase letter `c`, and remove all instances of `c` from the string. Your goal is to maximize the number of distinct letters remaining in the string after performing this operation. Write a program that determines the maximum number of distinct letters that can be achieved by performing this operation. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| denotes the length of the string, and s consists of only lowercase English letters. Output Output a single integer — the maximum number of distinct letters that can remain after the operation. Examples Input abcabc Output 3 Input aaabb Output 2 Input abacab Output 2 Note In the first example, the string is \\"abcabc\\". You can remove either \'a\', \'b\', or \'c\' to leave the string as \\"bcbc\\", \\"acac\\", or \\"abab\\", respectively. In each case, there are 2 distinct letters remaining. In the second example, the string is \\"aaabb\\". You can remove \'a\' to leave \\"bbb\\", or \'b\' to leave \\"aaa\\". In each case, there is only 1 distinct letter remaining. However, if you start with removing \'b\', which appears three times, the remaining string is \\"aaa\\" with only \'a\' as a distinct letter. Therefore, removing \'b\' will result in a higher distinct count. In the third example, the string is \\"abacab\\". You can remove either \'c\' or one of the other letters to achieve a maximum of 3 distinct letters remaining as the string can respectively become: \\"ababa\\", \\"acaca\\", or \\"bacab\\".","solution":"def max_distinct_letters_after_removal(s): Returns the maximum number of distinct letters that can remain after removing all instances of any single letter from the string s. # Count the frequency of each character in the string from collections import Counter char_count = Counter(s) # The number of distinct letters in the original string total_distinct = len(char_count) # We can remove any one character, so we subtract 1 from the total distinct characters # to get the maximum number of distinct characters remaining return total_distinct - 1"},{"question":"A company is organizing a contest in which participants have to arrange gifts in a row. Each gift has a unique integer identifier and is associated with a certain happiness value. The company wants to reward the participants who can find the most harmonious segment of consecutive gifts. A segment is deemed harmonious if the maximum happiness value within that segment is no more than `L` times the minimum happiness value within that segment. Write a function that counts the number of harmonious segments in a given list of gifts. Function Signature: ```python def count_harmonious_segments(arr: List[int], L: int) -> int: ... ``` Input * arr: a list of integers, where `1 ≤ len(arr) ≤ 10^5` and each integer `1 ≤ arr[i] ≤ 10^9`. * L: an integer such that `1 ≤ L ≤ 10^9`. Output Output a single integer representing the number of harmonious segments. Example: Input ```python count_harmonious_segments([4, 6, 2, 7, 5], 2) ``` Output ```python 7 ``` Explanation: The possible harmonious segments are: - [4] (max = 4, min = 4, max/min = 1) - [6] (max = 6, min = 6, max/min = 1) - [2] (max = 2, min = 2, max/min = 1) - [7] (max = 7, min = 7, max/min = 1) - [5] (max = 5, min = 5, max/min = 1) - [4,6] (max = 6, min = 4, max/min = 1.5) - [6,2] (max = 6, min = 2, max/min = 3 - Not harmonious) - [2,7] (max = 7, min = 2, max/min = 3.5 - Not harmonious) - [7,5] (max = 7, min = 5, max/min = 1.4)","solution":"def count_harmonious_segments(arr, L): Counts the number of harmonious segments in a list of gifts. n = len(arr) if n == 0: return 0 count = 0 for i in range(n): max_val = min_val = arr[i] for j in range(i, n): max_val = max(max_val, arr[j]) min_val = min(min_val, arr[j]) if max_val <= L * min_val: count += 1 else: break return count"},{"question":"Given a binary tree, find the largest subtree that forms a Binary Search Tree (BST). A BST is defined with the following constraints: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both left and right subtrees must also be binary search trees. Write a function that receives the root of the binary tree and returns the size of the largest subtree that is a BST. **Input Format** The input is provided as the root of a binary tree. **Output Format** Return an integer which represents the size of the largest subtree that is a BST. **Example** Input (Tree): ``` 10 / 5 15 / / 1 8 7 20 ``` Output: ``` 3 ``` Explanation: Subtree with root 5 is the largest BST: ``` 5 / 1 8 ``` The size of this subtree is 3. Input (Tree): ``` 5 / 4 6 / / 3 2 7 ``` Output: ``` 3 ``` Explanation: Subtree with root 5 is the largest BST: ``` 5 / 4 6 / 3 7 ``` The size of this subtree is 4. **Constraints** - The number of nodes in the binary tree is at most 1000. - Each node\'s value is a 32-bit integer.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def largestBSTSubtree(root): Return the size of the largest subtree that is a BST. def postorder(node): if not node: return (0, float(\'inf\'), float(\'-inf\'), 0) # size, min_val, max_val, max_bst_size left_size, left_min, left_max, left_bst_size = postorder(node.left) right_size, right_min, right_max, right_bst_size = postorder(node.right) if left_max < node.val < right_min: size = left_size + right_size + 1 return (size, min(node.val, left_min), max(node.val, right_max), size) else: return (0, float(\'-inf\'), float(\'inf\'), max(left_bst_size, right_bst_size)) return postorder(root)[3]"},{"question":"You are given two arrays, `energy` and `calories`, both of length `N`, where `energy[i]` represents the energy required to collect an item `i`, and `calories[i]` represents the calories that item `i` offers upon collection. You have a maximum of `K` energy units available to collect items. Your goal is to maximize the total number of calories you can collect without exceeding the `K` energy units. You can only collect each item once and you are not allowed to split the items. Write a function that takes integers `N` and `K`, arrays `energy` and `calories` as inputs, and returns the maximum number of calories you can collect given the constraints. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ K ≤ 10^5 * 1 ≤ energy[i] ≤ 1000 * 1 ≤ calories[i] ≤ 1000 * All input values are integers. Input Input is given from Standard Input in the following format: ``` N K energy[0] energy[1] ... energy[N-1] calories[0] calories[1] ... calories[N-1] ``` Output Print the maximum number of calories that can be collected without exceeding the energy limit `K`. Examples Input ``` 3 50 10 20 30 60 100 120 ``` Output ``` 220 ``` Input ``` 4 10 2 2 2 2 10 20 30 40 ``` Output ``` 100 ``` Notes - For the first example, the optimal way is to choose the items with 10 and 20 energy units yielding a total of 60 + 160 = 220 calories. - For the second example, we can select all items as their collective energy amount is within the limit. Thus, 10 + 20 + 30 + 40 = 100 calories.","solution":"def max_calories(N, K, energy, calories): dp = [[0] * (K + 1) for _ in range(N + 1)] for i in range(1, N + 1): for w in range(K + 1): if energy[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - energy[i - 1]] + calories[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[N][K] # Function to read input and print the solution def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) energy = list(map(int, data[2:N + 2])) calories = list(map(int, data[N + 2:2 * N + 2])) result = max_calories(N, K, energy, calories) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Two friends, Ankit and Priya, enjoy designing challenges for each other. Priya has left an interesting problem for Ankit to solve. The problem was written on a note inside a small chest. Help Ankit solve the problem to unlock the chest. Here is the puzzle given: Define a function S(n) as follows: S(0) = 1, S(1) = 2, S(2) = 4 For n > 2, S(n) = sum of squares of all even numbers less than or equal to n. The challenge is to find out the sum of all possible remainders when you divide S(n) by integers ranging from 1 to n. Consider an example: S(5) = 4^2 + 2^2 = 16 + 4 = 20 The sum of remainders when 20 is divided by each of 1, 2, 3, 4, and 5 is 0 + 0 + 2 + 0 + 0 = 2. Now the task is: Given an integer n, compute the sum of all remainders when S(n) is divided by each integer i where 1 ≤ i ≤ n. Input Format: The first line contains an integer T, the number of test cases. The next T lines each contain a single integer N, for which the sum of all remainders needs to be calculated. Output Format: For each test case, print the desired value on a new line. Constraints: 1 ≤ T ≤ 30 0 ≤ N ≤ 50 Sample Input: 2 3 5 Sample Output: 10 2 Explanation: For the first case, S(3) = 4 Remainders of 4 when divided by 1, 2, and 3 are 0, 0, and 1 respectively. Sum of these remainders = 0 + 0 + 1 = 1 For the second case, S(5) = 20 Remainders of 20 when divided by 1, 2, 3, 4, and 5 are 0, 0, 2, 0, and 0 respectively. Sum of these remainders = 0 + 0 + 2 + 0 + 0 = 2","solution":"def S(n): Computes the value of S(n) as described in the problem statement. if n == 0: return 1 if n == 1: return 2 if n == 2: return 4 sum_squares = 0 for even in range(2, n + 1, 2): sum_squares += even ** 2 return sum_squares def sum_of_remainders(n): Computes the sum of the remainders when S(n) is divided by each integer from 1 to n. S_n = S(n) remainder_sum = 0 for i in range(1, n + 1): remainder_sum += S_n % i return remainder_sum def solve_challenges(t, test_cases): results = [] for n in test_cases: results.append(sum_of_remainders(n)) return results"},{"question":"In a land of myth and magic, there lives a society of wizards. Each wizard possesses a unique level of magical power. Wizards often form guilds, and each guild has a minimum required magical power threshold for its members. A wizard can only join a guild if his magical power meets or exceeds the guild\'s threshold. To better manage the allocation of wizards to different guilds, the wizard council has decided to develop a system that can efficiently determine which guilds a wizard can join. Given the list of guilds by their required power thresholds and the list of wizards by their magical powers, your task is to determine for each wizard the number of guilds they are eligible to join. Input The first line of the input contains an integer g (1 ≤ g ≤ 1000) — the number of guilds. The second line contains g integers, where the i-th integer represents the magical power threshold of the i-th guild (1 ≤ threshold_i ≤ 10^9). The third line of the input contains an integer w (1 ≤ w ≤ 1000) — the number of wizards. The fourth line contains w integers, where the i-th integer represents the magical power of the i-th wizard (1 ≤ power_i ≤ 10^9). Output Output w lines. The i-th line should contain a single integer representing the number of guilds that the i-th wizard can join. Examples Input 3 10 20 30 4 5 15 25 35 Output 0 1 2 3 Input 2 50 100 3 60 70 90 Output 1 1 1","solution":"def guilds_wizards_thresholds(guild_thresholds, wizard_powers): Determines the number of guilds each wizard can join. :param guild_thresholds: List of integers representing the guild thresholds :param wizard_powers: List of integers representing the magical power of wizards :return: List of integers where each integer represents the number of guilds a wizard can join sorted_guild_thresholds = sorted(guild_thresholds) result = [] for power in wizard_powers: count = 0 for threshold in sorted_guild_thresholds: if power >= threshold: count += 1 else: break result.append(count) return result"},{"question":"Alice loves collecting marbles. She likes arranging them on shelves and observing different patterns. However, she wants to know the number of continuous subsequences of marbles where the product of the positions of the marbles is a perfect square. Given an array of integers, where each integer represents the position of a marble on the shelf, calculate the number of such subsequences where the product of the positions is a perfect square. Input The first line of input contains an integer n, the number of positions of marbles. (1 ≤ n ≤ 100000). The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the positions of the marbles. Output Output a single integer — the number of valid continuous subsequences. Examples Input 5 1 2 4 3 6 Output 4 Input 4 3 5 7 11 Output 0 Note In the first sample, Alice can form the following valid subsequences: * [1, 4]: positions 1 and 4 (1 * 4 = 4, which is a perfect square), * [4]: a single position (4, which is a perfect square), * [1, 6]: positions 1 and 6 (1 * 6 = 6, which is not a perfect square but can be combined to form larger subsequences), * [1, 2, 4]: positions 1, 2, and 4 (1 * 2 * 4 = 8, which is not a perfect square but contributes to larger subsequences). Hence, the answer is 4. In the second sample, there are no subsequences where the product of positions is a perfect square, so the answer is 0.","solution":"from math import isqrt def count_perfect_square_subsequences(n, positions): def is_perfect_square(num): root = isqrt(num) return num == root * root count = 0 for i in range(n): product = 1 for j in range(i, n): product *= positions[j] if is_perfect_square(product): count += 1 return count"},{"question":"You are given a sequence of non-negative integers representing the heights of candles. Each candle can only be blown out if it has the maximum height among the current candles. Determine how many candles can be blown out. Input The only line of the input contains a list of space-separated integers h (0 ≤ h ≤ 100) — the heights of the candles. The size of the list is between 1 and 100, inclusive. Note that the size of the list is not given explicitly! Output Output a single integer — the count of the candles that can be blown out. Examples Input 3 2 1 3 Output 2 Input 1 1 1 1 Output 4","solution":"def count_max_height_candles(heights): Returns the number of candles that can be blown out (candles with the maximum height). Parameters: heights (list of int): A list of non-negative integers representing the heights of candles. Returns: int: Number of candles that have the maximum height. if not heights: return 0 max_height = max(heights) return heights.count(max_height)"},{"question":"Longest Balanced Substring You are given a string consisting solely of open and close parentheses. Your task is to compute the length of the longest balanced substring after each character of the string is processed. A balanced string is defined as any substring that matches any of the following rules: * “()” * “(X)” where X is a balanced string * “XY” where both X and Y are balanced strings Initially, the string is empty. You will process each character of the string one by one and calculate the length of the longest balanced substring from the start of the string up to the current character (inclusive). Input The input consists of a single line containing a string consisting of characters \'(\' and \')\'. The length of the string does not exceed 100,000. Output Print a sequence of integers, where the i-th integer represents the length of the longest balanced substring in the string up to the i-th character. Sample Input 1 (()())() Sample Output 1 0 0 2 2 4 6 6 8 Sample Input 2 )(()()) Sample Output 2 0 0 0 2 2 4 6 Explanation For the first sample: 1. For the first character `(`: No balanced substring, so 0. 2. For the first two characters `((`: No balanced substring, so 0. 3. For the first three characters `(()`: The longest balanced substring is `()`, length 2. 4. For the first four characters `(()(`: The longest balanced substring is `()`, length 2. 5. For the first five characters `(()()`: The longest balanced substring is `()` again, length 4. 6. For the first six characters `(()())`: The entire string is balanced, length 6. 7. For the first seven characters `(()())(`: The longest balanced substring from 0 to 6 is `(()())`, length 6. 8. For the entire string `(()())()`: The entire string is balanced, length 8.","solution":"def longest_balanced_substring_lengths(s): Given a string consisting of parentheses, returns a list of integers where each integer represents the length of the longest balanced substring up to the i-th character. n = len(s) dp = [0] * n stack = [] for i in range(n): if s[i] == \'(\': stack.append(i) elif stack: j = stack.pop() dp[i] = dp[j - 1] + i - j + 1 result = [] current_max_length = 0 for length in dp: current_max_length = max(current_max_length, length) result.append(current_max_length) return result"},{"question":"A group of archaeologists has discovered an ancient message encoded in a sequence of numbers. They believe the message can be decoded by identifying the longest increasing subsequence within the sequence. Given an array of integers, determine the length of the longest increasing subsequence. An increasing subsequence is a set of indices `i1, i2, ..., ik` such that `i1 < i2 < ... < ik` and `array[i1] < array[i2] < ... < array[ik]`. Input Format A single line containing space-separated integers representing the array. Constraints 1 ≤ length of the array ≤ 105 -109 ≤ each element of the array ≤ 109 Output Format A single integer representing the length of the longest increasing subsequence in the array. SAMPLE INPUT 10 9 2 5 3 7 101 18 SAMPLE OUTPUT 4 Explanation The longest increasing subsequence is [2, 3, 7, 101] which has a length of 4.","solution":"import bisect def length_of_lis(sequence): Returns the length of the longest increasing subsequence in the given sequence. Args: sequence: List[int] - A list of integers representing the array. Returns: int - Length of the longest increasing subsequence. if not sequence: return 0 lis = [] for num in sequence: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) # Example usage: sequence = [10, 9, 2, 5, 3, 7, 101, 18] print(length_of_lis(sequence)) # Should print 4"},{"question":"You are given two strings, `S` and `T`. You need to form `S` by reordering the characters of `T`, and you can only use each character from `T` at most once. Determine if this is possible. Constraints - 1 ≤ Length of S, T ≤ 1000 - S and T consist only of lowercase English letters. Input Input is given from Standard Input in the following format: ``` S T ``` Output Print `YES` if it\'s possible to form `S` using characters from `T`, otherwise print `NO`. Examples Input ``` abc cba ``` Output ``` YES ``` Input ``` abc def ``` Output ``` NO ``` Input ``` aaaa aaa ``` Output ``` NO ```","solution":"def can_form_string(s, t): Determine if string s can be formed by reordering the characters of string t. from collections import Counter count_s = Counter(s) count_t = Counter(t) for char, count in count_s.items(): if count_t[char] < count: return \\"NO\\" return \\"YES\\""},{"question":"Write a function called `generate_pattern` that takes two integers as input: `n` and `m`. The function should create and return a string that contains `n` rows, each containing the numbers from `1` to `m`, separated by a single space. # Function Signature ```python def generate_pattern(n: int, m: int) -> str: ``` # Input - `n` (1 ≤ n ≤ 100): an integer representing the number of rows. - `m` (1 ≤ m ≤ 100): an integer representing the number of numbers in each row. # Output - A string containing `n` rows of numbers from `1` to `m`, separated by spaces. # Example Input ``` 3 4 ``` Output ``` 1 2 3 4 1 2 3 4 1 2 3 4 ``` # Explanation In this example, there are 3 rows, and each row contains numbers from 1 to 4. The output should be a string with each row on a new line.","solution":"def generate_pattern(n: int, m: int) -> str: Generate a pattern of n rows, each containing numbers from 1 to m, separated by a space. :param n: Number of rows (1 ≤ n ≤ 100) :param m: Number of numbers in each row (1 ≤ m ≤ 100) :return: A string containing the pattern # Create the pattern for a single row row_pattern = \' \'.join(str(i) for i in range(1, m + 1)) # Repeat the pattern for n rows and join them with newlines return \'n\'.join(row_pattern for _ in range(n))"},{"question":"In a text-based game, warriors are positioned on a 2D grid. Each warrior at coordinates (x_i, y_i) has an attack radius r_i. The attack radius defines a circular area around the warrior where they can attack enemies. Your task is to determine if a specific warrior is within the attack radius of any other warrior. Input: The first line contains a single integer T representing the number of test cases. Each test case consists of: - The first line containing an integer N, the number of warriors. - N subsequent lines each containing three integers x_i, y_i, and r_i, representing the coordinates and attack radius of each warrior. - The last line containing two integers x_q, y_q, the coordinates of the specific warrior you want to check. Output: For each test case, output \\"in danger\\" if the specific warrior is within the attack radius of any other warrior, otherwise output \\"safe\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ x_i, y_i, x_q, y_q ≤ 1000 1 ≤ r_i ≤ 100 Sample tests explanation: SAMPLE INPUT 2 3 1 1 2 4 5 1 3 2 3 3 4 2 10 10 2 15 15 4 12 12 SAMPLE OUTPUT in danger safe Explanation: In the first test case, the warrior at coordinates (3, 4) is within the attack radius of the warrior at (3, 2) who has an attack radius of 3. Therefore, the output is \\"in danger\\". In the second test case, the warrior at coordinates (12, 12) is not within the attack radius of any other warrior. Hence, the output is \\"safe\\".","solution":"import math def is_in_danger(T, test_cases): results = [] for i in range(T): N, warriors, target = test_cases[i] x_q, y_q = target danger = False for j in range(N): x_i, y_i, r_i = warriors[j] distance = math.sqrt((x_i - x_q)**2 + (y_i - y_q)**2) if distance <= r_i: danger = True break if danger: results.append(\\"in danger\\") else: results.append(\\"safe\\") return results"},{"question":"Alice has a garden with a layout in the form of a grid. Each cell in the grid represents a section of the garden, which can either be planted with flowers or left empty. Alice wants to maximize the beauty of her garden by ensuring that no two flowers are adjacent to each other, either horizontally or vertically. Your task is to determine the maximum number of flowers Alice can plant in her garden given the size constraints. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the size of the garden, which is an n × n grid. Output The first line of the output should contain a single integer — the maximum number of flowers Alice can plant such that no two flowers are adjacent. Examples Input 3 Output 5 Explanation A possible arrangement for a 3x3 garden could look like this: F . F . F . F . F Input 4 Output 8 Explanation A possible arrangement for a 4x4 garden could look like this: F . F . . F . F F . F . . F . F","solution":"def max_flowers(n): Returns the maximum number of flowers that can be planted in an n x n garden such that no two flowers are adjacent either horizontally or vertically. # To maximize the number of flowers, we can follow a checkerboard pattern. # The total maximum flowers will be half the total cells if n is even, # and slightly more than half if n is odd. return (n * n + 1) // 2"},{"question":"You are working on a software that manages books in a library. The library has decided to incorporate a new feature: tracking authors and calculating the number of distinct books written by each author. Write a program that processes a list of authors and the books they have written. Each author along with their books will be provided in a specific format. Your task is to count the number of distinct books written by each author and output the information. Input The input starts with a single integer N, representing the number of entries. The next N lines contain information about books and authors in the format: `Author: Book1, Book2, Book3, ... , BookM` The author name and books are separated by a colon, and each book title is separated by a comma. An author could have written one or multiple books. An author\'s name and book title will not contain any commas or colons beyond those used for separation. Output For each author, output the author name followed by the count of distinct books they have written. Follow the same order as provided in the input. Constraints 1 ≤ N ≤ 100 1 ≤ M ≤ 100 Each author\'s name and book title is a non-empty string containing only alphabetic characters and spaces. Example Input 3 J.K. Rowling: Harry Potter and the Sorcerer\'s Stone, Harry Potter and the Chamber of Secrets George R.R. Martin: A Game of Thrones, A Clash of Kings, A Storm of Swords J.R.R. Tolkien: The Hobbit, The Lord of the Rings Output J.K. Rowling 2 George R.R. Martin 3 J.R.R. Tolkien 2","solution":"def count_books_by_author(n, entries): Processes a list of entries with authors and their books. Returns a dictionary with authors as keys and the count of their distinct books as values. author_books = {} for entry in entries: author, books = entry.split(\': \') distinct_books = books.split(\', \') author_books[author] = len(set(distinct_books)) return author_books def format_output(author_books): Formats the output as required. Returns a string with each author followed by the number of distinct books they have written. result = [] for author, count in author_books.items(): result.append(f\\"{author} {count}\\") return \\"n\\".join(result)"},{"question":"There is a square grid with H rows and W columns, initially filled with zeros. You are given Q queries, each containing five integers: r1, c1, r2, c2, and V. For each query, you need to add the integer V to every cell in the subgrid defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). Your task is to output the final state of the grid after all the queries are applied. Constraints * 1 ≤ H, W ≤ 1000 * 1 ≤ Q ≤ 100000 * 1 ≤ r1 ≤ r2 ≤ H * 1 ≤ c1 ≤ c2 ≤ W * -1000 ≤ V ≤ 1000 * All input values are integers. Input Input is given from Standard Input in the following format: H W Q r1_1 c1_1 r2_1 c2_1 V_1 r1_2 c1_2 r2_2 c2_2 V_2 ... r1_Q c1_Q r2_Q c2_Q V_Q Output Print the final state of the grid. Each line should contain W integers representing one row of the grid. Between every two integers in the same line, there should be a single space. Examples Input 3 3 2 1 1 2 2 1 2 2 3 3 2 Output 1 1 0 1 3 2 0 2 2 Input 2 2 3 1 1 1 1 5 1 2 2 2 3 2 1 2 2 1 Output 5 3 1 4","solution":"def update_grid(H, W, Q, queries): grid = [[0] * W for _ in range(H)] for query in queries: r1, c1, r2, c2, V = query for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += V return grid"},{"question":"For a string s, apply a sequence of the following operations: * reverse(l, r): Reverse the substring of s starting from the l-th character to the r-th character (inclusive). * query(l, r): Report the lexicographically smallest character in the substring from the l-th character to the r-th character (inclusive). Constraints * 1 leq q leq 100,000 * 1 leq l leq r leq |s| * s contains only lowercase English letters. Input The input is given in the following format: s q query_1 query_2 : query_q Each query query_i is given by reverse l r or query l r where the first word represents the operation type (reverse or query) and l and r are the starting and ending indices of the operation. Output For each query operation, print the lexicographically smallest character in the specified substring. Example Input abacaba 5 reverse 3 6 query 2 5 reverse 1 7 query 1 3 query 4 7 Output a a a","solution":"def perform_operations(s, queries): Perform the operations on the given string s as per the queries. Parameters: s (str): The initial string. queries (list): A list of queries represented as tuples. Each tuple contains the operation (\'reverse\' or \'query\') and the start and end indices (1-based index). Returns: list: Returns a list of characters which are the results of \'query\' operations. s = list(s) result = [] for query in queries: op_type, l, r = query l, r = l - 1, r - 1 # converting to 0-based index if op_type == \\"reverse\\": s[l:r+1] = s[l:r+1][::-1] elif op_type == \\"query\\": result.append(min(s[l:r+1])) return result"},{"question":"Alice and Bob are playing a game with string transformations. They start with a string `s` of length `n`, which contains only lowercase English letters. In each move, they can do one of the following operations: * Delete exactly one character from anywhere in the string. * Insert exactly one character anywhere in the string. The goal of the game is to transform the initial string `s` into a palindrome (a string that reads the same forward and backward). The player who is unable to make a move loses. Alice always starts first. If both players play optimally, determine if Alice can guarantee a win. Input: The input consists of a single line with a string `s` (1 ≤ |s| ≤ 1000). Output: Output a single line with either \\"Alice\\" if Alice can guarantee a win, or \\"Bob\\" if Bob can force a win or a draw if both play optimally. Examples: Input: abca Output: Alice Input: racecar Output: Bob Note: In the first example, Alice can remove \'b\' or \'c\' to form a palindrome with her first move, guaranteeing a win. In the second example, the string is already a palindrome, and any move by Alice will destroy the palindrome, allowing Bob to take advantage and win.","solution":"def can_alice_win(s): Determines if Alice can guarantee a win when transforming string s into a palindrome. Parameters: s (str): Input string Returns: str: \\"Alice\\" if Alice can guarantee a win, otherwise \\"Bob\\" def is_palindrome(s): return s == s[::-1] n = len(s) if is_palindrome(s): return \\"Bob\\" mismatches = sum(1 for i in range(n // 2) if s[i] != s[n - i - 1]) if mismatches == 0: return \\"Bob\\" if n % 2 == 0 else \\"Alice\\" else: return \\"Alice\\""},{"question":"A farmer has a rectangular field and wants to create a grid of plantation plots within the field. Each plot is a square of uniform size, and the grid of plots must completely cover the field without any leftover areas. Given the dimensions of the rectangular field and the side length of each square plot, your task is to determine the maximum number of full plots that can fit within the field. # Input The input consists of multiple datasets. Each dataset consists of three integers: - `H` and `W` (1 ≤ H, W ≤ 10^4): the height and width of the rectangular field. - `S` (1 ≤ S ≤ min(H, W)): the side length of each square plot. The end of the input is indicated by a single line containing three zeros. # Output For each dataset, output a single line containing the maximum number of full plots that can fit in the rectangular field. # Examples Input: ``` 10 15 2 8 7 1 20 30 5 0 0 0 ``` Output: ``` 35 56 24 ```","solution":"def max_plots(H, W, S): Returns the maximum number of full plots that can fit in the rectangular field. if H == 0 and W == 0 and S == 0: return None return (H // S) * (W // S) def process_input(input_data): Process input data line by line until three zeros are encountered and return the results for each dataset. lines = input_data.strip().split(\'n\') results = [] for line in lines: H, W, S = map(int, line.split()) if H == 0 and W == 0 and S == 0: break results.append(max_plots(H, W, S)) return results # Example usage input_data = 10 15 2 8 7 1 20 30 5 0 0 0 output_data = process_input(input_data) for result in output_data: print(result)"},{"question":"In a certain small town, there are n houses arranged linearly along a straight road. Each house can have a variable number of lamps installed in front of it. The i-th house from the left can either have `p_i` lamps or `2 * p_i` lamps, on any given day. You have to calculate the maximum total number of lamps that can be turned on for any consecutive segment of these houses. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of houses in the town. The i-th of the next n lines contains a single integer p_i (1 ≤ p_i ≤ 100) — the number of lamps in front of the i-th house when exactly p_i lamps are turned on. Output Print a single integer — the maximum total number of lamps that can be turned on for any consecutive segment of the houses. Examples Input 5 3 2 1 4 5 Output 30 Input 4 1 2 2 4 Output 18 Input 3 1 1 1 Output 12 Note For the first example, the maximum total number of lamps for the segment containing all the houses is `2*3 + 2*2 + 2*1 + 2*4 + 2*5 = 6 + 4 + 2 + 8 + 10 = 30`. For the second example, the segment including all houses gives the maximum total number of lamps `2*1 + 2*2 + 2*2 + 2*4 = 36`, however, the question asks for a consecutive segment. Thus, for the segment from house 1 to 3, the maximum is `2*1 + 2*2 + 2*2 = 12`. For the third example, for the segment including all houses, the maximum total number of lamps is `2*1 + 2*1 + 2*1 = 6`. In all cases, the best strategy is always to consider the segments with maximum p_i values in order to maximize the total number of lamps in any consecutive segment.","solution":"def max_lamps(n, p_list): Returns the maximum total number of lamps that can be turned on for any consecutive segment of the houses. Parameters: n (int): Number of houses. p_list (list of int): List of number of lamps when exactly p_i lamps are turned on. Returns: int: Maximum total number of lamps for any consecutive segment. max_lamps = 0 # Calculate the maximum double of each segment of houses max_lamps = sum(2 * p for p in p_list) return max_lamps"},{"question":"Background In the era of social media, people share their browsing history on various websites through their profiles. Alex, one of the frequent users of a social media platform, likes to follow the browsing patterns of users. For this, he visualizes users\' activities as a directed graph. Each website visited is represented as a vertex, and each transition from one website to another is represented as a directed edge with a corresponding timestamp. A directed browsing graph is provided where each vertex represents a website and each directed edge (u, v) with timestamp t means the user moved from website u to website v at time t. Based on the graph, Alex wants to perform certain queries to find out the latest websites users were at before visiting certain target websites. Problem You will be given a directed browsing graph where each vertex is numbered from 0 to n-1. Each directed edge has a unique timestamp. For each given query in the form of a target vertex, you need to determine the website from which the user arrived at the target website most recently. Constraints * 1 ≤ n ≤ 2000 * 1 ≤ m ≤ 10000 * 0 ≤ u, v < n * Each timestamp t is a unique positive integer. * It is guaranteed that there will be at least one incoming edge for each queried vertex. Input The first line contains two integers, n and m. The next m lines each contain three integers u, v, and t representing a directed edge from vertex u to vertex v with timestamp t. The next line contains an integer q, the number of queries. The following q lines each contain one integer representing a target vertex. Output For each query, output the source vertex from which the user moved to the target vertex most recently. Examples Input 5 6 0 1 10 1 2 15 0 2 20 2 3 25 3 4 30 2 4 35 3 2 4 3 Output 0 2 2 Explanation: - For the first query (target vertex 2): The latest timestamp edges leading to 2 are from 0 -> 2 (timestamp 20) and 1 -> 2 (timestamp 15). The edge from 0 is the most recent. - For the second query (target vertex 4): The latest timestamp edges leading to 4 are from 2 -> 4 (timestamp 35) and 3 -> 4 (timestamp 30). The edge from 2 is the most recent. - For the third query (target vertex 3): The latest timestamp edge leading to 3 is from 2 -> 3 (timestamp 25).","solution":"def latest_source_websites(n, m, edges, queries): Determines the most recent source vertex for each query based on the directed browsing graph. Parameters: n (int): The number of vertices (websites) m (int): The number of edges edges (list of tuples): Each tuple contains (u, v, t) representing an edge from u to v with timestamp t queries (list of int): The list of target vertices for queries Returns: list of int: The list of source vertices for each query from collections import defaultdict # Initialize a dictionary to store the latest incoming edge for each vertex latest_incoming_edge = defaultdict(lambda: (None, -1)) # vertex -> (source, timestamp) # Populate the dictionary with the edges for u, v, t in edges: if t > latest_incoming_edge[v][1]: # if this edge is more recent latest_incoming_edge[v] = (u, t) # Process the queries result = [] for target in queries: source = latest_incoming_edge[target][0] result.append(source) return result"},{"question":"Michael is working on a project that involves summarizing data in a 2D grid format. He needs to find the maximum sum of any rectangular subgrid within a given grid of integers. A subgrid is defined as any contiguous rectangle of cells within the grid. He is particularly interested in identifying the largest sum possible from such subgrids. Your task is to help Michael by designing an algorithm that computes the maximum sum of any rectangular subgrid from the grid provided. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. The following n lines contain m space-separated integers each, representing the grid cells. Each integer in the grid `a[i][j]` satisfies (−10^9 ≤ a[i][j] ≤ 10^9). Output Print the maximum sum of any rectangular subgrid. Examples Input 2 3 1 -2 3 4 5 -6 Output 9 Input 3 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 Output -1 Note In the first test case, the maximum sum can be found in the subgrid containing cells (1,1), (1,2), and (2,1), (2,2). The sum is 9. In the second test case, since all values are negative, the maximum sum is -1, which corresponds to any single cell containing the least negative number in the grid.","solution":"def maximum_sum_subgrid(grid): Computes the maximum sum of any rectangular subgrid in the given grid. Parameters: grid (List[List[int]]): A 2D list of integers representing the grid. Returns: int: The maximum sum of any rectangular subgrid. import sys n = len(grid) m = len(grid[0]) max_sum = -sys.maxsize # Apply the 2D Kadane\'s Algorithm for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def kadane(arr): Helper function to apply Kadane\'s algorithm on 1D array. Parameters: arr (List[int]): 1D list of integers. Returns: int: The maximum sum of any contiguous subarray in arr. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are tasked with designing an online bookstore system that allows users to perform specific actions. The system needs to handle a collection of books, where each book has a unique identifier, title, author, and price. Users should be able to perform the following actions: 1. **Add a Book**: Add a book to the bookstore with a unique identifier, title, author, and price. 2. **Delete a Book**: Remove a book from the bookstore by its unique identifier. 3. **Update a Book**: Update the details of a book such as title, author, or price by its unique identifier. 4. **Search for Books by Author**: Retrieve a list of books by a particular author. 5. **Search for Books by Title**: Retrieve a list of books that contain a specific keyword in their title. 6. **Get Information by ID**: Retrieve the details of a book by its unique identifier. 7. **List All Books**: List all books present in the bookstore in any order. Write a program that reads a series of commands to perform the above actions and outputs the results accordingly. Each command will be provided on a new line, and the output for each command should follow immediately. # Input and Output - The first line of input contains the number of commands, `n`. - The next `n` lines contain one of the following commands: 1. `ADD id title author price`: Add a new book with the given `id` (integer), `title` (string), `author` (string), and `price` (float). The `id` is unique for each book. 2. `DELETE id`: Delete the book with the given `id`. 3. `UPDATE id title author price`: Update the book with the given `id` to have the new `title`, `author`, and `price`. 4. `SEARCH_AUTHOR author`: Print all books by the given `author`. Each book should be printed in the format `<id> <title> <author> <price>`. 5. `SEARCH_TITLE keyword`: Print all books that contain the `keyword` in their title. Each book should be printed in the format `<id> <title> <author> <price>`. 6. `GET id`: Print the details of the book with the given `id` in the format `<id> <title> <author> <price>`. 7. `LIST`: Print all books in the bookstore, each book in the format `<id> <title> <author> <price>` on a new line. # Example Input: ``` 8 ADD 1 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 10.99 ADD 2 \\"1984\\" \\"George Orwell\\" 8.99 ADD 3 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 12.99 SEARCH_AUTHOR \\"George Orwell\\" SEARCH_TITLE \\"Great\\" UPDATE 1 \\"The Greatest Gatsby\\" \\"F. Scott Fitzgerald\\" 11.99 GET 1 LIST ``` Output: ``` 2 1984 George Orwell 8.99 1 The Great Gatsby F. Scott Fitzgerald 10.99 1 The Greatest Gatsby F. Scott Fitzgerald 11.99 1 The Greatest Gatsby F. Scott Fitzgerald 11.99 2 1984 George Orwell 8.99 3 To Kill a Mockingbird Harper Lee 12.99 ``` # Guidelines - Ensure that the `id` for each book is unique and properly updated or removed as per commands. - Handle edge cases such as searching for an author or title that doesn\'t exist in the store. - Make sure the program can gracefully handle commands to update or delete a book that doesn\'t exist.","solution":"class Book: def __init__(self, id, title, author, price): self.id = id self.title = title self.author = author self.price = price def __str__(self): return f\\"{self.id} {self.title} {self.author} {self.price}\\" class Bookstore: def __init__(self): self.books = {} def add_book(self, id, title, author, price): if id in self.books: raise ValueError(\\"Book with this ID already exists.\\") self.books[id] = Book(id, title, author, price) def delete_book(self, id): if id in self.books: del self.books[id] else: raise ValueError(\\"Book with this ID does not exist.\\") def update_book(self, id, title, author, price): if id in self.books: self.books[id] = Book(id, title, author, price) else: raise ValueError(\\"Book with this ID does not exist.\\") def search_by_author(self, author): result = [str(book) for book in self.books.values() if book.author == author] return \\"n\\".join(result) def search_by_title(self, keyword): result = [str(book) for book in self.books.values() if keyword in book.title] return \\"n\\".join(result) def get_info_by_id(self, id): if id in self.books: return str(self.books[id]) else: raise ValueError(\\"Book with this ID does not exist.\\") def list_all_books(self): result = [str(book) for book in self.books.values()] return \\"n\\".join(result)"},{"question":"A delivery service needs to optimize its route to visit multiple locations sequentially and return to the starting point. You are required to solve this using the Traveling Salesperson Problem (TSP) and implement an algorithm to find the shortest possible route. # Problem Statement Given a list of locations represented by their coordinates on a 2D plane and the distance matrix between every pair of locations, implement a function to determine the length of the shortest possible route that visits each location exactly once and returns to the starting point. # Input - An integer `n` representing the number of locations. - A list of n tuples, each containing two integers `x` and `y`, representing the coordinates of the locations. # Output - A float representing the length of the shortest possible route, with precision up to 6 decimal places. # Example Input ``` 4 0 0 2 2 2 0 0 2 ``` Output ``` 8.000000 ``` # Constraints - 2 ≤ n ≤ 12 - Coordinates will be in the range [-100, 100]. # Note - The distance between two points (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula: `sqrt((x2 - x1)^2 + (y2 - y1)^2)`. - You can use recursive approach with memoization or dynamic programming to solve this within given constraints.","solution":"import math from functools import lru_cache def calculate_distance(point1, point2): Calculates the Euclidean distance between two points. return math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2) def tsp(n, locations): Returns the length of the shortest possible route visiting each location exactly once and returning to the start. # Prepare the distance matrix distance_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): distance_matrix[i][j] = calculate_distance(locations[i], locations[j]) # Memoize the results for combinations of visited nodes and current position @lru_cache(None) def visit(mask, pos): if mask == (1 << n) - 1: return distance_matrix[pos][0] min_cost = float(\'inf\') for city in range(n): if not mask & (1 << city): new_cost = distance_matrix[pos][city] + visit(mask | (1 << city), city) min_cost = min(min_cost, new_cost) return min_cost # Start the tour from the first city return round(visit(1, 0), 6)"},{"question":"A software company needs to design a secure authentication system for their servers. The system requires users to input a password, and for added security, the password must be validated for a specific set of requirements before allowing access. Given a password as a string, the program should determine if the password is strong based on the following criteria: 1. The length of the password must be at least 8 characters. 2. The password must contain at least: - One lowercase letter, - One uppercase letter, - One digit, and - One special character (among these: !@#%^&*()-+). Write a function that checks if the password meets these criteria and returns \\"Strong\\" if it does, or \\"Weak\\" if it doesn\'t. Input: - A single string `password` with length n (1 ≤ n ≤ 100), which is the password to be checked. Output: - A single string: \\"Strong\\" if the password meets all criteria, or \\"Weak\\" if it does not. Examples: Input: ``` Password123! ``` Output: ``` Strong ``` Input: ``` Pass123 ``` Output: ``` Weak ``` Input: ``` Password ``` Output: ``` Weak ``` Input: ``` 12345678 ``` Output: ``` Weak ``` Notes: In the first example, the password meets all the criteria: it has more than 8 characters, includes uppercase and lowercase letters, digits, and a special character. In the second example, the length is less than 8 characters making it weak. In the third example, even though the length is sufficient, it lacks a digit and a special character.","solution":"def check_password_strength(password): Checks if the password is strong based on specified criteria. Parameters: password (str): The password to check. Returns: str: \\"Strong\\" if the password meets all criteria, otherwise \\"Weak\\". if len(password) < 8: return \\"Weak\\" has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \'!@#%^&*()-+\' for c in password) if has_lower and has_upper and has_digit and has_special: return \\"Strong\\" return \\"Weak\\""},{"question":"Problem Statement Write a program that accepts a list of integers and outputs the sum of the squares of each integer. Sample Input [1, 2, 3, 4] Sample Output 30","solution":"def sum_of_squares(int_list): Returns the sum of the squares of each integer in the input list. Parameters: int_list (list): A list of integers. Returns: int: The sum of the squares of the integers in int_list. return sum(x ** 2 for x in int_list)"},{"question":"You are given a list of people who want to join a sports club. Each person is represented by a tuple containing their name (string) and age (integer). The club has a policy to only accept members who are at least 18 years old. Additionally, the club creates a welcome message for each accepted member. Your task is to write a function that processes the list of applicants and generates a list of welcome messages for the accepted members. The welcome message should be in the format: \\"Welcome, [name]!\\" where [name] is the name of the accepted member. # Input - A list of tuples, where each tuple contains a name (string) and age (integer). # Output - A list of strings, each representing a welcome message for an accepted member. # Example **Input:** [(\\"Alice\\", 22), (\\"Bob\\", 17), (\\"Charlie\\", 18), (\\"David\\", 16)] **Output:** [\\"Welcome, Alice!\\", \\"Welcome, Charlie!\\"] # Constraints - The list contains up to 1000 applicants. - Each name is a non-empty string of alphabetic characters. - Each age is an integer between 0 and 120.","solution":"def generate_welcome_messages(applicants): Generate welcome messages for applicants who are at least 18 years old. Args: applicants (list of tuples): A list of tuples where each tuple contains a name (string) and age (integer). Returns: list of strings: A list of welcome messages for accepted members. welcome_messages = [] for name, age in applicants: if age >= 18: welcome_messages.append(f\\"Welcome, {name}!\\") return welcome_messages"},{"question":"Tom loves music and enjoys creating his own playlists. He has a list of all the songs he owns, along with their durations in seconds. Tom wants to create a playlist of exactly `T` seconds. However, he\'s aware that he can choose up to but not necessarily all songs, and he can include a song more than once to reach the exact `T` seconds. Tom asks you for help to find out if it\'s possible to create a playlist of exactly `T` seconds from his list of songs. Input The first line contains two integers `n` and `T` (1 ≤ n ≤ 50, 1 ≤ T ≤ 10^4) — the number of songs Tom has and the exact duration of the playlist he wants. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000) — the durations of the songs Tom has. Output Print \\"YES\\" if it\'s possible to create a playlist of exactly `T` seconds, otherwise print \\"NO\\". Examples Input 3 200 60 100 140 Output YES Input 4 30 10 20 30 40 Output YES Input 3 25 20 40 60 Output NO Note In the first example, Tom can create a playlist of 200 seconds by selecting the second song twice (100 + 100 = 200). In the second example, Tom can create a playlist of 30 seconds by selecting the third song once (30 = 30). In the third example, there is no combination of the given songs that adds up to exactly 25 seconds, so the answer is \\"NO\\".","solution":"def can_create_playlist(n, T, song_durations): Determines if it is possible to create a playlist of exactly T seconds from the given song durations. Parameters: n (int): Number of songs. T (int): Exact duration desired for the playlist. song_durations (list of int): List of durations of the songs. Returns: str: \\"YES\\" if it is possible to create a playlist of exactly T seconds, otherwise \\"NO\\". from collections import deque dp = [False] * (T + 1) # DP array to keep track of possible sums. dp[0] = True # Base case - a sum of 0 is always possible with an empty selection. for duration in song_durations: for current_time in range(duration, T + 1): if dp[current_time - duration]: dp[current_time] = True # If T is reachable, return \\"YES\\", else return \\"NO\\". return \\"YES\\" if dp[T] else \\"NO\\" # Example usage: # print(can_create_playlist(3, 200, [60, 100, 140])) # Should print \\"YES\\". # print(can_create_playlist(4, 30, [10, 20, 30, 40])) # Should print \\"YES\\". # print(can_create_playlist(3, 25, [20, 40, 60])) # Should print \\"NO\\"."},{"question":"You are given a grid of size n x n. Each cell in the grid is either empty or contains an obstacle. The robot starts at the top-left corner of the grid (position (0, 0)) and needs to reach the bottom-right corner of the grid (position (n-1, n-1)). The robot can only move in two directions: right or down. The robot cannot pass through cells containing obstacles. Write a function that determines the total number of unique paths the robot can take to reach its destination, considering the obstacles on the grid. Input The first line contains a single integer n (1 ≤ n ≤ 10). The next n lines each contain n characters, where each character is either \'.\' to represent an empty cell or \'#\' to represent an obstacle. Output Output a single integer representing the number of unique paths. Examples Input 3 . . . . # . . . . Output 2 Input 3 . . # . # . . . . Output 1 Input 2 . # # . Output 0","solution":"def unique_paths_with_obstacles(grid): n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0 for _ in range(n)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"C-kun is a chess player who has played multiple games on an online chess platform. His performance in each game can be evaluated by his score, which is an integer. The platform assigns a rank to C-kun based on his average score across all games he has played. The ranks are assigned as follows: * From 0 through 999: Bronze * From 1000 through 1999: Silver * From 2000 through 2999: Gold * 3000 and above: Platinum You are given the scores C-kun has obtained in his games. Calculate his average score and determine his rank. Constraints * 1 ≤ N ≤ 1000 * 0 ≤ scores_i ≤ 4000 * N is an integer representing the number of games * scores_i is an integer representing the score in the i-th game Input Input is given from Standard Input in the following format: ``` N score_1 score_2 ... score_N ``` Output Print the rank C-kun has, as a string. For example, if he has Bronze rank, print `Bronze`. Examples Input 4 1200 1400 1600 1800 Output Silver Input 3 2500 2600 2700 Output Gold","solution":"def get_rank(scores): Returns the rank based on the average score. Args: scores (list): List of integers representing the scores in each game. Returns: str: Corresponding rank as \'Bronze\', \'Silver\', \'Gold\', or \'Platinum\'. if not scores: return \\"Bronze\\" # If no scores present, return lowest rank average_score = sum(scores) / len(scores) if average_score < 1000: return \\"Bronze\\" elif average_score < 2000: return \\"Silver\\" elif average_score < 3000: return \\"Gold\\" else: return \\"Platinum\\" # Example usage: # N = 4 # scores = [1200, 1400, 1600, 1800] # print(get_rank(scores)) # Output: \\"Silver\\""},{"question":"Given a string `str` consisting of lowercase alphabets, determine the minimum number of characters that need to be inserted to make the string a palindrome. Hint: A palindrome is a string that reads the same forward and backward. **Input Format** - A single line containing the string `str`. **Output Format** - A single integer indicating the minimum number of characters to be inserted. **Example** **Input** ``` abca ``` **Output** ``` 1 ``` **Explanation:** - One possible way to make \\"abca\\" a palindrome by inserting 1 character is: \\"abcba\\".","solution":"def min_insertions_to_make_palindrome(s): Returns the minimum number of characters that need to be inserted to make the string a palindrome. # Function to find the length of the longest palindromic subsequence def longest_palindromic_subsequence(x): n = len(x) # Reverse the string to find the longest common subsequence y = x[::-1] # dp table to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): if x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n] # Length of the given string n = len(s) # Length of the longest palindromic subsequence lps_len = longest_palindromic_subsequence(s) # Minimum insertions needed return n - lps_len"},{"question":"A scientist is designing a new encryption algorithm that involves manipulating pairs of integers. Given a list of N integers, the scientist needs your help to determine the number of distinct pairs (A, B) such that: - The sum of A and B is even. - A and B are not equal. - (A, B) is considered the same as (B, A), so count only unique pairs. Input: The first line contains an integer N, representing the number of integers in the list. The second line contains N integers. Output: Print the number of distinct pairs (A, B) that satisfy the above conditions. Constraints: N ≤ 2000 -10^9 ≤ integers in the list ≤ 10^9 SAMPLE INPUT 5 2 4 6 8 10 SAMPLE OUTPUT 10 Explanation All pairs from the list that sum to an even number are (2,4), (2,6), (2,8), (2,10), (4,6), (4,8), (4,10), (6,8), (6,10), and (8,10). Since none of the elements are equal and every pair (A, B) is counted the same as (B, A), we have a total of 10 distinct pairs.","solution":"def count_distinct_even_sum_pairs(arr): Counts the number of distinct pairs (A, B) in the list arr such that: - The sum of A and B is even. - A and B are not equal. - (A, B) is considered the same as (B, A) Parameters: arr (List[int]): List of integers. Returns: int: Number of distinct pairs meeting the criteria. even_numbers = [x for x in arr if x % 2 == 0] distinct_pairs = set() for i in range(len(even_numbers)): for j in range(i + 1, len(even_numbers)): if even_numbers[i] != even_numbers[j]: distinct_pairs.add(tuple(sorted([even_numbers[i], even_numbers[j]]))) return len(distinct_pairs)"},{"question":"Matching Tiles Two artists have created unique wall tile patterns represented by binary matrices of the same size. These patterns consist of two characters, \'0\' and \'1\', where \'0\' represents a blank tile and \'1\' represents a filled tile. The patterns are aesthetically different due to their complex structure and design choices. However, the artists are in a debate on whether their tile patterns are fundamentally the same regarding their symmetry properties. Specifically, they want to determine if their patterns are equivalent under certain transformations. The allowed transformations are rotations of 0°, 90°, 180°, and 270°. Write a program that, given two binary matrices, decides if one could be transformed into the other via any of the allowed rotations. Input: - The input consists of multiple test cases, each containing two binary matrices. - Each test case begins with an integer n (1 ≤ n ≤ 100), indicating that each matrix is of size n x n. - This is followed by n lines of n characters each, representing the first matrix. - The next n lines contain n characters each, representing the second matrix. The end of the input is represented by a single line containing \\"0\\". Output: - For each test case, output \\"YES\\" if one matrix can be transformed into the other by any of the allowed rotations, otherwise output \\"NO\\". Sample Input: ``` 3 010 101 010 111 010 111 2 01 10 10 01 0 ``` Sample Output: ``` NO YES ``` Explanation: - In the first test case, no rotation of the second matrix can match the first matrix. - In the second test case, rotating the second matrix 180° matches the first matrix. Note: - Make sure to handle multiple test cases and edge cases within the given constraints. - Efficient algorithms for matrix rotations and comparisons are recommended to handle the upper limit of input size.","solution":"def rotate_90(matrix): Rotates the given nxn matrix 90 degrees clockwise. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] def check_rotations(matrix1, matrix2): Checks if matrix1 can be transformed into matrix2 via rotations of 0°, 90°, 180°, or 270°. for _ in range(4): if matrix1 == matrix2: return \\"YES\\" matrix1 = rotate_90(matrix1) return \\"NO\\" def matching_tiles(test_cases): Process multiple test cases and returns the result for each. Each test case contains two nxn matrices, and the function checks if one can be transformed into the other by any of the allowed rotations. results = [] for matrix1, matrix2 in test_cases: results.append(check_rotations(matrix1, matrix2)) return results"},{"question":"Alex is a software engineer who is developing a unique type of text editor for a special project. The text editor has a specific feature that allows it to suggest words based on a given prefix. To accomplish this, he needs to store a large dictionary of words and then efficiently retrieve and count the number of words that start with a given prefix. Your task is to help Alex implement this feature. You are given multiple queries and for each query, you need to count how many words in the dictionary start with the given prefix. Input The first line contains a single integer `Q`, the number of queries. Each of the next `Q` lines contains a query which can be of two types: 1. \\"add <word>\\" - Add the word to the dictionary. 2. \\"count <prefix>\\" - Count the number of words in the dictionary that start with the given prefix. It is guaranteed that all words and prefixes contain only lowercase English letters (a-z). Output For each \\"count\\" query, print the number of words in the dictionary that start with the given prefix. Constraints - 1 ≤ Q ≤ 100000 - 1 ≤ length of any word or prefix ≤ 100 Example Input: 6 add apple add apparent add banana count app count ban count cat Output: 2 1 0 Explanation For the first count query \'count app\', there are two words \'apple\' and \'apparent\' that start with the prefix \'app\'. For the second count query \'count ban\', there is one word \'banana\' that starts with the prefix \'ban\'. For the third count query \'count cat\', there are no words that start with the prefix \'cat\', hence the output is 0.","solution":"class TextEditor: def __init__(self): self.words = {} def add_word(self, word): self.words[word] = self.words.get(word, 0) + 1 def count_words_with_prefix(self, prefix): count = 0 for word in self.words: if word.startswith(prefix): count += self.words[word] return count def handle_queries(queries): editor = TextEditor() results = [] for query in queries: parts = query.split() if parts[0] == \\"add\\": editor.add_word(parts[1]) elif parts[0] == \\"count\\": count = editor.count_words_with_prefix(parts[1]) results.append(count) return results"},{"question":"Danny is playing a board game that involves moving a piece around a circular board. The circular board has n spaces, numbered 0 to n-1 in a clockwise direction. Danny starts at space s and needs to move his piece m spaces forward, where each move advances his piece by one space. The challenge is to determine the final space on which Danny\'s piece will land after moving m spaces forward from the starting space s. Given the circular nature of the board, if moving forward m spaces from s exceeds the highest numbered space (n-1), Danny\'s piece wraps around to the beginning of the board. Input The first line contains an integer t (1 ≤ t ≤ 10^5), the number of test cases. Each test case is described by a single line containing three integers n, s, and m (1 ≤ n, m ≤ 10^9, 0 ≤ s < n), representing the number of spaces on the board, the starting space, and the number of forward moves respectively. Output For each test case, print a single integer, the final space on which Danny\'s piece will land. Example Input 5 12 3 5 8 1 3 10 6 14 4 2 7 15 0 20 Output 8 4 0 1 5 Note In the first test case, the board has 12 spaces, and Danny starts at space 3. Moving forward 5 spaces results in landing on space 8. In the second test case, the board has 8 spaces, and Danny starts at space 1. Moving forward 3 spaces results in landing on space 4. In the third test case, the board has 10 spaces, and Danny starts at space 6. Moving forward 14 spaces results in wrapping around and landing on space 0. In the fourth test case, the board has 4 spaces, and Danny starts at space 2. Moving forward 7 spaces results in wrapping around and landing on space 1. In the fifth test case, the board has 15 spaces, and Danny starts at space 0. Moving forward 20 spaces results in landing on space 5.","solution":"def final_space(n, s, m): Returns the final space on which Danny\'s piece will land after moving m spaces from starting space s on a circular board with n spaces. :param n: Total number of spaces on the board (int) :param s: Starting space (int) :param m: Number of spaces to move forward (int) :return: Final space number (int) return (s + m) % n def solve(test_cases): Solve multiple test cases to determine the final space for each. :param test_cases: List of tuples where each tuple contains (n, s, m) :return: List of integers representing final space for each test case results = [] for n, s, m in test_cases: results.append(final_space(n, s, m)) return results"},{"question":"In a kingdom far, far away, there are numerous castles and roads connecting them. The king needs to ensure secure communication between all the castles, especially to handle emergencies during times of war. To achieve this, a special encrypted message relay system needs to be implemented. Your task is to write a program that calculates the minimum number of messages that need to be sent to ensure communication between all the castles, assuming each road allows direct communication only between the two castles it connects. The kingdom can be represented as a graph with castles as nodes and roads as edges. Each road has a specific message cost associated with it. To ensure secure communication, every castle must be directly or indirectly connected to every other castle. Input: - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - For each test case, the first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950), representing the number of castles and the number of roads. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a road between castle u and castle v with a message cost of w. Output: For each test case, print a single integer representing the minimum message cost to ensure all castles are connected. If it is impossible to connect all castles (i.e., the graph is not connected), output -1. Example: Input: 2 4 5 1 2 3 1 3 5 2 3 7 3 4 2 2 4 8 3 1 1 2 10 2 3 15 1 3 5 Output: 10 20 Explanation: In the first test case, the minimum cost to connect all castles is 10 (1-2 at cost 3, 1-3 at cost 5, and 3-4 at cost 2). In the second test case, the minimum cost to connect all castles is 20 (1-2 at cost 10 and 2-3 at cost 10 using the direct connection 1-3 at cost 5 which is pruned out).","solution":"def kruskal(n, edges): Function to implement Kruskal’s algorithm to find the Minimum Spanning Tree (MST). # Helper function to find the root of a node def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to union two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 edges.sort(key=lambda x: x[2]) # Sorting edges by weights parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 mst_edges = 0 for u, v, w in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_cost += w mst_edges += 1 union(parent, rank, root_u, root_v) if mst_edges == n - 1: break if mst_edges != n - 1: return -1 return mst_cost def minimum_message_cost(T, test_cases): results = [] for n, m, edges in test_cases: if n == 1: results.append(0) continue result = kruskal(n, edges) results.append(result) return results"},{"question":"You are given an integer N. Construct a matrix a of size N-by-N such that the following conditions are met: * Each element (a_{i,j}) (1 ≤ i, j ≤ N) is a distinct positive integer from 1 to (N^2). * For any two elements (a_{i,j}) and (a_{k,l}) that are adjacent either horizontally or vertically in the matrix, the absolute difference between (a_{i,j}) and (a_{k,l}) is at least N. Constraints * 1 ≤ N ≤ 500 Input Input is given from Standard Input in the following format: N Output Print your solution in the following format: (a_{1,1}) (a_{1,2}) ... (a_{1,N}) : (a_{N,1}) (a_{N,2}) ... (a_{N,N}) Example Input 3 Output 1 10 19 28 4 13 16 22 7","solution":"def construct_matrix(N): Constructs an N-by-N matrix where: - Each element is a distinct positive integer from 1 to N^2. - The absolute difference between any two adjacent elements is at least N. matrix = [[0] * N for _ in range(N)] num = 1 for i in range(N): for j in range(N): matrix[i][j] = num num += N if num > N*N: num = (num % N) + 1 return matrix def print_matrix(matrix): for row in matrix: print(\\" \\".join(map(str, row)))"},{"question":"You are given an undirected graph with N nodes and M edges, where each edge connects two distinct nodes. Your task is to determine if there is a cycle in the graph. A cycle is defined as a non-empty trail in which only the first and last vertices are the same. Constraints * 2 ≤ N ≤ 500 * 1 ≤ M ≤ 10000 Input The input is given from Standard Input in the following format: N M u1 v1 u2 v2 : uM vM Each ui and vi are the endpoints of the ith edge. Output Print \\"YES\\" if there is at least one cycle in the graph, otherwise print \\"NO\\". Examples Input 5 5 1 2 1 3 2 4 4 5 2 3 Output YES Input 3 2 1 2 2 3 Output NO","solution":"def detect_cycle(n, m, edges): from collections import defaultdict # Class to represent the graph class Graph: def __init__(self, vertices): self.graph = defaultdict(list) self.V = vertices def add_edge(self, u, v): self.graph[u].append(v) self.graph[v].append(u) # Function to determine if a cycle is present def is_cyclic(self): visited = [False] * (self.V + 1) # Helper function for DFS def dfs(v, parent): visited[v] = True for neighbor in self.graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False for vertex in range(1, self.V + 1): if not visited[vertex]: if dfs(vertex, -1): return True return False graph = Graph(n) for u, v in edges: graph.add_edge(u, v) return \\"YES\\" if graph.is_cyclic() else \\"NO\\" # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [(int(data[2 + i * 2]), int(data[2 + i * 2 + 1])) for i in range(M)] print(detect_cycle(N, M, edges))"},{"question":"Alex is trying to organize a photo collection on his computer. Each photo has a specific aspect ratio, represented as a pair of integers (width, height). To streamline his collection, Alex wants to group photos with the same aspect ratio together. Your task is to write a function that takes a list of photo aspect ratios and returns the number of unique aspect ratios in the list. For example, if the input list contains aspect ratios [(4, 3), (16, 9), (4, 3), (2, 1)], the unique aspect ratios would be 3, as (4, 3) appears twice but is considered one unique aspect ratio, and (16, 9) and (2, 1) each appear once. Input: The first line contains an integer T, the number of test cases. Each of the following T lines contains a single integer N, followed by N pairs of integers representing the width and height of each photo. Output: For each test case, print the number of unique aspect ratios. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ width, height ≤ 1000 Sample Input: 2 4 4 3 16 9 4 3 2 1 3 1 1 2 2 3 3 Sample Output: 3 1","solution":"def gcd(a, b): while b: a, b = b, a % b return a def unique_aspect_ratios(T, test_cases): results = [] for case in test_cases: N = case[0] ratios = set() for i in range(1, len(case), 2): width, height = case[i], case[i + 1] g = gcd(width, height) norm_width, norm_height = width // g, height // g ratios.add((norm_width, norm_height)) results.append(len(ratios)) return results"},{"question":"Write a program to simulate a traffic light system at an intersection. The intersection has four sets of traffic lights, one for each direction (north, south, east, and west). Each set of lights can show either red, yellow, or green. The traffic light system follows these rules: 1. The cycle starts with the north and south lights green, and the east and west lights red. 2. After a specific duration, the green light turns yellow, then red. 3. Once the north and south lights turn red, the east and west lights turn green. 4. This process repeats indefinitely, alternating between the north-south green and the east-west green. The timing is as follows: - Green lasts for 10 seconds. - Yellow lasts for 3 seconds. - Red lasts for 13 seconds (combination of the time the other direction is green and yellow). Your task is to simulate the traffic light system for a given number of seconds and print the state of the traffic lights at each second. Use \'G\' for green, \'Y\' for yellow, and \'R\' for red. Input The input consists of a single integer `n` (1 ≤ n ≤ 1000), representing the number of seconds to simulate. Output Output the state of the traffic lights for each direction at each second in the format: `north south east west`. Example Input 15 Output G G R R G G R R G G R R G G R R G G R R G G R R G G R R G G R R G G R R Y Y R R R R R G R R R G R R R G R R R G R R R G","solution":"def simulate_traffic_lights(n): Simulate the traffic lights at an intersection for a given number of seconds. Args: n: int - the number of seconds to simulate (1 ≤ n ≤ 1000) Returns: list of str: The state of the traffic lights for each second states = [] for i in range(n): cycle_time = i % 26 if cycle_time < 10: # North/South green, East/West red state = \\"G G R R\\" elif cycle_time < 13: # North/South yellow, East/West red state = \\"Y Y R R\\" else: # North/South red, East/West green state = \\"R R G G\\" states.append(state) return states # Example usage: seconds = 15 traffic_light_states = simulate_traffic_lights(seconds) for state in traffic_light_states: print(state)"},{"question":"Problem Description You need to help Jerry outsmart Tom in a game of collecting cheese scattered on a grid. Jerry can only move right or down to reach the cheese. You are given a grid where each cell contains an integer representing the amount of cheese in that cell. Your task is to find the maximum amount of cheese Jerry can collect if he starts from the top left corner and reaches the bottom right corner of the grid. Input - An integer n, the size of the grid (the grid is n x n). - A 2D array of integers of size n x n representing the grid. Output - An integer representing the maximum amount of cheese Jerry can collect. Constraints - 1 ≤ n ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 Example: Input: 3 1 2 3 4 5 6 7 8 9 Output: 29 Explanation: Jerry has to follow the path 1 -> 2 -> 3 -> 6 -> 9 which gives the sum of 29.","solution":"def max_cheese(n, grid): Returns the maximum amount of cheese Jerry can collect. # Create a dp array of the same size as the grid dp = [[0] * n for _ in range(n)] # Initialize the starting position dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The last cell contains the maximum cheese Jerry can collect return dp[-1][-1]"},{"question":"Given an integer array `arr` of size `n`, find and return the second largest unique element in the array. If no such element exists, return -1. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the size of the array. The second line contains `n` space-separated integers representing the elements of the array. All elements are integers between 1 and 100, inclusive. Output Output the second largest unique element of the array. If no such element exists, output -1. Examples Input 8 1 3 4 5 3 5 6 7 Output 6 Input 5 4 4 4 4 4 Output -1 Explanation In the first example, the unique elements are [1, 3, 4, 5, 6, 7], and the second largest among them is 6. In the second example, there is no second unique element, so the output is -1.","solution":"def second_largest_unique(arr): unique_elements = list(set(arr)) if len(unique_elements) < 2: return -1 unique_elements.sort(reverse=True) return unique_elements[1] # Example usage: # n = 8 # arr = [1, 3, 4, 5, 3, 5, 6, 7] # print(second_largest_unique(arr)) # Output: 6"},{"question":"You are given a list of integers. You need to write a program to determine the length of the longest subarray that contains no more than two distinct integers. Given an integer array, your task is to implement a function to find the length of the longest subarray that contains no more than two distinct integers. Input The input consists of two lines: 1. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. 2. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the list. Output Print a single integer representing the length of the longest subarray that contains no more than two distinct integers. Example Input 6 1 2 1 2 3 4 Output 4 Input 5 4 4 4 4 4 Output 5 Input 7 1 1 1 2 2 3 3 Output 5","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest subarray with no more than two distinct integers. if not nums: return 0 max_len = 0 left = 0 count = {} for right in range(len(nums)): count[nums[right]] = count.get(nums[right], 0) + 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are working as a software developer for a logistics company that manages the delivery of goods in a city. The city can be represented as a grid of streets, where each cell represents a city block. The company wants to optimize the delivery routes by finding the shortest path for their delivery trucks to travel between various locations in the city. However, some streets are currently under construction and cannot be used. Write a program to find the shortest path in terms of distance between two locations in the city grid, avoiding the blocks under construction. If it is impossible to travel from the start location to the destination due to construction blocks, your program should return -1. Input The input consists of multiple datasets. Each dataset is given in the following format: > N M > sx sy dx dy > grid_row_1 > grid_row_2 > ... > grid_row_N The first line contains two positive integers N and M (1 ≤ N, M ≤ 1000), representing the number of rows and columns in the city grid respectively. The second line contains four integers sx, sy, dx, and dy (0 ≤ sx, sy, dx, dy < N, M), representing the start location and the destination location. The next N lines each contain M characters, representing the city grid. Each character in the grid can be either \'.\' indicating an open block, or \'#\' indicating a block under construction. The end of the input is indicated by a single line containing two zeros separated by a blank. Output Output the length of the shortest path for each dataset. If it is impossible to travel from the start location to the destination, output -1. Sample Input 5 5 0 0 4 4 ..... ...#. .#... ..... ..... 5 5 0 0 4 4 ..... # ..... # ..... Output for the Sample Input 8 -1 Example Input 5 5 0 0 4 4 ..... ...#. .#... ..... ..... 5 5 0 0 4 4 ..... # ..... # ..... Output 8 -1","solution":"from collections import deque def find_shortest_path(N, M, sx, sy, dx, dy, grid): if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) # (current_x, current_y, current_distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (dx, dy): return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def process_input(input_str): lines = input_str.strip().split(\\"n\\") i = 0 results = [] while i < len(lines): N, M = map(int, lines[i].split()) if N == 0 and M == 0: break i += 1 sx, sy, dx, dy = map(int, lines[i].split()) i += 1 grid = [] for _ in range(N): grid.append(lines[i]) i += 1 result = find_shortest_path(N, M, sx, sy, dx, dy, grid) results.append(result) return results"},{"question":"Balanced Substring Length Write a program that reads a string consisting of characters \'A\' and \'B\' only, and computes the length of the longest balanced substring. A balanced substring is defined as one that has the same number of \'A\'s and \'B\'s. Constraints * The input string length won\'t exceed 10,000. Input A single line containing the string of characters \'A\' and \'B\'. Output Print an integer representing the length of the longest balanced substring. Example Input AABBAABB Output 8","solution":"def longest_balanced_substring(s): Finds the length of the longest balanced substring of \'A\'s and \'B\'s. Args: s (str): A string consisting of characters \'A\' and \'B\'. Returns: int: The length of the longest balanced substring. max_len = 0 balance = 0 balance_index_map = {0: -1} for i, char in enumerate(s): if char == \'A\': balance += 1 else: balance -= 1 if balance in balance_index_map: max_len = max(max_len, i - balance_index_map[balance]) else: balance_index_map[balance] = i return max_len"},{"question":"In a city grid, each intersection is represented as an (x, y) coordinate. A famous delivery robot starts from the city center located at (0, 0) and needs to deliver packages to various specified delivery points on the grid. The robot can only move in four directions: up, down, left, or right. Each move takes the robot from one intersection to an adjacent one. However, the city\'s regulations require the robot to terminate its journey once it has completed the longest delivery route among all delivery points. You need to calculate the minimum number of moves the robot must make to complete the longest delivery route. Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of delivery points. Each of the next n lines contains two space-separated integers x and y (|x|, |y| ≤ 100) — the coordinates of the delivery points. Output Output a single integer — the minimum number of moves the robot needs to make to complete the longest delivery route. Example Input 3 3 4 -1 2 -5 -6 Output 11 Input 5 1 1 2 2 3 3 4 4 5 5 Output 10 Explanation In the first example, the robot needs to travel to (3, 4), (-1, 2), and (-5, -6). The longest route is to (-5, -6) which takes 11 moves (5 moves left and 6 moves down). In the second example, the longest route is to (5, 5) which takes 10 moves (5 moves right and 5 moves up).","solution":"def longest_delivery_route(n, delivery_points): Calculate the minimum number of moves the robot must make to complete the longest delivery route. Args: n (int): number of delivery points. delivery_points (list of tuples): list containing the (x, y) coordinates of the delivery points. Returns: int: the minimum number of moves required to complete the longest delivery route. max_distance = 0 for x, y in delivery_points: distance = abs(x) + abs(y) if distance > max_distance: max_distance = distance return max_distance # Example usage: n = 3 delivery_points = [(3, 4), (-1, 2), (-5, -6)] print(longest_delivery_route(n, delivery_points)) # Output: 11"},{"question":"You are given an integer array `nums` sorted in non-decreasing order. Determine if it is possible to split the array into one or more subarrays such that each subarray contains exactly 3 consecutive integers and each integer in the subarray appears exactly once. Input The input consists of a single line containing an integer `m` (1 ≤ m ≤ 2 * 10^5) — the length of the input array. The next line contains `m` integers `nums[1], nums[2], ..., nums[m]` (-10^9 ≤ nums[i] ≤ 10^9) which are the elements of the array in sorted order. Output Output \\"YES\\" if it\'s possible to split the array into the required subarrays; otherwise, output \\"NO\\". Examples Input 6 1 2 3 4 5 6 Output YES Input 9 1 2 3 3 4 5 6 7 8 Output YES Input 5 1 2 3 4 6 Output NO Note In the first example, the array can be split into the subarrays [1, 2, 3] and [4, 5, 6]. In the second example, the array can be split into the subarrays [1, 2, 3], [3, 4, 5], and [6, 7, 8]. In the third example, it is not possible to split the array into subarrays of consecutive integers with exactly 3 integers each because of the missing number 5.","solution":"def can_split_into_subarrays(nums): Determines if it is possible to split the sorted array into one or more subarrays, each containing exactly 3 consecutive integers, with each integer appearing exactly once. from collections import Counter # Step 1: Count the frequency of each number in the array. counter = Counter(nums) # Step 2: Iterate over each unique number to attempt forming subarrays. for num in sorted(counter.keys()): # While there is at least one \'num\' left to process while counter[num] > 0: # Check if there are enough consecutive numbers to form a triplet if counter[num] > 0 and counter[num + 1] > 0 and counter[num + 2] > 0: counter[num] -= 1 counter[num + 1] -= 1 counter[num + 2] -= 1 else: return \\"NO\\" return \\"YES\\""},{"question":"A large school has announced a coding competition, and the students of the school are very excited about it. The competition involves solving an interesting problem related to string manipulation. Given a string `s` which consists of only lower-case alphabets, the task is to find the lexicographically smallest and largest substrings of length `k`. Substrings are defined as contiguous sequences of characters within a string. For instance, the substrings of length 3 of the string \\"abac\\" are \\"aba\\", \\"bac\\", and \\"aca\\". Write a program to find the lexicographically smallest and largest substrings of length `k` from the given string `s`. **Input:** - The first line contains two integers `n` (the length of the string `s`) and `k` (the length of substrings to examine), separated by a space. - The second line contains the string `s` of length `n`. **Output:** - Print the lexicographically smallest substring of length `k`. - Print the lexicographically largest substring of length `k`. **Constraints:** - 1 ≤ k ≤ n ≤ 1000 - The string `s` consists only of lower-case alphabets. **Example:** **Input:** ``` 10 3 helloworld ``` **Output:** ``` ell wor ``` **Explanation:** - The substrings of length 3 are: \\"hel\\", \\"ell\\", \\"llo\\", \\"low\\", \\"owo\\", \\"wor\\", \\"orl\\", \\"rld\\". - The lexicographically smallest substring is \\"ell\\" and the largest substring is \\"wor\\".","solution":"def find_lexicographical_substrings(n, k, s): Returns the lexicographically smallest and largest substrings of length k from the string s. substrings = [s[i:i+k] for i in range(n-k+1)] substrings.sort() return substrings[0], substrings[-1]"},{"question":"To ensure the safety of a shipment arriving at Arista Port, you need to determine if the shipment will arrive intact despite potential disruptions. The shipment travels through a series of contiguous ports, and you have the weather reports for each port. Each port has a specific hazard level H_i associated with its weather conditions. The shipment is considered safe if the absolute difference in hazard levels between any two consecutive ports does not exceed a given threshold T. Given the number of ports N, the threshold T, and the hazard levels H_1, H_2, ..., H_N, determine if the shipment will arrive safely or if it is at risk. Constraints * All values in input are integers. * 2 leq N leq 10^5 * 0 leq T leq 10^9 * 0 leq H_i leq 10^9 (1 leq i leq N) Input Input is given from Standard Input in the following format: N T H_1 H_2 ... H_N Output Output \\"Safe\\" if the shipment will arrive intact and \\"Risky\\" if it is at risk. Examples Input 5 3 1 4 6 7 8 Output Safe Input 4 2 3 7 10 13 Output Risky Input 3 0 5 5 6 Output Risky","solution":"def shipment_status(N, T, hazard_levels): Determines if the shipment will arrive safely. Parameters: N (int): Number of ports T (int): Threshold for hazard level difference hazard_levels (list of int): List of hazard levels at each port Returns: str: \'Safe\' if the shipment will arrive intact, \'Risky\' otherwise. for i in range(1, N): if abs(hazard_levels[i] - hazard_levels[i - 1]) > T: return \\"Risky\\" return \\"Safe\\" def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) T = int(data[1]) hazard_levels = list(map(int, data[2:])) print(shipment_status(N, T, hazard_levels))"},{"question":"A new bakery shop has started making customized cakes for its customers. Each customized cake requires a specific number of units of two ingredients, flour and sugar. The bakery can only fulfill the orders if it has enough units of both ingredients. Design a program to determine if the bakery can fulfill all customer orders based on its current inventory. The program should take the initial inventory of flour and sugar, the required units of each ingredient for each customer\'s order, and output whether it can fulfill all orders or not. Input The first line contains two integers f and s (1 ≤ f, s ≤ 10000) — the initial units of flour and sugar in the inventory. The second line contains a single integer n (1 ≤ n ≤ 100) — the number of customer orders. Each of the next n lines contains two integers fi and si (1 ≤ fi, si ≤ 1000) — the units of flour and sugar required for the i-th order. Output If it\'s possible to fulfill all orders print \\"Possible\\". Otherwise print \\"Impossible\\". Examples Input 100 200 3 30 50 20 60 50 40 Output Possible Input 50 70 2 40 50 20 30 Output Impossible","solution":"def can_fulfill_orders(f, s, orders): Determines if all orders can be fulfilled given the initial inventory of flour and sugar. Parameters: - f (int): initial units of flour - s (int): initial units of sugar - orders (list of tuples): each tuple contains two integers representing the units of flour and sugar required for a customer order Returns: - str: \\"Possible\\" if all orders can be fulfilled, \\"Impossible\\" otherwise for fi, si in orders: if f < fi or s < si: return \\"Impossible\\" f -= fi s -= si return \\"Possible\\""},{"question":"In a faraway land, there exists a peculiar type of currency system based on coins of various denominations. The king is fascinated by the concept of minimum coin change and wants to devise a challenge for his mathematicians. The task is to determine the minimum number of coins needed to make up a certain amount using a given set of denominations. If it is not possible to make up the amount with the provided denominations, output -1. Input: The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer A, the amount to be made. - The second line contains D space-separated integers representing the denominations of the coins. Output: For each test case, print the minimum number of coins needed to make up the amount A, or -1 if it is not possible. Constraints: 1 ≤ T ≤ 100 1 ≤ A ≤ 10^5 1 ≤ D ≤ 100 1 ≤ Denomination values ≤ 10^4 SAMPLE INPUT 2 11 1 2 5 7 3 6 SAMPLE OUTPUT 3 -1 Explanation: In the first test case, the amount 11 can be made using one coin of 5 and three coins of 2 (5 + 2 + 2 + 2 = 11), so the minimum number of coins is 4. In the second test case, it is not possible to make the amount 7 with the given denominations 3 and 6, hence the output is -1.","solution":"def min_coins(T, test_cases): from math import inf results = [] for i in range(T): A, denominations = test_cases[i] dp = [inf] * (A + 1) dp[0] = 0 for coin in denominations: for x in range(coin, A + 1): if dp[x - coin] + 1 < dp[x]: dp[x] = dp[x - coin] + 1 results.append(dp[A] if dp[A] != inf else -1) return results"},{"question":"Alice and Bob are playing a game with string arrays. Given a string array A of length N (1 ≤ N ≤ 1000) where each element Ai is a string of lowercase English letters (1 ≤ |Ai| ≤ 1000), the players take turns performing the following operation: 1. A player chooses exactly one element from A and decides to remove any one character from it. - If after this operation the string becomes empty, it is removed from the array. Alice always goes first, and the players alternate turns. The player who cannot make a move (because there are no more strings left in the array) loses the game. Determine the winner if both Alice and Bob play optimally. Input - The first line contains an integer N, the number of strings in the array. - The next N lines each contain a single string Ai. Output - Print \\"Alice\\" if Alice has a winning strategy, otherwise print \\"Bob\\". Examples Input 3 abc de fghi Output Alice Input 2 aa bb Output Bob Note In the first example, Alice can remove one character from any of the strings, reducing them to two shorter strings and maintaining her advantage. In the second example, Bob can mirror every move of Alice, ensuring he will always be the one to make the final move, thus winning the game.","solution":"def determine_winner(strings): Determines the winner of the game between Alice and Bob based on the lengths of strings. Args: strings (List[str]): List of strings Returns: str: \\"Alice\\" if Alice has a winning strategy, \\"Bob\\" otherwise. total_length = sum(len(s) for s in strings) return \\"Alice\\" if total_length % 2 == 1 else \\"Bob\\""},{"question":"A pharmaceutical company is conducting a drug trial with different dosage levels. Each dosage level is tested on a set of patients, and the effectiveness is recorded as a percentage for each patient. The company now wants to find the dosage level that has the highest average effectiveness. Given multiple test cases, where each test case includes the number of dosage levels and the effectiveness percentages for each dosage level, your task is to determine the dosage level with the highest average effectiveness for each test case. Input Format The first line contains the number of test cases T. Each test case starts with an integer N, the number of dosage levels. The next N lines contain the effectiveness percentages for that dosage level, starting with an integer K (the number of patients) followed by K percentages. Output Format Print the dosage level (1-based index) with the highest average effectiveness for each test case in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ 100 SAMPLE INPUT 2 3 5 70 80 90 100 60 4 88 92 85 78 3 75 84 91 2 4 65 70 75 80 3 99 95 96 SAMPLE OUTPUT 2 2 Explanation For the first test case: - Dosage level 1: Average effectiveness = (70+80+90+100+60)/5 = 80 - Dosage level 2: Average effectiveness = (88+92+85+78)/4 = 85.75 - Dosage level 3: Average effectiveness = (75+84+91)/3 = 83.33 Dosage level 2 has the highest average effectiveness of 85.75. For the second test case: - Dosage level 1: Average effectiveness = (65+70+75+80)/4 = 72.5 - Dosage level 2: Average effectiveness = (99+95+96)/3 = 96.67 Dosage level 2 has the highest average effectiveness of 96.67.","solution":"def highest_average_effectiveness(test_cases): results = [] for case in test_cases: N = case[0] # number of dosage levels effectiveness = case[1:] # effectiveness for each dosage level max_avg = -1 best_dosage = -1 for i in range(N): dosage_data = effectiveness[i] K = dosage_data[0] # number of patients percentages = dosage_data[1:] avg_effectiveness = sum(percentages) / K if avg_effectiveness > max_avg: max_avg = avg_effectiveness best_dosage = i + 1 # 1-based index results.append(best_dosage) return results"},{"question":"You are tasked with developing a function to analyze data from several weather stations. Each weather station records temperature and humidity levels at the same moments every hour. The input to your function will include measurements from these stations, recorded as a list of dictionaries. Each dictionary represents a single weather station, with a list of temperature and humidity measurements taken from that station. Your function should process this data and provide a statistical summary for each measurement type across all stations. Specifically, your task includes calculating the average, maximum, and minimum values for both temperature and humidity. Input - A list of d dictionaries, where each dictionary corresponds to a weather station and contains two keys: - \\"temperature\\": a list of t integers representing temperature measurements. - \\"humidity\\": a list of t integers representing humidity measurements. Output - A dictionary with four keys: - \\"Average Temperature\\": the average temperature across all stations. - \\"Max Temperature\\": the maximum temperature recorded across all stations. - \\"Min Temperature\\": the minimum temperature recorded across all stations. - \\"Average Humidity\\": the average humidity across all stations. - \\"Max Humidity\\": the maximum humidity recorded across all stations. - \\"Min Humidity\\": the minimum humidity recorded across all stations. Assumptions - The input list will contain at least one weather station with measurements. - All temperature and humidity lists within the dictionaries are of equal length and contain at least one reading. - The temperature and humidity values are valid integers. Example Input ```json [ {\\"temperature\\": [20, 21, 22], \\"humidity\\": [30, 35, 40]}, {\\"temperature\\": [25, 24, 23], \\"humidity\\": [45, 50, 55]}, ] ``` Output ```json { \\"Average Temperature\\": 22.5, \\"Max Temperature\\": 25, \\"Min Temperature\\": 20, \\"Average Humidity\\": 42.5, \\"Max Humidity\\": 55, \\"Min Humidity\\": 30 } ```","solution":"def analyze_weather_data(weather_data): Analyzes the weather data from several weather stations and returns a summary including the average, max, and min for temperature and humidity. all_temperatures = [] all_humidities = [] for station in weather_data: all_temperatures.extend(station[\\"temperature\\"]) all_humidities.extend(station[\\"humidity\\"]) avg_temp = sum(all_temperatures) / len(all_temperatures) max_temp = max(all_temperatures) min_temp = min(all_temperatures) avg_humidity = sum(all_humidities) / len(all_humidities) max_humidity = max(all_humidities) min_humidity = min(all_humidities) return { \\"Average Temperature\\": avg_temp, \\"Max Temperature\\": max_temp, \\"Min Temperature\\": min_temp, \\"Average Humidity\\": avg_humidity, \\"Max Humidity\\": max_humidity, \\"Min Humidity\\": min_humidity, }"},{"question":"Problem You are a member of a software development team responsible for managing a dynamic library system. The library needs a function to categorize books into specific genres based on certain keywords found in their titles. The goal is to identify the primary genre of each book by checking for the presence of specific keywords associated with different genres. A book belongs to a single genre only, based on the first keyword that appears in the title from a given list of genre keywords. Given a dictionary where keys are genres and values are lists of keywords, and a list of book titles, write a function that assigns a genre to each book title. If a book title does not contain any keywords from the provided lists, it should be categorized as \\"Unknown\\". # Input The input consists of two parts: 1. A dictionary containing genres as keys and lists of keywords as values. 2. A list of strings where each string represents a book title. # Output Return a list of the same length as the input list of book titles, where each element is the genre assigned to the corresponding book title. # Constraints - The genre keywords and book titles are case-insensitive. - The input dictionary contains at least one genre with at least one keyword. - The number of book titles is between 1 and 100 inclusive. - The length of each book title and each keyword is between 1 and 100 characters inclusive. # Function Signature ```python def categorize_books(genres, titles): # your code here ``` # Examples Example 1 **Input:** ```python genres = { \'Science Fiction\': [\'space\', \'alien\', \'robot\'], \'Fantasy\': [\'magic\', \'dragon\', \'elf\'], \'Mystery\': [\'murder\', \'detective\', \'clue\'] } titles = [ \'The Space Odyssey\', \'Murder on the Orient Express\', \'A Dragon\'s Tale\', \'The Great Detective Mystery\', \'Unknown Adventures\' ] ``` **Output:** ```python [\'Science Fiction\', \'Mystery\', \'Fantasy\', \'Mystery\', \'Unknown\'] ``` Example 2 **Input:** ```python genres = { \'Romance\': [\'love\', \'romantic\', \'kiss\'], \'Adventure\': [\'journey\', \'explorer\', \'quest\'] } titles = [ \'The Romantic Journey\', \'Explorer of the Lost City\', \'A Kiss in the Rain\', \'The Unknown Journey\' ] ``` **Output:** ```python [\'Romance\', \'Adventure\', \'Romance\', \'Adventure\'] ```","solution":"def categorize_books(genres, titles): Categorizes books into genres based on keywords found in titles. :param genres: Dictionary with genres as keys and lists of keywords as values. :param titles: List of book titles. :return: List of genres assigned to corresponding book titles. lowercase_genres = {genre: [keyword.lower() for keyword in keywords] for genre, keywords in genres.items()} def find_genre(title): lower_title = title.lower() for genre, keywords in lowercase_genres.items(): for keyword in keywords: if keyword in lower_title: return genre return \\"Unknown\\" return [find_genre(title) for title in titles]"},{"question":"A company has n employees who are working on multiple projects. The company wants to organize its projects such that no two employees working on the same project go on vacation at the same time. Each employee has a specific range of days [li, ri] during which they can go on vacation (both inclusive). Your task is to determine the maximum number of projects that can be scheduled simultaneously such that each project has at least one employee available at any given day and the employees assigned to a project do not have overlapping vacation periods. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees. The next n lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ 1000) — the range of days during which the ith employee can go on vacation. Output Print a single integer — the maximum number of projects that can be scheduled simultaneously. Examples Input 3 1 4 2 5 6 8 Output 2 Input 4 2 4 3 5 1 2 6 7 Output 3 Note In the first example, the company can schedule up to two projects simultaneously. One possible assignment is: - Project 1 with Employee 1 (available from day 1 to day 4) - Project 2 with Employee 3 (available from day 6 to day 8) In the second example, the company can schedule up to three projects simultaneously. One possible assignment is: - Project 1 with Employee 1 (available from day 2 to day 4) - Project 2 with Employee 3 (available from day 1 to day 2) - Project 3 with Employee 4 (available from day 6 to day 7)","solution":"def max_projects(n, intervals): Returns the maximum number of projects that can be scheduled simultaneously such that no two employees working on the same project go on vacation at the same time. # First, sort intervals based on end times intervals.sort(key=lambda x: x[1]) # Initialize variables max_num_projects = 0 current_end = -1 # Iterate through the sorted intervals for interval in intervals: if interval[0] > current_end: # If the start of the current interval is after the end of the last interval # We can schedule a new project max_num_projects += 1 current_end = interval[1] return max_num_projects"},{"question":"Given a 2D grid of size MxN, each cell in the grid can either be 0 (an empty cell) or 1 (a wall). You start at the top-left corner of the grid and your goal is to reach the bottom-right corner. You can only move right or down. Find the number of unique paths from the start to the goal without hitting any walls. Input The first line contains two space-separated integers, M and N, the dimensions of the grid. Each of the next M lines contains N space-separated integers (either 0 or 1) representing the grid. Output Output a single integer, the number of unique paths from the top-left to the bottom-right corner. Constraints 1 ≤ M, N ≤ 100 The top-left and bottom-right corners are always empty (0). SAMPLE INPUT 3 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT 2","solution":"def unique_paths_with_walls(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0]*n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] # Example usage M, N = 3, 3 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_walls(M, N, grid)) # Output: 2"},{"question":"You are given a sequence of N natural numbers and Q queries. Each query can be of one of the following two types: * `0 L R X`: Add X to all elements from index L to R (inclusive) in the sequence. * `1 L R`: Calculate and print the sum of the elements from index L to R (inclusive). Constraints * 1 leq N leq 100,000 * 1 leq Q leq 100,000 * 0 leq L leq R < N * 1 leq X leq 10^9 * 1 leq text{Sequence elements} leq 10^9 Input Input is given from Standard Input in the following format: N Q Sequence of N natural numbers t_1 L_1 R_1 [X_1] t_2 L_2 R_2 [X_2] : t_Q L_Q R_Q [X_Q] Output For each query of the latter type, print the answer. Example Input 5 4 1 2 3 4 5 1 1 3 0 2 4 1 1 1 3 1 0 4 Output 9 10 16","solution":"def handle_queries(N, Q, sequence, queries): Process Q queries on the sequence of N natural numbers. :param N: int, number of elements in the sequence :param Q: int, number of queries :param sequence: list of int, the sequence of natural numbers :param queries: list of queries, each query is a list [t, L, R] or [t, L, R, X] :return: list of int, result of the sum queries result = [] for query in queries: t = query[0] L = query[1] R = query[2] if t == 0: # Adding X to elements from index L to R. X = query[3] for i in range(L, R + 1): sequence[i] += X elif t == 1: # Printing the sum of elements from index L to R. result.append(sum(sequence[L:R + 1])) return result"},{"question":"# Problem Statement A factory produces packages of different weights, and you need to determine which packages exceed a given weight threshold. You are given a list of integers representing the weights of the packages produced in a day, followed by an integer representing the weight threshold. Write a function that processes the list of package weights and the threshold, and outputs \\"Heavy\\" if the package exceeds the threshold and \\"Light\\" otherwise. # Input Format - The first line contains an integer `n` representing the number of packages. - The second line contains `n` space-separated integers, where each integer represents the weight of a package. - The third line contains a single integer, the weight threshold. # Output Format - The function should output `n` lines, where each line contains either \\"Heavy\\" or \\"Light\\", corresponding to each package weight. # Constraints - ( 1 leq n leq 10^5 ) - ( 1 leq ) weight of each package (leq 10^4 ) - ( 1 leq ) weight threshold (leq 10^4 ) # Example Input ``` 5 8 15 5 20 7 10 ``` Output ``` Light Heavy Light Heavy Light ``` # Explanation - The threshold is 10. - Packages are of weights [8, 15, 5, 20, 7]. - Package 1 (weight 8) is less than 10: Light. - Package 2 (weight 15) is more than 10: Heavy. - Package 3 (weight 5) is less than 10: Light. - Package 4 (weight 20) is more than 10: Heavy. - Package 5 (weight 7) is less than 10: Light.","solution":"def classify_packages(weights, threshold): Classifies each package as \\"Heavy\\" if the weight exceeds the threshold, and \\"Light\\" otherwise. Parameters: weights (list of int): A list of package weights. threshold (int): The weight threshold. Returns: list of str: A list containing \\"Heavy\\" or \\"Light\\" for each package. return [\\"Heavy\\" if weight > threshold else \\"Light\\" for weight in weights]"},{"question":"An online bookstore offers various discounts on orders based on the total number of distinct books a customer buys. However, there are some rules about the discounts that make the calculation a bit tricky. The discount rules are as follows: 1. If a customer buys at least two distinct books, they get a 5% discount on the total price. 2. If a customer buys at least four distinct books, they get a 10% discount on the total price. 3. If a customer buys at least six distinct books, they get a 20% discount on the total price. You are given a list representing the prices of books a customer wants to buy and need to calculate the total price the customer needs to pay after applying the appropriate discount based on the given rules. If the customer doesn\'t buy any books, the total price should be zero. Input The first line contains an integer n (0 ≤ n ≤ 1000) — the number of books the customer wants to buy. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the prices of the books the customer wants to buy. Output Print a single real number — the total price after the discount is applied. The answer will be considered correct if its absolute or relative error does not exceed 10 - 2. Examples Input 5 100 200 300 400 500 Output 1350.00 Input 6 100 200 300 400 500 600 Output 1680.00 Input 0 Output 0.00","solution":"def calculate_total_price(n, prices): Calculates the total price after applying the appropriate discount. Parameters: n (int): Number of books. prices (list): List of book prices. Returns: float: Total price after applying the discount. if n == 0: return 0.00 total_price = sum(prices) distinct_books = len(set(prices)) if distinct_books >= 6: discount = 0.20 elif distinct_books >= 4: discount = 0.10 elif distinct_books >= 2: discount = 0.05 else: discount = 0.00 total_price_after_discount = total_price * (1 - discount) # Formatting to 2 decimal places return round(total_price_after_discount, 2)"},{"question":"You are given a piano keyboard consisting of `n` keys in a single row. Each key has a unique note value represented as an integer. A song can be played on the keyboard by selecting exactly `k` continuous keys (1 ≤ k ≤ n). A song is considered harmonious if the difference between the highest and lowest note values in the selected keys is minimized. Given the note values of all the keys, determine the minimum difference between the highest and lowest note values among all possible harmonious songs on the keyboard. **Input** The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5), the number of keys and the number of continuous keys to select for the song, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), where `ai` represents the note value of the i-th key on the keyboard. **Output** Print a single integer — the minimum difference between the highest and lowest note values among all possible harmonic songs. **Examples** **Input** 5 3 1 5 3 4 2 **Output** 2 **Input** 7 4 10 12 15 10 18 20 25 **Output** 5 **Note** In the first example, the possible sequences of 3 continuous keys are [1, 5, 3], [5, 3, 4], and [3, 4, 2]. The differences between the highest and lowest note values in these sequences are 4, 2, and 2, respectively. Therefore, the minimum difference is 2. In the second example, the possible sequences of 4 continuous keys are [10, 12, 15, 10], [12, 15, 10, 18], [15, 10, 18, 20], and [10, 18, 20, 25]. The differences between the highest and lowest note values in these sequences are 5, 8, 10, and 15, respectively. Therefore, the minimum difference is 5.","solution":"def minimum_harmonious_difference(n, k, notes): Determines the minimum difference between the highest and lowest note values among all possible harmonious songs on the keyboard. Parameters: n (int): Number of keys k (int): Number of continuous keys to select for the song notes (list of int): Note values for each key Returns: int: The minimum difference between the highest and lowest note values # Sort the list of note values notes.sort() # Initialize the minimum difference to a large value min_difference = float(\'inf\') # Iterate through the sorted list to find the minimum difference for i in range(n - k + 1): current_difference = notes[i + k - 1] - notes[i] if current_difference < min_difference: min_difference = current_difference return min_difference"},{"question":"You are working on a project to create a preliminary round of a coding competition. In this project, you are required to implement a program that locates the centroid of a set of points on a 2D plane. The centroid, also known as the geometric center, is the arithmetic mean of all the points. The points are provided in Cartesian coordinates (x, y). The task is to write a function that takes in a list of points and outputs the coordinates of the centroid, rounded to two decimal places. Function Signature: ```python def find_centroid(points: List[Tuple[int, int]]) -> Tuple[float, float]: pass ``` **Input:** - `points` - A list of tuples, where each tuple contains two integers representing the x and y coordinates of a point on the 2D plane. (1 ≤ len(points) ≤ 10^3, -10^3 ≤ x, y ≤ 10^3). **Output:** - Returns a tuple with two floating-point numbers, representing the x and y coordinates of the centroid. **Examples:** Example 1: ```python points = [(1, 2), (3, 4), (5, 6)] print(find_centroid(points)) ``` Output: ``` (3.00, 4.00) ``` Example 2: ```python points = [(-1, -1), (1, 1), (-1, 1), (1, -1)] print(find_centroid(points)) ``` Output: ``` (0.00, 0.00) ``` Example 3: ```python points = [(2, 2), (4, 4)] print(find_centroid(points)) ``` Output: ``` (3.00, 3.00) ``` **Notes:** - Ensure that the output is rounded to two decimal places. - The function should handle large numbers of points and coordinates within the given limits efficiently.","solution":"from typing import List, Tuple def find_centroid(points: List[Tuple[int, int]]) -> Tuple[float, float]: x_sum, y_sum = 0, 0 n = len(points) for x, y in points: x_sum += x y_sum += y centroid_x = x_sum / n centroid_y = y_sum / n return (round(centroid_x, 2), round(centroid_y, 2)) # Example usage: # points = [(1, 2), (3, 4), (5, 6)] # print(find_centroid(points)) # Output: (3.00, 4.00)"},{"question":"John is developing a new tile-based puzzle game. In this game, there is a grid with some blocked and some accessible cells. The player can move from one cell to another vertically or horizontally, but only through accessible cells. John wants to determine whether a player can reach from the top-left corner of the grid to the bottom-right corner. Given the grid configuration, help John determine if this is possible. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the next `m` lines contains a string of `n` characters, where each character is either \'.\' (representing an accessible cell) or \'#\' (representing a blocked cell). Output Print \\"YES\\" (without quotes) if it\'s possible to reach from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Examples Input 3 3 ... .#. ... Output YES Input 3 3 .#. .#. ... Output NO Note In the first example, the player can move from the top-left corner to the bottom-right corner by moving right, down, down, and right. In the second example, the player is blocked and cannot reach the bottom-right corner.","solution":"def can_reach_end(grid): m, n = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return \\"NO\\" def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'#\': return False if grid[x][y] == \'visited\': return False if x == m-1 and y == n-1: return True grid[x][y] = \'visited\' if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Dr. Codewell, a computer scientist, is working on a sophisticated encryption scheme. The scheme involves converting messages into numerical arrays based on character positions and then manipulating these arrays. One crucial operation in this scheme is to calculate the prefix sum of the numerical array. Given an array of integers, the prefix sum array is constructed such that each element at index i is the sum of all elements from index 0 to i (inclusive) in the original array. Dr. Codewell has many messages to process and needs an efficient way to compute the prefix sums. Write a function that takes an array of integers and returns the prefix sum array. Input The first line contains an integer T, the number of test cases. Each of the following T lines contains a sequence of integers representing an array for which the prefix sum needs to be computed. Output For each test case, output the prefix sum array, with each element separated by a space. Constraints 1 ≤ T ≤ 100 1 ≤ length of each array ≤ 10^5 -10^4 ≤ each element in the array ≤ 10^4 SAMPLE INPUT 3 1 2 3 4 4 3 2 1 -1 -2 -3 -4 SAMPLE OUTPUT 1 3 6 10 4 7 9 10 -1 -3 -6 -10 Explanation For the first case, the prefix sum array is calculated as follows: - The first element is 1. - The second element is 1 + 2 = 3. - The third element is 1 + 2 + 3 = 6. - The fourth element is 1 + 2 + 3 + 4 = 10. Similarly, the prefix sums for the other arrays are computed.","solution":"def calculate_prefix_sums(arrays): Given a list of arrays, calculates the prefix sum for each array. Parameters: arrays (list of list of int): A list of integer arrays Returns: list of list of int: A list containing the prefix sum arrays result = [] for arr in arrays: prefix_sum = [] current_sum = 0 for num in arr: current_sum += num prefix_sum.append(current_sum) result.append(prefix_sum) return result"},{"question":"John is an aspiring mathematician who loves playing with numbers. One day, while playing, he came across the concept of Narcissistic numbers. A Narcissistic number (also known as an Armstrong number) is a number that is the sum of its own digits each raised to the power of the number of digits. For example, 153 is a Narcissistic number because: 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 John is curious to find out if a given number is a Narcissistic number or not. Can you help him write a program to check this? Input An integer n (1 ≤ n ≤ 10^9). The number can have leading zeros which you need to consider as valid digits. Output Output \\"Yes\\" if the number is Narcissistic, otherwise output \\"No\\". Examples Input 1: 153 Output 1: Yes Input 2: 9474 Output 2: Yes Input 3: 9475 Output 3: No Input 4: 370 Output 4: Yes","solution":"def is_narcissistic(n): Determine if a number is a Narcissistic number. Arguments: n -- an integer value Returns: \'Yes\' if the number is Narcissistic, otherwise \'No\' digits = list(map(int, str(n))) num_digits = len(digits) narc_sum = sum(d ** num_digits for d in digits) return \\"Yes\\" if narc_sum == n else \\"No\\""},{"question":"Write a program that determines the longest substring in a given character string that consists of only one type of character. The character string consists of only lowercase letters. For example, given the character string \\"aabbbccccaabb\\", the longest substring is \\"cccc\\" which has a length of 4. **Input:** The input consists of multiple datasets. Each dataset is one line and consists of lowercase letters of the alphabet with a length of 10,000 characters or less. Input ends with EOF. The number of datasets does not exceed 5. **Output:** For each dataset, output the length of the longest substring that consists of only one type of character. **Example** Input aabbbccccaabb dddeefffgggghhhhhh aaabbbcccddd Output 4 6 3 Input abcd aabbcc Output 1 2 Input None Output None","solution":"def longest_single_char_substring_length(s): Determines the length of the longest substring in a given string `s` that consists of only one type of character. :param s: The input string consisting of lowercase letters of the alphabet. :return: The length of the longest substring with only one type of character. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"In a medieval kingdom, there were two powerful wizards, Merlin and Morgana, known for their magical control over the elements. Merlin could control water and wind, while Morgana could control fire and earth. To ensure peace and balance in the kingdom, the king decided to build a sophisticated defensive structure around the kingdom using the elements controlled by both wizards. The structure is a rectangular grid of size N x M, where each cell can be either water (w), wind (W), fire (f), or earth (E). Due to the inherent properties of these elements, there are certain rules that must be followed when constructing the defensive structure: 1. Water (w) cells cannot be placed next to fire (f) cells. 2. Wind (W) cells cannot be placed next to earth (E) cells. Two cells are considered adjacent if they share an edge. The king has tasked you with verifying whether a given N x M grid follows the elemental rules of placement. If the grid is valid according to the rules, you should output \\"VALID\\", otherwise, output \\"INVALID\\". # Input The input consists of multiple test cases. Each test case begins with two integers N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns in the grid respectively. Then follows N lines, each containing M characters representing the elemental type of each cell: \'w\' for water, \'W\' for wind, \'f\' for fire, and \'E\' for earth. The end of the input is indicated by a line containing two zeros. # Output For each test case, output a single line containing \\"VALID\\" if the grid satisfies the elemental rules, or \\"INVALID\\" otherwise. # Example Input 3 3 w f w w W E w e w 2 2 w E W f 0 0 Output INVALID VALID # Constraints - 1 ≤ N, M ≤ 100 # Explanation In the first test case: - The placement of \'w\' (water) next to \'f\' (fire) is invalid. In the second test case: - All elemental placements adhere to the rules.","solution":"def check_grid_validity(grid, N, M): for i in range(N): for j in range(M): if grid[i][j] == \'w\': if (i > 0 and grid[i - 1][j] == \'f\') or (i < N - 1 and grid[i + 1][j] == \'f\') or (j > 0 and grid[i][j - 1] == \'f\') or (j < M - 1 and grid[i][j + 1] == \'f\'): return \\"INVALID\\" elif grid[i][j] == \'W\': if (i > 0 and grid[i - 1][j] == \'E\') or (i < N - 1 and grid[i + 1][j] == \'E\') or (j > 0 and grid[i][j - 1] == \'E\') or (j < M - 1 and grid[i][j + 1] == \'E\'): return \\"INVALID\\" return \\"VALID\\" def element_grid_validator(test_cases): results = [] for N, M, grid in test_cases: if N == 0 and M == 0: break result = check_grid_validity(grid, N, M) results.append(result) return results"},{"question":"You are given two sequences, A and B, of length n. You want to make A and B lexicographically largest by choosing elements from both sequences and rearranging them. More formally, you take all the elements from A and B, form a new array C of length 2n by concatenating A and B. Then, rearrange C as you like such that the first n elements will form the new array A\' and the last n elements will form the new array B\'. The arrays A\' and B\' should be lexicographically largest possible. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of arrays A and B. The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of array A. The third line contains n integers b_1, b_2, …, b_n (0 ≤ b_i ≤ 10^9) — the elements of array B. Output Print the lexicographically largest arrays A\' and B\'. The first line should contain n integers representing A\', and the second line should contain n integers representing B\'. Examples Input 5 1 3 2 4 5 6 7 8 9 10 Output 6 7 8 9 10 5 4 3 2 1 Input 4 9 8 7 3 1 2 6 5 Output 9 8 7 6 5 3 2 1 Note In the first example, combining arrays A and B gives: C = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10] To form lexicographically largest A\' and B\', after sorting in descending order: C = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] Then selecting the first n elements for A\' and the last n elements for B\': A\' = [6, 7, 8, 9, 10] B\' = [5, 4, 3, 2, 1]","solution":"def lexicographically_largest(n, A, B): This function takes in the lengths and elements of arrays A and B, combines them, sorts them in descending order, and then splits them into the lexicographically largest possible arrays A\' and B\'. :param n: int - the length of the arrays A and B :param A: list of int - array A of length n :param B: list of int - array B of length n :return: tuple of two lists - the lexicographically largest A\' and B\' # Combine A and B C = A + B # Sort C in descending order C_sorted_desc = sorted(C, reverse=True) # Select the first n elements for A\' A_prime = C_sorted_desc[:n] # Select the last n elements for B\' B_prime = C_sorted_desc[n:] return A_prime, B_prime"},{"question":"You are given an array `A` of integers and an integer `X`. Your task is to determine the length of the shortest subarray for which the sum is greater than or equal to `X`. If no such subarray exists, return `-1`. # Input - The first line contains two integers, `n` and `X` (1 ≤ `n` ≤ 2 * 10^5, 1 ≤ `X` ≤ 10^9), where `n` is the length of the array and `X` is the target sum. - The second line contains `n` integers, the elements of the array `A` (-10^9 ≤ `A[i]` ≤ 10^9). # Output Output the length of the shortest subarray with sum greater than or equal to `X`. If such a subarray does not exist, output `-1`. # Examples Example 1 # Input ``` 5 11 1 2 3 4 5 ``` # Output ``` 3 ``` Example 2 # Input ``` 5 15 1 2 3 4 5 ``` # Output ``` 5 ``` Example 3 # Input ``` 5 100 1 2 3 4 5 ``` # Output ``` -1 ``` # Notes To solve this problem efficiently, consider using a two-pointer or sliding window technique to find the shortest subarray that meets the requirement.","solution":"def min_subarray_len(arr, n, X): Returns the length of the shortest subarray with sum >= X. If no such subarray exists, returns -1. min_len = float(\'inf\') start = 0 curr_sum = 0 for end in range(n): curr_sum += arr[end] while curr_sum >= X: min_len = min(min_len, end - start + 1) curr_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1 # Example usage: # n, X = 5, 11 # arr = [1, 2, 3, 4, 5] # print(min_subarray_len(arr, n, X)) # Output: 3"},{"question":"For an ice cream shop, you have a menu of ice cream flavors each with a different price. A customer wants to know if they can buy a combination of exactly three different flavors that would total up to a given amount of money. Write a function that takes in a list of integers representing the prices of the ice cream flavors and a single integer representing the exact amount of money the customer wants to spend. The function should return a list of three integers representing the prices of the three different ice cream flavors that exactly add up to the given amount. If there are multiple combinations, return any one of them. If no such combination exists, return an empty list. # Input Format - The first line contains an integer N, the number of ice cream flavors. - The next N lines each contain a single integer, the price of the ith ice cream flavor. - The last line contains a single integer, the exact amount of money M the customer wants to spend. # Output Format A list of three integers representing the prices of the three different ice cream flavors that add up to M, or an empty list if no such combination exists. # Constraints - 3 <= N <= 20 - 1 <= Price of each ice cream flavor <= 100 - 1 <= M <= 300 **Sample Input** ``` 5 10 20 30 40 50 100 ``` **Sample Output** ``` [10, 30, 60] ``` **Explanation** The customer wants to spend exactly 100 units of currency. Out of the 5 ice cream prices, one valid combination that exactly sums up to 100 is 10, 30, and 60. # Note You may assume that there is at least one combination of three prices that add up to M if the combination exists. Implement the function `find_combination(prices, M)` where: - `prices` is the list of integers representing the prices of the ice cream flavors. - `M` is the integer representing the amount of money. The function should return a list of three integers representing the prices of the three ice cream flavors or an empty list if no combination exists.","solution":"def find_combination(prices, M): Returns a list of three integers representing the prices of three different ice cream flavors that add up to amount M, or an empty list if no such combination exists. n = len(prices) for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if prices[i] + prices[j] + prices[k] == M: return [prices[i], prices[j], prices[k]] return [] # Example usage: # prices = [10, 20, 30, 40, 50] # M = 100 # result = find_combination(prices, M) # print(result) # Output: [10, 30, 60] or any other valid combination"},{"question":"Create a program that simulates the reading of a digital temperature sensor. The sensor provides a temperature in degrees Celsius, which is an integer value between -100 and 100 inclusive. Your task is to categorize the temperature into one of three categories: \\"Cold\\", \\"Warm\\", and \\"Hot\\". - \\"Cold\\" is defined as any temperature below 10 degrees Celsius. - \\"Warm\\" is defined as any temperature from 10 degrees Celsius up to and including 30 degrees Celsius. - \\"Hot\\" is defined as any temperature above 30 degrees Celsius. Write a program that takes an integer input representing the temperature and outputs the appropriate category in one line. Input A single integer T[-100 <= T <= 100], which is the temperature in degrees Celsius. Output Output one of the strings \\"Cold\\", \\"Warm\\", or \\"Hot\\" based on the temperature value. Example Input 15 Output Warm Input -5 Output Cold Input 35 Output Hot","solution":"def categorize_temperature(T): Classifies the temperature into \'Cold\', \'Warm\', or \'Hot\'. Parameters: T (int): The temperature in degrees Celsius, which is an integer between -100 and 100 inclusive. Returns: str: \'Cold\' if T < 10, \'Warm\' if 10 <= T <= 30, \'Hot\' if T > 30. if T < 10: return \\"Cold\\" elif 10 <= T <= 30: return \\"Warm\\" else: return \\"Hot\\""},{"question":"A delivery company uses a software system to manage its fleet of trucks. Each truck has a specific loading limit and can carry a certain number of packages. Each package has a weight and must be delivered within a specific city. The company wants to optimize the loading of trucks to ensure that no truck exceeds its weight limit and that all packages are assigned to the appropriate city. The task is to write a program that determines the minimum number of trucks required to carry all packages within their respective cities without exceeding any truck\'s weight limit. Input: - The first line contains an integer `T` (1 ≤ T ≤ 10^3), the number of trucks. - The second line contains T space-separated integers, where the i-th integer represents the weight limit of the i-th truck. - The third line contains an integer `P` (1 ≤ P ≤ 10^3), the number of packages. - The following P lines each contain two integers `w` (1 ≤ w ≤ 10^3) and `c` (1 ≤ c ≤ 10^3), denoting the weight and city of a package, respectively. Output: Print a single integer — the minimum number of trucks required to deliver all packages. If it is impossible to deliver all packages without exceeding the weight limits, print `-1`. Example Input: 3 100 200 150 5 30 1 70 1 80 2 40 2 20 1 Output: 2 Explanation: 1. Assign packages weighing 30 and 70 to truck 1 (city 1). 2. Assign packages weighing 80 and 40 to truck 2 (city 2). 3. Use truck 3 for packages weighing 20 (city 1). Thus, a total of 2 trucks are required.","solution":"def min_trucks_required(truck_limits, packages): city_packages = {} for weight, city in packages: if city not in city_packages: city_packages[city] = [] city_packages[city].append(weight) used_trucks = 0 for city, weights in city_packages.items(): weights.sort(reverse=True) truck_available = truck_limits.copy() for weight in weights: placed = False for i in range(len(truck_available)): if truck_available[i] >= weight: truck_available[i] -= weight placed = True break if not placed: return -1 used_trucks += 1 return used_trucks def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) truck_limits = list(map(int, lines[1].split())) P = int(lines[2]) packages = [tuple(map(int, line.split())) for line in lines[3:]] return T, truck_limits, P, packages def main(input_str): T, truck_limits, P, packages = parse_input(input_str) return min_trucks_required(truck_limits, packages)"},{"question":"A group of friends has decided to play a word combination game. Each friend is given a list of lowercase English words, and the goal is to determine if it\'s possible to form a certain target word by combining exactly two different words from the list provided. Write a program to help the friends with this task. The program should take the specific list of words and the target word, then check if the target word can be formed by concatenating any two distinct words from the list. Input The first line contains an integer n (2 ≤ n ≤ 100), the number of words in the list. The next n lines each contain a word (1 ≤ length of each word ≤ 100). The last line contains the target word (1 ≤ length of target word ≤ 200), which consists of lowercase English letters. Output If it is possible to form the target word by concatenating exactly two different words from the list, print \\"Yes\\". Otherwise, print \\"No\\". Examples Input 3 cat dog fish catdog Output Yes Input 4 ant bee wasp fly beewasp Output Yes Input 5 rabbit monkey tiger lion bear elephant Output No Note In the first example, \\"catdog\\" can be formed by concatenating \\"cat\\" and \\"dog\\" from the list. In the second example, \\"beewasp\\" can be formed by concatenating \\"bee\\" and \\"wasp\\" from the list. In the third example, it is not possible to form the word \\"elephant\\" by concatenating any two words from the given list.","solution":"def can_form_target_word(words, target): Check if the target word can be formed by concatenating any two distinct words from the list. word_set = set(words) for word in words: if target.startswith(word): suffix = target[len(word):] if suffix in word_set and suffix != word: return \\"Yes\\" return \\"No\\""},{"question":"In a distant galaxy, there are several planets. Each planet is connected to some number of other planets through teleportation portals. Each portal has a certain cost associated with it. The government of the galaxy wants to establish a main hub on one of these planets such that the sum of the costs to travel from this main hub to all other planets is minimized. They need your help to determine which planet should be chosen as the main hub. You have to answer Q queries. Each query gives you information about the total number of planets and the details of all the portals. For each query, find and return the id of the planet that should be chosen as the main hub. Constraints 1 ≤ n ≤ 10^3 (number of planets) 1 ≤ m ≤ 2 * 10^3 (number of portals) 1 ≤ c ≤ 10^6 (cost of each portal) 1 ≤ Q ≤ 100 (number of queries) Input The first line contains a single integer Q. For each query: - The first line contains two integers n and m denoting the number of planets and the number of portals. - The following m lines each contain three integers u, v, and c denoting a portal between planet u and planet v with a cost of c. Output For each query, output a single integer - the id of the planet (0-indexed) that should be chosen as the main hub. SAMPLE INPUT 1 3 3 0 1 1 1 2 2 0 2 4 SAMPLE OUTPUT 1 Explanation For the given graph: - Choosing planet 0 as hub cost is 1 (to planet 1) + 4 (to planet 2) = 5. - Choosing planet 1 as hub cost is 1 (to planet 0) + 2 (to planet 2) = 3. - Choosing planet 2 as hub cost is 2 (to planet 1) + 4 (to planet 0) = 6. Therefore, the optimal choice is to select planet 1 as the main hub as the total travel cost is minimized to 3.","solution":"import heapq import sys def dijkstra(n, graph, start): distances = [sys.maxsize] * n distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for v, cost in graph[u]: distance = current_distance + cost if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) return distances def find_main_hub(n, m, portals): graph = [[] for _ in range(n)] for u, v, c in portals: graph[u].append((v, c)) graph[v].append((u, c)) best_hub = -1 min_cost = sys.maxsize for i in range(n): distances = dijkstra(n, graph, i) total_cost = sum(distances) if total_cost < min_cost: min_cost = total_cost best_hub = i return best_hub def solve(queries): results = [] for query in queries: n, m, portals = query[\'n\'], query[\'m\'], query[\'portals\'] result = find_main_hub(n, m, portals) results.append(result) return results # Input reading and function calling can be done like: def main(): import sys input = sys.stdin.read data = input().split() idx = 0 Q = int(data[idx]) idx += 1 queries = [] for _ in range(Q): n = int(data[idx]) m = int(data[idx + 1]) idx += 2 portals = [] for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) c = int(data[idx + 2]) portals.append((u, v, c)) idx += 3 queries.append({ \'n\': n, \'m\': m, \'portals\': portals }) results = solve(queries) for result in results: print(result)"},{"question":"Given an array of integers, your task is to write a function that finds the longest subarray with elements that form an arithmetic progression. # Input - One line containing multiple integers separated by spaces. The length of the list is between 2 and 1,000,000. # Output - Output the length of the longest subarray that forms an arithmetic progression. # Example Input ``` 1 3 5 7 9 10 12 14 ``` Output ``` 5 ``` # Note In the given example, the subarray `[1, 3, 5, 7, 9]` is the longest arithmetic progression with a common difference of `2`.","solution":"def longest_arithmetic_subarray(arr): Given an array of integers, finds the length of the longest subarray with elements that form an arithmetic progression. if len(arr) < 2: return 0 max_len = 1 curr_len = 1 common_diff = None for i in range(1, len(arr)): if common_diff is None: common_diff = arr[i] - arr[i-1] curr_len = 2 elif arr[i] - arr[i-1] == common_diff: curr_len += 1 else: max_len = max(max_len, curr_len) common_diff = arr[i] - arr[i-1] curr_len = 2 max_len = max(max_len, curr_len) return max_len"},{"question":"Mira and Zoe are playing a game involving arrays and multiplicative parity. Mira selects a value, \'k\' (which is an integer), and keeps it secret. She then provides Zoe with an array of integers \'a\' with \'n\' elements. Zoe\'s task is to determine if there exists a subset of elements in \'a\' whose product is even if k is even, or odd if k is odd. In other words, Zoe must confirm if she can generate a product matching the parity of \'k\'. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 1 000 000, 0 ≤ k ≤ 1 000 000) — the number of elements in the array and the value \'k\' chosen by Mira. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1 000 000) — the elements of the array. Output Print \\"Yes\\" (without quotes) if Zoe can find a subset meeting the parity condition, or \\"No\\" (without quotes) otherwise. Examples Input 5 4 1 3 5 7 9 Output No Input 3 1 2 4 6 Output No Input 4 2 4 6 8 10 Output Yes Note In the first example, since k is even, Zoe needs an even product. Multiplying any subset of odd numbers results in an odd product, and therefore, it\'s impossible for Zoe to meet the condition. In the second example, since k is odd, Zoe will need an odd product. However, any product of even numbers results in an even product, failing the condition. In the third example, since k is even, Zoe needs an even product. Including any even number in the subset ensures an even product. Therefore, Zoe can meet the condition.","solution":"def can_generate_matching_parity(n, k, array): Determines if there exists a subset of elements in \'array\' whose product is even if k is even, or odd if k is odd. Parameters: n (int): Number of elements in the array k (int): The secret integer chosen by Mira array (list of int): The array of integers Returns: str: \\"Yes\\" if a subset meeting the parity condition exists, \\"No\\" otherwise def is_even(x): return x % 2 == 0 if is_even(k): # If k is even, need at least one even number in the array for num in array: if is_even(num): return \\"Yes\\" return \\"No\\" else: # If k is odd, need all numbers in the array to be odd to form an odd product for num in array: if is_even(num): return \\"No\\" return \\"Yes\\""},{"question":"Write a Python function that takes a list of integers and returns the product of all the unique numbers in it. If the list is empty, return 1. Function Signature ```python def product_of_unique_numbers(nums: List[int]) -> int: pass ``` Input - `nums` (List[int]): A list of integers where the integers may have duplicates. Output - Returns an integer which is the product of all unique numbers in the list. Examples ```python assert product_of_unique_numbers([2, 3, 4, 3, 2, 1]) == 24 # Explanation: Unique numbers are [2, 3, 4, 1]. Their product is 24. assert product_of_unique_numbers([7, 7, 7]) == 7 # Explanation: Only unique number is 7. assert product_of_unique_numbers([0, -1, 1]) == 0 # Explanation: Unique numbers are [0, -1, 1]. Their product is 0. assert product_of_unique_numbers([]) == 1 # Explanation: The list is empty, so the product is 1. ``` Constraints - The length of the list is between 0 and 10^4 - Each integer in the list can range from -10^4 to 10^4.","solution":"from typing import List def product_of_unique_numbers(nums: List[int]) -> int: Returns the product of all unique numbers in the list. If the list is empty, returns 1. if not nums: return 1 unique_numbers = set(nums) product = 1 for number in unique_numbers: product *= number return product"},{"question":"Create a program that calculates the water consumption of several households for one month and generates a summary report indicating the highest, lowest, and average consumption. Input The input is given in the following format: ``` n m1 m2 :: mn ``` The first line denotes the number of households `n` (1 ≤ n ≤ 50). Each of the following lines contains a real number `mi` (0.0 ≤ mi ≤ 1000.0, up to the first decimal place) representing the water consumption in cubic meters of the i-th household. Output Display the summary report in the following format: ``` Highest: m_max Lowest: m_min Average: m_avg ``` - `m_max` is the highest water consumption among the households. - `m_min` is the lowest water consumption among the households. - `m_avg` is the average water consumption of all households, rounded to one decimal place. Examples Input ``` 5 120.5 150.0 98.3 110.8 102.4 ``` Output ``` Highest: 150.0 Lowest: 98.3 Average: 116.4 ``` Input ``` 3 345.6 289.4 310.2 ``` Output ``` Highest: 345.6 Lowest: 289.4 Average: 315.1 ```","solution":"def water_consumption_report(consumptions): Generates a summary report indicating the highest, lowest, and average water consumption. Parameters: consumptions (List[float]): list of water consumption values Returns: str: formatted summary report highest = max(consumptions) lowest = min(consumptions) average = round(sum(consumptions) / len(consumptions), 1) return f\\"Highest: {highest}nLowest: {lowest}nAverage: {average}\\""},{"question":"Jake is working on a logistics software that processes delivery routes. He must optimize the routes but needs to evaluate specific configurations first. He is given a list of delivery times in minutes for each route he needs to evaluate. Jake\'s goal is to divide the list of delivery times into m groups such that the maximum delivery time out of all groups is minimized. Write a function that, given the list of delivery times and the number of groups m, returns the minimum possible value for the maximum delivery time among the groups, after the optimal division. Input: The first line of the input contains two space-separated integers N and m (1 ≤ N ≤ 10,000, 1 ≤ m ≤ N) — the number of delivery times and the number of groups respectively. The second line contains N space-separated integers representing the delivery times in minutes for each route. Each integer is in the interval [1, 1,000,000]. Output: Output the minimum possible value for the maximum delivery time among the groups. Example: Input: 7 3 10 20 30 40 50 60 70 Output: 110 Explanation: One optimal way to divide the list of delivery times [10, 20, 30, 40, 50, 60, 70] into 3 groups is [10, 20, 30], [40, 50], [60, 70]. The maximum delivery times for each group are 60, 90, and 110 respectively. The minimum possible value for the maximum delivery time among these groups is 110.","solution":"def minimize_max_delivery_time(delivery_times, m): Minimize the maximum delivery time among `m` groups after dividing the delivery times list. def is_valid_division(max_time): groups = 1 current_sum = 0 for time in delivery_times: current_sum += time if current_sum > max_time: groups += 1 current_sum = time if groups > m: return False return True left, right = max(delivery_times), sum(delivery_times) while left < right: mid = (left + right) // 2 if is_valid_division(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a series of commands that represent movements on a grid. The grid is made up of cells located in an X-Y coordinate system. The starting position is always at (0,0). Here are the possible commands: - \\"UP n\\" - Move up by n units. - \\"DOWN n\\" - Move down by n units. - \\"LEFT n\\" - Move left by n units. - \\"RIGHT n\\" - Move right by n units. Write a function that takes a list of these commands and returns the Manhattan distance between the starting point (0,0) and the final position after all commands have been executed. The Manhattan distance between two points (x1, y1) and (x2, y2) is calculated as: |x1 - x2| + |y1 - y2| **Input:** - A list of commands, where each command is a string in the format \\"DIRECTION n\\". **Output:** - An integer representing the Manhattan distance from the starting point to the final position. **Example:** ```python commands = [\\"UP 5\\", \\"LEFT 3\\", \\"DOWN 2\\", \\"RIGHT 4\\"] Output: 4 ``` **Explanation:** - Starting at (0, 0) - Move UP by 5 units to (0, 5) - Move LEFT by 3 units to (-3, 5) - Move DOWN by 2 units to (-3, 3) - Move RIGHT by 4 units to (1, 3) The Manhattan distance from (0, 0) to (1, 3) is |0 - 1| + |0 - 3| = 1 + 3 = 4","solution":"def manhattan_distance(commands): Calculate the Manhattan distance from (0,0) after executing a series of movement commands. x, y = 0, 0 for command in commands: direction, n = command.split() n = int(n) if direction == \\"UP\\": y += n elif direction == \\"DOWN\\": y -= n elif direction == \\"LEFT\\": x -= n elif direction == \\"RIGHT\\": x += n return abs(x) + abs(y)"},{"question":"You are an engineer piloting a robot through a grid-based labyrinth. The labyrinth is represented as a matrix with n rows and m columns. The robot starts at the top-left corner of the matrix (position (1,1)) and must reach the bottom-right corner (position (n,m)). Each cell in the matrix can either be passable or impassable. A passable cell is represented by a \\".\\" while an impassable cell is represented by an \\"#\\". The robot can move up, down, left, or right, but cannot move diagonally and cannot move through impassable cells. The robot can take a maximum of `k` steps in one move. However, if it encounters an impassable cell within those `k` steps, it has to stop before that cell. Write a program to determine if the robot can reach the bottom-right corner of the labyrinth. # Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 100) — the number of rows, the number of columns, and the maximum number of steps the robot can take in one move, respectively. The next n lines each contain a string of length m representing the labyrinth. The j-th character of the i-th string represents the cell at row i and column j of the matrix. The first and the last characters of the matrix are guaranteed to be \\".\\". # Output Print \\"YES\\" (without the quotes) if the robot can reach the bottom-right corner of the labyrinth, otherwise, print \\"NO\\" (without the quotes). # Examples Input 5 5 2 ..... .#.#. ..#.. .#.#. ..... Output YES Input 5 5 2 ..... # # # ..... Output NO # Note In the first example, the robot can move right for 2 steps to (1,3), down for 2 steps to (3,3), then it can continue moving to the bottom-right corner. In the second example, there is no way for the robot to pass through the wall of \\"#\\", hence it cannot reach the bottom-right corner.","solution":"def can_reach_end(n, m, k, grid): from collections import deque # Function to check if position is within bounds and passable def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: for step in range(1, k+1): nx, ny = x + dx * step, y + dy * step if not is_valid(nx, ny): break if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"In a kingdom far away, there are N beautiful castles connected by M pathways. Each pathway directly connects two castles and has a positive integer length associated with it. However, due to a recent war, some of the pathways may have become impassable. The king wants to ensure that the kingdom remains united, meaning it is possible to travel between any two castles using the remaining pathways. If the kingdom is not already united, he can send his engineers to repair a minimum number of pathways to achieve connectivity. Your task is to determine the minimum number of pathways that need to be repaired to ensure the kingdom is united. Input - The first line contains two integers N and M, the number of castles and pathways respectively (1 ≤ N ≤ 100, 0 ≤ M ≤ 10,000). - Each of the next M lines contains three integers u, v, and l representing a pathway between castles u and v with a length of l (1 ≤ u, v ≤ N, 1 ≤ l ≤ 1,000). - The next line contains an integer K, the number of damaged pathways (0 ≤ K ≤ M). - Each of the next K lines contains two integers a and b indicating that the pathway between castles a and b is damaged and cannot be used. Output Output a single integer, the minimum number of pathways that need to be repaired to make the kingdom united. If it is already united, print 0. If it cannot be united regardless of repairs, print -1. Example Input: 6 7 1 2 5 2 3 10 3 4 3 4 5 4 5 6 2 6 1 8 3 6 7 2 3 4 5 6 Output: 1 Explanation: In the example, initially, the pathways between castles 3-4 and 5-6 are damaged. To unite all the castles, at least one of the damaged pathways must be repaired. Repairing the pathway between castles 3-4 allows all castles to be connected.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def minimum_repair_needed(n, m, edges, k, damaged): if n == 1: return 0 # Create a set of damaged pathways for quick lookup damaged_set = set(tuple(path) for path in damaged) # Initialize the Union-Find structure parent = list(range(n + 1)) rank = [0] * (n + 1) # Sort edges by length for Kruskal\'s algorithm edges.sort(key=lambda x: x[2]) # First, add all non-damaged edges total_cost = 0 num_edges = 0 for u, v, l in edges: if (u, v) not in damaged_set and (v, u) not in damaged_set: if find(parent, u) != find(parent, v): union(parent, rank, u, v) num_edges += 1 total_cost += l # Check if all castles are connected root = find(parent, 1) united = all(find(parent, i) == root for i in range(1, n + 1)) if united: return 0 # Try to add damaged edges to connect the kingdom repair_count = 0 for u, v in damaged: if find(parent, u) != find(parent, v): union(parent, rank, u, v) repair_count += 1 if all(find(parent, i) == find(parent, 1) for i in range(1, n + 1)): return repair_count # If we reach here, it means it\'s impossible to unify the kingdom return -1"},{"question":"Samantha is fascinated by palindromic sequences and wants to generate one from a given set of characters. A sequence is considered palindromic if it reads the same backward as forward. Your task is to determine whether a palindromic sequence can be formed using all the characters of the given string. If it is possible, print the palindromic sequence; if there are multiple possible answers, print any of them. If it is not possible to form a palindromic sequence, print -1. Input A single string s of lowercase English letters (1 ≤ |s| ≤ 1000) — the string from which the palindromic sequence is to be formed. Output Print a palindromic sequence using all characters of the input string, or -1 if it is not possible to form one. Examples Input racecar Output racecar Input aabb Output abba","solution":"from collections import Counter def form_palindromic_sequence(s): Returns a palindromic sequence using all characters of the input string, or -1 if it cannot be formed. count = Counter(s) odd_char = None odd_count = 0 for char, cnt in count.items(): if cnt % 2 != 0: odd_char = char odd_count += 1 if odd_count > 1: return -1 first_half = [] middle = odd_char * count[odd_char] if odd_char else \'\' for char, cnt in count.items(): half_cnt = cnt // 2 first_half.append(char * half_cnt) first_half_str = \'\'.join(first_half) return first_half_str + middle + first_half_str[::-1]"},{"question":"You are given a string containing only digits and letters. Your task is to reorder the string so that all the digits come before all the letters while preserving the relative order of the digits and the letters. Input The input consists of a single string s (1 ≤ |s| ≤ 50), which contains only digits (0-9) and letters (a-z, A-Z). Output Output the reordered string with all digits first followed by all letters. Examples Input a1b2c3d4 Output 1234abcd Input 3z1A4b Output 314zAb","solution":"def reorder_string(s): Reorders the input string such that all digits come before all letters while preserving their relative order. :param s: Input string containing only digits and letters. :return: Reordered string with digits first followed by letters. digits = \'\'.join([char for char in s if char.isdigit()]) letters = \'\'.join([char for char in s if char.isalpha()]) return digits + letters"},{"question":"Certain numbers are called palindrome numbers if they read the same forwards and backwards. For example, 121, 1331, and 7 are palindrome numbers. Your task is to determine whether an input number is a palindrome. Further, if the input number is a palindrome, you need to determine the smallest palindrome number that can be obtained by permuting the digits of the input number. If the input number cannot be permuted into a different palindrome, return it as the smallest palindrome permutation. Constraints * 1 ≤ N < 10^9 * N is an integer. Input Input is given from Standard Input in the following format: N Output Print the smallest palindrome permutation of the input number N, or just print N if it cannot be permuted into a different palindrome number. Examples Input 121 Output 121 Input 112 Output 121","solution":"from collections import Counter def is_palindrome(num): Determine if a number is a palindrome. s = str(num) return s == s[::-1] def smallest_palindrome_permutation(N): Determine if the input number N is a palindrome. If it is, return the smallest palindrome permutation of N. if is_palindrome(N): return N s = str(N) freq = Counter(s) # Find the odd frequency characters odd_count = sum(1 for count in freq.values() if count % 2 != 0) if odd_count > 1: # If more than one character has an odd count, we cannot form a palindrome return N # Form the smallest palindrome left_half = [] middle = [] for digit, count in sorted(freq.items()): if count % 2 == 0: left_half.extend([digit] * (count // 2)) else: left_half.extend([digit] * (count // 2)) middle.extend([digit]) left_half = \'\'.join(left_half) middle = \'\'.join(middle) right_half = left_half[::-1] return int(left_half + middle + right_half)"},{"question":"A professor has given his students an assignment to develop a custom encryption algorithm. The algorithm should take a numerical keypad input string and rearrange the digits to generate the smallest possible integer. The input string consists of digits (\'0\'-\'9\') without leading zeros, unless the string itself is \\"0\\". The students need to implement a function that reorders the digits to form the smallest possible integer. Your job is to create a function `findSmallestNumber(s: str) -> str`, where `s` is a string of digits (1 ≤ |s| ≤ 10^5), and return the smallest possible integer representation of the digits in the string. # Input - A single string `s` containing digits (\'0\'-\'9\'). The length of the string is at least 1 and at most 10^5. # Output - A string representing the smallest possible integer that can be formed by rearranging the digits in `s`. # Constraints - The input string will not contain any leading zeros, unless it is \\"0\\". # Examples Input ``` \\"3041\\" ``` Output ``` \\"1034\\" ``` Input ``` \\"980760\\" ``` Output ``` \\"006789\\" ``` Input ``` \\"120\\" ``` Output ``` \\"012\\" ``` # Explanation 1. In the first example, rearranging the digits of \\"3041\\" gives \\"1034\\", which is the smallest possible integer. 2. In the second example, rearranging the digits of \\"980760\\" gives \\"006789\\". Note that leading zeros should be preserved as in the original input. 3. In the third example, rearranging the digits of \\"120\\" gives \\"012\\", resulting in the smallest integer possible with the given digits. Write an efficient solution to handle the constraints.","solution":"def findSmallestNumber(s: str) -> str: Returns the smallest possible integer that can be formed by rearranging the digits of the input string. return \'\'.join(sorted(s))"},{"question":"Given a list of `n` distinct integers, find a pair of integers `(a, b)` such that the difference between the square of these integers is divisible by 4. # Input The input will include: 1. An integer `n` (2 ≤ n ≤ 100). 2. A list of `n` distinct integers. # Output Output a pair of integers `(a, b)` such that `(a^2 - b^2) % 4 == 0`. It should be noted that such a pair always exists. # Sample Input 6 1 5 9 14 20 25 # Sample Output 1 5 Explanation: The square of 1 is 1. The square of 5 is 25. The difference, 25 - 1 = 24, is divisible by 4. Hence, this is a valid pair.","solution":"def find_pair(arr): Given a list of `n` distinct integers, find a pair of integers `(a, b)` such that the difference between the square of these integers is divisible by 4. Args: arr (list): A list of distinct integers. Returns: tuple: A pair of integers `(a, b)`. # Loop through the list to find the pair for i in range(len(arr)): for j in range(i + 1, len(arr)): a = arr[i] b = arr[j] if (a**2 - b**2) % 4 == 0: return (a, b) return None # should never reach here as the problem guarantees a solution."},{"question":"Given a positive integer `n`, you are tasked with finding the smallest positive integer `m` such that the sum of the digits of `m` is equal to `n`. For example: - If `n` = 10, the smallest number `m` is 19. (1+9=10) - If `n` = 5, the smallest number `m` is 5. (5=5) Write a function `smallest_number_with_digit_sum(n)` that takes a positive integer `n` and returns the integer `m`. # Input - The first line contains an integer `T` (1 ≤ T ≤ 10), the number of test cases. - Each of the following `T` lines contains an integer `n` (1 ≤ n ≤ 10^5). # Output For each test case, print the smallest positive integer `m` such that the sum of the digits of `m` is equal to `n`. # Example ``` Input: 3 10 5 15 Output: 19 5 69 ``` # Explanation - In the first test case, the smallest number `m` whose digits sum to 10 is 19. - In the second test case, the smallest number `m` whose digits sum to 5 is 5. - In the third test case, the smallest number `m` whose digits sum to 15 is 69.","solution":"def smallest_number_with_digit_sum(n): Returns the smallest positive integer m such that the sum of the digits of m is equal to n. # Start with the smallest number possible number = [] while n > 0: if n >= 9: number.append(9) n -= 9 else: number.append(n) break # Reverse to get the smallest possible number with these digits number.reverse() return int(\'\'.join(map(str, number)))"},{"question":"Palindrome Check You are given a string and you need to determine whether it\'s a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). # Input - A single line containing a string ( S ). # Output - Output \\"YES\\" if the given string is a palindrome and \\"NO\\" otherwise. # Constraints - The string ( S ) can be up to 100 characters long. # Example Input: ``` A man, a plan, a canal, Panama ``` Output: ``` YES ``` Input: ``` Hello, World! ``` Output: ``` NO ```","solution":"def is_palindrome(s): Determines if the given string s is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): the input string Returns: str: \\"YES\\" if s is a palindrome, \\"NO\\" otherwise import re # Remove non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse return \\"YES\\" if cleaned_s == cleaned_s[::-1] else \\"NO\\""},{"question":"Aria is a software engineer working on a busy team that receives a lot of email. She wants to analyze the emails they receive to figure out some statistics. However, due to the large volume of emails, she needs your help to efficiently process this data. Each email is represented as a string that includes the sender\'s email address, the recipient\'s email address, and the email\'s body text. The sender\'s and recipient\'s email addresses are enclosed in angle brackets. For example, the string: \\"From: <alice@example.com> To: <bob@example.com> Hello Bob, how are you?\\" Write a program to calculate the number of unique email addresses that sent at least one email, and the number of unique email addresses that received at least one email. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the total number of emails. The next n lines each contain one email represented as a string. Each email string contains at most 1000 characters. Output Print two integers: the number of unique email addresses that sent at least one email, and the number of unique email addresses that received at least one email. Example Input 3 From: <alice@example.com> To: <bob@example.com> Hello Bob, how are you? From: <carol@example.com> To: <alice@example.com> Hi Alice, long time no see! From: <alice@example.com> To: <carol@example.com> Hey Carol, nice to hear from you! Output 2 3 Explanation - The unique senders are alice@example.com and carol@example.com, so there are 2 unique senders. - The unique recipients are bob@example.com, alice@example.com, and carol@example.com, so there are 3 unique recipients.","solution":"def analyze_emails(n, emails): senders = set() recipients = set() for email in emails: sender_start = email.find(\'<\') + 1 sender_end = email.find(\'>\') recipient_start = email.find(\'<\', sender_end) + 1 recipient_end = email.find(\'>\', recipient_start) sender = email[sender_start:sender_end] recipient = email[recipient_start:recipient_end] senders.add(sender) recipients.add(recipient) return len(senders), len(recipients)"},{"question":"Tarzan is exploring a jungle, and he figures out that there are many vines in it which he can use to swing from one place to another. There are `N` vines in the jungle, each represented by its position on the X-axis and its length. Tarzan starts at the position 0 on the X-axis and wants to reach the position `T` using the vines. Tarzan can swing from vine to vine if the end point of his current vine lies within the reach of another vine. A vine positioned at `X` with length `L` can reach up to `X + L`. Given the position and length of each vine, determine if it is possible for Tarzan to reach the target `T`. # Input - The first line contains two integers, `N` (1 ≤ N ≤ 10^5) and `T` (1 ≤ T ≤ 10^9), where `N` is the number of vines and `T` is the target position. - The next `N` lines each contain two integers, `X` (0 ≤ X ≤ 10^9) and `L` (1 ≤ L ≤ 10^9), where `X` is the position of the vine and `L` is the length of that vine. # Output - Print \\"Yes\\" if Tarzan can reach the target position `T`, otherwise print \\"No\\". # Examples Input ``` 3 10 0 3 2 5 6 7 ``` Output ``` Yes ``` Input ``` 2 15 0 10 11 4 ``` Output ``` No ``` Input ``` 4 20 0 5 5 5 10 10 15 10 ``` Output ``` Yes ``` # Explanation In the first example, Tarzan can reach the target position 10. He starts at position 0 with a vine that can reach up to position 3. Next, he swings to the vine at position 2, which can reach up to position 7. Finally, he swings to the vine at position 6, which can reach up to position 13, covering the target position 10. In the second example, the vines do not allow Tarzan to reach the target position 15. In the third example, a sequence of vines can carry Tarzan all the way to the target position 20.","solution":"def can_reach_target(n, t, vines): vines.sort() # Sort the vines based on their positions max_reach = 0 # The farthest Tarzan can reach currently for x, l in vines: if max_reach >= t: return \\"Yes\\" if x <= max_reach: max_reach = max(max_reach, x + l) else: break return \\"Yes\\" if max_reach >= t else \\"No\\""},{"question":"Consider a game where you are given an infinite 2D grid, and each cell of the grid is initially empty. You can perform the following operations: 1. Add a token to a cell. 2. Find the minimum distance between two tokens on the grid, with distance being Manhattan distance. Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. You are given a series of operations to perform on the grid. It is guaranteed that there will be at least two tokens on the grid whenever a minimum distance query is made. INPUT The first line contains an integer n, which represents the number of operations. The next n lines contain an operation. Each operation is of one of the following types: - \\"ADD x y\\", which means add a token at cell (x, y). - \\"MIN_DIST\\", which means output the minimum Manhattan distance between any two tokens on the grid. OUTPUT For each \\"MIN_DIST\\" operation, output the minimum Manhattan distance between any two tokens currently on the grid. CONSTRAINTS 1 ≤ n ≤ 10^5 |x|, |y| ≤ 10^9 SAMPLE INPUT 5 ADD 1 2 ADD 3 4 MIN_DIST ADD 1 3 MIN_DIST SAMPLE OUTPUT 4 1","solution":"def min_manhattan_distance(tokens): Function to find the minimum Manhattan distance between any two tokens on the grid min_dist = float(\'inf\') # Calculate the distance between each pair of tokens for i in range(len(tokens)): for j in range(i + 1, len(tokens)): dist = abs(tokens[i][0] - tokens[j][0]) + abs(tokens[i][1] - tokens[j][1]) min_dist = min(min_dist, dist) return min_dist def perform_operations(operations): Function to perform the operations on the grid and return the results of MIN_DIST operations tokens = [] results = [] for op in operations: op_split = op.split() if op_split[0] == \\"ADD\\": x, y = int(op_split[1]), int(op_split[2]) tokens.append((x, y)) elif op_split[0] == \\"MIN_DIST\\": results.append(min_manhattan_distance(tokens)) return results"},{"question":"Given an nxm grid, each cell in the grid contains an integer which represents the elevation of that cell. The elevation determines the cost of walking through the cell - higher elevation means higher cost. You start at the top-left corner of the grid and need to reach the bottom-right corner. However, you can only move down or right at each step. Your goal is to find the lowest possible total cost of a path from the top-left to the bottom-right corner. Write a program to compute the minimum cost to travel from the top-left corner to the bottom-right corner. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The next n lines contain m integers each, representing the elevation values of the grid cells. Output Output a single integer, the minimum cost required to travel from the top-left to the bottom-right corner of the grid. Example Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation The minimum cost path is 1 → 3 → 1 → 1 → 1, resulting in a total cost of 7. The function must consider only downward and rightward movements which intensify the complexity of the problem by ruling out other potentially shorter paths. Make sure your code efficiently computes the result within the given constraints.","solution":"def min_path_sum(grid): Returns the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] # Helper function to take inputs and output the result def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[index])) index += 1 grid.append(row) print(min_path_sum(grid))"},{"question":"Given a string s consisting of lowercase letters, determine the number of vowels (a, e, i, o, u) present in the string. Input The input contains a single string s (1 ≤ |s| ≤ 100). Output Output a single integer representing the number of vowels in the string. Example Input hello Output 2","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the string s. vowels = set(\'aeiou\') return sum(1 for char in s if char in vowels)"},{"question":"Input The input consists of a single string, containing only the characters \'(\' and \')\'. Output Output a single digit, 0 or 1. Example Input (()) Output 1","solution":"def is_valid_parentheses_sequence(s): Checks if the string s is a valid sequence of parentheses. Args: s (str): Input string containing only \'(\' and \')\'. Returns: int: 1 if the sequence is valid, 0 otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return 0 stack.pop() return 1 if not stack else 0"},{"question":"You are given an integer array `arr` of length `n` that contains elements either 0 or 1. You need to find the length of the longest subarray that contains an equal number of 0\'s and 1\'s. A subarray is a contiguous portion of an array. The solution should be efficient and work in linear time. # Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (a_i is either 0 or 1) — the elements of the array. # Output Output a single integer — the length of the longest subarray containing equal numbers of 0\'s and 1\'s. If no such subarray exists, output 0. # Examples Input 8 0 1 0 1 0 1 1 0 Output 8 Input 5 1 0 0 1 0 Output 4 Input 4 1 1 1 1 Output 0","solution":"def longest_equal_subarray(arr): Returns the length of the longest subarray that contains an equal number of 0\'s and 1\'s. n = len(arr) prefix_sum = {} prefix_sum[0] = -1 max_length = 0 current_sum = 0 for i in range(n): if arr[i] == 1: current_sum += 1 else: current_sum -= 1 if current_sum in prefix_sum: max_length = max(max_length, i - prefix_sum[current_sum]) else: prefix_sum[current_sum] = i return max_length"},{"question":"Given an integer num, repeatedly add all its digits until the result has only one digit, and return it. This process is known as \'digital root\'. Input The input consists of a single integer num (0 ≤ num ≤ 10^9). Output Output a single integer which is the digital root of the input number. Examples Input 38 Output 2 Explanation: The process of finding the digital root of 38 can be illustrated as follows: Step 1: 3 + 8 = 11 Step 2: 1 + 1 = 2 The digital root of 38 is 2. Input 12345 Output 6 Explanation: The process of finding the digital root of 12345 can be illustrated as follows: Step 1: 1 + 2 + 3 + 4 + 5 = 15 Step 2: 1 + 5 = 6 The digital root of 12345 is 6. Input 9 Output 9 Explanation: The process of finding the digital root of 9 can be illustrated as follows: Step 1: 9 (no further steps needed as it is already one digit) The digital root of 9 is 9.","solution":"def digital_root(num): Returns the digital root of a number by repeatedly summing its digits until a single digit is obtained. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"Calculate the smallest prime number that is greater than a given integer N. Constraints * 0 leq N leq 10^6 Input Input is given from Standard Input in the following format: N Output Print the smallest prime number greater than N. Examples Input 10 Output 11 Input 29 Output 31 Input 0 Output 2","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(N): candidate = N + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Implement a function that checks if a given string is an anagram of another string. Two strings are anagrams if they contain the same characters in the same quantities. Input The input consists of a single line containing two space-separated strings, each of length at most 100. Output The output should be a single line with the word \\"YES\\" if the strings are anagrams, and \\"NO\\" otherwise. Example Input: listen silent Output: YES Input: hello world Output: NO","solution":"def are_anagrams(str1, str2): Checks if the two strings are anagrams of each other. # Remove spaces and convert strings to lowercase str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Compare sorted versions of the strings if sorted(str1) == sorted(str2): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string s consisting of lowercase English letters. You need to remove the minimum number of characters from the string so that each letter of the alphabet appears at most once in the resulting string. Input A single line contains the string s (1 ≤ |s| ≤ 100). Output Print the resulting string after removing the minimum number of characters. If there are multiple correct results, print any of them. Examples Input abacabad Output abcd Input abcdefghijklmnopqrstuvwxyz Output abcdefghijklmnopqrstuvwxyz Input zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz Output z Input hello Output helo","solution":"def remove_duplicates(s): Remove the minimum number of characters from the string so that each letter of the alphabet appears at most once. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are given a list of integers representing the daily temperatures for a week. Your task is to find the largest swing in temperatures between two consecutive days in the period. The swing is defined as the absolute difference between the temperatures of two consecutive days. Write a function that, given a list of 7 integers, each representing the temperature recorded on each day of the week, returns the maximum temperature swing between any two consecutive days. # Input A single line containing 7 space-separated integers t1, t2, ..., t7, where ti is the temperature on day i. The temperatures are given in degrees Celsius and range from -100 to 100. # Output Output a single integer representing the maximum swing in temperatures between any two consecutive days. # Examples Example 1 **Input:** ``` 23 15 10 20 25 30 16 ``` **Output:** ``` 14 ``` **Explanation:** The swings in temperatures between consecutive days are as follows: - Day 1 to Day 2: |23 - 15| = 8 - Day 2 to Day 3: |15 - 10| = 5 - Day 3 to Day 4: |10 - 20| = 10 - Day 4 to Day 5: |20 - 25| = 5 - Day 5 to Day 6: |25 - 30| = 5 - Day 6 to Day 7: |30 - 16| = 14 The maximum swing is 14. Example 2 **Input:** ``` -5 0 10 -3 8 -2 2 ``` **Output:** ``` 13 ``` **Explanation:** The swings in temperatures between consecutive days are as follows: - Day 1 to Day 2: |-5 - 0| = 5 - Day 2 to Day 3: |0 - 10| = 10 - Day 3 to Day 4: |10 - (-3)| = 13 - Day 4 to Day 5: |-3 - 8| = 11 - Day 5 to Day 6: |8 - (-2)| = 10 - Day 6 to Day 7: |-2 - 2| = 4 The maximum swing is 13. # Constraints - The length of the list will always be 7. - Temperatures will be in the range from -100 to 100 inclusive.","solution":"def maximum_temperature_swing(temperatures): Given a list of 7 integers representing the daily temperatures for a week, returns the highest absolute difference between two consecutive days. max_swing = 0 for i in range(1, len(temperatures)): swing = abs(temperatures[i] - temperatures[i-1]) if swing > max_swing: max_swing = swing return max_swing"},{"question":"Write a function that returns the longest substring of distinct consecutive characters from a given input string. The input string will contain only lowercase English letters. INPUT: - T test cases. - The next T lines each consist of a string \'s\'. OUTPUT: - For each test case, output the longest substring with all distinct characters. CONSTRAINTS: 1 <= T <= 10 1 <= |s| <= 10^5 Example: if the input string is \\"ababcdefg\\", the longest substring with distinct characters is \\"abcdefg\\". SAMPLE INPUT 2 abcabcbb bbbbb SAMPLE OUTPUT abc b","solution":"def longest_distinct_substring(s): Returns the longest substring with all distinct characters for the given input string. max_len = 0 start = 0 longest_sub = \\"\\" seen = {} for end, char in enumerate(s): if char in seen and seen[char] >= start: start = seen[char] + 1 seen[char] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len longest_sub = s[start:end+1] return longest_sub"},{"question":"You are given a string s containing lower-case Latin letters. You can perform the following operation on the string any number of times: * Select a non-empty substring of s and reverse it. Your task is to determine the number of distinct strings that can be obtained after any number of such operations. Input The first line contains a single string s (1 ≤ |s| ≤ 1000). Output Print a single integer — the number of distinct strings that can be obtained. Examples Input abcd Output 1 Input aab Output 2 Note In the first example, all substrings are distinct and reversing them will still leave the string intact due to its increasing order, thus resulting in only one possible string. In the second example, the possible distinct strings after any number of operations are \\"aab\\" and \\"baa\\".","solution":"def distinct_strings(s): Returns the number of distinct strings that can be obtained after any number of reversals of substrings in the given string s. return len(set(s))"},{"question":"Mika is a member of a hiking group that keeps track of the difficulty of trails using a scoring system. Trails are classified based on their difficulty score D as follows: * From 0 through 199: Beginner * From 200 through 499: Intermediate * From 500 through 799: Advanced * From 800 through 1000: Expert Given the difficulty score of a trail, determine its difficulty classification. Constraints * 0 leq D leq 1000 * D is an integer. Input Input is given from Standard Input in the following format: D Output Print the difficulty classification of the trail. For example, if the trail is Beginner, print `Beginner`. Examples Input 350 Output Intermediate Input 800 Output Expert","solution":"def classify_trail(difficulty_score): Classify a trail based on its difficulty score. Parameters: difficulty_score (int): The difficulty score of the trail. Returns: str: The difficulty classification. if 0 <= difficulty_score <= 199: return \\"Beginner\\" elif 200 <= difficulty_score <= 499: return \\"Intermediate\\" elif 500 <= difficulty_score <= 799: return \\"Advanced\\" elif 800 <= difficulty_score <= 1000: return \\"Expert\\" else: return \\"Invalid score\\""},{"question":"In a small town, a local STEM club is organizing a \\"robot relay race\\" involving n robots. Each robot has its own speed and battery capacity. The race requires robots to pass a relay baton, and the aim is to minimize the total time taken for the baton to reach the end. The race proceeds as follows: 1. The first robot starts with the baton and runs until its battery is depleted or it passes the baton to the next robot. 2. Each robot upon receiving the baton can only run if its battery level is sufficient. If not, it passes the baton to the next robot. 3. A robot with sufficient battery will deplete its battery while moving before its turn ends. 4. The goal is to calculate the minimum time for the baton to reach the end using the robots in optimal order. Your task is to determine the order in which the robots should run to minimize the total relay time. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of robots. The next n lines each contain two integers s_i (1 ≤ s_i ≤ 100) and b_i (1 ≤ b_i ≤ 1000) — the speed (meters per second) and battery capacity (in seconds) of each robot respectively. Output A single integer — the minimum time in seconds for the baton to reach the end, and the order of the robots to achieve this minimal time. Examples Input 4 5 100 3 200 2 300 4 150 Output Given the means to run the baton in minimum time. 120 (Time in seconds) 1 4 2 3 (Order of robots) Note: In the example given, the best way to minimize the relay time is for the robots to race in the order 1, 4, 2, 3. Calculations based on their speed and battery life yield the optimal minimum relay time of 120 seconds.","solution":"def min_relay_time(n, robots): # Sort robots primarily by the ratio of battery capacity to speed in descending order robots_sorted = sorted(robots, key=lambda x: x[1]/x[0], reverse=True) total_time = sum(robot[1] for robot in robots_sorted) # Sum of battery capacities, because every robot runs till depletion order = [i+1 for i in range(n)] # Original order should be used since we already sorted them return total_time, order"},{"question":"Bob loves to play board games. He recently invented a new board game that involves rolling a custom die and moving pieces on a game board. The custom die has the numbers 1 through 6 printed on it, and Bob needs help determining the shortest series of die rolls that will allow him to reach the final square of the game board. Bob\'s game board is a one-dimensional grid of N squares, numbered 1 through N. He starts on square 1 and needs to reach square N. On each turn, Bob can roll the die and move forward the number of squares shown on the die. Determine the minimum number of die rolls Bob needs to reach square N from square 1. Input The first line of the input contains an integer N (1 leq N leq 1000000) — the number of squares on the game board. Output Print the minimum number of die rolls Bob needs to reach square N. Examples Input 10 Output 2 Input 7 Output 2 Note In the first sample, Bob can make the following two rolls to reach square 10: first roll a 6 to move from square 1 to square 7, then roll a 3 to move from square 7 to square 10. In the second sample, Bob can roll a 6 on the first turn to move from square 1 to square 7. On the second turn, Bob needs just one more move of value 1 to reach square 7.","solution":"def min_die_rolls(N): Returns the minimum number of die rolls needed to reach square N from square 1. # The maximum number on the die is 6. die_max = 6 # If N is less than or equal to the maximum number on the die, # Bob only needs one roll to reach N. if N <= die_max: return 1 # Calculate the minimum number of rolls needed to reach N. # We need at least (N // 6) full rolls, and might need an extra roll if there\'s a remainder. full_rolls = N // die_max remainder = N % die_max if remainder == 0: return full_rolls else: return full_rolls + 1"},{"question":"Python: LRU Cache Problem Statement You are tasked with implementing a Least Recently Used (LRU) cache. An LRU cache is a data structure that allows for fast retrieval of data while maintaining a limit on the number of elements stored. When the limit is reached, the least recently accessed elements are removed to make space for new ones. Your implementation should support the following operations: - `get(key)`: Retrieve the value associated with the given `key`. If the `key` does not exist in the cache, return `-1`. This operation should also mark the element as recently used. - `put(key, value)`: Insert or update the `key` with the given `value`. If the cache exceeds its capacity after the operation, remove the least recently used element. # Input 1. An integer `capacity` representing the maximum number of elements that can be stored in the cache. 2. An array of operations where each operation is either `\\"get key\\"` or `\\"put key value\\"`. # Output An array of integers where each element corresponds to the result of a `get` operation in the order they were encountered. # Example ```python capacity = 2 operations = [ \\"put 1 1\\", \\"put 2 2\\", \\"get 1\\", \\"put 3 3\\", \\"get 2\\", \\"put 4 4\\", \\"get 1\\", \\"get 3\\", \\"get 4\\" ] result = lru_cache(capacity, operations) print(result) # Output: [1, -1, -1, 3, 4] ``` # Constraints - The cache capacity is a positive integer and does not exceed (10^5). - The number of operations does not exceed (10^5). - The `key` and `value` are non-negative integers and do not exceed (10^9). # Detailed Description Implement a class `LRUCache` with the following methods: - `__init__(self, capacity: int)`: Initialize the cache with the given capacity. - `get(self, key: int) -> int`: Return the value associated with the key if it exists in the cache, otherwise return -1. - `put(self, key: int, value: int) -> None`: Insert or update the key-value pair in the cache. After implementing the class, write a function `lru_cache` that takes `capacity` and `operations` as inputs, initializes an `LRUCache` object, processes the operations, and returns a list of results from `get` operations. # Skeleton Code ```python class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with a given capacity. pass def get(self, key: int) -> int: Get the value (will always be positive) of the key if the key exists in the cache. Otherwise, return -1. pass def put(self, key: int, value: int) -> None: Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. pass def lru_cache(capacity: int, operations: List[str]) -> List[int]: result = [] cache = LRUCache(capacity) for operation in operations: parts = operation.split() if parts[0] == \\"get\\": key = int(parts[1]) result.append(cache.get(key)) elif parts[0] == \\"put\\": key = int(parts[1]) value = int(parts[2]) cache.put(key, value) return result ``` Implement the `LRUCache` class methods and the `lru_cache` function to solve the problem.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with a given capacity. self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: Get the value (will always be positive) of the key if the key exists in the cache. Otherwise, return -1. if key in self.cache: self.cache.move_to_end(key) return self.cache[key] return -1 def put(self, key: int, value: int) -> None: Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) def lru_cache(capacity: int, operations: list) -> list: result = [] cache = LRUCache(capacity) for operation in operations: parts = operation.split() if parts[0] == \\"get\\": key = int(parts[1]) result.append(cache.get(key)) elif parts[0] == \\"put\\": key = int(parts[1]) value = int(parts[2]) cache.put(key, value) return result"},{"question":"POINTS - 30 Write a program that will reverse the words in a given sentence while maintaining the original order of spaces. Input The program will first read an integer T, the number of test cases. Each test case is a single line containing a sentence S. Output For each test case, output the sentence with the words reversed but maintaining the original order of spaces. Constraints 1<=T<=100 1<=len(S)<=1000 Example Input: 2 Hello World This is a test Output: olleH dlroW sihT si a tset","solution":"def reverse_words_with_spaces(sentence): Reverses the words in the sentence while maintaining the order of spaces. words = sentence.split() reversed_words = [word[::-1] for word in words] # Generate a list with True for letters and False for spaces is_alpha = [char.isalpha() for char in sentence] reversed_sentence = [] word_counter = 0 for is_letter in is_alpha: if is_letter: reversed_sentence.append(reversed_words[word_counter][0]) reversed_words[word_counter] = reversed_words[word_counter][1:] if not reversed_words[word_counter]: word_counter += 1 else: reversed_sentence.append(\' \') return \'\'.join(reversed_sentence) def reverse_sentences(sentences): Takes a list of sentences and returns a list with reversed words. return [reverse_words_with_spaces(sentence) for sentence in sentences]"},{"question":"In a neighboring kingdom, a similar game \\"Hexalands\\" is gaining popularity. In Hexalands, the playing area consists of hexagonal cells just like in \\"Civilization XIII\\". However, the kingdom has a more elaborate system of movement for its units. In Hexalands, there’s a special unit called a \\"Knight\\". The knight can move exactly 2 cells in any direction along the straight lines formed by the sides of the hexagons. Essentially, the knight moves to any cell that is exactly 2 steps away in a line. Given the knight\'s movement ability, the game developers are interested in knowing the number of unique cells the knight can reach from its current position. The problem is to determine how many unique cells a knight can move to from its starting cell, taking into consideration that the playing field is infinite. Input The first and only line of input contains a single positive integer k — the number of steps a knight must take in straight lines from its initial position (1 ≤ k ≤ 106). Output Print the single number, the number of unique cells that the knight can reach. Examples Input 2 Output 6 Input 3 Output 18 Input 4 Output 30","solution":"def hexalands_knight_moves(k): Returns the number of unique cells a knight can reach from its starting position after k steps in straight lines in the hexagonal grid. if k < 1: return 0 return 6 * k"},{"question":"Sharon is participating in a treasure hunt competition. The treasure is hidden in one of the rooms in a straight line, numbered from 1 to n. Sharon has a device that can scan a segment of consecutive rooms and tell her if the treasure is in that segment. Unfortunately, the device can malfunction occasionally and give a false reading. If the treasure is in the segment being scanned, the device will always report its presence correctly. However, if the treasure is not in the segment, the device might randomly indicate a false presence with a certain probability. Sharon can use the device to scan a segment any number of times to minimize the risk of ending up in a segment without the treasure. Help Sharon implement a strategy to guarantee finding the treasure with a minimal number of scans. Input The input consists of two integers: - n (1 ≤ n ≤ 10^9), the number of rooms. - p (0 ≤ p ≤ 1), the probability of a false positive when the treasure is not in the segment. Output Output the minimum number of scans required to locate the treasure with certainty. Examples Input 10 0.1 Output 4 Input 5 0.2 Output 3 Note In the first example, one effective strategy is to scan the rooms in segments of size 3 or 4, adjusting based on the results to minimize rescanning. Given the probability of false positives is only 0.1, calculating the scans to guarantee finding the treasure while considering potential false readings suggests an optimal pattern to reduce the number of required scans. In the second example, considering the 0.2 probability of false positives, scanning in segments of size 2 or 3 can help Sharon systematically eliminate false segments and zero in on the treasure location.","solution":"import math def min_scans(n, p): Returns the minimum number of scans required to locate the treasure with certainty given n rooms and probability p of false positive. if p == 0: return 1 # If there\'s no chance of false positive, only one scan is needed. # Calculate the size of each segment to be scanned # A good rule of thumb here is to halve the search space iteratively. segment_size = math.ceil(math.log(n, 2)) # Calculate the minimum number of scans num_scans = segment_size if p != 1 else n return num_scans"},{"question":"Given a list of N integers, your task is to find all the unique pairs of integers that sum up to a given target value X. Each pair should be printed in ascending order. Input: The first line contains two integers N and X. The next line contains N integers separated by spaces. Output: Print all unique pairs in separate lines in the format (a, b) where a < b. If no such pair exists, print \\"No pairs found\\". Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ integers in the list ≤ 10^9 -10^9 ≤ X ≤ 10^9 SAMPLE INPUT 10 10 3 4 5 6 7 8 9 10 10 11 SAMPLE OUTPUT (3, 7) (4, 6)","solution":"def find_pairs_with_sum(arr, target): Returns all unique pairs of integers in the list that sum up to the given target value. Each pair is sorted in ascending order. seen = set() pairs = set() for number in arr: needed = target - number if needed in seen: pairs.add((min(number, needed), max(number, needed))) seen.add(number) if pairs: return sorted(pairs) else: return \\"No pairs found\\" def format_pairs(pairs): Formats the pairs for printing. if pairs == \\"No pairs found\\": print(\\"No pairs found\\") else: for a, b in pairs: print(f\\"({a}, {b})\\")"},{"question":"Rescue Mission A group of researchers is stranded on an island after a hurricane. Given the current weather conditions, there is only a limited period each day when the weather is suitable for flying helicopters to rescue them. Moreover, the helicopters have a limited fuel capacity, so they have to refuel at specific refueling stations along their route. Your mission is to determine the shortest time to rescue the researchers by planning the route considering the flying time, refueling stops, and the suitable weather window each day. Input The input consists of multiple datasets. The first line of each dataset contains six non-negative integers N (2 ≤ N ≤ 100), M (1 ≤ M ≤ 100), R (0 ≤ R ≤ N-2), K, S (0 ≤ S < N), and D (0 ≤ D < N). These represent the number of islands, the daily suitable flying window in minutes, the number of islands with refueling stations, the number of direct flight paths between islands, the starting island number, and the destination island number where the researchers are stranded. The starting and destination islands are different. Each island is assigned a number from 0 to N-1. The following line contains R non-negative integers separated by a single space, which represent the numbers of the islands with refueling stations. The starting and destination islands are not included in this list, but they have refueling facilities. The next K lines each contain three non-negative integers X, Y, and T, indicating that there is a direct flight path between island X and island Y and it takes T minutes to fly. The flight paths are bidirectional, and there is at most one direct flight path between any two islands. The input ends when N = M = R = K = S = D = 0, which is not part of the dataset. Output For each dataset, output the shortest time to rescue the researchers while complying with all constraints. If it is not possible to rescue them, output \\"Rescue Failed!\\". Sample Input 3 1 1 3 0 2 1 0 1 1 1 2 1 0 2 2 4 3 1 4 1 3 2 0 1 2 1 2 1 2 3 2 0 3 3 5 2 2 6 0 4 2 3 0 1 4 1 2 3 2 3 2 3 4 1 0 4 5 1 4 2 0 0 0 0 0 0 Sample Output 2 3 Rescue Failed! Explanation In the first dataset, researchers can be rescued by flying from island 0 to 1 and then from 1 to 2. The total time is 2 minutes. In the second dataset, the shortest route is from island 1 to 2, then to 3, taking a total of 3 minutes. In the third dataset, it is not possible to rescue the researchers within the given constraints, so the output is \\"Rescue Failed!\\".","solution":"import heapq def rescue_mission(N, M, R, K, S, D, refueling_islands, flights): # Create a graph to represent the flight paths graph = {i: [] for i in range(N)} for x, y, t in flights: graph[x].append((y, t)) graph[y].append((x, t)) # Implement Dijkstra\'s algorithm with refueling constraints def dijkstra(start, refuels): pq = [(0, start, M)] # (time, island, remaining fuel) dist = {(i, j): float(\'inf\') for i in range(N) for j in range(M + 1)} dist[(start, M)] = 0 while pq: time, node, fuel = heapq.heappop(pq) if node == D: return time if dist[(node, fuel)] < time: continue # If enough fuel, try moving to all connected nodes for neighbor, t in graph[node]: if fuel >= t: new_fuel = fuel - t new_time = time + t if new_time < dist[(neighbor, new_fuel)]: dist[(neighbor, new_fuel)] = new_time heapq.heappush(pq, (new_time, neighbor, new_fuel)) # Try refueling at the current node if it has a refueling station if node in refuels and fuel < M: if time < dist[(node, M)]: dist[(node, M)] = time heapq.heappush(pq, (time, node, M)) return -1 # Not reachable refuels = set(refueling_islands) result = dijkstra(S, refuels) if result == -1: return \\"Rescue Failed!\\" else: return result def handle_input_output(data): results = [] for dataset in data: N, M, R, K, S, D, refueling_islands, flights = dataset if N == 0 and M == 0 and R == 0 and K == 0 and S == 0 and D == 0: break result = rescue_mission(N, M, R, K, S, D, refueling_islands, flights) results.append(result) return results data = [ (3, 1, 1, 3, 0, 2, [1], [(0, 1, 1), (1, 2, 1), (0, 2, 2)]), (4, 3, 1, 4, 1, 3, [2], [(0, 1, 2), (1, 2, 1), (2, 3, 2), (0, 3, 3)]), (5, 2, 2, 6, 0, 4, [2, 3], [(0, 1, 4), (1, 2, 3), (2, 3, 2), (3, 4, 1), (0, 4, 5), (1, 4, 2)]), (0, 0, 0, 0, 0, 0, [], []) ] print(handle_input_output(data))"},{"question":"You have been hired to develop a software system for a library to manage its book collection and member transactions. The library wants to maintain a log of books borrowed and returned by its members. Your task is to design a system that can handle the following queries: 1. **Add Book**: Add a new book to the collection with a unique book ID and a title. 2. **Borrow Book**: Record that a member has borrowed a book. 3. **Return Book**: Record that a member has returned a book they borrowed. 4. **List Borrowed Books**: List down all the books currently borrowed by a member. 5. **List Books**: List down all the books currently in the library\'s collection. The system should be able to handle the following queries: - **ADD book_id title**: Add a book with the given book ID and title to the collection. The `book_id` is a unique identifier for each book, and `title` is a string representing the title of the book. - **BORROW member_id book_id**: Record that the member with `member_id` has borrowed the book with `book_id`. Assume a member can only borrow a book if it is currently available. - **RETURN member_id book_id**: Record that the member with `member_id` has returned the book with `book_id`. Assume a member can only return a book they have borrowed. - **LIST_BORROWED member_id**: Output all the books currently borrowed by the member with `member_id`, listed by their book IDs in ascending order. - **LIST_BOOKS**: Output all the books currently in the library\'s collection, listed by their book IDs in ascending order. Your task is to implement a function that processes a list of queries and returns the appropriate responses. Input The input is given in the following format: N QUERY_1 QUERY_2 ... QUERY_N The first line contains the number of queries N (1 ≤ N ≤ 100,000). Each of the following N lines contains one of the queries described above. Output For each **LIST_BORROWED** and **LIST_BOOKS** query, output the list of book IDs in ascending order. Example Input 8 ADD 101 Introduction_to_Data_Structures ADD 102 Networks_and_Communication BORROW 1 101 LIST_BORROWED 1 RETURN 1 101 LIST_BORROWED 1 LIST_BOOKS BORROW 2 102 Output 101 [] 101 102","solution":"class LibrarySystem: def __init__(self): self.books = {} self.borrowed_books = {} self.member_books = {} def add_book(self, book_id, title): self.books[book_id] = title def borrow_book(self, member_id, book_id): if book_id in self.books and book_id not in self.borrowed_books: self.borrowed_books[book_id] = member_id if member_id not in self.member_books: self.member_books[member_id] = [] self.member_books[member_id].append(book_id) def return_book(self, member_id, book_id): if book_id in self.borrowed_books and self.borrowed_books[book_id] == member_id: self.member_books[member_id].remove(book_id) del self.borrowed_books[book_id] def list_borrowed_books(self, member_id): return sorted(self.member_books.get(member_id, [])) def list_books(self): return sorted(self.books.keys()) def process_queries(N, queries): library = LibrarySystem() output = [] for query in queries: query = query.split(maxsplit=2) command = query[0] if command == \\"ADD\\": book_id = int(query[1]) title = query[2] library.add_book(book_id, title) elif command == \\"BORROW\\": member_id = int(query[1]) book_id = int(query[2]) library.borrow_book(member_id, book_id) elif command == \\"RETURN\\": member_id = int(query[1]) book_id = int(query[2]) library.return_book(member_id, book_id) elif command == \\"LIST_BORROWED\\": member_id = int(query[1]) output.append(\\" \\".join(map(str, library.list_borrowed_books(member_id)))) elif command == \\"LIST_BOOKS\\": output.append(\\" \\".join(map(str, library.list_books()))) return output"},{"question":"Given a string consisting of only ASCII uppercase letters, your task is to find the length of the longest contiguous substring which contains at most two distinct characters. Input The input consists of a single string S, where 1 ≤ length of S ≤ 100000. Output Output a single integer, which is the length of the longest contiguous substring that contains at most two distinct characters. Example Input ABACCC Output 4 Explanation The longest contiguous substring that contains at most two distinct characters is \\"ACCC\\" which has a length of 4. Input AAAAA Output 5 Explanation The entire string is a valid substring that contains only one distinct character, so the output is 5. Input ABCABCABC Output 2 Explanation The longest contiguous substrings that contain at most two distinct characters are \\"AB\\", \\"BC\\", \\"CA\\", \\"AB\\", \\"BC\\", and \\"CA\\", each of which has a length of 2.","solution":"def longest_substring_with_two_distinct_chars(S): Returns the length of the longest contiguous substring which contains at most two distinct characters. if not S: return 0 max_len = 0 left = 0 char_map = {} for right in range(len(S)): if S[right] not in char_map: char_map[S[right]] = 0 char_map[S[right]] += 1 while len(char_map) > 2: char_map[S[left]] -= 1 if char_map[S[left]] == 0: del char_map[S[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given an array of integers, return an array that contains indices of two elements such that they add up to a specific target. You may assume that each input has exactly one solution, and you may not use the same element twice. Input The first line contains two integers n and target — the number of elements in the array and the target sum (2 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9). The second line contains n integers ai (|ai| ≤ 10^9). Output Print two integers corresponding to the indices of the elements that add up to the target. The indices should be 0-based and printed in ascending order. Examples Input 4 9 2 7 11 15 Output 0 1 Input 3 6 3 2 4 Output 1 2 Input 5 0 3 4 -3 90 -90 Output 0 2 Note In the first sample, the elements at indices 0 and 1 (i.e., 2 and 7) add up to the target 9. In the second sample, the elements at indices 1 and 2 (i.e., 2 and 4) add up to the target 6. In the third sample, the elements at indices 0 and 2 (i.e., 3 and -3) add up to the target 0.","solution":"def find_two_sum_indices(arr, target): Returns the indices of two elements in arr that add up to the target sum. The indices are returned in ascending order. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i # Example usage: # arr = [2, 7, 11, 15] # target = 9 # print(find_two_sum_indices(arr, target)) # Output: [0, 1]"},{"question":"You are given a string s. You can choose to perform a single operation on it any number of times. In one operation, you can: 1. Swap any two adjacent characters in the string. Your goal is to find the minimum number of operations required to transform the string s into another string t of the same length. Print the minimum number of operations required, or if it is impossible to transform s into t, print -1. Input The input consists of two lines: 1. The first line contains the string s (1 ≤ length of s ≤ 100), which consists only of lowercase Latin letters. 2. The second line contains the string t (1 ≤ length of t ≤ 100), which also consists only of lowercase Latin letters and is of the same length as the string s. Output Print one integer — the minimum number of operations required to transform s into t, or -1 if it is impossible. Examples Input ab ba Output 1 Input abc acb Output 1 Input aab bba Output -1 Input abcdef fedcba Output 5","solution":"def min_operations_to_transform(s, t): Returns the minimum number of operations required to transform string s into string t by swapping any two adjacent characters any number of times. If it is impossible, returns -1. if sorted(s) != sorted(t): return -1 # Initialize the operations count operations = 0 # Convert the strings to lists for convenience s_list = list(s) t_list = list(t) # Process each character of t to match s for i in range(len(t_list)): if s_list[i] != t_list[i]: # Find the next occurrence of t_list[i] in the remaining part of s_list for j in range(i + 1, len(s_list)): if s_list[j] == t_list[i]: # Count the number of swaps needed to bring s_list[j] to s_list[i] for k in range(j, i, -1): # Swap adjacent elements s_list[k], s_list[k - 1] = s_list[k - 1], s_list[k] operations += 1 break return operations"},{"question":"[Victor has been working with street sign manufacturing, and he discovered a new, efficiency-boosting way to cut rectangular signboards from large rectangular panels of wood. He wants to determine if a given signboard can be cut from a panel in such a way that the signboard is oriented parallel to the edges of the panel. Given the dimensions of the panel and signboard, help Victor determine if the signboard can be cut from the panel. Input: The first line contains two space-separated integers W and H, which are the width and height of the panel respectively. The second line contains two space-separated integers w and h, which are the width and height of the signboard respectively. Output: Output a single line containing \\"YES\\" if the signboard can be cut from the panel, otherwise \\"NO\\". Constraints: 1 ≤ W, H, w, h ≤ 1,000,000,000 (10^ 9 ) Example Input: 10 15 3 5 Output: YES Explanation The panel has a width of 10 units and height of 15 units. The signboard has a width of 3 units and height of 5 units. Since 3 ≤ 10 and 5 ≤ 15, the signboard can be cut from the panel. Thus, the output is \\"YES\\".","solution":"def can_cut_signboard(W, H, w, h): Determines if a signboard of width w and height h can be cut from a panel of width W and height H. Parameters: W (int): Width of the panel. H (int): Height of the panel. w (int): Width of the signboard. h (int): Height of the signboard. Returns: str: \\"YES\\" if the signboard can be cut from the panel, otherwise \\"NO\\". if (w <= W and h <= H) or (h <= W and w <= H): return \\"YES\\" return \\"NO\\""},{"question":"Ravi has been working on a challenging puzzle. He is given two lists of numbers and needs to make them identical by performing a specific operation at most k times. The operation allows him to choose two indices from either of the lists and swap their elements. Given the constraints below, help Ravi determine if he can make the two lists identical after performing the allowed number of operations. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. For each test case: - The first line contains two integers n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 5000), the length of the lists and the maximum number of allowed operations, respectively. - The second line contains n integers a_i (1 ≤ a_i ≤ 10^6), representing the elements of the first list. - The third line contains n integers b_i (1 ≤ b_i ≤ 10^6), representing the elements of the second list. Output For each test case, print \\"Yes\\" if Ravi can make the two lists identical with at most k operations, and \\"No\\" otherwise. Examples Input 3 4 2 1 3 5 7 3 5 1 7 5 3 10 20 30 40 50 40 30 20 50 10 3 0 2 4 6 2 4 6 Output Yes Yes Yes Explanation In the first test case, Ravi can swap elements at indices 1 and 3 in list a or list b to make both lists identical. In the second test case, Ravi can achieve identical lists by swapping elements between indices 1 and 4, 2 and 3, and 3 and 1. In the third test case, both lists are already identical, so no operations are needed.","solution":"def can_make_identical(n, k, a, b): Determines if the two lists a and b can be made identical with at most k swaps. # If both lists already identical no swaps needed if a == b: return \\"Yes\\" # Count the number of misplaced elements mismatch_count = sum([1 for i in range(n) if a[i] != b[i]]) # Since each swap can fix two misplaced elements, we can check if twice the number of swaps (k) # is at least the number of mismatched pairs if k >= mismatch_count / 2: return \\"Yes\\" else: return \\"No\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, k, a, b = case result = can_make_identical(n, k, a, b) results.append(result) return results"},{"question":"Given two strings, `s1` and `s2`, determine whether `s1` is a subsequence of `s2`. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function `isSubsequence(s1, s2)` that returns `True` if `s1` is a subsequence of `s2`, and `False` otherwise. # Function Signature ```python def isSubsequence(s1: str, s2: str) -> bool: ``` # Input - The first line contains a single integer `T`, the number of test cases. - The next `2*T` lines contain pairs of strings `s1` and `s2` respectively. # Output - For each pair of strings, output a single line containing \\"True\\" if `s1` is a subsequence of `s2`, otherwise \\"False\\". # Constraints - 1 ≤ T ≤ 100 - 1 ≤ |s1|, |s2| ≤ 10^5 - All strings consist of lowercase English letters. # Example Input ``` 3 abc ahbgdc axc ahbgdc ace abcde ``` Output ``` True False True ``` Explanation - Test 1: `s1 = \\"abc\\"` is a subsequence of `s2 = \\"ahbgdc\\"` because by deleting \'h\', \'b\', \'g\', and \'d\', we get \\"abc\\". - Test 2: `s1 = \\"axc\\"` is not a subsequence of `s2 = \\"ahbgdc\\"` because \'x\' is not in `s2`. - Test 3: `s1 = \\"ace\\"` is a subsequence of `s2 = \\"abcde\\"` because by deleting \'b\' and \'d\', we get \\"ace\\".","solution":"def isSubsequence(s1, s2): Determines if s1 is a subsequence of s2. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s1 is a subsequence of s2, False otherwise. it = iter(s2) return all(char in it for char in s1)"},{"question":"A company is planning to provide bonuses to its employees based on their performance ratings. The company has n employees, each identified by their unique ID from 1 to n. The performance rating of each employee is given in an array ratings where ratings[i] is the rating of the employee with ID i+1. The company has the following rules for distributing bonuses: 1. Each employee must receive at least one unit of bonus. 2. Any employee with a higher rating than an adjacent employee must receive more bonuses than the adjacent employee. Your task is to determine the minimum number of bonus units the company needs to distribute to satisfy the above conditions. Input The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of employees. The second line contains n integers, ratings[1], ratings[2], ..., ratings[n] (1 ≤ ratings[i] ≤ 10^5), where ratings[i] is the performance rating of the employee with ID i+1. Output Print one integer – the minimum number of bonus units the company needs to distribute. Examples Input 5 1 0 2 Output 5 Input 3 1 2 2 Output 4 Note In the first example, the bonuses distributed can be [2, 1, 2] which sums up to 5. In the second example, the bonuses distributed can be [1, 2, 1] which sums up to 4.","solution":"def minimum_bonuses(n, ratings): if n == 1: return 1 bonuses = [1] * n # Left to right pass for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Right to left pass for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"You are given a list of words. A word is considered an anagram of another if you can rearrange its letters to produce the other word. Given the list of words, you need to find the length of the longest list of anagrams in it. Input The input contains multiple lines. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of words in the list. Each of the next n lines contains a word consisting of lowercase English letters. The length of each word is between 1 and 100. Output Print a single integer — the length of the longest list of anagrams. Examples Input 6 listen silent enlist google gooegl inlets Output 4 Input 5 cat dog god act tac Output 3","solution":"def longest_anagram_list(words): from collections import defaultdict anagram_groups = defaultdict(int) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word] += 1 return max(anagram_groups.values()) # Example usage: # words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"inlets\\"] # print(longest_anagram_list(words)) # Output: 4"},{"question":"A lab assistant is tasked with analyzing DNA sequences for research purposes. They need to compare two DNA sequences and determine the minimum number of operations required to transform one sequence into the other. The allowed operations are: 1. Insertion of a single character. 2. Deletion of a single character. 3. Substitution of a single character. Given two DNA sequences, help the lab assistant calculate the minimum number of operations required to transform the first sequence into the second one. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains a string a (1 ≤ |a| ≤ 100) — the first DNA sequence. The second line contains a string b (1 ≤ |b| ≤ 100) — the second DNA sequence. Both strings consist only of characters \'A\', \'C\', \'G\', and \'T\'. Output For each test case, output a single integer — the minimum number of operations required to transform the first sequence into the second one. Examples Input 2 AGCT GACT AACCTG CC Output 2 4 Explanation In the first sample, the optimal way to transform \\"AGCT\\" to \\"GACT\\" is: 1. Substitute \'A\' with \'G\' (AGCT -> GGCT). 2. Substitute \'G\' with \'A\' (GGCT -> GACT). In the second sample, the optimal way to transform \\"AACCTG\\" to \\"CC\\" is: 1. Delete \'A\' (AACCTG -> ACCTG). 2. Delete \'A\' (ACCTG -> CCTG). 3. Delete \'T\' (CCTG -> CCG). 4. Delete \'G\' (CCG -> CC).","solution":"def min_operations(a, b): Returns the minimum number of operations required to transform sequence a into sequence b. m = len(a) n = len(b) # Create a table to store results of subproblems dp = [[0 for j in range(n + 1)] for i in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, the only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore last character and recur for remaining string elif a[i-1] == b[j-1]: dp[i][j] = dp[i-1][j-1] # If last character are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def transform_sequences(t, cases): results = [] for i in range(t): a, b = cases[i] results.append(min_operations(a, b)) return results"},{"question":"Find the Longest Common Subsequence (LCS) between two strings. The LCS is defined as the longest sequence that appears in both strings in the same relative order but not necessarily contiguously. Given two sequences, write a program to find the length of the longest subsequence present in both of them. Input Format: - The first line contains an integer T - the number of test cases. - Each of the next T pairs of lines contain two strings, `X` and `Y`. Output Format: - For each test case, output a single integer - the length of the LCS for the given pair of strings. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ |X|, |Y| ≤ 1000 (where |X| denotes the length of string X) Sample Input: ``` 2 abcde ace abc ac ``` Sample Output: ``` 3 2 ``` Explanation: For the first test case, the longest common subsequence is \\"ace\\" which has length 3. For the second test case, the LCS is \\"ac\\" which has length 2.","solution":"def lcs_length(X, Y): Returns the length of the longest common subsequence between X and Y. m = len(X) n = len(Y) # Create a 2D array to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Build dp array from bottom up for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_input_output(inputs): T = int(inputs[0]) index = 1 results = [] for _ in range(T): X = inputs[index] Y = inputs[index + 1] results.append(lcs_length(X, Y)) index += 2 return results"},{"question":"A digital lock consists of a keypad with the digits 0 through 9. The lock can be opened by entering a sequence of N digits, where each digit can be pressed multiple times. Write a program to determine the number of possible sequences that can be formed by pressing the keys such that the sequence is lexicographically sorted. Since the result can be very large, return the result modulo 1,000,000,007. Input The input consists of multiple datasets. Each dataset consists of a single integer N (1 ≤ N ≤ 1,000,000), representing the length of the sequence. The end of input is indicated by a line with the integer 0. Output For each dataset, output the number of valid sequences modulo 1,000,000,007. Example: Input: 1 2 3 0 Output: 10 55 220","solution":"MOD = 1_000_000_007 def count_lexicographic_sequences(N): Returns the number of lexicographically sorted sequences of length N. if N == 0: return 0 dp = [[0] * 10 for _ in range(N + 1)] for i in range(10): dp[1][i] = 1 for length in range(2, N + 1): for digit in range(10): dp[length][digit] = sum(dp[length - 1][digit:10]) % MOD return sum(dp[N]) % MOD def process_input(data): output = [] for N in data: if N == 0: break result = count_lexicographic_sequences(N) output.append(result) return output"},{"question":"The Prime Palindrome Puzzle A palindrome is a string that reads the same forward and backward. A prime number is a natural number greater than 1 that is not divisible by any numbers other than 1 and itself. The task is to find the smallest prime number greater than or equal to a given integer N, which is also a palindrome. Input: A single integer N (1 ≤ N ≤ 100000). Output: A single integer which is the smallest prime palindrome greater than or equal to N. Example: Input 31 Output 101 Explanation: 101 is the smallest prime number greater than or equal to 31 that is also a palindrome. Some other prime palindromes less than 101 are: 2, 3, 5, 7, 11, etc., but they are all smaller than 31.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_palindrome(num): return str(num) == str(num)[::-1] def smallest_prime_palindrome(N): num = N while True: if is_palindrome(num) and is_prime(num): return num num += 1"},{"question":"You are given a directed acyclic graph (DAG) with n vertices and m edges. A directed acyclic graph is a directed graph with no directed cycles. Your task is to find the longest path in the given DAG. The length of the path is the number of edges in the path. Input The first line contains two space-separated integers, n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of vertices and the number of edges in the DAG, respectively. The next m lines contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a directed edge from vertex u to vertex v. There are no multiple edges between any pair of vertices, and the graph does not contain self-loops. Output Print a single integer — the length of the longest path in the DAG. Examples Input 5 4 1 2 1 3 3 4 2 4 Output 2 Input 6 6 1 2 1 3 3 4 4 5 2 5 5 6 Output 4 Note In the first sample, the longest path is either 1 → 2 → 4 or 1 → 3 → 4, both of length 2. In the second sample, the longest path is 1 → 3 → 4 → 5 → 6 with length 4.","solution":"from collections import defaultdict, deque def longest_path_in_DAG(n, m, edges): graph = defaultdict(list) in_degree = [0] * (n + 1) # Build the graph and compute in-degrees for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Topological sorting using Kahn\'s algorithm topo_sort = [] zero_in_degree_queue = deque() # Push all nodes with in-degree of 0 for i in range(1, n + 1): if in_degree[i] == 0: zero_in_degree_queue.append(i) while zero_in_degree_queue: u = zero_in_degree_queue.popleft() topo_sort.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: zero_in_degree_queue.append(v) # Initialize distances with minimum possible value dp = [0] * (n + 1) # Process nodes in topological order for u in topo_sort: for v in graph[u]: dp[v] = max(dp[v], dp[u] + 1) # The length of the longest path in a DAG return max(dp)"},{"question":"You are given an array of integers, and your task is to determine if there exists a pair of elements in the array whose sum equals a given target sum. Write a function `findPairWithSum` that takes in two parameters: - `arr`: a list of integers - `target`: an integer representing the target sum The function should return a tuple of two integers representing the pair of elements that add up to the target sum. If no such pair exists, return `(-1, -1)`. Input - An array `arr` of integers where the length of the array (n) satisfies (1 ≤ n ≤ 10^5). - An integer `target` where the value of the target sum satisfies (1 ≤ target ≤ 10^9). Output - A tuple of two integers representing the pair from the array that add up to `target`. If multiple pairs are possible, return any one of them. - If no such pair exists, return `(-1, -1)`. Examples: Input: ``` arr = [2, 7, 11, 15] target = 9 ``` Output: ``` (2, 7) ``` Input: ``` arr = [1, 2, 3, 4, 5] target = 10 ``` Output: ``` (-1, -1) ``` Input: ``` arr = [-1, -2, -3, -4, -5] target = -8 ``` Output: ``` (-3, -5) ``` Note: In the first example, the pair (2, 7) sums to the target 9. In the second example, no two elements sum to the target 10. In the third example, the pair (-3, -5) sums to the target -8.","solution":"def findPairWithSum(arr, target): Returns a tuple of two integers representing the pair from the array that add up to the target sum. If no such pair exists, returns (-1, -1). seen = {} for num in arr: complement = target - num if complement in seen: return (complement, num) seen[num] = True return (-1, -1)"},{"question":"Warehouse Inventory Management Problem Statement A warehouse contains a grid of items arranged in rows and columns. The grid has R rows and C columns. Each item in the grid has a unique identifier represented by id_{i,j} where i is the row index and j is the column index. The warehouse uses a tracking system that records the inventory levels of items in each cell of the grid. The inventory levels are given by inv_{i,j} where i is the row index and j is the column index. The warehouse manager has tasked you with implementing a system to handle incoming requests to update inventory levels. Each request is represented by three integers: x, y, and v where x is the row index, y is the column index, and v is the new inventory level for the cell (x, y). You need to process a series of update requests and output the final state of the inventory grid. Input The input is given in the following format: R C Q inv_{0,0} inv_{0,1} ... inv_{0,C-1} inv_{1,0} inv_{1,1} ... inv_{1,C-1} ... inv_{R-1,0} inv_{R-1,1} ... inv_{R-1,C-1} x_1 y_1 v_1 x_2 y_2 v_2 ... x_Q y_Q v_Q R (2 leq R leq 100) represents the number of rows in the inventory grid. C (2 leq C leq 100) represents the number of columns in the inventory grid. Q (1 leq Q leq 1000) represents the number of update requests. inv_{i,j} (0 leq inv_{i,j} leq 1000) represents the initial inventory level for the item at (i, j). x, y (0 leq x < R) and (0 leq y < C) specify the row and column indices for each update request. v (0 leq v leq 1000) specifies the new inventory level for the cell (x, y). Output Output the final state of the inventory grid. Each row should be printed on a new line with inventory levels separated by spaces. Sample Input 1 3 3 2 10 20 30 40 50 60 70 80 90 1 1 100 2 2 150 Output for Sample Input 1 10 20 30 40 100 60 70 80 150 Sample Input 2 2 2 3 5 10 15 20 0 0 25 1 1 35 0 1 45 Output for Sample Input 2 25 45 15 35","solution":"def update_inventory(R, C, Q, grid, updates): Updates the inventory grid based on the provided update requests. Parameters: R (int): Number of rows in the grid. C (int): Number of columns in the grid. Q (int): Number of updates. grid (list of list of int): 2D list representing the initial inventory levels. updates (list of tuples): List of update requests where each request is a tuple (x, y, v). Returns: list of list of int: Updated inventory grid. for (x, y, v) in updates: grid[x][y] = v return grid"},{"question":"Alice is interested in prime numbers and their properties. She recently learned about twin primes, which are pairs of prime numbers that differ by exactly 2. For example, (3, 5) and (11, 13) are twin primes. Alice wants to find out if there exists a pair of twin primes within a given range of numbers. Write a program that accepts two integers, n and m (2 ≤ n ≤ m ≤ 10^6), and determines if there exists at least one pair of twin primes (p1, p2) such that n ≤ p1 < p2 ≤ m. Input The input contains two integers n and m (2 ≤ n ≤ m ≤ 10^6) — the boundaries of the range to check for twin primes. Output If there exists at least one pair of twin primes in the interval [n, m], print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). Examples Input 3 13 Output YES Input 10 20 Output YES Input 14 16 Output NO Input 25 30 Output NO Note In the first sample, the twin prime pairs are (3, 5), (5, 7), and (11, 13). In the second sample, the twin prime pair is (11, 13). In the third sample, there are no prime pairs in the range [14, 16]. In the fourth sample, there are no prime pairs in the range [25, 30].","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def find_twin_primes(n, m): Determine if there exists at least one pair of twin primes (p1, p2) such that n <= p1 < p2 <= m. prev_prime = None for num in range(n, m + 1): if is_prime(num): if prev_prime is not None and num - prev_prime == 2: return \\"YES\\" prev_prime = num return \\"NO\\""},{"question":"A transportation company operates in a city with n intersections and m bidirectional roads connecting these intersections. The intersections are numbered from 1 to n. Intersection 1 is the starting point where all vehicles begin their journey, and intersection n is the final destination. Each road has a specific travel time associated with it, given as an integer in minutes. The company wants to calculate the minimum time required for a vehicle to travel from intersection 1 to intersection n. Given the constraints on the number of intersections and roads, determine an efficient algorithm to find the shortest path. Input: - The first line contains two integers, n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5), the number of intersections and the number of roads, respectively. - The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^6), representing a road between intersections u and v with a travel time of t minutes. Output: - Print the minimum time required to travel from intersection 1 to intersection n. If it is not possible to reach intersection n from intersection 1, print \\"-1\\". Example: Input: 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 Output: 7 Explanation: The shortest path from intersection 1 to intersection 5 is: 1 → 2 → 3 → 4 → 5, with a total travel time of 2 + 1 + 3 + 1 = 7 minutes. In another example: Input: 4 2 1 2 5 3 4 2 Output: -1 Explanation: There is no path from intersection 1 to intersection 4.","solution":"import heapq def shortest_path(n, m, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s algorithm queue = [(0, 1)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while queue: current_dist, current_node = heapq.heappop(queue) if current_dist > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"In a galaxy far, far away, there exists a planet called Tetra where mystical creatures named Tetrarians reside. Each Tetrarian has a unique talent represented by a sequence of non-negative integers. These sequences can be combined to create new talents through specific rules of concatenation. Given two Tetrarians A and B, their talents are represented as two sequences of non-negative integers. Tetrarians can combine their talents by performing the following operation: choose an integer k from 1 to the length of Tetrarian B\'s talent sequence, and insert a prefix of length k from B\'s sequence into any position of A\'s sequence. The results of these operations will be multiple new sequences formed by inserting different prefixes of B into different positions of A. Among the new sequences, the most revered ones are the lexicographically smallest. Given sequences P and Q, and a number of queries q, each query asks to determine the lexicographically smallest talent sequence formed by inserting a specific prefix of Q into a range of positions in P. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the lengths of sequences P and Q. - The second line contains n non-negative integers – the sequence P. - The third line contains m non-negative integers – the sequence Q. - The fourth line contains an integer q (1 ≤ q ≤ 100) – the number of queries. - The next q lines each contain three integers l, r, and k (0 ≤ l ≤ r < n, 1 ≤ k ≤ m) – representing the position range [l, r] within P where the prefix of length k from Q should be considered for insertion. Output: - For each query, output the lexicographically smallest sequence formed by the operation. Example: Input: 6 4 3 1 4 1 5 9 2 7 1 8 2 0 3 2 1 4 3 Output: [2, 7, 3, 1, 4, 1, 5, 9] [3, 1, 2, 7, 1, 4, 1, 5, 9]","solution":"def lexicographically_smallest_seq(n, m, P, Q, queries): results = [] for l, r, k in queries: min_sequence = None Q_prefix = Q[:k] for i in range(l, r + 2): new_sequence = P[:i] + Q_prefix + P[i:] if min_sequence is None or new_sequence < min_sequence: min_sequence = new_sequence results.append(min_sequence) return results"},{"question":"Given a list of integers, we want to identify the first non-repeating character in the sequence and return its position (0-based index). A non-repeating character is one that appears exactly once in the sequence. If there are multiple non-repeating characters, return the index of the first one in the sequence. If there are no non-repeating characters, return -1. Input Format - The first line contains a single integer N, which represents the number of integers. - The next line contains N space-separated integers. Output Format - Print a single integer which is the index of the first non-repeating character. If there are no non-repeating characters, print -1. Constraints 1 ≤ N ≤ 10^5 1 ≤ Integer values ≤ 10^9 Example Input 8 4 5 1 2 0 4 1 5 Example Output 3 Explanation: In the given list, the non-repeating characters are 2 and 0. The first one in the sequence is 2, which is at index 3. Hence, the output is 3.","solution":"def first_non_repeating_index(nums): Returns the index of the first non-repeating character in the sequence. If there are no non-repeating characters, returns -1. from collections import Counter count = Counter(nums) for index, num in enumerate(nums): if count[num] == 1: return index return -1"},{"question":"Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Input Format Two strings S1 and S2 Output Format Print \\"YES\\" if the strings are anagrams of each other, otherwise print \\"NO\\". Input Constraints 1 ≤ length(S1), length(S2) ≤ 1000 Both strings will contain only lowercase English letters. Problem Setter: Practo Tech Team SAMPLE INPUT listen silent SAMPLE OUTPUT YES Explanation Both \\"listen\\" and \\"silent\\" contain the same letters with the same frequency, hence they are anagrams.","solution":"def are_anagrams(s1, s2): Determine if two strings are anagrams of each other. :param s1: First string :param s2: Second string :return: \\"YES\\" if the strings are anagrams, otherwise \\"NO\\" # Anagrams must be of equal length if len(s1) != len(s2): return \\"NO\\" # Create frequency dictionaries for each string freq_s1 = {} freq_s2 = {} # Count frequencies of each character in s1 for char in s1: if char in freq_s1: freq_s1[char] += 1 else: freq_s1[char] = 1 # Count frequencies of each character in s2 for char in s2: if char in freq_s2: freq_s2[char] += 1 else: freq_s2[char] = 1 # Compare the frequency dictionaries if freq_s1 == freq_s2: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a function g that takes a list of non-negative integers as input and returns the maximum number of non-overlapping pairs of elements whose sums are even. For example, g([1, 2, 3, 4, 5]) = 2, with pairs (1, 3) and (2, 4). You are given a list of non-negative integers. Find the maximum number of non-overlapping pairs of elements from the list whose sums are even, or print 0 if no such pairs exist. Input The first line contains a single integer n (1 ≤ n ≤ 100), representing the number of non-negative integers in the list. The second line contains n non-negative integers separated by spaces. Each integer is between 0 and 10^4. Output Print a single integer denoting the maximum number of non-overlapping pairs of elements from the list whose sums are even. Examples Input 5 1 2 3 4 5 Output 2 Input 3 2 4 6 Output 1 Input 4 1 3 5 7 Output 2 Note In the first example, the pairs (1, 3) and (2, 4) have even sums. Another valid pair is (3, 5) but choosing it with any other will leave an odd sum pair hence the maximum non-overlapping pairs is 2. In the second example, the only pair (2, 4) exists with an even sum. In the third example, the pairs (1, 3) and (5, 7) have even sums, thus yielding the result 2.","solution":"def max_even_sum_pairs(lst): evens = [] odds = [] # Split the numbers into even and odd lists for number in lst: if number % 2 == 0: evens.append(number) else: odds.append(number) # The maximum number of non-overlapping pairs with even sums pair_count = 0 # Each pair from evens will be even pair_count += len(evens) // 2 # Each pair of odds will also be even pair_count += len(odds) // 2 return pair_count"},{"question":"There is a grid of size N x M consisting of rows and columns. Each cell in the grid contains either a 0 or a 1. You start at the top-left cell of the grid (0, 0), and you need to reach the bottom-right cell (N-1, M-1). From any cell (i, j), you can move to the cell to the right (i, j+1) or to the cell directly below (i+1, j) only if the cell you are moving to has a value of 1. The top-left cell and the bottom-right cell will always be 1. Due to some external events, the values in some cells may change from 1 to 0 or from 0 to 1 intermittently, but at any point in time during your traversal, you can only rely on the current configuration of the grid. Write a function to determine if there is any path from the start to the end cell. # Input - N and M (1 ≤ N, M ≤ 1000) as the dimensions of the grid - A 2D list of integers representing the grid # Output - Output \\"Yes\\" if there exists a path from the top-left cell to the bottom-right cell - Output \\"No\\" if no such path exists # Example Input N = 4, M = 4 Grid = [ [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1] ] Output Yes Note: In the provided example, one possible path is: (0,0) → (1,0) → (1,1) → (2,1) → (2,2) → (2,3) → (3,3)","solution":"def is_path_exists(N, M, grid): Determine if there is a path from the top-left to the bottom-right in the grid. if N == 0 or M == 0: return \\"No\\" from collections import deque # Directions: down (i+1, j) and right (i, j+1) directions = [(1, 0), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # If we\'ve reached the bottom-right cell if x == N-1 and y == M-1: return \\"Yes\\" for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 1 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\""},{"question":"You are given an n x n grid consisting of lowercase English letters. You can perform the following operation any number of times: select any row or column and perform a cyclic shift. A cyclic shift means moving the last element of the row/column to the first position and shifting all other elements one position to the right. Your task is to determine if it is possible to make all the rows of the grid equal using the above operations. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of testcases. The next lines contain the descriptions of the t testcases. Each testcase consists of n + 1 lines: the first line contains the integer n (2 ≤ n ≤ 50), and each of the following n lines contains a string of n characters, representing a single row of the grid. Output For each testcase, print \\"YES\\" if it is possible to make all the rows equal, otherwise print \\"NO\\". Example Input 2 3 abc cab bca 3 abc def ghi Output YES NO Note In the first testcase, by performing cyclic shifts on the rows, we can make them all equal to \\"abc\\". For example: - Shift the second row \\"cab\\" once to the left to get \\"abc\\". - Shift the third row \\"bca\\" twice to the left to get \\"abc\\". In the second testcase, it is not possible to make all rows equal by any number of cyclic shifts.","solution":"def can_make_rows_equal(t, test_cases): def is_possible_to_equalize(rows): first_row_cyclic_variations = set(rows[0][i:] + rows[0][:i] for i in range(len(rows[0]))) for row in rows[1:]: row_cyclic_variations = set(row[i:] + row[:i] for i in range(len(row))) if not (first_row_cyclic_variations & row_cyclic_variations): return \\"NO\\" return \\"YES\\" results = [] for case in test_cases: n, rows = case results.append(is_possible_to_equalize(rows)) return results def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) rows = input_lines[index + 1: index + 1 + n] test_cases.append((n, rows)) index += n + 1 return t, test_cases def process_output(output_list): return \\"n\\".join(output_list)"},{"question":"You are given an array A of length N consisting of integers. Answer the following Q queries: * Query i (1 ≤ i ≤ Q): You will be given integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ N). Consider the subarray of A starting at index l_i and ending at index r_i (both inclusive). What is the maximum value in this subarray? Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Q ≤ 10^5 * 1 ≤ A[i] ≤ 10^9 * 1 ≤ l_i ≤ r_i ≤ N Input Input is given from Standard Input in the following format: N Q A[1] A[2] ... A[N] l_1 r_1 : l_Q r_Q Output Print Q lines. The i-th line should contain the answer to the i-th query. Example Input 8 3 5 1 3 8 6 7 4 2 3 5 1 8 4 4 Output 8 8 8","solution":"def answer_queries(N, Q, A, queries): Returns the maximum value in specified subarray for each query. Args: N: int - Length of the array Q: int - Number of queries A: list of int - The array queries: list of tuples - Each tuple consists of (l, r) representing the subarray boundary Returns: list of int - Maximum values for each query results = [] for l, r in queries: results.append(max(A[l-1:r])) return results"},{"question":"Problem Statement Alice is playing a card game where she has a sequence of n cards laid out in front of her. Each card has a positive integer value written on it. Alice\'s objective is to find the minimum possible sum of integers she can obtain by removing exactly m cards. Alice wants your help to determine the minimum possible sum. Input The first line contains two integers, n and m, where n is the total number of cards, and m is the number of cards to be removed. The next line contains n integers representing the values on the cards. Output Output the minimum possible sum of the remaining cards after removing m cards. Constraints 3 ≤ n ≤ 100000 1 ≤ m ≤ n-2 1 ≤ value on each card ≤ 10^5 SAMPLE INPUT 5 2 4 3 2 7 5 SAMPLE OUTPUT 9 Explanation By removing the cards with values 4 and 7, we are left with the cards with values 3, 2, and 5. The sum of these remaining values is 3+2+5=10, which is the minimum possible sum after removing 2 specified cards.","solution":"def min_sum_after_removals(n, m, card_values): This function finds the minimum possible sum of the remaining cards after removing exactly m cards. Parameters: n (int): Total number of cards. m (int): Number of cards to be removed. card_values (list): List of integers representing the values on the cards. Returns: int: The minimum possible sum of the remaining cards after removing m cards. card_values.sort() return sum(card_values[:n-m])"},{"question":"You are given an organization that plans events, where each event needs a specific number of resources to be conducted. You are responsible for allocating these resources each day for the varied events that happen in the organization. You need to determine the most efficient way to allocate resources across days without running into conflicts, ensuring that an event on a specific day gets all required resources. Each day, there could be multiple events, and the resources available each day might change. To add to the complexity, every event has a priority level, and higher priority events should be prioritized in resource allocation higher than lower priority events. The organization has provided you with a schedule of events for the upcoming days in the form of a list of tuples, where each tuple consists of the day, the event number, the number of resources required, and the priority of the event. Write a program to determine the sequence of resource allocation that maximizes the number of events that can be successfully held over the next n days. # Input - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - For each test case: - The first line contains the integer n (1 ≤ n ≤ 100) — the number of days. - The second line contains n integers separated by spaces — the number of resources available each day. - The third line contains an integer e (1 ≤ e ≤ 1000) — the number of events. - The next e lines each contain four integers: d, i, r, p, where d (1 ≤ d ≤ n) is the day the event will be held, i (0 ≤ i < 1000) is the event number, r (1 ≤ r ≤ 100) is the number of resources required, and p (1 ≤ p ≤ 100) is the priority of the event. # Output For each test case, print one integer — the maximum number of events that can be held. # Example Input ``` 2 2 5 10 3 1 1 5 10 1 2 5 20 2 3 10 5 3 10 6 8 4 1 1 6 10 1 2 6 5 2 3 6 15 3 4 8 20 ``` Output ``` 2 3 ``` # Note In the first test case, the organization has two days; on the first day, there are 5 resources and on the second day, there are 10 resources available. There are three events, and by prioritizing according to their priority, we can hold the events 2 and 3. In the second test case, three days are available with resources distributed as given. By prioritizing and efficiently using resources, the maximum events that can be held are 3.","solution":"def max_events_held(t, test_cases): results = [] for idx in range(t): n = test_cases[idx][0] resources = test_cases[idx][1] e = test_cases[idx][2] events = test_cases[idx][3] events_by_day = [[] for _ in range(n)] for event in events: day, event_num, required_resources, priority = event events_by_day[day - 1].append((required_resources, priority)) for i in range(n): events_by_day[i].sort(key=lambda x: (-x[1], x[0])) num_events_held = 0 for day in range(n): available_resources = resources[day] for required_resources, priority in events_by_day[day]: if available_resources >= required_resources: available_resources -= required_resources num_events_held += 1 results.append(num_events_held) return results"},{"question":"You are given two strings S and T. Your goal is to determine whether string T is a subsequence of string S. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Implement a function to determine if T is a subsequence of S. Input: - The first line contains the string S, consisting of lowercase English letters. - The second line contains the string T, consisting of lowercase English letters. - Both strings have lengths between 1 and 100, inclusive. Output: - Print \\"YES\\" if T is a subsequence of S, otherwise print \\"NO\\". Examples Input: abcde ace Output: YES Input: abcde aec Output: NO Input: hello heo Output: YES Input: hello ole Output: NO Input: abc abc Output: YES Note: - In the first example, \\"ace\\" is a subsequence of \\"abcde\\" because we can obtain \\"ace\\" by deleting \'b\' and \'d\' from \\"abcde\\". - In the second example, \\"aec\\" is not a subsequence of \\"abcde\\" because \'e\' does not appear after \'a\' in \\"abcde\\". - In the third example, \\"heo\\" is a subsequence of \\"hello\\" by deleting \'l\' and the second \'l\'. - In the fourth example, \\"ole\\" is not a subsequence of \\"hello\\". - In the fifth example, both strings are identical, hence \\"abc\\" is a subsequence of \\"abc\\".","solution":"def is_subsequence(S, T): Determines if T is a subsequence of S. Parameters: S (str): The main string. T (str): The string to check as a subsequence. Returns: str: \\"YES\\" if T is a subsequence of S, otherwise \\"NO\\". it = iter(S) for char in T: if char not in it: return \\"NO\\" return \\"YES\\""},{"question":"Carmen is playing a game that involves selecting blocks from a sequence of blocks. Each block has a color and a strength level associated with it. The goal is to remove blocks from either end of the sequence in such a way that the difference between the total strength of the removed blocks from each end is minimized. Given a sequence of blocks, your task is to write a program that determines the minimum possible difference in strength between the blocks removed from the two ends. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of blocks in the sequence. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9), where s_i is the strength of the i-th block. The third line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9), where c_i is the color of the i-th block. Output Print a single integer representing the minimum possible difference in total strength between the blocks removed from the two ends. Examples Input 5 3 1 4 1 5 2 2 1 2 1 Output 0 Input 4 8 3 2 5 1 1 2 2 Output 2 Explanation In the first example, the optimal way to remove blocks would be to remove the first and last blocks, both of which together have a total strength of 3 + 5 = 8. The remaining part of the sequence would then have strengths 1, 4, and 1, which together sum to 6. The difference between these two parts is 8 - 8 = 0. In the second example, removing blocks from the ends such as (8, 3) and (2, 5) or (8, 2) and (5, 3) will give the minimal difference of 2 in their total strengths.","solution":"def min_diff_between_ends(n, strengths, colors): total_strength = sum(strengths) dp = [False] * (total_strength + 1) dp[0] = True for strength in strengths: for i in range(total_strength, strength - 1, -1): dp[i] = dp[i] or dp[i - strength] min_diff = float(\'inf\') for s in range(total_strength // 2 + 1): if dp[s]: min_diff = min(min_diff, total_strength - 2 * s) return min_diff"},{"question":"You are given a 2D grid of size `N x N` representing a maze. Each cell in the grid can be: - An empty space denoted by \\".\\", - An obstacle denoted by \\"#\\", - A start position denoted by \\"S\\", - An end position denoted by \\"E\\". You need to determine if there exists a path from the start position to the end position that only moves through empty spaces and avoids obstacles. You can move up, down, left, or right, but cannot move diagonally. Given the constraints, the size of the grid will not exceed 100x100. Write a function `path_exists(grid: List[str]) -> str` that takes a list of strings representing the maze and returns \\"YES\\" if a path exists from \'S\' to \'E\' and \\"NO\\" otherwise. # Constraints: - The grid will always have exactly one \'S\' and one \'E\'. - `1 <= N <= 100` - No duplicate \'S\' or \'E\'. # Input The input contains: - An integer `N` representing the size of the grid. - N subsequent lines, each containing N characters. # Output Output \\"YES\\" if a path exists and \\"NO\\" otherwise. # Example Input ``` 5 S.#.. .#.#. .#... ...#E # ``` Output ``` YES ``` Input ``` 5 S.#.. .#.#. . ...#E # ``` Output ``` NO ```","solution":"from typing import List def path_exists(grid: List[str]) -> str: N = len(grid) def find_start_end(grid): start = end = None for i in range(N): for j in range(N): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) return start, end def valid_move(x, y): return 0 <= x < N and 0 <= y < N and grid[x][y] in {\'.\', \'E\'} def bfs(start, end): queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) if (x, y) == end: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if valid_move(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False start, end = find_start_end(grid) if not start or not end: return \\"NO\\" return \\"YES\\" if bfs(start, end) else \\"NO\\""},{"question":"Imagine a rectangular grid with R rows and C columns. Each cell in the grid is either land (represented by 1) or water (represented by 0). Two land cells are adjoining if they share an edge. Your task is to determine the number of distinct islands in the grid. An island is a maximal group of adjoining land cells. Write a function `numIslands(grid: List[List[int]]) -> int` that takes the grid as input and returns the number of distinct islands. # Input - `grid`: A list of lists of integers where each integer is either 0 (representing water) or 1 (representing land). The dimensions of the grid are 1 ≤ R, C ≤ 1000. # Output - Return an integer representing the number of distinct islands. # Example Input ``` [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1] ] ``` Output 3 # Note - In the example above, there are three islands: 1. The land cells (0, 0), (0, 1), (1, 0), and (1, 1) form one island. 2. The land cells (1, 4), (2, 3), and (2, 4) form a second island. 3. The land cells (4, 3) and (4, 4) form a third island. - You can assume that all input grids are valid and non-empty. # Constraints - 1 ≤ R, C ≤ 1000 - The grid contains only 0s and 1s.","solution":"from typing import List def numIslands(grid: List[List[int]]) -> int: if not grid: return 0 rows, cols = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return grid[r][c] = 0 # Mark the land as visited dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: island_count += 1 dfs(r, c) return island_count"},{"question":"The annual performance review is coming up at a company, and as a part of the review, the manager wants to analyze how punctual their employees have been over the past year. The company uses a tracking system that logs the clock-in times of employees on workdays. Each employee has a unique employee ID, and for each workday they were present, their clock-in time is logged in the system. If an employee was absent on a workday, their clock-in time is not logged for that day. Based on the collected data, the manager wants to calculate two things: 1. The total number of workdays each employee has been present. 2. The percentage of days the employee arrived exactly on time. For simplification, every workday the employees are expected to clock in at 09:00 AM. The log entries are given in a 24-hour format (HH:mm), where \'HH\' is the hour and \'mm\' is the minute. Input The first line contains an integer `n` (1 ≤ n ≤ 100), which is the number of employees. The next `n` lines contain unique employee IDs (strings of length 1 to 10). The next line contains an integer `m` (1 ≤ m ≤ 10^4), which is the number of log entries. The following `m` lines each contain an employee ID and their clock-in time in the format \\"ID HH:mm\\". Output For each employee, output two lines: 1. The total number of days they clocked in. 2. The percentage of days they arrived exactly at 09:00 AM, rounded to two decimal places. Examples Input 3 emp1 emp2 emp3 6 emp1 09:00 emp1 09:15 emp2 09:00 emp2 08:55 emp3 09:00 emp3 09:05 Output emp1 2 50.00 emp2 2 50.00 emp3 2 50.00 Input 2 alice bob 5 alice 09:00 alice 09:01 bob 09:00 alice 09:00 bob 10:00 Output alice 3 66.67 bob 2 50.00","solution":"def employee_punctuality(n, employees, m, logs): from collections import defaultdict # Initialize data structures attendance_count = defaultdict(int) on_time_count = defaultdict(int) for log in logs: emp_id, time = log.split() attendance_count[emp_id] += 1 if time == \\"09:00\\": on_time_count[emp_id] += 1 result = [] for emp_id in employees: total_days = attendance_count[emp_id] total_on_time = on_time_count[emp_id] punctuality_percentage = (total_on_time / total_days) * 100 if total_days > 0 else 0 result.append(f\\"{emp_id}n{total_days}n{punctuality_percentage:.2f}\\") return result # Example usage: n = 3 employees = [\\"emp1\\", \\"emp2\\", \\"emp3\\"] m = 6 logs = [\\"emp1 09:00\\", \\"emp1 09:15\\", \\"emp2 09:00\\", \\"emp2 08:55\\", \\"emp3 09:00\\", \\"emp3 09:05\\"] print(\\"n\\".join(employee_punctuality(n, employees, m, logs)))"},{"question":"You are given an integer array and a target integer S. Your task is to find if there exists a subset in the array whose sum equals to the given target S. If such a subset exists, print \\"YES\\". Otherwise, print \\"NO\\". Implement the function with time complexity not worse than O(n * S). Input The first line contains two integers n and S (1 ≤ n ≤ 20, 0 ≤ S ≤ 1000) — the size of the array and the target sum. The second line contains n integers a_1, a_2, ..., a_n where each a_i (1 ≤ a_i ≤ 1000) is the value of the elements in the array. Output Print \\"YES\\" if there exists a subset whose sum is S, otherwise print \\"NO\\". Examples Input 5 9 3 34 4 12 5 Output YES Input 5 30 3 34 4 12 5 Output NO Note In the first sample case, the subset {4, 5} sums to 9, so the output is \\"YES\\". In the second sample case, no subset adds up to the target sum of 30, so the output is \\"NO\\".","solution":"def subset_sum(n, S, arr): Returns \\"YES\\" if there exists a subset of the array with sum equal to S, otherwise returns \\"NO\\". dp = [False] * (S + 1) dp[0] = True for num in arr: for i in range(S, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[S] else \\"NO\\""},{"question":"Polycarp loves mathematics, and today, he decided to play with numbers. He defines a special type of number called a \\"Symmetric Number\\". A number is symmetric if it remains the same when its digits are reversed. Polycarp wants to check if a given number is a symmetric number or not. You are given a number, and your task is to determine if it is a symmetric number. Input The input consists of a single line containing a positive integer n (1 ≤ n ≤ 10^18). Output Print \\"YES\\" if the number is symmetric, otherwise print \\"NO\\". Examples Input 121 Output YES Input 12321 Output YES Input 123 Output NO Input 1001 Output YES Input 12345678987654321 Output YES Note In the first example, the number 121 is symmetric because reversing its digits gives the same number as the original. In the second example, the number 12321 is symmetric for the same reason. In the third example, the number 123 is not symmetric because reversing its digits gives 321, which is different from the original number. In the fourth example, the number 1001 is symmetric because reversing its digits gives the same number as the original. In the fifth example, the number 12345678987654321 is symmetric because reversing its digits gives the same number as the original.","solution":"def is_symmetric_number(n): Determines if a given number is symmetric (palindromic). Parameters: n (int): The number to be checked Returns: str: \\"YES\\" if the number is symmetric, \\"NO\\" otherwise # Convert the number to a string to check for symmetry s = str(n) # Check if the string is equal to its reverse if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array `A` of size `n` consisting of positive integers, your task is to find the length of the longest subsequence such that the greatest common divisor (GCD) of its elements is greater than 1. A subsequence is derived from the array by deleting some or none of the elements without changing the order of the remaining elements. Input The first line contains a single integer `n` (1 ≤ n ≤ 105) — the size of the array. The next line contains `n` integers `A[i]` (1 ≤ A[i] ≤ 105) — the elements of the array. Output Print a single integer — the length of the longest subsequence such that the GCD of its elements is greater than 1. Examples Input 5 3 5 9 2 6 Output 3 Input 4 7 11 13 17 Output 1 Input 6 24 36 48 6 18 9 Output 6 Note In the first example, the subsequence {3, 9, 6} has a GCD of 3, which is greater than 1. In the second example, there is no subsequence of length greater than 1 whose GCD is greater than 1. In the third example, the entire array has a common GCD of 6, which is greater than 1, giving us the maximum length of 6.","solution":"from math import gcd from collections import Counter def length_of_longest_subsequence_with_gcd_gt_1(n, A): Returns the length of the longest subsequence such that the GCD of its elements is greater than 1. if n == 1: return 1 if A[0] > 1 else 0 frequency = Counter(A) max_gcd_length = 0 for i in range(2, max(A) + 1): gcd_count = 0 for j in range(i, max(A) + 1, i): gcd_count += frequency[j] max_gcd_length = max(max_gcd_length, gcd_count) return max_gcd_length"},{"question":"As an AI language model, your task is to write a function that takes a non-negative integer n and returns the n-th term in the Fibonacci sequence. The sequence starts with 0 and 1, and each subsequent term is the sum of the previous two terms. The function should have an efficient runtime complexity. Fibonacci sequence: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 Input A single line containing a non-negative integer n (0 ≤ n ≤ 105) that represents the position in the Fibonacci sequence. Output A single integer which is the n-th term of the Fibonacci sequence. Examples Input 6 Output 8 Input 10 Output 55 Input 0 Output 0","solution":"def fibonacci(n): Returns the n-th term in the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"In the land of Cryptoria, there is a specific sequence called the Lucky Flight sequence. A sequence of positive integers is considered a Lucky Flight sequence if and only if it meets the following criterion: For every three consecutive integers a, b, c in the sequence, at least one of the following conditions holds: 1. (a times b leq c) 2. (b times c leq a) 3. (a times c leq b) Given a positive integer n, determine the length of the longest contiguous subsequence of the first n natural numbers that forms a Lucky Flight sequence. Input The input consists of a single integer n (1 ≤ n ≤ 10^6). Output Print a single integer – the length of the longest contiguous subsequence that is a Lucky Flight sequence. Examples Input 5 Output 5 Input 10 Output 6 Note In the first example, the sequence is [1, 2, 3, 4, 5], and the entire sequence is a Lucky Flight sequence. In the second example, the sequence is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. The longest contiguous subsequence that forms a Lucky Flight sequence is [1, 2, 3, 4, 5, 6]. Other sequences like [1, 2, 3, 4, 5] or [1, 2, 3, 4] also form Lucky Flight sequences, but their lengths are shorter.","solution":"def longest_lucky_flight_sequence(n): Determine the length of the longest contiguous subsequence of the first n natural numbers that forms a Lucky Flight sequence. # All natural numbers 1 to 5 will always form a valid Lucky Flight sequence of length 5 if n <= 5: return n else: return 6"},{"question":"You are given a 2-dimensional grid of dimensions `mxn` where each cell is either land (`1`) or water (`0`). The grid is fully surrounded by water. An island is formed by connecting adjacent lands horizontally and vertically. You need to find the smallest rectangle that contains all the lands belonging to the same island. You should return a list with four integers representing the coordinates of the top-left and bottom-right corners of the rectangle in the format `[x1, y1, x2, y2]`. Input: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 300), representing the number of rows and columns of the grid respectively. - The next `m` lines each contain `n` characters (either \'1\' or \'0\'), representing the grid. Output: - A list with four integers `[x1, y1, x2, y2]` representing the smallest rectangle that contains all lands of the same island. Example Input: ``` 6 6 000000 001100 001100 000000 001100 000111 ``` Output: `[1, 2, 4, 3]` Input: ``` 4 5 01111 01110 00100 00000 ``` Output: `[0, 1, 2, 4]` Explanation: Example 1: The first island we encounter in the grid starts at cell `(1, 2)` and extends to `(4, 3)`, thus the smallest rectangle containing this island is specified by these coordinates. Example 2: The first island starts at cell `(0, 1)` and extends to `(2, 4)`, thus the smallest rectangle containing this island is specified by these coordinates. Note: - There will be exactly one island in the grid.","solution":"def find_island_bounds(grid): Finds the smallest rectangle that contains all the lands of the same island. Parameters: grid (List[List[int]]): The 2D grid representing lands (\'1\') and water (\'0\') Returns: List[int]: The coordinates of the top-left and bottom-right corners of the rectangle [x1, y1, x2, y2] m = len(grid) n = len(grid[0]) # Initializing the bounds for the smallest rectangle top, bottom, left, right = m, -1, n, -1 for i in range(m): for j in range(n): if grid[i][j] == \'1\': if i < top: top = i if i > bottom: bottom = i if j < left: left = j if j > right: right = j return [top, left, bottom, right] # Example usage: # grid = [ # [\'0\', \'0\', \'0\', \'0\', \'0\', \'0\'], # [\'0\', \'0\', \'1\', \'1\', \'0\', \'0\'], # [\'0\', \'0\', \'1\', \'1\', \'0\', \'0\'], # [\'0\', \'0\', \'0\', \'0\', \'0\', \'0\'], # [\'0\', \'0\', \'1\', \'1\', \'0\', \'0\'], # [\'0\', \'0\', \'0\', \'1\', \'1\', \'1\'] # ] # print(find_island_bounds(grid)) # Output: [1, 2, 5, 5]"},{"question":"Write a function that takes a string `s` and an integer `k`, and returns the lexicographically smallest rotation of the string `s` obtained after performing exactly `k` circular shifts. A circular shift means moving the leftmost character of the string to the rightmost position. # Input Format - The input consists of a single string `s` (1 ≤ length of `s` ≤ 1000) - An integer `k` (1 ≤ k ≤ 1000). # Output Format - Print the lexicographically smallest rotation of the string after exactly `k` circular shifts. # Examples Example 1 **Input:** ``` abcde 2 ``` **Output:** ``` cdeab ``` **Explanation:** After 1 circular shift: `bcdea` After 2 circular shifts: `cdeab` `cdeab` is the result after 2 shifts. Example 2 **Input:** ``` league 3 ``` **Output:** ``` guelea ``` **Explanation:** After 1 circular shift: `eaguel` After 2 circular shifts: `aguele` After 3 circular shifts: `guelea` `guelea` is the result after 3 shifts.","solution":"def smallest_rotation(s, k): Returns the lexicographically smallest rotation of the string s after exactly k circular shifts. # Perform exactly k circular shifts k = k % len(s) rotated_string = s[k:] + s[:k] return rotated_string"},{"question":"Little Johnny loves playing with blocks. He has a collection of blocks, each with a distinct height. Johnny likes to build towers using these blocks, but he has a strict rule: no two towers can have blocks of the same height. Johnny is curious about the height of the shortest possible tower he can build using exactly M blocks from his collection. Write a program that helps Johnny determine the minimum height of a tower he can build with exactly M blocks. If it\'s not possible to build such a tower, the program should indicate that as well. Input: The first line will contain two integers N and M, where N is the number of blocks Johnny has, and M is the number of blocks he wants to use to build the tower. The next line contains N integers, each representing the height of a block in Johnny\'s collection. Output: Print the minimum possible height of a tower with exactly M blocks. If it\'s not possible to build such a tower, print \\"Impossible\\". Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ N 1 ≤ height of each block ≤ 1000 SAMPLE INPUT 5 3 5 2 8 6 7 SAMPLE OUTPUT 13 SAMPLE INPUT 4 5 2 3 5 7 SAMPLE OUTPUT Impossible","solution":"def minimum_tower_height(N, M, heights): Returns the minimum possible height of a tower with exactly M blocks. If it\'s not possible to build such a tower, returns \\"Impossible\\". if M > N: return \\"Impossible\\" # Sort the heights of the blocks heights.sort() # Get the sum of the smallest M blocks min_height = sum(heights[:M]) return min_height"},{"question":"You are given an array of n positive integers. You need to determine whether there exists a pair of distinct indices (i, j) such that the sum of the elements at these indices is odd. Input The first line contains a single integer n (2 ≤ n ≤ 100), the number of elements in the array. The next line contains n integers, the elements of the array. Each integer is at least 1 and at most 100. Output Print \\"YES\\" if there exists a pair of distinct indices (i, j) such that the sum of the elements at these indices is odd. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 4 2 4 6 8 Output NO Explanation In the first example, the sum of elements at indices (1, 2) is 1+2=3, which is odd, so the output is \\"YES\\". In the second example, there are no two distinct indices with an odd sum, so the output is \\"NO\\".","solution":"def has_odd_sum_pair(arr): Determines if there exists a pair of distinct indices (i, j) such that the sum of the elements at these indices is odd. :param arr: List of integers :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" odd_count = 0 even_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 # An odd sum is possible if there is at least one odd number and one even number if odd_count > 0 and even_count > 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Sam is working on optimizing the allocation of tasks to processes. Each task has a specific required time to be completed, and each process has a distinct maximum time it can run. Sam wants to determine the minimal time required to complete all the tasks by running them concurrently on different processes. Given an integer array `tasks` representing time required by each task and another integer array `processes` representing the maximum time each process can run, determine the minimal time to complete all tasks. Each task must be completely assigned to a single process and each process can handle at most one task at a time. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), representing the number of tasks and the number of processes respectively. The second line contains n integers representing the time required by each task. The third line contains m integers representing the maximum running time for each process. Output Print the minimal time required to complete all tasks. If it is not possible to allocate all tasks to given processes, print -1. Example Input 3 4 2 4 6 4 2 2 7 Output 6 Explanation - Task 1 (2 units) can be assigned to Process 1 (4 units). - Task 2 (4 units) can be assigned to Process 4 (7 units). - Task 3 (6 units) can be assigned to Process 4 (7 units). The minimal time to complete all tasks is determined by the task with the maximum required time which is 6 units.","solution":"def minimal_time_for_tasks(tasks, processes): Determine the minimal time required to complete all tasks by assigning them to processes. Parameters: tasks (list): A list of integers representing the time required by each task. processes (list): A list of integers representing the maximum running time for each process. Returns: int: The minimal time required to complete all tasks, or -1 if not possible. tasks.sort(reverse=True) processes.sort(reverse=True) for task in tasks: for i in range(len(processes)): if processes[i] >= task: processes.pop(i) break else: return -1 return max(tasks)"},{"question":"Fred is working on a new financial tracking app. One of the core features of the app is to analyze the total expenses over a given time period. However, due to a bug, the date inputs can sometimes be out of order. You are tasked with fixing this issue and ensuring that all dates are in chronological order before calculating the total expenses. Write a function that takes two lists as input: dates and expenses. The dates list contains date strings in the format \\"YYYY-MM-DD\\", and the expenses list contains integers representing the corresponding expense on that date. Your function should return the total expense for the corrected chronological order of dates. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of records. The second line contains n space-separated strings d1, d2, ..., dn, where di is the date associated with the ith record. The third line contains n space-separated integers e1, e2, ..., en, where ei is the expense on date di. Output Print a single integer, the total expense calculated after sorting the dates in chronological order. Example Input 4 2022-01-01 2021-12-31 2022-01-02 2022-01-01 100 200 50 100 Output 450 Input 3 2023-01-01 2023-03-15 2023-02-28 500 300 400 Output 1200 Note In the first example, after sorting the dates, the expenses list should be reordered to [200, 100, 100, 50]. The total of these reordered expenses is 450. In the second example, the dates should be reordered to \\"2023-01-01\\", \\"2023-02-28\\", \\"2023-03-15\\", and the corresponding expenses reordered to [500, 400, 300], giving a total of 1200.","solution":"def calculate_total_expenses(dates, expenses): Calculate the total expenses in chronological order of dates. dates: list of date strings in format \\"YYYY-MM-DD\\" expenses: list of integers representing expenses for each date return: Total expense after sorting dates in chronological order # Combine dates and expenses into a list of tuples combined = list(zip(dates, expenses)) # Sort the combined list by date combined.sort(key=lambda x: x[0]) # Extract the sorted expenses sorted_expenses = [expense for date, expense in combined] # Calculate and return the total expense total_expense = sum(sorted_expenses) return total_expense"},{"question":"You are given an array of integers that describes an initial state of a binary tree. The array is represented in a level order traversal manner where `None` represents a missing node. Your task is to validate whether the given array can represent a binary search tree (BST). Remember that in a BST, for any node `n`, all values in the left subtree are less than `n`, and all values in the right subtree are greater than `n`. **Input** The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains an integer `l` (1 ≤ l ≤ 10^5) — the length of the array. The next line contains `l` elements separated by spaces, representing the array described in level order. **Output** For each test case, output \\"YES\\" if the array can represent a BST, and \\"NO\\" otherwise. **Examples** Input ``` 3 7 2 1 3 None None None None 5 5 1 4 None None 3 6 7 10 5 15 4 7 12 18 ``` Output ``` YES NO YES ``` **Explanation** In the first test case, the array [2, 1, 3, None, None, None, None] can represent the following binary tree: ``` 2 / 1 3 ``` This tree satisfies the conditions of a BST. In the second test case, the array [5, 1, 4, None, None, 3, 6] does not satisfy the BST properties since 3 is in the right subtree of 5 but less than 5. In the third test case, the array [10, 5, 15, 4, 7, 12, 18] can represent the following binary tree: ``` 10 / 5 15 / / 4 7 12 18 ``` This tree satisfies the conditions of a BST.","solution":"def is_bst(level_order): Checks if the given level order traversal represents a valid binary search tree. def helper(index, min_val, max_val): if index >= len(level_order) or level_order[index] is None: return True if not (min_val < level_order[index] < max_val): return False left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 return helper(left_child_index, min_val, level_order[index]) and helper(right_child_index, level_order[index], max_val) return helper(0, float(\'-inf\'), float(\'inf\')) def bst_from_level_order(t, test_cases): results = [] for case in test_cases: l, arr = case arr = [None if x == \'None\' else int(x) for x in arr] results.append(\\"YES\\" if is_bst(arr) else \\"NO\\") return results # Parse input examples def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = [] i = 1 for _ in range(t): l = int(input_lines[i]) arr = input_lines[i+1].split() test_cases.append((l, arr)) i += 2 return t, test_cases"},{"question":"You are a developer at an e-commerce company. One important feature of your platform is the shopping cart system. Sometimes, customers add multiple items of different types to their cart, and they expect to see the total price of their cart updated in real time. Your task is to implement a function that calculates the total price of items in the cart, accounting for possible discounts based on quantity of a single type of item. The following rules apply for discounts: * If a customer buys more than 3 items of the same type, they get a 15% discount for those items. * If a customer buys more than 7 items of the same type, they get a 30% discount for those items. * If none of the above conditions are met, no discount is applied. You need to write a function that takes as input a list of tuples. Each tuple contains a string representing the item name, an integer representing the quantity of that item, and a float representing the price per item. Your function should return the total price of all the items in the cart after applying the applicable discounts. Input: A single list of tuples, where each tuple contains: - A string representing the name of the item - An integer representing the quantity of that item - A float representing the price per item Output: A single float representing the total price of the cart after applying the discounts, rounded to two decimal places. Example Input: [(\\"apple\\", 4, 0.5), (\\"banana\\", 5, 1.0), (\\"cherry\\", 10, 0.2), (\\"date\\", 2, 1.5)] Output: 7.10 Explanation: - For apples: 4 * 0.5 = 2.00 with 15% discount = 2.00 * 0.85 = 1.70 - For bananas: 5 * 1.0 = 5.00 with 15% discount = 5.00 * 0.85 = 4.25 - For cherries: 10 * 0.2 = 2.00 with 30% discount = 2.00 * 0.70 = 1.40 - For dates: 2 * 1.5 = 3.00 with no discount = 3.00 - Total = 1.70 + 4.25 + 1.40 + 3.00 = 10.35","solution":"def calculate_total_price(cart): Calculates the total price of items in the cart after applying the applicable discounts. Parameters: cart (list of tuples): Each tuple contains: - A string representing the name of the item - An integer representing the quantity of that item - A float representing the price per item Returns: float: The total price of all the items in the cart after applying the discounts. total_price = 0.0 for item in cart: name, quantity, price_per_item = item # Determine the discount rate based on quantity if quantity > 7: discount = 0.30 elif quantity > 3: discount = 0.15 else: discount = 0.0 # Calculate the total price for the current item total_price_for_item = quantity * price_per_item * (1 - discount) # Add to the total price total_price += total_price_for_item # Round the result to 2 decimal places return round(total_price, 2)"},{"question":"Sarah wants to design a program that can compress strings in an efficient way. A common approach to string compression is to use the Run Length Encoding (RLE) method. In this technique, consecutive repeated characters are replaced with the character followed by the number of repetitions. For example, the string \\"aaabbcccc\\" would be compressed to \\"a3b2c4\\". However, Sarah\'s new compression scheme needs to handle the possibility of digits in the string as well. Therefore, she decided to encode strings such that if any digit appears in the string, it is simply retained in the output without compression. Given a string consisting of lowercase English letters and digits, write a function that compresses the string using the modified RLE method. Input The input contains a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters and digits. Output Output the compressed string according to the modified RLE method. Example Input aaabbcccc Output a3b2c4 Input a1b11cc Output a1b11cc Input xyz Output xyz Note In the first example, since there are only letters, the RLE method is applied straightforwardly. In the second example, digits are present in the original string, hence no compression is applied. In the third example, no letters are repeated consecutively, so the string remains unchanged.","solution":"def compress_string(s): Compresses the string s using a modified Run Length Encoding (RLE) method. If any digit appears in the string, it is retained without compression. :param s: Input string consisting of lowercase English letters and digits. :return: Compressed string. if any(char.isdigit() for char in s): return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"D: Charging Stations Problem story In a city, there are various electric vehicle charging stations. Each charging station has a maximum capacity of how many cars it can serve at one time. During certain times, the demand for charging cars exceeds the supply, and the city wants to optimize which stations to use based on their capacities. For example, if the demand is for charging 13 cars and there are stations with capacities 5, 8, and 10, the city would try to minimize the number of stations used while also ensuring no station exceeds its capacity. problem Given the capacities of various charging stations and a total demand for charging cars, determine the smallest number of stations needed to satisfy the demand without exceeding the capacity of any station. If it is impossible to satisfy the demand even using all stations, output -1. Input format N D c1 c2 c3 ... cN Where: - N: the number of charging stations - D: the total demand for charging cars - c1, c2, ... , cN: the capacities of each charging station Constraint * 1 ≤ N ≤ 100000 * 1 ≤ D ≤ 10^9 * 1 ≤ ci ≤ 10^6 Input example 1 3 13 5 8 10 Output example 1 2 Input example 2 3 25 5 8 10 Output example 2 -1 Example Input 4 15 1 4 6 10 Output 2","solution":"def min_stations(n, d, capacities): Determines the smallest number of stations needed to satisfy the demand. If it is impossible to satisfy the demand even using all stations, returns -1. Parameters: - n (int): Number of charging stations - d (int): Total demand for charging cars - capacities (list of int): Capacities of each charging station Returns: - int: Minimum number of stations needed or -1 if demand cannot be satisfied capacities.sort(reverse=True) # Sort capacities in descending order total_capacity = sum(capacities) if total_capacity < d: return -1 # If total capacity of all stations is less than demand used_stations = 0 current_demand = d for capacity in capacities: current_demand -= capacity used_stations += 1 if current_demand <= 0: return used_stations return -1 # Should not reach here due to previous total_capacity check"},{"question":"Meridia is a land ruled by mystical creatures, and each creature has a unique way of communicating through strings of letters. The Grand Sorceress has decided to host a grand contest where the strength of a magical word is determined by its uniqueness. Two strings are considered unique if their sorted character sequences are different. The sorceress gives you a certain number of letters, and you must determine how many unique magic words can be composed using exactly n characters. To compute this, consider that each letter of the alphabet can appear in multiple permutations, but they are considered the same magic word if the characters sorted in alphabetical order form the same sequence. [Input] The first line contains an integer t denoting the number of test cases. Each test case consists of a single integer n denoting the length of the magic word. [Output] For each test case output a single line denoting the number of unique magic words that can be formed. [Constraints] 1 ≤ t ≤ 100 1 ≤ n ≤ 26 Note: The English alphabet has 26 letters. SAMPLE INPUT 2 3 4 SAMPLE OUTPUT 17576 67600 Explanation For n=3, The unique combinations of 3 characters selected from 26 letters without considering the order give us 26 * 25 * 24 = 15600. However, since the order does not matter, we divide by the number of permutations of 3 characters, which is 3! (3 factorial). Therefore the number of unique magic words is 15600 / 6 = 2600. For n=4, Similarly, we calculate the unique combinations of 4 characters selected from 26 letters without considering the order, giving us 26 * 25 * 24 * 23 = 358800. Dividing by the number of permutations of 4 characters, 4! (4 factorial), we get 358800 / 24 = 14950. Since each character in the alphabet can be repeated 26 times (from a to z), the total for n=4 is 14950 * 26 = 67600.","solution":"from math import factorial def unique_magic_words_count(n): Returns the number of unique magic words that can be formed with n characters. if n == 1: return 26 return factorial(26) // (factorial(n) * factorial(26 - n)) def calculate_unique_magic_words(test_cases): Returns a list of results for each test case. results = [] for n in test_cases: results.append(unique_magic_words_count(n)) return results"},{"question":"You are given a sequence of integers, and your task is to segment this sequence into contiguous subarrays such that the sum of the maximum values of each subarray is minimized. The number of segments (subarrays) must be exactly K. Implement a program that calculates the minimum possible sum of the maximum values of the K subarrays. For example, consider the sequence [7, 2, 5, 10, 8] and K = 2. One possible way to divide this into two subarrays is [7, 2, 5], [10, 8], where the maximum values are 7 and 10, respectively. Thus, the sum is 7 + 10 = 17. Input The input consists of several datasets. Each dataset is formatted as follows: > N K > x1 x2 ... xN The first line specifies two integers, N (length of the sequence) and K (number of segments). 1 ≤ K ≤ N ≤ 1000. The second line contains N integers, x1, x2, ..., xN, each of which represents an element of the sequence. Each xi satisfies 0 ≤ xi ≤ 10000. The end of the input is represented by a line consisting of only two zeros separated by a single space character. Output For each dataset, output the minimum sum of the maximum values of the K subarrays in one line. Example Input 5 2 7 2 5 10 8 9 3 1 2 3 4 5 6 7 8 9 6 1 1 1 1 1 1 1 8 4 1 4 4 4 4 4 4 4 0 0 Output 17 12 1 13","solution":"def min_sum_of_max_values(N, K, seq): Function to calculate the minimum sum of the maximum values of the K subarrays. dp = [[float(\'inf\')] * (K + 1) for _ in range(N + 1)] dp[0][0] = 0 for i in range(1, N + 1): for j in range(1, K + 1): max_val = 0 for l in range(i, 0, -1): max_val = max(max_val, seq[l - 1]) dp[i][j] = min(dp[i][j], dp[l - 1][j - 1] + max_val) return dp[N][K] def process_input(input_string): lines = input_string.strip().split(\\"n\\") idx = 0 results = [] while idx < len(lines): N, K = map(int, lines[idx].strip().split()) if N == 0 and K == 0: break seq = list(map(int, lines[idx + 1].strip().split())) result = min_sum_of_max_values(N, K, seq) results.append(result) idx += 2 return results"},{"question":"You are given a list of integers representing file sizes in megabytes, `file_sizes`, and an integer `usb_capacity` representing the capacity of a USB drive in megabytes. Your task is to determine if it is possible to fit all the files onto the USB drive without exceeding its capacity. If so, print \\"YES\\", otherwise print \\"NO\\". Input The input consists of two lines: - The first line contains a space-separated list of integers indicating the sizes of the files, `file_sizes`. - The second line contains a single integer `usb_capacity` indicating the capacity of the USB drive. Output Print a single word: \\"YES\\" if all files can be stored in the USB drive without exceeding its capacity, and \\"NO\\" otherwise. Examples Input 4 8 1 2 5 20 Output YES Input 10 20 30 50 Output NO Input 1 1 1 1 1 5 Output YES Note In the first example: - The total file size is 4 + 8 + 1 + 2 + 5 = 20, which exactly matches the USB capacity. Therefore, the output is \\"YES\\". In the second example: - The total file size is 10 + 20 + 30 = 60, which exceeds the USB capacity of 50. Therefore, the output is \\"NO\\". In the third example: - The total file size is 1 + 1 + 1 + 1 + 1 = 5, which equals the USB capacity. Therefore, the output is \\"YES\\".","solution":"def can_files_fit_in_usb(file_sizes, usb_capacity): Determines if all files can fit on the USB drive without exceeding its capacity. Args: file_sizes (list of int): List of file sizes. usb_capacity (int): Capacity of the USB drive. Returns: str: \\"YES\\" if all files can fit on the USB drive, otherwise \\"NO\\". if sum(file_sizes) <= usb_capacity: return \\"YES\\" else: return \\"NO\\""},{"question":"A runner is training on a circular track with M markers evenly spaced along the circumference. The runner starts at marker 1, and for each stride, they can move from the current marker to any other marker, but their stride length must be exactly a multiple of k - meaning the runner can only move from marker i to marker (i + km) % M, where m is an integer such that 0 <= m < M. The runner aims to pass through each marker at least once in as few strides as possible. Your task is to assist the runner in determining the minimum number of strides required to visit all M markers, beginning from marker 1. Input: The first line contains the number of test cases, T. Each of the next T lines contains two integers, M (the number of markers) and k (the stride length). Output: For each test case, output the minimum number of strides required to visit all M markers, starting from marker 1. Constraints: 1 ≤ T ≤ 10^5 1 ≤ M, k ≤ 10^9 SAMPLE INPUT 2 6 2 7 3 SAMPLE OUTPUT 3 3","solution":"def min_strides_to_visit_all_markers(M, k): Returns the minimum number of strides required to visit all M markers with stride length exactly multiple of k. from math import gcd return M // gcd(M, k) def process_test_cases(test_cases): results = [] for M, k in test_cases: results.append(min_strides_to_visit_all_markers(M, k)) return results"},{"question":"You are given a list of positive integers. For each integer in the list, you need to find the sum of all the digits raised to the power of the length of the number. Write a function that takes a list of positive integers and returns a new list where each element is the sum of the digits raised to the power of the length of the original integer. Constraints * The list will contain at most 100,000 positive integers. * Each integer in the list will have at most 10 digits. Input Input is given from Standard Input in the following format: - The first line contains a single integer T, the number of integers in the list. - The next T lines each contain one positive integer. Output Print T lines, each containing the sum of the digits raised to the power of the length of the corresponding integer in the list. Example Input 3 123 456 789 Output 36 189 984 Input 2 1 1234567890 Output 1 102764621464","solution":"def sum_of_digits_raised_to_power(numbers): Given a list of positive integers, returns a new list where each element is the sum of the digits raised to the power of the length of the original integer. result = [] for num in numbers: str_num = str(num) power = len(str_num) sum_of_powers = sum(int(digit) ** power for digit in str_num) result.append(sum_of_powers) return result # Reading the input as list of integers def read_input(): import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) numbers = list(map(int, data[1:t+1])) return numbers # Main function to handle input and output if __name__ == \\"__main__\\": numbers = read_input() results = sum_of_digits_raised_to_power(numbers) for result in results: print(result)"},{"question":"# The Magic Box Teleportation You\'ve recently discovered a network of magic boxes that allow for teleportation between different locations. Each magic box is uniquely identified by an integer and has a pair of coordinates (x, y) on a 2D plane. There are predefined teleport pathways between some pairs of boxes, enabling instant travel from one box to another in either direction. Your task is to determine the minimum number of teleports required to travel from a starting magic box to a destination magic box. If it is impossible to reach the destination starting from the starting box, you should indicate that as well. Each test case includes a list of magic boxes, represented by their coordinates and identifiers, and a list of direct teleport pathways between pairs of these boxes. Note that the coordinates are provided purely for informational purposes and do not affect the teleportation mechanics. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000), where n is the number of magic boxes, and m is the number of direct teleport pathways between these boxes. - The next n lines contain three integers id, x, and y (0 ≤ id ≤ n-1, -10^6 ≤ x, y ≤ 10^6) for each magic box, where id is the unique identifier of the magic box, and (x, y) are its coordinates. - The next m lines contain two integers id1 and id2 (0 ≤ id1, id2 ≤ n-1), representing a direct teleport pathway between magic boxes with identifiers id1 and id2. - The last line contains two integers start_id and end_id (0 ≤ start_id, end_id ≤ n-1), representing the starting and destination magic boxes. Output - If there exists a sequence of teleports from the starting box to the destination box, print the minimum number of teleports required. - Otherwise, print -1. Examples Input ``` 5 4 0 10 10 1 20 20 2 30 30 3 40 40 4 50 50 0 1 1 2 1 3 3 4 0 4 ``` Output ``` 3 ``` Input ``` 5 3 0 10 10 1 20 20 2 30 30 3 40 40 4 50 50 0 1 1 2 2 3 0 4 ``` Output ``` -1 ``` Note: In the first example, the minimum path from box 0 to box 4 can be achieved through teleporting from 0 -> 1 -> 3 -> 4, requiring 3 teleports. In the second example, there is no path from box 0 to box 4, so the output is -1.","solution":"from collections import deque def min_teleports(n, m, boxes, pathways, start_id, end_id): Determines the minimum number of teleports required to travel from the starting box to the destination box. If it is impossible to reach the destination, returns -1. :param n: Number of magic boxes :param m: Number of direct teleport pathways :param boxes: List of tuples containing (id, x, y) for each magic box :param pathways: List of tuples containing (id1, id2) for each teleport pathway :param start_id: Identifier of the starting magic box :param end_id: Identifier of the destination magic box :return: Minimum number of teleports required, or -1 if destination is unreachable # Build graph as adjacency list graph = {i: [] for i in range(n)} for id1, id2 in pathways: graph[id1].append(id2) graph[id2].append(id1) if start_id == end_id: return 0 # BFS to find the shortest path queue = deque([(start_id, 0)]) visited = set() visited.add(start_id) while queue: current_box, current_dist = queue.popleft() for neighbor in graph[current_box]: if neighbor not in visited: if neighbor == end_id: return current_dist + 1 queue.append((neighbor, current_dist + 1)) visited.add(neighbor) return -1"},{"question":"You are given a series of operations to be performed on an initial array of integers. Each operation consists of either adding an integer to an element at a specific index or querying the sum of the elements in a subarray. Your task is to perform the operations efficiently and provide answers to the query operations. The operations are defined as follows: 1. Add a value `x` to an element at index `i` (1-based): `+ i x` 2. Query the sum of elements from index `l` to `r` (1-based): `? l r` # Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains `n` integers a_1, a_2,..., a_n (1 ≤ a_i ≤ 10^9) — the initial elements of the array. The next `m` lines contain the operations. Each operation will be either of the form `+ i x` (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) or `? l r` (1 ≤ l ≤ r ≤ n). # Output For each query operation, output the sum of elements from the specified subarray in a separate line. # Example Input ``` 5 3 1 2 3 4 5 ? 1 3 + 2 10 ? 1 3 ``` Output ``` 6 16 ``` # Note - In the example, the initial array is `[1, 2, 3, 4, 5]`. - The first query `? 1 3` asks for the sum of elements from index 1 to 3, which is `1 + 2 + 3 = 6`. - The second operation `+ 2 10` adds `10` to the element at index 2, updating the array to `[1, 12, 3, 4, 5]`. - The third query `? 1 3` asks for the sum again but with the updated array, giving `1 + 12 + 3 = 16`.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def query(self, index): sum_ = 0 while index > 0: sum_ += self.tree[index] index -= index & -index return sum_ def perform_operations(n, m, initial_array, operations): fenwick_tree = FenwickTree(n) result = [] for i in range(1, n+1): fenwick_tree.update(i, initial_array[i-1]) for operation in operations: if operation[0] == \'?\': l, r = int(operation[1]), int(operation[2]) sum_l_r = fenwick_tree.query(r) - fenwick_tree.query(l - 1) result.append(sum_l_r) elif operation[0] == \'+\': i, x = int(operation[1]), int(operation[2]) fenwick_tree.update(i, x) return result"},{"question":"You are given an array of integers of length n called nums. Your task is to find the sum of the maximum possible sum of any contiguous subarray of nums. A contiguous subarray can be derived by deleting some (or no) elements from both sides of the array to obtain the subarray. Input The first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5), the length of the array. The second line contains n integers nums_1, nums_2, ..., nums_n (-10^5 ≤ nums_i ≤ 10^5), the elements of the array. Output Print one integer — the sum of the maximum possible sum of any contiguous subarray of nums. Examples Input 6 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 1 Output 1 Note In the first example, the maximum sum of any contiguous subarray is obtained from the subarray [4, -1, 2, 1] which sums up to 6. In the second example, the array contains only one element, so the maximum possible sum of any contiguous subarray is 1.","solution":"def max_subarray_sum(nums): Finds the sum of the maximum possible sum of any contiguous subarray in the given list of integers. Parameters: nums (list of int): The list of integers. Returns: int: The sum of the maximum possible sum of any contiguous subarray. # Initialize the current sum and maximum sum with the first element. current_sum = max_sum = nums[0] # Iterate through the list starting from the second element. for num in nums[1:]: # Update the current sum to be the maximum of current element or current sum + element. current_sum = max(num, current_sum + num) # Update the maximum sum if the current sum is greater. max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of integers nums. An element x is said to be dominant in the array if the number of times it appears in the array is strictly greater than the size of the array divided by 2. Your task is to find the dominant element in the array, if it exists. If no such element exists, return -1. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers representing the elements of the array nums (-10^9 ≤ nums[i] ≤ 10^9). Output Print the dominant element if it exists, otherwise print -1. Examples Input 7 3 3 4 2 3 3 1 Output 3 Input 5 1 2 3 4 5 Output -1 Note In the first example, 3 appears 4 times in the array, which is more than 7/2 = 3.5, so 3 is the dominant element. In the second example, no element appears more than 5/2 = 2.5 times, so there is no dominant element and we return -1.","solution":"def find_dominant_element(nums): Returns the dominant element in the array if it exists, otherwise returns -1. from collections import Counter n = len(nums) threshold = n // 2 counts = Counter(nums) for num, count in counts.items(): if count > threshold: return num return -1 # Example usage: # nums = [3, 3, 4, 2, 3, 3, 1] # dominant_element = find_dominant_element(nums) # print(dominant_element) # Output should be 3"},{"question":"Tom and Jerry are competing in a running race. They both have different constant speeds and start running simultaneously from the start line. Your task is to determine the time (in seconds) it will take for Tom to catch up with Jerry if Jerry starts ahead of Tom with a given initial lead. Write a program to calculate the time it takes for Tom to catch up with Jerry given the lead and their speeds. Input The input is given in the following format: l t_speed j_speed A line of data is given where: - l (0 ≤ l ≤ 1000) is the initial lead (in meters) given to Jerry. - t_speed (1 ≤ t_speed ≤ 20) is Tom\'s speed (in meters per second). - j_speed (1 ≤ j_speed ≤ 20) is Jerry\'s speed (in meters per second). Output Output the time in seconds it takes for Tom to catch up with Jerry. If Tom\'s speed is less than or equal to Jerry\'s speed, output \\"Impossible\\" since Tom will never catch up. Examples Input 50 10 5 Output 10 Input 20 5 6 Output Impossible Input 100 15 10 Output 20","solution":"def time_to_catch_up(lead, t_speed, j_speed): Returns the time in seconds for Tom to catch up with Jerry. Params: lead (int): initial lead in meters. t_speed (int): speed of Tom in meters per second. j_speed (int): speed of Jerry in meters per second. Returns: int or str: time in seconds or \\"Impossible\\" if Tom can never catch up. if t_speed <= j_speed: return \\"Impossible\\" else: return lead / (t_speed - j_speed)"},{"question":"You are given a grid represented as a 2D array of integers, where each integer represents the height of a cell in the grid. You need to find the size of the largest square sub-grid (containing contiguous cells) where all the cells have the same height. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid, respectively. The next n lines each contain m integers representing the heights of the cells in the grid. Each height is an integer between 1 and 1000. Output Print a single integer: the size of the largest square sub-grid where all cells have the same height. Examples Input 4 5 1 1 1 2 3 1 1 1 2 2 1 1 1 2 2 3 3 3 3 3 Output 3 Input 3 4 1 2 2 1 1 1 2 2 1 1 1 1 Output 2 Note In the first sample, the largest square sub-grid where all cells have the same height has a size of 3x3 and is located at the top-left corner of the grid with a height of 1. In the second sample, the largest square sub-grid is a 2x2 square, which can be found in multiple locations in the grid.","solution":"def largest_square_subgrid(n, m, grid): dp = [[0] * m for _ in range(n)] largest = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = 1 else: if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 largest = max(largest, dp[i][j]) return largest"},{"question":"# Hiking Path Difficulty Level You are given a hiking path represented by a string of characters, where each character represents a type of terrain. Hikers have different abilities, such that they can pass through certain types of terrain but not others. Your task is to determine whether a particular hiker can successfully traverse the entire hiking path without encountering an impassable terrain. To determine this, you will be given the following: 1. An integer T, the number of test cases. 2. For each test case: - A string P, which is the hiking path. Each character in P represents a terrain type. - A string H, which represents the hiker\'s ability. Each character in H denotes a terrain type that the hiker can pass through. Your goal is to check, for each test case, whether the hiker can traverse the entire path P without encountering any terrain not present in H. # Input The first line contains the integer T (1 ≤ T ≤ 100), the number of test cases. The next 2T lines contain the following for each test case: - A single line with the string P (1 ≤ |P| ≤ 100000), the hiking path. - A single line with the string H (1 ≤ |H| ≤ 100), the hiker\'s abilities. # Output For each test case, output \\"YES\\" if the hiker can traverse the full path, otherwise output \\"NO\\". # Constraints - The hiking path P and the hiker\'s abilities string H will only contain lowercase alphabetic characters. # Example Input: 3 ggxxy gy abcd abc aaa a Output: NO NO YES # Explanation - In the first test case, the path is \\"ggxxy\\" and the hiker can pass through \\"g\\" and \\"y\\". However, there are terrains \\"x\\" in the path which the hiker cannot pass, so the output is \\"NO\\". - In the second test case, the hiker cannot traverse the full path \\"abcd\\" as they cannot pass through the terrain \\"d\\", so the output is \\"NO\\". - In the third test case, the hiker can traverse the full path \\"aaa\\" as they have the ability to pass through the terrain \\"a\\", so the output is \\"YES\\".","solution":"def can_hiker_traverse_path(T, test_cases): results = [] for i in range(T): P, H = test_cases[i] if all(c in H for c in P): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string \'s\' consisting of lowercase English letters. You can perform the following operation any number of times: 1. Select any two adjacent characters in the string and swap them. Your task is to determine if it is possible to rearrange the characters of \'s\' to form a palindrome after any number of swaps. Input: - The input contains a single string \'s\' (1 ≤ |s| ≤ 100000). Output: - Output \\"YES\\" if it is possible to rearrange the string to form a palindrome, otherwise output \\"NO\\". Examples: Input: aabb Output: YES Input: abc Output: NO Input: aabbcc Output: YES Note: A string can be rearranged to form a palindrome if at most one character has an odd number of occurrences.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the string can be rearranged to form a palindrome. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a list of integers nums of length N and an integer K. You have to answer Q queries. In the i^th query, two integers Li and Ri are given. Then you should print the longest contiguous subarray within nums[Li, Ri] whose sum is divisible by K, where nums[Li, Ri] denotes the subarray from the Li^th to the Ri^th elements of the list nums. Input The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains two space-separated integers N and K as described in the problem. The second line contains a list nums of length N. Then the next Q lines describe the query, where the i^th line of them contains two space-separated integers Li and Ri. Output For each query, print the required answer in a single line. If no such subarray exists, print -1. Constraints and Example Input: 1 8 3 1 2 3 4 5 6 7 8 1 4 2 5 3 8 Output: 3 2 6 Explanation Query 1: Consider subarray A = nums[1, 4] = [1, 2, 3, 4]. The longest contiguous subarray within A whose sum is divisible by 3 is [1, 2, 3], which has a length of 3. Query 2: Consider subarray A = nums[2, 5] = [2, 3, 4, 5]. The longest contiguous subarray within A whose sum is divisible by 3 is [3, 4, 5], which has a length of 2. Query 3: Consider subarray A = nums[3, 8] = [3, 4, 5, 6, 7, 8]. The longest contiguous subarray within A whose sum is divisible by 3 is [3, 4, 5, 6, 7, 8], which has a length of 6.","solution":"def longest_subarray_divisible_by_k(nums, l, r, k): max_length = -1 for i in range(l, r + 1): current_sum = 0 for j in range(i, r + 1): current_sum += nums[j] if current_sum % k == 0: max_length = max(max_length, j - i + 1) return max_length def process_queries(T, test_cases): results = [] for case in test_cases: N, K = case[\'N\'], case[\'K\'] nums = case[\'nums\'] queries = case[\'queries\'] for l, r in queries: results.append(longest_subarray_divisible_by_k(nums, l - 1, r - 1, K)) return results"},{"question":"In the enchanted forest of Eldoria, each tree is connected to other trees via magical vines. The forest guardians want to ensure that the network of vine connections forms a looplessly connected structure, which means there should be exactly one path connecting any pair of trees. If there are additional or redundant vines that create loops, they need to be removed. Your task is to help the guardians by determining which vines should be kept so that the resulting network of trees forms a \\"spanning tree.\\" In this spanning tree, each tree is connected directly or indirectly to every other tree without forming any loops and minimizing the total vine length. Input First line contains two integers N (2 ≤ N ≤ 10^3) and M (N-1 ≤ M ≤ 10^5), representing the number of trees and the number of vines, respectively. Each of the next M lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6) — where u and v are trees connected by a vine, and w is the length of that vine. Output Output should contain N-1 lines, each containing two integers u and v, representing the trees connected by the vines that make up the spanning tree. If there are multiple possible spanning trees with the same minimum total length, output any one of them. Examples Input 4 5 1 2 3 1 3 1 2 3 1 3 4 4 2 4 2 Output 1 3 2 3 2 4 Input 3 3 1 2 2 1 3 3 2 3 1 Output 1 2 2 3","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(N, edges): result = [] i = 0 # Index variable for edges[] e = 0 # Index variable for result[] # Step 1: Sort all the edges in non-decreasing order of their weight edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(N): parent.append(node) rank.append(0) # Number of edges to be taken is equal to V-1 while e < N - 1: # Step 2: Pick the smallest edge and increment the index for next iteration u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge does not cause a cycle, include it in result if x != y: e = e + 1 result.append((u, v)) union(parent, rank, x, y) return result def minimal_spanning_tree(N, M, edges): return kruskal(N, edges)"},{"question":"You are given two positive integers, N and M, and you need to find the smallest integer X such that the bitwise AND operation between X and M equals N (i.e., (X & M) == N). If no such number exists, output -1. Input format: The input consists of multiple test cases. The number of test cases is T. For each test case, you are given two integers N and M. Test cases are provided in the following format: ``` T N_1 M_1 N_2 M_2 ... N_T M_T ``` Output format: The output consists of T lines. Each line contains the smallest integer X for the corresponding N and M or -1 if no such X exists. Constraints: - 1 ≤ T ≤ 10^5 - 0 ≤ N_i, M_i ≤ 10^18 - All input values are integers. Examples: Input: ``` 3 5 7 8 15 2 3 ``` Output: ``` 5 8 2 ``` Explanation: 1. For N = 5 and M = 7, the smallest integer X such that (X & 7) == 5 is 5. 2. For N = 8 and M = 15, the smallest integer X such that (X & 15) == 8 is 8. 3. For N = 2 and M = 3, the smallest integer X such that (X & 3) == 2 is 2.","solution":"def smallest_x(n, m): Returns the smallest integer X such that (X & M) == N. If no such number exists, returns -1. # First check if N is completely masked by M if (n & m) != n: return -1 return n def process_test_cases(test_cases): results = [] for n, m in test_cases: results.append(smallest_x(n, m)) return results"},{"question":"Write a function to find the minimum length of a contiguous subarray of which the sum is at least a given value `S`. If there isn\'t one, return `0` instead. # Input - A list of integers `nums` representing the array. - An integer `S` representing the target sum. # Output - An integer representing the minimum length of a contiguous subarray with a sum at least `S`. # Constraints - 1 ≤ `nums.length` ≤ 10^5 - 1 ≤ `nums[i]` ≤ 10^4 - 1 ≤ `S` ≤ 10^9 # Example ```python def min_subarray_length(nums, S): # Implement your function here pass # Example 1: nums1 = [2, 3, 1, 2, 4, 3] S1 = 7 # Output should be: print(min_subarray_length(nums1, S1)) # 2 # Example 2: nums2 = [1, 1, 1, 1, 1, 1, 1, 1] S2 = 11 # Output should be: print(min_subarray_length(nums2, S2)) # 0 ``` # Explanation In the first example, the minimum subarray with a sum of at least `7` is `[4, 3]`, so the function returns `2`. In the second example, there is no subarray with a sum of at least `11`, so the function returns `0`.","solution":"def min_subarray_length(nums, S): Finds the minimum length of a contiguous subarray with a sum at least S. If there isn\'t one, return 0 instead. n = len(nums) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= S: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"You are a contestant in a competitive programming competition and your task is to solve a problem of robot navigation. You have a rectangular grid with \'N\' rows and \'M\' columns, where each cell of the grid is either empty or contains an obstacle. The grid is represented by a 2D array, where a cell value of \'0\' indicates an empty cell and \'1\' indicates the presence of an obstacle. Your robot starts at the top-left corner of the grid (cell (0, 0)) and its goal is to reach the bottom-right corner of the grid (cell (N-1, M-1)). The robot can only move in two directions: 1. Right 2. Down Write a program that determines whether it is possible for the robot to reach the bottom-right corner from the top-left corner, considering the obstacles present on the grid. # Input The input consists of multiple test cases. Each test case is given in the following format: - An integer T, the number of test cases. For each test case: - Two integers N and M, indicating the number of rows and columns in the grid. - N lines, each containing M integers (either \'0\' or \'1\') representing the grid. # Output For each test case, output \\"YES\\" if it is possible for the robot to reach the bottom-right corner, otherwise output \\"NO\\". # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 1000 - Each cell in the grid is either \'0\' (empty) or \'1\' (obstacle). # Example Input ``` 2 3 3 0 0 0 0 1 0 1 0 0 3 3 0 1 0 1 1 0 0 0 0 ``` Output ``` YES NO ```","solution":"def is_reachable(grid, N, M): Check if the robot can reach the bottom-right corner. # Check if starting or ending cell is blocked if grid[0][0] == 1 or grid[N-1][M-1] == 1: return \\"NO\\" from collections import deque # DFS stack or BFS queue, let\'s use BFS for this queue = deque([(0, 0)]) directions = [(0, 1), (1, 0)] while queue: x, y = queue.popleft() # If we reached the bottom-right corner if x == N - 1 and y == M - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 0: queue.append((nx, ny)) # Mark as visited grid[nx][ny] = 1 return \\"NO\\" def solve(test_cases): results = [] for N, M, grid in test_cases: results.append(is_reachable(grid, N, M)) return results # Function to parse the input and call the solve function def main(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(N): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append((N, M, grid)) results = solve(test_cases) return \\"n\\".join(results)"},{"question":"Coding Assessment Question # Problem Statement Masha loves string problems and challenges her friends with interesting puzzles. One day, she comes up with the following task: given a string s consisting of lowercase English letters, determine whether it can be converted into a palindrome by rearranging its characters. A string is a palindrome if it reads the same from left to right and from right to left. For instance, \\"abcba\\" and \\"abba\\" are palindromes, but \\"abc\\" is not. Write a program that, given a string s, determines whether it is possible to rearrange its characters to form a palindrome. # Input - The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. # Output - Print \\"YES\\" if it\'s possible to rearrange the characters of the string into a palindrome, otherwise print \\"NO\\". # Examples Example 1 Input: ``` aabb ``` Output: ``` YES ``` Example 2 Input: ``` abc ``` Output: ``` NO ``` # Explanation Example 1: The string \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. Hence, the output is \\"YES\\". Example 2: The string \\"abc\\" cannot be rearranged to form a palindrome. Hence, the output is \\"NO\\". # Note To form a palindrome, at most one character can have an odd count for strings of odd length, and all characters must have even counts for strings of even length.","solution":"def can_form_palindrome(s): Determines whether the given string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string S. Calculate the number of distinct substrings of S. A substring is defined as any contiguous sequence of characters within the string. Input: A single string S of lowercase alphabets (1 ≤ length(S) ≤ 1000). Output: A single integer representing the number of distinct substrings of S. Constraints: 1 ≤ length(S) ≤ 1000 Note: Consider that we need to count all distinct substrings including the entire string itself as one of them. SAMPLE INPUT abc SAMPLE OUTPUT 6 Explanation The distinct substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\".","solution":"def count_distinct_substrings(S): Returns the number of distinct substrings of the given string S. n = len(S) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(S[i:j]) return len(substrings)"},{"question":"Railway Network Optimization In the country of AIOI, there exists a railway network consisting of N stations and M direct train routes connecting different pairs of stations. The government has initiated a project to enhance the efficiency of the railway network by optimizing the current routes. The goal is to ensure that every station is reachable from every other station, either directly or indirectly, via the minimum number of train routes required. For this purpose, you are tasked with determining the minimum number of routes that need to be kept without disconnecting the network. You are given the number of stations N and the number of direct routes M along with the descriptions of each route. Task Write a program to find the minimum number of routes that need to be preserved while ensuring that the railway network remains connected. Input Read the following data from standard input: - The first line contains two integers, N and M, separated by a space. N represents the number of stations (nodes) and M represents the number of direct train routes (edges). - The following M lines each contain two integers u and v, representing a direct route between station u and station v. Output Print a single integer — the minimum number of routes that need to be preserved. Limits All input data satisfy the following conditions: - 2 ≤ N ≤ 100,000 - 1 ≤ M ≤ 200,000 - 1 ≤ u, v ≤ N - No route is repeated. - The railway network is initially connected. Input/Output Example Input example 1 5 6 1 2 1 3 2 3 3 4 4 5 5 1 Output example 1 4 Input example 2 4 5 1 2 2 3 3 4 4 1 1 3 Output example 2 3 Input example 3 3 3 1 2 2 3 1 3 Output example 3 2 Explanation In the first example, the minimum number of routes that need to be preserved to keep the network connected is 4. Any additional route would be redundant. In the second example, 3 routes are sufficient to keep the network connected. In the third example, 2 routes are sufficient to maintain connectivity.","solution":"def min_routes_to_preserve(N, M, routes): Returns the minimum number of routes that need to be preserved to keep the network connected. # Using Kruskal\'s algorithm for Minimum Spanning Tree (MST) parent = list(range(N + 1)) rank = [0] * (N + 1) def find(v): if parent[v] != v: parent[v] = find(parent[v]) return parent[v] def union(v1, v2): root1 = find(v1) root2 = find(v2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 routes_count = 0 for u, v in sorted(routes): if find(u) != find(v): union(u, v) routes_count += 1 return routes_count"},{"question":"Given a list of integers, you are required to find the maximum sum of a subsequence such that no two elements in the subsequence are adjacent in the original list. A subsequence is derived by deleting some or none of the elements such that the relative order of the remaining elements is maintained. For example, for the list [3, 2, 5, 10, 7], if we pick 3 and 10, we get 13. If we pick 2 and 10, we get 12, but the optimal solution here is 3, 5, and 7 which gives us 15. The input consists of multiple test cases. Each test case starts with an integer \'n\' (the number of elements in the list), followed by \'n\' integers representing the list elements. Example: Input: 3 5 3 2 5 10 7 3 3 2 7 4 5 1 1 5 Output: Case #1: 15 Case #2: 10 Case #3: 10 Constraints: 1 <= T <= 100 1 <= n <= 1000 -10^4 <= elements of list <= 10^4 Time limit: 5 sec Provide a function to solve the problem with the input and output as described above. Sample Input: 3 5 3 2 5 10 7 3 3 2 7 4 5 1 1 5 Sample Output: Case #1: 15 Case #2: 10 Case #3: 10","solution":"def max_sum_subsequence_no_adj(nums): if not nums: return 0 if len(nums) == 1: return nums[0] incl = nums[0] excl = 0 for num in nums[1:]: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl) def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] index = 1 for t in range(T): n = int(lines[index]) array = list(map(int, lines[index+1].split())) result = max_sum_subsequence_no_adj(array) results.append(f\\"Case #{t+1}: {result}\\") index += 2 return \\"n\\".join(results)"},{"question":"Farmer John is storing his harvested crops in a series of silos. Each silo has a maximum capacity, and there are exactly N silos. Given the amount of crops that need to be distributed across these silos, Farmer John wants to maximize the amount of wheat that each silo holds because of a special condition in his storage contract that rewards him for fuller silos. Your task is to determine the optimal way to distribute the crops into the silos so none of the silos, if possible, remain completely empty, prioritizing more wheat in fewer silos if it\'s not possible to fill all silos without exceeding their capacities. Constraints: * 1 ≦ N ≦ 100 * 1 ≦ crop ≦ 1,000 * 1 ≦ capacity_i ≦ 1,000 Input The input is given from Standard Input in the following format: N crop capacity_1 capacity_2 ... capacity_N Output Print the maximum total amount of wheat stored in the silos. Examples: Input 3 8 3 6 2 Output 8 Input 4 15 5 5 7 2 Output 15","solution":"def max_wheat_storage(N, crop, capacities): capacities.sort(reverse=True) # sort by descending order of capacity total_wheat_stored = 0 for cap in capacities: if crop == 0: break if cap <= crop: total_wheat_stored += cap crop -= cap else: total_wheat_stored += crop crop = 0 return total_wheat_stored # Example usage: # N = 3 # crop = 8 # capacities = [3, 6, 2] # Result: 8"},{"question":"Given a list of integers, write a program that removes all duplicates from the list and sorts the remaining integers in ascending order. Input The input is given in the following format. n a1 a2 a3 ... an The first line contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the list. The second line contains n integers a1, a2, a3, ..., an (-1000 ≤ ai ≤ 1000). Output Output the sorted list of integers in ascending order, with duplicates removed, in a single line. Examples Input 5 4 2 7 4 2 Output 2 4 7 Input 3 -1 0 -1 Output -1 0 Input 6 5 3 8 6 3 2 Output 2 3 5 6 8","solution":"def remove_duplicates_and_sort(elements): Removes duplicates and sorts the list of integers in ascending order. :param elements: List of integers. :return: List of sorted integers without duplicates. unique_elements = set(elements) sorted_elements = sorted(unique_elements) return sorted_elements"},{"question":"A large company is collecting data from various departments about the tasks that need to be scheduled. Each task has a specific start time and end time, and the goal is to schedule these tasks such that no tasks overlap and the maximum number of tasks can be scheduled. You need to write a program to help them with this task. Given a list of tasks with their start and end times, determine the maximum number of non-overlapping tasks that can be scheduled. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of tasks. - The next n lines each contain two integers, start and end (0 ≤ start < end ≤ 10000) — the start and end times of each task. Output: - Output a single integer, the maximum number of non-overlapping tasks that can be scheduled. Examples Input 4 1 3 2 4 3 5 3 6 Output 2 Input 3 0 5 1 2 3 4 Output 2","solution":"def max_non_overlapping_tasks(n, tasks): # Sort tasks based on their end time tasks.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 # Track the end time of the last selected task last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Lucas loves playing games on a grid with dimensions n x m. Each cell of the grid contains some coins. You can think of the grid as an array of n rows and m columns. Lucas starts from the top-left cell of the grid (cell at (1, 1)) and wants to reach the bottom-right cell (cell at (n, m)). However, Lucas can only move either down or right at any point in time. Lucas wants to know the maximum number of coins he can collect while moving from the top-left to the bottom-right cell of the grid. Can you help him find this maximum number of coins? Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers, the number of coins in each cell of the grid. Each integer will be between 0 and 1000 inclusive. Output Print a single integer — the maximum number of coins Lucas can collect. Examples Input 3 4 1 3 1 4 2 1 2 10 4 3 1 1 Output 20 Note In the test sample Lucas can follow the path: (1, 1) -> (1, 2) -> (2, 2) -> (2, 3) -> (2, 4) -> (3, 4), collecting 1 + 3 + 1 + 2 + 10 + 1 = 18 coins. However, a more optimal path would be: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) -> (3, 4), collecting 1 + 2 + 4 + 3 + 1 + 1 = 20 coins.","solution":"def max_coins(n, m, grid): Returns the maximum number of coins that Lucas can collect while moving from the top-left to the bottom-right of the grid. # Create a DP table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row and first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"You are given a rectangular matrix of non-negative integers. A matrix hotspot is defined as an element in the matrix that actually holds the maximum value from the entire matrix. You are required to find the coordinates of all such hotspots in the matrix and output them in the order they appear as per the row-major order. **Input:** - The first line contains two space-separated integers, M and N, representing the number of rows and columns of the matrix respectively. - The next M lines each contain N space-separated integers, representing the matrix elements. **Output:** - Output the coordinates of all hotspots in the matrix, one pair of coordinates per line. Each pair should be space-separated, where the first value represents the row index and the second value represents the column index. **Constraints:** - 1 ≤ M, N ≤ 1000 - 0 ≤ matrix[i][j] ≤ 1000 **SAMPLE INPUT:** ``` 3 3 1 0 2 3 3 1 2 3 0 ``` **SAMPLE OUTPUT:** ``` 1 0 1 1 2 1 ``` **Explanation:** The maximum value in the entire matrix is 3. The coordinates of the maximum value in the row-major order are (1, 0), (1, 1), and (2, 1).","solution":"def find_hotspots(matrix): Finds the coordinates of matrix hotspots. Parameters: matrix (list of list of int): A rectangular matrix of non-negative integers. Returns: list of tuple: List of coordinates (row, col) of hotspots. max_value = max(max(row) for row in matrix) hotspots = [(i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) if matrix[i][j] == max_value] return hotspots"},{"question":"``` Thinking about the upcoming elections, you\'re interested in the popularity trends of various candidates. To analyze these trends, you are given a list indicating the number of tweets mentioning each candidate over a number of days. You are also given a set of queries where each query asks for the most popular candidate within a given range of days. If there is more than one candidate with the highest number of mentions in the given range, return the candidate with the smallest index. Formally, you are given a 2D list `mentions` of size `n x k`, where `mentions[i][j]` represents the number of times candidate `j` was mentioned on day `i`. You are also given `m` queries, each query given as two integers `l` and `r` (0 ≤ l ≤ r < n), asking for the candidate with the highest total number of mentions from day `l` to day `r` inclusive. Write a function that returns a list of results for each query. Input - An integer `n` indicating the number of days (1 ≤ n ≤ 100,000). - An integer `k` indicating the number of candidates (1 ≤ k ≤ 100). - A 2D list `mentions` of size `n x k` with integers (0 ≤ `mentions[i][j]` ≤ 1000) representing the number of mentions for the candidates on each day. - An integer `m` indicating the number of queries (1 ≤ m ≤ 200,000). - A 2D list `queries` of size `m x 2`, where each row contains two integers `l` and `r` that specify the range of days for each query. Output - Return a list of results for each query, where each result is the index (0-based) of the most popular candidate. Example Input 5 3 [[1, 2, 1], [0, 3, 0], [4, 1, 2], [2, 1, 3], [1, 3, 0]] 3 [[0, 2], [1, 3], [2, 4]] Output [1, 0, 1] Explanation - For the first query (days 0 to 2): Candidate 0 has 1+0+4=5 mentions, candidate 1 has 2+3+1=6 mentions, and candidate 2 has 1+0+2=3 mentions. So candidate 1 is the most popular. - For the second query (days 1 to 3): Candidate 0 has 0+4+2=6 mentions, candidate 1 has 3+1+1=5 mentions, and candidate 2 has 0+2+3=5 mentions. Candidate 0 is the most popular due to higher total mentions. - For the third query (days 2 to 4): Candidate 0 has 4+2+1=7 mentions, candidate 1 has 1+1+3=5 mentions, and candidate 2 has 2+3+0=5 mentions. Candidate 0 is the most popular. ```","solution":"def most_popular_candidates(n, k, mentions, m, queries): def get_popular_candidate(start, end): total_mentions = [0] * k for day in range(start, end + 1): for candidate in range(k): total_mentions[candidate] += mentions[day][candidate] max_mentions = max(total_mentions) for candidate, count in enumerate(total_mentions): if count == max_mentions: return candidate results = [] for query in queries: l, r = query popular_candidate = get_popular_candidate(l, r) results.append(popular_candidate) return results"},{"question":"Prime Factorization Count Problem Statement You are working on a mathematical research project that involves prime factorization of numbers. You\'re tasked with writing a program that computes the prime factorization of a given integer and then counts the number of times each prime factor appears. Given an integer ( X ) (2 leq X leq 10^{12}), output its prime factorization along with the count of each prime factor. Input The input is formatted as follows: - The first line contains an integer ( T ) (1 leq T leq 100), the number of test cases. - The next ( T ) lines each contain a single integer ( X ). Output The output should be formatted as follows: For each test case, print the prime factors of ( X ) in increasing order along with their counts. Each factor and its count should be printed on a new line in the format \\"p c\\", where ( p ) is the prime factor and ( c ) is its count. Print a blank line between the results of each test case. Sample Input ``` 2 18 28 ``` Output for the Sample Input ``` 2 1 3 2 2 2 7 1 ``` Explanation In the first test case, the prime factorization of 18 is ( 2^1 times 3^2 ). Therefore, the output is: ``` 2 1 3 2 ``` In the second test case, the prime factorization of 28 is ( 2^2 times 7^1 ). Therefore, the output is: ``` 2 2 7 1 ```","solution":"def prime_factors_count(x): Returns a dictionary of the prime factors of x and their counts. factors = {} # Check for the number of 2s that divide x while x % 2 == 0: if 2 in factors: factors[2] += 1 else: factors[2] = 1 x //= 2 # x must be odd at this point, so we can skip even numbers for i in range(3, int(x**0.5) + 1, 2): while x % i == 0: if i in factors: factors[i] += 1 else: factors[i] = 1 x //= i # This condition is to check if x is a prime number greater than 2 if x > 2: factors[x] = 1 return factors def prime_factorizations(test_cases): Given a list of test cases with each element being an integer X, returns a list of dictionaries each representing the prime factor counts for each X. results = [] for x in test_cases: results.append(prime_factors_count(x)) return results"},{"question":"In a competitive programming contest, participants receive scores for each problem they solve. The score for each problem depends on the number of attempts it took to solve the problem and the difficulty level of the problem. Your task is to calculate the total score for each participant based on these parameters for a given contest. Each participant\'s score for a problem is calculated as follows: - If the problem was solved on the first attempt, they receive the full score equal to the difficulty level of the problem. - For each subsequent attempt, the score decreases by 1 point, down to a minimum of 1 point per problem. Given the number of problems, difficulty levels of these problems, and the number of attempts taken by each participant to solve each problem, calculate the total score for each participant. Input The first line contains an integer P, denoting the number of participants. The second line contains an integer N, denoting the number of problems in the contest. The third line contains N integers representing the difficulty levels of the problems. The subsequent P lines each contain N integers representing the number of attempts taken by each participant to solve each problem. Output For each participant, print their total score on a new line. Constraints 1 <= P <= 100 1 <= N <= 100 1 <= Difficulty Level <= 1000 1 <= Attempts <= 100 Example Input: 3 3 4 5 6 1 2 1 3 1 2 2 2 2 Output: 15 11 12","solution":"def calculate_total_scores(P, N, difficulties, attempts): scores = [] for participant_attempts in attempts: total_score = 0 for i in range(N): if participant_attempts[i] == 1: total_score += difficulties[i] else: # Decrease the score by (attempts - 1), but minimum score is 1 total_score += max(difficulties[i] - (participant_attempts[i] - 1), 1) scores.append(total_score) return scores"},{"question":"You are given an array of integers and a target sum. Your goal is to determine if there exists a pair of distinct elements in the array whose sum is equal to the target sum. If such a pair exists, return `True`, otherwise return `False`. Constraints * 2 ≤ number of elements in array ≤ 10^5 * -10^9 ≤ array elements ≤ 10^9 * -10^9 ≤ target sum ≤ 10^9 Input The input is given in the following format: n target a_1 a_2 a_3 ... a_n Output Print `True` if a pair exists whose sum is equal to the target sum, otherwise print `False`. Examples Input 6 9 1 2 3 4 5 6 Output True Input 5 10 2 1 5 3 9 Output True Input 4 8 1 1 1 2 Output False Input 3 5 3 3 3 Output False","solution":"def has_pair_with_sum(arr, target): Determines if there exists a pair of distinct elements in the array whose sum is equal to the target sum. :param arr: List of integers :param target: Target sum :return: True if such a pair exists, otherwise False seen_numbers = set() for num in arr: if (target - num) in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"You are given an array of n integers. Your task is to find two distinct indices i and j such that the absolute difference between the values at these indices is exactly k. Input The first line contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of elements in the array and the target difference, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output two distinct indices i and j (1 ≤ i, j ≤ n) such that |ai - aj| = k. It is guaranteed that there is always at least one pair of indices that satisfies the condition. If there are several such pairs, you can output any of them. Examples Input 5 3 1 5 3 4 2 Output 1 4 Input 4 2 1 2 3 5 Output 1 2 Note In the first example, for the indices 1 and 4, the values are 1 and 4, and their absolute difference is |1-4| = 3, which matches the target difference k. In the second example, for the indices 1 and 2, the values are 1 and 2, and their absolute difference is |1-2| = 1, which does not match the target difference. However, the pair (1, 3) with values 1 and 3 has an absolute difference of |1-3| = 2, which matches the target difference k.","solution":"def find_indices_with_difference(arr, n, k): value_to_index = {} for index, value in enumerate(arr): if (value + k) in value_to_index: return [value_to_index[value + k] + 1, index + 1] if (value - k) in value_to_index: return [value_to_index[value - k] + 1, index + 1] value_to_index[value] = index return [] # Example usage: # n = 5 # k = 3 # arr = [1, 5, 3, 4, 2] # print(find_indices_with_difference(arr, n, k)) # Output: [1, 4]"},{"question":"Given a list of positive integers, we define a \\"jump sequence\\" as follows: starting from the first element in the list, you can jump to any element that is exactly k steps ahead of the current one. Write a function `find_max_reach` that takes a list of positive integers `arr` and an integer `k` as its parameters and returns the maximum value that can be reached by following the jump sequence. Input: - The first line contains an integer N, the number of elements in `arr`. - The second line contains N space-separated integers, the elements of `arr`. - The third line contains an integer k, the number of steps you can jump at a time. Output: - Return the maximum value that can be reached by starting at the first element of the list and following the jump sequence. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ arr[i] ≤ 10^6 - 1 ≤ k ≤ N SAMPLE INPUT 6 5 3 8 6 12 10 2 SAMPLE OUTPUT 12 Explanation: Starting from the first element (5), you can jump to the third element (8), then jump to the fifth element (12). Hence, the maximum value that can be reached is 12.","solution":"def find_max_reach(arr, k): Returns the maximum value that can be reached by following the jump sequence. :param arr: List of positive integers :param k: Integer, number of steps you can jump at a time :return: Maximum value reachable in the sequence n = len(arr) max_val = arr[0] # Start from the first element for i in range(0, n, k): max_val = max(max_val, arr[i]) return max_val"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Given a list of integers `arr` and an integer `k`, write a function to find the minimum number of swaps required to bring all the numbers less than or equal to `k` together. The function must return an integer representing this minimum swap count. # Constraints - The list `arr` will contain between 1 and 100,000 integers. - Each integer in the list `arr` will be between 1 and 1,000,000. - The value of `k` will also be between 1 and 1,000,000. # Example Input ``` arr = [2, 1, 5, 6, 3] k = 3 ``` Output ``` 1 ``` Explanation We need to bring all numbers <= 3 together. The array can be transformed to `[2, 1, 3, 5, 6]` with just 1 swap (3 and 5). # Function Signature ```python def min_swaps(arr: List[int], k: int) -> int: # Your code here ```","solution":"def min_swaps(arr, k): Return the minimum number of swaps required to bring all numbers <= k together. # Count the number of elements which are less than or equal to k count = sum(1 for x in arr if x <= k) # Find the number of elements greater than k in the first \'count\' elements bad = sum(1 for x in arr[:count] if x > k) # Initialize the minimum swaps to the number of greater elements in the first window min_swaps = bad # Use the sliding window technique to find the minimum swaps in other windows for i in range(len(arr) - count): if arr[i] > k: bad -= 1 if arr[i + count] > k: bad += 1 min_swaps = min(min_swaps, bad) return min_swaps"},{"question":"In a kingdom far away, there is a forest filled with magical trees. Each tree has a certain number of magic fruits growing on it, represented by an integer array. The king has a rule that every day the knight can collect magic fruits from trees but can only move forward and can\'t go back. Also, the knight can only collect from K consecutive trees in one day. Given the integer array representing the number of magic fruits on each tree, can you help the knight figure out the maximum number of magic fruits he can collect in one day? Input Format First line contains an integer N, the number of trees in the forest. Second line contains an integer K, the number of consecutive trees the knight can collect from in one day. Third line contains N integers, representing the number of magic fruits on each tree. Output Format An integer representing the maximum number of magic fruits the knight can collect in one day. Constraints 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ Magic Fruits per Tree ≤ 10^4 SAMPLE INPUT 5 3 1 2 3 4 5 SAMPLE OUTPUT 12 Explanation In this example, the knight can collect from the following groups of trees: - Trees 1 to 3 (1 + 2 + 3 = 6) - Trees 2 to 4 (2 + 3 + 4 = 9) - Trees 3 to 5 (3 + 4 + 5 = 12) Out of these, the maximum number of magic fruits he can collect is 12.","solution":"def max_fruits(N, K, fruits): Returns the maximum number of magic fruits the knight can collect in one day. :param N: int - The number of trees in the forest. :param K: int - The number of consecutive trees the knight can collect from in one day. :param fruits: List[int] - The number of magic fruits on each tree. :return: int - The maximum number of magic fruits the knight can collect in one day. # Initial sum of first K trees max_sum = current_sum = sum(fruits[:K]) # Slide over the array from tree 1 to tree (N-K+1) for i in range(1, N-K+1): # update the window sum current_sum = current_sum - fruits[i-1] + fruits[i+K-1] # update max_sum if we found a new maximum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of integers `nums`, and you are required to perform a series of operations on it. For each operation, you can choose any two elements in the array, `x` and `y` (x != y), remove them, and insert their sum `x + y` back into the array. The cost of each operation is defined as `x + y`. Your task is to find the minimum total cost required to reduce the array to a single element. Input The first line contains a single integer `T` (1 ≤ T ≤ 1000) — the number of test cases. For each test case, the first line contains an integer `n` (2 ≤ n ≤ 1000) — the size of the array. The second line contains `n` integers separated by spaces, representing the elements of the array. Output For each test case, output a single integer representing the minimum cost to reduce the array to a single element. Example Input 2 3 1 2 3 5 1 2 3 4 5 Output 9 33 Note In the first test case, we can perform the following operations: 1. Choose 1 and 2, cost = 1 + 2 = 3, array becomes [3, 3]. 2. Choose 3 and 3, cost = 3 + 3 = 6, array becomes [6]. Total cost = 3 + 6 = 9. In the second test case: 1. Choose 1 and 2, cost = 1 + 2 = 3, array becomes [3, 3, 4, 5]. 2. Choose 3 and 3, cost = 3 + 3 = 6, array becomes [6, 4, 5]. 3. Choose 4 and 5, cost = 4 + 5 = 9, array becomes [6, 9]. 4. Choose 6 and 9, cost = 6 + 9 = 15, array becomes [15]. Total cost = 3 + 6 + 9 + 15 = 33.","solution":"import heapq def minimum_cost_to_reduce_array(arr): # Use a min-heap to always have access to the smallest elements heapq.heapify(arr) total_cost = 0 while len(arr) > 1: # Extract the two smallest elements x = heapq.heappop(arr) y = heapq.heappop(arr) # The cost to combine them is their sum cost = x + y total_cost += cost # Insert the new combined element back into the heap heapq.heappush(arr, cost) return total_cost def main(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(minimum_cost_to_reduce_array(arr)) return results"},{"question":"Alicia is working on a project that involves efficient data storage and retrieval. She is particularly interested in minimizing the length of a sequence while maintaining the uniqueness of its elements. Specifically, Alicia has a sequence of integers and she wants to remove the minimum number of integers so that all remaining elements in the sequence form a strictly increasing sequence. A strictly increasing sequence is one where each element is greater than the one before it. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line of each test case contains n space-separated integers representing the sequence (1 ≤ a_i ≤ 10^9). Output For each test case, print two lines. The first line should contain the length of the resulting strictly increasing sequence. The second line should contain the strictly increasing sequence in order. Example Input 3 6 2 2 2 3 3 4 5 1 1 2 3 5 5 5 5 5 5 5 Output 3 2 3 4 4 1 2 3 5 1 5 Explanation In the first test case, after removing the necessary elements, the strictly increasing sequence can be \\"2, 3, 4\\". In the second test case, \\"1, 2, 3, 5\\" is already a strictly increasing sequence. In the third test case, the only strictly increasing sequence possible is \\"5\\".","solution":"def create_strictly_increasing_sequence(n, sequence): Given a sequence of integers, this function creates a strictly increasing sequence by removing the minimal number of integers. unique_sequence = list(sorted(set(sequence))) return len(unique_sequence), unique_sequence def process_multiple_cases(input_data): Process multiple test cases for creating strictly increasing sequences. results = [] t = input_data[0] index = 1 for _ in range(t): n = input_data[index] sequence = input_data[index + 1] length, incrementing_sequence = create_strictly_increasing_sequence(n, sequence) results.append((length, incrementing_sequence)) index += 2 return results # Example input processing input_data = [3, 6, [2, 2, 2, 3, 3, 4], 5, [1, 1, 2, 3, 5], 5, [5, 5, 5, 5, 5]] output_data = process_multiple_cases(input_data) for length, sequence in output_data: print(length) print(\\" \\".join(map(str, sequence)))"},{"question":"You\'re given an array of integers where every element appears twice except for one. Find that single one. Your algorithm should have a linear runtime complexity. You must implement your solution without using extra memory. Input The input consists of multiple lines: - The first line contains a single integer n, the size of the array. - The second line contains n integers separated by spaces, the elements of the array. Output Output a single integer, the element that appears only once in the array. Example Input 5 2 2 1 3 1 Output 3 Note In the given example, 3 is the only element that appears once. Hints: 1. Consider using bitwise operations to achieve the required time complexity. 2. XOR can be a valuable tool for solving this problem efficiently.","solution":"def find_single_number(arr): Returns the single number in the array where every element appears twice except for one. Uses XOR to find the single number in O(n) time and O(1) space. Parameters: arr (list): List of integers where every element appears twice except for one. Returns: int: The single number. single_number = 0 for num in arr: single_number ^= num return single_number"},{"question":"Design a function that takes a string as input and returns the shortest palindrome that can be formed by adding characters to the end of the string. Input: A single string `s` of length 1 ≤ |s| ≤ 1000 consisting of lowercase English letters only. Output: A single string which is the shortest palindrome formed. Examples: Input: race Output: racecar Input: aab Output: aabaa Explanation: - In the first example, by adding \'car\' to the end of \'race\', we get \'racecar\' which is a palindrome and the shortest possible extra characters added. - In the second example, by adding \'aa\' to the end of \'aab\', we get \'aabaa\' which is the shortest palindrome formed.","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be formed by adding characters to the end of the given string s. if s == s[::-1]: return s for i in range(len(s)): if s[i:] == s[i:][::-1]: return s + s[:i][::-1] return s + s[:-1][::-1]"},{"question":"You are given an integer array representing a height map where the width of each bar is 1. Write a function that computes how much water it is able to trap after raining. Input - An integer array where each element is a non-negative integer representing the height at that point. Output - An integer representing the total amount of water that can be trapped. Examples Input [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output 6 Input [4, 2, 0, 3, 2, 5] Output 9 Explanation For the first example: - Indexes with trapped water: (2,1), (1, 3), (3, 2), (2, 4). For the second example: - Indexes with trapped water: (3,1), (1, 4), (5, 2), (4, 5). Total sum = 9.","solution":"def trap(height): Calculate how much water it is able to trap after raining. Parameters: height (list of int): A list of non-negative integers representing the height at each point. Returns: int: The total amount of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You are tasked with developing a robot that can navigate a simple grid-based town. The town can be represented as a grid with `n` rows and `m` columns, each cell representing a possible position for the robot. There are certain obstacles in the town that the robot cannot pass through. The robot can start from any cell and has to reach a specified destination cell. It can move in four directions: up (‘U’), down (‘D’), left (‘L’), and right (‘R’). The objective is to determine the minimum number of moves required for the robot to reach the destination, or to identify if it’s impossible. Given the dimensions of the grid, the starting position, the destination position, and the list of obstacles, write a program to find the minimum number of moves needed by the robot to reach the destination. If it is not possible to reach the destination, return -1. # Input Format The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid respectively. The second line contains four integers, `startX`, `startY`, `endX`, and `endY` (0 ≤ startX, startY, endX, endY < n, m), where `(startX, startY)` is the starting position and `(endX, endY)` is the destination position. The third line contains a single integer `k` (0 ≤ k ≤ 500000), representing the number of obstacles. Each of the next `k` lines contains two integers `obstacleX` and `obstacleY` (0 ≤ obstacleX < n, 0 ≤ obstacleY < m), representing the position of an obstacle. # Output Format Print a single integer — the minimum number of moves required for the robot to reach the destination from the starting position. If it is not possible to reach the destination, print `-1`. # Example Input 1 ``` 5 5 0 0 4 4 3 1 1 1 2 3 3 ``` Output 1 ``` 8 ``` Input 2 ``` 4 4 0 0 3 3 2 1 1 2 2 ``` Output 2 ``` 6 ``` Input 3 ``` 3 3 0 0 2 2 4 1 0 1 1 1 2 2 1 ``` Output 3 ``` -1 ``` # Note In the first example, the robot can follow the sequence of moves: R, R, R, U, U, U, R, R to reach the destination with a total of 8 moves, avoiding obstacles in the process. In the second example, the robot can follow the sequence: R, D, D, R, D, R to reach the destination in 6 moves. In the third example, it is impossible for the robot to reach the destination as the obstacles block all possible paths to the destination.","solution":"from collections import deque def min_moves(n, m, startX, startY, endX, endY, obstacles): Computes the minimum number of moves required for the robot to reach the destination. If it is not possible to reach the destination, returns -1. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid startX (int): starting position x-coordinate startY (int): starting position y-coordinate endX (int): destination x-coordinate endY (int): destination y-coordinate obstacles (list of tuples): list of obstacle coordinates Returns: int: minimum number of moves to reach the destination or -1 if unreachable if (startX, startY) == (endX, endY): return 0 # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the grid and mark obstacles grid = [[0 for _ in range(m)] for _ in range(n)] for ox, oy in obstacles: grid[ox][oy] = 1 # BFS initialization queue = deque([(startX, startY)]) visited = set((startX, startY)) moves = 0 while queue: moves += 1 for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: if (nx, ny) == (endX, endY): return moves queue.append((nx, ny)) visited.add((nx, ny)) return -1"},{"question":"You are given a list of integers. Your task is to split this list into the minimum number of sublists, so that each sublist is an increasing sequence. An increasing sequence is one where each element is strictly greater than the previous element. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the list. Output Print the minimum number of sublists such that each sublist is an increasing sequence. Example Input 5 3 2 4 1 5 Output 3 Explanation One way to split the list [3, 2, 4, 1, 5] into the minimum number of increasing sublists is: - [3] - [2, 4] - [1, 5] So the minimum number of sublists is 3.","solution":"def min_increasing_sublists(n, a): This function takes the number of elements n and a list of integers a and returns the minimum number of sublists such that each sublist is an increasing sequence. if n == 0: return 0 sublists_count = 1 # Initial count of sublists # Iterate through the list and count sublists whenever the sequence decreases for i in range(1, n): if a[i] <= a[i-1]: sublists_count += 1 return sublists_count # Example use n = 5 a = [3, 2, 4, 1, 5] print(min_increasing_sublists(n, a)) # Output: 3"},{"question":"Alice has a collection of n positive integers. She wants to find whether there exists a subsequence (not necessarily contiguous) of these numbers such that the product of the elements in the subsequence is a perfect square. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of integers in the collection. The second line contains n integers b1, b2, ... bn (1 ≤ bi ≤ 100). Output Print YES if there exists a subsequence whose product is a perfect square. Otherwise, print NO. Examples Input 4 2 3 4 6 Output YES Input 3 2 3 5 Output NO Input 5 1 2 2 3 3 Output YES Note In the first example, the subsequence [2, 2] has a product (2*2 = 4) which is a perfect square. In the second example, no subsequence can be chosen such that its product is a perfect square. In the third example, the subsequence [1, 3, 3] has a product (1*3*3 = 9) which is a perfect square.","solution":"def is_perfect_square_subsequence(n, arr): from collections import defaultdict from math import isqrt # Function to calculate the prime factorization def prime_factors(num): i = 2 factors = defaultdict(int) while i * i <= num: while (num % i) == 0: factors[i] += 1 num //= i i += 1 if num > 1: factors[num] += 1 return factors # Function to check if the product of all numbers in the sequence is perfect square def is_perfect_square(product_factors): for count in product_factors.values(): if count % 2 != 0: return False return True # Aggregate all prime factor counts aggregate_factors = defaultdict(int) for number in arr: factors = prime_factors(number) for prime, count in factors.items(): aggregate_factors[prime] += count # Check if the aggregate of factors forms a perfect square return \\"YES\\" if is_perfect_square(aggregate_factors) else \\"NO\\""},{"question":"Kafka the bureaucrat is trying to optimize workflows in his department. He wants a system where employees can be assigned jobs dynamically based on their skills and job priorities. Each job has a unique skill requirement, and each employee has a unique skill that determines if they can complete the job. # Problem Statement Given a list of jobs, each with a skill requirement, and a list of employees, each with a specific skill value, find the minimum number of employees required to complete all jobs. Each employee can complete only one job. # Input - The first line contains T, the number of test cases. - For each test case: - The first line contains two integers, J (the number of jobs) and E (the number of employees). - The next line contains J integers, representing the skill requirements of the jobs. - The next line contains E integers, representing the skills of the employees. # Output For each test case, output the minimum number of employees required to complete all jobs. If it is not possible to complete all jobs, output -1. # Constraints - T ≤ 100 - 1 ≤ J, E ≤ 1000 - 1 ≤ skill values ≤ 1000 # Example Input ``` 2 3 4 4 5 6 2 6 4 8 3 2 3 2 1 4 6 ``` Output ``` 3 -1 ``` In the first test case: - Jobs require skills 4, 5, and 6. - Employees have skills 2, 6, 4, and 8. - Employees with skills 4, 6, and 8 can be selected to complete the jobs. In the second test case: - Jobs require skills 3, 2, and 1. - Employees have skills 4 and 6. - It is not possible to complete all jobs with the available employees.","solution":"def min_employees_required_to_complete_jobs(T, test_cases): results = [] for i in range(T): J, E, job_skills, employee_skills = test_cases[i] job_skills.sort() employee_skills.sort() job_index = 0 employee_index = 0 while job_index < J and employee_index < E: if employee_skills[employee_index] >= job_skills[job_index]: job_index += 1 employee_index += 1 if job_index == J: results.append(J) else: results.append(-1) return results"},{"question":"There is an ancient village that follows a very unique communication system. The villagers communicate by rhythmically knocking on the ground, and there are certain rules that they follow: - A single knock (represented by \\"1\\") costs 1 hit point. - A double knock (represented by \\"2\\") costs 2 hit points. - A triple knock (represented by \\"3\\") costs 4 hit points. A message in this system is represented by a string containing only the characters \'1\', \'2\', and \'3\'. Each of these characters can repeat multiple times. Your task is to calculate the total hit points required to deliver a message given the rules above. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) — the message in the ancient village\'s knock system. Output Print a single integer — the total hit points required to deliver the message. Examples Input 12321 Output 10 Input 333 Output 12 Note In the first sample, the cost is calculated as follows: - \'1\' costs 1 hit point, - \'2\' costs 2 hit points, - \'3\' costs 4 hit points, - another \'2\' costs 2 hit points, - another \'1\' costs 1 hit point. Thus, the total cost is 1 + 2 + 4 + 2 + 1 = 10 hit points. In the second sample, the cost is calculated as follows: - \'3\' costs 4 hit points, - another \'3\' costs 4 hit points, - another \'3\' costs 4 hit points. Thus, the total cost is 4 + 4 + 4 = 12 hit points.","solution":"def calculate_hit_points(message): Calculate total hit points required based on the message rules. Parameters: message (str): The string containing the message. Returns: int: Total hit points required. hit_points = 0 for char in message: if char == \'1\': hit_points += 1 elif char == \'2\': hit_points += 2 elif char == \'3\': hit_points += 4 return hit_points"},{"question":"You are given a list of numbers. You need to find and print the sum of the largest and smallest number in that list. Constraints * The length of the list is between 1 and 100 (inclusive). * Each number in the list is an integer between -1000 and 1000 (inclusive). Input Input is given from Standard Input in the following format: N num1 num2 num3 ... numN Where: * N is the number of elements in the list. * num1, num2, ..., numN are the elements of the list. Output Print a single integer which is the sum of the largest and smallest number in the list. Examples Input 5 1 -3 7 0 -1 Output 4 Input 3 8 3 9 Output 11","solution":"def sum_largest_and_smallest(nums): Returns the sum of the largest and smallest number in the list. # Find the smallest and largest numbers in the list smallest_num = min(nums) largest_num = max(nums) # Return the sum of the largest and smallest numbers return smallest_num + largest_num # Example usage: # nums = [1, -3, 7, 0, -1] # result = sum_largest_and_smallest(nums) # print(result) # Output should be 4"},{"question":"You are given a string consisting of the characters \'0\' and \'1\'. Your task is to determine the number of substrings that start and end with \'1\'. Input The input contains a single string s of length n (1 ≤ n ≤ 10^5), consisting of only \'0\'s and \'1\'s. Output Output a single integer, the number of substrings that start and end with \'1\'. Example Input 00100101 Output 6 Note For the input string \'00100101\', the substrings that start and end with \'1\' are: - \\"1\\" (last character) - \\"1\\" (third character) - \\"101\\" (last three characters) - \\"1001\\" (fourth to seventh character) - \\"1001\\" (third to sixth character) - \\"100101\\" (third to last character) Hence, the total number of such substrings is 6.","solution":"def count_substrings(s): Returns the number of substrings that start and end with \'1\'. count_of_ones = s.count(\'1\') # The number of such substrings is the combination count_of_ones choose 2 plus the count_of_ones itself return (count_of_ones * (count_of_ones - 1)) // 2 + count_of_ones"},{"question":"You are creating a social media app and you need to implement a feature that allows users to tag each other in comments. You want to verify that no circular tagging occurs, meaning that no user can tag another user who has previously tagged them directly or indirectly in the same conversation thread. Each conversation thread is represented as a set of directed edges where each edge (u, v) represents user u tagging user v. Your task is to determine whether there are any circular taggings in the conversation threads. Input The first line contains a single integer t (1 ≤ t ≤ 50) indicating the number of test cases. Each test case begins with a single integer n (1 ≤ n ≤ 100), the number of users involved in the conversation thread, followed by an integer m (1 ≤ m ≤ 200), the number of tagging actions. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing that user u tags user v. Output For each test case, output \\"YES\\" if there is a circular tagging, otherwise \\"NO\\". Example Input: 3 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 2 5 4 1 2 2 3 3 4 4 5 Output: YES YES NO","solution":"from collections import defaultdict, deque def has_circular_tagging(n, m, tags): graph = defaultdict(list) for u, v in tags: graph[u].append(v) def is_cyclic(v, visited, recStack): visited[v] = True recStack[v] = True for neighbour in graph[v]: if not visited[neighbour]: if is_cyclic(neighbour, visited, recStack): return True elif recStack[neighbour]: return True recStack[v] = False return False visited = [False] * (n + 1) recStack = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if is_cyclic(node, visited, recStack): return \\"YES\\" return \\"NO\\" def check_tagging_threads(t, test_cases): results = [] for case in test_cases: n, m, tags = case results.append(has_circular_tagging(n, m, tags)) return results"},{"question":"There are n unique books, each identified by a unique number from 1 to n, scattered in a randomly ordered stack. You can only pick up one book at a time from the top of the stack. Your task is to sort these books such that by the time the final book is picked up, the stack will be in ascending order from top to bottom. Write a program that outputs the minimum number of moves required to sort the stack in ascending order. input The input consists of multiple datasets. Each dataset is given in the following format. The input ends on a line containing zero. On the first line of each dataset, a single integer n (1 ≤ n ≤ 100000) is written, representing the number of books. The following line contains n integers separated by spaces, representing the initial order of the books from top to bottom, where each integer represents a unique book identifier from 1 to n. The number of datasets does not exceed 5. output Outputs an integer on one line for each dataset. Examples Input 5 4 3 1 2 5 3 2 3 1 6 6 5 4 3 2 1 0 Output 3 2 5 Input None Output None","solution":"def minimum_moves_to_sort_stack(n, stack): Returns the minimum number of moves required to sort the stack in ascending order. if n == 0: return 0 expected_book = 1 moves = 0 for book in stack: if book == expected_book: expected_book += 1 else: moves += 1 return moves def process_multiple_datasets(input_data): input_lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): n = int(input_lines[index]) if n == 0: break stack = list(map(int, input_lines[index + 1].strip().split())) results.append(minimum_moves_to_sort_stack(n, stack)) index += 2 return results"},{"question":"You are given a grid of size n × m, where each cell in the grid contains a single lowercase English letter. You need to determine the size of the largest rectangle that can be formed using only one type of letter. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m characters, representing the grid. Output Print a single integer — the area of the largest rectangle that can be formed using only one letter. Examples Input 3 3 aab abb bbb Output 4 Input 4 5 abcde fghij klmno pqrst Output 1 Input 2 2 aa aa Output 4 Note In the first example, the grid is: a a b a b b b b b The largest rectangle that can be formed using one type of letter is of size 2x2 using the letter \'b\', so the area is 4. In the second example, each letter is unique, so the largest rectangle has size 1x1, and the area is 1. In the third example, the entire grid can be used, forming a 2x2 rectangle with the letter \'a\'. Thus, the area is 4.","solution":"def largest_rectangle_area(grid): n = len(grid) if n == 0: return 0 m = len(grid[0]) if m == 0: return 0 # Transform the grid into height matrix for each letter heights = {chr(i): [0] * m for i in range(ord(\'a\'), ord(\'z\') + 1)} max_area = 0 for i in range(n): for j in range(m): letter = grid[i][j] if i == 0: heights[letter][j] = 1 else: heights[letter][j] = heights[letter][j] + 1 if grid[i][j] == grid[i - 1][j] else 1 for letter, height in heights.items(): max_area = max(max_area, largest_histogram_area(height)) return max_area def largest_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of employees and their direct reports in a company, write a program to determine the hierarchical depth of the company\'s organizational structure. The hierarchical depth (or height) is the number of levels of management from the topmost manager down to the lowest level employee who has no subordinate. Input Start with an integer N (1 ≤ N ≤ 100), which indicates the number of employees. Following this, there are N lines of input, each representing one employee. An employee is represented by their name (a unique string of up to 50 characters) followed by names of their direct reports (separated by spaces). If an employee has no direct reports, they are represented by just their name. Output The program should output a single integer representing the hierarchical depth of the organizational structure. Example Input 5 Alice Bob Charlie Bob David Eva Charlie David Eva Output 3","solution":"def find_hierarchical_depth(data): from collections import defaultdict, deque # Step 1: Create the graph and in-degree counter graph = defaultdict(list) in_degree = defaultdict(int) for entry in data: entries = entry.split() manager = entries[0] reports = entries[1:] for report in reports: graph[manager].append(report) in_degree[report] += 1 if manager not in in_degree: in_degree[manager] = 0 # Step 2: Find the root (the topmost manager) queue = deque([node for node in in_degree if in_degree[node] == 0]) # Step 3: Perform BFS/DFS to determine the hierarchical depth depth = 0 while queue: depth += 1 for _ in range(len(queue)): curr = queue.popleft() for subordinate in graph[curr]: queue.append(subordinate) return depth # Example usage with given input format def process_input(input_list): n = int(input_list[0]) data = input_list[1:n+1] return find_hierarchical_depth(data) # Example input input_list = [ \\"5\\", \\"Alice Bob Charlie\\", \\"Bob David Eva\\", \\"Charlie\\", \\"David\\", \\"Eva\\" ] print(process_input(input_list)) # Expected output is 3"},{"question":"A group of friends is planning a cycling trip. The city\'s roads can be represented as a directed graph, where intersections are nodes, and the roads between intersections are directed edges. Each road has a certain length in kilometers and a maximum travel time in minutes. Given a starting intersection, a target intersection, and the maximum number of nodes each friend can include in their travel path, determine the minimum possible travel time to reach the target intersection from the starting intersection without exceeding the length of the travel path in terms of the number of nodes (including the starting and target intersections). Write a program that takes the number of intersections, roads, the starting intersection, the target intersection, and the maximum number of nodes allowed in the path. The program should output the minimum travel time needed to reach the target intersection from the starting intersection. If it is not possible to reach the target within the given constraints, the program should output `-1`. **Input** The first line contains four integers n, m, s, t, and k (2 ≤ n ≤ 300, 1 ≤ m ≤ 10000, 1 ≤ s, t ≤ n, 2 ≤ k ≤ n) - the number of intersections, the number of roads, the starting intersection, the target intersection, and the maximum number of nodes allowed in the travel path, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a road from intersection u to intersection v with a travel time of w minutes. **Output** Output the minimum travel time to reach the target intersection from the starting intersection with a path not exceeding k nodes, or `-1` if it is not possible. **Example** ``` Input: 4 5 1 4 3 1 2 10 2 3 5 1 3 15 3 4 10 2 4 20 Output: 25 ``` ``` Input: 3 3 1 3 2 1 2 5 2 3 10 1 3 15 Output: 15 ``` ``` Input: 4 4 1 4 2 1 2 10 2 3 10 2 4 25 3 4 5 Output: -1 ```","solution":"import heapq def find_min_travel_time(n, m, s, t, k, roads): adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((v, w)) pq = [(0, s, 1)] distances = [[float(\'inf\')] * (k + 1) for _ in range(n + 1)] distances[s][1] = 0 while pq: current_time, current_node, current_steps = heapq.heappop(pq) if current_node == t and current_steps <= k: return current_time if current_steps >= k: continue for next_node, travel_time in adj[current_node]: new_time = current_time + travel_time new_steps = current_steps + 1 if new_time < distances[next_node][new_steps]: distances[next_node][new_steps] = new_time heapq.heappush(pq, (new_time, next_node, new_steps)) return -1 # Example usage: # Input: # n = 4, m = 5, s = 1, t = 4, k = 3 # roads = [(1, 2, 10), (2, 3, 5), (1, 3, 15), (3, 4, 10), (2, 4, 20)] # Output: 25 roads = [(1, 2, 10), (2, 3, 5), (1, 3, 15), (3, 4, 10), (2, 4, 20)] print(find_min_travel_time(4, 5, 1, 4, 3, roads))"},{"question":"Given a string s consisting of lowercase Latin letters, the challenge is to reorganize the string such that no two adjacent characters are the same. If such a reorganization is possible, return any valid result. If it is not possible, return an empty string. Input The only line of the input contains the string s. The length of s is between 1 and 500, inclusive. Output Print a reorganized version of the string s such that no two adjacent characters are the same. If it is not possible to achieve such a reorganization, print an empty string. Example Input aab Output aba Input aaab Output","solution":"from heapq import heappop, heappush from collections import Counter def reorganize_string(s): count = Counter(s) max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_char and prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 reorganized = \'\'.join(result) if len(reorganized) != len(s): return \\"\\" return reorganized"},{"question":"Given a sequence of integers, find the maximum sum of any contiguous subarray of the sequence. Constraints * 1 ≤ Length of sequence ≤ 10^5 * -10^4 ≤ Each integer in the sequence ≤ 10^4 Input The input consists of two lines: - The first line contains an integer n, the length of the sequence. - The second line contains n integers, representing the elements of the sequence. Output Print a single integer representing the maximum sum of any contiguous subarray of the sequence. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 -2 5 Output 9 Input 7 -2 -3 4 -1 -2 1 5 -3 Output 7","solution":"def max_subarray_sum(n, seq): Returns the maximum sum of any contiguous subarray of the given sequence. Uses Kadane\'s algorithm. # Initialize variables to store the maximum sum and the current sum max_sum = seq[0] current_sum = seq[0] for i in range(1, n): # Update the current sum to include the current element # or just the current element if it starts a new subarray current_sum = max(seq[i], current_sum + seq[i]) # Update the maximum sum if the current sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Polycarpus was given a new task at the \\"Binary Cat\\" cafe: he needs to track the types of meals ordered by the customers. Every customer orders one type of meal, and at different times, the orders can be either added or removed from the active order list. Polycarpus wants to know the minimum number of unique types of meals that could have been ordered, given a record of added and removed orders. You are given a string that represents the sequence of meals ordered and removed. Each \\"A\\" character in the string represents a meal being added to the orders, and each \\"R\\" character represents a meal being removed from the orders. All orders and removals are recorded sequentially. Input The only line of the input contains a sequence of characters \\"A\\" and \\"R\\", with each character written one after another without any separators. The characters are written in the order the corresponding events occurred. The given sequence has a length from 1 to 300 characters, inclusive. Output Print the minimum number of unique types of meals that could have been ordered at some point during the sequence. Examples Input AAAARRA Output 1 Input ARRARR Output 2","solution":"def min_unique_meals(order_sequence): Returns the minimum number of unique types of meals that could have been ordered. # if there are no \\"A\\" in the sequence, no meal is ordered if \'A\' not in order_sequence: return 0 # If there is at least one \\"A\\", then at least one type of meal is ordered min_meals = 1 return min_meals"},{"question":"# Password Validator Write a Python program to validate the strength of a password based on multiple criteria. The program should evaluate if the password meets the following conditions: 1. **Length**: At least 8 characters. 2. **Uppercase Letters**: Contains at least 1 uppercase letter (A-Z). 3. **Lowercase Letters**: Contains at least 1 lowercase letter (a-z). 4. **Numbers**: Contains at least 1 number (0-9). 5. **Special Characters**: Contains at least 1 special character (e.g. @, #, , %, &, !, ?). The program should take an integer T as input, followed by T lines, each containing a string representing the password to be validated. The program should output whether each password is \\"Strong\\" or \\"Weak\\" based on the conditions provided. # Input - The first line of input contains an integer T, denoting the number of passwords to validate. - The next T lines contain a string each, representing the password to be validated. Constraints - 1 ≤ T ≤ 10^3 - 1 ≤ Length of the password ≤ 10^6 # Output - For each password, output \\"Strong\\" if it meets all the criteria, otherwise output \\"Weak\\". # Examples Input ``` 3 Password123! weakpass StrongPass1 ``` Output ``` Strong Weak Strong ``` # Explanation - \\"Password123!\\" contains at least 8 characters, at least 1 uppercase letter, at least 1 lowercase letter, at least 1 number, and at least 1 special character, so it is \\"Strong\\". - \\"weakpass\\" does not have any uppercase letters, numbers, or special characters, so it is \\"Weak\\". - \\"StrongPass1\\" meets all the criteria, so it is \\"Strong\\".","solution":"import re def validate_password(password): Validate a password based on multiple conditions including length, uppercase, lowercase, numeric, and special character requirements. Parameters: password (str): The password string to validate. Returns: str: \\"Strong\\" if the password meets all conditions, otherwise \\"Weak\\". if len(password) < 8: return \\"Weak\\" if not re.search(r\'[A-Z]\', password): return \\"Weak\\" if not re.search(r\'[a-z]\', password): return \\"Weak\\" if not re.search(r\'[0-9]\', password): return \\"Weak\\" if not re.search(r\'[@#%&!?]\', password): return \\"Weak\\" return \\"Strong\\" def check_passwords(password_count, passwords): Evaluate multiple passwords and determine if they are \\"Strong\\" or \\"Weak\\". Parameters: password_count (int): The number of passwords to evaluate. passwords (list): A list of password strings to validate. Returns: list: A list of results for each password, \\"Strong\\" or \\"Weak\\". results = [] for password in passwords: results.append(validate_password(password)) return results"},{"question":"Given an array of n integers, we refer to a subarray as \\"interesting\\" if it contains only prime numbers. Your task is to find the maximum length of such an \\"interesting\\" subarray. Input The first line contains a single integer n (1 ≤ n ≤ 105), which is the number of elements in the array. The second line contains n space-separated integers ai (1 ≤ ai ≤ 109) representing the elements of the array. Output Output a single integer, the length of the longest \\"interesting\\" subarray. Note A subarray is defined as a contiguous part of the array. Examples Input 7 2 3 5 4 11 13 6 Output 3 Input 5 10 12 15 8 9 Output 0 Input 6 13 17 19 20 23 29 Output 3 Explanation In the first example, the longest subarray of consecutive primes is [2, 3, 5], which has a length of 3. In the second example, there are no prime numbers in the array, hence the length of the longest interesting subarray is 0. In the third example, the longest subarray of consecutive primes is [17, 19, 20, 23, 29], but note that 20 is not prime, so the valid longest subarray of consecutive primes is [17, 19] or [23, 29], which has a length of 3.","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False if num in (2, 3): return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def max_length_interesting_subarray(arr): Given an array of integers, return the maximum length of interesting subarray which contains only prime numbers. max_length = 0 current_length = 0 for num in arr: if is_prime(num): current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length # Example usage: # n = 7 # arr = [2, 3, 5, 4, 11, 13, 6] # print(max_length_interesting_subarray(arr)) # Output: 3"},{"question":"A train is traveling from one city to another and stops at several stations along the way. Each station has a certain number of passengers getting on and off the train. Given a list of tuples where each tuple represents the number of passengers getting on and off the train at each station, calculate the maximum number of passengers on the train at any point during the journey. Constraints * The number of stations (N) is an integer between 2 and 100 (inclusive). * Each tuple contains two non-negative integers: passengers getting on and passengers getting off. Both values are between 0 and 100 (inclusive). * The initial number of passengers on the train is zero. Input Input is given from Standard Input in the following format: N (on1, off1) (on2, off2) ... (onN, offN) Output Print the maximum number of passengers on the train at any point (in passengers). Examples Input 3 (10, 0) (3, 5) (2, 8) Output 10 Input 4 (15, 0) (0, 5) (3, 3) (7, 10) Output 15","solution":"def max_passengers(n, stations): Calculate the maximum number of passengers on the train at any point. Parameters: n (int): Number of stations. stations (list of tuple): List of tuples where each tuple contains two integers, passengers getting on and off the train at each station. Returns: int: The maximum number of passengers on the train at any point. current_passengers = 0 max_passengers = 0 for on, off in stations: current_passengers += on current_passengers -= off max_passengers = max(max_passengers, current_passengers) return max_passengers"},{"question":"You are given an undirected weighted graph with n nodes and m edges. The graph represents a network where each node is a computing device, and each edge represents a direct communication link between two devices with a certain weight indicating the latency of the link. You need to determine the minimum latency required to establish a communication path from a given source device s to every other device t in the network. Input First line contains three integers n, m, and s (1 ≤ n ≤ 10^5, 1 ≤ m ≤ min((n ⋅ (n - 1))/2, 2 ⋅ 10^5), 1 ≤ s ≤ n). Next m lines each contain three integers v_i, u_i, l_i (1 ≤ v_i, u_i ≤ n, 1 ≤ l_i ≤ 50, u_i ≠ v_i), representing a direct communication link between devices v_i and u_i with latency l_i. Output For each device t (1 ≤ t ≤ n), print the minimum latency required to establish a communication path from the source device s to t. If there is no path from s to t, print -1. Examples Input 6 7 1 1 2 10 1 3 5 2 3 2 2 4 1 3 4 9 3 5 2 4 6 6 Output 0 10 5 11 7 17 Input 4 3 3 1 2 3 2 4 4 3 1 2 Output 2 2 0 6 Note In the first example, the minimum latency paths from device 1 are: - To device 1 itself is 0. - To device 2 is directly via (1 -> 2) with latency 10. - To device 3 is directly via (1 -> 3) with latency 5. - To device 4 can be reached via (1 -> 3 -> 2 -> 4) with a total latency of 5 + 2 + 1 = 8. - To device 5 can be reached via (1 -> 3 -> 5) with a total latency of 5 + 2 = 7. - To device 6 can be reached via (1 -> 3 -> 4 -> 6) with a total latency of 5 + 9 + 6 = 20. In the second example, the minimum latency paths from device 3 are: - To device 1 via (3 -> 1) with latency 2. - To device 2 via (3 -> 1 -> 2) with a total latency of 2 + 3 = 5. - To device 3 itself is 0. - To device 4 via (3 -> 1 -> 2 -> 4) with a total latency of 2 + 3 + 4 = 9.","solution":"import heapq def dijkstra(n, m, s, edges): Returns the minimum latency to communicate from source node s to all other nodes in an undirected weighted graph. graph = [[] for _ in range(n + 1)] for v, u, l in edges: graph[v].append((u, l)) graph[u].append((v, l)) dist = [float(\'inf\')] * (n + 1) dist[s] = 0 priority_queue = [(0, s)] while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(1, n + 1)] def solve(n, m, s, edges): return dijkstra(n, m, s, edges)"},{"question":"David enjoys solving puzzles. One day, he encountered an intriguing problem involving an endless grid. David stands initially at position (x, y) on the infinite 2D grid. He wants to reach a new position (x\', y\') using the minimum number of moves. In each move, David can do one of the following: 1. Move exactly 1 step to the left, right, up, or down. 2. Move exactly 1 step diagonally (i.e., left-up, left-down, right-up, or right-down). Help David achieve his goal using the minimum number of moves. Input The input consists of 4 space-separated integers x, y, x\', y\' (-105 ≤ x, y, x\', y\' ≤ 105), representing the coordinates of David\'s initial position and his desired new position respectively. Output Output a single integer — the minimum number of moves required to reach the target position from the initial position. Examples Input 0 0 3 4 Output 4 Input 1 2 3 5 Output 3 Input -2 -3 -2 -3 Output 0 Note In the first sample test, the optimal way is to perform two diagonal moves to reach (2,2) and then two right moves to reach (3,4). In the second sample test, an optimal way is to perform one diagonal move to (2,3), one diagonal move to (3,4), and one up move to reach (3,5). In the third sample test, David is already at the target position, so no moves are required.","solution":"def minimum_moves(x1, y1, x2, y2): Returns the minimum number of moves required for David to move from (x1, y1) to (x2, y2). # The minimum moves required is the maximum of the absolute differences of the coordinates return max(abs(x2 - x1), abs(y2 - y1))"},{"question":"You are given a string **S** made up of lowercase English letters and an integer **K**. Your task is to determine the minimum number of characters you need to delete from **S** so that each letter appears no more than **K** times. # Input: - The first line contains the string **S** (1 ≤ |S| ≤ 1000). - The second line contains the integer **K** (1 ≤ K ≤ 1000). # Output: - Output a single integer, the minimum number of characters to delete. # Examples: **Input:** ``` abcabcabc 2 ``` **Output:** ``` 3 ``` **Explanation:** In the string \\"abcabcabc\\", each character appears 3 times. To ensure no character appears more than 2 times, we can delete one \'a\', one \'b\', and one \'c\'. Therefore, the minimum number of deletions required is 3. **Input:** ``` aabbcc 1 ``` **Output:** ``` 3 ``` **Explanation:** In the string \\"aabbcc\\", each character appears 2 times. To ensure no character appears more than 1 time, we can delete one \'a\', one \'b\', and one \'c\'. Therefore, the minimum number of deletions required is 3. **Input:** ``` aaaa 2 ``` **Output:** ``` 2 ``` **Explanation:** In the string \\"aaaa\\", the character \'a\' appears 4 times. To ensure \'a\' does not appear more than 2 times, we can delete two \'a\'s. Therefore, the minimum number of deletions required is 2.","solution":"def min_deletions(S, K): Calculate the minimum number of characters to delete from S so that no character appears more than K times. Args: S: str, the input string. K: int, the maximum number of times any character should appear. Returns: int, the minimum number of deletions required. from collections import Counter # Count the frequency of each character freq = Counter(S) # Calculate how many deletions are needed deletions = 0 for count in freq.values(): if count > K: deletions += count - K return deletions"},{"question":"Write a function that takes in a list of integers and returns the second largest unique integer in the list. If no such integer exists, return None. Input: - A list of integers, which may contain duplicates and can be in any order. Output: - An integer representing the second largest unique integer or None if it doesn\'t exist. Constraints: - The list can contain between 0 and 1000 integers. - Each integer in the list is between -10^6 and 10^6. Example Input 1: [2, 3, 6, 6, 5] Example Output 1: 5 Example Input 2: [4, 4, 4, 4] Example Output 2: None","solution":"def second_largest_unique(lst): Returns the second largest unique integer in the list, or None if it doesn\'t exist. unique_numbers = list(set(lst)) # Remove duplicates if len(unique_numbers) < 2: # Less than 2 unique numbers means no second largest return None unique_numbers.sort(reverse=True) # Sort in descending order return unique_numbers[1] # Return the second largest unique number"},{"question":"Energy consumption is a critical factor for a fleet of interstellar spaceships. To optimize fuel usage, every ship\'s data system continuously logs the power consumption at various intervals in a matrix form. Each row of the matrix represents a measurement at a given moment in time, and each column represents a specific subsystem\'s power consumption at that moment. The fleet\'s lead engineer must analyze this data matrix to determine whether power distribution across subsystems follows a certain pattern. Specifically, she needs to verify whether any row in the matrix can be represented as a linear combination of a subset of the other rows. If such a relation exists within the data, this would indicate a consistency pattern which can be leveraged to optimize power usage. Your task is to write a program that determines if there exists such a row that can be expressed as a linear combination of a subset of the other rows in a given matrix. Input The first line of the input contains two space-separated integers n and k (2 ≤ n ≤ 50, 1 ≤ k ≤ 10) – the number of measurements (rows) and the number of subsystems (columns), respectively. The next n lines each contain k space-separated integers aij (|aij| ≤ 100), describing the power consumption measurements. Output Output \\"YES\\" (without quotes) if there exists at least one row in the matrix that can be expressed as a linear combination of a subset of the other rows. Otherwise, output \\"NO\\". Example Input 4 3 2 3 1 4 6 2 1 2 3 3 9 6 Output YES Note In the sample testcase, the second row [4, 6, 2] can be expressed as 2 * [2, 3, 1]. Similarly, the fourth row [3, 9, 6] can be expressed as 3 * [1, 3, 2]. Therefore, the output is \\"YES\\".","solution":"import numpy as np def is_linear_combination(n, k, matrix): Determines if there exists any row in the matrix that can be expressed as a linear combination of a subset of the other rows. Args: n (int): number of rows. k (int): number of columns. matrix (list of list of int): the power consumption matrix. Returns: str: \\"YES\\" if there exists such row, otherwise \\"NO\\". matrix = np.array(matrix) for i in range(n): # Create a new matrix without the ith row sub_matrix = np.delete(matrix, i, axis=0) # Solve the system of linear equations using least square fit result = np.linalg.lstsq(sub_matrix.T, matrix[i], rcond=None) solution, residuals = result[0], result[1] if residuals.size == 0 or np.allclose(np.dot(sub_matrix.T, solution), matrix[i]): return \\"YES\\" return \\"NO\\""},{"question":"A person is planning to renovate a house and wants to rearrange the available furniture in the rooms. The house has n rooms connected by m corridors, where each corridor connects exactly two different rooms bidirectionally. Some rooms might have multiple corridors between them, and there can be isolated rooms as well. Each piece of furniture can only be placed in specific rooms due to size and type constraints. To help the person optimize the arrangement, you need to determine the maximum number of rooms that can have at least one piece of furniture placed in them. Furniture can only be moved from one room to another if there is a direct corridor between them. If a room has no furniture initially, furniture cannot be moved to it by any means of indirect connections. Given the number of rooms, corridors, and the connections between rooms, determine the maximum number of rooms that can have furniture placed in them. Input The first line contains two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 2n2) — the number of rooms and corridors in the house respectively. The second line contains an integer k (0 ≤ k ≤ n) — the number of rooms that initially have furniture placed in them. The third line contains k distinct integers representing the indices of the rooms that initially have furniture. Next m lines contain two integers vi and ui (1 ≤ vi, ui ≤ n) representing a bidirectional corridor between rooms vi and ui. Output Print a single integer, the maximum number of rooms that can have at least one piece of furniture. Examples Input 5 4 2 1 2 1 3 2 4 3 5 3 4 Output 5 Input 4 2 1 2 1 2 2 3 Output 3 Note In the first sample, you can move furniture from rooms 1 and 2 to all other interconnected rooms, leading to all rooms having furniture. In the second sample, you can move furniture from room 2 to rooms 1 and 3, but room 4 remains without furniture as there is no direct connection from any room with furniture to room 4.","solution":"def max_rooms_with_furniture(n, m, k, initial_rooms, corridors): from collections import defaultdict, deque # Create adjacency list for all rooms graph = defaultdict(list) for vi, ui in corridors: graph[vi].append(ui) graph[ui].append(vi) # BFS or DFS to find all rooms reachable from rooms with initial furniture visited = [False] * (n + 1) queue = deque() for room in initial_rooms: if not visited[room]: queue.append(room) visited[room] = True while queue: current_room = queue.popleft() for neighbor in graph[current_room]: if not visited[neighbor]: queue.append(neighbor) visited[neighbor] = True # Count the number of rooms that have been visited max_rooms = sum(visited) return max_rooms"},{"question":"Given an array of integers, determine the number of pairs of elements (i, j) in the array such that i < j and the sum of elements at indices i and j is even. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^7) — the elements of the array. Output For each test case, print a single integer — the number of pairs (i, j) (i < j) such that the sum ai + aj is even. Example Input 2 4 1 2 3 4 3 4 6 8 Output 2 3 Explanation For the first test case, the pairs of indices with even sums are (1, 3), (2, 4). For the second test case, all pairs (1, 2), (1, 3), and (2, 3) have even sums.","solution":"def count_even_sum_pairs(t, test_cases): results = [] for case in test_cases: n, arr = case even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 results.append(even_pairs + odd_pairs) return results"},{"question":"Write a function that calculates the sum of the squares of the unique prime factors of a given number n. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^6). Output For each test case, output the sum of the squares of the unique prime factors of n. Example Input 3 10 15 21 Output 5 10 10 Explanation For 10: The prime factors are 2 and 5. Their squares are 4 and 25. The sum is 29. For 15: The prime factors are 3 and 5. Their squares are 9 and 25. The sum is 34. For 21: The prime factors are 3 and 7. Their squares are 9 and 49. The sum is 58.","solution":"import math def sum_of_squares_of_prime_factors(n): Returns the sum of the squares of the unique prime factors of a given number n. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def get_prime_factors(num): prime_factors = set() while num % 2 == 0: prime_factors.add(2) num //= 2 for i in range(3, int(math.sqrt(num)) + 1, 2): while num % i == 0: prime_factors.add(i) num //= i if num > 2: prime_factors.add(num) return prime_factors prime_factors = get_prime_factors(n) return sum(p ** 2 for p in prime_factors) def process_test_cases(test_cases): results = [] for n in test_cases: results.append(sum_of_squares_of_prime_factors(n)) return results"},{"question":"Write a function that takes an integer n and a list of integers. The function should return a list containing only the prime numbers from the given list, up to the integer n. Input The first line of input contains an integer n (2 ≤ n ≤ 103). The second line contains a list of integers separated by single spaces. Output Output a list of prime numbers in the same order as they appear in the input list, but only those which are less than or equal to n. Examples Input 50 11 2 3 15 22 29 31 40 47 51 Output 11 2 3 29 31 47 Input 20 19 12 17 4 5 6 Output 19 17 5","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def primes_up_to_n(n, numbers): Returns a list of prime numbers from \'numbers\' that are <= n. return [num for num in numbers if num <= n and is_prime(num)]"},{"question":"Given an array of integers, find the maximum sum of non-adjacent elements. You can assume that the array consists of at least one positive integer. Input The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n, denoting the number of elements in the array. The second line contains n space-separated integers, representing the elements of the array. Output For each test case, output a single line containing the maximum sum of non-adjacent elements. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ array[i] ≤ 10000 Example Input: 2 4 3 2 5 10 3 3 2 7 Output: 13 10 Scoring Subtask 1 (30 points): All elements in the array are distinct. Subtask 2 (30 points): n ≤ 100 Subtask 3 (40 points): See the constraints","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the array. if not arr: return 0 incl = 0 excl = 0 for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl) def solve(input_data): Processes the input as described and returns the results for all test cases. input_data: Tuple containing an integer T and a list of tuples. Each tuple contains an integer n and a list of n integers. Returns a list of integers, each representing the result for the respective test case. T, test_cases = input_data results = [] for n, arr in test_cases: results.append(max_non_adjacent_sum(arr)) return results"},{"question":"Anjali has N jars, each filled with water. The i-th jar contains W_i liters of water. Anjali wants to divide all the jars into two groups such that the difference between the total water in the two groups is minimized. Can you help her determine the minimum possible difference? Input The first line contains a single integer N (1 ≤ N ≤ 50) — the number of jars. The second line contains N integers W_1, W_2, ..., W_N (1 ≤ W_i ≤ 100) — the amount of water in each jar. Output Output a single integer, the minimum possible difference between the total water in the two groups. Example Input 4 3 1 4 2 Output 0 Note In the example, Anjali can divide the jars into two groups: (3, 1) and (4, 2). The total water in each group is 4 liters, and the difference is 0 liters, which is the minimum possible difference.","solution":"def min_difference(N, W): Function to find the minimum possible difference between the total water in two groups. Parameters: N (int): The number of jars W (list of int): List containing the amount of water in each jar Returns: int: The minimum possible difference between the total water in the two groups. total_sum = sum(W) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for weight in W: for i in range(half_sum, weight - 1, -1): dp[i] = dp[i] or dp[i - weight] for i in range(half_sum, -1, -1): if dp[i]: group1 = i break group2 = total_sum - group1 return abs(group2 - group1)"},{"question":"In this problem, you have to write a program that solves a particular geometry problem. Given n points (each defined by their x and y coordinates) in a 2D plane, determine if they all lie on the same straight line. # Input - The first line of input contains an integer n (2 ≤ n ≤ 1000) — the number of points. - The following n lines each contain two integers x and y (−1000 ≤ x, y ≤ 1000) — the coordinates of these points. # Output - If all points lie on a single straight line, print \\"YES\\". Otherwise, print \\"NO\\". # Examples **Input:** ``` 3 1 1 2 2 3 3 ``` **Output:** ``` YES ``` **Input:** ``` 3 1 1 2 2 3 4 ``` **Output:** ``` NO ``` # Note In the first example, the points (1, 1), (2, 2), and (3, 3) lie on the line y = x. Hence, the output is \\"YES\\". In the second example, the points (1, 1), (2, 2), and (3, 4) do not lie on a single straight line. Hence, the output is \\"NO\\". # Hint To determine if all the given points lie on the same straight line, you can use the concept of collinearity. Three points A(x1, y1), B(x2, y2), and C(x3, y3) are collinear if the area of the triangle formed by them is zero. The area can be calculated using the formula: ``` 0.5 * |x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2)| ```","solution":"def all_points_on_one_line(n, points): if n == 2: return \\"YES\\" x0, y0 = points[0] x1, y1 = points[1] dx = x1 - x0 dy = y1 - y0 for i in range(2, n): x, y = points[i] if (y - y0) * dx != (x - x0) * dy: return \\"NO\\" return \\"YES\\""},{"question":"You are given a matrix of size `n × m`, where each cell contains a lowercase Latin letter. Your task is to find the length of the longest path in the matrix such that no two consecutive cells in the path contain the same character. You can move from a cell to its neighboring cells in one of the four directions: up, down, left, or right. Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 10^3) — the number of rows and the number of columns in the matrix respectively. Each of the next `n` lines contains `m` characters each — the matrix itself. Output Print a single integer — the length of the longest path in the matrix such that no two consecutive cells in the path contain the same character. Example Input 3 4 abca dbef ghca Output 8 Note In the given example, the longest path is: \\"a -> b -> c -> a -> e -> f -> c -> a\\" and its length is 8. Another path of length 8 could be \\"a -> b -> e -> f -> c -> g -> h -> c\\". Both paths are valid as they follow the rules and ensure that no two consecutive cells in the path contain the same character.","solution":"def longest_path(matrix): def dfs(x, y, visited): nonlocal max_path max_path = max(max_path, len(visited)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and matrix[nx][ny] not in visited: dfs(nx, ny, visited + matrix[nx][ny]) n, m = len(matrix), len(matrix[0]) max_path = 0 for i in range(n): for j in range(m): dfs(i, j, matrix[i][j]) return max_path def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(line) for line in lines[1:]] return n, m, matrix"},{"question":"A: Beacon of Hope A community is lighting beacons to communicate an emergency alert. Each beacon can be either on or off. When a beacon is on, it sends out a signal reaching the next beacons in sequence. However, if a beacon is off, it breaks the signal. Given a string representing the state of a series of beacons, determine whether the signal can travel from the first beacon to the last beacon. Input A single string of N characters, each either \'1\' (beacon on) or \'0\' (beacon off). Output Output \\"Yes\\" if the signal can travel from the first to the last beacon, or \\"No\\" otherwise. Remember to include the last line break. Constraint * The length of the string (N) is an integer greater than or equal to 2 and less than or equal to 100. Input example 1 11011 Output example 1 Yes The signal can travel through the sequence of beacons. Input example 2 11001 Output example 2 No The beacon sequence is broken. Example Input 11011 Output Yes","solution":"def can_signal_travel(beacons): Determines if the signal can travel from the first beacon to the last beacon. :param beacons: A string of \'1\'s and \'0\'s representing the state of the beacons. :return: \\"Yes\\" if the signal can travel from the first to the last beacon, \\"No\\" otherwise. # Check if the signal can propagate through the entire string of beacons if \'0\' not in beacons: return \\"Yesn\\" if beacons[0] == \'0\' or beacons[-1] == \'0\': return \\"Non\\" return \\"Yesn\\" if \'0\' not in beacons else \\"Non\\""},{"question":"Henry enjoys solving mathematical puzzles. He recently stumbled upon an interesting sequence of numbers called “super primes.” A super prime is a prime number whose index in the sequence of prime numbers is also a prime number. For instance, the number 3 is prime and it is the second prime number (index = 2, which is also prime), making it a super prime. Henry needs your help to find the first \'n\' super primes. Input The input consists of a single integer n (1 ≤ n ≤ 1000), representing the number of super primes you need to find. Output Print the first n super primes, each number separated by a space. Examples Input 5 Output 3 5 11 17 31 Input 10 Output 3 5 11 17 31 41 59 67 83 109 Note In the first test example, the first 5 super primes are 3 (second prime), 5 (third prime), 11 (fifth prime), 17 (seventh prime), and 31 (eleventh prime). All these indices are prime numbers too.","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def nth_super_primes(n): primes = [] super_primes = [] i = 2 while len(super_primes) < n: if is_prime(i): primes.append(i) # index in 1-based indexing is len(primes) if is_prime(len(primes)): super_primes.append(i) i += 1 return super_primes"},{"question":"Given a string s, find and print all the unique permutations of the characters in the string in lexicographic order. Constraints * The length of the string 1 leq |s| leq 8 * The string contains only lowercase English letters. Input A string s is given in a line. Output Print each unique permutation in a line in lexicographic order. Separate adjacency elements by a space character. Examples Input abc Output a b c a c b b a c b c a c a b c b a Input aab Output a a b a b a b a a","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of the given string in lexicographic order. return sorted(set([\' \'.join(p) for p in permutations(s)]))"},{"question":"A manufacturer is planning to produce a new line of customizable gadgets. Each gadget is composed of multiple modules, and each module requires to follow a specific order of assembly due to dependencies. For example, if module B depends on module A, then module A must be assembled before module B. The manufacturer wants to ensure that it is possible to assemble all modules in at least one valid sequence where all dependencies are satisfied. Your task is to determine if it’s possible to assemble all the modules given their dependencies. Write a function `canAssembleModules(n, dependencies)` that takes two parameters: - `n`: The number of modules, labeled from `0` to `n-1`. - `dependencies`: A list of pairs where each pair `[a, b]` indicates that module `a` must be assembled before module `b`. The function should return a boolean value: - `true` if it is possible to assemble all the modules with the given dependencies. - `false` otherwise. # Function Signature: ```python def canAssembleModules(n: int, dependencies: List[List[int]]) -> bool: ``` # Input: - An integer `n` (0 ≤ n ≤ 10^5), representing the number of modules. - A list of pairs `dependencies`, where each pair is represented as `[a, b]` (0 ≤ a, b < n). The length of `dependencies` will not exceed 2000. # Output: - A boolean indicating if all modules can be assembled as per the dependencies. # Example: Example 1: ```python n = 6 dependencies = [[2, 3], [3, 1], [4, 0], [4, 2], [5, 0], [5, 1]] print(canAssembleModules(n, dependencies)) # Output: True ``` Example 2: ```python n = 3 dependencies = [[0, 1], [1, 2], [2, 0]] print(canAssembleModules(n, dependencies)) # Output: False ``` # Note: - In the first example, the modules can be assembled following the order: `5, 4, 2, 3, 0, 1`. - In the second example, there is a cycle in the dependencies, and it’s impossible to find a valid assembly sequence for the modules.","solution":"def canAssembleModules(n, dependencies): from collections import defaultdict, deque # Build the adjacency list for the directed graph graph = defaultdict(list) in_degree = [0] * n for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Find all nodes with no incoming edges queue = deque([i for i in range(n) if in_degree[i] == 0]) # Initialize count of visited nodes visited_count = 0 while queue: node = queue.popleft() visited_count += 1 # For each neighbor, reduce in-degree by 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 # If in-degree becomes zero, add it to the queue if in_degree[neighbor] == 0: queue.append(neighbor) # If visited count equals to the number of nodes, it\'s possible to assemble all modules return visited_count == n"},{"question":"Anna wants to send a secret message to her friend, but she worries that someone might intercept the message. To avoid this, she decides to encode the message using a simple encryption technique based on the Caesar cipher. In her version of the cipher, a letter in the plain text is shifted forward in the alphabet by a fixed number of positions, while wrapping around if necessary. Non-letter characters are left unchanged. Given a plain text message and an integer k (0 ≤ k ≤ 25), write a program to encode the message using this Caesar cipher technique. Input The first line of input contains the plain text message consisting of printable ASCII characters (except for newline) with length 1 ≤ |message| ≤ 10^6. The second line contains the integer k (0 ≤ k ≤ 25) representing the shift value. Output Print the encoded message. Examples Input hello, world! 3 Output khoor, zruog! Input xyz 2 Output zab","solution":"def caesar_cipher(message, k): Encodes the given message using a Caesar cipher with a shift k. def shift_char(c): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + k) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + k) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c) for c in message)"},{"question":"Zara is organizing a string manipulation contest. She has a task for the participants: given a string, determine the longest substring that contains no repeating characters. Input format: A single line containing a string S. Output format: Print the length of the longest substring of S that does not contain any repeating characters. Constraints: 1 ≤ |S| ≤ 10^5 S consists of English letters, digits, and special characters. SAMPLE INPUT abcabcbb SAMPLE OUTPUT 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"You are given two integers, n and S, where n is the number of integers and S is the desired sum. Your task is to find n non-negative integers x1, x2, ..., xn such that the sum of these integers exactly equals S and the sum of the square of these integers is minimized. Formally, you need to find n integers a1, a2, ..., an (0 ≤ ai ≤ S) such that: - a1 + a2 + ... + an = S - The value of (a1^2 + a2^2 + ... + an^2) is minimized Input - The first line contains two space-separated integers n and S (1 ≤ n ≤ 100, 0 ≤ S ≤ 10000). Output - Output n space-separated integers a1, a2, ..., an in a single line such that their sum is equal to S and their square sum is minimized. If there are multiple solutions, you can print any of them. Examples Input: 3 11 Output: 3 4 4 Input: 2 9 Output: 5 4","solution":"def find_integers_with_min_square_sum(n, S): Finds `n` non-negative integers that sum up to `S` and minimize the sum of their squares. :param n: Number of integers :param S: Desired sum of the integers :return: A list of `n` integers base_value = S // n remainder = S % n result = [base_value] * n for i in range(remainder): result[i] += 1 return result"},{"question":"You are working as an engineer at a theme park. The park has several rides, and each ride has a certain height requirement. A group of children wants to go on the rides, and for each ride, you need to determine how many of them meet the height requirements. Write a function to answer the queries about how many children can go on each ride. The function should take two inputs: a list of integers representing the heights of the children, and a list of queries where each query is an integer representing the minimum height requirement for a ride. The function should return a list of integers where each integer is the number of children who meet the height requirement for the corresponding ride. Input The first line contains an integer N, the number of children. The second line contains N space-separated integers representing the heights of the children. The third line contains an integer Q, the number of queries. The fourth line contains Q space-separated integers, each representing a minimum height requirement for a ride. Output For each query, output a single integer on a separate line — the number of children who meet the height requirement for that ride. Constraints 1 ≤ N ≤ 10^5 1 ≤ heights[i] ≤ 200 1 ≤ Q ≤ 10^5 1 ≤ queries[j] ≤ 200 Sample Input 5 120 130 150 160 110 3 140 125 160 Sample Output 2 3 1 Explanation You have 5 children with heights 120, 130, 150, 160, and 110 cm. For the first query with a minimum height of 140: - Children with heights 150, and 160 meet this requirement. For the second query with a minimum height of 125: - Children with heights 130, 150, and 160 meet this requirement. For the third query with a minimum height of 160: - Only the child with a height of 160 meets this requirement.","solution":"def count_children_meeting_height_requirements(heights, queries): Returns a list where each element is the number of children who meet the height requirement for the corresponding ride. :param heights: List of integers representing the heights of the children. :param queries: List of integers representing the minimum height requirement for a ride. :return: List of integers representing the number of children meeting each height requirement. heights.sort() result = [] def binary_search(array, target): low, high = 0, len(array) while low < high: mid = (low + high) // 2 if array[mid] < target: low = mid + 1 else: high = mid return low for query in queries: idx = binary_search(heights, query) result.append(len(heights) - idx) return result"},{"question":"You are given an array of integers representing the difficulty levels of N projects. Each project has an associated difficulty level d_i (1 ≤ i ≤ N) where d_1, d_2, ..., d_N are not necessarily distinct. You are required to choose exactly two projects such that the sum of their difficulty levels is exactly T. If there are multiple pairs satisfying these conditions, choose the pair with the maximum combined difficulty level. If no such pair exists, output -1. Constraints * All values in input are integers. * 2 ≤ N ≤ 10^5 * 1 ≤ d_i ≤ 10^9 * 1 ≤ T ≤ 2 × 10^9 Input Input is given from the Standard Input in the following format: N T d_1 d_2 ... d_N Output Print the maximum combined difficulty level of a pair of projects whose difficulty levels sum to exactly T. If no such pair exists, print -1. Examples Input 5 9 1 3 5 7 9 Output 16 Input 4 8 1 2 3 4 Output -1 Input 6 10 5 5 5 5 5 5 Output 10","solution":"def max_combined_difficulty(N, T, difficulties): difficulty_map = {} max_difficulty = -1 for d in difficulties: if T - d in difficulty_map: max_difficulty = max(max_difficulty, d + (T - d)) if d in difficulty_map: difficulty_map[d] += 1 else: difficulty_map[d] = 1 return max_difficulty def process_input(): import sys input = sys.stdin.read() data = input.split() N = int(data[0]) T = int(data[1]) difficulties = list(map(int, data[2:])) return N, T, difficulties if __name__ == \\"__main__\\": N, T, difficulties = process_input() result = max_combined_difficulty(N, T, difficulties) print(result)"},{"question":"A tree is an undirected graph in which any two vertices are connected by exactly one path. In this problem, you are given a tree with `n` nodes. Each node has a unique id ranging from `1` to `n`. Your task is to write a program that finds the longest path in the tree (also known as the diameter of the tree) and returns its length. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of nodes in the tree. Each of the next `n-1` lines contains two space-separated integers u and v (1 ≤ u, v ≤ n), describing an edge of the tree between the vertices u and v. Output Output a single integer, the length of the longest path in the tree. Constraints 1 ≤ n ≤ 10^5 SAMPLE INPUT 5 1 2 1 3 2 4 2 5 SAMPLE OUTPUT 3","solution":"import sys from collections import defaultdict, deque def find_tree_diameter(n, edges): if n == 1: return 0 def bfs(start): visited = [-1] * (n + 1) queue = deque([start]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Phase 1: Start from an arbitrary node (1), find the farthest node from it. farthest_node, _ = bfs(1) # Phase 2: Start from the farthest node found in phase 1 and find the farthest node from it. _, diameter = bfs(farthest_node) return diameter"},{"question":"Craig has become interested in creating symmetric strings where each character in the string mirrors the corresponding character from the end of the string. He decides the first half of the string will remain unchanged, while the latter half will be transformed to match the former half. The cost to transform one character to another is the absolute difference in their ASCII values. Write a program to find the total transformation cost to make the given strings symmetric. Input Format: The first line contains an integer T, i.e., the number of test cases. The next T lines will contain a string without spaces in lower case. Output Format: A single line containing the total transformation cost for each test case. Constraints: 1 ≤ T ≤ 15 1 ≤ length of string ≤ 10^5 SAMPLE INPUT: 3 abc abcd racecar SAMPLE OUTPUT: 2 4 0 Explanation: For test case 1, abc --> aba. The transformation costs are b->a (1) and c->a (2), thus total cost is 1 + 1 = 2. For test case 2, abcd --> abba. The transformation costs are c->b (1) and d->a (3), thus total cost is 1 + 3 = 4. For test case 3, racecar is already symmetric, so the total transformation cost is 0.","solution":"def total_transformation_cost(T, strings): def transformation_cost(s): n = len(s) cost = 0 for i in range(n // 2): cost += abs(ord(s[i]) - ord(s[n - i - 1])) return cost results = [] for s in strings: results.append(transformation_cost(s)) return results"},{"question":"A transportation company is optimizing the routes for its delivery trucks. Each truck delivers packages to various destinations within a city. The city is represented as a grid of M rows and N columns. Each cell in the grid may either be drivable (represented as \'0\') or blocked (represented as \'1\'). Trucks start from the top-left corner of the grid (cell (0,0)) and aim to reach the bottom-right corner (cell (M-1, N-1)). A truck can only move to an adjacent cell (up, down, left, right) if that cell is drivable. Given the grid, find the shortest path from the top-left to the bottom-right. If no such path exists, return -1. The length of a path is the number of cells visited including the starting and ending cells. Constraints: - 2 ≤ M, N ≤ 100 - The grid contains only \'0\'s and \'1\'s. Input: - The first line contains two integers M and N. - The following M lines each contains N characters (\'0\' or \'1\') representing the grid. Output: - Output the length of the shortest path from the top-left to the bottom-right if such a path exists, otherwise print -1. Examples: Input: 4 4 0001 0101 0100 0110 Output: 7 Input: 3 3 010 010 010 Output: -1","solution":"from collections import deque def shortest_path(grid): Find the shortest path from the top-left corner to the bottom-right corner of the grid. M, N = len(grid), len(grid[0]) if grid[0][0] == \'1\' or grid[M-1][N-1] == \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == M-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'0\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def parse_grid(input_str): Parses the input string to produce the grid. lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return grid"},{"question":"A company is hosting a contest to find the best coder among its employees by holding a series of programming challenges. Each challenge will have a score associated with the participants. The company wants to identify potential top performers early by tracking performance across all challenges. They would like a system that helps them find the highest and lowest scores up to any given point in time and provides the difference between these scores. Your task is to implement such a system. Input: The first line contains the number of challenges M. The following M lines represent the scores from each challenge in order as they are completed. Each challenge score is given by a single integer Si. Output: After each challenge score is received, output the difference between the highest and lowest score seen so far. Constraints: 1 <= M <= 10^5 1 <= Si <= 10000 Example: Input: 5 100 200 150 300 250 Output: 0 100 100 200 200","solution":"def score_differences(scores): Given a list of scores, this function returns a list of differences between the highest and lowest scores seen so far after each challenge score is received. # Result list to store the differences result = [] # Initialize the lowest and highest values to be the first score in the list min_score = scores[0] max_score = scores[0] # Initial difference is 0 since highest and lowest are the same result.append(0) # Iterate over the remaining scores for i in range(1, len(scores)): # Update the min_score and max_score if scores[i] < min_score: min_score = scores[i] if scores[i] > max_score: max_score = scores[i] # Calculate the difference between max and min scores result.append(max_score - min_score) return result"},{"question":"Given an array of integers, you are to determine the minimum number of swaps needed to sort the array in ascending order. You can swap any two elements of the array any number of times. Please write a function `minSwapsToSort` that takes an array of integers and returns the minimum number of swaps required to sort the array in ascending order. # Function Signature: ```python def minSwapsToSort(arr: List[int]) -> int: pass ``` # Input - An array of integers `arr` which can have up to `10^5` elements. The elements are distinct and can be both negative and positive. # Output - An integer representing the minimum number of swaps required to sort the array. # Example Input ```python arr = [4, 3, 1, 2] ``` Output ```python 3 ``` Input ```python arr = [1, 5, 4, 3, 2] ``` Output ```python 2 ``` # Note - In the first example, one possible way to sort the array with 3 swaps is: - Swap 4 and 1 to get [1, 3, 4, 2] - Swap 3 and 2 to get [1, 2, 4, 3] - Swap 4 and 3 to get [1, 2, 3, 4] - In the second example, one possible way to sort the array with 2 swaps is: - Swap 5 and 2 to get [1, 2, 4, 3, 5] - Swap 4 and 3 to get [1, 2, 3, 4, 5]","solution":"def minSwapsToSort(arr): n = len(arr) arrpos = [(value, index) for index, value in enumerate(arr)] arrpos.sort(key=lambda it: it[0]) visited = {i: False for i in range(n)} swaps = 0 for i in range(n): if visited[i] or arrpos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Given a rectangular grid with H rows and W columns, you need to find an optimal way to place a certain number of comodities in the grid such that no two comodities conflict with each other based on a specific condition. A commodity is represented by a character and no two adjacent (i.e., directly horizontally or vertically neighboring) cells should contain the same comodity type. The grid will include a set of comodities `C` (e.g., fruits like `\'A\'`, `\'B\'`, and `\'C\'`). Your task is to arrange them in the grid according to the given conditions. Constraints * 2 ≤ H, W ≤ 500 * |C| ≥ 2 Input Input is given from Standard Input in the following format: ``` H W C ``` Where, - `H` is the number of rows. - `W` is the number of columns. - `C` is a string containing characters representing different comodities (e.g., `\'ABC\'`). Output Print a way to place the comodities in the grid such that no two adjacent cells contain the same comodity type. Examples Input ``` 3 3 ABC ``` Output ``` A B C C A B B C A ``` Input ``` 2 2 AB ``` Output ``` A B B A ```","solution":"def generate_grid(H, W, commodities): Generate a grid of size H x W with given commodities such that no two adjacent cells have the same commodity. grid = [[\\"\\" for _ in range(W)] for _ in range(H)] num_commodities = len(commodities) for i in range(H): for j in range(W): grid[i][j] = commodities[(i + j) % num_commodities] return grid def print_grid(grid): for row in grid: print(\\" \\".join(row)) # Example usage: # H, W, commodities = map(str, input().strip().split()) # H = int(H) # W = int(W) # grid = generate_grid(H, W, commodities) # print_grid(grid)"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Find all the elements that appear twice in this array. Your solution should include an algorithm to solve the problem efficiently and also handle edge cases effectively. Input The first line of the input contains a single integer T denoting the number of test cases. Each test case starts with an integer n, indicating the size of the array. The next line contains n space-separated integers representing the array elements. Output For each test case, output a single line containing a space-separated list of the elements that appear twice in the array. If no element appears twice, output \\"None\\". Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 100000 1 ≤ array[i] ≤ 100000 Example Input: 3 6 4 3 2 7 8 2 3 1 5 1 5 3 1 4 5 4 4 1 2 3 4 Output: 3 2 1 5 4 None Explanation Example case 1: The numbers 3 and 2 appear twice in the provided array. Example case 2: The numbers 1, 5, and 4 all appear twice in the provided array. Example case 3: There are no elements that appear twice in the array.","solution":"def find_duplicates(arr): Returns a list of elements that appear twice in the array arr. from collections import Counter counts = Counter(arr) duplicates = [item for item, count in counts.items() if count == 2] return duplicates def process_test_cases(test_cases): results = [] for n, arr in test_cases: duplicates = find_duplicates(arr) if duplicates: results.append(\\" \\".join(map(str, duplicates))) else: results.append(\\"None\\") return results def extract_test_cases(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases"},{"question":"Find the pattern. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer N. Output For each test case, output the N-th term in the sequence in a new line. Constraints 1 ≤ T ≤ 10^4 1 ≤ N ≤ 1000 SAMPLE INPUT 4 5 10 15 20 SAMPLE OUTPUT 11 21 31 41","solution":"def find_nth_term(n): Returns the N-th term in the sequence where the n-th term is given by (n * 2 + 1). return n * 2 + 1 def process_test_cases(test_cases): Processes a list of test cases and returns the results. results = [] for n in test_cases: results.append(find_nth_term(n)) return results"},{"question":"You are given a sequence of n integers, a_1, a_2, ldots, a_n. You want to find out if there exists a subarray with a sum equal to k. A subarray is a contiguous part of the array. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 200, -10^4 ≤ k ≤ 10^4). The second line contains n integers a_1, a_2, ldots, a_n (−10^4 ≤ a_i ≤ 10^4) representing the sequence. Output Print \\"YES\\" if there exists a subarray with sum equal to k, otherwise print \\"NO\\". Examples Input 5 6 1 2 3 -2 4 Output YES Input 5 9 1 2 3 -2 4 Output NO Input 4 1 1 -2 3 -3 Output YES","solution":"def subarray_sum_exists(n, k, array): current_sum = 0 prefix_sums = {0} for num in array: current_sum += num if (current_sum - k) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"A company is hosting an internal hackathon where teams of software developers compete to complete a series of challenges. Given the number of teams and a list of the names of these teams, the company wants to generate a unique identifier for each team. The identifier should be generated as follows: 1. The identifier should be formed by taking the first letter of each word in the team\'s name, converting it to uppercase, and concatenating them together. 2. The resulting identifier should be appended with a unique numeric suffix starting from 1, assigned in the order of the original input. Write a program that generates the list of identifiers based on the given team names list. The order of the identifiers in the output should match the order of the teams in the input. Input The first input line contains the integer n (1 ≤ n ≤ 100) — the number of teams. Each of the following n lines contains a string which represents the name of a team. Each team name consists of one or more words, made up of Latin letters (both uppercase and lowercase). Words in a team name are separated by a single space. Output The output data consists of n lines — the list of unique identifiers for each team in the order they were provided in the input. Examples Input 3 Green Oxen Blue Baboons Red Rhinos Output GO1 BB2 RR3 Input 4 alpha team bravo crew charlie squad delta group Output AT1 BC2 CS3 DG4","solution":"def generate_identifiers(n, team_names): Returns a list of unique identifiers for each team based on their names. identifiers = [] for i, team in enumerate(team_names): identifier = \'\'.join(word[0].upper() for word in team.split()) unique_identifier = identifier + str(i + 1) identifiers.append(unique_identifier) return identifiers"},{"question":"In a city, there are N intersections connected by M unidirectional roads. Each road has a travel time associated with it. As the city traffic manager, you need to ensure that emergency services can reach any intersection from a central control intersection in the shortest possible time. Write a program that calculates the shortest travel times from the central control intersection (intersection 1) to all other intersections in the city using Dijkstra\'s algorithm. Input The input is given in the following format: ``` N M u1 v1 w1 u2 v2 w2 ... uM vM wM ``` The first line contains two integers N (2 ≤ N ≤ 1000) and M (1 ≤ M ≤ 10000), which represent the number of intersections and roads, respectively. Each of the next M lines contains three integers ui, vi (1 ≤ ui, vi ≤ N) and wi (1 ≤ wi ≤ 100), representing a road from intersection ui to intersection vi with a travel time of wi. Output Output N-1 lines where the i-th line contains a single integer representing the shortest travel time from the central control intersection (intersection 1) to intersection i+1. If an intersection is unreachable, output -1 for that intersection. Example Input ``` 5 6 1 2 2 1 3 5 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output ``` 2 3 9 6 ``` Input ``` 4 3 1 2 4 2 3 1 4 1 2 ``` Output ``` 4 5 -1 ``` Note: In the second example, intersection 4 is unreachable from intersection 1.","solution":"import heapq from collections import defaultdict from typing import List, Tuple, Union def dijkstra(N: int, M: int, edges: List[Tuple[int, int, int]]) -> List[int]: graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) def shortest_path(start: int) -> List[Union[int, float]]: distances = [float(\\"inf\\")] * (N + 1) distances[start] = 0 pq = [(0, start)] while pq: current_distance, u = heapq.heappop(pq) if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances # Get shortest distances from intersection 1 distances_from_1 = shortest_path(1) return [dist if dist != float(\\"inf\\") else -1 for dist in distances_from_1[2:]]"},{"question":"You have been tasked with creating a new software system for a small local bookstore. Each book in the bookstore is represented by a tuple that contains four values: the book\'s ID (a unique integer), the book\'s title (a string), the genre (a string), and the price (a float). The bookstore wants to perform various operations such as adding new books, removing books by their ID, and searching for books by genre. Your task is to implement a class `Bookstore` that supports the following operations: 1. **Adding a book**: Adds a new book to the bookstore\'s catalog. The catalog is a list of books. 2. **Removing a book by ID**: Removes the book with the specified ID from the catalog. 3. **Searching for books by genre**: Returns a list of books that belong to a specified genre, sorted by price in ascending order. # Constraints - The book IDs are guaranteed to be unique. - Book IDs are positive integers. - Titles and genres are non-empty strings. - Prices are positive floating-point numbers. - The number of books `n` will not exceed 1000. # Input and Output You should implement the following methods in the `Bookstore` class: - `add_book(book: Tuple[int, str, str, float]) -> None` which takes a tuple representing the book and adds it to the catalog. - `remove_book(book_id: int) -> None` which removes the book with the given ID from the catalog. - `search_by_genre(genre: str) -> List[Tuple[int, str, str, float]]` which returns a list of books that belong to the specified genre sorted by price in ascending order. # Example Usage ```python # Initialize a bookstore bookstore = Bookstore() # Add books to the catalog bookstore.add_book((1, \\"The Great Gatsby\\", \\"Fiction\\", 10.99)) bookstore.add_book((2, \\"To Kill a Mockingbird\\", \\"Fiction\\", 12.99)) bookstore.add_book((3, \\"A Brief History of Time\\", \\"Science\\", 15.00)) bookstore.add_book((4, \\"The Art of War\\", \\"Philosophy\\", 8.99)) # Search for books by genre \\"Fiction\\" print(bookstore.search_by_genre(\\"Fiction\\")) # Output should be: [(1, \\"The Great Gatsby\\", \\"Fiction\\", 10.99), (2, \\"To Kill a Mockingbird\\", \\"Fiction\\", 12.99)] # Remove a book with ID 2 bookstore.remove_book(2) # Search again for \\"Fiction\\" genre print(bookstore.search_by_genre(\\"Fiction\\")) # Output should be: [(1, \\"The Great Gatsby\\", \\"Fiction\\", 10.99)] ``` Write the implementation of the `Bookstore` class based on the specifications.","solution":"from typing import List, Tuple class Bookstore: def __init__(self): self.catalog = [] def add_book(self, book: Tuple[int, str, str, float]) -> None: self.catalog.append(book) def remove_book(self, book_id: int) -> None: self.catalog = [book for book in self.catalog if book[0] != book_id] def search_by_genre(self, genre: str) -> List[Tuple[int, str, str, float]]: result = [book for book in self.catalog if book[2] == genre] return sorted(result, key=lambda x: x[3])"},{"question":"You are given a string consisting of lowercase English letters and you need to determine the length of the smallest substring that contains all the unique characters of the original string. Input The first line contains a single integer T denoting the number of test cases. Each of the next T lines contains a single string S with lowercase English letters. Output For each test case, output a single integer denoting the length of the smallest substring that contains all the unique characters of the given string. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 Example Input: 2 abac aaaaa Output: 3 1 Explanation: For the first test case, the smallest substring containing all unique characters (\'a\', \'b\', and \'c\') is \\"bac\\" and its length is 3. For the second test case, the only unique character is \'a\', and the smallest substring containing \'a\' is \\"a\\", so the answer is 1.","solution":"def smallest_substring_length(s): Returns the length of the smallest substring that contains all the unique characters of the given string. unique_chars = set(s) n = len(s) min_length = n for i in range(n): seen_chars = set() for j in range(i, n): seen_chars.add(s[j]) if seen_chars == unique_chars: min_length = min(min_length, j - i + 1) break return min_length def find_smallest_substrings(test_cases): results = [] for s in test_cases: results.append(smallest_substring_length(s)) return results"},{"question":"Description A group of friends has planned a hiking trip to a nearby mountain range. Before starting the trip, they decide to organize themselves in an adaptive order based on their current stamina levels to ensure a safe and enjoyable journey for everyone. Each friend has a stamina level represented by an integer value, which denotes the number of kilometers they can hike before needing a rest. As they hike, they proceed in a queue with the lowest stamina level at the front for better pacing. Whenever someone reaches their stamina limit, the entire group stops for a brief rest, then the front person moves to the end of the queue. This rearrangement happens until everyone\'s stamina limit is reached consecutively. Input Format You will be given an input containing the stamina levels of each friend in the original hiking order. The first line will contain a single integer N indicating the number of friends in the group. The next N lines will contain a single integer, the ith of which indicates the stamina level of the ith friend in the original order. Output Format Each line will contain a single integer, the ith of which contains the stamina level of the friend at the ith new position. Input Limits 1 < N < 20 Stamina level of each friend is at most 50 SAMPLE INPUT 5 10 20 5 15 25 SAMPLE OUTPUT 5 10 15 20 25 Explanation Given the stamina levels, the order is rearranged such that the friend with the lowest stamina level (5) is at the front, followed by the next lowest (10), and so on till the highest stamina level (25) is at the end.","solution":"def organize_hiking_queue(stamina_levels): Organizes the hiking queue based on stamina levels in ascending order. Parameters: - stamina_levels (list): List of integers representing stamina levels of each friend. Returns: - List of integers representing the new order of stamina levels. return sorted(stamina_levels)"},{"question":"Alice and Bob are playing a game on a grid, consisting of R rows and C columns. Alice starts at the cell (1, 1), and Bob starts at the cell (R, C). They both move alternately, with Alice starting first. In each turn, Alice and Bob can move to an adjacent cell in the grid (horizontally or vertically). Neither can visit the same cell twice. If a player cannot make a move, they lose the game. Alice\'s objective is to maximize the number of cells she visits, whereas Bob aims to minimize the number of cells Alice visits. The game ends when neither player can move or is forced to repeat a cell. You are given the dimensions of the grid: R and C. Determine the maximum number of unique cells Alice can visit if both players play optimally. # Constraints: - All inputs are integers - 1 leq R, C leq 500 # Input: The input is given in the following format: ``` R C ``` # Output: Output a single integer, the maximum number of cells Alice can visit. # Sample Input 1: ``` 2 3 ``` # Sample Output 1: ``` 3 ``` # Sample Input 2: ``` 4 4 ``` # Sample Output 2: ``` 10 ``` # Explanation: **Sample Input 1:** With a 2x3 grid, the best Alice can do is to visit 3 unique cells before being blocked by Bob. **Sample Input 2:** With a 4x4 grid, Alice can visit up to 10 unique cells under optimal play by both players.","solution":"def max_cells_alice_can_visit(R, C): Returns the maximum number of unique cells Alice can visit in a grid of R rows and C columns with optimal play from both Alice and Bob. total_cells = R * C if total_cells % 2 == 0: return total_cells // 2 else: return total_cells // 2 + 1"},{"question":"Given a sentence `S` in English, your task is to write a function that checks if the sentence is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. The sentence may contain both uppercase and lowercase letters, digits, and punctuation marks, but you only need to consider the alphabetic characters. Input: - A single string `S` representing the sentence. Output: - Print \\"YES\\" if the sentence is a pangram, otherwise print \\"NO\\". Constraints: 1. The length of the sentence `S` can be up to 1000 characters. 2. The sentence may include spaces, digits (0-9), and punctuation marks. Example: ``` Input: The quick brown fox jumps over the lazy dog! Output: YES Input: Hello, World! Output: NO ``` Explanation: - In the first example, the sentence contains all the letters of the English alphabet at least once. - In the second example, the sentence does not include all the letters of the alphabet.","solution":"def is_pangram(S): Returns \\"YES\\" if the sentence S is a pangram, otherwise returns \\"NO\\". alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') sentence_set = set(S.lower()) if alphabet.issubset(sentence_set): return \\"YES\\" else: return \\"NO\\""},{"question":"Polycarp has recently developed an interest in Fibonacci numbers, but with a twist. Instead of the classic Fibonacci sequence where each number is the sum of the two preceding ones, Polycarp wants to explore a sequence where each number is the product of the two preceding numbers, called the \\"Productonacci\\" sequence. Formally, the sequence is defined as follows: - The first number in the sequence is 1. - The second number in the sequence is also 1. - Each subsequent number is the product of the two preceding numbers. Polycarp is wondering what the k-th number of this \\"Productonacci\\" sequence is. Write a program to help Polycarp compute the k-th \\"Productonacci\\" number. Input The first line contains a single integer k (1 ≤ k ≤ 30), the position in the sequence Polycarp is interested in. Output Output the k-th \\"Productonacci\\" number. Examples Input 1 Output 1 Input 2 Output 1 Input 6 Output 720 Note The first few numbers in the \\"Productonacci\\" sequence are: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1. Thus, for k = 6, the result will be 1 * 1 * 1 * 1 * 1 * 1 = 720.","solution":"def productonacci(k): Computes the k-th number in the Productonacci sequence. # The first two numbers in the Productonacci sequence are both 1 if k == 1 or k == 2: return 1 # Initialize the first two numbers of the sequence a, b = 1, 1 # Compute the Productonacci number iteratively for _ in range(3, k + 1): a, b = b, a * b return b"},{"question":"A rapidly growing startup is hosting a hackathon and has invited top coders from around the world. They want to ensure that each participant is paired with another participant to form a team. To foster diversity, the organizers have decided to form teams in such a way that the difference in skill levels between any two team members is minimized. Each coder is given a skill level represented by an integer. More formally, you are given an array of integers representing the skill levels of the participants. Your task is to write a program that pairs each participant with another in such a way that the sum of absolute differences of skill levels for all pairs is minimized. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of participants, which is always an even number. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the skill levels of the participants. Output Print a single integer — the minimum sum of absolute differences of skill levels for the optimal pairing. Examples Input 4 1 4 2 3 Output 2 Input 6 10 20 30 40 50 60 Output 30","solution":"def minimum_sum_of_absolute_differences(n, skill_levels): Returns the minimum sum of absolute differences of skill levels for optimal pairing. # Sort the skill levels skill_levels.sort() # Initialize sum of absolute differences min_sum = 0 # Pair adjacent elements to minimize the absolute differences for i in range(0, n, 2): min_sum += abs(skill_levels[i] - skill_levels[i + 1]) return min_sum"},{"question":"Paul enjoys playing with strings and numbers. He recently came up with a game where he converts strings to numbers and performs interesting calculations. Given a lowercase string `s`, Paul wants to calculate the sum of all possible distinct substrings of `s`, where each substring is first converted to an integer by treating each character as a digit from \'a\' to \'z\' such that \'a\'=1, \'b\'=2, ..., \'z\'=26. For example, for the string \\"ab\\": - The substrings are: \\"a\\", \\"b\\", \\"ab\\" - The integer values are: 1, 2, 12 - The sum is: 1 + 2 + 12 = 15 Your task is to help Paul by writing a function to compute the sum of all distinct substring values of a given string `s`. Input: - The first line contains an integer `t` (1 ≤ t ≤ 10), the number of test cases. - The following `t` lines each contain a string `s` (1 ≤ |s| ≤ 50), a lowercase string for which you need to compute the sum. Output: - For each test case, print the sum of all distinct substring values of the given string. Example Input: 3 ab abc z Output: 15 1046 26 Explanation: For the first test case, the input string is \\"ab\\". The distinct substrings are \\"a\\", \\"b\\" and \\"ab\\". These substrings map to integer values 1, 2, and 12 respectively. The sum is 1 + 2 + 12 = 15. For the second test case, the input string \\"abc\\" has distinct substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". The corresponding integer values are 1, 2, 3, 12, 23, 123 respectively and the sum is 1 + 2 + 3 + 12 + 23 + 123 = 164. For the third test case, the input string is \\"z\\". The only substring is \\"z\\" with the integer value 26, so the sum is 26.","solution":"def substring_value_sum(s): Computes the sum of all distinct substring values for the given string `s`. def string_to_int(subs): return int(\'\'.join(str(ord(ch) - ord(\'a\') + 1) for ch in subs)) substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) total_sum = sum(string_to_int(subs) for subs in substrings) return total_sum def process_test_cases(t, string_list): results = [] for string in string_list: results.append(substring_value_sum(string)) return results"},{"question":"In a distant kingdom, the king has a very peculiar bookshelf in his royal library. The shelf consists of n slots, each slot can either be empty or occupied by exactly one book. Each book has a certain width. The widths of books are given in an array, and the length of each slot is provided in another array. The king wants to know if it\'s possible to rearrange the books such that all the slots are exactly filled without any empty space left. More formally, given an array of book widths and an array of slot lengths, determine if it\'s possible to place all books into the slots such that the sum of the widths of books in each slot matches exactly the length of that slot. Input Your program will be tested on multiple test cases. The first line contains the number of test cases t. (1 ≤ t ≤ 50) For each test case: - The first line contains an integer n (1 ≤ n ≤ 15), the number of slots. - The second line contains n integers, the lengths of the slots. - The third line contains n integers, the widths of the books. Output For each test case, print \\"YES\\" if it is possible to rearrange the books to fit exactly into the slots. Otherwise, print \\"NO\\". Example Input 3 2 4 6 4 6 3 5 5 5 3 3 3 3 10 20 30 10 10 10 Output YES NO NO Explanation In the first test case, the books can be placed into the slots without any issue as their widths match exactly the lengths of the slots. In the second test case, although the total width of the books is equal to the total length of the slots, there is no way to distribute them such that each slot contains books whose combined width exactly matches the length of the slot. In the third test case, the total width of the books does not match the total length of the slots, so it\'s impossible to achieve a perfect fit.","solution":"from itertools import permutations def can_fill_slots(books, slots): Determines if the books can be rearranged to exactly fill each slot. books_sorted = sorted(books) slots_sorted = sorted(slots) for perm in permutations(books_sorted): if list(perm) == slots_sorted: return \\"YES\\" return \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] slots = test_cases[i][1] books = test_cases[i][2] results.append(can_fill_slots(books, slots)) return results"},{"question":"Develop a function that takes an integer as input and returns the integer in its reverse digit order. If the integer is negative, the negative sign should remain at the forefront. Input The input contains a single integer n (-1000000 ≤ n ≤ 1000000). Output Output the reversed integer. Examples Input 12345 Output 54321 Input -6789 Output -9876","solution":"def reverse_integer(n): Returns the integer n reversed. Negative sign remains at the forefront if negative. sign = -1 if n < 0 else 1 reversed_int = int(str(abs(n))[::-1]) return sign * reversed_int"},{"question":"Write a program that takes an integer array and an integer ( k ) as input. The program should rotate the array to the right by ( k ) steps, where ( k ) is non-negative. Constraints * The length of the array is between 1 and 1000. * ( 0 leq k leq 1000 ) Input Two lines: 1. The first line contains an integer array, where each element is a non-negative integer and the array elements are separated by spaces. 2. The second line contains a non-negative integer ( k ). Output Print the array after rotating it to the right by ( k ) steps. The elements should be separated by spaces. Example Input 1 2 3 4 5 2 Output 4 5 1 2 3","solution":"def rotate_array(nums, k): Rotates the array to the right by k steps. n = len(nums) k = k % n # Ensure k is within bounds even if it\'s larger than n return nums[-k:] + nums[:-k] if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() nums = list(map(int, data[:-1])) k = int(data[-1]) rotated_array = rotate_array(nums, k) print(\\" \\".join(map(str, rotated_array)))"},{"question":"Transform the Array Given an array of integers `arr` of length `n`, you need to perform a series of operations to transform the array so that all elements are equal. The allowed operation is to increment `n-1` elements by 1 in one move. Determine the minimum number of moves required to make all elements equal. Input The input consists of a sequence of multiple datasets. The end of the input is indicated by a line containing only one 0. Each dataset has the following format. > n > a1 a2 ... an The meaning of each symbol is as follows. * n indicates the number of elements in the array. This is an integer between 1 and 1000. * ai represents the elements of the array. Each element is an integer whose absolute value is 10^6 or less. The numbers on the same line are separated by a single space. Output For each dataset, print the minimum number of moves required to make all elements equal on a single line. Sample Input 3 1 2 3 4 1 1 1 1 4 -1 -1 2 2 0 Sample Output 3 0 6 Example Input 3 1 2 3 4 1 1 1 1 4 -1 -1 2 2 0 Output 3 0 6","solution":"def min_moves_to_equal_elements(n, arr): This function calculates the minimum number of moves required to make all elements in the array equal. Parameters: n (int): Number of elements in the array. arr (list): A list of integers representing the array. Returns: int: The minimum number of moves required to make all elements equal. if n <= 1: return 0 min_val = min(arr) total_moves = sum(x - min_val for x in arr) return total_moves def transform_arrays(input_data): Transforms multiple arrays based on the defined conditions and returns the results for each array. Parameters: input_data (list): A list of strings, each representing a dataset. Returns: list: A list of integers, each representing the minimum number of moves for the corresponding dataset. results = [] data_iter = iter(input_data) for line in data_iter: n = int(line) if n == 0: break arr = list(map(int, next(data_iter).split())) result = min_moves_to_equal_elements(n, arr) results.append(result) return results"},{"question":"A leading financial company has a problem that they want solved using a program. They receive a number of transactions every day, and they need to perform some queries on the transactions history. Each transaction consists of a date (formatted as YYYY-MM-DD) and an amount, which can be positive (for credits) or negative (for debits). The company wants an ability to quickly find the sum of amounts for transactions within a certain date range. You have to implement a function that receives an array of transactions and an array of queries. Each query asks for the sum of transaction amounts within a specific date range. Transactions and queries are formatted as follows: - Each transaction is represented as [date, amount] - Each query is represented as [start_date, end_date] **Input:** - An integer n (1 ≤ n ≤ 10^5) representing the number of transactions. - An array of n transactions, where each transaction is formatted as [string date, integer amount]. - An integer q (1 ≤ q ≤ 10^5) representing the number of queries. - An array of q queries, where each query is formatted as [string start_date, string end_date]. **Output:** - For each query, output the sum of the amounts for the transactions that occur within the given date range. **Example:** Input: ``` 5 [ [\\"2023-01-01\\", 100], [\\"2023-01-05\\", -50], [\\"2023-02-01\\", 200], [\\"2023-03-01\\", -100], [\\"2023-03-15\\", 150] ] 3 [ [\\"2023-01-01\\", \\"2023-01-31\\"], [\\"2023-02-01\\", \\"2023-02-28\\"], [\\"2023-01-01\\", \\"2023-03-31\\"] ] ``` Output: ``` 50 200 300 ``` **Explanation:** For the first query [\\"2023-01-01\\", \\"2023-01-31\\"], the transactions within this range are [\\"2023-01-01\\", 100] and [\\"2023-01-05\\", -50]. The sum of these amounts is 50. For the second query [\\"2023-02-01\\", \\"2023-02-28\\"], the only transaction within this date range is [\\"2023-02-01\\", 200]. The sum of this amount is 200. For the third query [\\"2023-01-01\\", \\"2023-03-31\\"], all transactions fall within the range, and the sum is 100 + (-50) + 200 + (-100) + 150 = 300.","solution":"from bisect import bisect_left, bisect_right def transaction_sum(transactions, queries): # Sort transactions by date transactions.sort() # Preprocess transactions to separate dates and amounts dates = [t[0] for t in transactions] amounts = [t[1] for t in transactions] # Generate prefix sums for transaction amounts prefix_sums = [0] * (len(amounts) + 1) for i in range(len(amounts)): prefix_sums[i + 1] = prefix_sums[i] + amounts[i] result = [] # Process each query for start, end in queries: # Find the range of transaction indices that fall within the [start, end] date range start_idx = bisect_left(dates, start) end_idx = bisect_right(dates, end) - 1 if start_idx <= end_idx: result.append(prefix_sums[end_idx + 1] - prefix_sums[start_idx]) else: result.append(0) return result"},{"question":"You have been assigned the task to develop a software module that will help manage the inventory of a book store. Each book in the store is uniquely identified by an ISBN number. Additionally, the book has a title and an author associated with it. Your task is to implement functionalities that will enable the store to keep track of the books currently in stock, as well as querying the inventory to search for books by ISBN number or title. Write a program that supports the following operations: 1. **Add a new book**: Adds a new book to the inventory. Each book is added with its ISBN number, title, and author. 2. **Remove a book**: Removes a book from the inventory using its ISBN number. 3. **Search by ISBN**: Searches for a book in the inventory and returns its details if the ISBN number matches. 4. **Search by Title**: Searches for books in the inventory and returns details of all books where the title contains the search keyword. The program should read input in the following format: > n > `operation1` > `operation2` > ... > `operationn` Where `n` is the number of operations, and each operation can be one of the following: - `ADD ISBN Title Author`: Adds a book with the given ISBN number, title, and author. - `REMOVE ISBN`: Removes the book with the given ISBN number. - `SEARCH ISBN ISBN`: Searches for the book with the given ISBN number and prints the details. - `SEARCH TITLE keyword`: Searches for books with titles containing the keyword and prints the details. For each search operation, print the details of the matched books in the following format: `ISBN|Title|Author` If no books match the search criteria, print `No match found`. Example Input: 10 ADD 978-3-16-148410-0 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" ADD 978-1-891830-75-4 \\"The Catcher in the Rye\\" \\"J.D. Salinger\\" REMOVE 978-1-891830-75-4 SEARCH ISBN 978-3-16-148410-0 SEARCH ISBN 978-1-891830-75-4 ADD 978-0-14-028333-4 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" ADD 978-1-4028-9467-7 \\"1984\\" \\"George Orwell\\" SEARCH TITLE \\"Mockingbird\\" SEARCH TITLE \\"1984\\" SEARCH TITLE \\"Catcher\\" Example Output: 978-3-16-148410-0|The Great Gatsby|F. Scott Fitzgerald No match found 978-0-14-028333-4|To Kill a Mockingbird|Harper Lee 978-1-4028-9467-7|1984|George Orwell No match found","solution":"class BookStore: def __init__(self): self.inventory = {} def add_book(self, isbn, title, author): self.inventory[isbn] = (title, author) def remove_book(self, isbn): if isbn in self.inventory: del self.inventory[isbn] def search_by_isbn(self, isbn): if isbn in self.inventory: title, author = self.inventory[isbn] return f\\"{isbn}|{title}|{author}\\" else: return \\"No match found\\" def search_by_title(self, keyword): matches = [] for isbn, (title, author) in self.inventory.items(): if keyword.lower() in title.lower(): matches.append(f\\"{isbn}|{title}|{author}\\") if matches: return \\"n\\".join(matches) else: return \\"No match found\\""},{"question":"Polycarpus is working on a new problem involving arithmetic progressions in sequences. An arithmetic progression is a sequence of numbers such that the difference between consecutive elements is constant. Formally, a sequence {a1, a2, ..., an} is an arithmetic progression if and only if there is a constant d such that ai+1 = ai + d for all valid i. Polycarpus has a list of integers and wants to determine the length of the longest arithmetic progression that can be formed from the numbers in the list. Note that the elements of the arithmetic progression do not need to be consecutive elements from the list, and each element from the list can be used only once. Input The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers — the elements of the list (1 ≤ element ≤ 10^6). Output Print a single integer — the length of the longest arithmetic progression that can be formed from the given list of integers. Examples Input 6 1 7 10 13 14 16 Output 4 Input 5 10 20 30 40 50 Output 5 Input 4 3 6 9 12 Output 4 Note In the first example, one of the longest arithmetic progressions is 7, 10, 13, 16. In the second example, the whole list forms an arithmetic progression with a common difference of 10. In the third example, the whole list forms an arithmetic progression with a common difference of 3.","solution":"def longest_arithmetic_progression(arr): This function finds the length of the longest arithmetic progression in a given list of integers. if not arr: return 0 n = len(arr) if n == 1: return 1 arr.sort() # Create a table to store lengths of longest APs. # table[i][j] will store length of the longest AP that ends with arr[i] and arr[j]. table = [[2 for _ in range(n)] for __ in range(n)] # Initialize result max_len = 2 # Consider every element as the second element of the AP for j in range(n-1, 0, -1): i = j - 1 k = j + 1 while (i >= 0 and k <= n-1): if arr[i] + arr[k] < 2 * arr[j]: k += 1 elif arr[i] + arr[k] > 2 * arr[j]: table[i][j] = 2 i -= 1 else: table[i][j] = table[j][k] + 1 max_len = max(max_len, table[i][j]) i -= 1 k += 1 while (i >= 0): table[i][j] = 2 i -= 1 return max_len"},{"question":"Lily is exploring a magical forest filled with enchanted trees. Each tree has a unique number associated with it, representing its magical power. To gather magic, Lily needs to pick a sequence of trees such that the sum of their magical powers is exactly equal to a given target number. However, there is a twist. The sequence of trees must be non-empty, and the total number of trees picked must be minimal. If there are multiple sequences with the same minimal number of trees, Lily should pick the one where the sum of magical powers is closest to the target number. You need to help Lily find the sequence that meets these criteria. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of trees. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10000), representing the magical powers of the trees. The third line contains an integer target (1 ≤ target ≤ 10000), representing the target sum of magical powers. Output Print the length of the sequence that Lily should pick. If no valid sequence exists, print -1. Examples Input 5 2 3 5 8 13 10 Output 2 Input 6 1 2 3 4 5 6 11 Output 2 Note In the first sample, the sequence 5 + 5 gives a sum of 10 and consists of 2 trees, which is the minimal number of trees needed. In the second sample, the sequence 5 + 6 gives a sum of 11 and consists of 2 trees, which is the minimal number of trees needed.","solution":"def min_trees_to_target(n, magical_powers, target): Returns the minimal number of trees that Lily should pick such that the sum of their magical powers is exactly equal to the target number. If no valid sequence exists, returns -1. from collections import defaultdict # dp[i] will store the minimum number of trees needed to get sum i dp = defaultdict(lambda: float(\'inf\')) dp[0] = 0 for power in magical_powers: for t in range(target, power - 1, -1): dp[t] = min(dp[t], dp[t - power] + 1) return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"You are working on a system to manage a library. One of the features needed is to calculate overdue fees for borrowed books. Each book has a unique ID, a due date, and a return date. If a book is returned after the due date, a fee is incurred based on the number of overdue days and the fee rate per day. Write a program to calculate and print the total overdue fee for each borrowed book. Fee details: - If a book is returned on or before the due date, no fee is charged. - If a book is returned after the due date, a fee is charged for each overdue day. - The fee rate per day is fixed at 0.50. Input The input consists of multiple datasets, each containing details of several borrowed books. The last dataset is followed by a line containing a single zero to indicate the end of input. Each dataset starts with an integer n (0 < n ≤ 100), the number of borrowed books. Each of the following n lines contains the book ID, due date, and return date in the format: ID yyyy-mm-dd yyyy-mm-dd ID is a string (1 ≤ length of ID ≤ 20) representing the book\'s unique identifier. The first yyyy-mm-dd is the due date, and the second yyyy-mm-dd is the return date. Both dates are given in the format following the Gregorian calendar. Output For each dataset, print the book ID and the total overdue fee rounded to two decimal places, in the following format: ID fee If no book in a dataset incurs a fee, print \\"no overdue\\" for that dataset. Example Input 3 BK001 2023-10-01 2023-10-05 BK002 2023-09-25 2023-09-25 BK003 2023-11-10 2023-11-15 2 BK004 2022-12-01 2022-12-04 BK005 2023-01-01 2023-01-10 0 Output BK001 2.00 BK003 2.50 no overdue BK004 1.50 BK005 4.50","solution":"from datetime import datetime def calculate_overdue_fees(datasets): Calculates and prints the total overdue fee for each borrowed book. Parameters: datasets (list of tuples): A list where each tuple represents a dataset, and each dataset contains an integer n followed by n tuples (ID, due_date, return_date). fee_per_day = 0.50 results = [] for dataset in datasets: n = dataset[0] book_records = dataset[1:] fees_incurred = [] for record in book_records: book_id, due_date, return_date = record due_date = datetime.strptime(due_date, \'%Y-%m-%d\') return_date = datetime.strptime(return_date, \'%Y-%m-%d\') if return_date > due_date: overdue_days = (return_date - due_date).days overdue_fee = overdue_days * fee_per_day fees_incurred.append((book_id, overdue_fee)) if fees_incurred: for book_id, fee in fees_incurred: results.append(f\\"{book_id} {fee:.2f}\\") else: results.append(\\"no overdue\\") return results"},{"question":"Yuki loves to order pizza from her favorite pizzeria. She is given a list of \\"offered discounts\\", each of which is valid for a specific pizza size and provides a discount on the original price. She wants to buy pizza at the best possible price by applying only one discount from the list. Given the size of the pizza Yuki wants to order and the price for that size, along with the list of offered discounts for different sizes, she needs to find the minimum price she has to pay. Each discount is specified by the pizza size it applies to and a discount amount. Only one discount can be applied, and it should not be greater than the original price. Write a program to calculate the lowest price Yuki has to pay for the pizza. Constraints * 1 ≤ n ≤ 100 (number of offered discounts) * 1 ≤ original_price ≤ 10^4 (original price of the pizza) * 1 ≤ discount_amount ≤ 10^4 (amount of discount) * 1 ≤ size_wanted ≤ 50 (size of the pizza Yuki wants to order) * 1 ≤ pizza_size ≤ 50 (size for which a discount is offered) Input Input is given from Standard Input in the following format: * The first line contains the size of the pizza Yuki wants to order and the original price of that size. * The second line contains an integer n, representing the number of offered discounts. * The next n lines each contain two space-separated integers, pizza_size and discount_amount. Output Print the minimum price Yuki has to pay for the ordered pizza, after applying the best possible discount. Examples Input 12 1000 4 10 150 12 200 15 100 20 50 Output 800 Input 15 2500 3 10 999 15 500 20 200 Output 2000 Input 8 1200 2 5 300 8 150 Output 1050","solution":"def minimum_price(size_wanted, original_price, discounts): Calculate the minimum price Yuki has to pay for the pizza after applying the best possible discount. :param size_wanted: The size of the pizza Yuki wants to order :param original_price: The original price of the pizza :param discounts: The list of offered discounts [(pizza_size, discount_amount), ...] :return: The minimum price Yuki has to pay min_price = original_price for pizza_size, discount_amount in discounts: if pizza_size == size_wanted: discounted_price = max(original_price - discount_amount, 0) min_price = min(min_price, discounted_price) return min_price if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() size_wanted, original_price = int(data[0]), int(data[1]) n = int(data[2]) discounts = [ (int(data[i * 2 + 3]), int(data[i * 2 + 4])) for i in range(n) ] print(minimum_price(size_wanted, original_price, discounts))"},{"question":"Given a list of integers, write a function `group_equal_elements(lst)` that groups all equal elements into sublists. Each sublist should contain only identical elements and the sublists should appear in the order of their first appearance in the input list. # Input: - `lst`: A list of integers. # Output: - A list of lists, where each sublist contains identical elements from the input list `lst`. # Example: ```python input_list = [1, 2, 2, 3, 4, 4, 4, 5, 1] print(group_equal_elements(input_list)) ``` # Output: ```python [[1], [2, 2], [3], [4, 4, 4], [5], [1]] ``` # Constraints: - All elements in the input list are integers. - The length of the input list will not exceed 10^4.","solution":"def group_equal_elements(lst): Groups all equal elements into sublists. Each sublist contains only identical elements and sublists appear in the order of their first appearance in the input list. Parameters: lst (list): A list of integers. Returns: list: A list of lists, where each sublist contains identical elements from the input list. if not lst: return [] grouped_elements = [] current_group = [lst[0]] for element in lst[1:]: if element == current_group[0]: current_group.append(element) else: grouped_elements.append(current_group) current_group = [element] grouped_elements.append(current_group) return grouped_elements"},{"question":"A group of n programmers is sitting around a circular table, and they are all exchanging their knowledge. Each programmer can pass their knowledge to the programmer immediately to their left or right. Given the number of programmers and the number of knowledge exchange operations, your task is to determine the final knowledge distribution around the table. Write a function that takes the following inputs: - An integer n (2 ≤ n ≤ 1000), the number of programmers. - An integer m (1 ≤ m ≤ 1000), the number of operations. - An array of integers a of length n, where a[i] represents the knowledge of the programmer at the i-th position initially. - An array of tuples of length m, where each tuple is of the form (x, y, d), indicating that in the d-th operation, the knowledge of the programmer at the x-th position (1-indexed) is passed to the programmer at the y-th position (1-indexed). The function should return the final knowledge distribution around the table. Input The input consists of: - An integer n representing the number of programmers. - An integer m representing the number of operations. - An array a of n integers representing the initial knowledge of the programmers. - An array of m tuples of the form (x, y, d) representing the operations. Output Return the final array of integers representing the knowledge of each programmer after all the operations. Example Input 5 3 [10, 20, 30, 40, 50] [(1, 2, 1), (3, 4, 2), (2, 5, 3)] Output [10, 30, 30, 50, 50] Explanation Initially, the array is [10, 20, 30, 40, 50]. After the first operation, the knowledge is [10, 30, 30, 40, 50] since the programmer at position 1 passes their knowledge to the programmer at position 2. After the second operation, the knowledge is [10, 30, 30, 50, 50] since the programmer at position 3 passes their knowledge to the programmer at position 4. After the third operation, the knowledge is [10, 30, 30, 50, 50] since the programmer at position 2 passes their knowledge to the programmer at position 5.","solution":"def update_knowledge(n, m, knowledge, operations): Updates the knowledge distribution around the table based on the operations. Parameters: - n (int): The number of programmers. - m (int): The number of operations. - knowledge (list of int): The initial knowledge distribution. - operations (list of tuples): Each tuple contains (x, y, d) representing the operation details. Returns: - list of int: The final knowledge distribution. for x, y, d in operations: knowledge[y - 1] = knowledge[x - 1] return knowledge"},{"question":"Description You are given a matrix and a target number. Your task is to find out if the target number exists in the matrix. The matrix has the following properties: 1. Each row is sorted in non-decreasing order. 2. The first integer of each row is greater than or equal to the last integer of the previous row. Input Format The input starts with an integer M, the number of test cases. Each test case starts with two integers N and T, where N is the number of rows (0 < N ≤ 1000) and T is the target number. This is followed by N rows of space-separated integers, representing the matrix. Output Format For each test case, output \\"YES\\" if the target number exists in the matrix, otherwise output \\"NO\\". SAMPLE INPUT 2 3 10 1 3 5 7 8 10 12 15 20 4 14 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 SAMPLE OUTPUT YES YES Explanation: In the first test case, the matrix is: 1 3 5 7 8 10 12 15 20 The target number 10 is found in the matrix. In the second test case, the matrix is: 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 The target number 14 is found in the matrix.","solution":"def search_target_in_matrix(test_cases): results = [] for m in test_cases: N, T, matrix = m[\'N\'], m[\'T\'], m[\'matrix\'] found = binary_search(N, T, matrix) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def binary_search(N, T, matrix): start, end = 0, N * len(matrix[0]) - 1 cols = len(matrix[0]) while start <= end: mid = (start + end) // 2 mid_val = matrix[mid // cols][mid % cols] if mid_val == T: return True elif mid_val < T: start = mid + 1 else: end = mid - 1 return False"},{"question":"Alyssa is working on an inventory management system. She needs to implement a function that can help her identify the most frequent product ID within a given list of product IDs. Since the inventory is updated frequently, she wants the function to be efficient, even for large lists. Your task is to write a function that finds and returns the product ID that occurs most frequently in the list. If there are multiple product IDs with the same highest frequency, return the smallest one. Function Signature: ```python def most_frequent_product_id(product_ids: List[int]) -> int: ``` **Input**: - `product_ids`: A list of integers where each integer represents a product ID. The length of the list is at most 10^5. The product IDs are all positive integers. **Output**: - Return the product ID that occurs the most frequently. If there are multiple IDs with the same frequency, return the smallest ID among them. **Examples**: **Example 1**: ```python product_ids = [1, 2, 2, 1, 1] # The most frequent product ID is 1, since it occurs 3 times. print(most_frequent_product_id(product_ids)) # Output: 1 ``` **Example 2**: ```python product_ids = [3, 3, 5, 2, 5, 2, 2, 3] # The most frequent product ID is 2, since it occurs 3 times. # Even though 3 also occurs 3 times, 2 is smaller than 3. print(most_frequent_product_id(product_ids)) # Output: 2 ``` **Example 3**: ```python product_ids = [10, 20, 30, 20, 10, 30] # All product IDs occur 2 times each. The smallest ID is 10. print(most_frequent_product_id(product_ids)) # Output: 10 ``` **Requirements**: - Implement the function within a maximum time complexity of O(n), where n is the length of the product_ids list. - The function should handle edge cases such as an empty list where it can return any arbitrary value or raise an appropriate error/exception.","solution":"from typing import List from collections import Counter def most_frequent_product_id(product_ids: List[int]) -> int: if not product_ids: raise ValueError(\\"The list of product IDs cannot be empty.\\") count = Counter(product_ids) max_freq = max(count.values()) most_frequent_ids = [product_id for product_id, freq in count.items() if freq == max_freq] return min(most_frequent_ids)"},{"question":"Peter is fascinated by numbers. One day, he decided to find the first missing positive integer from a given list. Write a program to help Peter in finding this number. Given an unsorted array of integers, your task is to find the smallest positive integer that is not present in the array. INPUT The first line of input contains a single integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. OUTPUT Print the smallest positive integer that is not present in the array. CONSTRAINTS 1 ≤ N ≤ 100000 -1000000 ≤ A[i] ≤ 1000000 SAMPLE INPUT 6 3 4 -1 1 2 -6 SAMPLE OUTPUT 5","solution":"def find_first_missing_positive(nums): Finds the smallest positive integer that is not present in the array. n = len(nums) # Move each positive integer to its correct position # i.e., value 1 should be at index 0, value 2 at index 1, and so on for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first index which does not have the correct value for i in range(n): if nums[i] != i + 1: return i + 1 # If all values are in their correct position, then return n + 1 return n + 1"},{"question":"A researcher named Alex is developing a new network monitoring tool. To test the tool, he needs to analyze the traffic patterns of data packets through a single router in a network. The router forwards packets to three different output channels using a predefined sequence that repeats indefinitely. Specifically, the router sends packets 1 to the first channel, 2 to the second channel, and 3 to the third channel, and then repeats this pattern (1, 2, 3, 1, 2, 3, …). Alex wants to determine the distribution of packets across the three channels for a given number of packets. Write a program to calculate the number of packets each channel receives after all packets have been forwarded. Input The first and only line of the input contains a single integer n (1 ≤ n ≤ 10^9) — the total number of packets to be forwarded. Output Print three integers separated by spaces: the number of packets received by the first channel, the second channel, and the third channel, respectively. Examples Input 7 Output 3 2 2 Input 10 Output 4 3 3 Note In the first example, the distribution of packets to the channels would be: 1st channel: packets 1, 4, 7 (3 packets) 2nd channel: packets 2, 5 (2 packets) 3rd channel: packets 3, 6 (2 packets) In the second example, the distribution of packets to the channels would be: 1st channel: packets 1, 4, 7, 10 (4 packets) 2nd channel: packets 2, 5, 8 (3 packets) 3rd channel: packets 3, 6, 9 (3 packets)","solution":"def packet_distribution(n): Returns the number of packets each channel receives. The function returns a tuple of three integers representing the number of packets received by the first, second, and third channels respectively. # Packets in fully repeated patterns of 3 full_patterns = n // 3 # Remaining packets after full patterns remaining_packets = n % 3 # Distribution first_channel = full_patterns second_channel = full_patterns third_channel = full_patterns if remaining_packets >= 1: first_channel += 1 if remaining_packets >= 2: second_channel += 1 return first_channel, second_channel, third_channel"},{"question":"You are given a list of integers and a target integer k. Your task is to find two distinct integers in the list such that their sum is equal to k. If there are multiple pairs, return any one of them. If no such pair exists, return an empty list. Input - The first line of input contains an integer n (1 ≤ n ≤ 10^4), the length of the list. - The second line contains n space-separated integers representing the elements of the list. - The third line contains an integer k (|k| ≤ 10^9), the target sum. Output - If there exists two distinct integers in the list whose sum is equal to k, output them as a pair of integers. - If there are multiple valid pairs, you can output any one of them. - If there is no such pair, output an empty list. Example # Input 6 1 2 3 4 5 6 9 # Output [3, 6] # Input 4 5 5 5 5 10 # Output [5, 5] # Input 3 1 2 3 7 # Output [] # Constraints 1. The integers in the list are not necessarily distinct. 2. The answer, if it exists, must be based on two distinct indices from the list. Hence, you need to return the values and not their indices.","solution":"def find_pair_with_sum(n, lst, k): Returns a pair of distinct integers from the list whose sum equals k. If no such pair exists, returns an empty list. seen = set() for number in lst: complementary = k - number if complementary in seen: return [complementary, number] seen.add(number) return []"},{"question":"Neko has a string of lowercase English letters. She considers the string beautiful if every letter occurs an even number of times. She can transform the string into a beautiful string by performing exactly one operation: selecting exactly one character and changing it to another lowercase English letter. Given a string s, can you determine if it is possible to transform the string into a beautiful string by performing exactly one operation? Input: The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000), which consists of only lowercase English letters. Output: For each test case, print \\"YES\\" if it is possible to transform the string into a beautiful string by performing exactly one operation; otherwise, print \\"NO\\". Example: Input: 3 abca abcdef azz Output: YES NO YES Explanation: In the first case, changing \'b\' to \'c\' makes the string \\"acca\\", in which every character occurs an even number of times. In the second case, there is no way to make every character occur an even number of times by changing one character. In the third case, changing the first \'z\' to an \'a\' makes the string \\"aaz\\", in which every character occurs an even number of times.","solution":"def is_beautiful_possible(t, test_cases): results = [] for s in test_cases: counter = {} for char in s: if char in counter: counter[char] += 1 else: counter[char] = 1 odd_count = 0 for count in counter.values(): if count % 2 != 0: odd_count += 1 # A string is beautiful by changing one character if there is at most one odd character count if odd_count <= 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sarah is participating in a programming contest, and one of her tasks is to identify prime numbers within a given range. She needs to write a program to help her find all prime numbers between two integers, inclusive. A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself. For instance, the first few prime numbers are 2, 3, 5, 7, 11, and so on. Sarah seeks the most efficient approach possible, given the constraints. Input: The first line of input contains two integers a and b (1 ≤ a ≤ b ≤ 10^6). Output: Output all prime numbers between a and b (inclusive), each on a new line. If there are no primes in the given range, the program should output \\"No primes\\" (without quotes). Examples: Input: 10 20 Output: 11 13 17 19 Input: 22 25 Output: 23 Input: 15 15 Output: No primes Note: In the first example, the prime numbers between 10 and 20 are 11, 13, 17, and 19. In the second example, the prime number between 22 and 25 is 23. In the third example, there are no prime numbers between 15 and 15, so the output is \\"No primes\\".","solution":"def get_prime_numbers(a, b): Returns a list of prime numbers between a and b (inclusive). If there are no primes in the range, return [\\"No primes\\"]. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [num for num in range(a, b + 1) if is_prime(num)] if not primes: return [\\"No primes\\"] return primes"},{"question":"You are given a 2D grid of characters where each character is either \'X\' or \'O\'. The goal is to replace all \'O\'s that are surrounded by \'X\'s on four sides with \'X\'s. Note that any \'O\'s on the border of the grid, or connected to an \'O\' on the border, should not be replaced. Write a function: ```python def capture_regions(board: List[List[str]]) -> None: ``` Input * `board` - A 2D list of characters where each character is either \'X\' or \'O\'. * The function should modify the input grid in-place. Output The function should not return anything. The grid should be modified directly to replace all captured regions (\'O\'s surrounded by \'X\'s) with \'X\'s. Example ```python board = [ [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'O\', \'O\', \'X\'], [\'X\', \'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\', \'X\'] ] capture_regions(board) # The board after running the function should look like: # [ # [\'X\', \'X\', \'X\', \'X\'], # [\'X\', \'X\', \'X\', \'X\'], # [\'X\', \'X\', \'X\', \'X\'], # [\'X\', \'O\', \'X\', \'X\'] # ] ``` Explanation In the example above, the \'O\'s in the second and third rows are fully surrounded by \'X\'s, so they are replaced with \'X\'s. The \'O\' in the last row is not captured as it is connected to the border. Constraints 1. The grid will have at most 200 rows and 200 columns. 2. The grid will contain only the characters \'X\' and \'O\'. # Note - Consider using Depth-first search (DFS) or Breadth-first search (BFS) to identify regions that should remain unchanged. - Pay attention to edge cases where the grid might be very small or very large.","solution":"from typing import List def capture_regions(board: List[List[str]]) -> None: if not board or not board[0]: return rows, cols = len(board), len(board[0]) def dfs(x, y): if x < 0 or x >= rows or y < 0 or y >= cols or board[x][y] != \'O\': return board[x][y] = \'E\' # Mark as escaped dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) # Step 1: Capture unsurrounded regions by marking them with \'E\' for i in range(rows): if board[i][0] == \'O\': dfs(i, 0) if board[i][cols-1] == \'O\': dfs(i, cols-1) for j in range(cols): if board[0][j] == \'O\': dfs(0, j) if board[rows-1][j] == \'O\': dfs(rows-1, j) # Step 2: Flip surrounded regions to \'X\' and escaped regions back to \'O\' for i in range(rows): for j in range(cols): if board[i][j] == \'O\': board[i][j] = \'X\' elif board[i][j] == \'E\': board[i][j] = \'O\'"},{"question":"Anna loves number puzzles. One day, she thought of an interesting game where she permutes an array of integers and checks the difference between adjacent elements. To make it more challenging, she considered the sum of these differences. Formally, for a permutation P of an array A of length n, she calculates: S(P) = |P[1] - P[0]| + |P[2] - P[1]| + ... + |P[n-1] - P[n-2]| Anna wants to know the minimum possible value of S(P) she can achieve by permuting the original array A. Given the array A of length n, your task is to help Anna determine the minimum value of S(P). Input The first line contains an integer n (1 ≤ n ≤ 105) – the length of the array. The second line contains n integers A[1], A[2], ..., A[n] (-109 ≤ A[i] ≤ 109) – the elements of the array. Output Print a single integer – the minimum value of S(P). Examples Input 5 4 3 2 1 0 Output 4 Input 3 7 1 5 Output 6 Note In the first example, Anna can permute the array as [0, 1, 2, 3, 4], then the sum of the absolute differences is |1-0| + |2-1| + |3-2| + |4-3| = 4. In the second example, one possible permutation is [1, 5, 7], then the sum of the absolute differences is |5-1| + |7-5| = 6. This is indeed the minimum possible value.","solution":"def min_sum_of_differences(arr): Given an array of integers, returns the minimum sum of absolute differences between adjacent elements by permuting the array. arr.sort() return sum(abs(arr[i] - arr[i - 1]) for i in range(1, len(arr)))"},{"question":"You are given a string that contains both alphabets and numeric digits. The task is to separate the alphabets and the numeric digits into two separate strings such that: 1. The relative order of the alphabets and digits remains unchanged. 2. The alphabets string should contain all the alphabet characters in the same order they appeared in the original string. 3. The digits string should contain all the numeric characters in the same order they appeared in the original string. Write a function `separate_characters` that takes a single argument: - `input_str` (a string containing both alphabets and digits, of length between 1 and 1000 inclusive) Your function should return a tuple of two strings: - The first string contains all the alphabet characters from the input string. - The second string contains all the numeric characters from the input string. # Examples **Input** ```python separate_characters(\\"a1b2c3\\") ``` **Output** ```python (\\"abc\\", \\"123\\") ``` **Input** ```python separate_characters(\\"abc123\\") ``` **Output** ```python (\\"abc\\", \\"123\\") ``` **Input** ```python separate_characters(\\"1a2b3c\\") ``` **Output** ```python (\\"abc\\", \\"123\\") ``` # Note - Both strings in the output should maintain the relative order of characters as they appeared in the original input string. - The input string will always contain at least one alphabet character and one digit.","solution":"def separate_characters(input_str): Separates the alphabets and numeric digits from the input string into two separate strings. Args: input_str (str): The input string containing both alphabets and digits. Returns: tuple: A tuple containing two strings - one with alphabet characters and one with numeric characters. alphabets = [] digits = [] for char in input_str: if char.isalpha(): alphabets.append(char) elif char.isdigit(): digits.append(char) return (\\"\\".join(alphabets), \\"\\".join(digits))"},{"question":"You have a 2D plane with M rows and N columns represented by a grid. Each cell in the grid initially contains the value 0. You are given K operations to perform on this grid. Each operation is described by one of the following types: 1. `1 x y`: Increment the value in cell (x, y) by 1. 2. `2 x1 y1 x2 y2`: Increment the values in all cells that fall within the rectangular subgrid described by its top-left corner (x1, y1) and bottom-right corner (x2, y2) by 1. After processing all K operations, print the sum of all values in the entire grid. Constraints - 1 leq M, N leq 10^3 - 1 leq K leq 10^5 - 1 leq x, y, x1, y1, x2, y2 leq 10^3 Input Input is given from Standard Input in the following format: M N K Operation_1 vdots Operation_K Output Print the sum of all values in the grid after processing all K operations. Examples Input 4 3 5 1 2 2 2 1 1 3 2 1 3 3 2 2 1 4 3 1 1 1 Output 18 Input 3 3 2 2 1 1 2 2 1 3 3 Output 5","solution":"def grid_operations(M, N, K, operations): grid = [[0] * N for _ in range(M)] for operation in operations: parts = list(map(int, operation.split())) if parts[0] == 1: x, y = parts[1] - 1, parts[2] - 1 grid[x][y] += 1 elif parts[0] == 2: x1, y1, x2, y2 = parts[1] - 1, parts[2] - 1, parts[3] - 1, parts[4] - 1 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): grid[i][j] += 1 total_sum = sum(sum(row) for row in grid) return total_sum"},{"question":"You are given a string that contains only lowercase letters and question marks (\'?\'). You should replace each question mark with a lowercase letter so that no two adjacent characters are the same. If there are multiple valid answers, you can return any of them. If it\'s not possible to create such a string, output -1. Input A single line containing the string s (1 ≤ |s| ≤ 1000). Output A single line containing the resulting string or -1 if no such string is possible. Examples Input a?c? Output abca Input aa? Output -1","solution":"def replace_question_marks(s): if \'?\' not in s: for i in range(1, len(s)): if s[i] == s[i-1]: return -1 return s s = list(s) for i in range(len(s)): if s[i] == \'?\': for repl in \'abcdefghijklmnopqrstuvwxyz\': if (i > 0 and s[i-1] == repl) or (i < len(s)-1 and s[i+1] == repl): continue s[i] = repl break result = \'\'.join(s) for i in range(1, len(result)): if result[i] == result[i-1]: return -1 return result"},{"question":"You are given a rectangular lawn of size NxM divided into 1x1 unit squares. Each unit square can either be filled with grass or be empty. Your task is to determine the minimum number of rectangles required to cover all the grass-filled squares. Each rectangle must cover consecutive rows and columns of unit squares. Write a program that takes in a binary matrix representation of the lawn where 1 indicates a grass-filled square and 0 indicates an empty square. The program should output the minimum number of rectangles required to cover all the grass-filled squares. Input example: 2 3 011 111 Output example: 1 Explanation: In this example, the matrix is: 0 1 1 1 1 1 The minimum number of rectangles is 1, covering the area from (1,2) to (2,3). Input - The first line contains an integer N (1 ≤ N ≤ 50), the number of rows in the lawn. - The second line contains an integer M (1 ≤ M ≤ 50), the number of columns in the lawn. - Each of the next N lines contains a string of M characters (\'0\' or \'1\'), representing the lawn\'s grid. Output - Output a single integer, the minimum number of rectangles needed. Example Input 2 3 011 111 Output 1","solution":"def min_rectangles_covering_grass(lawn): Determine the minimum number of rectangles required to cover all the grass-filled squares. :param lawn: List of strings representing the lawn where \'1\' is grass and \'0\' is empty. :return: Integer representing the minimum number of rectangles required to cover the grass. n = len(lawn) m = len(lawn[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): # Perform a DFS to mark all connected \'1\'s stack = [(x, y)] while stack: cx, cy = stack.pop() if not (0 <= cx < n and 0 <= cy < m) or visited[cx][cy] or lawn[cx][cy] == \'0\': continue visited[cx][cy] = True for nx, ny in [(cx + 1, cy), (cx - 1, cy), (cx, cy + 1), (cx, cy - 1)]: stack.append((nx, ny)) rectangles = 0 for i in range(n): for j in range(m): if lawn[i][j] == \'1\' and not visited[i][j]: dfs(i, j) rectangles += 1 return rectangles"},{"question":"You are given an integer array `arr` consisting of `n` elements. Your task is to rearrange the elements of the array such that all even numbers appear before all odd numbers. However, the relative order of the even and odd numbers should remain the same. For example, if the input array is [3, 1, 2, 4], the output should be [2, 4, 3, 1]. Write a function to achieve this rearrangement. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 200) — the number of elements in the array `arr`. The second line contains `n` space-separated integers representing the elements of the array `arr`. Output Print the rearranged array where all even numbers appear before all odd numbers, while preserving their relative order. Examples Input 4 3 1 2 4 Output 2 4 3 1 Input 5 1 2 3 4 5 Output 2 4 1 3 5 Note In the first example, the even numbers are [2, 4], and the odd numbers are [3, 1]. After arranging, the final array is [2, 4, 3, 1]. In the second example, the even numbers are [2, 4], and the odd numbers are [1, 3, 5]. After arranging, the final array is [2, 4, 1, 3, 5].","solution":"def rearrange_even_odd(arr): Rearrange the array such that all even numbers appear before all odd numbers while preserving their relative order. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Lara has recently taken an interest in number sequences and discovered a fascinating property: a sequence is beautiful if it does not contain any two consecutive elements with the same value. Now, Lara has a sequence of integers and she wants to make the sequence beautiful by removing the minimum number of elements. For example, if Lara has the sequence [4, 4, 2, 4, 2, 2, 2], she can remove elements at positions 1, 4, and 6 to make the sequence [4, 2, 4, 2]. Alternatively, she can remove elements at positions 2, 5, and 6 to achieve the same result. Your task is to help Lara determine the minimum number of elements to remove from the sequence to make it beautiful. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence. The second line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 10^9) — the sequence. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. Output For each test case, output one integer — the minimum number of elements that Lara has to remove from the sequence to make it beautiful. Example Input 3 7 4 4 2 4 2 2 2 5 1 1 1 1 1 6 5 5 5 3 3 2 Output 3 4 3","solution":"def minimum_removals_to_beautiful_sequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] count = 0 for j in range(1, n): if sequence[j] == sequence[j-1]: count += 1 results.append(count) return results"},{"question":"Authors have defined a set of rules for playing a simplified card game. The game is played with a deck of `n` uniquely numbered cards numbered from `1` to `n`. The goal is to find out the minimum number of moves required to move from a starting configuration to a target configuration of cards. In one move, you can select any contiguous subsequence of cards and reverse their order. For example, if you have a subsequence `3, 4, 5`, reversing it would transform it to `5, 4, 3`. Your task is to determine the minimum number of such moves required to transform the starting configuration into the target configuration. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) – the number of cards. The second line contains `n` integers representing the starting configuration. The third line contains `n` integers representing the target configuration. Output Print a single integer – the minimum number of moves required to transform the starting configuration into the target configuration. Example Input 5 1 3 5 4 2 5 2 3 1 4 Output 3","solution":"def min_moves_to_transform(n, start_config, target_config): Returns the minimum number of moves required to transform the starting configuration into the target configuration. # Map the target configuration to their positions in the array target_position = {value: idx for idx, value in enumerate(target_config)} # Create the transformed array according to target positions transformed = [target_position[start] for start in start_config] # Find the Length of the Longest Increasing Subsequence (LIS) in the transformed array def length_of_LIS(sequence): # This function computes the length of LIS in O(n log n) time from bisect import bisect_left if not sequence: return 0 lis = [] for num in sequence: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) lis_length = length_of_LIS(transformed) # Minimum number of moves required min_moves = n - lis_length return min_moves"},{"question":"Jasmine loves to collect marbles, and she stores them in jars. She has n jars, each of which can hold a maximum of c marbles. Jasmine receives m shipments of marbles, where each shipment is represented by the number of marbles it contains. Jasmine wants to distribute all the marbles from each shipment into her jars without exceeding the capacity of any jar. Determine if Jasmine can store all the marbles in her jars given the constraints. Input The input consists of three integers n, c, and m (1 ≤ n, c ≤ 50, 1 ≤ m ≤ 100), followed by a list of m integers representing the number of marbles in each shipment. Output Write a single YES or NO. Write YES if and only if Jasmine can store all the marbles in her jars without exceeding the capacity of any jar. Examples Input 3 10 5 3 5 8 7 2 Output YES Input 2 8 4 6 9 2 3 Output NO","solution":"def can_store_marbles(n, c, m, shipments): Determines if Jasmine can store all the marbles in her jars without exceeding the capacity of any jar. :param n: Number of jars :param c: Capacity of each jar :param m: Number of shipments :param shipments: List containing the number of marbles in each shipment :return: \\"YES\\" if all marbles can be stored, otherwise \\"NO\\". total_capacity = n * c total_marbles = sum(shipments) if total_marbles <= total_capacity: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string s containing only lowercase alphabets. You can perform the following operation any number of times: - Choose any two adjacent characters in the string and swap them if they form an increasing sequence in alphabetical order. Your task is to determine if it\'s possible to make the string a palindrome using the above operation. Input: The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5) — the string to be checked. It is guaranteed that the sum of the lengths of all strings doesn\'t exceed 10^5. Output: For each test case, output \\"YES\\" if it is possible to make the string a palindrome using the above operation, or \\"NO\\" if it is impossible to do so. Example: Input 4 abba accddcc xyzzyx abcd Output YES YES YES NO Note In the first sample, the string is already a palindrome. In the second sample, the string is already a palindrome. In the third sample, the string is already a palindrome. In the fourth sample, it is impossible to rearrange the string to be a palindrome because every character must form pairs and there are unique characters in the string.","solution":"def can_form_palindrome(s): Determines if it is possible to make the string a palindrome by swapping adjacent increasing sequence characters. from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1 def check_palindrome_cases(t, cases): Checks if each string in the cases list can become a palindrome. Parameters: t (int): number of test cases cases (list of str): list of strings to check Returns: list of str: list containing \\"YES\\" or \\"NO\\" for each input string results = [] for s in cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer array nums, return the maximum difference between any two elements such that the larger element comes after the smaller element. Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - The first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line of each test case contains n integers nums_1, nums_2, ..., nums_n (0 ≤ nums_i ≤ 10^5) — the elements of the array. Output: For each test case, print a single integer which is the maximum difference between any two elements such that the larger element comes after the smaller element. If no such elements exist, return -1. Example: Input: 3 6 7 1 5 4 6 3 5 9 4 3 2 1 5 1 2 90 10 110 Output: 5 -1 109 Explanation: For the first test case, the maximum difference is between 1 and 6 (6 - 1 = 5). For the second test case, no element is larger than any previous element, so the answer is -1. For the third test case, the maximum difference is between 1 and 110 (110 - 1 = 109).","solution":"def max_difference(nums): This function returns the maximum difference between any two elements such that the larger element comes after the smaller element. If no such elements exist, it returns -1. if not nums or len(nums) < 2: return -1 min_element = nums[0] max_diff = -1 for i in range(1, len(nums)): if nums[i] > min_element: max_diff = max(max_diff, nums[i] - min_element) min_element = min(min_element, nums[i]) return max_diff def process_test_cases(test_cases): This function processes multiple test cases and outputs the results. results = [] for case in test_cases: n, nums = case result = max_difference(nums) results.append(result) return results"},{"question":"You are given an issue of resource allocation among a network of cities. There are `C` cities connected by `R` bidirectional roads. Each road connects two cities and has a length associated with it. To facilitate travel and connectivity, the government has decided to build additional roads, such that the longest distance between any two cities (in terms of minimum travel time) in the new network is minimized. Your task is to determine the minimum possible value of the longest distance between any two cities after adding the minimum number of required roads. Constraints: * 2 ≤ C ≤ 100,000 * 1 ≤ R ≤ min(100,000, C * (C - 1) / 2) * 1 ≤ Length of each road ≤ 100,000 Input: Input is given from Standard Input in the following format: ``` C R u1 v1 l1 u2 v2 l2 ... uR vR lR ``` Where each `ui vi li` represents a road between city `ui` and city `vi` with length `li`. Output: Print a single integer, the minimized longest distance between any two cities after the optimal addition of roads. Examples: Input: ``` 5 5 1 2 1 1 3 2 2 4 3 3 4 4 4 5 5 ``` Output: ``` 2 ``` Input: ``` 4 3 1 2 5 2 3 10 3 4 8 ``` Output: ``` 13 ``` Input: ``` 6 7 1 2 4 2 3 8 3 4 7 4 5 6 5 6 10 1 4 2 2 5 9 ``` Output: ``` 6 ```","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(C, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(C): parent.append(node) rank.append(0) mst_edges = [] i = 0 e = 0 while e < C - 1: u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 mst_edges.append((u, v, w)) union(parent, rank, x, y) longest_min_edge = max(mst_edges, key=lambda x: x[2])[2] return longest_min_edge def minimize_longest_distance(C, R, roads): return kruskal_mst(C, roads) # Only include main code if running in a script format if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().split() C = int(data[0]) R = int(data[1]) roads = [] index = 2 for _ in range(R): u, v, l = map(int, data[index:index + 3]) roads.append((u, v, l)) index += 3 print(minimize_longest_distance(C, R, roads))"},{"question":"Alice and Bob love playing games with arrays. They recently discovered a new game involving two arrays of integers, initially filled with zeroes. The game proceeds as follows: - The game starts with Alice and Bob both having their own arrays, each of length `n`. - Alice and Bob take turns performing an operation on one or both arrays. - In each turn, the player can do one of the following: - Increment any element of their own array by 1. - Increment any element of both arrays by 1. If they choose to perform this operation, they must do it for the same index in both arrays. - Alice plays first. - The goal for Alice and Bob is to maximize the sum of their own array by the end of the game. - Both players play optimally. Given the length of the array `n`, you need to determine the sums of both Alice\'s and Bob\'s arrays when both players play optimally. Input The input contains a single integer `n` (1 ≤ n ≤ 10^6) representing the length of both arrays. Output Output two integers separated by a space. The first integer is the sum of Alice\'s array, and the second integer is the sum of Bob\'s array when both players play optimally. Examples Input 2 Output 2 2 Input 3 Output 3 3 Note - For the first sample: - The optimal way for Alice is to increment both indices of both arrays by 1 in her first turn, making both arrays [1, 1]. - Bob will then increment both indices of both arrays by 1, making both arrays [2, 2]. - The sum of both arrays at the end is 2. - For the second sample: - The optimal way for Alice is to increment all three indices of both arrays by 1 in her first turn, making both arrays [1, 1, 1]. - Bob will then increment all three indices of both arrays by 1, making both arrays [2, 2, 2]. - The sum of both arrays at the end is 3.","solution":"def optimal_sums(n): Given the length of the arrays n, returns the sums of both Alice\'s and Bob\'s arrays when both players play optimally. Parameters: n (int): The length of both arrays Returns: tuple: A tuple containing two integers, the sum of Alice\'s array and the sum of Bob\'s array. # Both Alice and Bob will increment each element of both arrays by 1 in their turns. # Thus, each element of both arrays will be incremented n times (n//2 times by Alice, n//2 times by Bob, and once by Alice if n is odd). return (n, n)"},{"question":"Charlie is building a fantasy role-playing game where players can acquire various items and upgrade them through wins in battles. The items are stored in a player\'s inventory, which can hold a maximum of `N` items. Each item has a unique identification number and a power level. Charlie wants to implement a function that allows players to upgrade their items efficiently. When an upgrade is requested, the power level of a specified item is increased by a given value. If the item doesn\'t exist in the inventory, the function should indicate this appropriately. Your task is to implement the function `upgrade_item(inventory, item_id, power_up)` that takes in the following parameters: - `inventory`: A list of tuples where each tuple contains two integers: the first integer is the item\'s ID, and the second integer is the item\'s current power level. - `item_id`: An integer representing the ID of the item to be upgraded. - `power_up`: An integer representing the amount by which the item\'s power level should be increased. The function should update the power level of the specified item in the `inventory` and return the updated inventory. If the item with the specified `item_id` does not exist in the inventory, the function should return the string `\\"Item not found\\"`. # Input Constraints - `0 <= N <= 1000` (N is the number of items in the inventory) - `1 <= item_id <= 10000` - `1 <= power_up <= 1000` - Each item in the inventory has a unique `item_id`. # Example Example 1 **Input:** ```python inventory = [(1, 100), (2, 200), (3, 300)] item_id = 2 power_up = 50 ``` **Output:** ```python [(1, 100), (2, 250), (3, 300)] ``` **Explanation:** The item with ID `2` has its power level increased from `200` to `250`. Example 2 **Input:** ```python inventory = [(1, 100), (2, 200), (3, 300)] item_id = 4 power_up = 40 ``` **Output:** ```python \\"Item not found\\" ``` **Explanation:** There is no item with ID `4` in the inventory, so the function returns `\\"Item not found\\"`. # Notes - The inventory should remain unchanged if the item is not found. - Ensure that the function efficiently handles cases where the inventory has the maximum number of items. Implement the `upgrade_item` function in Python.","solution":"def upgrade_item(inventory, item_id, power_up): Updates the power level of a specified item in the inventory. If the item does not exist, returns \\"Item not found\\". Parameters: inventory (list of tuples): Each tuple contains (item_id, power_level). item_id (int): The ID of the item to be upgraded. power_up (int): The amount to increase the power level by. Returns: list or str: The updated inventory or \\"Item not found\\". for index, (id, power) in enumerate(inventory): if id == item_id: inventory[index] = (id, power + power_up) return inventory return \\"Item not found\\""},{"question":"Given a collection of integers, you need to find the smallest integer in the collection that is greater than or equal to a given target integer. If no such integer exists, return -1. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case is described by two lines: - The first line contains two integers n and m (1 ≤ n, m ≤ 2 * 10^5) — the number of elements in the collection and the target integer. - The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the collection. Output For each test case, print the smallest integer in the collection that is greater than or equal to m. If no such integer exists, print -1. Example Input 3 5 10 1 2 3 11 15 4 15 18 20 22 17 3 25 10 20 30 Output 11 17 30 Note In the first test case, the smallest integer greater than or equal to 10 in the collection is 11. In the second test case, the smallest integer greater than or equal to 15 in the collection is 17. In the third test case, the smallest integer greater than or equal to 25 in the collection is 30.","solution":"def find_smallest_geq(nums, target): Finds the smallest integer in the collection that is greater than or equal to the target. If no such integer exists, returns -1. nums = sorted(nums) for num in nums: if num >= target: return num return -1 def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m, numbers = case result = find_smallest_geq(numbers, m) results.append(result) return results"},{"question":"There is a popular game where n people are seated in a circle and eliminate each other in steps. Starting from the first person, you count up k people clockwise and eliminate the k-th person. This process continues until only one person remains. Your task is to determine the position of the last person remaining. Given the number of people n and the step count k, write a program to find the position of the last remaining person (1-indexed). **Input** The input consists of multiple datasets. Each dataset is provided in a single line with two integers, n (1 ≤ n ≤ 10000) and k (1 ≤ k ≤ 10000). The end of the input is indicated by a line containing two zeros. **Output** For each dataset, output the position of the last remaining person in a new line. **Example** Input ``` 5 2 7 3 6 5 0 0 ``` Output ``` 3 4 1 ``` **Note** In the first example with n = 5 and k = 2, the elimination process is as follows: 1. Starting from person 1: count 2 - eliminate person 2 2. Starting from person 3: count 2 - eliminate person 4 3. Starting from person 5: count 2 - eliminate person 1 4. Starting from person 3: count 2 - eliminate person 5 5. The person left is person 3. For each dataset, return the position of the last person remaining by implementing the Josephus problem algorithm.","solution":"def josephus(n, k): Solves the Josephus problem for n people and step count k. Parameters: n (int): number of people k (int): step count Returns: int: position of the last remaining person (1-indexed) if n == 1: return 1 # This gives the zero-indexed position, so add 1 for 1-indexed result return (josephus(n - 1, k) + k - 1) % n + 1 def solve_josephus_multi(data): Solves the Josephus problem for multiple datasets. Parameters: data (list of tuples): each tuple contains (n, k) Returns: list of int: last remaining person\'s positions for each dataset results = [] for n, k in data: if n == 0 and k == 0: break results.append(josephus(n, k)) return results"},{"question":"There are n nodes in a tree, numbered from 1 to n. A tree is an undirected graph in which any two nodes are connected by exactly one path. The tree has n-1 edges. You are given the initial colors of the nodes in the form of an array colors where colors[i] represents the color of the i-th node. There are only two possible colors: 0 and 1. Your task is to determine the minimum number of edges that need to be added to make all the nodes in the tree the same color. Input - The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains n integers, the i-th integer is colors[i] (0 ≤ colors[i] ≤ 1), denoting the initial colors of the nodes. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v. Output - The minimum number of edges that need to be added to make all the nodes in the tree the same color. Example Input 7 0 1 0 1 0 1 0 1 2 1 3 2 4 2 5 3 6 3 7 Output 3 Input 5 1 1 0 1 1 1 2 2 3 3 4 4 5 Output 1","solution":"def min_edges_to_same_color(n, colors, edges): Returns the minimum number of edges that need to be added to make all the nodes in the tree the same color. from collections import defaultdict, deque adj = defaultdict(list) color_count = {0: 0, 1: 0} for u, v in edges: adj[u].append(v) adj[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() color_count[colors[node - 1]] += 1 for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) bfs(1) return min(color_count[0], color_count[1]) # Example usage: # n = 7 # colors = [0, 1, 0, 1, 0, 1, 0] # edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] # print(min_edges_to_same_color(n, colors, edges)) # Output: 3"},{"question":"You will receive 5 points for solving this problem. A company has developed a new system to store data in a compressed format. The data is a sequence of numbers separated by commas. The system compresses the sequence by representing consecutive sequences of the same number with the number followed by a star (*) and the count of repetitions. For example, the sequence \\"3,3,3,4,4,5,5,5,5\\" will be compressed as \\"3*3,4*2,5*4\\". If a number appears only once consecutively, it will be represented without the star and count. For example, \\"1,2,2,3\\" will be compressed as \\"1,2*2,3\\". You are tasked with implementing a function that takes such a compressed sequence and reconstructs the original sequence. Input The input will consist of one line containing a single string of up to 1000 characters, representing the compressed sequence. The entries in the sequence are separated by commas and each entry follows one of two formats: - A single integer (e.g., \\"3\\") - An integer followed by \'*\' and another integer (e.g., \\"4*2\\") Output Print a single line containing the reconstructed original sequence of numbers, separated by commas. Examples Input 3*3,4*2,5*4 Output 3,3,3,4,4,5,5,5,5 Input 1,2*2,3 Output 1,2,2,3 Input 7 Output 7 Note Consider the first example, the input sequence \\"3*3,4*2,5*4\\" corresponds to: - \\"3*3\\" which expands to \\"3,3,3\\" - \\"4*2\\" which expands to \\"4,4\\" - \\"5*4\\" which expands to \\"5,5,5,5\\" Combining these, the original sequence is \\"3,3,3,4,4,5,5,5,5\\". In the second example, the input sequence \\"1,2*2,3\\" corresponds to: - \\"1\\" which remains \\"1\\" - \\"2*2\\" which expands to \\"2,2\\" - \\"3\\" which remains \\"3\\" Combining these, the original sequence is \\"1,2,2,3\\". In the third example, the input sequence \\"7\\" corresponds to: - \\"7\\" which remains \\"7\\" The original sequence is \\"7\\".","solution":"def decompress_sequence(s): Decompress the given sequence as per the rules defined. :param s: Compressed sequence string :return: Decompressed original sequence string parts = s.split(\',\') result = [] for part in parts: if \'*\' in part: number, count = part.split(\'*\') result.extend([number] * int(count)) else: result.append(part) return \',\'.join(result)"},{"question":"Input Format The input format is as follows: m n v_1 v_2 ... v_n Output Format Print the desired value which is defined based on the condition provided in the problem. Constraints * 1 ≤ m, n ≤ 10^5 * 0 ≤ v_i ≤ 10^9 for all i Scoring Subtask 1 [100 points] * 1 ≤ m, n ≤ 1000 Subtask 2 [200 points] * No additional constraints Subtask 3 [300 points] * v_i are unique values. Subtask 4 [400 points] * No additional constraints Sample Input 1 5 4 2 3 7 11 Sample Output 1 9 Sample Input 2 3 6 5 1 2 8 12 16 Sample Output 2 14 Explanation In the first case, the sum of the highest m values in the sequence is 9. In the second case, the sum of the highest m values in the sequence is 14.","solution":"def sum_of_largest_m_values(m, n, values): Returns the sum of the largest m values in the given list of n values. :param m: Number of largest values to sum :param n: Number of values in the input list :param values: List of integer values :return: Sum of the largest m values # Sort the list of values in descending order values.sort(reverse=True) # Sum the top m values return sum(values[:m])"},{"question":"You are given a grid of dimensions n times m filled with non-negative integers. Starting from the top-left corner of the grid, the goal is to move to the bottom-right corner. You can only move either right or down at each step. Write a program to find the maximum sum of numbers you can collect along the way. Constraints * 1 leq n, m leq 100 * The values of the grid entries are between 0 and 1000. Input * The first line contains two integers n and m. * The next n lines contain m integers each, representing the grid. Output Print the maximum sum in a line. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29","solution":"def max_sum_path(grid): Finds the maximum sum of numbers from the top-left to the bottom-right corner of the grid, moving only right or down at each step. n = len(grid) m = len(grid[0]) # Create a dp table to store maximum sum upto each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize first row of dp table for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column of dp table for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for _ in range(n): row = list(map(int, data[index:index+m])) grid.append(row) index += m print(max_sum_path(grid)) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of integers representing the heights of blocks of various sizes. Your goal is to calculate the maximal rectangle area that can be formed using consecutive blocks in the array such that the height of the rectangle is equal to the height of the shortest block in that sequence. Specifically, you need to find the largest area of a rectangle that can be drawn using consecutive subarrays of the original array. The height of this rectangle must be the minimum height of the blocks in the selected subarray, and the width is the number of blocks in that subarray. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of blocks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the blocks. Output Output a single integer — the area of the largest possible rectangle. Examples Input 6 2 1 5 6 2 3 Output 10 Input 5 2 4 2 1 2 Output 6 Note In the first example, the largest rectangle can be formed by blocks [5, 6], which has height 5 and width 2, giving an area of 5 * 2 = 10. In the second example, the largest rectangle can be formed by blocks [2, 4], which has height 2 and width 3, giving an area of 2 * 3 = 6.","solution":"def largest_rectangle_area(heights): Finds and returns the area of the largest rectangle that can be formed using consecutive blocks where the height of the rectangle is equal to the height of the shortest block in that sequence. max_area = 0 n = len(heights) for i in range(n): min_height = heights[i] for j in range(i, n): min_height = min(min_height, heights[j]) current_area = min_height * (j - i + 1) max_area = max(max_area, current_area) return max_area"},{"question":"You are given two strings, `s1` and `s2`, of length `n` and `m` respectively. You need to determine the minimum number of operations required to convert `s1` into `s2`. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character The order and frequency of operations can vary. Input The input consists of two lines. The first line contains the string `s1` of length `n` (1 ≤ n ≤ 1000). The second line contains the string `s2` of length `m` (1 ≤ m ≤ 1000). Output Print the minimum number of operations required to convert `s1` into `s2`. Examples Input sunday saturday Output 3 Input kitten sitting Output 3 Note In the first example, the minimum number of operations to convert \\"sunday\\" into \\"saturday\\" involves inserting \'a\' at the beginning, inserting \'t\' at the beginning, and replacing \'u\' with \'r\'. In the second example, converting \\"kitten\\" into \\"sitting\\" consists of replacing \'k\' with \'s\', replacing \'e\' with \'i\', and inserting \'g\' at the end.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to convert s1 into s2. The allowed operations are insert, delete, and replace a character. n = len(s1) m = len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters are equal, no extra cost else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[n][m]"},{"question":"You are given a list of unique integers representing weights assigned to n students. A team of students has to be selected such that the sum of their weights is closest to W but does not exceed it. Write a program that finds this optimal subset of students and prints the sum of their weights. If there are multiple subsets with the same sum, you can print any of them. If no valid subset exists, print 0. Input The first line contains two integer numbers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 1000). The second line contains n distinct integers denoting the weights of the students. These weights are guaranteed to be positive and not exceed 1000. Output Print the sum of the weights of the optimal subset. Examples Input 5 10 2 3 5 8 4 Output 10 Input 4 7 4 2 3 6 Output 7 Note In the first example: - The weights of the students are [2, 3, 5, 8, 4]. - The optimal subset would be [2, 3, 5], resulting in the sum 10, which is the closest to W without exceeding it. In the second example: - The weights of the students are [4, 2, 3, 6]. - The optimal subset can simply be [4, 3], resulting in the sum 7.","solution":"def optimal_subset_sum(n, W, weights): Returns the sum of an optimal subset of weights such that their sum is closest to W but does not exceed it. # Initialize a list to store whether a specific weight can be achieved can_achieve = [False] * (W + 1) can_achieve[0] = True for weight in weights: for j in range(W, weight - 1, -1): if can_achieve[j - weight]: can_achieve[j] = True for i in range(W, -1, -1): if can_achieve[i]: return i return 0"},{"question":"You are given a sequence of integers where every element appears exactly twice, except for one element which appears exactly once. Your task is to find and return the element that appears only once. Input The first line of input contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5), followed by n integers representing the elements of the sequence. Output For each test case, output the element that appears only once. Example Input 3 5 4 1 2 1 2 3 2 2 1 7 3 3 7 2 2 4 4 Output 4 1 7 Note In the first test case, the sequence is [4, 1, 2, 1, 2]. The element that appears only once is 4. In the second test case, the sequence is [2, 2, 1]. The element that appears only once is 1. In the third test case, the sequence is [3, 3, 7, 2, 2, 4, 4]. The element that appears only once is 7.","solution":"def find_single_element(test_cases): For each test case, returns the element that appears only once in the sequence. :param test_cases: List of tuples, where each tuple contains the sequence of integers for the test case. :return: List of integers, where each integer is the element that appears only once in the corresponding test case. results = [] for sequence in test_cases: unique_element = 0 for number in sequence: unique_element ^= number results.append(unique_element) return results # Please note: In XOR operation, a number XOR itself is zero, and a number XOR 0 is the number itself. # For example: 4 ^ 1 ^ 2 ^ 1 ^ 2 = (4 ^ 0) = 4 because 1 ^ 1 = 0 and 2 ^ 2 = 0"},{"question":"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Input Format A single string - S Output Format Print \\"True\\" if the string is a palindrome, otherwise print \\"False\\". Input Constraints 1 ≤ |S| ≤ 1000 SAMPLE INPUT \\"A man, a plan, a canal, Panama\\" SAMPLE OUTPUT True Explanation Ignoring spaces, commas, and case sensitivity, the string \\"A man, a plan, a canal, Panama\\" reads the same forward and backward - \\"amanaplanacanalpanama\\".","solution":"def is_palindrome(s: str) -> bool: Determines if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) return cleaned_s == cleaned_s[::-1]"},{"question":"You are managing a warehouse with n storage cells arranged in a straight line. Each cell can only be used to store items of the same type and has a capacity. You know the types and quantities of items that need to be stored. Your task is to determine the minimum number of storage cells required to store all items. Additionally, you need to ensure that the arrangement is optimized such that no two adjacent cells contain the same type of items. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of different types of items. Each of the next n lines contains two integers, ti and qi, where ti (1 ≤ ti ≤ 105) is the type of item and qi (1 ≤ qi ≤ 109) is the quantity of items of type ti. The next line contains an integer c (1 ≤ c ≤ 109), the capacity of each storage cell. Output Print the minimum number of storage cells required to store all items while ensuring no two adjacent cells have the same type of items. Examples Input 3 1 10 2 20 3 30 10 Output 6 Input 2 1 5 2 5 3 Output 4 Input 4 1 100 2 100 3 100 4 100 50 Output 8","solution":"def min_storage_cells(n, items, c): from math import ceil total_cells = 0 # For each item type, calculate the required cells and sum them up for ti, qi in items: total_cells += ceil(qi / c) # Calculate the additional cells needed to ensure no two adjacent cells have the same type of items if n > 1: min_required_cells = total_cells best_arrangement_cells = total_cells # Considering arrangement where two consecutive cells don\'t have the same item type for i in range(n): for j in range(i + 1, n): type_i_cells = ceil(items[i][1] / c) type_j_cells = ceil(items[j][1] / c) additional_cells = abs(type_i_cells - type_j_cells) best_arrangement_cells = min(best_arrangement_cells, total_cells + additional_cells) total_cells = best_arrangement_cells return total_cells if __name__ == \\"__main__\\": n = int(input().strip()) items = [tuple(map(int, input().strip().split())) for _ in range(n)] c = int(input().strip()) print(min_storage_cells(n, items, c))"},{"question":"A professor wants to track the average scores of his students in different subjects over the course of a semester. He collects the scores of each student for various subjects and computes the average for each subject. Your task is to develop a program that calculates and displays the average score for each subject. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of \\"END\\". Each dataset is given in the following format: m s1 s2 ... sm t1 t2 ... tm :: sn1 sn2 ... snm The first line gives the number of subjects m (1 ≤ m ≤ 10). The following lines each contain m integers representing a student\'s scores for the respective subjects. Each score is between 0 and 100 inclusive. The number of students n (1 ≤ n ≤ 100) will be determined by the number of score lines. Output For each input dataset, output the average score for each subject rounded to two decimal points in the format: average1 average2 ... averagem Example Input 3 80 90 100 70 85 95 65 80 90 2 88 92 76 84 95 97 END Output 71.67 85.00 95.00 86.33 91.00","solution":"def calculate_averages(data): results = [] for dataset in data: if dataset == \\"END\\": break m = int(dataset[0]) scores = [list(map(int, line.split())) for line in dataset[1:]] total_students = len(scores) averages = [] for subject_index in range(m): subject_total = sum(scores[student_index][subject_index] for student_index in range(total_students)) subject_average = round(subject_total / total_students, 2) averages.append(subject_average) results.append(averages) return results"},{"question":"A delivery company needs to optimize its fleet management. Each vehicle in the fleet operates with a set mileage limit for fuel efficiency, after which it must return to the depot for refueling. Additionally, every vehicle can only carry a maximum load. Given the historical data of deliveries, the company wants to determine the minimum number of trips required for each vehicle to complete all deliveries in a given day. The company management receives the delivery data in the following format: ``` number_of_days vehicle_mileage_limit day_1_trips number_of_deliveries_day_1 delivery_1_weight delivery_1_distance delivery_2_weight delivery_2_distance ... day_n_trips number_of_deliveries_day_n delivery_1_weight delivery_1_distance delivery_2_weight delivery_2_distance ... ``` Constraints: - 1 ≤ number_of_days ≤ 100 - 1 ≤ vehicle_mileage_limit ≤ 1000 - 1 ≤ day_i_trips ≤ 1000 - 1 ≤ number_of_deliveries_day_i ≤ 100 - 1 ≤ delivery_weight ≤ 100 - 1 ≤ delivery_distance ≤ 1000 **Input Example:** ``` 2 500 3 2 15 400 10 300 4 4 20 200 30 100 25 150 10 250 ``` **Output:** For each day and for each trip count on that day, print the minimum number of trips needed for that vehicle. **Output Example:** ``` Day 1 Trip 1: 2 trips Day 1 Trip 2: 2 trips Day 1 Trip 3: 3 trips Day 2 Trip 1: 1 trip Day 2 Trip 2: 2 trips Day 2 Trip 3: 2 trips Day 2 Trip 4: 1 trip ```","solution":"def parse_input(input_string): lines = input_string.strip().split(\'n\') number_of_days, vehicle_mileage_limit = map(int, lines[0].split()) index = 1 deliveries = [] for _ in range(number_of_days): number_of_trips, number_of_deliveries = map(int, lines[index].split()) index += 1 day_trips = [] for _ in range(number_of_deliveries): weight, distance = map(int, lines[index].split()) day_trips.append((weight, distance)) index += 1 deliveries.append(day_trips) return number_of_days, vehicle_mileage_limit, deliveries def calculate_trips_for_day(vehicle_mileage_limit, day_deliveries): trips_counts = [] for weight, distance in day_deliveries: # Ceiling of weight / allowed_weight = maximum trips needed to deliver that trip trips_needed = -(-distance // vehicle_mileage_limit) trips_counts.append(trips_needed) return trips_counts def optimize_fleet_management(input_string): number_of_days, vehicle_mileage_limit, deliveries = parse_input(input_string) result = [] for day in range(number_of_days): day_deliveries = deliveries[day] trips_counts = calculate_trips_for_day(vehicle_mileage_limit, day_deliveries) for trip_number, trips in enumerate(trips_counts): result.append(f\\"Day {day + 1} Trip {trip_number + 1}: {trips} trips\\") return \\"n\\".join(result)"},{"question":"Henry loves collecting rare coins from different countries. Every coin has a date imprinted on it, representing the year it was minted. Henry\'s goal is to create the longest sequence of continuously minted coins (by consecutive years) from his collection. Henry has n coins in his collection. He wants to select a maximum possible number of coins such that the years on these coins form a sequence of consecutive years. Write a function to help Henry find the longest sequence of consecutive years from his collection. Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of coins in Henry\'s collection. - The second line contains n integers y1, y2, ..., yn (1 ≤ yi ≤ 10^9) — the years imprinted on the coins. Output - Print a single integer representing the length of the longest sequence of consecutive years that can be formed using Henry’s coins. Examples Input 5 2012 2014 2013 2011 2015 Output 5 Input 6 1990 1989 1991 1988 1992 1987 Output 6 Input 4 2001 2003 2004 2002 Output 4","solution":"def longest_consecutive_sequence(n, years): years_set = set(years) max_length = 0 for year in years_set: # Only start counting sequence from the start of the sequence if year - 1 not in years_set: current_year = year current_length = 1 while current_year + 1 in years_set: current_year += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are working for a logistics company that manages the transportation of goods between various warehouses distributed across a city. Each warehouse has a known position on the city grid. The company wants to optimize the delivery routes between warehouses and is considering placing relay stations to minimize the overall distance. A relay station is a temporary intermediate point through which goods can be routed. The relay station should ideally be placed at a location that minimizes the maximum distance any goods need to be transported from one warehouse to another, through the relay station. This problem is symmetrical, meaning that the delivery distance from warehouse A to warehouse B through the relay station will be the same as from B to A. You need to write a program to determine the optimal position for placing the relay station to achieve the minimum possible maximum transportation distance. Input The input consists of multiple datasets. Each dataset is given in the following format: > N > x1 y1 > x2 y2 > ... > xN yN The first line gives one non-negative integer N (2 ≤ N ≤ 100), the number of warehouses. In the following N lines, the positions of the warehouses are given. Each warehouse position is given by two integers xi, yi (-10000 ≤ xi, yi ≤ 10000), representing the coordinates of the i-th warehouse respectively. The end of the input is indicated by a single line containing a single zero. Output For each dataset, output the coordinates of the optimal relay station location that minimizes the maximum transportation distance. If there are multiple such points, any one of them may be output. The output should be a floating-point number pair (rx, ry) rounded to two decimal places. Sample Input 3 0 0 10 0 5 5 2 1 -1 -1 1 0 Output for the Sample Input 5.00 0.00 0.00 0.00 Example Input 3 0 0 10 0 5 5 2 1 -1 -1 1 0 Output 5.00 0.00 0.00 0.00","solution":"def find_optimal_relay_station(warehouses): from itertools import combinations import math def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def optimal_point(x1, y1, x2, y2): return ((x1 + x2) / 2, (y1 + y2) / 2) N = len(warehouses) if N == 2: x, y = optimal_point(warehouses[0][0], warehouses[0][1], warehouses[1][0], warehouses[1][1]) return round(x, 2), round(y, 2) max_distance_pairs = [] max_distance = 0 for (i, warehouse1), (j, warehouse2) in combinations(enumerate(warehouses), 2): dist = distance(warehouse1, warehouse2) if dist > max_distance: max_distance = dist max_distance_pairs = [(warehouse1, warehouse2)] elif dist == max_distance: max_distance_pairs.append((warehouse1, warehouse2)) best_x_sum = 0 best_y_sum = 0 for (w1, w2) in max_distance_pairs: mid_x, mid_y = optimal_point(w1[0], w1[1], w2[0], w2[1]) best_x_sum += mid_x best_y_sum += mid_y optimal_x = best_x_sum / len(max_distance_pairs) optimal_y = best_y_sum / len(max_distance_pairs) return round(optimal_x, 2), round(optimal_y, 2) def process_input(input_data): datasets = input_data.strip().split(\\"n\\") idx = 0 results = [] while idx < len(datasets): N = int(datasets[idx]) if N == 0: break idx += 1 warehouses = [] for _ in range(N): x, y = map(int, datasets[idx].split()) warehouses.append((x, y)) idx += 1 result = find_optimal_relay_station(warehouses) results.append(result) return results"},{"question":"A transportation company needs to optimize its delivery schedule for a fleet of trucks. Each truck can carry a maximum load of weight W. The company\'s deliveries for a day consist of n packages, each with a specific weight wi (1 ≤ wi ≤ W). The company wants to determine the minimum number of trucks required to deliver all n packages, given that each truck can only carry a weight load up to W. Packages must be fully loaded onto a single truck (i.e., a package cannot be split between multiple trucks). Create a function to find the minimum number of trucks required. Input The first line contains integer n (1 ≤ n ≤ 1000) — the number of packages. The second line contains n integers, separated by space, where the ith integer wi (1 ≤ wi ≤ 1000) denotes the weight of the ith package. The third line contains the integer W (1 ≤ W ≤ 1000) — the maximum weight capacity of each truck. Output Print a single integer — the minimum number of trucks required to deliver all packages. Examples Input 5 2 2 3 8 7 8 Output 3 Input 4 3 6 2 3 10 Output 2 Input 6 4 8 4 4 6 2 9 Output 4 Notes: In the first example, the optimal way to load the trucks would be: Truck 1: 2 + 2 + 3 = 7 Truck 2: 8 Truck 3: 7","solution":"def min_trucks(n, weights, W): # Sort the package weights in descending order weights.sort(reverse=True) trucks = 0 used = [False] * n # Track which packages have been loaded into a truck for i in range(n): if used[i]: continue current_weight = weights[i] used[i] = True for j in range(i + 1, n): if not used[j] and current_weight + weights[j] <= W: current_weight += weights[j] used[j] = True trucks += 1 return trucks"},{"question":"Alex has been put in charge of organizing a local sports event. To ensure everyone has fun and the event runs smoothly, he needs to monitor the participants and manage the prize distribution efficiently. The participants can choose to take part in multiple events, and Alex has a list of all the events each participant has enrolled in. Alex wants to find out the participation pattern for a given participant. Specifically, given a participant\'s name, he wants to know which events they are enrolled in. If the participant is not found in the list, Alex should be informed as well. Write a function `find_events` that takes the following: 1. A list of tuples where each tuple contains a participant\'s name (string) and the event(s) (list of strings) they have enrolled in. 2. A participant\'s name (string) for whom we need to find the events. The function should return a list of events (list of strings) the given participant is enrolled in. If the participant\'s name is not found in the provided list, return the string \'Not Found\'. Function Signature: ```python def find_events(enrollment_list: list[(str, list[str])], participant: str) -> list[str]: ``` # Input - A list of tuples, where each tuple contains: - A participant\'s name (a string) - A list of events (list of strings) that the participant is enrolled in. - A participant\'s name (a string) for whom the events need to be found. # Output - A list of events (list of strings) if the participant is found. - The string \'Not Found\' if the participant\'s name does not exist in the list. # Example ```python enrollment_list = [ (\'Alice\', [\'Soccer\', \'Basketball\', \'Swimming\']), (\'Bob\', [\'Tennis\', \'Chess\']), (\'Cara\', [\'Soccer\', \'Chess\']), (\'David\', [\'Basketball\']) ] print(find_events(enrollment_list, \'Alice\')) # Output: [\'Soccer\', \'Basketball\', \'Swimming\'] print(find_events(enrollment_list, \'Bob\')) # Output: [\'Tennis\', \'Chess\'] print(find_events(enrollment_list, \'Eve\')) # Output: \'Not Found\' ``` # Explanation - In the first example, \'Alice\' is enrolled in \'Soccer\', \'Basketball\', and \'Swimming\'. - In the second example, \'Bob\' is enrolled in \'Tennis\' and \'Chess\'. - In the third example, \'Eve\' is not found in the list, and hence \'Not Found\' is returned.","solution":"def find_events(enrollment_list, participant): Returns a list of events the given participant is enrolled in. If the participant is not found, returns \'Not Found\'. for name, events in enrollment_list: if name == participant: return events return \'Not Found\'"},{"question":"In a futuristic world, a robotics engineer named Alice is designing a fleet of autonomous delivery robots to navigate the city\'s grid-like streets to deliver packages. Each robot is represented as a string of directional commands: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The robots need to return to their starting position after completing their delivery route. Your task is to write a program to determine if a given delivery route enables a robot to return to its starting position, which is the origin point (0, 0) on a 2D plane. [Input] - The first line contains an integer t indicating the number of test cases. - The next t lines each contain a string representing a robot\'s delivery route. [Output] For each test case, output one line: - \\"True\\" if the robot returns to the starting position; - \\"False\\" otherwise. [Constraints] 1 ≤ t ≤ 100 1 ≤ length of each route ≤ 1000 The route strings only contain characters \'U\', \'D\', \'L\', \'R\'. SAMPLE INPUT 3 UD LDRR UUDDLLRR SAMPLE OUTPUT True False True","solution":"def robot_return_to_origin(route): Given a route string of directional commands, determine if the robot returns to the starting position. x, y = 0, 0 for command in route: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0 def process_test_cases(t, routes): results = [] for route in routes: results.append(robot_return_to_origin(route)) return results"},{"question":"You are given an array of n integers and q queries. Each query is of two types: 1. Update the value at a given position to a new value. 2. Compute the sum of all even numbers in a given range. Write a program that processes each query efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial values of the array. Each of the next q lines describes an operation and is one of the following: - \\"1 i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) — update the value at position i to x. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — compute the sum of all even numbers in the subarray from l to r (inclusive). Output For each query of the second type, print the result on a new line. Examples Input 5 3 1 2 3 4 5 2 1 5 1 2 6 2 1 5 Output 6 10 Input 6 4 8 7 2 10 5 4 2 2 5 1 4 3 2 1 6 1 6 8 Output 12 10 Note In the first example, the initial array is [1, 2, 3, 4, 5]. The sum of even numbers from index 1 to 5 is 2 + 4 = 6. After updating the value at index 2 to 6, the array becomes [1, 6, 3, 4, 5]. The sum of even numbers from index 1 to 5 is now 6 + 4 = 10. In the second example, the initial array is [8, 7, 2, 10, 5, 4]. The sum of even numbers from index 2 to 5 is 2 + 10 = 12. After updating the value at index 4 to 3, the array becomes [8, 7, 2, 3, 5, 4]. The sum of even numbers from index 1 to 6 is 8 + 2 + 4 = 14. After updating the value at index 6 to 8, the array becomes [8, 7, 2, 3, 5, 8]. The sum of even numbers from index 1 to 6 is 8 + 2 + 8 = 18.","solution":"class RangeSumQuery: def __init__(self, arr): self.n = len(arr) self.arr = arr self.even_sums = [0] * (self.n + 1) self._build() def _build(self): for i in range(1, self.n + 1): self.even_sums[i] = self.even_sums[i - 1] if self.arr[i - 1] % 2 == 0: self.even_sums[i] += self.arr[i - 1] def update(self, idx, value): if self.arr[idx - 1] % 2 == 0: delta = -self.arr[idx - 1] self._update_even_sums(idx, delta) self.arr[idx - 1] = value if self.arr[idx - 1] % 2 == 0: delta = self.arr[idx - 1] self._update_even_sums(idx, delta) def _update_even_sums(self, idx, delta): for i in range(idx, self.n + 1): self.even_sums[i] += delta def sum_even_range(self, l, r): return self.even_sums[r] - self.even_sums[l - 1] def process_queries(n, q, arr, queries): rsq = RangeSumQuery(arr) results = [] for query in queries: if query[0] == 1: rsq.update(query[1], query[2]) elif query[0] == 2: results.append(rsq.sum_even_range(query[1], query[2])) return results"},{"question":"Gaurav is learning about arrays and subarrays in his introduction to programming course. One of the problems he found interesting is finding the maximum sum of any contiguous subarray within a given integer array. He needs your help to solve it. Your task is simple. Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Input The first line of the input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers denoting the elements of the array. Output For every test case, output the largest sum of the contiguous subarray in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^4 ≤ array elements ≤ 10^4 Example Input: 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 Output: 9 -1 Code ```python def max_subarray_sum(arr): max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far T = int(input()) for _ in range(T): N = int(input()) arr = list(map(int, input().split())) print(max_subarray_sum(arr)) ```","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray within a given integer array. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Processes multiple test cases and returns the result for each test case. results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a directed graph with `n` nodes and `m` edges, where each edge has a direction associated with it. Your task is to determine whether there exists at least one node in the graph that every other node can reach either directly or indirectly. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with two integers n and m (1 ≤ n, m ≤ 1000) — the number of nodes and edges in the graph, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a directed edge from node u to node v. Output For each test case, output \\"YES\\" if there exists at least one node that can reach every other node directly or indirectly, otherwise output \\"NO\\". Example Input 2 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 Output YES YES Note: In the first test case, the graph is a cycle, so every node can reach every other node. In the second test case, the graph is another cycle, meaning all nodes can reach each other again. In both cases, the answer is \\"YES\\".","solution":"def can_every_node_be_reached(test_cases): Takes a list of test cases and determines whether each test case has a node that can reach all others. Parameters: test_cases: A list of tuples where the first element is a tuple of (n, m), and the second element is a list of directed edges. Returns: List of strings: \\"YES\\" if such a node exists for the corresponding test case, otherwise \\"NO\\". def dfs(graph, node, visited): Performs a Depth First Search (DFS) to visit all reachable nodes from a given starting node. Parameters: graph: A dictionary representing the adjacency list of the graph. node: The starting node for DFS. visited: A set of visited nodes. stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) stack.extend(graph[current]) results = [] for n, m, edges in test_cases: graph = {i: [] for i in range(1, n + 1)} reversed_graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) reversed_graph[v].append(u) def is_strongly_connected(start): visited = set() dfs(graph, start, visited) if len(visited) != n: return False visited = set() dfs(reversed_graph, start, visited) if len(visited) != n: return False return True result = \\"NO\\" for node in range(1, n + 1): if is_strongly_connected(node): result = \\"YES\\" break results.append(result) return results"},{"question":"A popular online retail store offers a variety of products. To boost customer engagement, they have introduced a discount campaign where certain products are offered at a discounted price if they belong to a specific category. Additionally, they want to provide the customers with a functionality to find out the top n products from a given category, sorted by their rating in descending order. Your task is to develop a program to help the store achieve this goal. You need to write a function that takes the following inputs: - A list of product details including their id, name, category, price, and rating. Each product detail is a comma-separated string in the format \\"id,name,category,price,rating\\". - A category to filter the products by. - An integer n representing the number of top-rated products to return. The function should output the id of the top n products in the given category, sorted by their rating in descending order. If two products have the same rating, they should retain the order in which they were listed in the input. Input The input consists of the following: - products: List of strings where each string is in the format \\"id,name,category,price,rating\\" - category: String representing the category to filter the products by - n: Integer representing the number of top-rated products to return Output A list of ids of the top n products from the given category, sorted by their rating in descending order. Example Input products = [\\"1,book,stationery,12.5,4.5\\", \\"2,pen,stationery,1.5,3.9\\", \\"3,notebook,stationery,5.0,4.8\\", \\"4,mug,home,7.5,4.2\\", \\"5,poster,home,2.5,3.5\\"] category = \\"stationery\\" n = 2 Output [\\"3\\", \\"1\\"]","solution":"def top_n_products(products, category, n): # Parse the product details product_list = [] for product in products: product_id, name, prod_category, price, rating = product.split(\',\') if prod_category == category: product_list.append((product_id, float(rating))) # Sort the products based on rating in descending order sorted_products = sorted(product_list, key=lambda x: x[1], reverse=True) # Extract the top n product IDs top_n_product_ids = [prod[0] for prod in sorted_products[:n]] return top_n_product_ids"},{"question":"You are organizing a series of sports events, and have a list of M sports events with their respective durations. You have N athletes available to participate in these events. Each athlete can participate in only one event. To ensure fairness and energy efficiency, each athlete should not have a total duration greater than a given threshold T when the events are assigned. You need to determine whether it is possible to assign athletes to all events such that no athlete will have a total duration greater than T. INPUT The first line will contain two integers, N and M, the number of athletes and the number of events, respectively. The second line will contain M integers, representing the duration of each event. The third line will contain a single integer T, the maximum duration allowed for each athlete. OUTPUT Output \\"YES\\" if it is possible to assign athletes to all events such that no athlete\'s total assigned duration exceeds T, or \\"NO\\" otherwise. CONSTRAINTS 1 ≤ N, M, T ≤ 10^4 1 ≤ duration of each event ≤ 10^3 SAMPLE INPUT 3 4 4 3 2 1 5 SAMPLE OUTPUT NO SAMPLE INPUT 5 5 1 2 2 3 1 3 SAMPLE OUTPUT YES","solution":"def can_assign_athletes(N, M, durations, T): if M > N: return \\"NO\\" durations.sort(reverse=True) athletes_durations = [0] * N for duration in durations: athletes_durations.sort() if athletes_durations[0] + duration > T: return \\"NO\\" athletes_durations[0] += duration return \\"YES\\""},{"question":"A university wants to organize a new event where students compete in a bridge-crossing competition under specific rules. The competition occurs at night, requiring a torch to safely cross the bridge. However, the rules for crossing the bridge are as follows: 1. Only two students can cross at a time. 2. They must always bring the torch back to the starting side before the next crossing. 3. Each student takes a different amount of time to cross the bridge. 4. When two students cross together, they must walk at the slower student\'s pace. Your task is to write a program that calculates the minimum total time required for all students to cross the bridge based on their individual crossing times. Input The input consists of multiple test cases. The first line contains the number of cases. For each case, a line describing a state follows. The line starts with an integer n (2 ≤ n ≤ 100), the number of students, and then n integers following that denote the time each student takes to cross the bridge. All these times are non-negative and will not exceed 100. The times are separated by a single space character. Output For each case, output the minimum total time required in a line. Example Input 2 4 1 2 5 10 3 1 2 3 Output 17 6","solution":"def min_bridge_crossing_time(num_cases, cases): results = [] for case in cases: n, *times = case times.sort() if n == 2: results.append(times[1]) continue def strategy_1(): # X1, X2 cross, X1 goes back # X3, X4 cross, X2 goes back total_time = 0 while len(times) > 3: total_time += min( times[1] + times[0] + times[-1] + times[1], # send 2 fastest, then 1 back, send 2 slowest, then 2nd fastest back times[-1] + times[0] + times[-2] + times[0] # send 2 fastest, then 1 back, send 2 slowest, then 1 fastest back ) times.pop() times.pop() if len(times) == 3: total_time += times[1] + times[2] + times[0] else: total_time += times[1] return total_time results.append(strategy_1()) return results # Example usage: def process_input(input_data): lines = input_data.strip().split(\'n\') num_cases = int(lines[0].strip()) cases = [list(map(int, line.strip().split())) for line in lines[1:]] return num_cases, cases def format_output(results): return \'n\'.join(map(str, results)) # Example processing input_data = 2 4 1 2 5 10 3 1 2 3 num_cases, cases = process_input(input_data) results = min_bridge_crossing_time(num_cases, cases) output = format_output(results) print(output) # Expected output: 17n6"},{"question":"You are given an unlimited number of 1 × 2 dominoes (i.e., 1 unit wide and 2 units tall) and want to cover a 2 × n board. Your task is to find out in how many different ways you can achieve this. Write a program that calculates the number of unique ways to fill a 2 × n board using 1 × 2 dominoes. Note that the dominoes can be placed either vertically or horizontally. Input The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing an integer n, representing the length of the board. Output For each test case, output a single line containing the number of ways to cover the 2 × n board. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 Example Input: 3 2 3 4 Output: 2 3 5 Explanation Test Case 1: There are exactly two ways to cover a 2 × 2 board with 1 × 2 dominoes: either place them both horizontally or both vertically. Test Case 2: A 2 × 3 board can be filled in three ways: - Place three dominoes horizontally. - Place one vertically and two horizontally above and below it. - Place two horizontally and one vertically between them. Test Case 3: A 2 × 4 board can be filled in five ways. The patterns involve combinations of horizontal and vertical placements of four dominoes.","solution":"def num_ways_to_fill_2xn_board(n): Calculate the number of ways to fill a 2xn board using 1x2 dominoes. if n == 0: return 1 if n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def solve(domino_cases): For each test case, calculate the number of ways to fill the respective 2xn board. results = [] for n in domino_cases: results.append(num_ways_to_fill_2xn_board(n)) return results"},{"question":"A farmer is trying to build a straight fence from one corner of his rectangular field to the opposite corner. The field is represented as a rectangle in the XY-plane with corners at (0,0), (W,0), (0,H), and (W,H). The farmer has some obstacles (trees) in the field, each of which is represented as a point (x_i, y_i) in the plane. The farmer wants to construct the fence while avoiding all the obstacles. He will adjust the fence such that it either goes through exactly one obstacle or does not touch any obstacles at all to create the longest straight path without hitting more than one obstacle. Determine the maximum possible length of the fence that can be constructed. Input The first line of the input contains two integers W and H (1 ≤ W, H ≤ 10^9), the width and height of the rectangular field. The second line contains an integer n (0 ≤ n ≤ 1000), the number of obstacles (trees). Each of the next n lines contains two integers x_i and y_i (0 ≤ x_i ≤ W, 0 ≤ y_i ≤ H), the coordinates of each obstacle. Output Print a single integer, the maximum possible length of the straight fence that can be constructed inside the rectangular field. Example Input 10 10 2 5 5 6 6 Output 14 Note In the example, the longest possible straight fence runs from (0,0) to (10,10) with length √(W² + H²). When considering obstacles, the fence can go through at most one obstacle while maintaining the straight line path. In this case, the path directly from (0,0) to (10,10) is not obstructed by either (5,5) or (6,6) as in the interpretation one obstacle can be on the way. Thus, the maximal length matches the diagonal computation without any restriction, which is √(10² + 10²) = 10√2 ≈ 14 units, since we need to print the following approximation integer till nearest whole number in case approach mentioned.","solution":"import math def max_fence_length(W, H, obstacles): Calculate the maximum possible length of the straight fence that can be constructed in the rectangle defined by width W and height H, optionally passing through at most one obstacle. # Calculate the diagonal length of the rectangle max_length = math.sqrt(W ** 2 + H ** 2) return int(round(max_length)) # Round to the nearest integer and return W = 10 H = 10 obstacles = [(5, 5), (6, 6)] max_fence_length(W, H, obstacles)"},{"question":"A mysterious signal from an alien civilization has been intercepted by Earth scientists. The signal contains a series of coordinates (x, y) pointing towards specific regions in the galaxy that hold valuable resources. Due to the high travel cost, the aim is to visit as few distinct coordinates as possible and maximize the resources collected at each location. The coordinates can be visited in any order. Each coordinate can hold a certain amount of a specific resource, which varies per coordinate. Travel cost between two distinct coordinates is defined by the Manhattan distance between them. Given a list of coordinates with their respective resources, determine the maximum number of resources that can be collected without exceeding a given travel budget. Input The first line contains two integers n and B (1 ≤ n ≤ 100, 1 ≤ B ≤ 1000) — the number of coordinates and the maximum travel budget, respectively. The next n lines each contain three integers xi, yi, ri, where (xi, yi) are the coordinates of a point in the galaxy and ri is the amount of resources at that coordinate (0 ≤ xi, yi ≤ 100, 1 ≤ ri ≤ 1000). Output Print a single number — the maximum number of resources that can be collected without exceeding the travel budget. Examples Input 5 15 0 0 10 2 3 20 5 5 30 8 8 25 10 0 15 Output 60 Explanation - Start at (0, 0), collect 10 resources. - Travel to (5, 5), collect 30 resources. The cost is |5-0| + |5-0| = 10. - Travel to (2, 3), collect 20 resources. The cost is |2-5| + |3-5| = 5. - Total travel cost is 10 + 5 = 15, which does not exceed the budget of 15. - Total resources collected: 10 + 30 + 20 = 60.","solution":"def max_resources(n, B, coordinates): from itertools import permutations def manhattan(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) max_resources_collected = 0 for coord_perm in permutations(coordinates): total_resources = 0 total_cost = 0 current_coord = (0, 0) for coord in coord_perm: travel_cost = manhattan(current_coord, coord) if total_cost + travel_cost > B: break total_cost += travel_cost total_resources += coord[2] current_coord = (coord[0], coord[1]) max_resources_collected = max(max_resources_collected, total_resources) return max_resources_collected # Example usage n = 5 B = 15 coordinates = [ (0, 0, 10), (2, 3, 20), (5, 5, 30), (8, 8, 25), (10, 0, 15) ] print(max_resources(n, B, coordinates)) # Output: 60"},{"question":"You are given an array of n non-negative integers a_1, a_2, ..., a_n. You need to find the k-th smallest difference between any two distinct elements in the given array. The differences should be sorted in ascending order, and you need to return the k-th smallest difference. For example: * If the array is [1, 3, 4] and k = 1, the differences are [2, 3, 1], sorted differences are [1, 2, 3], and the 1st smallest difference is 1. * If the array is [5, 8, 12] and k = 2, the differences are [3, 7, 4], sorted differences are [3, 4, 7], and the 2nd smallest difference is 4. Input The first line contains one integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains two integers n and k (2 ≤ n ≤ 300, 1 ≤ k ≤ n*(n-1)/2) — the number of elements in the array and the k-th smallest difference to find. The second line of each test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), where a_i is the i-th element of the array. Output For each test case, print the k-th smallest difference. Example Input 3 3 1 1 3 4 3 2 1 3 4 4 3 1 2 3 4 Output 1 2 1","solution":"def kth_smallest_difference(t, test_cases): from itertools import combinations results = [] for case in test_cases: n, k, arr = case differences = [] # generate all combinations of pairs for (x, y) in combinations(arr, 2): differences.append(abs(x - y)) # sort the differences differences.sort() # append the k-th smallest difference to results results.append(differences[k - 1]) return results"},{"question":"Given a string of lowercase characters, your task is to find the longest substring that contains exactly two distinct characters and return its length. # Input - A single line containing a string ( s ) with length ( n ) where ( 1 leq n leq 10^5 ). # Output - Output the length of the longest substring with exactly two distinct characters. # Example **Input:** ``` eceba ``` **Output:** ``` 3 ``` *Explanation: The substring \\"ece\\" contains exactly two distinct characters and is of length 3.* **Input:** ``` aaa ``` **Output:** ``` 3 ``` *Explanation: The entire string \\"aaa\\" contains only one distinct character and is of length 3.* # Note - You can assume that the input string contains only lowercase English alphabets. - Efficient algorithms such as the sliding window technique should be used to handle the upper input constraint effectively.","solution":"def longest_substring_with_two_distinct_chars(s): Function to find the length of the longest substring with exactly two distinct characters. Parameters: s (str): Input string containing only lowercase English characters. Returns: int: Length of the longest substring with exactly two distinct characters. # Dictionary to store the last occurrence of each character in the current window char_index_map = {} left = 0 # Left boundary of the window max_length = 0 for right in range(len(s)): char_index_map[s[right]] = right while len(char_index_map) > 2: if char_index_map[s[left]] == left: del char_index_map[s[left]] left += 1 # Update maximum length of the valid window max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are working on scheduling software for a conference. The conference consists of multiple presentations that are to be scheduled in different rooms. Each presentation has a start time, an end time, and a room assigned to it. Your task is to determine if there are any scheduling conflicts for the presentations in each room. A conflict arises if any two presentations in the same room overlap, i.e., if the time intervals of two presentations intersect. # Input The input consists of a number of lines. Each line represents a presentation and contains four integers: - room (an integer representing the room number, 1 ≤ room ≤ 100) - start_h (the start hour, in the 24-hour format, 0 ≤ start_h ≤ 23) - start_m (the start minute, 0 ≤ start_m ≤ 59) - end_h (the end hour, in the 24-hour format, 0 ≤ end_h ≤ 23) - end_m (the end minute, 0 ≤ end_m ≤ 59). All presentations in the same room will have start times and end times on the same day and the end time is always after the start time. The input ends at EOF. # Output Output \\"Conflict\\" for each room that has at least one conflict between presentations. Output one line per such room, listing the room numbers in ascending order. If there are no conflicts, output \\"No conflicts\\". # Example Input 1 9 0 10 30 1 10 30 11 30 2 9 15 10 15 2 9 45 10 30 2 11 0 12 0 Output Conflict 2 In the example above, Room 1 has a back-to-back schedule without any time overlap between presentations, therefore no conflict for Room 1. Room 2 has overlapping presentations, thus there is a conflict for Room 2.","solution":"def has_conflicts(presentations): from collections import defaultdict # Group presentations by room rooms = defaultdict(list) for p in presentations: room, start_h, start_m, end_h, end_m = p start = start_h * 60 + start_m # Convert start time to minutes end = end_h * 60 + end_m # Convert end time to minutes rooms[room].append((start, end)) conflicts = set() for room, times in rooms.items(): times.sort() # Sort by start time for i in range(1, len(times)): if times[i][0] < times[i-1][1]: # Check if current start time is less than previous end time conflicts.add(room) break if conflicts: return \\"Conflictn\\" + \\"n\\".join(map(str, sorted(conflicts))) else: return \\"No conflicts\\""},{"question":"Athena wants to create a sequence of numbers based on her unique pattern for a secret project. The sequence must adhere to the following rules: * The sequence should be exactly n integers long. * Each integer in the sequence must fall within the range from 1 to m (inclusive). * The sum of any k consecutive integers in the sequence must be distinct. * The sequence must contain at least one of each integer from 1 to m. Your task is to help Athena generate a sequence meeting these criteria. Input The first line contains three integers n, m, and k (1 ≤ k ≤ n ≤ 100, 1 ≤ m ≤ 50) — the length of the sequence, the range of integers, and the number of consecutive integers whose sum must be distinct. Output Output a sequence of n integers satisfying all the given conditions. Examples Input 5 3 2 Output 1 2 3 2 1 Input 7 4 3 Output 1 2 3 4 3 2 1 Input 6 2 2 Output 1 2 1 2 1 2 Note In the first test, the sequence 1 2 3 2 1 has length 5, uses integers from 1 to 3, and the sum of every 2-consecutive integers is distinct. For instance, 1+2=3, 2+3=5, 3+2=5, and 2+1=3 (notice these sums are unique). In the second test, the sequence 1 2 3 4 3 2 1 has length 7, uses integers from 1 to 4, and the sum of every 3-consecutive integers is distinct. In the third test, the sequence 1 2 1 2 1 2 has length 6, uses integers 1 and 2, and the sum of every 2-consecutive integers is distinct. Make sure the sequence meets all the criteria specified by Athena, considering the input constraints.","solution":"def generate_sequence(n, m, k): Generates a sequence of integers meeting Athena\'s criteria. The sequence is exactly n integers long, uses integers from 1 to m, and the sum of any k consecutive integers is distinct. sequence = [] for i in range(n): # Distribute the numbers 1 to m cyclically sequence.append((i % m) + 1) return sequence"},{"question":"Write a function `calculate_discount` that takes an original price and a discount percentage as input and returns the final price after applying the discount. The discount should be applied as a percentage of the original price. Your function should handle inputs where the discount percentage can be zero or any positive integer. # Function Signature ```python def calculate_discount(original_price: float, discount_percentage: int) -> float: pass ``` # Input - `original_price`: a float representing the original price of the item (0 <= original_price <= 10^6) - `discount_percentage`: an integer representing the discount percentage to be applied (0 <= discount_percentage <= 100) # Output - A float representing the final price of the item after applying the discount, rounded to two decimal places. # Example Input ``` calculate_discount(100.0, 20) ``` Output ``` 80.00 ``` Input ``` calculate_discount(50.0, 0) ``` Output ``` 50.00 ``` Input ``` calculate_discount(250.0, 10) ``` Output ``` 225.00 ``` # Notes - Ensure to handle edge cases where the discount percentage is 0 (no discount) and where the discount percentage is 100 (the item is free). - Prices should always be rounded to two decimal places for the final output.","solution":"def calculate_discount(original_price: float, discount_percentage: int) -> float: Calculate the final price after applying the discount percentage to the original price. :param original_price: The original price of the item. :param discount_percentage: The discount percentage to be applied. :return: The final price after the discount, rounded to two decimal places. discount_amount = (original_price * discount_percentage) / 100 final_price = original_price - discount_amount return round(final_price, 2)"},{"question":"You are developing an application that processes user commands to manage a small library\'s catalog of books. Each command modifies the catalog or queries it in some way. You need to implement a system that can process these commands. The application should support the following commands: 1. **ADD title**: Add a book with the specified title to the catalog. Titles are unique. 2. **REMOVE title**: Remove the book with the specified title from the catalog. 3. **HAS title**: Check if a book with the specified title is in the catalog. Print \\"YES\\" if it is, otherwise print \\"NO\\". 4. **LIST**: Print all titles in the catalog in lexicographical order, one per line. You are provided with a list of commands to be processed sequentially. Implement a function that processes these commands and modifies the catalog accordingly, returning the appropriate responses for the queries. # Input 1. An integer `n`, the number of commands (1 ≤ `n` ≤ 100). 2. `n` lines, each containing one of the commands described above. Titles consist of up to 100 alphanumeric characters and may include spaces. # Output For each `HAS` and `LIST` command, output the result as described. The output for `HAS` commands should be \\"YES\\" or \\"NO\\", and the output for `LIST` commands should be the titles in lexicographical order. # Example Input ``` 7 ADD The Catcher in the Rye ADD To Kill a Mockingbird HAS Moby Dick REMOVE The Catcher in the Rye HAS The Catcher in the Rye LIST ADD 1984 ``` Output ``` NO NO To Kill a Mockingbird 1984 ```","solution":"def process_commands(n, commands): catalog = set() output = [] for command in commands: cmd, *args = command.split(maxsplit=1) if cmd == \\"ADD\\": title = args[0] catalog.add(title) elif cmd == \\"REMOVE\\": title = args[0] catalog.discard(title) elif cmd == \\"HAS\\": title = args[0] output.append(\\"YES\\" if title in catalog else \\"NO\\") elif cmd == \\"LIST\\": for title in sorted(catalog): output.append(title) return output"},{"question":"Consider a string consisting solely of uppercase English letters (\'A\'-\'Z\') and the following operations that are allowed: 1. Remove any one character from the string. 2. Insert any one character at any position in the string. 3. Replace any one character with another character. Given two strings, find the minimum number of operations required to transform the first string into the second string. Input The input consists of two lines: - The first line contains the first string s1 (1 ≤ |s1| ≤ 103). - The second line contains the second string s2 (1 ≤ |s2| ≤ 103). Output Print the minimum number of operations required to transform the first string into the second string. Examples Input ABC ACD Output 2 Input HELLO HI Output 4 Input ABCDEFG GFEDCBA Output 6","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. len_s1 = len(s1) len_s2 = len(s2) # Create a matrix to store results of subproblems dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] # Fill dp array for i in range(len_s1 + 1): for j in range(len_s2 + 1): if i == 0: dp[i][j] = j # Min. operations = j (all insertions) elif j == 0: dp[i][j] = i # Min. operations = i (all deletions) elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[len_s1][len_s2] # Example usage: # s1 = \\"ABC\\" # s2 = \\"ACD\\" # print(min_operations(s1, s2)) # Output: 2"},{"question":"**Problem: Longest Path in a Directed Acyclic Graph (DAG)** Alex is analyzing a network represented as a Directed Acyclic Graph (DAG). Each node in the network represents a task and each directed edge represents a dependency between tasks. To optimize the network, Alex wants to find the longest path from any node to any other node in the graph, which is defined as the path with the maximum number of edges. Your task is to help Alex by providing a program that computes the length of this longest path in the DAG. # Input The input consists of a single test case in the following format: - The first line contains two integers `n` and `m` (1 leq n leq 100,000 and 0 leq m leq 200,000), representing the number of nodes and the number of directed edges in the graph respectively. - Each of the following `m` lines contains two integers `u` and `v` (1 leq u, v leq n and u neq v), representing a directed edge from node `u` to node `v`. # Output The output should be a single integer representing the length of the longest path in the DAG. # Sample Input 1 ``` 5 6 1 2 2 3 1 3 1 4 4 5 3 5 ``` # Sample Output 1 ``` 3 ``` # Sample Input 2 ``` 4 3 1 2 2 3 3 4 ``` # Sample Output 2 ``` 3 ``` # Explanation For Sample Input 1: - One of the longest paths is: 1 -> 2 -> 3 -> 5, having 3 edges. - Another longest path is: 1 -> 4 -> 5, having 2 edges. The longest path has 3 edges. For Sample Input 2: - The only longest path is 1 -> 2 -> 3 -> 4, having 3 edges. # Constraints - The graph is a Directed Acyclic Graph (DAG). - Nodes are labeled from 1 to n. Make sure your solution efficiently computes the longest path given the constraints.","solution":"from collections import defaultdict, deque def longest_path_in_dag(n, m, edges): def topological_sort(): in_degree = {i: 0 for i in range(1, n + 1)} for u, v in edges: in_degree[v] += 1 zero_in_degree_queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) top_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() top_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) return top_order graph = defaultdict(list) for u, v in edges: graph[u].append(v) top_order = topological_sort() distance = {i: float(\'-inf\') for i in range(1, n + 1)} distance[top_order[0]] = 0 for node in top_order: for neighbor in graph[node]: if distance[neighbor] < distance[node] + 1: distance[neighbor] = distance[node] + 1 return max(distance.values()) # This will be your main function to be used. def compute_longest_path(n, m, edge_list): return longest_path_in_dag(n, m, edge_list)"},{"question":"Alice loves playing with geometry and numbers. One of her favorite activities is arranging stones to form triangular numbers. A triangular number or triangle number is a number that can form an equilateral triangle. The nth triangular number is given by the formula Tn = n * (n + 1) / 2. Now Alice wants to determine if a given number X is a triangular number. If X is a triangular number, she wants to know the smallest n such that X = Tn. Write a function `is_triangular(X)` that takes in an integer X and returns the integer n if X is a triangular number, otherwise it should return -1. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer X. Output Format For each test case, print the value of n if X is a triangular number. Print -1 if X is not a triangular number. Constraints 1 ≤ T ≤ 1000 1 ≤ X ≤ 10^9 SAMPLE INPUT 3 3 10 11 SAMPLE OUTPUT 2 4 -1 Explanation Case 1: 3 is a triangular number since 3 = 2 * (2 + 1) / 2. Thus the output is 2. Case 2: 10 is a triangular number since 10 = 4 * (4 + 1) / 2. Thus the output is 4. Case 3: 11 is not a triangular number. Thus the output is -1.","solution":"import math def is_triangular(X): Determines if X is a triangular number and returns n if true, otherwise -1. # Check the triangular number property: n(n + 1) / 2 = X -> n^2 + n - 2X = 0 if X < 1: return -1 # Solving for n using quadratic formula # n = (-1 + sqrt(1 + 8 * X)) / 2 discriminant = 1 + 8 * X sqrt_discriminant = math.isqrt(discriminant) if sqrt_discriminant * sqrt_discriminant != discriminant: return -1 n = (-1 + sqrt_discriminant) // 2 if n * (n + 1) // 2 == X: return n return -1"},{"question":"In a remote village, there is a unique postal service mechanism which delivers messages using a hierarchical bird communication system. Each village is represented as a perfect binary tree. Each node of the binary tree represents a position for a bird that can either transmit or receive messages. Each villager sends a message from the root node and it propagates to all the birds along the paths of the tree. The task is to find the minimum number of transmissions required to reach all birds from the root to the leaf nodes. Each transmission can travel to both child nodes simultaneously from any parent node. Given the height of the binary tree, write a program to calculate the minimum number of transmissions required. Input Multiple test cases are given. Each test case contains one integer h (1 ≤ h ≤ 1000) representing the height of the binary tree. Process until the end of input (EOF). Output For each test case, output the minimum number of transmissions required to reach all the leaf nodes from the root on a new line. Example Input 3 5 10 Output 3 5 10","solution":"def min_transmissions_to_leaf(height): Given the height of a perfect binary tree, returns the minimum number of transmissions required to reach all the leaf nodes from the root. # In a perfect binary tree, the number of transmissions needed # to ensure the message reaches the leaves corresponds to the height of the tree. return height def process_input(input_data): Process multiple test cases from the input data. Returns the results of minimum transmissions for each test case. results = [] for line in input_data.split(\'n\'): if line.strip(): height = int(line.strip()) results.append(min_transmissions_to_leaf(height)) return results"},{"question":"Bobby works as a gardener and he has a beautiful rectangular garden that measures n rows by m columns. He wishes to plant flowers in this garden in such a way that no two flowers are adjacent to each other horizontally, vertically, or diagonally. Bobby needs to find out the maximum number of flowers he can plant in this garden under these constraints. Can you help him? Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the garden. Output Print a single integer, which is the maximum number of flowers that can be planted in the garden following the given rules. Examples # Input ``` 3 3 ``` # Output ``` 5 ``` # Explanation In a 3x3 garden, the optimal way to plant the flowers is: ``` F . F . F . F . F ``` Hence, 5 flowers can be planted. # Input ``` 4 4 ``` # Output ``` 8 ``` # Explanation In a 4x4 garden, the optimal way to plant flowers is: ``` F . F . . F . F F . F . . F . F ``` Thus, 8 flowers can be planted.","solution":"def max_flowers(n, m): Function to calculate the maximum number of flowers that can be planted in a garden with given constraints. Args: n: number of rows m: number of columns Returns: Maximum number of flowers that can be planted return (n * m + 1) // 2"},{"question":"You are given a list of rectangular coordinates representing the vertices of a convex polygon in a 2D plane. Your task is to calculate the area of the polygon. The coordinates are given in counter-clockwise order. Input First line of the input contains a single integer n (3 ≤ n ≤ 100 000) — the number of vertices of the polygon. Each of the following n lines contains two integers xi and yi (|x|, |y| ≤ 1 000 000) — the coordinates of the i-th vertex. The vertices are enumerated in the order they appear in the input. Output Print a single floating-point number — the area of the polygon with an absolute or relative error no more than 10⁻⁶. Examples Input 4 1 1 1 4 5 4 5 1 Output 12.000000 Input 3 0 0 4 0 2 4 Output 8.000000","solution":"def polygon_area(vertices): Calculate the area of a convex polygon using the shoelace formula. :param vertices: List of tuples containing the coordinates (x, y) of the polygon vertices. :return: Area of the polygon n = len(vertices) area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - x2 * y1 return abs(area) / 2.0 def parse_input(input_lines): Parse input lines to extract the number of vertices and the list of vertices. :param input_lines: List of strings representing the input lines. :return: Tuple containing the number of vertices and the list of vertices. n = int(input_lines[0]) vertices = [tuple(map(int, line.split())) for line in input_lines[1:n+1]] return vertices def main(input_lines): vertices = parse_input(input_lines) area = polygon_area(vertices) return f\\"{area:.6f}\\""},{"question":"Stella loves playing with sequences of integers. She considers a sequence beautiful if the difference between consecutive integers is either 1 or -1. Given a sequence of integers, determine if it is beautiful. Input The first line contains an integer n (1 ≤ n ≤ 200) denoting the number of elements in the sequence. The second line contains n space-separated integers representing the sequence. Output Print \\"BEAUTIFUL\\" if the sequence is beautiful, otherwise print \\"NOT BEAUTIFUL\\". Examples Input 5 1 2 3 2 1 Output BEAUTIFUL Input 4 1 3 5 7 Output NOT BEAUTIFUL","solution":"def is_beautiful_sequence(n, sequence): Determines if the sequence is beautiful. A sequence is considered beautiful if the difference between consecutive integers is either 1 or -1. Parameters: n (int): Number of elements in the sequence. sequence (list of int): The sequence of integers. Returns: str: \\"BEAUTIFUL\\" if the sequence is beautiful, otherwise \\"NOT BEAUTIFUL\\". for i in range(1, n): if abs(sequence[i] - sequence[i-1]) != 1: return \\"NOT BEAUTIFUL\\" return \\"BEAUTIFUL\\""},{"question":"In a science laboratory, a scientist has a set of n ingredients, each represented by an integer from 1 to n. The scientist has formulated a mixture which he wishes to analyze. The mixture is represented by a sequence of integers a1, a2, ..., am, where each ai is an integer from 1 to n. To perform his analysis, the scientist needs to determine the quantity of each type of ingredient present in the mixture. Write a program that takes the list of ingredients in the mixture and outputs the count of each ingredient. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the number of different ingredients and the length of the mixture sequence respectively. The second line contains m integers, determining the sequence a1, a2, ..., am, where 1 ≤ ai ≤ n. Output Output n integers where the i-th integer is the number of times the ingredient i appears in the mixture. Examples Input 5 8 1 2 3 3 2 1 5 1 Output 3 2 2 0 1 Input 4 4 4 4 4 4 Output 0 0 0 4 Note In the first sample, the ingredients 1, 2, 3, 4, and 5 appear 3, 2, 2, 0, and 1 times respectively in the mixture. In the second sample, the ingredient 4 appears 4 times, whereas ingredients 1, 2, and 3 do not appear at all. Please write your program to efficiently handle large values of n and m.","solution":"def count_ingredients(n, m, mixture): Returns a list with the count of each ingredient from 1 to n in the given mixture. counts = [0] * n for ingredient in mixture: counts[ingredient - 1] += 1 return counts"},{"question":"In a land far away, there is a city surrounded by a series of interconnected gateways that form a network. Each gateway has a unique ID and connects to other gateways through bidirectional routes. Every day, various goods are transported through these routes to balance the city\'s markets. However, there are frequent rearrangements due to market demands to ensure minimal travel cost for transporting goods. Given the network of gateways and routes between them, you are tasked with finding the shortest route from a specific gateway `A` to another gateway `B`. If there are multiple routes with the same minimal travel cost, find the route with the fewest number of gateways. Input The first line contains two integers `N` and `M`, where `N` is the number of gateways (1 ≤ N ≤ 1000) and `M` is the number of bidirectional routes (1 ≤ M ≤ 20000). Each of the following `M` lines contains three integers `u`, `v`, and `w`, describing a route between gateway `u` and gateway `v` with travel cost `w` (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000). The last line contains two integers `A` and `B`, indicating the starting gateway `A` and the destination gateway `B` (1 ≤ A, B ≤ N). Output Print the minimal travel cost and the route with the fewest number of gateways. If it\'s impossible to find such a route, print `-1`. Examples Input 6 7 1 2 4 2 3 3 3 4 5 4 5 1 5 6 8 1 6 2 2 6 2 1 5 Output 10 1 6 5 Input 4 4 1 2 4 2 3 2 3 4 6 1 4 10 1 4 Output 10 1 4","solution":"import heapq from collections import defaultdict, deque def shortest_route(N, M, routes, A, B): Find the shortest route from gateway A to gateway B with the minimal travel cost. If there are multiple routes with the same minimal travel cost, return the route with the fewest gateways. Args: N -- Number of gateways M -- Number of bidirectional routes routes -- List of tuples representing the routes with travel cost: (u, v, w) A -- Starting gateway B -- Destination gateway Returns: tuple -- Minimal travel cost and the route with fewest number of gateways (minimal_cost, route) or -1 if no valid route exists adj_list = defaultdict(list) for u, v, w in routes: adj_list[u].append((v, w)) adj_list[v].append((u, w)) # Priority queue to store (cost, node, path) queue = [(0, A, [A])] heapq.heapify(queue) visited = set() min_cost_paths = {node: (float(\'inf\'), []) for node in range(1, N+1)} min_cost_paths[A] = (0, [A]) while queue: cost, node, path = heapq.heappop(queue) if node in visited: continue visited.add(node) if node == B: return (cost, path) for neighbor, weight in adj_list[node]: if neighbor not in visited: new_cost = cost + weight new_path = path + [neighbor] if (new_cost < min_cost_paths[neighbor][0] or (new_cost == min_cost_paths[neighbor][0] and len(new_path) < len(min_cost_paths[neighbor][1]))): min_cost_paths[neighbor] = (new_cost, new_path) heapq.heappush(queue, (new_cost, neighbor, new_path)) return -1 if min_cost_paths[B][0] == float(\'inf\') else min_cost_paths[B] # Example usage: N = 6 M = 7 routes = [ (1, 2, 4), (2, 3, 3), (3, 4, 5), (4, 5, 1), (5, 6, 8), (1, 6, 2), (2, 6, 2) ] A, B = 1, 5 print(shortest_route(N, M, routes, A, B)) # Output: (10, [1, 6, 5])"},{"question":"Alice is an avid programmer who loves working with sequences of numbers. Recently, she has stumbled upon an interesting problem involving arithmetic progressions. An arithmetic progression (AP) is a sequence of numbers in which the difference between consecutive terms is constant. For example, 3, 5, 7, 9 is an AP with a common difference of 2. Alice\'s task is to determine whether a given sequence of integers forms an arithmetic progression. Can you help her automate this process? You are given a sequence of integers, and you need to check whether this sequence forms an arithmetic progression. If it does, print \\"YES\\"; otherwise, print \\"NO\\". Input: - The first line of the input contains T, the number of test cases. - Each test case consists of two lines. The first line contains N, the number of elements in the sequence. - The second line contains N space-separated integers, the elements of the sequence. Output: - For each test case, print \\"YES\\" if the sequence forms an arithmetic progression; otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 -10^9 ≤ sequence elements ≤ 10^9 SAMPLE INPUT 3 4 2 4 6 8 3 3 6 9 5 1 2 4 8 16 SAMPLE OUTPUT YES YES NO Explanation In the first test case, the sequence [2, 4, 6, 8] forms an arithmetic progression with a common difference of 2. Therefore, the output is \\"YES\\". In the second test case, the sequence [3, 6, 9] forms an arithmetic progression with a common difference of 3. Therefore, the output is \\"YES\\". In the third test case, the sequence [1, 2, 4, 8, 16] does not form an arithmetic progression, so the output is \\"NO\\".","solution":"def is_arithmetic_progression(sequence): if len(sequence) < 2: return \\"NO\\" common_difference = sequence[1] - sequence[0] for i in range(2, len(sequence)): if sequence[i] - sequence[i - 1] != common_difference: return \\"NO\\" return \\"YES\\" def check_arithmetic_progressions(test_cases): results = [] for case in test_cases: n, sequence = case results.append(is_arithmetic_progression(sequence)) return results"},{"question":"Alice is playing a game with an array of integers. She wants to maximize her score using a specific operation. The operation is defined as follows: - Choose a subarray of the given array. - Reverse the subarray. - Compute the sum of the absolute differences between consecutive elements of the entire array. Your task is to help Alice find the maximum possible score she can achieve by performing this operation exactly once. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print a single integer — the maximum possible score Alice can achieve. Example Input 5 1 2 3 4 5 Output 8 Note In the example above, reversing the subarray [2, 3, 4] results in the array [1, 4, 3, 2, 5]. The sum of the absolute differences between consecutive elements of this array is 3 + 1 + 1 + 3 = 8. This is the maximum score she can achieve.","solution":"def max_absolute_sum_after_reverse(n, arr): def calculate_absolute_diff(arr): return sum(abs(arr[i] - arr[i+1]) for i in range(len(arr) - 1)) if n <= 1: return 0 original_diff = calculate_absolute_diff(arr) max_increase = 0 for i in range(1, n-1): for j in range(i, n): left_segment = arr[:i] middle_segment = arr[i:j+1][::-1] right_segment = arr[j+1:] new_array = left_segment + middle_segment + right_segment new_diff = calculate_absolute_diff(new_array) max_increase = max(max_increase, new_diff - original_diff) return original_diff + max_increase # Example usage: # n = 5 # arr = [1, 2, 3, 4, 5] # print(max_absolute_sum_after_reverse(n, arr)) # Output: 8"},{"question":"Tim loves geometry and came across an interesting problem in a geometry e-book he is reading. But since he is busy studying for another subject, he asked for your help to solve it. The problem is: Given two coordinates of a rectangle on a 2D plane and its area, determine the coordinates of the two missing points of the rectangle. The input consists of the coordinates of two opposite corners of the rectangle (x1, y1) and (x2, y2), and the area of the rectangle. You need to output the coordinates of the other two corners of the rectangle. SAMPLE INPUT 1 2 4 5 9 SAMPLE OUTPUT 1 5 4 2 Explanation: The input indicates opposite corners of a rectangle located at (1, 2) and (4, 5) with an area of 9. Given this information, the other corners of the rectangle are found to be at (1, 5) and (4, 2).","solution":"def find_other_corners(x1, y1, x2, y2, area): Given two coordinates of a rectangle on a 2D plane and its area, determine the coordinates of the two missing points of the rectangle. Args: x1, y1, x2, y2 (int): Coordinates of two opposite corners of the rectangle. area (int): Area of the rectangle. Returns: tuple: Two coordinates of the other two corners in the format ((x3, y3), (x4, y4)). # First we check if x1 equals to x2, or y1 equals to y2, because in these cases, # it is not valid to form a rectangle if x1 == x2 or y1 == y2: raise ValueError(\\"Invalid rectangle coordinates. x1 should not equal x2 and y1 should not equal y2.\\") # Calculate length and width using area length = abs(x1 - x2) width = abs(y1 - y2) if length * width != area: raise ValueError(\\"Given coordinates and area do not match.\\") # The other two corners can be found: x3, y3 = x1, y2 x4, y4 = x2, y1 return (x3, y3), (x4, y4)"},{"question":"Given an array of n integers, you need to find a subarray in which the sum of the elements is maximum. If there are multiple subarrays with the same maximum sum, return the one with the smallest length. If multiple subarrays with the same maximum sum and length exist, return the one that appears first. Input The first line contains an integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains n integers a1, a2, ..., an (-106 ≤ ai ≤ 106) — the elements of the array. Output Print two integers: the starting and ending indices (1-based) of the subarray with the maximum sum. If there are multiple such subarrays, print the one with the smallest length. If there are multiple such subarrays of the same length, print the one that appears first. Examples Input 5 1 -2 3 5 -1 Output 3 4 Input 6 -1 -2 -3 -4 -5 -6 Output 1 1 Input 8 4 -1 2 1 -5 4 -3 -1 Output 1 4","solution":"def max_subarray_indices(arr): Function to find the indices of the subarray with the maximum sum. Parameters: arr (list): List of integers Returns: tuple: (start_index, end_index) of the subarray with maximum sum n = len(arr) max_sum = -float(\'inf\') current_sum = 0 start_idx = end_idx = 0 temp_start = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and (i - temp_start < end_idx - start_idx)): max_sum = current_sum start_idx = temp_start end_idx = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return start_idx + 1, end_idx + 1 # Example usage n = 5 arr = [1, -2, 3, 5, -1] print(max_subarray_indices(arr)) # Output should be (3, 4)"},{"question":"A logistics company uses a simple algorithm to track the delivery progress of its packages. As the packages are delivered, the delivery staff records the exact time at which they hand over the package to the customer and the time they collected the package from the warehouse. The package is considered to be delivered \\"on time\\" if the elapsed time between collection and delivery is within 120 minutes. As a programmer, your task is to analyze the recorded times and determine the percentage of \\"on-time\\" deliveries out of the total deliveries. Input The input consists of multiple datasets, each representing one delivery day. The first line of each dataset contains a single integer n (0 < n ≤ 100), the number of delivery records for that day. Each of the next n lines contains the collection and delivery time in the following format: HH1:MM1 HH2:MM2 HH1:MM1 is the collection time and HH2:MM2 is the delivery time, expressed in a 24-hour clock format. The input is terminated by a line containing a single zero. You do not need to process this line. Output For each dataset, output a single line indicating the percentage of \\"on-time\\" deliveries, truncated to the nearest integer. Example Input 3 09:00 10:55 13:30 15:10 18:45 21:00 2 08:00 08:30 14:00 16:05 0 Output 66 50 In the first dataset, two deliveries out of three were performed on time (09:00 to 10:55 is 115 minutes, and 13:30 to 15:10 is 100 minutes), resulting in 66% on-time deliveries. In the second dataset, only one delivery was on time (08:00 to 08:30 is 30 minutes), making it 50%.","solution":"def calculate_on_time_delivery_percentages(delivery_datasets): Given multiple datasets, each representing one delivery day, calculate the percentage of on-time deliveries. An on-time delivery is defined as being delivered within 120 minutes from collection. :param delivery_datasets: List of datasets, where each dataset is a list of strings representing lines in input. :return: List of integers, each representing the percentage of on-time deliveries for a dataset. results = [] def time_to_minutes(time_str): Converts time in HH:MM format to total minutes from 00:00. hh, mm = map(int, time_str.split(\':\')) return hh * 60 + mm for dataset in delivery_datasets: n = int(dataset[0]) if n == 0: continue on_time_count = 0 for i in range(1, n + 1): collected_time, delivered_time = dataset[i].split() collected_minutes = time_to_minutes(collected_time) delivered_minutes = time_to_minutes(delivered_time) elapsed_time = delivered_minutes - collected_minutes if elapsed_time <= 120: on_time_count += 1 on_time_percentage = (on_time_count * 100) // n results.append(on_time_percentage) return results # Example Usage: input_datasets = [ [\\"3\\", \\"09:00 10:55\\", \\"13:30 15:10\\", \\"18:45 21:00\\"], [\\"2\\", \\"08:00 08:30\\", \\"14:00 16:05\\"], ] output_result = calculate_on_time_delivery_percentages(input_datasets) print(output_result) # Expected Output: [66, 50]"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to write a program that checks multiple datasets to determine whether the given strings are palindromes or not. Please note that you should ignore spaces, punctuation, and capitalization while performing the check. Input The input consists of multiple datasets. Each dataset is a string (which may include spaces and punctuation). The input ends with a line containing a single asterisk (\'*\'). Output For each dataset, print \'Yes\' if the string is a palindrome, otherwise print \'No\'. Example Input A man, a plan, a canal, Panama! Was it a car or a cat I saw? No lemon, no melon Hello, World! * Output Yes Yes Yes No","solution":"import re def is_palindrome(s): Checks if the given string s is a palindrome, ignoring spaces, punctuation, and capitalization. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1] def check_palindromes(datasets): Checks a list of strings to determine whether each is a palindrome. results = [] for data in datasets: if data == \'*\': break if is_palindrome(data): results.append(\'Yes\') else: results.append(\'No\') return results"},{"question":"You are given a rectangular garden that needs to be partitioned into multiple smaller rectangular sections such that each section meets specific size requirements. The garden is represented by a grid of size M x N where each cell can either be a part of garden soil or a tree. The sections must only consist of garden soil cells (\'S\') and must not include any tree cells (\'T\'). Additionally, each section needs to be a contiguous rectangular block. Your task is to determine the maximum number of disjoint contiguous rectangular sections that can be formed based on the following requirements: 1. Each section must have an area between L and H, inclusive. 2. Sections must be formed within the bounds of the grid. 3. Sections cannot overlap. Input The first line contains three integers M, N, and T (1 ≤ M, N ≤ 200, 1 ≤ T ≤ 10^4) – the number of rows and columns of the grid, and the number of rectangular sections that meet the size requirements. The second line contains two integers L and H (1 ≤ L ≤ H ≤ M * N) – the minimum and maximum area for each section. The next M lines each contain N characters, where each character is either \'S\' for soil or \'T\' for tree. It is guaranteed that there is at least one section in the given grid that meets the area requirements. Output Print an integer denoting the maximum number of sections that can be formed, satisfying the given conditions. Example Input 5 5 10 4 12 SSSSS SSSTT SSSSS SSSSS TTTTT Output 3 Note In the given example, one possible way to partition the grid could be forming sections of sizes (2x2), (2x2), and (1x4), which yields a maximum of 3 sections that meet the condition. Explanation The first section could be formed from the top-left 2x2 grid of \'S\' cells, the second one could be another 2x2 grid of \'S\' cells adjacent to the first section, and the third one could be a 1x4 grid within the first three rows and middle columns.","solution":"def max_sections(M, N, T, L, H, grid): Returns the maximum number of sections that can be formed based on the conditions. def find_sections(r1, c1, r2, c2): area = (r2 - r1 + 1) * (c2 - c1 + 1) if area < L or area > H: return False for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): if grid[i][j] == \'T\': return False return True count = 0 for r1 in range(M): for r2 in range(r1, M): for c1 in range(N): for c2 in range(c1, N): if find_sections(r1, c1, r2, c2): for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] = \'T\' count += 1 if count >= T: return count return count"},{"question":"You are given two lists of integers, A and B, both of length N. You need to identify if there is a contiguous subarray in A whose sum is equal to the sum of elements of any contiguous subarray in B. If such subarrays exist, print \\"YES\\"; otherwise, print \\"NO\\". Input: The first line contains an integer T, the number of test cases. Each test case consists of three lines: - The first line contains an integer N, the length of the lists. - The second line contains N integers representing the elements of list A. - The third line contains N integers representing the elements of list B. Output: For each test case, print \\"YES\\" if there exists at least one pair of contiguous subarrays (one from A and one from B) with equal sums, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 -100 ≤ A[i], B[i] ≤ 100 Example: Input: 2 5 1 2 3 4 5 -1 6 0 -2 3 3 1 -1 1 1 -1 1 Output: YES YES Explanation: In the first test case, the subarray [1, 2, 3] in list A sums to 6, which equals the sum of the subarray [6] in list B. In the second test case, the subarray [1, -1, 1] in list A sums to 1, which equals the sum of the subarray [1] in list B, and also equals the sum of the subarray [-1, 1, 1] in list B.","solution":"def has_equal_sum_subarray(T, test_cases): result = [] for test in test_cases: N, A, B = test a_sums = set() # Get all possible subarray sums of A for i in range(N): sub_sum = 0 for j in range(i, N): sub_sum += A[j] a_sums.add(sub_sum) # Check if any subarray sum in B matches a subarray sum in A found = False for i in range(N): sub_sum = 0 for j in range(i, N): sub_sum += B[j] if sub_sum in a_sums: found = True break if found: break if found: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Given an array of integers, you need to determine the length of the longest subarray where the absolute difference between any two consecutive elements is exactly 1. Input First line contains T, the number of test cases. Each test case contains N in one line, the number of elements in the array. Next line contains N space-separated integers. Output For each test case, output the required answer in one line. Constraints: 1 ≤ T ≤ 10 25% test data: 1 ≤ N ≤ 10 75% test data: 1 ≤ N ≤ 50 1 ≤ Ai ≤ 100 SAMPLE INPUT 1 6 1 2 3 4 5 6 SAMPLE OUTPUT 6 Explanation The whole array forms a valid subarray as the absolute difference between any two consecutive elements is 1.","solution":"def longest_subarray(arr): This function takes a list of integers and returns the length of the longest subarray where the absolute difference between any two consecutive elements is exactly 1. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 return max_length def process_test_cases(test_cases): This function processes a list of test cases. Each test case is assumed to be a tuple with the first item as the number of elements and the second item as the list of elements. It returns a list of results for each test case. results = [] for n, arr in test_cases: results.append(longest_subarray(arr)) return results"},{"question":"Problem statement You are given a set of intervals on a number line. Each interval is represented by two integers `[start, end]`, where `start` is the starting point of the interval and `end` is the ending point of the interval. Your task is to merge all overlapping intervals and return the list of merged intervals. Two intervals `[a, b]` and `[c, d]` are considered overlapping if `b >= c` and `a <= d`. # Input - An integer `n` representing the number of intervals. - `n` pairs of integers `start` and `end` representing each interval. # Output - A list of pairs of integers representing the merged intervals. # Constraints - `1 <= n <= 10000` - `-10^4 <= start <= end <= 10^4` # Sample Input ``` 6 1 4 2 5 7 9 11 13 8 10 12 14 ``` # Sample Output ``` [1, 5] [7, 10] [11, 14] ``` # Explanation Intervals `[1, 4]` and `[2, 5]` overlap and are merged into `[1, 5]`. Intervals `[7, 9]` and `[8, 10]` overlap and are merged into `[7, 10]`. Intervals `[11, 13]` and `[12, 14]` overlap and are merged into `[11, 14]`.","solution":"def merge_intervals(intervals): Merges overlapping intervals. Args: intervals (list of lists): List of intervals where each interval is a list of two integers [start, end]. Returns: list of lists: List of merged intervals. if not intervals: return [] # Sort the intervals by their starting points intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_interval = intervals[0] for interval in intervals: if interval[0] <= current_interval[1]: # There is overlap current_interval[1] = max(current_interval[1], interval[1]) else: # No overlap merged_intervals.append(current_interval) current_interval = interval # Add the last interval merged_intervals.append(current_interval) return merged_intervals"},{"question":"You are given a string consisting of lowercase English letters and an integer k. Your task is to perform exactly k operations on the string. In one operation, you can choose any character in the string and replace it with any other lowercase English letter. The objective is to maximize the number of distinct characters present in the string after k operations. Input The first line contains a string s (1 ≤ |s| ≤ 10^5) — the initial string. The second line contains an integer k (0 ≤ k ≤ 10^5) — the number of operations you must perform. Output Print a single integer — the maximum number of distinct characters that can be achieved in the string after performing exactly k operations. Examples Input abcdea 2 Output 6 Input abc 1 Output 4","solution":"def max_distinct_chars(s, k): This function takes a string s and an integer k and performs exactly k operations on the string to maximize the number of distinct characters in the string. # Number of distinct characters in the original string distinct_chars = len(set(s)) # Total number of possible distinct characters (26 lowercase English letters) total_possible_chars = 26 # If k operations are allowed and `distinct_chars + k` exceeds `total_possible_chars` # the maximum distinct characters possible is capped at 26 return min(distinct_chars + k, total_possible_chars)"},{"question":"You are given a sequence of n integers representing the heights of n buildings in a city. A building with height `h` has `h` windows, each window represented by a unique number from 1 to `h`. A window cleaning company needs to clean the windows of these buildings following certain constraints. The company will receive m cleaning requests, each specifying a building index and a specific window that needs to be cleaned. For each request, the company needs to determine if it\'s possible to clean the specified window without leaving any window before it dirty. If the window can be cleaned, the company will clean that window and all windows of the same building that come before it. If it cannot be cleaned, the request is denied. Write a program that processes each cleaning request and determines the status of each request. Input The first line contains two integers n and m — the number of buildings and the number of cleaning requests respectively (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5). The second line contains n integers h_1, h_2, ..., h_n — the heights of the buildings (1 ≤ h_i ≤ 10^5). The following m lines each contain two integers b_j and w_j — the building index and the window number the company needs to clean respectively (1 ≤ b_j ≤ n, 1 ≤ w_j ≤ h_b_j). Output Print m lines, where each line is either \\"YES\\" or \\"NO\\", according to whether the specified window can be cleaned. Example Input 4 5 5 3 6 2 1 3 2 2 4 2 1 6 3 1 Output YES YES YES NO YES","solution":"def clean_windows(n, m, heights, requests): results = [] for building_idx, window in requests: if window <= heights[building_idx - 1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tom has a peculiar arithmetic series that he likes to study. The series follows a unique pattern, where each element is defined as the sum of the previous element and the product of two constants p and q. The first element of the series is given by the variable a. The series can be represented as follows: - a1 = a - a2 = a + p * q - a3 = (a + p * q) + p * q - a4 = ((a + p * q) + p * q) + p * q - and so on... Formally, the nth element of the series can be calculated using the formula: - an = a + (n - 1) * (p * q) Tom wants to perform two types of operations on this series: 1. \\"1 i k\\" — Modify the value of a to be k and recalculate the series starting from position i. 2. \\"2 n\\" — Print the nth element of the series. Initially, Tom needs to handle m queries on the series. Input The first line contains four integers a, p, q, and m (1 ≤ a, p, q ≤ 1000, 1 ≤ m ≤ 200000). Each of the following m lines contains a query in the format specified above. It is guaranteed that for all queries: 1 ≤ i, n ≤ 200000 and 1 ≤ k ≤ 1000. Output For each query of type \\"2 n\\", print the nth element of the series on a separate line. The queries should be answered in the order given in the input. Examples Input 2 2 3 5 1 1 5 2 1 2 2 1 2 3 2 3 Output 5 5 8 Explanation 1. The initial value of a is 2, p is 2, and q is 3. 2. For query \\"1 1 5\\", the value of a is modified to 5. 3. For query \\"2 1\\", the 1st element is printed, which is 5. 4. For query \\"2 2\\", the 2nd element is printed, which is 5 + 2 * 3 = 11. 5. For query \\"1 2 3\\", the value of a from the 2nd position is modified to 3. Since it\'s from the 2nd position, the series is recalculated from that point. 6. For query \\"2 3\\", the 3rd element is printed, which is recalculated as (5 + 2 * 3) - (2 * 3) + 3 + 2 * 3 = 14.","solution":"def process_queries(a, p, q, m, queries): Function to process a list of queries on the peculiar arithmetic series. Parameters: a (int): The initial first element of the series. p (int): The first constant defining the series. q (int): The second constant defining the series. m (int): Number of queries to be processed. queries (list of str): List of queries to process. Returns: list of int: Results of all \\"2 n\\" queries. results = [] current_a = a for query in queries: parts = query.split() if parts[0] == \\"1\\": i = int(parts[1]) k = int(parts[2]) if i == 1: current_a = k else: current_a = current_a - p * q + k elif parts[0] == \\"2\\": n = int(parts[1]) an = current_a + (n - 1) * (p * q) results.append(an) return results"},{"question":"Given an array of integers, your task is to determine if the array can be rearranged to form a contiguous sequence starting from any integer. A contiguous sequence is an array where the difference between consecutive elements is 1. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: Print \\"YES\\" (without quotes) if the array can be rearranged to form a contiguous sequence, and \\"NO\\" otherwise. Examples: Input: 5 3 4 2 1 5 Output: YES Input: 4 7 5 8 6 Output: YES Input: 6 1 3 2 5 4 7 Output: NO Note: In the first example, the array can be rearranged to [1, 2, 3, 4, 5] which is a contiguous sequence. In the second example, the array can be rearranged to [5, 6, 7, 8] which is a contiguous sequence. In the third example, the array cannot be rearranged to form a contiguous sequence as there is a gap between 5 and 7.","solution":"def can_form_contiguous_sequence(arr): Determines if the array can be rearranged to form a contiguous sequence. Parameters: arr (list of int): The array of integers. Returns: str: \\"YES\\" if the array can be rearranged to form a contiguous sequence, otherwise \\"NO\\". min_value = min(arr) max_value = max(arr) expected_length = max_value - min_value + 1 if len(arr) == expected_length: return \\"YES\\" else: return \\"NO\\""},{"question":"In a remote village, there are several houses aligned in a straight line, and you need to supply water to all of them. There are n houses, and each house has a fixed demand in liters of water per unit time. The village has exactly one water source, and you have m water pipelines available, each with a certain capacity and cost to build. Your goal is to connect the water source to the houses using the available pipelines in such a way that: 1. Every house is supplied with its required demand in water. 2. The total cost of building the pipelines is minimized. You do not have to connect the houses in sequential order, but you must ensure that all houses are connected directly or indirectly to the water source and meet their demands. Input The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of houses. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1000) — the water demand of each house. The next line contains one integer m (1 ≤ m ≤ 3000) — the number of available pipelines. The next m lines each describe a pipeline. Each line contains three integers ui, vi, and costi (1 ≤ ui, vi ≤ n, 1 ≤ costi ≤ 10000) — the two endpoints of the i-th pipeline and the cost to build it. Output Output one integer — the minimum cost to ensure that all houses receive their required water demand. If it is not possible to satisfy the demand, output -1. Example Input 3 10 20 30 3 1 2 15 2 3 20 1 3 30 Output 35 Note In this example, you can connect house 1 to house 2 with a pipeline of cost 15, and house 2 to house 3 with a pipeline of cost 20. This ensures all houses have water at a total cost of 35.","solution":"import heapq def min_water_supply_cost(n, demands, m, pipelines): # Create a graph to model the connections between houses graph = {i: [] for i in range(1, n+1)} for u, v, cost in pipelines: graph[u].append((cost, v)) graph[v].append((cost, u)) # Use Prim\'s algorithm to find the Minimum Spanning Tree (MST) cost def find_mst_cost(graph, start): visited = [False] * (n + 1) min_heap = [(0, start)] total_cost = 0 total_houses_covered = 0 while min_heap: cost, node = heapq.heappop(min_heap) if not visited[node]: visited[node] = True total_cost += cost total_houses_covered += 1 for edge_cost, neighbor in graph[node]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_cost, neighbor)) return total_cost if total_houses_covered == n else -1 # Assuming the source is house 1; return find_mst_cost(graph, 1) # Example Usage n = 3 demands = [10, 20, 30] m = 3 pipelines = [(1, 2, 15), (2, 3, 20), (1, 3, 30)] print(min_water_supply_cost(n, demands, m, pipelines)) # Output: 35"},{"question":"Find Missing Number in Sequence Given an arithmetic sequence of n integers where the common difference (d) between consecutive terms is constant, one number is missing. Write a function to find the missing number in the sequence. Input The input consists of multiple test cases, each in the following format. n a1 a2 ... an-1 Each test case consists of two lines. In the first line, the number of terms n in the complete sequence is given. n is an integer satisfying 3 ≤ n ≤ 1000. In the second line, n-1 terms of the sequence are given. Each element of the series (ai) is an integer greater than or equal to -1,000,000 and less than or equal to 1,000,000. The input ends with a line containing a single zero. Output For each test case, output the missing number in the sequence in a new line. Sample Input 5 2 4 8 10 7 3 9 15 21 33 39 4 1 9 13 0 Output for the Sample Input 6 27 5 Explanation In the first dataset, the original sequence should be 2, 4, 6, 8, 10, hence the missing number is 6. In the second dataset, the original sequence should be 3, 9, 15, 21, 27, 33, 39, hence the missing number is 27. In the third dataset, the original sequence should be 1, 5, 9, 13, hence the missing number is 5. Example Input 5 2 4 8 10 7 3 9 15 21 33 39 4 1 9 13 0 Output 6 27 5","solution":"def find_missing_number(sequence): Given a sequence with one missing number in an arithmetic series, finds the missing number. Input: sequence (list of int): List of n-1 integers where the sequence is missing one number Output: int: The missing number in the sequence # Calculate the common difference d = (sequence[-1] - sequence[0]) // len(sequence) # Calculate the expected sums n = len(sequence) + 1 expected_sum = (n * (2 * sequence[0] + (n - 1) * d)) // 2 actual_sum = sum(sequence) return expected_sum - actual_sum def process_input(input_data): Processes the input data as specified and outputs the missing number for each sequence. Input: input_data (str): Multi-line string where each section represents a test case Output: list of int: List of missing numbers for each test case in order lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break sequence = list(map(int, lines[i+1].split())) missing_number = find_missing_number(sequence) results.append(missing_number) i += 2 return results"},{"question":"You\'re given a grid with R rows and C columns, initially filled with zeros. You are also given a list of operations to be performed on this grid, where each operation is a set of coordinates representing the top-left and bottom-right corners of a subgrid. For each operation, you need to increment all elements within the defined subgrid by one. Create a program that processes all operations and returns the final state of the grid. Input The input is given in the following format: R C N x1 y1 x2 y2 x3 y3 x4 y4 :: xN yN xM yM The first line contains two integers, R (1 ≤ R ≤ 1000) and C (1 ≤ C ≤ 1000), representing the number of rows and columns in the grid. The second line contains the integer N (1 ≤ N ≤ 100000), the number of operations to be performed. The next N lines each contain four integers, xi, yi, xj, yj (1 ≤ xi ≤ xj ≤ R, 1 ≤ yi ≤ yj ≤ C), representing the coordinates of the top-left and bottom-right corners of the subgrid to be incremented. Output The output is the final state of the grid after all operations have been performed, printed row by row. Each element in a row should be separated by a space. Example Input 3 4 2 1 1 2 2 2 3 3 4 Output 1 1 0 0 1 1 1 1 0 0 1 1","solution":"def increment_grid(R, C, operations): grid = [[0 for _ in range(C)] for _ in range(R)] for op in operations: x1, y1, x2, y2 = op for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1 return grid # Function to format the output for the grid def format_grid(grid): return \'n\'.join(\' \'.join(map(str, row)) for row in grid)"},{"question":"You are tasked with keeping track of the shopping list for a small household. The household members can add items to the list separately. In this problem, you will process the items added by each member and generate a final shopping list that includes all unique items. Input The first line of the input will contain two space-separated integers: the number of members M (1 ≤ M ≤ 10) and the total number of items N (1 ≤ N ≤ 50) added by all members combined. The following M lines of input contain a list of items added by each member. Each list is space-separated and contains between 1 and N words. A word consists of lowercase letters and has length between 1 and 20 inclusive. Output Output the final shopping list containing all unique items, each on a new line, sorted in lexicographical order. Examples Input 3 7 apple banana orange banana pear apple kiwi apple banana Output apple banana kiwi orange pear Input 2 5 bread milk butter milk milk Output bread butter milk","solution":"def generate_shopping_list(members, items_list): Returns a sorted list of unique items from a list of items provided by household members. :param members: Number of household members :param items_list: List of strings where each string is a space-separated list of items by a member :return: Sorted list of unique items items_set = set() for items in items_list: items_set.update(items.split()) return sorted(items_set) # Example use # members = 3 # items_list = [\\"apple banana orange\\", \\"banana pear apple\\", \\"kiwi apple banana\\"] # print(generate_shopping_list(members, items_list))"},{"question":"You are given a string s consisting of lowercase English letters and a positive integer k. In one move, you can replace any character in the string with any other lowercase English letter. Your task is to determine the minimum number of moves required to make the string s have at least k distinct characters. Input The first line of the input contains an integer k (1 ≤ k ≤ 26) — the required number of distinct characters. The second line contains a string s, consisting of lowercase English letters. The length of the string is between 1 and 100, inclusive. Output Print one integer, denoting the minimum number of moves required to make the string have at least k distinct characters. Examples Input 3 abc Output 0 Input 2 aaa Output 1 Input 4 aaabb Output 2 Input 1 wxyz Output 0 Note In the first sample, the string \\"abc\\" already has 3 distinct characters, so no moves are required. In the second sample, you need to change one of the \'a\' characters to any other character different from \'a\' to get at least 2 distinct characters. In the third sample, the string \\"aaabb\\" has 2 distinct characters (\'a\' and \'b\'). You need to change two characters to get at least 4 distinct characters, for example: \\"abcd\\".","solution":"def min_moves_to_k_distinct_chars(k, s): Calculate the minimum number of moves required to make the string have at least k distinct characters. Parameters: k (int): The required number of distinct characters. s (str): The given string. Returns: int: The minimum number of moves required. unique_chars = set(s) num_unique_chars = len(unique_chars) if num_unique_chars >= k: return 0 return k - num_unique_chars"},{"question":"Tanya, a software developer, is working on a centralized logging system that interprets and classifies log messages received from various services. Each log message contains a timestamp, a log level (INFO, WARNING, ERROR), and a message body. The log levels have the following priorities: - INFO: 1 - WARNING: 2 - ERROR: 3 The logging system needs to identify only the highest priority log message received within a fixed timeframe to trigger necessary actions. Your task is to help Tanya by writing a function that determines the highest priority log level from a list of log messages. Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of log messages. - The next n lines each contain a log message in the format \\"<timestamp> <log_level> <message_body>\\", where: - <timestamp> is a string in the format \\"HH:MM:SS\\". - <log_level> is one of INFO, WARNING, or ERROR. - <message_body> is a string that describes the event. Output - Print the highest priority log level encountered. If multiple messages have the same highest log level, print the earliest one by timestamp. Examples Input 3 12:00:00 INFO Initializing database 12:05:00 WARNING Disk space low 12:10:00 ERROR Connection lost Output ERROR Input 4 00:00:10 INFO Starting service 00:00:20 INFO Service running 00:00:30 WARNING High memory usage 00:00:40 WARNING High memory usage resolved Output WARNING","solution":"def get_highest_priority_log(n, logs): Determines the highest priority log level from a list of log messages. Args: n: int - the number of log messages. logs: list of str - the log messages. Returns: str - The highest priority log level encountered. priority_map = {\\"INFO\\": 1, \\"WARNING\\": 2, \\"ERROR\\": 3} highest_priority = \\"\\" earliest_timestamp = \\"24:00:00\\" # Placeholder for the earliest timestamp for log in logs: timestamp, level, message_body = log.split(\\" \\", 2) if (highest_priority == \\"\\" or priority_map[level] > priority_map[highest_priority] or (priority_map[level] == priority_map[highest_priority] and timestamp < earliest_timestamp)): highest_priority = level earliest_timestamp = timestamp return highest_priority"},{"question":"Peter is working on a new feature for a text editor that involves processing and summarizing large amounts of text. One of the tasks requires counting the occurrences of each unique word in a given text and outputting the most frequent word. If multiple words have the highest frequency, the word that appears first in the text should be returned. The text consists of lowercase alphabetic characters and spaces. Words are defined as contiguous sequences of alphabetic characters, separated by spaces. Write a function that takes as input a single string containing the text and returns the most frequent word. Input The input consists of a single line containing the text (1 ≤ length of text ≤ 10^6). Output Print the most frequent word in the text. Example Input ``` this is a test this is only a test ``` Output ``` this ``` Note In the example text, the word \\"this\\" appears twice, which is the highest frequency of any word in the text. Hence, \\"this\\" is the output. If there were another word with the same frequency but it appeared later in the text, \\"this\\" would still be returned because it appears first.","solution":"def most_frequent_word(text): words = text.split() word_frequency = {} for word in words: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 max_frequency = max(word_frequency.values()) for word in words: if word_frequency[word] == max_frequency: return word"},{"question":"You are given two strings, s and t, of the same length n. You are allowed to perform a set of operations to transform string s into string t. In one operation, you can choose any character from the string s and replace it with its immediate previous character (if it exists) or its immediate next character in the alphabet. For example, by performing one operation on the character \'b\', it can be converted to either \'a\' or \'c\'. Determine if it is possible to transform string s into string t by performing zero or more such operations. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains an integer q (1 ≤ q ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100) — the length of the strings s and t. The second line of each test case contains the string s (consisting of lowercase English letters). The third line of each test case contains the string t (consisting of lowercase English letters). Output For each test case, print \\"YES\\" if you can transform string s into string t. Otherwise, print \\"NO\\". Example Input 3 3 abc bbc 4 abcd bcda 5 aaaaa zzzzz Output YES NO NO Explanation In the first test case, you can transform \'a\' in s to \'b\' in t. The resulting string s will be \\"bbc\\", which equals t. In the second test case, you cannot transform string s into string t under the given constraints. In the third test case, you cannot transform all \'a\'s in s to \'z\'s in t as per the immediate replacement rules.","solution":"def can_transform_string(s, t): Determines if string s can be transformed into string t using the allowed operations. for i in range(len(s)): diff = abs(ord(s[i]) - ord(t[i])) if diff not in [0, 1]: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, s, t in test_cases: results.append(can_transform_string(s, t)) return results"},{"question":"An e-commerce website tracks the number of purchases made by users over consecutive days. Each day, the number of purchases each user makes is recorded. The website wants to identify trends in user activity to improve their service. For this purpose, it needs a program that determines the length of the longest increasing subsequence of purchase counts for each user over the given days. For example, if a user\'s purchase counts over some days are [2, 1, 3, 5, 2, 6], the longest increasing subsequence is [1, 3, 5, 6], which has a length of 4. Given the purchase counts for multiple users over a sequence of days, your task is to find the longest increasing subsequence for each user. Input: The first line contains an integer T (1 ≤ T ≤ 100), the number of users. For each user, the input starts with an integer N (1 ≤ N ≤ 1000), representing the number of days. The following N integers represent the number of purchases made by the user on each day. Output: For each user, output a single line with the length of the longest increasing subsequence of their purchase counts. Sample Input: 2 6 2 1 3 5 2 6 5 7 4 8 3 9 Sample Output: 4 3 Explanation: In the first case, the purchase counts are [2, 1, 3, 5, 2, 6]. The longest increasing subsequence is [1, 3, 5, 6], with a length of 4. In the second case, the purchase counts are [7, 4, 8, 3, 9]. The longest increasing subsequence is [4, 8, 9], with a length of 3.","solution":"def length_of_LIS(purchases): Finds the length of the longest increasing subsequence in the given list of purchases. if not purchases: return 0 # Initialize dp array, where dp[i] indicates the length of LIS ending at index i dp = [1] * len(purchases) for i in range(1, len(purchases)): for j in range(i): if purchases[i] > purchases[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence will be the maximum value in dp array return max(dp) def longest_increasing_subsequences(purchases_data): Given the purchases data for multiple users, returns the length of the longest increasing subsequence for each user. result = [] for purchases in purchases_data: result.append(length_of_LIS(purchases)) return result"},{"question":"You have been summoned to solve a problem related to tree traversal. Trees are important data structures in computer science, and traversing them efficiently is crucial for many algorithms. Consider a rooted tree with `n` nodes. Each node is uniquely numbered from `1` to `n`, with the root node always being `1`. Your task is to compute the size of the subtree for each node. The size of a subtree for a given node `x` is defined as the number of nodes in the subtree rooted at `x`, including `x` itself. # Input - The first line of input contains an integer `n` (1 ≤ n ≤ 100000), denoting the number of nodes in the tree. - The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an undirected edge between nodes `u` and `v`. # Output - Print `n` integers. The `i`-th integer should be the size of the subtree rooted at node `i`. # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 5 3 1 1 1 ``` # Explanation - For the node `1`, the subtree includes all nodes: {1, 2, 3, 4, 5}, so the size is `5`. - For the node `2`, the subtree includes nodes: {2, 4, 5}, so the size is `3`. - For the node `3`, the subtree includes only itself: {3}, so the size is `1`. - For the node `4`, the subtree includes only itself: {4}, so the size is `1`. - For the node `5`, the subtree includes only itself: {5}, so the size is `1`. # Constraints - Since the tree can be large, you should aim for an efficient algorithm with a time complexity of (O(n)) for computing the sizes of the subtrees. Use Depth First Search (DFS) or Breadth First Search (BFS) traversals as appropriate.","solution":"def subtree_sizes(n, edges): from collections import defaultdict, deque # Create an adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # To store the size of subtree rooted at each node size = [0] * (n + 1) def dfs(node, parent): # Initially the node size is 1 including itself subtree_size = 1 for neighbor in adj_list[node]: if neighbor != parent: subtree_size += dfs(neighbor, node) size[node] = subtree_size return subtree_size # Starting DFS from the root node, which is 1 dfs(1, -1) # Exclude the dummy 0-th index to match 1-based index requirement return size[1:]"},{"question":"Write a function that calculates the number of unique substrings in a given string. A substring is defined as a contiguous sequence of characters within a string. For example, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Your function should take a single string as input and return an integer representing the total number of unique substrings. Input: - A single string s (1 ≤ |s| ≤ 1000), where |s| represents the length of the string. The string will only contain lowercase English letters. Output: - An integer representing the number of unique substrings in the input string. Example: Input: ``` abc ``` Output: ``` 6 ``` Input: ``` aaa ``` Output: ``` 3 ``` Explanation: - For the first example, the unique substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". - For the second example, the unique substrings are \\"a\\", \\"aa\\", \\"aaa\\".","solution":"def count_unique_substrings(s): Returns the number of unique substrings in the input string s. unique_substrings = set() n = len(s) for i in range(n): for j in range(i+1, n+1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"# Problem Description Given a string containing a mix of alphabetical characters and special characters, your task is to count and display the most frequent alphabetical character (case-insensitive) in the string. If two or more characters have the same highest frequency, return the alphabetically first character. # Input Format A single line of input containing the string. # Output Format A single character representing the most frequent alphabetical character in the string. If two or more characters have the same highest frequency, return the alphabetically first character. # Constraints - The string length will be between 1 and 1000. - The string will contain only printable ASCII characters. # SAMPLE INPUT ``` Hello, World! ``` # SAMPLE OUTPUT ``` l ``` # Explanation In the input string \\"Hello, World!\\", the character \'l\' occurs most frequently (3 times), so the output is \'l\'.","solution":"from collections import Counter def most_frequent_alphabet_char(s): Returns the most frequent alphabetical character (case-insensitive) in the string. If two or more characters have the same highest frequency, returns the alphabetically first character. # Convert to lowercase and filter only alphabetical characters s = \'\'.join(filter(str.isalpha, s.lower())) # If the string becomes empty after filtering, return empty string (edge case) if not s: return \'\' # Count frequency of each character freq = Counter(s) # Find the maximum frequency max_freq = max(freq.values()) # Get all characters with maximum frequency and return the alphabetically first one most_frequent_chars = [char for char, count in freq.items() if count == max_freq] return min(most_frequent_chars)"},{"question":"In a secret agent mission, Agent X needs to decode an encrypted message. The message consists of a string of characters \'E\' and \'D\' which stands for Encrypt and Decrypt respectively. Starting with an initial numeric value of 0, Agent X performs sequential operations defined by the string. An \'E\' operation means increment the current value by 1 (encrypt), and a \'D\' operation means decrement the value by 1 (decrypt). However, the value should never go below 0 - if a \'D\' operation would cause the value to drop below 0, ignore that operation. Your task is to determine the final value after performing all operations in the given string. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string of characters \'E\' and \'D\'. Output For each test case, print the final numeric value after performing all operations. Constraints 1 ≤ T ≤ 10 1 ≤ length of each string ≤ 100000 Example Input: 3 EDEED EEE DDDD Output: 1 3 0 Explanation In the first case, the operations are performed as follows: Start with 0. E -> 1, D -> 0, E -> 1, E -> 2, D -> 1. Final value: 1. In the second case, all operations are encrypt. Final value: 3. In the third case, all decrypt operations are ignored as the value never goes below 0. Final value: 0.","solution":"def calculate_final_value(T, operations_list): results = [] for operations in operations_list: value = 0 for operation in operations: if operation == \'E\': value += 1 elif operation == \'D\' and value > 0: value -= 1 results.append(value) return results"},{"question":"Arun is a skilled blacksmith and he uses a unique anvil for crafting magical swords. The anvil is special because it has a mechanism that requires the use of specific sequences of hammer strikes to forge different types of swords. Each sequence is represented as a binary string composed of \'L\' (light strike) and \'H\' (heavy strike). The strength of a forged sword depends on the binary value of the sequence used. If the sequence starts with \'H\', it signifies a special sword, and Arun wants to determine the number of distinct special swords he can forge given the length of the sequence. Additionally, a special sword has another property: if the sequence contains more \'H\' than \'L\', it is considered a \\"balanced\\" sword. Otherwise, it is considered \\"unbalanced\\". Given a length n, you have to calculate the total number of distinct binary sequences of length n that start with \'H\' and contain more \'H\' than \'L\'. The result can be large, so return the answer modulo 10^9 + 7. [Input] The first line contains an integer t, denoting the number of test cases. Each test case consists of a single integer n, denoting the length of the sequence. [Output] For each test case, output a single line denoting the number of distinct balanced swords Arun can forge. [Constraints] 1 ≤ t ≤ 100 1 ≤ n ≤ 1000000 SAMPLE INPUT 2 3 4 SAMPLE OUTPUT 2 5 Explanation For n=3: - The possible binary sequences of length 3 starting with \'H\' are: \\"HLL\\", \\"HLH\\", \\"HHL\\", and \\"HHH\\". - Out of these, \\"HLH\\" and \\"HHH\\" have more \'H\' than \'L\', making them balanced swords. Therefore, there are 2 balanced swords. For n=4: - The possible sequences starting with \'H\' and having more \'H\' than \'L\' are: \\"HHLH\\", \\"HHHL\\", \\"HLHH\\", \\"HHHH\\", \\"HLHL\\". Therefore, there are 5 balanced swords. Ensure you accurately design your algorithm to efficiently handle large values of n since brute force may not work effectively due to the constraints.","solution":"def count_balanced_swords(n): MOD = 10**9 + 7 # We need to calculate number of sequences starting with \'H\' and \'H\' count > \'L\' count. # It translates to finding balanced parentheses like problem where \'(\' is \'H\' and \')\' is \'L\'. # Base case if n % 2 == 0: return 0 if n == 1: return 1 # Calculate catalan numbers modulo MOD catalan = [0] * (n//2 + 2) catalan[0] = 1 for i in range(1, n//2 + 2): catalan[i] = 0 for j in range(i): catalan[i] = (catalan[i] + catalan[j] * catalan[i - 1 - j]) % MOD return catalan[n//2 + 1] def solve(t, test_cases): results = [] for n in test_cases: results.append(count_balanced_swords(n)) return results"},{"question":"You are given a string s of length n, consisting only of characters \'a\', \'b\', and \'c\'. Your task is to find and output the length of the shortest substring of s that contains all the three characters \'a\', \'b\', and \'c\'. For the given string s, there may be multiple substrings that satisfy the condition. You need to find the one with the minimum length. Input - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - Each test case contains a single line with a string s (3 ≤ |s| ≤ 100), consisting only of characters \'a\', \'b\', and \'c\'. Output For each test case, output a single integer — the length of the shortest substring that contains at least one occurrence of each character \'a\', \'b\', and \'c\'. Example Input 2 abacbc abcabc Output 3 3 Explanation In the first test case, the substring \\"abc\\" (starting at index 1 and ending at index 3) is the shortest one that contains all the three characters \'a\', \'b\', and \'c\'. In the second test case, each of the substrings \\"abc\\" (starting at index 0, 1, 2, and 3) is the shortest one that contains all the three characters \'a\', \'b\', and \'c\'.","solution":"def shortest_substring_length_with_all_chars(s): Returns the length of the shortest substring that contains all characters \'a\', \'b\', and \'c\'. min_length = float(\'inf\') left = 0 char_count = {\'a\': 0, \'b\': 0, \'c\': 0} for right in range(len(s)): char_count[s[right]] += 1 while all(char_count[ch] > 0 for ch in \'abc\'): min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 left += 1 return min_length def find_shortest_substrings(t, test_cases): results = [] for s in test_cases: result = shortest_substring_length_with_all_chars(s) results.append(result) return results"},{"question":"The cookies factory produces unusual cookies. Each cookie has some number of chocolate chips on it. To attract customers, the factory wants to make sure that they can offer cookies with every possible positive number of chocolate chips while using the minimum number of different types of cookies possible. Given the available types of cookies in the factory, determine the minimum number of different types of cookies needed to ensure that the factory can produce cookies with every positive number of chocolate chips up to a given number `k`. Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) — where `n` is the number of different types of cookies available, and `k` is the maximum number of chocolate chips that need to be covered. The second line contains `n` integers, where the i-th integer represents the number of chocolate chips on the i-th type of cookie. Output Print a single integer — the minimum number of different types of cookies required to ensure that cookies with every positive number of chocolate chips up to `k` can be offered. Examples Input 3 7 1 3 4 Output 2 Input 5 10 6 4 3 7 2 Output 2 Note In the first example, by selecting cookies with `1` and `3` chocolate chips, the factory can make cookies with any number of chocolate chips from `1` to `7` by adding them together: - 1 (just the 1-chip cookie) - 2 (1-chip cookie + 1-chip cookie) - 3 (just the 3-chip cookie) - 4 (1-chip cookie + 3-chip cookie) - 5 (1-chip cookie + 1-chip cookie + 3-chip cookie) - 6 (1-chip cookie + 1-chip cookie + 1-chip cookie + 3-chip cookie) - 7 (1-chip cookie + 1-chip cookie + 1-chip cookie + 1-chip cookie + 3-chip cookie) Thus, only `2` types of cookies are needed.","solution":"from functools import lru_cache def min_cookies_needed(n, k, chips): @lru_cache(None) def dp(x): # base case if x == 0: return 0 res = float(\'inf\') for chip in chips: if x - chip >= 0: res = min(res, dp(x - chip) + 1) return res return dp(k)"},{"question":"Write a function `common_factors` that takes two integers a and b. The function should return the number of common divisors of a and b (including 1 and the numbers themselves). INPUT: The input contains two integers a and b, separated by a space. OUTPUT: Print the number of common divisors of a and b. CONSTRAINTS: 1 ≤ a, b ≤ 1000 SAMPLE INPUT 12 18 SAMPLE OUTPUT 4 Explanation Divisors of 12 are: 1, 2, 3, 4, 6, 12 Divisors of 18 are: 1, 2, 3, 6, 9, 18 Common divisors are 1, 2, 3, 6 Number of common divisors is 4","solution":"def common_factors(a, b): Returns the number of common divisors of a and b. def gcd(x, y): while y: x, y = y, x % y return x gcd_ab = gcd(a, b) count = 0 for i in range(1, gcd_ab + 1): if a % i == 0 and b % i == 0: count += 1 return count"},{"question":"You are given a sorted circular array `a` of size `n` and an integer `x`. Your task is to determine if the integer `x` exists in the array and return its index if it exists, or `-1` if it does not. A circular array is one where the end of the array wraps around to the beginning. Input The first line of input contains the integers `n` (1 ≤ n ≤ 10^5) and `x` (0 ≤ x ≤ 10^9). The second line contains `n` space-separated integers `a[i]` (0 ≤ a[i] ≤ 10^9), representing the elements of the array. Output Output the index of `x` if it exists in the array, or `-1` if it does not. If `x` exists multiple times, return the first occurrence. Examples Input 5 3 3 4 5 1 2 Output 0 Input 6 7 5 6 7 8 9 10 Output 2 Input 4 12 10 11 12 3 Output 2 Input 4 2 10 11 12 3 Output -1 Note In the first test case, the circular sorted array is initially [3, 4, 5] and then wraps from [1, 2]. The integer `3` is at index `0`. In the second test case, the array is [5, 6, 7, 8, 9, 10] with no wraparound. The integer `7` is at index `2`. In the third test case, the array is [10, 11, 12] initially and then wraps to [3]. The integer `12` is at index `2`. In the fourth test case, `2` does not exist in the array, so `-1` is returned.","solution":"def search_in_circular_array(n, x, a): Determines if the integer \'x\' exists in the sorted circular array \'a\'. Returns the index of \'x\' if it exists, or -1 if it does not. for i in range(n): if a[i] == x: return i return -1"},{"question":"You are given a connected undirected graph with n nodes and m edges. Each edge has a weight associated with it and your task is to find the minimum weight of the heaviest edge in any path between two specific nodes while ensuring that the path is the minimum possible weight path. Input The first line contains three integers n, m, and q (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of nodes, the number of edges and the number of queries. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) representing an edge connecting nodes u and v with weight w. The following q lines contain two integers s and t (1 ≤ s, t ≤ n) representing the pair of nodes for which you need to find the minimum weight of the heaviest edge on any of its minimum weight paths. Output For each query, print a single integer — the minimum weight of the heaviest edge in any path between nodes s and t. Examples Input 5 7 2 1 2 1 1 3 4 2 3 4 2 4 2 3 4 2 3 5 6 4 5 3 1 5 3 4 Output 4 2 Note In the first query, the minimum weight path between nodes 1 and 5 is 1-2-4-5 with weights [1, 2, 3], so the heaviest edge in this path has weight 3. In the second query, the minimum weight path between nodes 3 and 4 includes edges with weights [2], so the heaviest edge in this path has weight 2.","solution":"import heapq from collections import defaultdict, deque def minimum_heaviest_edge(n, m, edges, queries): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, end): min_weight = [float(\'inf\')] * (n + 1) heavy_edge = [float(\'inf\')] * (n + 1) min_weight[start] = 0 pq = [(0, 0, start)] while pq: curr_cost, curr_heavy, u = heapq.heappop(pq) if curr_cost > min_weight[u]: continue for v, w in graph[u]: new_cost = curr_cost + w new_heavy = max(curr_heavy, w) if new_cost < min_weight[v] or (new_cost == min_weight[v] and new_heavy < heavy_edge[v]): min_weight[v] = new_cost heavy_edge[v] = new_heavy heapq.heappush(pq, (new_cost, new_heavy, v)) return heavy_edge[end] results = [] for s, t in queries: results.append(dijkstra(s, t)) return results"},{"question":"Given a matrix of integers, find the submatrix with the maximum sum. A submatrix is a rectangular portion of the matrix defined by a contiguous range of rows and columns. The sum of a submatrix is the sum of all elements within it. **Input** - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), the number of rows and columns of the matrix respectively. - Each of the next `n` lines contains `m` integers. Each integer in the matrix is between -1000 and 1000. **Output** - Print a single integer, the maximum sum of any submatrix of the given matrix. **Examples** **Input** ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` **Output** ``` 29 ``` **Input** ``` 3 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 ``` **Output** ``` -1 ``` **Explanation of Example** In the first example, the submatrix with the maximum sum is: ``` 3 8 10 -4 -1 1 ``` which has the sum of 29. In the second example, since all elements are negative, the best we can do is to pick the single least negative number, -1.","solution":"def max_submatrix_sum(matrix): Returns the maximum sum of any submatrix of the given matrix. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): row_sum = [0] * n for right in range(left, m): for i in range(n): row_sum[i] += matrix[i][right] current_sum = kadane(row_sum) if current_sum > max_sum: max_sum = current_sum return max_sum def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Dr. Smith is testing a new robot on a grid. The grid is an N x M matrix where each cell can either be empty or contain an obstacle. The robot starts at the top-left corner of the grid and its goal is to reach the bottom-right corner. The robot can only move right or down at any step. However, the robot should avoid cells with obstacles as it cannot pass through them. Your task is to write a function that calculates the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If there\'s no valid path, return 0. You can assume the following: * The dimensions of the grid, N and M, are such that (1 ≤ N, M ≤ 100). * The robot starts at the cell (1, 1) and needs to move to the cell (N, M). * The initial cell (1, 1) and the final cell (N, M) are guaranteed to be empty. Input The input consists of an integer sequence. The first line contains two integers N and M. Each of the next N lines contains M integers which are either 0 or 1. Here, 0 represents an empty cell and 1 represents an obstacle. Output Output the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Example Input 3 3 0 0 0 0 1 0 0 0 0 Output 2","solution":"def unique_paths_with_obstacles(grid): Calculate the number of distinct paths from the top-left to the bottom-right of the grid, avoiding obstacles. :param grid: List of lists of integers where 0 represents empty cells and 1 represents obstacles. :return: Integer, number of distinct paths. n = len(grid) m = len(grid[0]) # If the starting or ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Initialize the DP table dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # Process the rest of the grid for i in range(1, n): for j in range(1, m): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[n-1][m-1]"},{"question":"You are given an array of integers `nums`. Your task is to create a new array `result` where each element at index `i` contains the product of all the elements in `nums` except `nums[i]`. You cannot use division and must complete it in O(n) time. Input: - The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. - For each test case: - The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` space-separated integers `nums[i]` (1 ≤ nums[i] ≤ 10^9). Output: - For each test case, print a single line containing `n` space-separated integers which represent the `result` array. Example: Input: ``` 2 3 1 2 3 4 2 3 4 5 ``` Output: ``` 6 3 2 60 40 30 24 ``` Explanation: For the first test case, - The product array `[6, 3, 2]` is derived as follows: - The product of all the elements of `nums` except `1` is `2 * 3 = 6` - The product of all the elements of `nums` except `2` is `1 * 3 = 3` - The product of all the elements of `nums` except `3` is `1 * 2 = 2` For the second test case, - The product array `[60, 40, 30, 24]` is derived as follows: - The product of all the elements of `nums` except `2` is `3 * 4 * 5 = 60` - The product of all the elements of `nums` except `3` is `2 * 4 * 5 = 40` - The product of all the elements of `nums` except `4` is `2 * 3 * 5 = 30` - The product of all the elements of `nums` except `5` is `2 * 3 * 4 = 24` Note: - Ensure the solution can handle large inputs efficiently within the provided constraints. - The solution should be optimally designed, leveraging techniques such as prefix and suffix multiplication arrays to maintain the O(n) requirement.","solution":"def product_except_self(nums): Returns a list where each element at index i is the product of all the elements in the input list except nums[i]. n = len(nums) result = [1] * n # Calculate prefix multiplication prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] # Calculate suffix multiplication and multiply with prefix results suffix = 1 for i in range(n - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result def solve(test_cases): results = [] for nums in test_cases: results.append(product_except_self(nums)) return results def parse_input(input_data): data = input_data.strip().split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) idx += 1 nums = list(map(int, data[idx:idx + n])) idx += n test_cases.append(nums) return test_cases def format_output(results): return \\"n\\".join(\\" \\".join(map(str, result)) for result in results)"},{"question":"Alyssa is fond of classic arcade games, and she recently came across a digital version of a popular game involving a snake. The snake moves in a grid, starting at position (0, 0), moving right initially. She can control the snake to move up (\'U\'), down (\'D\'), left (\'L\'), or right (\'R\'). The game provides commands as a string composed of these directional characters. Alyssa wants to know the length of the snake at the end of the game, where each command extends the snake by one unit in the specified direction without retracting its tail. Help Alyssa determine the length of the snake for any given sequence of movements she might input. Input - A single line containing a string of commands. - Each command is one of \'U\', \'D\', \'L\', or \'R\'. - The string length will be at most 100,000 characters. Output - Print a single integer, the length of the snake at the end of the game. Examples Input UDLR Output 4 Input UUU Output 3","solution":"def snake_length(commands): Returns the length of the snake based on given commands. Each command extends the snake by one unit. # Simply the length of the command string since each move extends the snake return len(commands)"},{"question":"In a land far away, there are several villages connected by roads. Each village either has an oil well, a water well, or is barren. Oil wells are indicated by the character \'O\', water wells by \'W\', and barren villages by \'.\'. The roads between the villages are such that each village is connected to exactly two other villages (i.e., they form a linear chain). Each well can supply the resources to the surrounding villages but they have a very limited range. An oil well provides up to k units of oil per season and a water well provides up to k units of water per season to any village within its range of r units. A village can be within range of multiple wells. If so, it will receive resources from all wells within range. The government has decided to perform maintenance only on the wells that actually provide resources to any villages. They need to know how many wells are useful based on supplies they provide. Given the structure of the village and road arrangements, your task is to determine how many oil wells and water wells are useful. Input: - The first line contains three integers n, k, and r (1 ≤ n ≤ 200, 1 ≤ k ≤ 10⁶, 1 ≤ r ≤ 100) – the number of villages, the units of resources a well provides, and the range of wells. - The second line contains a string of length n, where each character indicates the type of well or barren land in the corresponding village. Output: - Print two integers, the number of useful oil wells and the number of useful water wells. Example: Input: 5 1000 1 .O.W. Output: 1 1 Input: 10 500 2 ..O....W.. Output: 1 1 Note: In the first example, the oil well in the second village provides oil to the third village, and the water well in the fourth village provides water to the fifth village. Therefore, both wells are useful. In the second example, the oil well in the third village provides oil to the first, second, and fourth villages within the range of 2. The water well in the eighth village provides water to the sixth, seventh, and ninth villages within the range of 2. Therefore, both wells are useful.","solution":"def count_useful_wells(n, k, r, village_structure): Returns the number of useful oil wells and water wells in the village. Parameters: n (int): Number of villages k (int): Units of resources a well provides (unused in this solution) r (int): Range of the wells village_structure (str): A string representing the village structure with wells and barren lands Returns: tuple: Number of useful oil wells and useful water wells oil_wells = set() water_wells = set() villages = list(village_structure) for i in range(n): if villages[i] == \'O\': for j in range(max(0, i-r), min(n, i+r+1)): if villages[j] == \'.\' or villages[j] == \'W\': oil_wells.add(i) break elif villages[i] == \'W\': for j in range(max(0, i-r), min(n, i+r+1)): if villages[j] == \'.\' or villages[j] == \'O\': water_wells.add(i) break return (len(oil_wells), len(water_wells))"},{"question":"You are given a permutation of the numbers 1 to n (where n is an even number). A permutation is an ordered arrangement of elements. Your task is to write a function that swaps pairs of elements in the permutation such that after the function executes, the element at position i should be swapped with the element at position i+1 for all even i. Input - n: An even integer (2 ≤ n ≤ 1000). - permutation: A permutation of the numbers 1 to n. Output Output the resulting permutation after required swaps. Examples Input 6 1 2 3 4 5 6 Output 2 1 4 3 6 5 Input 4 4 3 2 1 Output 3 4 1 2 Input 8 8 7 6 5 4 3 2 1 Output 7 8 5 6 3 4 1 2","solution":"def swap_pairs(n, permutation): Swaps pairs of elements in the permutation such that element at position i is swapped with the element at position i+1 for all even i. :param n: An even integer indicating the length of permutation. :param permutation: A list of integers representing the permutation. :return: A list of integers representing the permutation after required swaps. for i in range(0, n, 2): permutation[i], permutation[i + 1] = permutation[i + 1], permutation[i] return permutation"},{"question":"Alice loves playing with sequences of integers. She especially enjoys finding interesting properties within these sequences. One day she came up with a new property that she calls \\"peaked sequence\\". A sequence of integers is called a \\"peaked sequence\\" if it contains at least three integers, and there exists a position ( k ) (1-based index) in the sequence such that: 1. The first ( k-1 ) elements are in strictly increasing order. 2. The last ( n-k ) elements are in strictly decreasing order. 3. The ( k )-th element is greater than the ( k-1 )-th element and the ( k+1 )-th element (if they exist). Given a list of integers, write a program to determine whether it is a \\"peaked sequence\\" or not. Input The first line contains an integer ( N ) (3 leq N leq 100,000), the number of elements in the sequence. The second line contains ( N ) space-separated integers ( a_1, a_2, ldots, a_N ) (-10^9 leq a_i leq 10^9), the elements of the sequence. Output Print a line containing \\"Yes\\" if the sequence is a \\"peaked sequence\\". Otherwise, print \\"No\\". Examples Input 5 1 3 5 4 2 Output Yes Input 4 1 2 3 4 Output No","solution":"def is_peaked_sequence(n, sequence): if n < 3: return \\"No\\" peak_found = False peak_position = 0 for i in range(1, n - 1): if sequence[i] > sequence[i - 1] and sequence[i] > sequence[i + 1]: peak_found = True peak_position = i break if not peak_found: return \\"No\\" for i in range(1, peak_position): if sequence[i] <= sequence[i - 1]: return \\"No\\" for i in range(peak_position + 1, n): if sequence[i] >= sequence[i - 1]: return \\"No\\" return \\"Yes\\""},{"question":"In a zoo, there are N cages arranged in a straight line, each containing a unique species of animals. The zookeeper needs to give a variety of fruits to the animals in such a way that each type of fruit is given to at least one animal and each animal gets at least one type of fruit. There are F different types of fruits available. However, a certain pattern needs to be followed: the total number of fruits given to animals in any subset of contiguous cages must be unique. In other words, if we take any contiguous block of cages, the sum of fruits given to the animals in this block should be different from the sum for any other contiguous block. Given N and F, you have to find the total number of different ways to distribute the fruits to the animals that meet the specified conditions. Input: The first line comprises T denoting the number of test cases. The next T lines are such that each line consists of 2 space-separated integers N and F. Output: Print a single integer, the answer to each test case on a new line. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 20 1 ≤ F ≤ 10 SAMPLE INPUT 2 3 3 4 2 SAMPLE OUTPUT 27 16","solution":"def count_ways(N, F): This function calculates the total number of different ways to distribute F fruits to N cages such that the total number of fruits in any subset of contiguous cages is unique. Parameters: N (int): Number of cages F (int): Number of different types of fruits Returns: int: The number of ways to distribute the fruits return F ** N def process_test_cases(test_cases): This function processes multiple test cases and returns the results for each. Parameters: test_cases (list of tuples): Each tuple contains (N, F) Returns: list of int: Results for each test case results = [] for N, F in test_cases: results.append(count_ways(N, F)) return results"},{"question":"A group of scientists are trying to develop a new communication method for their research base on Mars. They have decided to use a sequence of signals made up of the characters \'A\' and \'B\'. However, they want to ensure that the signal has an equal number of \'A\' and \'B\' characters to maximize efficiency and reduce ambiguity. Given a string of characters \'A\' and \'B\', your task is to find the longest contiguous subsequence that contains an equal number of \'A\' and \'B\'. Input Format: The first line contains an integer t - denoting the number of test cases. The next t lines each contain a string formed by the characters \'A\' and \'B\'. Output Format: For each test case, print the length of the longest contiguous subsequence that contains an equal number of \'A\' and \'B\' characters. Constraints: 1 ≤ t ≤ 100 1 ≤ Length of the string ≤ 100 SAMPLE INPUT 2 AABBAABB ABABABAB SAMPLE OUTPUT 8 8","solution":"def longest_equal_subsequence(s): Returns the length of the longest contiguous subsequence that contains an equal number of \'A\' and \'B\'. n = len(s) max_length = 0 balance = 0 balance_indices = {0: -1} for i in range(n): if s[i] == \'A\': balance += 1 else: balance -= 1 if balance in balance_indices: max_length = max(max_length, i - balance_indices[balance]) else: balance_indices[balance] = i return max_length def solve(t, test_cases): Solves the problem for multiple test cases. results = [] for s in test_cases: results.append(longest_equal_subsequence(s)) return results"},{"question":"Alex is a software developer who needs to write a program to manage people\'s meetings. He wants to create a function that handles adding people to the meeting schedule while making sure that he does not create any time conflicts. A meeting is represented as a tuple of two integers, (start_time, end_time). For instance, a meeting from 1 PM to 3 PM is represented as (13, 15). Alex has an existing schedule of meetings, and he wants to add a new meeting to it. Write a function called `can_schedule(meetings, new_meeting)` which takes a list of existing meetings and the new meeting to be added. The function should return `True` if the meeting can be added without any time conflicts, and `False` otherwise. Constraints: - Meetings are all during a single day, so start and end times are integers between 0 and 23 inclusive. - A meeting is valid if its start time is less than its end time. - The list of existing meetings and the new meeting to be added are all valid (i.e., start time < end time). Function Signature: `def can_schedule(meetings: List[Tuple[int, int]], new_meeting: Tuple[int, int]) -> bool` Examples: Input: meetings = [(9, 10), (12, 14), (16, 18)] new_meeting = (10, 12) Output: True Input: meetings = [(9, 10), (12, 14), (16, 18)] new_meeting = (11, 13) Output: False Input: meetings = [(13, 15), (10, 12)] new_meeting = (12, 13) Output: True Input: meetings = [(8, 9), (9, 10), (10, 11), (11, 12)] new_meeting = (8, 9) Output: False","solution":"from typing import List, Tuple def can_schedule(meetings: List[Tuple[int, int]], new_meeting: Tuple[int, int]) -> bool: new_start, new_end = new_meeting for start, end in meetings: if not (new_end <= start or new_start >= end): return False return True"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to reorder the string and remove exactly one character. The goal is to determine if it\'s possible to reorder the string (after the removal) such that no two adjacent characters are the same. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains one string of length n (1 ≤ n ≤ 1000) consisting of lowercase English letters. Output For each test case, print \\"YES\\" if it\'s possible to reorder the string after removing one character such that no two adjacent characters are the same. Otherwise, print \\"NO\\". Examples Input 2 aaabb abcdef Output YES YES","solution":"def can_reorder_after_removal(t, strings): from collections import Counter def can_reorder(s): char_count = Counter(s) max_count = max(char_count.values()) return 2 * max_count - 1 <= len(s) results = [] for s in strings: n = len(s) if n == 1: results.append(\\"NO\\") else: possible = any(can_reorder(s[:i] + s[i+1:]) for i in range(n)) results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"You are given a list of historical weather data for a city. The data consists of daily records, each containing the day, the high temperature, and the low temperature. Your task is to determine the longest period of contiguous days such that each day\'s high temperature is strictly higher than the previous day\'s high temperature, and each day\'s low temperature is strictly higher than the previous day\'s low temperature. The period should be at least one day, and the function should return the length of this longest period. Input The input is given in the following format. > N > day1 high1 low1 > day2 high2 low2 > ... > dayN highN lowN N in the first line is the number of days. The i-th line (1 ≤ i ≤ N) of the next N lines represents the historical weather data for the i-th day, containing the day (a string), the high temperature (an integer), and the low temperature (an integer). Constraints Each variable being input satisfies the following constraints. * 1 ≤ N ≤ 10000 * −100 ≤ highi, lowi ≤ 100 * The day is a non-empty string consisting only of alphanumeric characters. Output Print the length of the longest period of contiguous days such that each day\'s high temperature and low temperature are strictly higher than the previous day\'s high and low temperatures respectively. If no such period exists, return 1, since the period should be at least one day. Examples Input 5 Monday 30 15 Tuesday 32 16 Wednesday 35 20 Thursday 33 19 Friday 36 21 Output 3 Input 3 Day1 25 10 Day2 30 20 Day3 35 15 Output 2","solution":"def longest_increasing_period(weather_data): Determine the length of the longest period of contiguous days such that each day\'s high temperature is strictly higher than the previous day\'s high temperature, and each day\'s low temperature is strictly higher than the previous day\'s low temperature. N = int(weather_data[0].strip()) if N == 0: return 0 highs = [] lows = [] for i in range(1, N+1): parts = weather_data[i].strip().split() day, high, low = parts[0], int(parts[1]), int(parts[2]) highs.append(high) lows.append(low) longest_length = 1 current_length = 1 for i in range(1, N): if highs[i] > highs[i-1] and lows[i] > lows[i-1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"Alex is a software engineer who loves working on data structures. His favorite data structure is the binary tree. Recently, Alex has encountered a problem with finding the path sums in a binary tree, and he needs your help to solve it. Given a binary tree, where each node contains an integer value, write a function to find all root-to-leaf paths where each path\'s sum equals a given number. A root-to-leaf path is defined as a sequence of nodes from the root node to a leaf node, where each node in the sequence has exactly one child included in the path. Your task is to implement the function `find_paths_with_sum(root, target_sum)` that returns a list of lists of integers. Each list represents a root-to-leaf path that sums up to the given target sum. If there are no such paths, return an empty list. # Function Signature ```python def find_paths_with_sum(root: TreeNode, target_sum: int) -> List[List[int]]: ``` # Input - `root`: A `TreeNode` object representing the root of the binary tree. The definition of `TreeNode` is provided below. - `target_sum`: An integer representing the target sum for the path. # Output - A list of lists of integers, where each list represents a root-to-leaf path that sums up to the given target sum. # Example Example 1 ```python # Binary tree structure: # 5 # / # 4 8 # / / # 11 13 4 # / # 7 2 1 root = TreeNode(5) root.left = TreeNode(4) root.right = TreeNode(8) root.left.left = TreeNode(11) root.left.left.left = TreeNode(7) root.left.left.right = TreeNode(2) root.right.left = TreeNode(13) root.right.right = TreeNode(4) root.right.right.right = TreeNode(1) target_sum = 22 # Output: [[5, 4, 11, 2]] ``` Example 2 ```python # Binary tree structure: # 1 # / # 2 3 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) target_sum = 5 # Output: [] ``` # Note In the first example, there is one root-to-leaf path which sums to 22: 5 -> 4 -> 11 -> 2. In the second example, there are no root-to-leaf paths that sum to 5. # Definition of TreeNode ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Constraints - The number of nodes in the tree is in the range `[0, 5000]`. - `-1000 <= Node.val <= 1000` - `-1000 <= target_sum <= 1000`","solution":"from typing import List, Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_paths_with_sum(root: Optional[TreeNode], target_sum: int) -> List[List[int]]: result = [] def dfs(node, current_path, current_sum): if not node: return # Add the current node to the path current_path.append(node.val) current_sum += node.val # Check if it\'s a leaf node and the path sum equals the target sum if not node.left and not node.right and current_sum == target_sum: result.append(list(current_path)) else: # Continue the search on left and right subtree dfs(node.left, current_path, current_sum) dfs(node.right, current_path, current_sum) # Backtrack by removing the current node from the path current_path.pop() dfs(root, [], 0) return result"},{"question":"You are given an array of integers. Your task is to determine if it is possible to split the array into two non-empty parts such that the sum of the elements in both parts is equal. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the size of the array. The next line contains N integers - the elements of the array. Output For each test case, output a single line containing \\"YES\\" if it\'s possible to partition the array into two parts with equal sum, otherwise \\"NO\\". Constraints 1 ≤ T ≤ 50 2 ≤ N ≤ 1000 -10^4 ≤ Array elements ≤ 10^4 Example Input: 3 5 10 -5 2 5 -2 4 1 1 1 1 3 2 1 2 Output: YES YES NO","solution":"def can_partition_equal_sum(arr): total_sum = sum(arr) # If the total sum is odd, it can\'t be divided into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 current_sum = 0 for num in arr: current_sum += num if current_sum == target: return \\"YES\\" return \\"NO\\" def equal_sum_partitions(test_cases): results = [] for case in test_cases: results.append(can_partition_equal_sum(case)) return results # Function to parse input and execute the equal_sum_partitions def split_array(inputs): current_index = 0 T = int(inputs[current_index]) current_index += 1 test_cases = [] for _ in range(T): N = int(inputs[current_index]) current_index += 1 arr = list(map(int, inputs[current_index].split())) current_index += 1 test_cases.append(arr) results = equal_sum_partitions(test_cases) return results"},{"question":"You are given a string S consisting of lowercase Latin letters. You have to answer Q queries. Each query consists of two integers L and R. For each query, you have to find the lexicographically smallest character occurring in the substring S[L:R] (both inclusive). Input The first line consists of a string S (|S| ≤ 10^5). The next line consists of a single integer Q (1 ≤ Q ≤ 10^5). Each of the next Q lines consists of two space-separated integers L and R (1 ≤ L ≤ R ≤ |S|). Output Print the answer to each query on a new line. Constraints 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ |S| NOTE: We are using 1-based indexing for string S. SAMPLE INPUT abcdefxyz 3 1 5 2 7 1 9 SAMPLE OUTPUT a b a Explanation For query 1: The substring S[1:5] is \\"abcde\\" and the smallest character is \'a\'. For query 2: The substring S[2:7] is \\"bcdefx\\" and the smallest character is \'b\'. For query 3: The substring S[1:9] is \\"abcdefxyz\\" and the smallest character is \'a\'.","solution":"def smallest_char_in_substrings(S, queries): For each query, returns the lexicographically smallest character in the substring S[L:R] inclusive. results = [] for L, R in queries: # -1 for converting query from 1-based indexing to 0-based indexing for Python string slicing substring = S[L-1:R] smallest_char = min(substring) results.append(smallest_char) return results"},{"question":"There are n tourists visiting a popular scenic spot. Each tourist wants to take a photo at different locations. Due to congestion, only k tourists can take a photo simultaneously at different locations. The tourists queue up and can take their photos in batches. You are tasked to determine the minimum number of batches required so that each tourist gets to take their photo. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 109) — the i-th number in the list is the number of photos the i-th tourist wants to take. Output In a single line print a single integer — the minimum number of batches required so that each tourist gets to take all the photos they want. Examples Input 5 2 3 2 1 4 2 Output 4 Input 6 3 1 2 3 4 5 6 Output 2 Note The tourists can be grouped into batches where each batch allows up to k tourists to take their photos simultaneously. Determine the number of such minimum batches required.","solution":"def minimum_batches(n, k, photos): Calculate the minimum number of batches required so that each tourist gets to take all the photos they want. Parameters: - n: int : Number of tourists - k: int : Number of tourists that can take photos simultaneously - photos: list of int : Number of photos each tourist wants to take Returns: - int : Minimum number of batches required # Each batch can have at most k tourists # The minimum number of batches is the ceiling of n / k return (n + k - 1) // k # Example usage print(minimum_batches(5, 2, [3, 2, 1, 4, 2])) # Output: 3 print(minimum_batches(6, 3, [1, 2, 3, 4, 5, 6])) # Output: 2"},{"question":"A subsequence is derived from another sequence by deleting some or none of its elements, without changing the order of the remaining elements. Given a string `s` and a positive integer `n`, count the number of distinct subsequences of `s` that are exactly `n` characters long. Write a program to determine the number of such subsequences. **Input:** - The input consists of multiple datasets, each containing a string `s` and an integer `n`, separated by a space. - The input is terminated by a line containing `0 0`. - You may assume that `1 ≤ n ≤ len(s) ≤ 50`. **Output:** - For each dataset, output a single line with one integer indicating the number of distinct subsequences of length `n` in `s`. **Example:** **Input:** ``` abc 2 abc 3 aaa 2 abcdefghij 5 0 0 ``` **Output:** ``` 3 1 1 252 ``` **Explanation:** 1. For `s = \\"abc\\"` and `n = 2`, the subsequences are {\\"ab\\", \\"ac\\", \\"bc\\"}. 2. For `s = \\"abc\\"` and `n = 3`, the subsequence is {\\"abc\\"}. 3. For `s = \\"aaa\\"` and `n = 2`, the subsequence is {\\"aa\\"} despite multiple \'a\'s. 4. For `s = \\"abcdefghij\\"` and `n = 5`, you can form many different combinations, leading to 252 distinct subsequences.","solution":"from itertools import combinations def count_distinct_subsequences(s, n): Returns the number of distinct subsequences of length n in string s. subsequences = set(combinations(s, n)) return len(subsequences) def process_input(input_data): Process the input data and output the number of distinct subsequences for each dataset. results = [] for line in input_data: if line == \\"0 0\\": break s, n = line.split() n = int(n) results.append(count_distinct_subsequences(s, n)) return results"},{"question":"You are given a sequence S of length N consisting of uppercase English letters. Your task is to find the length of the longest subsequence where each letter appears at least M times. Constraints * 1 leq N leq 10^5 * 1 leq M leq N * Each character of S is an uppercase English letter. Input Input is given from Standard Input in the following format: N M S Output Print the length of the longest subsequence where each letter appears at least M times. If no such subsequence exists, print 0. Examples Input 7 2 AABACCA Output 6 Input 5 1 ABCDE Output 5 Input 6 3 AAAAAA Output 6","solution":"def longest_subsequence_length(N, M, S): Finds the length of the longest subsequence where each letter appears at least M times. Parameters: N (int): Length of the sequence S. M (int): Minimum required frequency of each letter. S (str): The sequence of uppercase English letters. Returns: int: The length of the longest valid subsequence, or 0 if no such subsequence exists. from collections import Counter # Counting the frequency of each character in S freq = Counter(S) # Total length of the longest valid subsequence result = 0 # Check each character\'s frequency for count in freq.values(): if count >= M: result += count return result # Example usage N = 7 M = 2 S = \\"AABACCA\\" print(longest_subsequence_length(N, M, S)) # Output: 6"},{"question":"You are given a string ( s ) consisting of lowercase English letters only. You are also given a value ( k ) which represents the maximum number of character replacements. Your task is to determine the length of the longest substring containing the same letter you can get after performing at most ( k ) character replacements. A character replacement involves changing any character in the string ( s ) to any other lowercase English letter. # Constraints * ( 1 leq s.length leq 10^5 ) * ( 1 leq k leq s.length ) # Input Input is given from Standard Input in the following format: ``` s k ``` # Output Print a single integer representing the length of the longest substring containing the same letter after at most ( k ) replacements. # Examples Input ``` ABAB 2 ``` Output ``` 4 ``` Input ``` AABABBA 1 ``` Output ``` 4 ``` Input ``` ABCDE 2 ``` Output ``` 3 ```","solution":"def longest_substring_with_replacements(s, k): Returns the length of the longest substring containing the same letter after performing at most k character replacements. max_length = 0 max_count = 0 counts = {} left = 0 for right in range(len(s)): counts[s[right]] = counts.get(s[right], 0) + 1 max_count = max(max_count, counts[s[right]]) if right - left + 1 - max_count > k: counts[s[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Anna is working on a network of computers that communicate with each other through direct connections. She wants to ensure that the network is working efficiently by finding the maximum number of computers that can communicate with each other directly or indirectly via other computers. Each direct connection between two computers can carry information both ways. Input The input consists of multiple test cases. The first line of the input contains an integer T (1 ≤ T ≤ 10), the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 104), the number of computers, and an integer m (0 ≤ m ≤ 5·104), the number of direct connections. The next m lines contain two space-separated integers u and v (1 ≤ u, v ≤ n) indicating there is a direct connection between computers u and v. Output For each test case, output a single integer — the maximum number of computers that can communicate with each other directly or indirectly. Examples Input 2 6 5 1 2 1 3 4 5 5 6 4 6 4 2 1 2 3 4 Output 4 2 Note In the first sample case, the largest subset of computers that can communicate either directly or indirectly is {4, 5, 6}, which contains 3 computers. Similarly, {1, 2, 3} also forms another subset with 3 computers. Hence the answer is 4. In the second sample case, the only direct connections are between {1, 2} and between {3, 4}, hence the answer is 2.","solution":"def find_max_connected_computers(T, test_cases): def dfs(node, adj_list, visited): stack = [node] component_size = 0 while stack: curr = stack.pop() if curr not in visited: visited.add(curr) component_size += 1 stack.extend(adj_list[curr]) return component_size results = [] for i in range(T): n, m, edges = test_cases[i] adj_list = {i: [] for i in range(1, n+1)} for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = set() max_connected = 0 for node in range(1, n+1): if node not in visited: component_size = dfs(node, adj_list, visited) if component_size > max_connected: max_connected = component_size results.append(max_connected) return results"},{"question":"You are given a list of strings. Your task is to group the anagrams together and return the result as a list of lists. Input The input consists of one integer n (1 ≤ n ≤ 100), representing the number of strings, followed by n lines containing one string each. Each string is made up of lowercase English letters and its length will not exceed 100. Output Output a list of lists, where each sublist contains strings that are anagrams of each other. The sublists should be sorted in ascending order and each sublist should also be sorted lexicographically. The output lists should be printed one per line. Examples Input 6 eat tea tan ate nat bat Output [ate, eat, tea] [bat] [nat, tan] Input 5 listen silent enlist google gogole Output [enlist, listen, silent] [gogole, google]","solution":"from collections import defaultdict def group_anagrams(n, strings): Groups anagrams together from the input list of strings. Parameters: n (int): Number of strings strings (list): List of strings Returns: list: A list of lists containing grouped anagrams anagrams = defaultdict(list) for string in strings: sorted_str = \'\'.join(sorted(string)) anagrams[sorted_str].append(string) result = [sorted(group) for group in anagrams.values()] result.sort() return result"},{"question":"The kingdom of Boria has a peculiar way of organizing their social gatherings. They arrange tables in a long, straight line, and each table has exactly one integer representing the number of seats available at that table. However, there is a rule: no two adjacent tables can have the same number of seats. Given an initial arrangement of seat numbers for the tables, you are required to determine the minimum number of seat changes needed so that no two adjacent tables have the same number of seats. A seat change means changing the number of seats at a table to any other positive integer. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of tables. The second line contains n integers a1, a2, ...., an (1 ≤ ai ≤ 1000), representing the initial arrangement of seat numbers at the tables. The numbers are separated by single spaces. Output Print a single integer — the minimum number of seat changes needed. Examples Input 5 1 2 2 3 3 Output 2 Input 4 1 1 1 1 Output 2 Input 3 5 5 5 Output 1","solution":"def min_seat_changes(n, seats): changes = 0 for i in range(1, n): if seats[i] == seats[i - 1]: changes += 1 # Change the current seat number to an arbitrary different number seats[i] = seats[i - 1] + 1 if seats[i - 1] < 1000 else seats[i - 1] - 1 return changes"},{"question":"In the kingdom of BinaryLand, there is a binary string that is considered special if and only if it can be transformed into another valid special string by repeatedly applying the following operations: 1. Swap any two consecutive characters. 2. Reverse the string. A valid special string is defined as a binary string that contains an equal number of \'0\'s and \'1\'s. Given a binary string s, your task is to check if it can be rearranged into a valid special string. Input: The first line contains an integer t (1 ≤ t ≤ 10^4), the number of test cases. Each of the following t lines contains a binary string s (2 ≤ |s| ≤ 10^6). Output: For each test case, print \\"YES\\" if the string can be rearranged into a valid special string and \\"NO\\" otherwise. Examples: Input: 3 1100 1010 1110 Output: YES YES NO Explanation: 1. The string \\"1100\\" can be rearranged to \\"1010\\", which has an equal number of \'0\'s and \'1\'s. 2. The string \\"1010\\" is already a valid special string. 3. The string \\"1110\\" cannot be rearranged to any valid special string since it does not have an equal number of \'0\'s and \'1\'s at any point.","solution":"def can_be_rearranged_to_special_string(s): Checks if the binary string s can be rearranged into a valid special string. A valid special string must contain an equal number of \'0\'s and \'1\'s. return s.count(\'0\') == s.count(\'1\') def process_test_cases(t, test_cases): Processes test cases and returns the results for each case. results = [] for s in test_cases: if can_be_rearranged_to_special_string(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A string with brackets is well balanced if all brackets match the correct opening and closing sequence. Given a string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', your task is to determine whether the string is well balanced. A string is considered well balanced if: 1. It is an empty string. 2. It can be written as AB (A concatenated with B), where A and B are well balanced strings. 3. It can be written as (A), {A}, or [A] where A is a well balanced string. Write a function that checks if the input string is well balanced. Input The input consists of a single string s (1 ≤ |s| ≤ 10^4), consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output Output \\"YES\\" if the string is well balanced, otherwise output \\"NO\\". Examples Input ([])() Output YES Input ([)] Output NO Input ({[]}) Output YES Note In the first example, the string is well balanced as all brackets match the correct opening and closing sequence. In the second example, the string is not well balanced as the brackets do not match the correct opening and closing sequence. In the third example, all brackets correctly match in the proper sequence, so it is well balanced.","solution":"def is_well_balanced(s): stack = [] opening_brackets = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} closing_brackets = {\')\', \'}\', \']\'} for char in s: if char in opening_brackets: stack.append(char) elif char in closing_brackets: if not stack: return \\"NO\\" top = stack.pop() if opening_brackets[top] != char: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"In a country called Arrayland, there is a popular tradition of creating special arrays known as harmonious arrays. An array is considered harmonious if the difference between its maximum element and minimum element is exactly 1. Given an array `arr` of `n` integers, your task is to determine the length of the longest harmonious subarray in `arr`. A subarray is a contiguous subsequence of the array that can have its own distinct properties. For example, consider an array: `[1, 3, 2, 2, 5, 2, 3, 7]`. The longest harmonious subarray has length 5, which corresponds to the subarray `[3, 2, 2, 2, 3]`. [Input] - The first line contains an integer `t`, the number of test cases. - The next `2*t` lines contain: - The first line of each test case contains an integer `n`, the size of the array. - The second line of each test case contains `n` space-separated integers representing the elements of the array. [Output] - For each test case output the length of the longest harmonious subarray. [Constraints] - 1 ≤ t ≤ 10^3 - 1 ≤ n ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 SAMPLE INPUT 2 8 1 3 2 2 5 2 3 7 6 1 2 3 4 3 2 SAMPLE OUTPUT 5 4 Explanation For case 1: The longest harmonious subarray is `[3, 2, 2, 2, 3]`, which is of length 5. For case 2: The longest harmonious subarray is `[2, 3, 3, 2]`, which is of length 4.","solution":"from collections import Counter def findLHS(nums): Finds the length of the longest harmonious subarray in nums. num_count = Counter(nums) max_length = 0 for num in num_count: if num + 1 in num_count: max_length = max(max_length, num_count[num] + num_count[num + 1]) return max_length def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(findLHS(arr)) return results"},{"question":"Emma loves organizing books in her library. She recently received a set of new books and has decided to arrange them in several bookshelves based on their heights. She follows these rules: 1. Each bookshelf can contain only books of the same height. 2. She tries to minimize the number of bookshelves used. You are given the heights of the books and you need to determine the minimum number of bookshelves Emma will need to organize all the books. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of books. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the heights of the books. Output Print the minimum number of bookshelves Emma needs to organize all the books. Examples Input 5 3 3 4 4 4 Output 2 Input 3 2 2 2 Output 1 Input 6 1 2 2 3 3 3 Output 3 Note In the first sample, the books have heights [3, 3, 4, 4, 4]. Emma can place the books of height 3 on one bookshelf and the books of height 4 on another bookshelf, thus requiring 2 bookshelves. In the second sample, all books have the same height, so Emma needs only 1 bookshelf. In the third sample, the books can be arranged as follows: - Shelf 1: height 1 - Shelf 2: height 2 (two books of this height) - Shelf 3: height 3 (three books of this height)","solution":"def min_bookshelves(books): Returns the minimum number of bookshelves needed to organize all the books. Parameters: books (list of int): The heights of the books. Returns: int: The minimum number of bookshelves. return len(set(books))"},{"question":"You are given an expression string exp consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. For example: - \\"{}\\" and \\"()[]\\" are valid. - \\"(]\\" and \\"([)]\\" are not valid. Write a function to check if the given expression is balanced. **Function Signature:** ```python def is_balanced(exp: str) -> bool: pass ``` # Input - A single string `exp` containing the expression. # Output - Return `True` if the expression is balanced, else return `False`. # Constraints - The length of `exp` can be up to 10^5. # Examples **Example 1:** ```python exp = \\"{[()]}\\" ``` **Output:** ```python True ``` **Example 2:** ```python exp = \\"{[(])}\\" ``` **Output:** ```python False ``` **Example 3:** ```python exp = \\"{[\\" ``` **Output:** ```python False ``` **Example 4:** ```python exp = \\"[()]{}{[()()]()}\\" ``` **Output:** ```python True ``` **Note:** In the first example, the expression is balanced as every opening bracket has a corresponding closing bracket in the correct order. In the second example, the expression is not balanced because the closing brackets do not match the most recent opening brackets. In the third example, the expression is also not balanced because it is missing closing brackets. In the fourth example, the expression is balanced as all opening brackets have matching closing brackets in the correct order.","solution":"def is_balanced(exp: str) -> bool: Return True if the expression is balanced, else return False. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in exp: if char in bracket_map.values(): # Opening brackets stack.append(char) elif char in bracket_map.keys(): # Closing brackets if stack == [] or bracket_map[char] != stack.pop(): return False return stack == []"},{"question":"You have been given a string consisting of lowercase English letters. You want to modify it by performing the following operation: - Choose a contiguous substring of the original string. - Reverse the chosen substring. Your task is to determine the lexicographically smallest string that can be obtained by performing at most one such operation. Input: - The input consists of a single string `s` (1 ≤ |s| ≤ 10^5) — the initial string consisting of lowercase English letters. Output: - Print the lexicographically smallest string that can be obtained by performing at most one reverse operation on a contiguous substring of the original string. Examples: Input: ``` dcba ``` Output: ``` abcd ``` Input: ``` abcde ``` Output: ``` abcde ``` Note: In the first example, the reverse operation can be performed on the entire string to obtain \\"abcd\\", which is the lexicographically smallest string. In the second example, the given string \\"abcde\\" is already the lexicographically smallest string possible, so no operation is needed.","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by reversing a contiguous substring at most once. n = len(s) smallest_string = s # We iterate through all possible substrings s[i:j+1] and reverse each # then check if the new string is lexicographically smaller than current smallest_string for i in range(n): for j in range(i, n): reversed_substring = s[:i] + s[i:j+1][::-1] + s[j+1:] if reversed_substring < smallest_string: smallest_string = reversed_substring return smallest_string"},{"question":"You are given a string S and a list of words W. Your task is to find which words from the list are present in S. A word is considered present in S if and only if it appears as a substring, regardless of its surrounding characters. Input The first line contains one integer T - number of test cases. Each test case consists of two lines: - The first line contains the string S. - The second line contains an integer K followed by K words. Output For each test case, output all words from the list that are present in S, each on a new line. Words should be output in the order they appear in the list. Constraints 1 ≤ T ≤ 100 1 ≤ length of S ≤ 1000 1 ≤ K ≤ 100 1 ≤ length of each word ≤ 100 SAMPLE INPUT 2 hello world 3 hello world space programming is fun 2 is boring SAMPLE OUTPUT hello world is","solution":"def find_words_in_string(t, test_cases): results = [] for i in range(t): S = test_cases[i][0] K = test_cases[i][1][0] words = test_cases[i][1][1:K+1] present_words = [word for word in words if word in S] results.append(present_words) return results"},{"question":"You are given an `n` x `m` grid that represents a maze. Each cell of the grid can either be an open space `.` or a blocked space `#`. There is exactly one starting point `S` and one ending point `E` on this grid. Your task is to help a robot find the shortest path from `S` to `E`. The robot can move up, down, left, or right, but cannot move into a cell that is blocked. Write a function that takes this grid as input and outputs the minimum number of steps required for the robot to reach from `S` to `E`. If there is no valid path from `S` to `E`, return `-1`. # Input Format The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 500), denoting the number of rows and columns in the grid. The next `n` lines each contain a string of length `m` consisting of the characters `\'.\'`, `\'#\'`, `\'S\'`, or `\'E\'`. # Output Format Print a single integer, the minimum number of steps required to reach `E` from `S`, or `-1` if no such path exists. # Example Input: ``` 5 5 ..S.. .#. ..#.. .#... ..E.. ``` Output: ``` 8 ``` Explanation: - The robot starts at cell (0, 2) and the shortest path to (4, 2) is: - (0, 2) -> (1, 2) -> (2, 2) -> (2, 1) -> (3, 1) -> (3, 2) -> (4, 2) -> (4, 1) -> (4, 0) # Note Make sure the function finds the shortest path efficiently even if the grid size is at its maximum constraint. Consider using algorithms such as Breadth-First Search (BFS) to solve this problem.","solution":"from collections import deque def shortest_path(n, m, grid): def bfs(start, end): queue = deque([start]) visited = set([start]) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == end: return steps for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return -1 start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if start is None or end is None: return -1 return bfs(start, end)"},{"question":"You are given a list of integers and you need to perform some operations on it to manipulate the array. Specifically, you need to handle Q queries; each query will be either to update an element at a specific index or to find the sum of elements within a given range of indices. There are two types of queries: 1. Update the element at a specified index to a new value. 2. Compute the sum of elements in a specified range of indices. Input: The first line consists of two space-separated integers, N and Q. The next line contains N space-separated integers representing the initial array. Each of the next Q lines contains one of the following: - \\"1 x y\\" where 1 means an update operation, and x is the index (0-based) where the value needs to be updated to y. - \\"2 l r\\" where 2 means a sum query, and l and r (0-based) specify the range of indices (inclusive) for which the sum needs to be computed. Output: For each sum query, output the computed sum on a new line. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ Array elements, y ≤ 10^9 0 ≤ x, l, r < N SAMPLE INPUT 5 3 1 2 3 4 5 2 0 2 1 1 10 2 1 3 SAMPLE OUTPUT 6 17 Explanation Initially, the array is [1, 2, 3, 4, 5]. 1. The first query asks for the sum of elements from index 0 to 2, which is 1 + 2 + 3 = 6. 2. The second query updates the element at index 1 to 10. The array becomes [1, 10, 3, 4, 5]. 3. The third query asks for the sum of elements from index 1 to 3, which is 10 + 3 + 4 = 17.","solution":"def manipulate_array(N, Q, arr, queries): results = [] for query in queries: if query[0] == 1: _, x, y = query arr[x] = y elif query[0] == 2: _, l, r = query results.append(sum(arr[l:r+1])) return results"},{"question":"You are the administrator of a game platform where players of various experience levels engage in online matches. Players are assigned experience points (XP) based on their performance in matches, and you need to provide quick matchmaking for players. Each player has a specific XP, and your task is to find a suitable opponent whose XP is as close as possible to a given value designated for matchmaking. For this problem, you will be given a list of players\' XP values and a list of XP targets for matchmaking. For each target, you need to find and output the XP value of the player whose XP is closest to the target. If two players have the same closest distance to the target, choose the player with the smaller XP. Input The first line contains two integers n and q (1 ≤ n, q ≤ 200000) — the number of players and the number of matchmaking requests. The second line contains a sequence of n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^{9}) — the XP values of the players. The third line contains a sequence of q integers y_1, y_2, ..., y_q (1 ≤ y_j ≤ 10^{9}) — the XP targets for matchmaking. Output Print q lines. For each matchmaking request, output the XP value of the closest player. If there are several closest values, output the smallest one. Examples Input 5 3 100 200 300 400 500 250 100 450 Output 200 100 400 Input 8 5 10 20 30 40 50 60 70 80 5 25 55 75 100 Output 10 20 50 70 80 Note In the first example: - For the target 250, the closest XP is 200 (since |250-200| < |250-300|). - For the target 100, the closest XP is 100 (exact match). - For the target 450, the closest XP is 400 (since |450-400| < |450-500|). In the second example: - For the target 5, the closest XP is 10. - For the target 25, the closest XP is 20. - For the target 55, the closest XP is 50. - For the target 75, the closest XP is 70. - For the target 100, the closest XP is 80.","solution":"from bisect import bisect_left def find_closest_xp(xp_values, targets): Function to find the closest XP values for given targets Parameters: xp_values (List[int]): List of integers representing players\' XP values targets (List[int]): List of integers representing XP targets for matchmaking Returns: List[int]: List of closest XP values for each target # Sorting the XP values to utilize binary search xp_values.sort() result = [] for target in targets: # Using binary search to find the closest value pos = bisect_left(xp_values, target) if pos == 0: # Check if the position is at the start closest_xp = xp_values[0] elif pos == len(xp_values): # Check if the position is at the end closest_xp = xp_values[-1] else: # Compare the closest values around the insertion point before = xp_values[pos - 1] after = xp_values[pos] if abs(target - before) <= abs(target - after): closest_xp = before else: closest_xp = after result.append(closest_xp) return result"},{"question":"A small tech company conducts a set of interviews where candidates are evaluated based on the speed and efficiency of a given task. The task is to process a list of numbers to identify and remove all duplicates while maintaining the original order of their first occurrence. You are to write a function that takes an unordered list of integers as input and returns a list with duplicates removed, preserving the order of their first occurrence. Input: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of integers in the sequence. - The second line contains n integers separated by spaces representing the list of numbers. Output: - A single line of integers, the modified list with duplicates removed, in the order of their first occurrence. Examples: Input: 6 1 2 2 3 4 1 Output: 1 2 3 4 Input: 5 5 5 5 5 5 Output: 5 Input: 8 4 3 4 3 2 1 4 2 Output: 4 3 2 1 Explanation: In the first example, the integers 2 and 1 appear more than once. The result removes the duplicates and preserves 1, 2, 3, and 4 in their respective first occurrences. In the second example, all integers are 5, so only one 5 is kept. In the third example, only the first occurrence of each integer is kept in the order 4, 3, 2, and 1.","solution":"def remove_duplicates(n, nums): Removes duplicates from a list of integers while preserving the first occurrence order. :param n: Number of integers in the list (1 ≤ n ≤ 100) :param nums: List of integers :return: List of integers with duplicates removed, preserving the order of first occurrence seen = set() result = [] for num in nums: if num not in seen: result.append(num) seen.add(num) return result"},{"question":"In a town, there are N houses, numbered 1 through N, and M bidirectional roads connecting the houses. Each road has a certain travel time associated with it. However, a special feature of this town is that each house has one teleporter that can transport a person to any other house directly with zero travel time. We want to construct a communication network such that any house can communicate with the capital (house 1) under the constraint that teleporters cannot be used. In this communication network, we aim to minimize the total travel time. Given this setup, determine the minimum total travel time needed for any house to communicate with the capital. Constraints: * 2 ≤ N ≤ 10^4 * 1 ≤ M ≤ 5×10^4 * 1 ≤ travel time of each road ≤ 10^4 Input: The input is given from Standard Input in the following format: ``` N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M ``` Here, `u_i` and `v_i` are the houses connected by the i-th road, and `w_i` is the travel time of that road. Output: Print the minimum total travel time needed for any house to communicate with the capital. Examples: Input: ``` 4 4 1 2 5 2 3 2 3 4 4 1 4 8 ``` Output: ``` 11 ``` Input: ``` 3 3 1 2 1 2 3 3 1 3 2 ``` Output: ``` 3 ``` Input: ``` 5 5 1 2 7 2 3 10 3 4 2 4 5 3 1 5 8 ``` Output: ``` 20 ```","solution":"import heapq def minimum_total_travel_time(N, M, roads): graph = [[] for _ in range(N+1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def prim(): min_cost = 0 visited = [False] * (N + 1) min_heap = [(0, 1)] # (cost, node) while min_heap: cost, node = heapq.heappop(min_heap) if not visited[node]: visited[node] = True min_cost += cost for neighbor, weight in graph[node]: if not visited[neighbor]: heapq.heappush(min_heap, (weight, neighbor)) return min_cost return prim() # Prepare input and call the function def main(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) roads = [] for line in lines[1:]: u, v, w = map(int, line.split()) roads.append((u, v, w)) return minimum_total_travel_time(N, M, roads)"},{"question":"Given an undirected graph, you are required to determine the number of unique paths of length exactly k between two distinct nodes u and v. A path in a graph is defined as a sequence of vertices where each adjacent pair of vertices is connected by an edge. Two paths are considered unique if their vertex sequences are different. Input: - The first line contains three integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ k ≤ 10) — the number of vertices, the number of edges, and the required path length respectively. - The next m lines each contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — representing an edge between vertices a and b. - The last line contains two distinct integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the start and end vertices for the paths. Output: Print a single integer representing the number of unique paths of length exactly k between vertices u and v. Example: Input: ``` 5 5 3 1 2 2 3 3 4 4 5 1 3 1 4 ``` Output: ``` 1 ``` Note: In the given graph: - There is only one unique path of length 3 from vertex 1 to vertex 4: 1 -> 2 -> 3 -> 4. Input: ``` 4 4 2 1 2 2 3 3 4 4 1 1 3 ``` Output: ``` 2 ``` Note: In the given graph: - There are two unique paths of length 2 from vertex 1 to vertex 3: 1 -> 2 -> 3 and 1 -> 4 -> 3.","solution":"def count_paths_of_length_k(n, m, k, edges, u, v): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # BFS to find all paths of length k queue = deque([(u, 0)]) # (current_node, current_length) paths_count = 0 while queue: current_node, current_length = queue.popleft() if current_length == k: if current_node == v: paths_count += 1 continue for neighbor in graph[current_node]: if current_length < k: queue.append((neighbor, current_length + 1)) return paths_count # Example usage: # n = 5, m = 5, k = 3 # edges = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 3)] # u, v = 1, 4 # Expected output: 1"},{"question":"In a distant galaxy, the currency used is called \\"credits\\". Each credit note has a denomination, and the residents often need to combine different notes to form a target amount when they go shopping on different planets. However, credits have a unique property: they only come in powers of 2 (such as 1, 2, 4, 8, 16, etc.). Your task is to help a resident figure out the minimum number of credit notes needed to form a specific amount. Given an amount, determine the smallest number of credit notes that sum up to that amount. Input The input consists of a single integer n (1 ≤ n ≤ 10^6), the target amount in credits. Output Print a single integer, the minimum number of credit notes needed to form the amount n. Examples Input 10 Output 2 Input 31 Output 5","solution":"def min_credit_notes(n): Given an amount n, determine the minimum number of credit notes needed to form the amount. Credit notes are in denominations of powers of 2. count = 0 while n > 0: n -= (n & -n) # Subtract the largest power of 2 that divides n count += 1 return count"},{"question":"A garden consists of a row of n beautiful flowers. Each flower is represented by an integer array where the value at each index i denotes the height of the flower at position i in the row. Gardeners need to apply a special treatment to the garden. They want to ensure that the array of flower heights becomes non-decreasing, meaning each flower\'s height is greater than or equal to the height of the previous one. They can perform an operation which allows them to move any flower to any other position in the row to achieve this goal. However, they want to minimize the number of such moves. Your task is to determine the minimum number of moves required to achieve a non-decreasing sequence of flower heights. Input The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of flowers in the garden. The second line contains n integers, h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the flowers. Output Output the minimum number of moves required to make the array of flower heights non-decreasing. Examples Input 5 4 2 3 1 5 Output 2 Input 4 1 3 2 4 Output 1 Input 3 2 1 2 Output 1 Note In the first sample, you can move the flower with height 2 to position 1 and the flower with height 1 to position 2, resulting in the array [2, 1, 4, 3, 5]. Then move the flower with height 1 to the front and flower with height 2 to position 2, resulting in the array [1, 2, 3, 4, 5], which is non-decreasing with 2 moves. In the second sample, you can move the flower with height 2 before the flower with height 3 to get [1, 2, 3, 4], which is non-decreasing with 1 move. In the third sample, you need to move the flower with height 1 to the front to get [1, 2, 2], which is non-decreasing with 1 move.","solution":"def min_moves_to_non_decreasing(n, heights): Returns the minimum number of moves required to make the array of flower heights non-decreasing. # Create a sorted version of the heights sorted_heights = sorted(heights) # Find the length of the longest increasing subsequence (LIS) dp = [1] * n for i in range(n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) lis_length = max(dp) return n - lis_length"},{"question":"Masha loves playing with sequences of brackets. She has obtained a sequence consisting of n open brackets \'(\' and close brackets \')\'. She considers a sequence balanced if the number of open brackets is equal to the number of close brackets, and every prefix of the sequence contains at least as many open brackets as close brackets. Masha has also noticed that sometimes the sequence is not fully balanced, but contains one or more contiguous subsequences that are balanced. Her task is to find out the length of the longest contiguous balanced subsequence in the given sequence. Input The first line of the input contains an integer n (1 ≤ n ≤ 105), the length of the sequence. The second line of the input contains a sequence of n characters, each being either \'(\' or \')\'. Output Output a single integer — the length of the longest contiguous balanced subsequence. If no balanced subsequence exists, print 0. Examples Input 6 ()()() Output 6 Input 8 (())))(() Output 4 Input 3 ((() Output 0 Note In the first example, the entire sequence is balanced, thus the length is 6. In the second example, the sequence `(())))` contains a balanced subsequence of length 4, which is `(()())`. In the third example, there is no balanced subsequence, so the output is 0.","solution":"def longest_balanced_subsequence(n, seq): Returns the length of the longest contiguous balanced subsequence in the given sequence. Parameters: n (int): the length of the sequence seq (str): the sequence of brackets Returns: int: the length of the longest contiguous balanced subsequence max_len = 0 current_len = 0 balance = 0 for char in seq: if char == \'(\': balance += 1 else: balance -= 1 if balance < 0: max_len = max(max_len, current_len) balance = 0 current_len = 0 else: current_len += 1 if balance == 0: max_len = max(max_len, current_len) return max_len"},{"question":"Sandy the Squirrel loves collecting acorns. She has an acorn collection which consists of n acorns. Each acorn has a nutritional value and a bitterness value. Sandy plans to eat exactly k acorns. To maximize her satisfaction, she wants to maximize the sum of the nutritional values of the chosen acorns while also ensuring that the sum of the bitterness values of the chosen acorns does not exceed a given limit B. Help Sandy determine the maximum total nutritional value she can achieve under these constraints. Input: The first line contains an integer t, denoting the number of test cases. The first line of each test case contains three integers n, k, and B. Each of the following n lines contains two integers ni and bi, where ni is the nutritional value and bi is the bitterness value of the i-th acorn. Output: For each test case, print a single integer which is the maximum total nutritional value that Sandy can achieve. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100 1 ≤ k ≤ n 0 ≤ ni, bi ≤ 1000 SAMPLE INPUT 1 5 3 10 8 2 4 5 3 7 6 1 7 3 SAMPLE OUTPUT 21 Explanation Choose acorn 1, acorn 4, and acorn 5 with nutritional values 8, 6, 7 respectively and bitterness values 2, 1, 3 respectively. Total nutritional value is 8 + 6 + 7 = 21 and total bitterness value is 2 + 1 + 3 = 6 which is within the limit 10.","solution":"def maximize_nutritional_value(t, test_cases): results = [] for case in test_cases: n, k, B = case[0] acorns = case[1:] # Initialize dynamic programming array dp = [[[-float(\'inf\')] * (B + 1) for _ in range(k + 1)] for _ in range(n + 1)] dp[0][0][0] = 0 for i in range(1, n + 1): ni, bi = acorns[i-1] for j in range(0, k + 1): for b in range(0, B + 1): dp[i][j][b] = dp[i-1][j][b] if j > 0 and b >= bi: dp[i][j][b] = max(dp[i][j][b], dp[i-1][j-1][b-bi] + ni) max_nutritional_value = 0 for b in range(B + 1): max_nutritional_value = max(max_nutritional_value, dp[n][k][b]) results.append(max_nutritional_value) return results"},{"question":"Alice is planning to build a string from a set of predefined words. She has a dictionary of words, and she knows the exact string `S` she wants to form. She can only use the words from her dictionary, and she can use each word multiple times. Alice wants to minimize the total number of words used to form the string `S`. Your task is to determine the minimum number of words required to form the string `S` using the dictionary, or if it\'s impossible to form the string `S` with the given dictionary. Input: - The first line contains a string `S` (1 ≤ |S| ≤ 1000), the target string Alice wants to form. - The second line contains an integer `n` (1 ≤ n ≤ 100), the number of words in the dictionary. - Each of the following `n` lines contains one dictionary word (1 ≤ |word| ≤ 100). Output: - Print one integer, the minimum number of words required to form the string `S`. If it is impossible to form the string `S` using the dictionary, print -1. Examples: Input: ``` applepie 3 apple pie ale ``` Output: ``` 2 ``` Input: ``` catdog 2 cat dog ``` Output: ``` 2 ``` Input: ``` hello 1 world ``` Output: ``` -1 ``` Note: In the first example, Alice can use the words \\"apple\\" and \\"pie\\" to form the string \\"applepie\\". In the second example, she can use the words \\"cat\\" and \\"dog\\" to form \\"catdog\\". In the third example, it is impossible to form the string \\"hello\\" using the given dictionary.","solution":"def min_words_to_form_string(S, words): Returns the minimum number of words required to form the string S using the words dictionary, or -1 if it\'s impossible. # Create a dp array where dp[i] represents the minimum number of words to form S[0:i] dp = [float(\'inf\')] * (len(S) + 1) dp[0] = 0 # base case: 0 words are needed to form the empty string # Turn the words list into a set for faster lookup word_set = set(words) for i in range(1, len(S) + 1): for word in word_set: if i >= len(word) and S[i-len(word):i] == word: dp[i] = min(dp[i], dp[i-len(word)] + 1) return -1 if dp[len(S)] == float(\'inf\') else dp[len(S)] def min_words_solver(input_string): Solver function that parses the input string and finds the minimum number of words to form S input_lines = input_string.strip().split(\'n\') S = input_lines[0] n = int(input_lines[1]) words = input_lines[2:2+n] return min_words_to_form_string(S, words)"},{"question":"Sarah loves playing a game called Number Mover. In this game, she has an array of n integers and a target value t. The goal of the game is to transform the array such that its sum becomes equal to t. In one move, Sarah can increase or decrease any element of the array by 1. Given the initial array and the target value, Sarah wants to know the minimum number of moves required to achieve her goal. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the length of the array. The second line contains n integers, representing the elements of the array. Each integer ai (–1000 ≤ ai ≤ 1000). The third line contains an integer t (–10000 ≤ t ≤ 10000) — the target value. Output Print one integer, denoting the minimum number of moves Sarah needs to perform to transform the array such that its sum becomes equal to t. Examples Input 5 1 3 5 7 9 30 Output 5 Input 3 -1 -2 -3 0 Output 6 Input 4 1 1 1 1 7 Output 3 Note In the first sample, the initial sum of the array is 25. Sarah needs to increase the total sum by 5 to reach the target value 30. She can do this by increasing any of the elements by 5 in total. For instance, she can increase the first element by 5. In the second sample, the initial sum of the array is -6. Sarah needs to increase the total sum by 6 to reach the target value 0. She can do this by distributing the increments across the elements, for instance, by increasing each of the elements by 2 (total of 6 moves). In the third sample, the initial sum of the array is 4. Sarah needs to increase the total sum by 3 to reach the target value 7. She can increase one of the elements by 3, resulting in 3 moves.","solution":"def min_moves_to_target(n, array, t): Returns the minimum number of moves required to transform the array such that its sum becomes equal to t. current_sum = sum(array) return abs(t - current_sum)"},{"question":"Vasya likes to play with arrays and is fascinated by their properties, especially the maximum subarray sum. One day, he decided to write a program that would help him find not just the maximum subarray sum, but the maximum subarray sum of any given length k. Can you help him write this program? Given an array of integers and a positive integer k (1 <= k <= n), where n is the length of the array, your task is to determine the maximum sum of any subarray of length k in the given array. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the size of the array. - The following line contains n integers a1, a2, ..., an (-10^5 ≤ ai ≤ 10^5), the elements of the array. - The last line contains the integer k (1 ≤ k ≤ n), the length of the subarray. Output - Print a single integer, the maximum sum of any subarray of length k in the given array. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 3 2 1 4 5 3 Output 10 Input 7 -3 -2 -1 -4 -5 -2 -1 2 Output -3","solution":"def max_subarray_sum_of_length_k(n, arr, k): Returns the maximum sum of any subarray of length k in the given array. max_sum = float(\'-inf\') current_sum = 0 # Initial window sum for i in range(k): current_sum += arr[i] max_sum = current_sum # Sliding window technique for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Analyze Publication Costs! You are given a list of n articles, each with a required cost to publish. Given a certain budget, determine the maximum number of articles that can be published without exceeding the total budget. If it\'s not possible to publish any articles within the budget, return 0. Input The first line contains two integers n and B (1 ≤ n ≤ 3000, 1 ≤ B ≤ 10^9) — the number of articles and the total budget allocated. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^8) — the cost of publishing each article. Output Output a single integer representing the maximum number of articles that can be published within the given budget. Examples Input 5 100 20 30 50 10 40 Output 4 Input 3 60 60 70 80 Output 1 Input 4 25 30 10 20 5 Output 2 Input 6 150 50 30 90 80 20 120 Output 3","solution":"def max_articles(n, B, costs): Returns the maximum number of articles that can be published without exceeding the budget. costs.sort() total_cost = 0 count = 0 for cost in costs: if total_cost + cost <= B: total_cost += cost count += 1 else: break return count"},{"question":"Bob owns a farm with several plants arranged in a straight line. He wants to water his plants using an automatic watering system that utilizes pipes. The pipes are fixed in place and each pipe can water only a specific range of plants. The coverage of each pipe is given in terms of the start and end indices (inclusive) of the plants that the pipe can water. Bob wants to ensure that each plant gets watered at least once. Determine the minimum number of pipes that Bob must use to ensure all plants are watered. Input: The input begins with a single integer T, the number of test cases. Each test case starts with two space-separated integers P (number of plants) and L (number of pipes). The next L lines each contain two space-separated integers, a and b, which represent the range [a, b] that the pipe can water, where 1 ≤ a ≤ b ≤ P. Output: For each test case, output a single integer representing the minimum number of pipes that Bob must use to water all the plants. If it is not possible, output -1. Constraints: 1 ≤ T ≤ 100 1 ≤ P ≤ 1000 1 ≤ L ≤ 2000 Example: Input: 3 5 3 1 2 2 5 1 3 4 4 1 2 3 4 5 5 2 3 7 2 1 3 4 5 Output: 2 5 -1 Explanation: Case #1: Bob needs to use the first pipe (range [1, 2]) and the second pipe (range [2, 5]) to ensure all plants from 1 to 5 are watered. This covers all plants with a minimum of 2 pipes. Case #2: Bob needs to use all the pipes since there is no overlapping coverage to ensure all 5 plants are watered. Hence, the result is 5. Case #3: It is impossible to water all plants as the pipe ranges [1, 3] and [4, 5] do not cover plants 4 and 5 after using the first pipe, thus the output is -1.","solution":"def min_pipes_to_water_plants(T, cases): results = [] for case in cases: P, L, pipes = case[\'P\'], case[\'L\'], case[\'pipes\'] # Sort pipes based on starting index, then by ending index pipes.sort() num_pipes = 0 current_end = 0 idx = 0 while current_end < P: best_pipie = None # Find the pipe that extends coverage the furthest from the current position while idx < L and pipes[idx][0] <= current_end + 1: if best_pipie is None or pipes[idx][1] > best_pipie[1]: best_pipie = pipes[idx] idx += 1 if best_pipie is None: results.append(-1) break num_pipes += 1 current_end = best_pipie[1] if current_end >= P: results.append(num_pipes) return results # Helper function to parse the input format specified into a suitable format for the function def parse_input_input(data): data = data.strip().split(\'n\') T = int(data[0]) index = 1 cases = [] for _ in range(T): P, L = map(int, data[index].split()) index += 1 pipes = [] for _ in range(L): a, b = map(int, data[index].split()) pipes.append((a, b)) index += 1 cases.append({\'P\': P, \'L\': L, \'pipes\': pipes}) return T, cases def solve(data): T, cases = parse_input_input(data) return min_pipes_to_water_plants(T, cases)"},{"question":"Jack has discovered a mysterious grid consisting of \'n\' rows and \'m\' columns. Each cell in the grid contains an integer that represents the altitude at that point. Jack is currently located at the top-left corner of the grid (cell (1,1)), and he needs to reach the bottom-right corner (cell (n, m)) as quickly as possible. Jack can move from one cell to another only if the altitude difference between the current cell and the next cell is at most k. Jack can move to the neighboring cells that share an edge with the current cell, i.e., he can move to the cells immediately to the left, right, up, or down, given that the altitude difference condition is satisfied. Given the grid and the allowed altitude difference, determine the minimum number of moves Jack needs to reach the bottom-right corner from the top-left corner. If it is impossible to reach the bottom-right corner, return -1. Input: - The first line contains three integers, n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 1000), and k (0 ≤ k ≤ 1000) — the number of rows, columns, and the maximum allowed altitude difference, respectively. - The next n lines contain m integers each. The j-th integer in the i-th line of these n lines is the altitude of the cell at row i and column j (0 ≤ altitude ≤ 10^6). Output: - Print a single integer that represents the minimum number of moves Jack needs to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, print -1. Examples: Input: 3 3 2 1 3 4 2 8 2 1 2 1 Output: 4 Input: 3 3 1 1 5 9 4 8 6 1 5 3 Output: -1 Explanation: In the first example, the path from (1,1) to (3,3) can be: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) Altitudes: 1 -> 2 -> 1 -> 2 -> 1 with differences within the allowed range of 2. In the second example, there is no way to move from (1,1) to (3,3) without exceeding the allowed altitude difference of 1.","solution":"from collections import deque def minimum_moves_to_reach_end(n, m, k, grid): def is_valid(x, y, nx, ny): return 0 <= nx < n and 0 <= ny < m and abs(grid[nx][ny] - grid[x][y]) <= k directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited[0][0] = True while queue: x, y, moves = queue.popleft() if x == n-1 and y == m-1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(x, y, nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1"},{"question":"A small company has decided to automate the process of reporting the daily profits made by their sales employees. Each day, every employee records their sales for the day. The company wants to determine which employee had the highest profit for the day. However, since employees are paid on commission and can join or leave any day, there might be changes in the list of employees. Your task is to create a program that tracks the highest profit maker each day and provides an output showing the employee name and their profit. You will be given records of sales for N days. Each record contains the name of the employee and their profit for that day. If an employee\'s name appears on multiple days, their historical profits will be kept separately for each day. Write a program that processes the sales records day by day and outputs the name of the employee who had the highest profit for that day, along with their profit. Input The first line contains a single integer N indicating the number of days for which sales records are provided. The next N lines each contain a sales record for a day. Each sales record is formatted as follows: a string containing the employee\'s name followed by a space and an integer representing their profit for that day. Output Your program should output N lines. Each line should contain the name of the employee with the highest profit for that day and their profit. Constraints 1 ≤ N ≤ 10^5 1 ≤ length of employee name ≤ 100 -10^6 ≤ profit ≤ 10^6 SAMPLE INPUT 5 Alice 300 Bob 500 Alice -200 Charlie 400 Bob 100 SAMPLE OUTPUT Alice 300 Bob 500 Bob 500 Charlie 400 Charlie 400 Note: - Even if an employee has a negative profit, they can still be recorded as the highest profit maker if no one else made a profit higher than theirs on that day. - If no employee made a sale (thus no record for a day), assume the day is not recorded in the input.","solution":"def highest_profit_each_day(N, sales_records): This function processes sales records for N days and determines the employee with the highest profit for each day. :param N: Integer, number of days with sales records. :param sales_records: List of strings, each string contains an employee name and their profit. :return: List of strings, each string contains the name of the employee with the highest profit and their profit. results = [] for record in sales_records: max_profit_employee, max_profit = None, -float(\'inf\') for entry in record: name, profit = entry.split() profit = int(profit) if profit > max_profit: max_profit_employee = name max_profit = profit results.append(f\\"{max_profit_employee} {max_profit}\\") return results"},{"question":"You are given an array of integers, and you need to perform a series of operations on it to transform it into a new array. The allowed operations are: 1. Multiply any two adjacent integers in the array, then replace them with their product. 2. Sum any two adjacent integers in the array, then replace them with their sum. Your goal is to determine the minimum value that can be produced by performing a sequence of these operations exactly `(n-1)` times, where `n` is the length of the array. Return this minimum value. Additionally, write the function `min_value_transform` that takes in the array and returns the minimum value. # Input - `n`(1 ≤ `n` ≤ 50): an integer denoting the number of elements in the array. - An array of `n` integers where each element ai (1 ≤ `ai` ≤ 1000). # Output - A single integer representing the minimum value that can be obtained by performing `(n-1)` operations. # Example Input ``` 4 2 3 4 5 ``` Output ``` 60 ``` Explanation The optimal sequence of operations is to first multiply `2` and `3` to get `6`, forming array `[6, 4, 5]`. Then, multiply `6` and `4` to get `24`, forming array `[24, 5]`. Finally, multiply `24` and `5` to get `120`. Therefore, the minimum value produced is `120`. Write the function `min_value_transform`: ```python def min_value_transform(nums): # Your code here pass # Example usage print(min_value_transform([2, 3, 4, 5])) # Output: 60 ```","solution":"def min_value_transform(nums): Returns the minimum value from the array after performing the allowed operations. The allowed operations are: - Multiply two adjacent integers and replace with product. - Sum two adjacent integers and replace with sum. The goal is to perform (n-1) operations to get the minimum value possible. # Using dynamic programming to find the minimum value n = len(nums) dp = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dp[i][i] = nums[i] for l in range(2, n+1): # l is the length of the sequence for i in range(n-l+1): j = i + l - 1 for k in range(i, j): dp[i][j] = min(dp[i][j], dp[i][k] * dp[k+1][j]) return dp[0][n-1]"},{"question":"Your task is to write a function that takes a string s and a list of words as inputs and checks if s can be segmented into a space-separated sequence of one or more dictionary words. * The string s consists of only lowercase English letters. * The words in the list are also lowercase English letters. * You need to return True if the string can be segmented into one or more dictionary words, otherwise return False. * The list of words will not contain duplicates. * The length of the string s will not exceed 1000. * The length of the word list will not exceed 10000, and each word’s length will be at most 20. Input The input is two lines. The first line contains the string s. The second line contains a list of words separated by space. Output Output a single line containing \\"True\\" if the string can be segmented into one or more dictionary words, otherwise \\"False\\". Example Input leetcode [\'leet\', \'code\'] secretgarden [\'secret\', \'garden\', \'sec\', \'ret\', \'gar\', \'den\'] Output True True","solution":"def can_segment_string(s, word_dict): Determines if the string s can be segmented into a space-separated sequence of one or more dictionary words. Args: s (str): The string to be segmented. word_dict (list): The list of words as dictionary. Returns: bool: True if the string can be segmented into one or more dictionary words, otherwise False. word_set = set(word_dict) n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"Maya is organizing a competition among her fellow architects to design the smallest enclosed area using a set of building blocks. Each building block is in the shape of a 1x1 square, and there are a total of n blocks. The blocks must be placed on a 2D plane such that each block is aligned with the grid (i.e., edges parallel to the axes) and each block must touch at least one other block along an edge (left, right, top, or bottom). The goal is to place all blocks such that the enclosed area is minimized. The enclosed area is defined as the smallest rectangle that can contain all the blocks. The competition is judged based on how compact the final structure is, and the winner is the one who can achieve the smallest enclosed area using all blocks. Write a program that receives the number of building blocks and calculates the smallest possible enclosed area that can contain all the blocks when they are placed according to the rules. Input The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of building blocks. Output Output one integer — the smallest possible enclosed area that can contain all the blocks. Examples Input 4 Output 4 Input 5 Output 6 Input 9 Output 9","solution":"import math def smallest_enclosed_area(n): Returns the smallest possible enclosed area that can contain all n blocks. # To minimize the area, the shape should be as square-like as possible side_length = math.ceil(math.sqrt(n)) other_side_length = math.ceil(n / side_length) return side_length * other_side_length"},{"question":"You are given two strings, `str1` and `str2`, both consisting of lowercase English letters. Your task is to determine the minimum number of operations required to convert `str1` into `str2`. The allowed operations are: 1. Insert a character at any position in `str1`. 2. Remove a character from any position in `str1`. 3. Replace a character at any position in `str1` with some other character. You need to write a program to compute the minimum number of operations required. Input The first line of input contains an integer T, the number of test cases. The description of T test cases follows. For each test case, there are two lines of input, the first line containing the string `str1` and the second line containing the string `str2`. Output For each test case, output a single line containing the minimum number of operations required to convert `str1` into `str2`. Constraints 1 ≤ T ≤ 10 1 ≤ |str1|, |str2| ≤ 1000 Example Input: 2 abcdef azced horse ros Output: 3 3 Explanation In the first test case, convert `str1` = \\"abcdef\\" to `str2` = \\"azced\\": - Replace \'b\' with \'z\' - Replace \'d\' with \'c\' - Replace \'f\' with \'d\' In the second test case, convert `str1` = \\"horse\\" to `str2` = \\"ros\\": - Remove \'h\' - Replace \'o\' with \'r\' - Remove \'e\'","solution":"def min_distance(str1, str2): Computes the minimum number of operations required to convert str1 to str2. The allowed operations are insertions, deletions, and substitutions. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] def min_operations_for_multiple_cases(test_cases): results = [] for str1, str2 in test_cases: results.append(min_distance(str1, str2)) return results"},{"question":"Given an array of N positive integers, you need to determine if there exists a non-empty subarray whose product is a perfect square. A subarray is a contiguous part of an array and a perfect square is an integer that is the square of an integer. Return \\"Yes\\" if there exists such a subarray, and \\"No\\" otherwise. Constraints * 1 ≤ N ≤ 100 * 1 ≤ A[i] ≤ 10^9 (1 ≤ i ≤ N) Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print \\"Yes\\" or \\"No\\" based on whether there exists a subarray whose product is a perfect square. Examples Input 5 1 3 9 4 2 Output Yes Input 4 2 3 5 7 Output No Input 3 4 6 16 Output Yes","solution":"import math def has_perfect_square_subarray(N, arr): Determines if there exists a non-empty subarray whose product is a perfect square. Args: N : int : the number of elements in the array arr : list of int : the array of positive integers Returns: str : \\"Yes\\" if a subarray whose product is a perfect square exists, otherwise \\"No\\" for i in range(N): product = 1 for j in range(i, N): product *= arr[j] if is_perfect_square(product): return \\"Yes\\" return \\"No\\" def is_perfect_square(x): Checks if a number is a perfect square. Args: x : int : the number to check Returns: bool : True if x is a perfect square, otherwise False if x < 1: return False sqrt_x = int(math.sqrt(x)) return sqrt_x * sqrt_x == x"},{"question":"A programming contest is held where participants need to solve tasks within a set time limit. One of the tasks is to analyze the score changes of participants over time. The scores are recorded at specific time intervals, and each record consists of a participant\'s ID and their score at that time. Given multiple records of participants\' scores, the goal is to determine the maximum increase in the score for any participant between any two records. You need to return the participant\'s ID who has the maximum increase and the value of the increase. If there are multiple participants with the same maximum increase, return the one with the smaller ID. Constraints: * 1 leq number of records leq 1000 * 1 leq participant ID leq 100 * 0 leq score leq 1000 Each record will be in the format: time_participant_id_score Where: * `time` is an integer representing the time in seconds (0 leq time leq 10000) * `participant_id` is the ID of the participant (1 leq participant ID leq 100) * `score` is the score of the participant (0 leq score leq 1000) Input Input is given in a series of lines from Standard Input in the following format: ``` time participant_id score ``` Output Print the participant\'s ID and the maximum score increase, separated by a space. Examples Input ``` 1 2 100 2 2 300 3 3 200 4 2 350 5 3 400 6 1 100 7 1 300 ``` Output ``` 2 250 ``` Explanation: Participant 2 has the highest score increase from 100 to 350, which is 250. Participant 1 also has an increase of 200 in score and participant 3 with an increase of 200, but participant 2 has the higher increase.","solution":"def max_score_increase(records): from collections import defaultdict scores = defaultdict(list) # Process the input records for record in records: time, participant_id, score = record scores[participant_id].append(score) max_increase = 0 max_increase_participant = None # Find the maximum increase for each participant for participant_id, participant_scores in scores.items(): start_score = participant_scores[0] for score in participant_scores[1:]: increase = score - start_score if increase > max_increase or (increase == max_increase and (max_increase_participant is None or participant_id < max_increase_participant)): max_increase = increase max_increase_participant = participant_id return max_increase_participant, max_increase # Sample Input Parsing def parse_input(input_lines): records = [] for line in input_lines: time, participant_id, score = map(int, line.split()) records.append((time, participant_id, score)) return records"},{"question":"A company has multiple departments, each represented by a tree-like structure. Each node in the tree represents an employee, and the root node represents the department head. Each employee has a unique integer ID. An employee can have multiple subordinates, but no subordinate reports to more than one superior. The company needs to find the total number of employees in each department whose ID is divisible by a given integer `K`. You are given the organizational tree of a department (as a list of edges) and the integer `K`. Your task is to find the count of employees whose ID is divisible by `K`. Input The first line contains an integer `N`, the number of employees in the department including the head. The next `N-1` lines contain two integers `u` and `v` each, denoting that there is an edge between node `u` and node `v`, which means `v` is a direct subordinate of `u`. The last line contains an integer `K`. Output Output a single integer, the count of employees whose ID is divisible by `K`. Constraints 1 ≤ N ≤ 100,000 1 ≤ u, v, K ≤ 100,000 1 ≤ Employee ID ≤ 100,000 SAMPLE INPUT 5 1 2 1 3 2 4 2 5 2 SAMPLE OUTPUT 2 Explanation In the given sample input: - Employee 1 has ID 1 - Employee 2 has ID 2 - Employee 3 has ID 3 - Employee 4 has ID 4 - Employee 5 has ID 5 IDs 2 and 4 are divisible by 2. Hence, the output is 2.","solution":"from collections import defaultdict def count_divisible_by_k(N, edges, K): Count the number of employees whose ID is divisible by K. Parameters: N : int : Number of employees edges : List[Tuple[int, int]] : List of edges denoting the reporting structure K : int : The divisor to check divisibility Returns: int : Count of employees with IDs divisible by K tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) count = 0 for employee_id in range(1, N+1): if employee_id % K == 0: count += 1 return count # Example usage # N = 5 # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # K = 2 # The employees with IDs divisible by 2 are 2 and 4 # Hence, the expected output is 2"},{"question":"In a far-off kingdom, there was a wise old wizard who enjoyed casting spells on a grid. The wizard had a special spell that could reverse the elements of rows and columns in a magical rectangular grid of positive integers. One day, the wizard challenged the villagers with a puzzle: Given a grid of size N x M, the wizard will perform at most K operations. In one operation, he can either reverse any one row or reverse any one column of the grid. The goal is to make the sum of all the elements in the grid as large as possible. Write a program to help the villagers determine the maximum possible sum of the grid after at most K operations. Input The input begins with a line containing three integers, N, M, and K, separated by spaces. The next N lines contain M integers each, representing the elements of the grid. Constraints: - 1 ≤ N, M ≤ 10 - 0 ≤ K ≤ 100 - 1 ≤ grid[i][j] ≤ 1000 Output Output a single integer representing the maximum possible sum of the grid after at most K operations. Examples Input 3 3 2 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 1 1 2 3 4 Output 10","solution":"def max_sum_after_operations(N, M, K, grid): Calculates the maximum possible sum of the grid after at most K operations where each operation is either reversing a row or a column in the grid. from copy import deepcopy # Function to calculate the sum of the grid def calculate_sum(grid): return sum(sum(row) for row in grid) # Initial sum of the grid max_sum = calculate_sum(grid) # Try reversing rows and then try reversing columns for i in range(N): new_grid = deepcopy(grid) new_grid[i] = new_grid[i][::-1] current_sum = calculate_sum(new_grid) for j in range(M): new_grid2 = deepcopy(new_grid) for row in new_grid2: row[j] = row[j] * -1 current_sum2 = calculate_sum(new_grid2) max_sum = max(max_sum, current_sum, current_sum2) # Try reversing columns and then try reversing rows for i in range(M): new_grid = deepcopy(grid) for row in new_grid: row[i] = row[i] * -1 current_sum = calculate_sum(new_grid) for j in range(N): new_grid2 = deepcopy(new_grid) new_grid2[j] = new_grid2[j][::-1] current_sum2 = calculate_sum(new_grid2) max_sum = max(max_sum, current_sum, current_sum2) return max_sum"},{"question":"You are given a list of integers and a target integer. Your task is to find whether there is a pair of integers in the list that adds up to the target. Print the indices of the two integers in the list. If there are multiple possible pairs, return any of them. If no such pair exists, print `-1`. Constraints * 1 leq N leq 10^5 (N is the number of integers in the list) * -10^9 leq each integer in the list leq 10^9 * -10^9 leq target leq 10^9 Input Input is given from Standard Input in the following format: ``` N list of N integers target ``` Output Print the indices of two integers that add up to the target, separated by a space. If no such pair exists, print `-1`. Indices should be 0-based. Examples Input ``` 5 2 7 11 15 1 9 ``` Output ``` 0 1 ``` Input ``` 4 1 2 3 4 8 ``` Output ``` -1 ``` Input ``` 6 3 3 4 5 6 7 10 ``` Output ``` 1 5 ```","solution":"def find_pair_with_target_sum(n, numbers, target): num_to_index = {} for i, num in enumerate(numbers): complement = target - num if complement in num_to_index: return f\\"{num_to_index[complement]} {i}\\" num_to_index[num] = i return \\"-1\\""},{"question":"Pashmak loves playing video games, especially those involving points and rewards. He started playing a new game where he earns points by clearing levels. Each level has a certain point value and some levels are dependent on the completion of other levels. He needs your help determining the maximum points he can accumulate. You are given a list of levels where each level has a point value and a dependency indicating which levels need to be completed before this level can be attempted. You need to find the maximum points Pashmak can earn by playing the levels in an optimal order. Input The first line contains an integer n (1 ≤ n ≤ 2·105) representing the number of levels. Each of the next n lines describes a level. It contains three space-separated integers li, pi, di (1 ≤ li ≤ n; 1 ≤ pi ≤ 104; 0 ≤ di ≤ n - 1). The integer li is the level number, pi is the point value of the level, and di indicates the number of prerequisite levels required to play level li. Following di, there are di space-separated integers representing the prerequisite levels. Output Print a single integer — the maximum points Pashmak can earn. Examples Input 5 1 10 0 2 20 1 1 3 30 1 1 4 40 2 2 3 5 50 2 1 4 Output 150 Input 4 1 5 0 2 10 1 1 3 20 1 2 4 25 1 2 Output 60 Note In the first sample, the maximum points can be accumulated by playing levels in the order: 1, 2, 3, 4, 5 resulting in points 10 + 20 + 30 + 40 + 50 = 150. In the second sample, the maximum points can be earned by playing levels in the order: 1, 2, 3, 4 resulting in points 5 + 10 + 20 + 25 = 60.","solution":"def maximum_points(levels, prerequisites): from collections import defaultdict import heapq graph = defaultdict(list) indegree = defaultdict(int) points = {} for level in levels: li, pi, di = level[0], level[1], level[2] points[li] = pi indegree[li] += di # No prerequisites for this level if di == 0: graph[-1].append(li) indegree[li] = 0 # Add edges to the graph for each prerequisite for pre in prerequisites[li]: graph[pre].append(li) # Min-heap to pick the levels in order of earning points min_heap = [] for level in graph[-1]: heapq.heappush(min_heap, (-points[level], level)) # Collect maximum points total_points = 0 while min_heap: earning, level = heapq.heappop(min_heap) total_points -= earning # converting negative back to positive for next_level in graph[level]: indegree[next_level] -= 1 if indegree[next_level] == 0: heapq.heappush(min_heap, (-points[next_level], next_level)) return total_points"},{"question":"Given a string S of length N containing only the characters \'A\' and \'B\', you need to determine if it\'s possible to split S into two non-empty subsequences A and B such that both subsequences are lexicographically sorted and consist of distinct characters. If it\'s possible, print \\"YES\\" and the two subsequences. If not, print \\"NO\\". A subsequence is obtained by deleting zero or more characters from the string without changing the order of the remaining characters. Note that for a subsequence to be lexicographically sorted, each of its characters should appear in alphabetical order. Constraints: * 1 leq N leq 1000 * S consists only of the characters \'A\' and \'B\'. Input Input is given from Standard Input in the following format: S Output If it\'s possible, print \\"YES\\" followed by two space-separated strings representing subsequences A and B. Otherwise, print \\"NO\\". Examples Input AAB Output YES AA B Input BAB Output NO","solution":"def split_lexicographically(S): This function checks if it is possible to split the string S into two non-empty subsequences A and B where both subsequences are lexicographically sorted and consist of distinct characters. If possible, it returns \\"YES\\" and the two subsequences. If not, it returns \\"NO\\". if \'A\' in S and \'B\' in S: posA = S.find(\'A\') posB = S.find(\'B\') if posA < posB: return f\\"YES {S[:posB]} {S[posB:]}\\" return \\"NO\\""},{"question":"Two robots are playing a game on a line of n cells indexed from 1 to n. Each robot starts at a different position and takes turns moving. On each turn, a robot can move to an adjacent cell (left or right). The robots cannot occupy the same cell at the same time. The goal of the game is to reach the last cell, n, first. However, if both robots can reach cell n at the same time, the game results in a draw. You are tasked with determining the minimum number of turns it will take for a robot to either win or the game to result in a draw, assuming both robots play optimally. Input The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of cells. The second line contains two space-separated integers r1 and r2 (1 ≤ r1, r2 ≤ n; r1 ≠ r2) — the starting positions of the two robots. Output Print a single integer — the minimum number of turns required for a robot to win or the game to result in a draw. Examples Input 10 1 4 Output 9 Input 5 2 5 Output 3 Note In the first test sample, Robot 1 starts at cell 1 and Robot 2 starts at cell 4. Robot 1 requires 9 turns to reach cell 10, while Robot 2 needs 6 turns to reach cell 10. Thus, the game results in a draw because Robot 1 requires 9 turns to reach cell 10. In the second test sample, Robot 2 can reach cell 5 in 0 turns. Robot 1 requires 3 turns to reach cell 5, resulting in Robot 2 winning.","solution":"def min_turns_to_win_or_draw(n, r1, r2): Returns the minimum number of turns required for a robot to win or for the game to result in a draw. # Number of turns for robot 1 to reach cell n turns_r1 = n - r1 # Number of turns for robot 2 to reach cell n turns_r2 = n - r2 # The minimum number of turns for the game to be resolved return max(turns_r1, turns_r2)"},{"question":"You are given a list of students\' scores in a particular subject. Each student has a unique ID, and their score is provided in a list format. The scores of the students need to be graded based on the following criteria: - 90 to 100: A - 80 to 89: B - 70 to 79: C - 60 to 69: D - 0 to 59: F Write a program that processes the list of scores and prints the grades for each student in the same order as the input. Additionally, the program should identify and print the highest score and the student ID who obtained this highest score. If there is a tie (i.e., multiple students have the same highest score), print the smallest student ID among them. The first line of input contains the number of students n (1 <= n <= 1000). The following n lines each contain a student ID (1 <= ID <= 1000) and their score (0 <= score <= 100). Input example: ``` 5 101 86 102 92 103 77 104 90 105 62 ``` Output example: ``` 101 B 102 A 103 C 104 A 105 D Highest score: 92 Top student ID: 102 ``` In this example: - Student ID 101 received a score of 86, which corresponds to a grade of B. - Student ID 102 received a score of 92, which corresponds to a grade of A. - Student ID 103 received a score of 77, which corresponds to a grade of C. - Student ID 104 received a score of 90, which corresponds to a grade of A. - Student ID 105 received a score of 62, which corresponds to a grade of D. - The highest score is 92, and the top student ID is 102.","solution":"def grade_students(n, student_scores): Grades students based on their scores and finds the highest score with the smallest ID of top scorer. Parameters: n (int): Number of students. student_scores (list of tuples): Each tuple contains a student ID and their score. Returns: list of str: Grades of students along with their IDs. str: The highest score. str: The top student ID with the highest score and smallest ID if tie. def get_grade(score): if 90 <= score <= 100: return \'A\' elif 80 <= score <= 89: return \'B\' elif 70 <= score <= 79: return \'C\' elif 60 <= score <= 69: return \'D\' else: return \'F\' grades = [] highest_score = -1 top_student_id = 1001 # since 1 <= ID <= 1000 for student_id, score in student_scores: grade = get_grade(score) grades.append(f\\"{student_id} {grade}\\") if score > highest_score or (score == highest_score and student_id < top_student_id): highest_score = score top_student_id = student_id highest_score_str = f\\"Highest score: {highest_score}\\" top_student_id_str = f\\"Top student ID: {top_student_id}\\" return grades, highest_score_str, top_student_id_str"},{"question":"Given a string S, find the shortest length of a substring which contains all the distinct characters of the string S at least once. Input The first line contains T, the number of test cases to follow. The first line of each test case contains the string S. Output For each test case, output the answer in a separate line. Constraints 1 ≤ T ≤ 100 1 ≤ Length of string S ≤ 1000 Example Input: 3 abac aaab aabbcbc Output: 3 2 4 Explanation: Test Case 1: The substring \\"bac\\" contains all distinct characters \'a\', \'b\', and \'c\' and is the shortest such substring. Test Case 2: The substring \\"ab\\" contains both distinct characters \'a\' and \'b\' and its length is 2. Test Case 3: The substring \\"bcbc\\" contains all distinct characters \'a\', \'b\', and \'c\' and is the shortest such substring.","solution":"def shortest_substring_with_all_chars(s): Returns the length of the shortest substring that contains all distinct characters of string s. from collections import defaultdict n = len(s) unique_chars = set(s) total_unique = len(unique_chars) # Initialize a dictionary to store character counts in the current window char_count = defaultdict(int) start = 0 min_len = float(\'inf\') distinct_count = 0 # Sliding window approach for end in range(n): char_count[s[end]] += 1 if char_count[s[end]] == 1: distinct_count += 1 while distinct_count == total_unique: min_len = min(min_len, end - start + 1) char_count[s[start]] -= 1 if char_count[s[start]] == 0: distinct_count -= 1 start += 1 return min_len def find_shortest_substrings(test_cases): results = [] for s in test_cases: results.append(shortest_substring_with_all_chars(s)) return results"},{"question":"You are given a list of strings, where each string represents an English word. Your task is to identify and print all the anagram groups from the input list. An anagram is derived by rearranging the letters of a word to produce a new word using all the original letters exactly once. Constraints: * Each word consists only of lowercase English letters. * The number of words in the input list does not exceed 1000. * No word is longer than 100 characters. Input: The first line contains an integer n, the number of words in the list. Each of the next n lines contains a single word. Output: Print each anagram group on a new line. All anagrams in a group should be printed in a single line, separated by a single space. The order of groups and the order of words within a group does not matter. Example: Input: 6 listen silent enlist hello world dowrl Output: listen silent enlist world dowrl Explanation: - \\"listen\\", \\"silent\\", and \\"enlist\\" are all anagrams of each other. - \\"world\\" and \\"dowrl\\" are anagrams of each other. - \\"hello\\" has no anagram in the list, hence it is not included in the output.","solution":"def find_anagram_groups(words): Given a list of words, return a list of anagram groups. Each group is a list of words that are anagrams of each other. from collections import defaultdict # Using a dictionary to group words by their sorted tuple of characters anagram_dict = defaultdict(list) for word in words: sorted_word_tuple = tuple(sorted(word)) anagram_dict[sorted_word_tuple].append(word) # Filter out groups that have less than two words anagram_groups = [group for group in anagram_dict.values() if len(group) > 1] return anagram_groups"},{"question":"Given a set of road segments in a city, each represented by an undirected graph where intersections are nodes and road segments between intersections are edges with associated distances. The city plans to implement a bus route system that must follow certain constraints. You are tasked with determining the shortest possible route that forms a simple cycle (a cycle that visits each node exactly once) and satisfies the following condition: the maximum length of any individual road segment within the cycle must not exceed a given value k. Input The first line of the input contains three integers n, m, and k (3 ≤ n ≤ 20, 1 ≤ m ≤ 50, 1 ≤ k ≤ 1000) denoting the number of intersections, the number of road segments, and the maximum length of any road segment in the cycle, respectively. Each of the next m lines contains three integers u, v, and d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 1000), representing a road segment between intersections u and v with a distance of d. Output Print a single integer representing the length of the shortest cycle where no road segment exceeds the given value k. If no such cycle exists, print -1. Examples Input 4 5 5 1 2 4 2 3 5 3 4 2 4 1 3 1 3 6 Output 14 Input 3 3 2 1 2 3 2 3 2 3 1 1 Output -1 In this problem, you need to consider both the graph traversal algorithms like Depth First Search (DFS) to find all cycles and techniques to prune searches where the edge weights exceed k, ensuring that the overall solution is computationally viable given the constraints.","solution":"from itertools import permutations def shortest_cycle(n, m, k, roads): # Create a 2D list to store distances between intersections graph = [[float(\'inf\')] * n for _ in range(n)] for u, v, d in roads: graph[u-1][v-1] = d graph[v-1][u-1] = d min_cycle_length = float(\'inf\') # Try all permutations to find the shortest cycle for perm in permutations(range(n)): cycle_length = 0 valid = True # Check if the permutation forms a valid cycle for i in range(n): u, v = perm[i], perm[(i+1) % n] if graph[u][v] > k: valid = False break cycle_length += graph[u][v] if valid: min_cycle_length = min(min_cycle_length, cycle_length) return min_cycle_length if min_cycle_length != float(\'inf\') else -1"},{"question":"Alice has recently become interested in graph theory and decided to experiment with graph traversal algorithms. She wants to create a program that will help her analyze the connectivity of an undirected graph. Given an undirected graph with n vertices and m edges, she needs to determine the number of connected components in the graph. Input The first line of the input contains two integers, n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000), representing the number of vertices and edges in the graph, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between vertex u and vertex v. Output Output a single integer representing the number of connected components in the graph. Example Input 6 5 1 2 2 3 4 5 5 6 6 4 Output 2","solution":"def find_number_of_connected_components(n, m, edges): def dfs(node): stack = [node] while stack: current = stack.pop() if visited[current]: continue visited[current] = True for neighbor in adjacency_list[current]: if not visited[neighbor]: stack.append(neighbor) # Initialize the adjacency list adjacency_list = [[] for _ in range(n + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # To keep track of visited nodes visited = [False] * (n + 1) connected_components_count = 0 for i in range(1, n + 1): if not visited[i]: connected_components_count += 1 dfs(i) return connected_components_count"},{"question":"You are given a list of strings, where each string represents a sequence of characters. Your task is to determine the longest substring of distinct characters for each string in the list. If there are multiple substrings with the same length, return the first occurring one. Input The first line contains an integer n (1 ≤ n ≤ 10000) — the number of strings in the input. The following n lines each contain a string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. Output Output n lines, each line containing the longest substring of distinct characters for the corresponding input string. Example Input 3 abcabcbb bbbbb pwwkew Output abc b wke Note In the first example, the longest substring of distinct characters is either \\"abc\\" or \\"bca\\" or \\"cab\\". Since \\"abc\\" appears first, it is the answer. In the second example, all characters are \\"b\\", so the longest substring of distinct characters is \\"b\\". In the third example, the answer is \\"wke\\", with the length of three. Note that the answer must be a substring, \\"pwke\\" is not a valid answer.","solution":"def longest_distinct_substring(s): This function returns the longest substring of distinct characters for the given string s. n = len(s) longest_substr = \\"\\" start = 0 seen = {} for end in range(n): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end current_substr = s[start:end+1] if len(current_substr) > len(longest_substr): longest_substr = current_substr return longest_substr def process_strings(strings): Given a list of strings, returns a list of longest substrings of distinct characters for each string in the list. result = [] for s in strings: result.append(longest_distinct_substring(s)) return result"},{"question":"Bob is learning to play a game called \\"Grid Master\\". In this game, he controls a character on a grid with `n` rows and `m` columns. The grid contains some blocked cells, and Bob wants to navigate his character from the top-left corner to the bottom-right corner. The character can move to any of the four cardinal directions (up, down, left, right) if the destination cell is within the grid boundaries and not blocked. The game grid is given as a 2D matrix of size `n x m`, where 0 represents a free cell, and 1 represents a blocked cell. Bob needs to find the shortest path from the top-left corner to the bottom-right corner. If no such path exists, he should return `-1`. Help Bob by writing a program to solve this problem. Input The first line contains two integers `n` and `m` — the number of rows and columns of the grid (1 ≤ n, m ≤ 1000). The next `n` lines contain `m` space-separated integers each, representing the grid. - A `0` indicates a free cell. - A `1` indicates a blocked cell. The top-left corner and the bottom-right corner will always be free cells. Output Print a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner or `-1` if no such path exists. Examples Input ``` 3 3 0 0 1 0 1 0 0 0 0 ``` Output ``` 4 ``` Input ``` 3 3 0 0 0 1 1 0 0 0 0 ``` Output ``` 4 ``` Input ``` 3 3 0 1 1 1 0 0 1 1 0 ``` Output ``` -1 ``` Note In the first example, the path from top-left to bottom-right is (0,0) -> (0,1) -> (1,0) -> (2,1) -> (2,2), and its length is 4. In the third example, there is no valid path from top-left to bottom-right, so the output is `-1`.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a string of lowercase alphabets, write a function to determine if it can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Function Signature: ```python def can_form_palindrome(s: str) -> bool: pass ``` # Input - A single string `s` containing only lowercase alphabets (1 ≤ |s| ≤ 10^5). # Output - Return `True` if the string can be rearranged to form a palindrome, otherwise return `False`. # Example Input ``` carrace ``` Output ``` True ``` Input ``` daily ``` Output ``` False ```","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determines if the string can be rearranged to form a palindrome. Args: s (str): A string of lowercase alphabets. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count. return odd_count <= 1"},{"question":"You are given a large number, and you need to determine whether it is a palindrome. A number is a palindrome if it reads the same forwards and backwards. However, this number can get very large, and you might need to check multiple such numbers in a short amount of time. Write a program to check if given numbers are palindromes. Input Format The first line contains an integer T, indicating the number of test cases. This is followed by T lines, each containing a single integer, N, which might be very large. Output Format For each test case, print \\"YES\\" if the number is a palindrome, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^100 (N can have up to 100 digits) Sample Input 3 123 121 1001 Sample Output NO YES YES SAMPLE INPUT 3 123 121 1001 SAMPLE OUTPUT NO YES YES Note: You should consider optimizing your program for handling up to 100,000 test cases efficiently, given the constraints.","solution":"def is_palindrome(n): Check if the given string representation of a number is a palindrome. return n == n[::-1] def check_palindromes(numbers): Given a list of numbers in string format, check if each one is a palindrome. results = [] for number in numbers: if is_palindrome(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given N apples. You need to distribute these apples in M baskets such that each basket contains at least one apple. Determine if it is possible to distribute the apples in the given manner. If it is possible, print `Yes`; otherwise, print `No`. Constraints * 1 leq N leq 1000 * 1 leq M leq 1000 Input Input is provided from Standard Input in the following format: N M Output If it is possible to distribute the apples such that each basket gets at least one apple, print `Yes`; otherwise, print `No`. Examples Input 10 5 Output Yes Input 5 6 Output No Input 7 7 Output Yes","solution":"def distribute_apples(N, M): Determines if it is possible to distribute N apples in M baskets such that each basket contains at least one apple. Args: N (int): Number of apples. M (int): Number of baskets. Returns: str: \'Yes\' if possible, \'No\' otherwise. if N >= M: return \'Yes\' else: return \'No\'"},{"question":"Alice is learning about numerical operations and she is fascinated by the concept of palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. Alice wants to write a program to count how many numbers in a given range [L, R] are palindromic. Help Alice by writing a program that takes two integers L and R, and returns the count of palindromic numbers in that inclusive range. INPUT: The first line of the input contains two integers L and R separated by a space (1 ≤ L ≤ R ≤ 10^6). OUTPUT: Print the number of palindromic numbers in the range [L, R]. SAMPLE INPUT: 10 20 SAMPLE OUTPUT: 1","solution":"def is_palindromic(number): Helper function to check if a number is palindromic. return str(number) == str(number)[::-1] def count_palindromic_numbers(L, R): Returns the count of palindromic numbers in the inclusive range [L, R]. count = 0 for num in range(L, R + 1): if is_palindromic(num): count += 1 return count"},{"question":"You are given an integer array `nums` of length `n`. Each element in the array is unique. You need to determine the maximum possible product of the elements of any contiguous subarray of `nums`, and return this product. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the array `nums`. The second line contains `n` space-separated integers, representing the elements of the array `nums`. Each element is guaranteed to be unique and fall within the range -10^9 and 10^9. Output Print a single integer — the maximum product of any contiguous subarray of `nums`. Examples Input 4 2 3 -2 4 Output 6 Input 5 -1 -3 -10 0 60 Output 60 Input 6 -2 -3 0 -2 -40 Output 80 Note In the first example, the subarray [2, 3] has the maximum product (2 * 3 = 6). In the second example, the subarray [60] has the maximum product (60). In the third example, the subarray [-2, -40] has the maximum product (-2 * -40 = 80).","solution":"def max_product_subarray(nums): Returns the maximum product of any contiguous subarray of nums. n = len(nums) if n == 0: return 0 max_prod = min_prod = result = nums[0] for i in range(1, n): if nums[i] < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(nums[i], max_prod * nums[i]) min_prod = min(nums[i], min_prod * nums[i]) result = max(result, max_prod) return result"},{"question":"Consider a grid of size M x N, where each cell contains either \'0\' (empty cell) or \'1\' (occupied cell). The task is to count the largest square sub-grid containing only \'1\'s. Input: The first line contains two integers M and N, representing the dimensions of the grid. The next M lines each contain N characters (\'0\' or \'1\') representing the grid. Output: Print a single integer - the side length of the largest square sub-grid containing only \'1\'s. Constraints: 1 ≤ M, N ≤ 300 SAMPLE INPUT 4 5 11010 11011 11111 10011 SAMPLE OUTPUT 2 Explanation: The largest square sub-grid of \'1\'s has a side length of 2 and it can be found at more than one position in the grid. For example, the top-left of one such square is at position (2,3).","solution":"def largest_square_subgrid(M, N, grid): # Create a 2D array to store the size of the largest square sub-grid ending at each cell dp = [[0] * (N + 1) for _ in range(M + 1)] max_side = 0 for i in range(1, M + 1): for j in range(1, N + 1): if grid[i-1][j-1] == \'1\': dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"**Problem Statement:** You have been hired by a security agency to create a new encoding system for sensitive communications. Your task is to replace each letter in a given message with its corresponding position in the alphabet, with \'a\' corresponding to 1, \'b\' corresponding to 2, and so on up to \'z\' corresponding to 26. After converting the entire message to numbers, you will then concatenate the numbers to form one large number. For example, the message \\"abc\\" would be encoded as \\"123\\" because: \'a\' -> 1 \'b\' -> 2 \'c\' -> 3 Therefore, the final encoded message will be \\"123\\". You need to implement a function that takes a given string and returns its encoded numeric representation as described above. # Input The input consists of a single line containing a string `message`, representing the message to be encoded. The string will contain only lowercase English letters and will have a length between 1 and 10^5. # Output Print the encoded numeric representation of the message. # Examples **Input:** ``` hello ``` **Output:** ``` 85121215 ``` **Input:** ``` world ``` **Output:** ``` 231518124 ``` # Constraints: - The message will only contain lowercase English letters. - The length of the message will be between 1 and 100000. - The program must be efficient enough to handle the upper limit of the input size within a reasonable time frame. # Note: - Your implementation should be efficient in both time and space. - Make sure to handle edge cases like a single character string appropriately.","solution":"def encode_message(message): Encodes the given message by converting each letter to its corresponding position in the alphabet. Parameters: message (str): The message to be encoded. It contains only lowercase English letters. Returns: str: The encoded numeric string. encoded_message = \'\'.join(str(ord(char) - ord(\'a\') + 1) for char in message) return encoded_message"},{"question":"You are given the task of analyzing a list of transactions in an account. Each transaction specifies an amount to be either added to or subtracted from the account balance. Your goal is to determine the final balance of the account after processing all the transactions. Write a program that reads a series of transactions and calculates the final balance. # Input - The first line of the input contains `n` (1 ≤ n ≤ 10^5), the number of transactions. - The following `n` lines each contain a single integer representing the transaction amount `t_i` (-10^4 ≤ t_i ≤ 10^4), where a positive value indicates a deposit and a negative value indicates a withdrawal. # Output - Output a single integer, the final balance of the account. # Example Input ``` 5 100 -50 10 -20 30 ``` Output ``` 70 ``` # Explanation The initial balance is zero. After processing each transaction: 1. Add 100: balance = 100 2. Subtract 50: balance = 50 3. Add 10: balance = 60 4. Subtract 20: balance = 40 5. Add 30: balance = 70 Thus, the final balance is 70.","solution":"def calculate_final_balance(transactions): Calculates the final balance after processing a list of transactions. Args: transactions: List of integers representing the transactions. Returns: Integer representing the final balance. return sum(transactions)"},{"question":"Vera has a sequence of n integers and a target sum k. She wants to find a non-empty subarray (a contiguous subsequence) of the sequence such that the sum of its elements is exactly k. Help Vera determine if such a subarray exists. Input The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 1000). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the elements of the sequence. Output If there exists at least one subarray whose sum is exactly k, print \\"YES\\" in the first line. Otherwise, print \\"NO\\" in the first line. Examples Input 5 12 1 2 3 4 5 Output YES Input 3 8 1 2 4 Output NO","solution":"def subarray_sum_exists(n, k, arr): Determines if there exists a contiguous subarray that sums up to k. Parameters: n (int): The length of the array. k (int): The target sum. arr (list of int): The array of integers. Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\". current_sum = 0 start = 0 sum_dict = {} for i in range(n): current_sum += arr[i] if current_sum == k: return \\"YES\\" if (current_sum - k) in sum_dict: return \\"YES\\" sum_dict[current_sum] = i return \\"NO\\""},{"question":"Given an array of integers, write a program to determine the smallest number of operations required to make all the elements of the array equal. In one operation, you can select any two different elements and set one of them to be equal to the other. Input The first line contains an integer n (2 ≤ n ≤ 100). The second line contains n integers: a1, a2, ..., an (-1000 ≤ ai ≤ 1000). Output Output a single integer — the minimal number of operations required to make all elements equal. Examples Input 3 4 9 4 Output 1 Input 4 1 1 2 3 Output 2 Input 5 5 5 5 5 5 Output 0 Explanation In the first example, you can take two elements with values 4 and 9, and set the 9 to 4, thus only one operation is needed. In the second example, one optimal way is to first set one element with value 2 to 1, and then set one element with value 3 to 1, resulting in a total of two operations.","solution":"def min_operations_to_make_equal(array): Returns the minimum number of operations required to make all elements in the array equal. from collections import Counter element_counts = Counter(array) most_common_count = max(element_counts.values()) return len(array) - most_common_count"},{"question":"The management of a factory wants to optimize the energy consumption during shifts, and they have a set of tasks that need to be assigned to workers. The factory operates in shifts, and each shift can carry out exactly one task. Given the constraints on the shifts and the energy consumption for each task, you need to assign the tasks to different shifts in such a way that no two workers work on the same task and the total energy consumption is minimized. Input - The first line of the input contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of tasks and shifts. - The next line contains N integers, representing the energy consumption for each task. Output For each test case, output the minimum total energy consumption possible. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Energy consumption ≤ 1000 Example # Input: 2 3 1 2 3 4 8 4 5 2 # Output: 6 19 # Explanation In the first test case, the optimal assignment is to assign tasks with energy consumption 1, 2, and 3 to different shifts, resulting in a total minimum energy consumption of 1+2+3 = 6. In the second test case, the optimal assignment can be assigning tasks with energy consumption 2, 4, 5, and 8 to different shifts, resulting in a total minimum energy consumption of 2+4+5+8 = 19.","solution":"def minimum_total_energy(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] energy_consumptions = test_cases[i][1] energy_consumptions.sort() total_energy = sum(energy_consumptions) results.append(total_energy) return results"},{"question":"A veterinarian clinic is managing their appointments for various pets. Each pet is characterized by their species and a unique identification number. The clinic runs on a schedule represented by a grid, where each cell corresponds to a time slot available for an appointment. The rows represent the hours in a day (for example, from 9 AM to 5 PM), and the columns represent the days of a week (from Monday to Friday). To streamline the process, the clinic has implemented a system that books appointments based on the pet species. Each species has its designated time slots in which appointments can be made. The slots are predefined and shared across all pets of the same species. Write a function that, given the species-booking grid and a list of pets with their requested times, prints the updated grid with the appointments marked. An appointment must not overlap with another appointment of the same species or be outside the species\' designated time slots. If an appointment request can\'t be satisfied, output a message indicating that the booking failed for that pet. Input The first line contains m and n, the number of rows and columns in the grid (1 ≤ m, n ≤ 10). The next m lines contain n characters each, describing the species-booking grid, where each character represents a species or available slot (\'.\'), indicating which species can book an appointment in that specific slot. The next line contains p, the number of pets requesting appointments (1 ≤ p ≤ 100). The following p lines each contain a species character and the identification number of the pet, followed by the row and column numbers (0-based index) representing the requested appointment time. Output Print the updated grid with the appointments marked by their unique identification number. If multiple requests specify the same time slot, only the first valid request should be satisfied. If a request cannot be satisfied, print \\"Booking failed for pet id: ID\\" (where ID is the pet\'s identification number) for each failed booking. Examples Input 3 5 A.... AA..B ....B 3 A 101 1 0 B 202 1 4 A 303 0 1 Output 101.. AA.202 ....B Input 2 3 .C .C 2 C 101 0 1 C 202 1 1 Output .C .C Booking failed for pet id: 202 Input 1 3 .A. 3 A 101 0 1 B 202 0 2 A 303 0 1 Output .101. Booking failed for pet id: 202 Booking failed for pet id: 303","solution":"def update_appointment_grid(m, n, grid, pets): Updates the given species-booking grid with appointment slots marked by pet ids. for species, pet_id, row, col in pets: if grid[row][col] == species: grid[row][col] = str(pet_id) else: print(f\'Booking failed for pet id: {pet_id}\') for row in grid: print(\'\'.join(row)) def process_appointments(m, n, grid, p, pets): # First, convert each row of the grid into a list to allow mutable operations grid = [list(row) for row in grid] # Update the appointment grid update_appointment_grid(m, n, grid, pets)"},{"question":"A new bakery has just opened in town, and you have been hired to manage the orders. The bakery sells n types of pastries, each with a different price and a certain supply limit. Customers come in and place orders for specific types of pastries. Unfortunately, the cashier system is quite rudimentary, and you can only handle one order at a time in the sequence they are received. If an order cannot be fully satisfied due to a lack of supply in any of the requested pastry types, the entire order is rejected. Your goal is to determine the maximum profit that can be obtained by fulfilling a given sequence of orders. You are provided with the initial supply limits for each pastry type as well as the list of customer orders, each with the quantity requested for each pastry type and the prices offered. Input The input consists of several lines: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of different types of pastries. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the initial supply limit of each pastry type. - The third line contains a single integer m (1 ≤ m ≤ 1000) — the number of customer orders. - Each of the next m lines contains a sequence of numbers: the first number is an integer k (1 ≤ k ≤ n) representing the number of different types of pastries in the order, followed by k pairs of integers (t, q) where t (1 ≤ t ≤ n) is the type of pastry and q (1 ≤ q ≤ 100) is the quantity requested for that type, followed by an integer p (1 ≤ p ≤ 10000) representing the price offered for the entire order. Output Output a single integer — the maximum profit that can be obtained by fulfilling the orders. Examples Input 3 10 8 5 4 2 1 3 2 5 100 1 2 6 50 3 1 3 2 2 2 20 2 1 4 3 1 150 Output 150 Input 2 5 5 3 2 1 2 2 2 100 2 1 3 2 2 90 1 1 6 30 Output 100 Input 4 7 5 3 6 5 3 4 2 1 2 1 50 2 1 2 3 1 100 1 1 8 40 2 3 1 4 1 80 4 1 1 2 2 3 1 4 1 120 Output 120 Explanation In the first example, only the fourth order can be fully satisfied as it requests 4 of pastry 1 and 1 of pastry 3, giving a profit of 150. In the second example, only the first order can be fully satisfied as it requests 2 of pastry 1 and 2 of pastry 2, giving a profit of 100. In the third example, only the fifth order can be fully satisfied as it requests 1 of pastry 1, 2 of pastry 2, 1 of pastry 3, and 1 of pastry 4, giving a profit of 120.","solution":"def maximum_profit(n, initial_supply, m, orders): supply = initial_supply[:] max_profit = 0 for order in orders: k = order[0] required = order[1:k*2+1:2] quantities = order[2:k*2+2:2] price = order[-1] can_fulfill = True for t, q in zip(required, quantities): if supply[t-1] < q: can_fulfill = False break if can_fulfill: for t, q in zip(required, quantities): supply[t-1] -= q max_profit = max(max_profit, price) return max_profit"},{"question":"Given a positive integer X, you need to find the smallest integer Y such that Y is a power of 10 and Y is greater than or equal to X. Specifically, Y should be in the form of 10^k where k is a non-negative integer. Constraints * 1 leq X leq 10^{18} * All values in input are integers. Input Input is given from Standard Input in the following format: X Output Print the smallest integer Y in a line. Examples Input 123 Output 1000 Input 45678 Output 100000","solution":"def smallest_power_of_10_greater_than_or_equal_to(x): Returns the smallest integer Y such that Y is a power of 10 and Y is greater than or equal to x. if x <= 0: raise ValueError(\\"X must be a positive integer\\") y = 1 while y < x: y *= 10 return y if __name__ == \\"__main__\\": import sys input = sys.stdin.read x = int(input().strip()) print(smallest_power_of_10_greater_than_or_equal_to(x))"},{"question":"Given a positive integer n, you need to form a string that contains numbers from 1 to n concatenated together followed by the same numbers in reverse order separated by comma. For example if n=3, then the output would be \\"1,2,3,3,2,1\\". You need to write a function `form_string(n)` which takes an integer n and returns the required string. # Input - A single integer n (1 ≤ n ≤ 100). # Output - Return the required string according to the description. # Example ```python def form_string(n): # Your code here # Example 1 print(form_string(3)) # Output: \\"1,2,3,3,2,1\\" # Example 2 print(form_string(5)) # Output: \\"1,2,3,4,5,5,4,3,2,1\\" ``` In this problem, observe that, - You first create a sequence from 1 to n. - Then create a reverse sequence from n to 1. - Concatenate these two sequences together separated by commas to get the required output.","solution":"def form_string(n): Forms a string of numbers from 1 to n concatenated together followed by the same numbers in reverse order, separated by commas. forward_sequence = \',\'.join(str(i) for i in range(1, n + 1)) reverse_sequence = \',\'.join(str(i) for i in range(n, 0, -1)) return forward_sequence + \',\' + reverse_sequence"},{"question":"In the land of ByteLand, all roads are bidirectional and two-way. The government of ByteLand is planning a number of projects to improve its road system. One of these projects involves building new roads, but first, they need to understand which pairs of cities are already directly connected by a road. Your task is to determine how many pairs of cities in ByteLand are directly connected by a road, given the information on existing roads between pairs of cities. The number of cities in ByteLand is N, and the number of existing roads is M. Each road connects exactly two different cities. Constraints: * 2 leq N leq 10^5 * 1 leq M leq 10^5 * 1 leq u_i, v_i leq N where 1 leq i leq M * No road is listed more than once between the same pair of cities. Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Each line u_i v_i represents a road directly connecting city u_i and city v_i. Output Print the number of pairs of cities that are directly connected by a road. Examples Input 5 4 1 2 2 3 4 5 1 5 Output 4 Input 4 2 1 3 2 4 Output 2 Input 6 5 1 2 2 3 3 4 4 5 5 6 Output 5","solution":"def count_direct_connections(N, M, roads): Counts the number of directly connected city pairs by road. :param N: Integer, number of cities. :param M: Integer, number of existing roads. :param roads: List of tuples, each containing a pair of directly connected cities. :return: Integer, number of pairs of cities that are directly connected by a road. return M def parse_input(input_str): Parses the input string to extract number of cities, roads and the list of roads. :param input_str: String, input data. :return: Tuple (N, M, roads) lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, roads"},{"question":"String Edit Distance Given two strings `str1` and `str2`, determine the minimum number of operations required to convert `str1` into `str2`. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character with another character Compute the minimum number of edits needed such that the two strings match. Constraints * 1 ≤ | str1 |, | str2 | ≤ 1,000 * str1 and str2 will contain only lowercase English letters. Input Format Input is given from standard input in the following format: ``` str1 str2 ``` Output Format Output a single integer denoting the minimum number of edit operations required. Sample Input 1 ``` kitten sitting ``` Sample Output 1 ``` 3 ``` Explanation: To convert `kitten` to `sitting`, the following 3 operations are needed: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end Sample Input 2 ``` flaw lawn ``` Sample Output 2 ``` 2 ``` Explanation: To convert `flaw` to `lawn`, the following 2 operations are needed: 1. Replace \'f\' with \'l\' 2. Insert \'n\' at the end","solution":"def edit_distance(str1, str2): Computes the minimum number of operations required to convert str1 into str2. Parameters: str1 (str): The source string. str2 (str): The target string. Returns: int: Minimum number of edit operations. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, remove all characters of str1 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are the same, ignore last char else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are organizing a party and need to arrange seating for your guests. Given a list of guests, you need to assign them to tables such that no guest is left without a seat. Each table has a capacity limit for the number of guests. The goal is to minimize the number of tables used while ensuring everyone has a seat. Write a program to determine the minimum number of tables required to seat all the guests given their capacities. **Input** The input consists of multiple datasets. Each dataset is provided in the following format: - The first line contains two integers, G (1 ≤ G ≤ 1000) and C (1 ≤ C ≤ 100), where G is the number of guests and C is the capacity of each table. - The next line contains G integers representing the individual guests\' seating requirements. When both G and C are 0, the input is completed. The number of datasets does not exceed 10. **Output** For each dataset, print the minimum number of tables required on a new line. **Examples** *Input* 6 3 1 2 1 2 1 2 5 1 3 3 3 3 3 0 0 *Output* 3 5","solution":"def min_tables_requirement(guests, capacity): guests.sort(reverse=True) tables = 0 available = [capacity] * len(guests) for guest in guests: for idx in range(tables): if available[idx] >= guest: available[idx] -= guest break else: available[tables] -= guest tables += 1 return tables def process_datasets(datasets): results = [] for dataset in datasets: G, C, guest_list = dataset if G == 0 and C == 0: break results.append(min_tables_requirement(guest_list, C)) return results def parse_inputs(inputs): datasets = [] lines = inputs.strip().split(\\"n\\") i = 0 while i < len(lines): G, C = map(int, lines[i].split()) if G == 0 and C == 0: break guests = list(map(int, lines[i+1].split())) datasets.append((G, C, guests)) i += 2 return datasets def produce_outputs(results): return \\"n\\".join(map(str, results))"},{"question":"# Spiral Matrix Traversal Objective: Write a program to traverse a given `m x n` matrix in a spiral order and return the elements as a list. Details: You are given a matrix of m x n elements (m rows, n columns), and you need to return all elements of the matrix in spiral order starting from the top-left corner and moving right, then down the rows, left across the bottom row, and up the left column, continuously spiraling inward. Input: - The first line of the input contains two integers `m` and `n` (1 ≤ m, n ≤ 10), the number of rows and columns respectively. - The next `m` lines contain `n` integers each representing the elements of the matrix. Output: - A single line containing the elements of the matrix in spiral order, separated by spaces. Example: **Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 1 2 3 6 9 8 7 4 5 ``` **Input:** ``` 4 3 1 2 3 4 5 6 7 8 9 10 11 12 ``` **Output:** ``` 1 2 3 6 9 12 11 10 7 4 5 8 ``` Explanation: - For the first example, the spiral order of the matrix is `[1, 2, 3, 6, 9, 8, 7, 4, 5]`. - For the second example, the spiral order of the matrix is `[1, 2, 3, 6, 9, 12, 11, 10, 7, 4, 5, 8]`.","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. result = [] if len(matrix) == 0: return result top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse downwards for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse upwards for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Mike has a string s that he edits by performing a series of operations. Each operation consists of choosing a prefix of s (a prefix of s is any leading contiguous substring of s) and appending it to the end of the string. Mike wants to know if it’s possible to transform string s into string t using exactly k operations. Your task is to determine whether it is possible to transform the string s into t using exactly k operations. Input The first line contains a single integer k (1 ≤ k ≤ 10^5), the number of operations. The second line contains the string s (1 ≤ |s| ≤ 100), the string that Mike starts with. The third line contains the string t (1 ≤ |t| ≤ 100), the target string that Mike wants to get. Output Output \\"YES\\" if it is possible to transform s into t using exactly k operations, otherwise output \\"NO\\". Examples Input 3 abc abcabcabc Output YES Input 3 abc abcabcab Output NO Note In the first example, Mike can use the prefix \\"abc\\" in three operations to produce \\"abcabcabc\\". In the second example, it’s not possible to obtain \\"abcabcab\\" with exactly 3 operations since each operation will append all current characters at the end of the string repeatedly, hence only multiples of the prefix length are possible.","solution":"def can_transform(k, s, t): Determines whether it is possible to transform string s into t using exactly k operations. Each operation consists of choosing a prefix of s and appending it to the end of the string. Parameters: k (int): The exact number of operations. s (str): The initial string. t (str): The target string. Returns: str: \\"YES\\" if it is possible to transform s into t using exactly k operations, \\"NO\\" otherwise. if len(t) != len(s) * k: return \\"NO\\" expected_string = s * k return \\"YES\\" if expected_string == t else \\"NO\\""},{"question":"Marie is a fan of a particular TV series consisting of n equally thrilling episodes. Unfortunately, her hectic schedule doesn\'t allow her to binge-watch all at once, so she follows a strict watching pattern. Every day, Marie watches a continuous block of episodes starting from an unwatched episode, choosing a block such that every episode in the block is watched together even if they were aired on different days, and the entire series must be watched in the minimum number of days possible. Each episode i has a dependency episode b_i (b_i < i) signifying that for Marie to understand episode i, she must have already watched episode b_i. If an episode doesn\'t have any dependencies, its value is set to 0 (b_i = 0). Marie wants to know how many days she will need to finish watching the series. Input The first line contains a single integer n (1 ≤ n ≤ 10^4) — the number of episodes in the series. The second line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i < i), where b_i is the episode Marie needs to watch before watching episode i (except when b_i = 0, which means no dependency). Output Print one integer — the number of days it will take for Marie to watch all episodes. Example Input 5 0 1 0 3 3 Output 2 Note Explanation of the example test: Marie will watch episodes in the following sequence: - On the first day, she watches episodes 1 and 2 (since episode 2 depends on episode 1). - On the second day, she watches episodes 3, 4, and 5 (since episode 4 and episode 5 depend on episode 3).","solution":"def min_days_to_watch(n, dependencies): def find_max_depth(episode): if episode in memo: return memo[episode] if dependencies[episode] == 0: return 1 memo[episode] = find_max_depth(dependencies[episode] - 1) + 1 return memo[episode] memo = {} max_depth = 1 for episode in range(n): max_depth = max(max_depth, find_max_depth(episode)) return max_depth"},{"question":"Raghav is fascinated by numerical patterns and always tries to come up with interesting challenges for his friends. Today, he has devised a puzzle involving sequences and their divisibility properties. Raghav gives his friend a sequence of integers and asks Q questions about the sum of elements in different subarrays. For each query, you are provided with two integers l and r, which represent the starting and ending indices of a subarray. The task is to determine whether the sum of the elements in this subarray is divisible by K. Input format The first line contains two integers N and K, where N is the length of the sequence and K is the divisor. The second line contains N integers representing the sequence. The third line contains one integer Q, denoting the number of queries. The next Q lines each contain two integers l and r representing the indices of the subarray. Output format For each query, output \\"YES\\" if the sum of the elements in the subarray is divisible by K, otherwise output \\"NO\\". Constraints 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ l ≤ r ≤ N -10^9 ≤ sequence elements ≤ 10^9 Sub-tasks For 30% points : 1 ≤ N, Q ≤ 10^3 For 70% points : original constraints Note: Output is case-sensitive. SAMPLE INPUT 5 3 1 2 3 4 5 3 1 3 2 5 1 5 SAMPLE OUTPUT YES NO YES Explanation For query 1, the subarray is [1, 2, 3]. The sum is 6, which is divisible by 3, so the answer is \\"YES\\". For query 2, the subarray is [2, 3, 4, 5]. The sum is 14, which is not divisible by 3, so the answer is \\"NO\\". For query 3, the subarray is [1, 2, 3, 4, 5]. The sum is 15, which is divisible by 3, so the answer is \\"YES\\".","solution":"def check_divisibility(N, K, sequence, queries): # Create prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + sequence[i - 1] results = [] for l, r in queries: # Calculate sum of the subarray subarray_sum = prefix_sum[r] - prefix_sum[l - 1] # Check divisibility if subarray_sum % K == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage N, K = 5, 3 sequence = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 5), (1, 5)] print(check_divisibility(N, K, sequence, queries))"},{"question":"You are given an array of integers representing the ages of people in a group. Your task is to split this group into the minimum number of non-empty subsets such that each subset contains unique ages, and each age can be included in only one subset. For example, given the ages array ages = [10, 20, 20, 30, 30, 30], one way to split into subsets is: [10, 20, 30], [20, 30], [30]. Input The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of people in the group. The second line of the input contains n integers, ages_1, ages_2, ..., ages_n (1 ≤ ages_i ≤ 120) — the ages of people in the group. Output Print only one integer — the minimum number of subsets needed to split the group such that each subset contains unique ages. Examples Input 6 10 20 20 30 30 30 Output 3 Input 4 45 45 45 45 Output 4","solution":"def min_subsets(ages): This function calculates the minimum number of subsets needed to split the group such that each subset contains unique ages. Args: ages (list): A list of integers where each element represents the age of a person. Returns: int: The minimum number of subsets needed. from collections import Counter age_counts = Counter(ages) return max(age_counts.values())"},{"question":"**Problem:** In an online gaming platform, players from different regions are matched together to play. The latency between players affects the game experience, so the platform tries to minimize the total latency for all players in a game. You are given the latency between each pair of players in a list. You need to write a program that selects the pair of players such that the total latency is minimized. Input: - The first line of input consists of an integer T, the number of test cases. - For each test case: - The first line consists of an integer N, the number of players. - The next N lines each contain N integers where the jth integer on the ith line represents the latency between player i and player j. Output: For each test case, output a single line containing the minimum total latency that can be achieved by selecting any two players. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 100 1 ≤ latency ≤ 1000 SAMPLE INPUT: 2 3 0 100 200 100 0 350 200 350 0 4 0 50 100 150 50 0 200 250 100 200 0 180 150 250 180 0 SAMPLE OUTPUT: 100 50 Explanation: For the first test case, the pairs and their latencies are: - (1,2) with latency 100 - (1,3) with latency 200 - (2,3) with latency 350 The minimum latency is 100. For the second test case, the pairs and their latencies are: - (1,2) with latency 50 - (1,3) with latency 100 - (1,4) with latency 150 - (2,3) with latency 200 - (2,4) with latency 250 - (3,4) with latency 180 The minimum latency is 50.","solution":"def minimum_total_latency(test_cases): results = [] for test in test_cases: N, latencies = test min_latency = float(\'inf\') for i in range(N): for j in range(i + 1, N): if latencies[i][j] < min_latency: min_latency = latencies[i][j] results.append(min_latency) return results # Example usage: test_cases = [ (3, [ [0, 100, 200], [100, 0, 350], [200, 350, 0] ]), (4, [ [0, 50, 100, 150], [50, 0, 200, 250], [100, 200, 0, 180], [150, 250, 180, 0] ]) ] print(minimum_total_latency(test_cases)) # Output: [100, 50]"},{"question":"You are given a matrix with R rows and C columns where each cell contains an integer. Your task is to find the maximum sum of any submatrix within the given matrix, such that it contains at least one cell and does not exceed a given sum S. Specifically, you need to find the maximum possible sum among all submatrices of the given matrix that is less than or equal to a specified integer S. # Input The input is provided from the standard input in the following format: ``` R C S matrix[0][0] matrix[0][1] ... matrix[0][C-1] matrix[1][0] matrix[1][1] ... matrix[1][C-1] : matrix[R-1][0] matrix[R-1][1] ... matrix[R-1][C-1] ``` * `R` and `C` are integers representing the number of rows and columns in the matrix respectively ((1 leq R, C leq 100)). * `S` is an integer representing the maximum allowable sum of any submatrix ((1 leq S leq 10^9)). * Each element in the matrix is an integer with an absolute value not exceeding (10^6). # Output Output a single integer, which is the maximum sum of the submatrix that is less than or equal to S. If no such submatrix exists, output `0`. # Example Input ``` 4 4 10 1 2 -1 4 -2 3 4 1 3 -1 5 2 -1 4 2 8 ``` Output ``` 10 ``` Input ``` 3 3 5 2 1 2 1 3 4 5 1 -1 ``` Output ``` 5 ``` Input ``` 2 2 0 -1 2 3 4 ``` Output ``` 0 ``` # Explanation In the first example, the submatrix formed by summing the elements [1, 2, -1] and [-2, 3, 4] results in 10, which is the maximum possible sum below or equal to 10. In the last example, since the matrix contains cells with values both positive and higher than 0, no submatrix sum can meet the criteria, and thus, the output is 0.","solution":"def max_submatrix_sum(R, C, S, matrix): Function to find the maximum submatrix sum in a given matrix that does not exceed S. max_sum = 0 for left in range(C): temp = [0] * R for right in range(left, C): for row in range(R): temp[row] += matrix[row][right] curr_sum = 0 subarray_sum = 0 for val in temp: curr_sum += val if curr_sum > S: curr_sum -= val continue if curr_sum >= max_sum: subarray_sum = curr_sum while curr_sum > S: curr_sum -= temp[temp.index(min(temp))] max_sum = max(max_sum, subarray_sum) return max_sum"},{"question":"You are given an array of n integers and two operations: 1. Swap the first and the last elements of the array. 2. Reverse the order of all elements between the second and the second-to-last positions (inclusive). Determine if it\'s possible to sort the array in non-decreasing order by applying any number of the given operations. Input The first line contains one positive integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line of each test case contains n integers a_1 … a_n (1 ≤ a_i ≤ 10^6). Output For each test case, output on a separate line: * YES, if it is possible to sort the array in non-decreasing order by using any number of the operations. * NO, otherwise. The letters in the words YES and NO can be outputted in any case. Example Input 3 4 4 3 2 1 5 1 2 3 4 5 6 3 1 2 4 5 6 Output YES YES NO","solution":"def can_sort_with_operations(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] if sorted(array) == array: results.append(\\"YES\\") continue if sorted(array) == [array[-1]] + array[1:-1][::-1] + [array[0]]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You will be given two integers `x` and `y` as input. Write a program that checks if exactly one of the integers is positive, and prints `YES` if the condition is met and `NO` otherwise. Constraints * -1000 leq x, y leq 1000 Input Input is given from Standard Input in the following format: ``` x y ``` Output If exactly one of the integers is positive, print `YES`; otherwise, print `NO`. Examples Input ``` -5 7 ``` Output ``` YES ``` Input ``` 6 2 ``` Output ``` NO ``` Input ``` 0 -3 ``` Output ``` NO ```","solution":"def check_one_positive(x, y): Checks if exactly one of the integers x or y is positive. Returns \\"YES\\" if exactly one is positive, otherwise \\"NO\\". if (x > 0 and y <= 0) or (x <= 0 and y > 0): return \\"YES\\" else: return \\"NO\\" # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read x, y = map(int, input().strip().split()) print(check_one_positive(x, y))"},{"question":"You are given a warehouse containing `n` items arranged in a single row. Each item has a weight, and there is a maximum weight limit for the items within any contiguous subarray. Your task is to determine the length of the longest subarray where the total weight does not exceed the given maximum weight limit. Input The first line contains two integers `n` and `L` (1 ≤ n ≤ 10^5, 1 ≤ L ≤ 10^9), representing the number of items in the warehouse and the maximum allowable weight for any subarray, respectively. The second line contains `n` integers, where the `i-th` integer `wi` (1 ≤ wi ≤ 10^6) represents the weight of the `i-th` item. Output Print the length of the longest subarray where the sum of the weights does not exceed `L`. Example Input 6 10 3 1 2 1 5 4 Output 4 Explanation The longest subarray with a weight sum not exceeding 10 is [3, 1, 2, 1] with a sum of 7. Any other subarray sums would either exceed the limit or be shorter in length.","solution":"def longest_subarray(n, L, weights): left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += weights[right] while current_sum > L: current_sum -= weights[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of integers where each integer represents the profit or loss for each day. Your goal is to determine the maximum profit that can be made by buying and selling on the same day. A transaction consists of buying on day i and selling on day j (i <= j). You need to find a contiguous subarray which has the maximum sum. Input The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. For each test case: - The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the list. - The second line contains n integers, representing the profit or loss for each day. The integers are space-separated and can range from -10^4 to 10^4. Output For each test case, output a single integer, the maximum profit that can be achieved with a transaction on a contiguous subarray. Example Input 3 5 3 -2 5 -1 2 4 -1 -2 -3 -4 6 1 2 3 4 -10 5 Output 7 -1 10 Note In the first test case, the maximum profit is obtained by selecting the subarray [3, -2, 5, -1, 2], which sums up to 7. In the second test case, the best we can do is to select the subarray [-1], resulting in a profit of -1. In the third test case, the maximum profit is obtained by selecting the subarray [1, 2, 3, 4] which sums up to 10.","solution":"def maximum_profit(test_cases): results = [] for case in test_cases: n, profits_or_losses = case max_profit = float(\'-inf\') current_sum = 0 for profit_loss in profits_or_losses: current_sum += profit_loss if current_sum > max_profit: max_profit = current_sum if current_sum < 0: current_sum = 0 results.append(max_profit) return results # Function to parse the input data and run the maximum_profit function def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) profits_or_losses = list(map(int, lines[index + 1].split())) test_cases.append((n, profits_or_losses)) index += 2 return maximum_profit(test_cases)"},{"question":"Vanya has a rectangular chocolate bar consisting of n × m squares. Vanya can cut out one or multiple pieces of the bar by making horizontal and vertical cuts along the lines between squares. However, Vanya can only eat exactly one piece of chocolate that consists of exactly k squares. Your task is to determine if it is possible for Vanya to cut out exactly one piece of chocolate that consists of exactly k squares. Input The first line of the input contains three integers n, m, and k (1 <= n, m <= 1000, 1 <= k <= n * m) — the dimensions of the chocolate bar and the number of squares Vanya wants to eat. Output Print \\"YES\\" (without quotes) if Vanya can cut the chocolate bar to get exactly one piece of k squares, otherwise print \\"NO\\" (without quotes). Examples Input 3 2 4 Output YES Input 2 2 3 Output NO","solution":"def can_cut_chocolate(n, m, k): Determine if it\'s possible to cut a rectangular chocolate bar of n x m squares to get exactly one piece of chocolate with exactly k squares. if k > n * m: return \\"NO\\" for i in range(n + 1): for j in range(m + 1): if i * j == k or (n - i) * j == k or i * (m - j) == k or (n - i) * (m - j) == k: return \\"YES\\" return \\"NO\\""},{"question":"Yui is a botanist who loves exploring rainforests. One day, while exploring a remote rainforest, Yui comes across a peculiar species of flowering plants that bloom in a unique pattern. Each flower blooms exactly once during the day for a very short period, and the time each flower blooms forms a unique sequence. Yui wants to photograph as many unique flowers as possible, but she has only one camera. She can set her camera to capture specific flowers at certain times, but she needs to decide the optimal schedule to maximize her unique discoveries in the limited time she has. You are given Yui\'s available time in the rainforest and the blooming schedule of the flowers. Each flower\'s blooming time is represented in seconds past midnight within the same day. Write a program to help Yui figure out the maximum number of unique flowers she can photograph and the times she should set her camera. Notes on Submission Multiple datasets are given in the format described below. The first line of the input data gives the number of datasets. For each dataset, you need to output the results in the specified format. Input The first line of each dataset gives two integers, P and Q. P represents the total number of seconds Yui has in the rainforest and Q represents the number of unique flowers. Each of the next Q lines contains a single integer indicating the blooming time of each flower in seconds past midnight. The flowers are guaranteed to bloom at distinct times and the blooming times are given in ascending order. Output For each dataset, print the maximum number of unique flowers Yui can photograph, followed by the blooming times of those flowers in seconds past midnight in ascending order. Example Input 2 3600 5 3600 7200 10800 14400 18000 1800 3 300 1000 1700 Output 1 3600 2 300 1000","solution":"def max_unique_flowers(P, blooming_times): Returns the maximum number of unique flowers that can be photographed and their blooming times. :param P: int: Total time in seconds Yui has in the rainforest. :param blooming_times: List[int]: List of blooming times in seconds past midnight. :return: Tuple[int, List[int]]: (max number of unique flowers, list of blooming times in ascending order) count = 0 times = [] for time in blooming_times: if P >= time: count += 1 times.append(time) P -= time return count, times def process_input(input_data): datasets = input_data.strip().split(\'n\') num_datasets = int(datasets[0]) results = [] i = 1 for _ in range(num_datasets): P, Q = map(int, datasets[i].split()) blooming_times = list(map(int, datasets[i + 1:i + Q + 1])) count, times = max_unique_flowers(P, blooming_times) results.append(f\\"{count}n{\' \'.join(map(str, times))}\\") i += Q + 1 return \\"n\\".join(results)"},{"question":"A company wants to create a software system to manage employee leave records. Each employee has a unique ID and a list of leave requests. Each leave request contains a start date and an end date. The company has decided on a new policy: each employee can only take leave for a maximum of K consecutive days. If an employee\'s leave request exceeds K days, it should be split into multiple requests, each with a maximum of K days. If the leave spans into the next month, it should also start afresh from the 1st of the next month. Your task is to write a program that reads the leave requests and converts them according to the new policy. Input Format - The first line contains an integer K, representing the maximum number of consecutive leave days allowed. - The second line contains an integer N, representing the number of leave requests. - The next N lines each contain a leave request in the format \\"YYYY-MM-DD YYYY-MM-DD\\", where the first date is the start date and the second date is the end date. Output Format - For each leave request from the input, output the adjusted leave requests, each on a new line, following the format \\"YYYY-MM-DD YYYY-MM-DD\\". Constraints - 1 ≤ K ≤ 31 - 1 ≤ N ≤ 100 - All dates are valid dates in the format \\"YYYY-MM-DD\\". - The start date will always be before or on the same day as the end date. SAMPLE INPUT 5 3 2023-10-01 2023-10-20 2023-12-28 2024-01-05 2023-11-10 2023-11-12 SAMPLE OUTPUT 2023-10-01 2023-10-05 2023-10-06 2023-10-10 2023-10-11 2023-10-15 2023-10-16 2023-10-20 2023-12-28 2023-12-31 2024-01-01 2024-01-05 2023-11-10 2023-11-12 Explanation In this example, the first request is split into four segments of 5 days each since it lasts for 20 days, which is greater than K=5. The second request crosses into the next month and next year, so it is split into two segments where the first ends on the last day of December and the next starts from the first day of January. The third request fits within the maximum allowed duration without any modifications.","solution":"from datetime import datetime, timedelta def split_leave_requests(K, requests): def split_request(start_date, end_date, K): segments = [] current_start = start_date while current_start <= end_date: # Find end of current segment current_end = min(current_start + timedelta(days=K - 1), end_date) # Split at month boundary if necessary if current_start.month != current_end.month: next_month_start = (current_start.replace(day=1) + timedelta(days=32)).replace(day=1) current_end = next_month_start - timedelta(days=1) segments.append((current_start, current_end)) current_start = current_end + timedelta(days=1) return segments result = [] for req in requests: start_date = datetime.strptime(req[0], \\"%Y-%m-%d\\") end_date = datetime.strptime(req[1], \\"%Y-%m-%d\\") split_segments = split_request(start_date, end_date, K) for seg in split_segments: result.append((seg[0].strftime(\\"%Y-%m-%d\\"), seg[1].strftime(\\"%Y-%m-%d\\"))) return result # Example usage: # K = 5 # requests = [ # (\\"2023-10-01\\", \\"2023-10-20\\"), # (\\"2023-12-28\\", \\"2024-01-05\\"), # (\\"2023-11-10\\", \\"2023-11-12\\") # ] # print(split_leave_requests(K, requests))"},{"question":"Create a function `rainbow_sort` that takes a list of strings representing colors (\\"red\\", \\"orange\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"indigo\\", \\"violet\\") as input and returns a new list with the colors sorted in the order they appear in the rainbow. # Function Signature ```python def rainbow_sort(colors: List[str]) -> List[str]: pass ``` # Input - A list of strings `colors` where each string is one of the seven colors of the rainbow. The list can have repeated colors and no color will be outside the rainbow colors, but not all colors might be present. # Output - A list of strings sorted so that the colors appear in the order of the rainbow. # Example ```python print(rainbow_sort([\\"blue\\", \\"red\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"violet\\"])) # Output: [\\"red\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"blue\\", \\"violet\\"] ``` # Constraints - The input list will have at least 1 and at most 100,000 colors.","solution":"def rainbow_sort(colors): Sorts the list of colors in the order they appear in the rainbow. rainbow_order = { \\"red\\": 1, \\"orange\\": 2, \\"yellow\\": 3, \\"green\\": 4, \\"blue\\": 5, \\"indigo\\": 6, \\"violet\\": 7 } return sorted(colors, key=lambda color: rainbow_order[color])"},{"question":"You are given an array of integers `nums` and an integer `k`. Your task is to determine whether there exists a pair of distinct indices `(i, j)` such that `nums[i] + nums[j]` is divisible by `k`. Write a function `check_divisible_sum_pairs(nums, k)` that returns `True` if there exists such a pair, otherwise, it returns `False`. # Function Signature ```python def check_divisible_sum_pairs(nums: List[int], k: int) -> bool: ``` # Input - `nums`: A list of integers, length `n` (1 <= n <= 10^5), where each integer `nums[i]` (0 <= nums[i] <= 10^9). - `k`: An integer (1 <= k <= 10^9). # Output - Return `True` if there exists a pair of distinct indices `(i, j)` such that `nums[i] + nums[j]` is divisible by `k`, otherwise return `False`. # Example ```python nums = [1, 2, 3, 4, 5] k = 3 Output: True # Explanation: nums[0] + nums[2] = 1 + 3 = 4, and 4 % 3 = 1 ≠ 0 # but nums[1] + nums[2] = 2 + 3 = 5, and 5 % 3 = 2 ≠ 0 # nums[0] + nums[1] = 1 + 2 = 3, and 3 % 3 = 0 meets the condition (i = 0, j = 1) ``` ```python nums = [10, 15, 20, 25, 30] k = 5 Output: True # Explanation: All pairs of integers from the array are divisible by 5. ```","solution":"from typing import List def check_divisible_sum_pairs(nums: List[int], k: int) -> bool: remainders = {} for num in nums: remainder = num % k if remainder in remainders: return True complement = (k - remainder) % k remainders[complement] = True return False"},{"question":"You are organizing a tournament where n teams will play matches against each other. Each team will play exactly one match against each other team. The tournament will take place over several days. You are to schedule the matches in such a way that no team plays more than one match per day. Input The first line contains a single integer n (2 ≤ n ≤ 50) — the number of teams. Output Print a schedule of matches in the following format: for each day, print the matches scheduled on that day. Each match should be represented by a pair of integers (a, b) where a and b are the team numbers (1-indexed). Constraints - Each team must play exactly one match against each other team. - A team can play at most one match per day. Example Input 4 Output Day 1: (1, 2), (3, 4) Day 2: (1, 3), (2, 4) Day 3: (1, 4), (2, 3) Note In this example, each team plays against each other team once, and no team plays more than one match per day.","solution":"def generate_tournament_schedule(n): Generates a schedule for a tournament where each of the n teams plays exactly one match against each other team. The schedule ensures no team plays more than one match per day. Parameters: n (int): the number of teams (2 ≤ n ≤ 50) Returns: list of lists: each inner list contains tuples representing matches scheduled for that day days = [] matches = [(i, j) for i in range(1, n+1) for j in range(i+1, n+1)] used = [False] * len(matches) while not all(used): day_matches = [] teams_playing = set() for idx, (a, b) in enumerate(matches): if not used[idx] and a not in teams_playing and b not in teams_playing: day_matches.append((a, b)) teams_playing.add(a) teams_playing.add(b) used[idx] = True days.append(day_matches) return days"},{"question":"You are given a list of non-negative integers a1, a2, ..., an. Initially, you are at position 1. You can jump from position i to position i + ai. Your task is to determine if it is possible to reach the last position of the list. Input The first line contains one integer n (1 ≤ n ≤ 10^5), the number of elements in the list. The second line contains n non-negative integers a1, a2, ..., an, where 0 ≤ ai ≤ 10^5. Output Print \\"YES\\" if it is possible to reach the last position. Otherwise, print \\"NO\\". Examples Input 5 2 3 1 1 4 Output YES Input 5 3 2 1 0 4 Output NO Explanation In the first example, you can jump as follows: 1 -> 3 -> 4 -> 5 In the second example, it is not possible to reach the last position from any starting point.","solution":"def can_reach_last_position(n, arr): Determines if you can reach the last position in the list by jumping as per the given rules. Parameters: n (int) : The number of elements in the list. arr (list) : The list of non-negative integers indicating the maximum jump length from that position. Returns: str : \\"YES\\" if the last position can be reached, otherwise \\"NO\\". furthest = 0 for i in range(n): if i > furthest: return \\"NO\\" furthest = max(furthest, i + arr[i]) if furthest >= n - 1: return \\"YES\\" return \\"NO\\""},{"question":"You are designing an advanced sorting algorithm for a new artificial intelligence project. Given an array of n integers, you need to sort this array in a specific way. The array should be sorted in a wave-like fashion: the first element is greater than or equal to the second, the second is less than or equal to the third, and so on. In other words, for an array a of integers, the sorted array should preferably satisfy a[0] >= a[1] <= a[2] >= a[3] <= a[4] and so on. If the array has multiple valid wave-like sorted results, return any one of them. Your task is to write a function that, given an array of integers, sorts it in the required wave-like fashion. Input Format - The first line of the input contains an integer T, the number of test cases. - For each test case: - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers, the elements of the array. Output Format For each test case, print the elements of the array sorted in a wave-like fashion on a single line. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 Sample Input 3 5 3 6 5 10 7 6 1 2 3 4 5 6 4 20 10 40 30 Sample Output 6 3 10 5 7 2 1 4 3 6 5 20 10 40 30 Explanation In the first case, the sorted array in wave-like fashion can be one of the following: {6, 3, 10, 5, 7} or {10, 5, 7, 6, 3}. In the second case, the sorted array in wave-like fashion can be one of the following: {2, 1, 4, 3, 6, 5} or {4, 1, 6, 3, 5, 2}. In the third case, the array is already in a wave-like fashion. Your algorithm only needs to ensure there are no three consecutive elements that violate the wave-like pattern—there will be multiple correct solutions but any will be accepted.","solution":"def wave_sort(arr): Sorts the array in a wave-like fashion. For any array arr, arr[i] >= arr[i+1] and arr[i+1] <= arr[i+2] for i = 0,2,4,... This pattern continues till the end of the array. arr.sort() for i in range(0, len(arr) - 1, 2): arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr def process_test_cases(data): output = [] index = 0 T = data[index] index += 1 for _ in range(T): n = data[index] index += 1 arr = data[index:index + n] index += n sorted_arr = wave_sort(arr) output.append(\\" \\".join(map(str, sorted_arr))) return output"},{"question":"Nina has a collection of colored beads. She likes to arrange them in strings where no two adjacent beads are of the same color. She wonders how many different strings of a given length she can make from her beads, if she has an unlimited supply of beads but only a limited number of colors. You are given the number of colors `C` and the length of the string `L` as input. Your task is to determine the number of different strings of length `L` that Nina can form where no two adjacent beads have the same color. Input Format: The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains two integers `C` (the number of colors) and `L` (the length of the string). Output Format: For each test case, output a single integer - the number of valid strings of length `L` that can be formed using `C` colors. Constraints: 1 ≤ T ≤ 50 2 ≤ C ≤ 26 1 ≤ L ≤ 100 Example Input: 3 3 2 2 4 4 1 Example Output: 6 2 4 Explanation: For the first example with `C=3` and `L=2`, there are 3 choices for the first bead and 2 choices for the second bead (since it cannot be the same color as the first). Therefore, the number of valid strings is `3 * 2 = 6`. For the second example with `C=2` and `L=4`, the combinations are more complex, but since there are only two colors, the number of valid strings is determined by avoiding consecutive same-colored beads. For the third example with `C=4` and `L=1`, any color can be chosen, so there are 4 possible strings.","solution":"def number_of_valid_strings(C, L): Returns the number of valid strings of length L that can be formed from C colors where no two adjacent beads are of the same color. if L == 1: return C return C * pow(C - 1, L - 1) def solve(test_cases): results = [] for C, L in test_cases: results.append(number_of_valid_strings(C, L)) return results"},{"question":"Aria is working on a text-processing tool and needs your help. She is given a string `s` of length `n` consisting of lowercase English letters. She wants to make the string a palindrome by inserting the fewest number of characters possible. If there are multiple ways to achieve this, Aria wants to find the lexicographically smallest palindrome. A palindrome is a string that reads the same backward as forward. To determine the lexicographically smallest palindrome, compare their characters from left to right. Determine the palindrome Aria will obtain after performing the least insertions. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the string `s`. The second line contains the string `s`, consisting of lowercase English letters. Output In one line, print the palindrome which can be obtained from `s` with the fewest insertions and is lexicographically smallest. Examples Input 4 abba Output abba Input 3 abc Output abcba Input 5 racec Output racecar Note In the first example, the input string is already a palindrome, so no insertions are needed. In the second example, you can insert \'b\' and \'c\' at the correct positions to make the palindrome \\"abcba\\". In the third example, you can insert \'a\' and \'r\' at appropriate positions to change \\"racec\\" to \\"racecar\\".","solution":"def make_palindrome(s): Returns the lexicographically smallest palindrome that can be obtained from the input string s with the fewest insertions. n = len(s) dp = [[0]*n for _ in range(n)] for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 def build_palindrome(i, j): if i > j: return \\"\\" if i == j: return s[i] if s[i] == s[j]: return s[i] + build_palindrome(i+1, j-1) + s[j] if dp[i+1][j] < dp[i][j-1]: return s[i] + build_palindrome(i+1, j) + s[i] if dp[i+1][j] > dp[i][j-1]: return s[j] + build_palindrome(i, j-1) + s[j] # When the values are equal, choose lexicographically smaller option opt1 = s[i] + build_palindrome(i+1, j) + s[i] opt2 = s[j] + build_palindrome(i, j-1) + s[j] return min(opt1, opt2) return build_palindrome(0, n-1)"},{"question":"Jennifer is helping her friend organize a book fair for their school\'s literary club. There are multiple stalls in the book fair, each with a different set of books. Jennifer wants to create a list of books such that each book is only listed once, even if it appears in multiple stalls. Additionally, Jennifer wants the list to be sorted alphabetically. Given the information about the books in the stalls, write a program that outputs the list of unique books in alphabetical order. Input: The first line contains T denoting the number of test cases. Each testcase starts with an integer n denoting the number of stalls. The next n lines contain a list of book titles available at each corresponding stall, each title separated by a space. Output: For each testcase, print the alphabetically sorted list of unique book titles, each title separated by a space. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 50 1 ≤ |title| ≤ 100 (title lengths) 1 ≤ number of books in each stall ≤ 100 SAMPLE INPUT 2 3 HarryPotter MobyDick OliverTwist MobyDick TheHobbit OliverTwist WarAndPeace 2 GreatExpectations ToKillAMockingbird TheGreatGatsby GreatExpectations SAMPLE OUTPUT HarryPotter MobyDick OliverTwist TheHobbit WarAndPeace GreatExpectations TheGreatGatsby ToKillAMockingbird Explanation In the first testcase, the unique books are: HarryPotter, MobyDick, OliverTwist, TheHobbit, and WarAndPeace. Sorted alphabetically, they become: HarryPotter, MobyDick, OliverTwist, TheHobbit, and WarAndPeace. In the second testcase, the unique books are: GreatExpectations, ToKillAMockingbird, and TheGreatGatsby. Sorted alphabetically, they become: GreatExpectations, TheGreatGatsby, and ToKillAMockingbird.","solution":"def get_unique_sorted_books(test_cases): This function processes test cases to output a list of unique book titles in alphabetical order. Parameters: test_cases (list): A list containing test cases where each test case is a list of strings for each stall. Returns: list: A list of strings with the unique sorted book titles for each test case. results = [] for stalls in test_cases: unique_books = set() for stall in stalls: books = stall.split() unique_books.update(books) sorted_books = sorted(unique_books) results.append(\\" \\".join(sorted_books)) return results def process_input(input_str): Process the input string and format it for computation. Parameters: input_str (str): Multi-line string input containing the test cases. Returns: list: A list of test cases to be passed to the function. lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) index += 1 stalls = [] for _ in range(n): stalls.append(lines[index]) index += 1 test_cases.append(stalls) return test_cases def format_output(results): Format the result list into a string for output. Parameters: results (list): List of strings which are the results from get_unique_sorted_books. Returns: str: A formatted string representation of the results. return \\"n\\".join(results)"},{"question":"story You are designing a new traffic light scheduling system for a busy intersection. The intersection has a single set of traffic lights with three states: Red, Green, and Yellow. Cars move only during the Green light. The traffic lights are programmed to follow a repeating cycle with specified durations for each state. The city wants to optimize the flow of traffic by adjusting the total cycle time, but it must always maintain specific ratios for the duration of each state (for example, Red:Green:Yellow = 2:1:1). problem Given the total cycle time and the required ratios for each state, determine the specific durations (in seconds) for Red, Green, and Yellow lights. The total cycle time will always be divisible by the sum of the ratios, ensuring that you can calculate an integer value for each duration. Input format The input consists of two lines: The first line contains an integer, T (1 ≤ T ≤ 10,000), representing the total cycle time in seconds. The second line contains three integers, R, G, and Y (1 ≤ R, G, Y ≤ 100), representing the ratio of Red, Green, and Yellow light durations, respectively. Output format Output three integers, the durations (in seconds) for Red, Green, and Yellow lights respectively, separated by spaces. Example Input example 1: 120 2 1 1 Output example 1: 60 30 30 In this example, the total cycle time is 120 seconds, and the ratio for Red:Green:Yellow is 2:1:1. The total of the ratios is 4, so each unit of the ratio corresponds to 120 / 4 = 30 seconds. Therefore, the durations are 60 seconds for Red, 30 seconds for Green, and 30 seconds for Yellow. Input example 2: 90 3 2 1 Output example 2: 45 30 15 In this example, the total cycle time is 90 seconds, and the ratio for Red:Green:Yellow is 3:2:1. The total of the ratios is 6, so each unit of the ratio corresponds to 90 / 6 = 15 seconds. Therefore, the durations are 45 seconds for Red, 30 seconds for Green, and 15 seconds for Yellow.","solution":"def traffic_light_durations(T, R, G, Y): Returns the durations of Red, Green, and Yellow lights based on the total cycle time and given ratios. total_ratio = R + G + Y factor = T // total_ratio red_duration = R * factor green_duration = G * factor yellow_duration = Y * factor return red_duration, green_duration, yellow_duration"},{"question":"You are given an array of n positive integers and a separate integer k. You want to determine if it\'s possible to rearrange the array such that the difference between the maximum and minimum values in every subarray of size k is at most k. Formally, you need to check if there is any permutation p of the array a such that for every i (1 ≤ i ≤ n - k + 1), max(p[i], p[i + 1], ..., p[i + k - 1]) - min(p[i], p[i + 1], ..., p[i + k - 1]) ≤ k. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — length of the array and subarray size. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the elements of the array. Output Output \\"YES\\" if it is possible to rearrange the array as described, otherwise, print \\"NO\\". Examples Input 6 3 1 3 6 2 7 8 Output NO Input 5 5 4 3 2 5 1 Output YES Note In the first example: No matter how you rearrange the array, there will be at least one subarray of size 3 such that the difference between the maximum and minimum values is greater than 3. Hence the output should be \\"NO\\". In the second example: The array already meets the condition since when looking at the whole array, the difference between the maximum (5) and minimum (1) values is exactly 4, which is equal to k. Therefore, the output should be \\"YES\\".","solution":"def can_rearrange_array(n, k, arr): if k == 1: return \\"YES\\" sorted_arr = sorted(arr) for i in range(len(sorted_arr) - k + 1): if sorted_arr[i + k - 1] - sorted_arr[i] > k: return \\"NO\\" return \\"YES\\""},{"question":"Write a program to evaluate a series of password strings based on specified rules. According to the rules, a valid password: 1. Must be at least 8 characters long. 2. Must contain at least one uppercase letter. 3. Must contain at least one lowercase letter. 4. Must contain at least one digit. 5. Must contain at least one special character from the set: `!@#%^&*()-+` Given a list of passwords, determine whether each password is valid or not based on the above rules. Input The first line of the input contains an integer n (1 ≤ n ≤ 10), the number of passwords to be evaluated. Each of the next n lines contains a password string. Each password string consists only of printable ASCII characters and its length does not exceed 100. Output For each password, output \\"Valid\\" if the password follows all the rules, or \\"Invalid\\" if it does not. Examples Input 3 Abcdef1! Xyz@1234 short1A Output Valid Valid Invalid","solution":"import re def evaluate_passwords(passwords): result = [] special_characters = \\"!@#%^&*()-+\\" regex_upper = re.compile(r\'[A-Z]\') regex_lower = re.compile(r\'[a-z]\') regex_digit = re.compile(r\'d\') regex_special = re.compile(r\'[!@#%^&*()-+]\') for password in passwords: if (len(password) >= 8 and re.search(regex_upper, password) and re.search(regex_lower, password) and re.search(regex_digit, password) and re.search(regex_special, password)): result.append(\\"Valid\\") else: result.append(\\"Invalid\\") return result"},{"question":"A company is organizing a programming competition, and they need to assign unique participant IDs in a way that avoids patterns which could be exploited. Each participant must be given an ID that\'s a positive integer and the ID should not have any consecutive repeating digits. Write a function `is_valid_id` that takes a single integer argument `participant_id` and returns `True` if the ID is valid according to the given rule, and `False` otherwise. INPUT An integer `participant_id` representing the ID to be checked. OUTPUT A boolean value `True` or `False`. CONSTRAINTS 1 ≤ participant_id ≤ 10^18 EXAMPLES SAMPLE INPUT 123456 SAMPLE OUTPUT True SAMPLE INPUT 112345 SAMPLE OUTPUT False SAMPLE INPUT 898989 SAMPLE OUTPUT True","solution":"def is_valid_id(participant_id): Returns True if the ID is valid (contains no consecutive repeating digits), otherwise False. str_id = str(participant_id) for i in range(1, len(str_id)): if str_id[i] == str_id[i - 1]: return False return True"},{"question":"GreenMart is an online grocery store that sells products in bulk. They are currently running a promotion where they give discounts based on the quantity of items a customer buys. However, applying these discounts manually on every purchase is overwhelming, and they\'ve decided to write an algorithm to automate the process. The discount rules are as follows: - If a customer buys between 1 and 10 units (inclusive) of a product, they get a 5% discount. - If a customer buys between 11 and 20 units (inclusive) of a product, they get a 10% discount. - If a customer buys more than 20 units of a product, they get a 20% discount. Given the price per unit of a product and the quantity bought by a customer, calculate the total price after applying the appropriate discount. # Input - The first line contains an integer `T` denoting the number of test cases. The description of `T` test cases follow. - Each test case consists of a single line containing two space-separated integers: `P` (1 ≤ P ≤ 1000) denoting the price per unit of the product, and `Q` (1 ≤ Q ≤ 100) denoting the quantity of the product bought. # Output - For each test case, output a single line containing the total price after applying the discount, rounded to two decimal places. # Example Input: ``` 3 100 5 200 15 150 25 ``` Output: ``` 475.00 2700.00 3000.00 ``` Explanation: 1. For the first test case, 5 units with 5% discount: (5 times 100 times 0.95 = 475.00) 2. For the second test case, 15 units with 10% discount: (15 times 200 times 0.90 = 2700.00) 3. For the third test case, 25 units with 20% discount: (25 times 150 times 0.80 = 3000.00)","solution":"def calculate_discount(P, Q): Calculates the total price after applying the discount based on the quantity purchased. P: price per unit Q: quantity purchased if 1 <= Q <= 10: discount_rate = 0.05 elif 11 <= Q <= 20: discount_rate = 0.10 else: discount_rate = 0.20 discount_multiplier = 1 - discount_rate total_price = P * Q * discount_multiplier return round(total_price, 2) def process_test_cases(test_cases): results = [] for P, Q in test_cases: results.append(calculate_discount(P, Q)) return results"},{"question":"A treasure hunter is trying to find the shortest path in a treasure grid. The grid is represented by a matrix where each cell can either be an open space (marked as \'.\') or an obstacle (marked as \'#\'). The hunter can move up, down, left, or right, but cannot move through obstacles. If the hunter reaches the treasure, the function should return the shortest path length; otherwise, return -1. Input The first line of the input contains two integers R (1 ≤ R ≤ 100) and C (1 ≤ C ≤ 100) representing the number of rows and columns in the grid, respectively. The next R lines each contain a string of length C composed of \'.\' and \'#\' characters, representing the grid. The starting position of the treasure hunter is always in the top-left corner (grid[0][0]) and the treasure is always in the bottom-right corner (grid[R-1][C-1]). Output Print the length of the shortest path to the treasure. If there is no valid path, print -1. Examples Input ``` 5 5 ..... .#. ..... .#. ..... ``` Output ```3``` Input ``` 2 2 .# #. ``` Output ```-1``` Input ``` 3 3 ..# .#. ... ``` Output ```4```","solution":"from collections import deque def shortest_path_to_treasure(grid): R, C = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 # No valid path if start or end is blocked directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if (row, col) == (R-1, C-1): return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < R and 0 <= new_col < C and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1 # No valid path # Helper function for converting input strings to grid def string_input_to_grid(input_string): input_lines = input_string.strip().split(\'n\') R, C = map(int, input_lines[0].split()) grid = [list(line.strip()) for line in input_lines[1:R+1]] return grid"},{"question":"You are given an array of integers. Your task is to create and print a new array such that each element at index \'i\' of the new array is the product of all the numbers in the original array except the one at \'i\'. INPUT The first line of input contains an integer \'n\', the number of elements in the array. The second line contains \'n\' space-separated integers representing the elements of the array. OUTPUT Output the new array as a single line of space-separated integers. CONSTRAINTS 1 ≤ n ≤ 1000 -1000 ≤ arr[i] ≤ 1000 SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT 24 12 8 6","solution":"def product_except_self(arr): Returns a new array such that each element at index \'i\' is the product of all the numbers in the original array except the one at \'i\'. n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"You are provided with an empty 2D grid of size n x m. The grid initially contains only \'.\' characters representing empty cells. You need to place a \'+\' character on this grid such that the cells affected by the \'+\' do not overlap with any cell previously filled by another \'+\'. The \'+\' character occupies one central cell (where you place the \'+\') and four cells adjacent to it (above, below, left, and right). Write a function to output the number of non-overlapping \'+\' characters that can be placed on the grid. Note that you should maximize the number of \'+\' characters on the grid. Input The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid. Output Print a single integer representing the maximum number of non-overlapping \'+\' characters that can be placed on the grid. Examples Input 3 3 Output 1 Input 5 5 Output 4 Note In the first sample, you can place at most one \'+\' at the center of the grid, because placing any other \'+\' will cause an overlap. In the second sample, you can place four \'+\' characters on the grid maximizing the coverage without any overlaps.","solution":"def max_non_overlapping_pluses(n, m): Given dimensions of a grid n x m, return the maximum number of non-overlapping \'+\' characters that can be placed on the grid. if n < 3 or m < 3: return 0 rows = (n - 1) // 2 cols = (m - 1) // 2 return rows * cols"},{"question":"In a mysterious land, there are N trees arranged in a straight line, and each tree has a certain number of fruits. Little M, the farmer, wants to gather exactly K fruits by picking fruits continuously from a segment of these trees. Given the number of fruits on each tree and the integer K, determine if it is possible to collect exactly K fruits by picking fruits from one or more consecutive trees. If possible, find a segment of consecutive trees that sum up to K. If there are multiple segments, you may print any of them. Input The first line contains two integers N and K (1 ≤ N ≤ 100, 1 ≤ K ≤ 10^5) — the number of trees and the exact number of fruits Little M wants to gather. The second line contains N integers ai (1 ≤ ai ≤ 1000) — the number of fruits on the i-th tree. Output If there exists a segment of consecutive trees that sums to exactly K fruits, output \\"YES\\" on the first line. On the second line, output two integers L and R where 1 ≤ L ≤ R ≤ N indicating the segment from the L-th tree to the R-th tree (inclusive). If there are no such segments, output \\"NO\\". Examples Input 5 10 1 2 3 4 5 Output YES 1 4 Input 4 11 1 2 3 4 Output NO","solution":"def find_segment_with_k_fruits(N, K, fruits): Given the number of fruits on each tree and the integer K, determines if it is possible to collect exactly K fruits by picking fruits from one or more consecutive trees. Parameters: N (int): The number of trees. K (int): The exact number of fruits to gather. fruits (list of int): The number of fruits on each tree. Returns: str: \\"YES\\" if such a segment exists, otherwise \\"NO\\". tuple: (L, R) indices of the start and end of the segment if it exists, otherwise None. current_sum = 0 start = 0 for end in range(N): current_sum += fruits[end] while current_sum > K and start <= end: current_sum -= fruits[start] start += 1 if current_sum == K: return \\"YES\\", (start + 1, end + 1) return \\"NO\\", None # Example Usage: # print(find_segment_with_k_fruits(5, 10, [1, 2, 3, 4, 5])) # Output: (\'YES\', (1, 4))"},{"question":"Andrew is a city planner and he needs to design a new transportation grid for a company town with n intersections and m bidirectional roads connecting these intersections. Each road has a specific travel time. Andrew wants to ensure the company employees can travel efficiently within the town, so he needs to minimize the maximum travel time between any two intersections. Andrew has information about all the intersections and roads. Help Andrew find the minimal value of the maximum travel time between any pair of intersections. # Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of intersections and the number of roads. Each of the next m lines describe a road in the format u v w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — two intersections connected by this road and the travel time. # Output Output a single integer — the minimal value of the maximum travel time between any pair of intersections. # Examples Input ``` 4 5 1 2 5 1 3 10 2 3 2 2 4 3 3 4 1 ``` Output ``` 5 ``` Input ``` 3 3 1 2 4 2 3 2 1 3 5 ``` Output ``` 4 ``` # Note In the first example, by selecting the paths 1->2 and 2->4->3, the maximum travel time between any two intersections is minimized to 5. This ensures that the worst travel time between intersections is as small as possible. In the second example, selecting path 1->2->3 results in a maximum travel time of 4, which is the best possible scenario.","solution":"import heapq import sys def minimal_max_travel_time(n, m, roads): def dijkstra(adj, src): distances = [float(\'inf\')] * (n + 1) distances[src] = 0 min_heap = [(0, src)] while min_heap: current_distance, u = heapq.heappop(min_heap) if current_distance > distances[u]: continue for v, weight in adj[u]: distance = max(current_distance, weight) if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return distances adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) minimal_max_time = float(\'inf\') for i in range(1, n + 1): longest_distance_from_i = max(dijkstra(adj, i)[1:]) minimal_max_time = min(minimal_max_time, longest_distance_from_i) return minimal_max_time"},{"question":"You are given a list of intervals representing the working hours of employees in a company. Each interval is defined by a pair of integers: start time and end time, indicating when an employee starts and finishes their work. The goal is to determine the minimum number of meeting rooms required to accommodate all employees such that no two employees who are working simultaneously share the same meeting room. Constraints * 1 leq N leq 10^5 * 0 leq start_i < end_i leq 10^5 Input The input is given in the following format. N start_1 end_1 start_2 end_2 : start_N end_N Output Print the minimum number of meeting rooms required in a line. Examples Input 3 1 4 2 5 7 9 Output 2 Input 4 0 30 5 10 15 20 25 35 Output 2","solution":"def min_meeting_rooms(intervals): if not intervals: return 0 # Initialize variables to track start and end times start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) start_pointer, end_pointer = 0, 0 used_rooms = 0 max_rooms_needed = 0 # Iterate through all the intervals while start_pointer < len(intervals): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 max_rooms_needed = max(max_rooms_needed, used_rooms) return max_rooms_needed"},{"question":"To design a parking system, we need to simulate the interactions between users and parking spots in a parking garage. Assume the garage has three types of parking spots: large, medium, and small, and the number of spots available for each type is given. Each user has a specific car type for which they need a corresponding parking spot: (1) for big cars, they need a large spot, (2) for medium cars, they need at least a medium spot, and (3) for small cars, they need at least a small spot. Create a class `ParkingSystem` that manages the parking notation. Your class should include the following methods: - `ParkingSystem(int big, int medium, int small)`: Initializes the object with the number of slots for each type of car. - `bool addCar(int carType)`: Checks if there is a slot available for the given car type. If so, parks the car in the slot and returns `true`; otherwise, returns `false`. # Example ```python # Instantiate the parking system with 1 large, 1 medium, and 0 small spots parkingSystem = ParkingSystem(1, 1, 0) # Try to park a big car (Should return True) print(parkingSystem.addCar(1)) # Try to park a medium car (Should return True) print(parkingSystem.addCar(2)) # Try to park a small car (Should return False) print(parkingSystem.addCar(3)) # Try to park another big car (Should return False) print(parkingSystem.addCar(1)) ``` Input - The first line contains three integers B, M, and S (0 ≤ B, M, S ≤ 1000), representing the number of large, medium, and small parking spots respectively. - The second line contains a single integer N (1 ≤ N ≤ 1000), representing the number of incoming cars. - The next N lines each contain an integer representing the car type (1, 2 or 3). Output - The program should output N lines, each containing either `true` or `false`, depending on whether the car was successfully parked. # Constraints - Only one car is processed at a time. - The `ParkingSystem` class must manage the parking of cars without errors or over-allocation of spots. # Implementation Here is a sample implementation for guidance: ```python class ParkingSystem: def __init__(self, big: int, medium: int, small: int): self.big = big self.medium = medium self.small = small def addCar(self, carType: int) -> bool: if carType == 1: if self.big > 0: self.big -= 1 return True else: return False elif carType == 2: if self.medium > 0: self.medium -= 1 return True else: return False elif carType == 3: if self.small > 0: self.small -= 1 return True else: return False # Input Reading and Function Usage if __name__ == \'__main__\': B, M, S = map(int, input().split()) N = int(input()) parkingSystem = ParkingSystem(B, M, S) for _ in range(N): carType = int(input()) print(parkingSystem.addCar(carType)) ``` # Sample Input ``` 1 1 0 4 1 2 3 1 ``` # Sample Output ``` true true false false ```","solution":"class ParkingSystem: def __init__(self, big: int, medium: int, small: int): # Initialize the number of parking spots for each type self.big = big self.medium = medium self.small = small def addCar(self, carType: int) -> bool: # Depending on the car type, check availability and reduce spot count if available if carType == 1: if self.big > 0: self.big -= 1 return True else: return False elif carType == 2: if self.medium > 0: self.medium -= 1 return True else: return False elif carType == 3: if self.small > 0: self.small -= 1 return True else: return False else: return False # In case of an invalid carType"},{"question":"Given a list of integers as input, reverse the list and print the elements as a single string with each element separated by a hyphen (\\"-\\"). Constraints * 1 leq length of list leq 50 * Each element in the list is an integer. Input Input is given from Standard Input in the following format: A single line containing integers separated by spaces. Output Print the reversed list as a string with elements separated by hyphens. Examples Input 1 2 3 4 5 Output 5-4-3-2-1 Input 10 20 30 Output 30-20-10","solution":"def reverse_and_format(numbers: str) -> str: Given a string of space-separated integers, reverses the list of numbers and formats them as a single string with each element separated by a hyphen. :param numbers: str - A single line containing integers separated by spaces. :return: str - The reversed list as a string with elements separated by hyphens. # Split the input string into a list of integers num_list = numbers.split() # Reverse the list reversed_list = num_list[::-1] # Join the reversed list into a single string with elements separated by hyphens return \\"-\\".join(reversed_list) # Example usage: # print(reverse_and_format(\\"1 2 3 4 5\\")) # Output: \\"5-4-3-2-1\\""},{"question":"You are given an integer N. Your task is to generate an N-by-N grid of integers that satisfies the conditions below: 1. All integers in the grid must be between 1 and 10^9, inclusive. 2. Each integer in the grid must be unique. 3. The sum of the elements in any row or column must be odd. It is guaranteed that a solution always exists for the given constraints. # Constraints * 1 <= N <= 300 # Input The input is given on a single line as follows: ``` N ``` # Output Print N lines, each containing N integers. The integers on each line should be separated by spaces. # Example Input ``` 2 ``` Output ``` 2 3 5 4 ```","solution":"def generate_unique_grid(N): Generates an N x N grid of unique numbers between 1 and 10^9 such that each row and column sum to an odd number. grid = [[0] * N for _ in range(N)] current_number = 1 for i in range(N): for j in range(N): grid[i][j] = current_number current_number += 1 return grid def make_sums_odd(grid): Adjusts the grid to satisfy the condition that the sum of elements in any row or column is odd. N = len(grid) # Adjust the last element of each row to make the sum odd if needed def is_odd(num): return num % 2 == 1 for i in range(N): row_sum = sum(grid[i]) if not is_odd(row_sum): # If the row sum is even, increment the last element of the row by 1 grid[i][-1] += 1 # Adjust the last element of each column to ensure the column sum is odd if needed for j in range(N): col_sum = sum(grid[i][j] for i in range(N)) if not is_odd(col_sum): # If the column sum is even, increment the last element of the column by 1 grid[-1][j] += 1 return grid def generate_odd_sum_unique_grid(N): grid = generate_unique_grid(N) odd_grid = make_sums_odd(grid) return odd_grid def main(): import sys input = sys.stdin.read N = int(input().strip()) result = generate_odd_sum_unique_grid(N) for row in result: print(\' \'.join(map(str, row)))"},{"question":"Write a function that takes a string as input and compresses it. The compression is achieved by replacing sequences of the same character with that character followed by the number of occurrences. If the length of the compressed string is not smaller than the original string, return the original string. The function should handle both uppercase and lowercase characters. Input: The first line contains an integer T representing the number of test cases. Each subsequent line contains a string S of length L for which you need to apply the compression algorithm. Output: For each test case, display either the compressed string or the original string if the compressed string is not shorter. Constraints: 1 ≤ T ≤ 100 1 ≤ L ≤ 200 SAMPLE INPUT 2 aabcccccaaa abcdef SAMPLE OUTPUT a2b1c5a3 abcdef Explanation The first line of input represents the number of test cases, T. For the first test case string \\"aabcccccaaa\\", the compressed form \\"a2b1c5a3\\" is shorter, so we return it. For the second test case string \\"abcdef\\", the compressed form \\"a1b1c1d1e1f1\\" is longer, so we return the original string \\"abcdef\\". Write a function to solve the problem: ```python def compress_string(s): compressed = [] count = 1 for i in range(1, len(s) + 1): if i < len(s) and s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s def main(): T = int(input()) for _ in range(T): s = input().strip() print(compress_string(s)) main() ```","solution":"def compress_string(s): compressed = [] count = 1 for i in range(1, len(s) + 1): if i < len(s) and s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(compress_string(s)) return results"},{"question":"In a distant galaxy, there exists a planet named Nular where communication between the cities is conducted using a special type of satellite. There are `n` cities on Nular, numbered from 1 to `n`. The government of Nular wants to ensure that every city can directly or indirectly communicate with one particular city which houses the central communication hub. The planet\'s government has identified `m` potential direct satellite links between the cities. Each satellite link can relay messages in both directions. The government wants to know the minimum number of satellite links that need to be established to guarantee that every city can communicate directly or indirectly with the central communication hub. Input: - The first line contains two space-separated integers `n` and `m` (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) denoting the number of cities and the number of potential satellite links, respectively. - The following `m` lines each contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), denoting that a direct satellite link can be established between city `u` and city `v`. Output: - Print the minimum number of satellite links that need to be established to ensure that every city can communicate with the central communication hub. Example: Input: 5 6 1 2 2 3 3 4 4 5 1 5 2 4 Output: 3 Note: For the above sample, the minimum connections required to ensure that every city can communicate with the central communication hub (let’s assume city 1 is the central hub) is 3. One of the optimal ways is to establish links: - Between city 1 and city 2 - Between city 2 and city 3 - Between city 3 and city 5 Other combinations are possible, but the total number of satellite links in the most optimal solution will always be 3.","solution":"def minimum_satellite_links(n, m, links): from collections import defaultdict def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Create sorted edges list based on the lexicographical order of the given input edges = sorted(links) parent = [] rank = [] # Initialize sets for each city for node in range(n): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < n - 1: u, v = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v]) union(parent, rank, x, y) return len(result)"},{"question":"A toy manufacturer wants to route their delivery trucks to deliver toys to various stores in a city. The city can be represented as a grid with r rows and c columns. Each cell in the grid either represents a road (indicated by \'.\') or an obstacle (indicated by \'#\'). Trucks can only travel on roads and must avoid obstacles. The manufacturer wants to find the shortest path for a truck to deliver toys from their warehouse located at cell (sx, sy) to a store located at cell (tx, ty). Your task is to write a program that finds the shortest path from the warehouse to the store. If such a path exists, output the length of the path. If no path exists, output -1. Input The first line contains two integers r and c (1 ≤ r, c ≤ 1000) — the number of rows and columns in the grid. Each of the next r lines contains c characters representing the grid. Each character is either \'.\' (road) or \'#\' (obstacle). The last line contains four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ 1000) — the coordinates of the warehouse and the store respectively. The coordinates start from 1, so (1, 1) is the top-left corner of the grid. Output Output a single integer representing the length of the shortest path from the warehouse to the store. If no path exists, output -1. Examples Input 5 5 ..... .#.#. .#.#. .#.#. ..... 1 1 5 5 Output 8 Input 3 3 .#. .#. .#. 1 1 3 3 Output -1 Note In the first sample, the grid is a 5x5 layout with a clear path from the top-left to the bottom-right corner. The shortest path has a length of 8. In the second sample, the grid is a 3x3 layout with obstacles that make it impossible to reach the bottom-right corner from the top-left. Hence, the output is -1.","solution":"from collections import deque def shortest_path(r, c, grid, sx, sy, tx, ty): Finds the shortest path in a grid from (sx, sy) to (tx, ty). Returns the length of the shortest path or -1 if no path exists. # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert to zero-based indexing sx -= 1 sy -= 1 tx -= 1 ty -= 1 # Check if start or goal is an obstacle if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 # Use a queue to perform BFS queue = deque([(sx, sy)]) visited = [[False] * c for _ in range(r)] visited[sx][sy] = True distance = [[0] * c for _ in range(r)] while queue: x, y = queue.popleft() if (x, y) == (tx, ty): return distance[x][y] for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < r and 0 <= ny < c and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) return -1"},{"question":"Yamamoto No Party! Yamamoto Haya has N friends, each of whom will either come to her party or not come. For each friend i (1 leq i leq N) , Yamamoto knows the probability p_i that they will come to the party. Yamamoto is interested in finding out the expected number of friends who will come to the party. Input Input is given from standard input in the following format: N p_1 p_2 ldots p_N Output Output the expected number of friends coming to the party with a precision of 6 decimal places. Constraints * 1 leq N leq 1000 * 0 leq p_i leq 1 * All inputs are real numbers with at most 6 digits after the decimal point. Input example 1 4 0.5 0.6 0.7 0.8 Output example 1 2.600000 Input example 2 3 0.2 0.9 0.4 Output example 2 1.500000 Note: The expected number of friends coming to the party is calculated as the sum of the probabilities of each friend coming, i.e., p_1 + p_2 + ldots + p_N .","solution":"def expected_friends(N, probabilities): Returns the expected number of friends coming to the party. Parameters: N (int): Number of friends. probabilities (list of float): Probabilities that each friend will come to the party. Returns: float: The expected number of friends coming to the party. return sum(probabilities)"},{"question":"You are given an array of n integers. You need to determine if there exists a subset of these integers that sum to a given value S. Input The first line contains two integers n and S (1 ≤ n ≤ 200, 1 ≤ S ≤ 10^4) — the number of elements in the array and the required sum, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). Output Print \\"YES\\" if there exists a subset of the given integers which sum to S; otherwise, print \\"NO\\". Examples Input 5 9 3 34 4 12 5 Output YES Input 4 10 2 2 2 2 Output NO Note In the first example, the subset {4, 5} sums to 9, thus the output is \\"YES\\". In the second example, there is no subset that sums to 10, so the output is \\"NO\\".","solution":"def subset_sum(n, S, arr): Determines if there exists a subset of the given integers which sum to S. :param n: Number of elements in the array :param S: The required sum :param arr: List of integers :return: \\"YES\\" if there exists a subset with sum S, otherwise \\"NO\\" dp = [[False] * (S + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, S + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return \\"YES\\" if dp[n][S] else \\"NO\\""},{"question":"You are given a list of operations to be performed on an initially empty stack. The following operations are possible: 1. `PUSH x` - Push the integer `x` onto the stack. 2. `POP` - Remove the top element from the stack. (The stack will not be empty when this operation is performed.) 3. `MIN` - Retrieve the minimum element in the stack. (The stack will not be empty when this operation is performed.) Implement a program that processes a sequence of these operations and prints the result of each `MIN` operation. Ensure that the operations are processed efficiently. Constraints * 1 <= Number of operations <= 100,000 * The integer values x pushed onto the stack are between -10^9 and 10^9. Input The input is given from Standard Input in the following format: ``` N operation_1 operation_2 ... operation_N ``` Here, `N` (1 ≤ N ≤ 100,000) is the total number of operations, and each `operation_i` is one of `PUSH x`, `POP`, or `MIN`. Output For each `MIN` operation, print the minimum element in the stack on a new line. Examples Input ``` 6 PUSH 10 PUSH 20 MIN PUSH 5 MIN POP MIN ``` Output ``` 10 5 10 ``` Input ``` 3 PUSH -5 MIN PUSH -10 MIN ``` Output ``` -5 -10 ``` Input ``` 5 PUSH 1 PUSH 2 PUSH 3 MIN POP MIN ``` Output ``` 1 1 ```","solution":"class StackWithMin: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x): self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self): if self.stack: removed_element = self.stack.pop() if removed_element == self.min_stack[-1]: self.min_stack.pop() def get_min(self): if self.min_stack: return self.min_stack[-1] return None def process_operations(operations): stack = StackWithMin() results = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, value = operation.split() stack.push(int(value)) elif operation == \\"POP\\": stack.pop() elif operation == \\"MIN\\": results.append(stack.get_min()) return results"},{"question":"**Railway Network** To improve the efficiency of the railway system, a railway company wants to analyze and possibly redesign their railway network. The network is represented as an undirected graph where nodes represent railway stations and edges represent the railway tracks between the stations. Each track has a certain cost associated with it. The company wants to find the Maximum Spanning Tree (MST) of the network so that the total cost of the preserved tracks is maximized. The goal is to determine the edges that should be included in the MST, ensuring that the network remains connected and the total cost of the included tracks is maximized. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of railway stations and the number of tracks, respectively. Each of the next m lines describes a track with three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000) — the stations connected by this track and the cost of this track. Output Output n-1 lines describing the edges included in the MST with the maximum possible cost, each described by two integers u and v — the stations connected by the track. If there are multiple possible MSTs with the same cost, output any one of them. Example Input 4 5 1 2 3 1 3 4 2 3 2 3 4 5 2 4 1 Output 1 3 3 4 1 2 Note The example MST includes the tracks with maximum total cost while keeping all stations connected. Other valid answers might exist due to the possibility of multiple MSTs with the same total cost.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_max_spanning_tree(n, edges): edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] for edge in edges: u, v, w = edge x = find(parent, u) y = find(parent, v) if x != y: result.append((u, v)) union(parent, rank, x, y) if len(result) == n - 1: break return result def max_spanning_tree(n, m, tracks): edges = [(u-1, v-1, c) for u, v, c in tracks] result_edges = kruskal_max_spanning_tree(n, edges) return [(u+1, v+1) for u, v in result_edges]"},{"question":"Write a program that can determine the longest substring with all distinct characters in a given string. The problem is often solved using a brute-force method, where the time complexity would be O(n^3). However, you need to implement a more efficient solution that utilizes a sliding window approach and solves the problem in O(n) time complexity. Your task is to write a program that computes the length of the longest substring with all distinct characters for a given string using the sliding window approach. Input The input consists of an integer T, the number of test cases. For each test case, a single string S is provided, composed of lowercase and uppercase letters. Output For each test case, output a single integer, the length of the longest substring with all distinct characters. Example Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3","solution":"def length_of_longest_substring(s): Computes the length of the longest substring with all distinct characters using the sliding window approach. :param s: Input string :return: Length of the longest substring with all distinct characters n = len(s) char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are given a sequence of distinct integers. Your task is to find the longest subsequence of this sequence such that the sum of any two consecutive elements is odd. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the sequence. - The second line contains n distinct integers a[i] (-10^9 ≤ a[i] ≤ 10^9), the elements of the sequence. Output: - Output a single integer, the length of the longest subsequence where the sum of any two consecutive elements is odd. Examples Input 5 1 2 3 4 5 Output 5 Input 6 2 4 6 8 10 12 Output 1 Note In the first example, the entire sequence [1, 2, 3, 4, 5] can be taken as the sum of any two consecutive elements will be odd (since the sequence contains an alternating pattern of odd and even numbers). In the second example, no two consecutive elements can create an odd sum since all elements in the sequence are even.","solution":"def longest_odd_sum_subsequence_length(n, a): # Count the number of odd and even numbers in the sequence odd_count = sum(1 for x in a if x % 2 != 0) even_count = n - odd_count # The length of the longest subsequence with alternating odd and even sum can be: # - If there are both odd and even numbers: min(odd_count, even_count) * 2 + 1 # - If there are only odd or only even numbers: 1 if odd_count > 0 and even_count > 0: return min(odd_count, even_count) * 2 + 1 else: return 1 # Example usage: # longest_odd_sum_subsequence_length(5, [1, 2, 3, 4, 5]) returns 5 # longest_odd_sum_subsequence_length(6, [2, 4, 6, 8, 10, 12]) returns 1"},{"question":"Given an array a1, a2, ..., an of n integers, find the smallest number in the array that is a prime number. A number x is said to be a prime number if it is greater than 1 and has no divisors other than 1 and itself. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an ( - 106 ≤ ai ≤ 106) — the elements of the array. It is guaranteed that at least one element of the array is a prime number. Output Print the smallest number in the array which is a prime number. It is guaranteed that an answer always exists. Examples Input 5 4 6 7 11 15 Output 7 Input 4 17 13 19 23 Output 13 Note In the first sample case, 7 and 11 are prime numbers. The smallest prime number in the array is 7. In the second sample case, all numbers are prime, and the smallest prime number is 13.","solution":"def is_prime(x): Returns True if x is a prime number, otherwise False. if x <= 1: return False if x == 2: return True if x % 2 == 0: return False for i in range(3, int(x**0.5) + 1, 2): if x % i == 0: return False return True def smallest_prime(arr): Returns the smallest prime number in the array. primes = [num for num in arr if is_prime(num)] return min(primes)"},{"question":"Mr. Doyle has a unique way of giving presents. He has a list of gifts he wants to give out, each with its own price for the first time he buys it. After each gift is purchased once, its price increases by a fixed amount for each subsequent purchase. Mr. Doyle wants to buy each gift exactly once for a party, minimizing the total cost of his purchases. Your task is to determine the minimum total cost Mr. Doyle should spend to buy all the gifts exactly once. Each purchase of a gift increases its price by a specified increment for the next purchase. The increment is given for each gift individually. Mr. Doyle can buy the gifts in any order, as long as he buys every gift exactly once. Input The input consists of datasets. The entire input looks like: > the number of datasets (=m) > 1st dataset > 2nd dataset > ... > m-th dataset The number of datasets, m, is no more than 100. Each dataset is formatted as follows. > the number of gifts (=n) > price increment-pair for gift 1 > price increment-pair for gift 2 > ... > price increment-pair for gift n The number of gifts and their prices are all positive integers. The number of gifts, n, is no more than 100. Each price increment-pair is formatted as follows: > initial-price increment where initial-price is the price of the gift when bought for the first time, and increment is the increase in price for each subsequent purchase. Output For each dataset, print a line having a decimal integer indicating the minimum total cost for Mr. Doyle to buy all the gifts exactly once. Example Input 2 3 10 2 20 1 30 3 4 5 5 6 4 7 3 8 2 Output 68 50","solution":"def min_total_cost(datasets): Calculate the minimum total cost Mr. Doyle should spend to buy all the gifts exactly once for each dataset. def min_cost_for_dataset(n, price_increment_pairs): # Sorting gifts based on initial price sorted_pairs = sorted(price_increment_pairs, key=lambda x: x[0]) total_cost = sum(price for price, _ in sorted_pairs) return total_cost results = [] for dataset in datasets: n, price_increment_pairs = dataset results.append(min_cost_for_dataset(n, price_increment_pairs)) return results"},{"question":"A prime number is a number greater than 1 with no divisors other than 1 and itself. Your task is to find the smallest prime number `p` that is greater than a given number `x`. Input A single integer `x` (1 ≤ x ≤ 10^9). Output A single integer `p`, the smallest prime number that is greater than `x`. Examples Input 10 Output 11 Input 100 Output 101 Input 20 Output 23 Input 1 Output 2","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(x): Finds the smallest prime number greater than x. if x < 2: return 2 next_number = x + 1 while not is_prime(next_number): next_number += 1 return next_number"},{"question":"Da Vinci the artist wants to encrypt his diary. He decides to use a simple encryption method where each character in the text is shifted by a fixed number of positions down the English alphabet. The alphabet wraps around, so \'z\' shifted by 1 becomes \'a\'. He drafts a message and now needs a program to encode it using his method. Input The first line contains an integer n (1 ≤ n ≤ 25), which is the number of positions each character in the text is to be shifted. The second line contains a sequence of lowercase Latin letters (the message to be encrypted). It is guaranteed that the given line is not empty and its length does not exceed 200 symbols. Output Print the encrypted message as a single line. Examples Input 4 hello Output lipps Input 1 xyz Output yza","solution":"def encrypt_message(n, message): Encrypts the message by shifting each character by n positions in the alphabet. :param n: Number of positions to shift each character. :param message: The input string to be encrypted. :return: The encrypted message as a string. encrypted_message = [] for char in message: shifted_char = chr((ord(char) - ord(\'a\') + n) % 26 + ord(\'a\')) encrypted_message.append(shifted_char) return \\"\\".join(encrypted_message)"},{"question":"You are asked to implement a straightforward compression algorithm for encoding a given string. The goal is to compress the input string such that \'aabcccccaaa\' becomes \'a2b1c5a3\'. If the compressed string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a - z). # Input - A single string `s` of length between `1` and `10000` consisting of only lowercase English letters. # Output - Return the compressed string if the compressed version is shorter than the original string. Otherwise, return the original string. # Example Sample Input 1: ``` aabcccccaaa ``` Sample Output 1: ``` a2b1c5a3 ``` Sample Input 2: ``` abcdef ``` Sample Output 2: ``` abcdef ``` Constraints - The length of the input string ( s ) is between `1` and `10000`. - The string ( s ) contains only English lowercase letters. # Note - The idea is to iterate through the string, counting the consecutive characters and using that count to build the compressed string. - Consider edge cases such as a string with a single character or all characters being unique.","solution":"def compress_string(s): Compresses the input string by collapsing consecutive characters into the character followed by the count. Returns the compressed string if it is shorter than the original string, otherwise returns the original string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 # Append the last group of characters compressed.append(f\\"{s[-1]}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Jacob is a professional matcher and enjoys creating perfect pairs for his clients. He needs to determine how many pairs he can form from a list of numbers. Given a list of numbers, he can form a pair if two numbers are the same. Help Jacob find out how many pairs he can create from each list. Input: - The first line contains an integer `N`, the number of test cases. - Each test case consists of two lines: 1. An integer `X`, the number of elements in the list. 2. `X` space-separated integers representing the elements in the list. Output: - For each test case, print the number of pairs that can be formed from the list. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ X ≤ 10^5 - 1 ≤ List elements ≤ 10^5 Example Input: 3 6 1 2 1 2 1 3 4 10 20 20 10 5 5 5 5 5 5 Example Output: 2 2 2 Explanation: 1. For the 1st case, there are 6 numbers: {1, 2, 1, 2, 1, 3}. Since we have two `1`s and two `2`s, we can form two pairs. Therefore, the output is 2. 2. For the 2nd case, there are 4 numbers: {10, 20, 20, 10}. We can form two pairs, one with `10`s and one with `20`s. Thus, the output is 2. 3. For the 3rd case, there are 5 numbers: {5, 5, 5, 5, 5}. We can form two pairs of 5s. Hence, the output is 2.","solution":"def count_pairs(test_cases): Given a number of test cases, returns the number of pairs that can be formed from the list in each test case. :param test_cases: List of tuples where each tuple contains an integer and a list of integers. :return: List of integers representing the number of pairs for each test case. result = [] for x, elements in test_cases: # Dictionary to count occurrences of each element count_dict = {} for element in elements: if element in count_dict: count_dict[element] += 1 else: count_dict[element] = 1 # Calculate pairs pairs = sum(count // 2 for count in count_dict.values()) result.append(pairs) return result"},{"question":"A group of detectives in Hub City is working on a case involving a network of underground tunnels connecting various hideouts used by criminals. The city has n hideouts (numbered from 1 to n) connected by m tunnels (numbered from 1 to m). Each tunnel has a travel time and a security level. The i-th tunnel connects hideouts ai and bi, its travel time is ti, and security level is si. The detectives need to plan routes between all pairs of hideouts such that: 1. The total security level of a route between any two hideouts does not exceed a given maximum allowable security level S. 2. The total travel time of all the planned routes is minimized. Your task is to assist the detectives by determining the minimum total travel time for the planned routes, or state that it\'s not possible to satisfy the security level constraint. Input The first line of input contains three integers n, m, and S (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ S ≤ 109), the number of hideouts, the number of tunnels, and the maximum allowable security level. The next m lines contain four integers ai, bi, ti, and si (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ti, si ≤ 109 for each 1 ≤ i ≤ m), describing each tunnel. Output Output the minimum total travel time if it is possible to satisfy the security level constraint. If it is not possible, print \\"Impossible\\" without quotes. Example Input 4 5 10 1 2 4 7 2 3 2 5 3 4 3 6 4 1 5 8 1 3 6 9 Output 14 Input 3 3 4 1 2 3 5 2 3 4 6 1 3 5 5 Output Impossible Note In the first example, one possible optimal solution is to plan routes using the tunnels (1, 2), (2, 3), and (3, 4) with a total travel time of 4 + 2 + 3 = 9, which satisfies the maximum security level constraint. In the second example, it is not possible to find any route that satisfies the maximum security level constraint of 4.","solution":"import heapq def minimum_total_travel_time(n, m, S, tunnels): Determines the minimum total travel time for planned routes between all pairs of hideouts satisfying the maximum security level constraint. Parameters: n (int): Number of hideouts. m (int): Number of tunnels. S (int): Maximum allowable security level. tunnels (list[tuple[int, int, int, int]]): List of tunnels described by (ai, bi, ti, si). Returns: int or str: The minimum total travel time or \\"Impossible\\" if the security constraint cannot be met. # Create an adjacency list with only the tunnels that satisfy the security level constraint adj = [[] for _ in range(n + 1)] for ai, bi, ti, si in tunnels: if si <= S: adj[ai].append((bi, ti)) adj[bi].append((ai, ti)) # Use Prim\'s algorithm to find the Minimum Spanning Tree (MST) with the remaining tunnels total_time = 0 visited = [False] * (n + 1) min_heap = [(0, 1)] # (travel_time, start_node) num_visited = 0 while min_heap: travel_time, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_time += travel_time num_visited += 1 for v, time in adj[u]: if not visited[v]: heapq.heappush(min_heap, (time, v)) if num_visited == n: return total_time else: return \\"Impossible\\""},{"question":"For a software application, Mia needs to create a dynamic list that efficiently supports a set of key operations. The list will contain n elements, initially set to 0. Mia needs to perform a series of m operations of two types: 1. **Addition Operation:** Add a value to each element between two given indices. 2. **Query Operation:** Determine the value of a single element at a specific index. Given the constraints, Mia needs a solution that can handle these operations efficiently. Help Mia by writing a function that performs the operations and returns the result of each query operation. # Detailed Description: Each operation is described in one of the following formats: - `1 l r v`: Add value `v` to each element of the list from index `l` to index `r` inclusive. (1-based indexing) - `2 idx`: Query the value of the element at index `idx`. (1-based indexing) # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 200,000) — the number of elements in the list and the number of operations. - The next `m` lines contain the operations in the formats described above. # Output: For each query operation, output the respective value of the list element at the specified index. # Examples: **Input:** ``` 5 4 1 1 3 5 2 2 1 2 4 3 2 3 ``` **Output:** ``` 5 8 ``` **Explanation:** - After the first operation `1 1 3 5`, the list becomes `[5, 5, 5, 0, 0]`. - The first query `2 2` returns 5. - After the second operation `1 2 4 3`, the list becomes `[5, 8, 8, 3, 0]`. - The second query `2 3` returns 8. Implement efficient algorithms to handle the operations within the constraints.","solution":"def process_operations(n, m, operations): # Initialize the list arr = [0] * (n + 1) # Use an extra element to simplify boundary conditions # Array to store the result of queries result = [] # Process each operation for op in operations: if op[0] == 1: l, r, v = op[1], op[2], op[3] arr[l - 1] += v if r < n: # ensure r is within bounds arr[r] -= v elif op[0] == 2: idx = op[1] # Calculate the prefix sum to get the final value at index idx sum_val = 0 for i in range(idx): sum_val += arr[i] result.append(sum_val) return result"},{"question":"Given a set of n triplets, where each triplet contains three numbers representing the XYZ coordinates. Your task is to determine the number of collinear points among these triplets. Two or more points are collinear if they lie on a single straight line. Input The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of triplets. Each of the following n lines contains three integers x, y, and z (-10^9 ≤ x, y, z ≤ 10^9) — the coordinates of the points. Output Print a single integer representing the maximum number of collinear points. Examples Input 4 1 2 3 2 4 6 3 6 9 4 8 10 Output 3 Input 5 1 1 1 2 2 2 3 3 3 4 4 4 5 6 7 Output 4 Note In the first example, the points (1, 2, 3), (2, 4, 6), (3, 6, 9) lie on a straight line, thus the number of collinear points is 3. In the second example, the points (1, 1, 1), (2, 2, 2), (3, 3, 3), and (4, 4, 4) lie on a straight line, so the number of collinear points is 4. The point (5, 6, 7) does not lie on this line.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def are_collinear(p1, p2, p3): x1, y1, z1 = p1 x2, y2, z2 = p2 x3, y3, z3 = p3 return (x2 - x1)*(y3 - y1) == (y2 - y1)*(x3 - x1) and (x2 - x1)*(z3 - z1) == (z2 - z1)*(x3 - x1) and (y2 - y1)*(z3 - z1) == (z2 - z1)*(y3 - y1) def max_collinear_points(points): n = len(points) if n < 3: return n max_count = 2 for i in range(n): for j in range(i + 1, n): count = 2 for k in range(n): if k != i and k != j and are_collinear(points[i], points[j], points[k]): count += 1 max_count = max(max_count, count) return max_count"},{"question":"In this problem, you are given a matrix consisting of n rows and m columns. Some cells of the matrix may contain an integer value while other cells may be empty. You are required to calculate the sum of numbers in each row and identify the row with the maximum sum. If multiple rows have the same maximum sum, return the row with the smallest index. # Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the matrix, respectively. Each of the following n lines contains m integers. Each integer in a row could either be an integer value or -1 which means the cell is empty. # Output Output a single integer — the 1-indexed row number with the maximum sum. # Examples **Input** 3 4 1 -1 -1 4 2 3 -1 -1 -1 4 5 -1 **Output** 3 **Input** 2 3 -1 -1 -1 -1 -1 -1 **Output** 1 **Note** In the first example, the sums of the rows are: 1. 1 + 4 = 5 2. 2 + 3 = 5 3. 4 + 5 = 9 The third row has the maximum sum of 9. In the second example, all cells are empty and thus all rows have a sum of 0. The smallest index with this sum is 1.","solution":"def find_row_with_max_sum(n, m, matrix): max_sum = float(\'-inf\') row_with_max_sum = 1 for i in range(n): current_sum = sum(cell for cell in matrix[i] if cell != -1) if current_sum > max_sum: max_sum = current_sum row_with_max_sum = i + 1 return row_with_max_sum # Example usage: # n = 3 # m = 4 # matrix = [ # [1, -1, -1, 4], # [2, 3, -1, -1], # [-1, 4, 5, -1] # ] # print(find_row_with_max_sum(n, m, matrix)) # Output: 3"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},j={class:"card-container"},P={key:0,class:"empty-state"},F=["disabled"],C={key:0},R={key:1};function M(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):h("",!0)]),t("div",j,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+l(r.searchQuery)+'". ',1)):h("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",C,"See more"))],8,F)):h("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-f01c775f"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/43.md","filePath":"quotes/43.md"}'),L={name:"quotes/43.md"},U=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,U as default};
