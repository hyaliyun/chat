import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function O(a,e,h,m,s,r){return n(),i("div",k,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(q,[["render",O],["__scopeId","data-v-5a1aaa38"]]),A=JSON.parse('[{"question":"Skye is a landscape architect, and she loves using pebbles of various weights to create miniature landscapes. She has a collection of pebbles with different weights and wants to create a balanced landscape by dividing her pebbles into two groups such that the weight difference between the two groups is minimized. Skye needs your help to determine the minimum possible weight difference between the two groups. You are given an array of integers representing the weights of the pebbles. # Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of pebbles. The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 1000) — the weights of the pebbles. # Output Print a single integer — the minimum possible weight difference between the two groups. # Example Input ``` 5 3 1 4 2 2 ``` Output ``` 0 ``` Explanation One possible way to split the pebbles is into two groups: {3, 4} and {1, 2, 2}. The sum of the first group is 7 and the sum of the second group is also 7. The weight difference is |7 - 7| = 0, which is the minimal possible difference. Note: - In the first example, one possible way to split the pebbles is into two groups: {1, 3} and {1, 2}. The sum for these groups is the same, thus the minimum difference is 0.","solution":"def minimum_weight_difference(n, weights): total_weight = sum(weights) dp = [0] * (total_weight // 2 + 1) for weight in weights: for j in range(total_weight // 2, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return total_weight - 2 * dp[total_weight // 2] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) weights = list(map(int, data[1:n + 1])) print(minimum_weight_difference(n, weights)) if __name__ == \'__main__\': main()"},{"question":"Alice and Bob are playing a game with two arrays. Alice is given an array of integers **A** and Bob is given an array of integers **B**. The goal of the game is to find an array **C**, consisting of the pairwise maximums of corresponding elements from **A** and **B**. The pairwise maximums of two arrays **A** and **B** is defined as: C_i = max(A_i, B_i) for every valid index i. Given the arrays **A** and **B**, your task is to help Alice and Bob find the resulting array **C**. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the arrays. - The second line contains n integers A_1, A_2, ldots, A_n (1 leq A_i leq 10^9) — the elements of array **A**. - The third line contains n integers B_1, B_2, ldots, B_n (1 leq B_i leq 10^9) — the elements of array **B**. # Output - Output a single line containing n integers — the elements of resulting array **C**. # Example Input ``` 5 1 4 3 2 5 3 2 5 1 4 ``` Output ``` 3 4 5 2 5 ``` Explanation - For the 1st element: max(1, 3) = 3 - For the 2nd element: max(4, 2) = 4 - For the 3rd element: max(3, 5) = 5 - For the 4th element: max(2, 1) = 2 - For the 5th element: max(5, 4) = 5 In summary, the resulting array **C** will be: `[3, 4, 5, 2, 5]`.","solution":"def find_pairwise_maximums(A, B): Given two arrays A and B of the same length, computes the array C where each element is the maximum of the corresponding elements in A and B. Parameters: A (list of int): First list of integers. B (list of int): Second list of integers. Returns: list of int: List containing the pairwise maxima of A and B. return [max(a, b) for a, b in zip(A, B)]"},{"question":"Maria enjoys working with numbers. Recently she came across an interesting problem involving consecutive sums. She wants to find a subarray with the highest possible sum in a given list of integers. However, instead of a regular subarray, she is interested in finding a subarray where the sum of the squares of the integers is minimized. The problem can be formulated as follows: Given an array of integers, find the subarray for which the sum of the squares of the integers in that subarray is the minimum while maintaining the highest possible sum of elements within that subarray. # Input - The first line contains a single integer `n` (1 leq n leq 10^5), the number of integers in the array. - The second line contains `n` space-separated integers, the elements of the array, where each integer is between `-10^4` and `10^4`. # Output - One integer which is the highest possible sum of the subarray meeting the minimum sum of squares condition. # Example Input 1: ``` 5 2 -1 3 -2 4 ``` Output 1: ``` 6 ``` Explanation: - The possible subarrays are: [2], [-1], [3], [-2], [4], [2, -1], [-1, 3], [3, -2], [-2, 4], [2, -1, 3], [-1, 3, -2], [3, -2, 4], [2, -1, 3, -2], [-1, 3, -2, 4], [2, -1, 3, -2, 4] - The subarray with the highest sum while maintaining the minimum sum of squares is [2, -1, 3, -2, 4], with a sum of 6 and sum of squares equal to 30. Input 2: ``` 4 -1 -2 -3 -4 ``` Output 2: ``` -1 ``` Explanation: - The possible subarrays are: [-1], [-2], [-3], [-4], [-1, -2], [-2, -3], [-3, -4], [-1, -2, -3], [-2, -3, -4], [-1, -2, -3, -4] - The subarray with the highest sum while maintaining the minimum sum of squares is [-1], with a sum of -1 and sum of squares equal to 1. Make sure to consider the edge cases and optimal solutions for large input sizes.","solution":"def max_subarray_with_min_sum_squares(arr): n = len(arr) if n == 0: return 0 max_sum = float(\'-inf\') current_sum = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a string s, you are tasked to find the longest subsequence which is also a palindrome. Recall that a subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. You need to implement a function that takes a string as input and returns the length of the longest palindromic subsequence. # Input - The input consists of a single string s of length n (1 leq n leq 1000), containing only lowercase English letters. # Output - Output the length of the longest palindromic subsequence in the given string s. # Example - Input: \\"bbabcbcab\\" - Output: 7 # Explanation For the given example, the longest palindromic subsequence is \\"babcbab\\", which has a length of 7.","solution":"def longest_palindromic_subsequence(s): n = len(s) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is for substrings of length cl. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of the longest palindromic subseq will be in dp[0][n-1] return dp[0][n-1]"},{"question":"Zhao has a machine that can generate any number from 1 to N. He wants to transform this machine into a uniform random number generator. To do so, he has decided to fix the machine to generate each integer in the range [1, N] with equal probability. Zhao does this process iteratively. Each iteration, he can choose any contiguous subarray of the current sequence of generated numbers and shuffle it randomly. He can perform as many iterations as he likes, but once he stops, each number from 1 to N should appear exactly once and the probability distribution across the sequence should be uniform. Given a sequence of length N, verify if it is possible to turn it into a uniform random sequence where each number from 1 to N appears exactly once, and if so, return the minimum number of iterations Zhao must perform to achieve this. The first line of input contains an integer N (1 ≤ N ≤ 1000), the length of the sequence. The second line contains N integers representing the current sequence. Output a single integer, the minimum number of iterations needed to turn the sequence into a uniform random sequence. If it is not possible, return -1. For example: Input: 5 4 5 1 3 2 Output: 1 Input: 4 1 1 1 1 Output: -1 In the first example, the sequence can be turned into a uniform random sequence in one iteration by shuffling the entire array randomly. In the second example, it\'s impossible to make each number from 1 to N appear exactly once, hence the output is -1.","solution":"def min_iterations_to_uniform_random(N, sequence): Returns the minimum number of iterations to turn the sequence into a uniform random sequence where each number from 1 to N appears exactly once. If not possible, return -1. if sorted(sequence) != list(range(1, N+1)): return -1 return 1"},{"question":"Simon has a list of pet names with `n` names. He wants to determine if there is any pair of names that when concatenated (first concatenated with second or second concatenated with first) forms a palindrome. Two names form a palindrome if the concatenation of these two names reads the same forwards and backwards, e.g., \\"abba\\" or \\"racecar\\". Write a program to determine whether such a pair of names exists in the list. The first line contains an integer n (2 ≤ n ≤ 1000) — the number of pet names. The next n lines each contain a pet name. Each pet name consists of lowercase English letters and has a length between 1 and 100 (inclusive). Output \\"Yes\\" if there exists a pair of names that when concatenated forms a palindrome. Otherwise, output \\"No\\". # Example: Input: ``` 3 cat tac dog ``` Output: ``` Yes ``` Input: ``` 3 cat dog mouse ``` Output: ``` No ``` In the first example, concatenating \\"cat\\" and \\"tac\\" or \\"tac\\" and \\"cat\\" forms \\"cattac\\" or \\"taccat\\", both of which are palindromes. In the second example, no pair of names concatenates to form a palindrome.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. return s == s[::-1] def find_palindrome_pair(pet_names): Returns \\"Yes\\" if there exists a pair of names that when concatenated forms a palindrome, otherwise \\"No\\". n = len(pet_names) for i in range(n): for j in range(i + 1, n): if is_palindrome(pet_names[i] + pet_names[j]) or is_palindrome(pet_names[j] + pet_names[i]): return \\"Yes\\" return \\"No\\""},{"question":"Maria and Liam are playing a game with strings. The game starts with an initial string `s1`. Two players take turns alternately. In each turn, a player can choose to perform one of the following operations on the current string `s`: 1. Remove exactly one occurrence of a given substring `s2` from the current string `s` if such a substring exists within `s`. The resulting string becomes the new string for the next turn. 2. Change the first or the last character of the string to any other character present in the English alphabet. The player who cannot make a valid move loses the game. The first player can only perform the first operation, while the second player can only perform the second operation. Both players play optimally. You need to determine who will win the game given the initial string `s1` and the substring `s2`. The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains the initial string `s1` (1 ≤ |s1| ≤ 100). - The second line contains the substring `s2` (1 ≤ |s2| ≤ 10). Output \\"First\\" if the first player wins, and \\"Second\\" if the second player wins. Examples: ``` Input: 3 abcdef cd aabaaa aa zzzzzzzz z Output: Second First Second ```","solution":"def determine_winner(s1, s2): if s2 in s1: return \\"First\\" else: return \\"Second\\" def game_result(test_cases): results = [] for s1, s2 in test_cases: results.append(determine_winner(s1, s2)) return results"},{"question":"Mr. Stone loves arranging his collection of ancient artifacts. Each artifact is a unique item represented by a unique integer from 1 to n. Every day, he re-arranges these artifacts according to specific rules that he states are inspired by ancient texts. One day, Mr. Stone decided to track how many rearrangements he had to perform until his collection was in a sorted order for the first time. Given a starting sequence of artifacts, can you help Mr. Stone determine the minimum number of rearrangements needed to sort his collection in ascending order? A valid rearrangement is defined as picking any subsequence of the original sequence and reversing it. The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of artifacts. - The second line contains a permutation of the integers from 1 to n — the initial arrangement of artifacts. Print a single integer: the minimum number of rearrangements required to sort the sequence. # Example **Input:** ``` 5 3 1 2 5 4 ``` **Output:** ``` 2 ``` **Explanation:** One of the ways to sort the sequence in two rearrangements is: 1. Reverse the subsequence [1, 2, 3] to obtain [2, 1, 3, 5, 4]. 2. Reverse the subsequence [1, 2] to obtain [1, 2, 3, 5, 4]. 3. Reverse the subsequence [5, 4] to obtain [1, 2, 3, 4, 5]. # Note Different sequences might require different numbers of rearrangements, but the goal is to find the minimum required.","solution":"def min_rearrangements_to_sort(n, permutation): Returns the minimum number of rearrangements required to sort the permutation. sorted_perm = sorted(permutation) # Find the longest increasing subsequence (LIS) lis_length = [1] * n for i in range(1, n): for j in range(0, i): if permutation[i] > permutation[j] and lis_length[i] < lis_length[j] + 1: lis_length[i] = lis_length[j] + 1 # Minimum moves required would be n - length of LIS min_moves = n - max(lis_length) return min_moves"},{"question":"Asha has a collection of N discs numbered from 1 to N. Each disc has a radius. She wants to pile up the discs in a single stack such that each disc placed on another disc has a strictly smaller radius than the disc below it. Asha can rearrange the discs before piling them up. Your task is to determine the maximum height of the pile that can be formed. The first line of the input contains an integer N (1 ≤ N ≤ 1000) — the number of discs. The second line contains N space-separated integers, each representing the radius of a disc. Output the maximum height of the pile that Asha can form. # Sample Input 1 ``` 5 4 3 1 3 4 ``` # Sample Output 1 ``` 4 ``` # Sample Input 2 ``` 6 10 20 20 10 30 5 ``` # Sample Output 2 ``` 3 ``` # Explanation: For Sample Input 1: A possible pile configuration is: [4, 3, 3, 1] or [4, 3, 1, 3]. Both give the maximum height of 4. For Sample Input 2: A possible pile configuration is: [30, 20, 10] or [30, 20, 5]. Both give the maximum height of 3.","solution":"def max_pile_height(N, radii): Determines the maximum height of the pile that can be formed. :param N: int, number of discs :param radii: list of int, radii of the discs :return: int, maximum height of the pile # To get the maximum height of a pile, # we can use the unique radii and count them. unique_radii = set(radii) return len(unique_radii)"},{"question":"You are given a list of integers. Your task is to find the smallest positive integer that does not appear in the list. The first line of the input contains a single integer ( n ) (1 ≤ ( n ) ≤ 1000), the number of elements in the list. The second line contains ( n ) space-separated integers ({a_1, a_2, ..., a_n}) (-10^6 ≤ ( a_i ) ≤ 10^6). Print the smallest positive integer that is not present in the list. **Example:** Input: ``` 5 1 2 0 -1 3 ``` Output: ``` 4 ```","solution":"def smallest_missing_positive(n, arr): Finds the smallest positive integer that does not appear in the list. # Create a set of positive integers from the input array positive_set = {num for num in arr if num > 0} # Initialize the smallest positive integer that might be missing smallest_missing = 1 # Increment until we find a missing positive integer while smallest_missing in positive_set: smallest_missing += 1 return smallest_missing"},{"question":"A company is organizing a team building activity where employees need to solve a puzzle together. The puzzle involves arranging a sequence of tiles, each represented by a non-negative integer, in a specific order. The desired order is defined by a **target sequence** provided as part of the puzzle. The employees can only perform two types of operations to rearrange the tiles: 1. **Swap any two consecutive tiles**. 2. **Reverse the order of any contiguous subsequence of tiles**. Given the initial sequence and the target sequence, determine the minimum number of operations needed to transform the initial sequence into the target sequence. # Input Format - The first line contains a single integer `n` (1 le n le 100) — the number of tiles. - The second line contains `n` integer values representing the initial sequence of tiles. - The third line contains `n` integer values representing the target sequence of tiles. # Output Format - Print a single integer — the minimum number of operations needed to transform the initial sequence into the target sequence. # Example Input ``` 5 1 3 2 4 5 1 2 3 4 5 ``` Output ``` 2 ``` # Explanation In the example, we can achieve the target sequence with two operations: 1. Swap the second and third tiles: Sequence becomes `1 2 3 4 5` 2. No further operation is needed as the sequence is now the same as the target sequence. This problem involves a combination of sorting algorithms and understanding the effect of the allowed operations to minimize the number of transformations needed.","solution":"def min_operations_to_transform(n, initial_seq, target_seq): Returns the minimum number of operations needed to transform the initial sequence into the target sequence. Operations allowed: 1. Swap any two consecutive tiles. 2. Reverse the order of any contiguous subsequence of tiles. Args: n: int - number of tiles. initial_seq: List[int] - initial sequence of tiles target_seq: List[int] - target sequence of tiles Returns: int - minimum number of operations needed def merge_sort_count_split_inv(arr): if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_inv = merge_sort_count_split_inv(arr[:mid]) right, right_inv = merge_sort_count_split_inv(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): i = j = 0 merged = [] split_inv = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 split_inv += len(left) - i merged += left[i:] merged += right[j:] return merged, split_inv # Create a mapping of target sequence values to their positions target_positions = {value: idx for idx, value in enumerate(target_seq)} # Convert initial sequence into positions based on target sequence initial_positions = [target_positions[value] for value in initial_seq] # Count inversions (number of misordered pairs) _, inversions = merge_sort_count_split_inv(initial_positions) return inversions"},{"question":"Theater tickets for a popular play are selling fast. You have a list of ticket prices for each row in the theater. Each row can have a different price, and each seat within the same row has the same price. You are given a list of bookings where each booking specifies the row of the ticket sold. Your task is to calculate the total revenue from the sold tickets. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of rows in the theater. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1,000) — the price of a ticket for each row. The third line contains an integer m (0 ≤ m ≤ 1,000,000) — the number of sold tickets. The fourth line contains m integers r1, r2, ..., rm (1 ≤ ri ≤ n) — the rows for each sold ticket. Print a single integer — the total revenue from sold tickets. # Sample input 1: ``` 4 50 80 100 120 5 1 2 2 3 4 ``` # Sample output 1: ``` 430 ``` # Sample input 2: ``` 3 10 20 30 2 2 3 ``` # Sample output 2: ``` 50 ``` # Explanation: In the first sample, there are 4 rows with ticket prices 50, 80, 100, and 120 respectively. The bookings are for rows 1, 2, 2, 3, and 4. Therefore, the total revenue is calculated as follows: 50 (row 1) + 80 (row 2) + 80 (row 2) + 100 (row 3) + 120 (row 4) = 430. In the second sample, there are 3 rows with ticket prices 10, 20, and 30 respectively. The bookings are for rows 2 and 3. Therefore, the total revenue is calculated as follows: 20 (row 2) + 30 (row 3) = 50.","solution":"def calculate_total_revenue(n, prices, m, bookings): Calculate the total revenue from sold tickets based on given row prices and bookings. :param n: The number of rows in the theater. :param prices: A list of integers where each element represents the price of a ticket for each row. :param m: The number of sold tickets. :param bookings: A list of integers where each element represents the row of a sold ticket. :return: The total revenue from sold tickets. total_revenue = 0 for booking in bookings: total_revenue += prices[booking - 1] return total_revenue"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid can contain a value of either 1 or 0. You can perform exactly one operation on this grid: you can choose any sub-grid and toggle all its cells (change all 1s to 0s and all 0s to 1s). Your task is to determine whether it is possible to make all the cells in the grid equal (all 0s or all 1s) by applying exactly one toggle operation. The first line contains two integers n and m (1 ≤ n, m ≤ 500) – the number of rows and columns in the grid. Each of the next n lines contains m integers (each either 0 or 1) representing the grid. Print \\"YES\\" or \\"NO\\" — whether it is possible to make all the cells in the grid equal by applying exactly one toggle operation. **Example:** Input: 3 4 0 1 0 1 1 0 1 0 0 1 0 1 Output: YES Input: 2 2 0 1 1 1 Output: NO","solution":"def can_make_all_equal_by_toggling(n, m, grid): Determine if it\'s possible to make all cells in the grid equal by toggling exactly one sub-grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list representing the grid with values 0 or 1 :return: \\"YES\\" if it\'s possible, otherwise \\"NO\\" ones_count = sum(sum(row) for row in grid) # We need all-zero or all-one configurations # Check for all zero case if ones_count == 0: return \\"YES\\" # Check for all one case if ones_count == n * m: return \\"YES\\" # Check for sub-grid that can be toggled to make all zero or all one for i in range(n - 1): for j in range(m - 1): subgrid = [ grid[i][j], grid[i][j+1], grid[i+1][j], grid[i+1][j+1] ] if len(set(subgrid)) == 2: # This checks if the subgrid contains exactly two 0s and two 1s if subgrid.count(0) == 2 and subgrid.count(1) == 2: return \\"YES\\" return \\"NO\\""},{"question":"Biotopia\'s National Park is home to many animals, attracting numerous visitors every year. The park has n bridges, some of which have tolls. The management wants to ensure that the total toll paid by a visitor who goes from one side of the park to the other is minimized. Visitors can only pass through bridges with some health conditions, adding complexity to the toll calculation. A visitor pays a toll denoted by t_i when passing through the bridge i. Each bridge also has a health condition denoted by the string h_i. The visitor must meet the health condition to cross each bridge, where the health condition string can be one of the four values: \\"none\\", \\"light\\", \\"medium\\", or \\"severe\\". The visitor\'s health condition is initially \\"none\\", but it can upgrade to stronger conditions (from \\"none\\" to \\"light\\" to \\"medium\\" to \\"severe\\"), but can never downgrade. Given the condition requirements of each bridge and the corresponding tolls, find the minimal toll that a visitor must pay to traverse from the start to the end of the park, while satisfying the health conditions. The first line of the input contains an integer n (2 le n le 10^5), the number of bridges connecting the entry to the exit of the park. The following n lines each contain two elements: a string h_i and an integer t_i (1 le t_i le 1000), representing the health condition and the toll for bridge i respectively. The bridges are given in the order that they must be crossed in. Output a single integer, the minimum possible toll to go from the entry (start) to the exit (end) of the park while meeting the health conditions along the way. If it\'s not possible to meet the conditions, output -1. For example, if the input is: ``` 4 none 10 light 20 medium 15 severe 25 ``` The output should be 70, as the visitor upgrades from \\"none\\" to \\"light\\" to \\"medium\\" to \\"severe\\" and the tolls paid are 10 + 20 + 15 + 25 = 70. If any condition is unmet with the initial health, the output should be -1 indicating it\'s impossible to traverse the park.","solution":"def min_total_toll(n, bridges): health_order = {\\"none\\": 0, \\"light\\": 1, \\"medium\\": 2, \\"severe\\": 3} total_toll = 0 current_health = \\"none\\" for i in range(n): health_i, toll_i = bridges[i] if health_order[health_i] < health_order[current_health]: return -1 # Cannot downgrade health condition total_toll += toll_i current_health = health_i return total_toll # Sample usage: # print(min_total_toll(4, [(\\"none\\", 10), (\\"light\\", 20), (\\"medium\\", 15), (\\"severe\\", 25)]))"},{"question":"Given a string s (0 ≤ |s| ≤ 10^5) consisting of lowercase Latin letters, you are required to answer multiple queries. Each query is represented by two integers l and r (1 ≤ l ≤ r ≤ |s|) and asks for the number of distinct characters in the substring s[l..r] (1-based indexing). The first line of input contains the string s. The second line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines contains two integers l and r representing a query. For each query, output the number of distinct characters in the substring s[l..r]. Input: ``` abacaba 4 1 3 2 4 1 7 3 5 ``` Output: ``` 3 3 3 2 ``` In the first example, the substring from index 1 to 3 is \\"aba\\", which contains 2 distinct characters: \'a\' and \'b\'.","solution":"def count_distinct_characters(s, queries): For each query that contains two integers l and r, returns the number of distinct characters in the substring s[l..r]. :param s: The input string :param queries: A list of tuple queries where each tuple contains integers l and r :return: A list of integers representing the number of distinct characters for each query results = [] for l, r in queries: # Since the input is 1-based, adjust indices to be 0-based for Python\'s string operations substring = s[l-1:r] distinct_characters = len(set(substring)) results.append(distinct_characters) return results"},{"question":"Kathleen is working on a sequence of integers and has devised an interesting way to reverse segments of the array based on a number of queries. She wants to efficiently reverse subarrays for multiple ranges within the sequence. Can you help her? The sequence is represented by an array `a` consisting of `n` integers, and she will provide multiple queries regarding which subarray to reverse. Reversing a subarray means that the elements within that specific range will be reordered in reverse. The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the size of the array. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the 1-indexed start and end of the range to be reversed. For each query, modify the array according to the query, and print the resulting array after all queries have been executed. # Input ``` n a1 a2 ... an q l1 r1 l2 r2 ... lq rq ``` # Output ``` The resulting array after all `q` queries have been applied. ``` # Example Input: ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` Output: ``` 5 4 3 2 1 ``` Explanation: - After the first query (1, 3), the array becomes [3, 2, 1, 4, 5]. - After the second query (2, 4), it becomes [3, 4, 1, 2, 5]. - After the third query (1, 5), it becomes [5, 2, 1, 4, 3].","solution":"def reverse_subarrays(n, array, q, queries): Reverses the subarray segments of an array based on multiple queries. Parameters: n (int): Size of the array. array (list of int): The elements of the array. q (int): Number of queries. queries (list of tuples): Each tuple contains two integers representing the start and end of the range to be reversed. Returns: list: The modified array after all queries. for (l, r) in queries: # Convert 1-indexed to 0-indexed l -= 1 r -= 1 array[l:r+1] = array[l:r+1][::-1] return array"},{"question":"Jarrod, a young farmer, has a rectangular field that is divided into a grid of unit squares arranged in a matrix with R rows and C columns. He wants to plant two different types of crops: wheat and corn. Each unit square will be planted with exactly one type of crop. However, to ensure the maximum yield, he wants to achieve the highest uniformity possible by planting the same type of crop in the largest possible sub-rectangle within the grid. Given the dimensions of the field, determine the largest possible sub-rectangle in the grid where all unit squares contain the same type of crop. Output the area of this largest sub-rectangle. Assume that the types of crop can be chosen freely for each square. The input consists of two space-separated integers R and C (1 ≤ R, C ≤ 1000) — the number of rows and columns in the grid. Print a single integer representing the area of the largest possible sub-rectangle where all unit squares contain the same type of crop. For example, if the input is: ``` 3 4 ``` The largest possible sub-rectangle where all unit squares contain the same type of crop consists of all 12 squares (3 rows * 4 columns), so the answer is: ``` 12 ``` If the input is: ``` 2 2 ``` The largest possible sub-rectangle where all unit squares contain the same type of crop consists of all 4 squares (2 rows * 2 columns), so the answer is: ``` 4 ```","solution":"def largest_uniform_subrectangle(R, C): Returns the area of the largest possible uniform sub-rectangle within an R by C grid. return R * C # Example Usage: # R, C = 3, 4 # print(largest_uniform_subrectangle(R, C)) # Output: 12"},{"question":"Aina loves playing with arrays and numbers. She has a special array of integers and a unique way of transforming it. She defines the transformation as moving each element x in the array to either x + 1 or x - 1. She wants to transform her array such that all the elements of the array become the same, and she needs your help to find the minimum number of moves required to achieve this. The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the minimum number of moves needed to transform the array so that all the elements become the same. For example, consider the array [1, 2, 3]. You can transform it to [2, 2, 2] in 2 moves, so the output is 2. Another example, for the array [5, 7, 9], you can transform it to [7, 7, 7] in 4 moves. Sample Input: 3 1 2 3 Sample Output: 2 Sample Input: 3 5 7 9 Sample Output: 4 Explanation: In the first example, you can move 1 to 2 (1 move), and 3 to 2 (1 move), for a total of 2 moves to make all elements equal to 2. In the second example, you can move 5 to 7 (2 moves), and 9 to 7 (2 moves), for a total of 4 moves to make all elements equal to 7.","solution":"def min_moves_to_equal_elements(n, arr): Returns the minimum number of moves to transform all elements of the array to the same value. Parameters: n (int): Length of the array. arr (list): List of integers representing the array. Returns: int: Minimum number of moves needed. # The optimal target is the median of the array when sorted arr.sort() median = arr[n // 2] # Calculate the total number of moves to make all elements equal to the median moves = sum(abs(x - median) for x in arr) return moves"},{"question":"Alice is a big fan of palindromes. A palindrome is a string that reads the same forward and backward. She loves to create palindromes from other strings. She has a string s consisting of lowercase English letters. Alice wants to split the string into the minimal number of substrings such that each substring is a palindrome. You need to help Alice find the minimum number of palindromic substrings needed to split the string s. The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the string s. The second line contains the string s, which consists of n lowercase English letters. Print a single integer — the minimum number of palindromic substrings needed to split the string s. # Example Input ``` 7 aabacaa ``` Output ``` 4 ``` # Explanation One possible way to split the string \\"aabacaa\\" into palindromic substrings is \\"a\\", \\"a\\", \\"b\\", \\"acaa\\". Therefore, the output is 4.","solution":"def min_palindromic_substrings(s): This method calculates the minimum number of palindromic substrings needed to split the string s. n = len(s) dp = [float(\'inf\')] * n palindrome = [[False] * n for _ in range(n)] for i in range(n): palindrome[i][i] = True for length in range(2, n + 1): for start in range(n - length + 1): end = start + length - 1 if s[start] == s[end]: if length == 2: palindrome[start][end] = True else: palindrome[start][end] = palindrome[start + 1][end - 1] for i in range(n): if palindrome[0][i]: dp[i] = 1 else: for j in range(i): if palindrome[j + 1][i]: dp[i] = min(dp[i], dp[j] + 1) return dp[-1] def string_to_min_palindromic_substrings(n, s): return min_palindromic_substrings(s)"},{"question":"In the kingdom of Alabast, there is a city with n districts, connected by bidirectional roads. Each road connects two different districts. The city\'s council wants to ensure that even if one of the roads is closed for maintenance, there will still be a way to travel between any two districts using the other existing roads. Your task is to determine if the city already meets this requirement or if additional work is needed to ensure this property. The first line of input contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^5) — the number of districts and the number of roads respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating a road connecting districts u and v. Print \\"Yes\\" (without the quotes) if the city has this property, or \\"No\\" otherwise. # Sample Input 1: ``` 4 4 1 2 2 3 3 4 4 1 ``` # Sample Output 1: ``` Yes ``` # Sample Input 2: ``` 4 3 1 2 2 3 3 4 ``` # Sample Output 2: ``` No ``` # Notes: In the first sample, removing any single road still leaves all districts connected. Therefore, the answer is \\"Yes\\". In the second sample, removing the road between district 3 and district 4 would result in 4 being disconnected from the rest, so the answer is \\"No\\".","solution":"def city_road_connectivity(n, m, edges): import collections def bfs(start_node, graph, n): visited = [False] * (n + 1) queue = collections.deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited.count(True) == n graph = collections.defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) is_connected_initially = bfs(1, graph, n) if not is_connected_initially: return \\"No\\" for u, v in edges: graph[u].remove(v) graph[v].remove(u) if not bfs(1, graph, n): return \\"No\\" graph[u].append(v) graph[v].append(u) return \\"Yes\\""},{"question":"You are given a city map represented by a grid of n rows and m columns where each cell can either be land (\'L\') or water (\'W\'). There are g gateways located in some land cells, and each gateway can be used to enter the city. You need to find the maximum number of distinct land cells that can be reached starting from any one gateway (using only directly adjacent cells in four directions: up, down, left, right). The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the city map. The next n lines contain a string of length m each, representing the city map, where \'L\' denotes land and \'W\' denotes water. The next line contains one integer g (1 ≤ g ≤ min(n*m, 10)) — the number of gateways. Each of the next g lines contains two space-separated integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the 1-based row and column indices of a land cell where a gateway is located. Output the maximum number of distinct land cells that can be reached starting from any one gateway. If there are no reachable land cells from any gateway, print 0. Example: Input: 5 6 LLLLLL LWWLWL LWLWLW LLWWLL LWWLLL 3 1 1 4 1 2 3 Output: 13 In this example, the largest number of cells that can be reached from any one gateway is 13, starting from the gateway at (1, 1).","solution":"def max_reachable_land_cells(n, m, grid, g, gateways): from collections import deque def bfs(start_r, start_c): visited = [[False for _ in range(m)] for _ in range(n)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_r, start_c)]) visited[start_r][start_c] = True reachable_land_cells = 1 while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'L\': queue.append((nr, nc)) visited[nr][nc] = True reachable_land_cells += 1 return reachable_land_cells max_cells = 0 for r, c in gateways: r -= 1 c -= 1 if grid[r][c] == \'L\': max_cells = max(max_cells, bfs(r, c)) return max_cells"},{"question":"You are given a set of tasks that need to be executed in a specific order. Each task takes a certain amount of time to complete, and some tasks depend on the completion of other tasks before they can start. Your goal is to determine the earliest time all tasks can be completed. To represent this, each task is given as a node, and a dependency between task A and task B means that B cannot start until A is completed. This forms a directed acyclic graph (DAG). You are given the number of tasks, the time each task takes, and the list of dependencies. You need to find the minimum total time required to complete all the tasks. # Input - The first line contains two integers `n` and `m` (1 le n le 10^5, 0 le m le 10^5) — the number of tasks and the number of dependencies. - The second line contains `n` integers, where the `i`-th integer is the time `t_i` (1 le t_i le 10^4) required to complete task `i`. - Each of the next `m` lines contains two integers `u` and `v` (1 le u, v le n), representing a dependency where task `v` cannot start until task `u` is completed. # Output - Print a single integer — the minimum total time required to complete all the tasks. # Example Input ``` 5 4 3 4 2 3 5 1 2 1 3 3 4 2 5 ``` Output ``` 12 ``` # Explanation In the example above: - Task 1 takes 3 units of time. - Task 2 depends on task 1 and takes 4 units of time. - Task 3 depends on task 1 and takes 2 units of time. - Task 4 depends on task 3 and takes 3 units of time. - Task 5 depends on task 2 and takes 5 units of time. The tasks can be scheduled as follows: - Complete task 1 first (3 units of time). - Then tasks 2 and 3 can start. Task 2 finishes at time 7, and task 3 finishes at time 5. - Task 4 can start after task 3 and finishes at time 8. - Task 5 can start after task 2 and finishes at time 12. Thus, the minimum total time required to complete all tasks is 12.","solution":"from collections import deque, defaultdict def min_completion_time(n, m, task_times, dependencies): indegree = [0] * n graph = defaultdict(list) # Build graph and count indegrees for u, v in dependencies: graph[u-1].append(v-1) indegree[v-1] += 1 # Initialize queue with tasks having zero indegree queue = deque() for i in range(n): if indegree[i] == 0: queue.append(i) completion_time = [0] * n while queue: current = queue.popleft() # To start current task, add its task_time completion_time[current] += task_times[current] for neighbor in graph[current]: indegree[neighbor] -= 1 # Update the completion time of neighbor tasks completion_time[neighbor] = max(completion_time[neighbor], completion_time[current]) if indegree[neighbor] == 0: queue.append(neighbor) return max(completion_time) # Sample Input n = 5 m = 4 task_times = [3, 4, 2, 3, 5] dependencies = [(1, 2), (1, 3), (3, 4), (2, 5)] # Sample Output print(min_completion_time(n, m, task_times, dependencies)) # Output: 12"},{"question":"A restaurant offers a special menu for groups. There are n guests, and each guest has a favorite dish. These favorite dishes are represented as integers in the list where the i-th integer represents the favorite dish of the i-th guest. The restaurant can only prepare m different types of dish sets, each type of dish set contains exactly two portions of the same dish. The goal is to feed the maximum number of guests with their favorite dishes using the available dish sets. Given the integer n (number of guests) and an integer m (number of different types of dishes), and a list of n integers where each integer represents the favorite dish of each guest, find out the maximum number of guests that can be satisfied with their favorite dish using m dish sets. You are guaranteed that there are always enough dishes (each type has an unlimited supply). The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of guests and the number of different types of dishes. The second line contains n integers where each integer is in the range [1, m] representing the favorite dish of each guest. Print the maximum number of guests that can be satisfied with their favorite dish. # Example **Input:** ``` 6 3 1 2 2 3 3 1 ``` **Output:** ``` 6 ``` **Explanation:** In the given example, each guest\'s favorite dish is either 1, 2, or 3. The restaurant can prepare sets such that each guest gets their favorite dish: - 2 sets of dish type 1 will cover guests 1 and the last guest. - 1 set of dish type 2 will cover the second and third guests. - 1 set of dish type 3 will cover the fourth and fifth guests. Maximum 6 guests can be satisfied with the given dish sets.","solution":"def max_satisfied_guests(n, m, preferences): from collections import Counter # Count the frequency of each favorite dish dish_count = Counter(preferences) satisfied_guests = 0 for count in dish_count.values(): satisfied_guests += (count // 2) * 2 return satisfied_guests"},{"question":"You are given a n×m grid consisting only of lowercase alphabets. Your task is to find the largest rectangular subgrid that contains only one unique character. For example, in the given grid: ``` a a b c a a b b d e e e f f f f ``` The largest rectangular subgrid with a unique character is of size 2x2 composed of \'a\' in the top-left corner. The first line contains two integers, n and m (1 ≤ n, m ≤ 500). The following n lines contain m lowercase characters each, describing the grid. Output the area (number of cells) of the largest rectangular subgrid that contains only one unique character. Example input: ``` 4 4 a a b c a a b b d e e e f f f f ``` Example output: ``` 4 ```","solution":"def largest_rectangle(grid): Returns the area of the largest rectangular subgrid that contains only one unique character. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) max_area = 0 for i in range(n): for j in range(m): current_char = grid[i][j] width = float(\'inf\') for k in range(i, n): if grid[k][j] != current_char: break curr_width = 0 while j + curr_width < m and grid[k][j + curr_width] == current_char: curr_width += 1 width = min(width, curr_width) area = (k - i + 1) * width max_area = max(max_area, area) return max_area"},{"question":"Alex just received a new n x m grid of numbers representing a map. He is curious to find certain paths on this grid. You need to help him find the maximum sum path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. You can only move either down or to the right at any point in time. Your task is to write a program that outputs the maximum possible sum over all such paths on the grid. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. Each of the next n lines contains m integers. The j-th integer in the i-th line, a[i][j] (1 ≤ a[i][j] ≤ 1000), represents the value of the cell located at (i, j) in the grid. For the given grid, output a single integer - the maximum sum of any path from the top-left to the bottom-right corner. # Input ```plaintext 2 2 1 2 3 4 ``` # Output ```plaintext 8 ``` Explanation: The path with the maximum sum starts at (0, 0), moves right to (0, 1), and then moves down to (1, 1). The sum is 1 + 2 + 4 = 7.","solution":"def max_path_sum(grid): Returns the maximum sum of any path from the top-left corner to the bottom-right corner of the grid. You can only move either down or to the right at any point in time. n = len(grid) m = len(grid[0]) # DP table to store the maximum sum path to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum sum return dp[n-1][m-1] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = list(map(int, data[index:index + m])) grid.append(row) index += m print(max_path_sum(grid)) # Uncomment the below line to test the code in local environment # main()"},{"question":"You are given a list of integers and your task is to determine the sum of all unique integers in the list. The list can be very large, and you need to write an efficient algorithm to handle this constraint. The first line contains an integer N (1 le N le 10^5), the number of elements in the list. The second line contains N space-separated integers a_1, a_2, ldots, a_N (-10^6 le a_i le 10^6), representing the elements of the list. Your task is to print the sum of all unique integers in the list. **Example:** Input: 6 1 2 2 3 4 4 Output: 10 Explanation: The unique integers in the list are 1, 2, 3, 4. Their sum is 1 + 2 + 3 + 4 = 10.","solution":"def sum_of_unique_integers(N, integers): Returns the sum of all unique integers in the list. Parameters: N (int): Number of integers in the list integers (list of int): List of integers Returns: int: Sum of unique integers return sum(set(integers))"},{"question":"In a kingdom far away, there live two types of magical creatures: dragons and phoenixes. The kingdom is represented as a tree with `n` nodes, where each node is a village, and edges represent roads between villages. Some villages are inhabited by dragons while others by phoenixes. Each village can only be inhabited by one type of creature, either a dragon or a phoenix. The king of the kingdom wants to balance the population of dragons and phoenixes as much as possible. He can order the creatures in any village to switch places with the creatures in any of its neighboring villages (connected directly by a road). This action can be repeated as many times as needed until no more switching can be performed to achieve better balance. Your task is to write a program that determines the minimum possible absolute difference between the number of villages inhabited by dragons and the number of villages inhabited by phoenixes after the optimal arrangement. The input consists of three things: 1. An integer `n` (1 ≤ n ≤ 100,000) — the number of villages (nodes). 2. An array `inhabitants` of length `n` consisting of either \'D\' or \'P\' — \'D\' means the village is inhabited by dragons and \'P\' means the village is inhabited by phoenixes. 3. `n-1` lines each containing two integers `u` and `v` (1 ≤ u, v ≤ n) indicating there is a road (edge) connecting villages `u` and `v`. Output a single integer — the minimum possible absolute difference between the number of villages inhabited by dragons and the number of villages inhabited by phoenixes after optimal switching. # Example Input 5 D P P D P 1 2 2 3 2 4 4 5 Output 1 # Explanation Initially, there are 2 dragons and 3 phoenixes: - village 1: D - village 2: P - village 3: P - village 4: D - village 5: P One optimal arrangement could be: - village 1: P (switch with village 2) - village 2: D (switch with village 1) - village 3: P - village 4: D - village 5: P Now we have 2 dragons and 3 phoenixes, maintaining the minimal absolute difference of 1.","solution":"def minimize_population_difference(n, inhabitants, edges): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find all connected components def bfs(start): queue = deque([start]) visited[start] = True component = [] while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component # Count the number of dragons and phoenixes dragon_count = inhabitants.count(\'D\') phoenix_count = inhabitants.count(\'P\') # If already balanced if abs(dragon_count - phoenix_count) <= 1: return abs(dragon_count - phoenix_count) # Track visited nodes visited = [False] * (n + 1) # Find all connected components components = [] for i in range(1, n + 1): if not visited[i]: components.append(bfs(i)) # Store the population difference of each component component_balances = [] for component in components: d_count = sum(1 for v in component if inhabitants[v - 1] == \'D\') p_count = len(component) - d_count component_balances.append(d_count - p_count) # Dynamic programming to find minimum difference total_sum = sum(component_balances) target = (total_sum + abs(dragon_count - phoenix_count)) // 2 dp = [False] * (target + 1) dp[0] = True for balance in component_balances: for j in range(target, abs(balance) - 1, -1): if j - abs(balance) >= 0: dp[j] = dp[j] or dp[j - abs(balance)] # Find the closest value to the target for i in range(target, -1, -1): if dp[i]: return abs(total_sum - 2 * i) return abs(dragon_count - phoenix_count)"},{"question":"In a faraway kingdom, there\'s a game played by young wizards. The game involves a magical board that is a rectangular grid with n rows and m columns. Each cell of the grid initially contains a certain number of magical power points. The wizards can perform one operation: they can select any row or column and increase or decrease all the power points in that row or column by 1. The objective of the game is to make the total sum of the power points in all the cells as close as possible to a given target value T. You are given the initial state of the grid and the target sum. Write a program to determine the minimum number of operations needed to achieve the goal. Input: - The first line contains three integers n, m, and T (1 le n, m le 100, |T| le 10^9) — the number of rows, the number of columns, and the target sum. - The next n lines contain m integers each — the initial state of the grid. The value in the i-th row and j-th column represents the power points in cell (i, j) and is denoted by a_{ij} (|a_{ij}| le 1000). Output: - Output a single integer — the minimum number of operations required to make the total sum of the power points in the grid as close as possible to T. Example: Input: 4 3 30 1 2 3 4 5 6 7 8 9 10 11 12 Output: 1 Explanation: Initially, the sum of all power points is 78. To make the total sum close to 30, we can decrease any row or column by 1 multiple times. For instance, decreasing the first column all cells by 1 for 48 times will result in the sum to be 30. The total number of operations needed is 48.","solution":"def min_operations_to_target_sum(n, m, T, grid): total_sum = sum(sum(row) for row in grid) difference = abs(T - total_sum) return difference # Each operation can change the sum by 1, hence number of operations needed is equal to the difference # Example Usage # n, m, and T n = 4 m = 3 T = 30 # initial grid grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12] ] min_operations_to_target_sum(n, m, T, grid)"},{"question":"An international robotics competition comprises several rounds where each team solves various tasks to earn scores. The total score of a team determines its rank in the competition. However, there is a special rule: the score from the worst-performing task in each round is omitted from the total score. You are given the number of teams, the number of rounds, and the scores of each team in each round. Your task is to compute the total competition score for each team, considering the special rule. # Input The first line contains two integers n and r (1 le n le 100, 1 le r le 100) — the number of teams and the number of rounds, respectively. The next n lines contain r integers each, representing the scores of a team in each round. # Output Output n lines — each line contains a single integer, representing the total score of the corresponding team after omitting the worst-performing task score in each round. # Example Input ``` 3 4 10 20 30 40 5 15 25 10 14 16 18 17 ``` Output ``` 90 45 51 ``` # Explanation In the example: - Team 1 scores for 4 rounds: [10, 20, 30, 40]. Omitting the worst score 10, the total score is 20 + 30 + 40 = 90. - Team 2 scores for 4 rounds: [5, 15, 25, 10]. Omitting the worst score 5, the total score is 15 + 25 + 10 = 50. - Team 3 scores for 4 rounds: [14, 16, 18, 17]. Omitting the worst score 14, the total score is 16 + 18 + 17 = 51.","solution":"def compute_total_scores(n, r, scores): Compute the total competition scores for each team after omitting the worst-performing task score in each round. Parameters: n (int): Number of teams r (int): Number of rounds scores (List[List[int]]): A list of score lists for each team Returns: List[int]: The total scores for each team total_scores = [] for team_scores in scores: if r > 1: min_score = min(team_scores) total_score = sum(team_scores) - min_score else: total_score = 0 # If only one round, omitting the only score total_scores.append(total_score) return total_scores"},{"question":"You are given an array of positive integers representing the prices of different items in a shop. A customer wants to buy multiple items such that the total price is maximized but does not exceed a given budget. The first line of the input contains two integers n and B (1 ≤ n ≤ 100, 1 ≤ B ≤ 100000) — the number of items and the budget respectively. The second line contains n positive integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) representing the prices of the items. Write a program to determine the maximum total price of selected items without exceeding the budget B. You can select any combination of items. Print the maximum total price that can be achieved without exceeding the budget. **Example**: Input: ``` 5 50 10 20 30 40 50 ``` Output: ``` 50 ``` Input: ``` 4 10 8 6 4 2 ``` Output: ``` 10 ``` Input: ``` 3 29 10 10 9 ``` Output: ``` 29 ```","solution":"def maximize_total_price(n, B, prices): Determines the maximum total price of selected items without exceeding the budget. Parameters: n (int): Number of items. B (int): Budget. prices (list of int): List of prices of the items. Returns: int: Maximum total price that can be achieved without exceeding the budget. from itertools import combinations max_price = 0 for r in range(1, n+1): for combo in combinations(prices, r): total_price = sum(combo) if total_price <= B and total_price > max_price: max_price = total_price return max_price"},{"question":"You are given a sequence of n integers where the sequence is initially sorted in non-decreasing order. However, the sequence has been rotated k times such that the resulting sequence wraps around back to the start. Your task is to find the index of the minimum element in the rotated sequence. For example, if the initial sequence is [1, 2, 3, 4, 5] and k = 2, the rotated sequence will be [3, 4, 5, 1, 2]. The minimum element in this sequence is 1, and its index is 3 (0-based indexing). The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains an integer n (1 ≤ n ≤ 1000) followed by n integers representing the rotated sequence. For each test case, print the index of the minimum element in the rotated sequence. # Input ``` 3 5 3 4 5 1 2 5 2 3 4 5 1 7 6 7 9 15 19 2 4 ``` # Output ``` 3 4 5 ``` Explanation: 1. In the first test case, the rotated sequence is [3, 4, 5, 1, 2]. The minimum element is 1, which is at index 3. 2. In the second test case, the rotated sequence is [2, 3, 4, 5, 1]. The minimum element is 1, which is at index 4. 3. In the third test case, the rotated sequence is [6, 7, 9, 15, 19, 2, 4]. The minimum element is 2, which is at index 5.","solution":"def find_min_index_in_rotated_sequence(t, test_cases): Finds the index of the minimum element in each rotated sequence. Parameters: t: Number of test cases (integer) test_cases: List of lists, where each sublist contains integers representing a rotated sequence Returns: List of integers representing the indexes of the minimum elements in the respective sequences. results = [] for case in test_cases: n = case[0] sequence = case[1:] min_index = sequence.index(min(sequence)) results.append(min_index) return results"},{"question":"You are given a list of integers, and you need to find the smallest possible missing positive integer from the list. The list may contain both positive and negative numbers as well as zeros. Your task is to write a function that returns the smallest missing positive integer from the list. The function should have a linear time complexity of O(n) and use constant extra space of O(1). The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the list. Print the smallest missing positive integer. Example: Input: 7 1 2 0 -1 3 5 4 Output: 6","solution":"def find_missing_positive(nums): Finds the smallest missing positive integer from the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"During a cultural festival, a city has decided to lay out a network of footpaths connecting various points of interest such as parks, museums, and squares. Each footpath has a certain length, and the objective is to make sure that people can walk between any two points of interest without retracing their steps over a previously used path. In other words, the layout should be designed such that there are no cycles in the pathway network, and the total length of paths is minimized. This essentially models a minimum spanning tree problem. Given the layout of the city, the number of points of interest, and the lengths of all possible footpaths between them, write a program to determine the minimum total length of the footpaths required to connect all points of interest so that there is a path between any two points. The first line of the input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10^6) - the number of points of interest and the number of possible footpaths respectively. Each of the next m lines describes a footpath and consists of three integers ai, bi and li (1 ≤ ai, bi ≤ n, 1 ≤ li ≤ 10^6) where ai and bi are the points of interest connected by this footpath, and li is the length of the footpath. Print a single integer, which is the minimum total length of footpaths needed to connect all points of interest. For example, consider the following input: ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 1 4 5 ``` The output should be: ``` 6 ``` In this example, the minimum total length is achieved by selecting the paths with lengths 1, 2, and 3.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_spanning_tree(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) total_length = 0 for edge in edges: u, v, w = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: total_length += w union(parent, rank, root_u, root_v) return total_length def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 3 * i]) - 1 v = int(data[3 + 3 * i]) - 1 w = int(data[4 + 3 * i]) edges.append((u, v, w)) return n, edges def main(): n, edges = read_input() print(minimum_spanning_tree(n, edges)) if __name__ == \\"__main__\\": main()"},{"question":"You have been given a rectangular grid consisting of n rows and m columns filled with 0s and 1s. A cell in the grid can interact with its neighboring cells (up, down, left, and right). An interaction occurs if two neighboring cells have different values (one cell contains 0 and the other contains 1). Your task is to output the number of pairs of neighboring cells that interact. The first line of the input contains two integers n and m (1 leq n, m leq 100). The next n lines each contain m integers (either 0 or 1), representing the grid. Output an integer denoting the number of interacting pairs. # Example Input: ``` 3 3 1 0 1 0 1 0 1 0 1 ``` Output: ``` 12 ``` In the example above, each 1 is surrounded by 0s and vice versa, leading to many interactions. Explanation: There are 12 pairs of neighboring cells with different values: - Cells (1,1) and (1,2) - Cells (1,2) and (1,3) - Cells (2,1) and (2,2) - Cells (2,2) and (2,3) - Cells (3,1) and (3,2) - Cells (3,2) and (3,3) - Cells (1,1) and (2,1) - Cells (1,3) and (2,3) - Cells (2,2) and (1,2) - Cells (2,2) and (3,2) - Cells (2,1) and (3,1) - Cells (2,3) and (3,3)","solution":"def count_interacting_pairs(n, m, grid): Counts the number of interacting pairs of neighboring cells in a grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: A list of lists representing the grid. :return: The number of interacting pairs. count = 0 # Check neighbors (right and down only to avoid double counting). for i in range(n): for j in range(m): if j + 1 < m and grid[i][j] != grid[i][j + 1]: count += 1 if i + 1 < n and grid[i][j] != grid[i + 1][j]: count += 1 return count"},{"question":"Given an array of non-negative integers, you are tasked with the following problem: Consider the weight of a subarray as the sum of its elements. Define a subarray as a contiguous segment of the original array. Identify the length and the weight of the subarray with the maximum weight. If there are multiple such subarrays with the same maximum weight, return the shortest one. If there are still multiple, return the leftmost one. The first line contains an integer n (1 leq n leq 10^5) – the number of elements in the array. The second line contains n non-negative integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the elements of the array. Print two integers: the length of the subarray with the maximum weight and the weight of this subarray. For example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 5 15 ``` Input: ``` 7 4 5 1 1 3 2 4 ``` Output: ``` 7 20 ``` Explanation: In the first example, the subarray is the whole array [1, 2, 3, 4, 5] with weight 15 and length 5. In the second example, the subarray with maximum weight is [4, 5, 1, 1, 3, 2, 4] with weight 20 and length 7.","solution":"def find_max_weight_subarray(arr): Returns the length and the weight of the subarray with the maximum weight. If there are multiple subarrays with the same maximum weight, returns the shortest. If there are still multiple, returns the leftmost one. max_weight = -1 max_length = float(\'inf\') n = len(arr) for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] current_length = j - i + 1 if (current_sum > max_weight) or (current_sum == max_weight and current_length < max_length): max_weight = current_sum max_length = current_length return max_length, max_weight"},{"question":"You are given a weighted undirected graph with n nodes and m edges. The task is to find the shortest path between any two given nodes. However, due to heavy traffic, some edges may temporarily become unavailable. You need to answer multiple queries where each query either removes a specified edge from the graph or asks for the shortest path between two nodes. Specifically, you are required to process two types of operations: 1. **Remove Edge Operation:** Given three integers `1 u v`, remove the edge between nodes `u` and `v` (if it exists). 2. **Shortest Path Operation:** Given three integers `2 u v`, find and print the shortest path between nodes `u` and `v`. If no path exists, print `-1`. The graph changes dynamically with each edge removal operation, and edge removals are cumulative. The first line contains three integers `n` (1 ≤ n ≤ 1000), `m` (1 ≤ m ≤ 20000), and `q` (1 ≤ q ≤ 10000) — the number of nodes, edges, and queries, respectively. Each of the following `m` lines contains three integers `a`, `b`, and `w` (1 ≤ a, b ≤ n, 1 ≤ w ≤ 1000) describing an edge between nodes `a` and `b` with weight `w`. Each of the following `q` lines contains one operation in the form of either `1 u v` or `2 u v`. You are to process each query in the order it is given. Note that once an edge is removed, it cannot be restored for subsequent queries. **Input:** ```plaintext n m q a1 b1 w1 a2 b2 w2 ... am bm wm operation1 operation2 ... operationq ``` **Output:** For each shortest path query, output the length of the shortest path between the specified nodes, or `-1` if no path exists. **Example:** ```plaintext Input: 4 4 5 1 2 4 1 3 2 2 3 1 3 4 3 2 1 4 1 1 3 2 1 4 1 2 3 2 1 4 Output: 6 6 -1 ``` In the above example, the initial graph has edges with weights as specified. The first operation queries the shortest path from node 1 to node 4, which is 1->3->4 with a total weight of 6. The second operation removes the edge between nodes 1 and 3. The third operation queries the shortest path again from node 1 to node 4, and it remains the same at 6. The fourth operation removes the edge between nodes 2 and 3. Finally, the last operation queries the shortest path from node 1 to node 4, which after the edge removals, no path exists and hence outputs `-1`.","solution":"import heapq from collections import defaultdict import sys def shortest_path(edges, n, queries): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) removed_edges = set() def dijkstra(source, target): if (source, target) in removed_edges or (target, source) in removed_edges: return -1 if source == target: return 0 pq = [(0, source)] dist = {i: float(\\"inf\\") for i in range(1, n + 1)} dist[source] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == target: return current_distance if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: if (current_node, neighbor) in removed_edges or (neighbor, current_node) in removed_edges: continue distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 results = [] for query in queries: operation, u, v = query if operation == 1: removed_edges.add((u, v)) elif operation == 2: results.append(dijkstra(u, v)) return results"},{"question":"You are given a list of `n` unique integers. A subarray is defined as a contiguous segment of the array. Each subarray has a sum which is the total of all the integers in that subarray. We define a \\"peaky subarray\\" as a subarray whose sum is strictly greater than both the sum of the subarray directly preceding it and the sum of the subarray directly succeeding it (if they exist). Your task is to find the number of \\"peaky subarrays\\" of length exactly `k` in the given list. The first line of the input contains two integers `n` and `k` (3 ≤ `k` ≤ `n` ≤ 10^5) — the number of integers in the list and the length of the subarray respectively. The second line contains `n` space-separated integers representing the list of integers. Output a single integer — the number of \\"peaky subarrays\\" of length exactly `k`. In the first sample, we analyze the subarrays and their sums: - For subarray [2, 3, 1], the sum is 6, which is greater than 5 (the sum of the preceding subarray) and 3 (the sum of the succeeding subarray). Hence, it is a peaky subarray. - For subarray [3, 1, 4], the sum is 8, which is not greater than the sum of its preceding subarray (6) and succeeding subarray (9). Therefore, it is not a peaky subarray. - For subarray [1, 4, 1], the sum is 6, which is not greater than the sum of its preceding subarray (8) but is not less than the sum of the succeeding subarray (7). Therefore, it is not a peaky subarray. - For subarray [4, 1, 2], the sum is 7, which is greater than 6 (the sum of the preceding subarray) but not greater than 6 (the sum when the series ends). However, since there is no sum after the last one, it does not satisfy both conditions. Example input: ``` 7 3 1 2 3 1 4 1 2 ``` Example output: ``` 1 ```","solution":"def count_peaky_subarrays(n, k, array): Counts the number of peaky subarrays of length exactly k in the given list. Parameters: n (int): The number of integers in the list. k (int): The length of the subarray. array (list): The list of integers. Returns: int: Number of peaky subarrays. if k == 1: return 0 # No subarray can be peaky if length is 1. # Calculate the sum of the first subarray of length k. subarray_sum = sum(array[:k]) subarray_sums = [subarray_sum] # Sliding window to calculate sums of all subarrays of length k. for i in range(1, n - k + 1): subarray_sum = subarray_sum - array[i - 1] + array[i + k - 1] subarray_sums.append(subarray_sum) count = 0 for i in range(1, len(subarray_sums) - 1): if subarray_sums[i] > subarray_sums[i - 1] and subarray_sums[i] > subarray_sums[i + 1]: count += 1 return count"},{"question":"You are given a sequence of n integers a1, a2, …, an and an integer k. You need to answer the following query multiple times: how many distinct integers are there in the subarray from l to r (inclusive)? Formally, you are given a sequence of integers a of length n and an integer k (1 ≤ k ≤ 10^5). Then you will be given k queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n). For each query, you need to output how many distinct integers are present in the subarray a[l … r]. Input: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5) — the length of the sequence and the number of queries. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. - Each of the next k lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subarray for the corresponding query. Output: - For each query, print the number of distinct integers in the subarray a[l ... r]. Example: Input: ``` 5 3 1 2 1 3 2 1 5 2 4 3 5 ``` Output: ``` 3 3 2 ``` Explanation: For the first query, the subarray is [1, 2, 1, 3, 2] which contains 3 distinct integers: {1, 2, 3}. For the second query, the subarray is [2, 1, 3] which also contains 3 distinct integers: {1, 2, 3}. For the third query, the subarray is [1, 3, 2] which contains 2 distinct integers: {1, 2, 3}.","solution":"def distinct_numbers_in_subarrays(n, k, sequence, queries): Finds the number of distinct integers in the specified subarray for each query. Args: n : int : The length of the sequence k : int : The number of queries sequence : list : List of integers representing the initial sequence queries : list : List of tuples where each tuple contains two integers l and r Returns: list : A list of integers representing the number of distinct integers in the subarray for each query results = [] for l, r in queries: subarray = sequence[l-1:r] distinct_elements = set(subarray) results.append(len(distinct_elements)) return results"},{"question":"You are given a binary string s of length n. You can perform the following operation any number of times: choose any two adjacent characters in the string and swap them if they are different. How many unique binary strings can you generate by performing such operations? The first line contains an integer n (1 le n le 10^6) - the length of the binary string. The second line contains a binary string s of length n consisting of characters \'0\' and \'1\'. Print one integer — the number of unique binary strings that can be generated by performing the described operations. In the first example, the answer is 6 because we can get {0101, 0110, 1001, 1010, 1100, 0011}. In the second example, the answer is 1 as it is already sorted and no more unique formations are possible.","solution":"def count_unique_binary_strings(s): Returns the number of unique binary strings that can be generated by swapping adjacent characters if they are different. zeros = s.count(\'0\') ones = s.count(\'1\') # The number of unique permutations is combinatorial (multi-permutations) from math import comb return comb(zeros + ones, zeros)"},{"question":"You are given a string s consisting of lowercase English letters. A substring is defined as a contiguous sequence of characters within the string. A substring is called **beautiful** if it contains at least one of each vowel (`a`, `e`, `i`, `o`, `u`). Your task is to find the length of the shortest beautiful substring in the given string s. If no such substring exists, output `-1`. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5). It is guaranteed that the total length of all strings in the input does not exceed 10^6 characters. For each test case, print a single integer — the length of the shortest beautiful substring, or `-1` if no such substring exists. # Example Input: ``` 3 aeiou abcdefghiou bcdfg ``` Output: ``` 5 11 -1 ``` # Explanation - In the first test case, the entire string `\\"aeiou\\"` contains all the vowels and is itself the shortest beautiful substring of length 5. - In the second test case, the substring `\\"abcdefghiou\\"` contains all the vowels and is the shortest beautiful substring with length 11. - In the third test case, there are no beautiful substrings as it lacks vowels. Thus, the output is `-1`.","solution":"def shortest_beautiful_substring(t, test_cases): vowels = set(\'aeiou\') results = [] for s in test_cases: n = len(s) min_length = float(\'inf\') left = 0 while left < n: current_vowels = set() for right in range(left, n): if s[right] in vowels: current_vowels.add(s[right]) if len(current_vowels) == 5: min_length = min(min_length, right - left + 1) break left += 1 if min_length == float(\'inf\'): results.append(-1) else: results.append(min_length) return results # Example usage # t = 3 # test_cases = [\\"aeiou\\", \\"abcdefghiou\\", \\"bcdfg\\"] # print(shortest_beautiful_substring(t, test_cases)) # Output: [5, 11, -1]"},{"question":"Anna loves traveling and she wants to plan a trip to visit multiple cities. She has a list of cities she\'d like to visit and the distance between them. However, she can only travel a specific maximum distance per day. Anna needs to figure out the minimum number of days required to visit all the cities in her list. The cities are connected in a linear fashion, and she starts her trip at city 1 and ends at city n. Each day, she can choose to travel from her current city to any city that is reachable within the maximum travel distance for that day. Given the list of cities and the distances between consecutive cities, compute the minimum number of days required for Anna to complete her trip. The first line contains a single integer t (1 le t le 10^4) - the number of test cases. For each test case, the first line contains two integers n and d (2 le n le 10^5, 1 le d le 10^9) - the number of cities and the maximum distance Anna can travel in one day. The second line contains n-1 integers representing the distances between consecutive cities d_1, d_2, ldots, d_{n-1} (1 le d_i le 10^9). For each test case, print the minimum number of days required for Anna to visit all the cities. Example: Input: ``` 2 5 10 1 2 5 6 4 4 2 2 2 ``` Output: ``` 2 2 ``` Explanation: In the first test case: - On the first day, Anna can travel from city 1 to city 4 (traveling a total distance of 8). - On the second day, Anna can travel from city 4 to city 5 (traveling a total distance of 6). In the second test case: - On the first day, Anna can travel from city 1 to city 2 (traveling a total distance of 2) and then to city 3 (another 2). - On the second day, she travels from city 3 to city 4 (traveling a total distance of 2).","solution":"def minimum_days_to_visit_cities(t, test_cases): results = [] for n, d, distances in test_cases: days = 0 current_distance = 0 for i in range(n - 1): if current_distance + distances[i] > d: days += 1 current_distance = distances[i] else: current_distance += distances[i] days += 1 # For the last segment results.append(days) return results"},{"question":"Alex is interested in the properties of digital numbers. He recently learned about the fascinating concept of \\"digital roots\\". The digital root of a non-negative integer is obtained as follows: repeatedly sum the digits of the number until a single-digit number is obtained. For example, the digital root of 9875 is 2, because 9 + 8 + 7 + 5 = 29, and 2 + 9 = 11, and 1 + 1 = 2. Your task is to help Alex by providing the digital roots of several given integers. There are multiple test cases in the input. The first line contains a single integer t (1 ≤ t ≤ 1,000) — the number of test cases. Each of the next t lines contains one non-negative integer ni (0 ≤ ni ≤ 2·10^9). For each test case, print the digital root of ni. Consider the sample input: ``` 4 9875 0 123456 999999999 ``` The expected output: ``` 2 0 3 9 ``` In the sample input, the digital root of 9875 is 2. The digital root of 0 is 0. The digital root of 123456 is 3, since 1 + 2 + 3 + 4 + 5 + 6 = 21, and 2 + 1 = 3. The digital root of 999999999 is 9, since 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 81, and 8 + 1 = 9. You can solve this problem using various methods, but you may find an efficient algorithm using modulo arithmetic or properties of the number 9.","solution":"def digital_root(n): Finds the digital root of a non-negative integer n. if n == 0: return 0 else: return 1 + (n - 1) % 9 def multiple_digital_roots(t, numbers): Given a number of test cases t, and a list of numbers, returns a list of digital roots for each number. return [digital_root(n) for n in numbers]"},{"question":"You are given a list of flight routes. Each route is represented by a triplet of integers `(source, destination, distance)` where `source` is the starting airport code, `destination` is the ending airport code, and `distance` is the distance between the two airports. Your task is to determine the length of the shortest route (in terms of total distance) from a given `start` airport to a `destination` airport. There might be multiple routes connecting the same airports with different distances; you need to consider the shortest one. Input: - The first line contains three space-separated integers `n` (1 ≤ n ≤ 100), the number of routes, `start` and `destination` (1 ≤ start, destination ≤ 100) representing the airport codes for the starting and ending points of the route respectively. - The next `n` lines each contain three space-separated integers `source`, `destination`, and `distance` (1 ≤ source, destination ≤ 100, 1 ≤ distance ≤ 10^4), representing a route between two airports. Output: - If there is a route from `start` to `destination`, output the minimum distance needed to travel from `start` to `destination`. If no such route exists, output `-1`. Example: Input: ``` 5 1 4 1 2 5 2 3 10 3 4 2 1 4 15 2 4 7 ``` Output: ``` 14 ``` Explanation: The shortest route from airport `1` to airport `4` can be found by taking the following steps: - Travel from airport `1` to airport `2` with a distance of `5`. - Travel from airport `2` to airport `4` with a distance of `7`. The total distance is `5 + 7 = 12`. Note: You need to employ a shortest-path algorithm (like Dijkstra\'s or Floyd-Warshall) to determine the minimum distance.","solution":"import heapq def find_shortest_route(n, start, destination, routes): graph = {} # Building the adjacency list for the graph for src, dst, dist in routes: if src not in graph: graph[src] = [] graph[src].append((dist, dst)) # Implementing Dijkstra\'s Algorithm min_heap = [(0, start)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, 101)} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node == destination: return current_distance if current_distance > distances[current_node]: continue for neighbor_distance, neighbor in graph.get(current_node, []): distance = current_distance + neighbor_distance if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1"},{"question":"International Cypher Challenge is organized annually starting from 2000. Each year the challenge generates a simplified cryptographic key of the form ICC\'y, where y represents the set of trailing digits of the current year, ensuring it is unique and non-repetitive. The chosen key for a particular year is the shortest possible trailing digit string that has not yet been used. For instance, the keys assigned to the first three years of the challenge (2000, 2001, 2002) were ICC\'0, ICC\'1, and ICC\'2, respectively. In 2010, the key was ICC\'10 since ICC\'0 was already used in 2000. You are given a list of these keys. For each key, determine the actual year it represents. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of keys to process. Each of the next n lines contains a single key. It\'s guaranteed that each key contains at most six digits after \'ICC\'\'. For each key given in the input, find and print the corresponding year of the challenge. # Input ``` 3 ICC\'0 ICC\'1 ICC\'10 ``` # Output ``` 2000 2001 2010 ``` # Explanation - ICC\'0 corresponds to the year 2000, as \'0\' was not used in any previous year. - ICC\'1 corresponds to the year 2001, as 2001\'s trailing digit \'1\' was not used in any previous year. - ICC\'10 corresponds to the year 2010, since \'10\' is the smallest unused trailing digit for the corresponding year.","solution":"def get_year_from_key(key): Given a cryptographic key of the form ICC\'y, where y is a string of digits, determine the corresponding year since the challenge started in 2000. starting_year = 2000 trailing_digits = key[4:] # Strip the initial \\"ICC\'\\" year = starting_year + int(trailing_digits) return year"},{"question":"You are given two integers, A and B. You need to determine the number of ways to represent A as a sum of exactly B positive distinct integers. Each integer should be used at most once. The only line of input contains two space-separated integers A and B (1 ≤ A, B ≤ 100). Ensure that 1 ≤ A ≤ B(B+1)/2 so that it is always possible to represent A as the sum of distinct integers within given constraints. Output a single integer representing the number of ways to represent A as a sum of B distinct positive integers. If no such representation exists, output 0. Example Input: 15 5 Example Output: 1 Example Input: 10 3 Example Output: 1 Example Input: 7 4 Example Output: 0","solution":"def count_ways(A, B): Returns the number of ways to represent A as a sum of B distinct positive integers. # Starting with the smallest B distinct integers: 1, 2, 3, ..., B min_sum = B * (B + 1) // 2 if A < min_sum: return 0 return 1"},{"question":"You are given a sequence of integers, and your task is to perform a series of operations on the sequence. Each operation can be one of the following: 1. **Add**: Add a specified integer to each element of the sequence. 2. **Multiply**: Multiply each element of the sequence by a specified integer. 3. **Modulo**: Apply the modulo operation to each element of the sequence with a specified integer. You need to determine the resulting sequence after all operations are applied in the given order. The input is structured in the following way: - The first line contains an integer `n` (1 ≤ n ≤ 100) — the initial number of integers in the sequence. - The second line contains `n` integers `a1, a2, ... , an` (1 ≤ ai ≤ 10^6) — the initial sequence. - The third line contains an integer `q` (1 ≤ q ≤ 100) — the number of operations. - The next `q` lines each describe an operation. Each line starts with a single character (`A`, `M`, or `O`) indicating the type of operation (Add, Multiply, or Modulo, respectively), followed by an integer `x` (1 ≤ x ≤ 10^6) which is the operand for the operation. Print the resulting sequence after applying all the operations in the given order in a single line. **Example:** Input: ``` 5 1 2 3 4 5 3 A 2 M 3 O 5 ``` Output: ``` 0 1 2 3 4 ``` Explanation: - Initial sequence: [1, 2, 3, 4, 5] - After adding `2`: [3, 4, 5, 6, 7] - After multiplying by `3`: [9, 12, 15, 18, 21] - After modulo `5`: [4, 2, 0, 3, 1]","solution":"def perform_operations(n, sequence, q, operations): Perform a series of operations on the sequence and return the resulting sequence. Args: n (int): Number of integers in the sequence. sequence (list): The initial sequence of integers. q (int): Number of operations. operations (list): List of operations as tuples (operation_type, operand). Returns: list: Modified sequence after all operations are applied. for operation in operations: op_type, x = operation if op_type == \'A\': sequence = [num + x for num in sequence] elif op_type == \'M\': sequence = [num * x for num in sequence] elif op_type == \'O\': sequence = [num % x for num in sequence] return sequence"},{"question":"Given an array of n integers, you need to perform q operations on it. The operations can be of the following types: 1. Update the ith element of the array to a new value. 2. Given two indices l and r, find the maximum even number in the subarray from index l to r (inclusive). If there is no even number in the specified range, return -1. # Input - The first line contains two integers n and q (1 ≤ n, q ≤ 2 * 10^5) — the number of elements in the array and the number of queries, respectively. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. - The next q lines contain queries, each query is of one of the following formats: - \\"1 i x\\" — update the ith element to x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9). - \\"2 l r\\" — find the maximum even number in the subarray from index l to r (1 ≤ l ≤ r ≤ n). # Output For each query of the second type, output the result on a new line. # Example Input ``` 5 3 2 7 4 8 6 2 1 5 1 3 9 2 1 5 ``` Output ``` 8 8 ``` Explanation: - For the first query \\"2 1 5\\", the maximum even number in the subarray [2, 7, 4, 8, 6] is 8. - The second query \\"1 3 9\\" updates the array to [2, 7, 9, 8, 6]. - For the last query \\"2 1 5\\", the maximum even number in the subarray [2, 7, 9, 8, 6] is 8.","solution":"def perform_operations(n, q, array, queries): results = [] for query in queries: if query[0] == 1: # Update operation index = query[1] - 1 new_value = query[2] array[index] = new_value elif query[0] == 2: # Find max even number in subarray l = query[1] - 1 r = query[2] max_even = -1 for number in array[l:r]: if number % 2 == 0 and number > max_even: max_even = number results.append(max_even) return results"},{"question":"A company has a warehouse storing various types of items. Each item is represented by an integer, and the warehouse keeps track of the quantity of each item type. They need to fulfill a series of orders, with each order specifying a required quantity for a certain item type. For each order, the warehouse either fulfills the order completely if there are enough items of the requested type or cancels the order if there are not enough items. Your task is to write a program that processes a series of orders and maintains the inventory. The first input line contains two integers n and q (1 ≤ n, q ≤ 105) — the number of different item types in the warehouse and the number of orders, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109), where ai is the initial quantity of the i-th item type in the warehouse. Each of the next q lines contains two integers ti and ki (1 ≤ ti ≤ n, 1 ≤ ki ≤ 109), representing the item type ti and the quantity ki requested in the i-th order. For each order, print \\"Fulfilled\\" if the warehouse can fulfill the order, otherwise print \\"Cancelled\\". If the order is fulfilled, decrease the quantity of that item type in the warehouse by the requested amount. # Input ``` 4 3 10 5 8 6 1 5 2 10 3 3 ``` # Output ``` Fulfilled Cancelled Fulfilled ``` In this problem, you must manage and update the warehouse inventory based on the incoming orders. The item types and their initial quantities are provided, and for each order, you need to check if it can be fulfilled (i.e., if there\'s enough inventory of the specified item type) and update the inventory accordingly. If the order cannot be fulfilled due to insufficient quantity, you should print \\"Cancelled\\".","solution":"def process_orders(n, q, initial_quantities, orders): results = [] for ti, ki in orders: if initial_quantities[ti - 1] >= ki: results.append(\\"Fulfilled\\") initial_quantities[ti - 1] -= ki else: results.append(\\"Cancelled\\") return results"},{"question":"You are given an integer array nums. Among all the possible subarrays of nums, find the subarray with the maximum sum and return its starting and ending indices (0-based). If multiple subarrays have the same maximum sum, return the subarray which appears first. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4), representing the elements of the array. Print two integers, the starting and ending indices of the subarray with the maximum sum. # Example Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 3 6 **Note:** For the example, the subarray with the maximum sum is [4, -1, 2, 1] which starts at index 3 and ends at index 6.","solution":"def max_subarray_indices(nums): Returns the starting and ending indices of the subarray with the maximum sum. If multiple subarrays have the same maximum sum, the subarray which appears first is returned. n = len(nums) if n == 0: return -1, -1 max_sum = float(\'-inf\') curr_sum = 0 start = 0 max_start = max_end = 0 for i in range(n): if curr_sum <= 0: curr_sum = nums[i] start = i else: curr_sum += nums[i] if curr_sum > max_sum: max_sum = curr_sum max_start = start max_end = i return max_start, max_end"},{"question":"Given a list of integers, your task is to find the length of the longest subsequence that meets the following criteria: - The subsequence is strictly increasing. - The difference between any two consecutive elements in the subsequence does not exceed a given integer d. The first line contains two integers n (1 ≤ n ≤ 10^5) and d (1 ≤ d ≤ 1000) — the number of elements in the list and the maximum allowed difference between consecutive elements of the subsequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the list. Output the length of the longest subsequence that meets the criteria. In the first sample, a valid subsequence is [1, 2, 3, 4, 5] with length 5. In the second sample, a valid subsequence is [10, 20, 30] with length 3. # Samples Input 5 1 1 2 3 4 5 Output 5 Input 6 10 10 20 30 5 15 25 Output 3","solution":"def longest_subsequence(n, d, arr): Returns the length of the longest subsequence that is strictly increasing and the difference between any two consecutive elements does not exceed d. if n == 0: return 0 lis = [1] * n # List to keep track of the longest increasing subsequence length for i in range(1, n): for j in range(i): if arr[i] > arr[j] and (arr[i] - arr[j] <= d): lis[i] = max(lis[i], lis[j] + 1) return max(lis) # Example calls based on the problem statement print(longest_subsequence(5, 1, [1, 2, 3, 4, 5])) # Expected output: 5 print(longest_subsequence(6, 10, [10, 20, 30, 5, 15, 25])) # Expected output: 3"},{"question":"You are given an array a of length n consisting of integers. You are allowed to choose any subsequence of the array and perform the following operation any number of times: - Choose two distinct indices i and j of this subsequence such that a[i] neq a[j]. - Remove either a[i] or a[j] from the subsequence. Your goal is to obtain a subsequence in which all elements are equal using the minimum number of operations. The first line contains a single integer n (1 le n le 200000) — the length of the array a. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^5) — the elements of the array. Output a single integer, the minimum number of operations required to make all elements of the chosen subsequence equal. In the first example, you can repeatedly choose two distinct indices with different numbers and remove one of them until all remaining numbers are equal. Example: Input: 6 1 3 2 3 2 3 Output: 3 Explanation: One of the optimal solutions is as follows: - Remove 1 (array becomes: 3, 2, 3, 2, 3) - Remove the remaining 3 in positions 2 and 4 (array becomes: 3, 2, 2, 3) - Remove 2 in position 3 (array becomes: 3, 3, 3). Thus, a minimum of 3 operations is required.","solution":"def min_operations_to_equalize_subsequence(n, a): Returns the minimum number of operations required to make all elements of a subsequence equal. from collections import Counter frequency = Counter(a) max_frequency = max(frequency.values()) return n - max_frequency"},{"question":"Charlie is learning about sequences and came across the concept of arithmetic sequences. An arithmetic sequence is a sequence of numbers such that the difference of any two successive members is a constant. Given an array of integers, Charlie wants to determine the length of the longest contiguous subarray that forms an arithmetic sequence. Write a program to help Charlie find the length of the longest contiguous subarray that forms an arithmetic sequence. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. Print a single integer — the length of the longest contiguous subarray that forms an arithmetic sequence. **Examples:** **Input:** 5 3 6 9 12 15 **Output:** 5 **Input:** 6 1 3 5 7 2 4 **Output:** 4 **Explanation:** In the first example, the entire array is an arithmetic sequence with a common difference of 3. In the second example, the longest contiguous subarray that forms an arithmetic sequence is [1, 3, 5, 7] with a common difference of 2.","solution":"def longest_arithmetic_subarray_length(arr): Finds the length of the longest contiguous subarray that forms an arithmetic sequence. n = len(arr) if n == 1: return 1 # Initialize the maximum length and the current length. max_length = 2 current_length = 2 # Calculate the initial difference from the first two elements. difference = arr[1] - arr[0] for i in range(2, n): # If the current pair of elements follow the same difference, increment current_length. if arr[i] - arr[i - 1] == difference: current_length += 1 # Otherwise, update the difference and reset current_length. else: difference = arr[i] - arr[i - 1] current_length = 2 # Update the maximum length if necessary. max_length = max(max_length, current_length) return max_length"},{"question":"Petra is a contestant in a competitive programming contest. One of the problems challenges her to find the minimum cost required to transform a given string into a palindrome. Petra can perform two types of operations on the string: 1. swap any two characters (cost = 1) 2. replace any character with any other character (cost = 2) Given a string consisting of lowercase letters, help Petra find the minimum total cost required to convert the string into a palindrome. If the string is already a palindrome, the cost is 0. The input consists of a single string s of length n (1 ≤ n ≤ 1000). Output a single integer representing the minimum cost to transform the input string into a palindrome. Example: Input ``` abca ``` Output ``` 1 ``` Explanation: By replacing \'c\' with \'b\', the string \\"abca\\" can be transformed into the palindrome \\"abba\\" with a total cost of 2. However, a more optimal solution would be to swap the characters at positions 3 and 4, yielding the palindrome \\"acca\\" with only a cost of 1.","solution":"def min_cost_to_palindrome(s): Returns the minimum cost to transform the given string into a palindrome. n = len(s) cost = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: cost += 1 return cost"},{"question":"A scientist is conducting an experiment with a new kind of chemical reaction. The reaction is carried out in a series of test tubes arranged in a single row, numbered from 1 to n. Initially, each test tube contains a certain amount of a chemical, represented by an integer array a of length n. Each minute, the scientist can choose any two test tubes i and j (1 ≤ i, j ≤ n, i ≠ j) and mix their contents together according to certain rules: - If a[i] ≠ a[j], the chemical from the tube with the greater amount will decrease by the amount in the tube with the lesser amount, while the chemical in the tube with the lesser amount will become zero. - If a[i] == a[j], both tubes will become empty as their chemicals completely neutralize each other. The experiment ends when it\'s not possible to mix any more test tubes (i.e., when all remaining test tubes are either empty or contain only one unique amount of chemical). Write a function that returns the minimum number of test tubes that contain a non-zero amount of chemical at the end of the experiment. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of test tubes. The second line contains n integers a[1], a[2], ..., a[n] (0 ≤ a[i] ≤ 100) — the initial amounts of chemical in the test tubes. Output a single integer — the minimum number of test tubes that contain a non-zero amount of chemical at the end of the experiment. Example: Input: 5 3 1 4 1 5 Output: 4","solution":"def remaining_test_tubes(n, a): Given the number of test tubes and the initial amounts of chemical in each test tube as an array, this function returns the minimum number of test tubes that contain a non-zero amount of chemical at the end of the experiment. Args: n (int): Number of test tubes. a (list): List of integers representing the initial chemical amounts in each test tube. Returns: int: Minimum number of test tubes that contain a non-zero amount of chemical at the end. a = [x for x in a if x != 0] unique_amounts = set(a) return len(unique_amounts)"},{"question":"A kingdom is divided into several cities connected by roads. Each road has a specific time cost associated with it. The king of the kingdom wants to ensure that there are multiple routes available between his capital city and every other city to avoid any situation where a single road failure would cut off some cities from the capital. You are given the number of cities `n` and a list of roads, where each road is represented by a tuple `(u, v, t)`, indicating a bidirectional road between city `u` and city `v` with travel time `t`. The capital city is always numbered `1`. Your task is to determine if it is possible to have multiple routes (at least two disjoint paths) between the capital city and every other city. If it is possible, print \\"YES\\", otherwise print \\"NO\\". # Input: - The first line contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads. - The next `m` lines contain three integers `u`, `v`, and `t` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000) — representing a road between cities `u` and `v` with travel time `t`. # Output: - Print \\"YES\\" if it is possible to have at least two disjoint paths from the capital city to every other city, otherwise print \\"NO\\". # Example: Input: ``` 5 6 1 2 4 1 3 2 2 3 1 2 4 5 3 5 3 4 5 2 ``` Output: ``` YES ``` Input: ``` 4 3 1 2 3 2 3 4 3 4 5 ``` Output: ``` NO ```","solution":"from collections import defaultdict, deque def bfs(graph, start): queue = deque([start]) visited = {start} parent = {start: None} while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) parent[neighbor] = node queue.append(neighbor) return parent def second_bfs(graph, start, exclude_edge): u, v = exclude_edge queue = deque([start]) visited = {start} while queue: node = queue.popleft() for neighbor in graph[node]: if (node, neighbor) != (u, v) and (neighbor, node) != (u, v) and neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return visited def multiple_paths_possible(n, m, roads): graph = defaultdict(list) for u, v, t in roads: graph[u].append(v) graph[v].append(u) paths = defaultdict(list) parent = bfs(graph, 1) for node, par in parent.items(): if par is not None: paths[(par, node)].append(t) for i in range(2, n+1): if i not in parent: return \\"NO\\" edge_to_exclude = (parent[i], i) remaining_visited = second_bfs(graph, 1, edge_to_exclude) if len(remaining_visited) != n: return \\"NO\\" return \\"YES\\" # Example usage with the provided example # For actual usage you would call `multiple_paths_possible` function"},{"question":"A robot is navigating a grid-based maze. The robot starts from the top-left corner (0, 0) and aims to reach the bottom-right corner (n-1, m-1). The maze consists of empty cells (represented by \'.\') and obstacle cells (represented by \'#\'). The robot can move up, down, left, or right, but cannot move through obstacles. Write a function that determines if there is a path for the robot to reach the bottom-right corner of the maze. The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines each contain a string of length m consisting of the characters \'.\' and \'#\'. If there exists a path from the top-left corner to the bottom-right corner, print \\"YES\\". Otherwise, print \\"NO\\". Example 1: Input: 4 4 .... ..#. ..#. .... Output: YES Example 2: Input: 3 3 ..# .#. .#. Output: NO","solution":"def is_path_in_maze(n, m, maze): from queue import Queue directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False]*m for _ in range(n)] q = Queue() q.put((0, 0)) visited[0][0] = True while not q.empty(): x, y = q.get() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True q.put((nx, ny)) return \\"NO\\""},{"question":"Your task is to write a program that processes a list of integers and determines if there exist three distinct elements in the array that add up to a given target sum. The input consists of multiple lines. The first line contains a single integer, n (3 ≤ n ≤ 100), which represents the number of integers in the array. The second line contains n integers separated by spaces. The third line contains a single integer, t, which is the target sum. Your program should output \\"YES\\" if there are three distinct elements in the list that add up to the target sum, and \\"NO\\" otherwise. Example Input: ``` 5 1 2 4 5 6 10 ``` Example Output: ``` YES ``` Explanation: In this case, the numbers 1, 4, and 5 add up to 10, so the output is \\"YES\\". If no such triples exist, the output should be \\"NO\\".","solution":"def three_sum_exists(nums, target): Determines if there are three distinct elements in the `nums` list that add up to `target`. :param nums: List of integers. :param target: Integer target sum. :return: \\"YES\\" if there exists a triplet that sums to target, otherwise \\"NO\\". nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Vladik loves graphs and he came up with an interesting problem involving bipartite graphs. Given a bipartite graph represented by two sets of vertices U and V with edges only between vertices in U and vertices in V, Vladik wants to find a perfect matching, if one exists. A perfect matching is a matching where every vertex of U is matched to exactly one vertex of V, and vice versa. The graph is provided as an adjacency list where each vertex in U has a list of vertices in V it is connected to. The first line contains two integers n and m (1 leq n, m leq 500) – the number of vertices in sets U and V respectively. The next n lines describe the adjacency list of vertices in U. The i-th line starts with an integer d_i (0 leq d_i leq m), the number of vertices in V that vertex i in U is connected to, followed by d_i distinct integers from 1 to m — these are the vertices in V that vertex i in U is connected to. Print \\"YES\\" (without quotes) if there exists a perfect matching and \\"NO\\" (without quotes) otherwise. You may print each letter in any case (upper or lower). For example, Input: ``` 3 3 2 1 2 2 1 3 2 2 3 ``` Output: ``` YES ```","solution":"def bpm(u, match_result, visited, adj): for v in adj[u]: if not visited[v]: visited[v] = True if match_result[v] == -1 or bpm(match_result[v], match_result, visited, adj): match_result[v] = u return True return False def is_perfect_matching(n, m, adj): match_result = [-1] * (m + 1) for u in range(1, n + 1): visited = [False] * (m + 1) if not bpm(u, match_result, visited, adj): return \\"NO\\" return \\"YES\\" def solve(n, m, adj): return is_perfect_matching(n, m, adj) # Example Usage: # Read input # n, m = map(int, input().split()) # adj = [[] for _ in range(n + 1)] # for i in range(1, n + 1): # data = list(map(int, input().split())) # di = data[0] # adj[i] = data[1:di + 1] # # result = solve(n, m, adj) # print(result)"},{"question":"You are given an undirected graph with n nodes labeled from 1 to n and m edges. Each edge connects two distinct nodes. Additionally, there are q queries, each asking whether there is a path between two specified nodes in the graph. The input consists of multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. For each test case: - The first line contains two integers n and m (1 le n, m le 10^3) — the number of nodes and the number of edges. - The next m lines each contain two integers u and v (1 le u, v le n), indicating an edge between nodes u and v. - The next line contains an integer q (1 le q le 10^3) — the number of queries. - The next q lines each contain two integers a and b (1 le a, b le n) — the query asking whether there is a path between node a and node b. For each query, print \\"YES\\" if there is a path between node a and node b, and \\"NO\\" otherwise. The input guarantees that the sum of n, the sum of m, and the sum of q over all test cases does not exceed 3000. Example input: ``` 1 5 3 1 2 2 3 4 5 3 1 3 1 4 4 5 ``` Example output: ``` YES NO YES ```","solution":"def find_components(n, edges): Uses DFS to find components in an undirected graph. graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component = [-1] * (n + 1) def dfs(node, comp_id): stack = [node] while stack: u = stack.pop() if not visited[u]: visited[u] = True component[u] = comp_id for v in graph[u]: if not visited[v]: stack.append(v) comp_id = 0 for i in range(1, n + 1): if not visited[i]: comp_id += 1 dfs(i, comp_id) return component def solve(test_cases): results = [] for n, m, edges, queries in test_cases: component = find_components(n, edges) for a, b in queries: if component[a] == component[b]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Parsing input and invoking the solution function def main(input_str): data = input_str.strip().split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) m = int(data[idx + 1]) idx += 2 edges = [] for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) edges.append((u, v)) idx += 2 q = int(data[idx]) idx += 1 queries = [] for _ in range(q): a = int(data[idx]) b = int(data[idx + 1]) queries.append((a, b)) idx += 2 test_cases.append((n, m, edges, queries)) results = solve(test_cases) return \\"n\\".join(results) # Example usage: example_input = 1 5 3 1 2 2 3 4 5 3 1 3 1 4 4 5 print(main(example_input.strip()))"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has an associated weight. You need to find the maximum spanning tree of the given graph. A spanning tree is a subgraph that connects all the vertices together without creating any cycles and uses all n vertices. The maximum spanning tree is the spanning tree with the largest total edge weight. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100000) — the number of vertices and the number of edges, respectively. The next m lines describe the edges. Each line contains three integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — the endpoints of the edge and the weight of the edge. Output the total weight of the maximum spanning tree. If there are multiple maximum spanning trees, any of them is acceptable. Note: An undirected graph means the edges can be traversed in both directions. You can assume it\'s always possible to form a spanning tree with the given graph. **Example** Input: ``` 4 5 1 2 4 2 3 2 3 4 7 4 1 3 1 3 6 ``` Output: ``` 17 ```","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def maximum_spanning_tree(n, m, edges): # Sort edges in decreasing order based on weight edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = []; rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 e = 0 i = 0 while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 mst_weight += w union(parent, rank, x, y) return mst_weight def solution(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, lines[i].split()) edges.append((u, v, w)) return maximum_spanning_tree(n, m, edges)"},{"question":"Given a string of lowercase English letters, you have to select a contiguous substring and determine the minimum number of operations required to make all characters in the selected substring distinct. An operation consists of either replacing a character in the substring with any other lowercase English letter or removing a character entirely. **Input** - The first line of input contains a single integer `t` (1 ≤ t ≤ 50) — the number of test cases. - Each test case consists of two lines: - The first line contains a string of lowercase English letters (1 ≤ length of the string ≤ 100). - The second line contains two integers `l` and `r` (1 ≤ l ≤ r ≤ length of the string) — the start and end indices of the substring (1-based index). **Output** - For each test case, output a single integer — the minimum number of operations required to make all characters in the resulting substring distinct. **Examples** Input: ``` 3 abcabc 1 3 aaaa 1 2 abcdef 2 5 ``` Output: ``` 0 1 0 ``` **Explanation** - In the first test case, the substring from index 1 to 3 is \\"abc\\" which already has all unique characters, so no operation is needed. - In the second test case, the substring from index 1 to 2 is \\"aa\\" which has duplicate characters. One of the characters has to be changed or removed to make the substring distinct. - In the third test case, the substring from index 2 to 5 is \\"bcde\\" which already has all unique characters, so no operation is needed.","solution":"def min_operations_to_distinct_substring(s, l, r): Returns the minimum number of operations required to make all characters in the selected substring distinct. substring = s[l-1:r] unique_chars = set(substring) operations_needed = len(substring) - len(unique_chars) return operations_needed def process_test_cases(test_cases): results = [] for s, indices in test_cases: l, r = indices results.append(min_operations_to_distinct_substring(s, l, r)) return results"},{"question":"Bobby is fascinated by palindrome strings. A palindrome is a string that reads the same backward as forward. He has recently come up with a challenging problem for his friends to solve. Given a string of lowercase letters, Bobby wants you to find the minimum number of character replacements required to make the given string a palindrome. The first line of the input contains a string s of length n (1 le n le 1000), consisting of lowercase English letters. Output a single integer — the minimum number of character replacements needed to make the input string a palindrome. For example, for the string \\"abcca\\", you would need 1 replacement (replace \'b\' with \'c\' to get \\"accaa\\"), and for the string \\"aabb\\", you would need 2 replacements (replace the first \'a\' with \'b\' and the last \'b\' with \'a\' to get \\"abba\\").","solution":"def min_replacements_to_make_palindrome(s): Returns the minimum number of character replacements needed to make the input string a palindrome. n = len(s) count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"In the realm of Dijkstra, a mythical land full of wonders and adventures, there lies a dense forest known as the Tree of Life. The forest is represented as a weighted tree with `n` nodes and `n-1` edges. Each node is associated with an integer value. The mighty wizard Gladia needs your help in computing something important: for each node in the tree, find the sum of values of all nodes in its subtree. A subtree of a node is defined as the node itself and all its descendants in the tree. Your task is to compute the sum of values in the subtrees for all nodes of the tree. The first line of the input contains an integer `n` (1 le n le 10^5), the number of nodes in the tree. The second line contains `n` integers representing the values of the nodes (1 le text{value}_i le 10^4). Each of the next `n-1` lines contain two integers `u` and `v` (1 le u, v le n) representing an edge between nodes `u` and `v`. Output `n` lines, where the `i`-th line contains the sum of values of all nodes in the subtree of the `i`-th node. Example: Input: ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` Output: ``` 15 11 3 4 5 ``` Explanation: - The subtree of node 1 includes nodes {1, 2, 3, 4, 5}, so the sum is 15. - The subtree of node 2 includes nodes {2, 4, 5}, so the sum is 11. - The subtree of node 3 includes only itself, so the sum is 3. - The subtree of node 4 includes only itself, so the sum is 4. - The subtree of node 5 includes only itself, so the sum is 5.","solution":"def compute_subtree_sums(n, values, edges): from collections import defaultdict, deque def dfs(node, parent): subtree_sum = values[node - 1] for neighbor in tree[node]: if neighbor != parent: subtree_sum += dfs(neighbor, node) subtree_sums[node] = subtree_sum return subtree_sum # build tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_sums = [0] * (n + 1) dfs(1, -1) # assuming 1 as the root return subtree_sums[1:] # example usage: # n = 5 # values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(compute_subtree_sums(n, values, edges))"},{"question":"Given an integer array `nums` of length `n`, your task is to determine the maximum sum that can be obtained by selecting a contiguous subarray (containing at least one number) from `nums`. The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the length of the array. The second line contains `n` space-separated integers `nums[i]` (−10,000 ≤ nums[i] ≤ 10,000) — the elements of the array. Output the maximum sum that can be obtained by selecting a contiguous subarray from `nums`. # Example Input 7 -2 1 -3 4 -1 2 1 -5 4 Output 6 # Explanation The subarray [4,-1,2,1] has the largest sum = 6. # Note Your solution should have a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray. if not nums: return 0 max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are working on a new feature for an online music streaming app. In this app, playlists can contain several songs and each song belongs to a specific genre. Your task is to determine if there exists a way to organize a given playlist so that no two consecutive songs in the playlist belong to the same genre. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of songs in the playlist and the number of unique genres, respectively. The second line contains n integers g₁, g₂, ..., gₙ (1 ≤ gᵢ ≤ m) — the genre of each song in the playlist. Print \\"YES\\" if it is possible to organize the playlist such that no two consecutive songs belong to the same genre. Otherwise, print \\"NO\\". # Example Input: 6 3 1 2 2 1 3 3 Output: YES Input: 4 2 1 1 1 1 Output: NO","solution":"def can_organize_playlist(n, m, genres): Determines if the playlist can be organized such that no two consecutive songs belong to the same genre. Parameters: n (int): Number of songs in the playlist. m (int): Number of unique genres. genres (List[int]): List of integers representing the genre of each song. Returns: str: \\"YES\\" if it is possible to organize the playlist, \\"NO\\" otherwise. from collections import Counter genre_counts = Counter(genres) max_count = max(genre_counts.values()) if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given a garden with ( n ) flowerbeds, numbered from 1 to ( n ). Each flowerbed contains a certain number of flowers, and each flower attracts exactly one type of insect. Some insects prefer to stay in groups, while others are solitary. When certain flowers are removed, the behavior of adjacent insects may change because there might be fewer flowers of that type in nearby areas, affecting their grouping behavior. You need to handle ( q ) queries of three types regarding the flowerbeds: 1. Update (1 x y): Remove exactly ( y ) flowers from the ( x )-th flowerbed. 2. Query Total (2 x): Print the total number of flowers in the ( x )-th flowerbed after performing all operations up to the current point. 3. Query Section (3 x y): Print the total number of flowers in the flowerbeds from ( x ) to ( y ) inclusive, after performing all operations up to the current point. The first line of input contains two integers ( n ) and ( q ) (1 ≤ ( n ) ≤ 100,000, 1 ≤ ( q ) ≤ 100,000) - the number of flowerbeds and the number of queries, respectively. The second line contains ( n ) integers ( f_1 ), ( f_2 ), ..., ( f_n ) (1 ≤ ( f_i ) ≤ 10^9) where ( f_i ) denotes the initial number of flowers in the ( i )-th flowerbed. Then, ( q ) lines follow. Each line describes a query of one of the three types: - If the query type is 1, the line contains three integers: 1, x, y (1 ≤ ( x ) ≤ ( n ), 0 ≤ ( y ) ≤ ( f_x )). - If the query type is 2, the line contains two integers: 2 and x (1 ≤ ( x ) ≤ ( n )). - If the query type is 3, the line contains three integers: 3, x, y (1 ≤ ( x ) ≤ ( y ) ≤ ( n )). Output the results for each query of type 2 and type 3 in a new line. # Example Input ``` 5 4 10 20 30 40 50 1 2 5 2 2 3 1 3 2 4 ``` Output ``` 15 45 40 ``` The goal is to manage the flower counts in the garden efficiently, ensuring the queries are processed in real time.","solution":"class Garden: def __init__(self, flowerbeds): self.flowerbeds = flowerbeds self.n = len(flowerbeds) def update(self, x, y): self.flowerbeds[x - 1] -= y def query_total(self, x): return self.flowerbeds[x - 1] def query_section(self, x, y): return sum(self.flowerbeds[x - 1:y]) def process_queries(n, queries): garden = Garden(n) results = [] for query in queries: if query[0] == 1: garden.update(query[1], query[2]) elif query[0] == 2: results.append(garden.query_total(query[1])) elif query[0] == 3: results.append(garden.query_section(query[1], query[2])) return results"},{"question":"You are given a string of lowercase Latin letters s and a pattern string p, which is also a string of lowercase Latin letters. You have to determine if some permutation of the pattern p is a substring of s. For example, if s is \\"cbabcacab\\" and p is \\"abc\\", then there are multiple substrings of s which are permutations of the pattern p: \\"cba\\", \\"bac\\" and \\"cab\\". The input consists of two lines: the first line contains the string s (1 ≤ |s| ≤ 100,000) and the second line contains the string p (1 ≤ |p| ≤ min(30, |s|)). Print \\"Yes\\" if some permutation of p is a substring of s, otherwise print \\"No\\". Examples: Input: cbabcacab abc Output: Yes Input: hello world Output: No Explanation: In the first example, the string \\"cbabcacab\\" contains the substrings \\"abc\\", \\"bca\\", \\"cab\\", and \\"cba\\", all of which are permutations of \\"abc\\". Thus, the output is \\"Yes\\". In the second example, none of the substrings of \\"hello\\" are a permutation of \\"world\\". Therefore, the output is \\"No\\".","solution":"from collections import Counter def is_permutation_substring(s, p): Check if any permutation of the pattern p is a substring of the string s. p_length = len(p) p_counter = Counter(p) s_counter = Counter(s[:p_length]) if s_counter == p_counter: return \\"Yes\\" for i in range(p_length, len(s)): s_counter[s[i]] += 1 s_counter[s[i - p_length]] -= 1 if s_counter[s[i - p_length]] == 0: del s_counter[s[i - p_length]] if s_counter == p_counter: return \\"Yes\\" return \\"No\\""},{"question":"Consider a grid of size n x m where each cell contains an integer value. You are given q queries, and each query consists of four integers x1, y1, x2, and y2 representing the coordinates of two diagonally opposite corners of a rectangular sub-grid. For each query, your task is to find the sum of all integers in that sub-grid. The first line contains the integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The next n lines contain m integers each, with the j-th integer in the i-th row denoted by grid[i][j] (|grid[i][j]| ≤ 1000). The next line contains an integer q (1 ≤ q ≤ 10000) representing the number of queries. The following q lines contain four integers x1, y1, x2, and y2 (1 ≤ x1 ≤ x2 ≤ n; 1 ≤ y1 ≤ y2 ≤ m) representing the coordinates of the sub-grid. Output q lines, where the i-th line contains the sum of the integers in the sub-grid described in the i-th query. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output: 12 28","solution":"def preprocess_grid(grid, n, m): # Create an auxiliary sum matrix sum_matrix = [[0] * (m + 1) for _ in range(n + 1)] # Precomputing the sum of sub-grids using prefix sum method for i in range(1, n + 1): for j in range(1, m + 1): sum_matrix[i][j] = grid[i - 1][j - 1] + sum_matrix[i - 1][j] + sum_matrix[i][j - 1] - sum_matrix[i - 1][j - 1] return sum_matrix def subgrid_sum(sum_matrix, x1, y1, x2, y2): return (sum_matrix[x2][y2] - sum_matrix[x1 - 1][y2] - sum_matrix[x2][y1 - 1] + sum_matrix[x1 - 1][y1 - 1]) def process_queries(grid, queries): n = len(grid) m = len(grid[0]) sum_matrix = preprocess_grid(grid, n, m) results = [] for x1, y1, x2, y2 in queries: results.append(subgrid_sum(sum_matrix, x1, y1, x2, y2)) return results"},{"question":"You are given a string s consisting of lowercase English letters and the string t which is also a string of lowercase English letters. Your task is to determine the minimum number of operations required to convert the string s into the string t. The operations are defined as follows: 1. You can replace a character in s with any other character. 2. You can insert any character at any position in s. 3. You can delete any character from s. The first line of input contains a single integer n (1 leq n leq 100), which is the number of test cases. The following lines contain two space-separated strings s and t for each test case. For each test case, output a single integer representing the minimum number of operations required to convert s to t. Example: Input: 3 horse ros intention execution abc def Output: 3 5 3","solution":"def min_operations(s, t): Returns the minimum number of operations required to convert string s to string t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If first string is empty, insert all characters of second string elif j == 0: dp[i][j] = i # If second string is empty, remove all characters of first string elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n] def process_test_cases(test_cases): results = [] for s, t in test_cases: results.append(min_operations(s, t)) return results"},{"question":"You are given a string containing parentheses and lowercase English letters. Your task is to remove the minimum number of parentheses to make the string valid. A string is considered valid if it contains no unmatched parentheses and the parentheses are in the correct order. Write a function `minRemoveToMakeValid` that takes a string `s` as input and returns a valid string after removing the minimum number of parentheses. If there are multiple answers, return any of them. Example: 1. Input: `s = \\"lee(t(c)o)de)\\" ` Output: `\\"lee(t(c)o)de\\"` 2. Input: `s = \\"a)b(c)d\\"` Output: `\\"ab(c)d\\"` 3. Input: `s = \\"))((\\"` Output: `\\"\\"` 4. Input: `s = \\"(a(b(c)d)\\" ` Output: `\\"a(b(c)d)\\"` The string `s` has a length between 1 and 100,000 and contains only lowercase English characters and parentheses `\'(\'` and `\')\'`. Function signature: ```python def minRemoveToMakeValid(s: str) -> str: pass ```","solution":"def minRemoveToMakeValid(s: str) -> str: This function takes a string containing parentheses and lowercase English letters and removes the minimum number of parentheses to make the string valid. # Step 1: Remove unmatched right parentheses by using a stack open_stack = [] invalid_indices = set() for i, char in enumerate(s): if char == \'(\': open_stack.append(i) elif char == \')\': if open_stack: open_stack.pop() else: invalid_indices.add(i) # Step 2: Add all remaining unmatched left parentheses to invalid_indices invalid_indices = invalid_indices.union(set(open_stack)) # Step 3: Construct the valid string by skipping invalid indices result = \\"\\".join([char for i, char in enumerate(s) if i not in invalid_indices]) return result"},{"question":"There is a country with n cities and m bidirectional roads connecting some pairs of cities. Each road has a certain length and the country forms a connected graph. The president wants to build a binary communication network that connects all the cities directly or indirectly. The communication network must only use connections present in the country, and the communication network can be built incrementally, one connection at a time. Each new connection should be added such that the resulting network remains connected. Given the cities, roads and their lengths, determine the minimum total length of the communication network. Also, provide the order in which connections are to be added to achieve this minimum length. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of cities and roads respectively. The next m lines each contain three integers u, v and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 10000) — the two cities connected by the road and its length. Print the minimum total length of the communication network. In the following lines, print the roads in the order they should be added to achieve the minimum length network. Each road is represented by the two cities it connects. If there are multiple solutions, output any of them. Example: Input: 4 5 1 2 1 1 3 4 2 3 2 3 4 5 2 4 3 Output: 6 1 2 2 3 2 4","solution":"def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, m, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n+1): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i = i + 1 x = find_parent(parent, u) y = find_parent(parent, v) if x != y: e = e + 1 result.append([u, v]) union(parent, rank, x, y) minimum_cost = sum([edges[i][2] for i in range(len(result))]) return minimum_cost, result def build_communication_network(n, m, roads): edges = [] for road in roads: u, v, l = road edges.append([u, v, l]) minimum_cost, connections = kruskal(n, m, edges) print(minimum_cost) for connection in connections: u, v = connection print(u, v)"},{"question":"The kingdom of Polygonia consists of numerous cities connected by directed roads. The king wants to construct as many new roads as possible. Each new road must connect two different cities, but no multiple roads between any two cities are allowed. Additionally, the new roads must not form any cycles, since cycles are considered dangerous in Polygonia. Your task is to determine the maximum number of new roads that can be added to the kingdom without forming any cycles and while connecting cities as per the given rules. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)), where n is the number of cities and m is the number of existing roads. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating there is a directed road from city u to city v. Output a single integer representing the maximum number of new roads that can be constructed under the given constraints. Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: 2 Explanation: In this example, you can add new roads such as 1 3 and 2 4 without creating cycles, resulting in the maximum number of 2 new roads.","solution":"def max_new_roads(n, m, existing_roads): Returns the maximum number of new roads that can be added without forming cycles. from collections import defaultdict import networkx as nx # Create a directed graph with existing roads G = nx.DiGraph() G.add_nodes_from(range(1, n + 1)) G.add_edges_from(existing_roads) # The maximum number of edges in a DAG with n nodes is (n * (n-1)) / 2 max_possible_edges = n * (n - 1) // 2 # The current number of edges in the graph current_edges = len(G.edges()) # The difference is the maximum number of new edges that can be added return max_possible_edges - current_edges"},{"question":"A labyrinth game contains n rooms arranged in a straight line from left to right. Some rooms contain obstacles, while others are safe. You control a player who starts at the s-th room from the left. Each room is either safe (represented by 0) or contains an obstacle (represented by 1). Your task is to move the player from the start room s to an exit, which is either the first room or the last room in the line, while avoiding obstacles. You can only move to adjacent rooms (either left or right). Write a program to calculate the minimum number of moves required to reach either the first or the last room, starting at room s. If it is not possible to reach an exit, return -1. # Input: The first line contains two integers n and s (2 leq n leq 10^5, 1 leq s leq n) — the number of rooms and the starting position of the player. The second line contains n integers, where the i-th integer is 0 if the room is safe or 1 if it contains an obstacle. # Output: Print a single integer — the minimum number of moves required to reach an exit, or -1 if it\'s not possible to reach an exit. # Example: Input: ``` 5 3 0 1 0 1 0 ``` Output: ``` 2 ``` Explanation: The player starts in the 3rd room (which is safe). The player can move one step left to the 2nd room (which contains an obstacle), so that\'s not an option. The player moves one step right to the 4th room (which contains an obstacle), so that\'s also not an option. The player finally moves another step right to the 5th room (room 5 is an exit), totalling 2 moves.","solution":"def minimum_moves_to_exit(n, s, rooms): Calculates the minimum number of moves required to reach either the first or the last room. :param n: int, number of rooms :param s: int, starting position (1-indexed) :param rooms: list of int, 0 for safe and 1 for obstacles :return: int, the minimum number of moves to reach an exit, or -1 if impossible start = s - 1 # Convert to 0-based index if rooms[start] == 1: return -1 # Starting from a room with an obstacle left_moves = right_moves = float(\'inf\') # Check movement to the left for i in range(start, -1, -1): if rooms[i] == 1: break if i == 0: left_moves = start - i break # Check movement to the right for i in range(start, n): if rooms[i] == 1: break if i == n - 1: right_moves = i - start break min_moves = min(left_moves, right_moves) return min_moves if min_moves != float(\'inf\') else -1"},{"question":"Alex loves playing with strings. He considers a string valid if it contains only uppercase and lowercase English letters and the length of the string is exactly n. Recently, Alex came across an interesting problem. He wants to transform a valid string S into another valid string T such that they differ in exactly k positions. You are given the string S and the integers n and k. Your task is to find the number of ways Alex can change S to obtain a valid string T that differs from S in exactly k positions. Two ways are considered distinct if T strings differ. The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the length of the string and the exact number of differing positions. The second line contains a valid string S of length n. Print the number of valid strings T that differ from S in exactly k positions. In the first example, S is \\"abc\\" and n is 3, k is 1. The valid strings T could be \\"xbc\\", \\"axc\\", or \\"abx\\". There are 78 possible characters (\'A\'-\'Z\', \'a\'-\'z\') to replace \'a\', \'b\', or \'c\', except the character itself. In the second example, S is \\"AAA\\" and n is 3, k is 2. Let\'s say we change the first and second characters, the valid strings T could be \\"BBA\\", \\"CCA\\", etc. There are (52 choose 2) ways to select the positions and 52*52 options to replace them. Summarize: 1. \\"ab\\" and \\"ba\\" are the same change, count only distinct character T.","solution":"from math import comb def count_valid_strings(n, k, S): Returns the number of valid strings T that differ from the input string S in exactly k positions. total_alphabets = 52 # Number of English letters (26 uppercase + 26 lowercase) # Number of ways to choose k positions from n position_combinations = comb(n, k) # For each of the k positions, there are 51 choices (can\'t be the original character) char_replacement_ways = (total_alphabets - 1) ** k return position_combinations * char_replacement_ways"},{"question":"Eva and Oscar love playing puzzles together. Today they came across a challenging grid puzzle. The puzzle consists of a grid with dimensions m times n, where each cell contains a non-negative integer. The objective is to find the maximum path sum starting from the top-left corner of the grid and moving to the bottom-right corner. You can only move either right or down at any point in time. Given the grid, can you help Eva and Oscar determine the maximum path sum? The first line contains two integers, m and n (1 le m, n le 100) — the number of rows and columns in the grid. Each of the next m lines contains n space-separated integers representing the grid. Each integer is between 0 and 1000, inclusive. Output a single integer — the maximum path sum from the top-left to the bottom-right corner of the grid. For example, consider the grid: ``` 3 3 5 3 2 1 4 1 1 5 1 ``` The maximum path sum is 5 rightarrow 3 rightarrow 4 rightarrow 5 rightarrow 1, which sums to 18.","solution":"def max_path_sum(grid): Returns the maximum path sum from the top-left to the bottom-right corner of the grid. You can only move either right or down at any point in time. m = len(grid) n = len(grid[0]) # Create a dp table to store the maximum path sum up to each point dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Fill the first row, can only come from the left for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column, can only come from above for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"The building has n floors (numbered from 1 to n) and m buttons (each button is associated with a particular floor) and it operates an elevator in the following way: - Each button press moves the elevator to the associated floor. - A button can be pressed multiple times in sequence, and each press is counted as a distinct operation even if the button pressed is the same. The main goal is to compute the number of distinct sequences of button presses of a given length k, keeping in mind that the elevator can start on any floor and end on any floor after k presses. Create a program that calculates the number of such sequences modulo (10^9 + 7). The input consists of: - A single integer t (1 ≤ t ≤ 1000) - the number of test cases. - For each test case: - Three space-separated integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 1000) - the number of floors, the number of buttons, and the number of presses respectively. - m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ n) - the floors associated with the buttons. For each test case, output a single integer - the number of distinct sequences of button presses of length k modulo (10^9 + 7). Example Input: ``` 2 3 2 2 1 2 4 3 3 1 2 3 ``` Example Output: ``` 4 27 ``` In the first example, one of the valid sequences detected is pressing button for floor 1 and then button for floor 2 (e.g., 1, 2). In the second example, all floor buttons 1, 2, and 3 are used to create sequences of length 3. One of the valid sequences can be 1, 2, 3 or any other combination of length 3 from those floors, leading to (3^3 = 27).","solution":"def number_of_sequences(t, test_cases): MOD = 10**9 + 7 results = [] for case in test_cases: n, m, k, buttons = case sequences_count = pow(m, k, MOD) results.append(sequences_count) return results def process_input(input_list): t = int(input_list[0]) idx = 1 test_cases = [] for _ in range(t): n, m, k = map(int, input_list[idx].split()) buttons = list(map(int, input_list[idx+1].split())) test_cases.append((n, m, k, buttons)) idx += 2 return t, test_cases"},{"question":"You are given a grid of size n × m, where each cell contains an integer representing the elevation at that point. You need to check whether the grid contains a \\"valley\\". A valley is defined as: 1. The valley must be a sub-grid of size 3 x 3 within the larger grid. 2. The center cell in the 3 x 3 sub-grid must have a lower elevation than all of its 8 surrounding cells. Your task is to determine the number of such valleys in the given grid. The first line of the input contains two integers n and m (3 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers representing the elevation of each cell in the grid. Each elevation is an integer between -1000 and 1000. Print one integer — the number of valleys in the grid. Example: Input: 4 4 1 2 3 4 5 1 2 2 4 3 0 1 2 3 4 2 Output: 1 Explanation: There is one valley in the grid: the 3x3 sub-grid with center at (3,3). Valley: 1 2 2 3 0 1 3 4 2","solution":"def count_valleys(grid): rows = len(grid) cols = len(grid[0]) valleys = 0 for i in range(1, rows - 1): for j in range(1, cols - 1): center = grid[i][j] if (center < grid[i-1][j-1] and center < grid[i-1][j] and center < grid[i-1][j+1] and center < grid[i][j-1] and center < grid[i][j+1] and center < grid[i+1][j-1] and center < grid[i+1][j] and center < grid[i+1][j+1]): valleys += 1 return valleys def process_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return count_valleys(grid)"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to determine if a given string is a palindrome. The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000), which can include letters, digits, and spaces. Print \\"YES\\" if the given string is a palindrome and \\"NO\\" otherwise. For the purpose of this problem, you should ignore spaces, punctuation, and capitalization when determining if the string is a palindrome. Examples: Input: A man a plan a canal Panama Output: YES Input: Hello World Output: NO","solution":"def is_palindrome(s): Determines if the given string is a palindrome. Ignores spaces, punctuation, and capitalization. Args: s (str): The input string. Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. import re s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return \\"YES\\" if s == s[::-1] else \\"NO\\""},{"question":"Alex is a traveling salesman who needs to collect specific items from various cities. Each city has a list of items available and it costs Alex money to travel between cities. Alex needs to collect all items from the given list in the minimum amount of money spent on traveling. Input: The first line contains a single integer n (1 ≤ n ≤ 50) — the number of cities. The second line contains a single integer m (1 ≤ m ≤ 100) — the number of distinct items Alex needs to collect. The third line contains m distinct integers representing the items Alex needs to collect. Each of the next n lines describes a city. The description of a city starts with an integer k (0 ≤ k ≤ m) — the number of items available in the city, followed by k integers representing the available items. Next, there is an n x n matrix where each element j in the i-th row represents the travel cost from city i to city j (0 ≤ travel cost ≤ 1000). The travel cost from a city to itself is 0. Alex starts his journey in the first city (city 1, index 0). Output: Output a single integer — the minimum travel cost for Alex to collect all items from the given list. If it\'s impossible to collect all items, output -1. Example: Input: ``` 3 5 1 2 3 4 5 2 1 2 2 3 4 1 5 0 10 1 10 0 1 1 1 0 ``` Output: ``` 2 ``` Explanation: Alex starts at city 1 and can travel to all other cities at a cost given by the matrix. The solution involves traveling to the minimum number of cities while ensuring all distinct items are collected and minimizing the total travel cost.","solution":"import heapq def min_travel_cost_to_collect_items(n, m, items_needed, cities, travel_costs): items_needed_set = set(items_needed) start_items = set(cities[0]) if items_needed_set.issubset(start_items): return 0 # BFS state (current_city, collected_items, total_cost) pq = [(0, 0, start_items)] visited = {} while pq: total_cost, city, collected_items = heapq.heappop(pq) collected_items_tuple = tuple(sorted(collected_items)) if (city, collected_items_tuple) in visited: continue visited[(city, collected_items_tuple)] = total_cost for next_city in range(n): if next_city != city: new_cost = total_cost + travel_costs[city][next_city] new_items = collected_items.union(cities[next_city]) if items_needed_set.issubset(new_items): return new_cost new_items_tuple = tuple(sorted(new_items)) if (next_city, new_items_tuple) not in visited: heapq.heappush(pq, (new_cost, next_city, new_items)) return -1"},{"question":"Raphael is the chef of a popular restaurant and he\'s preparing a new dish. He has an n-digit number and wants to transform it into a larger number by rearranging its digits. However, Raphael wants the resulting number to be as small as possible among all possible rearrangements, but still larger than the original number. If no such number exists, return -1. Your task is to implement a function that, given an n-digit number, returns the smallest possible number greater than the original number or -1 if no such number exists. # Input - The input consists of a single integer n (1 ≤ n ≤ 100,000) representing the original number. The digits of n are guaranteed to be non-negative and may have leading zeros. # Output - Print a single integer which is the smallest possible number larger than the original number with the same digits, or -1 if no such number exists. # Example Input ``` 1234 ``` Output ``` 1243 ``` Input ``` 4321 ``` Output ``` -1 ``` # Note In the first example, you can rearrange the digits of 1234 to get 1243, which is the smallest number larger than 1234. In the second example, the digits of 4321 cannot be rearranged to form a number larger than 4321, so the output is -1.","solution":"def next_greater_number(n): Returns the smallest number larger than input number n formed by rearranging its digits. If no such number exists, return -1. n = list(str(n)) length = len(n) i = length - 2 # Find the first digit that is smaller than the digit next to it, from the right end while i >= 0 and n[i] >= n[i + 1]: i -= 1 if i == -1: return -1 # Find the smallest digit on the right side of n[i] that is greater than n[i] j = length - 1 while n[j] <= n[i]: j -= 1 # Swap the found digits n[i], n[j] = n[j], n[i] # Reverse the digits after index i n = n[:i + 1] + n[i + 1:][::-1] return int(\'\'.join(n))"},{"question":"Eva is training to become a professional competitive eater, and she wants to improve her performance by optimizing her eating pace. Her coach has given her a series of exercises involving different types of food. Each type of food can be consumed at a different speed and they have varying difficulties. Eva wants to balance between eating faster for less difficult foods and slower for more difficult ones. Given n types of food, each type i (1 ≤ i ≤ n) has a difficulty level di and the maximum time ti it takes her to finish it. Eva\'s goal is to minimize the total time spent eating all the foods while ensuring that she spends at least the minimum required time on each type of food based on its difficulty level. The time spent on each type of food i must be at least di seconds but not exceed ti seconds. The total time should also not be less than the sum of the difficulties of all the food types. Calculate the minimum total time Eva needs to spend eating all the food types. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of food types. Each of the next n lines contains two integers di (1 ≤ di ≤ 100) and ti (di ≤ ti ≤ 100) — the difficulty level and the maximum time for the i-th food type. Print a single integer — the minimum total time Eva needs to spend eating all the food types. Consider the examples: 1. Given two types of food with difficulties 5 and 10, and maximum times 10 and 15 respectively, Eva can spend 5 seconds on the first type and 10 seconds on the second type, resulting in a total of 15 seconds. 2. Given three types of food with difficulties 2, 4, and 3, and maximum times 5, 6, and 4 respectively, Eva can spend 2 seconds on the first type, 4 seconds on the second type, and 3 seconds on the third type, resulting in a total of 9 seconds. Less time is not possible. Example input: 3 2 5 4 6 3 4 Example output: 9","solution":"def minimum_total_time(n, food_types): Calculates the minimum total time Eva needs to spend eating all food types. Args: n (int): Number of food types. food_types (list of tuples): Each tuple contains two integers (di, ti) which represent the difficulty level and the maximum time for that food type. Returns: int: Minimum total time Eva needs to spend eating all the food types. # Ensure the time spent on each food type is at least its difficulty # Summing up minimum required times will already ensure the minimum total time total_time = 0 for di, ti in food_types: total_time += di return total_time"},{"question":"You are given a list of integers and need to determine the length of the largest contiguous subarray of this list where all elements have the same parity (either all elements are even or all are odd). The first line of input contains a single integer t (1 leq t leq 1000) — the number of test cases. Each test case begins with a single integer n (1 leq n leq 2 cdot 10^5) — the number of elements in the list. The second line of each test case contains n integers separated by spaces representing the elements of the list (1 leq x leq 10^9 for each element). For each test case, output a single integer representing the length of the largest contiguous subarray where all elements have the same parity. # Example: **Input:** ``` 2 7 1 2 2 2 3 4 4 6 5 5 5 5 5 5 ``` **Output:** ``` 3 6 ``` **Explanation:** - In the first test case, the longest contiguous subarray with the same parity is [2, 2, 2], which has a length of 3. - In the second test case, the entire array [5, 5, 5, 5, 5, 5] has the same parity, so the answer is 6.","solution":"def longest_same_parity_subarray(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] max_length = 1 current_length = 1 for j in range(1, n): if arr[j] % 2 == arr[j - 1] % 2: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"Petra loves driving through the city and often needs to find the shortest path between two points. She’s using a navigation app that displays a directed graph where intersections are represented as nodes and roads as directed edges with specific travel times. However, the app doesn’t always point out the quickest ways due to several intermediate computations. Petra wants you to help her by implementing an algorithm that finds the shortest path travel time between two specific intersections in the city. You are given a graph with n nodes and m edges. The nodes are numbered from 1 to n. Each edge is described by three integers u, v, w, meaning there is a directed road from node u to node v with travel time w. Given q queries, each containing two integers x and y, find the shortest travel time from intersection x to intersection y. If there\'s no possible path, return -1 for that query. # Input - The first line contains two integers n (1 ≤ n ≤ 500) and m (0 ≤ m ≤ 10^4) — the number of nodes and edges. - Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — meaning there is a directed edge from node u to node v with a weight w. - The next line contains one integer q (1 ≤ q ≤ 10^4) — the number of queries. - Each of the next q lines contains two integers x and y (1 ≤ x, y ≤ n) — the start and end nodes for that query. # Output For each query, output a single integer — the shortest travel time from node x to node y, or -1 if there is no path. # Example Input ``` 4 4 1 2 3 2 3 4 3 4 5 1 4 10 2 1 4 3 2 ``` Output ``` 10 -1 ``` Note: Petra likes efficient solutions, so be sure to implement your answer using the appropriate graph algorithm for shortest paths.","solution":"import heapq def dijkstra(n, graph, start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist def shortest_paths(n, edges, queries): # Create graph graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) # Precompute shortest paths from each node all_pairs_shortest_paths = {} for node in range(1, n + 1): all_pairs_shortest_paths[node] = dijkstra(n, graph, node) results = [] for x, y in queries: distance = all_pairs_shortest_paths[x][y] results.append(distance if distance != float(\'inf\') else -1) return results"},{"question":"You are given a grid with dimensions n x m filled with non-negative integers. Your task is to find the number of \\"hilltops\\" in the grid. A \\"hilltop\\" is defined as a cell which has a value greater than all of its adjacent cells. Two cells are adjacent if they share a side (left, right, top, bottom). The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers (0 ≤ a_ij ≤ 10^9) representing the values of the cells in the grid. Print a single integer — the number of hilltops in the grid. # Example **Input:** ``` 3 3 1 2 1 2 3 2 1 2 1 ``` **Output:** ``` 1 ``` **Explanation:** In the given grid, the cell (2, 2) with the value 3 is a hilltop, as it is greater than all of its adjacent cells (1, 2, 2, and 2). Hence, the output is 1.","solution":"def count_hilltops(grid, n, m): def is_hilltop(grid, i, j): cell_value = grid[i][j] # Check up, down, left, right up = grid[i - 1][j] if i > 0 else float(\'-inf\') down = grid[i + 1][j] if i < n - 1 else float(\'-inf\') left = grid[i][j - 1] if j > 0 else float(\'-inf\') right = grid[i][j + 1] if j < m - 1 else float(\'-inf\') return cell_value > up and cell_value > down and cell_value > left and cell_value > right hilltop_count = 0 for i in range(n): for j in range(m): if is_hilltop(grid, i, j): hilltop_count += 1 return hilltop_count"},{"question":"Linguini is a skilled chef who has been given the responsibility to manage the ingredients in a restaurant\'s kitchen. He has a task to ensure that ingredients are utilized efficiently so that none are wasted. Linguini needs to create various dishes over a period of k days. Each dish requires a certain number of each specific ingredient. The restaurant has a stock of n different ingredients, and the quantity of each ingredient in stock is provided. Help Linguini decide if he can prepare the required dishes for the next k days with the ingredients available, and if possible, calculate the remaining stock of each ingredient after preparing the dishes. Each test case includes: - An integer t (1 le t le 1,000), indicating the number of test cases. - For each test case: - An integer n (1 le n le 100), representing the number of different ingredients. - An array of n integers, where the i-th integer s_i (1 le s_i le 1,000) represents the stock of the i-th ingredient. - An integer k (1 le k le 100), representing the number of days. - k subsequent lines, each containing n integers, where the j-th integer d_{i,j} (0 le d_{i,j} le 10) represents the quantity of the j-th ingredient required on day i. If it is possible for Linguini to prepare all the dishes over the k days with the ingredients in stock, print \\"YES\\" followed by the remaining stock of each ingredient after the k days. If it is not possible, print \\"NO\\". # Example Input ``` 2 3 10 10 10 2 3 2 1 5 1 2 3 5 5 5 2 3 6 1 5 0 5 ``` Output ``` YES 2 7 7 NO ``` # Explanation In the first test case: - On the first day, we need 3 units of ingredient 1, 2 units of ingredient 2, and 1 unit of ingredient 3. - On the second day, we need 5 units of ingredient 1, 1 unit of ingredient 2, and 2 units of ingredient 3. - Total consumption of ingredients: 3+5=8 units of ingredient 1, 2+1=3 units of ingredient 2, and 1+2=3 units of ingredient 3. - Remaining stock: 10-8=2 units of ingredient 1, 10-3=7 units of ingredient 2, and 10-3=7 units of ingredient 3. In the second test case: - On the first day, we need 3 units of ingredient 1, 6 units of ingredient 2, and 1 unit of ingredient 3. - On the second day, we need 5 units of ingredient 1, 0 units of ingredient 2, and 5 units of ingredient 3. - Total consumption of ingredients: 3+5=8 units of ingredient 1, 6+0=6 units of ingredient 2, and 1+5=6 units of ingredient 3. - We only have 5 units of ingredient 2 and 5 units of ingredient 3 in stock, which is not sufficient to meet the requirements.","solution":"def can_prepare_dishes(t, test_cases): results = [] for case in test_cases: n, stock, k, demands = case remaining_stock = stock[:] possible = True for day in demands: for i in range(n): if remaining_stock[i] < day[i]: possible = False break remaining_stock[i] -= day[i] if not possible: break if possible: results.append(\\"YES\\") results.append(\' \'.join(map(str, remaining_stock))) else: results.append(\\"NO\\") return results"},{"question":"You\'re given a grid of size `n x m` where each cell can either be passable or impassable. A passable cell is represented by a \'.\' and an impassable cell is represented by a \'#\'. You need to help a robot navigate from the top-left corner of the grid to the bottom-right corner. The robot can move one cell up, down, left, or right at a time. However, there\'s a restriction: the robot can only make up to `k` turns during its traversal. A turn is defined as a change in the direction of movement. For example, if the robot moves right from cell (i, j) to cell (i, j+1) and then moves down to cell (i+1, j+1), that counts as one turn. Given the grid, determine if it\'s possible for the robot to reach the bottom-right corner from the top-left corner with at most `k` turns. If it\'s possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line of input contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 100). The next `n` lines each represent a row of the grid and contain `m` characters (either \'.\' or \'#\'). Output \\"YES\\" if it\'s possible for the robot to reach the bottom-right corner with at most `k` turns; otherwise, print \\"NO\\". # Example Input ``` 4 4 2 .... .#.. ..#. .... ``` Output ``` YES ``` Input ``` 4 4 1 .... .#.. ..#. .... ``` Output ``` NO ```","solution":"from collections import deque def can_reach_with_k_turns(n, m, k, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(0, 0, 0, -1)]) # (x, y, turns, direction_index) visited = {(0, 0): 0} while queue: x, y, turns, direction = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for i, (dx, dy) in enumerate(directions): nx, ny = x + dx, y + dy if not is_valid(nx, ny): continue new_turns = turns if direction == i else turns + 1 if new_turns > k or (nx, ny) in visited and visited[(nx, ny)] <= new_turns: continue visited[(nx, ny)] = new_turns queue.append((nx, ny, new_turns, i)) return \\"NO\\" def solve(n, m, k, grid): return can_reach_with_k_turns(n, m, k, grid)"},{"question":"In a large warehouse, workers need to move heavy crates from one location to another. They use a roller conveyor system to assist with this task. The warehouse manager wants to optimize the conveyor belt system to reduce the maximum load at any point along the conveyor belt. The conveyor system can be represented as a sequence of conveyor belt segments, each with a specific load capacity. Each segment can handle one crate at a time. The goal is to repeatedly place and move crates such that the maximum load on any segment at any given time is minimized. You are given the following information: - An array of positive integers representing the initial load on each conveyor belt segment. - A list of operations representing the placement and movement of crates. Each operation is defined by `start`, `end`, and `load`, meaning to move a crate with the specified load from the `start` segment to the `end` segment (inclusive). Write a program that processes each operation and outputs the maximum load on any conveyor belt segment after performing all the given operations. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5), representing the number of conveyor belt segments. - The second line contains `n` integers, representing the initial load on each conveyor belt segment. - The third line contains an integer `m` (1 ≤ m ≤ 10^5), representing the number of operations. - Each of the next `m` lines contains three integers `start`, `end`, and `load` (1 ≤ start ≤ end ≤ n, 1 ≤ load ≤ 10^5), representing the action to move crates with the specified load from the `start` segment to the `end` segment. **Output:** - A single integer representing the maximum load on any conveyor belt segment after all operations. **Example:** **Input:** ``` 5 2 3 1 2 4 3 1 3 2 2 5 1 3 4 3 ``` **Output:** ``` 6 ``` **Explanation:** - After moving crates with load 2 from segments 1 to 3, the loads on the segments become: `[4, 5, 3, 2, 4]`. - After moving crates with load 1 from segments 2 to 5, the loads on the segments become: `[4, 6, 4, 3, 5]`. - After moving crates with load 3 from segments 3 to 4, the loads on the segments become: `[4, 6, 7, 6, 5]`. - The maximum load on any segment is now 7.","solution":"def optimize_conveyor_belt(n, initial_loads, operations): Finds minimum maximum load on any conveyor belt segment after all operations. :param n: Number of segments :param initial_loads: List of initial loads on each segment :param operations: List of operations (start, end, load) :return: Maximum load on any segment after all operations # Apply all operations for start, end, load in operations: for i in range(start - 1, end): initial_loads[i] += load # Return the maximum value from the loads return max(initial_loads)"},{"question":"Alice and Bob love playing a game with strings. They are given a string `s` of lowercase English letters of length `n`. The game works as follows: - Alice selects two different indices `i` and `j` (1 ≤ i, j ≤ n, i ≠ j). - Alice swaps the characters at these indices in the string. - Bob then checks if the string formed is lexicographically smaller than the original string `s` before any swaps. If there exists at least one pair (i, j) that can make the string lexicographically smaller by swapping the characters at these indices, Bob wins. Otherwise, Alice wins. Given a string `s`, determine if Bob can win or not and express the result as \\"YES\\" if Bob can win and \\"NO\\" if Alice wins. The input format: - The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the string. - The second line contains the string `s` of length `n`. Print a single word \\"YES\\" if Bob can win and \\"NO\\" if Alice wins. For example: Input: 4 dcba Output: YES Input: 3 abc Output: NO","solution":"def can_bob_win(s: str) -> str: Determine if Bob can win by making at least one swap that makes the string lexicographically smaller. Returns \\"YES\\" if Bob can win, otherwise \\"NO\\". n = len(s) for i in range(n - 1): if s[i] > s[i + 1]: return \\"YES\\" return \\"NO\\""},{"question":"In a forest, there are `n` types of trees, each type having a specific height. You are required to select the tallest tree of each type and determine their combined height. The first line of input contains a single integer `n` (1 ≤ n ≤ 100) — the number of tree types. The second line contains `n` integers, h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the trees. The third line contains `n` integers, t1, t2, ..., tn (1 ≤ ti ≤ 50) — the types of the trees, corresponding to their heights in the second line. Output a single integer representing the combined height of the tallest tree of each type. For example: Input: ``` 5 4 7 6 2 5 1 2 2 1 3 ``` Output: ``` 18 ``` Explanation: Type 1 trees have heights 4 and 2, the tallest is 4. Type 2 trees have heights 7 and 6, the tallest is 7. Type 3 trees have height 5. The combined height is 4 + 7 + 5 = 16.","solution":"def combined_height_of_tallest_trees(n, heights, types): type_to_height = {} for i in range(n): tree_type = types[i] height = heights[i] if tree_type in type_to_height: type_to_height[tree_type] = max(type_to_height[tree_type], height) else: type_to_height[tree_type] = height return sum(type_to_height.values()) # Example usage print(combined_height_of_tallest_trees(5, [4, 7, 6, 2, 5], [1, 2, 2, 1, 3])) # Should output 16"},{"question":"Aliens have invaded Earth and you are tasked with developing a transmission decoder to interpret their messages. The aliens communicate using a series of signals that can be converted into text. Each signal corresponds to an integer and follows a simple encoding scheme. Your job is to decode a message by converting a sequence of signals into the corresponding text according to the encoding scheme. The encoding scheme is as follows: - The signals are integers in the range from 1 to 27. - Values from 1 to 26 represent the lowercase English letters \'a\' to \'z\', where 1 is \'a\', 2 is \'b\', ..., 26 is \'z\'. - The value 27 corresponds to a space character \' \'. You need to write a program that decodes a given sequence of signals into the corresponding text message. # Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 27) — the sequence of signals. # Output Output the decoded text message. # Example Input ``` 10 8 5 12 12 15 27 23 15 18 12 4 ``` # Example Output ``` hello world ```","solution":"def decode_message(n, signals): Decodes a message from a sequence of signals according to the given encoding scheme. :param n: An integer, the length of the sequence of signals. :param signals: A list of integers, the sequence of signals. :returns: A string, the decoded message. # Create a dictionary that maps integers to their corresponding characters signal_to_char = {i: chr(96 + i) for i in range(1, 27)} signal_to_char[27] = \' \' # Decode the message by converting each signal in the sequence to its corresponding character decoded_message = \'\'.join(signal_to_char[signal] for signal in signals) return decoded_message"},{"question":"A thief plans to rob a row of adjacent houses. Each house has a special amount of cash stashed. All houses at this place are arranged in a straight line. To ensure security and to avoid detection, the thief cannot rob two adjacent houses. The thief needs your help to maximize the total amount of cash he can rob tonight without alerting the police. Write a program that determines the maximum amount of money the thief can rob without robbing two consecutive houses. The first line contains a single integer n (0 le n le 10^5), the number of houses. The second line contains n integers, each representing the amount of cash in each house. Each integer is between 0 and 10^4 inclusive. Output a single integer which is the maximum amount of money the thief can rob tonight without alerting the police. **Example:** Input: ``` 4 1 2 3 1 ``` Output: ``` 4 ``` Explanation: - Rob the 1st house (money = 1) and 3rd house (money = 3). - Total amount: 1 + 3 = 4 - If robbing 1st house and 4th house, or 2nd house and 4th house, the maximum would be lesser or the same, but not more. Therefore, maximum amount robbed is 4.","solution":"def max_rob_amount(n, houses): if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + houses[i]) return dp[-1] # For usage # n = int(input()) # houses = list(map(int, input().split())) # print(max_rob_amount(n, houses))"},{"question":"In a mystical forest, there lies a rectangular field of size n × m, populated by mystical creatures. Each block of this field contains zero or more creatures. To traverse the field, one needs to move from block to adjacent block (up, down, left, right) via an empty path. The goal is to help Merlin, a wise wizard, find the minimum number of steps required to walk from his starting block (xS, yS) to his destination block (xD, yD). The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the field, respectively. Each of the following n lines contains m characters, describing the field: - \'.\' (dot) denotes an empty block with no creatures. - \'*\' (asterisk) denotes a block occupied by a creature. The next line contains two integers - coordinates of the block (xS, yS) (1 ≤ xS ≤ n, 1 ≤ yS ≤ m), where Merlin is initially located. The last line contains two integers - coordinates of the block (xD, yD) (1 ≤ xD ≤ n, 1 ≤ yD ≤ m), where Merlin wants to reach. It is guaranteed that both the starting block and the destination block are empty (\'.\') and not the same block. If it is not possible for Merlin to reach the destination block, print -1. Otherwise, print the minimum number of steps required for Merlin to reach the destination. Example: Input: 5 5 ..... .*.*. ..... .***. ..... 1 1 5 5 Output: 8 In this example, Merlin starts at (1, 1) and needs to reach (5, 5). He can accomplish this in 8 steps avoiding all the blocks with creatures.","solution":"from collections import deque def min_steps_to_reach_destination(n, m, field, start, destination): Returns the minimum number of steps required to reach the destination block from the start block in a mystical forest. :param n: Number of rows in the field. :param m: Number of columns in the field. :param field: List of strings representing the field where \'.\' is an empty block and \'*\' is a block occupied by creatures. :param start: Tuple (xS, yS) indicating the starting block coordinates. :param destination: Tuple (xD, yD) indicating the destination block coordinates. :return: The minimum number of steps to reach the destination block, or -1 if it is not possible. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and field[x][y] == \'.\' visited = [[False] * m for _ in range(n)] xS, yS = start xD, yD = destination queue = deque([(xS-1, yS-1, 0)]) # Note: converting to zero-based index visited[xS-1][yS-1] = True while queue: x, y, steps = queue.popleft() if (x, y) == (xD-1, yD-1): # Destination reached return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 # Example Inputs n = 5 m = 5 field = [ \\".....\\", \\".*.*.\\", \\".....\\", \\".***.\\", \\".....\\", ] start = (1, 1) destination = (5, 5) # Example Output result = min_steps_to_reach_destination(n, m, field, start, destination) print(result) # Output: 8"},{"question":"You are given a list of courses that students can attend over a period of days. Each course has a specified start day, end day, and a maximum number of students that can attend. Additionally, each student has a set of preferred days they can attend courses. Each student can only attend one course per day, and cannot enroll in more than one course at the same time. Write a program that determines the maximum number of students that can be enrolled in courses given these constraints. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000), where n is the number of courses and m is the number of students. Each of the next n lines contains three integers, si, ei, and ci (1 ≤ si ≤ ei ≤ 365, 1 ≤ ci ≤ 100), which represent the start day, end day, and maximum capacity of the ith course. Each of the next m lines contains a list of integers representing the preferred days of the jth student. The first integer in each line, k (1 ≤ k ≤ 365), indicates the number of preferred days, followed by k integers denoting the specific days (1 ≤ day ≤ 365). Output a single integer representing the maximum number of students that can be enrolled in the courses based on the given constraints. # Sample Input ``` 3 4 1 5 2 2 4 1 5 10 3 3 1 2 5 2 1 3 2 2 4 4 1 5 7 9 ``` # Sample Output ``` 4 ``` # Explanation In this example: - The first course runs from day 1 to day 5 with a capacity of 2 students. - The second course runs from day 2 to day 4 with a capacity of 1 student. - The third course runs from day 5 to day 10 with a capacity of 3 students. The preferred days of each student are as follows: - Student 1 prefers days 1, 2, and 5. - Student 2 prefers days 1 and 3. - Student 3 prefers days 2 and 4. - Student 4 prefers days 1, 5, 7, and 9. The program should find a way to maximize the number of students enrolled in the courses considering their preferences and the course capacities.","solution":"def max_students_enrolled(n, m, courses, students): # Create a list to track available seats for each day seats = [0] * 366 # Fill the seats array for each course based on the start and end days and capacity for start, end, capacity in courses: for day in range(start, end + 1): seats[day] += capacity # Keep track of enrolled students enrolled = 0 # Sort students by the number of preferred days (from fewer to more days) students_sorted = sorted(students, key=len) for preferred_days in students_sorted: for day in preferred_days: if seats[day] > 0: seats[day] -= 1 enrolled += 1 break return enrolled # Sample Input Reading and converting it to required shape def read_input(data): lines = data.strip().split(\'n\') n, m = map(int, lines[0].split()) courses = [] for i in range(1, n + 1): courses.append(list(map(int, lines[i].split()))) students = [] for j in range(n + 1, len(lines)): preferred_days = list(map(int, lines[j].split()))[1:] students.append(preferred_days) return n, m, courses, students # Example usage input_data = 3 4 1 5 2 2 4 1 5 10 3 3 1 2 5 2 1 3 2 2 4 4 1 5 7 9 n, m, courses, students = read_input(input_data) print(max_students_enrolled(n, m, courses, students)) # Expected output: 4"},{"question":"Emma is training for a mountain climbing championship. She plans to climb a sequence of n mountains, where the height of the i-th mountain is hi meters. She can climb any mountain in any order but must finish at the peak of a chosen mountain. She wants to optimize her energy expenditure by minimizing the total height difference she climbs, either up or down, when moving from one mountain to another. Help Emma determine the minimum total height difference she has to climb in order to reach the last mountain\'s peak, starting from the first mountain she chooses. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of mountains. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the mountains. Output a single integer, the minimum total height difference Emma has to climb to finish at the peak of a chosen mountain. **Example:** **Input:** ``` 5 2 4 1 7 5 ``` **Output:** ``` 6 ``` **Explanation:** Emma can follow this sequence of moves between the mountains (with their respective heights): - Start at mountain 3 (height 1). - Climb to mountain 1 (height 2) with a height difference of 1. - Climb to mountain 2 (height 4) with a height difference of 2. - Climb to mountain 5 (height 5) with a height difference of 1. - Finally, climb to mountain 4 (height 7) with a height difference of 2. The total height difference climbed is 1 + 2 + 1 + 2 = 6. So the output is 6.","solution":"def min_height_difference(n, heights): Returns the minimum total height difference Emma has to climb in order to reach the last mountain\'s peak, starting from the first mountain she chooses. Parameters: n (int): The number of mountains heights (list): The heights of the mountains Returns: int: Minimum total height difference heights.sort() total_difference = 0 for i in range(1, n): total_difference += heights[i] - heights[i - 1] return total_difference"},{"question":"You are given a string s containing only characters \'A\' and \'B\', and an integer k. The goal is to compute the maximum length of a substring containing no more than k changes of \'A\' to \'B\' or \'B\' to \'A\'. A substring is a contiguous sequence of characters within a string. # Example For s = \\"AABABBA\\", k = 1, the longest substring with at most 1 change is \\"AABABB\\", which has length 6. For s = \\"ABAB\\", k = 2, the longest substring with at most 2 changes is \\"ABAB\\", which has length 4. # Input The first line contains the integer k (0 leq k leq |s|, where |s| is the length of string s). The second line contains the string s (1 leq |s| leq 100,000). # Output Print one integer — the maximum length of a substring containing no more than k changes. # Explanation In the first example, the longest substring with at most 1 change includes the entire string \\"AABABBA\\". In the second example, the entire string \\"ABAB\\" meets the criteria with exactly 2 changes.","solution":"def max_substring_length_with_k_changes(s, k): Given a string s containing only characters \'A\' and \'B\', and an integer k, this function returns the length of the longest substring that can be obtained containing no more than k changes of \'A\' to \'B\' or \'B\' to \'A\'. from collections import defaultdict def max_length_with_char(s, k, target_char): left = 0 max_len = 0 count = defaultdict(int) max_count = 0 for right in range(len(s)): count[s[right]] += 1 max_count = max(max_count, count[s[right]]) # If the number of characters to change exceeds k, shrink the window if (right - left + 1) - max_count > k: count[s[left]] -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len return max(max_length_with_char(s, k, \'A\'), max_length_with_char(s, k, \'B\'))"},{"question":"Sara loves sequences and enjoys solving problems related to them. One day, she discovered an intriguing pattern and decided to challenge herself with an interesting task. Given a sequence of integers, Sara wants to create a new sequence by performing some operations. Sara can perform any number of the following operations (including zero) on the sequence: 1. Choose two consecutive elements in the sequence and replace them with their sum. 2. Choose two consecutive elements in the sequence and replace them with their difference (absolute value). Sara\'s goal is to obtain a sequence where the absolute difference between the maximum and minimum element is as small as possible. Given a sequence of n integers, help Sara determine the minimum possible value of the absolute difference between the maximum and minimum element after performing any number of the allowed operations. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n — the elements of the sequence (|a_i| ≤ 10^9). Output a single integer — the minimum possible value of the absolute difference between the maximum and minimum element in the new sequence. Example: Input: 5 2 9 4 7 1 Output: 0 Explanation: One possible way to achieve the sequence with minimum difference is: 1. Replace 9 and 4 with their sum: [2, 13, 7, 1] 2. Replace 13 and 7 with their sum: [2, 20, 1] 3. Replace 20 and 1 with their sum: [2, 21] 4. Replace 2 and 21 with their difference: [19] The absolute difference between the maximum and minimum element is 0.","solution":"def min_abs_difference(sequence): Given a sequence of integers, return the minimum possible value of the absolute difference between the maximum and minimum element after performing any number of the allowed operations. # The minimum possible absolute difference will be 0 if the array has more than one element. # This is because we can continuously reduce any number of elements to a single element by # performing sum or difference operations. # If the array has only one element, the minimum absolute difference will be 0, # because an array with a single element doesn\'t have a range. if len(sequence) == 1: return 0 return 0"},{"question":"Liliana is visiting several cities in her vacation. The cities are connected by bidirectional roads, each with a certain distance. She has a fixed amount of fuel that she can use for traveling to visit these cities. She starts her journey from city 1. Liliana wants to maximize the number of different cities she can visit without running out of fuel. You are given a graph with `n` cities and `m` roads. Also, you are given Liliana\'s initial amount of fuel `f`. Each road is described by three integers `u`, `v`, and `d`, representing a road connecting city `u` to city `v` with a distance `d`. How many different cities can Liliana visit starting from city 1, given her initial amount of fuel? # Input - The first line contains three integers `n`, `m`, and `f` (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000, 1 ≤ f ≤ 10,000) — the number of cities, the number of roads, and the amount of fuel Liliana has, respectively. - Each of the next `m` lines contains three integers `u`, `v`, and `d` (1 ≤ u, v ≤ n, 1 ≤ d ≤ 1,000) — the endpoints of a road and its distance. # Output - Print one integer — the maximum number of different cities Liliana can visit starting from city 1 with the given fuel. # Example Input ``` 5 6 10 1 2 3 1 3 4 2 3 1 2 4 6 3 4 2 3 5 8 ``` Output ``` 4 ``` Explanation Liliana starts in city 1. She can visit city 2 (distance 3), then city 3 (distance 1 from city 2, total fuel used: 4), then city 4 (distance 2 from city 3, total fuel used: 6), which makes 4 cities including the starting city. She cannot reach city 5 within the remaining fuel.","solution":"import heapq def max_cities_visited(n, m, f, roads): graph = [[] for _ in range(n + 1)] for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) # Dijkstra-like approach to find maximum number of cities that can be visited pq = [(0, 1)] # (cost, start) visited = set() max_fuel = [float(\'inf\')] * (n + 1) max_fuel[1] = 0 while pq: current_fuel, node = heapq.heappop(pq) if node in visited: continue visited.add(node) for neighbor, weight in graph[node]: next_fuel = current_fuel + weight if next_fuel <= f and next_fuel < max_fuel[neighbor]: max_fuel[neighbor] = next_fuel heapq.heappush(pq, (next_fuel, neighbor)) return sum(1 for fuel in max_fuel if fuel <= f)"},{"question":"The problem at hand seems to have an excellent variety in terms of scenario and the technicalities involved. Here is a new problem made to match the style, length, and complexity of the existing ones: A famous library recently decided to keep a record of book check-outs using a list known as book log which contains a string in the following format: `[date][operation]: [other_info]`. Where `[date]` is a 10-character string in the format `yyyy-mm-dd`, `[operation]` indicates whether a book was checked in (`IN`) or checked out (`OUT`), and `[other_info]` gives additional information about the book, such as its title or borrower. Each date can have multiple operations, but the time of operation within a day is not recorded. The chief librarian encountered a problem: she needs to find out the minimum number of distinct days mentioned in the log where a book has been checked out. Given is the log of book operations in the described format. Your task is to aid the librarian by writing a program that identifies the distinct days on which at least one book was checked out. The first input line contains the integer n (1 ≤ n ≤ 1000) — the number of records in the book log. Each of the following n lines contains a record in the given format `[date][operation]: [other_info]`. Output a single integer: the number of distinct days on which at least one book was checked out. Sample Input: ``` 7 2023-01-05OUT: Book A 2023-01-06IN: Book B 2023-01-05IN: Book A 2023-01-07OUT: Book C 2023-01-07OUT: Book D 2023-01-08IN: Book E 2023-01-05OUT: Book F ``` Sample Output: ``` 2 ``` In the above example, books were checked out on days 2023-01-05 and 2023-01-07. Thus, the minimum number of days with at least one book checked out is 2.","solution":"def count_distinct_days_with_checkouts(log): Counts the number of distinct days on which at least one book was checked out. Args: log (list of str): The log of book operations. Returns: int: The number of distinct days with at least one checkout operation. checkout_days = set() for record in log: date, operation_info = record[:10], record[10:] if \\"OUT\\" in operation_info: checkout_days.add(date) return len(checkout_days)"},{"question":"Alice loves playing with sequences of numbers. She recently came up with a challenging problem she calls the \\"Balanced Sequence Game.\\" Given a sequence of n integers, Alice wants to find the length of the longest subsequence where the sum of the subsequence equals zero. Note that a subsequence can be derived by deleting some or none of the elements in the original sequence without changing the order of the remaining elements. Alice needs your help to solve this problem efficiently. The first line contains an integer n (1 ≤ n ≤ 200000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (-104 ≤ ai ≤ 104) — the elements of the sequence. For each test case, print a single integer — the length of the longest subsequence with sum zero. If no such subsequence exists, print 0. For example: Input: 6 1 -1 2 -2 3 -3 Output: 6 Explanation: The entire sequence [1, -1, 2, -2, 3, -3] has a sum of zero, which is the longest possible subsequence in this case.","solution":"def longest_zero_sum_subsequence(arr): prefix_sum = 0 prefix_sum_indices = {} # stores the first occurrence of each prefix sum max_length = 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum == 0: max_length = i + 1 if prefix_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum]) else: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"Ivan has a long string consisting of only letters \\"a\\" and \\"b\\". He can perform an operation where he selects any consecutive subsequence of the string and replaces it with any other subsequence of the same length that is either all \\"a\\"s or all \\"b\\"s. The goal is to make the entire string consist of just one type of letter (either all \\"a\\"s or all \\"b\\"s). Ivan wants to minimize the number of operations required to achieve this goal. You are given a string of length ( n ) (1 leq n leq 1000) consisting of only characters \'a\' and \'b\'. Determine the minimum number of operations needed to make the entire string consist of only one type of letter. Input: - The input consists of a single line containing the string of length ( n ). Output: - Print the minimum number of operations required to transform the entire string into either all \\"a\\"s or all \\"b\\"s. Example: ``` Input: abbba Output: 1 ``` Explanation: - In the example, Ivan can replace the substring \\"bbb\\" with \\"aaa\\" or \\"aaa\\" with \\"bbb\\" in one operation resulting in \\"aaaaa\\" or \\"bbbbb\\". Hence, only 1 operation is required.","solution":"def min_operations_to_uniform_string(s): This function returns the minimum number of operations required to make the entire string consist of only one type of letter (either all \\"a\\"s or all \\"b\\"s). if not s: return 0 n = len(s) # Count continuous segments of \\"a\\" and \\"b\\" count_a_segments = 0 count_b_segments = 0 current_char = s[0] if current_char == \'a\': count_a_segments += 1 else: count_b_segments += 1 for i in range(1, n): if s[i] != current_char: current_char = s[i] if current_char == \'a\': count_a_segments += 1 else: count_b_segments += 1 # The minimum number of operations needed return min(count_a_segments, count_b_segments)"},{"question":"Given a matrix with dimensions n x m consisting of positive integers, you need to find the longest contiguous subsequence of increasing numbers (i.e., each number in the path must be greater than the previous one) that can be achieved by starting from any cell in the matrix and moving left, right, up, or down to a neighboring cell. Write a function that solves this problem and outputs the length of the longest increasing path in the matrix. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), indicating the number of rows and columns in the matrix, respectively. The next n lines contain m integers each, separated by spaces, representing the matrix. Output a single integer, the length of the longest increasing path found in the matrix. **Example:** ``` Input: 3 3 9 9 4 6 6 8 2 1 1 Output: 4 ``` **Explanation:** The longest increasing path is [1, 2, 6, 9].","solution":"def longestIncreasingPath(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) def dfs(x, y, prev_val, memo): if not (0 <= x < n and 0 <= y < m) or matrix[x][y] <= prev_val: return 0 if memo[x][y] != -1: return memo[x][y] result = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: result = max(result, dfs(x + dx, y + dy, matrix[x][y], memo)) memo[x][y] = result + 1 return memo[x][y] memo = [[-1] * m for _ in range(n)] max_length = 0 for i in range(n): for j in range(m): max_length = max(max_length, dfs(i, j, -1, memo)) return max_length"},{"question":"Chef is very particular about the dishes he prepares. Every dish he makes is composed of exactly zero or more ingredients chosen from n different available types. Each type of ingredient has a distinct positive integer weight. The dish is defined by a list of weights of types of ingredients used in it (an empty list means the dish has no ingredients). Chef is interested to find out the total weight of the dish composed of the highest number of ingredients where no two ingredients have the same weight. Given the number of different types of ingredients available and the weight of each type of ingredient, determine the total weight of the dish formed by using the maximum number of unique ingredients with different weights. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) – the number of different types of ingredients available. The second line contains n positive integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) – the weights of each type of ingredient. Output a single integer, which is the total weight of the dish composed of the highest number of unique ingredients. **Example:** **Input:** ``` 5 10 20 20 30 40 ``` **Output:** ``` 100 ``` **Explanation:** Chef can create a dish with the ingredients of weights [10, 20, 30, 40]. The total weight is 10 + 20 + 30 + 40 = 100. Note that the ingredient with weight 20 can only be used once since Chef only uses ingredients with distinct weights.","solution":"def max_unique_ingredients_weight(n, weights): Returns the total weight of the dish formed by using the maximum number of unique ingredients with different weights. unique_weights = set(weights) return sum(unique_weights)"},{"question":"You are given a 2D grid containing `n` rows and `m` columns. Each cell in the grid can either be empty or contain an obstacle. You start at the top-left cell (0, 0) and you need to reach the bottom-right cell (n-1, m-1). You can move to any of the four adjacent cells: up, down, left, or right, but you cannot move through cells containing obstacles. Write a program to determine the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, return -1. The input consists of multiple test cases. The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. The following lines contain the test cases. Each test case starts with two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next `n` lines contain `m` characters each, representing the grid. The character `\'.\'` denotes an empty cell, and the character `\'#\'` denotes an obstacle. For each test case, print a single line with the minimum number of moves required to reach the bottom-right cell, or -1 if it is not possible. # Example **Input:** ``` 2 3 3 ... .#. ... 5 5 ....# .#.#. .#... .#..# ...#. ``` **Output:** ``` 4 -1 ``` # Explanation For the first test case, the optimal path from (0, 0) to (2, 2) moves as follows: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2), requiring 4 moves. For the second test case, there is no possible path from (0, 0) to (4, 4) due to the obstacles blocking the way. Therefore, the output is -1. Put your algorithm design skills to the test and solve the problem!","solution":"from collections import deque def min_moves(grid): Calculate the minimum number of moves required to reach the bottom-right cell from the top-left cell. n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def bfs(start, end): queue = deque([start]) visited = set() visited.add(start) moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == end: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) moves += 1 return -1 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 return bfs((0, 0), (n-1, m-1)) def process_test_cases(t, test_cases): results = [] for grid in test_cases: results.append(min_moves(grid)) return results"},{"question":"You are given a Gridland city which consists of a grid with (N) rows and (N) columns. Initially, all cells of the grid are empty. You are also given a sequence of events describing the construction of buildings in the city. Each event is represented by four integers (r_1, c_1, r_2, c_2) ((1 leq r_1 leq r_2 leq N), (1 leq c_1 leq c_2 leq N)) which indicate that all cells in the sub-grid from ((r_1, c_1)) to ((r_2, c_2)) should be marked as containing buildings. You are required to answer (Q) queries regarding the grid. Each query asks if a specific cell ((r, c)) contains a building or not. Write a program to process these events and answer the queries. The first line of input contains two integers (N) and (K) ((1 leq N leq 1000), (1 leq K leq 100)) — the size of the grid and the number of construction events. The next (K) lines each contain four integers (r_1, c_1, r_2, c_2) ((1 leq r_1 leq r_2 leq N), (1 leq c_1 leq c_2 leq N)) describing the construction events. The next line contains one integer (Q) ((1 leq Q leq 100000)) — the number of queries. The following (Q) lines each contain two integers (r) and (c) ((1 leq r, c leq N)) describing the queries. Output (Q) lines; the (i)-th line should be \\"YES\\" if the cell ((r, c)) contains a building, and \\"NO\\" otherwise.","solution":"def process_events_and_queries(N, K, events, Q, queries): Processes the building events and queries if a cell contains a building. Parameters: N (int): Size of the grid (NxN). K (int): Number of building events. events (list of tuples): Each tuple (r1, c1, r2, c2) represents an event. Q (int): Number of queries. queries (list of tuples): Each tuple (r, c) represents a query. Returns: list of str: List with \\"YES\\" or \\"NO\\" for each query. grid = [[0] * N for _ in range(N)] for r1, c1, r2, c2 in events: for r in range(r1 - 1, r2): for c in range(c1 - 1, c2): grid[r][c] = 1 results = [] for r, c in queries: if grid[r - 1][c - 1] == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Implement a function that determines whether a sequence of parentheses is balanced. A sequence of parentheses is considered balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. Input The input consists of a single string s, where 0 le |s| le 10^6. The string s will consist only of characters \'(\' and \')\'. Output Print \\"YES\\" if the sequence of parentheses is balanced, otherwise, print \\"NO\\". Examples Input: (()) Output: YES Input: ())( Output: NO Input: (()))(()) Output: NO Explanation: In the first example, there are two opening parentheses and two closing parentheses, with proper nesting, so the output is \\"YES\\". In the second example, there is one extra closing parenthesis without a matching opening one, so the output is \\"NO\\". In the third example, the nesting is not proper, and there is a mismatch in the number of opening and closing parentheses, so the output is \\"NO\\".","solution":"def is_balanced_parentheses(s): Determines whether a sequence of parentheses is balanced. Parameters: s (str): The string containing the parentheses sequence. Returns: str: \\"YES\\" if the sequence is balanced, otherwise \\"NO\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"You have a sequence of integers representing temperatures recorded over several consecutive days. You are interested in finding the longest subsequence of consecutive days where each day\'s temperature is greater than the temperature of the previous day. The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of days for which the temperatures are recorded. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 104), where t_i is the temperature recorded on the i-th day. Output a single integer — the length of the longest subsequence of consecutive days with strictly increasing temperatures. **Example** Input 7 2 2 3 4 3 5 6 Output 3 In this example, the longest subsequence with strictly increasing temperatures is 3 4, 5 6, which has length 3.","solution":"def longest_increasing_subsequence_length(n, temperatures): Returns the length of the longest subsequence of consecutive days where each day\'s temperature is greater than the temperature of the previous day. if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a small laboratory, a scientist is conducting an experiment with a set of chemical substances. Each substance is represented as a node, and each interaction between two substances is represented as an undirected edge between the nodes. The scientist is interested in finding out the fewest interactions required to cause a reaction between any two given substances. Given a graph with n nodes and m edges, you need to determine the shortest path between two specified nodes (substances) in terms of the number of edges. If no path exists, return -1. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) - the number of nodes and edges in the graph. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) - indicating an edge between nodes u and v. The last line contains two integers s and t (1 ≤ s, t ≤ n) - the start and target nodes for which you need to find the shortest path. Output the length of the shortest path between nodes s and t. If no path exists, print -1. Example: Input: 6 7 1 2 1 3 2 4 3 4 4 5 5 6 3 5 1 6 Output: 3 Explanation: The shortest path from node 1 to node 6 is 1 -> 3 -> 5 -> 6, which has a length of 3 edges.","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges, s, t): if s == t: return 0 # Create an adjacency list from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path queue = deque([(s, 0)]) # (current node, distance) visited = set() visited.add(s) while queue: node, distance = queue.popleft() for neighbor in graph[node]: if neighbor == t: return distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1"},{"question":"Alice and Bob love to play with arrays and subarrays. They have an array of integers, and they are interested in a particular kind of subarrays called fenestral subarrays. A subarray is considered fenestral if it contains the same maximum and minimum values. You are given an array of integers. Alice and Bob want to know how many fenestral subarrays are there in the given array. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the length of the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Output a single integer — the number of fenestral subarrays in the given array. Example: Input: 4 1 3 1 1 Output: 5 Explanation: The fenestral subarrays are: [1], [1], [1], [3], [1, 1]. So the answer is 5.","solution":"def count_fenestral_subarrays(arr): Returns the count of fenestral subarrays, where the maximum and minimum values in the subarray are the same. n = len(arr) count = 0 i = 0 while i < n: length = 1 while i + length <= n and arr[i] == arr[i + length - 1]: count += 1 length += 1 i += 1 return count"},{"question":"Given an array of integers and a sequence of operations, your task is to apply the operations to the array and output the final result. Each operation can be one of the following: - Add a value to all elements in a subarray. - Multiply all elements in a subarray by a given value. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000) – the size of the array and the number of operations, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 10^6) – the elements of the array. Each of the next q lines describes an operation in one of the following formats: - \\"1 l r x\\" means \\"add x to all elements from index l to index r\\" (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^6) - \\"2 l r x\\" means \\"multiply by x all elements from index l to index r\\" (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^3) Output the final array after all operations are applied. [Sample Input] 5 3 1 2 3 4 5 1 1 3 2 2 2 5 2 1 3 5 1 [Sample Output] 3 6 15 18 11 [Explanation] Initially, the array is [1, 2, 3, 4, 5]. After the first operation (1 1 3 2), the array becomes [3, 4, 5, 4, 5]. After the second operation (2 2 5 2), the array becomes [3, 8, 10, 8, 10]. Finally, after the third operation (1 3 5 1), the array becomes [3, 8, 11, 9, 11].","solution":"def apply_operations(n, q, array, operations): Applies a sequence of operations to the array and returns the final array. Parameters: - n : int : size of the array - q : int : number of operations - array : List[int] : initial array - operations : List[Tuple[int, int, int, int]] : list of operations Returns: - List[int] : final array after applying all operations for op in operations: op_type, l, r, x = op l -= 1 # convert to zero-based index r -= 1 # convert to zero-based index if op_type == 1: for i in range(l, r + 1): array[i] += x elif op_type == 2: for i in range(l, r + 1): array[i] *= x return array"},{"question":"Ada loves to play with strings, and she has come up with her own special game. She likes to transform strings using specific rules and then compare them. You have to help her by writing a program that will determine the result of her game based on two input strings and a set of transformation rules. In Ada\'s game, a string consists only of lowercase English letters, and she can perform the following operation any number of times: - Select any single character in the string and replace it with any character that is lexicographically smaller or equal. Given two input strings, `A` and `B`, of equal length, and a transformation rule set that specifies which characters can be transformed into which other characters, determine if it is possible to transform string `A` into string `B`. You should print \\"YES\\" if it is possible to transform `A` into `B` given the rules, otherwise print \\"NO\\". # Input - The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains two integers, `N` and `M` (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000), where `N` is the length of the strings and `M` is the number of transformation rules. - The second line contains the string `A` of length `N`. - The third line contains the string `B` of length `N`. - Each of the next `M` lines contains a pair of characters `u` and `v` (u ≠ v, \'a\' ≤ u < v ≤ \'z\'), indicating that character `u` can be transformed into character `v`. # Output For each test case, print \\"YES\\" if it is possible to transform string `A` into string `B` using the transformation rules. Otherwise, print \\"NO\\". # Example Input ``` 2 3 2 abc bbc a b b c 4 1 abcd aabc b a ``` Output ``` YES NO ``` # Constraints - All strings contain only lowercase English letters. - The transformation rules define a directed graph of character transformations. - Cyclic transformations are not allowed (i.e., if you can transform `a` to `b`, you cannot transform `b` back to `a`).","solution":"def can_transform_string(A, B, rules): from collections import defaultdict, deque # Create graph from rules graph = defaultdict(list) for u, v in rules: graph[u].append(v) # Perform BFS to find all reachable characters from any given character reachability = {char: set() for char in \\"abcdefghijklmnopqrstuvwxyz\\"} for start in \\"abcdefghijklmnopqrstuvwxyz\\": queue = deque([start]) visited = {start} while queue: char = queue.popleft() reachability[start].add(char) for neighbor in graph[char]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Check if we can transform A to B for a_char, b_char in zip(A, B): if b_char not in reachability[a_char]: return \\"NO\\" return \\"YES\\" def solve_adas_game(test_cases): results = [] for N, M, A, B, rules in test_cases: result = can_transform_string(A, B, rules) results.append(result) return results"},{"question":"Alice loves string manipulation. She has a string s of length n, consisting only of lowercase English letters. She can perform the following operations on the string any number of times: 1. Swap any two adjacent characters. 2. Replace any character with any other character. Alice wants to transform the string s into another string t, also consisting of only lowercase English letters, and both strings are of the same length. She wants to do it using the minimum number of operations, where each swap is counted as one operation and each replacement is also counted as one operation. Help Alice find the minimum number of operations required to transform string s into string t. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the strings. The second line contains the string s of length n. The third line contains the string t of length n. Print a single integer — the minimum number of operations required to transform string s into string t. Example: Input: 5 abcde fghij Output: 5","solution":"def min_operations_to_transform(n, s, t): Given the length of the strings `n`, and the strings `s` and `t`, this function returns the minimum number of operations required to transform string `s` into string `t`. # Since we can replace any character in s with any character in t, # we do not need to count swaps separately. # Simply count the number of characters that differ between s and t, # since each differing character requires a replacement operation. operations = 0 for i in range(n): if s[i] != t[i]: operations += 1 return operations"},{"question":"Ivan is participating in a treasure hunt competition. The competition takes place in a rectangular grid of size n rows and m columns. Each cell in the grid either contains an obstacle or is empty. Ivan starts from the top-left corner of the grid and needs to move to the bottom-right corner. He can move only one cell to the right or one cell down at each step, and he cannot move through cells with obstacles. Given the description of the grid, determine the total number of different paths Ivan can take to reach the bottom-right corner from the top-left corner. The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each, representing the grid. Each character is either \'.\' (an empty cell) or \'#\' (an obstacle). Print the number of different paths Ivan can take to reach his destination. If there is no valid path, print 0. **Examples** Input: ``` 3 3 ... .#. ... ``` Output: ``` 2 ``` Input: ``` 3 3 ... # ... ``` Output: ``` 0 ```","solution":"def count_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Sheila is moving into a new house and wants to organize her bookshelf. She has n books and wants to arrange them in such a way that the total width of the bookshelf doesn\'t exceed a given value W. Each book has a certain width, and she also wants to maximize the total height of the books she can place on the shelf. The first line contains two integers n (1 ≤ n ≤ 100) — the number of books, and W (1 ≤ W ≤ 1000) — the maximum width of the bookshelf. The next n lines each contain two integers wi (1 ≤ wi ≤ 100) and hi (1 ≤ hi ≤ 100) — the width and height of the i-th book. Determine the maximum total height of the books that Sheila can place on the shelf without exceeding the maximum width W. Print a single integer — the maximum total height. For example: **Input:** ``` 5 10 2 4 3 5 5 3 4 6 2 2 ``` **Output:** ``` 15 ``` In this example, one of the optimal ways to arrange the books is by choosing books with widths and heights (2, 4), (3, 5), and (4, 6) which total to a width of 9 and a height of 15.","solution":"def max_height(n, W, books): Determine the maximum total height of books that can be placed on the shelf without exceeding the maximum width. Parameters: n (int): The number of books. W (int): The maximum width of the bookshelf. books (list of tuples): A list of tuples where each tuple contains two integers: the width and the height of a book. Returns: int: The maximum total height of the books. dp = [0] * (W + 1) # dp[j] will hold the maximum height for width j for width, height in books: # Traverse the dp array from right to left to avoid overwriting results of the same iteration for j in range(W, width - 1, -1): dp[j] = max(dp[j], dp[j - width] + height) return max(dp)"},{"question":"You are given an array of length n which contains unique integers ranging from 1 to n. Your task is to determine if it\'s possible to bring the array into a strictly increasing order by performing at most one sorting operation on any of its subarrays. A subarray is defined as any contiguous portion of the array. Input The input starts with an integer n (1 le n le 100), the number of elements in the array. The second line contains n integers representing the elements of the array. Output The output should be \\"YES\\" if it is possible to sort the array by performing at most one sorting operation on a subarray. Otherwise, output \\"NO\\". Examples Input: 5 3 2 1 4 5 Output: YES Input: 7 10 2 3 4 8 9 7 Output: NO Note: In the first example, sorting the subarray [3, 2, 1] results in the array [1, 2, 3, 4, 5] which is strictly increasing. In the second example, there is no single subarray sorting operation that can sort the entire array to become strictly increasing.","solution":"def can_sort_subarray_to_increasing(arr): Determines if it\'s possible to sort a subarray of the input array such that the entire array becomes strictly increasing. Parameters: arr (list): List of unique integers ranging from 1 to n. Returns: str: \\"YES\\" if possible to sort a subarray to make the array strictly increasing, otherwise \\"NO\\". n = len(arr) # Find the first point where the array is not increasing start = 0 while start < n - 1 and arr[start] < arr[start + 1]: start += 1 if start == n - 1: # The array is already sorted return \\"YES\\" # Find the end point of the non-increasing subarray end = start while end < n - 1 and arr[end] > arr[end + 1]: end += 1 # Reverse the subarray from start to end reversed_subarray = arr[start:end + 1][::-1] sorted_arr = arr[:start] + reversed_subarray + arr[end + 1:] # Check if the array is now sorted for i in range(n - 1): if sorted_arr[i] > sorted_arr[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"In the mythical land of Zombieland, there are n towns connected by m bidirectional roads. At each step, a zombie can move from one town to another only if there is a direct road built between those towns. Zombs, the mayor of Zombieland, wants to build new roads to ensure that it’s possible to travel between any two towns in the minimum number of new roads. Your task is to help Zombs determine the minimum number of new roads that need to be built to make the network of towns fully connected. The first line of input consists of two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000) — the number of towns and the number of existing roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating a bidirectional road between town u and town v. Print a single integer — the minimum number of new roads required to connect all towns in Zombieland. In the first example, the towns are already fully connected, so no new roads are needed. In the second example, we need to add one road between towns 1 and 3 to make them fully connected.","solution":"def minimum_new_roads(n, m, roads): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Find the number of connected components visited = [False] * (n + 1) components = 0 for town in range(1, n + 1): if not visited[town]: components += 1 bfs(town, visited) # The minimum number of new roads required is components - 1 return components - 1"},{"question":"Chloe is passionate about painting and loves creating complex geometric patterns. She recently came up with the idea of creating a painting based on a grid pattern. Chloe wants to fill a ( n times n ) grid with colors such that each cell in the grid can be either red (\'R\') or blue (\'B\'). She wants the pattern to be beautiful by following these rules: 1. No two adjacent cells (horizontally or vertically) should be of the same color. 2. The pattern should be as lexicographically small as possible when considering the grid rows concatenated from top to bottom. Given ( n ), help Chloe by generating the desired grid pattern. # Input The input contains a single integer ( n ) ( (1 leq n leq 500) ) — the dimension of the grid. # Output Output ( n ) lines, each containing ( n ) characters (\'R\' or \'B\'), representing the grid pattern. # Example Input ``` 3 ``` # Example Output ``` BRB RBR BRB ``` # Explanation In the above example, the grid of size 3x3 is filled with \'R\' (red) and \'B\' (blue) such that no two adjacent cells are the same color and the pattern is lexicographically smallest.","solution":"def generate_grid(n): Generates an n x n grid pattern where each cell is either \'R\' (red) or \'B\' (blue) such that no two adjacent cells are of the same color, and the pattern is lexicographically smallest. Args: n (int): Dimension of the grid Returns: List of strings: n lines, each containing n characters representing the grid grid = [] for i in range(n): row = [] for j in range(n): # Lexicographically smallest alternating pattern starts with \'B\' at (0,0) if (i + j) % 2 == 0: row.append(\'B\') else: row.append(\'R\') grid.append(\'\'.join(row)) return grid"},{"question":"You are given a weighted undirected connected graph with N vertices and M edges. Your task is to determine the number of unique shortest paths from vertex 1 to vertex N. The weight of a path is the sum of the weights of edges in this path. The first line of input contains two space-separated integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5), representing the number of vertices and the number of edges, respectively. Each of the next M lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing an edge between vertices u and v with weight w. Output a single integer – the number of unique shortest paths from vertex 1 to vertex N. If there is no path from vertex 1 to vertex N, output 0. **Example** Input: ``` 4 4 1 2 1 2 3 1 3 4 1 1 3 3 ``` Output: ``` 1 ``` Explanation: There is only one shortest path from vertex 1 to vertex 4 with a total weight of 3, which is 1 → 2 → 3 → 4. Input: ``` 4 5 1 2 1 2 3 1 3 4 1 1 3 3 2 4 2 ``` Output: ``` 2 ``` Explanation: There are two shortest paths from vertex 1 to vertex 4 with a total weight of 3: 1) 1 → 2 → 4 2) 1 → 2 → 3 → 4","solution":"import heapq from collections import defaultdict, deque def count_unique_shortest_paths(N, M, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm dist = [float(\'inf\')] * (N + 1) ways = [0] * (N + 1) dist[1] = 0 ways[1] = 1 min_heap = [(0, 1)] # (distance, node) while min_heap: d, node = heapq.heappop(min_heap) if d > dist[node]: continue for neighbor, weight in graph[node]: new_dist = d + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist ways[neighbor] = ways[node] heapq.heappush(min_heap, (new_dist, neighbor)) elif new_dist == dist[neighbor]: ways[neighbor] += ways[node] return ways[N] # Example usage: # vertices = 4 # edges_count = 5 # edges = [ # [1, 2, 1], # [2, 3, 1], # [3, 4, 1], # [1, 3, 3], # [2, 4, 2] # ] # print(count_unique_shortest_paths(vertices, edges_count, edges)) # Output: 2"},{"question":"You are working with a collection of files on your computer. Each file has a name consisting of lowercase letters of the English alphabet. Your task is to write a program that can manage these files based on a set of operations. The operations you need to support are as follows: 1. `\'ADD <file_name>\'` - Adds a file with the given name to the collection. 2. `\'REMOVE <file_name>\'` - Removes the file with the given name from the collection, if it exists. 3. `\'QUERY <prefix>\'` - Outputs the number of files whose names start with the given prefix. # Input The first line contains an integer q (1 leq q leq 10^5) - the number of operations. Each of the next q lines contains a single operation in one of the three formats mentioned above. File names and prefixes contain between 1 and 10 characters inclusive. # Output For each `\'QUERY <prefix>\'` operation, output the number of files in the current collection whose names start with the given prefix. # Example Input: ``` 8 ADD file ADD files ADD data REMOVE file QUERY file ADD file QUERY file QUERY data ``` Output: ``` 1 2 1 ``` # Explanation: - After adding \\"file\\" and \\"files\\" and \\"data\\", the collection is [\\"file\\", \\"files\\", \\"data\\"]. - Removing \\"file\\" leaves [\\"files\\", \\"data\\"]. - Querying \\"file\\" counts the files starting with \\"file\\", which is just \\"files\\" (1). - Adding \\"file\\" again results in [\\"files\\", \\"data\\", \\"file\\"]. - Querying \\"file\\" now counts \\"files\\" and \\"file\\" (2). - Querying \\"data\\" counts \\"data\\" (1).","solution":"from collections import defaultdict class FileManager: def __init__(self): self.files = set() self.prefix_count = defaultdict(int) def add(self, file_name): if file_name not in self.files: self.files.add(file_name) # Update the prefix counts for i in range(1, len(file_name) + 1): prefix = file_name[:i] self.prefix_count[prefix] += 1 def remove(self, file_name): if file_name in self.files: self.files.remove(file_name) # Update the prefix counts for i in range(1, len(file_name) + 1): prefix = file_name[:i] self.prefix_count[prefix] -= 1 def query(self, prefix): return self.prefix_count[prefix] def process_operations(operations): manager = FileManager() results = [] for operation in operations: parts = operation.split() command = parts[0] arg = parts[1] if command == \\"ADD\\": manager.add(arg) elif command == \\"REMOVE\\": manager.remove(arg) elif command == \\"QUERY\\": results.append(manager.query(arg)) return results"},{"question":"A company has a delivery system that can deliver packages within a grid city of dimensions m x n. The city is divided into blocks, and each block is represented by a cell in a 2D grid. The delivery system can move up, down, left, or right one cell at a time. The company has determined that some blocks are inaccessible due to various reasons such as construction work or roadblocks. These inaccessible blocks are marked as \'0\' in the grid, while accessible blocks are marked as \'1\'. Given the starting coordinates (sr, sc) of the delivery truck and the coordinates (er, ec) of the destination, your task is to find the shortest path from the starting cell to the destination cell. If there is no path, return -1. Implement a function `shortestPath(grid, start, destination)` that takes in a 2D list of integers `grid`, a tuple `start` representing the starting coordinates, and a tuple `destination` representing the destination coordinates, and returns the length of the shortest path from start to destination. # Input - The first line contains three space-separated integers m, n, and k (1 ≤ m, n ≤ 1000, 0 ≤ k < m * n), where `m` and `n` represent the number of rows and columns in the grid, and `k` represents the number of inaccessible cells. - The next line contains `k` pairs of integers, each pair containing the row and column indices of an inaccessible cell (0-based indexing). - The next line contains two space-separated integers sr and sc (0 ≤ sr < m, 0 ≤ sc < n), the starting coordinates. - The next line contains two space-separated integers er and ec (0 ≤ er < m, 0 ≤ ec < n), the destination coordinates. # Output - Print a single integer representing the length of the shortest path from the starting cell to the destination cell, or -1 if no such path exists. # Example Input ``` 5 5 3 1 2 3 2 2 3 0 0 4 4 ``` Output ``` 8 ``` The above grid would look like this with inaccessible cells marked: ``` 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 ``` And the shortest path from (0, 0) to (4, 4) would consist of 8 steps: Right, Right, Down, Down, Right, Right, Down, Down.","solution":"from collections import deque def shortestPath(grid, start, destination): Finds the shortest path in a grid from start to destination. :param grid: 2D list of integers representing the grid. :param start: Tuple (sr, sc) representing the starting coordinates. :param destination: Tuple (er, ec) representing the destination coordinates. :return: The length of the shortest path from start to destination or -1 if no path exists. rows, cols = len(grid), len(grid[0]) sr, sc = start er, ec = destination if grid[sr][sc] == 0 or grid[er][ec] == 0: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sr, sc, 0)]) # (row, col, distance) visited = set() visited.add((sr, sc)) while queue: r, c, dist = queue.popleft() if (r, c) == destination: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Boris the gardener is planting flowers in his garden. He has n flower beds arranged in a row, where each flower bed can either be empty or contain one variety of flower. Boris wants to beautify his garden by ensuring that no two adjacent flower beds contain the same variety of flower. He has flowers of k different varieties, labeled 1 through k, and a sequence representing the initial state of his flower beds, where 0 indicates an empty bed. Given the initial state of the flower beds, help Boris determine the minimum number of flower types he needs to fill all empty flower beds such that no two adjacent flower beds contain the same variety of flower. The first line contains two integers n and k (1 ≤ n, k ≤ 500), the number of flower beds and the number of flower varieties respectively. The second line contains n integers, the initial state of the flower beds (0 ≤ bed_i ≤ k). Print the minimum number of flower types Boris needs to use to fill all empty flower beds. For example: Input: 6 3 2 0 0 2 1 0 Output: 2 Explanation: Boris can fill the second and third flower beds with variety 1, and the last flower bed with variety 2. This way, he only uses 2 out of 3 flower varieties, and adjacent flower beds have different varieties.","solution":"def min_flower_types(n, k, flower_beds): def dfs(idx, last_variety, used_varieties): if idx == n: return len(used_varieties) if flower_beds[idx] != 0: return dfs(idx + 1, flower_beds[idx], used_varieties) min_varieties = float(\'inf\') for variety in range(1, k + 1): if variety != last_variety: min_varieties = min(min_varieties, dfs(idx + 1, variety, used_varieties | {variety})) return min_varieties return dfs(0, -1, set()) # Example usage n, k = 6, 3 flower_beds = [2, 0, 0, 2, 1, 0] print(min_flower_types(n, k, flower_beds)) # Output: 2"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has an associated cost. You are required to find the Minimum Spanning Tree (MST) of the graph and determine the total cost of this MST. Additionally, you must answer several queries regarding the graph. Each query consists of three integers u, v, and c which denote that there is a proposal to add a new edge between vertices u and v with a cost of c. For each query, determine whether adding this new edge would lead to a decrease in the total cost of the MST and provide the new cost if it does. The input format is as follows: - The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), where n is the number of vertices and m is the number of edges. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between vertices u and v with a cost of w. - The next line contains an integer q (1 ≤ q ≤ 10000), the number of queries. - The next q lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^6), representing a query to add an edge with cost c between vertices u and v. Output the total cost of the MST on the first line. For each query, output the new total cost of the MST if the edge is added and it decreases the total cost; otherwise, output the current total cost of the MST. Example input: ``` 5 7 1 2 2 2 3 3 3 4 1 4 5 4 5 1 6 1 3 5 2 4 7 3 1 5 2 2 4 1 3 5 8 ``` Example output: ``` 10 8 8 10 ``` Explanation: The MST of the given graph has edges with total cost 10. For the first query, adding the edge (1, 5, 2) reduces the MST cost to 8. For the second query, adding the edge (2, 4, 1) also results in an MST cost of 8. For the third query, adding the edge (3, 5, 8) does not reduce the cost, so the MST cost remains 10.","solution":"import heapq def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda edge: edge[2]) parent = list(range(n)) rank = [0] * n mst_cost = 0 mst_edges = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w mst_edges += 1 if mst_edges == n - 1: break return mst_cost def minimum_spanning_tree(n, edges, queries): edges = [(u-1, v-1, w) for u, v, w in edges] mst_cost = kruskal(n, edges) results = [] for u, v, c in queries: edges_with_extra = edges + [(u-1, v-1, c)] new_mst_cost = kruskal(n, edges_with_extra) results.append(min(mst_cost, new_mst_cost)) return mst_cost, results n = 5 m = 7 edges = [ (1, 2, 2), (2, 3, 3), (3, 4, 1), (4, 5, 4), (5, 1, 6), (1, 3, 5), (2, 4, 7) ] queries = [ (1, 5, 2), (2, 4, 1), (3, 5, 8) ] mst_cost, results = minimum_spanning_tree(n, edges, queries) print(mst_cost) for result in results: print(result)"},{"question":"Anna is planning a treasure hunt and needs to hide coins in n different spots. Each spot i has a guarantee value of vi coins that every participant will definitely find if they search that spot, along with additional hidden coins which are not publicized. When a participant searches a spot, they will find x_i number of additional hidden coins which can vary from hunt to hunt. Anna has collected data from past treasure hunts and knows the probabilities of finding specific amounts of additional coins at each spot. Specifically, for each spot i, she knows the probabilities for k different amounts of additional hidden coins. Given this data, Anna wants to calculate the expected number of coins a participant would find if they search a particular spot i. You need to create a function that calculates this expected value for each spot and returns the results. # Function Definition ```python def treasure_hunt_expectations(n: int, values: List[int], k_probs: List[List[Tuple[int, float]]]) -> List[float]: pass ``` # Input - `n`: an integer representing the number of different spots (1 ≤ n ≤ 1000). - `values`: a list of integer numbers of length n, where the i-th element represents the guarantee value of coins at spot i (1 ≤ vi ≤ 100). - `k_probs`: a list of lists, where each inner list contains tuples. Each tuple consists of two elements: - the first element is an integer (0 ≤ x_i ≤ 100) representing the amount of additional hidden coins. - the second element is a float (0 ≤ probability ≤ 1) representing the probability of finding this amount of additional hidden coins at spot i. - It is guaranteed that the sum of probabilities in each inner list equals 1. # Output - A list of floats of length n where the i-th element is the expected number of coins a participant would find at spot i. # Example ```python # Input n = 3 values = [5, 3, 7] k_probs = [ [(2, 0.5), (1, 0.5)], # at spot 1, 50% chance of 2 additional coins or 1 additional coin [(0, 1.0)], # at spot 2, 100% chance of 0 additional coins [(3, 0.7), (5, 0.3)] # at spot 3, 70% chance of 3 additional coins or 30% chance of 5 additional coins ] # Output [6.5, 3.0, 10.6] ``` # Explanation For each spot, the expected number of coins can be calculated by using the formula for expected value: [ E(X) = sum (x_i times p_i) + v_i ] - For spot 1: [ 5 + (2 times 0.5) + (1 times 0.5) = 5 + 1 + 0.5 = 6.5 ] - For spot 2: [ 3 + (0 times 1.0) = 3 + 0 = 3.0 ] - For spot 3: [ 7 + (3 times 0.7) + (5 times 0.3) = 7 + 2.1 + 1.5 = 10.6 ]","solution":"from typing import List, Tuple def treasure_hunt_expectations(n: int, values: List[int], k_probs: List[List[Tuple[int, float]]]) -> List[float]: expectations = [] for i in range(n): expected_additional = sum(x * p for x, p in k_probs[i]) expected_total = values[i] + expected_additional expectations.append(expected_total) return expectations"},{"question":"You are a janitor working on a spaceship and you need to clean up some broken glass. The glass pieces are scattered in a corridor of length D. The corridor is represented as an array of size D where each element can be either 0 (no glass) or 1 (glass present). You have a broom that can cover up to w consecutive elements of the corridor in one sweep. Your task is to calculate the minimum number of sweeps required to clean all the broken glass from the corridor. The first line of input contains two integers D (1 ≤ D ≤ 10^5) and w (1 ≤ w ≤ D) — the length of the corridor and the width of the broom. The second line contains D integers, each being either 0 or 1, representing the condition of the corridor. Print a single integer — the minimum number of sweeps required to clean all the broken glass from the corridor. Example Input: 10 3 0 1 0 1 1 0 0 1 0 1 Output: 3 Explanation: In the example, you can sweep the glass pieces in the following way: - Use one sweep to clean the glass at positions 2 to 4 (1-based index). - Use another sweep to clean the glass at positions 8 to 10. - Finally, use one more sweep to clean the glass at positions 5 to 7.","solution":"def min_sweeps(D, w, corridor): sweeps = 0 i = 0 while i < D: # If there\'s glass at the current position if corridor[i] == 1: sweeps += 1 # We need a sweep i += w # Move ahead by broom width since this sweep covers w elements else: i += 1 # Move to the next position return sweeps"},{"question":"The heads of a certain technical university have decided to introduce a new grading system for a coding course. This new system is based on the students\' success in solving problems within given time limits during their exams. Each student\'s exam has a certain number of problems that need to be solved within fixed time limits. A student gets a score equal to the sum of points of all solved problems, with each problem having different points and time limits. If a student fails to solve a problem within the time limit assigned to that problem, they get no points for that problem. Each problem can be attempted multiple times within the given time limit until it is solved correctly. The objective is to calculate the maximum score a student can obtain during their exam based on their problem-solving speed. The first line of the input contains two integers n (1 ≤ n ≤ 1000) and t (1 ≤ t ≤ 1000), where n is the number of problems and t is the total time available for the exam. The next n lines describe each problem with two integers each: pi (1 ≤ pi ≤ 100) — the points for solving the problem, and di (1 ≤ di ≤ t) — the time limit for that problem. You need to write a program that calculates the maximum score a student can obtain during their exam. # Input ``` n t p1 d1 p2 d2 ... pn dn ``` # Output Print a single integer — the maximum score that can be obtained. # Example **Input:** ``` 3 10 10 5 5 3 15 7 ``` **Output:** ``` 20 ``` **Explanation:** - The student can solve the first problem (10 points, 5 minutes) and the third problem (15 points, 7 minutes). - Alternatively, the student can solve the second problem (5 points, 3 minutes) and the third problem (15 points, 7 minutes). In either option, the student can achieve a maximum score of 20 within the given time limit.","solution":"def max_score(n, t, problems): Calculates the maximum score a student can achieve given the problems and their time limits. Parameters: n (int): Number of problems. t (int): Total time available for the exam. problems (list of tuples): List containing tuples with two integers each where first integer is the points and second integer is the time limit for that problem. Returns: int: The maximum score that can be obtained. # Sort the problems by their time limits (to attempt easier ones first) problems.sort(key=lambda x: x[1]) # Initialize a list to keep track of maximum score at each time point dp = [0] * (t + 1) for points, time_limit in problems: for time in range(t, time_limit - 1, -1): dp[time] = max(dp[time], dp[time - time_limit] + points) return max(dp)"},{"question":"Consider a line of people waiting to buy a ticket to a concert. Each person has a unique patience level represented by an integer. The ticket counter distributes only one ticket at a time, and it processes the request of those with higher patience levels first. If two people have the same patience level, the person who arrived first gets processed first. Given the patience levels and the order of people in line, determine the order in which they will receive their tickets. # Input: - The first line contains an integer `n` (1 le n le 100) – the number of people in the line. - The second line contains `n` space-separated integers representing the patience levels of the people in the order they are standing in the line. # Output: - Print a single line containing `n` space-separated integers representing the indices (1-based) of the people in the order they will receive their tickets. # Example: Input: ```plaintext 5 4 2 7 7 5 ``` Output: ```plaintext 3 4 5 1 2 ``` Explanation: The person at index 3 has the highest patience level of 7, followed by the person at index 4 with the same patience level. Next is the person at index 5 with a patience level of 5, followed by the person at index 1 with a patience level of 4, and finally the person at index 2 with a patience level of 2. Thus, the order of receiving tickets is 3 4 5 1 2.","solution":"def ticket_order(n, patience_levels): Determine the order in which people receive their tickets based on their patience levels. :param n: int - Number of people in the line :param patience_levels: List[int] - List of patience levels of the people in the order they are standing :return: List[int] - List of indices representing the order in which they receive their tickets # Create a list of tuples (patience level, original index) people = [(patience, i + 1) for i, patience in enumerate(patience_levels)] # Sort the list primarily by patience level in descending order, secondarily by original index in ascending order people.sort(key=lambda x: (-x[0], x[1])) # Extract the sorted indices sorted_indices = [x[1] for x in people] return sorted_indices"},{"question":"Clara is a keen runner and likes to keep track of her workouts. She runs different routes every day and logs her running routes using a mobile app. However, sometimes the app malfunctions and logs redundant consecutive data points. Your task is to help Clara clean up these logs. You are given a sequence of timestamps and GPS coordinates representing Clara\'s route for the day. The log is ordered by timestamps and may contain redundant consecutive entries (i.e., entries with the same coordinates as the previous one). Your task is to remove redundant consecutive data points and return the cleaned route. # Input - The first line contains an integer n (1 le n le 10^5) - the number of logged data points. - Each of the next n lines contains two space-separated floats: t (timestamp in seconds) and a pair of floats x and y (GPS coordinates). # Output Print the cleaned route, maintaining the order of the original log but without consecutive redundant entries. # Example Input 1: ``` 6 1 39.1234 -84.5034 2 39.1234 -84.5034 3 39.1240 -84.5038 4 39.1240 -84.5038 5 39.1247 -84.5042 6 39.1247 -84.5042 ``` Output 1: ``` 1 39.1234 -84.5034 3 39.1240 -84.5038 5 39.1247 -84.5042 ``` Input 2: ``` 5 1 40.7128 -74.0060 2 40.7128 -74.0059 3 40.7128 -74.0060 4 40.7130 -74.0062 5 40.7130 -74.0062 ``` Output 2: ``` 1 40.7128 -74.0060 2 40.7128 -74.0059 3 40.7128 -74.0060 4 40.7130 -74.0062 ``` Note: The first example shows entries where pairs of points are redundant consecutively and the second example shows a log with non-redundant consecutive entries.","solution":"def clean_route(n, log): Removes redundant consecutive data points from the log. Args: n : int : number of logged data points log : list : list of logged data points, each entry is a tuple (t, x, y) Returns: list : cleaned list of logged data points if n == 0: return [] cleaned_log = [log[0]] for i in range(1, n): if log[i][1:] != log[i-1][1:]: # checks if current coordinates are different from previous cleaned_log.append(log[i]) return cleaned_log # Example usage: # n = int(input()) # log = [tuple(map(float, input().split())) for _ in range(n)] # cleaned_log = clean_route(n, log) # for entry in cleaned_log: # print(f\\"{entry[0]} {entry[1]} {entry[2]}\\")"},{"question":"You are given an array of integers representing the heights of n buildings in a row. A person wants to jump from the leftmost building to the rightmost building, with certain constraints on the jumps: - The person can jump from building i to building j (i < j) if and only if the height of building j is greater than the height of building i. - The person can jump at most k times. - The goal is to determine the maximum number of buildings the person can visit, including the starting building. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100), the number of buildings and the maximum number of jumps, respectively. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10000), the heights of the buildings. Output a single integer, the maximum number of buildings the person can visit, starting from the leftmost building. Example: Input: 7 3 10 20 15 25 30 10 40 Output: 4 Explanation: The person can jump from building 1 (height 10) to building 2 (height 20), then from building 2 (height 20) to building 4 (height 25), and finally from building 4 (height 25) to building 5 (height 30). Thus, the maximum number of buildings visited is 4, including the starting building.","solution":"def max_buildings_visited(n, k, heights): dp = [1] * n # dp[i] represents the maximum number of buildings up to i that can be visited for i in range(n): for j in range(i): if heights[j] < heights[i]: dp[i] = max(dp[i], dp[j] + 1) return min(max(dp), k + 1)"},{"question":"In a magical forest, there are n mystical stones arranged in a row. Each stone has a certain magical power, represented by an integer. The forest guardian has the ability to combine these stones in a specific way to create a powerful artifact. To combine two stones, the guardian selects two adjacent stones and merges them into one new stone. The power of the new stone is defined as the product of the powers of the two stones being merged. This process reduces the number of stones by one. The guardian continues combining stones until only one stone remains. The guardian wants to create the most powerful artifact possible. Your task is to determine the maximum possible power of the final stone after all possible merging operations. The input contains a single integer n (2 ≤ n ≤ 50) — the number of stones, followed by n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the powers of the stones in the initial arrangement. Output a single integer — the maximum possible power of the final stone after all merging operations. **Example:** **Input:** ``` 3 2 3 4 ``` **Output:** ``` 24 ``` In this example, the guardian merges the first two stones (2 and 3) to create a new stone with power 6. Then, the guardian merges this new stone (6) with the third stone (4) to create the final stone with power 24. Thus, the maximum possible power of the final stone is 24.","solution":"def max_power_of_final_stone(n, powers): Returns the maximum possible power of the final stone after all merging operations. Parameters: n (int): The number of stones. powers (list): A list of integers representing the power of each stone. Returns: int: The maximum possible power of the final stone. # For dynamic programming, we create a 2D array to store the maximum product # dp[i][j] will be the maximum product we can get from stones[i] to stones[j] dp = [[0] * n for _ in range(n)] # Initial cases: when considering only intervals of length 1 for i in range(n): dp[i][i] = powers[i] # Calculate dp values for longer intervals for length in range(2, n + 1): # interval length for i in range(n - length + 1): j = i + length - 1 dp[i][j] = -float(\'inf\') for k in range(i, j): dp[i][j] = max(dp[i][j], dp[i][k] * dp[k + 1][j]) # The result for the entire array is in dp[0][n-1] return dp[0][n-1]"},{"question":"Sarah is playing with tiles, and she has a set of tiles where each tile has an integer number written on it. Sarah wants to arrange these tiles in a straight line such that the sum of the differences between every two adjacent tiles is minimized. The difference between two adjacent tiles is the absolute value of the difference in their numbers. Given a list of integers representing the numbers on the tiles, help Sarah determine the minimum possible sum of the differences between every two adjacent tiles when they are arranged optimally. # Input - The first line contains an integer `n` (1 leq n leq 2 cdot 10^5), the number of tiles. - The second line contains `n` integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9), the numbers on the tiles. # Output - Print a single integer, which is the minimum possible sum of the differences between every two adjacent tiles. # Example Input: ``` 3 4 2 1 ``` Output: ``` 2 ``` # Explanation One optimal arrangement is `[1, 2, 4]`. The differences between adjacent tiles are `1` and `2`, giving a total sum of `1 + 1 = 2`.","solution":"def min_sum_of_differences(n, tiles): Returns the minimum possible sum of the differences between every two adjacent tiles. :param n: int - number of tiles :param tiles: list of int - the numbers on the tiles :return: int - the minimum sum of differences tiles.sort() min_sum_diff = 0 for i in range(1, n): min_sum_diff += abs(tiles[i] - tiles[i - 1]) return min_sum_diff def main(input_string): Reads input, processes it, and prints out the result. lines = input_string.strip().split(\'n\') n = int(lines[0]) tiles = list(map(int, lines[1].split())) result = min_sum_of_differences(n, tiles) return str(result)"},{"question":"John is a software engineer and has a special interest in prime numbers. Recently, he came across a problem where he needs to find the k-th prime factor of a given number n. A prime factor of a number n is a prime number that divides n exactly without leaving a remainder. For instance, the prime factors of 12 are 2 and 3. John is now looking for an efficient algorithm to find the k-th prime factor. If the k-th prime factor does not exist, he needs to return -1. Can you help John solve this problem? The input consists of two space-separated integers n and k (1 ≤ n ≤ 10^12, 1 ≤ k ≤ 10^5). Output the k-th prime factor of n. If there are fewer than k prime factors, print -1. # Example Input: ``` 100 3 ``` Output: ``` 5 ``` Explanation: The prime factors of 100 are 2, 2, 5, and 5. The 3rd prime factor is 5. Input: ``` 13 2 ``` Output: ``` -1 ``` Explanation: The only prime factor of 13 is 13 itself. Thus, the 2nd prime factor does not exist and the output is -1.","solution":"def k_th_prime_factor(n, k): if n <= 1 or k <= 0: return -1 prime_factors = [] i = 2 while i * i <= n: while n % i == 0: prime_factors.append(i) n //= i i += 1 if n > 1: prime_factors.append(n) if len(prime_factors) >= k: return prime_factors[k-1] else: return -1"},{"question":"A company runs a contest where players collect points by completing various tasks. Each task has a difficulty level represented by an integer. Each player can complete any task as many times as they want. However, to promote fairness, the company wants to ensure that the harder tasks yield higher points efficiently. To structure the points system, the company decides that the points earned for completing a task of a certain difficulty level will be in a sequence of powers of 2 starting from 1, based on the task\'s difficulty. For example, the points for difficulty level 1 will be 1 point per completion, for difficulty level 2 will be 2 points per completion, for difficulty level 3 will be 4 points per completion, and so on. Given a list of tasks attempted by players, calculate the total points for each player. Input: - The first line contains an integer `p` (1 ≤ p ≤ 1000), the number of players. - The next line contains `p` integers `a1, a2, ..., ap` (1 ≤ ai ≤ 10000), where `ai` is the number of tasks completed by the i-th player. - Each of the next `ai` lines contains a single integer `dij` (1 ≤ dij ≤ 20), the difficulty level of the j-th task completed by the i-th player. Output: - Output `p` lines, each containing a single integer, the total points earned by the respective player. Example input: ``` 2 3 2 1 2 3 2 1 3 ``` Example output: ``` 7 5 ``` Explanation: The first player completes tasks of difficulty levels 1, 2, and 3. The points are calculated as: 1 (for difficulty 1) + 2 (for difficulty 2) + 4 (for difficulty 3) = 7 points. The second player completes tasks of difficulty levels 1 and 3. The points are calculated as: 1 (for difficulty 1) + 4 (for difficulty 3) = 5 points. In this way, the company encourages players to attempt harder tasks to earn more points.","solution":"def calculate_total_points(p, task_counts, task_difficulties): Function to calculate the total points for each player based on the tasks they completed. Parameters: p (int): The number of players. task_counts (list of int): List containing the number of tasks completed by each player. task_difficulties (list of list of int): Nested list where each inner list contains the difficulty levels of the tasks completed by the corresponding player. Returns: list of int: A list containing the total points earned by each player. total_points = [] for i in range(p): player_points = sum(2 ** (difficulty - 1) for difficulty in task_difficulties[i]) total_points.append(player_points) return total_points"},{"question":"Alice and Bob are playing a game with a string composed of lowercase English letters. The game is turn-based, and Alice moves first. In each turn, a player must choose a non-empty substring and remove all its occurrences from the string. The game continues until the string becomes empty. The player who is unable to make a move loses the game. Assume both players play optimally. Determine who will win the game. The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. The following 2 * T lines describe each test case. The first line of each pair contains a single integer n (1 ≤ n ≤ 100), the length of the string. The second line contains the string s of length n. For each test case, print \\"Alice\\" if Alice wins the game and \\"Bob\\" if Bob wins the game. Example: Input: 3 3 abc 4 aaaa 5 abcba Output: Alice Bob Alice Explanation: In the first test case, Alice can remove the entire string \\"abc\\" in her first turn, winning the game. In the second test case, any substring Alice removes, Bob can immediately remove the rest of the string (\\"a\\"), causing Alice to lose. In the third test case, Alice can start by removing \\"abc\\" or \\"cba,\\" leaving Bob with a single character move (resulting Alice to move again and remove the last remaining character), ensuring Alice\'s victory.","solution":"def determine_winner(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] unique_chars = set(s) # If there is only one unique character and it can be repeatedly removed, Bob wins if len(unique_chars) == 1: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"In a kingdom far far away, there exists a forest of magical trees. Every tree in this forest has a unique magical property that can be represented by an integer. The Wizard of the kingdom gives you a task to find the maximum product of any two different tree properties in the forest. You are given an array of integers where each integer represents the magical property of a tree. You need to find the maximum product of any two different elements from this array. Note that the two elements chosen to form the product must be distinct; that is, you cannot use the same element twice. The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of trees in the forest. The next line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the magical properties of the trees. Print a single integer representing the maximum product of any two distinct magical properties. Example: Input: 5 -10 -20 5 6 7 Output: 200 Explanation: The two magical properties that yield the maximum product are -10 and -20, whose product is 200.","solution":"def max_product_of_two_distinct_elements(n, arr): Find the maximum product of any two different elements from the array of integers. :param n: An integer representing the number of trees in the forest. :param arr: List of integers representing the magical properties of the trees. :return: An integer representing the maximum product of any two distinct magical properties. if n < 2: raise ValueError(\\"There must be at least two elements to find a product.\\") # Initialize variables to store the two largest and two smallest elements max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"You are given a sequence of integers and you need to perform a series of operations on them. Each operation involves choosing a contiguous sub-sequence of the given integers and rotating it one place to the right or one place to the left in a circular manner. Your task is to determine whether it\'s possible to make the sequence sorted in non-decreasing order using a specified number of such operations. The first line contains two integers, n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of elements in the sequence and the maximum number of operations you can perform, respectively. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the sequence. Output \\"YES\\" if it is possible to sort the sequence in non-decreasing order using at most k operations, otherwise output \\"NO\\". In the first sample case, you can choose the sub-sequence [4, 6, 1, 3] and rotate it left to get [6, 1, 3, 4]. Then choosing the sub-sequence [1, 3, 4] and rotating it left to get [3, 4, 1] and finally choosing [1, 3] and rotating it right to get [3, 1]. Thus the sequence becomes [7, 3, 1, 4, 6] and with these operations, you can\'t sort the sequence in 3 operations and hence the output will be \\"NO\\". In the second sample case, you can sort the sequence in two operations by choosing the sub-sequence [5, 2, 8] and rotate it right to get [8, 5, 2] and then choosing the sub-sequence [1, 5, 2, 8] and rotate it right to get [8, 1, 2, 5]. Thus the sequence is sorted and the output will be \\"YES\\".","solution":"def can_sort_by_rotation(n, k, sequence): Determines whether it is possible to sort the sequence in non-decreasing order using at most k rotations of contiguous sub-sequences. # Check if the sorted sequence is already sorted sorted_sequence = sorted(sequence) if sequence == sorted_sequence: return \\"YES\\" # Check how many disjointed sub-sequences (blocks) are out of order blocks = 1 for i in range(1, n): if sequence[i] < sequence[i - 1]: blocks += 1 # If the number of blocks of disorder is less than or equal to k, it is possible to sort if blocks <= k: return \\"YES\\" return \\"NO\\""},{"question":"In the faraway land of Alacta, there are n cities connected by m bidirectional roads. The king wants to improve the security of the kingdom by ensuring that every city can be heavily fortified if needed. To do so, he needs to build new roads to ensure that from any city, it\'s possible to travel to any other city using the existing and new roads combined. You are tasked with determining the minimum number of new roads to be built to ensure the kingdom\'s road network is connected, i.e., there is a path between any pair of cities. The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 10^5) — the number of cities and the number of existing roads, respectively. Each of the next m lines contains two integers u and v (1 leq u, v leq n) — representing a bidirectional road between city u and city v. It is guaranteed no road is listed more than once. Print a single integer — the minimum number of new roads needed to make the road network connected. In the first example, with n = 5 and m = 3, the initial connections may be something like [1, 2], [1, 3], [4, 5]. You need to add at least 1 new road between any two different connected components to ensure all cities are connected, an example solution could be adding a road between city 3 and city 4. In the second example, n = 4 and m = 0, since no cities are connected, you need at least 3 new roads to connect all cities, for example, you can connect the network with roads like [1, 2], [2, 3], [3, 4]. In the third example, with n = 3 and m = 3, where every pair of cities is already connected directly or indirectly, no new roads are needed. ```plaintext Example 1: Input: 5 3 1 2 1 3 4 5 Output: 1 Example 2: Input: 4 0 Output: 3 Example 3: Input: 3 3 1 2 2 3 3 1 Output: 0 ```","solution":"def minimum_new_roads(n, m, roads): from collections import defaultdict, deque if n == 1: return 0 # Graph representation graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(node, visited): queue = deque([node]) visited[node] = True while queue: u = queue.popleft() for v in graph[u]: if not visited[v]: visited[v] = True queue.append(v) # Find number of connected components visited = [False] * (n + 1) connected_components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) connected_components += 1 # Minimum new roads required to connect all components is (number of components - 1) return connected_components - 1"},{"question":"Vladimir is an avid gardener and has a row of n plants on his balcony. Each plant can be identified by its height. During the recent windstorm, some plants got scattered all over. Vladimir needs to rearrange the plants in non-decreasing order of their heights to restore the garden\'s original appearance. However, he can only do the following operations: 1. Vladimir can select any plant and place it in any vacant position. 2. Each position can either be occupied by one plant or left vacant temporarily during this process. Vladimir wants to figure out the minimal number of moves required to achieve the arrangement where the plants are in non-decreasing order of their heights. The first line of the input contains a single integer n (1 ≤ n ≤ 1000), which is the number of plants. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000), which represent the heights of the plants in the original order as they appeared after the windstorm. In a single line, print the minimal number of moves required to arrange the plants in non-decreasing order of their heights. Example: Input: 5 4 3 2 5 1 Output: 3 Explanation: The sorted order should be [1, 2, 3, 4, 5]. One possible sequence of moves: 1. Move plant of height 1 to the first position. 2. Move plant of height 2 to the second position. 3. Move plant of height 3 to the third position. Thus, a total of 3 moves are required.","solution":"def min_moves_to_sort_plants(n, heights): Returns the minimal number of moves required to arrange the plants in non-decreasing order of their heights. Arguments: n -- Number of plants heights -- List of integers representing the heights of the plants Returns: int -- Minimal number of moves required sorted_heights = sorted(heights) move_count = 0 height_positions = {height: [] for height in heights} for position, height in enumerate(heights): height_positions[height].append(position) visited = [False] * n for i in range(n): if visited[i] or heights[i] == sorted_heights[i]: continue cycle_len = 0 x = i while not visited[x]: visited[x] = True x = height_positions[sorted_heights[x]].pop() cycle_len += 1 if cycle_len > 0: move_count += (cycle_len - 1) return move_count"},{"question":"You are given an array of n integers where each element represents the height of a building. The goal is to calculate the amount of water that can be trapped after raining. The water trap is determined based on how buildings higher than the current building block the water and form containers. The first line contains the integer n (1 ≤ n ≤ 100000)— the number of buildings. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 100000) — the height of each building. Print a single integer — the amount of water that can be trapped after raining. Example: Input: 6 0 1 0 2 1 0 Output: 1 Explanation: In this example, 1 unit of water is trapped between the heights 1 and 2, forming one container.","solution":"def trap_rain_water(heights): Calculate the amount of water that can be trapped after raining given the heights of buildings. Parameters: heights (list of int): A list of integers representing the height of each building. Returns: int: The total amount of trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Alice is organizing a series of games with her friends. Each game has multiple rounds, and each round can be won by one of the participants, earning them a certain number of points. The participant with the highest total score at the end of all rounds wins the game. Alice realizes that sometimes a simple win-loss tally can be misleading if the differences in scores are not adequately considered. Thus, to decide the winner based on the total score difference, she has come up with a new rule where they only compare the scores between the top two participants by summing up their respective scores across all rounds. You need to help Alice find out who the winner is by implementing this rule. Given the scores for each participant in each round, calculate the total scores for the top two participants and determine the winner. # Input The first line contains an integer n (2 leq n leq 1000) — the number of participants. The second line contains an integer m (1 leq m leq 100) — the number of rounds. Each of the next n lines contains m integers separated by spaces where the j-th integer (1 leq score_{ij} leq 100) in the i-th line represents the points scored by the i-th participant in the j-th round. # Output Print a single line with the integer (1-based index) of the participant who has the highest total score among the top two participants based on the new rule. # Example Input ```plaintext 3 4 10 20 30 40 5 15 25 35 8 18 28 38 ``` Output ```plaintext 1 ``` In the example above, participant 1 has total scores of 100, participant 2 has 80, and participant 3 has 92. The top two participants are 1 and 3. Therefore, according to the new rule, participant 1 wins as they have the highest total score of 100 compared to 92.","solution":"def calculate_winner(scores): n = len(scores) m = len(scores[0]) total_scores = [(i + 1, sum(participant_scores)) for i, participant_scores in enumerate(scores)] total_scores.sort(key=lambda x: x[1], reverse=True) top_two = total_scores[:2] winner = max(top_two, key=lambda x: x[1]) return winner[0] def find_winner(n, m, scores): Determines the winner based on total scores of the top two participants. n: int - number of participants m: int - number of rounds scores: list of lists - scores of each participant in each round Returns the 1-based index of the participant with the highest total score. return calculate_winner(scores)"},{"question":"Alice loves to play with sequences of numbers. Recently, she became interested in creating sequences where the sum of each prefix is unique. Given a positive integer n, help Alice find a sequence of n positive integers such that the sum of every prefix in the sequence is distinct. Formally, you need to find a sequence of n positive integers a1, a2, ..., an such that for every 1 ≤ i < j ≤ n, the sum of the first i elements is different from the sum of the first j elements. The first and only line of input contains an integer n (1 ≤ n ≤ 3000). Output n space-separated integers, representing the sequence Alice is looking for. If there are multiple correct answers, print any of them. Each of the n integers should be positive, and their sum should fit within a 64-bit signed integer.","solution":"def generate_unique_prefix_sums(n): Generates a sequence of n positive integers such that the sum of each prefix in the sequence is unique. # To ensure unique prefix sums, use the first n positive integers return list(range(1, n + 1))"},{"question":"Alice has a unique treehouse in her backyard. The treehouse is composed of n nodes connected by (n-1) bidirectional edges, forming a tree. Each node in the treehouse needs a specific type of wood panel, and the wood types are represented by positive integers starting from 1. Alice has a peculiar sense of aesthetics, and she wants to decorate the treehouse in such a way that no two nodes connected directly by an edge use the same type of wood panel. Alice wants to use the minimum number of different wood types possible. Can you help her achieve this goal? The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes in the treehouse. Each of the next (n-1) lines contains two integers u and v (1 ≤ u, v ≤ n) — the indices of two nodes directly connected by an edge. The output should consist of two lines: - The first line should contain a single integer k — the minimum number of wood types required. - The second line should contain n integers, where the i-th integer represents the wood type of the i-th node. Each of these integers should be within the range from 1 to k. For example, if the treehouse consists of 3 nodes connected in a line (1 → 2 → 3), the wood types required would be 2 (since adjacent nodes must use different types). Example input: ```plaintext 3 1 2 2 3 ``` Example output: ```plaintext 2 1 2 1 ``` In this example, 2 types of wood are needed: the first and third nodes can use wood type 1, and the second node can use wood type 2.","solution":"def min_wood_types(n, edges): from collections import defaultdict, deque # Initialize adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # To store wood types for each node wood_types = [-1] * (n + 1) # Perform BFS to color the tree def bfs(start): queue = deque([start]) wood_types[start] = 1 # Start with wood type 1 while queue: node = queue.popleft() current_type = wood_types[node] next_type = 1 for neighbor in graph[node]: if wood_types[neighbor] == -1: while next_type == current_type or any(next_type == wood_types[x] for x in graph[neighbor]): next_type += 1 wood_types[neighbor] = next_type queue.append(neighbor) bfs(1) # Tree can be colored from any start node, using node 1 here max_wood_type = max(wood_types) return max_wood_type, wood_types[1:]"},{"question":"Polycarpus recently became interested in sorting algorithms. He came across the term \\"inversions\\" in an array. An inversion is defined as a pair of indices (i, j) such that i < j and ai > aj. Given an array of n integers, help Polycarpus determine the total number of inversions in the array. The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Print a single integer that represents the number of inversions in the given array. For example, in the first test case, the array [3, 1, 2] has the following inversions: (3,1), (3,2), and (2,1). The total number of inversions is 3, so the output should be 3. In the second test case, the array [1, 2, 3, 4, 5] has no inversions as it is already sorted in ascending order, so the output should be 0.","solution":"def count_inversions(arr): def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the elements left to i in the left subarray # are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort(arr, temp_arr, 0, n-1)"},{"question":"Consider a tree with `n` vertices, where each vertex has some initial value associated with it. You can perform the following operation any number of times: Choose any vertex `v` and add the value associated with it to all of its immediate children (vertices that are directly connected to `v` and there is no other vertex between them). Given an initial configuration of the tree and the values associated with each vertex, determine the maximum possible sum of values that can be achieved on the vertices by performing the operations optimally. Input consists of the following: - The first line includes a single integer `n` (1 ≤ n ≤ 2 * 10^5) — the number of vertices. - The second line contains `n` space-separated integers `a1, a2, ..., an`, where `ai` is the initial value associated with the i-th vertex. - The next `n-1` lines contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between the vertices `u` and `v`. Output a single integer — the maximum possible sum of all vertex values after performing the operations any number of times. For instance, in the first sample case: ``` Input: 4 1 2 3 4 1 2 1 3 3 4 Output: 10 ``` In the second sample case: ``` Input: 3 7 3 5 1 2 1 3 Output: 15 ```","solution":"def max_vertex_sum(n, values, edges): from collections import defaultdict, deque # Building the adjacency list for the tree adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Finding out the maximum possible sum total_sum = sum(values) return total_sum # Example use case: n = 4 values = [1, 2, 3, 4] edges = [(1, 2), (1, 3), (3, 4)] print(max_vertex_sum(n, values, edges)) # Output should be 10"},{"question":"You are given an array of integers a of size n. Your task is to calculate the maximum possible sum of a contiguous subarray of this array. A subarray is a contiguous part of an array. You need to calculate the sum modulo 10^9+7. # Input - The first line contains a single integer n (1 le n le 10^5), the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), the elements of the array. # Output Print a single integer, the maximum possible sum of a contiguous subarray of the given array modulo 10^9+7. # Example Input ``` 5 1 -3 2 1 -1 ``` Output ``` 3 ``` Explanation The subarray with the maximum sum is [2, 1] which gives the sum of 3.","solution":"def max_subarray_sum_modulo(arr): MOD = 10**9 + 7 max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far % MOD"},{"question":"A company wants to create team-building activities based on employees\' unique skill sets. Each employee can be uniquely represented by their skills and productivity. The aim is to form a team such that the combined productivity of the team members is maximized while ensuring a diverse set of skills. An employee is represented by two integers, `s_i` and `p_i`: - `s_i` is a bit-mask representing the unique skills of the employee. Skill `j` is present if the `j`-th bit of `s_i` is set (1). Otherwise, it is not present. - `p_i` is the productivity score of the employee. A team is diverse if there is no pair of employees within the team that share any skill. Given `n` employees, your task is to form the most productive diverse team and output its total productivity. The input format is: - The first line contains an integer `n` (1 ≤ n ≤ 2000) — the number of employees. - The second line contains `n` integers `s_1, s_2, ..., s_n` (0 ≤ s_i < 2^30) — the skill bit-masks of employees. - The third line contains `n` integers `p_1, p_2, ..., p_n` (1 ≤ p_i ≤ 10^6) — the productivity of employees. The output is: - A single integer representing the maximum possible total productivity of a diverse team. If no diverse team can be formed, output 0. **Example:** Input: ``` 4 3 5 7 8 10 40 30 20 ``` Output: ``` 60 ``` Explanation: The most productive diverse team can be formed by picking employees 2 and 4. Their combined productivity is 60 (40+20) and they do not share any skills. In this case: - Employee 2\'s skills (bit-mask 5 in binary: 101) do not overlap with Employee 4\'s skills (bit-mask 8 in binary: 1000). - Other combinations either share skills or are less productive.","solution":"def max_productive_diverse_team(n, skills, productivity): max_productivity = 0 # Try all pairs of employees to find the highest productivity combination with no skill overlap for i in range(n): for j in range(i + 1, n): if skills[i] & skills[j] == 0: # No overlap in skills max_productivity = max(max_productivity, productivity[i] + productivity[j]) return max_productivity"},{"question":"Given an integer n (1 ≤ n ≤ 10^6), you need to partition the number n into a sum of least number of distinct positive integers. For example, if n = 8, the partition will be 1 + 2 + 5, and if n = 15, the partition will be 1 + 2 + 3 + 4 + 5, since it involves the least number of terms. Write a program that takes a single integer n as input and outputs the number of terms in the partition sum. Input: - A single integer n (1 ≤ n ≤ 10^6). Output: - Print a single integer, the number of distinct terms in the partition sum.","solution":"def partition_number(n): Partition the number n into the sum of the least number of distinct positive integers. Parameters: n (int): The integer to be partitioned (1 ≤ n ≤ 10^6) Returns: int: The number of distinct terms in the partition sum. sum, k = 0, 0 while sum < n: k += 1 sum += k if sum == n: return k else: return k - 1"},{"question":"You are given a rooted tree with n vertices, where the vertices are numbered from 1 to n. The tree\'s root is at vertex 1. Each vertex has a value associated with it. Your task is to calculate the maximum sum of vertex values you can obtain by selecting a subset of vertices such that no two selected vertices are directly connected by an edge. The first line of input will contain a single integer n (1 ≤ n ≤ 1000) — the number of vertices in the tree. The second line of input will contain n integers v1, v2, ..., vn (|vi| ≤ 1000) — the values associated with the vertices. The next n - 1 lines will contain two integers a and b (1 ≤ a, b ≤ n) each, indicating there is an edge between vertices a and b. Output a single integer — the maximum sum of vertex values obtainable by selecting a subset of vertices with the given constraints. Example: Input: ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` Output: ``` 12 ``` Explanation: Choosing vertices 1, 4, and 5 results in a sum of 1 + 4 + 5 = 10. Choosing vertices 3 and 4 results in a higher sum of 3 + 4 + 5 = 12.","solution":"def max_independent_set_sum(n, values, edges): from collections import defaultdict, deque children = defaultdict(list) for u, v in edges: children[u].append(v) children[v].append(u) dp = [[0, 0] for _ in range(n+1)] visited = [False] * (n+1) def dfs(node): visited[node] = True dp[node][1] = values[node-1] for child in children[node]: if not visited[child]: dfs(child) dp[node][0] += max(dp[child][0], dp[child][1]) dp[node][1] += dp[child][0] dfs(1) return max(dp[1][0], dp[1][1]) def parse_input_and_compute_max_sum(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) values = list(map(int, data[1:n+1])) edges = [tuple(map(int, data[i:i+2])) for i in range(n+1, len(data), 2)] result = max_independent_set_sum(n, values, edges) print(result)"},{"question":"You are given an n times m grid. Each cell in the grid contains a lowercase English letter. Two cells are considered connected if they share a side (horizontally or vertically). A path through the grid is called a palindrome path if the sequence of letters in the path forms a palindrome. A path can start and end at any cell in the grid. Write a program to determine whether there exists any palindrome path in the grid. Input - The first line contains two integers n and m (1 le n, m le 1000). - The next n lines contain a string of length m, representing the grid. Output - Print \\"YES\\" if there exists any palindrome path in the grid. Otherwise, print \\"NO\\". Example Input: 3 3 aba bcb aba Output: YES Explanation: In this example, we have multiple palindrome paths such as: - The path that starts at the top left corner (0, 0) and ends at the bottom right corner (2, 2): \\"aba\\" which is a palindrome. - The path that starts at the top right corner (0, 2) and ends at the bottom left corner (2, 0): \\"aba\\" which is a palindrome.","solution":"def exists_palindrome_path(n, m, grid): Returns whether there exists a palindrome path in the grid. def is_palindrome(sequence): Helper function to check if a sequence is a palindrome. return sequence == sequence[::-1] # Traverse all possible starting and ending points for the rows for i in range(n): row_sequence = grid[i] if is_palindrome(row_sequence): return \\"YES\\" # Traverse all possible starting and ending points for the columns for j in range(m): column_sequence = \'\'.join(grid[i][j] for i in range(n)) if is_palindrome(column_sequence): return \\"YES\\" return \\"NO\\" # Example usage: # n, m = 3, 3 # grid = [\\"aba\\", \\"bcb\\", \\"aba\\"] # report = exists_palindrome_path(n, m, grid) # print(report) # Should print \\"YES\\""},{"question":"You are given an array of integers `a` of length `n` and an integer `q`. Each element in the array is either 0 or 1. A query is given as two integers `l` and `r` (1 <= l <= r <= n). For each query, you need to determine the number of pairs `(i, j)` such that `a[i]` is 1, `a[j]` is 1, and `l <= i < j <= r`. The first line of the input contains two integers `n` and `q` (1 <= n, q <= 10^5) — the length of the array and the number of queries. The second line contains `n` integers `a_1, a_2, ..., a_n` (0 <= a_i <= 1). The next `q` lines contain two integers each `l` and `r` — the bounds of the query. For each query, output a single integer — the number of pairs `(i, j)` such that `a[i]` is 1, `a[j]` is 1, and `l <= i < j <= r`. Input: ``` 5 3 1 0 1 1 0 1 5 2 4 1 3 ``` Output: ``` 3 1 1 ``` Explanation: - For the first query (1, 5), the pairs are (1, 3), (1, 4), and (3, 4). - For the second query (2, 4), the pair is (3, 4). - For the third query (1, 3), the pair is (1, 3). Note: - You are guaranteed that the sum of `n` and `q` does not exceed 200,000. - You should aim for an efficient solution that leverages preprocessing or data structures to handle large inputs within reasonable time limits.","solution":"def count_pairs(n, q, a, queries): Counts the number of pairs (i, j) such that a[i] is 1, a[j] is 1, and l <= i < j <= r for each query. Args: n (int): Length of the array. q (int): Number of queries. a (list): List of n integers, each 0 or 1. queries (list): List of tuples (l, r) representing the queries. Returns: list: List of integers representing the number of valid pairs for each query. # Precompute prefix sums of counters of 1s in the array prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + a[i - 1] results = [] for l, r in queries: total_ones = prefix_sums[r] - prefix_sums[l - 1] pair_count = total_ones * (total_ones - 1) // 2 results.append(pair_count) return results # You can test this function with the example input. n = 5 q = 3 a = [1, 0, 1, 1, 0] queries = [(1, 5), (2, 4), (1, 3)] print(count_pairs(n, q, a, queries)) # Expected output: [3, 1, 1]"},{"question":"You are given a tree with n nodes, where each node has a unique integer between 1 and n as its identifier. A tree is a connected acyclic graph. You need to perform a series of operations on this tree. An operation consists of selecting two nodes, say u and v, and finding the lowest common ancestor (LCA) of these two nodes in the tree. The first line of the input contains one integer n (1 le n le 10^5) — the number of nodes in the tree. The next n-1 lines each contain two integers a and b (1 le a, b le n) — denoting an edge between nodes a and b. The subsequent line contains one integer q (1 le q le 10^5) — the number of queries. The next q lines each contain two integers u and v (1 le u, v le n) — the nodes for which the LCA is to be found. Output q lines, each containing a single integer — the identifier of the LCA of nodes u and v for each query. Example input: ``` 5 1 2 1 3 2 4 2 5 3 4 5 4 3 5 3 ``` Example output: ``` 2 1 1 ``` Explanation: The tree has 5 nodes and the edges form the tree described in the input. For each query, you need to output the LCA for the given pair of nodes. In the first query, the LCA of nodes 4 and 5 is 2. In the second query, the LCA of nodes 4 and 3 is 1, and in the third query the LCA of nodes 5 and 3 is also 1.","solution":"from collections import defaultdict, deque class Tree: def __init__(self, n): self.n = n self.adj = defaultdict(list) self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.LCA = [[-1] * 20 for _ in range(n + 1)] def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def bfs(self, root): queue = deque([root]) self.parent[root] = root self.depth[root] = 0 while queue: node = queue.popleft() for neighbor in self.adj[node]: if self.parent[neighbor] == -1: self.parent[neighbor] = node self.depth[neighbor] = self.depth[node] + 1 queue.append(neighbor) def build_LCA(self): for i in range(1, self.n + 1): self.LCA[i][0] = self.parent[i] for j in range(1, 20): for i in range(1, self.n + 1): if self.LCA[i][j-1] != -1: self.LCA[i][j] = self.LCA[self.LCA[i][j-1]][j-1] def get_LCA(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] for i in range(20): if (diff >> i) & 1: u = self.LCA[u][i] if u == v: return u for i in range(19, -1, -1): if self.LCA[u][i] != self.LCA[v][i]: u = self.LCA[u][i] v = self.LCA[v][i] return self.parent[u] def find_lcas(n, edges, queries): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) tree.bfs(1) tree.build_LCA() results = [] for u, v in queries: results.append(tree.get_LCA(u, v)) return results"},{"question":"You have been given a sequence of N distinct integers. Your task is to determine the length of the longest subsequence where the elements of the subsequence are prime numbers that can be arranged in increasing order. A subsequence is derived by deleting some or no elements from the original sequence without rearranging the order of the remaining elements. A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself. Input: - The input consists of two lines. - The first line contains a single integer N (1 ≤ N ≤ 1000), the length of the sequence. - The second line contains N distinct integers separated by spaces, representing the sequence. Each integer x (1 ≤ x ≤ 104). Output: - Output a single integer, the length of the longest subsequence of primes in increasing order. Examples: 1. Input: ``` 10 3 10 7 9 11 4 5 2 8 13 ``` Output: ``` 4 ``` Explanation: The longest subsequence of prime numbers in increasing order is [3, 7, 11, 13]. 2. Input: ``` 6 16 36 12 18 19 37 ``` Output: ``` 2 ``` Explanation: The longest subsequence of prime numbers in increasing order is [19, 37].","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def longest_prime_subsequence(sequence): prime_sequence = [num for num in sequence if is_prime(num)] if not prime_sequence: return 0 n = len(prime_sequence) dp = [1] * n for i in range(1, n): for j in range(i): if prime_sequence[j] < prime_sequence[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(n, sequence): return longest_prime_subsequence(sequence)"},{"question":"Andrey enjoys solving combinatorial puzzles. He recently stumbled upon a puzzle involving sequences of integers. The puzzle is described as follows: A sequence of integers is given, where each integer represents the height of a person standing in a line. Andrey needs to find all \\"mountain peaks\\" in the sequence. A \\"mountain peak\\" is defined as an element that is strictly higher than its immediate neighbors. For each test case, Andrey is given a sequence of lengths ranging between 2 and 100,000. Your task is to help Andrey by writing a function to identify all \\"mountain peaks\\" in the sequence and their respective positions. Two elements are considered immediate neighbors if they are adjacent in the sequence. The first line of the input contains an integer t (1 ≤ t ≤ 10), the number of test cases. Each test case starts with an integer n (2 ≤ n ≤ 100,000) denoting the length of the sequence followed by n integers a_i (1 ≤ a_i ≤ 1,000,000) representing the heights in the sequence. For each test case, output the number of mountain peaks followed by the 1-based indices of these peaks in the sequence. # Example: **Input:** ``` 2 5 1 3 2 4 1 7 2 1 4 6 5 3 2 ``` **Output:** ``` 2 2 4 1 4 ``` # Explanation: In the first test case, heights are [1, 3, 2, 4, 1]. The elements at position 2 (height 3) and position 4 (height 4) are mountain peaks. Therefore, there are 2 peaks at positions 2 and 4. In the second test case, heights are [2, 1, 4, 6, 5, 3, 2]. The element at position 4 (height 6) is the only mountain peak, so the output is 1 peak at position 4.","solution":"def find_mountain_peaks(test_cases): results = [] for case in test_cases: n, heights = case peaks = [] for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks.append(i + 1) # 1-based index results.append((len(peaks), peaks)) return results def parse_input(input_text): lines = input_text.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) heights = list(map(int, lines[index + 1].split())) test_cases.append((n, heights)) index += 2 return test_cases def format_output(results): output_lines = [] for result in results: output_lines.append(str(result[0])) if result[0] > 0: output_lines.append(\\" \\".join(map(str, result[1]))) return \\"n\\".join(output_lines)"},{"question":"A large shipment of products has arrived at the warehouse, and each product needs to be assigned a set of unique serial numbers. The warehouse manager wants to organize the distribution of serial numbers to ensure that the serial numbers for all products are consecutive and no numbers are skipped. You are given an integer array `products` where `products[i]` represents the number of serial numbers required for the `i`-th product. You need to assign serial numbers to each product such that: - The serial numbers assigned to each product are consecutive. - The serial numbers for each product start immediately after the serial numbers for the previous product. For example, if the `products` array is `[3, 2, 5]`, the first product should get serial numbers `1, 2, 3`, the second product should get serial numbers `4, 5`, and the third product should get serial numbers `6, 7, 8, 9, 10`. Write a function `generate_serial_numbers(products)` that generates a dictionary mapping each product index to its assigned serial numbers. # Input - An integer array `products` of length `n` (1 ≤ n ≤ 100). Each element `products[i]` is an integer representing the number of serial numbers required for the `i`-th product. - Elements of `products` are integers between 1 and 100 inclusive. # Output - A dictionary where the keys are the indices of the products (0-based) and the values are lists of assigned serial numbers. # Example ```python def generate_serial_numbers(products): serial_mapping = {} current_serial = 1 for i, count in enumerate(products): serial_mapping[i] = list(range(current_serial, current_serial + count)) current_serial += count return serial_mapping # Example products = [3, 2, 5] print(generate_serial_numbers(products)) # Output: {0: [1, 2, 3], 1: [4, 5], 2: [6, 7, 8, 9, 10]} ``` # Note - Ensure that your function works efficiently for all constraints. - You can assume that the initial serial number starts at 1 and increments consecutively.","solution":"def generate_serial_numbers(products): serial_mapping = {} current_serial = 1 for i, count in enumerate(products): serial_mapping[i] = list(range(current_serial, current_serial + count)) current_serial += count return serial_mapping"},{"question":"Given an array of integers, you need to determine the minimum number of operations required to make all the array elements equal. You are allowed to perform the following operation as many times as needed: Choose any two distinct elements from the array and replace one of them with their greatest common divisor (GCD). The first line of the input contains an integer n (1 ≤ n ≤ 1000) representing the number of elements in the array. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the elements of the array. Print a single integer - the minimum number of operations required to make all elements equal. If it is not possible to make all elements equal, print -1. Example: Input: 5 4 8 16 32 64 Output: 4 Explanation: You can follow these steps: 1. Replace 4 with gcd(4, 8) = 4 (no change) 2. Replace 16 with gcd(16, 4) = 4 3. Replace 32 with gcd(32, 4) = 4 4. Replace 64 with gcd(64, 4) = 4 Now, all elements are equal to 4. The number of operations is 4.","solution":"import math def min_operations_to_equal_elements(arr): Returns the minimum number of operations required to make all elements in the array equal by replacing any two distinct elements with their GCD. If it\'s not possible to make all elements equal, returns -1. n = len(arr) if n == 0: return -1 # Calculate the GCD of the entire array array_gcd = arr[0] for i in range(1, n): array_gcd = math.gcd(array_gcd, arr[i]) # If the GCD of the entire array is 1, it\'s impossible to make all elements equal if array_gcd != 1: operations = 0 for i in range(n): if arr[i] != array_gcd: operations += 1 return operations else: return -1"},{"question":"You are given a binary matrix with n rows and m columns (an n times m matrix) consisting of 0s and 1s. The task is to make the matrix homogeneous by performing the minimum number of operations, where each operation allows you to select any submatrix and flip all elements inside it (change all 0s to 1s and all 1s to 0s). A matrix is considered homogeneous if all elements are equal (either all elements are 0 or all elements are 1). Your task is to determine the minimum number of operations needed to make the matrix homogeneous. The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns of the matrix. The next n lines contain m integers each (either 0 or 1) — the elements of the matrix. Output a single integer — the minimum number of operations needed to make the matrix homogeneous. **Example:** Input: ``` 3 4 1 0 0 1 1 0 0 1 0 1 1 0 ``` Output: ``` 2 ``` Explanation: One possible sequence of operations is: flip the submatrix from (1,2) to (3,3), and then flip the entire matrix which changes all elements to 0s.","solution":"def min_operations_to_homogeneous(n, m, matrix): Returns the minimum number of operations needed to make the matrix homogeneous. counts = [0, 0] # Count the number of 0s and 1s in the matrix for row in matrix: for cell in row: counts[cell] += 1 return min(counts)"},{"question":"Ralph and Sarah are working on a new project involving a magical grid of size n × m. This grid is full of enchanted tiles, represented as a 2D array. Each tile has a certain energy level, represented by a non-negative integer. Ralph and Sarah have figured out that special paths exist in this grid which maximize the collection of energy when moving from the top-left corner to the bottom-right corner. A valid path can only move right or down at each step. The challenge is to find such a path that collects the maximum possible energy and to return the path coordinates. If there are multiple paths with the same maximum energy, any one of them can be returned. Your task is to write a program that computes the maximum energy that can be collected and outputs the corresponding path. The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 100), indicating the dimensions of the grid. The following n lines each contain m space-separated integers, representing the energy levels of the tiles in the grid. Output the maximum possible energy that can be collected, followed by the path coordinates in the form of (x, y) pairs starting from (1, 1) to (n, m). # Example Input 3 3 1 2 3 4 5 6 7 8 9 # Example Output 29 (1, 1) (2, 1) (3, 1) (3, 2) (3, 3) The program should help Ralph and Sarah traverse through the magical grid to collect the maximum energy efficiently.","solution":"def max_energy_path(n, m, grid): # Create a dp table to store the maximum energy collectable till each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Backtrack to find the path path = [] x, y = n-1, m-1 while x > 0 or y > 0: path.append((x+1, y+1)) if x == 0: y -= 1 elif y == 0: x -= 1 else: if dp[x-1][y] > dp[x][y-1]: x -= 1 else: y -= 1 path.append((1, 1)) path.reverse() return dp[n-1][m-1], path"},{"question":"In a certain programming competition, the contestants are given a task to develop a code that efficiently counts the number of distinct substrings of a given string. The count should consider substrings of all possible lengths, including the string itself, individual characters, and all intermediate substrings. For example, consider the string \\"abc\\": - The distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\" - The total number of distinct substrings is 6 Your task is to write a program that, given a string, returns the total number of distinct substrings. The first and only line of input contains a string S (1 <= |S| <= 1000) — the string for which the number of distinct substrings should be calculated. Print one integer — the number of distinct substrings in the given string. # Example Input ``` abc ``` Output ``` 6 ``` Input ``` aaa ``` Output ``` 3 ``` # Note: In the second example, \\"aaa\\", the distinct substrings are: \\"a\\", \\"aa\\", \\"aaa\\".","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) # Example usage if __name__ == \\"__main__\\": input_string = input().strip() print(count_distinct_substrings(input_string))"},{"question":"There is an island kingdom with several interconnected cities. The king wants to construct roads such that every city in the kingdom is accessible from any other city. He also wants to minimize the total cost of road construction. You are provided with a map of the kingdom. The map consists of n cities and m possible roads that can be built among those cities. Each road connects two distinct cities and has a certain cost to construct. Your task is to help the king find the minimum total cost required to ensure that every city is accessible from any other city in the kingdom. The first line contains two integers n and m (1 leq n leq 1000, 0 leq m leq 100,000) — the number of cities and the number of possible roads, respectively. Each of the next m lines contains three integers u, v, and c (1 leq u, v leq n, u neq v, 1 leq c leq 1,000,000) — the two cities the road connects and the cost to construct that road. Output a single integer: the minimum total cost required to ensure that the entire kingdom is connected. If it\'s not possible to connect all cities, output \\"IMPOSSIBLE\\". In the first sample, the minimum cost to connect all cities is 3. In the second sample, it\'s impossible to connect all cities, so the output is \\"IMPOSSIBLE\\".","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): rootx = find(parent, x) rooty = find(parent, y) if rootx != rooty: if rank[rootx] > rank[rooty]: parent[rooty] = rootx elif rank[rootx] < rank[rooty]: parent[rootx] = rooty else: parent[rooty] = rootx rank[rootx] += 1 def minimum_cost_to_connect(n, m, roads): if n == 1: return 0 roads.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n total_cost = 0 edges_used = 0 for road in roads: u, v, cost = road rootu = find(parent, u - 1) rootv = find(parent, v - 1) if rootu != rootv: union(parent, rank, rootu, rootv) total_cost += cost edges_used += 1 if edges_used == n - 1: return total_cost return \\"IMPOSSIBLE\\""},{"question":"In Chef\'s kitchen, there are n types of dishes. Each dish can be prepared using a specific recipe, which requires certain ingredients in particular quantities. Chef has m different ingredients in his pantry. Given the maximum quantity of each ingredient available, determine if Chef can prepare exactly k different types of dishes. More formally, Chef has m ingredients, and for each dish type, you know the quantity needed of each ingredient. Determine if it\'s possible to select exactly k distinct dishes such that all necessary ingredients for these dishes can be found in sufficient quantity in Chef\'s pantry. The input consists of multiple lines: - The first line contains three integers n, m, and k where n is the number of different types of dishes, m is the number of different ingredients, and k is the number of dishes Chef wants to prepare (1 ≤ n, k ≤ 1000, 1 ≤ m ≤ 100). - The second line contains m integers, where the i-th integer represents the quantity of the i-th ingredient available in the pantry (1 ≤ quantity ≤ 100000). - The next n lines each contain m integers. The j-th integer in the i-th line represents the quantity of the j-th ingredient required to prepare the i-th type of dish (0 ≤ required quantity ≤ 1000). Output \\"YES\\" if it\'s possible to prepare exactly k dishes with the available ingredients. Otherwise, print \\"NO\\". Example: Input: 5 4 3 10 10 10 10 2 0 1 1 3 4 0 0 0 2 2 3 1 0 0 1 4 1 4 0 Output: YES Explanation: Chef can prepare the third dish (0 2 2 3), the fourth dish (1 0 0 1), and the first dish (2 0 1 1) using the available quantities of the ingredients. Hence, it is possible to prepare exactly 3 types of dishes and the output is \\"YES\\".","solution":"from itertools import combinations def can_prepare_k_dishes(n, m, k, pantry, dishes): Determines if exactly k distinct dishes can be prepared with the given ingredients in the pantry. Args: n (int): The number of different types of dishes. m (int): The number of different ingredients. k (int): The number of different dishes to prepare. pantry (list[int]): List of available quantity of each ingredient. dishes (list[list[int]]): List of lists representing the quantity of each ingredient needed for each dish. Returns: str: \\"YES\\" if exactly k dishes can be prepared, otherwise \\"NO\\". for combo in combinations(range(n), k): if feasible_combination(combo, pantry, dishes): return \\"YES\\" return \\"NO\\" def feasible_combination(combo, pantry, dishes): Checks if the given combination of dishes can be made with the available pantry stock. Args: combo (tuple[int]): Indices of selected dishes. pantry (list[int]): Available quantity of each ingredient. dishes (list[list[int]]): The ingredient requirements for each dish. Returns: bool: True if the combination can be prepared, False otherwise. required = [0] * len(pantry) for dish_index in combo: for ingredient_index in range(len(pantry)): required[ingredient_index] += dishes[dish_index][ingredient_index] for idx in range(len(pantry)): if required[idx] > pantry[idx]: return False return True"},{"question":"Given an array of integers arr and a positive integer k, you need to determine if it is possible to split the array into k consecutive subarrays such that each subarray has an equal sum. More formally, you need to find if the array can be divided into k non-empty contiguous subarrays arr[1], arr[2], ..., arr[k] such that: - The sum of elements in arr[i] is equal to the sum of elements in arr[j] for all 1 ≤ i, j ≤ k. The first line of input contains an integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the size of the array and the number k, respectively. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000) — the array elements. For each test case, print \\"YES\\" (without quotes) if it is possible to split the array into k consecutive subarrays with equal sums, otherwise print \\"NO\\" (without quotes). **Input:** ``` 2 6 3 2 2 2 2 2 2 6 2 1 2 3 4 5 6 ``` **Output:** ``` YES NO ``` **Explanation:** In the first test case, the array can be split into three subarrays [2, 2], [2, 2], and [2, 2] with equal sums. In the second test case, the array cannot be split into 2 subarrays with equal sums.","solution":"def can_split_into_consecutive_subarrays(t, test_cases): Determines if it\'s possible to split arrays into k consecutive subarrays with equal sum. Parameters: t (int): Number of test cases. test_cases (list): List of tuples containing n, k, and the array for each test case. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for (n, k, arr) in test_cases: total_sum = sum(arr) # Check if the total sum can be evenly divided by k if total_sum % k != 0: results.append(\\"NO\\") continue target_sum = total_sum // k current_sum, subarray_count = 0, 0 for num in arr: current_sum += num if current_sum == target_sum: subarray_count += 1 current_sum = 0 if subarray_count == k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a galaxy far, far away, there are p planets and each planet enhances the ability of a spaceship by a certain power level. A spaceship can visit a contiguous sequence of planets to collect the maximum total power from those planets. However, due to restricted resources, the spaceship can visit at most k timespans and sum up the maximum power from those non-overlapping visits. Your task is to find out the maximum power the spaceship can collect. The first line of the input contains two integers p (1 ≤ p ≤ 2000), the number of planets, and k (1 ≤ k ≤ 1000), the maximum number of non-overlapping visits allowed. The second line contains p integers a1, a2, ..., ap (-10^6 ≤ ai ≤ 10^6), representing the power levels of the planets. Output one integer: the maximum power the spaceship can collect by visiting at most k timespans. Example: Input: 6 2 -1 2 3 -2 5 -3 Output: 10 Explanation: In this example, the spaceship visits the planets in two intervals [2, 3] and [5] to collect a maximum power of 2+3+5 = 10.","solution":"def max_power(p, k, power_levels): import heapq def maxSubArray(nums): max_cur = max_global = nums[0] for num in nums[1:]: max_cur = max(num, max_cur + num) if max_cur > max_global: max_global = max_cur return max_global n = len(power_levels) dp = [[float(\'-inf\')] * (k + 1) for _ in range(n + 1)] dp[0][0] = 0 for i in range(1, n + 1): dp[i][0] = 0 for j in range(1, k + 1): for i in range(j, n + 1): for x in range(i): dp[i][j] = max(dp[i][j], dp[x][j - 1] + maxSubArray(power_levels[x:i])) return max(dp[n]) def main(): import sys input = sys.stdin.read data = input().split() p = int(data[0]) k = int(data[1]) power_levels = list(map(int, data[2:])) result = max_power(p, k, power_levels) print(result)"},{"question":"In a city, there are several interconnected districts. Each district has a certain number of access roads connecting it to other districts. Each access road has a congestion score associated with it, indicating the traffic conditions on that road. The mayor of the city wants to minimize the overall congestion in the city by assigning traffic officers to certain access roads. Each traffic officer can control one access road, effectively reducing its congestion score to zero. Given the city\'s road network and the number of traffic officers available, determine the minimum possible total congestion score that can be achieved. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) – the number of districts and the number of access roads between the districts, respectively. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, 0 ≤ c ≤ 1000), indicating there is a road between district u and district v with a congestion score of c. The last line contains an integer k (0 ≤ k ≤ m) – the number of traffic officers available. Print the minimum possible total congestion score that can be achieved after assigning traffic officers optimally. In the first sample, one of the possible ways to minimize the total congestion score is to assign the traffic officer to the access road with the highest congestion score. In the second sample, all traffic officers can be utilized to reduce the most congested roads to zero, achieving the smallest possible total congestion score.","solution":"def min_total_congestion(n, m, roads, k): Calculate the minimum possible total congestion score. Args: n (int): number of districts m (int): number of roads roads (list): list of tuples representing the roads (u, v, c) k (int): number of traffic officers Returns: int: minimum possible total congestion score congestion_scores = [c for u, v, c in roads] # Sort congestion scores in descending order to target highest scores first congestion_scores.sort(reverse=True) # If k >= m, it means we can assign traffic officers to all roads if k >= m: return 0 # Remove the top k congested roads for i in range(k): congestion_scores[i] = 0 # Calculate the remaining congestion return sum(congestion_scores)"},{"question":"Petya loves reading, but he is very particular about what books to read. He has a list of n books, each book has a start time and an end time. A book can only be read from its start time to its end time. Petya likes to read as many books as possible, but he cannot read more than one book at the same time. Thus he wants to find the maximum number of non-overlapping books he can read. Two books overlap if their reading intervals intersect, that is, at some point Petya would be reading two books at the same time if he chose those two. Given the start and end times of all books, find the maximum number of non-overlapping books Petya can read. The input contains: - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of books. - The following n lines each contain two integers si and ei (0 ≤ si < ei ≤ 1000) — the start and end times of the i-th book. The output should be a single integer — the maximum number of non-overlapping books Petya can read. Sample input: ``` 3 1 3 2 5 4 6 ``` Sample output: ``` 2 ``` In the sample input, Petya can read the books from [1, 3] and [4, 6], thus making the maximum number of non-overlapping books he can read equal to 2.","solution":"def max_non_overlapping_books(n, intervals): Returns the maximum number of non-overlapping books Petya can read. Args: n: int - number of books intervals: list of tuples - list containing the start and end times of books Returns: int - maximum number of non-overlapping books # Sort intervals by end time intervals.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in intervals: if start >= last_end_time: # Check if the current book does not overlap count += 1 last_end_time = end return count # Example usage: n = 3 intervals = [(1, 3), (2, 5), (4, 6)] print(max_non_overlapping_books(n, intervals)) # Output: 2"},{"question":"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i < j < k and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. The first line of the input contains an integer n (3 <= n <= 3000), the length of the array. The second line contains n integers nums[i] (−10^5 <= nums[i] <= 10^5), the elements of the array. Output all unique triplets in the array which gives the sum of zero. Each triplet should be printed in a new line in lexicographical order. Example: Input: 6 -1 0 1 2 -1 -4 Output: -1 -1 2 -1 0 1","solution":"def three_sum(nums): Returns all unique triplets in the array which gives the sum of zero. nums.sort() n = len(nums) result = [] for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return result"},{"question":"Given two strings s_1 and s_2, both of length n, you are allowed to perform the following operation any number of times: 1. Pick any substring of length k from s_1 and any substring of length k from s_2, and check if they are equal. Your task is to determine the maximum length of k such that there exists at least one substring of length k in s_1 that matches a substring of length k in s_2. The first line of input contains a single integer n (1 le n le 10^5) — the length of the strings s_1 and s_2. The second line contains the string s_1. The third line contains the string s_2. Output a single integer, the maximum value of k for which at least one substring of length k exists in both strings and is identical. # Example **Input:** ``` 8 abcdefgh abcfghxy ``` **Output:** ``` 3 ``` **Explanation:** The longest common substring between s_1 and s_2 is \\"abc\\" of length 3. Hence, the maximum value of k is 3.","solution":"def find_max_k(n, s1, s2): Returns the maximum length of k such that there exists at least one substring of length k in both string s1 and s2 that is the same. def has_common_substring(length): substrings = set() for i in range(n - length + 1): substrings.add(s1[i:i+length]) for i in range(n - length + 1): if s2[i:i+length] in substrings: return True return False left, right = 0, n while left < right: mid = (left + right + 1) // 2 if has_common_substring(mid): left = mid else: right = mid - 1 return left"},{"question":"You are given a list of integers representing the heights of various buildings. From any building, you can either move to the next building on its right or from the first building to the last building (giving the array a circular nature). You wish to find out the maximum difference in heights between any two consecutive buildings you can encounter starting from any building and moving to any other building circularly. The first line contains an integer, n (2 leq n leq 10^5) — the number of buildings. The second line contains n integers, h_i (1 leq h_i leq 10^4) — representing the heights of the buildings. Output a single integer — the maximum height difference between any two consecutive buildings encountered in a circular fashion. Example: ``` Input: 5 8 3 7 2 9 Output: 7 ``` Explanation: The maximum height difference is between the buildings with heights 9 and 2.","solution":"def max_height_difference(n, heights): Returns the maximum height difference between any two consecutive buildings in a circular manner. max_diff = 0 for i in range(n): diff = abs(heights[i] - heights[(i + 1) % n]) max_diff = max(max_diff, diff) return max_diff"},{"question":"Given a sequence of tasks, Jenny needs to schedule them in such a way that she maximizes the number of tasks that can be completed. Each task has a start time and an end time. Jenny can only work on one task at a time, and she can start a new task only after finishing the previous one. You are given a list of tasks where each task is represented by a pair of integers ([s, e]) denoting the start and end time of the task. Write a program to determine the maximum number of tasks Jenny can complete. Input: - The first line contains an integer (n) ((1 leq n leq 10^5)), the number of tasks. - The next (n) lines each contain two integers (s) and (e) ((0 leq s < e leq 10^9)) representing the start and end times of the tasks. Output: - Print a single integer representing the maximum number of tasks Jenny can complete. Example: Input: ``` 5 1 2 3 4 0 6 5 7 8 9 ``` Output: ``` 4 ``` Explanation: Jenny can complete the tasks in the following order: ((1, 2)), ((3, 4)), ((5, 7)), and ((8, 9)). This way, she can complete 4 tasks in total.","solution":"def max_tasks(n, tasks): Determines the maximum number of non-overlapping tasks that can be completed. Parameters: n (int): The number of tasks. tasks (list of tuples): A list of tuples where each tuple contains two integers (s, e) representing the start and end times of a task. Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end time sorted_tasks = sorted(tasks, key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 # The end time of the last selected task end_time = 0 for s, e in sorted_tasks: if s >= end_time: count += 1 end_time = e return count"},{"question":"You are given an integer matrix `grid` of size `n x m` where each element represents the height of a building at that position. You need to determine the maximum possible view that a person standing on any building can have. The view of a building at position `(i, j)` is defined as the maximum height difference between the height of the building at `(i, j)` and any other building in the grid. Your task is to find the maximum view possible and the position of the building that provides this view. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the grid. The following n lines contain m integers each, where the j-th integer in the i-th line represents the height `hij` (1 ≤ hij ≤ 10000) of the building at position (i, j). Output the maximum view possible and the position (i, j) that provides this view. If there are multiple positions with the same maximum view, output the position with the smallest row number, and if there are still multiple positions, output the one with the smallest column number. Example: Input: 3 3 1 3 4 2 5 6 7 8 9 Output: 8 2 2 Explanation: The maximum view is achieved at the building at position (2, 2) with a height of 5. The maximum height difference here is 5 - 1 = 8, which is the highest possible difference in the grid.","solution":"def max_view(grid): This function returns the maximum possible view and the position of the building that provides this view. :param grid: List[List[int]], n x m matrix representing the heights of buildings :return: Tuple(int, Tuple(int, int)), maximum view possible and position n = len(grid) m = len(grid[0]) # Find the min and max height in the grid min_height = float(\'inf\') max_height = float(\'-inf\') for row in grid: for height in row: if height < min_height: min_height = height if height > max_height: max_height = height max_view = max_height - min_height # Find the position of the building that provides this view for i in range(n): for j in range(m): if grid[i][j] == min_height: return (max_view, (i, j)) # Example usage grid = [ [1, 3, 4], [2, 5, 6], [7, 8, 9] ] print(max_view(grid))"},{"question":"You are given three integers a, b, and c. You need to find the number of ways you can distribute a cookies, b candies, and c chocolates to two children such that each child gets at least one item of each type. The input consists of a single line containing three integers a, b, and c (1 leq a, b, c leq 10^9). The output should be a single integer which is the number of valid ways to distribute the items to the children. Consider the following example: 1. Given a = 2, b = 2, and c = 2, the valid distributions are: - Child 1: 1 cookie, 1 candy, 1 chocolate - Child 2: 1 cookie, 1 candy, 1 chocolate Hence, the number of valid ways is 1. Print the number of valid ways to distribute the items. You can print your answer modulo 10^9 + 7.","solution":"def num_ways_to_distribute(a, b, c): MOD = 10**9 + 7 if a <= 0 or b <= 0 or c <= 0: return 0 # Each child should get at least one item of each type # So the only way is: each child gets 1 item from each type number_of_ways = 1 return number_of_ways % MOD"},{"question":"A group of explorers is venturing into a dense forest and they need to set up a series of checkpoints to ensure everyone follows the planned route. To set up the checkpoints efficiently, they need to consider the elevation differences between consecutive checkpoints, as climbing up and down consumes different amounts of energy. The route can be represented as a series of `n` checkpoints, each with a specific elevation. The energy cost to move from one checkpoint to another is directly proportional to the absolute difference in their elevations. Given the energy expenditure coefficients for climbing up and climbing down, the explorers need to calculate the minimum total energy required to traverse the entire route from the first checkpoint to the last. # Input: - The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of checkpoints. - The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1,000,000) — the elevations of the checkpoints in the order they must be visited. - The third line contains two integers `u` and `d` (1 ≤ u, d ≤ 1,000,000) — the energy expenditure coefficients for climbing up and climbing down, respectively. # Output: Print a single integer — the minimum total energy required to traverse the entire route from the first checkpoint to the last. # Example: Input: ``` 5 10 20 15 25 10 3 2 ``` Output: ``` 60 ``` # Explanation: The explorers start at elevation 10 and move through checkpoints with elevations 20, 15, 25, and finally 10. The energy costs for each move are as follows: - From elevation 10 to 20: (20 - 10) * 3 = 30 (climbing up) - From elevation 20 to 15: (20 - 15) * 2 = 10 (climbing down) - From elevation 15 to 25: (25 - 15) * 3 = 30 (climbing up) - From elevation 25 to 10: (25 - 10) * 2 = 30 (climbing down) Total energy cost = 30 + 10 + 30 + 30 = 100","solution":"def calculate_minimum_energy(n, elevations, up_coefficient, down_coefficient): Calculate the minimum total energy required to traverse the entire route based on the elevations and energy coefficients for climbing up and down. :param n: int - Number of checkpoints :param elevations: List[int] - List of elevations at the checkpoints :param up_coefficient: int - Energy expenditure coefficient for climbing up :param down_coefficient: int - Energy expenditure coefficient for climbing down :return: int - Minimum total energy required total_energy = 0 for i in range(n - 1): elevation_diff = elevations[i + 1] - elevations[i] if elevation_diff > 0: # Climbing up total_energy += elevation_diff * up_coefficient else: # Climbing down total_energy += -elevation_diff * down_coefficient return total_energy"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a unique identifier from 1 to n. The graph might be disconnected. A weakly connected component of an undirected graph is a maximal subgraph in which any two vertices are connected by a path. Each query is of one of the following two types: 1. **Add Edge (u, v)**: Add an undirected edge between nodes u and v. 2. **Remove Edge (u, v)**: Remove the undirected edge between nodes u and v. After processing each query, determine the number of weakly connected components in the graph. The first line contains two integers n (1 leq n leq 100,000) and m (1 leq m leq 200,000) - the number of nodes and the number of queries respectively. The next m lines each contain one query in the format (x, u, v) where: - x is the query type (1 for adding an edge or 2 for removing an edge). - u and v (1 leq u, v leq n, u neq v) are the nodes to be connected or disconnected. Output m integers. The i-th integer should be the number of weakly connected components after processing the i-th query.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n self.component_count = n def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 self.component_count -= 1 def connected(self, u, v): return self.find(u) == self.find(v) def process_queries(n, queries): uf = UnionFind(n) edges = set() results = [] for type, u, v in queries: u -= 1 v -= 1 if type == 1: if (u, v) not in edges and (v, u) not in edges: uf.union(u, v) edges.add((u, v)) elif type == 2: if (u, v) in edges: edges.remove((u, v)) uf = UnionFind(n) for u_, v_ in edges: uf.union(u_, v_) results.append(uf.component_count) return results"},{"question":"Alice is moving to a new house and needs to pack her belongings into boxes. She has a list of items, each with a specific weight, and an array of boxes, each with a maximum weight capacity. Alice wants to ensure that she can pack all her items into as few boxes as possible, while not exceeding the capacity of any box. Each item must be placed in exactly one box. Alice can pack the items into the boxes in any order, but once an item is placed in a box, it cannot be moved to another box. She does not need to fill every box to its maximum capacity, but each box cannot exceed its weight limit. You need to determine the minimum number of boxes required to pack all of Alice\'s items. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100) — the number of items and the number of boxes, respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the items. The third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 1000) — the capacities of the boxes. Output a single integer — the minimum number of boxes needed to pack all items. If it is not possible to pack all the items into the available boxes, print -1. # Example **Input:** ``` 5 3 200 300 400 500 600 1000 1100 1200 ``` **Output:** ``` 2 ``` **Explanation:** Alice can use two boxes: - Box 1: 200 + 300 + 500 = 1000 - Box 2: 400 + 600 = 1000 Thus, she needs a minimum of 2 boxes to pack all the items.","solution":"def min_boxes(n, m, weights, capacities): weights.sort(reverse=True) capacities.sort(reverse=True) box_count = 0 i, j = 0, 0 while i < n: if j >= m: return -1 current_capacity = capacities[j] while i < n and weights[i] <= current_capacity: current_capacity -= weights[i] i += 1 box_count += 1 j += 1 return box_count"},{"question":"You are given a string consisting of lowercase Latin letters and digits. You want to reorder its characters in such a way that: 1. All alphabetical characters appear before all digit characters. 2. The alphabetical characters form the smallest lexicographical string possible. 3. The digit characters are in non-increasing order. For example, given the string \\"bca321\\", you can reorder it as \\"abc321\\". The first line of input contains a single integer t (1 le t le 1000) — the number of test cases. For each test case, input a string of length n (1 le n le 1000) containing lowercase Latin characters and digits. Output the reordered string for each test case on a new line. **Example**: Input: 3 bca321 abc123 z1y2x9 Output: abc321 abc321 xyz921","solution":"def reorder_string(s): Reorders the input string such that all alphabetical characters appear before all digit characters, the alphabetical characters form the smallest lexicographical string possible, and the digit characters are in non-increasing order. Arguments: s -- input string consisting of lowercase Latin letters and digits Returns: Reordered string according to the above criteria letters = sorted([c for c in s if c.isalpha()]) digits = sorted([c for c in s if c.isdigit()], reverse=True) return \'\'.join(letters + digits)"},{"question":"Given an undirected graph represented by an adjacency list, your task is to determine the number of connected components in the graph. A connected component is a maximal set of nodes such that there is a path between any two nodes in this set. The input starts with two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of nodes and m is the number of edges in the graph. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an undirected edge between nodes u and v. Output a single integer representing the number of connected components in the graph. Example: Input: 6 5 1 2 2 5 3 4 4 6 5 1 Output: 2 In the example, there are two connected components, one containing the nodes {1, 2, 5} and the other containing the nodes {3, 4, 6}.","solution":"def num_connected_components(n, m, edges): Returns the number of connected components in an undirected graph. :param n: int, number of nodes :param m: int, number of edges :param edges: list of tuples, representing the edges in the graph :return: int, number of connected components def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) graph = {i: [] for i in range(1, n+1)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() num_components = 0 for node in range(1, n+1): if node not in visited: visited.add(node) dfs(node, visited, graph) num_components += 1 return num_components"},{"question":"Grace and Sam are playing a game of stones. The game starts with n piles of stones, where the i-th pile has `a_i` stones. The players take turns, Grace starting first. On each turn, the player must pick up a positive number of stones from one of the piles and redistribute them in the following manner: place one stone into each of the subsequent piles, wrapping around to the first pile if necessary, until all stones picked are redistributed. The player who cannot make a move loses the game. Grace and Sam are both playing optimally. Determine if Grace will win the game. The input consists of two lines: - The first line contains an integer n (`1 ≤ n ≤ 10^5`), the number of piles. - The second line contains n integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 10^9`), where `a_i` indicates the number of stones in the i-th pile. Print \\"Grace\\" if Grace will win the game, or \\"Sam\\" if Sam will win the game.","solution":"def determine_winner(n, piles): Determines the winner of the game of stones. Args: n (int): number of piles. piles (List[int]): list of integers where each element represents the number of stones in the respective pile. Returns: str: \\"Grace\\" if Grace will win, \\"Sam\\" otherwise. # Since the piles are individual, we can calculate the total number of stones total_stones = sum(piles) # If the sum of stones is odd, Grace wins. If even, Sam wins. if total_stones % 2 == 0: return \\"Sam\\" else: return \\"Grace\\""},{"question":"Given an array of integers, there are special elements defined as follows: 1. An element is considered special if it is greater than the sum of the previous two elements in the array. Write a function `count_special_elements(arr)` that takes an array of integers `arr` and returns the number of special elements in the array. If an index has fewer than two previous elements, it won\'t be considered. # Input - Since this problem involves an array, there is no specific input format - The length of the array `arr` is `1 ≤ n ≤ 10^5` - Each integer in the array `arr` is between `-10^9` and `10^9` # Output - Output a single integer, the count of special elements in the array. # Example ```python # Input arr = [10, 20, 5, 30, 40, 10] # Output 2 # Explanation Element arr[3] (30) is special because 30 > 10 + 20. Element arr[4] (40) is special because 40 > 20 + 5. Element arr[5] (10) is not special because 10 < 5 + 30.","solution":"def count_special_elements(arr): Returns the count of special elements in the array. An element is considered special if it is greater than the sum of the previous two elements. count = 0 for i in range(2, len(arr)): if arr[i] > arr[i-1] + arr[i-2]: count += 1 return count"},{"question":"Recently, Alice has become fascinated by a specific formation of integers known as alternating bit patterns. An alternating bit pattern is a binary string in which no two adjacent characters are the same. She has decided to explore a specific problem: determining the number of alternating bit patterns of length n that start and end with a \'1\'. A string a is considered an alternating bit pattern if for every adjacent pair of characters in the string, one is \'0\' and the other is \'1\'. For instance, \'10101\' is an alternating bit pattern, but \'11001\' is not. Given the length n, Alice wants to know how many alternating bit patterns start and end with a \'1\'. # Input The input consists of a single integer n (1 le n le 10^7) — the length of the bit pattern. # Output Print the number of alternating bit patterns of length n that start and end with a \'1\'. # Example Input 6 Output 8 Input 7 Output 8 Explanation For the first example with n = 6, the possible alternating bit patterns of length 6 that start and end with a \'1\' are: - \'101010\' - \'101110\' - \'110101\' - \'110110\' Since each string can be formed in 2 ways, multiplying by the number of variations, 2^2 = 4 * 2 = 8","solution":"def count_alternating_bit_patterns(n): if n == 1: return 0 elif n % 2 == 0: return 2 ** (n // 2) else: return 2 ** ((n // 2) + 1)"},{"question":"Given an undirected graph represented by an adjacency list, your task is to determine the number of connected components in the graph and the size of the largest connected component. A connected component is a maximal set of vertices such that there is a path between any two vertices in this set. **Input:** - The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 10^5) — the number of vertices and edges in the graph respectively. - The next m lines contain two integers each u and v (1 leq u, v leq n, u ne v) indicating there is an edge between vertices u and v. **Output:** - Print two integers: the number of connected components in the graph and the size of the largest connected component. **Example:** _Input:_ ``` 5 3 1 2 3 4 3 5 ``` _Output:_ ``` 2 3 ``` _Input:_ ``` 4 2 1 2 3 4 ``` _Output:_ ``` 2 2 ``` **Note:** In the first example, the graph has 5 vertices and 3 edges forming two connected components: {1, 2} and {3, 4, 5}. So, the number of connected components is 2, and the size of the largest component is 3. In the second example, the graph has 4 vertices and 2 edges forming two connected components: {1, 2} and {3, 4}. Thus, the number of connected components is 2, and the size of the largest component is 2.","solution":"def connected_components(n, m, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited[node] = True size = 0 while queue: curr = queue.popleft() size += 1 for neighbor in graph[curr]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) num_components = 0 max_component_size = 0 for node in range(1, n + 1): if not visited[node]: if node not in graph: num_components += 1 max_component_size = max(max_component_size, 1) visited[node] = True else: num_components += 1 component_size = bfs(node) max_component_size = max(max_component_size, component_size) return num_components, max_component_size"},{"question":"Violet loves painting, and she has an array of canvases, each with a specific size. Violet wants to paint as many canvases as possible, but she has limited paint. Each canvas requires a certain amount of paint, and Violet cannot partially paint a canvas. Help Violet maximize the number of canvases she can paint with her available paint. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of canvases Violet has. The second line contains n integers pi (1 ≤ pi ≤ 1000) — the amount of paint required for each canvas. The third line contains a single integer k (1 ≤ k ≤ 10,000) — the total amount of paint Violet has. Print a single integer — the maximum number of canvases Violet can paint with the available paint. # Example Input: ``` 4 3 6 2 5 10 ``` Output: ``` 3 ``` # Explanation In the first sample, Violet can paint the canvases requiring 2, 3, and 5 units of paint, which sums up to 10 units. This is the maximum number of canvases she can paint with the given paint amount.","solution":"def max_canvases_painted(n, paint_requirements, k): Returns the maximum number of canvases Violet can paint with the available paint. Parameters: n (int): The number of canvases. paint_requirements (list of int): The amount of paint required for each canvas. k (int): The total amount of paint available. Returns: int: The maximum number of canvases that can be painted. paint_requirements.sort() painted_count = 0 for paint in paint_requirements: if paint <= k: k -= paint painted_count += 1 else: break return painted_count"},{"question":"You are given a grid of size n×m, where each cell contains a single lowercase Latin letter. You need to determine if there is a word hidden in the grid. A word is formed by a sequence of cells such that each consecutive cell in the sequence shares at least one side (left, right, top, bottom) with the previous cell. Write a program that checks if a given word can be found in the grid, following the aforementioned rules. If the word can be found, print \\"YES\\"; otherwise, print \\"NO\\". The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters, representing the grid. The following line contains a string w of length k (1 ≤ k ≤ 100) — the word to search for in the grid. Output \\"YES\\" if the word can be found in the grid; otherwise, output \\"NO\\". **Example:** **Input:** 4 5 abear catur dogdb fishy cat **Output:** YES **Input:** 3 3 abc def ghi ace **Output:** NO","solution":"def is_word_in_grid(n, m, grid, word): This function checks if the word can be found in the grid following specified rules. def search(x, y, index): if index == len(word): return True if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != word[index] or visited[x][y]: return False visited[x][y] = True found = (search(x + 1, y, index + 1) or search(x - 1, y, index + 1) or search(x, y + 1, index + 1) or search(x, y - 1, index + 1)) visited[x][y] = False return found visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == word[0] and search(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"Bob is an avid gardener who grows various types of flowers in his wide garden. Recently, he decided to decorate his garden by arranging his flowers in a beautiful pattern. Bob has n flower beds, each positioned in a straight line and labeled from 1 to n. Each bed contains a single type of flower. Bob has m flower arrangements, each consisting of all the flowers from one contiguous segment of the flower beds. He loves symmetry and enjoys arranging flowers in segments that form palindromes. He wants to know how many of his m flower arrangements are palindromic. A flower arrangement is considered to be palindromic if it reads the same forwards and backwards. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), representing the number of flower beds and the number of flower arrangements Bob has prepared. The second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ 100), where fi represents the type of flower in the i-th flower bed. Each of the next m lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n), describing the segment [li, ri] (inclusive) of flower beds that form the i-th flower arrangement. Output an integer representing the number of palindromic flower arrangements Bob has. Example: Input: 5 3 1 2 3 2 1 1 5 2 4 3 3 Output: 2 Explanation: - The first arrangement (1 2 3 2 1) is palindromic. - The second arrangement (2 3 2) is palindromic. - The third arrangement (3) is palindromic.","solution":"def count_palindromic_arrangements(n, m, flower_types, arrangements): Returns the number of palindromic flower arrangements. :param n: Number of flower beds :param m: Number of flower arrangements :param flower_types: List of flower types in each bed :param arrangements: List of tuples representing the segments of flower beds for each arrangement :return: Number of palindromic arrangements def is_palindrome(segment): return segment == segment[::-1] palindromic_count = 0 for li, ri in arrangements: segment = flower_types[li-1:ri] # get the segment as a sublist if is_palindrome(segment): palindromic_count += 1 return palindromic_count"},{"question":"You are given a tree with `n` vertices and `n-1` edges. A tree is a connected acyclic graph. Each vertex is numbered from 1 to `n`. Your task is to find the maximum number of vertices that can be on a path from any node `u` to a different node `v`. Input: - The first line contains an integer `n` (2 ≤ n ≤ 10^5), the number of vertices. - Each of the next `n-1` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n), representing an edge between vertices `a` and `b`. Output: - A single integer, the maximum number of vertices on the longest path in the given tree. Sample Input: ``` 5 1 2 1 3 3 4 3 5 ``` Sample Output: ``` 4 ``` Explanation: In the given tree, one of the longest paths is from vertex 2 to vertex 4 which goes through (2 -> 1 -> 3 -> 4). The length of this path is 3, but it consists of 4 vertices. Hence, the output is 4.","solution":"from collections import defaultdict, deque def find_longest_path(n, edges): def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 queue = deque([start]) farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) if dist[neighbor] > max_distance: max_distance = dist[neighbor] farthest_node = neighbor return farthest_node, max_distance if n == 2: return 2 graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # Start BFS from an arbitrary node, say node 1, find farthest node from it farthest_node_from_start, _ = bfs(1) # Start BFS from the farthest node found farthest_node, max_distance = bfs(farthest_node_from_start) # Number of vertices on the longest path is max_distance + 1 return max_distance + 1"},{"question":"An online game involves hatching mythical creatures from eggs. Each egg has a specified incubation period before it hatches, and each creature has a certain rarity level associated with it. The game awards points based on the rarity level of the creature hatched. Your task is to schedule the hatching of eggs to maximize the total points within a given time frame. Each egg can be hatched in any order, but the hatching process takes the exact incubation period specified for the egg without any overlap. If two eggs are scheduled to hatch at the same time, they must be processed sequentially. Given the total time available for hatching eggs, the incubation periods, and the rarity levels of each egg, determine the maximum points achievable within the given time frame. The first line contains two integers T and n (1 ≤ T ≤ 1000, 1 ≤ n ≤ 1000) — the total time available for hatching eggs and the number of eggs. The next n lines contain two integers each ti and pi (1 ≤ ti ≤ T, 0 ≤ pi ≤ 1000) — the incubation time and the points awarded for hatching this egg. Print a single integer — the maximum points that can be achieved within the given time frame, T. Example: Input: 10 3 2 100 3 500 5 200 Output: 800 Explanation: With 10 units of time, the optimal way to maximize points is to hatch the egg with a 3 time incubation for 500 points, and the egg with a 2 time incubation for 100 points twice for a total of 800 points.","solution":"def max_points(T, n, eggs): Determines the maximum points achievable within the given time frame. Parameters: T (int): Total time available for hatching eggs. n (int): Number of eggs. eggs (list of tuples): Each tuple contains two integers (ti, pi) representing the incubation time and the points awarded for that egg. Returns: int: Maximum points achievable. # Sort the eggs by points per unit of time in descending order eggs.sort(key=lambda x: x[1] / x[0], reverse=True) total_time = 0 total_points = 0 for ti, pi in eggs: if total_time + ti <= T: total_time += ti total_points += pi return total_points"},{"question":"You are given an array of integers where a subsequence is defined as a sequence that can be derived from the array by deleting some or none of the elements without changing the order of the remaining elements. A subsequence is called a \\"wiggle\\" subsequence if the differences between successive numbers strictly alternate between positive and negative (or vice versa). The first difference (if there is one) may be either positive or negative. Write a function to find the length of the longest wiggle subsequence of an array. For example, in the array [1, 17, 5, 10, 13, 15, 10, 5, 16, 8], one longest wiggle subsequence is [1, 17, 10, 13, 10, 16, 8], and its length is 7. # Input: The input consists of: - An integer n (1 ≤ n ≤ 1000) – the length of the array. - A single line of n integers separated by spaces, representing the elements of the array. # Output: Print one integer – the length of the longest wiggle subsequence. # Examples: Example 1: **Input:** ``` 10 1 17 5 10 13 15 10 5 16 8 ``` **Output:** ``` 7 ``` Example 2: **Input:** ``` 6 1 7 4 9 2 5 ``` **Output:** ``` 6 ``` Example 3: **Input:** ``` 7 1 2 3 4 5 6 7 ``` **Output:** ``` 2 ``` In the last example, the wiggle subsequence can only alternate with two elements, e.g., [1, 2].","solution":"def longest_wiggle_subsequence(nums): if len(nums) < 2: return len(nums) up = down = 1 for i in range(1, len(nums)): if nums[i] > nums[i - 1]: up = down + 1 elif nums[i] < nums[i - 1]: down = up + 1 return max(up, down)"},{"question":"You are given a grid of size n x m consisting of cells, each with a value of either 0 or 1. A cell containing a 1 is considered a \\"mine,\\" and a cell containing a 0 is considered \\"safe.\\" Your task is to determine the maximum size of the square sub-grid without any mines. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each (either 0 or 1), representing the grid. Print a single integer — the size of the largest square sub-grid (side length) that contains no mines. **Example:** Input: ``` 4 5 1 0 0 0 0 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` In this example, the largest square sub-grid without any mines has a side length of 2. **Explanation:** The largest square that can be formed in the given grid without containing a \'1\' (mine) is: ``` 0 0 0 0 ```","solution":"def largest_square_subgrid(grid): n = len(grid) m = len(grid[0]) # Create a DP table to store the side length of the largest square ending at each position. dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 # The edge cells can only have square of size 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Square ending here is extended by min of neighboring squares max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"Alice is a collector of rare coins. She has a collection of \\"magical\\" coins, each with a special property of either adding or multiplying values. Alice wants to display her collection in a sequence such that the sum of the operation values applied to these coins equals a given value T. The magical coins come in different types. Each coin can either add its value to the total sum or multiply the current sum by its value when operated. Alice needs to find a sequence of operations on these coins such that the resulting sum matches the given target sum T, starting from an initial sum of 0. Given n magical coins, with each coin specified by its value and type (\'+\' for adding, \'*\' for multiplying), determine if it is possible to achieve the target sum T using each coin exactly once in any order. If possible, output any sequence of operations that achieves this; otherwise, print \\"IMPOSSIBLE\\". The first line of the input contains two integers n and T (1 ≤ n ≤ 1000, 1 ≤ T ≤ 10^9) — the number of coins and the target sum. The following n lines each contain a type (\'+\' or \'*\') and an integer value v (1 ≤ v ≤ 10000) representing the type and value of the coin. Output: - If it is possible to achieve the target sum T, print \\"POSSIBLE\\" followed by the sequence of operations. - Otherwise, print \\"IMPOSSIBLE\\". Example: Input: 4 13 + 3 * 2 + 1 * 4 Output: POSSIBLE + 1 + 3 * 4 * 2 Explanation: Starting with 0, the operations add 1, then add 3 (total 4), then multiply by 4 (total 16), and finally multiply by 2 (total 13).","solution":"def find_sequence(n, T, coins): Returns if it is possible to achieve target sum T with given coins and their operations, in any sequence. from itertools import permutations def apply_operations(operations): current_sum = 0 for op, val in operations: if op == \'+\': current_sum += val elif op == \'*\': current_sum *= val if current_sum > T: # Optimization: If current sum exceeds T, skip further calculations break return current_sum == T for perm in permutations(coins): if apply_operations(perm): return \\"POSSIBLEn\\" + \\"n\\".join(f\\"{op} {val}\\" for op, val in perm) return \\"IMPOSSIBLE\\" # Example usage n = 4 T = 13 coins = [(\'+\', 3), (\'*\', 2), (\'+\', 1), (\'*\', 4)] print(find_sequence(n, T, coins))"},{"question":"The Kingdom of Farland is known for its incredible infrastructure of roads that connect various towns. The kingdom is preparing for a grand festival and they need to ensure that the roads provide the best possible routes for travelers. A road network is represented as a graph with n towns and m bidirectional roads, where each road has a certain travel cost. The King wants to find the shortest paths from the capital of the kingdom (town 1) to all other towns. Your task is to help the King by calculating the shortest paths from the capital to every other town in the kingdom. Write a program that takes the number of towns n, the number of roads m, and the description of each road. Each road is described by three integers u, v, and w, which mean that there is a road between towns u and v with a travel cost of w. The program should output n integers, where the i-th integer is the minimum travel cost from the capital (town 1) to town i (or -1 if town i is not reachable from the capital). # Input - The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of towns and the number of roads. - The next m lines describe the roads. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000,000) — the two towns connected by the road and the travel cost of the road. # Output - Output n integers. For each town i (1 ≤ i ≤ n), print the minimum travel cost from the capital to town i. If town i is not reachable from the capital, print -1. # Example Input ``` 5 7 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 3 4 2 ``` Output ``` 0 2 3 5 6 ``` In the example above, the minimum travel cost from town 1 to town 1 is 0 (as it is the capital itself), to town 2 is 2 (1 --> 2, cost 2), to town 3 is 3 (1 --> 2 --> 3, cost 2 + 1 = 3), to town 4 is 5 (1 --> 2 --> 3 --> 4, cost 2 + 1 + 2 = 5), and to town 5 is 6 (1 --> 2 --> 3 --> 5, cost 2 + 1 + 3 = 6).","solution":"import heapq def shortest_path(n, m, roads): adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) distances = [float(\'inf\')] * (n + 1) distances[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for v, weight in adj[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given a 2D grid of size `n x m` (1 <= n, m <= 1000) filled with non-negative integers. You are also given `q` queries (1 <= q <= 100000). Each query consists of four integers `x1, y1, x2, y2` (1 <= x1 <= x2 <= n, 1 <= y1 <= y2 <= m), which define a subgrid. Your task is to determine the maximum value in that subgrid for each query. The first line of the input contains two integers `n` and `m`. Each of the next `n` lines contains `m` integers, representing the grid. The next line contains a single integer `q`. Each of the next `q` lines contains four integers `x1, y1, x2, y2` describing the subgrid. For each query, print a single integer, the maximum value within the specified subgrid. **Example:** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` Output: ``` 5 9 ``` Explanation: - The subgrid defined by the first query (1, 1, 2, 2) is: ``` 1 2 4 5 ``` The maximum value in this subgrid is 5. - The subgrid defined by the second query (2, 2, 3, 3) is: ``` 5 6 8 9 ``` The maximum value in this subgrid is 9.","solution":"def max_in_subgrid(n, m, grid, queries): Returns the maximum value in each subgrid defined by the queries. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): The n x m grid. queries (list of tuple of int): List of queries defined by tuples (x1, y1, x2, y2). Returns: list of int: The maximum value in each specified subgrid. results = [] for x1, y1, x2, y2 in queries: max_value = float(\'-inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if grid[i][j] > max_value: max_value = grid[i][j] results.append(max_value) return results"},{"question":"Alice is organizing a coding competition event at her school and wants to distribute participants into teams. Each team should have the same number of members, and the number of teams should be maximized. Given the number of participants and a list of their coding skill levels, Alice wants to form teams such that the difference between the highest skill level and the lowest skill level in each team is minimized. Your task is to determine the maximum number of teams that can be formed and the minimized difference in skill levels within each team. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of participants. - The second line contains n integers, s1, s2, ..., sn (1 ≤ si ≤ 10^9), the skill levels of the participants. # Output - Print two integers: the maximum number of teams that can be formed and the minimized difference in skill levels within each team. # Example Input ``` 8 1 4 3 2 5 7 8 6 ``` Output ``` 4 1 ``` # Explanation In the example, the skill levels are 1, 2, 3, 4, 5, 6, 7, 8. The maximum number of teams that can be formed is 4 with the following teams: - Team 1: [1, 2] - Team 2: [3, 4] - Team 3: [5, 6] - Team 4: [7, 8] The minimized difference in skill levels within each team is 1.","solution":"def organize_teams(n, skill_levels): Returns the maximum number of teams that can be formed and the minimized difference in skill levels within each team. Args: n (int): Number of participants. skill_levels (list of int): Coding skill levels of the participants. Returns: tuple: Maximum number of teams and minimized difference in skill levels. if n == 1: return (1, 0) # Sort the skill levels skill_levels.sort() # Initialize the difference to a large number minimized_difference = float(\'inf\') # Calculate the minimized difference for i in range(1, n): minimized_difference = min(minimized_difference, skill_levels[i] - skill_levels[i - 1]) # The maximum number of teams is n // 2 max_teams = n // 2 return (max_teams, minimized_difference)"},{"question":"Polycarp is planning to participate in a coding marathon that lasts for several days. He is given a schedule of events he should attend during the marathon. He wants to attend as many events as possible without any overlap in timing. Each event has a start time and an end time. Given the schedule of events, determine the maximum number of non-overlapping events Polycarp can attend. The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of events. The next n lines contain two integers each: si and ei (1 ≤ si < ei ≤ 10^9), the start and end times of the i-th event. Output the maximum number of non-overlapping events Polycarp can attend. **Input Example:** ``` 4 1 5 2 6 4 7 6 8 ``` **Output Example:** ``` 2 ```","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be attended. Parameters: events (List[Tuple[int, int]]): List of tuples where each tuple contains (start_time, end_time) of an event. Returns: int: Maximum number of non-overlapping events. # Sort events based on their end times events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Emma received a fascinating collection of books and wants to organize them in her library in a specific way. She wants to arrange the books in a sequence such that the height difference between any two adjacent books is at most 1. Given the heights of the books, help Emma determine if it is possible to arrange all the books according to her conditions. You are given a list of integers representing the heights of Emma\'s books. Find out if there exists a permutation of the list such that the absolute difference between the heights of any two consecutive books is at most 1. The first line of the input contains an integer n (1 ≤ n ≤ 500) — the number of books. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the books. Print \\"Yes\\" (without quotes) if it is possible to arrange all the books as Emma wants. Otherwise, print \\"No\\". **Examples:** Input: 5 4 5 3 2 3 Output: Yes Input: 3 10 8 9 Output: Yes Input: 4 1 3 5 7 Output: No","solution":"def can_arrange_books(n, heights): Determines if it is possible to arrange the books in such a way that the absolute difference between the heights of any two consecutive books is at most 1. Parameters: n (int): The number of books. heights (list): A list of integers representing the heights of the books. Returns: str: \\"Yes\\" if it is possible to arrange the books according to the condition, otherwise \\"No\\". heights.sort() for i in range(1, n): if abs(heights[i] - heights[i - 1]) > 1: return \\"No\\" return \\"Yes\\""},{"question":"John is managing a warehouse and needs to arrange the shipment of packages. He has n packages to ship, and he wants to group them into as few trucks as possible. Each truck has a maximum weight capacity of W. John wants to minimize the number of trucks used. Write a program to determine the minimum number of trucks needed to ship all the packages. The first line of input contains two integers n and W (1 ≤ n ≤ 10^5, 1 ≤ W ≤ 10^9), where n is the number of packages and W is the maximum weight capacity of each truck. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ W), where wi represents the weight of the ith package. Output a single integer: the minimum number of trucks needed to ship all the packages. **Example** Input: ``` 5 10 2 3 5 7 1 ``` Output: ``` 3 ``` In this example, one possible way to pack the trucks is: - Truck 1: 7, 2 (total 9) - Truck 2: 5, 3 (total 8) - Truck 3: 1 (total 1) So, the minimum number of trucks needed is 3.","solution":"def min_trucks(n, W, package_weights): Determines the minimum number of trucks needed to ship all the packages. Parameters: n (int): Number of packages W (int): Maximum weight capacity of each truck package_weights (list of int): Weights of the packages Returns: int: Minimum number of trucks needed # Sort the package weights in descending order package_weights.sort(reverse=True) # Initialize two pointers left = 0 # Start of the list right = n - 1 # End of the list # Counter for the number of trucks needed trucks = 0 while left <= right: # If the heaviest and the lightest package can be together in one truck if package_weights[left] + package_weights[right] <= W: right -= 1 # Use the lightest package # Always use the heaviest package left += 1 trucks += 1 return trucks"},{"question":"Taran is thinking of a sequence of n integers. He wants to find out how many of the integers in his sequence are divisors of a given number d. An integer a_i in the sequence is considered a divisor of d if d % a_i == 0 (the remainder when d is divided by a_i is zero). Can you help Taran by writing a program to determine the count of such divisors in his sequence? The first line of input contains two integers, n and d (1 leq n leq 10^5, 1 leq d leq 10^9) representing the number of elements in the sequence and the number for which Taran wants to find the divisors respectively. The second line of input contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of Taran\'s sequence. Output a single integer, the count of elements in the sequence that are divisors of d. # Example Input: ``` 5 10 1 2 3 5 10 ``` Output: ``` 4 ``` Explanation: In this example, the numbers in the sequence that divide 10 are 1, 2, 5, and 10. Input: ``` 6 15 1 3 4 5 6 9 ``` Output: ``` 3 ``` Explanation: In this example, the numbers in the sequence that divide 15 are 1, 3, and 5.","solution":"def count_divisors(n, d, sequence): Returns the count of integers in the sequence that are divisors of d. :param n: Number of elements in the sequence :param d: The number to check for divisors :param sequence: List of n integers :return: Count of divisors of d in the sequence count = 0 for num in sequence: if d % num == 0: count += 1 return count"},{"question":"In this problem, we will work with color sequences. Each color sequence is represented by a string, where each character can be \'R\' (red), \'G\' (green), or \'B\' (blue). We will also deal with substrings; recall that a substring is a contiguous subsequence of a string. We denote the substring of string s starting from the l-th character and ending with the r-th character as s[l dots r]. The characters of each string are numbered from 1. Two color sequences are considered similar if they can be transformed into each other by swapping adjacent characters any number of times. Two colors that are not adjacent can be swapped only if they have another color in between. For example, \'RGB\' is similar to \'GRB\', \'BGR\', \'GBR\', \'RBG\', and \'BRG\' but not \'RRB\', \'BBB\', \'GGG\', etc. You are given a color sequence c and q queries to it. Each query consists of three integers l_1, l_2, and len. To answer each query, you have to determine whether c[l_1 dots l_1 + len - 1] is similar to c[l_2 dots l_2 + len - 1]. The first line contains one integer n (1 le n le 10^5) — the length of the color sequence c. The second line contains one string c (|c| = n). Each character of c is either \'R\', \'G\', or \'B\'. The third line contains one integer q (1 le q le 10^5) — the number of queries. Then q lines follow, each line represents a query. The i-th line contains three integers l_1, l_2 and len (1 le l_1, l_2 le |c|, 1 le len le |c| - max(l_1, l_2) + 1) for the i-th query. For each query, print either YES if c[l_1 dots l_1 + len - 1] is similar to c[l_2 dots l_2 + len - 1], or NO otherwise. You may print each letter in any register.","solution":"def are_similar_substrings(c, queries): def get_character_counts(sub): return sub.count(\'R\'), sub.count(\'G\'), sub.count(\'B\') results = [] for l1, l2, length in queries: sub1 = c[l1-1:l1+length-1] sub2 = c[l2-1:l2+length-1] if get_character_counts(sub1) == get_character_counts(sub2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array of size `n`. Every element in the array represents the price of a given item on a specific day. Your task is to determine the maximum profit you can achieve by buying and selling the item under the following conditions: - You can buy the item on one day and sell it on a future day. - You can conduct at most two transactions. The first line of the input contains an integer `n` (1 ≤ n ≤ 2 * 10^5) — the size of the array. The second line contains `n` integers - the prices of the items on each day (1 ≤ prices[i] ≤ 10^5). Output a single integer — the maximum profit you can achieve. # Example: **Input** ``` 6 3 3 5 0 0 3 1 4 ``` **Output** ``` 6 ``` **Explanation** - You can buy on day 4 (price 0) and sell on day 6 (price 3), then buy on day 7 (price 1) and sell on day 8 (price 4), making a total profit of 3 + 3 = 6.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved with at most two transactions. n = len(prices) if n == 0: return 0 # Initialize the dp arrays dp_left = [0] * n dp_right = [0] * n # Fill left dp array with profits for one transaction up to day i min_price = prices[0] for i in range(1, n): dp_left[i] = max(dp_left[i-1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Fill right dp array with profits for one transaction from day i to end max_price = prices[-1] for i in range(n-2, -1, -1): dp_right[i] = max(dp_right[i+1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Calculate the maximum profit with at most two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, dp_left[i] + dp_right[i]) return max_profit"},{"question":"You have a sequence of integers a_1, a_2, ..., a_n. The sequence is called \\"almost non-decreasing\\" if it is possible to remove at most one element to make the sequence non-decreasing. In other words, there exists at most one integer i (1 leq i leq n) such that if you remove a_i, the remaining sequence is non-decreasing. A sequence b_1, b_2, ..., b_m is non-decreasing if b_1 leq b_2 leq ... leq b_m. Your task is to determine whether a given sequence is almost non-decreasing. The first line of the input contains an integer t (1 leq t leq 1000) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 leq n leq 1000). The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9). For each test case, print \\"YES\\" if the sequence is almost non-decreasing, and \\"NO\\" otherwise. # Example ``` Input 5 5 4 2 3 3 4 6 4 2 1 3 3 4 5 1 2 3 4 5 4 3 1 2 3 3 3 3 3 Output YES NO YES YES YES ``` # Explanation - In the first test case, by removing the first element (4), the sequence becomes [2, 3, 3, 4], which is non-decreasing. - In the second test case, no single element can be removed to make the sequence non-decreasing. - In the third test case, the sequence is already non-decreasing. - In the fourth test case, by removing the second element (1), the sequence becomes [3, 2, 3], which is non-decreasing. - In the fifth test case, the sequence is already non-decreasing.","solution":"def is_almost_non_decreasing(n, seq): Determines if sequenece is almost non-decreasing by removing at most one element. def is_non_decreasing(seq): for i in range(len(seq) - 1): if seq[i] > seq[i + 1]: return False return True for i in range(n): if is_non_decreasing(seq[:i] + seq[i+1:]): return True return False def almost_non_decreasing_sequences(t, test_cases): results = [] for i in range(t): n, seq = test_cases[i] result = is_almost_non_decreasing(n, seq) results.append(\\"YES\\" if result else \\"NO\\") return results"},{"question":"You are given a tree with n vertices. Each vertex is uniquely numbered from 1 to n. The tree is rooted at vertex 1. Follow the steps described below to solve the problem: 1. Each vertex i of the tree has an initial value ai. 2. From any vertex, you can travel to its parent or any of its children. You are also given q queries. Each query consists of an integer x, which represents a vertex. For each query, your task is to calculate the sum of the values of all vertices that are in the subtree rooted at vertex x. **Input Format:** - The first line contains an integer n (1 ≤ n ≤ 200000), the number of vertices in the tree. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000), the initial values of the vertices. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning there is an edge between vertex u and vertex v. - The next line contains an integer q (1 ≤ q ≤ 50000), the number of queries. - The next q lines each contain an integer x (1 ≤ x ≤ n), representing a query on vertex x. **Output Format:** For each query, output the sum of the values of all vertices in the subtree rooted at vertex x on a new line. **Example:** ``` Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 2 3 4 Output: 2 12 4 ``` **Explanation:** In the given example, the tree can be visualized as follows: ``` 1 / 2 3 / 4 5 ``` Subtree sums are calculated as: - Subtree rooted at 2: only node 2 with value 2. - Subtree rooted at 3: nodes 3, 4, and 5 with values 3 + 4 + 5 = 12. - Subtree rooted at 4: only node 4 with value 4.","solution":"def calculate_subtree_sums(n, values, edges, queries): from collections import defaultdict # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store the sum of the subtree for each vertex subtree_sums = [0] * (n + 1) # DFS to calculate the sum of values in each subtree def dfs(node, parent): subtree_sum = values[node - 1] # the node itself for child in tree[node]: if child != parent: subtree_sum += dfs(child, node) subtree_sums[node] = subtree_sum return subtree_sum # Start DFS from the root node (vertex 1) dfs(1, -1) # Prepare results for the queries results = [] for query in queries: results.append(subtree_sums[query]) return results"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence which is both strictly increasing, and contains only prime numbers. A subsequence is derived by deleting zero or more elements from the sequence without changing the order of the remaining elements. For example, if you are given the sequence [2, 3, 4, 6, 7, 11], one such subsequence is [2, 3, 7, 11] which contains all prime numbers and is strictly increasing. The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^6), representing the sequence. Output a single integer – the length of the longest subsequence that is strictly increasing and contains only prime numbers. **Example 1:** Input: 6 2 3 4 6 7 11 Output: 4 **Example 2:** Input: 5 1 4 6 8 9 Output: 0","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def length_of_longest_increasing_prime_subsequence(nums): primes = [num for num in nums if is_prime(num)] if not primes: return 0 n = len(primes) dp = [1] * n for i in range(1, n): for j in range(i): if primes[i] > primes[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def longest_increasing_prime_subsequence_length(sequence): n, nums = sequence[0], sequence[1] return length_of_longest_increasing_prime_subsequence(nums)"},{"question":"You are given a 2D grid of dimensions ( n times m ) filled with integers. Your task is to find the maximum sum of integers on any rectangular sub-grid of the grid. A rectangular sub-grid is defined by choosing two rows ( r_1 ) and ( r_2 ) and two columns ( c_1 ) and ( c_2 ) such that ( 1 leq r_1 leq r_2 leq n ) and ( 1 leq c_1 leq c_2 leq m ). The first line of the input contains two integers ( n ) and ( m ) (( 1 leq n, m leq 1000 )) — the dimensions of the grid. Each of the next ( n ) lines contains ( m ) integers representing the grid (( -10^9 leq text{grid}[i][j] leq 10^9 )). Print a single integer — the maximum sum of integers on any rectangular sub-grid of the grid. # Example **Input:** ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` **Output:** ``` 29 ``` **Explanation:** The sub-grid with maximum sum is: ``` 3 8 10 -4 -1 1 ``` Summing these numbers gives (3 + 8 + 10 - 4 - 1 + 1 + 7 = 29).","solution":"def max_subgrid_sum(grid): Finds the maximum sum of any rectangular sub-grid in a given 2D grid. n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr): Helper function to find the maximum sum subarray using Kadane\'s algorithm. max_sum = float(\'-inf\') current_sum = 0 for x in arr: current_sum += x if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid contains a non-negative integer which represents the cost to traverse through that cell. You start at the top-left cell (1,1) and want to reach the bottom-right cell (R,C). You can move to the neighboring cells to the right, downward, or diagonally down-right. The objective is to find the path from (1,1) to (R,C) which minimizes the total traversal cost. Each test case consists of: - The first line contains integers R and C (1 ≤ R, C ≤ 100) — the number of rows and columns respectively. - Each of the next R lines contains C integers separated by spaces representing the grid. Output a single integer, the minimum cost to traverse from the top-left to the bottom-right cell. The input grid contains spaces separating the integers of each row. **Example:** Input: 3 3 1 3 2 4 6 5 3 8 1 Output: 8 **Explanation:** One optimal path is (1,1) -> (1,2) -> (2,3) -> (3,3) resulting in a total traversal cost of 1 + 3 + 5 + 1 = 10.","solution":"def min_traverse_cost(grid): Returns the minimum cost to traverse from the top-left to the bottom-right cell of the grid. if not grid or not grid[0]: return 0 R = len(grid) C = len(grid[0]) # Create a 2D list to store the minimum cost to reach each cell. cost = [[float(\'inf\')] * C for _ in range(R)] cost[0][0] = grid[0][0] for i in range(R): for j in range(C): if i + 1 < R: # Moving Down cost[i + 1][j] = min(cost[i + 1][j], cost[i][j] + grid[i + 1][j]) if j + 1 < C: # Moving Right cost[i][j + 1] = min(cost[i][j + 1], cost[i][j] + grid[i][j + 1]) if i + 1 < R and j + 1 < C: # Moving Diagonally cost[i + 1][j + 1] = min(cost[i + 1][j + 1], cost[i][j] + grid[i + 1][j + 1]) return cost[R - 1][C - 1]"},{"question":"Given a string of length n, your task is to determine whether it can be rearranged into a palindrome. A palindrome is a string that reads the same backward as forward. If the given string can be rearranged into a palindrome, output \\"YES\\". Otherwise, output \\"NO\\". The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of length n consisting of lowercase Latin letters. For example: ``` Input: 5 aabbc Output: YES Input: 3 abc Output: NO ```","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): The string to check. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with developing the backend for a book rental system at your local library. The library has an extensive collection of books, and you need to track the availability of these books and manage the borrow and return processes. Each book in the library is uniquely identified by its ISBN number. The library system should allow for the following operations: 1. **Add a book** to the collection. 2. **Borrow a book** given an ISBN number, provided the book is available. 3. **Return a book** to the collection. 4. **Check availability** of a book given an ISBN number. Initially, the library contains no books. Implement these functionalities. The operations are encoded in a list of commands: - `ADD <ISBN>`: Add a book with the given ISBN to the collection. - `BORROW <ISBN>`: Borrow the book with the given ISBN. - `RETURN <ISBN>`: Return the book with the given ISBN. - `STATUS <ISBN>`: Check if the book with the given ISBN is available. Output \\"AVAILABLE\\" if it is; otherwise, output \\"BORROWED\\". Your task is to write a function that processes a list of such commands and outputs the appropriate responses for the `STATUS` checks. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^4) – the number of commands. - The following `n` lines each contain one of the commands. # Output - For each `STATUS <ISBN>` command, output either \\"AVAILABLE\\" or \\"BORROWED\\" in separate lines for each query. # Example Input ``` 7 ADD 978-3-16-148410-0 ADD 978-0-596-52068-7 BORROW 978-3-16-148410-0 STATUS 978-3-16-148410-0 STATUS 978-0-596-52068-7 RETURN 978-3-16-148410-0 STATUS 978-3-16-148410-0 ``` Output ``` BORROWED AVAILABLE AVAILABLE ``` # Constraints - The ISBN numbers are strings that strictly follow the ISBN-13 format: `978` or `979` followed by 10 digits, separated by hyphens. - Each ISBN is unique in the library\'s collection.","solution":"def process_library_commands(commands): collection = {} result = [] for command in commands: parts = command.split() cmd = parts[0] isbn = parts[1] if cmd == \\"ADD\\": collection[isbn] = \\"AVAILABLE\\" elif cmd == \\"BORROW\\": if isbn in collection and collection[isbn] == \\"AVAILABLE\\": collection[isbn] = \\"BORROWED\\" elif cmd == \\"RETURN\\": if isbn in collection and collection[isbn] == \\"BORROWED\\": collection[isbn] = \\"AVAILABLE\\" elif cmd == \\"STATUS\\": if isbn in collection: result.append(collection[isbn]) else: result.append(\\"UNKNOWN\\") # This case to handle ISBN not in collection return result"},{"question":"In the land of CodeLand, the citizens follow strict rules for communication via code signals. They use a unique communication system based on binary strings. Each citizen has a specific binary string, and a new message is formed by concatenating the binary strings of all citizens in a certain order. Recently, the Queen of CodeLand decided to enforce a new rule: every message sent must be lexicographically smallest after performing a special operation any number of times. The operation allowed is to select any contiguous subarray of the binary string and reverse it. You are given a binary string consisting of \'0\'s and \'1\'s. Your task is to determine the lexicographically smallest string possible by performing the given operation any number of times. # Input: - The first line contains an integer t (1 ≤ t ≤ 10^4), the number of test cases. - Each of the next t lines contains a binary string s (1 ≤ |s| ≤ 10^5). # Output: For each test case, output a single line with the lexicographically smallest string possible after performing the operation any number of times. # Example: Input: ``` 3 1100 0101 111000 ``` Output: ``` 0011 0011 000111 ``` # Explanation: By performing the allowed operation, you can reverse certain parts of the string to get the smallest possible lexicographical order. For instance: - For \\"1100\\", you can reverse the first two characters to get \\"0110\\" and then the whole string to get \\"0011\\". - For \\"0101\\", directly reverse the second and third characters to get \\"0011\\". - For \\"111000\\", reverse the entire string to get \\"000111\\".","solution":"def lexicographically_smallest_strings(t, strings): def smallest_string(s): # Count zeroes and ones zeros = s.count(\'0\') ones = len(s) - zeros # Construct the smallest possible string with all zeros first then all ones. return \'0\' * zeros + \'1\' * ones return [smallest_string(s) for s in strings]"},{"question":"Given an integer array `arr` of size `n`, your task is to find the maximum sum of elements in any subsequence such that no two elements in the subsequence are adjacent in the original array. A subsequence is a sequence derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, if `arr = [3, 2, 5, 10, 7]`, the largest sum of a non-adjacent subsequence is `15` (3 + 10 + 2). Write a function `maxNonAdjacentSum` that takes an array `arr` as input and returns the maximum sum of a non-adjacent subsequence. # Input - An array `arr` of integers (1 ≤ n ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4) where `n` is the length of the array. # Output - A single integer, the maximum sum of a non-adjacent subsequence. # Example Example 1: ``` Input: arr = [3, 2, 5, 10, 7] Output: 15 ``` Example 2: ``` Input: arr = [0, -1, 3, 100, -70, 80] Output: 180 ``` # Constraints 1. The array may contain both positive and negative integers. 2. The array length `n` is between 1 and 10^5. 3. The solution should be efficient with O(n) time complexity and O(1) auxiliary space.","solution":"def maxNonAdjacentSum(arr): Returns the maximum sum of a non-adjacent subsequence. if not arr: return 0 include, exclude = 0, 0 for num in arr: # current max excluding i new_exclude = max(include, exclude) # current max including i include = exclude + num exclude = new_exclude # return max of include and exclude return max(include, exclude)"},{"question":"A culinary competition requires a specific type of sandwich for entry: a palindromic sandwich. A palindromic sandwich consists of a palindrome in the middle, surrounded by two slices of equal length on either side that are also palindromes. Given an integer n (1 ≤ n ≤ 50), and a string s of length 2n, determine if it is possible to split s into three contiguous substrings a, b, and c such that a = c, b is a palindrome, and the combined length of a and c is the same. Verify if the string can be split into such a way, and print \\"YES\\" if it is possible, otherwise print \\"NO\\". The first line contains a single integer n (1 ≤ n ≤ 50), indicating the value of n. The second line contains a string s of length 2n consisting of lowercase English letters. On the first line, print \\"YES\\" if it is possible to split s into three contiguous substrings a, b, and c as described. Otherwise, print \\"NO\\". In the first sample of input, the string is \\"abccba\\", and it can be split into \\"a\\" + \\"bccb\\" + \\"a\\" where \\"a\\" and \\"a\\" are palindromes, and \\"bccb\\" is also a palindrome. Hence, it prints \\"YES\\". In the second sample of input, the string is \\"abcdcb\\", and there\'s no way to split it to satisfy the conditions, so it prints \\"NO\\".","solution":"def is_palindrome(s): return s == s[::-1] def is_palindromic_sandwich(n, s): for i in range(1, n+1): a = s[:i] b = s[i:-i] c = s[-i:] if a == c and is_palindrome(b): return \\"YES\\" return \\"NO\\" def check_palindromic_sandwich(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) s = data[1] print(is_palindromic_sandwich(n, s))"},{"question":"You are given a binary grid of size n x m. Each cell in the grid contains either a \'0\' or a \'1\'. Your task is to find the size of the largest square subgrid consisting entirely of \'1\'s. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next n lines each contain a string of length m, consisting of characters \'0\' and \'1\'. Output: - Print a single integer — the size of the largest square subgrid consisting entirely of \'1\'s (i.e., the side length of the largest square). Example: Input: 4 5 11001 11111 11111 01111 Output: 3 In the example above, the subgrid from (2,2) to (4,4) contains all \'1\'s and is of size 3x3. Hence, the output is 3.","solution":"def largest_square_subgrid(n, m, grid): # Initialize a cache to store the size of the largest square subgrid # whose bottom-right corner is at (i, j) dp = [[0] * m for _ in range(n)] largest_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': if i == 0 or j == 0: # If it\'s in the first row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 largest_side = max(largest_side, dp[i][j]) return largest_side"},{"question":"Anna loves to collect gemstones. She has a magical bag that can hold up to a certain weight W, and she has a collection of gemstones, each with a specific weight and value. Anna wants to maximize the total value of the gemstones she puts into her bag without exceeding the weight capacity. Given a list of gemstones, each represented by its weight and value, along with the weight capacity of Anna\'s bag, determine the maximum value that Anna can carry. The first line contains two integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 10000) — the number of gemstones and the weight capacity of the bag. Each of the next n lines contains two integers wi and vi (1 ≤ wi ≤ 100, 1 ≤ vi ≤ 1000), representing the weight and value of the i-th gemstone. Output a single integer, the maximum total value of gemstones that Anna can carry in her bag. Examples: Input: 4 10 5 10 4 40 6 30 4 50 Output: 90 Input: 3 50 10 60 20 100 30 120 Output: 220","solution":"def knapsack(n, W, items): Returns the maximum value that can be carried in a knapsack with capacity W. :param n: Number of gemstones. :param W: Maximum weight capacity of the knapsack. :param items: List of tuples, where each tuple contains weight and value of each gemstone. :return: Maximum value that can be carried. # Initialize the DP table dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): wi, vi = items[i-1] for w in range(1, W + 1): if wi > w: dp[i][w] = dp[i-1][w] else: dp[i][w] = max(dp[i-1][w], dp[i-1][w-wi] + vi) return dp[n][W] # Parsing input example to illustrate def parse_input(data): lines = data.split(\'n\') n, W = map(int, lines[0].split()) items = [] for i in range(1, n + 1): wi, vi = map(int, lines[i].split()) items.append((wi, vi)) return n, W, items # Example usage if __name__ == \\"__main__\\": data = 4 10 5 10 4 40 6 30 4 50 n, W, items = parse_input(data) print(knapsack(n, W, items)) # Output: 90"},{"question":"You are given a sequence of integers and your task is to make this sequence non-decreasing by modifying at most one of its elements. You need to determine whether it\'s possible to do so. A sequence is non-decreasing if for every i (1 ≤ i < n), ai ≤ ai+1 holds. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the sequence elements. Print \\"YES\\" if it\'s possible to make the sequence non-decreasing by modifying at most one element, otherwise print \\"NO\\". Examples: Input: 4 4 2 3 1 Output: NO Input: 5 10 5 7 8 9 Output: YES","solution":"def can_be_non_decreasing_by_modifying_one_element(n, sequence): Determines if the sequence can be made non-decreasing by modifying at most one element. :param n: Length of the sequence :param sequence: List of integers, the sequence :return: \\"YES\\" if the sequence can be made non-decreasing by modifying at most one element, \\"NO\\" otherwise count = 0 for i in range(1, n): if sequence[i] < sequence[i - 1]: if count == 1: return \\"NO\\" count += 1 if i == 1 or sequence[i] >= sequence[i - 2]: sequence[i - 1] = sequence[i] else: sequence[i] = sequence[i - 1] return \\"YES\\""},{"question":"Alex wants to plant new flowers in his garden. There is a row of n flower pots, each pot either contains a flower or is empty. The pots are represented by a string where \'1\' denotes a pot with a flower and \'0\' denotes an empty pot. Alex wants to plant flowers such that no two flowers are adjacent to each other. Given the string representing the flower pots and an integer k representing the number of new flowers Alex wants to plant, determine if it is possible to plant exactly k new flowers in the garden without violating the no-adjacent-flowers rule. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the number of pots. The second line of each test case contains an integer k (0 ≤ k ≤ n) — the number of new flowers Alex wants to plant. The third line of each test case contains a string of length n consisting of \'0\'s and \'1\'s. For each test case, print \\"Yes\\" if it is possible to plant exactly k new flowers in the garden without violating the no-adjacent-flowers rule, and \\"No\\" otherwise. You can print each letter in any case. In the first sample, Alex can plant 2 new flowers by planting in the pots at positions 2 and 5 (1-indexed). In the second sample, it is not possible to plant even one new flower since there are no empty pots. In the third sample, Alex can plant 1 new flower in any of the empty pots since all are separated by at least one space.","solution":"def can_plant_flowers(n, k, pots): Determines if it is possible to plant exactly k new flowers in the garden without violating the no-adjacent-flowers rule in the given row of flower pots. :param n: int, number of pots :param k: int, number of new flowers to plant :param pots: str, string representation of pots where \'1\' is a flower and \'0\' is empty :return: str, \\"Yes\\" if it\'s possible to plant k flowers, otherwise \\"No\\" count = 0 i = 0 while i < n: if pots[i] == \'0\': if (i == 0 or pots[i - 1] == \'0\') and (i == n - 1 or pots[i + 1] == \'0\'): count += 1 i += 1 # Skip next pot i += 1 if count >= k: return \\"Yes\\" return \\"No\\""},{"question":"Vasya loves creating interesting number sequences. Recently, he came up with a new type of sequence called a \\"Mirror Sequence\\". An integer array of length n is called a Mirror Sequence if for all 1 ≤ i ≤ n, the absolute difference between adjacent elements does not exceed k, i.e., |ai - ai+1| ≤ k for all 1 ≤ i < n, and the sequence is symmetrical around its center. For example, the sequence [2, 1, 2] is a Mirror Sequence with n = 3 and k = 1, but [2, 1, 3] is not. Given an integer array a of length n, your task is to determine if it is possible to reorder the elements of a to form a Mirror Sequence. If multiple solutions exist, any of them is acceptable. The first line contains two integers n and k (1 ≤ n ≤ 3·105; 0 ≤ k ≤ 106). The second line contains n integers ai (1 ≤ ai ≤ 106) — the elements of the array. Output \\"YES\\" and the reordered Mirror Sequence in one line if it is possible to reorder the elements to form a Mirror Sequence. Otherwise, print \\"NO\\". Example: Input: 5 2 1 3 3 3 1 Output: YES 1 3 3 3 1","solution":"def can_form_mirror_sequence(n, k, arr): Determines if it\'s possible to reorder elements of arr to form a Mirror Sequence. Args: n (int): length of the array k (int): maximum absolute difference between adjacent elements arr (list): the list of integers Returns: Tuple: (\\"YES\\", reordered_list) or (\\"NO\\", []) arr.sort() mid = n // 2 if n % 2 == 0: left_part = arr[:mid] right_part = arr[mid:] else: left_part = arr[:mid+1] right_part = arr[mid+1:] right_part.reverse() mirror_seq = left_part + right_part for i in range(n-1): if abs(mirror_seq[i] - mirror_seq[i+1]) > k: return (\\"NO\\", []) return (\\"YES\\", mirror_seq)"},{"question":"In a distant land, there was a kingdom that celebrated the celestial event of dual star eclipses. The kingdom\'s astronomers have been tasked with identifying all pairs of planets that align perfectly during these rare events. Each alignment is characterized by two planets and a specific point in time when this alignment happens. You are given n planets and m celestial events. An event consists of the starting time, ending time, and the pair of planets involved in the alignment. Your task is to count how many celestial events involve each pair of planets. The first line contains two integers n and m (1 ≤ n ≤ 300; 1 ≤ m ≤ 10^5) — the number of planets and the number of celestial events. Each of the next m lines describes an event with four integers s, e, u, v (1 ≤ s < e ≤ 10^9; 1 ≤ u < v ≤ n), where s is the start time, e is the end time, u and v are the pair of planets involved in this event. Output an n×n matrix where the element in the i-th row and j-th column represents the number of celestial events that involve the pair of planets (i, j). # Example For instance, given the input: ``` 4 5 1 5 1 2 2 6 1 3 4 7 2 3 8 10 1 2 9 12 3 4 ``` The output should be: ``` 0 2 1 0 0 0 1 0 0 0 0 1 0 0 0 0 ``` # Explanation - Planets 1 and 2 align twice (during events 1 and 4). - Planets 1 and 3 align once (during event 2). - Planets 2 and 3 align once (during event 3). - Planets 3 and 4 align once (during event 5). Notice that the matrix is symmetric, but only the lower diagonal (if i < j) or upper diagonal (if i > j) parts are filled, depending on conventions, to avoid redundancy. Each event pair (u, v) should be recorded as (min(u,v), max(u,v)) for consistency.","solution":"def count_celestial_events(n, m, events): Return an n x n matrix where the element in the i-th row and j-th column represents the number of celestial events involving the pair of planets (i, j). # Initialize a 2D matrix with zeros matrix = [[0] * n for _ in range(n)] for event in events: s, e, u, v = event matrix[u-1][v-1] += 1 return matrix"},{"question":"You are given a sequence of integers that represent the scores of participants in a competitive event. The competitive event consists of multiple rounds, and in each round, participants compete to achieve a score. After all rounds are complete, the competition organizers want to know how many participants have achieved their highest score at least once. Given a list of scores for each participant, determine the number of unique participants who have achieved their highest score in at least one of the rounds. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of participants. - The next n lines contain the scores achieved by the participants in different rounds. The i-th line contains scores of the form: m, followed by m integers, where m (1 ≤ m ≤ 100) denotes the number of rounds the i-th participant has participated in, and the next m integers represent the scores obtained by the i-th participant in each round (1 ≤ score ≤ 1000). Output: - Print a single integer — the number of unique participants who have achieved their highest score in at least one of the rounds. Example: Input: ``` 3 5 450 550 600 700 750 4 300 400 500 600 3 800 820 790 ``` Output: ``` 3 ``` Explanation: - The 1st participant participated in 5 rounds and the highest score is 750, which was achieved in one of the rounds. - The 2nd participant participated in 4 rounds and the highest score is 600, which was achieved in one of the rounds. - The 3rd participant participated in 3 rounds and the highest score is 820, which was achieved in one of the rounds. Since all participants have achieved their highest score at least once, the output is 3.","solution":"def count_participants_with_highest_score(n, scores): Count the participants who have achieved their highest score at least once. :param n: Number of participants :param scores: List of scores for each participant, with each entry being a list in the format: [m, score1, score2, ..., scorem] :return: Number of participants who have achieved their highest score at least once count = 0 for participant_scores in scores: highest_score = max(participant_scores[1:]) if highest_score in participant_scores[1:]: count += 1 return count"},{"question":"Kira is managing a library database and wants to keep track of the book lending process. Each book has a unique ID, and each borrower has a unique ID. Kira wants to be able to handle a sequence of operations. The operations can be: 1. **Add a new book**: Add a book with a given unique ID to the database. 2. **Remove an existing book**: Remove a book with a given ID from the database if the book is not currently borrowed. 3. **Borrow a book**: Register that a borrower with a given ID has borrowed a book with a given ID. A book can only be borrowed if it is in the database and not already borrowed by someone else. 4. **Return a book**: Register that a borrower with a given ID has returned a book with a given ID which they previously borrowed. Your task is to write a program that manages these operations and checks any possible constraints. The first line of input contains a single integer n (1 leq n leq 10^5), the number of operations. Each of the following n lines describes an operation in one of the following formats: - `ADD book_id` - `REMOVE book_id` - `BORROW book_id borrower_id` - `RETURN book_id borrower_id` All operations have distinct IDs for books and borrowers in the range 1 leq text{book_id}, text{borrower_id} leq 10^9. For each operation except `ADD` and `RETURN`, output \\"OK\\" if the operation was successful. If an operation is not allowed by the constraints (e.g., removing a non-existent book, borrowing an already borrowed book, returning a book not currently borrowed by the specified borrower, etc.), output \\"ERROR\\". # Sample Input ``` 8 ADD 1 ADD 2 BORROW 1 100 BORROW 1 101 REMOVE 1 RETURN 1 100 RETURN 1 101 REMOVE 1 ``` # Sample Output ``` OK OK OK ERROR ERROR OK ERROR OK ``` # Explanation 1. Add book with ID 1 (OK). 2. Add book with ID 2 (OK). 3. Borrow book with ID 1 by borrower ID 100 (OK). 4. Borrow book with ID 1 by borrower ID 101 (ERROR because it is already borrowed). 5. Remove book with ID 1 (ERROR because it is currently borrowed). 6. Return book with ID 1 by borrower ID 100 (OK). 7. Return book with ID 1 by borrower ID 101 (ERROR because it was not borrowed by this borrower). 8. Remove book with ID 1 (OK).","solution":"class Library: def __init__(self): self.books = {} # book_id: is_borrowed self.borrowers = {} # book_id: borrower_id def add_book(self, book_id): if book_id not in self.books: self.books[book_id] = False return \\"OK\\" def remove_book(self, book_id): if book_id in self.books and not self.books[book_id]: del self.books[book_id] return \\"OK\\" return \\"ERROR\\" def borrow_book(self, book_id, borrower_id): if book_id in self.books and not self.books[book_id]: self.books[book_id] = True self.borrowers[book_id] = borrower_id return \\"OK\\" return \\"ERROR\\" def return_book(self, book_id, borrower_id): if book_id in self.books and self.books[book_id] and self.borrowers.get(book_id) == borrower_id: self.books[book_id] = False del self.borrowers[book_id] return \\"OK\\" return \\"ERROR\\" def library_manager(n, operations): library = Library() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": book_id = int(parts[1]) results.append(library.add_book(book_id)) elif command == \\"REMOVE\\": book_id = int(parts[1]) results.append(library.remove_book(book_id)) elif command == \\"BORROW\\": book_id = int(parts[1]) borrower_id = int(parts[2]) results.append(library.borrow_book(book_id, borrower_id)) elif command == \\"RETURN\\": book_id = int(parts[1]) borrower_id = int(parts[2]) results.append(library.return_book(book_id, borrower_id)) return results"},{"question":"In a strange kingdom, creatures are categorized based on the number of legs they have. Each creature has a certain number of legs, and the kingdom\'s wizards have classified these creatures into groups identified by a specific number of legs. You are given the number of legs of two different creatures. Your task is to determine if these two creatures fall into the same group, which is defined by having the same leg parity (odd or even number of legs). Write a program that accepts the number of legs of two creatures and prints \\"Same Group\\" (without quotes) if they belong to the same group, otherwise print \\"Different Groups\\" (without quotes). The first line of input contains an integer a (1 leq a leq 10^9) representing the number of legs of the first creature. The second line of input contains an integer b (1 leq b leq 10^9) representing the number of legs of the second creature. Output \\"Same Group\\" if both creatures have either an odd or an even number of legs, otherwise output \\"Different Groups\\". # Example Input 3 5 Output Same Group Input 8 11 Output Different Groups","solution":"def determine_group(a, b): Determines if two creatures with \'a\' and \'b\' number of legs, respectively, belong to the same group based on the parity (odd or even) of their leg counts. Parameters: a (int): Number of legs of the first creature. b (int): Number of legs of the second creature. Returns: str: \\"Same Group\\" if both creatures have either an odd or an even number of legs, otherwise \\"Different Groups\\". if (a % 2) == (b % 2): return \\"Same Group\\" else: return \\"Different Groups\\""},{"question":"In an ancient kingdom, a popular game involves a set of magic stones arranged in a line. Each magic stone has a power value, which can either be positive or negative. The game\'s objective is to collect a contiguous subset of these stones such that the sum of their power values is maximized. You are given an array of integers representing the power values of the stones. Your task is to write a program that finds the maximum sum of any contiguous subarray and also returns the subarray itself. The first line of the input contains an integer n (1 ≤ n ≤ 10^6), the number of magic stones. The second line contains n integers, representing the power values of the stones, where each integer is between -10^9 and 10^9. Print two lines. In the first line print the maximum sum of any contiguous subarray. In the second line print the integers of this subarray separated by spaces. If there are multiple subarrays with the same maximum sum, return the one that appears first in the array. Example: Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 4 -1 2 1","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray and returns the subarray itself. Args: arr (list of int): The array of integers representing power values of the stones. Returns: tuple: A tuple containing the maximum sum and the subarray with that sum. n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = end = s = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, arr[start:end + 1]"},{"question":"You are given an array of integers and you need to perform a series of operations on it. Each operation is defined by a set of parameters and involves updating the array within a specified range. The operations should be processed in the order they are given. Each operation is defined by three integers: `l`, `r`, and `v`. For each operation, you should add the value `v` to each element in the array from index `l` to index `r` (inclusive). Your task is to implement the operations and then output the final state of the array. The input consists of: 1. An integer `n` (1 ≤ n ≤ 100000) — the size of the array. 2. An array of `n` integers `a` (1 ≤ a_i ≤ 1000) — the initial state of the array. 3. An integer `m` (1 ≤ m ≤ 100000) — the number of operations. 4. `m` operations, each defined by three integers `l`, `r`, and `v` (0 ≤ l ≤ r < n, 1 ≤ v ≤ 1000), specifying the range and the value to be added. Output the final state of the array as a single line of `n` space-separated integers. Example: ``` Input: 5 1 2 3 4 5 3 1 3 2 0 1 -1 2 4 3 Output: 0 3 7 9 8 ``` Explanation: - The first operation adds `2` to the elements from index `1` to `3`: `[1, 4, 5, 6, 5]` - The second operation subtracts `1` from the elements from index `0` to `1`: `[0, 3, 5, 6, 5]` - The third operation adds `3` to the elements from index `2` to `4`: `[0, 3, 8, 9, 8]` Note: To efficiently handle the multiple range updates, consider using a difference array or an equivalent method.","solution":"def apply_operations(n, a, m, operations): Applies a series of operations on the array `a`. :param n: Size of the array :param a: Initial array of integers :param m: Number of operations :param operations: List of operations, each as a tuple (l, r, v) :return: Array after applying all operations for op in operations: l, r, v = op for i in range(l, r + 1): a[i] += v return a"},{"question":"Given two integers n and p where 1 ≤ n ≤ 10^9 and 1 ≤ p ≤ 10^9 + 7, you are asked to find and return the sum of squares of all integers from 1 to n modulo p. For example, if n = 5 and p = 100, the sum of squares of integers from 1 to 5 is 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55. The result should be 55 % 100 = 55. First line of input contains two space-separated integers n and p. Output a single integer representing the sum of squares of all integers from 1 to n modulo p. For instance, for the first sample input: ``` Input: 5 100 ``` Output: 55","solution":"def sum_of_squares_modulo(n, p): This function calculates the sum of squares of all integers from 1 to n, modulo p. :param n: an integer, representing the upper limit of the range (1 to n) :param p: an integer, the modulo value :return: sum of squares of all integers from 1 to n, modulo p # Formula for the sum of squares of the first n natural numbers: # S = n * (n + 1) * (2n + 1) / 6 sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6 return sum_of_squares % p"},{"question":"A popular social media platform has identification codes representing each user\'s favorite hobby. The platform wants to promote related hobbies to users based on the similarity of these codes. The similarity of two hobbies is defined by the sum of the absolute differences of each corresponding digit in their codes. You are given a list of identification codes and a user\'s code. Your task is to determine the code of the hobby that is the least similar to the user\'s favorite hobby code. If there are multiple hobbies with the same similarity value, return the first one from the list. The input contains: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of codes in the list. - The second line contains a string representing the user\'s favorite hobby code. - The next n lines each contain a string representing a hobby code. Each hobby code is represented as a string of digits of length m (1 ≤ m ≤ 10). You need to output the code of the hobby that is the least similar to the user\'s favorite hobby code. **Example Input:** ``` 3 1234 5678 4321 8765 ``` **Example Output:** ``` 8765 ``` In the given example, the similarities are calculated as the following: - Similarity with 5678: |1-5| + |2-6| + |3-7| + |4-8| = 4 + 4 + 4 + 4 = 16 - Similarity with 4321: |1-4| + |2-3| + |3-2| + |4-1| = 3 + 1 + 1 + 3 = 8 - Similarity with 8765: |1-8| + |2-7| + |3-6| + |4-5| = 7 + 5 + 3 + 1 = 16 Between 5678 and 8765, the first occurrence is 5678, but our goal is to find the maximum similarity which would be 8765 as it appears in the list post 5678 despite having the same similarity value. Thus, the correct output is `8765`. Ensure your solution handles edge cases and performs efficiently within the given constraints.","solution":"def find_least_similar_code(n, user_code, hobby_codes): def similarity(code1, code2): return sum(abs(int(c1) - int(c2)) for c1, c2 in zip(code1, code2)) max_similarity = -1 least_similar_code = \\"\\" for code in hobby_codes: sim = similarity(user_code, code) if sim > max_similarity: max_similarity = sim least_similar_code = code return least_similar_code"},{"question":"A new land has been discovered, and the government wants to construct roads connecting every town. The land consists of n towns, numbered from 1 to n. Each town is connected to every other town with a bidirectional road having a certain length. The government has already built some roads, but they want to ensure that the total length of all the roads from any town to any other town is minimized. In other words, they aim to construct a Minimum Spanning Tree (MST) for this new land. You are given a matrix that represents the length of the roads between all pairs of towns. Your task is to calculate the minimum total length of the roads required to connect all the towns together. The first line contains a single integer n (2 ≤ n ≤ 50) — the number of towns. Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the length of the road between town i and town j (0 ≤ length ≤ 100). Output a single integer — the total length of the roads in the MST. Note that the length between a town and itself is 0, and the road lengths are symmetric, i.e., length of road from town i to town j is the same as the length of road from town j to town i. Here is a sample input and output for better understanding: # Input ``` 3 0 1 3 1 0 2 3 2 0 ``` # Output ``` 3 ``` In this sample: - Town 1 is connected to Town 2 with a road of length 1. - Town 2 is connected to Town 3 with a road of length 2. - The total length of the roads in the MST is 1 + 2 = 3.","solution":"def prims_algorithm(n, graph): Function to calculate the minimum total length of roads required to connect all towns using Prim\'s Algorithm. :param n: Number of towns :param graph: Adjacency matrix representing lengths of the roads :return: Total length of the roads in the MST # Initialize all keys as infinite, and min heap key = [float(\'inf\')] * n parent = [-1] * n mst_set = [False] * n key[0] = 0 # Starting from the first node total_length = 0 for _ in range(n): # Find the vertex with the minimum key value from the set of vertices not yet included in MST min_key = float(\'inf\') u = -1 for v in range(n): if not mst_set[v] and key[v] < min_key: min_key = key[v] u = v mst_set[u] = True total_length += min_key # Update key value and parent index of the adjacent vertices of the picked vertex for v in range(n): # graph[u][v] is non zero only for adjacent vertices of u # mst_set[v] is false for vertices not yet included in MST # Update the key only if graph[u][v] is smaller than key[v] if graph[u][v] and not mst_set[v] and graph[u][v] < key[v]: key[v] = graph[u][v] parent[v] = u return total_length def min_total_road_length(n, graph): return prims_algorithm(n, graph)"},{"question":"You are given two strings, `s1` and `s2`, consisting of lowercase English letters. You want to transform `s1` into `s2` using the following operations, each of which can be performed any number of times: 1. Replace a character in `s1` with a different character. 2. Insert a character at any position in `s1`. 3. Delete any character from `s1`. Your task is to determine the minimum number of operations required to transform `s1` into `s2`. The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of `t` test cases follows. Each test case consists of two lines: - The first line contains the string `s1` (1 ≤ |s1| ≤ 100). - The second line contains the string `s2` (1 ≤ |s2| ≤ 100). For each test case, print a single integer on a new line — the minimum number of operations needed to transform `s1` into `s2`. # Example Input: ``` 2 kitten sitting flaw lawn ``` Output: ``` 3 2 ``` In the first example, transforming \\"kitten\\" to \\"sitting\\" requires 3 operations: replace \'k\' with \'s\', replace \'e\' with \'i\', and insert \'g\' at the end. In the second example, transforming \\"flaw\\" to \\"lawn\\" requires 2 operations: replace \'f\' with \'l\' and replace \'d\' with \'n\'.","solution":"def min_operations_to_transform(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last character # and recur for remaining substring elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all # possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(min_operations_to_transform(s1, s2)) return results"},{"question":"Alice loves playing with strings. She recently came up with a new game in which she has two strings, A and B, of equal length, consisting of lowercase English letters. The goal of the game is to transform string A into string B by performing a series of operations. In each operation, she can: 1. Select any two consecutive characters in string A and swap them. Alice wants to know the minimum number of operations she needs to transform string A into string B. If it\'s not possible to transform string A into string B using the allowed operations, she should output -1. Input: The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of strings A and B. The second line contains the string A. The third line contains the string B. Output: Print the minimum number of operations needed to transform string A into string B. If it\'s not possible, print -1. Example: Input: 4 abdc abcd Output: 1 Explanation: In this example, Alice can swap the characters \'d\' and \'c\' in string A to get the string \'abcd\', which matches string B. Thus, only 1 operation is needed.","solution":"def min_operations_to_transform(n, A, B): Returns the minimum number of operations needed to transform string A into string B by swapping consecutive characters, or -1 if it\'s not possible. if sorted(A) != sorted(B): return -1 A = list(A) operations = 0 for i in range(n): if A[i] != B[i]: j = i while j < n and A[j] != B[i]: j += 1 for k in range(j, i, -1): A[k], A[k-1] = A[k-1], A[k] operations += 1 return operations"},{"question":"Yuuko owns a bakery and she has a peculiar liking for permutations and sorting. She has a sequence of n distinct integers, representing the amount of ingredients in each batch. Yuuko wants to check if she can sort the sequence in non-decreasing order by performing a specific operation at most once: Select any subsequence of the sequence and reverse it; the rest of the sequence remains in its original order. You need to help Yuuko determine if it\'s possible to sort the sequence by performing the above operation at most once. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) – the length of the sequence. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) – the elements of the sequence. Output \\"YES\\" if the sequence can be sorted by reversing at most one subsequence, otherwise, output \\"NO\\". # Examples: **Input:** ``` 5 3 2 1 4 5 ``` **Output:** ``` YES ``` **Input:** ``` 4 3 1 2 4 ``` **Output:** ``` NO ``` **Explanation:** - In the first example, you can reverse the subsequence from the first element to the third element (3, 2, 1) to get the sorted sequence (1, 2, 3, 4, 5). - In the second example, there\'s no single subsequence that can be reversed to make the entire sequence sorted in non-decreasing order.","solution":"def can_sort_by_reversing_subsequence(n, sequence): Determines if the sequence can be sorted by reversing at most one subsequence. Parameters: n (int): Length of the sequence. sequence (list of int): The sequence of distinct integers. Returns: str: \\"YES\\" if the sequence can be sorted by reversing at most one subsequence, otherwise \\"NO\\". if n == 1: return \\"YES\\" # Find the first part of the sequence where it is non-decreasing i = 0 while i < n - 1 and sequence[i] < sequence[i + 1]: i += 1 # Find the last part of the sequence where it is non-decreasing j = n - 1 while j > 0 and sequence[j] > sequence[j - 1]: j -= 1 # If the whole array is non-decreasing if i == n - 1: return \\"YES\\" # Reverse the sequence between i and j new_sequence = sequence[:i] + sequence[i:j + 1][::-1] + sequence[j + 1:] # Check if the new sequence is sorted if new_sequence == sorted(sequence): return \\"YES\\" else: return \\"NO\\""},{"question":"Alex has found a new game to play with his friend John. They have an array of n integers and play turn-based modifications on it. During each turn, a player chooses two different indices i and j (1 ≤ i, j ≤ n) and increments the value at index i by the value at index j. The game continues until one player cannot make any more moves. The player who cannot make a move loses. Both Alex and John play optimally, trying to win the game. Your task is to determine the winner if Alex always starts the game first. Input: - The first line of the input contains one integer t (1 leq t leq 10^5) — the number of games to consider. - Each of the next t lines contains a single integer n (2 leq n leq 10^5) followed by n integers denoting the elements of the array. Output: - For each game, print \\"Alex\\" if Alex wins the game and \\"John\\" if John wins the game. Example: ``` 3 3 1 2 3 2 1 0 4 5 1 7 8 ``` Output: ``` Alex John Alex ``` Explanation: 1. In the first game, Alex can perform a series of optimal moves until John has no move left. 2. In the second game, one of the values is zero, so John wins by not being forced to make any move. 3. In the third game, Alex can again play optimally and force John into a situation with no valid moves. Note: Both players choose their moves optimally to make the opponent lose, meaning every move must be carefully considered to ensure victory.","solution":"def game_winner(t, games): Determine who the winner is for each game given the number of games and the game configurations. Args: t (int): Number of games games (list of tuples): List of tuples where each tuple contains the length of the array and the array itself Returns: list: List of winners for each game, either \'Alex\' or \'John\'. winners = [] for i in range(t): n, arr = games[i] # If the smallest value in the array is zero, John wins because there are no valid moves left if min(arr) == 0: winners.append(\\"John\\") else: # Otherwise, Alex can always make a valid move initially winners.append(\\"Alex\\") return winners"},{"question":"You are tasked with designing a navigation system for a robot in a grid-based warehouse. The warehouse is represented by an m x n grid, where each cell can either be: - An open space (.) - A wall (#) - The robot\'s starting position (R) - The target position (T) The robot can move up, down, left, or right to any adjacent open space cell. It cannot move through walls. The robot\'s goal is to reach the target position in the minimum number of moves. Write a program that determines the minimum number of moves required for the robot to reach the target position. If it is impossible for the robot to reach the target, the program should output -1. **Input:** - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. - The next m lines each contain n characters — the grid representation. **Output:** - Output a single integer — the minimum number of moves required for the robot to reach the target, or -1 if it is impossible. **Example:** Input: ``` 5 5 R...# .#.#. .#..# .#. ...T. ``` Output: ``` 7 ``` In the example above, the robot needs to make 7 moves in the following sequence to reach the target: Right, Right, Down, Down, Right, Right, Down.","solution":"from collections import deque def min_moves(m, n, grid): def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != \'#\': yield nx, ny start = None target = None for i in range(m): for j in range(n): if grid[i][j] == \'R\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) if not start or not target: return -1 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == target: return dist for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Benjamin became fascinated with palindromes during his recent research. A palindrome is a string that reads the same both forwards and backwards. He stumbled upon a fascinating problem related to groups of palindromes and is seeking your help. Can you assist him in solving it? You are given a string s of length n consisting of lowercase English letters. Benjamin is interested in finding out how many distinct groups of substrings exist within s, where each substring is a palindrome. To clarify: - Two palindromic substrings belong to the same group if they are identical. - You need to count the number of such distinct groups of palindromic substrings in s. Your task is to write a program to determine the number of distinct groups of palindromic substrings in the given string s. The input consists of a single line containing the string s (1 le text{length} , s leq 10^5). The output should be a single integer, representing the number of distinct groups of palindromic substrings in the given string. # Example Input: ``` ababa ``` Output: ``` 5 ``` Explanation: The palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", and \\"bab\\". The distinct groups are {\\"a\\", \\"b\\", \\"aba\\", \\"bab\\"}. Hence, the output is 5. Input: ``` aaaaa ``` Output: ``` 5 ``` Explanation: Although there are many palindromic substrings (like \\"a\\", \\"aa\\", \\"aaa\\", \\"aaaa\\", \\"aaaaa\\"), the distinct groups are {\\"a\\", \\"aa\\", \\"aaa\\", \\"aaaa\\", \\"aaaaa\\"}. Hence, the output is 5.","solution":"def count_distinct_palindromes(s): Returns the number of distinct palindromic substrings in the string s. n = len(s) dp = [[False] * n for _ in range(n)] distinct_palindromes = set() for i in range(n): dp[i][i] = True distinct_palindromes.add(s[i:i+1]) for length in range(2, n + 1): for start in range(n - length + 1): end = start + length - 1 if s[start] == s[end]: if length == 2: dp[start][end] = True else: dp[start][end] = dp[start + 1][end - 1] if dp[start][end]: distinct_palindromes.add(s[start:end + 1]) return len(distinct_palindromes)"},{"question":"The Wandering Merchant has to deliver goods to several towns along a straight road. There are n towns on this road, and each town i has a demand of d_i goods. The merchant starts at town 1 with a cart that can carry a maximum of C goods. The merchant can only travel in one direction (forward) and deliver goods as he passes each town. If at any time the cart has fewer goods than the demand of the current town, the merchant must restock the cart from a depot, which incurs a fixed cost of R. The depot is at a fixed position before town 1 and can immediately restock the cart to its maximum capacity of C goods. The merchant seeks to minimize the total cost of restocking the cart as he travels from town 1 to town n. Help the merchant find this minimum cost. The first line of input contains three integers: n, C, and R (1 ≤ n ≤ 1000, 1 ≤ C, R ≤ 10000). The second line contains n integers, where the i-th integer represents the demand d_i of town i (0 ≤ d_i ≤ 10000). Print a single integer — the minimum total cost of restocking the cart to deliver all the goods as required. # Example **Input:** ``` 5 7 3 2 5 4 3 6 ``` **Output:** ``` 6 ``` **Explanation:** The merchant starts with 7 goods, which is the cart\'s maximum capacity. - Town 1 has a demand of 2 goods. Remaining goods = 5. - Town 2 has a demand of 5 goods. Remaining goods = 0. Cart needs restocking at town 3. - Restocking at town 3 costs 3. Cart is refilled to 7. - Town 3 has a demand of 4 goods. Remaining goods = 3. - Town 4 has a demand of 3 goods. Remaining goods = 0. Cart needs restocking at town 5. - Restocking at town 5 costs 3. Cart is refilled to 7. - Town 5 has a demand of 6 goods. Remaining goods = 1. Total restocking cost = 3 + 3 = 6.","solution":"def minimum_restock_cost(n, C, R, demands): remaining_goods = C total_cost = 0 for demand in demands: if remaining_goods < demand: total_cost += R # restock the cart remaining_goods = C remaining_goods -= demand return total_cost"},{"question":"You are given an array of integers representing the scores of students in a coding competition. Each student can submit multiple solutions, and each score in the array corresponds to a valid submission. Your task is to find the subarray with the maximum possible sum where no two consecutive elements are considered. Formally, you need to determine a subarray (possibly empty) such that no two elements in the subarray are consecutive in the original array, and the sum of the elements in the subarray is maximized. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000), the scores of the submissions. Output a single integer, the maximum sum possible under the given conditions. Example: Input: 5 3 2 5 10 7 Output: 15 Explanation: The subarray [3, 5, 7] provides the maximum sum where no two chosen elements are consecutive. Hence the result is 3 + 5 + 7 = 15.","solution":"def max_non_consecutive_sum(nums): n = len(nums) if n == 0: return 0 if n == 1: return max(0, nums[0]) # dp[i] will be the maximum sum possible till index i dp = [0] * n dp[0] = max(0, nums[0]) dp[1] = max(dp[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i], nums[i]) return dp[-1] # Sample test input_array = [3, 2, 5, 10, 7] print(max_non_consecutive_sum(input_array)) # Expected Output: 15"},{"question":"Given an integer `n`, find all prime numbers up to `n` (inclusive) that also remain prime if their digits are reversed. For example, for `n = 31`, the prime numbers up to `31` are: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]. From these, the primes that remain primes when their digits are reversed are: [2, 3, 5, 7, 11, 13, 17, 31]. The input consists of: - A single integer `n` (1 ≤ n ≤ 10^6). The output should contain all such primes in ascending order, separated by spaces. If no such primes exist, print `-1`. # Examples **Example 1:** Input: ``` 31 ``` Output: ``` 2 3 5 7 11 13 17 31 ``` **Example 2:** Input: ``` 20 ``` Output: ``` 2 3 5 7 11 13 17 ``` **Example 3:** Input: ``` 1 ``` Output: ``` -1 ```","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_reversible_primes(n): primes = [] for i in range(2, n + 1): if is_prime(i): reversed_num = int(str(i)[::-1]) if is_prime(reversed_num): primes.append(i) return primes if primes else [-1] # Example usage: find_reversible_primes(31) # Output: [2, 3, 5, 7, 11, 13, 17, 31]"},{"question":"Alex is exploring an ancient library containing numerous books with magical properties. Each book is represented by an integer, and there are `m` unique books in total. Recently, he discovered that certain books share magical connections — a connection is defined as a directed edge between two books `u` and `v`, meaning that book `u` can lead to book `v`. A book can have multiple connections leading from it to other books, or none at all. Alex is particularly interested in finding out which books are reachable starting from any given book, taking into account these connections. More specifically, he wants to know the number of distinct books he can reach starting from each book, including the starting book. Your task is to help Alex by writing an algorithm that outputs this information for each book. # Input - The first line contains an integer `m` (1 ≤ m ≤ 100), the number of unique books. - The second line contains an integer `k` (0 ≤ k ≤ 1000), the number of connections. - The following `k` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ m), representing a directed connection from book `u` to book `v`. # Output - Output `m` lines, where the `i-th` line contains the integer representing the number of distinct books Alex can reach starting from book `i` (1 ≤ i ≤ m). # Example Input ``` 5 4 1 2 2 3 1 3 4 5 ``` Output ``` 3 2 1 2 1 ``` # Explanation - Starting from book 1, Alex can reach books [1, 2, 3], thus the output for the first book is `3`. - Starting from book 2, Alex can reach books [2, 3], thus the output for the second book is `2`. - Starting from book 3, Alex can only reach book [3], thus the output for the third book is `1`. - Starting from book 4, Alex can reach books [4, 5], thus the output for the fourth book is `2`. - Starting from book 5, Alex can only reach book [5], thus the output for the fifth book is `1`.","solution":"def reachable_books(m, connections): from collections import defaultdict, deque def bfs(start, adjacency_list): visited = set() queue = deque([start]) while queue: current = queue.popleft() if current not in visited: visited.add(current) queue.extend(adjacency_list[current]) return len(visited) adjacency_list = defaultdict(list) for u, v in connections: adjacency_list[u].append(v) result = [] for i in range(1, m+1): result.append(bfs(i, adjacency_list)) return result # Example usage: # m = 5 # connections = [(1, 2), (2, 3), (1, 3), (4, 5)] # print(reachable_books(m, connections))"},{"question":"Sherlock Holmes has a new puzzle for you to solve. Given two strings, s and t, each consisting of lowercase English letters, you need to find the length of the longest common subsequence (LCS) between them. A subsequence is a sequence derived by deleting some or none of the characters from the string without changing the order of the remaining characters. For example, the LCS of \'abcdef\' and \'acdf\' is \'acdf\' with length 4. The first line contains a non-empty string s consisting of lowercase Latin letters. The second line contains another non-empty string t consisting of lowercase Latin letters. The lengths of both strings are in the range from 1 to 1000, inclusive. Print the only integer — the length of the longest common subsequence between s and t. For instance, given the string s = \\"abcde\\" and t = \\"ace\\", their LCS is \\"ace\\" with length 3. In another example, given the string s = \\"abc\\" and t = \\"abc\\", their LCS is \\"abc\\" with length 3. In the last example, given the string s = \\"abc\\" and t = \\"def\\", their LCS is an empty string with length 0.","solution":"def longest_common_subsequence(s, t): Returns the length of the longest common subsequence between strings s and t. # Create a 2D array to store lengths of longest common subsequence. # Initialize the matrix with zeros. dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)] # Build the matrix bottom-up for i in range(1, len(s) + 1): for j in range(1, len(t) + 1): if s[i - 1] == t[j - 1]: # If characters match, take the diagonal value and add 1 dp[i][j] = dp[i - 1][j - 1] + 1 else: # Else, take the maximum of the value from left and top cell dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[len(s)][len(t)]"},{"question":"A kingdom possesses a rectangular garden of dimensions m x n. The garden is subdivided into unit cells, each denoted by (i, j) where 1 ≤ i ≤ m and 1 ≤ j ≤ n. Each cell either contains a fruit tree or is empty. The king wishes to enclose one or more sections of the garden with fences to form rectangular areas such that each enclosed area contains at least one fruit tree, and no two enclosed areas overlap. Given the dimensions of the garden and its arrangement of cells (whether they contain a fruit tree or are empty), you need to determine the minimum number of fenced sections required to enclose all the fruit trees such that each enclosed area contains at least one tree and no enclosed areas overlap. The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the garden. The next m lines contain n characters each; each character is either \'T\' (representing a fruit tree) or \'.\' (representing an empty cell). Output a single integer – the minimum number of fenced sections required. For example, consider the garden layout: 4 4 .T.. ..T. .T.. .... In the above example, placing fences around (1, 2) to (1, 2), (2, 3) to (2, 3), and (3, 2) to (3, 2) will enclose all the fruit trees with 3 sections.","solution":"def min_fenced_sections(m, n, garden): visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() if i < 0 or i >= m or j < 0 or j >= n or garden[i][j] != \'T\' or visited[i][j]: continue visited[i][j] = True stack.append((i + 1, j)) stack.append((i - 1, j)) stack.append((i, j + 1)) stack.append((i, j - 1)) sections_count = 0 for i in range(m): for j in range(n): if garden[i][j] == \'T\' and not visited[i][j]: dfs(i, j) sections_count += 1 return sections_count"},{"question":"The city of Gridville is organized in a grid of n rows and m columns. Each cell in the grid may either be land or water. Percy the Penguin wants to travel from the top-left corner (1, 1) to the bottom-right corner (n, m) by only moving right, left, up, or down. However, Percy cannot move through water cells, he can only move through land cells. Percy wants to know if it\'s possible to travel from the top-left corner to the bottom-right corner. If it is possible, print the minimum number of moves Percy needs to make to travel from (1,1) to (n,m). If it is not possible, print \\"-1\\". The first line of input contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m characters: \'.\' for a land cell and \'#\' for a water cell. Print the minimum number of moves Percy needs to travel from the top-left corner to the bottom-right corner. If there is no such path, print \\"-1\\". Example: ``` Input: 4 4 .... ..#. ..#. .... Output: 6 ```","solution":"from collections import deque def min_moves(grid, n, m): Returns the minimum number of moves required for Percy to travel from (1,1) to (n,m) in a grid avoiding water cells. If not possible, returns -1. :param grid: List of strings representing land (\'.\') and water (\'#\') cells :param n: The number of rows in the grid :param m: The number of columns in the grid :return: Minimum number of moves to get from (1,1) to (n,m), or -1 if it\'s not possible if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited = set() visited.add((0, 0)) while queue: r, c, moves = queue.popleft() if r == n - 1 and c == m - 1: return moves # Reached the bottom-right corner for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, moves + 1)) return -1"},{"question":"Robin, an avid book reader, likes to keep track of the pages he reads each day. By the end of the month, he has a list of the number of pages he read each day. However, to better understand his reading habits, he wants to calculate two metrics: the maximum number of pages read in a single day and the average number of pages he read per day. Help Robin by writing a program that computes these two metrics. The input starts with an integer n (1 ≤ n ≤ 100), denoting the number of days in the month. It is followed by n space-separated integers d1, d2, ..., dn (0 ≤ di ≤ 1000), where di represents the number of pages read by Robin on the i-th day. The output should consist of two lines: 1. The maximum number of pages read in a single day. 2. The average number of pages read per day, rounded to two decimal places. # Input Format: The first line contains one integer n. The second line contains n space-separated integers representing the pages read on each day. # Output Format: Print the maximum and average number of pages in two separate lines. # Example: **Input:** ``` 5 10 20 30 40 50 ``` **Output:** ``` 50 30.00 ``` **Explanation:** The highest number of pages read in a single day is 50. The average number of pages read per day is (10 + 20 + 30 + 40 + 50) / 5 = 30.00.","solution":"def max_and_average_pages(n, pages): Returns the maximum number of pages read in a single day and the average number of pages read per day. Args: n : int : Number of days in the month. pages : list of int : List of pages read each day. Returns: max_pages : int : Maximum number of pages read in a single day. avg_pages : float : Average number of pages read per day rounded to two decimal places. max_pages = max(pages) avg_pages = round(sum(pages) / n, 2) return max_pages, avg_pages"},{"question":"You are given a string consisting of lowercase English letters. You need to find the smallest lexicographical string that can be obtained by deleting exactly one character from the given string. The first line of the input contains a single integer n (2 le n le 10^5) — the length of the string. The second line of the input contains a string of length n consisting of lowercase English letters. Print the smallest lexicographical string that can be obtained by deleting exactly one character from the given string. # Example Input ``` 5 abcda ``` Output ``` abca ``` Input ``` 4 bcda ``` Output ``` bca ``` # Note In the first example, by removing the last character \\"a\\", we obtain the string \\"abcd\\" which is not the smallest lexicographically. By removing the second-to-last character \\"d\\", we obtain the string \\"abca\\" which is the smallest in lexicographical order.","solution":"def smallest_lexico_string(n, s): Returns the smallest lexicographical string by deleting exactly one character from the given string. Parameters: n (int): Length of the string. s (str): Given string of length n. Returns: str: The smallest lexicographical string by deleting one character. for i in range(n - 1): if s[i] > s[i + 1]: return s[:i] + s[i + 1:] return s[:-1]"},{"question":"You are given an integer array a consisting of n positive integers. You need to process the array to maximize the sum of weighted elements, where the weight of an element at index i is defined as the product of the element itself and its index (1-based index). However, there is a constraint: you can remove at most one element from the array to achieve this maximum sum. If removing an element doesn\'t increase the sum, you can choose not to remove any element. Your task is to determine the maximum possible sum you can achieve under these conditions. The first line of the input contains one integer n (1 leq n leq 2 cdot 10^5) — the number of elements in the array. The second line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — the elements of the array. Print one integer — the maximum possible sum of weighted elements after removing at most one element. For the first test case: when considering the array [1, 2, 3], with no removal the sum is (1*1 + 2*2 + 3*3) = 1 + 4 + 9 = 14. By removing 2, the new sum is (1*1 + 3*2) = 1 + 6 = 7. For the second test case: the array is [5, 1], with no removals, the sum is (1*5 + 2*1) = 5 + 2 = 7. Removing 1 results in 5, which is not greater than 7. Therefore, we do not remove any element.","solution":"def max_weighted_sum_with_removal(n, a): Returns the maximum possible sum of weighted elements after removing at most one element. weighted_sum = lambda arr: sum((i + 1) * arr[i] for i in range(len(arr))) total_sum = sum(a[i] * (i + 1) for i in range(n)) max_sum = total_sum for i in range(n): current_sum = total_sum - a[i] * (i + 1) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A scientist is conducting an experiment in a lab with a special type of non-linear chemical reaction. The experiment involves two sequences of chemicals, represented as arrays of length n, each indexed from 1 to n. During the reaction, a new sequence of reactions is generated according to the following process: Let\'s denote the sequences by (A = [a_1, a_2, ..., a_n]) and (B = [b_1, b_2, ..., b_n]). The resulting sequence (C = [c_1, c_2, ..., c_n]) is calculated such that each element (c_i) is given by: [ c_i = (a_i * b_i) % k ] Here, (k) is a given integer constant. Given the sequences (A) and (B), and the constant (k), your task is to determine whether the resulting sequence (C) will have all unique elements. Write a function that computes the sequence (C) and returns whether all elements in (C) are distinct. # Input - The first line contains two integers (n) and (k) (1 ≤ (n) ≤ 100000, 1 ≤ (k) ≤ 1000000) — the length of the sequences and the constant (k). - The second line contains (n) integers (a_1, a_2, ..., a_n) (1 ≤ (a_i) ≤ 1000000) — the elements of the sequence (A). - The third line contains (n) integers (b_1, b_2, ..., b_n) (1 ≤ (b_i) ≤ 1000000) — the elements of the sequence (B). # Output Print \\"Yes\\" (without quotes) if the resulting sequence (C) has all unique elements. Otherwise, print \\"No\\". # Example Input ``` 5 10 1 2 3 4 5 10 9 8 7 6 ``` Output ``` No ``` Input ``` 5 100 1 2 3 4 5 10 20 30 40 50 ``` Output ``` Yes ``` # Note In the first example, the resulting sequence (C = [10, 18, 24, 28, 30]) which, when taken modulo (10), results in (C = [0, 8, 4, 8, 0]), and thus, it contains duplicates. Hence, the output is \\"No\\". In the second example, the resulting sequence (C = [10, 40, 90, 160, 250]) which, when taken modulo (100), results in (C = [10, 20, 30, 40, 50]), and thus all elements are distinct. Hence, the output is \\"Yes\\".","solution":"def unique_modulo_sequence(n, k, A, B): Determines whether the resulting sequence C = [(a_i * b_i) % k] has unique elements. Parameters: n (int): The length of sequences A and B. k (int): The constant for modulo operation. A (list of int): Sequence A. B (list of int): Sequence B. Returns: str: \\"Yes\\" if all elements in sequence C are unique, otherwise \\"No\\". C = [(A[i] * B[i]) % k for i in range(n)] if len(C) == len(set(C)): return \\"Yes\\" else: return \\"No\\""},{"question":"The company \\"Cardess\\" has recently launched a new loyalty program that rewards customers with points based on their purchases. Customers can earn points on each transaction according to the following rules: 1. For every transaction up to 50 (inclusive), a customer earns 1 point per dollar spent. 2. For every dollar spent over 50 and up to 100 (inclusive), a customer earns 2 points per dollar. 3. For every dollar spent over 100, a customer earns 3 points per dollar. For instance, if a customer spends 40, they earn 40 points. If they spend 70, they earn 50 points for the first 50 and 40 points for the next 20, totaling 90 points. If they spend 120, they earn 50 points for the first 50, 100 points for the next 50, and 60 points for the remaining 20, totaling 210 points. You are required to write a program that calculates the total loyalty points customers have accumulated over time based on their purchase history. # Input - The first line contains an integer, `n` (1 ≤ n ≤ 10^5), the number of transactions. - The next `n` lines each contain an integer, `transaction_i` (1 ≤ transaction_i ≤ 10^6), the amount spent in each transaction. # Output - Print a single integer, the total number of loyalty points accumulated over all transactions. # Example Input ``` 4 20 60 150 35 ``` Output ``` 565 ``` # Explanation Let\'s calculate the points earned from each transaction: - Transaction 1: 20 → 20 * 1 = 20 points - Transaction 2: 60 → 50 * 1 + 10 * 2 = 70 points - Transaction 3: 150 → 50 * 1 + 50 * 2 + 50 * 3 = 300 points - Transaction 4: 35 → 35 * 1 = 35 points Total points = 20 + 70 + 300 + 35 = 425.","solution":"def calculate_loyalty_points(n, transactions): Calculate total loyalty points based on the given rules. Parameters: n (int): number of transactions transactions (list of int): list of transaction amounts Returns: int: total loyalty points total_points = 0 for transaction in transactions: if transaction <= 50: total_points += transaction elif 50 < transaction <= 100: total_points += 50 + (transaction - 50) * 2 else: total_points += 50 + 50 * 2 + (transaction - 100) * 3 return total_points"},{"question":"Wolfgang is an avid researcher in the field of genetic sequences. He is currently working on understanding the evolutionary relationship between different species by analyzing their DNA strings. He needs to identify the longest common subsequence (LCS) between two given DNA strings. A DNA string is composed of four types of nucleotides: adenine (A), cytosine (C), guanine (G), and thymine (T). The longest common subsequence between two DNA strings is the longest sequence that can be derived from both original strings by deleting some characters (without reordering the remaining characters). Given two DNA strings s and t, find and print the length of their longest common subsequence. # Input The first line contains two integers n and m (1 leq n, m leq 5000) – the lengths of the DNA strings s and t respectively. The second line contains the DNA string s of length n. The third line contains the DNA string t of length m. # Output Print a single integer – the length of the longest common subsequence of the two given DNA strings. # Example Input ``` 5 6 ACGTA ACGCTA ``` Output ``` 5 ``` In this example, \\"ACGTA\\" is the longest common subsequence.","solution":"def longest_common_subsequence(n, m, s, t): Finds the length of the longest common subsequence between two DNA strings. Parameters: n (int): The length of the DNA string s. m (int): The length of the DNA string t. s (str): The first DNA string. t (str): The second DNA string. Returns: int: The length of the longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"You are given a string `s` of length `n` consisting only of lowercase alphabets. A substring is defined as a contiguous sequence of characters within the string. The \\"value\\" of a substring is defined as the sum of the ASCII values of its characters. Your task is to find the value of the longest substring in `s` whose characters are all unique. The first line contains a positive integer `n` (1 ≤ `n` ≤ 105) — the length of the string. The second line contains the string `s` of length `n`. Print the value of the longest substring with all unique characters. Example: Input: 6 abcabc Output: 294 Explanation: The substrings with all unique characters are \\"abc\\", \\"bca\\", \\"cab\\". Among them, \\"abc\\" has the highest value which is the sum of ASCII values of \'a\' (97), \'b\' (98), and \'c\' (99). Therefore, the value is 97 + 98 + 99 = 294.","solution":"def value_of_longest_unique_substring(s): n = len(s) max_val = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end current_val = sum(ord(s[i]) for i in range(start, end + 1)) max_val = max(max_val, current_val) return max_val # Example function usage n = 6 s = \\"abcabc\\" print(value_of_longest_unique_substring(s)) # Output: 294"},{"question":"Max has a wooden box with several different colored stones arranged in a line. He loves sorting things, so he wants to sort these stones in non-decreasing order based on their colors. However, Max can perform only a specific kind of operation to rearrange the stones: he can choose any subsequence of the stones and reverse it (a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements). Given the initial arrangement of the stones, determine the minimum number of operations required to sort the stones in non-decreasing order. The first line contains an integer n (2 le n le 500) — the number of stones. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the initial arrangement of the stones. Output a single integer — the minimum number of operations required to sort the arrangement of stones in non-decreasing order. For example: ``` Input: 5 2 3 1 4 5 Output: 1 Input: 6 4 2 1 3 5 6 Output: 2 ``` In the first example, you can reverse the subsequence [2, 3, 1] to get [1, 3, 2, 4, 5], which is sorted after another reversal of the subsequence [3, 2]. In the second example, you can reverse the subsequence [4, 2, 1] to get [1, 2, 4, 3, 5, 6], and then reverse the subsequence [4, 3] to achieve the sorted order [1, 2, 3, 4, 5, 6].","solution":"def min_operations_to_sort_stones(n, stones): Returns the minimum number of operations required to sort the stones in non-decreasing order using subsequence reversals. # Helper function to remove duplicates while maintaining order def remove_duplicates(l): seen = set() seen_add = seen.add return [x for x in l if not (x in seen or seen_add(x))] # Handle simple edge case where the array is already sorted if stones == sorted(stones): return 0 # Find Longest Increasing Subsequence (LIS) dp = [1] * n for i in range(1, n): for j in range(i): if stones[i] >= stones[j]: dp[i] = max(dp[i], dp[j] + 1) # The minimum number of operations required is (n - length of LIS) LIS_length = max(dp) return n - LIS_length"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex is assigned a unique label from 1 to n. The graph is initially disconnected, but we can perform the following operation: In a single operation, you can select any vertex and connect it via a new edge to any other vertex. This new edge can connect a vertex to any other vertex that is either directly or indirectly connected to the selected vertex. You aim to make the graph fully connected with the minimum number of such operations. Write a program to determine the minimum number of operations needed to make the graph fully connected. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The first line of each test case contains two integers n and m (2 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), the number of vertices and edges, respectively. The next m lines represent the edges, each containing two integers u and v (1 ≤ u, v ≤ n), denoting an edge between vertex u and vertex v. For each test case, output the minimum number of operations needed to make the graph fully connected. # Input - The first line of input contains an integer t, the number of test cases. - For each test case: - The first line contains two integers n and m. - The next m lines each contain two integers u and v, representing an edge between vertices u and v. # Output For each test case, output a single integer: the minimum number of operations needed to make the graph fully connected. # Example Input ``` 2 3 1 1 2 4 0 ``` Output ``` 1 3 ``` # Explanation In the first test case, we have 3 vertices and 1 edge. We can connect vertex 3 to vertex 1 (or 2) with one operation. In the second test case, no vertices are connected initially, so we need 3 operations to make the graph fully connected (e.g., connect vertex 1 to vertex 2, vertex 2 to vertex 3, and vertex 3 to vertex 4).","solution":"def make_graph_connected(test_cases): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True while queue: vertex = queue.popleft() for neighbor in graph[vertex]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) results = [] for n, m, edges in test_cases: graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for vertex in range(1, n + 1): if not visited[vertex]: bfs(vertex, visited, graph) components += 1 results.append(components - 1) return results"},{"question":"You are given a sequence of integers representing the heights of trees in a forest. Your task is to determine the length of the longest subsequence of these heights in which each element is strictly greater than the previous one. This is also known as the Longest Increasing Subsequence (LIS) problem. The first line contains a single integer n (1 le n le 10^5) — the number of trees in the forest. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^6) — the heights of the trees. Output a single integer — the length of the longest increasing subsequence of tree heights. # Example Input 5 3 10 2 1 20 Output 3 In the example above, one of the longest increasing subsequences is [3, 10, 20], so the length is 3.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest increasing subsequence. :param heights: List of tree heights. :return: Length of the longest increasing subsequence. if not heights: return 0 n = len(heights) dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In a futuristic world, the government has implemented a new way to regulate travel between cities using highways. The country consists of n cities connected by m one-way highways. Each highway has two parameters: a travel time and a toll fee. Highways with shorter travel times tend to have higher toll fees, and vice versa. Citizens are allowed to travel between cities using these highways, but they are allowed to pass through exactly k gates during their journey. A gate is a special checkpoint located at certain cities, and citizens must pass through exactly these gates in their traveling route from a start city to a destination city. The task is to determine the minimum travel time between two given cities while passing through exactly k gates. If it is not possible to reach the destination city from the start city by passing through exactly k gates, return -1. The first line of input contains three integers n, m, and k (1 ≤ n ≤ 300, 1 ≤ m ≤ 1000, 0 ≤ k ≤ 10) — the number of cities, highways, and gates respectively. The next m lines describe the highways. Each highway is described by four integers x, y, t, f (1 ≤ x, y ≤ n, 0 ≤ t, f ≤ 1000), which means there is a one-way highway from city x to city y that takes t units of travel time and has a toll fee of f. The following line contains k integers g1, g2, ..., gk (1 ≤ gi ≤ n) — the cities where the gates are located. The next line contains two integers s and d (1 ≤ s, d ≤ n) — the start city and the destination city. Output a single integer — the minimum travel time from the start city to the destination city passing through exactly k gates in any order. If it is impossible to travel following these rules, print -1. For example, consider a case where n = 5, m = 7, k = 2, highways are (1, 2, 2, 10), (2, 3, 4, 5), (3, 4, 1, 2), (4, 5, 3, 7), (1, 3, 1, 3), (3, 5, 5, 4), (1, 4, 7, 8), gates are (2, 4), start city s = 1 and destination city d = 5.","solution":"import heapq import sys from collections import defaultdict, deque def minimum_travel_time(n, m, k, highways, gates, start_city, dest_city): INF = sys.maxsize graph = defaultdict(list) for x, y, t, f in highways: graph[x].append((y, t)) gates = set(gates) # dp[node][gate_mask] represents the minimum time to reach `node` passing through gates represented in gate_mask dp = [[INF] * (1 << k) for _ in range(n + 1)] gate_index = {gates_list: i for i, gates_list in enumerate(gates)} if k else {} # start from start_city priority_queue = [(0, start_city, 0)] # (travel_time, node, gate_mask) dp[start_city][0] = 0 while priority_queue: curr_time, node, mask = heapq.heappop(priority_queue) if curr_time > dp[node][mask]: continue if node == dest_city and bin(mask).count(\'1\') == k: return curr_time for neighbor, travel_time in graph[node]: new_mask = mask if neighbor in gates: new_mask |= 1 << gate_index[neighbor] if dp[neighbor][new_mask] > curr_time + travel_time: dp[neighbor][new_mask] = curr_time + travel_time heapq.heappush(priority_queue, (dp[neighbor][new_mask], neighbor, new_mask)) return -1"},{"question":"Alice has recently become interested in number theory. She invents a unique game using arrays of integers. Given an array of n integers, she classifies it as interesting if it satisfies the following conditions: 1. The sum of the entire array is even. 2. The sum of each half of the array, when split into two equal parts, is also even. If n is odd, only consider the first floor(n/2) elements in the first half and the remaining in the second half. Alice needs your help to determine if a given array is interesting. Write a program that checks whether a given array meets Alice\'s criteria. Input: - The first line contains a single integer n (1 ≤ n ≤ 200,000) – the number of elements in the array. - The second line contains n integers a1, a2, ..., an (|ai| ≤ 10,000) – the elements of the array. Output: - A single line containing \\"YES\\" if the array is interesting, otherwise \\"NO\\". Examples: Input: 6 2 4 6 8 10 12 Output: YES Input: 5 1 2 3 4 5 Output: NO In the first example: - The sum of the entire array is 42, which is even. - The first half of the array is [2, 4, 6], which sums to 12 - even. - The second half of the array is [8, 10, 12], which sums to 30 - even. Thus, the output is \\"YES\\". In the second example: - The sum of the entire array is 15, which is odd. Thus, the output is \\"NO\\".","solution":"def is_interesting_array(n, arr): Determines if the array satisfies the interesting properties. Parameters: n (int): The number of elements in the array. arr (list of int): The array of integers. Returns: str: \\"YES\\" if the array is interesting, otherwise \\"NO\\". total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" half = n // 2 first_half_sum = sum(arr[:half]) second_half_sum = sum(arr[half:]) if first_half_sum % 2 == 0 and second_half_sum % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string s consisting of lowercase English letters. Define the value of a substring as the number of distinct letters it contains. Find the length of the shortest substring of string s which contains every distinct letter that appears in s at least once. The first line is a single integer n (1 le n le 200 000), the length of the string s. The second line contains the string s consisting of n lowercase English letters. Output the length of the shortest substring of s that contains every distinct letter from s. For example, if the string is \\"abcabcbb\\", the substring \\"abc\\" is the shortest that contains all distinct letters \'a\', \'b\', and \'c\'. So, the output should be 3. In another example, if the string is \\"aaaccbb\\", the shortest such substring is \\"accb\\" which has length 4.","solution":"def min_length_substring(s): from collections import Counter, defaultdict n = len(s) distinct_chars = set(s) required_char_count = len(distinct_chars) left, right = 0, 0 char_count = defaultdict(int) formed = 0 min_len = float(\'inf\') min_len_substr = \\"\\" while right < n: char_count[s[right]] += 1 if char_count[s[right]] == 1: formed += 1 while left <= right and formed == required_char_count: if right - left + 1 < min_len: min_len = right - left + 1 min_len_substr = s[left:right+1] char_count[s[left]] -= 1 if char_count[s[left]] == 0: formed -= 1 left += 1 right += 1 return min_len"},{"question":"Given a list of integers representing the energy levels of n particles, your task is to determine the maximum possible energy level a single particle can reach by absorbing other particles. A particle can absorb another particle if and only if it has a higher energy level. When a particle absorbs another particle, its energy level increases by the energy level of the absorbed particle. For example, if the initial energy levels of the particles are [5, 1, 3, 2, 4], one possible sequence of absorptions is: [5, 1, 3, 2, underline{4}], where the particle with energy level 5 absorbs the particle with energy level 4, resulting in [5+4, 1, 3, 2] = [9, 1, 3, 2]. The maximum energy level that can be reached in this example is 9. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of particles. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the energy levels of the particles. Print the maximum possible energy level a single particle can reach. For example: Input: ``` 5 5 1 3 2 4 ``` Output: ``` 9 ``` Another example: Input: ``` 3 6 2 1 ``` Output: ``` 6 ``` Explanation: In this case, since no particle can absorb any of the others as they do not have higher energy levels, the highest achievable energy level remains 6.","solution":"def max_energy_level(n, energy_levels): Determines the maximum possible energy level a single particle can reach by absorbing other particles. Parameters: n (int): The number of particles. energy_levels (List[int]): The energy levels of the particles. Returns: int: The maximum possible energy level. # Sort the energy levels in non-decreasing order energy_levels.sort() # Initialize the maximum energy level with the highest single particle energy level max_energy = energy_levels[-1] # Iterate from the second highest to the lowest energy level for i in range(n-2, -1, -1): # A particle can absorb another particle if its energy level is higher max_energy += energy_levels[i] return max_energy"},{"question":"Misha loves playing with numbers and mathematical operations. One day, he came across the concept of modular arithmetic and found it intriguing. He has two integers a and b. He wants to compute (a^b) % m efficiently, where \\"^\\" denotes exponentiation. Given a, b, and m, help Misha compute the result. The first line of input contains three space-separated integers a, b, and m (1 ≤ a, b, m ≤ 10^9). Output a single integer which is the result of (a^b) % m. For example: Input: 2 5 13 Output: 6 Explanation: 2^5 = 32. 32 % 13 = 6. Hence the output is 6.","solution":"def modular_exponentiation(a, b, m): Computes (a^b) % m efficiently using the method of exponentiation by squaring. result = 1 a = a % m # Update a if it\'s more than or equal to m while b > 0: # If b is odd, multiply a with the result if (b % 2) == 1: result = (result * a) % m # b must be even now b = b >> 1 # Divide b by 2 a = (a * a) % m # Change a to a^2 return result"},{"question":"The company aims to organize a coding competition where participants will provide solutions to a problem involving numbers. They want each participant to submit a sequence of n integers such that no two consecutive integers have the same number of divisors. The first line contains one integer n (1 ≤ n ≤ 1000) — the length of the sequence. Print a sequence of n integers separated by spaces where no two consecutive integers have the same number of divisors. It’s guaranteed that such a sequence always exists. **Input:** ``` The first line contains one integer n (1 ≤ n ≤ 1000) — the length of the sequence. ``` **Output:** ``` Print a sequence of n integers separated by spaces where no two consecutive integers have the same number of divisors. ``` **Example:** ``` Input 5 Output 1 2 4 6 10 ``` The sequence in the example output is 1, 2, 4, 6, 10 where: - 1 has 1 divisor, - 2 has 2 divisors, - 4 has 3 divisors, - 6 has 4 divisors, and - 10 has 4 divisors. Notice that no two consecutive integers in the sequence have the same number of divisors.","solution":"def number_of_divisors(x): Helper function to count the number of divisors of a given integer x. count = 0 for i in range(1, int(x ** 0.5) + 1): if x % i == 0: if i * i == x: count += 1 else: count += 2 return count def generate_sequence(n): Generates a sequence of n integers where no two consecutive integers have the same number of divisors. sequence = [1] # Start with the first number 1 current_number = 2 while len(sequence) < n: if number_of_divisors(current_number) != number_of_divisors(sequence[-1]): sequence.append(current_number) current_number += 1 return sequence # Example usage n = 5 print(generate_sequence(n))"},{"question":"You are given an array of integers. Your task is to create a new array where each element at index i is the product of all the numbers in the original array except the one at index i. Write a function called `productExceptSelf` that takes an array of integers as its parameter and returns an array of integers as described above. The function should handle arrays with zero values and ensure that the solution works in O(n) time complexity without using division operation. # Function Signature ```python def productExceptSelf(nums: List[int]) -> List[int]: ``` # Input - An array of integers `nums`, where `1 <= nums.length <= 10^5` and `-30 <= nums[i] <= 30`. # Output - An array where for each index i, the value is the product of all elements of `nums` except `nums[i]`. # Example ```python assert productExceptSelf([1, 2, 3, 4]) == [24, 12, 8, 6] assert productExceptSelf([0, 4, 7]) == [28, 0, 0] assert productExceptSelf([-1, 2, -3]) == [-6, 3, -2] assert productExceptSelf([10]) == [1] ``` Note: You should not use the division operation, and the algorithm should run in O(n) time complexity.","solution":"from typing import List def productExceptSelf(nums: List[int]) -> List[int]: Returns an array where each element at index i is the product of all the numbers in the original array except the one at index i. n = len(nums) if n == 0: return [] # Initialize the result array with 1s result = [1] * n # Create prefix products prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] # Create suffix products and multiply with prefix products suffix = 1 for i in range(n - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"You are managing a database system that handles data entries for a large organization. The system\'s performance heavily relies on efficient data allocation and retrieval, and each data entry request specifies a range of keys it needs to access. Your task is to calculate the minimum number of data centers required to ensure each key in the specified ranges can be accessed quickly. The data center requirements can be simplified as follows: - Each data center can handle a continuous range of keys. - Given a list of key ranges, you need to allocate the minimum number of continuous key ranges to different data centers to cover all requested key ranges. For example, if the key ranges are [1, 4], [2, 5], and [6, 10], you can allocate the ranges [1, 5] and [6, 10] to two data centers. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^6), the number of key ranges. - The next n lines each contain two integers l and r (1 ≤ l ≤ r ≤ 10^9), representing the inclusive endpoints of each key range. Output: - Print a single integer representing the minimum number of data centers required to cover all the key ranges. Example: Input: 3 1 4 2 5 6 10 Output: 2 Explanation: The first and second ranges can be covered by one data center with the range [1, 5], and the third range can be covered by another data center with the range [6, 10]. Thus, a minimum of 2 data centers is needed.","solution":"def min_data_centers(n, key_ranges): Returns the minimum number of data centers required to cover all key ranges. Parameters: n (int): The number of key ranges. key_ranges (List[Tuple[int, int]]): The list of inclusive key ranges. Returns: int: The minimum number of data centers required. # Sorting the key ranges based on the starting point key_ranges.sort() # Initializing variables data_centers = 0 current_end = -float(\'inf\') for start, end in key_ranges: if start > current_end: # We need a new data center since there\'s a gap data_centers += 1 current_end = end else: # We can extend the current data center\'s range current_end = max(current_end, end) return data_centers"},{"question":"Maria loves to collect unique flower species and learn their characteristics. She has a garden with multiple plots arranged in a straight line. Each plot can contain a different species of flower. Due to space limitations, Maria wants to rearrange her garden to maximize the number of distinct species present within any continuous subsegment of k plots. You are given the number of plots n, and the array of flower species of length n, where each element represents the species present in the corresponding plot. Also given is the integer k, representing the length of the continuous subsegment. Your task is to find the maximum number of distinct species in any subsegment of length k. # Input - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) - the number of plots and the length of the subsegment respectively. - The second line contains n space-separated integers, where the i-th integer represents the species of the flower in the i-th plot. The species are represented as positive integers. # Output - Print a single integer - the maximum number of distinct species in any subsegment of length k. # Example Input ``` 7 3 1 2 1 3 4 2 3 ``` Output ``` 3 ``` Explanation The continuous subsegments of length 3 are: - [1, 2, 1] with 2 distinct species, - [2, 1, 3] with 3 distinct species, - [1, 3, 4] with 3 distinct species, - [3, 4, 2] with 3 distinct species, - [4, 2, 3] with 3 distinct species. The maximum number of distinct species in any subsegment of length 3 is 3.","solution":"def max_distinct_species(n, k, species): Returns the maximum number of distinct species in any subsegment of length k. Parameters: n (int): Number of plots. k (int): Length of the subsegment. species (list of int): List of species in each plot. Returns: int: Maximum number of distinct species in any subsegment of length k. from collections import defaultdict species_count = defaultdict(int) max_distinct = 0 current_distinct = 0 # Initialize the first subsegment for i in range(k): if species_count[species[i]] == 0: current_distinct += 1 species_count[species[i]] += 1 max_distinct = current_distinct # Slide the window across the plot line for i in range(k, n): # Remove the first element of the previous subsegment if species_count[species[i - k]] == 1: current_distinct -= 1 species_count[species[i - k]] -= 1 # Add the new element of the current subsegment if species_count[species[i]] == 0: current_distinct += 1 species_count[species[i]] += 1 # Update the maximum distinct species count max_distinct = max(max_distinct, current_distinct) return max_distinct # Example usage n = 7 k = 3 species = [1, 2, 1, 3, 4, 2, 3] print(max_distinct_species(n, k, species)) # Output: 3"},{"question":"In a distant kingdom, the treasury is filled with magical coins. Each coin has a certain positive integer value. King Arthur wants to divide the coin collection into two groups such that the absolute difference between the total value of the coins in the two groups is minimized. But there is a catch: he can only divide the coins if each group has at least one coin. Given a list of coin values, determine the minimum possible absolute difference between the total values of the two groups when divided optimally. The first line of input contains a single integer n (2 ≤ n ≤ 100), representing the number of coins. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the value of each coin. Output a single integer, which is the minimum possible absolute difference between the total values of the two groups. # Example **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 0 ``` In this example, one optimal division is [1, 4] and [2, 3], both groups have a total value of 5. **Note:** In another example, with input: ``` 3 8 3 1 ``` The output would be `4` because optimal division could be [8] and [3, 1], with group totals of 8 and 4 respectively, giving an absolute difference of 4.","solution":"def min_difference(n, coins): total_sum = sum(coins) # We\'re using a dynamic programming approach to solve the subset sum problem. dp = [False] * (total_sum // 2 + 1) dp[0] = True for coin in coins: for j in range(total_sum // 2, coin - 1, -1): if dp[j - coin]: dp[j] = True for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"You are given a list of strings consisting of lowercase English letters. The task is to transform this list into a list where each string is sorted in non-descending order of characters. After sorting each string, check if all the strings in the transformed list are lexicographically sorted. If the list is already sorted in lexicographical order after transformations, print \\"YES\\". Otherwise, print \\"NO\\". For example, given the input list [\\"bca\\", \\"acb\\", \\"abc\\"], the transformed list would be [\\"abc\\", \\"abc\\", \\"abc\\"], which is sorted in lexicographical order, so the answer is \\"YES\\". However, given the input list [\\"bca\\", \\"cab\\", \\"bac\\"], the transformed list would be [\\"abc\\", \\"abc\\", \\"abc\\"], which is also sorted in lexicographical order, so the answer would still be \\"YES\\". # Input - The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. - Each test case consists of a single line containing an integer n (1 ≤ n ≤ 2·10^5) — the length of the list, followed by n space-separated strings. - It is guaranteed that the sum of all n across all test cases does not exceed 2·10^5. # Output - For each test case, print \\"YES\\" if the transformed list is sorted in lexicographical order and \\"NO\\" otherwise. # Example Input ``` 2 3 bca acb abc 3 bca cab bac ``` Output ``` YES YES ```","solution":"def is_lexicographically_sorted(test_cases): results = [] for case in test_cases: n, strings = case[0], case[1] sorted_strings = [\'\'.join(sorted(s)) for s in strings] if sorted_strings == sorted(sorted_strings): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of n distinct integers. Find the length of the longest subsequence which forms an arithmetic progression (AP). A subsequence is derived from the original sequence by deleting some or no elements without changing the order of the remaining elements. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the sequence. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. Output one integer — the length of the longest subsequence of the sequence which forms an arithmetic progression. For example, for the sequence 5, 7, 10, 15, one possible longest AP subsequence is 5, 10, 15 with length 3. In the first example, for the sequence 3, 6, 9, 12, the longest AP subsequence is the entire sequence, with length 4. In the second example, for the sequence 1, 4, 7, 10, the longest AP subsequence is the entire sequence, with length 4.","solution":"def longest_ap_subsequence(n, sequence): if n == 1: return 1 dp = {} max_len = 1 for i in range(n): for j in range(i + 1, n): diff = sequence[j] - sequence[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 max_len = max(max_len, dp[(j, diff)]) return max_len"},{"question":"Zara is a skilled archer participating in a unique competition. The competition is formatted in rounds, where each round consists of her shooting an arrow towards a rectangular target of size n × m. The target has multiple scoring zones, which are represented by points in a 2D grid. Each zone has a certain score that adds up to her total score as she hits them. Zara can shoot up to k arrows, and the location of each scoring zone is provided along with the score Zara gets for hitting that zone. Zara always aims to maximize her score by hitting the highest scoring zones available. You are given the dimensions of the target, the number of scoring zones, and the coordinates and scores of each zone. Determine the maximum score Zara can achieve after shooting k arrows, assuming she hits a different scoring zone with each arrow. # Input - The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 100) — the dimensions of the target and the number of arrows. - The second line contains an integer z (1 ≤ z ≤ 1000) — the number of scoring zones. - Each of the next z lines contains three integers xi, yi, and si (1 ≤ xi ≤ n, 1 ≤ yi ≤ m, 1 ≤ si ≤ 1000) — the coordinates (xi, yi) of the scoring zone and the score si for hitting that zone. # Output Print a single integer — the maximum score Zara can achieve with k arrows. # Example Input ``` 10 10 3 5 2 3 100 4 5 200 6 7 150 8 9 300 1 4 250 ``` Output ``` 750 ``` Explanation In this example, Zara has 3 arrows to use and aims to maximize her score. By choosing the scoring zones with the highest values (300, 250, and 200), she achieves a maximum score of 750.","solution":"def max_score(n, m, k, z, scoring_zones): Determines the maximum score Zara can achieve by shooting k arrows at the specified scoring zones. Parameters: n (int): The number of rows of the target. m (int): The number of columns of the target. k (int): The number of arrows Zara can shoot. z (int): The number of scoring zones on the target. scoring_zones (list of tuples): Each tuple contains three integers (xi, yi, si) representing the coordinates (xi, yi) of the scoring zone and the score si for hitting that zone. Returns: int: The maximum score Zara can achieve. # Extract scores from the scoring_zones and sort in descending order scores = sorted([si for _, _, si in scoring_zones], reverse=True) # Take the highest k scores max_score = sum(scores[:k]) return max_score # Example usage: # n = 10, m = 10, k = 3 # z = 5 # scoring_zones = [(2, 3, 100), (4, 5, 200), (6, 7, 150), (8, 9, 300), (1, 4, 250)] # Output should be 750 print(max_score(10, 10, 3, 5, [(2, 3, 100), (4, 5, 200), (6, 7, 150), (8, 9, 300), (1, 4, 250)]))"},{"question":"Given a list of job applicants and their respective skill scores, you need to find a team of exactly three members such that the sum of their skill scores is the highest possible among all possible teams of three. The first line contains an integer n (3 le n leq 10^5) — the number of applicants. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the skill scores of the applicants. Output three integers representing the skill scores of the selected team members, in non-decreasing order. If there are multiple teams with the same highest skill score sum, you may output any of them. For example, given input: ``` 5 1 2 3 4 5 ``` One of the valid outputs would be: ``` 3 4 5 ``` In this case, the sum of the scores is 12, which is the highest possible sum for a team of three from the given list.","solution":"def highest_skill_team(n, skills): Given a list of job applicants and their respective skill scores, returns a team of exactly three members such that the sum of their skill scores is the highest possible among all possible teams of three. Parameters: - n: int, number of applicants - skills: list of int, skill scores of the applicants Returns: - list of int, three skill scores in non-decreasing order # Sort the skill scores in descending order skills.sort(reverse=True) # Select the top 3 skill scores team = skills[:3] # Sort the team in non-decreasing order before returning team.sort() return team"},{"question":"Due to a recent surge in demand for new pets, Alex has decided to open a new pet store. He has a warehouse with `n` different types of pet items for the store\'s inventory. Each item `i` is represented by a tuple `(item_id, stock_level, demand_rate)`, where `item_id` is a unique identifier for the item, `stock_level` is the current number of that item in stock, and `demand_rate` is a non-negative integer representing how many units of that item are expected to be sold per day. Each day, Alex plans to ship a certain number of units from the warehouse to the store. Alex wants to ensure that he never runs out of stock for any item in his pet store. He needs your help to figure out the maximum number of continuous days that he can effectively supply the pet store without running out of any item. If the demand rate for an item is `0`, it means there is no demand for that item, and it does not affect the maximum number of days. Write a program to help Alex determine the maximum number of continuous days he can supply the pet store without running out of any item. # Input The first line contains an integer `n` (`1 ≤ n ≤ 1000`) — the number of different types of items in the warehouse. The next `n` lines each contain three integers: `item_id` (1 ≤ `item_id` ≤ 10^6), `stock_level` (1 ≤ `stock_level` ≤ 10^9), and `demand_rate` (0 ≤ `demand_rate` ≤ 100). # Output Output a single integer — the maximum number of continuous days Alex can supply the pet store without running out of any item. # Sample Input ``` 3 1 10 2 2 15 0 3 20 4 ``` # Sample Output ``` 2 ``` # Explanation Alex has 3 items. The first item has a demand rate of 2 units per day and a stock of 10 units, meaning it will last for 5 days. The second item has a demand rate of 0 units per day and therefore has an infinite duration as there is no demand. The third item has a demand rate of 4 units per day and a stock of 20 units, which will last for 5 days. The maximum number of continuous days Alex can supply the store without running out of stock is determined by the item with the highest demand rate relative to its stock level. Thus, the answer is 5 days.","solution":"def max_days_supply(n, items): Returns the maximum number of continuous days the pet store can be supplied without running out of any item. :param n: Number of different types of items :param items: List of tuples (item_id, stock_level, demand_rate) for each item :return: Maximum number of continuous days the pet store can be supplied min_days = float(\'inf\') for item_id, stock_level, demand_rate in items: if demand_rate > 0: item_days = stock_level // demand_rate # Integer division min_days = min(min_days, item_days) # If all demand rates are 0, the pet store can be supplied indefinitely if min_days == float(\'inf\'): return -1 # Indicate indefinite supply return min_days"},{"question":"Vasya is organizing a tree planting project in a park represented by an undirected graph with n vertices and m edges. Each vertex represents a location where he can plant a tree, and each edge represents a pathway between locations. Vasya plans to plant exactly k trees, and he wants to maximize the minimum distance between any two trees to ensure they have enough space to grow. To do this, he needs to determine the optimal vertices where the trees should be planted to achieve the maximum possible minimum distance between any two trees. The first line of input contains three integers n, m, and k (1 ≤ k ≤ n ≤ 3000, 0 ≤ m ≤ 4500) — the number of vertices, edges, and the number of trees to be planted, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an edge between vertices u and v. It is guaranteed that the graph is connected. Output k integers — the indices of the vertices where the trees should be planted to maximize the minimum distance between any two trees. If there are multiple solutions, output any of them. Example input: ``` 5 4 2 1 2 2 3 3 4 4 5 ``` Example output: ``` 1 5 ``` In this example, planting a tree at vertex 1 and another at vertex 5 ensures that the minimum distance between these two trees is maximized, which is 4 in this case.","solution":"from collections import deque, defaultdict def bfs(graph, start, n): distances = [-1] * n distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: # Not visited distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances def get_optimal_trees(n, m, k, edges): # Build the graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Get all-pairs shortest paths using BFS all_pairs_shortest_paths = [] for i in range(n): all_pairs_shortest_paths.append(bfs(graph, i, n)) # Binary search for the maximum minimum distance def can_place_trees(min_distance): # Use BFS to find the maximum number of trees we can place start_vertex = 0 visited = [False] * n selected = [] queue = deque([start_vertex]) while queue and len(selected) < k: node = queue.popleft() if visited[node]: continue visited[node] = True can_be_added = True for placed_tree in selected: if all_pairs_shortest_paths[node][placed_tree] < min_distance: can_be_added = False break if can_be_added: selected.append(node) if len(selected) == k: return True for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return False left, right = 0, max(max(distances) for distances in all_pairs_shortest_paths) while left < right: mid = (left + right + 1) // 2 if can_place_trees(mid): left = mid else: right = mid - 1 min_distance = left # Find the actual positions start_vertex = 0 visited = [False] * n selected = [] queue = deque([start_vertex]) while queue and len(selected) < k: node = queue.popleft() if visited[node]: continue visited[node] = True can_be_added = True for placed_tree in selected: if all_pairs_shortest_paths[node][placed_tree] < min_distance: can_be_added = False break if can_be_added: selected.append(node) if len(selected) == k: return [x+1 for x in selected] for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return [] # Example usage: n, m, k = 5, 4, 2 edges = [(1, 2), (2, 3), (3, 4), (4, 5)] print(get_optimal_trees(n, m, k, edges)) # Output should be [1, 5] or equivalent"},{"question":"You are given a square matrix of size ( n times n ) containing integers. Your task is to find the maximum sum of any hourglass-shaped sub-matrix within the given matrix. An hourglass in the matrix is formed by choosing a 3x3 subset of elements with the following pattern: ``` a b c d e f g ``` where (a, b, c, d, e, f, g) are elements in the matrix. You need to write a function that takes as input a 2D list of integers representing the matrix, and returns an integer which is the maximum hourglass sum. **Function Signature:** ```python def max_hourglass_sum(matrix: List[List[int]]) -> int: pass ``` **Input Constraints:** - The size of the matrix ( n ) will be between 3 and 6 (inclusive). - Each element in the matrix will be an integer in the range ([-9, 9]). **Output:** - Return the maximum hourglass sum found in the matrix. **Example:** ```python matrix = [ [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 2, 4, 4, 0], [0, 0, 0, 2, 0, 0], [0, 0, 1, 2, 4, 0] ] assert max_hourglass_sum(matrix) == 19 ``` In the provided example, the hourglass with the maximum sum is: ``` 2 4 4 2 1 2 4 ``` which gives the sum (2 + 4 + 4 + 2 + 1 + 2 + 4 = 19). Good luck!","solution":"from typing import List def max_hourglass_sum(matrix: List[List[int]]) -> int: Returns the maximum hourglass sum in the given square matrix. n = len(matrix) max_sum = float(\'-inf\') for i in range(n - 2): for j in range(n - 2): # Calculate hourglass sum for center [i+1][j+1] current_sum = ( matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i+1][j+1] + matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2] ) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a binary tree. Your task is to find all the root-to-leaf paths such that the sum of the node values in the path equals a given target sum. Each path should be returned as a list of the node values. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. The second line contains n integers v1, v2, ..., vn — the values of the nodes in the binary tree. The next n-1 lines each contains two integers a and b — indicating that there is an edge between node a and node b. The last line contains an integer S (1 ≤ S ≤ 10^9) — the target sum. Print the number of such paths, followed by each path on a new line. If there are multiple paths, print any of them. Example: ``` Input: 5 5 4 8 11 13 1 2 1 3 2 4 2 5 22 Output: 1 5 4 11 ``` Explanation: The binary tree looks like this: ``` 5 / 4 8 / 11 13 ``` There\'s only one root-to-leaf path that sums up to the target 22: 5 -> 4 -> 11.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def path_sum_helper(node, target_sum): if not node: return [] if not node.left and not node.right: # if it\'s a leaf node if node.val == target_sum: return [[node.val]] else: return [] paths = [] left_paths = path_sum_helper(node.left, target_sum - node.val) right_paths = path_sum_helper(node.right, target_sum - node.val) for path in left_paths + right_paths: paths.append([node.val] + path) return paths def path_sum(root, sum_value): return path_sum_helper(root, sum_value)"},{"question":"Sasha loves collecting data. He has a very peculiar way of doing it though: he only collects data on the numbers he calls \\"special numbers\\". A number is \\"special\\" if it is divisible by both 3 and 5. Sasha has a collection of data on the first n positive integers. He now wants to know how many \\"special numbers\\" he has collected data on, for a given range of q queries. The first line contains one integer q (1 le q le 10^5) — the number of queries. Each of the next q lines contains a query represented by a pair of integers l and r (1 le l le r le 10^{18}) — the range for which Sasha needs to determine the number of \\"special numbers\\". For each query, print one integer — the count of \\"special numbers\\" in the range [l, r]. # Examples: Input: ``` 2 1 15 10 30 ``` Output: ``` 1 3 ``` # Explanation: - In the first query, the \\"special numbers\\" between 1 and 15 are {15} - In the second query, the \\"special numbers\\" between 10 and 30 are {15, 30}","solution":"def count_special_numbers_in_range(l, r): def count_special_numbers(n): if n < 15: return 0 return n // 15 return count_special_numbers(r) - count_special_numbers(l - 1) def process_queries(queries): results = [] for l, r in queries: results.append(count_special_numbers_in_range(l, r)) return results"},{"question":"There is a large company with its headquarters located in one of n cities. They need to establish a regional office in one of the other n-1 cities. The cost to establish a regional office in a city depends on the distance between that city and the headquarters. You are given a list of `n` cities and the distances between each pair of cities. The headquarters is always in the first city (city 1). Your task is to determine the minimum cost city to establish a regional office such that the distance between the headquarters (city 1) and the regional office is minimized. The first line of the input contains one integer `n` (2 ≤ n ≤ 100) — the number of cities. The following `n-1` lines each contain one integer di (1 ≤ di ≤ 1000), the distance between city 1 and city i+1. Output a single integer — the minimum cost to establish the regional office. **Examples** **Input:** 4 3 2 5 **Output:** 2 **Input:** 3 7 4 **Output:** 4","solution":"def minimum_cost_to_establish_office(n, distances): Finds the minimum cost city to establish a regional office. Parameters: n (int): The number of cities. distances (list): A list of integers where the i-th element is the distance of city i+1 from city 1. Returns: int: The minimum distance from city 1 to any other city. if n < 2: raise ValueError(\\"Number of cities must be at least 2.\\") if len(distances) != n - 1: raise ValueError(\\"The length of distances must be n - 1.\\") return min(distances)"},{"question":"Eve loves solving puzzles and came across a unique grid challenge. The challenge is to determine the sum of all integers in a rectangular subgrid within a given larger grid. You are given a 2D grid of size n times m, filled with integers. Following this grid, a series of queries q is given, where each query specifies the top-left and bottom-right coordinates of a subgrid. For each query, you need to compute the sum of all integers contained within the specified subgrid. The first line contains three integers n, m, and q (1 le n, m le 1000, 1 le q le 50000) — the number of rows, the number of columns, and the number of queries, respectively. The next n lines each contain m integers, representing the grid. Each of the next q lines contains four integers r1, c1, r2, c2 (0 le r1 le r2 < n, 0 le c1 le c2 < m) — the coordinates of the top-left and bottom-right corners of the subgrid. Output q integers, each representing the sum of the integers in the specified subgrid. **Example:** Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 0 0 1 1 1 1 2 2 ``` Output: ``` 12 28 ``` **Explanation:** For the first query, the subgrid is: ``` 1 2 4 5 ``` The sum of all elements in this subgrid is 1 + 2 + 4 + 5 = 12. For the second query, the subgrid is: ``` 5 6 8 9 ``` The sum of all elements in this subgrid is 5 + 6 + 8 + 9 = 28.","solution":"def compute_subgrid_sums(grid, queries): Compute the sums of all integers in specified subgrids of a given grid. Arguments: grid -- 2D list of integers representing the grid queries -- list of tuples (r1, c1, r2, c2) representing the subgrid queries Returns: list of integers where each integer is the sum of the respective subgrid # Precompute the prefix sum n = len(grid) m = len(grid[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i+1][j+1] = grid[i][j] + prefix_sum[i+1][j] + prefix_sum[i][j+1] - prefix_sum[i][j] results = [] for r1, c1, r2, c2 in queries: total = (prefix_sum[r2 + 1][c2 + 1] - prefix_sum[r1][c2 + 1] - prefix_sum[r2 + 1][c1] + prefix_sum[r1][c1]) results.append(total) return results"},{"question":"In the Land of Rainbows, there is a vast treasure denoted by different colored gems. There are n rows of gems, each row containing m gems lined up in a straight line. Each of the gems is either colored red (R), green (G), or blue (B). A magical barrier only allows you to collect gems with a unique property: for any valid row and column, if a gem is red (R), the one directly above it should be green (G), and if a gem is green (G), the one directly above it should be blue (B), and finally, if a gem is blue (B), the one directly above it should be red (R). Given the initial configuration of gems in the treasure, determine if all the gems in the grid satisfy the above magical property. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns of the grid respectively. The next n lines contain m characters each – the description of each row of gems. Output \\"YES\\" if all the gems satisfy the magical property, and \\"NO\\" otherwise. The first sample case shows a 3x3 grid where all the gems follow the rule perfectly. In the second sample case, a gem in the second row and second column doesn\'t follow the rule, hence the output is \\"NO\\". Example Input: 3 3 RGB GBR BRG Example Output: YES Example Input: 3 3 RGB GBG BRG Example Output: NO","solution":"def check_magical_property(n, m, grid): Checks if all the gems in the grid satisfy the magical property. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): The grid containing the gem colors. Returns: str: \\"YES\\" if all gems satisfy the magical property, otherwise \\"NO\\". # Define the required previous gem for each gem type required_previous = { \'R\': \'G\', \'G\': \'B\', \'B\': \'R\' } # Iterate through the grid starting from the second row for i in range(1, n): for j in range(m): # Check if the gem in the current cell satisfies the property if grid[i][j] != required_previous[grid[i-1][j]]: return \\"NO\\" return \\"YES\\""},{"question":"You have been given an underground cave system consisting of n chambers connected by m tunnels. Each tunnel connects two chambers and has a certain length. You can traverse these tunnels in either direction. Your goal is to find the shortest path from the entrance chamber to the exit chamber. You may assume that the entrance chamber is chamber 1 and the exit chamber is chamber n. If there is no path from the entrance to the exit, return -1. The first line contains two integers n and m (2 leq n leq 1000, 1 leq m leq 10000) — the number of chambers and tunnels, respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n; 1 leq w leq 1000) — indicating there is a tunnel between chamber u and chamber v with length w. Print a single integer — the length of the shortest path from chamber 1 to chamber n. If no such path exists, print -1. **Example:** Input: ``` 4 4 1 2 3 2 3 4 3 4 2 1 3 10 ``` Output: ``` 9 ``` Explanation: There are several possible paths from the entrance chamber (1) to the exit chamber (4): - 1 -> 2 -> 3 -> 4 with a total length of 3 + 4 + 2 = 9 - 1 -> 3 -> 4 with a total length of 10 + 2 = 12 The shortest path among them has a length of 9.","solution":"import heapq def shortest_path(n, m, edges): # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Distance array dist = [float(\'inf\')] * (n + 1) dist[1] = 0 # Min-heap priority queue pq = [(0, 1)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for neighbor, weight in graph[u]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[n] if dist[n] != float(\'inf\') else -1"},{"question":"Bill is a frog, and he is trying to cross a river filled with stones. The stones form a path across the river, but they are placed at different distances. Each stone has a specified strength which determines the maximum distance Bill can jump from that stone. Bill starts on the first stone and wants to reach the last stone. If it is not possible, Bill will jump into the river. Write a program to find the minimum number of jumps Bill needs to reach the end of the stone path, or determine that it is impossible for Bill to reach the end. The first line contains an integer n (2 ≤ n ≤ 10^3) — the number of stones. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^3) — the maximum distance Bill can jump from the i-th stone. Output a single integer — the minimum number of jumps Bill needs to reach the last stone. If it is not possible to reach the last stone, print -1. **Examples** Input: 5 2 3 1 1 4 Output: 2 Input: 5 3 2 1 0 4 Output: -1 **Explanation** In the first example, Bill can jump from the first stone to the second stone in one jump, and from the second stone to the last stone in another jump. Thus, the minimum number of jumps required is 2. In the second example, Bill can reach the third stone, but he cannot jump from the third stone to the fourth stone since the maximum jump distance from the third stone is 1 and the fourth stone is more than 1 unit away. Therefore, it is not possible for Bill to reach the last stone, so the output is -1.","solution":"def min_jumps_to_cross(stones): Determine the minimum number of jumps needed to cross the stones, or return -1 if it\'s not possible. n = len(stones) if n == 1: return 0 jumps = [float(\'inf\')] * n jumps[0] = 0 for i in range(1, n): for j in range(i): if i <= j + stones[j]: jumps[i] = min(jumps[i], jumps[j] + 1) return jumps[-1] if jumps[-1] != float(\'inf\') else -1 # Function to parse input values def parse_input_and_run(n, stones): return min_jumps_to_cross(stones)"},{"question":"You are given a grid consisting of n rows and m columns. Each cell of the grid is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). You are also given q queries. Each query consists of two pairs of coordinates representing the starting and ending points of a particular path. For each query, you need to determine if there is a path from the starting point to the ending point that doesn\'t cross any obstacles. You can move up, down, left, or right from any cell, but you cannot move diagonally. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains exactly m characters (either \'.\' or \'#\'), representing the grid. The next line contains a single integer q (1 ≤ q ≤ 10^4) — the number of queries. Each of the next q lines contains four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m), representing the coordinates of the starting and ending points of a query. The coordinates are given in a 1-based system. Output q lines. In the i-th line, print \\"YES\\" if there is a path from (x1, y1) to (x2, y2) that doesn\'t cross any obstacles, otherwise print \\"NO\\". Example: Input: 5 5 ..... .#. .#. .#. ..... 3 1 1 5 5 2 2 3 3 1 5 5 1 Output: YES NO YES","solution":"from collections import deque def is_valid_move(x, y, n, m, grid, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def bfs(grid, start, end, n, m): queue = deque([start]) visited = [[False] * m for _ in range(n)] visited[start[0]][start[1]] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid_move(new_x, new_y, n, m, grid, visited): visited[new_x][new_y] = True queue.append((new_x, new_y)) return False def path_exists(grid, n, m, queries): results = [] for query in queries: x1, y1, x2, y2 = query start = (x1 - 1, y1 - 1) end = (x2 - 1, y2 - 1) if bfs(grid, start, end, n, m): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are a data engineer tasked with managing a distributed system consisting of n nodes. Each node processes a certain number of tasks and reports its load as the number of tasks it is currently processing. The nodes can communicate with each other, and one node can transfer tasks to another node. Your task is to handle q queries of two types: 1. `LOAD i` - report the current load of the i-th node. 2. `TRANSFER i j x` - transfer x tasks from the i-th node to the j-th node. This will reduce the load of the i-th node by x and increase the load of the j-th node by x. You need to ensure the nodes can handle the queries efficiently and report the load as needed. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of nodes and the number of queries, respectively. The second line contains n integers l1, l2, ..., ln (0 ≤ li ≤ 1,000,000) where li describes the initial load of the i-th node. Each of the following q lines contains a query of one of the two types described above. For each query of type `LOAD i`, print one integer — the current load of the i-th node. For each query of type `TRANSFER i j x`, no output is required. It is guaranteed that the value of x will not exceed the current load of the i-th node. Example: Input: ``` 5 6 10 20 30 40 50 LOAD 1 TRANSFER 2 3 15 LOAD 2 LOAD 3 TRANSFER 1 5 5 LOAD 5 ``` Output: ``` 10 5 45 5 ```","solution":"class DistributedSystem: def __init__(self, node_loads): Initialize the system with the given loads for each node. self.node_loads = node_loads def load(self, node_index): Return the current load of the specified node. return self.node_loads[node_index - 1] def transfer(self, from_node, to_node, tasks): Transfer tasks from one node to another. self.node_loads[from_node - 1] -= tasks self.node_loads[to_node - 1] += tasks"},{"question":"A group of friends decided to organize a relay race. They have n friends numbered from 1 to n. Each friend has a specific running speed. The race track has a length of m meters, and the friends need to alternate running to complete the race. After each friend runs for a certain time, they pass the baton to the next friend. The order in which friends run and the duration each friend runs needs to be determined such that the total time to complete the race is minimized. Note that a friend can run multiple times, but no two subsequent runs should be done by the same friend. You are given an array speeds where speeds[i] represents the speed (meters per second) of friend i (1 ≤ i ≤ n). Write a program that calculates the minimum total time needed to complete the race with the given constraints. The first line of the input contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ 10^6) — the number of friends and the length of the race track. The second line contains n integers speeds[i] (1 ≤ speeds[i] ≤ 1000) — the speed of each friend. Output a single integer — the minimum total time (in seconds, rounded down to the nearest integer) needed to complete the race. Example: Input: 3 100 5 8 6 Output: 13 In this example, the optimal way to complete the race is to divide the distance in such a way that the faster friends run more while adhering to the constraints.","solution":"import heapq def min_total_time(n, m, speeds): Returns the minimum total time (in seconds, rounded down to the nearest integer) needed to complete the race. :param n: Integer, number of friends. :param m: Integer, length of the race track in meters. :param speeds: List of integers, speed of each friend in meters per second. :return: Integer, minimum total time in seconds to complete the race. # Create a max heap with negative speeds to act as a min heap max_heap = [-speed for speed in speeds] heapq.heapify(max_heap) total_time = 0 distance_remaining = m while distance_remaining > 0: first_fastest = -heapq.heappop(max_heap) if max_heap: second_fastest = -heapq.heappop(max_heap) min_speed_for_lap = second_fastest heapq.heappush(max_heap, -second_fastest) else: min_speed_for_lap = first_fastest lap_time = distance_remaining // first_fastest distance_remaining -= lap_time * first_fastest total_time += lap_time if distance_remaining > 0: distance_remaining -= min_speed_for_lap total_time += 1 heapq.heappush(max_heap, -first_fastest) return total_time"},{"question":"Rihanna loves magical strings! A string is considered magical if it satisfies the following: 1. It consists only of lowercase English letters. 2. It contains at least one vowel (a, e, i, o, u). 3. Any two consecutive characters in the string are distinct. Rihanna wants your help to determine if a given string is magical. If the string is magical, output \\"Magical\\", otherwise output \\"Not Magical\\". The first line contains a single integer t (1 ≤ t ≤ 100) — the number of strings Rihanna will check. Each of the following t lines contains a single string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. Output \\"Magical\\" if the string is magical, otherwise output \\"Not Magical\\". Example: Input: 3 hello abcde aabb Output: Not Magical Magical Not Magical","solution":"def is_magical(s): vowels = set(\'aeiou\') has_vowel = any(char in vowels for char in s) if not has_vowel: return \\"Not Magical\\" for i in range(1, len(s)): if s[i] == s[i-1]: return \\"Not Magical\\" return \\"Magical\\" def magical_strings(t, strings): results = [] for s in strings: results.append(is_magical(s)) return results"},{"question":"Alice is a little princess who loves counting stars every night. In the kingdom, there are many castles, and Alice lives in one of them. One day, she decides to write down the number of stars she sees from her castle on each day of a week. Alice wrote down the numbers in an array, where the i-th element of the array represents the number of stars she saw on the i-th day. However, the sky is sometimes covered by clouds, and she misses counting stars on some days. So, she denotes these days with the number -1 in her array. Alice\'s best friend Bob loves calculating averages. He wants to help Alice by calculating the average number of stars seen on the days when the sky was clear (when the number in the array is not -1). Write a function that helps Bob find this average. If all the days have the sky covered by clouds, return -1 since no average can be calculated. Function signature: ```python def average_stars(stars: List[int]) -> float: ``` # Input - `stars`: A list of integers `n` (1 ≤ n ≤ 100) where each element represents the number of stars or -1 for cloudy days. # Output - Return the average number of stars seen on clear nights as a floating-point number. The average should be rounded to two decimal places. - Return -1 if no clear days are present in the list. # Examples ```python # Example 1 average_stars([4, -1, 7, 10, -1, 3, 2]) # Output: 5.20 # Example 2 average_stars([-1, -1, -1, -1]) # Output: -1 # Example 3 average_stars([1, 5, 3, 7]) # Output: 4.00 ``` # Note - In the first example, taking the sum of clear days (4 + 7 + 10 + 3 + 2 = 26) and dividing by the number of clear days (5) gives an average of 5.20. - The second example, as all days are cloudy, the output is -1. - In the third example, the sum of stars is 16, and the number of clear days is 4, giving an average of 4.00.","solution":"from typing import List def average_stars(stars: List[int]) -> float: # Filter out the days with clear skies (values which are not -1) clear_days = [star for star in stars if star != -1] # If there are no clear days, return -1 if not clear_days: return -1 # Calculate the average average = sum(clear_days) / len(clear_days) # Return the average rounded to two decimal places return round(average, 2)"},{"question":"You are given an undirected graph with `N` nodes and `M` edges. The nodes are labeled from 1 to N. Initially, all the nodes are colored white. You need to color some of the nodes black such that the shortest path from any black node to the nearest white node is as long as possible. Your task is to find the set of nodes to color black to maximize the shortest distance to the nearest white node. The first line contains two integers N and M (1 ≤ N, M ≤ 100,000) — the number of nodes and the number of edges in the graph, respectively. Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N) — representing an undirected edge between nodes u and v. Print one integer — the maximum shortest distance from any black node to the nearest white node when the nodes are colored optimally. Then print the indices of the nodes that should be colored black to achieve this distance. If there are multiple answers, output any of them. Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` 2 1 5 ```","solution":"from collections import deque def max_shortest_distance(N, M, edges): Returns the maximum shortest distance from any black node to the nearest white node and the set of nodes which should be colored black to achieve this distance. :param N: int, number of nodes :param M: int, number of edges :param edges: list of tuples, each tuple represents an undirected edge between two nodes :return: tuple, maximum shortest distance and list of nodes to be colored black def bfs(node): Perform BFS to find the farthest node and its distance from the starting node. :param node: int, starting node for BFS :return: tuple, (farthest node, distance to the farthest node) visited = [False] * (N + 1) queue = deque([(node, 0)]) visited[node] = True farthest_node = node max_distance = 0 while queue: current_node, distance = queue.popleft() if distance > max_distance: max_distance = distance farthest_node = current_node for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return farthest_node, max_distance # Build the graph graph = [[] for _ in range(N + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Find a node that has the greatest distance from an arbitrary node (node 1) start_node, _ = bfs(1) # Find the farthest node from the start_node end_node, distance = bfs(start_node) # The maximum shortest distance is half of the distance found (as we are dealing with tree diameter) max_distance = distance // 2 # Identify the nodes to be colored black visited = [False] * (N + 1) queue = deque([(start_node, 0)]) visited[start_node] = True path = [] while queue: current_node, dist = queue.popleft() path.append(current_node) if current_node == end_node: break for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) # Midpoint nodes of the longest path if distance % 2 == 0: black_nodes = [path[distance // 2]] else: black_nodes = [path[distance // 2], path[distance // 2 + 1]] return max_distance, black_nodes"},{"question":"You are given an array of integers representing the time it takes for a series of tasks to be completed. There are n tasks, and each task i has a completion time of ti. Tasks can only be executed sequentially, and you cannot start a new task until the current task is completed. Additionally, you are given an integer m which represents the maximum allowed total time for executing exactly k tasks in sequence. Your task is to find the minimum and maximum time it takes to complete exactly k consecutive tasks in the sequence. The first line contains three integers n, k, and m (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n, 1 ≤ m ≤ 10^9). The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^4) — the time it takes to complete each task. Print two integers: the minimum time and the maximum time it takes to complete exactly k consecutive tasks within the given sequence. If it is not possible to complete exactly k tasks within the maximum allowed total time m, print -1. For example: Input: 8 3 15 1 2 3 4 5 6 7 8 Output: 6 15","solution":"def min_max_time_to_complete_tasks(n, k, m, times): if n < k: return -1, -1 max_time = -1 min_time = float(\'inf\') current_time_window = sum(times[:k]) # Check the first window if current_time_window <= m: max_time = current_time_window min_time = current_time_window # Sliding window technique for i in range(1, n - k + 1): current_time_window = current_time_window - times[i - 1] + times[i + k - 1] if current_time_window <= m: if current_time_window > max_time: max_time = current_time_window if current_time_window < min_time: min_time = current_time_window if max_time == -1: # If we didn\'t find any valid window return -1, -1 else: return min_time, max_time"},{"question":"Peter has recently learned about the concept of pseudorandom number generators and how they can be used to generate sequences that appear random but are actually deterministic. He decides to experiment with a simple linear congruential generator (LCG). The formula for generating the next number in the sequence using LCG is: X_{n+1} = (a * X_n + c) % m Given the initial seed X_0, and the parameters a, c, and m, Peter wants to generate the first k numbers in the sequence (including the initial seed). However, due to the size of the sequence, he needs an efficient way to do so. Input: - The first line contains four integers a, c, m, and X_0 (1 <= a, c, m <= 10^9, 0 <= X_0 < m). - The second line contains an integer k (1 <= k <= 10^6), the number of terms to generate. Output: - Print the first k numbers of the sequence generated by the given LCG parameters, separated by spaces. Example: Input: ``` 2 3 5 1 10 ``` Output: ``` 1 0 3 4 1 0 3 4 1 0 ```","solution":"def generate_lcg_sequence(a, c, m, X0, k): Generates the first k numbers in the sequence using a Linear Congruential Generator (LCG). Parameters: a (int): Multiplier c (int): Increment m (int): Modulus X0 (int): Initial seed k (int): Number of terms to generate Returns: list: The first k numbers in the LCG sequence sequence = [X0] for _ in range(1, k): X0 = (a * X0 + c) % m sequence.append(X0) return sequence def format_lcg_sequence(a, c, m, X0, k): Generates and formats the first k numbers in the LCG sequence as a space-separated string. Parameters: a, c, m, X0, k as described in `generate_lcg_sequence`. Returns: str: Space-separated string of k numbers in the LCG sequence sequence = generate_lcg_sequence(a, c, m, X0, k) return \' \'.join(map(str, sequence))"},{"question":"Alex and Chris are playing a game on a tree with n nodes rooted at node 1. Each node, except the root, has a unique parent node, and each edge connecting a parent to its child has an associated weight. Alex and Chris alternately paint nodes starting from the root. Alex starts, and they alternate turns. A player can only paint a node if all its ancestors (closer to the root) have already been painted. The weight of the tree is defined as the sum of the weights of edges connected to painted nodes. Alex wants to maximize the total weight over all painted nodes, while Chris aims to minimize it. Given the structure of the tree and the weights of the edges, determine the maximum possible total weight over all painted nodes assuming optimal play by both players. The first line of input consists of a single integer t (1 ≤ t ≤ 100) - the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100,000) - the number of nodes in the tree. Each of the next n-1 lines contains two integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) indicating there is an edge between nodes u and v with weight w. It is guaranteed that the input describes a valid tree. Output t lines, each containing a single integer - the maximum possible total weight of the tree assuming optimal play by both players. Example: Input: ``` 2 3 1 2 5 1 3 3 4 1 2 6 1 3 8 2 4 4 ``` Output: ``` 5 8 ``` Explanation: In the first test case, Alex can choose node 2 with weight 5 on his first turn. Chris will then have no choice but to choose node 3 with weight 3 if both players are playing optimally. In the second test case, Alex can choose node 3 with weight 8 on his first turn. Chris will then choose node 2 with weight 6, and then Alex will proceed to choose node 4 with component weight 4, giving them 8, 6+4 as weights, but only the highest component weight counts in optimal play - which is 8.","solution":"def max_tree_weight(t, test_cases): def dfs(node, adj_list, visited): visited.add(node) subtree_weights_odd, subtree_weights_even = [], [] for neighbor, weight in adj_list[node]: if neighbor not in visited: odd_weight, even_weight = dfs(neighbor, adj_list, visited) subtree_weights_odd.append(weight + even_weight) subtree_weights_even.append(odd_weight) if not subtree_weights_odd: return 0, 0 # leaf node case return max(subtree_weights_odd), max(subtree_weights_even) results = [] for case in test_cases: n, edges = case adj_list = {i: [] for i in range(1, n+1)} for u, v, w in edges: adj_list[u].append((v, w)) adj_list[v].append((u, w)) # Start DFS from the root node which is 1 max_weights_alex, max_weights_chris = dfs(1, adj_list, set()) results.append(max_weights_alex) return results"},{"question":"A company is organizing a team-building event and wants to form teams of employees. Each team should consist of exactly three members. To make sure each team works well together, the company has a compatibility score for each pair of employees. The compatibility score is an integer between 1 and 10^9. Given the compatibility scores between all pairs of employees, calculate the maximum possible sum of compatibility scores for any team of three employees. The first line contains a single integer n (3 ≤ n ≤ 200) — the number of employees. Each of the next n lines contains n integers, where the j-th integer in the i-th line is the compatibility score between the i-th and the j-th employee. The compatibility score between the i-th and the i-th employee is always 0. Print a single integer — the maximum sum of compatibility scores for a team of three employees. # Example Input ``` 5 0 1 2 3 4 1 0 5 6 7 2 5 0 8 9 3 6 8 0 10 4 7 9 10 0 ``` Output ``` 27 ``` Explanation In this example, the team consisting of employees 3, 4, and 5 has the maximum possible sum of compatibility scores. The compatibility scores between them are: - Between employee 3 and 4: 8 - Between employee 3 and 5: 9 - Between employee 4 and 5: 10 The total sum is 8 + 9 + 10 = 27.","solution":"from itertools import combinations def max_compatibility_score(n, compatibility_scores): max_sum = 0 for team in combinations(range(n), 3): a, b, c = team team_score = ( compatibility_scores[a][b] + compatibility_scores[a][c] + compatibility_scores[b][c] ) if team_score > max_sum: max_sum = team_score return max_sum"},{"question":"In a distant magical land, there is a kingdom divided into a grid of cells. Each cell either contains a guard tower or is empty. The guards in the towers are very vigilant and can see all cells that are directly in the same row or column as the tower, stopping at the edge of the grid or at another tower. You are given the grid\'s dimensions and the positions of the towers. Your task is to determine the number of cells that are visible to at least one guard. The input contains multiple test cases. Each test case starts with two integers, `h` and `w` (1 ≤ h, w ≤ 1000) — the height and width of the grid, followed by an integer `t` (1 ≤ t ≤ 100,000) — the number of towers. The next `t` lines each contain two integers `r` and `c` (1 ≤ r ≤ h, 1 ≤ c ≤ w), which represent the position of a tower at row `r` and column `c`. For each test case, print a single integer, the number of cells visible to at least one guard. Input: ``` 2 2 1 1 2 3 3 3 1 1 2 2 3 3 ``` Output: ``` 3 9 ``` In the first test case, the grid looks like this: ``` - G - - ``` `G` denotes the guard tower. The visible cells are marked as follows: ``` - G - - ``` Thus, the number of visible cells is 3. In the second test case, the grid looks like this: ``` G - - - G - - - G ``` All cells in the grid are visible, so the number of visible cells is 9.","solution":"def number_of_visible_cells(h, w, towers): row_has_tower = [False] * h col_has_tower = [False] * w for r, c in towers: row_has_tower[r-1] = True col_has_tower[c-1] = True visible_cells = 0 for i in range(h): for j in range(w): if row_has_tower[i] or col_has_tower[j]: visible_cells += 1 return visible_cells"},{"question":"Patricia loves puzzles and one day she stumbled upon an interesting challenge. She has a string consisting of lowercase English letters and she wants to explore all the different ways to transform this string into a palindrome by rearranging its characters. A string is a palindrome if it reads the same forwards and backwards. To help Patricia, you need to determine if it is possible to rearrange the characters of the given string into a palindrome. The first line of the input contains the integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 100,000) and a string of length n. For each test case, print \\"YES\\" (without the quotes) if it is possible to rearrange the characters of the string into a palindrome and \\"NO\\" (without the quotes) otherwise. Input: The first line contains an integer t. The following t lines each contain a string. Output: For each test case, print \\"YES\\" if it is possible to rearrange the characters of the string into a palindrome and \\"NO\\" otherwise. Example: Input: 3 4 abba 5 abcba 3 abc Output: YES YES NO","solution":"def can_form_palindrome(t, cases): Determines if it is possible to rearrange the characters of each string in cases into a palindrome. Parameters: t (int): Number of test cases. cases (list of tuple): List of tuples, where each tuple contains an integer and a string. Returns: list of str: List containing \'YES\' or \'NO\' for each test case. results = [] for case in cases: n, s = case char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Example usage: # t = 3 # cases = [(4, \\"abba\\"), (5, \\"abcba\\"), (3, \\"abc\\")] # print(can_form_palindrome(t, cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"In a faraway land, there is a kingdom with a powerful artifact known as the Magic Crystal. The kingdom defends its borders using a system of enchanted shields. Each shield has a certain strength and covers a segment of the kingdom\'s border. Some segments might overlap, offering extra protection in those areas. The borders of the kingdom are represented as a line segment from 0 to L. The kingdom has n shields, each described by three integers, L_i, R_i, and S_i. L_i and R_i (0 ≤ L_i < R_i ≤ L) denote the starting and ending positions of the shield on the border, and S_i (1 ≤ S_i ≤ 10^9) denotes the strength of that shield. The kingdom is under a new threat, and they need to know the maximum shield strength available at any point along the border. Write a program to help determine the maximum strength available at any position on the border. The first line contains two integers n and L (1 ≤ n ≤ 10^5, 1 ≤ L ≤ 10^9), the number of shields and the length of the border, respectively. Each of the next n lines contains three integers L_i, R_i, and S_i (0 ≤ L_i < R_i ≤ L, 1 ≤ S_i ≤ 10^9), describing the i-th shield. Output a single integer, the maximum strength available at any position along the border. For example: Input: 3 10 0 4 5 3 7 8 5 10 6 Output: 8 Explanation: The maximum shield strength at any point on the border is 8, which occurs in the segment [3, 4) where the shields with strengths 5 and 8 overlap.","solution":"def max_shield_strength(n, L, shields): border_strength = [0] * (L + 1) for L_i, R_i, S_i in shields: for j in range(L_i, R_i): border_strength[j] = max(border_strength[j], S_i) return max(border_strength) # Example Use Case if __name__ == \\"__main__\\": n = 3 L = 10 shields = [ (0, 4, 5), (3, 7, 8), (5, 10, 6) ] print(max_shield_strength(n, L, shields)) # Output should be 8"},{"question":"You are given an undirected, unweighted graph with n vertices and m edges. You need to determine if there exists a cycle that contains exactly 4 vertices. A cycle is defined as a path that starts and ends at the same vertex without traversing any edge more than once. If such a cycle exists, output \\"YES\\". Otherwise, output \\"NO\\". # Input - The first line contains two integers n (1 le n le 2500) and m (0 le m le 10000), representing the number of vertices and edges in the graph. - Each of the next m lines contains two integers u and v (1 le u,v le n, u neq v), denoting an edge between vertices u and v. # Output - Output a single line containing \\"YES\\" if there exists a cycle with exactly 4 vertices, otherwise output \\"NO\\". # Example Input ``` 5 6 1 2 2 3 3 4 4 1 1 3 2 4 ``` Output ``` YES ``` Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` NO ``` # Explanation In the first example, one possible cycle with exactly 4 vertices is 1 -> 2 -> 4 -> 3 -> 1. In the second example, it is not possible to form a cycle with exactly 4 vertices.","solution":"def has_cycle_of_length_4(n, m, edges): Function to determine if there exists a cycle of exactly 4 vertices in an undirected graph from collections import defaultdict # Create adjacency list graph = defaultdict(set) for u, v in edges: graph[u].add(v) graph[v].add(u) # Check for a cycle of length 4 for u in range(1, n + 1): # To avoid recombinations in different calls neighbours = list(graph[u]) for i in range(len(neighbours)): for j in range(i + 1, len(neighbours)): v = neighbours[i] w = neighbours[j] # If there is an edge between neighbours v and w then we have a 4-cycle if v in graph[w]: return \\"YES\\" return \\"NO\\""},{"question":"In a certain country, there are n cities connected by m bidirectional roads. Each road has a specific length. The TomTom Corporation is set to build a new software for navigation, and they need to understand the connectivity of the cities. You have to answer q queries. Each query consists of two cities u and v, and you need to determine if there is a path between u and v. If there is a path, output the minimum distance between these two cities; otherwise, output -1. The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of cities and the number of roads respectively. The next m lines each contains three integers u, v and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 106) — the two cities connected by the road and the length of the road. The next line contains a single integer q (1 ≤ q ≤ 105) — the number of queries. The next q lines each contains two integers u and v (1 ≤ u, v ≤ n) — the cities that needs to be queried. Output q lines — the minimal distance between the cities u and v for each query or -1 if there is no path between u and v.","solution":"import heapq def dijkstra(n, graph, start): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def solve(n, m, roads, q, queries): graph = {i: [] for i in range(1, n+1)} for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) results = [] for u, v in queries: if u == v: results.append(0) else: # We run Dijkstra starting from u distances = dijkstra(n, graph, u) distance = distances[v] results.append(distance if distance != float(\'inf\') else -1) return results"},{"question":"John loves to collect rare coins. He has a collection of coins with varying values. John\'s goal is to divide his collection into two groups such that the absolute difference in their total values is minimized. John has an even number of coins in his collection, and each coin has a positive integer value. Help John find the minimum possible absolute difference between the sums of the values in these two groups. The first line contains one even integer n (2 le n le 1000) — the number of coins in John\'s collection. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 1000) — the values of the coins. Output a single integer — the minimum possible absolute difference between the sums of the values in the two groups. Example: Input: 6 3 1 4 2 2 1 Output: 1 Explanation: One possible division is (3, 1, 2) and (4, 2, 1). The sum of the first group is 6, and the sum of the second group is 7. The absolute difference is |6 - 7| = 1. There may be other divisions, but the goal is to find the minimum difference possible.","solution":"def min_difference(n, coin_values): Returns the minimum possible absolute difference between the sums of the values in the two groups. total_sum = sum(coin_values) target = total_sum // 2 # Initialize a DP table dp = [0] * (target + 1) # Update the DP table for value in coin_values: for j in range(target, value - 1, -1): dp[j] = max(dp[j], dp[j - value] + value) closest_sum = dp[target] return abs(total_sum - 2 * closest_sum) # Example usage: n = 6 coin_values = [3, 1, 4, 2, 2, 1] print(min_difference(n, coin_values)) # Output: 1"},{"question":"In a faraway land, there is a complicated voting system where each voter is required to rank all candidates from 1 to n (with 1 being their most preferred candidate and n being their least preferred). Each voter submits their ranking as a list of n integers. Given the rankings of all the voters, the task is to determine the final ranking of the candidates using the ranking order where the candidate with majority preference over others comes first. The preferences are counted in pairs. If more than half of the voters prefer candidate A over candidate B, then A is deemed better than B and moves ahead in the final ranking order. You are tasked with determining the final ranking of the candidates based on these pairwise comparisons. The input format is as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), where n is the number of candidates and m is the number of voters. - Each of the next m lines contains a permutation of integers from 1 to n, representing the preferences of each voter. Output the final ranking of the candidates as a permutation of integers from 1 to n. Example: Input: 3 4 1 2 3 2 1 3 1 3 2 3 1 2 Output: 1 2 3 Here, candidate 1 is preferred over both candidates 2 and 3 by majority of voters, and candidate 2 is preferred over candidate 3 by majority of voters, hence the final ranking is 1 2 3.","solution":"def determine_final_ranking(n, m, preferences): from collections import defaultdict # Initialize a dictionary to count pairwise preferences comparison_counts = defaultdict(lambda: defaultdict(int)) # Count the pairwise preferences for all voters for preference in preferences: for i in range(n): for j in range(i + 1, n): if preference.index(i + 1) < preference.index(j + 1): comparison_counts[i + 1][j + 1] += 1 else: comparison_counts[j + 1][i + 1] += 1 # Use pairwise counts to determine the final ranking def is_preferred(a, b): return comparison_counts[a][b] > comparison_counts[b][a] candidates = list(range(1, n + 1)) final_ranking = sorted(candidates, key=lambda x: ([-is_preferred(x, y) for y in candidates])) return final_ranking"},{"question":"In a remote research facility, a biologist is studying a unique breed of rabbits with a peculiar growth pattern. Each rabbit has a pair of special identifiers, known as traits, represented as two integers (Ti1, Ti2). The biologist observes that a pair of rabbits can exhibit harmonious behavior if the sum of their first traits equals the sum of their second traits. The objective is to determine the maximum number of harmonious pairs of rabbits that can be formed. Each rabbit can only belong to one pair. The first line of the input contains a single integer n (1 ≤ n ≤ 2000) — the number of rabbits in the study. Each of the next n lines contains two integers Ti1 and Ti2 (|Ti1|, |Ti2| ≤ 10^6) — the traits for each rabbit. Output a single integer — the maximum number of harmonious pairs. # Example Input ``` 5 1 4 2 3 3 2 4 1 5 5 ``` Output ``` 2 ``` # Explanation In the example, there are five rabbits with the following traits: (1, 4), (2, 3), (3, 2), (4, 1), and (5, 5). The possible harmonious pairs are (1, 4) and (4, 1) where `1+4 = 4+1`, and (2, 3) and (3, 2) where `2+3 = 3+2`. The pair (5, 5) doesn\'t form a harmonious pair with any other rabbit. Therefore, the maximum number of harmonious pairs is 2.","solution":"def max_harmonious_pairs(n, traits): from collections import defaultdict # Dictionary to store the count of sum of traits trait_sum_count = defaultdict(int) for Ti1, Ti2 in traits: trait_sum = Ti1 + Ti2 trait_sum_count[trait_sum] += 1 max_pairs = 0 for count in trait_sum_count.values(): max_pairs += count // 2 # Only pairs can be formed return max_pairs"},{"question":"You are given a grid of size n times m representing a field. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). You need to move from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner (cell (n, m)) and count the number of ways you can do this. You can only move right or down at any point in time and cannot move through cells with obstacles. Write a program to find the number of distinct ways to reach the bottom-right corner from the top-left corner. The first line contains two integers n and m (1 leq n, m leq 100), representing the number of rows and columns in the grid respectively. The next n lines contain m characters each (either \'.\' or \'#\'), representing the grid. Print a single integer representing the number of distinct paths from the top-left to the bottom-right corner. If no such path exists, print 0. **Example Input:** ``` 3 3 . . . . # . . . . ``` **Example Output:** ``` 2 ``` **Explanation:** The two paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(n, m, grid): # Create a 2D dp array with dimensions (n x m) dp = [[0] * m for _ in range(n)] # If the starting point has an obstacle, return 0 if grid[0][0] == \'#\': return 0 # Initialize the starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # Return the number of ways to reach the bottom-right corner return dp[n-1][m-1]"},{"question":"A hotel manager wants to automate the process of allocating rooms to guests. Each room has a unique room number. The hotel has various categories of rooms, and each category has a different number of available rooms. The system needs to allocate the rooms in a way that maximizes customer satisfaction by always giving them consecutive room numbers if possible. You are given a list of queries, where each query is of the form (n, k) — n denotes the category of the room, and k denotes the number of consecutive rooms the guest requires. Your job is to write a program that processes each query and either allocates the required consecutive rooms or indicates that it is not possible to fulfil the request. For simplicity, assume that: - Categories are labeled by integers starting from 1 and each category has 500 rooms labeled from 1 to 500. - Rooms in the same category are initially available and can be occupied by fulfilling guest requests. The first line of the input contains an integer Q (1 ≤ Q ≤ 1000) — the number of queries. Each of the next Q lines contains two integers n and k (1 ≤ n ≤ 10, 1 ≤ k ≤ 500) — the category of the room and the number of consecutive rooms requested, respectively. For each query, if it is possible to allocate k consecutive rooms in the given category starting from the smallest available room number, print the room numbers allocated. If it is not possible, print NO. Example: Input: 3 1 3 1 4 1 2 Output: 1 2 3 4 5 6 7 8 9 Explanation: - The first query requests 3 consecutive rooms in category 1, so rooms 1, 2, and 3 are allocated. - The second query requests 4 consecutive rooms in category 1, so rooms 4, 5, 6, and 7 are allocated. - The third query requests 2 consecutive rooms in category 1, so rooms 8 and 9 are allocated.","solution":"def allocate_rooms(queries): categories = {n: [True] * 500 for n in range(1, 11)} result = [] for n, k in queries: allocated = False for i in range(501 - k): # Check consecutive slots till end if all(categories[n][i+j] for j in range(k)): alloc = list(range(i + 1, i + k + 1)) result.append(alloc) for j in range(k): categories[n][i + j] = False allocated = True break if not allocated: result.append(\\"NO\\") return result"},{"question":"A warehouse manager needs to optimize the placement of boxes on shelves. The warehouse has multiple shelves lined up in a row. Each shelf has a maximum weight capacity it can hold. You are given the weight limits of the shelves in an array. You also have a set of boxes, where each box has a certain weight. For each box, you need to place it on a shelf such that the total weights of the boxes on any shelf do not exceed the shelf\'s weight limit. You have to determine the maximum number of boxes that can be placed on the shelves without exceeding their weight limits. The first line contains two integers n and m (1 le n, m le 100) — the number of shelves and the number of boxes, respectively. The second line contains n integers w_1, w_2, ldots, w_n (1 le w_i le 1000) — the maximum weight limits of the shelves. The third line contains m integers b_1, b_2, ldots, b_m (1 le b_i le 100) — the weights of the boxes. Output the maximum number of boxes that can be successfully placed on the shelves. Example: Input: ``` 3 5 10 15 20 5 7 8 9 10 ``` Output: ``` 5 ``` Explanation: One way to place the boxes is: - First shelf: 5, 5 (total weight = 10 <= 10) - Second shelf: 7, 8 (total weight = 15 <= 15) - Third shelf: 9 (total weight = 9 <= 20) Hence, all 5 boxes can be placed on the shelves without exceeding any of the shelf\'s weight limits.","solution":"def max_boxes_on_shelves(n, m, shelf_limits, box_weights): # Sort shelves limits in ascending order shelf_limits.sort() # Sort box weights in descending order for optimal packing box_weights.sort(reverse=True) # Tracking the used capacity of each shelf used_capacity = [0] * n box_count = 0 for box in box_weights: for i in range(n): if used_capacity[i] + box <= shelf_limits[i]: used_capacity[i] += box box_count += 1 break return box_count"},{"question":"Given an undirected graph with n nodes and m edges, where each edge has an associated weight, determine the smallest sum of edge weights needed to connect all nodes in the graph. This ensures that you create a minimum spanning tree (MST). Your task is to calculate the weight of the MST of the graph. The first line of input contains two space-separated integers n (1 ≤ n ≤ 1000) — the number of nodes and m (0 ≤ m ≤ 100000) — the number of edges. Each of the next m lines contain three space-separated integers u, v (1 ≤ u, v ≤ n) and w (1 ≤ w ≤ 10^6) — the endpoints and weight of the edge. Output a single integer — the total weight of the MST of the graph. If the graph is not connected, output \\"IMPOSSIBLE\\". Consider using algorithms such as Kruskal\'s or Prim\'s for finding the minimum spanning tree. Example: Input: 4 5 1 2 1 1 3 4 2 3 2 2 4 6 3 4 3 Output: 6 Explanation: In this example, the edges in the minimum spanning tree are (1-2), (2-3), and (3-4), giving the total weight of 1 + 2 + 3 = 6.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): parent = [] rank = [] edges.sort(key=lambda x: x[2]) for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 edge_count = 0 for edge in edges: u, v, w = edge x = find(parent, u) y = find(parent, v) if x != y: edge_count += 1 mst_weight += w union(parent, rank, x, y) if edge_count == n - 1: break if edge_count != n - 1: return \\"IMPOSSIBLE\\" return mst_weight def minimum_spanning_tree(n, m, edge_list): edges = [(u-1, v-1, w) for u, v, w in edge_list] return kruskal_mst(n, edges)"},{"question":"You are given an array of integers `arr` of length `n`. Your task is to determine whether there exists a subarray (continuous segment) of `arr` that adds up to a given target sum `k`. The first line of input contains two integers `n` and `k` (1 ≤ `n` ≤ 10^5, -10^9 ≤ `k` ≤ 10^9). The second line of input contains `n` integers representing the array `arr` (-10^5 ≤ `arr[i]` ≤ 10^5 for 1 ≤ `i` ≤ `n`). Print \\"YES\\" (without quotes) if there exists such a subarray, otherwise print \\"NO\\" (without quotes). Here is an example for better understanding: **Example 1:** ``` Input 5 15 1 2 3 7 5 Output YES ``` **Example 2:** ``` Input 5 9 1 2 3 -1 2 Output NO ``` In the first example, the subarray `[7, 5]` adds up to 15. In the second example, there is no subarray that sums up to 9.","solution":"def has_subarray_with_sum(arr, k): Determines if there exists a subarray of arr that adds up to k. Args: arr (list): List of integers. k (int): The target sum. Returns: str: \\"YES\\" if there exists a subarray that adds up to k, otherwise \\"NO\\". current_sum = 0 prefix_sums = {0} for num in arr: current_sum += num if (current_sum - k) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"In a small town, there is a local bakery that produces different types of bread every day. Each bread has a unique taste score, and the customers rank them based on their preferences. The bakery keeps track of two lists: one representing the type of bread, and the other representing the taste scores of those bread types. Due to high demand, the bakery wants to distribute the best tasting bread to its loyal customers. However, the loyal customers can come at any order and request a specific number of bread types with the highest taste scores. You are given two integers n and q, which represent the number of bread types and the number of customer queries respectively. Following this, you will get a list of n integers that represent the taste scores of the bread types. Finally, you will get q queries, each query contains an integer k which denotes the number of bread types the customer wants with the highest taste scores. For each query, return the sum of the k highest taste scores. # Input - The first line contains two integers n and q (1 le n, q le 10^5). - The second line contains n integers separated by space, representing the taste scores of the bread types (1 le text{score} le 10^9). - The next q lines each contain one integer, the number of bread types k the customer wants (1 le k le n). # Output - For each customer query, output the sum of the k highest taste scores on a new line. # Example Input ``` 5 3 1 7 3 14 6 2 3 1 ``` Output ``` 21 27 14 ``` In this example, the bakery has 5 bread types with taste scores of [1, 7, 3, 14, 6]. There are 3 queries: 1. The first customer wants the sum of the top 2 highest taste scores: 14 + 7 = 21. 2. The second customer wants the sum of the top 3 highest taste scores: 14 + 7 + 6 = 27. 3. The third customer wants the sum of the highest taste score: 14.","solution":"def sum_of_top_k_taste_scores(n, q, taste_scores, queries): Returns the sums of the k highest taste scores for each query. Parameters: n (int): The number of bread types. q (int): The number of customer queries. taste_scores (list): A list of taste scores of the bread types. queries (list): A list of integers, each representing the number of bread types the customer wants. Returns: list: The list of sums of the k highest taste scores for each query. # Sort taste scores in descending order sorted_scores = sorted(taste_scores, reverse=True) # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + sorted_scores[i - 1] # Respond to each query results = [] for k in queries: results.append(prefix_sums[k]) return results"},{"question":"In a large warehouse, there are several stacks of boxes arranged in a line. Each stack has a certain height, representing the number of boxes in that stack. The warehouse manager wants to know if it is possible to select a subset of these stacks such that the sum of the heights of the selected stacks equals a given value. You are given an array of integers where each element represents the height of a stack of boxes, and a target integer. Determine if there exists a subset of the array whose sum is equal to the target integer. The first line contains two integers n and target (1 le n le 10^5, 1 le target le 10^9) – the number of stacks and the target sum respectively. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^4) – the heights of the stacks. Print \\"YES\\" if there exists a subset of stacks with the required sum, otherwise print \\"NO\\". **Example:** ``` Input: 6 15 5 4 3 7 2 10 Output: YES ``` In this example, a subset of heights such as [5, 4, 3, 2, 1] sums up to 15. Note that you do not need to print which stacks form the subset, only whether such a subset exists.","solution":"def can_sum_to_target(stacks, target): Determines if there exists a subset of the stacks whose sum equals to the target. Parameters: stacks (list): List of integers representing height of stacks. target (int): The target sum. Returns: bool: True if such a subset exists, otherwise False. dp = [False] * (target + 1) dp[0] = True for height in stacks: for j in range(target, height - 1, -1): if dp[j - height]: dp[j] = True return dp[target]"},{"question":"You are given a sequence of n integers a1, a2, ..., an. Your task is to find the length of the longest subsequence such that the difference between any two consecutive elements of the subsequence is either d or -d. A subsequence is derived from the sequence by deleting some or no elements without changing the order of the remaining elements. First line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000) — the number of integers in the sequence and the difference value respectively. Second line contains n integers a1, a2, ..., an (|ai| ≤ 1000) — the sequence of integers. Output the length of the longest subsequence that meets the given condition. Example: Input: 7 2 1 3 5 7 9 11 13 Output: 7","solution":"def longest_subsequence_with_difference(n, d, sequence): Returns the length of the longest subsequence such that the difference between any two consecutive elements of the subsequence is either d or -d. :param n: int - number of integers in the sequence :param d: int - the difference value :param sequence: list of int - the sequence of integers :return: int - length of the longest subsequence dp = [1] * n for i in range(n): for j in range(i): if sequence[i] - sequence[j] == d or sequence[i] - sequence[j] == -d: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are hosting a coding challenge event, and the final round challenges participants with solving an interesting puzzle involving a binary tree. The puzzle presents an intriguing blend of tree traversal, dynamic programming, and recursive algorithms. You are given a binary tree with ( n ) nodes. Each node has a unique integer identifier from 1 to ( n ). Additionally, each node has an associated weight. Your task is to find the maximum sum of weights in any path in the tree that starts at any node and ends at any other node (including itself). A path in the tree is defined as a sequence of edges connecting a sequence of distinct vertices. # Input - The first line contains a single integer ( n ) ( ( 2 le n le 100,000 ) ) — the number of nodes in the tree. - The second line contains ( n ) integers ( w_1, w_2, ldots, w_n ) ( ( 0 le w_i le 10^6 ) ), where ( w_i ) is the weight of the ( i )-th node. - The following ( n-1 ) lines describe the edges of the tree. Each of them contains two integers ( a ) and ( b ) ( ( 1 le a, b le n ), ( a neq b ) ) — the nodes connected by a single edge. # Output Print a single integer — the maximum sum of weights in any path in the tree. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 3 5 ``` Output ``` 15 ``` Explanation In this example, one of the paths which gives the maximum sum is 4 -> 2 -> 1 -> 3 -> 5 which adds up to 1 + 2 + 4 + 3 + 5 = 15. The order of addition does not matter, each path should be taken entirely. # Note Paths must be contiguous i.e., you cannot skip any nodes between the endpoints. Nodes are not necessarily visited more than once in the path sum calculation. Use appropriate traversal techniques to ensure all paths are considered.","solution":"class TreeNode: def __init__(self, weight): self.weight = weight self.children = [] def max_sum_path_in_tree(n, weights, edges): def dfs(node, parent): max_1, max_2, node_max_sum = 0, 0, 0 for child in tree[node].children: if child == parent: continue max_child_sum = dfs(child, node) if max_child_sum > max_1: max_1, max_2 = max_child_sum, max_1 elif max_child_sum > max_2: max_2 = max_child_sum node_max_sum = tree[node].weight + max_1 nonlocal max_path_sum max_path_sum = max(max_path_sum, tree[node].weight + max_1 + max_2) return node_max_sum tree = [TreeNode(weight) for weight in weights] for u, v in edges: tree[u-1].children.append(v-1) tree[v-1].children.append(u-1) max_path_sum = 0 dfs(0, -1) return max_path_sum def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) weights = list(map(int, data[1:n+1])) edges = [(int(data[i]), int(data[i+1])) for i in range(n+1, len(data), 2)] result = max_sum_path_in_tree(n, weights, edges) print(result) if __name__ == \\"__main__\\": solve()"},{"question":"Leo loves spending time at his gadget store, where he manages an array of tech devices. He often needs to organize these devices based on their popularity over time, which is tracked daily. Each device records its popularity using a unique id and a daily sales number. Leo wants a program that can process multiple queries related to the sum of daily sales numbers for various segments of devices in his store. You are given an array of integers where each integer represents the daily sales number of a device. Leo needs an efficient way to handle multiple queries to find the sum of sales numbers for any subarray. Implement a data structure that supports the following operations: 1. Update the daily sales number of a specific device. 2. Calculate the sum of sales numbers for a specified range of devices. The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of devices and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the initial daily sales numbers of the devices. Each of the next q lines contains a query of one of the following types: 1. \\"1 x y\\" (1 ≤ x ≤ n, 0 ≤ y ≤ 1000) — Update the daily sales number of the x-th device to y. 2. \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — Calculate the sum of daily sales numbers of devices from index l to index r (inclusive). For each query of the second type, print the result in a new line. **Example:** Input: ``` 5 3 2 4 5 1 6 2 1 3 1 3 10 2 2 5 ``` Output: ``` 11 21 ``` Explanation: - For the first query of type 2, the sum of the first 3 devices is 2+4+5 = 11. - For the query of type 1, the third device\'s sales number is updated to 10. - For the second query of type 2, the sum from the 2nd to the 5th device is 4+10+1+6 = 21.","solution":"class GadgetStore: def __init__(self, sales): self.sales = sales self.n = len(sales) self.segment_tree = [0] * (4 * self.n) self.build_segment_tree(0, self.n - 1, 0) def build_segment_tree(self, start, end, node): if start == end: self.segment_tree[node] = self.sales[start] else: mid = (start + end) // 2 self.build_segment_tree(start, mid, 2*node + 1) self.build_segment_tree(mid + 1, end, 2*node + 2) self.segment_tree[node] = self.segment_tree[2*node + 1] + self.segment_tree[2*node + 2] def update(self, idx, value): self.update_segment_tree(0, self.n - 1, idx - 1, value, 0) def update_segment_tree(self, start, end, idx, value, node): if start == end: self.sales[idx] = value self.segment_tree[node] = value else: mid = (start + end) // 2 if start <= idx <= mid: self.update_segment_tree(start, mid, idx, value, 2*node + 1) else: self.update_segment_tree(mid + 1, end, idx, value, 2*node + 2) self.segment_tree[node] = self.segment_tree[2*node + 1] + self.segment_tree[2*node + 2] def sum_range(self, left, right): return self.query_segment_tree(0, self.n - 1, left - 1, right - 1, 0) def query_segment_tree(self, start, end, left, right, node): if left <= start and end <= right: return self.segment_tree[node] if end < left or start > right: return 0 mid = (start + end) // 2 return self.query_segment_tree(start, mid, left, right, 2*node + 1) + self.query_segment_tree(mid + 1, end, left, right, 2*node + 2) def process_queries(n, q, sales, queries): gadget_store = GadgetStore(sales) results = [] for query in queries: if query[0] == 1: gadget_store.update(query[1], query[2]) elif query[0] == 2: result = gadget_store.sum_range(query[1], query[2]) results.append(result) return results"},{"question":"In a medieval kingdom, there are n cities connected by bidirectional roads. The king wants to place some knights in these cities such that each knight protects the city they are placed in and all cities directly connected to it. However, the number of knights is limited, so the king wants to know the minimum number of knights needed to ensure every city is protected. The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5) — the number of cities and roads, respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting a road between city u and city v. Output a single integer — the minimum number of knights needed. Example: Input: 6 6 1 2 2 3 3 4 4 5 5 6 6 1 Output: 2 Explanation: In the sample case, placing one knight in city 2 protects cities 1, 2, and 3. Placing another knight in city 5 protects cities 4, 5, and 6. Therefore, the minimum number of knights needed is 2.","solution":"def minimum_knights(n, m, roads): from collections import defaultdict, deque def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n == 1: return 1 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for city in range(1, n + 1): if not visited[city]: bfs(city, visited) components += 1 return components"},{"question":"You\'re given a grid with **n** rows and **n** columns. Each cell in the grid contains either `0` or `1`. You are required to find the largest square subgrid which contains only `1`s. The first line contains an integer `n` (`2 ≤ n ≤ 500`), the size of the grid. The next `n` lines contain `n` space-separated integers (`0` or `1`), describing the cells of the grid. Output the size of the largest square subgrid that contains only `1`s. For example, given the following grid: ``` 4 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 ``` The largest square subgrid only containing `1`s is a 2x2 subgrid in the top-left corner, so the output should be `2`.","solution":"def largest_square_subgrid(grid): n = len(grid) if n == 0: return 0 # Initialize a DP matrix to store the maximum size of squares ending at (i, j) dp = [[0] * n for _ in range(n)] max_size = 0 # To track the maximum size of 1s square subgrid for i in range(n): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: # First row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update the maximum size found so far max_size = max(max_size, dp[i][j]) return max_size"},{"question":"A new online game involves a character moving on an infinite 2D grid. The character starts at the origin (0, 0) and can move in four possible directions: up, down, left, and right. The game provides the character with a sequence of movements, one for each step. Each move is represented by one of the characters \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). After completing the sequence of movements, the game checks the character\'s final position on the grid. The character wins if the final position is within a square region centered at the origin with a side length of 2k (i.e., all points (x, y) such that -k leq x leq k and -k leq y leq k). Write a program that determines if the character wins the game. The first line of input contains an integer k (1 leq k leq 10^6), the half-side length of the square region. The second line contains a string s (with length 1 leq |s| leq 10^6), representing the sequence of movements. Output \\"YES\\" if the character wins the game, otherwise output \\"NO\\". Example: Input: ``` 3 UUDDLRLR ``` Output: ``` YES ``` Explanation: After following the movements \'UUDDLRLR\', the character\'s final position is (0, 0), which is within the square region with a side length of 6 centered at the origin, so the character wins.","solution":"def character_wins(k, s): Determines if the character wins the game based on the movement sequence and the value of k. Parameters: k (int): The half-side length of the square region. s (str): The sequence of movements. Returns: str: \\"YES\\" if the character wins the game, otherwise \\"NO\\". x, y = 0, 0 for move in s: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 if -k <= x <= k and -k <= y <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"There is a string of length n consisting of lowercase English letters. You are allowed to perform the following operation any number of times: choose two consecutive different characters and replace them with the letter that comes later alphabetically. For example, if you choose \'a\' and \'b\', you replace them with \'b\', and if you choose \'c\' and \'f\', you replace them with \'f\'. What is the lexicographically smallest string that can be obtained after any number of such operations? The first line contains one integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Output a single string — the lexicographically smallest string that can be obtained. # Example Input ``` 5 abcde ``` Output ``` e ``` Input ``` 4 aabb ``` Output ``` b ``` Input ``` 3 xyz ``` Output ``` z ```","solution":"def lexicographically_smallest_string(n, s): return max(s)"},{"question":"Given an array of integers, determine the minimum number of operations required to make all the elements equal. In one operation, you can either increase or decrease any array element by 1. # Input Format - The first line contains a single integer n (1 leq n leq 10^5), the number of elements in the array. - The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9), representing the array elements. # Output Format - Output a single integer, the minimum number of operations required. # Examples Example 1 **Input:** ``` 5 3 3 3 3 3 ``` **Output:** ``` 0 ``` **Explanation:** All elements are already equal, so no operations are needed. Example 2 **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 4 ``` **Explanation:** One of the optimal solutions is to increase the first three elements to 4, requiring 3 increment operations on 1, 2, and 3: (1 -> 4), (2 -> 4), (3 -> 4). This totals 3 operations. Alternatively, you could transform everything to 3 by 1 decrement on 4 and increase 1 by 2 and 2 by 1, also totaling 4. # Note The optimal value to which you should transform all elements in the array is the median of the array. Calculating to transform all elements to the median minimizes the total number of operations.","solution":"def min_operations_to_make_equal(arr): Returns the minimum number of operations required to make all elements in the array equal by either increasing or decreasing any array element by 1. n = len(arr) arr.sort() # Find the median median = arr[n//2] # Calculate the total number of operations operations = sum(abs(x - median) for x in arr) return operations"},{"question":"Diana has a magic box that can rotate elements in an array. Each element in the array can either rotate clockwise (\'CW\') by a specified number of positions or counterclockwise (\'CCW\') by a specified number of positions. Given an array of integers and a list of rotation operations, return the modified array after performing all the operations. The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) - the number of elements in the array and the number of operations, respectively. The second line contains n integers - the elements of the array. Each of the next q lines contains a character (\'CW\' or \'CCW\') followed by an integer x (1 ≤ x ≤ 10^5) - the type of rotation and the number of positions to rotate. Output the modified array after performing all the rotation operations. ```plaintext Input: 7 3 1 2 3 4 5 6 7 CW 3 CCW 2 CW 1 Output: 6 7 1 2 3 4 5 ``` The array is [1, 2, 3, 4, 5, 6, 7]. After the first operation (CW 3), the array is [5 6 7 1 2 3 4]. After the second operation (CCW 2), the array is [7 1 2 3 4 5 6]. After the third operation (CW 1), the final array is [6 7 1 2 3 4 5].","solution":"def rotate_array(n, q, array, operations): Rotates the elements in the array based on the operations. :param int n: number of elements in the array :param int q: number of operations :param list array: list of integer elements :param list operations: list of operations (each operation is a tuple containing rotation direction and number of positions) :return: modified array after performing all the operations :rtype: list for direction, x in operations: if direction == \'CW\': x = x % n # Reduce x to the least rotations needed array = array[-x:] + array[:-x] elif direction == \'CCW\': x = x % n # Reduce x to the least rotations needed array = array[x:] + array[:x] return array"},{"question":"You are given a string s consisting of lowercase English letters. Find the length of the longest substring with all distinct characters. A substring is defined as a contiguous sequence of characters within the string. The input string may contain characters from \'a\' to \'z\' and will have a length between 1 and 100,000 inclusive. # Input - The first and only line of input contains the string s. # Output - Output a single integer — the length of the longest substring with all distinct characters. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Input ``` bbbbb ``` Output ``` 1 ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) char_index_map = {} start = 0 max_length = 0 for i in range(n): if s[i] in char_index_map and char_index_map[s[i]] >= start: start = char_index_map[s[i]] + 1 char_index_map[s[i]] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"A group of scientists is conducting a research project on cellular growth patterns. They are examining a grid where each cell can either be empty or occupied by a cell of a specific type. Cells of the same type have the ability to merge and form larger connected components. The grid has dimensions n times m and is represented by a matrix of integers, where each integer corresponds to a specific cell type, and a 0 represents an empty cell. Two cells are considered connected if they are of the same type and are adjacent either horizontally or vertically. The scientists are interested in determining the size of the largest connected component of cells for each type. Write a program that processes the grid and outputs the size of the largest connected component for each cell type found in the grid. The first line of input contains two integers, n and m (1 leq n, m leq 500) — the number of rows and columns in the grid. The next n lines each contain m integers, the elements of the grid a_{ij} (0 leq a_{ij} leq 100). Output the results for each cell type in any order. For each unique cell type found in the grid, output an integer representing the size of the largest connected component of that type. If a cell type does not exist in the grid, do not include it in the output. # Example Input ``` 4 5 1 1 0 2 2 1 0 0 2 2 0 0 0 3 0 3 3 3 0 0 ``` Output ``` 1 3 2 4 3 3 ``` In this example: - The largest connected component of cell type 1 has size 2. - The largest connected component of cell type 2 has size 4. - The largest connected component of cell type 3 has size 3.","solution":"def largest_connected_components(grid): from collections import defaultdict n, m = len(grid), len(grid[0]) def dfs(x, y, cell_type): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if 0 <= cx < n and 0 <= cy < m and grid[cx][cy] == cell_type: grid[cx][cy] = -1 # Mark as visited size += 1 # Check the four possible directions stack.extend([(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]) return size largest_components = defaultdict(int) for i in range(n): for j in range(m): if grid[i][j] > 0: cell_type = grid[i][j] size = dfs(i, j, cell_type) largest_components[cell_type] = max(largest_components[cell_type], size) return sorted(largest_components.items())"},{"question":"Alice loves building toy towers using blocks of different sizes. Every tower has a base width, and she can only place a smaller block on top of a larger one, ensuring stability. Given a list of block widths, Alice wants to know the maximum number of towers she can build if she follows this rule strictly. You are given `n` integers w1, w2, ... , wn, representing the widths of the blocks (1 ≤ wi ≤ 10^9). Determine the maximum number of towers Alice can build using all blocks where each block can only be part of exactly one tower, and each tower is strictly decreasing in width from bottom to top. The first line of the input contains an integer `n` (1 ≤ n ≤ 50,000) — the number of blocks. The second line contains `n` integers w1, w2, ..., wn separated by spaces. Print a single integer — the maximum number of towers Alice can build. For example, given the widths of the blocks as [4, 3, 3, 2, 1, 1, 1], Alice can build 3 towers: [4, 3, 2, 1], [3, 1], [1]. Therefore, the output should be `3`. Example: Input: 7 4 3 3 2 1 1 1 Output: 3","solution":"def max_towers(blocks): from collections import defaultdict if not blocks: return 0 block_counts = defaultdict(int) for block in blocks: block_counts[block] += 1 max_tower_count = max(block_counts.values()) return max_tower_count # Example usage blocks = [4, 3, 3, 2, 1, 1, 1] print(max_towers(blocks)) # Output: 3 # To fit the example input/output format exactly with user input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) blocks = list(map(int, data[1:])) print(max_towers(blocks))"},{"question":"Anna loves playing with sequences. She has a sequence of n integers, and she wants to select a subsequence from it with the following properties: 1. The length of the subsequence is exactly k. 2. The sum of the subsequence is as large as possible. Help Anna find the largest possible sum of such a subsequence. The first line of input contains two integers, n and k (1 ≤ k ≤ n ≤ 1000). The second line contains n integers: a[1], a[2], ..., a[n] (-1000 ≤ a[i] ≤ 1000). Output one integer - the largest possible sum of a subsequence with length k. ```plaintext Input 5 3 -1 2 3 -4 5 Output 10 Explanation The subsequence with the largest possible sum is [2, 3, 5], which sums to 10. ```","solution":"def largest_subsequence_sum(n, k, arr): Returns the largest possible sum of a subsequence of length k from the array arr. Parameters: n (int): Length of the array k (int): Length of the desired subsequence arr (list): List of integers which is the array Returns: int: Largest possible sum of a subsequence of length k # Sort the array in descending order arr.sort(reverse=True) # Take the first k elements subsequence = arr[:k] # Return the sum of these k elements return sum(subsequence)"},{"question":"Polycarp loves playing a mathematical game with his classmates. He invented a simple game using numbers and guesses. In this game, Polycarp writes down an integer `x`, and his friends need to guess if `x` is a \\"good\\" number or not based on specific rules Polycarp provides. A number is considered \\"good\\" if it is divisible by `k` or contains the digit `k` at least once in its decimal representation. For example, if `k = 3`, the numbers 3, 6, 9, 13, and 23 are \\"good\\". Help Polycarp\'s friends by writing a program that checks if a given number is \\"good\\" based on Polycarp\'s rules. The input consists of two integers `x` and `k` (1 ≤ x ≤ 10^5, 1 ≤ k ≤ 9) separated by a single space. Print \\"YES\\" if the number is \\"good\\"; otherwise, print \\"NO\\". **Examples:** Input: ``` 25 5 ``` Output: ``` YES ``` Input: ``` 22 3 ``` Output: ``` NO ``` Input: ``` 30 5 ``` Output: ``` YES ``` Input: ``` 13 3 ``` Output: ``` YES ```","solution":"def is_good_number(x, k): Determines if a number x is \\"good\\" based on the rule that it must be divisible by k or contain the digit k at least once in its decimal representation. :param x: Integer to be checked. :param k: The digit k to check against. :return: \\"YES\\" if x is a good number, otherwise \\"NO\\". if x % k == 0 or str(k) in str(x): return \\"YES\\" return \\"NO\\""},{"question":"Berta has a rectangular garden that she needs to fence. Her garden spans \'n\' rows and \'m\' columns of square plots. Each plot can either be empty or contain a tree. Berta wants to ensure that the entire garden is enclosed by the fence, taking into account any trees within the boundary that cannot be moved or removed. The fencing follows these rules: 1. The fence must be a simple closed loop (no intersections or self-loops) and must form a rectangle. 2. The fence must be placed directly between the plots. 3. The fence must completely encircle the garden externally. 4. The fence cannot pass through any plot with a tree. For simplicity, assume that Berta will only build the fence on boundary plots of the given garden dimensions. You are given the garden\'s representation as an \'n\' by \'m\' grid where each cell is either \'.\' representing an empty plot or \'T\' representing a plot with a tree. Determine whether it is possible to fence the garden based on the rules provided. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 50) – the number of rows and columns of the garden, respectively. The next \'n\' lines each contain \'m\' characters representing the garden grid. Output \\"YES\\" (without quotes) if it is possible to build the fence as per the rules, otherwise print \\"NO\\" (without quotes). # Examples Input: 4 4 .... .T.. .T.. .... Output: YES Input: 3 4 .T.. .... ..T. Output: NO","solution":"def can_fence_garden(n, m, garden): Determines whether it is possible to build a fence around the boundary of the garden. for i in range(n): if garden[i][0] == \'T\' or garden[i][m-1] == \'T\': return \\"NO\\" for j in range(m): if garden[0][j] == \'T\' or garden[n-1][j] == \'T\': return \\"NO\\" return \\"YES\\""},{"question":"A small village has a unique system of expressing love through sequences of numbers. They have a special sequence called a \\"Love Sequence\\". A Love Sequence is defined as follows: A sequence of integers is considered a Love Sequence if there is exactly one inversion in the sequence. An inversion is a pair of indices (i) and (j) such that (i < j) and (a[i] > a[j]). You are given a sequence of (n) distinct integers. Determine if it is possible to rearrange the sequence in such a way that it becomes a Love Sequence. # Input - The first line contains a single integer (n) ((2 le n le 10^5)), the length of the sequence. - The second line contains (n) distinct integers (a_1, a_2, ldots, a_n) ((1 le a_i le 10^9)). # Output - Print \\"YES\\" if the sequence can be rearranged into a Love Sequence. - Otherwise, print \\"NO\\". # Example Input ``` 5 1 3 4 2 5 ``` Output ``` YES ``` Explanation The sequence can be rearranged to [1, 2, 4, 3, 5] which has exactly one inversion: (4, 3). # Note If there are multiple valid sequences, print any of them. The problem guarantees that the original sequence contains distinct integers.","solution":"def is_love_sequence_possible(arr): Determines if the array can be rearranged to form a Love Sequence, i.e., with exactly one inversion. n = len(arr) if n < 2: return \\"NO\\" arr.sort() # Now the sorted array has no inversions # If we swap the last two elements, we will have exactly one inversion arr[-1], arr[-2] = arr[-2], arr[-1] # Count the number of inversions to verify. inversions = 0 for i in range(n): for j in range(i+1, n): if arr[i] > arr[j]: inversions += 1 if inversions == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a sequence of n numbers, you are asked to rearrange them into the lexicographically smallest permutation possible by performing at most one swap between any two elements in the sequence. If the sequence is already the lexicographically smallest permutation, return it as is. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output the lexicographically smallest permutation of the sequence after at most one swap. # Example Input: ``` 4 3 2 1 4 ``` Output: ``` 1 2 3 4 ``` Input: ``` 3 1 2 3 ``` Output: ``` 1 2 3 ``` # Note In the first example, swapping the first and the third elements gives the smallest permutation \\"1 2 3 4\\". In the second example, the sequence is already in the smallest permutation, so no swaps are needed.","solution":"def lexicographically_smallest_permutation(n, seq): Returns the lexicographically smallest permutation possible by performing at most one swap between any two elements in the sequence. # Step 1: Create a sorted version of the sequence to compare against sorted_seq = sorted(seq) # Step 2: Find the first element in the sequence that is not in its # lexicographical position for i in range(n): if seq[i] != sorted_seq[i]: # Step 3: Find the position of the smallest element that should # be swapped with min_pos = i for j in range(n-1, i, -1): if seq[j] == sorted_seq[i]: min_pos = j break # Step 4: Swap the elements and return the sequence seq[i], seq[min_pos] = seq[min_pos], seq[i] return seq # If no swap needed, return the original sequence return seq"},{"question":"You are given an array of n positive integers. Your task is to transform this array into a non-decreasing array by adding up to one positive integer to each element of the array. A non-decreasing array is an array where each element is equal to or greater than the previous element. You have to determine the minimum possible value of the maximum element in the resulting array after performing the transformation. More formally, for each element of the array, you can add an integer ( x_i ) ( ( x_i geq 0 ) ) to it in such a way that the array becomes non-decreasing. You have to find the minimum possible value of ( max(a_i + x_i) ) (for all valid indices ( i )) after performing the transformation. **Input:** The first line contains an integer ( t ) ( ( 1 leq t leq 100 ) ) – the number of test cases. Each test case contains: - The first line contains a single integer ( n ) ( ( 2 leq n leq 10^5 ) ) – the number of elements in the array. - The second line contains ( n ) positive integers ( a_1, a_2, ldots, a_n ) ( ( 1 leq a_i leq 10^9 ) ) – the elements of the array. **Output:** For each test case, print a single integer – the minimum possible value of the maximum element of the array after the transformation. **Example:** **Input:** ``` 2 4 4 2 1 3 3 1 2 3 ``` **Output:** ``` 4 3 ``` **Explanation:** In the first test case, by adding the following values: add 3 to the second element, 3 to the third element, and 1 to the fourth element, we can transform the array [4, 2, 1, 3] into [4, 5, 4, 4], which is a non-decreasing array with the maximum value being 5. However, we can also choose to add 2 to the second element, 3 to the third element, and 1 to the fourth element, transforming the array to [4, 4, 4, 4] where the maximum value is 4, which is the minimum possible value. In the second test case, the array is already non-decreasing, so the minimum possible value of the maximum element remains 3.","solution":"def min_possible_max_value(t, test_cases): results = [] for case in test_cases: n, arr = case prefix_max = arr[0] for i in range(1, n): if arr[i] < prefix_max: arr[i] += prefix_max - arr[i] prefix_max = max(prefix_max, arr[i]) results.append(prefix_max) return results"},{"question":"You are given a series of rocks arranged in a line. Each rock has a certain weight, wi (1 ≤ wi ≤ 1000). You want to split these rocks into two groups such that the absolute difference between the sum of the weights of the rocks in the two groups is minimized. You cannot change the order of the rocks and you have to consider them from left to right. For example, if the weights of the rocks are [10, 20, 15, 5, 25], you might split them into one group with [10, 20, 15] and another group with [5, 25]. Your task is to determine the minimum absolute difference that can be achieved by splitting the rocks into two groups. The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of rocks. The second line contains n integers w1, w2, ..., wn — the weights of the rocks. Print the required minimum absolute difference. # Example Input: ``` 5 10 20 15 5 25 ``` Output: ``` 5 ``` In this example, you can split the rocks into groups [10, 20, 15] and [5, 25]. The sum of weights in the first group is 45 and in the second is 30. The absolute difference is 15. This is not the optimal split. The optimal split can be [10, 15, 20] and [5, 25] with sums 45 and 30, respectively, and the absolute difference being 15. The best achievable minimum difference in this case is 5.","solution":"def min_abs_difference(n, weights): total_sum = sum(weights) dp = [False] * (total_sum + 1) dp[0] = True for weight in weights: for j in range(total_sum, weight - 1, -1): if dp[j - weight]: dp[j] = True min_diff = float(\'inf\') for s1 in range(total_sum // 2 + 1): if dp[s1]: s2 = total_sum - s1 min_diff = min(min_diff, abs(s2 - s1)) return min_diff"},{"question":"Two scientists are conducting an experiment in a rectangular laboratory. The laboratory can be represented as an m x n grid, where each cell contains a piece of equipment that affects their movement. Each piece of equipment either allows movement to the adjacent cell or obstructs it. The scientists need to move from the top-left corner of the laboratory to the bottom-right corner. The laboratory grid is represented by an m x n matrix, where \'1\' indicates the equipment allows movement to an adjacent cell (either up, down, left, or right) and \'0\' means the equipment restricts movement. Furthermore, there are certain cells that the scientists marked as hazardous (\'2\'), which they need to avoid completely during their experiment. Your task is to determine the shortest path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) avoiding hazardous cells. If it is not possible to reach the destination, return -1. The input consists of: - The first line contains two integers m and n (1 ≤ m, n ≤ 200) — the dimensions of the laboratory. - The following m lines each contain n characters: \'0\', \'1\', or \'2\', representing the laboratory matrix. Output a single integer — the length of the shortest path from the top-left to the bottom-right corner avoiding hazardous cells. If it is impossible to reach the destination, return -1. **Example Input:** ``` 4 4 1 1 1 1 1 0 0 1 1 1 1 1 1 2 2 1 ``` **Example Output:** ``` 7 ``` **Explanation:** The shortest path avoiding hazardous cells is as follows: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (1, 3) -> (2, 3) -> (3, 3)","solution":"from collections import deque def shortest_path(lab, m, n): Determines the shortest path from the top-left corner to the bottom-right corner avoiding hazardous cells. :param lab: List of Lists representing the laboratory matrix :param m: Number of rows :param n: Number of columns :return: The length of the shortest path, or -1 if it is not possible to reach the destination. if lab[0][0] != \'1\' or lab[m-1][n-1] != \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: return dist + 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and lab[nx][ny] == \'1\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Nina is participating in a treasure hunt game. She starts at the origin (0, 0) in a 2D grid and follows a sequence of movements described by a string of characters, where each character represents a direction she moves to: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. After completing the sequence of movements, she collects any treasure she encounters at her final position. The grid has several treasures placed at distinct coordinates, and Nina\'s goal is to collect as much treasure as possible by the end of her sequence. Given the initial string of movements and the positions of the treasures on the grid, determine the maximum number of treasures Nina can collect if she is allowed to visit each treasure position exactly once. The first line of the input contains an integer n (1 ≤ n ≤ 100) – the length of the movement sequence. The second line contains a string s of length n, consisting of characters \'U\', \'D\', \'L\', and \'R\'. The third line contains an integer m (1 ≤ m ≤ 100) – the number of treasures on the grid. Each of the next m lines contains two integers xi and yi (−1000 ≤ xi, yi ≤ 1000) – the coordinates of each treasure on the grid. Print a single integer – the maximum number of treasures Nina can collect by the end of her movement sequence. For example: Input: 6 UUDDLL 3 0 1 -1 1 0 0 Output: 2 Nina moves up twice, down twice, and left twice, finishing at position (-2, 0). She collects treasures at positions (0, 1) and (0, 0).","solution":"def collect_treasures(n, s, m, treasures): This function determines the number of treasures collected by Nina based on her movement sequence. Parameters: n (int): The length of the movement sequence. s (str): The string of movements (consisting of \'U\', \'D\', \'L\', \'R\'). m (int): The number of treasures on the grid. treasures (list of tuples): A list of tuples representing the coordinates of the treasures. Returns: int: The number of treasures collected by Nina. # Starting position at origin (0, 0) x, y = 0, 0 # Convert the list of treasures to a set for quick lookup treasure_set = set(treasures) collected_treasures = 0 # Check starting position for treasure if (x, y) in treasure_set: collected_treasures += 1 treasure_set.remove((x, y)) # Process each move in the sequence for move in s: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 # Check if current position has a treasure if (x, y) in treasure_set: collected_treasures += 1 treasure_set.remove((x, y)) return collected_treasures"},{"question":"In a given city, there are n streets numbered from 1 to n. Each street has a certain number of lampposts. The lampposts need to be inspected for their condition. Every day, you inspect a certain number of lampposts on a specific street. You are given q queries, where each query contains two integers l and r (1 <= l <= r <= n). For each query, you need to determine the minimum number of days required to fully inspect all lampposts in the range of streets from l to r, inclusive. You can always inspect any number of lampposts per street in a single day, but you must completely inspect one street before moving to the next one. The input consists of: - An integer n (1 <= n <= 10^5), the number of streets. - An array of n integers where the i-th integer represents the number of lampposts on the i-th street (1 <= lampposts <= 10^9). - An integer q (1 <= q <= 10^5), the number of queries. - q lines, each containing two integers l and r representing a query. For each query, output the minimum number of days required to inspect all lampposts on streets from l to r. # Example Input ``` 5 2 3 1 7 4 3 1 3 2 5 1 5 ``` Output ``` 3 4 5 ``` # Explanation - For the first query (1, 3), you inspect 2 lampposts on street 1 one day, 3 lampposts on street 2 the next day, and 1 lamppost on street 3 the final day, taking 3 days. - For the second query (2, 5), you inspect 3 lampposts on street 2 one day, 1 lamppost on street 3 the next day, 7 lampposts on street 4 the following day, and 4 lampposts on street 5 on the final day, taking 4 days. - For the third query (1, 5), you inspect all lampposts on streets 1 to 5, one day per street, taking 5 days in total.","solution":"def min_days_to_inspect(n, lampposts, queries): Determines the minimum number of days required to fully inspect all lampposts in the range of streets from l to r, inclusive. :param n: int, number of streets :param lampposts: list of int, number of lampposts on each street :param queries: list of tuples, each containing two integers l and r representing a query :return: list of int, minimum number of days required for each query results = [] for l, r in queries: results.append(r - l + 1) return results"},{"question":"A company is developing an automated system to detect fraudulent transactions in real time. Each transaction consists of the following fields: a unique transaction ID, the user ID of the customer making the transaction, the transaction amount, and the timestamp of the transaction. The system keeps a log of all these transactions in chronological order. For a given user ID, the system needs to detect any rapid sequence of transactions that may indicate potential fraud. A rapid sequence is defined as at least three transactions made by the same user within a 5-minute interval. Your task is to write a function that identifies all user IDs that have suspicious transaction patterns, based on the given criteria. If a user meets the fraud criteria, report the earliest timestamp of the first transaction in the suspicious sequence for that user. The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100,000), representing the number of transactions. The next n lines each contain a transaction description with the following format: \\"transactionID userID amount timestamp\\", where timestamp is in the format \\"YYYY-MM-DDTHH:MM:SS\\". For each test case, output all the user IDs that have suspicious transactions along with the earliest suspicious transaction timestamp in the format \\"userID timestamp\\". Output the results for each test case on separate lines, sorted by user ID. If no suspicious transactions are found for a test case, output \\"None\\". Example Input: ``` 1 5 tx1 123 100 2023-10-01T12:00:00 tx2 123 150 2023-10-01T12:03:00 tx3 123 200 2023-10-01T12:04:00 tx4 456 300 2023-10-01T13:00:00 tx5 456 350 2023-10-01T13:10:00 ``` Example Output: ``` 123 2023-10-01T12:00:00 ```","solution":"from collections import defaultdict from datetime import datetime, timedelta def detect_fraudulent_transactions(n, transactions): user_transactions = defaultdict(list) for transaction in transactions: tx_id, user_id, amount, timestamp = transaction.split() timestamp = datetime.strptime(timestamp, \\"%Y-%m-%dT%H:%M:%S\\") user_transactions[user_id].append(timestamp) suspicious_users = [] for user_id, timestamps in user_transactions.items(): timestamps.sort() for i in range(len(timestamps) - 2): if timestamps[i + 2] - timestamps[i] <= timedelta(minutes=5): suspicious_users.append((user_id, timestamps[i].strftime(\\"%Y-%m-%dT%H:%M:%S\\"))) break if not suspicious_users: return \\"None\\" suspicious_users.sort() return \\"n\\".join(f\\"{user_id} {timestamp}\\" for user_id, timestamp in suspicious_users) def process_test_cases(test_cases): results = [] for n, transactions in test_cases: results.append(detect_fraudulent_transactions(n, transactions)) return results # Example and other input handling could be added here to send input to the function"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation as many times as you like: Choose some substring of the given string and replace all characters in this substring with any single lowercase English letter. Your task is to determine the minimum number of operations required to make the entire string consist of only one unique character. The first line of input contains an integer n (1 ≤ n ≤ 1000), the length of the given string. The second line contains the string of length n consisting of lowercase English letters. Output the minimum number of operations needed to convert the string into a string consisting of a single unique character. # Example Input ``` 7 ababcbc ``` Output ``` 3 ``` # Explanation 1. First, replace the substring \\"aba\\" with \\"a\\"; the string becomes \\"aabc\\". 2. Next, replace the substring \\"a\\" with \\"b\\"; the string becomes \\"bbb\\". 3. Finally, replace the substring \\"bbb\\" with \\"b\\"; the string becomes \\"bbb\\". So, a total of 3 operations are required to make the whole string consist of just the character \\"b\\".","solution":"def min_operations_to_uniform_string(n, s): Determines the minimum number of operations required to make the entire string consist of only one unique character. Parameters: n (int): The length of the string. s (str): The string itself consisting of lowercase English letters. Returns: int: The minimum number of operations required. from collections import Counter # Count the frequency of each character char_count = Counter(s) # The minimum number of operations needed is the length of the string minus the count of the most frequent character. max_freq = max(char_count.values()) return n - max_freq"},{"question":"Mr. Sharp is constructing a sequence of products and wants to understand a particular property of these products. Each product in his sequence is made up of prime numbers. To be more precise, the i-th product in the sequence is simply the product of the first i prime numbers. He is curious to know for a given positive integer n (n ≥ 1), what is the maximum integer k such that the n-th product in the sequence is divisible by k distinct prime numbers. Formally, you are provided with an integer n. Compute the maximum number of distinct prime factors of the n-th product. The first line of the input contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^5) for which you need to calculate the result. Output t lines, each containing the answer for the respective test case. # Sample Input 5 1 2 5 10 15 # Sample Output 1 2 5 10 15 **Note:** For n=1, the first product is 2 (2 = 2^1), which has 1 distinct prime factor: {2}. For n=2, the second product is 2 * 3 = 6 (6 = 2^1 * 3^1), which has 2 distinct prime factors: {2,3}. For n=5, the fifth product is 2 * 3 * 5 * 7 * 11 = 2310, which has 5 distinct prime factors: {2, 3, 5, 7, 11}. For n=10, the tenth product includes the first 10 primes, so there are 10 distinct prime factors. And so on.","solution":"def max_distinct_primes(n): Returns the maximum number of distinct prime factors of the product of the first n primes. return n"},{"question":"You are given a maze represented as an n × m grid with cells that can either be free path cells (represented by \'.\') or wall cells (represented by \'#\'). Your task is to find the smallest number of steps required for a mouse to go from its starting position (S) to the cheese (C). The mouse can move one step at a time in four possible directions: up, down, left, or right. If there is no such path, return -1. Input: The first line contains integers n and m (1 ≤ n, m ≤ 500) — the dimensions of the maze. The next n lines contain m characters each — the maze grid. There is exactly one \'S\' and one \'C\' in the maze. Output: Print a single integer — the smallest number of steps needed for the mouse to reach the cheese, or -1 if there is no such path. Example: Input: 4 5 S...# .#..# .#. .#..C Output: 7","solution":"from collections import deque def min_steps_to_cheese(n, m, maze): # Locate the starting point \'S\' and the cheese \'C\' start = None cheese = None for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'C\': cheese = (i, j) if start and cheese: break if not start or not cheese: return -1 # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([start]) visited = set([start]) steps = 0 # BFS loop while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == cheese: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1"},{"question":"The planet of Zorblat is a very peculiar place. It has cities connected by a series of teleportation links, and each teleportation link connects exactly two cities in a bidirectional manner. The residents of Zorblat love to explore different cities, but they have a unique way of marking their travels – they always start and end at their home city and they do not visit any city more than once in a single trip. Basically, they enjoy making a tour. Your mission is to help them determine the longest possible circular tour they can make starting and ending at their home city. The longest tour is defined as the tour that includes the most teleportation links. The only line of input contains three integers n, m, and h – the number of cities, the number of teleportation links, and the index of the home city respectively (3 leq n leq 100, 1 leq m leq binom{n}{2}), followed by m lines, each containing two integers u and v which represent a teleportation link between city u and city v (1 leq u, v leq n, u neq v). Print a single integer – the number of teleportation links in the longest possible circular tour starting and ending at the home city h. Example: Input: ``` 5 6 1 1 2 2 3 3 4 4 5 5 1 1 3 ``` Output: ``` 5 ``` Explanation: For the above example, the longest circular tour starting and ending at city 1 includes 5 teleportation links: (1 -> 2 -> 3 -> 4 -> 5 -> 1).","solution":"import networkx as nx from itertools import permutations def longest_circular_tour(n, m, h, links): G = nx.Graph() # Add all the edges to the graph for u, v in links: G.add_edge(u, v) max_length = 0 # Generate all permutations of nodes except the home city nodes = [i for i in range(1, n + 1) if i != h] for perm in permutations(nodes): tour = [h] + list(perm) + [h] valid_tour = True length = 0 for i in range(len(tour) - 1): if G.has_edge(tour[i], tour[i + 1]): length += 1 else: valid_tour = False break if valid_tour: max_length = max(max_length, length) return max_length"},{"question":"A new cupcake shop has opened, and they want to organize their bakery to handle orders efficiently. They have a list of cupcake orders, each order specifying the type of cupcake requested. Each cupcake type has a unique integer ID associated with it. Sometimes, due to high demand, some orders need to be combined into batches for efficient production. # Task Given a list of cupcake orders, your task is to write a program that combines consecutive orders of the same type into a single batch and returns the list of batches. Each batch should include the cupcake type ID and the number of consecutive orders for that type. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of orders. The second line contains `n` integers representing the type IDs of the cupcakes in the order they were ordered. # Output Output a list of batches, each batch represented by the cupcake type ID followed by the number of consecutive orders for that type. Each batch should be printed on a new line. # Example Input ``` 8 1 1 2 2 2 3 3 1 ``` Output ``` 1 2 2 3 3 2 1 1 ``` In this example, there are 8 cupcake orders. The orders are: 1. Type 1 (2 consecutive) 2. Type 2 (3 consecutive) 3. Type 3 (2 consecutive) 4. Type 1 (1 consecutive) Explanation Your program should process the incoming list of orders and print batches of consecutive similar orders. For the given input, the output explains the sequence of batches, where each line represents the type of the cupcake and the number of consecutive orders for that type.","solution":"def batch_cupcake_orders(n, orders): Combines consecutive orders of the same type into batches. :param n: int - the number of orders :param orders: list of int - the type IDs of the cupcakes in the order they were ordered :return: list of tuples - each tuple contains the cupcake type ID and the number of consecutive orders for that type if n == 0: return [] result = [] current_type = orders[0] count = 1 for i in range(1, n): if orders[i] == current_type: count += 1 else: result.append((current_type, count)) current_type = orders[i] count = 1 result.append((current_type, count)) # Append the last batch return result"},{"question":"Leonardo is organizing a treasure hunt for his friends. The treasure is hidden in a grid of dimensions n x m. Each cell in the grid either contains a clue or is empty. The clues are represented by integers from 1 to k, each type of clue can only appear once in the grid, while empty cells are denoted by 0. To solve the treasure hunt, the participants need to collect all the clues in ascending order starting from clue 1 up to clue k. They can only move between cells in the grid using the four cardinal directions (up, down, left, right). The time taken to move from one cell to an adjacent cell is 1 second. Leonardo wants to know the minimum time required for his friends to collect all the clues in the correct order, starting from clue 1. The first line contains three integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 100), and k (1 ≤ k ≤ 100) — the number of rows, columns, and the number of clues. The next n lines contain an n x m grid, where each cell contains either an integer (0 for empty or a positive integer from 1 to k for a clue). Output the minimum time required to collect all the clues in the correct order. Here is an example of input and output: ``` Input: 3 3 3 1 0 2 0 3 0 0 0 0 Output: 4 ``` In the example, the participants would start at clue 1, move to clue 2, and then to clue 3, taking 4 seconds in total.","solution":"from collections import deque def find_clue_positions(grid, n, m): positions = {} for i in range(n): for j in range(m): if grid[i][j] > 0: positions[grid[i][j]] = (i, j) return positions def bfs(start, end, grid, n, m): queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != -1: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return float(\'inf\') def minimum_time_to_collect_all_clues(n, m, k, grid): clue_positions = find_clue_positions(grid, n, m) total_time = 0 for i in range(1, k): start = clue_positions[i] end = clue_positions[i + 1] time = bfs(start, end, grid, n, m) total_time += time return total_time"},{"question":"You are given an array of n integers representing points on a number line. Each integer indicates the location of a festival. The excitement of attending a festival depends on the number of festivals attended consecutively. The excitement for attending one festival is equal to the absolute difference between the locations of the two farthest apart festivals in that sequence. For example, if you attend festivals at locations [1, 2, 4, 7], the excitement is abs(7 - 1) = 6. You have to choose an optimal subsequence of consecutive festivals, such that the excitement is maximized. The first line contains one integer n (1 le n le 10^6) — the number of festivals. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9) — the locations of the festivals. Print a single integer, the maximum excitement of attending festivals consecutively. Example: Input 7 1 3 6 8 10 14 18 Output 17 In this example, the sequence [1, 3, 6, 8, 10, 14, 18] gives the maximum excitement, which is abs(18 - 1) = 17.","solution":"def max_exciting_sequence(festival_locations): Given a list of festival locations, returns the maximum excitement which is defined as the absolute difference between the locations of the two farthest apart festivals in that sequence. if not festival_locations: return 0 max_location = max(festival_locations) min_location = min(festival_locations) excitement = abs(max_location - min_location) return excitement # Example n = 7 locations = [1, 3, 6, 8, 10, 14, 18] print(max_exciting_sequence(locations)) # Expected: 17"},{"question":"Tim is working on a security system that logs various events throughout the day. Each event is represented by a character and the sequence of these characters forms a string. Tim wants to identify if the sequence of events has any palindromic substring of a specified length. A palindromic substring is a sequence that reads the same backward as forward. For example, ‘aba’ is a palindromic substring. Given a string of events and a specified length l, determine if there exists at least one palindromic substring of length l. The first line of the input contains an integer t (1 ≤ t ≤ 50) – the number of test cases. Each test case consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 100), the sequence of events. The second line contains an integer l (1 ≤ l ≤ |s|) – the desired length of the palindromic substring. For each test case, print \\"YES\\" if the string contains at least one palindromic substring of length l, otherwise print \\"NO\\". The letters in the words \\"YES\\" and \\"NO\\" can be output in any case. Example: Input: 3 abacdfgdcabba 3 abcba 4 aabaa 2 Output: YES NO YES In the first example, the string \\"abacdfgdcabba\\" contains the palindromic substring \\"aba\\" of length 3. In the second example, the string \\"abcba\\" does not contain any palindromic substring of length 4. In the third example, the string \\"aabaa\\" contains the palindromic substring \\"aa\\" of length 2.","solution":"def is_palindromic_substring_present(event_str, length): Checks if there\'s a palindromic substring of specified length in event_str. Parameters: event_str (str): The string representing sequence of events. length (int): The desired length of the palindromic substring. Returns: str: \\"YES\\" if there\'s at least one palindromic substring of the given length, otherwise \\"NO\\". for i in range(len(event_str) - length + 1): substring = event_str[i:i+length] if substring == substring[::-1]: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases. Parameters: t (int): Number of test cases. test_cases (list): List of the tuples where each tuple is (event_str, length). Returns: list: List with results (\\"YES\\" or \\"NO\\") for each test case. results = [] for s, l in test_cases: results.append(is_palindromic_substring_present(s, l)) return results"},{"question":"Michael has been selected to represent his chess club in an upcoming chess tournament. He wants to practice with his club members before the event, but there are certain limitations regarding their availability. Each club member, including Michael, has specific days when they are available for practice. Given the availability schedule, help Michael determine the optimal way to organize practice sessions such that the maximum number of sessions take place with different members. # Input - The first line contains an integer `n` (1 ≤ `n` ≤ 50), the number of club members (excluding Michael). - The next `n` lines contain a sequence of `0`s and `1`s of length 7, representing the availability for each member (`1` means available, `0` means not available). Days are represented from Monday to Sunday. - The last line contains a sequence of `0`s and `1`s of length 7, representing Michael\'s availability. # Output - Print the maximum number of practice sessions that can be organized with different members. # Example Input ``` 3 1010101 1100001 1111111 1111100 ``` Output ``` 5 ``` # Explanation In the example: - Member 1 is available on Monday, Wednesday, Friday, Sunday. - Member 2 is available on Monday, Tuesday, Sunday. - Member 3 is available on all days. - Michael is available on Monday, Tuesday, Wednesday, Thursday, Friday. One possible optimal way to schedule: - Monday: Practice with Member 1 - Tuesday: Practice with Member 2 - Wednesday: Practice with Member 1 - Thursday: no practice - Friday: Practice with Member 1 - Saturday: no practice - Sunday: Practice with Member 2 Therefore, the maximum number of practice sessions is 5.","solution":"def max_practice_sessions(n, members_availability, michael_availability): # Convert Michael\'s availability to a set of days he is available michael_days = {i for i, day in enumerate(michael_availability) if day == \'1\'} max_sessions = 0 for day in range(7): if michael_availability[day] == \'1\': for member_days in members_availability: if member_days[day] == \'1\': max_sessions += 1 break return max_sessions # To be useful for importing while keeping the main execution within a test-guard if __name__ == \\"__main__\\": input_data = 3 1010101 1100001 1111111 1111100 input_lines = input_data.split(\\"n\\") n = int(input_lines[0]) members_availability = input_lines[1:n+1] michael_availability = input_lines[n+1] print(max_practice_sessions(n, members_availability, michael_availability))"},{"question":"A mysterious square grid has columns of different heights. The grid can be represented by a 2D array where each sub-array represents the heights of the columns in that row. You have been asked to do the following: 1. Identify the maximum height in each column. 2. Identify the minimum height in each column. 3. Calculate the sum of the differences between the maximum and minimum heights for every column. You need to write a function to perform this task. The input will be given in the following format: The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), which represent the number of rows and columns of the grid. Each of the next n lines contains m integers, representing the heights in that row. Your task is to calculate the sum of the differences between the maximum and minimum heights for every column. Function signature: `def calculate_height_difference_sum(n: int, m: int, grid: List[List[int]]) -> int:` Example input: 3 3 1 2 3 4 1 6 3 8 2 Example output: 11 Explanation: - For the first column: max height is 4, min height is 1, difference is 3 - For the second column: max height is 8, min height is 1, difference is 7 - For the third column: max height is 6, min height is 2, difference is 4 Sum of differences is 3 + 7 + 4 = 14","solution":"from typing import List def calculate_height_difference_sum(n: int, m: int, grid: List[List[int]]) -> int: Calculates the sum of the differences between the maximum and minimum heights for every column. differences_sum = 0 for col in range(m): col_heights = [grid[row][col] for row in range(n)] max_height = max(col_heights) min_height = min(col_heights) differences_sum += max_height - min_height return differences_sum"},{"question":"You are provided two numbers, an integer n and a positive integer m. You have n items, each having a certain price. You are allowed to apply a discount coupon exactly once, which gives you the following benefits: 1. You get a discount of m units on any one item\'s price. 2. The discount cannot exceed the price of the item you choose to apply it on (i.e., the price of the item cannot go below zero). You need to determine if you can achieve a total price that is no larger than a specified budget B by appropriately applying the discount. The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains three integers: n, m, and B (1 le n leq 1000, 1 le m leq 10^4, 1 le B leq 10^8), which represent the number of items, the discount value, and the budget, respectively. The second line contains n integers, where the i-th integer p_i (1 le p_i le 10^9) is the price of the i-th item. For each test case, print \\"YES\\" if it is possible to achieve the total price within the budget B, otherwise print \\"NO\\". **Example:** Input: ``` 3 4 10 50 20 30 40 50 5 15 100 25 35 45 55 65 3 20 45 19 22 33 ``` Output: ``` YES NO YES ``` **Explanation:** In the first test case, without the discount, the total price is 20 + 30 + 40 + 50 = 140. Applying the discount to the most expensive item (50) reduces its price by 10, resulting in a total price of 20 + 30 + 40 + 40 = 130. Applying the discount to the second most expensive item (40) reduces this further to 20 + 30 + 40 + 30 = 120, which is still above the budget. Applying the discount to either of the remaining items doesn\'t help. However, applying the discount to the first item and purchasing the remaining items without discount results in 10 + 30 + 40 + 50 = 130, still above the budget, but if you discount the item priced at 20, the total drops to 20+30+40+40 = 130, no combination brings the sum to <= 50, thus the correct answer should be NO In the second test case, without discount, the total price is 25 + 35 + 45 + 55 + 65 = 225. Applying the discount to any item does not bring the total within the budget of 100, so the correct answer is NO In the third test case, without discount, the total price is 19 + 22 + 33 = 74. Applying the discount to the item priced at 33 reduces its price to 13, resulting in a total price of 19 + 22 + 13 = 54, which is still above the budget. However, applying the discount to either of the remaining items will bring the total to 19 + 22 + 13 = 54 ,which is off the budget. So the answer is still NO","solution":"def is_within_budget(n, m, B, prices): Determines if the total price after applying the discount can be within budget B. :param n: Number of items :param m: Discount value :param B: Budget :param prices: List of item prices :return: \\"YES\\" if within budget, otherwise \\"NO\\" total_price = sum(prices) min_total_price_with_discount = float(\'inf\') for price in prices: total_with_discount = total_price - m if price - m < 0: total_with_discount += price min_total_price_with_discount = min(min_total_price_with_discount, total_with_discount) return \\"YES\\" if min_total_price_with_discount <= B else \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. :param t: Number of test cases :param test_cases: List of test case tuples (n, m, B, prices) :return: List of results for each test case results = [] for case in test_cases: n, m, B, prices = case results.append(is_within_budget(n, m, B, prices)) return results"},{"question":"You are given a square grid of size n x n filled with integers. The task is to determine the largest sub-grid with a given sum, S. More formally, a grid with size n x n is defined by an array a of integers, where a[i][j] represents the element at row i and column j (0 ≤ a[i][j] ≤ 10^9, 1 ≤ n ≤ 500). You are given an integer S (0 ≤ S ≤ 10^12). Your task is to find the side length of the largest sub-grid whose elements\' sum is exactly S. If there are multiple sub-grids of the same largest size, return any one of them. You need to output the side length of the largest square sub-grid having sum S. If no such sub-grid exists, output -1. Input Format: - The first line of the input contains two integers n and S, the size of the grid and the desired sub-grid sum. - This is followed by n lines, each containing n integers representing the grid. Output: - Output a single integer representing the side length of the largest square sub-grid whose elements\' sum is equal to S. If no such sub-grid exists, output -1. Example: Input: 4 12 1 2 4 5 6 3 5 1 2 8 7 6 3 4 1 2 Output: 2 Example Explanation: In the given grid, the largest sub-grid with sum 12 comes from the elements: 6 3 2 1 The sum of these elements is 12, and the side length of this sub-grid is 2. There might be other sub-grids with the same sum but having the same or smaller side lengths.","solution":"def largest_subgrid_with_sum(n, S, grid): if n == 0: return -1 # Create a prefix sum 2D array prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(n): for j in range(n): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] def get_sum(x1, y1, x2, y2): return prefix_sum[x2 + 1][y2 + 1] - prefix_sum[x2 + 1][y1] - prefix_sum[x1][y2 + 1] + prefix_sum[x1][y1] max_side_len = -1 # Try every possible side length for side in range(1, n + 1): found = False for i in range(n - side + 1): for j in range(n - side + 1): if get_sum(i, j, i + side - 1, j + side - 1) == S: max_side_len = side found = True break if found: break return max_side_len"},{"question":"Alice and Bob are playing a game. They start with a number `n` and take turns doing the following operation: reduce the number `n` by any divisor of `n` (excluding `n` itself). The player who cannot make a move loses the game. Alice always goes first. Given n, determine who would win if both players play optimally. Please write a function `find_winner(n)` that takes an integer n (1 ≤ n ≤ 1000) as input and returns \\"Alice\\" if Alice would win the game and \\"Bob\\" otherwise. # Input - A single integer n (1 ≤ n ≤ 1000). # Output - A string \\"Alice\\" if Alice would win the game and \\"Bob\\" if Bob would win. # Example Example 1: Input: ``` 1 ``` Output: ``` Bob ``` Example 2: Input: ``` 2 ``` Output: ``` Alice ``` Example 3: Input: ``` 4 ``` Output: ``` Alice ``` # Explanation In the first example, n = 1, Alice cannot make a move and thus loses, so the answer is \\"Bob\\". In the second example, n = 2, Alice can reduce 2 by 1 to get 1, and Bob cannot make a move, so Alice wins. In the third example, n = 4, Alice can reduce 4 by 2 to get 2, then Bob can only reduce 2 by 1 to get 1, and then Alice cannot make a move, so the answer is \\"Alice\\".","solution":"def find_winner(n): Determines the winner of the game given the starting number n. If n is 1, Alice cannot make a move, so Bob wins. Otherwise, Alice goes first and can always force Bob into a losing position by making the appropriate move. Parameters: n (int): The starting number (1 ≤ n ≤ 1000) Returns: str: \\"Alice\\" or \\"Bob\\" according to the winner. return \\"Bob\\" if n == 1 else \\"Alice\\""},{"question":"You are given a list of integers. Your task is to find and print the maximum possible product of any two distinct numbers from the list. The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers ai (1 ≤ ai ≤ 1000) — the integers in the list. All integers are guaranteed to be distinct. Print a single integer — the maximum product of any two distinct numbers from the list. For example, for the input: 5 1 10 3 7 6 The output should be: 70 Explanation: The pair (10, 7) results in the maximum product which is 70.","solution":"def max_product_of_two(n, ai): Returns the maximum product of two distinct numbers from a list. Parameters: n (int): The number of integers in the list. ai (list): The list of integers. Returns: int: The maximum product of any two distinct numbers from the list. if n < 2: raise ValueError(\\"The list should contain at least two elements.\\") ai.sort(reverse=True) return ai[0] * ai[1]"},{"question":"In a distant land called Numeria, there are wizards who practice the art of summoning powerful creatures. Each wizard possesses a magical strength denoted by an integer value. Summoning rituals are only successful if the sum of the magical strengths of the contributing wizards is non-decreasing over time. Given the magical strengths of a list of wizards, you must determine if it\'s possible to arrange them in such a way that the sum of their strengths at each addition is non-decreasing. For example, if there are three wizards with strengths [3, 1, 2], one possible valid arrangement could be [1, 2, 3]. Write a program that, for a given list of wizard strengths, determines if it is possible to achieve a non-decreasing sum sequence over the addition of these strengths and outputs the arrangement if possible. If no such arrangement exists, output \\"No Solution\\". **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of wizards. - The second line contains n integers, the magical strengths of the wizards, a1, a2, ..., an (1 ≤ ai ≤ 1,000,000). **Output:** - If an arrangement exists, print \\"Possible\\" followed by the arrangement of wizards\' strengths. - If no arrangement exists, print \\"No Solution\\". **Example:** Input: ``` 5 4 3 6 7 1 ``` Output: ``` Possible 1 3 4 6 7 ``` Input: ``` 3 5 4 2 ``` Output: ``` No Solution ```","solution":"def is_non_decreasing_possible(n, strengths): Determines if it\'s possible to arrange the wizards such that the sum of their strengths is non-decreasing over time. Parameters: n (int): Number of wizards. strengths (list): List of integers representing the magical strengths of the wizards. Returns: str: \\"Possible\\" followed by the arrangement of the strengths if an arrangement exists, otherwise \\"No Solution\\". # We can always achieve a non-decreasing sum by sorting the strengths sorted_strengths = sorted(strengths) return \\"Possiblen\\" + \\" \\".join(map(str, sorted_strengths)) # Example usage: # n = 5 # strengths = [4, 3, 6, 7, 1] # print(is_non_decreasing_possible(n, strengths))"},{"question":"You are given a binary tree with `n` nodes. Each node has a value and the tree may not be balanced. Your task is to find the longest path (from any node to any other node) in the tree where the absolute difference between the values of adjacent nodes in the path is exactly 1. The input contains multiple test cases. The first line contains the integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains the integer `n` (1 ≤ n ≤ 50) — the number of nodes in the tree. Each of the next `n` lines contains the value of a node followed by the indices of its left and right children. If a child does not exist, the index is -1. The root of the tree is always the first node. For each test case, output a single integer: the length of the longest path with the described properties. Example: Input: 2 5 1 2 3 2 -1 -1 3 -1 -1 4 -1 -1 5 -1 -1 4 1 2 -1 2 3 -1 3 4 -1 4 -1 -1 Output: 3 4 Explanation: In the first test case, the longest path with adjacent nodes having an absolute difference of 1 is [1, 2] or [1, 3], both have length 2. In the second test case, the longest path satisfying the condition is [1, 2, 3, 4], which has length 4.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_data): nodes = [TreeNode(data[0]) for data in node_data] for idx, (value, left, right) in enumerate(node_data): if left != -1: nodes[idx].left = nodes[left] if right != -1: nodes[idx].right = nodes[right] return nodes[0] def longest_path(root): def dfs(node): if not node: return 0, 0 left_len, left_max_len = dfs(node.left) right_len, right_max_len = dfs(node.right) current_len = 1 if node.left and abs(node.value - node.left.value) == 1: current_len += left_len if node.right and abs(node.value - node.right.value) == 1: current_len = max(current_len, 1 + right_len) return current_len, max(current_len, left_max_len, right_max_len) return dfs(root)[1] def longest_path_in_trees(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] node_data = test_cases[i][1] root = build_tree(node_data) results.append(longest_path(root)) return results"},{"question":"John is fascinated by sequences of numbers and has recently come across a unique type of sequence called a \\"k-balanced\\" sequence. A sequence of integers is called k-balanced if, for every integer i in the sequence, there are at least k other integers in the sequence that are equal to i. John has an array of integers and wants to make it k-balanced by either removing some elements or leaving it as it is. He requires your help to find the maximum length of a subsequence that can be made k-balanced. The first line of the input contains two integers n and k (1 ≤ n ≤ 100,000 and 1 ≤ k ≤ n) — the number of integers in the array and the required balance factor, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the elements of the array. Output a single integer — the maximum length of a k-balanced subsequence. # Example **Input** ``` 5 2 1 2 2 3 3 ``` **Output** ``` 4 ``` **Explanation**: A possible k-balanced subsequence with k=2 is [2, 2, 3, 3].","solution":"from collections import Counter def max_k_balanced_subsequence_length(n, k, array): Calculate the maximum length of a k-balanced subsequence. Parameters: n (int): the number of integers in the array. k (int): the required balance factor. array (list of int): the elements of the array. Returns: int: the maximum length of a k-balanced subsequence. # Count frequency of each element freq = Counter(array) max_length = 0 # Sum up to k-balanceable elements for key in freq: if freq[key] >= k: max_length += freq[key] return max_length"},{"question":"In the land of Codeville, there exists a unique grid-like city where the shops are arranged in a perfect grid. The city consists of N rows and M columns of shops. Each shop has a specific value which represents its profit. The city mayor wants to maximize the profit of the city by choosing a subgrid (a contiguous rectangular section of the grid). However, there is a catch. Due to the zoning laws, the chosen subgrid must not exceed a certain area limit of K shops. Determine the maximum profit that can be obtained from a subgrid of at most K area. The first line contains three integers N, M, K (1 ≤ N, M ≤ 100, 1 ≤ K ≤ N * M) — the dimensions of the grid and the maximum allowed area for the chosen subgrid. Each of the next N lines contains M integers. Each integer represents the profit of a shop and is within the range [-1000, 1000]. Output the maximum profit that can be obtained from any subgrid whose area does not exceed K. Example: Input: ``` 3 3 4 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` Explanation: The maximum profit subgrid with an area of at most 4 is: ``` 5 6 8 9 ``` The profit obtained is 5 + 6 + 8 + 9 = 28. Another example of a subgrid with an area of at most 4 is: ``` 4 5 7 8 ``` Here, the profit is 4 + 5 + 7 + 8 = 24.","solution":"def max_profit_subgrid(N, M, K, grid): # Helper function to compute prefix sum matrix def compute_prefix_sum(grid): prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] return prefix_sum prefix_sum = compute_prefix_sum(grid) max_profit = float(\'-inf\') # Iterate over all possible subgrids for i1 in range(1, N + 1): for j1 in range(1, M + 1): for i2 in range(i1, N + 1): for j2 in range(j1, M + 1): area = (i2 - i1 + 1) * (j2 - j1 + 1) if area <= K: current_sum = prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1] max_profit = max(max_profit, current_sum) return max_profit"},{"question":"You are organizing a coding competition for a group of children where each competition consists of several rounds. At the end of each competition, the winners are determined based on their total scores from all rounds. Given the scores of each child in each round, you need to find the winner with the highest total score. Write a program that will determine the winner of the competition given the scores. If there is more than one child with the same highest total score, the first one in the input with that score should be considered the winner. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of children. The second line contains an integer m (1 ≤ m ≤ 10) — the number of rounds in the competition. The next n lines contain m integers each, where the j-th integer in the i-th line represents the score of the i-th child in the j-th round. All scores are between 0 and 100 inclusive. Output: Print the 1-based index of the child who has the highest total score. Example: Input: 3 3 10 20 30 15 15 15 5 25 25 Output: 1 Explanation: The total scores of the children are as follows: - Child 1: 10 + 20 + 30 = 60 - Child 2: 15 + 15 + 15 = 45 - Child 3: 5 + 25 + 25 = 55 Child 1 has the highest total score of 60, so the output is 1.","solution":"def find_winner(scores): Determines the winner based on the highest total score. Args: scores (List[List[int]]): 2D list where scores[i][j] represents the score of i-th child in j-th round Returns: int: 1-based index of the child with the highest total score max_score = -1 winner_index = -1 for i, score in enumerate(scores): total_score = sum(score) if total_score > max_score: max_score = total_score winner_index = i return winner_index + 1"},{"question":"John is an avid photographer and enjoys capturing beautiful scenery. Recently, he went on a trip where he took photos of various landmarks. He wants to create a photo album that showcases the best sequence of photos capturing landmarks with distinct scenic values in a non-decreasing order. John noticed that while some photos have higher scenic value than others, he can only place the photos that follow a non-decreasing order of scenic values in his photo album. However, he can remove some photos if necessary to maintain this order. Given an array representing the scenic values of the photos John took, help him determine the length of the longest sequence of photos that he can place in his album, following the non-decreasing order rule. # Input - The first line contains an integer n (1 leq n leq 10^5) — the number of photos John took. - The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the scenic values of the photos. # Output - Print a single integer representing the length of the longest sequence of photos that can be placed in the album in non-decreasing order. # Sample Input ``` 6 10 22 9 33 21 50 ``` # Sample Output ``` 4 ``` # Explanation In the sample case, John can use the photos with scenic values [10, 22, 33, 50] to form a non-decreasing sequence of length 4.","solution":"def longest_non_decreasing_sequence(n, arr): Returns the length of the longest non-decreasing sequence of photos. n: int - the number of photos John took arr: list of int - the scenic values of the photos if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A company is hosting a charity marathon event and needs to organize the teams. Each team must consist of runners with distinct skill levels. The skill level of each runner is a unique integer. The company is given three lists of distinct skill levels: experienced runners, intermediate runners, and beginner runners. The organizer needs to ensure that each team consists of exactly one experienced runner, one intermediate runner, and one beginner runner. The total skill level sum of each team (i.e., the sum of the skill levels of the three runners in the team) must be pairwise distinct from all other teams. Write a program to help the company form such teams. The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 100) — the number of teams (and runners of each type). The second line of each test case contains `n` distinct integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000) — the skill levels of the experienced runners. The third line of each test case contains `n` distinct integers `b_1, b_2, ..., b_n` (1 ≤ b_i ≤ 1000) — the skill levels of the intermediate runners. The fourth line of each test case contains `n` distinct integers `c_1, c_2, ..., c_n` (1 ≤ c_i ≤ 1000) — the skill levels of the beginner runners. For each test case, print `n` lines. Each line should contain three integers representing the skill levels of the runners in each team: one experienced, one intermediate, and one beginner. The total skill level sums should be pairwise distinct among all teams. The order of teams does not matter. It is guaranteed that a solution always exists. If there are multiple possible answers, you may print any of them. # Example Input ``` 2 3 1 7 5 6 1 2 3 8 4 2 9 4 7 3 5 6 ``` Output ``` 1 6 3 7 1 8 5 2 4 9 7 5 4 3 6 ``` Note: The specific sums of the skill levels for each team in the output must be distinct from all other teams in that test case. The teams displayed could be in any order as long as the sums remain distinct.","solution":"def form_teams(t, test_cases): result = [] for i in range(t): n = test_cases[i][0] experienced = test_cases[i][1] intermediate = test_cases[i][2] beginners = test_cases[i][3] experienced.sort() intermediate.sort() beginners.sort() teams = [] used_sums = set() for j in range(n): for k in range(n): for l in range(n): team_sum = experienced[j] + intermediate[k] + beginners[l] if team_sum not in used_sums: used_sums.add(team_sum) teams.append((experienced[j], intermediate[k], beginners[l])) break if len(teams) == j + 1: break if len(teams) == j + 1: continue result.append(teams) return result"},{"question":"Write a function which takes an integer `n` and returns a list of integers representing the first `n` numbers of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - The first number in the sequence is 0. - The second number is 1. - Each subsequent number is defined as the sum of the previous two numbers in the sequence. Function signature: ```python def fibonacci_sequence(n: int) -> List[int]: pass ``` Input: - A single integer `n` (1 ≤ n ≤ 30) – the number of Fibonacci numbers to return. Output: - A list of integers representing the first `n` numbers in the Fibonacci sequence. Example: ``` Input: 5 Output: [0, 1, 1, 2, 3] ``` Note: Utilize efficient computation techniques to ensure optimal performance for the given constraints.","solution":"from typing import List def fibonacci_sequence(n: int) -> List[int]: Returns the first n numbers of the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to return Returns: List[int]: A list of integers representing the first n numbers of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): next_number = sequence[-1] + sequence[-2] sequence.append(next_number) return sequence"},{"question":"A city is planning to install a network of street lights. There are n intersections numbered 0 through n-1 and m bidirectional roads connecting them. Each road has a specific length and a specific cost associated with installing a street light on it. The goal is to ensure that every intersection is illuminated by at least one street light, either directly on the intersection or via an adjacent road. The total cost of installation should be minimized. Given the number of intersections n, the number of roads m, and for each road, the intersections it connects, its length, and its installation cost, find the minimum total cost to ensure that all intersections are illuminated. # Input - The first line contains two integers n and m (1 le n, m le 2000) — the number of intersections and the number of roads, respectively. - Each of the next m lines contains four integers u, v, l, and c (0 le u, v < n, 1 le l le 10^5, 1 le c le 10^4) — the intersections u and v that the road connects, the length of the road, and the installation cost of the street light for that road. # Output - Print a single integer — the minimum total cost to ensure all intersections are illuminated. # Example Input ``` 4 5 0 1 10 5 0 2 6 2 0 3 5 1 1 3 15 10 2 3 4 3 ``` Output ``` 8 ``` Explanation One possible way to minimize the total installation cost is to install lights on roads (0-3), (0-2), and (2-3) resulting in a total cost of 1 + 2 + 3 = 6. Another way may give the same minimum cost. In this example, the goal is to ensure every intersection can be considered illuminated while the costs are managed minimalistically.","solution":"def min_total_cost(n, m, roads): Find the minimum total installation cost to ensure all intersections are illuminated. Args: n: int - number of intersections m: int - number of roads roads: list of tuples - each tuple contains (u, v, l, c) Returns: int - minimum total cost to ensure all intersections are illuminated import heapq # Create adjacency list for the graph adj = [[] for _ in range(n)] for u, v, l, c in roads: adj[u].append((c, v)) adj[v].append((c, u)) # Use a min-heap to build our MST using Prim\'s algorithm min_heap = [(0, 0)] # (cost, node) visited = [False] * n total_cost = 0 while min_heap: cost, node = heapq.heappop(min_heap) if visited[node]: continue visited[node] = True total_cost += cost for edge_cost, neighbor in adj[node]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_cost, neighbor)) return total_cost"},{"question":"Pneumonia is an infectious disease that primarily affects the lungs. To prevent outbreaks, it is extremely important to vaccinate people at risk and monitor the spread once an outbreak occurs. We are tasked with modeling the spread of pneumonia in a small community using a simplified model to predict the potential impact of an outbreak. The community is represented as a connected undirected graph with n vertices and m edges. Each vertex corresponds to an individual in the community, and each edge indicates contact between two individuals through which the infection can spread. Initially, only one individual is infected. Given the following: 1. The number of vertices n (1 ≤ n ≤ 300) and edges m (0 ≤ m ≤ n(n-1)/2). 2. The edges of the graph, where each edge connects two vertices. 3. The index of the initially infected individual. Determine the maximum number of individuals that can be infected if the disease spreads through the community. The input consists of multiple lines: - The first line contains two integers, n and m. - Each of the next m lines contains two integers u and v, representing an edge between individuals u and v. - The last line contains one integer, the index of the initially infected individual (1 ≤ index ≤ n). Output a single integer: the maximum number of infected individuals. Example: Input: ``` 5 4 1 2 2 3 3 4 4 5 1 ``` Output: ``` 5 ``` Explanation: In the example, starting from individual 1, the disease can spread through individuals 2, 3, 4, and 5. Thus, all 5 individuals can eventually become infected.","solution":"def max_infected(n, m, edges, start): Returns the maximum number of infected individuals in the community. from collections import deque # Initialize the adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform a breadth-first search (BFS) starting from the initial infected individual infected_count = 0 visited = set() queue = deque([start]) while queue: current = queue.popleft() if current not in visited: infected_count += 1 visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return infected_count"},{"question":"`Tori the talented typist loves typing strings and balancing things perfectly in her life. She has invented a way of typing a perfectly balanced string. A string is considered perfectly balanced if for every letter that appears in the string, the number of its occurrences in the string is the same as the number of occurrences of every other letter. Tori wants you to assist her in checking if a string she types is perfectly balanced or not. She is a very fast typist and can type long strings in no time. Can you help her determine whether the string she\'s typed is perfectly balanced? Write a function `is_perfectly_balanced(s: str) -> bool` that returns `True` if the string `s` is perfectly balanced, and `False` otherwise. # Input: - One line containing the string `s` consisting of lowercase English letters. (1 ≤ |s| ≤ 100,000) # Output: - A boolean value `True` or `False`. # Example: 1. Input: ``` aabbcc ``` Output: ``` True ``` 2. Input: ``` abcabcx ``` Output: ``` False ``` # Explanation: 1. In the first example, the characters \'a\', \'b\', and \'c\' each appear exactly 2 times. 2. In the second example, characters \'a\', \'b\', and \'c\' each appear twice, but \'x\' appears only once, thus it is not perfectly balanced. For a perfectly balanced string, all characters in the string must have the same frequency.`","solution":"def is_perfectly_balanced(s: str) -> bool: from collections import Counter if not s: return True char_count = Counter(s) frequency = list(char_count.values()) return all(count == frequency[0] for count in frequency)"},{"question":"Anna has an n-by-m grid where each cell contains some number of apples. She wants to pick up all the apples starting from the top-left corner of the grid and ending at the bottom-right corner, but she can only move either right or down at any point in time. Write a program to help Anna find the maximum number of apples she can collect. The input consists of: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. - The next n lines each contain m space-separated integers, where the j-th integer in the i-th line represents the number of apples in the cell (i, j) (0 ≤ apples ≤ 100). Output a single integer, representing the maximum number of apples Anna can collect. For example, for the input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` The output should be `29`, since the path that collects the maximum apples is `1 -> 4 -> 7 -> 8 -> 9`.","solution":"def max_apples(n, m, grid): This function takes the dimensions of the grid (n, m) and the grid itself as input, and returns the maximum number of apples that can be collected starting from the top-left corner and ending at the bottom-right corner, moving only right or down. # Create a 2D array dp to store the maximum apples that can be collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the dp array with the values of the apples in the grid dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the maximum apples collected return dp[n-1][m-1]"},{"question":"You are given two positive integers a and b. You want to make two sequences of integers x and y each consisting of exactly m integers such that: 1. The sum of elements in the sequence x is equal to a. 2. The sum of elements in the sequence y is equal to b. 3. For all 1 le i le m, x_i le y_i. What is the minimum value of m for which such sequences x and y exist? If no such sequences exist, return -1. The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains two integers a and b (1 le a, b le 10^9). For each test case, print the minimum value of m for which such sequences exist or -1 if no such sequences exist. # Example For input: ``` 3 10 20 5 5 20 10 ``` The output should be: ``` 1 1 -1 ``` # Explanation In the first query, if we take m = 1, we can have x = [10] and y = [20] which satisfy the conditions. In the second query, x and y can both be sequences with one element each equal to 5. In the third query, it\'s impossible to create such sequences because we cannot find a single integer x_1 and y_1 where x_1 le y_1 and the sums match given a > b.","solution":"def min_sequence_length(t, queries): results = [] for a, b in queries: if a > b: results.append(-1) elif a <= b: results.append(1) return results"},{"question":"Aine has an interesting way of organizing her collectibles. She has a collection of n items, each with a unique value. She is required to place these items into k boxes such that each box contains at least one item and the values of items in each box form a contiguous segment in the sorted sequence of all items\' values. Aine wants the items within each box to be as balanced as possible in terms of the difference between the highest and lowest values in the box. To achieve this objective, she measures the imbalance of a distribution as the maximum difference between the highest and lowest values in any box. Your task is to determine the minimum possible imbalance that can be obtained by distributing all n items into exactly k boxes. Formally, you are given an array containing n unique integers; determine the minimum imbalance possible when dividing this array into k contiguous subarrays. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of items and the number of boxes, respectively. The second line contains n unique integers vi (1 ≤ vi ≤ 1,000,000,000), representing the values of the items. Output a single integer — the minimum possible imbalance. Example Input: ``` 7 3 10 20 30 40 50 60 70 ``` Example Output: ``` 20 ``` Explanation: One possible way to divide the items into 3 boxes with a minimum imbalance is: - Box 1: [10, 20, 30] - Box 2: [40, 50] - Box 3: [60, 70] The imbalances would be: - For Box 1: 30 - 10 = 20 - For Box 2: 50 - 40 = 10 - For Box 3: 70 - 60 = 10 So the maximum imbalance out of these is 20, which is the minimized imbalance for this division.","solution":"def find_minimum_imbalance(n, k, values): Determines the minimum possible imbalance when dividing n items into k boxes. values.sort() # Initialize the dp table dp = [[float(\'inf\')] * (k + 1) for _ in range(n + 1)] dp[0][0] = 0 for i in range(1, n + 1): for j in range(1, k + 1): for m in range(j - 1, i): max_diff = values[i - 1] - values[m] dp[i][j] = min(dp[i][j], max(dp[m][j - 1], max_diff)) return dp[n][k] # Example usage n = 7 k = 3 values = [10, 20, 30, 40, 50, 60, 70] print(find_minimum_imbalance(n, k, values)) # Output: 20"},{"question":"You are given an array of n integers, where the array is either strictly increasing or strictly decreasing. However, due to data corruption, exactly one element is out of order in this array. You need to find the position of this corrupt element. The first line of input contains an integer n (3 ≤ n ≤ 1000) — the number of elements in the array. The second line of input contains n space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer representing the 1-based index of the corrupt element. For example, given an array which is supposed to be strictly increasing [1, 2, 3, 4, 8, 5, 6, 7], the corrupt element is at index 5 (1-based), since 8 is out of place in the otherwise strictly increasing array. Example: Input: 8 10 20 30 40 50 25 60 70 Output: 6","solution":"def find_corrupt_element(n, array): This function finds the position of the corrupt element in a nearly strictly increasing or strictly decreasing array. # Check if array is initially increasing or decreasing if array[1] > array[0]: # Array should be strictly increasing for i in range(1, n): if array[i] <= array[i-1]: return i + 1 # Return 1-based index else: # Array should be strictly decreasing for i in range(1, n): if array[i] >= array[i-1]: return i + 1 # Return 1-based index return -1 # In case no corrupt element is found which should not happen"},{"question":"Daria has recently moved to a new city and she wants to explore all the parks the city has to offer. The city has n parks, and they are connected by m bidirectional roads. Each park has a unique location marked by an integer. Daria plans to start her exploration from park 1, the closest park to her house, and wants to make sure she can visit all other parks. However, some roads may be closed for maintenance, making some parks inaccessible. You need to determine if Daria can visit all parks starting from park 1. If she can, print \\"YES\\", otherwise print \\"NO\\". The first line contains two integers n and m (1 le n le 100,000 and 0 le m le 200,000) — the number of parks and the number of roads. The next m lines each contain two integers u and v (1 le u, v le n and u neq v), representing a bidirectional road between park u and park v. Print \\"YES\\" if Daria can visit all parks starting from park 1, otherwise print \\"NO\\". # Example Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` YES ``` Input: ``` 5 2 1 2 3 4 ``` Output: ``` NO ``` In the first example, Daria can visit all parks by traveling through the connected roads. In the second example, parks 1, 2 are disconnected from parks 3, 4, 5 so she cannot visit all parks.","solution":"def can_visit_all_parks(n, m, roads): from collections import defaultdict, deque # Create adjacency list for the graph adjacency_list = defaultdict(list) for u, v in roads: adjacency_list[u].append(v) adjacency_list[v].append(u) # BFS to check if all nodes can be visited from node 1 visited = [False] * (n + 1) queue = deque([1]) visited[1] = True while queue: curr = queue.popleft() for neighbor in adjacency_list[curr]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Check if all parks have been visited return \\"YES\\" if all(visited[1:]) else \\"NO\\""},{"question":"You have been given an array of integers representing the costs of n items and a budget k. Your task is to select the maximum number of items such that the total cost does not exceed the given budget k. Each item has a distinct cost. The first line contains two space-separated integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of items and the available budget respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the costs of the items. Output a single integer — the maximum number of items you can purchase without exceeding the budget. **Example:** Input: ``` 5 10 1 2 3 4 5 ``` Output: ``` 4 ``` Input: ``` 3 5 5 6 7 ``` Output: ``` 1 ``` **Explanation:** In the first example, you can purchase items with costs 1, 2, 3, and 4 (totaling 10). In the second example, you can only purchase the item with cost 5 as selecting any other combination will exceed the budget of 5.","solution":"def max_items_within_budget(n, k, costs): Returns the maximum number of items that can be purchased without exceeding the budget k. Parameters: n (int): Number of items k (int): Available budget costs (List[int]): Costs of the items Returns: int: Maximum number of items that can be purchased costs.sort() total_cost = 0 count = 0 for cost in costs: if total_cost + cost <= k: total_cost += cost count += 1 else: break return count"},{"question":"Alice and Bob are playing a game with a matrix of integers. The matrix has dimensions n x m. The game is turn-based, and on each turn, a player can choose any row or column and remove it from the matrix. Alice always takes the first turn, and they alternate turns afterward. The player who cannot make a move loses the game. Alice and Bob both play optimally. Determine who will win the game if they both start with a matrix of dimensions n x m. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. Output \\"Alice\\" if Alice will win the game or \\"Bob\\" if Bob will win the game. # Example ``` Input 3 4 Output Bob ``` ``` Input 2 2 Output Alice ``` # Explanation 1. For the first example, the matrix has 3 rows and 4 columns. After Alice removes one row or one column, Bob will be able to remove one row or one column such that in the end, Alice will not have any valid moves left. 2. For the second example, the matrix is 2x2. Alice can always win by removing one row or one column on her first turn, leaving the opponent with a non-square matrix, ensuring the victory.","solution":"def determine_winner(n, m): Determines the winner of the game given the dimensions of the matrix n and m. if min(n, m) % 2 == 1: return \\"Bob\\" else: return \\"Alice\\""},{"question":"After a long day of work, Alex likes to unwind by playing a new game he discovered. The game\'s objective is to arrange blocks (represented as integers) in a manner that maximizes scores based on a set of rules. Each block has a value, and the sequence of blocks influences the overall score. The rules of the game are as follows: 1. You can pick blocks to form a sequence such that each block has a distinct value. 2. You have the option to split this sequence at any point into two subsequences and reverse both parts before combining them again. Write a program to determine the maximum length of a sequence with distinct values that Alex can form. The input consists of a single line containing an array of integers representing the values of the blocks. The length of the array does not exceed 100,000. Print the maximum length of the sequence with all distinct values. For example: If the input array is [1, 2, 1, 3, 2, 3], one of the possible sequences Alex can form is [1, 2, 3] by splitting and reversing [1, 2, 1] and [3, 2, 3] or by simply choosing the distinct values from the longest subsequence possible. Input: A single line containing space-separated integers representing the values of the blocks (1 ≤ value ≤ 10^9). Output: Print the maximum length of a sequence with all distinct values. Example: Input: 1 2 3 4 1 2 3 4 Output: 4 Note: - In the example, the longest sequence with all distinct values picked from the array is [1, 2, 3, 4], hence the output is 4.","solution":"def max_distinct_sequence_length(arr): This function receives a list of integers and returns the maximum length of a sequence with all distinct values. seen = {} max_len = 0 start = 0 for end, value in enumerate(arr): if value in seen: start = max(start, seen[value] + 1) seen[value] = end max_len = max(max_len, end - start + 1) return max_len # Sample usage # input_arr = [1, 2, 3, 4, 1, 2, 3, 4] # print(max_distinct_sequence_length(input_arr)) # Output: 4"},{"question":"You are given two arrays, arr1 and arr2, each containing n integers. Your task is to merge these two arrays into one sorted array without using any sorting algorithms directly (e.g., you cannot use built-in `sort` functions). Instead, you should implement a merge function that follows the merge step of the Merge Sort algorithm to produce a single sorted array. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the length of the arrays arr1 and arr2. The second line contains n space-separated integers, the elements of arr1. The third line contains n space-separated integers, the elements of arr2. Print a single line containing the elements of the merged and sorted array. Example: Input: 5 1 3 5 7 9 2 4 6 8 10 Output: 1 2 3 4 5 6 7 8 9 10 In this example, the input arrays arr1 and arr2 are merged into a single sorted array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` using the merge technique without directly sorting the arrays.","solution":"def merge_sorted_arrays(n, arr1, arr2): Merges two sorted arrays into a single sorted array using the merge step of the Merge Sort algorithm. Parameters: - n (int): The length of the arrays arr1 and arr2. - arr1 (list of int): The first sorted array. - arr2 (list of int): The second sorted array. Returns: - list of int: The merged and sorted array. merged_array = [] i, j = 0, 0 while i < n and j < n: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Add any remaining elements from arr1 or arr2 while i < n: merged_array.append(arr1[i]) i += 1 while j < n: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Ann is organizing a coding contest and needs to assign unique IDs to each participant. She wants to use a particular pattern for these IDs which involves alternating between alphabetic characters and numeric digits. The IDs should have a fixed length and must start with an alphabetic character (either uppercase or lowercase). For example, if the length of the ID is 5, a valid ID could be \\"A1B2C\\" or \\"a1B2c\\". Given the length of the ID, help Ann generate the lexicographically smallest possible ID. The first line contains one integer n (1 ≤ n ≤ 26) — the length of the ID. Print the lexicographically smallest ID of length n. # Example Input: 5 Output: A1B2C # Note In the example, the length of the ID is 5. Starting with the smallest alphabetic character \'A\', alternating with the smallest numeric characters, resulting in the ID \\"A1B2C\\".","solution":"def generate_id(n): Generates the lexicographically smallest possible ID of length n. The ID alternates between letters and digits and starts with a letter. Parameters: n (int): The length of the desired ID. 1 ≤ n ≤ 26 Returns: str: The lexicographically smallest possible ID of the specified length. id = [] char_count = 0 digit_count = 1 for i in range(n): if i % 2 == 0: id.append(chr(ord(\'A\') + char_count)) char_count += 1 else: id.append(str(digit_count)) digit_count += 1 return \'\'.join(id)"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight associated with it, which is an integer. A spanning tree of a graph is a subgraph that is a tree and connects all the vertices. The weight of a spanning tree is the sum of the weights of the edges in the tree. Your task is to determine the weight of the minimum spanning tree (MST) for the given graph. The first line contains two integers, n (1 le n le 10^5) and m (0 le m le 2 cdot 10^5) — the number of vertices and edges in the graph, respectively. Each of the next m lines contains three integers u_i, v_i, w_i (1 le u_i, v_i le n, 1 le w_i le 10^6) — indicating that there is an edge between vertices u_i and v_i with weight w_i. Output a single integer, the weight of the minimum spanning tree. If there is no spanning tree, output \\"IMPOSSIBLE\\". Example Input: 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output: 6 Explanation of Example: The minimum spanning tree will have edges with weights 1 (between 1-2), 2 (between 2-3), and 3 (between 1-4). The sum of these weights is 6.","solution":"import heapq def find_minimum_spanning_tree(n, edges): if n == 1: return 0 if edges == [] else \\"IMPOSSIBLE\\" if n > 1 and not edges: return \\"IMPOSSIBLE\\" adj = [[] for _ in range(n + 1)] for u, v, w in edges: adj[u].append((w, v)) adj[v].append((w, u)) pq = [(0, 1)] # (weight, vertex) min_cost = 0 visited = [False] * (n + 1) num_edges = 0 while pq and num_edges < n: w, u = heapq.heappop(pq) if visited[u]: continue visited[u] = True min_cost += w num_edges += 1 for weight, v in adj[u]: if not visited[v]: heapq.heappush(pq, (weight, v)) if num_edges < n: return \\"IMPOSSIBLE\\" return min_cost"},{"question":"You are given a sequence of integers a of length n. You need to perform a series of operations on the sequence to make it strictly increasing. In each operation, you can choose an index i (1 ≤ i ≤ n) and add exactly x to a[i] (x can be any positive integer). You need to determine the minimum number of operations required to make the sequence strictly increasing. The first line contains an integer n (1 leq n leq 10^5) – the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) – the elements of the sequence. Output a single integer, the minimum number of operations required to make the sequence strictly increasing. If it\'s not possible, output -1. Example: Input: 6 1 2 3 10 9 7 Output: 2","solution":"def min_operations_to_increasing_sequence(n, a): Returns the minimum number of operations required to make the sequence strictly increasing, or -1 if it is not possible. Parameters: n (int): Length of the sequence a (list): List of integers in the sequence Returns: int: Minimum number of operations operations = 0 # Traverse the array and ensure the strictly increasing condition is met for i in range(1, n): if a[i] <= a[i-1]: operations += 1 a[i] = a[i-1] + 1 return operations"},{"question":"You are given an array of integers representing the heights of people in a queue. Some people are taller than others and to avoid blocking the view of a shorter person directly behind them, you are required to rearrange the queue such that for every person, no person directly in front of them is taller. If there are multiple people of the same height, they must remain in the relative positions they appeared in the original array. The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. Each test case starts with a line containing an integer n (1 le n le 10^5) — the number of people in the queue. The next line contains an array of n integers [h_1, h_2, ldots, h_n] (1 le h_i le 10^9) — the heights of the people. For each test case, print the rearranged array on a single line such that for every person in the queue, no person directly in front of them is taller. # Example **Input:** ``` 2 5 150 160 170 165 180 3 100 100 120 ``` **Output:** ``` 150 160 165 170 180 100 100 120 ``` In the first test case, the sequence [150, 160, 165, 170, 180] ensures that each person directly in front is not taller than the person behind them. In the second test case, the sequence remains [100, 100, 120], as all people of the same height have maintained their original relative positions, and for the height 120, there are no taller people directly in front.","solution":"def rearrange_queue(t, test_cases): Rearranges each test case array so that no person in the queue blocks the view of a shorter person. Parameters: t (int): Number of test cases test_cases (list): List of tuples, where each tuple contains (n, arr) Returns: list: List of rearranged arrays for each test case results = [] for n, arr in test_cases: results.append(sorted(arr)) return results def format_results(results): Formats the results for display. Parameters: results (list): List of rearranged arrays Returns: str: Formatted string of results return \'n\'.join(\' \'.join(map(str, result)) for result in results)"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each edge connects two different nodes and has a weight associated with it. Your task is to find the minimum cost to make the graph connected. If the graph is already connected, the cost will be 0. The first line contains two integers `n` and `m`—the number of nodes and the number of edges. Then follow `m` lines, each containing three integers `u`, `v`, and `w`—an edge between nodes `u` and `v` with weight `w`. Output a single integer—the minimum cost to make the graph connected. If it is impossible to connect the graph, print -1. # Input - The first line contains two integers `n` and `m` (1 ≤ `n` ≤ 1000, 0 ≤ `m` ≤ 100,000). - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 1,000). # Output - Output one integer—the minimum cost to connect the graph, or -1 if it is not possible. # Example Input: ``` 4 3 1 2 1 2 3 2 4 3 3 ``` Output: ``` 3 ``` Input: ``` 4 1 1 2 1 ``` Output: ``` -1 ``` # Explanation: - In the first example, the minimum spanning tree includes edges (1-2), (2-3), and (2-1) with a total weight of 3. - In the second example, it is impossible to connect all 4 nodes with only one edge, so the output is -1.","solution":"def find_minimum_cost(n, m, edges): from heapq import heapify, heappop, heappush if n == 1: return 0 if m == 0 else -1 parent = list(range(n+1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY edges.sort(key=lambda x: x[2]) min_cost = 0 edges_used = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) min_cost += w edges_used += 1 if edges_used == n - 1: break connected_components = len(set(find(i) for i in range(1, n + 1))) return min_cost if connected_components == 1 else -1"},{"question":"You are given a grid of size n x m filled with non-negative integers. Your task is to find the number of subgrids that have all their elements summing up to a given integer k. A subgrid is defined as any rectangular portion of the grid, including the entire grid itself. The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 10^9) - the number of rows, the number of columns, and the target sum, respectively. The next n lines describe the grid, with the i-th line containing m integers (0 ≤ grid[i][j] ≤ 10^4). Output a single integer, the number of subgrids with a sum equal to k. # Input Example ``` 3 3 6 1 2 1 2 1 2 1 2 1 ``` # Output Example ``` 4 ``` # Explanation The subgrids that sum to 6 in the example are: 1. The subgrid from (1,1) to (2,3) 2. The subgrid from (2,1) to (3,2) 3. The subgrid from (1,2) to (3,3) 4. The single cell subgrid (2,2) Thus, the output is 4.","solution":"def count_subgrids_with_sum_k(n, m, k, grid): Returns the number of subgrids with sum equal to k. def calculate_prefix_sums(grid): Calculate the prefix sum array for the grid for easy sum calculation of subgrids. prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] return prefix_sum prefix_sum = calculate_prefix_sums(grid) subgrid_count = 0 for i1 in range(1, n + 1): for j1 in range(1, m + 1): for i2 in range(i1, n + 1): for j2 in range(j1, m + 1): subgrid_sum = (prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]) if subgrid_sum == k: subgrid_count += 1 return subgrid_count"},{"question":"A social media company organizes a virtual event. Users can send messages during the event in a chat box. Each message has a timestamp and a unique message ID. To ensure smooth operation, they need to identify gaps between consecutive messages and retrieve the message ID of the message that creates the biggest gap. A gap is defined as the difference between the timestamp of the current message and the previous message. Given a list of messages with timestamps (in seconds since the event started) and unique message IDs, write a function to identify the message ID that follows the largest gap. Input: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of messages. - Each of the next n lines contains two integers t and id, where t (1 ≤ t ≤ 10^9) is the timestamp of the message and id (1 ≤ id ≤ 10^9) is the unique message ID. Output: - Print a single integer that represents the message ID that follows the largest gap. Examples: Input: 5 1 1001 3 1002 10 1003 13 1004 15 1005 Output: 1003 Input: 4 5 2002 6 2003 8 2004 20 2005 Output: 2005 Explanation: In the first example, the biggest gap is between timestamps 3 and 10, so the message ID after the gap is 1003. In the second example, the biggest gap is between timestamps 8 and 20, so the message ID after the gap is 2005.","solution":"def find_largest_gap_id(messages): Finds the message ID that follows the largest gap between message timestamps. Args: messages (list of tuples): A list where each tuple contains a timestamp and a message ID Returns: int: The message ID that follows the largest gap max_gap = 0 max_gap_id = None # Sort messages by timestamp messages.sort(key=lambda msg: msg[0]) for i in range(1, len(messages)): current_gap = messages[i][0] - messages[i - 1][0] if current_gap > max_gap: max_gap = current_gap max_gap_id = messages[i][1] return max_gap_id"},{"question":"Given a grid of size N times M where each cell can either be empty (denoted by \'.\') or contain a wall (denoted by \'#\'). One can travel from one cell to another neighboring cell if both cells are empty. You are given a starting position mathbf{S} = (x_s, y_s) and a target position mathbf{T} = (x_t, y_t) on this grid. Your task is to determine the minimum number of steps required to reach the target position from the starting position, moving only up, down, left, or right through empty cells. If it is not possible to reach the target, print -1. The input consists of: - The first line contains two integers N and M (1 le N, M le 1000) — the number of rows and columns in the grid. - The next N lines each contain a string of length M representing the grid. - The next line contains two integers x_s and y_s (1 le x_s le N, 1 le y_s le M) — the starting position. - The last line contains two integers x_t and y_t (1 le x_t le N, 1 le y_t le M) — the target position. Print the minimum number of steps required to reach the target. If it is not possible, print -1. # Sample Input 4 4 .... .. ..#. .. 1 1 3 4 # Sample Output 5 # Explanation - The sample grid is: ``` .... .. ..#. .. ``` - The path from the starting position (1, 1) to the target position (3, 4) is: ``` (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) ``` - The total number of steps is 5.","solution":"from collections import deque def min_steps_to_target(N, M, grid, start, target): x_s, y_s = start x_t, y_t = target # Directions for moving up, down, left, right directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Convert to 0-indexed for easier array handling x_s -= 1 y_s -= 1 x_t -= 1 y_t -= 1 # Edge case if start and target are same if (x_s, y_s) == (x_t, y_t): return 0 # Initialize visited matrix visited = [[False] * M for _ in range(N)] queue = deque([(x_s, y_s, 0)]) # (x, y, steps) visited[x_s][y_s] = True while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': if (nx, ny) == (x_t, y_t): return steps + 1 queue.append((nx, ny, steps + 1)) visited[nx][ny] = True return -1 # If no path is found # Example usage if __name__ == \\"__main__\\": N, M = 4, 4 grid = [ \\"....\\", \\"..\\", \\"..#.\\", \\"..\\" ] start = (1, 1) target = (3, 4) print(min_steps_to_target(N, M, grid, start, target)) # Output should be 5"},{"question":"Luna is preparing for an important competition and needs to become proficient in managing her time effectively. She has created a list of tasks she wants to accomplish in a day, each task requiring a specific amount of energy. To optimize her energy usage, Luna decided to follow a strategy of alternating high energy and low energy tasks. Given the tasks, arrange them in such a way that the difference between the energies of any two consecutive tasks is minimized. Each task has a specific energy requirement, and Luna has a list of these requirements. Help Luna find an order of tasks that minimizes the maximum energy difference between any two consecutive tasks. The first line contains a single integer n (2 ≤ n ≤ 1000), the number of tasks. The second line contains n space-separated integers ei (1 ≤ ei ≤ 1000), where ei represents the energy required for the i-th task. Print n space-separated integers representing the order of tasks that minimizes the maximum difference between the energy requirements of any two consecutive tasks. # Example Input ``` 5 5 2 9 4 11 ``` Output ``` 2 4 5 9 11 ``` # Note In the example, sorting the tasks by their energy requirements minimizes the maximum difference between consecutive tasks: the differences are |2-4|=2, |4-5|=1, |5-9|=4, and |9-11|=2. This is the optimal solution.","solution":"def minimal_max_diff_order(n, energy_list): Arranges the tasks such that the difference between the energies of any two consecutive tasks is minimized. Parameters: n (int): The number of tasks energy_list (list of int): List of energy requirements for the tasks Returns: list of int: Ordered list of tasks that minimizes the maximum energy difference return sorted(energy_list)"},{"question":"Tom is an enthusiastic photographer who enjoys taking panoramic photos during his travels. He has captured several panoramic photos on his latest trip and now wants to join them into a single, long panorama. Each photo is characterized by its width and a unique identifier. Tom wants to join two types of panoramic photos: those with even widths and those with odd widths. However, to make the panorama look more aesthetic, he can only join a photo with an adjacent photo if their width parities (even or odd) are the same. Given a sequence of panoramic photos, you are to determine the maximum number of photos that Tom can join into a single, continuous panorama. Each photo is represented by its width, and Tom can rearrange the photos before joining them to maximize the total number of joined photos. Note that each photo can appear at most once in the final panorama. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the number of panoramic photos. - The second line contains n integers w_1, w_2, ldots, w_n (1 leq w_i leq 10^9) — the widths of the photos. # Output - Print a single integer — the maximum number of photos that Tom can join into a single, continuous panorama. # Example Input ``` 5 2 4 1 3 5 ``` Output ``` 5 ``` # Explanation Tom has two groups of photos based on their width parities: - Even widths: [2, 4] - Odd widths: [1, 3, 5] He can join all 5 photos together since both groups have continuous elements. In another example, if the input photos were `10 13 6 11 7`, Tom can join 3 photos either by joining the even widths `[10, 6]` or the odd widths `[13, 11, 7]`, resulting in a maximum joined photo count of 3.","solution":"def max_photos_joined(n, widths): Determines the maximum number of photos that can be joined into a single, continuous panorama while maintaining the parity of their widths (even or odd). Parameters: n (int): Number of panoramic photos. widths (list of int): List containing the widths of the photos. Returns: int: The maximum number of photos that can be joined. even_photos = [w for w in widths if w % 2 == 0] odd_photos = [w for w in widths if w % 2 == 1] return len(even_photos) + len(odd_photos)"},{"question":"Given an undirected graph with `n` nodes and `m` edges, your task is to determine if there exists a path between two given nodes such that the sum of weights of edges along the path is an even number. If there is, print the path; if there are multiple paths, print the path with the minimum weight sum. If no such path exists, print `-1`. # Input The first line contains two integers `n` (2 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5) — the number of nodes and edges in the graph, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — denoting an edge between nodes `u` and `v` with weight `w`. The last line contains two integers `s` and `t` (1 ≤ s, t ≤ n) — the start and end nodes for the path. # Output Print the path if it exists; otherwise, print `-1`. The path should be printed as a sequence of node numbers separated by spaces. If there are multiple paths with the same minimum weight sum, print any of them. # Example Input ``` 5 6 1 2 6 1 3 8 2 4 10 3 4 11 4 5 2 3 5 9 1 5 ``` Output ``` 1 2 4 5 ``` # Explanation One of the paths from node 1 to node 5 with an even weight sum is 1 → 2 → 4 → 5, having an even weight sum of 6 + 10 + 2 = 18. Another path with the same weight sum could be 1 → 3 → 5 (8 + 9; 17) but it does not have an even weight; hence, 1 → 2 → 4 → 5 is chosen. # Constraints - The graph is guaranteed to be connected. - Each edge has a unique weight.","solution":"import heapq from collections import defaultdict def find_even_weight_path(n, m, edges, s, t): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Applying Dijkstra\'s algorithm to find the shortest path def dijkstra(start): dist = {i: (float(\'inf\'), []) for i in range(1, n + 1)} dist[start] = (0, [start]) pq = [(0, start, [start])] while pq: current_dist, current_node, path = heapq.heappop(pq) if current_dist > dist[current_node][0]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor][0]: dist[neighbor] = (distance, path + [neighbor]) heapq.heappush(pq, (distance, neighbor, path + [neighbor])) return dist dist = dijkstra(s) if dist[t][0] == float(\'inf\') or dist[t][0] % 2 != 0: return -1 else: return dist[t][1] # Sample usage n = 5 m = 6 edges = [ (1, 2, 6), (1, 3, 8), (2, 4, 10), (3, 4, 11), (4, 5, 2), (3, 5, 9) ] s, t = 1, 5"},{"question":"A train system has multiple stations, and the travel times between consecutive stations are given. You need to find the minimum time required to travel from the start station to the end station. However, during travel, trains may have delays at certain stations. The delays at each station are given, and they will be added to the travel time at that specific station. The input consists of multiple test cases. For each test case, you are given: 1. An integer `n` (2 ≤ `n` ≤ 1000) — the number of stations. 2. An array `t` of integers of length `n-1` where `t[i]` (1 ≤ `t[i]` ≤ 100) represents the travel time from station `i` to station `i+1`. 3. An array `d` of integers of length `n` where `d[i]` (0 ≤ `d[i]` ≤ 100) represents the delay at station `i`. Your task is to determine the minimum total travel time required to reach from station 1 to station `n`. The first line of the input contains a single integer `T` (1 ≤ `T` ≤ 100) — the number of test cases. For each test case: - The first line contains the integer `n`. - The second line contains `n-1` integers `t[1], t[2], ..., t[n-1]` — the travel times between consecutive stations. - The third line contains `n` integers `d[0], d[1], ..., d[n-1]` — the delays at each station. For each test case, output the minimum travel time required to travel from the start station to the end station, including the delays. # Example: **Input:** ``` 2 3 10 15 5 0 10 4 5 10 20 3 5 0 2 ``` **Output:** ``` 25 40 ``` # Explanation: **Test Case 1:** - Travel from station 1 to station 2: 10 minutes + delay at station 1: 5 minutes = 15 minutes - Travel from station 2 to station 3: 15 minutes + delay at station 2: 0 minutes = 15 minutes - Total travel time: 15 + 15 = 30 minutes - Travel from station 1 to station 3: 15 minutes (station 2 delay included) - Final total travel time: 25 minutes **Test Case 2:** - Travel from station 1 to station 2: 5 minutes + delay at station 1: 3 minutes = 8 minutes - Travel from station 2 to station 3: 10 minutes + delay at station 2: 5 minutes = 15 minutes - Travel from station 3 to station 4: 20 minutes + delay at station 3: 0 minutes = 20 minutes - Total travel time: 8 + 15 + 20 + delay at end station 4: 2 minutes = 45 minutes","solution":"def minimum_travel_time(n, t, d): Calculates the minimum travel time from the start station to the end station. Parameters: n (int): The number of stations. t (list): The list of travel times between consecutive stations. d (list): The list of delays at each station. Returns: int: The minimum total travel time. total_time = d[0] # Initial delay at the start station for i in range(n - 1): total_time += t[i] + d[i + 1] return total_time def process_input(T, test_cases): Processes multiple test cases to determine minimum travel times. Parameters: T (int): Number of test cases. test_cases (list): List of tuples containing (n, t, d) for each test case. Returns: list: List of minimum total travel times for each test case. results = [] for i in range(T): n, t, d = test_cases[i] results.append(minimum_travel_time(n, t, d)) return results"},{"question":"You are given an array of integers. Your task is to find the length of the longest subarray where the sum of the elements is equal to 0. The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5) - the number of elements in the array. The second line contains n space-separated integers a_i (-10^5 ≤ a_i ≤ 10^5) - the elements of the array. Print a single integer - the length of the longest subarray with sum 0. If no such subarray exists, print 0.","solution":"def longest_subarray_with_sum_zero(n, arr): Returns the length of the longest subarray with sum equal to 0. prefix_sum_indices = {} max_length = 0 current_sum = 0 for i in range(n): current_sum += arr[i] if current_sum == 0: max_length = i + 1 if current_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[current_sum]) else: prefix_sum_indices[current_sum] = i return max_length"},{"question":"Farmer John keeps a herd of cows, and he recently noticed that due to a unique genetic trait, each of his cows produces two different types of milk, A and B. Each cow has a specific production rate for both types of milk. Farmer John wishes to maximize the total production of milk type A while keeping the total production of milk type B within a certain limit. He can choose at most one cow from the herd for this purpose. Given the number of cows and the production rates of milk types A and B for each cow, determine the maximum total production of milk type A without exceeding the given limit for the total production of milk type B. If there\'s no valid selection that satisfies the limit for milk type B, output -1. The first line of the input contains an integer n (1 le n le 10^5) — the number of cows in the herd. The second line contains an integer L (1 le L le 10^9) — the limit for the total production of milk type B. The next n lines contain two integers each, a_i and b_i (1 le a_i, b_i le 10^9) — the production rates of milk types A and B for the i-th cow. Output a single integer — the maximum total production of milk type A without exceeding the total production limit for milk type B, or -1 if it\'s impossible. # Example Input: ``` 3 10 5 4 6 7 8 5 ``` Output: ``` 8 ``` In this example, selecting the third cow results in the maximum production of milk type A (8) while keeping the production of milk type B (5) within the limit (10).","solution":"def maximize_milk_A(n, L, cows): Finds the maximum production of milk type A without exceeding the given limit for milk type B. Parameters: n (int) : number of cows L (int) : limit for the total production of milk type B cows (list of tuples) : production rates of milk types A and B for each cow [(a1, b1), (a2, b2), ...] Returns: int: maximum total production of milk type A or -1 if it is impossible max_milk_A = -1 for a, b in cows: if b <= L: max_milk_A = max(max_milk_A, a) return max_milk_A"},{"question":"You are given a permutation of integers from 1 to n. A permutation is called beautiful if and only if the greatest common divisor (GCD) of any two adjacent elements is greater than 1. Generate a beautiful permutation of integers from 1 to n. If it is impossible, print -1. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of one integer n (1 ≤ n ≤ 100). For each test case, print the beautiful permutation on a single line. If there are multiple answers, you may print any of them. If it is impossible to create such a permutation, print -1. Examples: Input: 3 2 3 4 Output: 2 1 -1 4 2 1 3","solution":"def generate_beautiful_permutations(t, test_cases): Given t test cases, each with an integer n, generate a beautiful permutation where the GCD of any two adjacent elements is greater than 1 if possible. Returns a list of permutations or -1 if impossible. results = [] for n in test_cases: if n == 1: results.append(\\"1\\") elif n == 2: results.append(\\"2 1\\") elif n == 3: results.append(\\"-1\\") else: result = [i for i in range(n, 0, -1)] # Generate descending order results.append(\\" \\".join(map(str, result))) return results # Read input where t is the number of test cases and test_cases is a list of values of n def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [int(data[i]) for i in range(1, t + 1)] results = generate_beautiful_permutations(t, test_cases) for result in results: print(result)"},{"question":"You have invited n people to a dinner party. Each person you invited has a preferred language with which they would like to communicate. Unfortunately, there is a limited number of translators available, and you want to ensure that each person has at least one person they can communicate with in their preferred language. Each person can speak in one preferred language from a given set of languages. You need to determine the minimum number of distinct languages required to ensure that each person at the dinner party is able to communicate with at least one other person in their preferred language group. The first line of input contains an integer n (1 leq n leq 100000) — the number of people. The second line contains n integers l_1, l_2, ldots, l_n (1 leq l_i leq 100000) — where l_i is the preferred language of the i-th person. Output a single integer representing the minimum number of distinct languages required to ensure each person can communicate with at least one other person in their preferred language group. For example, given the input: ``` 5 1 2 2 1 3 ``` The output would be: ``` 2 ``` Explanation: To ensure communications, we need at least the languages 1 and 2, so people who prefer language 3 can communicate with those preferring either 1 or 2, and everything else falls under their preferred language group.","solution":"def min_languages(n, preferred_languages): Given the number of people and their respective preferred languages, determine the minimum number of distinct languages required to ensure each person can communicate with at least one other person in their preferred language group. :param n: int - Number of people :param preferred_languages: list of int - List of preferred languages for each person :return: int - Minimum number of distinct languages required from collections import Counter # Count the frequency of each language preference language_count = Counter(preferred_languages) # The minimum number of distinct languages required is the number of unique languages # with the highest counts (we need at least one other person sharing the same language) num_languages = sum(1 for count in language_count.values() if count > 1) return max(1, num_languages) # At least one language is required # I/O Code to be implemented only if necessary for local testing (do not include in the solution)"},{"question":"Alice received an interesting problem in her mathematics class. She has been given a grid with dimensions h times w consisting of only 0\'s and 1\'s. She needs to identify the largest square sub-grid that contains only 1\'s. Alice has asked for your help to solve the problem efficiently. Write a program to find the size of the largest square sub-grid that contains only 1\'s. The input format is as follows: The first line contains two integers, h and w (1 leq h, w leq 1000). Each of the next h lines contains a string of length w consisting solely of digits \'0\' and \'1\'. The output consists of a single integer, representing the area of the largest square sub-grid containing only 1\'s. # Example Input ``` 4 5 10111 10111 11111 10010 ``` Output ``` 9 ``` In the example above, the largest square of 1\'s has dimensions 3x3 (hence the area is 9). Can you help Alice find the solution?","solution":"def largest_square_subgrid(h, w, grid): Returns the area of the largest square sub-grid that contains only 1\'s. if h == 0 or w == 0: return 0 dp = [[0] * w for _ in range(h)] max_side = 0 for i in range(h): for j in range(w): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"Roxanne is setting up a new tech hub and wants to design a unique room allocation system. In this system, each room has a certain capacity and some requirements. Each person has certain attributes, and they can be allocated to a room only if they satisfy the room\'s requirements. Every person and room can have multiple attributes. A person can be admitted to a room if and only if for each attribute that the room has a requirement for, the person has at least that much of the attribute. For example, a room may require `intelligence ≥ 5` and `strength ≥ 7`. A person must have at least 5 in intelligence and 7 in strength to be allocated to this room. Since allocating people to rooms isn\'t simple, Roxanne has sought your help to write a program to automate the process. The program should determine the maximum number of people that can be allocated to a room given the constraints. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5), where `n` is the number of people and `m` is the number of rooms. - The next `n` lines each contain multiple space-separated integers representing the attributes of each person. - The next `m` lines each contain multiple space-separated integers representing the room\'s requirements and capacity, where the first integer is the capacity and the following integers represent the attribute requirements. # Output - Print an integer which is the maximum number of people that can be allocated to the rooms satisfying the constraints. # Example Input ``` 4 2 2 4 4 6 5 10 7 8 2 5 7 3 2 3 ``` Output ``` 5 ``` # Explanation In the input example: - There are 4 people with attributes: - Person 1: intelligence = 2, strength = 4 - Person 2: intelligence = 4, strength = 6 - Person 3: intelligence = 5, strength = 10 - Person 4: intelligence = 7, strength = 8 - There are 2 rooms: - Room 1 has a capacity of 2 and requires intelligence ≥ 5 and strength ≥ 7. - Room 2 has a capacity of 3 and requires intelligence ≥ 2 and strength ≥ 3. The maximum number of people that can be allocated considering the constraints is 5: - 2 people can be allocated to Room 1 (those who meet intelligence ≥ 5 and strength ≥ 7). - 3 people can be allocated to Room 2 (those who meet intelligence ≥ 2 and strength ≥ 3). Note: This problem requires careful checking of each person\'s attributes against each room\'s requirements and capacity to maximize the total allocations. To gracefully handle large inputs and constraints, efficient algorithms need to be explored (e.g., greedy algorithms, sorting with binary search).","solution":"def max_people_allocated(n, m, people, rooms): Returns the maximum number of people that can be allocated to rooms given the constraints. :param n: Number of people :param m: Number of rooms :param people: List of people\'s attributes :param rooms: List of room\'s capacity and requirements :return: Maximum number of people that can be allocated # Function to check if a person can be allocated to a room def can_allocate(person, room_requirements): for i in range(len(room_requirements)): if person[i] < room_requirements[i]: return False return True # Sorting rooms by capacity in descending order to maximize utilization rooms_sorted = sorted(rooms, key=lambda x: -x[0]) total_allocated = 0 for room in rooms_sorted: capacity = room[0] requirements = room[1:] allocated = 0 for person in people: if allocated < capacity and can_allocate(person, requirements): allocated += 1 total_allocated += allocated return total_allocated"},{"question":"In a company, there are multiple departments, each consisting of various types of employees. Each employee falls into one of three categories: junior, mid-level, or senior. Each department must have at least one employee from each category to be functional. The company\'s management wants to know the minimum number of new employees they need to hire to make all departments functional. You are given the current number of junior, mid-level, and senior employees in each department. Your task is to determine the minimum number of new employees (junior, mid-level, and senior) that need to be hired to ensure every department has at least one employee from each category. The first line contains an integer d (1 ≤ d ≤ 1000) - the number of departments. Each of the next d lines contains three integers ji, mi, and si (0 ≤ ji, mi, si ≤ 1000) - the number of junior, mid-level, and senior employees in the i-th department respectively. Print a single integer that represents the minimum number of new employees needed to make all departments functional. # Example Input ``` 3 1 1 0 0 0 0 2 1 3 ``` Output ``` 4 ``` Explanation - In the first department, we need 1 senior to make it functional. - In the second department, we need 1 junior, 1 mid-level, and 1 senior to make it functional. - The third department is already functional. Thus, the total number of new employees needed is 1 + 3 = 4.","solution":"def min_new_employees(d, departments): Returns the minimum number of new employees needed to make all departments functional. Args: d (int): Number of departments. departments (list of tuples): Each tuple contains the number of junior, mid-level, and senior employees in a department respectively. Returns: int: Minimum number of new employees needed. total_new_employees = 0 for ji, mi, si in departments: if ji == 0: total_new_employees += 1 if mi == 0: total_new_employees += 1 if si == 0: total_new_employees += 1 return total_new_employees"},{"question":"A new startup called \\"SkillBoost\\" is launching their coding assessment platform. To ensure a bug-free launch, they want to validate their system with comprehensive test reports. Each report consists of several test cases. Each test case is represented by an integer indicating the number of bugs found in the test case. SkillBoost plans to process multiple reports in one batch and calculate various metrics for each report. You need to create a program that processes multiple reports and computes the following statistics for each report: 1. The total number of bugs found. 2. The average number of bugs per test case. 3. The test case with the maximum number of bugs. 4. The test case with the minimum number of bugs. Input The first line of input contains a single integer r (1 leq r leq 10^3), the number of reports. For each report, the first line contains a single integer t (1 leq t leq 10^4), the number of test cases in the report. The next line contains t integers, where the i-th integer b_i (0 leq b_i leq 10^5) represents the number of bugs found in the i-th test case. Output For each report, print four lines: 1. The total number of bugs found. 2. The average number of bugs per test case, formatted to two decimal places. 3. The number of bugs in the test case with the maximum number of bugs. 4. The number of bugs in the test case with the minimum number of bugs. Example Input: 2 5 10 20 5 15 0 4 3 4 12 7 Output: 50 10.00 20 0 26 6.50 12 3 Explanation In the first report: - Total bugs = 10 + 20 + 5 + 15 + 0 = 50 - Average bugs = 50 / 5 = 10.00 - Maximum bugs = 20 - Minimum bugs = 0 In the second report: - Total bugs = 3 + 4 + 12 + 7 = 26 - Average bugs = 26 / 4 = 6.50 - Maximum bugs = 12 - Minimum bugs = 3","solution":"def process_reports(reports): results = [] for report in reports: t, bugs = report total_bugs = sum(bugs) average_bugs = total_bugs / t max_bugs = max(bugs) min_bugs = min(bugs) results.append((total_bugs, f\\"{average_bugs:.2f}\\", max_bugs, min_bugs)) return results"},{"question":"Bob is excited about jumping between platforms in his new game. The game consists of platforms aligned in a straight line, and each platform has a specific height. Bob starts on the first platform (platform 1) and wants to jump to the last platform (platform n). Each jump Bob makes can go from the current platform i to any platform j (i < j) such that the height difference between platform i and platform j is at most k units. Bob wants to know the minimum number of jumps required to reach the last platform. If it\'s not possible to reach the last platform, he should know that too. The first line of input contains two integers n (2 ≤ n ≤ 1000) and k (1 ≤ k ≤ 10000) — the number of platforms and the maximum allowed height difference for a jump. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5) — the heights of the platforms. Print a single integer – the minimum number of jumps required to reach the last platform, or -1 if it is not possible. # Example Input ``` 5 3 1 3 6 2 8 ``` Output ``` 3 ``` Explanation Bob can jump from platform 1 to platform 2, then to platform 4, and finally to platform 5. This requires 3 jumps.","solution":"from collections import deque def min_jumps(n, k, heights): Returns the minimum number of jumps required to reach the last platform, or -1 if it is not possible. # BFS approach queue = deque([(0, 0)]) # (current index, number of jumps) visited = [False] * n visited[0] = True while queue: curr, jumps = queue.popleft() if curr == n - 1: return jumps for next in range(curr + 1, n): if abs(heights[next] - heights[curr]) <= k and not visited[next]: queue.append((next, jumps + 1)) visited[next] = True return -1"},{"question":"A group of alpacas is standing in a field arranged in a circle. Each alpaca has a certain amount of grass it will eat per minute. At the start, they are all positioned at numbered spots from 1 to n, in a clockwise order. For some reason, an alpaca can only move to the spot between itself and its nearest neighbor in a clockwise direction. If there’s an alpaca already on that spot, the moving alpaca and the stationary one will fight over that spot, causing both to stop moving. Your task is to determine the maximum amount of grass that the alpacas can collectively eat if they all start moving simultaneously for t minutes. You are given two integers n (3 ≤ n ≤ 1000) and t (1 ≤ t ≤ 1000), followed by a line with n integers a1, a2, ..., an where ai (1 ≤ ai ≤ 100) represents the amount of grass the alpacas at spot i will eat per minute. Output a single integer — the maximum total amount of grass eaten by the alpacas after t minutes. Example: Input: 4 3 5 3 2 6 Output: 45 Explanation: Alpaca at spot 1 moves to spot 2 after 1 minute (5 + 6 = 11). After 2 minutes, they can move to spots 3 and 4 respectively, but since there’s no collision, it doesn’t happen and they keep eating. Total= (5*3) + (3*3) + (2*3) + (6*3)= 15+9+6+18 = 48 but at most 45.","solution":"def max_total_grass_eaten(n, t, grass_per_minute): Calculate the maximum total amount of grass eaten by alpacas in t minutes. Parameters: n (int): Number of alpacas / spots (3 ≤ n ≤ 1000) t (int): Number of minutes (1 ≤ t ≤ 1000) grass_per_minute (list of int): Amount of grass eaten per minute by each alpaca (1 ≤ ai ≤ 100) Returns: int: Maximum total amount of grass eaten by all alpacas in t minutes. # Since alpacas only move to spots that will be occupied by their neighbors clockwise and # thus will fight, the optimal solution is each alpaca just eats at its initial spot. max_grass = sum(grass_per_minute) * t return max_grass"},{"question":"After exploring the forest near her home, Alice stumbled upon a labyrinth filled with magical creatures. To navigate through the labyrinth, she needs to solve the following puzzle: Given an undirected graph representing the labyrinth, where nodes represent rooms and edges represent the paths between them, Alice needs to find the shortest path from the entrance to the exit. Some paths have a higher magical resistance than others, which adds to the difficulty of traversing them. Write a program to find the shortest path from the entrance to the exit in the labyrinth and calculate the total resistance faced along this path. If there are multiple shortest paths with the same resistance, return any one of them. The labyrinth is represented as a weighted graph with n nodes and m edges. Each node is identified by an integer from 1 to n, where 1 is the entrance and n is the exit. Each edge is represented by three integers u, v, and w, indicating there is a path between nodes u and v with resistance w. The first line of input contains two space-separated integers, n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^6), the number of nodes and edges in the graph. Each of the next m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), describing an edge in the labyrinth. Output the total magical resistance of the shortest path from the entrance to the exit as a single integer. If no such path exists, output -1. In the first example, the shortest path uses the edges (1, 2) and (2, 4) with a total resistance of 4. In the second example, there is no path from node 1 to node 4. # Example 1: Input: ``` 4 4 1 2 1 2 3 2 1 3 4 2 4 3 ``` Output: ``` 4 ``` # Example 2: Input: ``` 4 2 1 2 1 3 4 2 ``` Output: ``` -1 ```","solution":"import heapq def dijkstra(n, edges): # Create an adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Min-heap to store (distance, node) min_heap = [(0, 1)] # Start from node 1 with distance 0 distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) # If the distance is greater than the recorded distance, skip it if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) # The distance to the exit node n return distances[n] if distances[n] != float(\'inf\') else -1 def find_shortest_path_resistance(n, m, edges): return dijkstra(n, edges)"},{"question":"In a small town, people love to collect unique coins. There are n citizens in this town, and each of them has some coins. Each coin has a unique identifier, represented as a positive integer. Some coins might be the same between different citizens, but every citizen\'s collection is unique within themselves. The mayor of the town wants to organize an exhibition where every citizen will showcase the same total number of unique coins. To help the mayor, you have been tasked with redistributing the coins such that each citizen has exactly the same number of unique coins. If it\'s not possible to redistribute the coins in such a way, report that it is not possible. The first line contains an integer n (1 ≤ n ≤ 100) – the number of citizens. The next n lines contain details about each citizen\'s coin collection. Each line starts with an integer mi (1 ≤ mi ≤ 1000), denoting the number of coins the i-th citizen has, followed by mi space-separated integers representing the identifiers of these coins. If it is possible to redistribute the coins so that each citizen has exactly the same number of unique coins, print \\"YES\\" and specify the new collections for each citizen. If it is impossible, print \\"NO\\". # Input: 3 4 1 2 3 4 5 2 2 3 3 4 3 4 5 6 # Output: YES 3 1 2 3 3 4 5 6 3 2 4 5","solution":"def redistribute_coins(n, coins): Determines if it\'s possible to redistribute coins such that each citizen has the same number of unique coins. If yes, returns \\"YES\\" and the new collections for each citizen. Otherwise, returns \\"NO\\". Parameters: n (int): number of citizens coins (list): list of lists with each citizen\'s coin collection Returns: str: \\"YES\\" or \\"NO\\" list of lists (optional): new coins distribution if possible # Collect all unique coins in town all_unique_coins = set() for collection in coins: all_unique_coins.update(collection) # Calculate the total number of unique coins total_unique_coins = len(all_unique_coins) # Calculate the required number of unique coins per citizen if total_unique_coins % n != 0: return \\"NO\\", [] unique_per_citizen = total_unique_coins // n # Check if it\'s possible to divide unique coins evenly new_collections = [] all_unique_coins = list(all_unique_coins) for i in range(n): new_collections.append(all_unique_coins[i * unique_per_citizen : (i + 1) * unique_per_citizen]) if any(len(collection) != unique_per_citizen for collection in new_collections): return \\"NO\\", [] return \\"YES\\", [[unique_per_citizen] + collection for collection in new_collections] # Sample Input: n = 3 coins = [ [1, 2, 3, 4], [2, 2, 3, 3, 4], [4, 5, 6] ] # Sample Output result = redistribute_coins(n, coins) if result[0] == \\"YES\\": print(result[0]) for collection in result[1]: print(\' \'.join(map(str, collection))) else: print(result[0])"},{"question":"Benjamin is a robotic engineer designing a relay task for a team of n robots. Each robot is identified by a unique integer from 1 to n and they need to pass a relay baton according to a given sequence of robot IDs. Benjamin wants to ensure that the relay task is evenly distributed. The task needs to determine the maximum number of times any robot receives the baton during the relay. The relay sequence is given as a string of space-separated integers, where each integer represents the ID of the robot that will receive the baton in that step. Given n and the relay sequence, determine the maximum number of times any robot receives the baton. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of robots. The second line contains the relay sequence as a string of space-separated integers, where each integer si (1 ≤ si ≤ n) represents the robot ID that receives the baton in the i-th step of the relay sequence. The length of the sequence is at most 1,000,000. Print one integer — the maximum number of times any robot receives the baton. **Examples** **Input:** ``` 5 1 2 3 2 1 4 1 5 3 ``` **Output:** ``` 3 ``` **Input:** ``` 3 3 1 2 3 1 2 3 1 2 3 1 ``` **Output:** ``` 4 ```","solution":"def max_relay_count(n, relay_sequence): Returns the maximum number of times any robot receives the baton during the relay. :param n: Number of robots :param relay_sequence: String containing the relay sequence (space-separated integers) :return: Integer representing the maximum number of times any robot receives the baton # Convert the relay sequence from string to a list of integers sequence = list(map(int, relay_sequence.split())) # Initialize a dictionary to count the occurrences of each robot ID relay_counts = {} # Count each occurrence for robot_id in sequence: if robot_id in relay_counts: relay_counts[robot_id] += 1 else: relay_counts[robot_id] = 1 # Return the maximum count return max(relay_counts.values())"},{"question":"You are given an array of integers that represents the heights of a skyline. Each building is represented by a column of non-negative integers where the value of each integer represents the height of the building. You need to find the amount of water that can be trapped after raining between the buildings. The width of each building is 1. You have to write a function `trap_water(heights)` that takes a list of integers `heights` and returns the total amount of trapped water. # Input - An array `heights` of length `n` representing the heights of the skyline where `0 <= n <= 10^5` and `0 <= heights[i] <= 10^9` for each element `heights[i]`. # Output - Return an integer representing the total units of water trapped. # Example Input ```python [0,1,0,2,1,0,1,3,2,1,2,1] ``` Output ```python 6 ``` Explanation 1 unit of water is trapped between buildings 1 and 3. 2 units of water are trapped between buildings 3 and 7 (total 3 units). 1 unit of water is trapped between buildings 7 and 9. 1 unit of water is trapped between buildings 8 and 10. So, 1 + 3 + 1 + 1 = 6 units of water are trapped. # Function Signature ```python def trap_water(heights: List[int]) -> int: pass ``` # Note - The solution needs to handle the edge cases, such as when there are no buildings or when all buildings have the same height. - Consider both time and space complexity while designing the algorithm. A solution with linear time and constant space complexity is ideal.","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"Vanya loves pyramids and geometry. He has a set of distinct positive integers and wants to form a pyramid-like sequence using exactly these numbers. A sequence of integers is considered a pyramid if there exists a number (peak) which is greater than the numbers before it and greater than the numbers after it. Your task is to determine the possible heights of the pyramid he can create. A height of pyramid is defined as the number of elements from the start of the sequence up to the peak. The first line contains a single integer n (2 ≤ n ≤ 100000), the number of elements in Vanya\'s set. The second line contains n distinct positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the set. Print, in ascending order, the possible heights of pyramids Vanya can create. Example: Input: 6 3 1 4 1 5 9 Output: 2 3 4 5 6 Explanation: The possible pyramids are: - Height 2: [1 3] - Height 3: [1 3 4] - Height 4: [1 4 5] - Height 5: [1 5 9] - Height 6: [1 4 5 9]","solution":"def possible_pyramid_heights(n, elements): This function takes the number of elements n and the list of elements, and returns the possible heights of the pyramids Vanya can create. Parameters: n (int): The number of elements in the list. elements (list): The list of distinct positive integers. Returns: list: A list of possible pyramid heights in ascending order. elements_sorted = sorted(elements) # Sort the elements in ascending order # Possible heights range from 2 to n return list(range(2, n + 1))"},{"question":"You have a collection of `n` strings, and you need to determine which string has the highest frequency of occurrence. If there are multiple strings with the highest frequency, return the lexicographically smallest one. The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of strings in the collection. Each of the following `n` lines contains a string consisting of lowercase English letters. The length of each string is at least 1 and at most 100. Output the string that has the highest frequency. If there are multiple strings with the same frequency, output the lexicographically smallest one. For example, given the following input: ``` 7 apple banana apple orange banana banana apple ``` The output would be: ``` apple ``` Explanation: \\"apple\\" appears 3 times and \\"banana\\" also appears 3 times, but \\"apple\\" is lexicographically smaller than \\"banana\\".","solution":"def most_frequent_string(n, strings): Returns the string that has the highest frequency of occurrence. In case of a tie, the lexicographically smallest one is returned. :param n: Integer - the number of strings in the collection :param strings: List of strings :return: String with the highest frequency or lexicographically smallest in case of a tie from collections import Counter counter = Counter(strings) max_frequency = max(counter.values()) # Find all strings that have the highest frequency most_frequent_strings = [string for string, freq in counter.items() if freq == max_frequency] # Return the lexicographically smallest string return min(most_frequent_strings)"},{"question":"In a fantasy role-playing game, there is a kingdom with n towns and m bidirectional roads that connect pairs of towns. Each road has a certain length in kilometers. The Kingdom is expecting the arrival of a dragon, and the king wants to ensure that his knights can patrol the shortest path between two specific towns, to prepare for the possible attack. You are required to find the shortest path distance between the two specific towns, taking into consideration that roads may vary in length but there might be multiple shortest paths. Note that the towns are labeled from 1 to n. The first line contains three integers n, m, and q (1 le n, m le 1000, 1 le q le 500) — the number of towns, the number of bidirectional roads, and the number of queries respectively. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — indicating there is a road of length w between town u and town v. Each of the next q lines contains two integers a and b (1 le a, b le n) — for which you need to find the shortest distance between the towns a and b. If there is no path between the towns, return -1 for that query. Print q lines; each line should contain a single integer — the shortest distance between the pair of towns or -1 if there is no path. In the first example, the roads with lengths are directly given, and we check the shortest distance for the given town queries. In the second example, there are disconnected components; hence some queries might return -1 indicating no possible path exists.","solution":"import heapq def dijkstra(n, graph, start): Dijkstra\'s Algorithm to find the shortest path from start node to all nodes. :param n: Number of nodes :param graph: Adjacency list of the graph :param start: Start node :return: Dict with shortest distances from start to all nodes distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_path_distance(n, m, q, edges, queries): Process edges and queries to find shortest paths using Dijkstra\'s Algorithm. :param n: Number of towns :param m: Number of roads :param q: Number of queries :param edges: List of edges where each edge is (u, v, w) :param queries: List of queries where each query is (a, b) :return: List of shortest distances for each query graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b in queries: distances = dijkstra(n, graph, a) result = distances[b] if distances[b] != float(\'inf\') else -1 results.append(result) return results"},{"question":"Jamie loves to play with strings and has recently discovered an interesting game. Given a string s consisting of lowercase English letters, Jamie wants to transform it into a palindrome using the minimum number of operations. The only operation allowed is to change a single character to another lowercase English letter. Your task is to help Jamie find out the minimum number of such operations needed to turn the string into a palindrome. The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100). For each test case, output the minimum number of changes required on a new line. For example, if the input consists of: ``` 3 abc aabaa racecar ``` The corresponding output should be: ``` 1 0 0 ``` In the first case, changing the \'c\' to \'a\' or \'b\' would result in a palindrome. In the second case, the string is already a palindrome. In the third case, the string is already a palindrome.","solution":"def min_operations_to_palindrome(t, lst): Given a number of test cases and a list of strings, returns a list of integers representing the minimum number of operations needed to turn each string into a palindrome. def operations_to_palindrome(s): l, r = 0, len(s) - 1 operations = 0 while l < r: if s[l] != s[r]: operations += 1 l += 1 r -= 1 return operations result = [] for s in lst: result.append(operations_to_palindrome(s)) return result"},{"question":"In a certain forest, there are n distinct animals. Each animal can be described by a tuple of integers (x, y, z) representing their coordinates in a 3D space. The forest ranger has decided to track a movement path that starts from one of the animals and visits each other animal exactly once. However, due to the dense forest, the ranger can only visit the animals that are the nearest to the current location. Create a program that efficiently constructs such a path for the ranger starting from any given animal. The path should always choose the nearest unvisited animal at each step until all animals are visited. If there are multiple animals at the same distance, choose any one of them. The first line contains an integer n (1 ≤ n ≤ 100) representing the number of animals in the forest. The next n lines contain three integers each, xi, yi, and zi (|xi|, |yi|, |zi| ≤ 1000) which are the coordinates of the ith animal. Output the sequence of indices representing the order in which the animals are visited, starting from the first animal given in the input (use 1-based indexing). Note: The distance between two animals at (x1, y1, z1) and (x2, y2, z2) is calculated as the Euclidean distance sqrt((x2 - x1)^2 + (y2 - y1)^2 + (z2 - z1)^2). Input: The first line contains: n The next n lines each contain: xi yi zi Output: A single line with n integers representing the order of indices in which the animals are visited.","solution":"import math def nearest_neighbor_path(n, coordinates): def euclidean_distance(a, b): return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2 + (a[2] - b[2])**2) visited = [False] * n current_index = 0 visited[current_index] = True path = [current_index + 1] for _ in range(n - 1): nearest_distance = float(\'inf\') nearest_index = -1 for i in range(n): if not visited[i]: dist = euclidean_distance(coordinates[current_index], coordinates[i]) if dist < nearest_distance: nearest_distance = dist nearest_index = i visited[nearest_index] = True path.append(nearest_index + 1) current_index = nearest_index return path # Example usage: # n = 4 # coordinates = [(0, 0, 0), (1, 1, 1), (2, 2, 2), (3, 3, 3)] # print(nearest_neighbor_path(n, coordinates)) # Output: [1, 2, 3, 4]"},{"question":"Given an array of integers arr[1 cdot cdot cdot n], you need to perform several operations to make all of its elements equal. During each operation, you can choose any subarray and increment each element of this subarray by one. The task is to find the minimum number of operations required to make all elements of the array equal. # Input The first line contains a single integer n (1 leq n leq 2 cdot 10^5) — the number of elements in the array. The second line contains n integers arr[i] (1 leq arr[i] leq 10^9) — the elements of the array. # Output Print a single integer — the minimum number of operations required to make all elements of the array equal. # Examples Example 1: **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 3 ``` Example 2: **Input:** ``` 5 5 5 5 5 5 ``` **Output:** ``` 0 ``` Example 3: **Input:** ``` 3 1 3 2 ``` **Output:** ``` 2 ``` # Note In the first example, one possible sequence of operations is: 1. Increment the subarray [1, 4]: resulting array [2, 3, 4, 5] 2. Increment the subarray [1, 4]: resulting array [3, 4, 5, 6] 3. Increment the subarray [1, 4]: resulting array [4, 5, 6, 7] In the second example, all elements are already equal, so no operations are needed. In the third example, one possible sequence of operations is: 1. Increment the subarray [1, 2]: resulting array [2, 4, 2] 2. Increment the subarray [1, 3]: resulting array [3, 5, 3] This problem requires a greedy or mathematical approach to determine the minimum operations needed to balance the array effectively and identify the optimal subarrays to incrementally adjust.","solution":"def min_operations_to_equalize(arr): Given an array of integers, this function calculates the minimum number of operations required to make all elements of the array equal. In each operation, any subarray can be chosen and each element of this subarray can be incremented by one. return max(arr) - min(arr) # Example usage: # arr = [1, 2, 3, 4] # result = min_operations_to_equalize(arr) # Output should be 3"},{"question":"You are given a list of integers and a number k. Your task is to find all unique pairs of integers in the list that sum up to k. Each pair should be represented as a tuple with the smaller number appearing first. Ensure that there are no duplicate pairs in the output. The first line contains two integers n and k (1 le n le 10^5, |k| le 10^9) — the number of integers in the list and the target sum. The second line contains n integers separated by spaces representing the elements of the list. Output each unique pair of integers as a tuple in ascending order. Example: Input: ``` 5 9 2 7 11 15 3 ``` Output: ``` (2, 7) ``` Input: ``` 6 10 1 5 2 8 3 7 ``` Output: ``` (2, 8) (3, 7) ```","solution":"def find_pairs_with_sum(arr, k): Find all unique pairs in the array that sum up to k. Each pair is represented as a tuple with the smaller number first. seen = set() output = set() for num in arr: target = k - num if target in seen: output.add((min(num, target), max(num, target))) seen.add(num) return sorted(output) # Example usage: # n = 6 # k = 10 # arr = [1, 5, 2, 8, 3, 7] # print(find_pairs_with_sum(arr, k)) # Output: [(2, 8), (3, 7)]"},{"question":"You are given two positive integers, n and k. Your task is to construct a permutation of integers from 1 to n where the absolute difference between any two consecutive integers is at most k, or determine if such a permutation is impossible. A permutation of integers from 1 to n is a sequence of integers where each integer from 1 to n appears exactly once. The first line of input contains an integer t (1 ≤ t ≤ 1000) - the number of test cases. For each test case, you are given two integers n (1 ≤ n ≤ 10000) and k (1 ≤ k ≤ n). For each test case, print \\"YES\\" in the first line and the permutation in the second line if such a permutation exists. If no such permutation exists, print \\"NO\\". If there are multiple valid permutations, you can output any of them.","solution":"def generate_permutation(n, k): if k >= n: return \\"NO\\" permutation = [] for i in range(n): permutation.append((i % k) + 1) return \\"YESn\\" + \' \'.join(map(str, permutation)) def solve(t, test_cases): results = [] for n, k in test_cases: results.append(generate_permutation(n, k)) return results"},{"question":"Artem has a drone and he loves exploring the city. The city is represented as a grid of size n times n. Some cells on the grid are blocked due to buildings or other obstacles, and cannot be traversed by the drone. Artem can control the drone and make it fly up, down, left, or right to an adjacent cell. He wants to find the shortest path for the drone to travel from the starting cell to the target cell. Your task is to help Artem find the shortest path in terms of the number of moves, given the grid of the city with obstacles, the starting position, and the target position. If there is no possible path, return -1. The first line of input contains a single integer n (1 leq n leq 1000) — the size of the grid. The next n lines each contain n characters, where each character is either \'.\' (representing an open cell) or \'#\' (representing an obstacle). The last line contains four integers x_1, y_1, x_2, y_2 (1 leq x_1, y_1, x_2, y_2 leq n) — the starting cell (x_1, y_1) and the target cell (x_2, y_2). It is guaranteed that both the starting and target cells are open. Print a single integer — the minimum number of moves required to move the drone from the starting cell to the target cell. If there is no possible path, print -1. # Example Input ``` 5 ..... .#. ...#. .#... ..... 1 1 5 5 ``` Output ``` 8 ``` Input ``` 5 # # # # # 1 1 5 5 ``` Output ``` -1 ```","solution":"from collections import deque def shortest_path(grid, n, start_x, start_y, target_x, target_y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) # (x, y, distance) visited = set() visited.add((start_x, start_y)) while queue: x, y, dist = queue.popleft() if (x, y) == (target_x, target_y): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve(n, grid, x1, y1, x2, y2): # Convert to zero-indexed coordinates for internal processing start_x, start_y = x1 - 1, y1 - 1 target_x, target_y = x2 - 1, y2 - 1 return shortest_path(grid, n, start_x, start_y, target_x, target_y)"},{"question":"You are given a schedule of several events. Each event has a start time and a finish time. You need to find the maximum number of non-overlapping events that can be attended. The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5), the number of events. Each of the next n lines contains two integers s_i and f_i (1 le s_i < f_i le 10^9), the start time and finish time of the i-th event. It\'s guaranteed that the sum of n for all test cases does not exceed 10^5. For each test case, print a single integer, the maximum number of non-overlapping events that can be attended. # Example Input ``` 2 5 1 2 2 4 1 3 4 5 3 5 3 1 3 2 5 4 6 ``` Output ``` 3 2 ``` # Explanation In the first test case, you can attend the events starting at: - 1 ending at 2 - 2 ending at 4 - 4 ending at 5 In the second test case, you can attend the events starting at: - 1 ending at 3 - 4 ending at 6","solution":"def max_non_overlapping_events(t, test_cases): results = [] for case in test_cases: n, events = case events.sort(key=lambda x: x[1]) # Sort events by finish time last_end_time = 0 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Darius and his friends are playing a game with coins. There are two players in the game and they take turns alternately. Initially, there are n coins in a pile and a player can remove either one or two coins from the pile in each turn. The player who cannot make a move because there are no coins left loses the game. Darius always goes first. Both players play optimally, meaning they make moves to maximize their chances of winning. Given the initial number of coins, determine if Darius will win the game. The input is a single integer n (1 ≤ n ≤ 10^9) — the initial number of coins in the pile. Output \\"YES\\" if Darius can guarantee a win with optimal play, otherwise output \\"NO\\". **Examples:** 1. For n = 1, the output should be \\"YES\\". 2. For n = 2, the output should be \\"YES\\". 3. For n = 3, the output should be \\"NO\\". **Explanation:** If n = 1 or n = 2, Darius can take all the remaining coins immediately and win the game. If n = 3, no matter what move Darius makes, the second player can always win.","solution":"def will_darius_win(n): Determines if Darius will win the game given there are n coins initially. Args: n (int): the initial number of coins in the pile. Returns: str: \\"YES\\" if Darius can guarantee a win with optimal play, otherwise \\"NO\\". # Darius will win if the initial number of coins is not a multiple of 3. return \\"NO\\" if n % 3 == 0 else \\"YES\\""},{"question":"Given a list of integers, we can apply the following operation any number of times: Select any two different elements and replace both by their sum. You need to determine whether it is possible to make all elements in the list equal by performing the operation repeatedly. For example, for the list [1, 2, 3], we can select 1 and 2, replace them with their sum 3, and the new list will be [3, 3, 3]. Thus, it is possible to make all elements equal. For the list [1, 2, 4], it is not possible to make all elements equal by the given operation. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the list. The second line of input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the list. Output \\"YES\\" if it is possible to make all elements in the list equal by performing the given operation any number of times. Otherwise, output \\"NO\\". For example, for the input: ``` 3 1 2 3 ``` the output should be \\"YES\\". For another input: ``` 3 1 2 4 ``` the output should be \\"NO\\".","solution":"def can_make_all_elements_equal(n, arr): Determines whether it is possible to make all elements in the list equal by performing the given operation. Parameters: n (int): The number of elements in the list. arr (list of int): The list of integers. Returns: str: \\"YES\\" if it is possible to make all elements in the list equal; otherwise, \\"NO\\". total_sum = sum(arr) if total_sum % n == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of integers, where each integer represents the amount of money each participant of a lottery spent on tickets. Your task is to find out if there are two participants whose combined spending is exactly equal to a given amount k. The first line of the input contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) - the number of participants and the target sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) - the amount of money each participant spent on tickets. If such a pair of participants exists, print \\"YES\\". Otherwise, print \\"NO\\". Note that each participant is represented by a distinct index, and the same participant cannot be considered twice. For example, given the participants spending [1, 4, 5, 11] and a target sum k of 9, the output should be \\"YES\\" since 4 + 5 equals 9. If the target sum was 20, the output should be \\"NO\\" as no such pair exists.","solution":"def find_pair_sum(n, k, participants): Determines if there are two distinct participants whose combined spending exactly equals the given amount k. :param n: Number of participants :param k: Target sum :param participants: List of spending amounts :return: \\"YES\\" if such pair exists, otherwise \\"NO\\" seen = set() for amount in participants: if (k - amount) in seen: return \\"YES\\" seen.add(amount) return \\"NO\\""},{"question":"You are given an array of integers representing the marks scored by students in an exam. Your task is to write a function that can find the shortest subarray length such that its sum is greater than or equal to a given value `S`. If no such subarray exists, return `-1`. # Function Signature ```python def min_subarray_len(arr: List[int], S: int) -> int: ``` # Input - The function takes two inputs: - `arr` (1 ≤ len(arr) ≤ 10^5): A list of positive integers representing the marks scored by students. - `S` (1 ≤ S ≤ 10^9): An integer representing the minimum sum for the subarray. # Output - The function should return an integer representing the length of the shortest subarray. If no such subarray exists, return `-1`. # Example ```python min_subarray_len([2, 3, 1, 2, 4, 3], 7) # Output: 2 ``` Explanation: The shortest subarray with a sum >= 7 is `[4, 3]` with length 2. ```python min_subarray_len([1, 1, 1, 1, 1, 1], 5) # Output: 5 ``` Explanation: The shortest subarray with a sum >= 5 is `[1, 1, 1, 1, 1]` with length 5. ```python min_subarray_len([2, 3, 1, 2], 15) # Output: -1 ``` Explanation: There is no subarray with a sum >= 15. # Constraints - Make sure the solution runs efficiently within the given constraints. - Think in terms of sliding windows and two-pointer techniques to find an optimal solution.","solution":"from typing import List def min_subarray_len(arr: List[int], S: int) -> int: n = len(arr) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a labyrinth of n rows and m columns, represented by a grid. Each cell in the grid is either an empty space (denoted by \'.\') or a wall (denoted by \'#\'). You want to help Alex escape the labyrinth. Alex starts in a given empty cell (sx, sy) and his goal is to reach a given exit cell (ex, ey) which is also an empty cell. However, he can only move through empty cells and can move up, down, left, or right to a neighbor cell. Determine the minimum number of steps Alex needs to take to reach the exit cell from the start cell. If it is not possible for Alex to reach the exit, return -1. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the labyrinth. The next n lines contain m characters each, representing the labyrinth grid. The next line contains two integers sx and sy (1 ≤ sx ≤ n, 1 ≤ sy ≤ m) — the row and column of the starting cell. The last line contains two integers ex and ey (1 ≤ ex ≤ n, 1 ≤ ey ≤ m) — the row and column of the exit cell. It is guaranteed that both the starting cell and the exit cell are empty cells. # Output Print a single integer representing the minimum number of steps Alex needs to take to reach the exit cell. If it is not possible to reach the exit, print -1. # Example Input ``` 5 6 #....# #. #....# 2 2 4 4 ``` Output ``` 4 ``` In the example above, Alex can escape the labyrinth in 4 steps as follows: - Move to (3, 2) - Move to (4, 2) - Move to (4, 3) - Move to (4, 4)","solution":"from collections import deque def min_steps_to_escape_labyrinth(n, m, grid, sx, sy, ex, ey): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(sx-1, sy-1, 0)]) visited = set((sx-1, sy-1)) while queue: x, y, steps = queue.popleft() if (x, y) == (ex-1, ey-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a small town, there are N buildings connected by M roads. Each road connects two buildings, is bidirectional, and has a certain travel time. You need to find out if it is possible to start from a specific building and visit all other buildings exactly once returning back to the starting point (i.e., a Hamiltonian circuit). The first line of the input contains two integers N and M (2 ≤ N ≤ 15, 1 ≤ M ≤ N*(N-1)/2). The next M lines contain three integers each u, v, t (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ t ≤ 100) denoting there is a road between buildings u and v with travel time t. Output \\"YES\\" if there exists a Hamiltonian circuit, otherwise output \\"NO\\". Example : Input 4 5 1 2 10 2 3 20 3 4 30 4 1 25 2 4 15 Output YES","solution":"from itertools import permutations def check_hamiltonian_circuit(N, M, roads): graph = {i: [] for i in range(1, N + 1)} for u, v, t in roads: graph[u].append(v) graph[v].append(u) def is_hamiltonian_cycle(permutation): if permutation[0] != permutation[-1]: return False for i in range(1, len(permutation)): if permutation[i] not in graph[permutation[i-1]]: return False return True buildings = [i for i in range(1, N + 1)] for perm in permutations(buildings[1:], N - 1): perm = [1] + list(perm) + [1] if is_hamiltonian_cycle(perm): return \\"YES\\" return \\"NO\\""},{"question":"The lands of Norlaria are governed by powerful wizards. Each year, the Council of Wizards convenes to decide upon matters crucial to maintaining the balance of magic. However, there has been increasing tension among the wizards, and the council meetings have become quite unmanageable. The Council consists of n wizards, and each wizard has a unique power level. A wizard\'s power level is crucial because discussions need to be balanced—meaning no single wizard should dominate the discussion. To maintain balance, the council needs to divide the wizards into two groups such that the absolute difference between the sums of the power levels of the two groups is minimized. Given the power levels of n wizards, write a function that returns the minimum possible absolute difference between the sums of the power levels of the two groups. # Input The first line of input contains an integer n (1 ≤ n ≤ 200) representing the number of wizards. The second line contains n integers, where each integer represents the power level of a specific wizard. Each power level is a positive integer and does not exceed 10^3. # Output Output a single integer, the minimum possible absolute difference between the sums of the power levels of the two groups. # Example Input 5 1 2 3 9 7 Output 0 Input 4 10 20 15 5 Output 0 Input 3 5 5 6 Output 4 **Explanation:** - In the first example, dividing the wizards into groups with power levels {1, 9} and {2, 3, 7} results in sums of 10 and 12, with an absolute difference of 2. However, the optimal grouping is {1, 2, 3, 9} and {7} with sums 15 and 7, resulting in a minimum difference of 0. - In the second example, one optimal grouping is {10, 20} and {15, 5}, with both groups having a sum of 30, and thus their difference is 0. - In the third example, the optimal grouping would be {5, 5} and {6} with sums 10 and 6, giving a difference of 4.","solution":"def min_diff_two_groups(n, power_levels): Returns the minimum possible absolute difference between the sums of the power levels of the two groups. total_power = sum(power_levels) half_power = total_power // 2 # Initialize dp array dp = [False] * (half_power + 1) dp[0] = True for power in power_levels: for j in range(half_power, power - 1, -1): if dp[j - power]: dp[j] = True # Find the maximum possible value which is closest to half of total_power for i in range(half_power, -1, -1): if dp[i]: group1_sum = i break group2_sum = total_power - group1_sum return abs(group2_sum - group1_sum)"},{"question":"You are tasked with developing a scheduling algorithm for a company that operates based on various projects and deadlines. The company has a list of upcoming projects, each with a specific start date and end date. You need to determine if it\'s possible to complete all the projects without any of them overlapping in time. The difficulty is that you can only work on one project at a time, meaning the time intervals during which the projects are active must not overlap. You are given a list of projects, each defined by a pair of integers representing the start date and end date (inclusive). You need to determine if it\'s feasible to schedule all the projects in a way that they do not overlap. The first line contains an integer n (1 leq n leq 10^5), the number of projects. Each of the next n lines contains two integers s_i and e_i (1 leq s_i leq e_i leq 10^9), the start date and end date of the i-th project. Output \\"Yes\\" if it is possible to schedule all the projects without overlapping, otherwise output \\"No\\". Example: Input: ``` 3 1 3 2 5 6 8 ``` Output: ``` No ``` Input: ``` 4 1 2 3 4 5 6 7 8 ``` Output: ``` Yes ``` In the first example, the second project overlaps with the first one, making it impossible to schedule all the projects without overlapping. In the second example, all projects can be scheduled without overlapping.","solution":"def can_schedule_projects(projects): Determines if it\'s possible to schedule all the projects without overlapping. Parameters: projects (list of tuple): List of tuples where each tuple contains (start_date, end_date) Returns: str: \\"Yes\\" if all projects can be scheduled without overlapping, otherwise \\"No\\" projects.sort(key=lambda x: x[0]) for i in range(1, len(projects)): if projects[i][0] <= projects[i-1][1]: return \\"No\\" return \\"Yes\\" def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) projects = [tuple(map(int, line.split())) for line in lines[1:]] return projects def main(input_str): projects = parse_input(input_str) return can_schedule_projects(projects)"},{"question":"Roz works in a warehouse and is responsible for arranging boxes in stacks. Each box has a weight, and weight distribution between stacks needs to be balanced as much as possible. Roz receives a delivery of n boxes and wants to distribute them into exactly two stacks such that the difference in total weight between the two stacks is minimized. Your task is to help Roz by finding the minimal possible difference between the weights of the two stacks. The first line of the input contains an integer n (1 ≤ n ≤ 20) — the number of boxes. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 100) — the weights of the boxes. Print a single integer — the minimal possible difference between the weights of the two stacks. Example: Input: 5 8 5 3 3 2 Output: 1 Here, the boxes can be divided into stacks with weights {5, 3, 3} and {8, 2}, resulting in a minimal difference of 1.","solution":"def min_difference(n, weights): Given a number of boxes and their weights, find the minimal possible difference between the weights of two stacks formed from these boxes. total_weight = sum(weights) half_total_weight = total_weight // 2 possible_sums = {0} for weight in weights: new_sums = possible_sums.copy() for current_sum in possible_sums: new_sum = current_sum + weight new_sums.add(new_sum) possible_sums = new_sums closest_sum = max(filter(lambda x: x <= half_total_weight, possible_sums)) other_sum = total_weight - closest_sum return abs(other_sum - closest_sum)"},{"question":"You are given an array of integers, and you need to process a multiple range update queries of the following format: given three integers l, r, and x, add x to all elements within the range [l, r] inclusive. After processing all the queries, output the final array. The first line contains two integers n and q (1 ≤ n, q ≤ 2 * 10^5), where n is the length of the array and q is the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial array elements. The next q lines contain queries of the following format: each line contains three integers l, r, and x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9) representing a single query to add x to all elements from index l to index r. Print n integers — the array after all q queries have been processed. For example, given the initial array [1, 2, 3, 4, 5] and two queries: - 1 3 2 (adds 2 to elements from index 1 to 3) - 2 5 3 (adds 3 to elements from index 2 to 5) the resulting array would be [3, 7, 8, 7, 8].","solution":"def range_update(n, array, queries): # Initialize a difference array diff = [0] * (n + 1) # Apply the range updates to the difference array for l, r, x in queries: diff[l - 1] += x if r < n: diff[r] -= x # Build the final array using the difference array result = [0] * n current_add = 0 for i in range(n): current_add += diff[i] result[i] = array[i] + current_add return result"},{"question":"In a distant land called Algorithmia, there are n bi-directional roads and m intersections. The city planning committee has decided to partition the city into regions for better management. The goal is to divide the city in such a way that each region forms a connected component with no more than k intersections in it. Two intersections belong to the same region if they are directly or indirectly connected by roads that only connect intersections within that region. The optimal plan minimizes the total number of new roads required to achieve this partition. You are given an initial map of Algorithmia in the form of n roads connecting m intersections and the maximum allowed size of any region. Determine the total number of new roads required to ensure that each region has at most k intersections and print that number. The first line contains three integers m, n, and k (1 ≤ m ≤ 100, 0 ≤ n ≤ 1000, 1 ≤ k ≤ m), which represent the number of intersections, the number of roads, and the maximum number of intersections per region, respectively. The next n lines contain two integers u and v (1 ≤ u, v ≤ m, u ≠ v) each, which represent the roads connecting intersections u and v. If dividing the city is not possible under the given conditions, print \\"IMPOSSIBLE\\". Otherwise, in the first line print the total number of new roads required. If there are multiple valid plans, print any of them. Example Input: ``` 6 4 2 1 2 2 3 3 4 4 5 ``` Example Output: ``` 2 ``` Explanation: To ensure that no region has more than 2 intersections, you can add roads to split the larger connected components. Adding a road between intersections 1 and 6 and another between intersections 5 and 6 achieves this, resulting in the smallest number of additional roads required.","solution":"def find_connected_components(m, roads): from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): queue = deque([start]) visited.add(start) component = [] while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return component visited = set() components = [] for i in range(1, m + 1): if i not in visited: component = bfs(i) components.append(component) return components def analyze_subcomponents(components, k): new_roads = 0 for component in components: if len(component) > k: new_roads += (len(component) - 1) // k return new_roads def min_new_roads(m, n, k, roads): if k == 0: return \\"IMPOSSIBLE\\" components = find_connected_components(m, roads) if any(len(component) > k for component in components): result = analyze_subcomponents(components, k) return result else: return 0 def process_input(input_str): data = input_str.strip().split(\'n\') m, n, k = map(int, data[0].split()) roads = [tuple(map(int, line.split())) for line in data[1:]] return min_new_roads(m, n, k, roads) # The function to directly call for use in tests or main execution def algorithmia(input_str): result = process_input(input_str) return result"},{"question":"Karl is organizing a gaming competition where n players are playing a card game. During the game, each player collects a collection of unique cards. The score of each player is determined by the sum of the values of all the cards in their collection. Karl wants to determine the top k players based on their scores at the end of the game. You are given the list of players and the values of the cards in their collections. Your task is to find the top k players by their scores and print their indices (1-based) in descending order of scores. If two players have the same score, the player with the lower index should come first. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of players and the number of top players to determine. Each of the next n lines contains space-separated integers where the first number is ti (1 ≤ ti ≤ 100) — the number of cards the i-th player has, followed by ti integers vi1, vi2, ..., vit (1 ≤ vij ≤ 1,000) — the values of the cards in the i-th player\'s collection. Print k space-separated integers — the indices of the top k players in the order of their scores. If two players have the same score, the player with the lower index should come first. # Example Input: ``` 5 3 3 5 2 9 4 8 3 2 6 2 10 7 5 1 2 3 4 5 4 7 7 7 7 ``` Output: ``` 2 5 1 ``` # Explanation: The scores of the players are: - Player 1: 5 + 2 + 9 = 16 - Player 2: 8 + 3 + 2 + 6 = 19 - Player 3: 10 + 7 = 17 - Player 4: 1 + 2 + 3 + 4 + 5 = 15 - Player 5: 7 + 7 + 7 + 7 = 28 The top 3 players are: 1. Player 5 with score 28. 2. Player 2 with score 19. 3. Player 3 with score 17. So the output is: `2 5 3`","solution":"def top_k_players(n, k, players_data): Determines the top k players based on their scores. Parameters: n (int): The number of players. k (int): The number of top players to determine. players_data (list of lists): Each inner list contains the number of cards followed by the values of the cards for a player. Returns: list: The indices (1-based) of the top k players in descending order of their scores. scores = [] # Calculate the score for each player for idx, data in enumerate(players_data): score = sum(data[1:]) # data[0] is the number of cards, data[1:] are the card values scores.append((score, idx + 1)) # Store score and 1-based index # Sort scores primarily by score in descending order and by index in ascending order scores.sort(key=lambda x: (-x[0], x[1])) # Extract the top k player indices top_k_indices = [score[1] for score in scores[:k]] return top_k_indices"},{"question":"Lara is fascinated with substrings of a string that look the same when reversed, known as palindromic substrings. She wants to count the number of such substrings in a given string. Could you help her? A substring is defined as a contiguous sequence of characters within a string. For example, in the string \\"abba\\", there are 6 palindromic substrings: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\". The first and only line of the input contains a non-empty string s, with a length that does not exceed 2000 characters. The string consists only of lowercase Latin letters. Your task is to count the number of distinct palindromic substrings in the given string. Output a single integer which is the number of distinct palindromic substrings. # Example Input: ``` abc ``` Output: ``` 3 ``` Input: ``` aaa ``` Output: ``` 6 ``` # Explanation In the first example, the palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". In the second example, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def count_palindromic_substrings(s): def expand_around_center(left, right): Expand around the center and count palindromic substrings. count = 0 while left >= 0 and right < len(s) and s[left] == s[right]: count += 1 left -= 1 right += 1 return count total_count = 0 for i in range(len(s)): # Count odd-length palindromes centered at i total_count += expand_around_center(i, i) # Count even-length palindromes centered at i and i + 1 total_count += expand_around_center(i, i + 1) return total_count"},{"question":"Alex is participating in a competitive programming contest. He faces a problem where he is given an array of positive integers representing the points scored by each player, and he needs to rearrange the array such that the absolute difference between the points scored by any two consecutive players is as small as possible. You need to help Alex by writing a program to find the permutation of the array that minimizes the maximum absolute difference between the points scored by consecutive players. The first line contains a single integer n (2 ≤ n ≤ 105) — the number of players. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the points scored by each player. Output a single integer — the minimized maximum absolute difference between the points scored by any two consecutive players. For the first sample, if n = 3 and the array is [4, 2, 1], after sorting it to [1, 2, 4], the maximum absolute difference is 2 (between 2 and 4). For the second sample, if n = 5 and the array is [10, 1, 3, 2, 9], after sorting it to [1, 2, 3, 9, 10], the maximum absolute difference is 6 (between 3 and 9).","solution":"def minimize_max_abs_diff(points): Returns the minimized maximum absolute difference between the points scored by any two consecutive players. Parameters: points (list of int): The points scored by each player. Returns: int: The minimized maximum absolute difference. points.sort() max_diff = 0 for i in range(1, len(points)): max_diff = max(max_diff, points[i] - points[i-1]) return max_diff"},{"question":"You are given a grid of dimensions n by m filled with numbers between 1 and 9. You need to find the maximum sum of numbers you can collect if you move according to the following rules: 1. You start at the top-left cell (1,1). 2. You can only move to the right (to cell (i,j+1)) or downwards (to cell (i+1,j)). Write a function that returns the maximum sum of numbers you can collect while moving from the top-left cell to the bottom-right cell (n,m) following the specified rules. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) - the dimensions of the grid. The next n lines each contain m integers, representing the grid. Output a single integer representing the maximum sum of numbers you can collect. **Example:** Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: The path 1 → 3 → 5 → 2 → 1 gives a sum of 12.","solution":"def max_sum_path(grid): n, m = len(grid), len(grid[0]) # Create a dp array with the same dimensions as the grid dp = [[0]*m for _ in range(n)] # Initialize the dp array with the max sums dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Helper function to parse input and provide output def max_sum_path_from_input(n, m, grid_lines): grid = [[int(num) for num in line.split()] for line in grid_lines] return max_sum_path(grid)"},{"question":"Alice is playing a strategy game where she needs to build towers to defend her territory. Her territory is represented as a 1D line segment from point 0 to point L. There are n target points on this line where the enemy will try to attack. Each tower has a range r, meaning it can defend the points from its position to r units to the left and r units to the right. Alice needs to place the minimum number of towers to ensure all target points are defended. Given q queries, each consisting of the length of the line L, the range of the towers r, and the positions of the target points, find the minimum number of towers Alice needs to place for each query. The first line contains one integer q (1 ≤ q ≤ 10^5) — the number of queries. For each query, the first line contains three integers L, n, and r (1 ≤ L ≤ 10^9; 1 ≤ n ≤ 10^5; 1 ≤ r ≤ 10^5) — the length of the line segment, the number of target points, and the range of the towers, respectively. The second line contains n integers xi (0 ≤ xi ≤ L) — the positions of the target points. It is guaranteed that the sum of all n over all queries does not exceed 10^5. For each query, print one integer — the minimum number of towers required to defend all target points. # Example Input: 2 10 3 2 2 4 8 15 4 3 1 5 8 12 Output: 2 3 # Explanation In the first query, Alice can place one tower at position 3 to defend points 2 and 4, and another tower at position 8 to defend point 8. In the second query, Alice can place one tower at position 1 to defend point 1, another tower at position 5 to defend point 5, and the last tower at position 11 to defend points 8 and 12.","solution":"def minimum_towers(L, n, r, target_points): target_points.sort() i = 0 num_towers = 0 while i < n: num_towers += 1 loc = target_points[i] + r while i < n and target_points[i] <= loc: i += 1 loc = target_points[i - 1] + r while i < n and target_points[i] <= loc: i += 1 return num_towers def process_queries(queries): results = [] for L, n, r, target_points in queries: results.append(minimum_towers(L, n, r, target_points)) return results"},{"question":"You are given a string s, a set of replacement rules, and a target string t. Each replacement rule consists of a character in the string s and a list of other characters that it can be replaced with in a single operation. Your task is to determine if it is possible to transform the string s into the string t using any number of replacements according to the given rules. The first line contains the string s (1 ≤ |s| ≤ 100). The second line contains the string t (1 ≤ |t| ≤ 100). The third line contains an integer m (1 ≤ m ≤ 26) — the number of replacement rules. The next m lines each contain a single character followed by a space-separated list of possible characters it can be replaced with. Each character in the list is distinct and all characters are lowercase English letters. Print \\"POSSIBLE\\" (without the quotes) if it is possible to transform s into t using any number of replacements according to the given rules. Otherwise, print \\"IMPOSSIBLE\\" (without the quotes). Example: Input: ab cd 2 a c b d Output: POSSIBLE In this example, you can replace \'a\' with \'c\' and \'b\' with \'d\' to transform \\"ab\\" into \\"cd\\".","solution":"def is_transformation_possible(s, t, rules): from collections import defaultdict, deque if len(s) != len(t): return \\"IMPOSSIBLE\\" # Create a dictionary of rules replacement_dict = defaultdict(set) for rule in rules: key, replacements = rule[0], rule[1:] replacement_dict[key].update(replacements) # BFS to check if transformation from s to t is possible def can_transform(start_char, end_char): if start_char == end_char: return True queue = deque() queue.append(start_char) visited = set() while queue: current = queue.popleft() if current in visited: continue visited.add(current) for neighbor in replacement_dict[current]: if neighbor == end_char: return True if neighbor not in visited: queue.append(neighbor) return False for sc, tc in zip(s, t): if not can_transform(sc, tc): return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\" # Example usage: # s = \\"ab\\" # t = \\"cd\\" # rules = [ # [\'a\', \'c\'], # [\'b\', \'d\'] # ] # print(is_transformation_possible(s, t, rules)) # Output: \\"POSSIBLE\\""},{"question":"Ina is planning a hiking trip on a trail that can be represented as an array of heights. She wants to maximize the difference in height between the starting point and the highest point she reaches during her hike. Ina can start and end her hike at any point on the trail, but she can only move forward (not backward) while hiking. Help Ina determine the maximum difference in height that she can achieve. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of points on the trail. The second line contains n integers hi (1 ≤ hi ≤ 100,000), representing the heights of the points on the trail. Print a single integer, the maximum difference in height Ina can achieve. For example, he can choose a starting point at the beginning of the array, track forward towards a peak in the trail and calculate the difference between the starting and peak points. If the trail is a steadily increasing array, the highest difference is between the start and end points. If the trail has peaks and valleys, the solution must find the optimal start to the highest peak point within the constraints.","solution":"def max_height_difference(n, heights): Returns the maximum difference in height that can be achieved by moving forward on the trail. Parameters: n (int): number of points on the trail heights (list): heights of the points on the trail Returns: int: maximum difference in height min_height = float(\'inf\') max_difference = 0 for height in heights: if height < min_height: min_height = height max_difference = max(max_difference, height - min_height) return max_difference"},{"question":"Alice and Bob are playing a card game with a deck of special cards. Each card has a number written on it, and the deck contains exactly n cards with numbers ranging from 1 to n. The cards are randomly shuffled. The game involves the following steps: 1. Initially, Alice and Bob split the deck into two equal parts, each taking n/2 cards. The first half (first n/2 cards in the shuffled deck) goes to Alice, and the second half goes to Bob. 2. Each player then sorts their half of the deck in ascending order. 3. The game consists of n/2 rounds. In each round, Alice picks the smallest card from her sorted hand and Bob picks the smallest card from his sorted hand. The player with the smaller card wins the round. 4. A player wins the game if they win more rounds than the other player. Given the shuffled deck, determine the winner of the game by simulating the described process. The input contains two lines: - The first line contains a single integer n (2 ≤ n ≤ 1000 and n is always even), the number of cards in the deck. - The second line contains n space-separated integers representing the shuffled deck. Output \\"Alice\\" if Alice wins more rounds, \\"Bob\\" if Bob wins more rounds, or \\"Draw\\" if both win an equal number of rounds. Example: Input: 6 3 1 6 2 5 4 Output: Alice","solution":"def determine_winner(n, deck): Determines the winner of the card game. Parameters: n (int): The number of cards in the deck (always even). deck (list of int): The shuffled deck. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Draw\\" if it\'s a tie. half = n // 2 alice_hand = sorted(deck[:half]) bob_hand = sorted(deck[half:]) alice_score = 0 bob_score = 0 for i in range(half): if alice_hand[i] < bob_hand[i]: alice_score += 1 elif bob_hand[i] < alice_hand[i]: bob_score += 1 if alice_score > bob_score: return \\"Alice\\" elif bob_score > alice_score: return \\"Bob\\" else: return \\"Draw\\""},{"question":"You are given an array of integers where each integer represents the temperature recorded on a particular day. The temperature recordings for \'n\' days are stored in the array `temperatures`. Your task is to find the number of pairs of days (i, j) such that i < j and temperatures[i] > temperatures[j]. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of days. - The second line contains n integers separated by spaces, where each integer represents the temperature on that day. Each temperature is in the range -1000 to 1000. Output: - Print a single integer, the number of pairs (i, j) where i < j and temperatures[i] > temperatures[j]. Example: Input: 5 30 20 25 35 10 Output: 6 Explanation: The pairs of days (i, j) fulfilling the condition are: (1, 2), (1, 3), (1, 5), (2, 5), (3, 5), (4, 5)","solution":"def count_inversion_pairs(temperatures): Returns the number of pairs (i, j) such that i < j and temperatures[i] > temperatures[j]. n = len(temperatures) return merge_sort_and_count(temperatures, 0, n-1) def merge_sort_and_count(arr, left, right): if left >= right: return 0 mid = (left + right) // 2 count = merge_sort_and_count(arr, left, mid) count += merge_sort_and_count(arr, mid+1, right) count += merge_and_count(arr, left, mid, right) return count def merge_and_count(arr, left, mid, right): left_part = arr[left:mid+1] right_part = arr[mid+1:right+1] i = j = 0 k = left count = 0 while i < len(left_part) and j < len(right_part): if left_part[i] <= right_part[j]: arr[k] = left_part[i] i += 1 else: arr[k] = right_part[j] j += 1 count += (mid - i + 1 - left) k += 1 while i < len(left_part): arr[k] = left_part[i] i += 1 k += 1 while j < len(right_part): arr[k] = right_part[j] j += 1 k += 1 return count"},{"question":"Rina is participating in a programming competition. She has an array of n integers and she needs to find a pair of indices (i, j) such that 1 ≤ i < j ≤ n. The task is to maximize the value of (a[j] - a[i]). However, there is a twist: you can reverse up to one subarray (contiguous segment) of the original array. Help Rina by writing a program that finds the maximum value of (a[j] - a[i]) with at most one subarray reversal. The first line of the input contains a single integer n (2 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print the maximum possible value of (a[j] - a[i]) with at most one subarray reversal. For example, for the input: ``` 6 1 2 3 4 5 6 ``` The output should be: ``` 5 ``` For the input: ``` 6 1 3 5 2 4 6 ``` The output should be: ``` 5 ``` In the first example, no subarray reversal is needed, and the maximum difference is 5 (6 - 1). In the second example, reversing the subarray [5, 2, 4] yields [1, 3, 4, 2, 5, 6], and the maximum difference is obtained between 6 and 1, which is also 5.","solution":"def max_difference_with_reverse(arr): n = len(arr) if n < 2: return 0 max_diff = max(arr) - min(arr) # Case without reversal min_elem = arr[0] for j in range(1, n): max_diff = max(max_diff, arr[j] - min_elem) min_elem = min(min_elem, arr[j]) # Case with one reversal for i in range(1, n-1): for j in range(i+1, n): reversed_subarray = arr[:i] + arr[i:j+1][::-1] + arr[j+1:] min_elem = reversed_subarray[0] for k in range(1, n): max_diff = max(max_diff, reversed_subarray[k] - min_elem) min_elem = min(min_elem, reversed_subarray[k]) return max_diff"},{"question":"A blockchain platform utilizes a series of blocks to store transactions. Each block has a fixed size, and transactions cannot be split across blocks. You are given a list of transaction sizes and your task is to determine the minimum number of blocks needed to store all the transactions given the block size. Write a function that takes a list of transaction sizes and an integer representing the block size, and returns the minimum number of blocks required. Function signature: `def min_blocks(transactions: List[int], block_size: int) -> int` # Input 1. The first line contains an integer `t` (1 le t le 100) — the number of test cases. 2. For each test case: - The first line contains two integers n (1 le n le 1000) — the number of transactions, and b (1 le b le 10^6) — the block size. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le b) — the sizes of the transactions. # Output For each test case, print a single integer — the minimum number of blocks needed. # Example Input ``` 2 5 100 50 70 30 20 40 3 200 150 100 50 ``` Output ``` 3 2 ``` In the first test case, you can fit the transactions into blocks as follows: 1. Block 1: 50, 30, 20 (total size 100) 2. Block 2: 70 (total size 70) 3. Block 3: 40 (total size 40) Thus, the minimum number of blocks required is 3. In the second test case: 1. Block 1: 150, 50 (total size 200) 2. Block 2: 100 (total size 100) The minimum number of blocks required is 2.","solution":"from typing import List def min_blocks(transactions: List[int], block_size: int) -> int: Determines the minimum number of blocks needed to store all transactions given the block size. No transactions can be split across blocks. transactions.sort(reverse=True) blocks = 0 current_block_remaining = 0 for transaction in transactions: if transaction > current_block_remaining: blocks += 1 current_block_remaining = block_size - transaction else: current_block_remaining -= transaction return blocks"},{"question":"Valera loves creating new patterns with his color pencils. Recently, he discovered a fascinating way to create a \\"zigzag\\" pattern on a rectangular grid. He wants to draw a zigzag from the top left corner to the bottom right corner. A zigzag pattern on a grid means going diagonally down, but bouncing off the borders of the grid. He needs your help to figure out how the zigzag will look on any given grid. The grid is represented as an n x m matrix filled with the character \'.\', and Valera will mark the zigzag path with the character \'Z\'. Write a program that takes in the dimensions of the grid and outputs a grid with the zigzag pattern drawn. The path should start from the top-left corner (1, 1) and proceed to the bottom-right corner of the grid. When reaching the borders, the pattern should bounce between left and right borders as needed. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100). For example, for n = 4 and m = 5, the output should be: ``` Z.... .Z... ..Z.. ...Z. ``` The input will be provided as described, and the output should be the resulting zigzag grid with \'Z\'.","solution":"def create_zigzag_pattern(n, m): Create a zigzag pattern on an n by m grid. Parameters: n (int): number of rows m (int): number of columns Returns: list of str: grid with the zigzag pattern grid = [[\'.\' for _ in range(m)] for _ in range(n)] for i in range(min(n, m)): grid[i][i] = \'Z\' for i in range(len(grid)): grid[i] = \'\'.join(grid[i]) return grid"},{"question":"You are given an integer array a of length n and an integer k. Each element in the array represents the time it takes to complete a certain task. Your goal is to determine the maximum number of tasks that can be completed within a total time of k. You can choose tasks in any order, but the sum of the times of the chosen tasks must not exceed k. The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the number of tasks and the total time available, respectively. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai is the time required to complete the i-th task. Print a single integer — the maximum number of tasks that can be completed within the given total time k. # Example Input: ``` 5 10 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: You can choose tasks that take 1, 2, 3, and 4 units of time, which sum up to 10. This allows you to complete 4 tasks within the available total time.","solution":"def max_tasks(n, k, a): Determines the maximum number of tasks that can be completed within a total time of k. Parameters: n (int): Number of tasks. k (int): Total time available. a (list of int): List of times each task takes. Returns: int: The maximum number of tasks that can be completed within the total time k. # Sort the tasks by their time requirements (ascending order) a.sort() time_spent = 0 tasks_completed = 0 # Iterate through the sorted times for time in a: if time_spent + time <= k: time_spent += time tasks_completed += 1 else: break return tasks_completed"},{"question":"You are given an array of integers. You are allowed to choose any subarray (consecutive elements) and perform the following operation on it any number of times: Set all the elements of the chosen subarray to their average value (rounded down to the nearest integer). Your goal is to make the resulting array\'s elements as similar as possible. Specifically, you want to minimize the difference between the maximum and minimum elements of the array after performing the operations. You have to find and print the minimum possible value of the difference between the maximum and minimum elements of the resulting array. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), the elements of the array. Output the minimum possible value of the difference between the maximum and minimum elements of the resulting array. For example: Input: 5 4 7 9 3 8 Output: 1 In this example, you can set the elements as follows to minimize the difference: Choose subarray [4, 7, 9] and set each of its elements to 6 (its average value), then choose subarray [3, 8] and set each of its elements to 5 (its average value). The resulting array is [6, 6, 6, 5, 5], and the difference between the maximum and minimum elements is 1.","solution":"def minimize_max_minus_min(n, arr): if n == 1: return 0 arr.sort() min_diff = float(\'inf\') for i in range(1, n): diff = arr[i] - arr[i-1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are a software engineer working on a smart city project. Your current task is to develop a system to efficiently monitor traffic flow at a busy intersection. The intersection has roads coming in from the north, south, east, and west. Each road has a dedicated lane for cars turning left, going straight, and turning right. In order to optimize the traffic light timings, you have been given traffic data for each lane, specifying the number of cars that pass through that lane in a given minute. You need to determine the total number of cars that pass through the intersection for each possible direction combination (straight or turn left/right). Input Format: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of minutes for which the data is collected. - The next n lines each contain twelve integers: North-left, North-straight, North-right, South-left, South-straight, South-right, East-left, East-straight, East-right, West-left, West-straight, West-right. Each integer represents the number of cars that passed through that specific lane in one minute. Output Format: For each minute, print a single line containing three integers separated by spaces: - The total number of cars turning left, - The total number of cars going straight, - The total number of cars turning right. Example: Input: ``` 3 1 3 2 1 4 2 2 6 3 2 5 3 0 2 1 1 3 2 2 1 2 1 1 2 3 4 3 2 3 1 1 2 2 2 3 1 ``` Output: ``` 6 18 10 4 7 7 8 12 7 ``` Explanation: For the first minute, the total number of cars turning left is 1 (N-left) + 1 (S-left) + 2 (E-left) + 2 (W-left) = 6, going straight is 3 (N-straight) + 4 (S-straight) + 6 (E-straight) + 5 (W-straight) = 18, and turning right is 2 (N-right) + 2 (S-right) + 3 (E-right) + 3 (W-right) = 10.","solution":"def total_traffic(n, data): Given the number of minutes and the traffic data for each minute, computes the total number of cars turning left, going straight, and turning right for each minute. n : int : the number of minutes for which the data is collected data : list of lists : traffic data for each minute, each inner list contains twelve integers representing the number of cars in each lane (North-left, North-straight, North-right, South-left, South-straight, South-right, East-left, East-straight, East-right, West-left, West-straight, West-right) Returns: list of tuples : each tuple contains three integers representing the total number of cars turning left, going straight, and turning right for each minute results = [] for i in range(n): minute_data = data[i] total_left = minute_data[0] + minute_data[3] + minute_data[6] + minute_data[9] total_straight = minute_data[1] + minute_data[4] + minute_data[7] + minute_data[10] total_right = minute_data[2] + minute_data[5] + minute_data[8] + minute_data[11] results.append((total_left, total_straight, total_right)) return results"},{"question":"Aria loves collecting stones and arranging them in rows. She has n stones, each of which has an id number from 1 to n. Aria wants to arrange all her n stones into one or more rows such that each row contains stones with consecutive ids. Additionally, the stones must be arranged in a way that each row has stones with exactly k ids, except possibly the last row which might have fewer than k stones. Help Aria determine the number of ways to arrange her n stones into rows. The first line of input contains two integers n and k (1 ≤ n ≤ 10^6, 1 ≤ k ≤ 10^6) — the number of stones Aria has and the number of ids each row should ideally contain. Output a single integer — the number of ways to arrange all the stones into one or more rows under the given conditions. If it\'s not possible to arrange the stones according to the given k, return 0. For example: If input is: ``` 10 3 ``` The output should be: ``` 2 ``` There are two ways: - One way is to have three rows of [1, 2, 3], [4, 5, 6], [7, 8, 9] and one row of [10]. - Another way is to have four rows of [1, 2, 3], [4, 5, 6], [7, 8], and [9, 10]. However, if input is: ``` 8 4 ``` The output should be: ``` 1 ``` There is only one way: - One way is to have two rows of [1, 2, 3, 4] and [5, 6, 7, 8]. If input is: ``` 7 5 ``` The output should be: ``` 0 ``` Because it\'s impossible to arrange 7 stones into rows each containing exactly 5 stones.","solution":"def number_of_ways_to_arrange_stones(n, k): Returns the number of ways to arrange n stones into rows with exactly k ids each, except possibly the last row which might have fewer than k stones. # If k is greater than n, all the stones can fit in one row. if k > n: return 1 if n > 0 else 0 # Calculate how many full rows of k stones we can have full_rows = n // k # If remainder is zero, it means we can have exactly full_rows sets if n % k == 0: return full_rows return full_rows + 1 # It will always be the number of full rows plus one incomplete row"},{"question":"Lara is a fitness enthusiast who enjoys tracking her steps using her fitness tracker. She has collected her daily step counts over the past n days. Lara knows that keeping a consistent increase in her step count can be motivating. She wants to find out the maximum number of consecutive days where her step count strictly increases every day. Given an array of integers where each integer represents Lara\'s step count on a particular day, write an algorithm to determine the length of the longest subarray with strictly increasing step counts. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of days. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), where ai represents the step count on the i-th day. Output a single integer – the length of the longest subarray with strictly increasing step counts. **Examples:** Input: ``` 6 10 20 30 10 40 50 ``` Output: ``` 3 ``` Input: ``` 5 3 3 3 3 3 ``` Output: ``` 1 ``` Input: ``` 8 1 2 3 4 3 4 5 6 ``` Output: ``` 4 ```","solution":"def longest_increasing_subarray(n, step_counts): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if step_counts[i] > step_counts[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage n = 6 step_counts = [10, 20, 30, 10, 40, 50] print(longest_increasing_subarray(n, step_counts)) # Output should be 3"},{"question":"Alice loves creating unique patterns with stones of different colors. She has a collection of stones of `n` different colors. Alice wants to create designs by placing stones in a straight line. Each design needs to follow these rules: 1. No two stones of the same color can be adjacent. 2. The stones must be placed in such a way that the sequence length is exactly `m`. Alice wants to know the number of valid sequences she can create with these `n` different colors that meet the above criteria. Your task is to help Alice determine how many valid sequences can be formed. The input consists of two integers `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), the number of colors and the length of the sequence respectively. Output a single integer, the number of valid sequences that Alice can create. Example Input: ``` 3 2 ``` Example Output: ``` 6 ``` Explanation: With 3 colors and a sequence length of 2, the possible sequences are: (1,2), (1,3), (2,1), (2,3), (3,1), (3,2), resulting in 6 valid sequences.","solution":"def count_sequences(n, m): Returns the number of valid sequences of length m that can be formed using n colors. # If there is only one slot to fill, we can use any of the `n` colors. if m == 1: return n # If there is only one color, sequences longer than 1 cannot be formed with distinct adjacent colors. if n == 1: return 0 # Caching results for subproblems dp = [[0] * n for _ in range(m)] # Base case: If sequence length is 1, we have exactly \'n\' ways (one for each color). for i in range(n): dp[0][i] = 1 # Fill the dp table for length in range(1, m): for color in range(n): dp[length][color] = sum(dp[length-1][other_color] for other_color in range(n) if other_color != color) # Total valid sequences of length \'m\' return sum(dp[m-1]) # Example usage print(count_sequences(3, 2)) # Output should be 6"},{"question":"You are given a string `s` containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. A string is considered balanced if parentheses, brackets, and braces are properly nested and matched. For example, the strings \\"()[]{}\\", \\"{[()]}\\", and \\"{}\\" are balanced while \\"([)]\\", \\"(((\\", and \\"}{\\") are not balanced. Write a function `isBalanced(s)` that takes a string `s` as input and returns `True` if the string is balanced and `False` otherwise. Function signature: ```python def isBalanced(s: str) -> bool: ``` # Input: - A string `s` of length between 1 and 100,000 containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Output: - Return `True` if the string is balanced, and `False` otherwise. # Examples: ```python isBalanced(\\"()[]{}\\") -> True isBalanced(\\"{[()]}\\") -> True isBalanced(\\"([)]\\") -> False isBalanced(\\"(((\\") -> False isBalanced(\\"}\\") -> False ``` # Constraints: - The function should have a time complexity of O(n), where n is the length of the string `s`. - Use a stack to ensure a linear time solution.","solution":"def isBalanced(s: str) -> bool: stack = [] matching_brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_brackets.values(): stack.append(char) elif char in matching_brackets.keys(): if stack == [] or stack.pop() != matching_brackets[char]: return False else: return False return stack == []"},{"question":"There are n cities in a country, and they are connected by m bidirectional roads. Each road connects two cities and has an associated travel cost. Some cities are special cities, which means they have a crucial role in the administration and economy of the country. The President wants to minimize the cost of travel between any two special cities. More specifically, he wants to know the smallest possible maximum travel cost among any two special cities. Write a program to determine the minimum possible maximum travel cost between any two special cities. The first line of input contains three integers n, m, and k (1 ≤ k ≤ n ≤ 500, 0 ≤ m ≤ 10000) — the number of cities, the number of roads, and the number of special cities, respectively. The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000), meaning there is a road connecting city u and city v with travel cost c. The next line contains k integers, which are the indices of special cities. Output a single integer, the minimum possible maximum travel cost between any two special cities. If it is impossible to travel between any pair of special cities, output -1. Example: Input: 5 6 3 1 2 3 2 3 4 3 4 2 1 4 6 2 5 5 3 5 1 2 3 5 Output: 4 Explanation: Among the three special cities 2, 3, and 5, the travel costs are: - Between 2 and 3: 4 - Between 2 and 5: 5 (direct), or 8 (via 3) - Between 3 and 5: 1 The smallest possible maximum travel cost among any two special cities is 4 (between 2 and 3).","solution":"import heapq def minimal_maximum_travel_cost(n, m, k, roads, special_cities): def dijkstra(start, graph): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist graph = {i: [] for i in range(1, n+1)} for u, v, c in roads: graph[u].append((v, c)) graph[v].append((u, c)) min_max_cost = float(\'inf\') for city in special_cities: dist = dijkstra(city, graph) max_cost = 0 for other_city in special_cities: if other_city != city: if dist[other_city] == float(\'inf\'): return -1 max_cost = max(max_cost, dist[other_city]) min_max_cost = min(min_max_cost, max_cost) return min_max_cost"},{"question":"Alice and Bob are playing a game with a binary string of length n. The game goes as follows: - Alice starts the game. - In each turn, a player selects a non-empty substring of the binary string and flips all bits in the substring (0 becomes 1 and 1 becomes 0). - The player loses if the entire string becomes all zeroes after their turn. Both players play optimally and always choose a move that will maximize their chances of winning. Given an initial binary string, your task is to determine the winner of the game if both players play optimally. Print \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. # Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the binary string. The second line contains a binary string of length n. # Output Print a single line containing \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. # Example Input ``` 5 11001 ``` Output ``` Alice ``` Input ``` 3 000 ``` Output ``` Bob ``` # Note In the first example, Alice can flip the first two characters \\"11\\" to \\"00\\", leaving \\"00001\\". Bob has no move that can prevent Alice from making the entire string \\"00000\\" in the next turn. Hence, Alice wins. In the second example, the string is already all zeroes, so Bob wins as Alice cannot make a winning move.","solution":"def determine_winner(n, binary_string): Determines the winner of the game given the initial binary string. Parameters: n (int): Length of the binary string. binary_string (str): The initial binary string. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. if binary_string.count(\'1\') == 0: return \\"Bob\\" return \\"Alice\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has a value associated with it. Your task is to determine if there exists a cycle in the graph such that the sum of the values of the vertices in the cycle is even. The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 times 10^5). The second line contains n integers v_1, v_2, ldots, v_n (0 leq v_i leq 10^9), where v_i is the value of the i-th vertex. Each of the following m lines contains two integers u and v (1 leq u, v leq n, u neq v), meaning that there is an edge between vertices u and v. Print \\"YES\\" if there exists a cycle with an even sum of vertex values; otherwise, print \\"NO\\". # Example: Input: ``` 5 5 1 2 3 4 5 1 2 2 3 3 4 4 5 5 1 ``` Output: ``` YES ``` Input: ``` 3 2 1 1 1 1 2 2 3 ``` Output: ``` NO ```","solution":"def has_even_sum_cycle(n, m, values, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: u -= 1 v -= 1 graph[u].append(v) graph[v].append(u) visited = [False] * n parent = [-1] * n def bfs(start): queue = deque([(start, 0)]) # (node, current_sum) visited[start] = True while queue: u, curr_sum = queue.popleft() for v in graph[u]: if not visited[v]: parent[v] = u visitSum = (curr_sum + values[v]) % 2 queue.append((v, visitSum)) visited[v] = True elif parent[u] != v: if (curr_sum + values[v]) % 2 == 0: return True return False for i in range(n): if not visited[i]: if bfs(i): return \\"YES\\" return \\"NO\\" # To test the function: if __name__ == \\"__main__\\": n = 5 m = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)] print(has_even_sum_cycle(n, m, values, edges)) # Output should be \\"YES\\" n = 3 m = 2 values = [1, 1, 1] edges = [(1, 2), (2, 3)] print(has_even_sum_cycle(n, m, values, edges)) # Output should be \\"NO\\""},{"question":"Cedric the gardener has a rectangular grid garden with dimensions n × m, divided into cells of size 1 × 1. Each cell can contain either a plant or be empty. He wants to water all the plants in the garden, but he only has a limited supply of water. Cedric can water the plants by using a watering can with infinite capacity. To water the plants, he needs to irrigate subgrids of different sizes within the garden, but he wants to minimize the number of subgrid irrigations to conserve water. A subgrid is defined by its top-left and bottom-right corners, and it covers all cells within this rectangle. Each subgrid irrigation operation will water all plants within that subgrid. Cedric can choose any number of such subgrid irrigation operations as long as each plant in the garden is watered by at least one operation. Cedric needs your help to determine the minimum number of subgrid irrigation operations required to water all plants in the garden. The first line contains two integers n and m (1 ≤ n, m ≤ 2000) — the number of rows and columns of the garden, respectively. The next n lines contain m characters each. Each character is either \'.\' (a cell without a plant) or \'*\' (a cell with a plant). Output a single integer — the minimum number of subgrid irrigation operations needed to water all plants in the garden. # Example Input: ``` 4 5 .*..* ****. .*... ...*. ``` Output: ``` 3 ``` In this example, Cedric can use three subgrid irrigations as follows: 1. Irrigate the subgrid from (1, 2) to (2, 5) which waters the plants in the first two rows except the first column. 2. Irrigate the subgrid from (3, 2) to (3, 2) which waters the single plant in the third row, second column. 3. Irrigate the subgrid from (4, 4) to (4, 4) which waters the single plant in the fourth row, fourth column.","solution":"def min_subgrid_irrigations(n, m, garden): visited = [[False] * m for _ in range(n)] def bfs(row, col): from collections import deque q = deque([(row, col)]) visited[row][col] = True while q: r, c = q.popleft() for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and garden[nr][nc] == \'*\': visited[nr][nc] = True q.append((nr, nc)) count = 0 for i in range(n): for j in range(m): if garden[i][j] == \'*\' and not visited[i][j]: bfs(i, j) count += 1 return count"},{"question":"John is a software engineer who loves challenges. He has a particular interest in analyzing and optimizing algorithms. One day, he stumbled upon a problem related to sorting strings. To make it interesting, he decided to sort an array of strings not just lexicographically, but by a more complex criterion: First by the length of the strings (shorter strings come first), and then by their natural lexicographic order. Your task is to help John implement a function that takes an array of strings as input and returns the array sorted by the described criteria. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of strings. - The following `n` lines contain the strings themselves. Each string consists only of lowercase English letters and its length does not exceed 100. # Output: - Output the strings sorted first by length and then lexicographically. # Example: Input: ``` 5 banana apple pear kiwi plum ``` Output: ``` kiwi pear plum apple banana ``` # Note: In the example, \\"kiwi\\" (length 4) comes before \\"pear\\" and \\"plum\\" (length 4 as well) because \\"kiwi\\" is lexicographically smaller than \\"pear\\" and \\"plum\\". Subsequently, \\"apple\\" and \\"banana\\" follow, sorted by their lengths and then lexicographically.","solution":"def sort_strings(strings): Sorts an array of strings first by their length and then lexicographically. Args: strings (list of str): List of strings to be sorted. Returns: list of str: Sorted list of strings. return sorted(strings, key=lambda x: (len(x), x))"},{"question":"In an ancient kingdom, there lies a rectangular treasure map of size n × m grid. The map contains various symbols, and you need to find if the map has hidden paths formed by these symbols. A hidden path is defined as a sequence of identical symbols occupying adjacent cells in the grid either horizontally or vertically, but not diagonally. Each cell in the grid can contain any character (be it a digit, a letter, or a special character). The task is to determine the length of the longest hidden path of identical symbols on the map. The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the treasure map. Each of the next n lines contains a string of m characters representing the treasure map. Output a single integer – the length of the longest hidden path of identical symbols in the map. **Example 1:** Input: ``` 3 4 aaaa azzz aaaa ``` Output: ``` 4 ``` **Example 2:** Input: ``` 4 4 abcd bcda cdab dabc ``` Output: ``` 1 ``` **Explanation:** In Example 1, the symbol \'a\' appears in a sequence of four horizontally adjacent cells. Thus, the longest hidden path is 4. In Example 2, there are no sequences of adjacent identical symbols longer than 1. Therefore, the longest hidden path is 1.","solution":"def find_longest_path(n, m, treasure_map): Given dimensions of the treasure map and the map itself, returns the length of the longest hidden path of identical symbols. longest_path = 1 def check_path_length(row, col, symbol): Helper function to find the horizontal and vertical longest path lengths from given start # Check horizontally horizontal_length = 1 for j in range(col + 1, m): if treasure_map[row][j] == symbol: horizontal_length += 1 else: break # Check vertically vertical_length = 1 for i in range(row + 1, n): if treasure_map[i][col] == symbol: vertical_length += 1 else: break return max(horizontal_length, vertical_length) for i in range(n): for j in range(m): current_symbol = treasure_map[i][j] path_length = check_path_length(i, j, current_symbol) longest_path = max(longest_path, path_length) return longest_path"},{"question":"Imagine you are part of the development team for a popular online multiplayer game. Your task is to implement a feature that matches players into teams based on their skill levels. The game categorizes players into skill levels represented by integers from 1 to 100, inclusive. The skill level of each player is stored in a list. Given a list of players, you need to form balanced teams such that the sum of the skill levels of the players in each team is approximately the same. Each team must have exactly three players. If it is impossible to form one or more teams, return -1. Input: - The first line contains an integer n (3 ≤ n ≤ 10^5) — the total number of players. - The second line contains n integers representing the skill levels of the players. Output: - Print the number of teams that can be formed. - Print the indices of players in each team in the format shown in the example. If multiple solutions exist, any of them will be accepted. Example: Input: 6 10 20 30 40 50 60 Output: 2 1 2 3 4 5 6","solution":"def form_teams(player_count, skill_levels): Returns the number of teams that can be formed and the indices of players in each team. Parameters: player_count: int - The total number of players. skill_levels: List[int] - The skill levels of the players. Returns: result: List - A list containing the number of teams and their respective player indices. If teams cannot be formed, returns -1. if player_count % 3 != 0: return -1 skill_levels_with_indices = [(skill, index) for index, skill in enumerate(skill_levels, start=1)] skill_levels_with_indices.sort() teams = [] for i in range(0, player_count, 3): team = skill_levels_with_indices[i:i+3] teams.append([player[1] for player in team]) return [len(teams)] + teams def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) skills = list(map(int, data[1:])) result = form_teams(n, skills) if result == -1: print(result) else: print(result[0]) for team in result[1:]: print(\\" \\".join(map(str, team)))"},{"question":"Arthur is a software engineer who loves puzzles. To pass his leisure time, he has decided to create a special sequence of numbers based on a peculiar property he recently discovered. Arthur defines a sequence as \\"beautiful\\" if each number in the sequence is either divisible by `a` or `b` but not both. Now, he wants to generate such a sequence of length `n`. Given two integers `a` and `b`, and the length of the sequence `n`, help Arthur generate the beautiful sequence and ensure its correctness. Write a function `generate_beautiful_sequence(a, b, n)` that takes three integers `a`, `b`, and `n` and returns a list of the first `n` numbers in the beautiful sequence. # Input - The first line contains three integers `a`, `b` and `n` (1 ≤ a, b ≤ 10^4, 1 ≤ n ≤ 10^6). # Output - Print the sequence of `n` beautiful numbers in a single line separated by spaces. # Example Input: ``` 3 5 10 ``` Output: ``` 3 5 6 9 10 12 18 20 21 24 ``` # Explanation The output sequence consists of numbers that are divisible either by 3 or 5 but not by both: - 3, 5, 6, 9, 10, 12, 18, 20, 21, 24. Your task is to write the function and ensure it outputs the correct sequence within the provided constraints.","solution":"def generate_beautiful_sequence(a, b, n): Generates a sequence of n numbers that are either divisible by a or b but not both. sequence = [] num = 1 while len(sequence) < n: if (num % a == 0) ^ (num % b == 0): sequence.append(num) num += 1 return sequence"},{"question":"You are given an array of positive integers where each integer represents the maximum number of steps you can jump forward from that position. The goal is to determine the minimum number of jumps required to reach the end of the array starting from the beginning. If it is not possible to reach the end of the array, return -1. # Input - The first line contains an integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. - The first line of each test case contains an integer `n` (1 ≤ `n` ≤ 1000) — the size of the array. - The second line of each test case contains `n` space-separated integers — the elements of the array. # Output For each test case, print a single integer — the minimum number of jumps to reach the end of the array, or -1 if it is not possible. # Example Input ``` 2 5 2 3 1 1 4 5 3 2 1 0 4 ``` Output ``` 2 -1 ``` # Explanation In the first test case, the optimal sequence of jumps is 2 -> 3 -> 4, which requires 2 jumps. In the second test case, it is not possible to reach the end of the array starting from the beginning, so the output is -1.","solution":"def min_jumps_to_end(arr): n = len(arr) if n == 1: return 0 max_reach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1 def solve_multiple_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_jumps_to_end(arr)) return results"},{"question":"Anna recently joined a robotics club and decided to program a robot to move around a grid. The robot starts at the origin (0, 0) on an infinite grid and obeys a sequence of commands to move. Each command is one of four possible directions: \'L\' (left), \'R\' (right), \'U\' (up), and \'D\' (down). Each command makes the robot move one unit in the corresponding direction. Anna wants to know the robot\'s final coordinates after executing all the commands. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of commands. The second line contains a string of n characters representing the sequence of commands. Output the coordinates of the robot\'s final position as two space-separated integers. Example input: 5 RRUUD Example output: 2 2 In the sample, starting from the origin (0, 0), the robot moves right twice, then up twice, and finally down once, ending at the coordinates (2, 1).","solution":"def final_coordinates(n, commands): Returns the final coordinates of the robot after executing commands. Parameters: n (int): the number of commands commands (str): a string of n characters representing the sequence of commands Returns: tuple: final coordinates of the robot as (x, y) x, y = 0, 0 for command in commands: if command == \'L\': x -= 1 elif command == \'R\': x += 1 elif command == \'U\': y += 1 elif command == \'D\': y -= 1 return x, y"},{"question":"You are given two arrays of integers, `arr1` and `arr2`, each containing `n` elements. You need to determine if `arr2` is a rotated version of `arr1`. A rotated version means that elements of `arr1` can be shifted in a circular manner to get `arr2`. For example, if `arr1 = [1, 2, 3, 4, 5]` and `arr2 = [3, 4, 5, 1, 2]`, `arr2` is a rotated version of `arr1` because rotating `arr1` by 2 positions to the right gives `arr2`. Similarly, if `arr1 = [7, 8, 9]` and `arr2 = [9, 7, 8]`, `arr2` is a rotated version of `arr1`. Your task is to write a function `is_rotated_version(arr1, arr2)` that determines if `arr2` is a rotated version of `arr1`. # Input - Two arrays of integers `arr1` and `arr2`, each of length `n` (`1 ≤ n ≤ 1000`). # Output - Return `True` if `arr2` is a rotated version of `arr1`, otherwise return `False`. # Example ```python def is_rotated_version(arr1, arr2): # Your implementation here # Example 1 arr1 = [1, 2, 3, 4, 5] arr2 = [3, 4, 5, 1, 2] print(is_rotated_version(arr1, arr2)) # True # Example 2 arr1 = [7, 8, 9] arr2 = [9, 7, 8] print(is_rotated_version(arr1, arr2)) # True # Example 3 arr1 = [1, 2, 3, 4] arr2 = [4, 3, 2, 1] print(is_rotated_version(arr1, arr2)) # False # Example 4 arr1 = [4, 5, 6, 7, 8] arr2 = [5, 6, 7, 8, 4] print(is_rotated_version(arr1, arr2)) # True ``` # Constraints - The arrays `arr1` and `arr2` will always have the same length. - Every element in both arrays is unique.","solution":"def is_rotated_version(arr1, arr2): Determines if arr2 is a rotated version of arr1. if len(arr1) != len(arr2): return False # Concatenate arr1 with itself and check if arr2 is a substring of this new array. combined = arr1 + arr1 n = len(arr1) for i in range(n): # Check if the slice of combined array starting from i with length n matches arr2 if combined[i:i+n] == arr2: return True return False"},{"question":"Oliver is an avid puzzle solver and he recently came across a new challenge that intrigued him. He has a string s consisting of lowercase English letters. Oliver needs to determine the maximum number of distinct substrings of length k that he can find in the string s. A substring is defined as any contiguous sequence of characters within a string. The first line of input contains a single integer k (1 le k le 10^6), the length of substrings to be considered. The second line of input contains the string s (1 le |s| le 10^6) which consists of lowercase English letters. Output a single integer, the maximum number of distinct substrings of length k that can be found in the string s. In the first sample case, Oliver finds that the string \\"abcabc\\" contains the distinct substrings \\"abc\\" and \\"bca\\". In the second sample case, for the string \\"aaaaa\\" and k = 2, the only distinct substring is \\"aa\\". Sample Input 1 3 abcabc Sample Output 1 3 Sample Input 2 2 aaaaa Sample Output 2 1","solution":"def max_distinct_substrings(k, s): Returns the maximum number of distinct substrings of length k that can be found in string s. substrings = set() for i in range(len(s) - k + 1): substring = s[i:i+k] substrings.add(substring) return len(substrings)"},{"question":"Prime Number Permutations: Given a string containing only digits, determine if it is possible to re-arrange the digits in such a way that the resulting number is a prime number. The input string will not contain any leading zeros. For this task, you will be given multiple test cases. For each test case, you need to identify whether or not it\'s possible to permute the digits of the given string to form a prime number. If such a permutation exists, output \\"YES\\". Otherwise, output \\"NO\\". # Input The first line contains an integer T (1 le T le 10^5) — the number of test cases. Each of the next T lines contains a string s (1 ≤ |s| ≤ 18), representing the digits. # Output For each test case, output \\"YES\\" if it is possible to re-arrange the digits to form a prime number, otherwise output \\"NO\\". # Example Input ``` 3 197 123 37 ``` Output ``` YES NO YES ``` # Note In the first test case, you can permute the digits of \\"197\\" to get \\"719\\", which is a prime number. In the second test case, it is impossible to permute the digits of \\"123\\" to get a prime number. In the third test case, \\"37\\" is already a prime number.","solution":"from itertools import permutations def is_prime(num): This function checks if a given number is a prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def can_form_prime(digit_string): This function checks if any permutation of the digit string can form a prime number. for perm in permutations(digit_string): num = int(\'\'.join(perm)) if is_prime(num): return \\"YES\\" return \\"NO\\" def solve(T, digit_strings): This function processes multiple test cases. results = [] for s in digit_strings: results.append(can_form_prime(s)) return results def process_input_output(input_data): This function processes the input and output based on the given specification. lines = input_data.split(\'n\') T = int(lines[0]) digit_strings = lines[1:T + 1] results = solve(T, digit_strings) for result in results: print(result)"},{"question":"You are given an array of integers A of size n, and an integer k. Your task is to determine the maximum sum of any subsequence of length k from this array. The first line of input contains two integers n (1 leq n leq 10^5) and k (1 leq k leq n). The second line contains n integers A_1, A_2, ldots, A_n (-10^9 leq A_i leq 10^9). Print the maximum sum of any subsequence of length k. For example, if the input array is [1, 2, 3, 4, 5] and k = 3, the maximum sum of any 3-element subsequence is 12 (sum of [3, 4, 5]).","solution":"def max_subsequence_sum(n, k, A): Returns the maximum sum of any subsequence of length k from the given array A. Parameters: n (int): The size of the array A k (int): The number of elements in the subsequence A (list): List of integers Returns: int: Maximum sum of any subsequence of length k # Sort the array in descending order A.sort(reverse=True) # Sum the first k elements return sum(A[:k])"},{"question":"You are given a zero-indexed binary array `nums`. A binary array is a sequence of 0s and 1s. You need to find the maximum length of a contiguous subarray with an equal number of 0s and 1s. Write a function `findMaxLength` that takes the binary array `nums` as input and returns an integer representing the maximum length of the contiguous subarray. # Input - `nums`: a list of integers representing the binary array (0s and 1s only). The length of the array will be between 1 and 10^5. # Output Return the maximum length of a contiguous subarray with equal number of 0s and 1s. # Example Example 1 **Input:** `[0, 1, 0, 0, 1, 1, 0]` **Output:** `6` **Explanation:** The contiguous subarray `[0, 1, 0, 0, 1, 1]` has 3 zeros and 3 ones, which is the longest possible subarray with equal number of 0s and 1s. Example 2 **Input:** `[0, 1, 1, 1, 0, 0]` **Output:** `6` **Explanation:** The entire array is the longest subarray with equal number of 0s and 1s. # Constraints - The length of `nums` will be within the range `[1, 10^5]`. - `nums` will only contain 0s and 1s. # Notes: - You may assume that there is at least one zero and one one in the array. - The provided function should run efficiently within the given constraints. # Function Signature ```python def findMaxLength(nums: List[int]) -> int: ```","solution":"def findMaxLength(nums): Returns the maximum length of a contiguous subarray with equal number of 0s and 1s. # Initialize variables to store the result and prefix sum max_length = 0 prefix_sum = 0 # Dictionary to store the first occurrence of a prefix sum sum_indices = {0: -1} for i in range(len(nums)): # Update prefix sum: treat 0 as -1 and 1 as +1 prefix_sum += -1 if nums[i] == 0 else 1 if prefix_sum in sum_indices: # If the prefix sum has been seen before, # calculate length of the subarray max_length = max(max_length, i - sum_indices[prefix_sum]) else: # Store the first occurrence of the prefix sum sum_indices[prefix_sum] = i return max_length"},{"question":"In a parallel universe, you are working in a company called RoboCorp that manufactures robots of varying sizes and capabilities. Each robot is constructed from modular parts, and these parts are stored in a warehouse as coded strings. The company wants to ensure that certain parts are not used together due to compatibility issues. However, RoboCorp does not currently have a system that automatically checks these compatibility issues. Your task is to write a program that determines if a given set of parts can be assembled without any compatibility conflicts. Each part is represented by an uppercase string of length between 1 and 10, and some parts also have a list of incompatible parts. Two parts are incompatible if they both appear together in any combination. The first line of input contains an integer n (1 ≤ n ≤ 50) — the number of parts. The next n lines each contain a string that represents a part, followed by an integer m (0 ≤ m ≤ 50) representing the number of parts that are incompatible with this part. If m > 0, the next m strings on the same line indicate the parts that are incompatible with the current part. Finally, the last line contains an integer k (1 ≤ k ≤ n) followed by k strings — the set of parts available for assembly. Print \\"YES\\" if the set of parts can be assembled without any incompatible parts together, otherwise print \\"NO\\". For example: Input: 4 A 1 B B 1 A C 0 D 2 A B 3 A C D Output: NO In this example, parts \\"A\\" and \\"D\\" are incompatible, and both are included in the set of available parts, hence the answer is \\"NO\\".","solution":"def can_assemble(parts_info, available_parts): Determines if the given set of parts can be assembled without compatibility issues. Parameters: parts_info: List of tuples where each tuple contains a part and its incompatible parts available_parts: List of parts to be assembled Returns: str: \\"YES\\" if assembly is possible without any incompatible parts, otherwise \\"NO\\" incompatible_dict = {} for part_info in parts_info: part, *incompatibles = part_info.split() incompatible_dict[part] = set(incompatibles) for i, part in enumerate(available_parts): if part in incompatible_dict: for incompatible_part in incompatible_dict[part]: if incompatible_part in available_parts: return \\"NO\\" return \\"YES\\" def parse_input(input_string): Parses the input string into parts_info and available_parts. Parameters: input_string: str Returns: tuple: (parts_info, available_parts) lines = input_string.strip().split(\'n\') n = int(lines[0]) parts_info = [] for i in range(1, n + 1): parts_info.append(lines[i]) k_line = lines[n + 1].split() k = int(k_line[0]) available_parts = k_line[1:] return parts_info, available_parts # Example Input input_string = 4 A 1 B B 1 A C 0 D 2 A B 3 A C D # Parse Example Input parts_info, available_parts = parse_input(input_string) # Check and Print Result print(can_assemble(parts_info, available_parts))"},{"question":"You are given an array of integers representing the scores of contestants in a competition. Your task is to determine the maximum difference between the scores of any two contestants, considering that some scores may be negative. The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of contestants. - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), where ai represents the score of the i-th contestant. You need to write a program that outputs a single integer — the maximum difference between the scores of any two contestants. **Example:** Input: ``` 5 -1 2 3 -4 5 ``` Output: ``` 9 ``` **Explanation:** In this example, the largest difference is between the highest score (5) and the lowest score (-4), which results in a difference of 5 - (-4) = 9.","solution":"def max_score_difference(n, scores): Returns the maximum difference between any two contestant scores. Parameters: n (int): Number of contestants scores (list of int): List of scores of contestants Returns: int: The maximum difference between any two scores max_score = max(scores) min_score = min(scores) return max_score - min_score"},{"question":"John has a rectangular garden with dimensions `m` by `n` (1 ≤ m, n ≤ 10^3). He wants to cover the entire garden with square tiles of side length `s` (1 ≤ s ≤ min(m, n)). However, the tiles cannot be cut and must be placed entirely within the garden\'s borders. Each tile must be aligned with the garden’s sides, meaning no diagonal placements or overhanging pieces are allowed. The goal is to find the number of tiles `k` required to cover as much of the garden as possible without exceeding its boundaries. If it\'s impossible to cover the entire garden with the given size of tiles, determine the maximum possible area that can be covered. The first line contains three positive integers m, n, and s. Output one line: - The number of tiles required to cover as much of the garden as possible. # Example Input: ``` 8 6 3 ``` Output: ``` 6 ``` Explanation: John can place two rows of three tiles each, covering an area of 6 * 3 = 18 units² (* 3 = 54 units² of the garden).","solution":"def number_of_tiles(m, n, s): Returns the maximum number of s x s tiles that can fit in an m x n garden. tiles_along_m = m // s tiles_along_n = n // s total_tiles = tiles_along_m * tiles_along_n return total_tiles # Example usage m, n, s = 8, 6, 3 print(number_of_tiles(m, n, s)) # Output: 6"},{"question":"You are given a grid of dimensions n times m consisting of integers. Find the maximum sum of any subgrid (subrectangle) within the grid. A subgrid can be any contiguous rectangular section of the grid, including the entire grid itself. # Input The first line contains two integers n and m (1 leq n, m leq 500) — the number of rows and columns in the grid. Each of the next n lines contains m integers a_{ij} (-10^9 leq a_{ij} leq 10^9) representing the grid. # Output Print a single integer — the maximum sum of any subgrid. # Example Input ``` 3 3 1 -2 3 -4 5 -6 7 -8 9 ``` Output ``` 9 ``` Explanation In this example, the subgrid containing only the element 9 has the maximum sum. # Note To solve this problem efficiently, consider using techniques like Kadane\'s algorithm extended to 2D arrays.","solution":"def maximum_sum_subgrid(n, m, grid): Function to find the maximum sum of any subgrid in a given n x m grid. Uses Kadane\'s algorithm extended to 2D arrays. max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): # Add current column elements to temp array for i in range(n): temp[i] += grid[i][right] # Apply Kadane\'s algorithm on temp array current_max = temp[0] best_max = temp[0] for i in range(1, n): current_max = max(temp[i], current_max + temp[i]) if current_max > best_max: best_max = current_max # Update global maximum if best_max > max_sum: max_sum = best_max return max_sum"},{"question":"Given a binary tree where each node contains an integer value, write a program that calculates the sum of all nodes with even-valued grandparents. A node\'s grandparent is the parent of its parent - if the parent or grandparent does not exist, their values are not considered. The input consists of a description of the binary tree. The first line contains a single integer n (1 ≤ n ≤ 105) - the number of nodes in the tree. Each of the next n lines contains three integers ai, li and ri (0 ≤ ai ≤ 109, 0 ≤ li, ri ≤ n), where ai is the value of the i-th node, li is the index of the left child and ri is the index of the right child. If a node doesn\'t have a left or right child, the corresponding value will be 0. Print the sum of all node values that have even-valued grandparents. For example, let\'s assume the binary tree is given by the following input: ``` 5 2 2 3 6 4 5 8 0 0 1 0 0 7 0 0 ``` The output should be a single integer which is the sum of all nodes with even-valued grandparents. ``` s = sum of node values with even-valued grandparents print(s) ``` In this example, the tree structure is: ``` 2 / 6 8 / 1 7 ``` The sum of nodes with even-valued grandparents (6 and 8) is 8 (only node 8 has an even-valued grandparent which is 2). Therefore, the output will be: ``` 8 ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(n, nodes_info): nodes = [None] * (n + 1) for i in range(1, n + 1): if nodes[i] is None: nodes[i] = TreeNode(nodes_info[i - 1][0]) value, left_index, right_index = nodes_info[i - 1] if left_index != 0: nodes[left_index] = TreeNode(nodes_info[left_index - 1][0]) nodes[i].left = nodes[left_index] if right_index != 0: nodes[right_index] = TreeNode(nodes_info[right_index - 1][0]) nodes[i].right = nodes[right_index] return nodes[1] def sum_even_grandparent(root): def dfs(node, parent, grandparent): if node is None: return 0 sum_grandchildren = 0 if grandparent and grandparent.value % 2 == 0: sum_grandchildren += node.value sum_grandchildren += dfs(node.left, node, parent) sum_grandchildren += dfs(node.right, node, parent) return sum_grandchildren return dfs(root, None, None) # Process input and call the functions def process_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) nodes_info = [] for i in range(1, n + 1): ai, li, ri = map(int, input_lines[i].split()) nodes_info.append((ai, li, ri)) root = build_tree(n, nodes_info) return sum_even_grandparent(root)"},{"question":"A prestigious coding competition has n participants. Each participant has a unique skill rating represented by an integer. During the competition, each participant competes in exactly one head-to-head match against another participant. The matchups are chosen arbitrarily, but each participant must compete exactly once. For each match, the participant with the higher skill rating wins and the other loses. If both participants have the same skill rating, the match is drawn. The overall score of the competition is the sum of the skill ratings of all the winning participants across all matches. Given the skill ratings of all participants, your task is to determine the maximum possible overall score of the competition. The first line contains a single integer n (2 ≤ n ≤ 100) — the number of participants (n is even). The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000) — the skill ratings of the participants. Output a single integer — the maximum possible overall score of the competition. Example: Input: 4 4 7 2 6 Output: 13 Explanation: The optimal matchups would be: - Participant with skill rating 7 against participant with skill rating 2: 7 wins - Participant with skill rating 6 against participant with skill rating 4: 6 wins The overall score would be 7 + 6 = 13.","solution":"def max_score(n, skill_ratings): Returns the maximum possible overall score of the competition. Parameters: n (int): Number of participants (even number between 2 and 100). skill_ratings (list): A list of integers representing the skill ratings of each participant. Returns: int: Maximum possible overall score of the competition. # Sort skills in descending order to maximize score skill_ratings.sort(reverse=True) # The maximum score is obtained by summing the first half of the sorted ratings max_score = sum(skill_ratings[:n//2]) return max_score"},{"question":"You are given an array of integers, where each integer represents the number of apples in a crate in a row of crates. You need to find the length of the longest subarray such that the average number of apples in that subarray is greater than or equal to a given threshold T. The first line of input contains two integers n and T (1 ≤ n ≤ 100,000, 1 ≤ T ≤ 1,000,000) — the number of crates and the threshold number of apples, respectively. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the number of apples in each crate. Output the length of the longest subarray where the average number of apples is greater than or equal to T. If no such subarray exists, output 0. **Example:** Input: ``` 5 4 1 3 5 7 9 ``` Output: ``` 3 ``` Explanation: In the given example, the longest subarray with an average number of apples greater than or equal to 4 is `[5, 7, 9]`, which has a length of 3.","solution":"def longest_subarray_with_average_at_least_T(n, T, apples): left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += apples[right] while left <= right and current_sum < T * (right - left + 1): current_sum -= apples[left] left += 1 if current_sum >= T * (right - left + 1): max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a directed graph with n vertices and m edges, where each edge has a weight. You need to determine the shortest path from a source vertex to all other vertices. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of vertices and the number of edges. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a directed edge from vertex u to vertex v with weight w. The last line contains a single integer s (1 ≤ s ≤ n), the source vertex. Output n lines. For each vertex i (1 ≤ i ≤ n), output the shortest path from the source vertex s to vertex i. If vertex i is unreachable from the source vertex, output -1 instead. Here\'s the sample input and output for clarity: Input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 ``` Output: ``` 0 2 3 9 6 ``` Explanation: - The shortest path from vertex 1 to vertex 1 is 0 because it\'s the source vertex. - The shortest path from vertex 1 to vertex 2 is 2 (1 -> 2). - The shortest path from vertex 1 to vertex 3 is 3 (1 -> 2 -> 3). - The shortest path from vertex 1 to vertex 4 is 9 (1 -> 2 -> 4). - The shortest path from vertex 1 to vertex 5 is 6 (1 -> 2 -> 3 -> 5).","solution":"import heapq import sys from collections import defaultdict, deque def shortest_paths_from_source(n, m, edges, s): graph = defaultdict(list) for u, v, w in edges: graph[u].append((w, v)) distances = {i: sys.maxsize for i in range(1, n + 1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for weight, neighbor in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(1, n + 1): if distances[i] == sys.maxsize: result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given a binary string s of length n (1 le n le 10^5). A binary string is a string consisting of only \'0\'s and \'1\'s. Your task is to find the minimum number of contiguous substrings needed to partition the given string such that each contiguous substring contains at least one \'1\'. For example, if the given string is \\"110100111\\", you can split it into [\\"11\\", \\"0100\\", \\"111\\"], where each substring contains at least one \'1\'. The first line contains an integer t (1 le t le 100) — the number of test cases. Then, t test cases follow. Each test case consists of one line containing the binary string s. For each test case, print the minimum number of contiguous substrings needed to partition the string as described. Note that if the entire string consists of \'0\'s, the output should be 0, as no valid partition is possible.","solution":"def min_substrings_with_at_least_one_one(s: str) -> int: Returns the minimum number of contiguous substrings needed to partition the given string such that each contiguous substring contains at least one \'1\'. if \'1\' not in s: return 0 count = 0 in_one_segment = False for char in s: if char == \'1\': if not in_one_segment: count += 1 in_one_segment = True else: in_one_segment = False return count def solve(test_cases): results = [] for s in test_cases: results.append(min_substrings_with_at_least_one_one(s)) return results"},{"question":"A company maintains a database of its employees, each having a unique employee ID and salary. The company wants to increase the salary of exactly \'m\' employees such that the sum of the salaries of the chosen employees is maximized. You have to select the employees and output their ID in ascending order. The first line of input will contain two integers \'n\' and \'m\' (1 <= m <= n <= 10^5), representing the total number of employees and the number of employees whose salary will be increased, respectively. The next \'n\' lines each contain two integers \'ID_i\' (1 <= ID_i <= 10^9) and \'salary_i\' (-10^9 <= salary_i <= 10^9), representing the ID and the current salary of the employees. Print the \'m\' IDs of the employees whose salary sum will be maximized, in ascending order. # Example **Input:** ``` 5 3 1 100 2 200 3 150 4 130 5 160 ``` **Output:** ``` 2 3 5 ``` **Explanation:** Among the employees, selecting the employees with IDs 2, 3, and 5 yields the highest possible sum of salaries (200 + 150 + 160 = 510). Output the selected employee IDs in ascending order (2, 3, 5). **Note:** If there are multiple solutions with the same maximum salary sum, select the one with the smallest lexicographical order of IDs.","solution":"def select_employees(n, m, employees): Select the employees whose sum of salaries will be maximized, and return their IDs in ascending order. Arguments: n -- Total number of employees m -- Number of employees whose salary will be increased employees -- List of tuples where each tuple contains (ID, salary) Returns: List of selected employee IDs in ascending order. # Sort employees by salary in descending order employees.sort(key=lambda x: (-x[1], x[0])) # Select top m employees based on salary selected_employees = employees[:m] # Extract the IDs and sort them in ascending order selected_ids = sorted([employee[0] for employee in selected_employees]) return selected_ids"},{"question":"You are given a rectangular grid of size n x m, where each cell contains a number. Serval is given the task to find the sum of all numbers in a specific subgrid multiple times. The grid is defined by n rows and m columns, and the subgrid is defined by its top-left corner (r1, c1) and its bottom-right corner (r2, c2). Given the grid and multiple queries, write a program to determine the sum of the numbers in the specified subgrid in O(1) time per query after an initial O(nm) preprocessing time. Input format: - The first line contains two integers n (1 <= n <= 1000) and m (1 <= m <= 1000) — the number of rows and columns in the grid. - The next n lines contain m integers each, representing the grid. - The next line contains an integer q (1 <= q <= 10^6) — the number of queries. - Each of the following q lines contains four integers r1, c1, r2, c2 (1 <= r1 <= r2 <= n, 1 <= c1 <= c2 <= m) — the coordinates of the top-left and bottom-right corners of the subgrid, respectively. Output format: - For each query, output the sum of the numbers in the specified subgrid. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output: 12 28 Explanation: 1. The first query asks for the sum of the subgrid from (1,1) to (2,2), which contains numbers 1, 2, 4, and 5. The sum is 1+2+4+5 = 12. 2. The second query asks for the sum of the subgrid from (2,2) to (3,3), which contains numbers 5, 6, 8, and 9. The sum is 5+6+8+9 = 28.","solution":"def preprocess_grid(grid, n, m): Preprocess the grid to create a prefix sum array. prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) return prefix_sum def query_sum(prefix_sum, r1, c1, r2, c2): Calculate the sum of the subgrid using the prefix sum array. return (prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1]) def solve_queries(grid, queries): Process the grid and answer the queries. n = len(grid) m = len(grid[0]) prefix_sum = preprocess_grid(grid, n, m) results = [] for (r1, c1, r2, c2) in queries: result = query_sum(prefix_sum, r1, c1, r2, c2) results.append(result) return results"},{"question":"You are given a string s consisting of lowercase Latin letters. You can apply the following operation any number of times: choose any contiguous substring of s, and reverse the characters in it. Your goal is to check if it is possible to transform the string s into a palindrome using these operations. For example, consider the string \\"aab\\" — you can reverse the substring \\"ab\\" to get the string \\"aba\\", which is a palindrome. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 100) — the string you need to check. For each test case, print \\"YES\\" if it is possible to transform s into a palindrome, and \\"NO\\" otherwise. You may print every letter in any case you want (so, for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\", and \\"YES\\" are all recognized as positive answers). # Example **Input:** ``` 4 aab racecar civic abcdef ``` **Output:** ``` YES YES YES NO ``` In the first test case, you can reverse \\"ab\\" to get \\"aba\\", which is a palindrome. In the second and third test cases, the strings are already palindromes. In the fourth test case, it is impossible to rearrange \\"abcdef\\" into a palindrome.","solution":"def is_palindrome_possible(s): Determine if it is possible to transform the string `s` into a palindrome by reversing any of its substrings. # Count the frequency of each character in the string char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters that have an odd frequency odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # If there is more than 1 character with an odd frequency, it is not possible to form a palindrome return odd_count <= 1 def transform_possible_to_palindrome(test_cases): results = [] for s in test_cases: if is_palindrome_possible(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of n integers a1, a2, ..., an. You can perform the following operation on the sequence as many times as you want: - Choose any two adjacent elements and replace them both with their sum. The goal of this problem is to find the minimum possible value of the largest element after performing any number of such operations. The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Print a single integer, the minimum possible value of the largest element after all the operations. **Example**: ``` Input: 5 1 2 3 4 5 Output: 15 ``` In this example, you can perform the following operations to achieve the minimum possible value of the largest element: 1. Replace 1 and 2 with their sum: [3, 3, 4, 5] 2. Replace 3 and 3 with their sum: [6, 4, 5] 3. Replace 6 and 4 with their sum: [10, 5] 4. Replace 10 and 5 with their sum: [15] Hence, the answer is 15.","solution":"def min_largest_element(n, sequence): Returns the minimum possible value of the largest element after performing the operation on the sequence any number of times. return sum(sequence)"},{"question":"There are n toy cars in a row, and each car can be represented as \'B\' for a blue car, \'R\' for a red car, \'G\' for a green car, and \'?\' for any color car. You are to organize these cars in such a way that we maximize the number of consecutive cars of the same color, without changing the order of the cars. Given a string s of length n, where each character represents a car, find the maximum number of consecutive cars of the same color that can be achieved by replacing each \'?\' with either \'B\', \'R\', or \'G\'. Print the length of the maximum sequence of consecutive cars of the same color. # Input - The first line contains an integer n (1 le n le 200000). - The second line contains a string s of length n consisting of characters \'B\', \'R\', \'G\', and \'?\'. # Output - Print a single integer representing the maximum number of consecutive cars of the same color. # Example Input ``` 7 B?G???G ``` Output ``` 3 ``` In this example: - One possible way to replace \'?\' is to get the sequence \\"BBGGGGG\\". This gives us three consecutive \'G\'s, which is the maximum.","solution":"def max_consecutive_cars(n, s): def count_max_sequence(filled_str): max_sequence = 1 current_sequence = 1 for i in range(1, n): if filled_str[i] == filled_str[i-1]: current_sequence += 1 else: max_sequence = max(max_sequence, current_sequence) current_sequence = 1 max_sequence = max(max_sequence, current_sequence) return max_sequence colors = [\'B\', \'R\', \'G\'] max_length = 0 for color in colors: for i in range(n): if s[i] == \'?\': s = s[:i] + color + s[i+1:] max_length = max(max_length, count_max_sequence(s)) return max_length"},{"question":"Miha loves organizing bowling tournaments. For each tournament, Miha needs to arrange games between participants so that every participant plays with each other exactly once. Each game yields a score to each participant, and Miha needs to track the scores to determine the winner. The problem is to find the participant with the highest total score. Each game is played between two participants and yields a score for each. The score is a positive integer. The input format is as follows: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of participants. - The next n * (n - 1) / 2 lines contain three integers xi, yi, si (1 ≤ xi, yi ≤ n; xi ≠ yi; 1 ≤ si ≤ 10000) — indicating that the game between participant xi and participant yi resulted in a score of si for participant xi and si for participant yi. Print a single line with the index of the participant who has the highest total score. If there are multiple participants with the same highest score, print the one with the smallest index. **Input:** ``` 3 1 2 10 1 3 20 2 3 30 ``` **Output:** ``` 2 ``` Explanation: Participant 1 gets scores 10 and 20 for a total of 30. Participant 2 gets scores 10 and 30 for a total of 40. Participant 3 gets scores 20 and 30 for a total of 50. Therefore, participant 3 wins.","solution":"def find_winner(n, scores): total_scores = [0] * (n + 1) for x, y, s in scores: total_scores[x] += s total_scores[y] += s max_score = max(total_scores) for i in range(1, n + 1): if total_scores[i] == max_score: return i"},{"question":"Nikita has recently started practicing string manipulation problems. He came across a problem where he needs to transform a string using a series of operations. Given a string consisting of lowercase Latin letters, he can perform the following operation any number of times: - Choose any two adjacent characters in the string and if they are equal, remove them from the string. Nikita wants to transform the given string so that it has the minimum possible length using the allowed operations. Your task is to help Nikita by writing a program that finds the minimum possible length of the string after performing the operations. The first line of the input contains one integer t (1 leq t leq 1000) — the number of test cases in the input. Then test cases follow. Each test case consists of one line containing a string s (1 leq |s| leq 1000) — the initial string consisting only of lowercase Latin letters. For each test case, print one integer — the minimum possible length of the string after performing the operations. **Example:** Input: ``` 3 abbac aab abcde ``` Output: ``` 1 1 5 ``` **Explanation:** In the first test case, Nikita can reduce \\"abbac\\" as follows: - \\"abbac\\" => \\"aac\\" (remove \\"bb\\") - \\"aac\\" => \\"c\\" (remove \\"aa\\") So the minimum length is 1. In the second test case, Nikita can reduce \\"aab\\" as follows: - \\"aab\\" => \\"b\\" (remove \\"aa\\") So the minimum length is 1. In the third test case, \\"abcde\\" has no adjacent equal characters to remove, so the minimum length is 5.","solution":"def reduce_string(s): Reduces the string by removing adjacent equal characters. Returns the reduced string. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack) def minimum_length_after_operations(t, test_cases): Accepts the number of test cases and list of strings, and returns the minimum lengths of each string after operations. results = [] for s in test_cases: results.append(reduce_string(s)) return results"},{"question":"A soldier has a map of a battlefield, represented as a grid of size n x m. Each cell in the grid can be either empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The soldier wants to find the shortest path from their starting position to their target position. The soldier can move one cell up, down, left, or right at a time, but cannot move into cells containing obstacles. Given the dimensions of the grid, the grid itself, the coordinates of the starting position, and the coordinates of the target position, your task is to determine the minimum number of moves required for the soldier to reach the target or determine if it is impossible. The input consists of several lines: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the grid. - The following n lines each contain a string of length m where each character is either \'.\' or \'#\', representing the cell types. - The next line contains two integers sx and sy (0 ≤ sx < n, 0 ≤ sy < m) representing the coordinates of the starting position. - The last line contains two integers tx and ty (0 ≤ tx < n, 0 ≤ ty < m) representing the coordinates of the target position. The output should be a single integer representing the minimum number of moves required to reach the target position from the starting position, or -1 if it is impossible. # Example Input: 7 7 ....... .#. .#...#. .#.#.#. .#...#. .#. ....... 0 0 6 6 Output: 12","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, tx, ty): Returns the minimum number of moves required to reach the target position from the starting position in the given grid, or -1 if it is impossible. if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False]*m for _ in range(n)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, distance = queue.popleft() if (x, y) == (tx, ty): return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, distance + 1)) return -1"},{"question":"Given an integer n, generate all valid pairings of n students such that each pair consists of two students with distinct student IDs, and a student cannot be paired with themselves. Each student has a unique integer ID from 1 to n. It is guaranteed that n will be even, so all students can be properly paired. The first line of the input contains a single integer n (2 <= n <= 1000, where n is even). Output all valid pairs of students. Each pair should be represented as a tuple (a, b) where a < b. Each valid pairing of n students should be a unique set of tuples such that every student ID appears exactly once across all pairs. Output all unique pairings, each on a new line, in lexicographical order. # Example Input ``` 4 ``` Output ``` (1, 2), (3, 4) (1, 3), (2, 4) (1, 4), (2, 3) ```","solution":"from itertools import combinations, permutations def generate_pairs(n): Generate all valid pairings of n students. Args: n (int): The number of students, guaranteed to be even. Returns: list of list of tuples: A list containing all unique pairings of student IDs. if n < 2 or n > 1000 or n % 2 != 0: raise ValueError(\\"n must be an even integer between 2 and 1000\\") students = list(range(1, n + 1)) all_combinations = list(combinations(students, 2)) def is_valid_permutation(pairs): seen_students = set() for a, b in pairs: if a in seen_students or b in seen_students: return False seen_students.add(a) seen_students.add(b) return True valid_permutations = set() for perm in permutations(all_combinations, n // 2): if is_valid_permutation(perm): sorted_perm = tuple(sorted(perm)) valid_permutations.add(sorted_perm) valid_pairings = sorted(list(valid_permutations)) return valid_pairings # Example usage n = 4 pairings = generate_pairs(n) for pairing in pairings: print(pairing)"},{"question":"A group of engineers are designing a new type of digital lock. The lock operates on a grid-based system with dimensions n x m, where each cell in the grid has a unique key-value. The lock can be opened by traversing a path such that the sum of the key-values along the path matches a specific target value. You are asked to write a program that determines the maximum length of any path where the sum of the key-values along the path is equal to the given target value. A valid path starts at any cell and can only move to adjacent cells (up, down, left, right) without revisiting any cell. The first line contains three integers n, m, and t (1 ≤ n, m ≤ 100, -10^6 ≤ t ≤ 10^6) — the dimensions of the grid and the target sum. The next n lines each contain m integers representing the key-values of the grid (each integer ranges between -10^6 and 10^6). Output the maximum length of the path that sums up to the target value. If no such path exists, output -1. # Example Input: ``` 3 3 10 1 2 3 4 5 6 7 8 9 ``` Output: ``` 4 ``` Explanation: The path (1,1) → (1,2) → (2,2) → (3,2) has the sum 1 + 2 + 5 + 2 = 10 and length 4, which is the maximum length found. # Note - You may start at any cell in the grid. - You may move in any of the four directions (up, down, left, right). - You cannot revisit any cell in the same path. - Aim to find the longest path that meets the target sum exactly. If multiple paths of the same length exist, output the length anyway.","solution":"def maximum_path_length(n, m, t, grid): def dfs(x, y, target, current_path_length): if not (0 <= x < n and 0 <= y < m) or (x, y) in visited: return key_value = grid[x][y] if key_value > target: return path.append((x, y)) visited.add((x, y)) new_sum = sum(grid[i][j] for i, j in path) if new_sum == target: nonlocal max_length max_length = max(max_length, len(path)) elif new_sum < target: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy dfs(nx, ny, target, current_path_length + 1) path.pop() visited.remove((x, y)) max_length = -1 path = [] for i in range(n): for j in range(m): visited = set() dfs(i, j, t, 0) return max_length"},{"question":"You are given a matrix of size (n times n) filled with non-negative integers. You can traverse the matrix starting from the top-left cell and moving only to the right or downward cell. Your goal is to find the maximum possible sum of values from the top-left to the bottom-right cell of the matrix. The first line of the input contains a single integer (n) ((1 leq n leq 1000)) — the dimension of the matrix. The next (n) lines contain (n) integers each, representing the matrix. Each integer in the matrix is between 0 and 1,000 inclusive. Print a single integer — the maximum possible sum of values you can collect when traveling from the top-left to the bottom-right cell. # Example **Input:** ``` 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 12 ``` **Explanation:** One possible path to achieve the maximum sum is: (1 rightarrow 3 rightarrow 5 rightarrow 2 rightarrow 1 = 12).","solution":"def max_path_sum(matrix): n = len(matrix) if n == 0: return 0 # Create a DP table to store the maximum path sums up to each cell dp = [[0] * n for _ in range(n)] dp[0][0] = matrix[0][0] # Initialize the first row & column of the DP table for i in range(1, n): dp[0][i] = dp[0][i-1] + matrix[0][i] dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the DP table by choosing the max path sum for each cell for i in range(1, n): for j in range(1, n): dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[n-1][n-1] # Sample matrix for example example_matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] # Output the result for the sample matrix print(max_path_sum(example_matrix)) # Output should be 12"},{"question":"A grid of size n × m is given where each cell is either a wall (\'#\') or an empty space (\'.\'). You need to determine the size of the largest square sub-grid that can fit entirely into the given grid without overlapping any walls. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. The next n lines each contain m characters, either \'#\' or \'.\', representing the grid. Print one integer — the size of the largest square sub-grid that contains only empty spaces (\'.\'). # Input Example: ``` 4 5 . . # . . . . . . . # . # . . . . . # . ``` # Output Example: ``` 2 ```","solution":"def largest_square(grid): n = len(grid) m = len(grid[0]) if not grid: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Masha plays a very peculiar game with her friends. They have an array of size n consisting of integers. On each player\'s turn, they choose any subarray and increment each element of the subarray by 1. The goal is to make all the array elements equal. The game ends when all elements of the array are the same, and the player who made the last move wins. Masha starts the game and the players alternate turns. Both players play optimally. Your task is to determine the winner if both players play optimally. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. If Masha wins, print \\"Masha\\", otherwise print \\"Friend\\" (without quotes). # Example: **Input:** ``` 3 1 2 3 ``` **Output:** ``` Masha ``` **Input:** ``` 4 1 1 1 1 ``` **Output:** ``` Friend ``` In the first example, Masha can win by selecting the subarray [2, 3] and incrementing it twice, making the array [3, 3, 3]. In the second example, since all elements are already equal, the friend wins because Masha has no valid move to start with.","solution":"def determine_winner(n, array): Determines the winner (Masha or Friend) of the game given the initial array. Parameters: n (int): The number of elements in the array. array (list of int): The initial array. Returns: str: \'Masha\' if Masha wins, \'Friend\' otherwise. # Determine the number of unique elements in the array unique_elements = len(set(array)) # If all elements are already equal, Friend wins if unique_elements == 1: return \\"Friend\\" else: return \\"Masha\\""},{"question":"Given a sequence of positive integers, your task is to form the longest subsequence such that the sum of the subsequence is an even number. If there are multiple subsequences of the same maximum length, return the one that appeared first in the original sequence. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. The output should consist of two lines. On the first line, print the length of the longest subsequence. On the second line, print the elements of the subsequence. If there are multiple solutions, return the subsequence that appears first in the original sequence. Example input: 6 1 2 3 4 5 6 Example output: 6 1 2 3 4 5 6 Explanation: In this example, the entire sequence is the longest possible subsequence with an even sum (21), since removing any element would change it to an odd sum.","solution":"def longest_even_sum_subsequence(n, sequence): Returns the length of the longest subsequence with an even sum and the subsequence itself. total_sum = sum(sequence) if total_sum % 2 == 0: return n, sequence # If the total sum is odd, we need to remove the smallest odd element for i, num in enumerate(sequence): if num % 2 != 0: modified_sequence = sequence[:i] + sequence[i+1:] return n - 1, modified_sequence # If we cannot find any odd element to remove, return empty as the sequence itself can\'t be even. return 0, [] # Example usage: # n = 6 # sequence = [1, 2, 3, 4, 5, 6] # print(longest_even_sum_subsequence(n, sequence))"},{"question":"You are given an n x m grid where each cell initially contains either a 0 or a 1. You can perform the following operation any number of times: choose any cell and toggle its value (i.e., change a 0 to 1 and a 1 to 0), as well as the values of all cells in the same row and the same column as the chosen cell. Your goal is to achieve a grid where all cells have the same value, either all 0s or all 1s. Determine the minimum number of operations required to accomplish this. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers, either 0 or 1, representing the initial state of each cell in the grid. Output a single integer — the minimum number of toggle operations needed to make all cells in the grid identical. Example: Input: 3 3 1 0 0 0 1 0 0 0 1 Output: 3 In the example, you can make all cells 1 by performing 3 toggle operations: 1. Toggle the cell at (1,1): the grid becomes ``` 0 0 0 1 1 0 1 0 1 ``` 2. Toggle the cell at (2,2): the grid becomes ``` 0 1 0 1 0 0 1 1 1 ``` 3. Toggle the cell at (1,2): the grid becomes ``` 1 0 1 0 1 1 0 0 0 ``` Alternatively, you can make all cells 0 with the same number of operations.","solution":"def min_toggle_operations(grid): n = len(grid) m = len(grid[0]) # Count the number of 1s in each row and each column row_ones = [sum(row) for row in grid] col_ones = [sum(grid[i][j] for i in range(n)) for j in range(m)] # Count total ones in the grid total_ones = sum(row_ones) # Calculate the minimum number of toggle operations needed to make all cells 0 or all cells 1 min_operations = min(total_ones, n * m - total_ones) return min_operations"},{"question":"Given an array of integers representing the heights of a terrain, determine the number of valleys. A valley is defined as a contiguous subarray of integers (height values) that starts and ends at a higher height, dips in the middle, and forms a continuous decline and rise. In other words, a valley is a segment of the terrain where the height strictly decreases to a minimum point and then strictly increases. For example, in the terrain represented by `[5, 3, 1, 2, 4]`, there is one valley `[5, 3, 1, 2, 4]`. The first line of input contains an integer n (3 ≤ n ≤ 2000) — the length of the terrain. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the terrain. Output the number of valleys in the terrain. # Input ``` 5 5 3 1 2 4 ``` # Output ``` 1 ``` # Explanation The terrain `[5, 3, 1, 2, 4]` forms one valley. # Constraints - The input guarantees that the length of the terrain is at least 3, ensuring there is potential for at least one valley to form.","solution":"def count_valleys(terrain): Returns the number of valleys in the given terrain. A valley is a sequence of consecutive heights that strictly decreases to a minimum point and then strictly increases. n = len(terrain) if n < 3: return 0 valleys = 0 i = 1 while i < n - 1: if terrain[i - 1] > terrain[i] < terrain[i + 1]: left = i - 1 while left > 0 and terrain[left] > terrain[left - 1]: left -= 1 right = i + 1 while right < n - 1 and terrain[right] > terrain[right + 1]: right += 1 valleys += 1 i = right # skip to the end of the current valley else: i += 1 return valleys"},{"question":"Peter loves playing with sequences of numbers. One day, he came across a very interesting sequence and decided to pose a problem. Given an integer n (1 ≤ n ≤ 10^6), you need to construct a sequence of integers of length n that satisfies the following properties: 1. Each integer in the sequence should be between 1 and n, inclusive. 2. For every integer k from 1 to n, there should be exactly k numbers in the sequence whose value is divisible by k. Your task is to find and print such a sequence. If there are multiple solutions, you can print any of them. If there\'s no valid sequence, print -1. Input: - The first line of the input contains a single integer n. Output: - If there exists a valid sequence, print n space-separated integers which represent the sequence. - If no such sequence exists, print -1. Example: Input: 4 Output: 1 2 3 4 Explanation: In this sequence: - The number 1 appears once and is divisible by 1. - The number 2 appears twice and is divisible by 1 and 2. - The number 3 appears three times and is divisible by 1, 1, and 3. - The number 4 appears four times and is divisible by 1, 1, 2, and 4. Note: The expected output is just one of the possible valid outputs. Other valid outputs can also be considered correct.","solution":"def generate_sequence(n): Generate a sequence of length n such that for every integer k from 1 to n, there are exactly k numbers in the sequence that are divisible by k. Parameters: n (int): The length of the sequence. Returns: list: A sequence of integers of length n that satisfies the condition, or returns -1 if no such sequence exists. if n == 1: return [1] sequence = [i for i in range(1, n + 1)] return sequence"},{"question":"You are given an array of integers which represents the heights of a skyline. You need to find out the number of buildings that have an unobstructed view of the sunset. A building has an unobstructed view if there is no building to its right that is taller than or equal to it. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) representing the heights of the buildings. Output a single integer — the number of buildings that have an unobstructed view of the sunset. # Examples Example 1 Input: ``` 6 3 7 8 3 6 1 ``` Output: ``` 3 ``` Example 2 Input: ``` 5 4 3 2 1 5 ``` Output: ``` 1 ``` # Explanation In the first example, the buildings with heights 8, 6, and 1 have an unobstructed view of the sunset. Hence, the output is 3. In the second example, only the building with height 5 has an unobstructed view of the sunset. Hence, the output is 1.","solution":"def unobstructed_view_count(buildings): Returns the number of buildings with an unobstructed view of the sunset. Parameters: buildings (list): A list of integers representing the heights of buildings. Returns: int: The number of buildings with an unobstructed view. if not buildings: return 0 max_height = 0 count = 0 # Traverse the list from right to left for height in reversed(buildings): if height > max_height: count += 1 max_height = height return count"},{"question":"Xiang, a software developer, is developing a new algorithm to manage a growing collection of books in his library. Each book has a unique title and is associated with exactly one genre. Xiang wants to group these books by their genres, then within each genre, he wants to sort the books alphabetically by their titles. To implement this, he needs your help to design an efficient algorithm. The input consists of an integer n (1 ≤ n ≤ 10^5), the number of books in the library, followed by n lines. Each line contains the title of a book (a string containing only lowercase English letters and spaces, with a length between 1 and 100 characters), and the genre name (a string containing only lowercase English letters, with a length between 1 and 50 characters). Output the titles of the books, grouped by genre (in any order of genres), and within each genre, the titles sorted alphabetically. # Input ``` n title1 genre1 title2 genre2 ... titlen genren ``` # Output The output should consist of the book titles grouped by genre and sorted alphabetically within each genre. # Example Input ``` 5 harry potter fantasy the hobbit fantasy a brief history of time science a song of ice and fire fantasy the elegant universe science ``` Output ``` a song of ice and fire harry potter the hobbit a brief history of time the elegant universe ``` (Note: The order of different genres doesn\'t matter, but within each genre, the titles must be sorted alphabetically.) # Explanation In the example, there are 5 books with 2 genres: \\"fantasy\\" and \\"science\\". The books are sorted alphabetically within their genres.","solution":"def group_and_sort_books(n, books): Groups books by genre and sorts the titles alphabetically within each genre. Parameters: n (int): number of books books (list of tuple): list containing pairs of (title, genre) Returns: list of str: sorted book titles grouped by genre from collections import defaultdict # Group books by genre genre_dict = defaultdict(list) for title, genre in books: genre_dict[genre].append(title) # Sort each genre\'s book titles alphabetically and collect result sorted_titles = [] for genre in genre_dict: sorted_titles.extend(sorted(genre_dict[genre])) return sorted_titles"},{"question":"You are given a string ( s ) consisting of ( n ) characters where each character is either \'a\', \'b\' or \'c\'. Your task is to find the length of the shortest substring that contains at least one instance of each of the characters \'a\', \'b\', and \'c\'. The input consists of a single line containing the string ( s ) (1 ≤ ( n ) ≤ 100,000). Print a single integer representing the length of the shortest substring that contains at least one instance of each of the characters \'a\', \'b\', and \'c\'. If no such substring exists, print -1. # Examples **Input:** ``` abcabc ``` **Output:** ``` 3 ``` **Explanation:** The substring \\"abc\\" contains at least one \'a\', one \'b\', and one \'c\'. **Input:** ``` aaaaa ``` **Output:** ``` -1 ``` **Explanation:** There is no substring that contains \'b\' or \'c\'. **Input:** ``` abacbc ``` **Output:** ``` 3 ``` **Explanation:** The substring \\"bac\\" is the shortest that contains \'a\', \'b\', and \'c\'.","solution":"def shortest_substring_length(s): Returns the length of the shortest substring that contains at least one instance of each of \'a\', \'b\', and \'c\'. If no such substring exists, returns -1. from collections import defaultdict n = len(s) if n < 3: return -1 # Dictionary to count characters \'a\', \'b\' and \'c\' count = defaultdict(int) min_length = float(\'inf\') left = 0 for right in range(n): count[s[right]] += 1 # Check if the current window contains at least one of each \'a\', \'b\', \'c\' while all(count[char] > 0 for char in \'abc\'): min_length = min(min_length, right - left + 1) count[s[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an array of n integers, where each integer can be either 1 or 0. Your task is to find the maximum length of a contiguous subarray containing equal numbers of 1s and 0s. # Input The first line contains a single integer n (1 leq n leq 200,000) — the number of elements in the array. The second line contains n space-separated integers, each of which is either 1 or 0. # Output Print the maximum length of the contiguous subarray that contains an equal number of 1s and 0s. If no such subarray exists, print 0. # Example Input ``` 8 1 0 0 1 0 1 1 0 ``` Output ``` 8 ``` # Explanation The entire array has equal numbers of 1s and 0s. In this example, every prefix sum until now has a \\"difference value\\" defined as the count of 1s minus the count of 0s seen so far. We can use a HashMap to store the first occurrence index of each unique difference value. If the same difference value is encountered again, then we have found a contiguous subarray with equal numbers of 1s and 0s, and we can update the maximum length based on the distance between the current and the first occurrence positions. You need to come up with a solution that effectively makes use of this observation to calculate the maximum length efficiently.","solution":"def max_length_equal_01_subarray(n, arr): Returns the length of the longest contiguous subarray with equal number of 1s and 0s Parameters: n (int): Length of the array arr (list): List of integers (0s and 1s) Returns: int: Maximum length of the subarray with equal number of 1s and 0s # Dictionary to store the first occurrence of each prefix sum prefix_sum_map = {0: -1} max_len = 0 prefix_sum = 0 for i in range(n): # Treat 0 as -1 and 1 as +1 for prefix sum if arr[i] == 0: prefix_sum -= 1 else: prefix_sum += 1 # If the prefix sum was seen before, we found a subarray with equal 0s and 1s if prefix_sum in prefix_sum_map: max_len = max(max_len, i - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = i return max_len"},{"question":"You\'ve been hired by a software company to develop an autocomplete feature for their new code editor. The feature should help programmers by suggesting variables that match the prefix they start typing. You need to implement a function that finds all variable names in a list that start with a given prefix. The function should take in two parameters: a list of variable names and a prefix string. It should return a list of all variable names that start with the given prefix. The variable names will consist of lowercase English letters only. Your task is to write the function `autocomplete(variable_names, prefix)`. The first line contains an integer n (1 ≤ n ≤ 10000) — the number of variable names. The next n lines each contain a variable name, a non-empty string of length not exceeding 50. The last line contains the prefix string p, a non-empty string of length not exceeding 50. Output all variable names that start with the prefix p. If no such variable names exist, output an empty list. The output order should be the same as the input order. Example: Input: 6 myvar variable varsetup experiment testcase validator var Output: variable varsetup Explanation: The prefix \\"var\\" matches the variable names \\"variable\\" and \\"varsetup\\" in the provided list.","solution":"def autocomplete(variable_names, prefix): Returns a list of variable names that start with the given prefix. :param variable_names: List of variable names :param prefix: Prefix string to match :return: List of variable names that start with the prefix result = [name for name in variable_names if name.startswith(prefix)] return result"},{"question":"In a kingdom far, far away, there is a peculiar type of currency called \\"Magic Coins.\\" There are three types of actions you can perform with these coins: 1. Split a coin into two coins. 2. Merge two coins into one coin. 3. Change one coin into a coin of any other type. You start with a given number of coins, and the goal is to determine the minimum number of actions required to achieve a target number of coins. You are given multiple scenarios where each scenario includes the initial number of coins and the target number of coins. For each scenario, you are to calculate the minimum number of actions required. The first line of input contains an integer t (1 le t le 100) — the number of scenarios. Each of the next t lines describes a scenario with two integers a and b (1 le a, b le 10^9) — the initial number of coins and the target number of coins respectively. For each scenario, output on a single line the minimum number of actions required to achieve the target number of coins starting from the initial number of coins. **Examples:** **Input:** ``` 3 10 20 5 1 1 1 ``` **Output:** ``` 5 4 0 ``` **Explanation:** - In the first case, you can achieve 20 coins from 10 by continuously splitting coins (5 split actions needed). - In the second case, you can achieve 1 coin from 5 by merging coins (4 merge actions needed). - In the third case, since the initial and target numbers of coins are the same, no action is needed.","solution":"def min_actions_to_target(t, scenarios): def min_actions(initial, target): if initial == target: return 0 elif initial > target: return initial - target # merging actions else: return target - initial # splitting actions results = [] for a, b in scenarios: results.append(min_actions(a, b)) return results"},{"question":"Given an array of integers, you need to process a series of range update operations and point queries. Each update operation adds a specific value to all elements in a specified range, and each query operation returns the current value of a specific element. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 200,000) — the number of elements in the array and the number of operations, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial values of the array. Each of the next q lines describes an operation, which can either be an update or a query: - An update operation is described by the format \\"add l r x\\", where l and r (1 ≤ l ≤ r ≤ n) are the 1-based indices of the range (inclusive) and x (1 ≤ x ≤ 10^9) is the value to add. - A query operation is described by the format \\"get i\\", where i (1 ≤ i ≤ n) is the 1-based index of the element to query. For each query operation, print the value of the specified array element after all preceding operations have been executed. # Example Input ``` 5 4 1 2 3 4 5 add 1 3 10 get 2 add 2 5 5 get 4 ``` Output ``` 12 11 ``` Explanation Initially, the array is [1, 2, 3, 4, 5]. After the first update \\"add 1 3 10\\", the array becomes [11, 12, 13, 4, 5]. The first query \\"get 2\\" returns 12. After the second update \\"add 2 5 5\\", the array becomes [11, 17, 18, 9, 10]. The second query \\"get 4\\" returns 9.","solution":"def process_operations(n, q, arr, operations): Process operations on an array and return results of point queries Args: n : int : Number of elements in the array q : int : Number of operations arr : list[int] : Initial values of the array operations : list[str] : List of operation strings Returns: list[int] : Result of each query operation # Initialize a difference array diff = [0] * (n + 1) # Helper function to apply the difference array to the original array def apply_diff(arr, diff): for i in range(n): if i == 0: arr[i] += diff[i] else: diff[i] += diff[i - 1] arr[i] += diff[i] results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 x = int(parts[3]) diff[l] += x if r + 1 < n: diff[r + 1] -= x elif parts[0] == \\"get\\": i = int(parts[1]) - 1 apply_diff(arr, diff) results.append(arr[i]) # Clear difference array as it has been applied diff = [0] * (n + 1) return results"},{"question":"You are given an undirected graph with n vertices and m edges. The vertices are numbered from 1 to n. Each edge connects exactly two different vertices and is specified by two integers u and v, representing a connection between vertices u and v. Your task is to determine the minimum number of edges that need to be removed such that in the resulting graph, every connected component is a tree. A tree is an undirected graph in which any two vertices are connected by exactly one path, and it does not contain any cycle. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of vertices and edges in the graph. - The next m lines contain two integers each, u and v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the graph. Output: - Print a single integer — the minimum number of edges that need to be removed. Example: Input: ``` 5 5 1 2 2 3 3 4 4 5 1 3 ``` Output: ``` 1 ``` Explanation: In the given example, the graph has one cycle: 1 → 2 → 3 → 1. By removing the edge (1,3), the resulting graph will be a tree for each connected component. Thus, the minimum number of edges to remove is 1.","solution":"def find_min_edges_to_remove(n, m, edges): from collections import defaultdict, deque def bfs(start, adj_list, visited): queue = deque([start]) visited[start] = True component_edges = 0 component_vertices = 0 while queue: node = queue.popleft() component_vertices += 1 for neighbor in adj_list[node]: component_edges += 1 if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Each edge is counted twice (once for each vertex), so we divide by 2. component_edges //= 2 return component_edges, component_vertices adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) total_extra_edges = 0 for i in range(1, n + 1): if not visited[i]: component_edges, component_vertices = bfs(i, adj_list, visited) # In a tree, the number of edges is vertices - 1 total_extra_edges += component_edges - (component_vertices - 1) return total_extra_edges"},{"question":"Little Tanya loves sequences. She has a sequence S of length n consisting of integers. Tanya wants to create a new sequence T of the same length from S such that each element T[i] is the greatest common divisor (GCD) of all elements from the start of the sequence S up to and including S[i], i.e., T[i] = GCD(S[1], S[2], ..., S[i]). Help Tanya by calculating the sequence T from the given sequence S. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n integers S[1], S[2], ..., S[n] (1 ≤ S[i] ≤ 10^9) — the elements of the sequence S. Print n integers — the sequence T, where T[i] is the GCD of elements in the prefix of length i of the sequence S.","solution":"import math from typing import List def calculate_gcd_sequence(S: List[int]) -> List[int]: Given a sequence S of integers, calculates the sequence T where each element T[i] is the greatest common divisor (GCD) of all elements from the start of the sequence S up to and including S[i]. n = len(S) T = [0] * n T[0] = S[0] # The GCD of the first element is the element itself. for i in range(1, n): T[i] = math.gcd(T[i - 1], S[i]) return T # Example usage: # S = [2, 3, 4, 8] # print(calculate_gcd_sequence(S)) # Output: [2, 1, 1, 1]"},{"question":"You are given a set of words and a list of pairs of words that are considered synonyms. You need to determine all distinct words that can be formed by substituting synonyms in the given set of words. Each pair of words are considered synonyms of each other, and synonyms form equivalence classes (transitive closure). For example, if \\"word1\\" is a synonym of \\"word2\\", and \\"word2\\" is a synonym of \\"word3\\", then \\"word1\\", \\"word2\\", and \\"word3\\" are all synonyms of each other. The first line contains an integer N (1 ≤ N ≤ 1000) — the number of words in the given set. The second line contains N words separated by spaces. Each word consists of lowercase English letters and has a length between 1 and 20, inclusive. The third line contains an integer M (0 ≤ M ≤ 1000) — the number of pairs of synonyms. The following M lines contain two words each, separated by a space, representing a pair of synonyms. Output the number of distinct words that can be formed by substituting synonyms, followed by the distinct words in lexicographical order, each on a new line. Example input: ``` 3 happy joy cheerful 2 happy joy joy cheerful ``` Example output: ``` 3 cheerful happy joy ```","solution":"def find_distinct_words(N, words, M, pairs): from collections import defaultdict # Helper function to perform DFS and find all connected words def dfs(word, seen, graph): stack = [word] component = set() while stack: current_word = stack.pop() if current_word not in seen: seen.add(current_word) component.add(current_word) for neighbor in graph[current_word]: if neighbor not in seen: stack.append(neighbor) return component # Create a graph representation of synonyms graph = defaultdict(set) for word1, word2 in pairs: graph[word1].add(word2) graph[word2].add(word1) # Use DFS to find all connected components seen = set() synonym_sets = [] for word in words: if word not in seen: component = dfs(word, seen, graph) synonym_sets.append(component) # Find distinct words by substituting synonyms distinct_words = set() for synonym_set in synonym_sets: distinct_words |= synonym_set result_list = sorted(distinct_words) return len(result_list), result_list # Sample usage N = 3 words = [\\"happy\\", \\"joy\\", \\"cheerful\\"] M = 2 pairs = [(\\"happy\\", \\"joy\\"), (\\"joy\\", \\"cheerful\\")] distinct_count, distinct_words = find_distinct_words(N, words, M, pairs) print(distinct_count) for word in distinct_words: print(word)"},{"question":"You are given n integers a1, a2, ..., an. Can you maximize the sum of a subarray consisting of consecutive elements from the array with at least one element, given that you can remove at most one element from this subarray to get the maximum sum? Note that the removed element does not necessarily need to be a negative number, and its removal might be to maximize the sum. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000). Print the maximum possible sum of a subarray with at most one element removed. # Example Input 6 1 -2 0 3 5 -1 Output 9 Explanation The optimal subarray is [1, -2, 0, 3, 5] by removing -2, thus the sum is 9. # Note In the first example, the optimal subarray without removing any element is [3, 5] with sum 8. However, removing the element -2 from the subarray [1, -2, 0, 3, 5] results in a higher sum of 9.","solution":"def max_sum_subarray_with_one_removal(arr): n = len(arr) if n == 1: return arr[0] forward = [0] * n backward = [0] * n # Calculate forward max subarray sums max_ending_here = arr[0] forward[0] = arr[0] for i in range(1, n): max_ending_here = max(arr[i], max_ending_here + arr[i]) forward[i] = max_ending_here # Calculate backward max subarray sums max_ending_here = arr[-1] backward[-1] = arr[-1] for i in range(n - 2, -1, -1): max_ending_here = max(arr[i], max_ending_here + arr[i]) backward[i] = max_ending_here # Calculate the maximum sum without any removal max_sum = max(forward) # Calculate the maximum sum with one element removal for i in range(1, n - 1): max_sum = max(max_sum, forward[i - 1] + backward[i + 1]) return max_sum"},{"question":"A common theme in the existing questions involves geometric calculations and optimization problems. Here, I propose a new question following the same guidelines and complexity: You are given a circle with center at the origin (0, 0) and radius r. There are n points with given coordinates (x_1, y_1), (x_2, y_2), ldots, (x_n, y_n). You are to determine the minimum number of these points that need to be moved so that all points lie either on the edge or inside the circle. Each movement consists in moving a point directly towards or away from the origin until it is exactly on the circumference of the circle or lies within it. The first line contains an integer r (1 le r le 10^9), the radius of the circle. The second line contains an integer n (1 le n le 10^5), the number of points. Each of the next n lines contains two integers x_i and y_i (-10^9 le x_i, y_i le 10^9), the coordinates of the points. Print a single integer — the minimum number of points that need to be moved inside or onto the circle. In the first sample, the circle has a radius of 3 units, and the points are (2,2), (-3,1), and (4,-3). Here, the optimal solution is to move the point (4,-3) towards the origin until it is on the circle\'s border. In the second sample, all points are already within the circle and no movement is needed. Hence, the minimum number of points to be moved is 0.","solution":"import math def min_points_to_move_inside_circle(r, n, points): def squared_distance(x, y): return x * x + y * y radius_squared = r * r count_outside = 0 for x, y in points: if squared_distance(x, y) > radius_squared: count_outside += 1 return count_outside"},{"question":"A group of friends plans to go hiking on a mountain, and they need to decide the optimal path to take to reach the peak. The mountain can be represented as a grid with `m` rows and `n` columns where each cell `(i, j)` has a certain elevation `H(i, j)`. They can move from any cell to an adjacent cell (left, right, up, or down), but they cannot move diagonally. The goal is to determine the minimum effort required to reach the peak from the starting point. The effort required to move from cell `(i, j)` to cell `(p, q)` is defined as the absolute difference in elevation between the two cells, `|H(i, j) - H(p, q)|`. The input consists of: - The dimensions of the grid `m` and `n` (1 ≤ m, n ≤ 1000) - An `m x n` grid of integers representing the elevations `H(i, j)` of each cell (0 ≤ H(i, j) ≤ 10^6) - The coordinates of the starting cell `(x1, y1)` and the peak cell `(x2, y2)` (0 ≤ x1, x2 < m; 0 ≤ y1, y2 < n) Your task is to find the minimum effort required to travel from the starting cell to the peak cell. **Input:** ``` m n H(0,0) H(0,1) ... H(0,n-1) ... H(m-1,0) H(m-1,1) ... H(m-1,n-1) x1 y1 x2 y2 ``` **Output:** ``` Minimum effort required to reach the peak ``` **Example:** Input: ``` 3 3 1 2 2 3 8 2 5 3 5 0 0 2 2 ``` Output: ``` 2 ``` In this example, the path with the minimum effort is: (0,0) -> (0,1) -> (1,2) -> (2,2) with efforts: |1-2|, |2-2|, |2-5| respectively, summing to a maximum effort of 2.","solution":"import heapq def minimum_effort_path(m, n, grid, start, peak): def neighbors(x, y): for nx, ny in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]: if 0 <= nx < m and 0 <= ny < n: yield nx, ny x1, y1 = start x2, y2 = peak efforts = [[float(\'inf\')] * n for _ in range(m)] efforts[x1][y1] = 0 min_heap = [(0, x1, y1)] while min_heap: effort, x, y = heapq.heappop(min_heap) if (x, y) == (x2, y2): return effort for nx, ny in neighbors(x, y): current_effort = max(effort, abs(grid[x][y] - grid[nx][ny])) if current_effort < efforts[nx][ny]: efforts[nx][ny] = current_effort heapq.heappush(min_heap, (current_effort, nx, ny)) return efforts[x2][y2] # Example usage if __name__ == \\"__main__\\": m, n = 3, 3 grid = [ [1, 2, 2], [3, 8, 2], [5, 3, 5] ] start = (0, 0) peak = (2, 2) result = minimum_effort_path(m, n, grid, start, peak) print(result) # Output: 2"},{"question":"You are tasked with creating a software module that filters an array of integers, ensuring that all elements in the resulting array are prime numbers. The module should receive an array of integers as input and return a new array containing only the prime numbers from the original array. For the purpose of this task, a prime number is defined as any natural number greater than 1 that is divisible only by 1 and itself. Write a function `filter_primes` that implements this filtering process. # Input: - The function will receive a single argument — an array of integers `arr`, where 1 ≤ |arr| ≤ 1000 and each element `x` (1 ≤ x ≤ 10^6). # Output: - The function should return an array containing only the prime numbers from the input array. The order of numbers in the output should match the order in the input array. # Example: Input: ```python arr = [2, 4, 6, 7, 11, 15, 19] ``` Output: ```python [2, 7, 11, 19] ``` # Note: - In the example, `2`, `7`, `11`, and `19` are the prime numbers from the input array. - Elements `4`, `6`, and `15` are not prime, so they are excluded from the output.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(arr): Filters the input array to include only prime numbers. return [num for num in arr if is_prime(num)]"},{"question":"You are given a city map represented by a grid of size `n x m`. Each cell in the grid can either be empty (`.`) or have a building (`B`). The city is planning to construct roads such that each building has a direct road access to at least one other building. Two cells are considered directly connected if they are adjacent horizontally or vertically. To evaluate the construction cost, you need to determine the minimum number of road segments to be built such that all the buildings are part of a single connected component. Each road segment connects two directly adjacent cells. The first line of input contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) indicating the dimensions of the grid. Each of the next `n` lines contains a string of length `m` consisting of characters `.` and `B`. Output a single integer, the minimum number of road segments needed. **Input:** 3 4 .B.. ..B. .... **Output:** 1 Explanation: We can construct one road segment connecting the buildings at positions (1, 2) and (2, 3). **Input:** 4 5 B.... ..... ..B.. ....B **Output:** 2 Explanation: We can construct two road segments to connect the buildings: one between (1, 1) and (3, 3), and another between (3, 3) and (4, 5).","solution":"def min_road_segments(n, m, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start): queue = deque([start]) while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'B\': visited[nx][ny] = True queue.append((nx, ny)) visited = [[False] * m for _ in range(n)] components = 0 for i in range(n): for j in range(m): if grid[i][j] == \'B\' and not visited[i][j]: visited[i][j] = True bfs((i, j)) components += 1 return max(components - 1, 0) # Read input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] for i in range(n): grid.append(data[2 + i]) # Compute and print the result print(min_road_segments(n, m, grid)) if __name__ == \\"__main__\\": main()"},{"question":"In a faraway kingdom, there is a peculiar form of currency consisting of coins with denominations that are powers of two (i.e., 1, 2, 4, 8, ...). The king\'s treasury has an unlimited number of coins of each denomination. One day, for a certain festivity, the king decides to determine in how many different ways a certain amount of money can be formed using these coins. Since the amount can be very large, the answer should be provided modulo (10^9 + 7). Write a function to determine the number of ways to form exactly `n` amount of money using the coins. The first input line contains an integer `t`, the number of test cases (1 ≤ `t` ≤ 10^4). Each of the next `t` lines contains a single integer `n` (0 ≤ `n` ≤ 10^6), the amount of money to be formed. Output `t` lines, each containing one integer: the number of ways to form the exact amount of money modulo (10^9 + 7). # Example Input: ``` 3 4 7 15 ``` Output: ``` 8 128 32768 ``` # Explanation: - For the first test case, there are 8 ways to form the amount 4: - 4 coins of 1 - 2 coins of 2 - 1 coin of 4 - 1 coin of 2 + 2 coins of 1 - 1 coin of 2 + 2 coins of 1 + 1 coin of 1 - 1 coin of 2 + 2 coins of 1 + 2 coins of 1 - 1 coin of 2 + 2 coins of 1 + 2 coins of 1 + 1 coin of 1 - 1 coin of 2 + 2 coins of 1 + 2 coins of 1 + 2 coins of 1 - For the second test case, there are 128 ways to form the amount 7. - For the third test case, there are 32768 ways to form the amount 15.","solution":"MOD = 10**9 + 7 def num_ways_to_form_amount(n): Determine the number of ways to form the exact amount of money `n` using coins with denominations that are powers of two. return pow(2, n, MOD) def solve(t, amounts): Process multiple test cases and return the results as a list. results = [] for n in amounts: results.append(num_ways_to_form_amount(n)) return results"},{"question":"Pline is an inventor who is working on a new type of clock. Unlike traditional clocks, Pline’s clock uses a series of binary digits to indicate the current time. Each hour is represented by a sequence of binary digits, where each digit can be either 0 or 1. Pline\'s clock can be represented as a list of binary strings that each code for an hour. Pline wants to know if his clock is properly set. The condition for the clock being properly set is if each binary string in the list is a valid binary representation of the hours from 0 to 23 (inclusive) and all 24 unique values are present. Help Pline determine if his clock is set correctly. # Input The input consists of a single integer T (1 le T le 10) - the number of test cases. For each test case: - The first line contains an integer n (1 le n le 50) - the number of binary strings representing the hours on Pline\'s clock. - The next n lines each contain a single binary string whose length does not exceed 5 characters and represents an hour on Pline\'s clock. # Output For each test case, print \\"YES\\" if Pline\'s clock is properly set, otherwise print \\"NO\\". # Example Input ``` 2 24 00000 00001 00010 00011 00100 00101 00110 00111 01000 01001 01010 01011 01100 01101 01110 01111 10000 10001 10010 10011 10100 10101 10110 10111 24 00000 00001 00010 00011 00100 00101 00110 00111 01000 01001 01010 01011 01100 01101 01110 01111 10000 10001 10010 10011 10100 10101 10110 10111 10111 ``` Output ``` YES NO ``` # Explanation In the first test case, the list contains all binary representations for hours from 0 to 23, ensuring \\"YES\\". In the second test case, the list fails to include all 24 unique hour representations, resulting in \\"NO\\".","solution":"def check_clock_set_properly(T, test_cases): Determines if Pline\'s clock is set properly for each test case. Args: T : int : Number of test cases test_cases : list : List of T tuples, each containing: - int n : Number of binary strings for the test case - list : n binary hour strings Returns: list : \\"YES\\" or \\"NO\\" for each test case results = [] for case in test_cases: n, binary_strings = case if n != 24: results.append(\\"NO\\") continue binary_hour_set = set(binary_strings) valid_hour_set = set(format(i, \'05b\') for i in range(24)) if binary_hour_set == valid_hour_set: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a parallel universe where all creatures speak their own unique languages, Bob the alien has decided to become a professional translator. Bob is interested in understanding the structure of different languages. Today, he has encountered a language where every sentence strictly follows a set of grammatical rules. Each sentence is represented as a sequence of words separated by spaces, and each word consists of lowercase alphabetical characters. The rules for constructing sentences in this language are as follows: 1. Each sentence consists of exactly `n` words. 2. A sentence is considered grammatically correct if each word in the sentence contains exactly `k` unique characters. Bob wants to create a program that will help him identify whether a given sentence is grammatically correct according to the rules above. The first line of the input contains two integers, `n` and `k` (`1 ≤ n, k ≤ 100`), separated by a space — the number of words in the sentence and the required number of unique characters in each word, respectively. The second line contains a sentence consisting of `n` words separated by single spaces. Output \\"YES\\" if the sentence is grammatically correct according to the rules given, and \\"NO\\" otherwise. Example input: ``` 3 3 cat dog bat ``` Example output: ``` YES ``` Explanation: Each word (\\"cat\\", \\"dog\\", and \\"bat\\") contains exactly 3 unique characters, so the sentence is grammatically correct.","solution":"def is_grammatically_correct(sentence, n, k): Determines if the sentence is grammatically correct. Parameters: sentence (str): The sentence to check. n (int): The number of words in the sentence. k (int): The required number of unique characters in each word. Returns: str: \\"YES\\" if the sentence is grammatically correct, \\"NO\\" otherwise. words = sentence.split() # Check that the number of words is correct if len(words) != n: return \\"NO\\" # Check that each word contains exactly k unique characters for word in words: if len(set(word)) != k: return \\"NO\\" return \\"YES\\""},{"question":"You are given an undirected graph with n nodes and m edges. Each node in the graph represents a city, and each edge represents a bidirectional road connecting two cities. Each road has a weight, which represents the time it takes to travel that road. There is a specific path two people want to take: starting from city u, visiting city v, and then returning to city u. Your task is to determine the minimum total travel time for them to complete this round trip. The first line of input contains two integers n and m (2 le n le 10^5, 1 le m le 2 times 10^5) — the number of cities and roads, respectively. The next m lines each contain three integers x, y, and w (1 le x, y le n, 1 le w le 10^9), indicating that there is a road connecting cities x and y with weight w. The last line of input contains two integers u and v (1 le u, v le n, u neq v) — the starting and visiting cities. Output a single integer — the minimum total travel time for the round trip. If it is impossible to complete the round trip, print -1. # Example Input: ``` 4 5 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 1 4 ``` Output: ``` 18 ``` # Explanation: The round trip is from city 1 to city 4 and then returning to city 1. The shortest path from city 1 to city 4 is 1 -> 3 -> 4 with a total travel time of 5. The shortest path from city 4 back to city 1 is 4 -> 3 -> 1 with a total travel time of 5. Thus, the total travel time for the round trip is 5 (going) + 5 (returning) = 10.","solution":"import heapq from collections import defaultdict def dijkstra(graph, start, n): Returns the shortest distance from start to all other nodes using Dijkstra\'s algorithm. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimum_round_trip_time(n, m, edges, u, v): Returns the minimum round trip time from u to v and back to u. graph = defaultdict(list) for x, y, w in edges: graph[x].append((y, w)) graph[y].append((x, w)) distances_from_u = dijkstra(graph, u, n) distances_from_v = dijkstra(graph, v, n) if distances_from_u[v] == float(\'inf\') or distances_from_v[u] == float(\'inf\'): return -1 return distances_from_u[v] + distances_from_v[u]"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it, representing the cost to traverse that edge. Your task is to find the maximum cost of any path between any two nodes in the graph. Input Format: - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 2*10^5) - the number of nodes and edges in the graph. - Each of the next m lines contains three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^9) representing an edge between node u and node v with cost c. It is guaranteed that the given graph is connected. Output Format: - Print a single integer, the maximum cost of any path between any two nodes in the graph. Example: Input: 4 4 1 2 3 2 3 4 3 4 5 4 1 6 Output: 12 Explanation: The maximum cost path in the given graph is from node 1 to node 4, where the path is 1 -> 4 (cost 6) or 1 -> 2 -> 3 -> 4 (cost 3 + 4 + 5 = 12). Thus, the maximum cost of any path between any two nodes in the graph is 12.","solution":"from collections import defaultdict import sys def dfs(node, graph, visited, dist): visited[node] = True max_cost = 0 for neighbor, weight in graph[node]: if not visited[neighbor]: dist[neighbor] = dist[node] + weight max_cost = max(max_cost, dist[neighbor]) max_cost = max(max_cost, dfs(neighbor, graph, visited, dist)) return max_cost def find_max_cost_path(n, m, edges): graph = defaultdict(list) for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) visited = [False] * (n + 1) dist = [0] * (n + 1) max_cost = 0 for node in range(1, n + 1): if not visited[node]: max_cost = max(max_cost, dfs(node, graph, visited, dist)) return max_cost"},{"question":"Determine a minimum spanning tree in an undirected, weighted graph. You are given an undirected, weighted graph with n vertices and m edges. Your task is to determine the sum of the weights of the edges included in the minimum spanning tree (MST) of the graph. If the graph is already disconnected and cannot be connected, output -1. A minimum spanning tree of a graph is a subset of the edges that connects all the vertices together (i.e., is a spanning tree) and has the minimum possible total edge weight. The first line contains two integers n (1 le n le 1000) and m (1 le m le 5000), the number of vertices and the number of edges in the graph. The next m lines each contain three integers u, v, and w (1 le u, v le n, u ne v, 1 le w le 10^6), representing an edge between vertices u and v with weight w. Output the sum of the weights of the edges in the minimum spanning tree. If no such tree exists (i.e., the graph is disconnected), print -1. # Input Format - The first line contains two integers n and m. - The next m lines each contain three integers, representing the edges of the graph (in the format u, v, w). # Output Format - A single integer representing the sum of the weights of the minimum spanning tree. If no such tree exists, print -1. # Sample Input ``` 4 5 1 2 3 2 3 1 3 4 4 4 1 2 3 1 5 ``` # Sample Output ``` 6 ``` # Explanation In the sample input, one possible minimum spanning tree includes the edges (1-2, 2-3, 4-1) with weights 3, 1, and 2 respectively, resulting in a sum of 6. This connects all vertices with the minimum total weight.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, m, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= m: break u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) if e != n - 1: return -1 minimumCost = 0 for u, v, weight in result: minimumCost += weight return minimumCost def minimum_spanning_tree(n, m, edge_list): return kruskal(n, m, edge_list)"},{"question":"You are given an array of integers. You are allowed to perform at most one operation on the array: choose any two adjacent elements and swap them. After the swap, you want to make the array sorted in non-decreasing order. Determine whether it is possible to sort the array with at most one such operation. The first line of input contains an integer n (1 le n le 10^5), the size of the array. The second line of input contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), representing the elements of the array. Output \\"YES\\" if it is possible to sort the array with at most one swap of two adjacent elements. Otherwise, output \\"NO\\". # Examples Input ``` 5 1 5 3 4 2 ``` Output ``` NO ``` Input ``` 4 2 3 1 4 ``` Output ``` YES ``` Input ``` 3 1 3 2 ``` Output ``` YES ```","solution":"def can_sort_with_one_swap(n, array): Returns \\"YES\\" if the array can be sorted with at most one swap of two adjacent elements, otherwise \\"NO\\". if n <= 1: return \\"YES\\" swapped = False for i in range(n - 1): if array[i] > array[i + 1]: if swapped: # If a swap has already been made, return NO return \\"NO\\" if (i > 0 and array[i - 1] > array[i + 1]) and (i < n - 2 and array[i] > array[i + 2]): return \\"NO\\" swapped = True return \\"YES\\""},{"question":"In an ancient kingdom, there are several cities connected by bidirectional roads. Each road has a length, which is an integer. The kingdom wants to construct a new capital city that minimizes the maximum travel distance from this capital to any other city. Your task is to help the kingdom find the optimal location for the new capital city. Given the number of cities and the roads, determine the maximum distance from the new capital to the furthest city. # Input Format - The first line contains two integers n and m, the number of cities and the number of roads respectively (1 leq n leq 100, 0 leq m leq frac{n(n-1)}{2}). - Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 100), denoting a road between city u and city v with length w. # Output Format - Print one integer, the minimized maximum travel distance from the optimal capital to the furthest city. # Example Input ``` 5 6 1 2 3 1 3 4 1 4 5 2 4 2 3 4 1 3 5 1 ``` Output ``` 4 ``` # Explanation In this example, if the capital is placed in city 1, the maximum distance to any other city is 5 (to city 4). By placing the capital in city 3, the maximum distance to the furthest city is minimized to 4. # Constraints - It\'s guaranteed that the graph is connected.","solution":"import heapq def dijkstra(adj, start, n): distances = [float(\'inf\')] * n distances[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > distances[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances def minimize_max_distance(n, m, roads): adj = [[] for _ in range(n)] for u, v, w in roads: adj[u-1].append((v-1, w)) adj[v-1].append((u-1, w)) min_max_distance = float(\'inf\') for city in range(n): distances = dijkstra(adj, city, n) max_distance_from_city = max(distances) min_max_distance = min(min_max_distance, max_distance_from_city) return min_max_distance # Input format for the function n = 5 m = 6 roads = [ (1, 2, 3), (1, 3, 4), (1, 4, 5), (2, 4, 2), (3, 4, 1), (3, 5, 1) ] print(minimize_max_distance(n, m, roads)) # Output: 4"},{"question":"John is a robotics engineer working on a series of interconnected machines that follow a strict sequence of operations. Each machine operation can either be executed successfully or fail, and the operations have a dependency chain such that some operations can only succeed if certain preceding operations have also succeeded. He is given a list of operations and their dependencies, and needs to determine the minimum set of initial operations that must be successful to ensure that a given operation can also be successful. Each operation is represented by a unique integer identifier, and dependencies are listed as pairs of integers (a, b), where `a` must succeed before `b` can be successful. Given an operation `op`, determine the minimum number of initial operations that need to be successful for `op` to be successful. # Input - The first line contains two integers `n` and `m`: the number of operations and the number of dependencies respectively (1 ≤ n ≤ 100, 0 ≤ m ≤ 500). - The next `m` lines each contain two integers `a_i` and `b_i` (1 ≤ a_i, b_i ≤ n), indicating that operation `a_i` must succeed before operation `b_i` can be successful. - The last line contains one integer `op` (1 ≤ op ≤ n) indicating the target operation. # Output - Output a single integer: the minimum number of initial operations that need to be successful for `op` to be successful. # Example Input ``` 5 4 1 2 2 3 3 4 4 5 5 ``` Output ``` 1 ``` In this example, for operation 5 to be successful, we need operation 1 to be successful first. Therefore, the minimum set consists of operation 1. # Notes: - Ensure to take into account all direct and indirect dependencies for the target operation. - You may assume that the input does not contain any cyclic dependencies.","solution":"def find_min_initial_operations(n, m, dependencies, op): from collections import defaultdict, deque # Create an adjacency list for the operations graph graph = defaultdict(list) for a, b in dependencies: graph[b].append(a) # Function to perform BFS to find all dependencies for a given operation def find_dependencies(target): queue = deque([target]) visited = set() while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return visited # Find all dependencies for the given operation all_dependencies = find_dependencies(op) # Minimum initial operations are those with no incoming edges in the all_dependencies set initial_operations = set(all_dependencies) for key in all_dependencies: for neighbor in graph[key]: if neighbor in initial_operations: initial_operations.remove(neighbor) return len(initial_operations)"},{"question":"A small town consists of several houses connected by a network of roads. Each road connects two houses, and each pair of houses is directly connected by at most one road. The town wants to ensure that if any single road is closed for repairs, it is still possible to travel between any two houses using the remaining roads. The town planner has asked you to help determine whether the current road network meets this requirement and if not, suggest the minimum number of roads that need to be added to satisfy this condition. The input consists of: 1. An integer `n` (2 ≤ n ≤ 1000) — the number of houses in the town. 2. An integer `m` (1 ≤ m ≤ 10000) — the number of existing roads. 3. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) indicating that there is a road between houses `u` and `v`. The output should be: 1. A single line containing \\"YES\\" if the current road network meets the requirement, otherwise \\"NO\\". 2. If the output is \\"NO\\", print the minimum number of roads that need to be added on the next line. Example Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Example Output: ``` NO 1 ``` Explanation: Although the network is a chain that connects all houses, removing any one road will disrupt the connectivity between some houses. Adding a road (1,5) will create a cycle, making the graph robust to any single road closure.","solution":"def find_min_roads_to_add(n, m, roads): from collections import defaultdict graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Check initial connectivity visited = [False] * (n + 1) visited[1] = True dfs(1, visited) if all(visited[1:]): # Check for biconnectivity (2-connected) for x in range(1, n + 1): for y in graph[x]: # Remove edge (x, y) and check connectivity graph[x].remove(y) graph[y].remove(x) visited = [False] * (n + 1) dfs(1, visited) graph[x].append(y) graph[y].append(x) if not all(visited[1:]): return \\"NO\\", 1 return \\"YES\\", None else: return \\"NO\\", None def find_min_roads(n, m, roads): result, additional_roads = find_min_roads_to_add(n, m, roads) if result == \\"NO\\" and additional_roads is None: # Count connected components from collections import defaultdict graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) visited = [False] * (n + 1) component_count = 0 for i in range(1, n + 1): if not visited[i]: component_count += 1 dfs(i, visited) return result, component_count - 1 return result, additional_roads"},{"question":"Given a binary string, determine the minimum number of operations required to make all bits \'0\'. In one operation, you can select any bit and flip it (0 to 1, or 1 to 0). However, you can perform the flip operation only if there is at least one \'1\' in the segment from the start of the string to the position you selected. Input The first line contains a single integer n (1 ≤ n ≤ 1000) - the length of the binary string. The second line contains a binary string of length n consisting of \'0\'s and \'1\'s. Output Print a single integer - the minimum number of operations required. Example Input: 5 11010 Output: 3 In this example, the operations are as follows: 1. Flip the first bit: 01010 2. Flip the second bit: 00010 3. Flip the fifth bit: 00000","solution":"def min_operations_to_zero(n, binary_string): Given a binary string, determines the minimum number of operations required to make all bits \'0\'. In one operation, you can select any bit and flip it only if there is at least one \'1\' from the start of the string to the position you selected. operations = 0 for bit in binary_string: if bit == \'1\': operations += 1 return operations"},{"question":"The University of Gridland is under attack by a swarm of cyber-bugs. The campus lab has a grid of size `n x m` representing a network with various devices and connections between them. Each cell in the grid is either a device or a blocked cell and the cyber-bugs can only move through adjacent devices (up, down, left, right). The campus chief needs your help to determine if a path exists between two specific devices in this network. Given the grid and the coordinates of the starting and ending devices, your task is to determine if there is a path between these two devices that passes only through devices. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid respectively. The next `n` lines each contain a string of length `m`, where \'.\' represents a device and \'#\' represents a blocked cell. The last two lines contain four integers each: `sx`, `sy` and `dx`, `dy` (0 ≤ sx, sy, dx, dy < maximum(n, m)) — the starting cell (sx, sy) and the destination cell (dx, dy), respectively. Print \\"YES\\" if there is a path from the starting device to the ending device, otherwise print \\"NO\\". # Example Input: ``` 5 5 ..#.# .#... #.# #.... #.. 0 0 4 4 ``` Output: ``` NO ``` Input: ``` 3 4 .... .. ..#. 1 0 2 3 ``` Output: ``` YES ```","solution":"def is_path_exists(n, m, grid, start, destination): from collections import deque directions = [(-1,0), (1,0), (0,-1), (0,1)] sx, sy = start dx, dy = destination if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return \\"NO\\" def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return \\"YES\\" for d in directions: nx, ny = x + d[0], y + d[1] if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Alice and Bob love playing games with sequences. Today, they are playing a slightly different kind of game. They have an array of positive integers. Alice wants to choose a subarray such that the sum of the elements in the subarray is divisible by a given number k. Bob wants to make it difficult for Alice, so he will remove one element of the array before Alice starts choosing the subarray. Can you help Alice determine whether it is possible to choose such a subarray after Bob removes one element? The first line of the input contains two integers n and k (2 le n le 10^5, 1 le k le 10^9) — the number of elements in the array and the given number k. The second line contains n integers a_1, a_2, cdots, a_n (1 le a_i le 10^9) — the elements of the array. Output \\"YES\\" if Alice can choose such a subarray after Bob removes an element, otherwise print \\"NO\\". **Example:** **Input:** ``` 5 3 4 7 1 2 6 ``` **Output:** ``` YES ``` **Explanation:** Before removing any element, Bob can remove the element with value 1. Alice can then choose the subarray [7, 2, 6] with the sum 15 which is divisible by 3.","solution":"def can_choose_subarray(n, k, arr): total_sum = sum(arr) for i in range(n): if (total_sum - arr[i]) % k == 0: return \\"YES\\" return \\"NO\\""},{"question":"Given a directed graph with n nodes (numbered from 1 to n) and m edges, determine if it contains a cycle. If there is a cycle, output \\"YES\\"; otherwise, output \\"NO\\". The first line of the input contains two integers n and m (1 leq n, m leq 10^5) — the number of nodes and the number of edges in the graph. Each of the following m lines contains two integers u and v (1 leq u, v leq n) indicating a directed edge from node u to node v. Output \\"YES\\" if the graph contains a cycle, and \\"NO\\" otherwise. Example: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` YES ``` Explanation: In the given example, the graph contains a cycle: `2 -> 3 -> 4 -> 2`. Thus, the output is \\"YES\\".","solution":"from collections import defaultdict def is_cyclic_util(v, visited, rec_stack, graph): visited[v] = True rec_stack[v] = True for neighbour in graph[v]: if not visited[neighbour]: if is_cyclic_util(neighbour, visited, rec_stack, graph): return True elif rec_stack[neighbour]: return True rec_stack[v] = False return False def contains_cycle(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * (n + 1) rec_stack = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if is_cyclic_util(node, visited, rec_stack, graph): return \\"YES\\" return \\"NO\\""},{"question":"You are given a 2D matrix of dimensions n times m, where each cell contains a non-negative integer value. Your goal is to start from the top-left corner of the matrix and navigate to the bottom-right corner, collecting values from cells along the way. You can only move right or down at each step. Calculate the maximum sum of values you can collect from the top-left corner to the bottom-right corner of the matrix. The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the matrix. Each of the following n lines contains m integers a_{ij} (0 le a_{ij} le 1000) — the values in the cells of the matrix. Output one integer — the maximum sum of values you can collect from the top-left corner to the bottom-right corner of the matrix. Test case 1: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 In the first test case, the optimal path is 1 -> 2 -> 3 -> 6 -> 9, with a sum of 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_path_sum(matrix): n = len(matrix) m = len(matrix[0]) # Create a dp table with the same dimensions as the matrix dp = [[0] * m for _ in range(n)] # Initialize the top-left cell dp[0][0] = matrix[0][0] # Fill in the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] # The bottom-right cell contains the maximum path sum return dp[n - 1][m - 1]"},{"question":"Eva loves collecting rocks. She keeps her collection organized by storing them in boxes. Each box can hold an unlimited number of rocks, but she can only add rocks to the collection if they follow a strict pattern. Eva\'s collection pattern is defined as follows: - Each rock has a weight, given by a positive integer. - The rocks added to a box must follow a non-decreasing order of weights. Given Eva\'s collection of rocks, help her determine the number of distinct ways she can organize all her rocks into a single box, maintaining the non-decreasing order condition. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the total number of rocks in Eva\'s collection. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the rocks. Print a single integer — the number of distinct ways Eva can organize all her rocks into a single box. Consider the first sample: Here, the rocks weigh 3, 1, 2, and 2 respectively. The distinct ways Eva can organize them in non-decreasing order are: - (1, 2, 2, 3) - (1, 2, 3, 2) - (1, 3, 2, 2) - (2, 2, 1, 3) - etc. In total, there will be several ways satisfying the condition. Sample Input: 4 3 1 2 2 Sample Output: Number of distinct ways satisfying the condition","solution":"import math from collections import Counter def count_ways(n, weights): Returns the number of distinct ways to organize the rocks into a single box maintaining the non-decreasing order. # Count occurrences of each weight counter = Counter(weights) # Calculate the total number of permutations of the multiset numerator = math.factorial(n) denominator = 1 for value in counter.values(): denominator *= math.factorial(value) return numerator // denominator # Example usage number_of_rocks = 4 rocks_weights = [3, 1, 2, 2] distinct_ways = count_ways(number_of_rocks, rocks_weights) print(distinct_ways)"},{"question":"Sam is planning a hiking trip and has a specific route he wants to follow in the mountains. The route is described by a series of steps that go either \\"Up\\", \\"Down\\", \\"Left\\", or \\"Right\\". Each step is taken to a point that is exactly 1 unit away from the current point in the respective direction. Starting from a given grid position, Sam must complete the route described by the steps. However, Sam needs your help to determine if he will end up back at the starting point after following all the steps. Write a program that reads the initial grid position and the sequence of steps, and determines if Sam will return to the starting point. If he does, print \\"YES\\", otherwise print \\"NO\\". The input consists of: - The first line contains two integers x and y (1 ≤ x, y ≤ 1000) - the starting coordinates. - The second line contains an integer n (1 ≤ n ≤ 50) - the number of steps. - Each of the next n lines contains a string s that is one of: \\"Up\\", \\"Down\\", \\"Left\\", \\"Right\\" - the direction of the step. Print \\"YES\\" if Sam returns to the starting position after taking all the steps, otherwise print \\"NO\\". Example: Input: 3 3 4 Up Right Down Left Output: YES Explanation: Starting from (3,3), Sam moves Up to (3,4), Right to (4,4), Down to (4,3), and Left to (3,3), which is the starting position. Hence, the output is \\"YES\\".","solution":"def hiking_trip(initial_coordinates, steps): x, y = initial_coordinates for step in steps: if step == \\"Up\\": y += 1 elif step == \\"Down\\": y -= 1 elif step == \\"Left\\": x -= 1 elif step == \\"Right\\": x += 1 return \\"YES\\" if (x, y) == initial_coordinates else \\"NO\\""},{"question":"In a country far, far away, there is a unique river system consisting of a network of lakes connected by rivers. Each lake has a certain capacity, measured in units of water, and each river can transfer water between lakes in one-direction only. The country is facing severe drought, and the government wants to determine how much water can be stored in any given lake if any initial lake is filled and no water overflows any lake. You are given information about the capacities of each lake and the allowed directions of the water flow between the lakes. Your task is to determine the maximum amount of water that can be stored in each lake if we start by filling them one after another. The first line of the input contains an integer n (1 le n le 1000) — the number of lakes. The second line contains n integers c_1, c_2, ..., c_n (1 le c_i le 10^9) — the capacities of the lakes. Each of the next n-1 lines contains two integers u and v (1 le u, v le n), meaning there is a river that allows water to flow from lake u to lake v. Output: Print n lines where the i-th line contains the maximum amount of water that can be stored in lake i when it is the starting point of filling. **Example:** **Input:** ``` 4 10 20 30 40 1 2 2 3 3 4 ``` **Output:** ``` 10 20 30 40 ``` **Explanation:** - Starting from lake 1, only lake 1\'s capacity is considered, as water doesn\'t flow upstream. - Starting from lake 2, only lake 2\'s capacity is considered, as water flows downstream to lakes 3 and 4, but they haven\'t been filled yet. - Similarly, for lakes 3 and 4, only their respective capacities are considered as they are destination points in the network.","solution":"def max_water_in_each_lake(n, capacities, connections): from collections import defaultdict, deque adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True water_stored = capacities[start - 1] while queue: current = queue.popleft() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return water_stored results = [] for i in range(1, n + 1): results.append(bfs(i)) return results # Example usage: n = 4 capacities = [10, 20, 30, 40] connections = [(1, 2), (2, 3), (3, 4)] print(max_water_in_each_lake(n, capacities, connections)) # Output: [10, 20, 30, 40]"},{"question":"Dr. Evelyn is studying the movement patterns of certain types of ants. She has recorded the positions of n ants at two different moments: t1 and t2. For each ant, she recorded the coordinates (x, y, z) at time t1 and the coordinates (a, b, c) at time t2. She wants to know if it\'s possible that no ant moved more than a certain distance d between t1 and t2. Your task is to help Dr. Evelyn determine if this is true. Specifically, you must determine if there exists a single threshold distance d where every ant moved less than or equal to d units from t1 to t2. The first line contains an integer n (1 ≤ n ≤ 105), the number of ants. Each of the next n lines contains six integers: x, y, z, a, b, and c, where (x, y, z) are the coordinates of the i-th ant at time t1, and (a, b, c) are the coordinates of the i-th ant at time t2 (-10^9 ≤ x, y, z, a, b, c ≤ 10^9). If such a threshold distance d exists, print \\"YES\\" on a single line. Otherwise, print \\"NO\\". The first example has n = 3 ants. If all movements of the ants are within a distance d between times t1 and t2, then it is possible to determine such a threshold distance. Otherwise, it is not possible.","solution":"def can_ants_move_within_distance(n, positions): from math import sqrt max_distance_sq = 0 # maximum squared distance any ant has moved for pos in positions: x, y, z, a, b, c = pos dist_sq = (x - a) ** 2 + (y - b) ** 2 + (z - c) ** 2 max_distance_sq = max(max_distance_sq, dist_sq) max_distance = sqrt(max_distance_sq) # Calculate the actual distance return f\\"YES {max_distance}\\" # Example usage: # `positions` is a list of tuples, each containing six integers (x, y, z, a, b, c) positions = [(1, 2, 3, 4, 5, 6), (0, 0, 0, 1, 1, 1), (2, 3, 4, 5, 6, 7)] print(can_ants_move_within_distance(3, positions)) # This is just an example call."},{"question":"Polycarpus is participating in an interesting game where he is given an array of integers. His task is to make the array elements non-decreasing by performing a series of operations. In one operation, he can choose a subarray and reverse it. Your task is to determine the minimum number of such operations required to make the array completely non-decreasing. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the original array. Output a single integer — the minimum number of operations needed. Example: ``` Input 5 3 2 3 1 2 Output 2 ``` In the given example, one possible sequence of operations is: 1. Reverse the subarray a[2:3] to get [3, 3, 2, 1, 2]. 2. Reverse the subarray a[3:5] to get [3, 3, 2, 2, 1]. It is not necessary to print the exact sequence of operations, only the minimum number required.","solution":"def min_reversals_needed(n, arr): Returns the minimum number of reversals needed to make the array non-decreasing. # We need to count the disordered segments disordered_segments = 0 in_segment = False for i in range(1, n): if arr[i] < arr[i-1]: if not in_segment: disordered_segments += 1 in_segment = True else: in_segment = False return disordered_segments"},{"question":"Given an array of integers `arr` of length `n`, your task is to answer `q` queries. Each query can be one of the following types: 1. Update the element at a specified index. 2. Report the minimum value in a specified subarray. The array is 1-indexed. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `q` (1 ≤ q ≤ 100,000) — the length of the array and the number of queries. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 1,000,000) — the elements of the array. - Each of the following `q` lines contains a query in one of the following formats: - `1 x y` (1 ≤ x ≤ n, 1 ≤ y ≤ 1,000,000) — update the element at index `x` to the value `y`. - `2 l r` (1 ≤ l ≤ r ≤ n) — report the minimum value in the subarray from index `l` to index `r`. # Output For each query of the second type, output the minimum value in the specified subarray. # Example Input ``` 5 3 1 3 2 4 5 2 1 3 1 2 1 2 1 3 ``` Output ``` 1 1 ``` # Explanation Initially, the array is `[1, 3, 2, 4, 5]`. - The first query asks for the minimum value in the subarray from index 1 to 3, which is `1`. - The second query updates the element at index 2 to `1`, so the array becomes `[1, 1, 2, 4, 5]`. - The third query asks for the minimum value in the subarray from index 1 to 3, which is `1`. # Note - Efficient handling of range minimum queries and updates can be achieved through data structures like segment trees, Fenwick trees, or similar.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [float(\'inf\')] * (2 * n) # Initialize the segment tree for i in range(n): self.tree[n + i] = data[i] for i in range(n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Update the segment tree pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min(self, l, r): # Query the minimum in the range [l, r) res = float(\'inf\') l += self.n r += self.n while l < r: if l % 2: res = min(res, self.tree[l]) l += 1 if r % 2: r -= 1 res = min(res, self.tree[r]) l //= 2 r //= 2 return res def process_queries(n, q, arr, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: _, x, y = query seg_tree.update(x - 1, y) # Array is 1-indexed, so convert to 0-indexed elif query[0] == 2: _, l, r = query min_val = seg_tree.range_min(l - 1, r) # Array is 1-indexed, so convert to 0-indexed results.append(min_val) return results"},{"question":"A water delivery service operates in a city with a grid of houses. Each house in the city has a unique coordinate (x, y). The service has a water truck parked at the origin (0, 0) and delivers water to various houses. The most efficient route for the truck is determined by the Manhattan distance between the truck and the houses. The Manhattan distance between two coordinates (x1, y1) and (x2, y2) is given by |x1 - x2| + |y1 - y2|. The problem is to find the house that is farthest from the origin based on the Manhattan distance. Given the coordinates of the houses, find the maximum Manhattan distance from the origin to any house and print the coordinates of that house. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) – the number of houses. Each of the following n lines contains two integers x and y (|x|, |y| ≤ 10^6) – the coordinates of each house. Print a single line containing the coordinates of the house that is farthest from the origin. If there are multiple houses at the same maximum distance, print any one of them. Example input: ``` 5 1 2 3 4 -5 -6 7 8 -9 10 ``` Example output: ``` -9 10 ```","solution":"def farthest_house(n, coordinates): Finds the coordinates of the house that is farthest from the origin based on the Manhattan distance. Args: n: int - The number of houses. coordinates: list of tuples - A list containing the coordinates of the houses. Returns: tuple - The coordinates of the house that is farthest from the origin. max_distance = -1 farthest_house_coords = (0, 0) for coord in coordinates: x, y = coord distance = abs(x) + abs(y) if distance > max_distance: max_distance = distance farthest_house_coords = (x, y) return farthest_house_coords"},{"question":"You are given a binary string s of length n, consisting only of characters \'0\' and \'1\'. You are allowed to make at most k flip operations, where in one flip operation you can choose any character of the string and flip it (i.e., change \'0\' to \'1\' or \'1\' to \'0\'). Your task is to determine the maximum length of a contiguous substring of \'1\'s that can be obtained by making at most k flips. The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ n). The second line contains the binary string s of length n. Print a single integer — the maximum length of a contiguous substring of \'1\'s that can be obtained by making at most k flips. **Example:** **Input:** 6 1 010101 **Output:** 3 **Explanation:** We can flip the character at index 2 to get the string \\"011101\\". The longest contiguous substring of \'1\'s is \\"111\\", which has a length of 3.","solution":"def max_length_of_ones(n, k, s): Returns the maximum length of a contiguous substring of \'1\'s that can be obtained by making at most k flips. Parameters: n (int): Length of the binary string s k (int): Maximum number of flip operations allowed s (str): Binary string consisting of characters \'0\' and \'1\' Returns: int: Maximum length of contiguous substring of \'1\'s after at most k flips left, right = 0, 0 max_length = 0 flip_count = 0 while right < n: if s[right] == \'0\': flip_count += 1 while flip_count > k: if s[left] == \'0\': flip_count -= 1 left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A bike racing competition is being held on a circular track. The track is divided into several segments, each with a different terrain and resistance level. Each racer has a stamina level and consumes stamina proportional to the terrain resistance. Your task is to determine the optimal race strategy that allows the racers to complete the maximum number of full laps without running out of stamina, while starting at any segment of the track. Consider the following parameters: - n: Number of terrain segments in the track. - m: Number of racers. - resistances: An array of length n, where resistances[i] represents the stamina consumption of each segment of the track. - staminas: An array of length m, where staminas[j] represents the initial stamina of each racer. The circular track means after the last segment, the next segment is the first one again. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100). - The second line contains n integers separated by spaces, representing the resistances of the track segments (1 ≤ resistances[i] ≤ 100). - The third line contains m integers separated by spaces, representing the stamina levels of each racer (1 ≤ staminas[j] ≤ 10^4). Output: - Print a single integer, which is the maximum number of full laps the racers can complete. Example: Input: 5 3 3 1 4 2 5 20 25 30 Output: 3 Explanation: The total resistance of one full lap is 15. - Racer 1 (stamina 20) can complete 1 lap (remaining stamina: 5). - Racer 2 (stamina 25) can complete 1 lap (remaining stamina: 10). - Racer 3 (stamina 30) can complete 2 laps (remaining stamina: 0). The maximum number of full laps racers can complete in total is 1 + 1 + 2 = 4. But since Racer 3 can shift start at the second segment to reduce one lap (3 full laps), total laps become optimal.","solution":"def max_full_laps(n, m, resistances, staminas): Determines the maximum number of full laps each racer can complete. Parameters: - n (int): number of terrain segments - m (int): number of racers - resistances (list of int): terrain resistance for each segment - staminas (list of int): initial stamina levels for each racer Returns: - int: maximum number of full laps the racers can complete total_resistance = sum(resistances) max_laps = 0 for stamina in staminas: max_laps += stamina // total_resistance return max_laps"},{"question":"Professor Smith is conducting research on DNA sequences. He often needs to find and compare patterns within DNA strings. Recently, he encountered a task where he needs to identify possible mutations between two DNA sequences. You are given two non-empty DNA sequences, represented as strings s1 and s2, which consist only of the characters \'A\', \'T\', \'C\', and \'G\'. The sequences have the same length, which does not exceed 1000. A valid mutation between s1 and s2 can change one character at a time, with each intermediate sequence being a valid DNA sequence. Determine if it is possible to transform s1 into s2 through a series of such mutations. If it is possible, print the minimum number of mutations required. If it is not possible, print \\"-1\\" (without quotes). A mutation is valid if it changes exactly one character in the sequence while keeping the resulting sequence as a valid DNA sequence. Each intermediate sequence must be valid, and no character in the string other than the one being mutated should change. The input consists of two strings s1 and s2 of equal length, each composed of characters from the set {\'A\', \'T\', \'C\', \'G\'}. Example: Input: AGCT TCGA Output: 4 In this example, the sequence of mutations could be: AGCT -> TGCT -> TCCT -> TCGA -> TCGA Note that there could be multiple valid sequences of mutations, and any valid one is acceptable as long as the minimum number of mutations is reported.","solution":"def min_mutations(s1, s2): Determine the minimum number of mutations needed to transform s1 to s2. If it\'s not possible, return -1. if len(s1) != len(s2): return -1 mutations = 0 for i in range(len(s1)): if s1[i] != s2[i]: mutations += 1 return mutations def can_transform(s1, s2): Check if it is possible to transform s1 into s2. A transformation is possible if all characters in s1 and s2 are in the set {\'A\', \'T\', \'C\', \'G\'}. valid_chars = {\'A\', \'T\', \'C\', \'G\'} if all(c in valid_chars for c in s1) and all(c in valid_chars for c in s2): return min_mutations(s1, s2) else: return -1"},{"question":"You are given a binary tree with n nodes (1 ≤ n ≤ 1000), where each node has a unique value between 1 and n. The task is to find the most frequent subtree sum. A subtree sum is defined as the sum of all node values in a subtree, including the root of the subtree. The input begins with a single integer n, the number of nodes in the tree. Each of the next n lines contains three integers: u, l, and r, where u is the value of the node, l is the value of the left child of u (or -1 if there is no left child), and r is the value of the right child of u (or -1 if there is no right child). Output the most frequent subtree sum. If there are multiple sums with the same highest frequency, output the smallest one. Input Format: The first line contains a single integer n — the number of nodes in the tree. Each of the next n lines contains three integers u, l, and r — describing the value of the node u and its left and right children (or -1 if there is no corresponding child). Output Format: Print a single integer — the most frequent subtree sum, or the smallest one if multiple sums have the same highest frequency. Example: Input 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Output 7 Explanation: The subtree sums are: - For node 4: sum is 4 - For node 5: sum is 5 - For node 3: sum is 3 + 4 + 5 = 12 - For node 2: sum is 2 - For node 1: sum is 1 + 2 + 3 + 4 + 5 = 15 The sums (frequency): 4 (1), 5 (1), 12 (1), 2 (1), 15 (1). Hence, the smallest subtree sum with the highest frequency (which is 1) is 2.","solution":"from collections import defaultdict, Counter class TreeNode: def __init__(self, value=0): self.value = value self.left = None self.right = None def find_frequent_tree_sum(root): subtree_sum_count = Counter() def dfs(node): if not node: return 0 left_sum = dfs(node.left) right_sum = dfs(node.right) total_sum = node.value + left_sum + right_sum subtree_sum_count[total_sum] += 1 return total_sum dfs(root) max_freq = max(subtree_sum_count.values()) max_freq_sums = [s for s in subtree_sum_count if subtree_sum_count[s] == max_freq] return min(max_freq_sums) def build_tree(nodes_info): nodes = {u: TreeNode(u) for u, _, _ in nodes_info} root = nodes[nodes_info[0][0]] for u, l, r in nodes_info: if l != -1: nodes[u].left = nodes[l] if r != -1: nodes[u].right = nodes[r] return root def most_frequent_subtree_sum(n, nodes_info): root = build_tree(nodes_info) return find_frequent_tree_sum(root)"},{"question":"You are an intern at a software company and have been tasked with developing a tool for generating user reports. Each report should include the user\'s ID, name, the projects they have worked on, and the total number of hours they have contributed to these projects. You are provided with two lists: one containing user information and the other containing project information. Each user has a unique ID and each project information lists the user ID, project name, and the number of hours the user worked on that project. Write a program that generates a report for each user showing their ID, name, the projects they have worked on, and the total hours they have contributed. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of users. The next n lines contain user information in the following format: user_id user_name The next line contains an integer m (1 ≤ m ≤ 100) — the number of project records. The next m lines contain project information in the following format: user_id project_name hours Print the report for each user in the following format: user_id user_name project_name_1 hours_1 project_name_2 hours_2 ... Total hours: total_hours Output the report for each user in ascending order of their user ID. Example: Input: 3 1 Alice 2 Bob 3 Charlie 4 1 ProjectX 5 2 ProjectY 3 1 ProjectZ 2 3 ProjectX 4 Output: 1 Alice ProjectX 5 ProjectZ 2 Total hours: 7 2 Bob ProjectY 3 Total hours: 3 3 Charlie ProjectX 4 Total hours: 4","solution":"def generate_user_reports(n, user_info, m, project_info): from collections import defaultdict user_dict = {} project_dict = defaultdict(list) for user in user_info: user_id, user_name = user.split() user_dict[int(user_id)] = user_name for project in project_info: user_id, project_name, hours = project.split() user_id = int(user_id) hours = int(hours) project_dict[user_id].append((project_name, hours)) reports = [] for user_id in sorted(user_dict.keys()): user_name = user_dict[user_id] report = f\\"{user_id} {user_name}n\\" total_hours = 0 for project_name, hours in project_dict[user_id]: report += f\\"{project_name} {hours}n\\" total_hours += hours report += f\\"Total hours: {total_hours}\\" reports.append(report) return reports # Example usage: # n = 3 # user_info = [\\"1 Alice\\", \\"2 Bob\\", \\"3 Charlie\\"] # m = 4 # project_info = [\\"1 ProjectX 5\\", \\"2 ProjectY 3\\", \\"1 ProjectZ 2\\", \\"3 ProjectX 4\\"] # reports = generate_user_reports(n, user_info, m, project_info) # for report in reports: # print(report)"},{"question":"Petya is playing an interesting game with his friends. They have a pool table with p pockets and a triangular rack of g green-colored balls. Petya wants to investigate how many distinct ways he can select k balls from these g green balls such that no two balls are from the same row of the triangular rack. The triangular rack of balls has rows arranged in increasing order of balls, i.e., the first row has 1 ball, the second row has 2 balls, the third row has 3 balls, and so on. Therefore, the n-th row has n balls. The total number of balls g in the rack is calculated as g = 1 + 2 + 3 + ... + n. Write a program that determines the number of ways Petya can choose k balls from these g green balls such that no two selected balls are from the same row. The input contains a single integer k (1 ≤ k ≤ n) which represents the number of balls Petya wants to select. Output the number of distinct ways to choose k balls such that no two selected balls are from the same row. Example: Input: 3 Output: 1 Explanation: In a triangular rack with 3 rows, the rows have the following balls: 1st row: 1 ball 2nd row: 2 balls 3rd row: 3 balls To select 3 balls such that no two balls are from the same row, there is only one distinct way: one ball from each row.","solution":"def count_ways(k): Returns the number of ways to choose k balls from a triangular rack of balls such that no two balls come from the same row. if k < 1: return 0 return 1"},{"question":"Rita loves strolling in the nearby park. The park consists of numerous intersecting pathways that form a complex network. Since Rita enjoys discovering new routes, she takes a random pathway each time she reaches an intersection. The park can be represented as an undirected graph where intersections are nodes and pathways between them are edges. Each intersection has a unique identifier starting from 1 to n. Initially, Rita starts at the intersection with the identifier 1. However, after several walks, Rita realized she wants to know whether she has explored a particular pathway. So, she keeps track of her journey as a sequence of intersection identifiers. Given the list of intersections Rita visited in the exact order of her journey, determine if there exists any pair of intersections that form a cycle. A cycle is a sequence of edges that starts and ends at the same intersection with all edges being distinct. Write a function that checks if there\'s a cycle in Rita\'s journey. # Input The first line contains a single integer n (1 ≤ n ≤ 2·10^5) — the number of intersections Rita has visited. The second line contains n integers i1, i2, ..., in (1 ≤ ij ≤ n) — the identifiers of the intersections Rita visited. # Output Print \\"YES\\" if there\'s at least one cycle in the journey, otherwise print \\"NO\\". # Example Input: 6 1 2 3 4 2 5 Output: YES Input: 5 1 3 4 5 6 Output: NO # Note In the first example, Rita\'s journey includes a cycle: 2 → 3 → 4 → 2. Hence the output is \\"YES\\". In the second example, no cycles are formed in Rita\'s journey. Hence the output is \\"NO\\".","solution":"def has_cycle(n, intersections): This function checks if there is a cycle in Rita\'s journey. :param n: Number of intersections (int) :param intersections: List of intersections visited (list of int) :return: \\"YES\\" if there is a cycle, otherwise \\"NO\\" visited = set() for intersection in intersections: if intersection in visited: return \\"YES\\" visited.add(intersection) return \\"NO\\""},{"question":"In a kingdom with a hierarchical structure, each person in the kingdom (except the ruler) has exactly one parent, who is another citizen of the kingdom. The ruler has no parent. You are given the kingdom\'s hierarchy and the name of two citizens in the kingdom. Your task is to determine the closest common ancestor of these two citizens. The closest common ancestor of two individuals is defined as the farthest individual from the ruler who is an ancestor of both individuals. You are given a series of queries to process. Each query consists of the names of two citizens and you need to determine their closest common ancestor for each query. Input: - The first line contains an integer n (1 ≤ n ≤ 100000), the number of citizens. - The second line contains the name of the ruler. - The next n-1 lines each contain two space-separated strings u and v, indicating that v is the parent of u. - The following line contains an integer q (1 ≤ q ≤ 100000), the number of queries. - The next q lines each contain two space-separated strings a and b, indicating the names of the two citizens for the query. Output: For each query, print the name of the closest common ancestor of the two citizens. Example: Input 7 Henry Alice Bob Bob Henry Charlie Henry David Alice Eve Charlie Frank Charlie 3 David Eve Eve Frank David Frank Output Henry Charlie Henry","solution":"class KingdomHierarchy: def __init__(self, ruler): self.parent = {} self.ruler = ruler def add_citizen(self, child, parent): self.parent[child] = parent def find_path_to_ruler(self, citizen): path = [] while citizen != self.ruler: path.append(citizen) citizen = self.parent[citizen] path.append(self.ruler) return path def closest_common_ancestor(self, citizen1, citizen2): path1 = self.find_path_to_ruler(citizen1) path2 = self.find_path_to_ruler(citizen2) i = len(path1) - 1 j = len(path2) - 1 common_ancestor = None while i >= 0 and j >= 0 and path1[i] == path2[j]: common_ancestor = path1[i] i -= 1 j -= 1 return common_ancestor def solve_kingdom_hierarchy(n, ruler, relations, q, queries): kingdom = KingdomHierarchy(ruler) for u, v in relations: kingdom.add_citizen(u, v) results = [] for a, b in queries: results.append(kingdom.closest_common_ancestor(a, b)) return results"},{"question":"Astrid is a great lover of puzzles. One day, she encountered a uniquely challenging problem about string transformation and asked for your help. Here\'s what she needs you to solve: Given two strings s1 and s2 of the same length n, you need to transform s1 into s2 using the fewest number of operations. In one operation, you can take any character in s1 that is different from the corresponding character in s2 and change it to the corresponding character in s2. Write a program that determines the minimum number of operations needed to transform s1 into s2. Input contains two strings s1 and s2, each of length n (1 ≤ n ≤ 1000). Output the minimum number of operations required to transform s1 into s2. # Example **Input** ``` abcde abfgh ``` **Output** ``` 3 ``` **Explanation** - Change the third character \'c\' to \'f\': abcde -> abfde - Change the fourth character \'d\' to \'g\': abfde -> abfge - Change the fifth character \'e\' to \'h\': abfge -> abfgh Therefore, the minimum number of operations is 3.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. operations = 0 for i in range(len(s1)): if s1[i] != s2[i]: operations += 1 return operations"},{"question":"You are given an array of integers that represents the height of a series of mountains where the array is a bitonic sequence. A bitonic sequence is first strictly increasing and then strictly decreasing. Your task is to find the peak (highest element) in the array. More formally, you need to find an index `i` such that: - `arr[i-1] < arr[i]` (if `i` > 0) - `arr[i] > arr[i+1]` (if `i` < n - 1) Write a function `findPeak(arr)` that takes in an array of integers and returns the index of the peak element. You can assume the array will be non-empty and will have at least one peak. # Input - The first line contains an integer `n` (3 ≤ n ≤ 10^5) – the number of elements in the array. - The second line contains `n` space-separated integers representing the array elements, where each element is between `1` and `10^9`. # Output - Print a single integer – the index of the peak element. If there are multiple peaks, print any of them. # Example Input ``` 7 1 3 8 12 9 4 2 ``` Output ``` 3 ``` Input ``` 8 10 20 30 40 50 40 30 20 ``` Output ``` 4 ``` Your solution should run in O(log n) time complexity.","solution":"def findPeak(arr): Finds the peak element in a bitonic sequence array using binary search. Args: arr: List of integers representing the bitonic sequence. Returns: Index of the peak element in the array. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"You are given an integer array `arr` of length `n`. Each element in the array represents a stock price on day `i`. Your task is to maximize your profit by choosing a single day to buy one stock and a different day in the future to sell that stock. However, there are some conditions: 1. You are allowed to buy the stock on day `i` and sell it only on some day `j` where `j > i`. 2. There might be a special threshold profit `k`. If the calculated maximum profit is less than `k`, then you do nothing (i.e., profit is zero). The first line of the input contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9). The second line contains `n` space-separated integers representing the stock prices `arr[i]` (1 ≤ arr[i] ≤ 10^9). Print a single integer which is the maximum achievable profit if it meets the threshold condition, otherwise print `0`. # Example ``` Input: 6 5 7 1 5 3 6 4 Output: 5 Input: 6 7 7 1 5 3 6 4 Output: 0 ``` # Explanation In the first example, you can achieve a maximum profit of 5 (by buying on day 2 at price 1 and selling on day 5 at price 6), and it meets the threshold `k` which is 5. In the second example, even though the maximum profit is 5, it does not meet the threshold profit `k` which is 7. Therefore, the output is 0.","solution":"def max_profit(arr, n, k): Returns the maximum profit if it meets the threshold `k`. Otherwise, returns 0. if n <= 1: return 0 min_price = arr[0] max_profit = 0 for i in range(1, n): # Compare current price with min_price and update max_profit accordingly max_profit = max(max_profit, arr[i] - min_price) # Update min_price to be the lowest price seen so far min_price = min(min_price, arr[i]) return max_profit if max_profit >= k else 0"},{"question":"Vanya and her little brother Vova are playing a game with cubes. Vova, just like any other little kid, finds it amusing to build a tower with his cubes and then knock it over. Vanya, on the other hand, is more interested in sorting things. So, she decides to help Vova arrange his cubes in a particular order. Vova has n cubes, and each cube has a distinct size denoted by an integer from 1 to n. Vova wants to stack them to form a tower while ensuring that the cubes with even sizes are on top of the cubes with odd sizes. Each cube can only be placed directly on top of a larger cube. Vanya likes to challenge Vova, so she sets a condition: the cubes should be rearranged in such a way that the resulting stack satisfies both Vova\'s and Vanya\'s criteria. Can you help Vanya find a way to arrange the cubes in the desired order, or determine if it is impossible? # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of cubes. - The second line contains n distinct integers representing the sizes of the cubes. # Output - If it\'s possible to arrange the cubes in the order described, print \\"YES\\" followed by the order of cubes from bottom to top. Otherwise, print \\"NO\\". # Example Input ``` 7 5 3 6 1 8 4 2 ``` Output ``` YES 1 3 5 6 8 4 2 ``` Explanation In the example above, odd-sized cubes `[1, 3, 5]` form the base in increasing order and even-sized cubes `[2, 4, 6, 8]` are stacked on top of them in decreasing order. Hence, the resulting order `[1, 3, 5, 6, 8, 4, 2]` is valid based on the given criteria.","solution":"def rearrange_cubes(n, cubes): Rearranges the cubes so the cubes with odd sizes are on the bottom in increasing order and cubes with even sizes are on top in decreasing order. Parameters: n (int): Number of cubes. cubes (List[int]): The sizes of the cubes. Returns: Tuple[str, List[int]]: \\"YES\\" and the rearranged list if possible, otherwise \\"NO\\". odds = sorted([cube for cube in cubes if cube % 2 != 0]) evens = sorted([cube for cube in cubes if cube % 2 == 0], reverse=True) arranged_cubes = odds + evens return \\"YES\\", arranged_cubes"},{"question":"Tom the Gardener is planning to grow a unique sequence of plants in his garden. Each type of plant is represented by a unique integer height. Tom wants to plant his plants in such a way that the absolute difference between the heights of any two adjacent plants is minimized as much as possible. Given an array of integers representing the heights of plants, help Tom determine the sequence of plants that minimizes the maximum absolute difference between the heights of adjacent plants. The input consists of multiple test cases. For each test case, the output should be a permutation of the array such that the maximum absolute difference between heights of adjacent plants is minimized. For example: Input: ``` 3 3 1 3 2 4 10 1 8 2 5 6 3 9 2 5 ``` Output: ``` 1 2 3 1 2 8 10 2 3 5 6 9 ``` In the above example, the input includes 3 test cases. In each set, the array of heights needs to be rearranged to minimize the maximum difference between the heights of neighboring plants. Input: - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - The first line of each test case contains an integer n (2 ≤ n ≤ 1000) — the number of plants. - The second line of each test case contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the plants. Output: - For each test case, output a single line containing a permutation of the array such that the maximum absolute difference between the heights of adjacent plants is minimized. If there are multiple answers, print any of them.","solution":"def minimize_max_difference(t, test_cases): res = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] heights.sort() # To achieve the minimized maximum difference, we can alternate picking elements starting from the ends permutation = [] left, right = 0, n - 1 while left <= right: if left == right: permutation.append(heights[left]) else: permutation.append(heights[left]) permutation.append(heights[right]) left += 1 right -= 1 res.append(permutation) return res # Example usage: # T = 3 # Test cases = [(3, [1, 3, 2]), (4, [10, 1, 8, 2]), (5, [6, 3, 9, 2, 5])] # Output: [[1, 3, 2], [1, 10, 2, 8], [2, 9, 3, 6, 5]]"},{"question":"David is a fan of an MMORPG (Massively Multiplayer Online Role-Playing Game) where players can create guilds and go on adventures together. In the game, each guild is identified by a unique number, and guild members get experience points (XP) in two primary ways: 1. Completing quests: Each quest gives a fixed number of XP points. 2. Battling monsters: Each monster defeated gives XP points proportional to the strength of the monster. David\'s guild wants to calculate total XP gained after a series of events. You have to calculate the XP for each type of event and then provide the total. There are three types of events: 1. \'quest x\': Denotes that the guild completed a quest and received `x` XP points. 2. \'battle x y\': Denotes that the guild fought against `y` monsters each with `x` strength, and each monster of strength `x` gives `2 * x` XP points. 3. \'total\': A query that asks for the total XP gained up to that point. Write a program that processes a list of these events and outputs the total XP after handling \'total\' queries. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of events. - The following `n` lines each describe an event in one of the formats \'quest x\', \'battle x y\', or \'total\', as described above. It is guaranteed that `1 ≤ x, y ≤ 10^9`. # Output: - Each time a \'total\' event is encountered, print the total number of XP gained so far. # Example: Input: ``` 6 quest 50 battle 10 3 total quest 40 battle 20 2 total ``` Output: ``` 110 230 ``` - After the first \'total\' command, the total XP is 50 + (10 * 2 * 3) = 50 + 60 = 110. - After the second \'total\' command, the total XP is 110 + 40 + (20 * 2 * 2) = 110 + 40 + 80 = 230.","solution":"def calculate_experience(events): total_xp = 0 results = [] for event in events: parts = event.split() if parts[0] == \'quest\': total_xp += int(parts[1]) elif parts[0] == \'battle\': strength = int(parts[1]) number = int(parts[2]) total_xp += strength * 2 * number elif parts[0] == \'total\': results.append(total_xp) return results"},{"question":"You are tasked with merging inventory data from different warehousing systems into a unified format for analysis. Each system provides inventory data in different structures, but we assume a simplified scenario where data from each system is presented in a similar format. Given the inventory data from multiple systems in the following format: ``` System ID Product ID, Product Name, Quantity, Price per Unit Product ID, Product Name, Quantity, Price per Unit ... ``` Where: - **System ID** is a unique identifier for the system providing the data. - **Product ID** is a unique identifier for the product within that system. - **Product Name** is the name of the product. - **Quantity** is the stock quantity of the product in the inventory. - **Price per Unit** is the price for one unit of the product. Your goal is to merge the inventory data, summing the quantities for the same product across different systems and considering the price per unit from the system with the highest quantity for that product. If multiple systems have the same highest quantity, consider the lowest price among them. **Input:** - The first line of input contains the integer **n** (1 ≤ n ≤ 10), the number of systems. - The next lines contain the data from each system in the format described above. The number of rows for each system varies. **Output:** - Output the merged inventory data in the following format: ``` Product ID, Product Name, Total Quantity, Price per Unit ``` - The output should be sorted based on lexicographical order of Product IDs. **Example:** **Input:** ``` 2 1 A1, Apple, 50, 1.20 A2, Banana, 30, 0.50 2 A1, Apple, 30, 1.10 A3, Cherry, 20, 2.50 ``` **Output:** ``` A1, Apple, 80, 1.20 A2, Banana, 30, 0.50 A3, Cherry, 20, 2.50 ```","solution":"def merge_inventory_data(n, system_data): inventory = {} for sys_data in system_data: sys_lines = sys_data.split(\'n\') system_id = sys_lines[0] # First line is the system ID, we can skip using it product_lines = sys_lines[1:] for line in product_lines: product_id, product_name, quantity, price = line.split(\', \') quantity = int(quantity) price = float(price) if product_id not in inventory: inventory[product_id] = { \'product_name\': product_name, \'total_quantity\': quantity, \'price_per_unit\': price } else: product_info = inventory[product_id] product_info[\'total_quantity\'] += quantity # Update the price per unit based on the highest quantity if product_info[\'total_quantity\'] == quantity: product_info[\'price_per_unit\'] = price else: if quantity > (product_info[\'total_quantity\'] - quantity) or ( quantity == (product_info[\'total_quantity\'] - quantity) and price < product_info[\'price_per_unit\'] ): product_info[\'price_per_unit\'] = price # Sort the inventory by Product ID sorted_inventory = sorted(inventory.items(), key=lambda x: x[0]) result = [] for product_id, details in sorted_inventory: result.append(f\\"{product_id}, {details[\'product_name\']}, {details[\'total_quantity\']}, {details[\'price_per_unit\']:.2f}\\") return result"},{"question":"You are given an array of integers where each element represents the height of a building. You need to determine if it is possible to rearrange the buildings in such a way that the difference in height between any two adjacent buildings does not exceed a given threshold value, `k`. If it is possible, print the arrangement. If it is not, print \\"Not Possible\\". For example, given `a=[3, 1, 4, 2]` and `k=2`, one possible arrangement is `[1, 3, 2, 4]`. The first line of the input contains one integer `t` (`1 ≤ t ≤ 1000`) – the number of test cases. Each test case starts with two integers `n` (`2 ≤ n ≤ 50`) – the number of buildings, and `k` (`1 ≤ k ≤ 100`) – the maximum allowed height difference between adjacent buildings. The next line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 1000`) representing the initial heights of the buildings. For each test case, output \\"Possible\\" followed by the list of heights if it is possible to rearrange the buildings to satisfy the condition, or \\"Not Possible\\" if no such arrangement exists. Example Input: ``` 2 4 2 3 1 4 2 3 1 5 7 5 ``` Example Output: ``` Possible 1 3 2 4 Not Possible ```","solution":"def can_rearrange_buildings(buildings, k): buildings.sort() # Check if rearranged buildings meet the criteria for i in range(1, len(buildings)): if abs(buildings[i] - buildings[i-1]) > k: return \\"Not Possible\\" return \\"Possible\\", buildings def process_test_cases(t, test_cases): results = [] for i in range(t): n, k, buildings = test_cases[i] result = can_rearrange_buildings(buildings, k) results.append(result) return results"},{"question":"The employees of a company are working on a project that requires them to communicate frequently with each other. The manager wants to determine the minimum number of communication channels required so that every employee can communicate directly or indirectly with every other employee. The company has n employees, and each pair of employees can form a communication channel if they are working together on the same task. Given the list of tasks being worked on and the employees involved in each task, find the minimum number of communication channels required. The first line of input contains an integer n (1 leq n leq 1{,}000) — the number of employees. The second line contains an integer m (1 leq m leq 5{,}000) — the number of tasks. Each of the next m lines contains the task description: an integer k (1 leq k leq n), followed by k integers representing the employee numbers working on the task. Output a single integer representing the minimum number of communication channels required. # Example Input ``` 5 3 3 1 2 3 2 2 4 2 3 5 ``` Output ``` 1 ``` # Explanation In the example, a single communication channel suffices. This could include all employees indirectly connected through tasks. For instance, employee 1 can communicate with employee 2 and 3 through the first task, employee 2 can communicate with employee 4 through the second task, and employee 3 can communicate with employee 5 through the third task, forming one big connected network.","solution":"def find_minimum_channels(n, m, tasks): from collections import defaultdict # A default dictionary to keep track of graph of employees working together employees_graph = defaultdict(set) # Build the graph such that each employee working on the same task is connected for task in tasks: k = task[0] group = task[1:] for i in range(k): for j in range(i + 1, k): employees_graph[group[i]].add(group[j]) employees_graph[group[j]].add(group[i]) # To keep track of visited employees visited = [False] * (n + 1) def dfs(employee): stack = [employee] while stack: emp = stack.pop() for neighbor in employees_graph[emp]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Counting disconnected components components = 0 for employee in range(1, n + 1): if not visited[employee]: components += 1 visited[employee] = True dfs(employee) return components # Example Usage n = 5 m = 3 tasks = [ (3, 1, 2, 3), (2, 2, 4), (2, 3, 5) ] print(find_minimum_channels(n, m, tasks)) # Output: 1"},{"question":"You are given a matrix with n rows and m columns. Each cell in the matrix contains a non-negative integer. You can perform two types of operations: - Row Swap: Swap any two rows of the matrix. - Column Swap: Swap any two columns of the matrix. Your task is to find out if you can rearrange the matrix such that all rows and all columns are sorted in non-decreasing order. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50). Each of the next n lines contains m integers separated by spaces, representing the matrix. Output \\"YES\\" if it is possible to rearrange the matrix with the allowed operations. Otherwise, output \\"NO\\". Example: ``` Input: 3 3 3 2 1 6 1 4 5 4 3 Output: YES Input: 2 2 1 2 3 1 Output: NO ```","solution":"def can_sort_matrix(n, m, matrix): Determines if the matrix can be rearranged such that all rows and columns are sorted in non-decreasing order. Args: n : int : number of rows m : int : number of columns matrix : List[List[int]] : the matrix Returns: str : \\"YES\\" if the matrix can be sorted as required, \\"NO\\" otherwise sorted_rows = sorted([sorted(row) for row in matrix]) sorted_cols = sorted([sorted(col) for col in zip(*matrix)]) return \\"YES\\" if all(sorted_rows[i][j] == sorted_cols[j][i] for i in range(n) for j in range(m)) else \\"NO\\" # Example usage if __name__ == \\"__main__\\": n1, m1 = 3, 3 matrix1 = [ [3, 2, 1], [6, 1, 4], [5, 4, 3] ] print(can_sort_matrix(n1, m1, matrix1)) # Expected: YES n2, m2 = 2, 2 matrix2 = [ [1, 2], [3, 1] ] print(can_sort_matrix(n2, m2, matrix2)) # Expected: NO"},{"question":"An internet startup company in Silicon Valley has been gaining traction due to its innovative approach to powering its data centers using renewable energy sources. The company monitors the energy consumption and generation of its data centers in real-time and needs help analyzing the data to optimize the performance. The data is provided as a sequence of events, where each event is either a power consumption or power generation report from a data center. Each event is represented as a string of the form \\"+ G X\\" or \\"- C X\\", where: - `G` is the ID of the data center that generated power. - `C` is the ID of the data center that consumed power. - `X` is the amount of power in units associated with that event, which is an integer between 1 and 106. To ensure the data centers operate efficiently, the company wants to know the maximum amount of power that was simultaneously generated at any point in time. The first line of input contains a positive integer n (1 ≤ n ≤ 100) — the number of events in the log. The following n lines each describe an event in the format mentioned above. You need to determine and print a single integer — the maximum amount of power that was simultaneously generated at any point based on the provided log of events. Example input: ``` 5 + 1 10 + 2 20 - 1 5 + 3 15 - 2 10 ``` Example output: ``` 40 ``` In the example above, the maximum simultaneous power generation occurs after the events \\"+ 1 10\\", \\"+ 2 20\\", and \\"+ 3 15\\", which results in a total power generation of 45 units. The subsequent power consumption events reduce this generation, but the maximum observed was 40 units when considering the consumption of -5 and -10 from respective events.","solution":"def max_simultaneous_generation(events): Returns the maximum amount of power generated simultaneously based on the events. Args: events (list of str): List of event strings in the format \\"+ G X\\" or \\"- C X\\". Returns: int: The maximum simultaneous power generation. current_power = {} max_power = 0 current_total_power = 0 for event in events: operation, id, amount = event.split() amount = int(amount) if operation == \'+\': if id in current_power: current_power[id] += amount else: current_power[id] = amount current_total_power += amount else: current_power[id] -= amount current_total_power -= amount if current_total_power > max_power: max_power = current_total_power return max_power # Example usage for manual testing if __name__ == \\"__main__\\": n = 5 events = [\\"+ 1 10\\", \\"+ 2 20\\", \\"- 1 5\\", \\"+ 3 15\\", \\"- 2 10\\"] print(max_simultaneous_generation(events)) # Output: 45"},{"question":"Kathy is working on a multithreading project where she has to synchronize threads using a barrier. She has n threads numbered from 1 to n, and each thread has a unique execution time represented by an array a of length n. The barrier is configured such that it allows threads to start up to a certain threshold time t simultaneously. If a thread\'s execution time exceeds t, it should wait for the next round. In each round, all threads that have their execution time within the threshold t can start, and those that exceed must wait. Your task is to determine the minimum number of rounds required to execute all the threads, given the threshold time t for synchronization at the barrier. The first line contains two integers n and t (1 ≤ n ≤ 2·10^5, 1 ≤ t ≤ 10^9) — the number of threads and the threshold time. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the execution times of the threads. Print the minimum number of rounds required to execute all the threads considering the barrier threshold time t. In the first sample, Kathy can execute all threads in a single round since all execution times are within the threshold t. # Example **Input:** ``` 5 10 2 3 7 4 8 ``` **Output:** ``` 1 ``` **Input:** ``` 6 5 11 2 8 3 1 7 ``` **Output:** ``` 3 ```","solution":"from math import ceil def min_rounds_to_execute_threads(n, t, a): Determines the minimum number of rounds required to execute all threads within the given threshold time t. Parameters: n (int): The number of threads. t (int): The threshold time. a (list): List of execution times of the threads. Returns: int: The minimum number of rounds. a.sort() rounds = ceil(a[-1] / t) return rounds"},{"question":"You are managing a fleet of delivery robots for a large warehouse. Each robot has a maximum battery capacity and a current battery charge. You need to schedule which robots to use for a delivery such that the total battery charge used is minimized, while still ensuring that the total battery capacity of the selected robots meets the delivery requirement. Formally, you are given the following parameters: - An integer d (1 le d le 10^5), the delivery requirement, which is the minimum battery capacity needed for the delivery. - An integer n (1 le n le 10^5), the number of robots. - Two arrays of length n. The first array, capacity, where capacity[i] represents the maximum battery capacity of the i-th robot (1 le capacity[i] le 10^6). The second array, charge, where charge[i] represents the current battery charge of the i-th robot (1 le charge[i] le 10^6). You need to select a subset of robots whose total battery capacity is at least d, and you want to minimize the total charge used from these robots. Write a program that determines the indices of the robots to be used, and the minimum total battery charge used. If it is not possible to meet the delivery requirement, output -1. The first line contains two integers, d and n. The second line contains n integers representing the array capacity. The third line contains n integers representing the array charge. Output the minimum total battery charge needed to meet the delivery requirement. If it is not possible, output -1. # Example **Input:** ``` 10 5 4 3 6 7 5 2 1 3 2 4 ``` **Output:** ``` 5 ``` **Explanation:** One possible solution is to select the robots with capacities 6 and 4. This gives us a total capacity of 10 and a total charge of 3+2=5, which is the minimum possible total charge for this delivery requirement. # Constraints - The input size and constraints ensure that the solution can be computed efficiently. - The sum of capacities might exceed d, so finding the minimal charge combination that meets exactly or just surpasses d requires careful selection.","solution":"def min_total_charge(d, n, capacities, charges): Determines the indices of the robots to be used, and the minimum total battery charge used to meet the delivery requirement. If it is not possible to meet the delivery requirement, returns -1. Parameters: d (int): Delivery requirement. n (int): Number of robots. capacities (list): List of integers representing each robot\'s maximum battery capacity. charges (list): List of integers representing each robot\'s current battery charge. Returns: int: Minimum total battery charge needed to meet the delivery requirement or -1 if it is not possible. # Combine capacity and charge into a list of tuples and sort by charge robots = sorted(zip(capacities, charges), key=lambda x: x[1]) total_capacity = 0 total_charge = 0 for capacity, charge in robots: total_capacity += capacity total_charge += charge if total_capacity >= d: return total_charge return -1 # If cannot meet the delivery requirement"},{"question":"Some programming languages have peculiar rules of variable initialization. One of the more notorious examples is the language \\"LunaScript.\\" In LunaScript, variables are initialized with the current value of a global counter which increments by 1 every time a new variable is declared. You are given a list of operations on variables in LunaScript. Each operation is either the declaration of a new variable, or an assignment of a value to an existing variable. Your task is to simulate this behavior and return the final values of all variables after performing a list of operations. The operations follow these two forms: 1. `decl var_name`: Declares a new variable `var_name`. 2. `assign var_name value`: Assigns the `value` to the existing variable `var_name`. # Input - The first line contains a single integer `m` (1 ≤ m ≤ 10000) — the number of operations. - Each of the next `m` lines contains an operation as described above. # Output Output the final values of all variables in lexicographical order, each on a new line in the format `var_name value`. # Example Input ``` 5 decl a decl b assign a 10 decl c assign c 7 ``` Output ``` a 10 b 2 c 7 ``` Explanation After the first declaration, `a` is initialized with 1. After the second declaration, `b` is initialized with 2. The third operation assigns `10` to `a`. After the fourth declaration, `c` is initialized with 3. The fifth operation assigns `7` to `c`. All variables and their final values are: a -> 10 b -> 2 c -> 7 The resulting output should list these variables in lexicographical order.","solution":"def simulate_lunascript(operations): variables = {} global_counter = 1 for operation in operations: parts = operation.split() if parts[0] == \\"decl\\": var_name = parts[1] variables[var_name] = global_counter global_counter += 1 elif parts[0] == \\"assign\\": var_name = parts[1] value = int(parts[2]) variables[var_name] = value sorted_vars = sorted(variables.items()) return sorted_vars"},{"question":"Given an array of integers, you are asked to perform the following types of operations: 1. Add a number to the end of the array. 2. Remove a number from the end of the array. 3. Calculate the maximum subarray sum. The first line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. Each of the following `q` lines describes a query and contains one of the following formats: - `1 x` (1 ≤ x ≤ 10^9): Add the integer `x` to the end of the array. - `2`: Remove the last integer from the array. - `3`: Calculate and print the maximum subarray sum of the current array. It is guaranteed that there are no more than 100,000 queries in total. For each query of type `3`, output a single integer — the maximum subarray sum of the current array. **Example:** Input: ``` 6 1 3 1 -2 1 5 3 2 3 ``` Output: ``` 6 3 ``` **Note:** - In the first query sequence, `1 3` adds `3` to the array making it `[3]`. - The second query `1 -2` adds `-2` to the array making it `[3, -2]`. - The third query `1 5` adds `5` to the array making it `[3, -2, 5]`. - The fourth query `3` calculates the maximum subarray sum of `[3, -2, 5]`, which is `3 + (-2) + 5 = 6`. - The fifth query `2` removes the last element `5` making the array `[3, -2]`. - The sixth query `3` calculates the maximum subarray sum of `[3, -2]`, which is `3`.","solution":"def max_subarray_sum(arr): Helper function to calculate the maximum subarray sum using Kadane\'s Algorithm. if not arr: return 0 max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_queries(queries): Processes a list of queries and returns the results for type 3 queries. Parameters: queries (list of str): A list of queries in string format. Returns: list of int: The results of type 3 queries. arr = [] results = [] for query in queries: parts = query.split() if parts[0] == \'1\': arr.append(int(parts[1])) elif parts[0] == \'2\': if arr: arr.pop() elif parts[0] == \'3\': results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a string containing only characters \'a\' and \'b\'. You can perform two types of operations: 1. Swap any two adjacent characters. 2. Replace any character with \'a\' or \'b\'. Your goal is to transform the string such that it contains alternating characters (i.e., \\"ababab...\\" or \\"bababa...\\"). Determine the minimum number of operations required to achieve the goal. The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the string. The second line contains the string of length n consisting of only characters \'a\' and \'b\'. Output a single integer denoting the minimum number of operations required to transform the string into an alternating character sequence. Example: Input: 4 baaa Output: 1 Explanation: Swap the first two characters to make the string \\"abaa\\" or \\"aabb\\", and then change the second \'a\' to \'b\' to make \\"abab\\". Thus, only 1 operation is needed.","solution":"def min_operations_to_alternate(n, s): def mismatch_count(pattern, s): return sum(1 for i in range(len(s)) if s[i] != pattern[i % 2]) pattern1 = \\"ab\\" * (n // 2) + \\"a\\" * (n % 2) pattern2 = \\"ba\\" * (n // 2) + \\"b\\" * (n % 2) ops_pattern1 = mismatch_count(pattern1, s) ops_pattern2 = mismatch_count(pattern2, s) return min(ops_pattern1, ops_pattern2)"},{"question":"You are tasked with developing a new feature for a parking garage management system. Each parking spot in the garage is either occupied or available. Additionally, each parking spot comes with certain attributes, specifically the type of vehicle that can park there (such as car, motorcycle, or bus), and whether the spot is reserved for specific groups (like handicapped or VIP). You are given a list of parking spots, each represented by a dictionary containing the following keys: - `id`: a unique identifier for the parking spot (integer) - `status`: either \\"available\\" or \\"occupied\\" (string) - `vehicle_type`: type of vehicle that can park there (one of \\"car\\", \\"motorcycle\\", \\"bus\\") - `reserved`: group for which the spot is reserved, or `None` if it is not reserved (string or `None`) Your task is to implement a function `find_spot` that locates an available parking spot for a given vehicle. The function should prioritize spots that are: 1. Available 2. Can accommodate the given vehicle type 3. Are not reserved (unless the vehicle belongs to a special group that matches the reservation) If multiple spots satisfy the criteria, return the one with the smallest `id`. If no such spot is available, return `None`. # Function Signature ```python def find_spot(parking_spots: List[dict], vehicle_type: str, special_group: str=None) -> Union[int, None]: pass ``` # Input - `parking_spots` (List[Dict]): A list of dictionaries representing parking spots - `vehicle_type` (str): The type of vehicle that needs parking - `special_group` (str, optional): The special group entitlement of the vehicle, if any (default is `None`) # Output - An integer representing the id of the suitable parking spot, or `None` if no suitable spot is found # Example ```python parking_spots = [ {\\"id\\": 1, \\"status\\": \\"available\\", \\"vehicle_type\\": \\"car\\", \\"reserved\\": None}, {\\"id\\": 2, \\"status\\": \\"occupied\\", \\"vehicle_type\\": \\"car\\", \\"reserved\\": None}, {\\"id\\": 3, \\"status\\": \\"available\\", \\"vehicle_type\\": \\"motorcycle\\", \\"reserved\\": \\"VIP\\"}, {\\"id\\": 4, \\"status\\": \\"available\\", \\"vehicle_type\\": \\"car\\", \\"reserved\\": \\"VIP\\"} ] print(find_spot(parking_spots, \\"car\\")) # Output: 1 print(find_spot(parking_spots, \\"motorcycle\\")) # Output: None print(find_spot(parking_spots, \\"motorcycle\\", \\"VIP\\")) # Output: 3 print(find_spot(parking_spots, \\"car\\", \\"VIP\\")) # Output: 4 ``` # Notes 1. The function should prioritize finding an available spot first, then check if it can accommodate the vehicle type, and lastly consider the reservation rules. 2. As an optimization, consider the traversal of the list with early exits once a suitable spot is found. 3. Aim for code clarity and maintainability while ensuring efficient handling of the task.","solution":"from typing import List, Dict, Union def find_spot(parking_spots: List[Dict], vehicle_type: str, special_group: str = None) -> Union[int, None]: Locates an available parking spot for a given vehicle type and special group. Args: - parking_spots (List[Dict]): A list of dictionaries representing parking spots. - vehicle_type (str): The type of vehicle that needs parking. - special_group (str, optional): The special group entitlement of the vehicle, if any. Returns: - An integer representing the id of the suitable parking spot, or None if no suitable spot is found. for spot in sorted(parking_spots, key=lambda x: x[\\"id\\"]): if spot[\\"status\\"] == \\"available\\" and spot[\\"vehicle_type\\"] == vehicle_type: if spot[\\"reserved\\"] is None or spot[\\"reserved\\"] == special_group: return spot[\\"id\\"] return None"},{"question":"You are given a sequence of positive integers X_1, X_2, ..., X_n and a sequence of positive integers Y_1, Y_2, ..., Y_m. You are to determine if the entire sequence Y is a subsequence of X. In other words, you need to determine if it is possible to remove some (possibly zero) elements from X to obtain the sequence Y. For example, if the sequence X is [1, 3, 2, 1, 5, 7] and the sequence Y is [3, 1, 7], then Y is a subsequence of X. However, if the sequence Y is [3, 7, 1], then Y is not a subsequence of X because the relative order of elements is not maintained. The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^5) — the lengths of the sequences X and Y, respectively. The second line contains n integers X_1, X_2, ..., X_n (1 ≤ X_i ≤ 10^9) — the elements of sequence X. The third line contains m integers Y_1, Y_2, ..., Y_m (1 ≤ Y_i ≤ 10^9) — the elements of sequence Y. Output \\"YES\\" if Y is a subsequence of X, and \\"NO\\" otherwise. Example: Input: 6 3 1 3 2 1 5 7 3 1 7 Output: YES Input: 6 3 1 3 2 1 5 7 3 7 1 Output: NO","solution":"def is_subsequence(n, m, X, Y): Determine if sequence Y is a subsequence of sequence X. Parameters: n (int): Length of sequence X. m (int): Length of sequence Y. X (list of int): Sequence X. Y (list of int): Sequence Y. Returns: str: \\"YES\\" if Y is a subsequence of X, \\"NO\\" otherwise. i, j = 0, 0 while i < n and j < m: if X[i] == Y[j]: j += 1 i += 1 return \\"YES\\" if j == m else \\"NO\\""},{"question":"You are a software developer working on an autonomous robotic system for delivering packages. The robotic system is represented by a grid. Each cell in the grid can either be empty or contain an obstacle. The robot can move up, down, left, or right but cannot move diagonally. It can also not move through obstacles. Your task is to find the shortest path from the start position to the delivery position if it exists. The grid is given as a 2D array of integers where 0 represents an empty cell and 1 represents an obstacle. You are given the start and delivery positions in terms of their row and column indices. The input will be provided as follows: - The first line contains two integers m and n (1 ≤ m, n ≤ 500) representing the number of rows and columns in the grid. - The next m lines each contain n integers (either 0 or 1) representing the grid. - The next line contains four integers start_x, start_y, delivery_x, delivery_y representing the coordinates of the start and delivery positions respectively (0 ≤ start_x, start_y, delivery_x, delivery_y < m, n). Your task is to find and print the length of the shortest path from the start position to the delivery position. If there is no valid path, print -1. For example, in the given grid: ``` 4 5 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 3 4 ``` You can visualize the grid like this: ``` 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 ``` The shortest path from (0, 0) to (3, 4) would be: 0,0 -> 1,0 -> 2,0 -> 2,1 -> 2,2 -> 2,3 -> 3,3 -> 3,4 (length is 7). In output, you would print: ``` 7 ``` But if there is no possible path due to obstacles, for instance, in: ``` 2 2 0 1 1 0 0 0 1 1 ``` The output would be: ``` -1 ```","solution":"from collections import deque def shortest_path(m, n, grid, start_x, start_y, delivery_x, delivery_y): Finds the shortest path in a grid from a start position to a delivery position using BFS. Args: m (int): number of rows n (int): number of columns grid (List[List[int]]): 2D list representing the grid start_x (int): starting row index start_y (int): starting column index delivery_x (int): delivery row index delivery_y (int): delivery column index Returns: int: length of the shortest path, -1 if no path exists. if grid[start_x][start_y] == 1 or grid[delivery_x][delivery_y] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # directions for up, down, left, right queue = deque([(start_x, start_y, 0)]) # (x, y, distance) visited = set((start_x, start_y)) while queue: x, y, dist = queue.popleft() if x == delivery_x and y == delivery_y: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"At the linguistics conference, Professor Hexa is organizing a palindrome writing challenge for students. She gives the participants a set of strings and asks them to make as many palindromic strings as possible by concatenating exactly two different strings from the given set. A string is considered palindromic if it reads the same backward as forward. Your task is to determine the maximum number of distinct palindromic strings that can be formed from pairs of the given strings and list all such pairs. The first line of input contains a single integer n (2 ≤ n ≤ 50000), the number of strings in the set. Each of the next n lines contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Output the maximum number of distinct palindromic pairs that can be formed and list each of these pairs, each in a new line. Each pair should be output separated by a space, with the lexicographically smaller string first. For example, given the input: ``` 5 abc cba bca acb xxy ``` The output should be: ``` 2 abc cba acb bca ``` In this example, \\"abc\\" + \\"cba\\" and \\"acb\\" + \\"bca\\" forms distinct palindromic strings. Note: - Ensure the pairs are output in lexicographical order. - If multiple pairs can be formed, each should be unique in terms of the order of pairing.","solution":"def find_palindromic_pairs(strings): from collections import defaultdict # Create a dictionary to store reversed strings and corresponding original strings reverse_map = defaultdict(list) # Store all reversed strings in the reverse_map for s in strings: reverse_map[s[::-1]].append(s) used_pairs = set() palindromic_pairs = [] for s in strings: if s in reverse_map: for reverse_pair in reverse_map[s]: if reverse_pair != s and (reverse_pair, s) not in used_pairs: used_pairs.add((s, reverse_pair)) used_pairs.add((reverse_pair, s)) palindromic_pairs.append((min(s, reverse_pair), max(s, reverse_pair))) # Sort and return the pairs palindromic_pairs.sort() return len(palindromic_pairs), palindromic_pairs"},{"question":"You are given a matrix A of size n times n with non-negative integers. You need to determine whether the matrix can be transformed into a strict upper triangular matrix by changing some of its elements to zero. A matrix is a strict upper triangular matrix if all elements on the main diagonal and below the main diagonal are zero. The matrix B is defined as the strict upper triangular matrix of the same size as A obtained by making some of the elements of A zero. Your task is to determine if such a matrix B exists and print the matrix B if it exists. The first line of the input contains a single integer n (1 le n le 500) — the number of rows and columns in the matrix. The next n lines contain n space-separated integers each, representing the matrix A. Output \\"NO\\" if matrix A cannot be transformed into a strict upper triangular matrix. Otherwise, output \\"YES\\" followed by the matrix B in n lines, each containing n space-separated integers. # Example Input ``` 3 0 1 2 3 0 4 5 6 0 ``` Output ``` YES 0 1 2 0 0 4 0 0 0 ``` Input ``` 2 1 0 0 1 ``` Output ``` NO ```","solution":"def make_strict_upper_triangular(matrix): n = len(matrix) result = [[0]*n for _ in range(n)] for i in range(n): for j in range(i+1, n): if matrix[i][j] == 0: return \\"NO\\" result[i][j] = matrix[i][j] return \\"YES\\", result def format_output(result): if result == \\"NO\\": return \\"NO\\" else: status, b_matrix = result output = [status] for row in b_matrix: output.append(\\" \\".join(map(str, row))) return \\"n\\".join(output)"},{"question":"A large company employs n workers. The company decided to distribute their n workers in k distinct teams to tackle some new projects. Each worker has a skill rating, which is represented by a positive integer. The company wants to ensure that each team has a similar average skill rating. The goal is to minimize the maximum average skill difference between any two teams. More formally, given the skill ratings of n workers and the number of teams k, distribute the workers into k teams such that the maximum absolute difference in average skill rating between any two teams is as small as possible. The first line contains two integers n and k (2 ≤ k ≤ n ≤ 100000) — the number of workers and the number of teams, respectively. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^9), where ai is the skill rating of the i-th worker. Print the minimum possible value of the maximum absolute difference of the average skill ratings between any two teams. In the first sample, it is possible to distribute workers over two teams such that each team has an average skill rating of 1. The difference will be 0. In the second sample, no matter how you split the teams there will always be a difference in average skill ratings of at least 1. In the third sample, distribute the workers such that one team has a single worker with a skill rating of 2, and the other team has all remaining workers. Then the difference in average skill ratings will be minimized.","solution":"def min_max_difference(n, k, skills): Find the minimum possible value of the maximum absolute difference of the average skill ratings between any two teams. skills.sort() # Prefix sum to compute sum of segments efficiently prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + skills[i - 1] # Find minimum difference def average_sum(start, end): return (prefix_sum[end] - prefix_sum[start]) / (end - start) lo, hi = 0, 10**9 while lo < hi: mid = (lo + hi) // 2 # Check if we can divide into k segments with max average differences <= mid teams = 1 current_start = 0 for i in range(1, n + 1): if i < n and abs(average_sum(current_start, i) - average_sum(i, i+1)) > mid: teams += 1 current_start = i if teams <= k: hi = mid else: lo = mid + 1 return lo # Example Function Call n = 3 k = 2 skills = [1, 1, 1] print(min_max_difference(n, k, skills)) # Expected output: 0"},{"question":"Franco is an avid hiker who loves exploring new trails. He has a map of a certain hiking area that consists of n landmarks connected by m trails. Each trail connects two distinct landmarks, and it\'s possible to travel in both directions on any trail. Franco starts his journey at landmark 1 and aims to explore the entire hiking area. Franco prefers taking a circular route, meaning he wants to return to the starting point after visiting all landmarks at least once. If such a route is impossible, he should still try to visit as many landmarks as possible, not necessarily returning to the starting point. Create a function that determines the route Franco should take to visit the maximum number of landmarks and returns to the starting point if possible. If it is not possible to return to the starting point after visiting all landmarks, the function should also determine the total number of landmarks visited and the sequence in which Franco visits them. The input consists of: 1. An integer n (1 ≤ n ≤ 1000) representing the number of landmarks. 2. An integer m (1 ≤ m ≤ 5000) representing the number of trails. 3. Next m lines, each containing two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a trail between landmarks u and v. Output: - If Franco can return to the starting point after visiting all landmarks, print \\"Cycle\\" followed by the sequence of landmarks visited in the form of space-separated integers. - If it\'s not possible, print \\"Path\\" followed by the number of landmarks visited and the sequence of landmarks in the form of space-separated integers. Example: Input: ``` 5 5 1 2 2 3 3 4 4 5 5 1 ``` Output: ``` Cycle 1 2 3 4 5 1 ``` Input: ``` 6 5 1 2 2 3 3 4 4 5 5 6 ``` Output: ``` Path 6 1 2 3 4 5 6 ``` Note: - The input guarantees there are no duplicate trails. - Each trail allows travel in both directions.","solution":"from collections import defaultdict, deque def hiking_route(n, m, trails): graph = defaultdict(list) for u, v in trails: graph[u].append(v) graph[v].append(u) def dfs(v, visited, parent): visited[v] = True path.append(v) for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, visited, v): return True elif neighbor != parent: path.append(neighbor) return True path.pop() return False visited = [False] * (n + 1) path = [] if dfs(1, visited, -1) and len(path) > 1 and path[-1] == path[0]: return [\\"Cycle\\"] + path visited = [False] * (n + 1) path = [] def bfs(start): q = deque([start]) visited[start] = True while q: v = q.popleft() path.append(v) for neighbor in graph[v]: if not visited[neighbor]: visited[neighbor] = True q.append(neighbor) bfs(1) return [\\"Path\\", len(path)] + path"},{"question":"A company decides to organize a game competition. The game can be played solo or in teams, but each team should consist of exactly two members. The goal is to make the competition as inclusive as possible by maximizing the number of participants while treating each participant in the fairest way. You are given a list of participants\' skill levels, where each participant has a distinct skill level. To ensure fairness, the difference in skill levels between any two players in a team must not exceed a given threshold, d. Your task is to form the maximum number of teams with exactly two members each, ensuring the difference in their skill levels is not greater than d. Additionally, a participant can be on only one team. The first line contains two integers n and d (1 ≤ n ≤ 10^5, 0 ≤ d ≤ 10^4), denoting the number of participants and the maximum allowed difference in skill levels between two teammates. The second line contains n integers representing the skill levels of the participants, which are distinct and sorted in non-decreasing order. Return the maximum number of teams that can be formed. # Input ``` 5 2 1 2 3 5 7 ``` # Output ``` 2 ``` # Explanation In the above sample, the optimal way to form teams is to pair participants with skill levels (1, 2) and (3, 5). The participant with a skill level of 7 cannot form a team because there are no remaining participants within the skill level difference threshold. Therefore, the maximum number of teams is 2.","solution":"def max_teams(n, d, skill_levels): Function to compute the maximum number of teams with the given constraints. n : int : Number of participants d : int : Maximum allowed difference in skill levels between teammates skill_levels : list of int : List of skill levels of participants in non-decreasing order Returns: int : Maximum number of teams that can be formed teams = 0 i = 0 while i < n - 1: if skill_levels[i + 1] - skill_levels[i] <= d: teams += 1 i += 2 else: i += 1 return teams"},{"question":"The kingdom of Flatland is represented by a grid with n rows and m columns. The grid cells are numbered from 1 to n from top to bottom and from 1 to m from left to right. Each cell contains an elevation, which is an integer value. Flatland recently experienced heavy rainfall, causing water to accumulate in various areas of varying depths. Water can only accumulate in a cell if all of its four neighboring cells (up, down, left, right) have higher elevations. Due to the nature of the terrain and the rainfall, you are to compute the total water volume that accumulates in the entire grid after the rain stops. A cell can store water if and only if it has at least one lower neighboring cell and one higher neighboring cell. The amount of water in each cell is determined by the minimum height difference between the cell and its neighboring cells minus the cell\'s elevation. The first line contains two integers n and m (2 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m integers each, representing the elevation of each cell in the grid (0 ≤ elevation ≤ 10^6). Output a single integer — the total volume of water accumulated in the grid. **Example Input:** ``` 3 3 1 2 1 2 1 2 1 2 1 ``` **Example Output:** ``` 1 ```","solution":"import heapq def trapRainWater(elevation_map): if not elevation_map or not elevation_map[0]: return 0 n, m = len(elevation_map), len(elevation_map[0]) visited = [[False for _ in range(m)] for _ in range(n)] heap = [] for i in range(n): for j in range(m): if i == 0 or i == n - 1 or j == 0 or j == m - 1: heapq.heappush(heap, (elevation_map[i][j], i, j)) visited[i][j] = True water = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True water += max(0, height - elevation_map[nx][ny]) new_height = max(height, elevation_map[nx][ny]) heapq.heappush(heap, (new_height, nx, ny)) return water def total_water_acummulation(n, m, grid): return trapRainWater(grid)"},{"question":"The Ice Cream Store has recently updated their ordering system to allow customers to choose their ice cream flavors and toppings more flexibly. Each ice cream cone can have up to three scoops of different flavors, and each scoop can have one topping on top. The store has: - A set of `n` different flavors, numbered from 1 to `n`. - A set of `m` different toppings, numbered from 1 to `m`. A customer can place an order by selecting up to three flavors and optionally choosing a topping for each scoop. Write a program that will receive several orders and validate if each order is possible given the constraints of the store. Each order consists of: - A number indicating the number of scoops (between 1 and 3). - A sequence of pairs, each containing a flavor number and a topping number (or `0` if no topping is chosen). Your task is to determine if each order is valid. An order is considered valid if all chosen flavors and toppings exist within the provided ranges. The input format is as follows: - The first line contains two integers, `n` and `m` (`1 ≤ n, m ≤ 100`), the number of available flavors and toppings, respectively. - The second line contains an integer `t` (`1 ≤ t ≤ 1000`), the number of orders. - The next `t` lines contain the orders, each starting with an integer `k` (`1 ≤ k ≤ 3`), the number of scoops, followed by `k` pairs of integers. Each pair consists of a flavor number and a topping number (or `0` if no topping is chosen). Output one line for each order. Print \\"VALID\\" if the order is possible, and \\"INVALID\\" otherwise. # Example **Input:** ``` 5 3 3 2 1 1 2 2 3 6 0 2 1 3 3 1 4 1 ``` **Output:** ``` VALID INVALID VALID ``` In this example: - The first order has 2 scoops with flavors and toppings that exist, so it\'s valid. - The second order has 3 scoops, but the first scoop has a flavor number (6) that does not exist, so it\'s invalid. - The third order has 1 scoop with a flavor and topping that exist, so it\'s valid.","solution":"def validate_orders(n, m, orders): results = [] for order in orders: k = order[0] valid = True for i in range(k): flavor, topping = order[2 * i + 1], order[2 * i + 2] if not (1 <= flavor <= n) or not (0 <= topping <= m): valid = False break results.append(\\"VALID\\" if valid else \\"INVALID\\") return results"},{"question":"Eve has recently discovered a strange message encoded in a peculiar way. The message is represented by an array of integers, where each integer denotes a symbol. Eve suspects that the message has been encoded by rotating every contiguous subarray of a fixed length `k` to the right by one position. To decode the message, Eve needs to determine the original array before the rotations were applied. Given the encoded array and the value `k`, help Eve reconstruct the original array. For example, if the encoded array is `A = [3, 4, 1, 2, 6, 5, 8, 7]` and `k = 2`, the original array should be `[4, 3, 2, 1, 5, 6, 7, 8]`. The first line of input contains two integers `n` and `k` (1 ≤ `k` ≤ `n` ≤ 200,000), representing the length of the array and the length of the subarrays that were rotated. The second line contains `n` integers `A1, A2, ..., An` (1 ≤ Ai ≤ 10^9), representing the encoded array. Output a single line with `n` integers, representing the original array. # Notes: 1. You need to reverse the rotation in every subarray of length `k`. 2. If `k = 1`, the array remains unchanged. 3. It is guaranteed that `k` is a divisor of `n`. # Example Input ``` 8 2 3 4 1 2 6 5 8 7 ``` Output ``` 4 3 2 1 5 6 7 8 ```","solution":"def decode_message(n, k, A): Decodes an array that has been encoded by rotating every contiguous subarray of length `k` to the right by one position. :param int n: The length of the array. :param int k: The length of the subarrays that were rotated. :param list[int] A: The encoded array. :return: The original array. :rtype: list[int] original = A[:] # Copying the list to maintain the same length for i in range(0, n, k): # Rotate subarray A[i:i+k] to the left by one (reverse the right rotation by one) subarray = A[i:i+k] subarray = subarray[1:] + subarray[:1] original[i:i+k] = subarray return original"},{"question":"In the kingdom of Zorvian, there are n towns connected by m bidirectional roads. Each road has a certain length. The kingdom\'s ruler, King Roth, wants to know if it is possible to travel from town 1 to town n. Given the towns and roads, determine if there is a path from town 1 to town n, and if so, find the shortest distance from town 1 to town n. If it\'s not possible to travel from town 1 to town n, print -1. The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 × 10^5) — the number of towns and the number of roads, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) representing a bidirectional road between towns u and v with length w. Print the shortest distance from town 1 to town n, or -1 if there is no path from town 1 to town n. # Example Input: ``` 4 4 1 2 100 2 3 200 3 4 300 1 4 700 ``` Output: ``` 600 ``` In the example above, the shortest path from town 1 to town 4 is through the towns 1 -> 2 -> 3 -> 4 with a total distance of 100 + 200 + 300 = 600.","solution":"import heapq def shortest_path_in_kingdom(n, m, roads): Find the shortest path from town 1 to town n. :param n: int, number of towns :param m: int, number of roads :param roads: list of tuples, containing (u, v, w) representing roads :return: int, shortest path length from town 1 to town n, or -1 if no path exists graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path pq = [(0, 1)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while pq: current_dist, current_node = heapq.heappop(pq) if current_node == n: return current_dist if current_dist > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[n] == float(\'inf\') else distances[n] # Example usage: # n = 4 # m = 4 # roads = [(1, 2, 100), (2, 3, 200), (3, 4, 300), (1, 4, 700)] # print(shortest_path_in_kingdom(n, m, roads)) # Output: 600"},{"question":"Bob is planning a series of workshops on competitive programming. Each workshop has a specific duration and is held on a specific day. Since he is very organized, he has a fixed timeline from day 1 to day d, and he wants to maximize the number of workshops he can attend fully without overlapping any. Each workshop starts at the beginning of its day and lasts for a certain number of days. Bob needs your help to create an optimal schedule that allows him to attend the maximum number of workshops. You are given the number of days d, the number of workshops n, and an array where each element is a tuple (si, ti) representing the start day and the duration of the ith workshop. Return the maximum number of workshops that Bob can attend without any overlapping workshops. The first line contains two positive integers d and n (1 ≤ d ≤ 1000, 1 ≤ n ≤ 100) — the total number of days and the number of workshops. The next n lines each contain two integers si and ti (1 ≤ si, ti ≤ d) — the start day and duration of each workshop. Output a single integer — the maximum number of workshops Bob can attend fully without overlap. # Example **Input:** ``` 10 3 1 3 2 5 6 2 ``` **Output:** ``` 2 ``` **Explanation:** Bob can attend the workshop starting at day 1 and the workshop starting at day 6. The second workshop is overlapping with the first. In another example: **Input:** ``` 20 4 1 10 5 7 10 5 17 3 ``` **Output:** ``` 2 ``` **Explanation:** Bob can attend the workshop starting at day 1 and the workshop starting at day 17. The second and third workshops overlap with the first one.","solution":"def max_workshops(d, n, workshops): Returns the maximum number of non-overlapping workshops Bob can attend. :param d: Total number of days :param n: Number of workshops :param workshops: List of tuples, where each tuple (si, ti) represents the start day and duration of a workshop :return: Maximum number of non-overlapping workshops # Calculate end time for each workshop workshops = [(s, s + t - 1) for s, t in workshops] # Sort workshops based on their end times workshops.sort(key=lambda x: x[1]) max_count = 0 current_end = 0 for start, end in workshops: if start > current_end: max_count += 1 current_end = end return max_count"},{"question":"A large corporation has a fleet of company cars. Each car has its own fuel efficiency (measured in kilometers per liter) and a unique ID number. The company wants to plan the most fuel-efficient way to send cars on fuel delivery missions. Each mission requires sending cars from a central depot to a specified destination and then back, with a potential list of candidate cars to choose from. You are given n cars and m missions. Each car is characterized by two parameters: its unique ID and its fuel efficiency. Each mission requires you to determine which of the candidate cars can complete the round trip with the least amount of fuel consumption. Each mission is defined by a distance to the destination and a list of candidate car IDs. For every mission, you need to find the ID of the most fuel-efficient car from the given list that can complete the round trip. Your task is to print the ID of the car that will consume the least fuel for each mission. If there are multiple cars with the same fuel efficiency, output the car with the smallest ID. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of cars. The next n lines describe the cars. Each line contains the car\'s ID (a unique positive integer) and its fuel efficiency (a positive real number representing kilometers per liter). The next line contains an integer m (1 ≤ m ≤ 100000) — the number of missions. The next m lines describe the missions. Each line contains the distance d (1 ≤ d ≤ 100000) and a list of candidate car IDs. For each mission, find the car from the candidate list that can complete a round trip (to the destination and back) using the least amount of fuel. Output the ID of the car that will consume the least fuel for each mission in a new line. Example: Input: 5 1 15.0 2 20.0 3 12.0 4 18.0 5 25.0 3 300 1 2 3 150 2 4 5 400 3 4 5 Output: 2 5 5 Notes: In the first mission, car 2 is the most fuel-efficient among 1, 2, and 3. In the second mission, car 5 is the most fuel-efficient among 2, 4, and 5. In the third mission, car 5 is the most fuel-efficient among 3, 4, and 5, given that car 5 has the highest fuel efficiency among them.","solution":"def find_most_fuel_efficient_car(n, cars, m, missions): car_efficiency = {car_id: eff for car_id, eff in cars} results = [] for distance, candidate_ids in missions: min_fuel = float(\'inf\') best_car_id = None for car_id in candidate_ids: fuel_needed = (2 * distance) / car_efficiency[car_id] if fuel_needed < min_fuel or (fuel_needed == min_fuel and car_id < best_car_id): min_fuel = fuel_needed best_car_id = car_id results.append(best_car_id) return results"},{"question":"Alice loves sequences, especially those involving unique insertions and transformations. She\'s interested in sequences where each number can give rise to new numbers by adding a predefined difference. Given a number `n` and a difference `d`, Alice wants to generate a sequence of length `n` that starts with the number `1` and constructs further numbers by adding the difference `d` to the last number in the sequence. However, if a number constructed this way has already been added to the sequence, she should skip it and continue this process until the sequence reaches length `n`. Help Alice generate the sequence and determine if it\'s possible to form a sequence of length `n` with the provided constraints. The first input line contains two integers `n` and `d` (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000). Output a sequence of length `n` where each element is unique and follows above stated rules. If it is not possible to generate such a sequence, output \\"No\\". Examples: Input: 5 2 Output: 1 3 5 7 9 Input: 5 4 Output: 1 5 9 13 17 Input: 1 1000 Output: 1 Input: 5 3 Output: 1 4 7 10 13","solution":"def generate_sequence(n, d): Generates a sequence of length n starting with 1 and adding the difference d. If a number recurs, it continues from the next number until the sequence reaches length n. :param n: Length of the sequence :param d: Difference to be added :return: List of n unique numbers starting from 1 or \\"No\\" if not possible. sequence = [] current_num = 1 seen_numbers = set() while len(sequence) < n: if current_num not in seen_numbers: sequence.append(current_num) seen_numbers.add(current_num) current_num += d return sequence"},{"question":"Consider a forest represented by a 2D grid of size n times m, where each cell either contains a tree (denoted by 1) or is empty (denoted by 0). The forest is surrounded by a river, so outside its boundaries is water. Starting from any cell containing a tree, you can move to any adjacent (up, down, left, right) cell also containing a tree. A group of connected trees forms a \'woodland\'. You are interested in the number of distinct woodlands in the forest. Write a program to determine the number of distinct woodlands in the grid. # Input - The first line contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. - The next n lines contain m integers each (either 0 or 1), representing the grid. # Output - Print a single integer — the number of distinct woodlands in the grid. # Example Input: ``` 4 5 1 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 ``` Output: ``` 3 ``` # Explanation: - There are three distinct connected groups of trees (woodlands): - The first group is formed by the cells (0,0), (0,1), (1,1). - The second group is formed by the cells (1,4), (2,3), (2,4), (3,4). - The third group is formed by the cell (2,0).","solution":"def count_woodlands(n, m, grid): Counts the number of distinct woodlands in the grid. :param n: Rows count of the grid. :param m: Columns count of the grid. :param grid: 2D list representing the grid. :return: Number of distinct woodlands. def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() if 0 <= i < n and 0 <= j < m and grid[i][j] == 1: grid[i][j] = -1 stack.extend([(i-1, j), (i+1, j), (i, j-1), (i, j+1)]) woodlands_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dfs(i, j) woodlands_count += 1 return woodlands_count # Example usage (this part will not be included in the final solution for the exercise) n = 4 m = 5 grid = [ [1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 1] ] print(count_woodlands(n, m, grid)) # Output should be 3"},{"question":"You have been asked to manage the library`s loaning system. The library contains a collection of books, each book having its own unique identifier. For any given day, you are given a list of loan requests and returns. Each loan request specifies the book to be loaned out, while each return specifies the book to be returned. You need to determine the state of each book (loaned out, returned) after processing the list of transactions for that day. Please write a program that simulates the loaning and returning of books in the library. The first input line contains an integer n (1 ≤ n ≤ 100,000) — the number of transactions on a particular day. The second line contains n integers, each representing a transaction. Each transaction is represented by an integer id, where |id| is the identifier of the book. If id is positive, it means a loan request for book id, and if id is negative, it signifies the return of book id. Print the final state of the books which were involved in the transactions. The output should be a list of unique book identifiers sorted in ascending order. If a book is currently loaned out, its identifier should be positive. If a book is returned, its identifier should be negative. For example: Input: 6 1 2 3 -1 -2 4 Output: 3 4 Explanation: - Book 1 is loaned out, then returned. - Book 2 is loaned out, then returned. - Book 3 is loaned out and not returned. - Book 4 is loaned out and not returned. - Final state: Book 3 and Book 4 are loaned out, thus the result is [3, 4]. Input: 5 1 -1 2 2 -2 Output: 2 Explanation: - Book 1 is loaned out, then returned. - Book 2 is loaned out twice and returned once. - Final state: Book 2 is loaned out once, thus the result is [2].","solution":"def library_loan_system(n, transactions): This function takes in the number of transactions and a list of transactions and returns the final state of books in the library Parameters: n (int): The number of transactions transactions (list of int): List of transaction identifiers Returns: list: A list of unique book identifiers sorted in ascending order (positive for loaned out, negative for returned) book_state = {} for transaction in transactions: book_id = abs(transaction) if transaction > 0: book_state[book_id] = book_state.get(book_id, 0) + 1 else: book_state[book_id] = max(book_state.get(book_id, 0) - 1, 0) final_state = [] for book_id in sorted(book_state): if book_state[book_id] > 0: final_state.append(book_id) return final_state"},{"question":"You are given two arrays of integers, state_votes and party_votes, each of length n, where n is the number of states. state_votes[i] represents the number of electoral college votes the i-th state has, and party_votes[i] represents which party won the electoral votes of the i-th state. The value in party_votes[i] can be either 1 or 0, where 1 represents Party A and 0 represents Party B. You need to determine the total number of electoral votes for each party and decide which party won the election. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of states. The second line contains n space-separated integers state_votes[1], state_votes[2], ..., state_votes[n] (1 ≤ state_votes[i] ≤ 100) — the electoral college votes of each state. The third line contains n space-separated integers party_votes[1], party_votes[2], ..., party_votes[n] (0 ≤ party_votes[i] ≤ 1) — the party each state voted for. Output two integers. The first integer should be the total electoral votes for Party A and the second integer should be the total electoral votes for Party B. On the next line, output the result of the election: \\"Party A wins\\", \\"Party B wins\\", or \\"Tie\\" depending on which party received more votes. In the first example, Party A received votes from states 1 and 3, so the total is 5 + 3 = 8. Party B received votes from states 2 and 4, so the total is 3 + 2 = 5. Since Party A received more votes, the output is \\"Party A wins\\". In the third example, both parties received the same number of votes, so the output is \\"Tie\\". # Example Input ``` 4 5 3 3 2 1 0 1 0 ``` Output ``` 8 5 Party A wins ``` Input ``` 3 4 4 4 1 1 0 ``` Output ``` 8 4 Party A wins ``` Input ``` 2 3 3 1 0 ``` Output ``` 3 3 Tie ```","solution":"def electoral_college(n, state_votes, party_votes): Determines the total number of electoral votes for each party and decides which party won the election. Parameters: n (int): The number of states. state_votes (list of int): List of electoral college votes for each state. party_votes (list of int): List indicating which party won the electoral votes of each state. Returns: tuple: A tuple containing total electoral votes for Party A, total electoral votes for Party B, and the result of the election as a string. total_votes_party_a = sum(state_votes[i] for i in range(n) if party_votes[i] == 1) total_votes_party_b = sum(state_votes[i] for i in range(n) if party_votes[i] == 0) if total_votes_party_a > total_votes_party_b: result = \\"Party A wins\\" elif total_votes_party_b > total_votes_party_a: result = \\"Party B wins\\" else: result = \\"Tie\\" return (total_votes_party_a, total_votes_party_b, result)"},{"question":"Greg has found himself involved in another adventure. This time, he has a sequence of events that he needs to check against a set of rules. Greg\'s task is to process a list of events, and for each event, determine whether it complies with the rules defined. The rules are given as a set of key-value pairs where a key represents an event type and the value represents the required status for that event type to be considered compliant. Greg has a sequence of events he needs to process, and he should determine for each event whether it is compliant or not. Each event in the sequence is defined by an event type and a status. An event is compliant if its status matches the required status for that event type from the rules. The task is to output \\"Yes\\" if the event is compliant and \\"No\\" otherwise for each event in the sequence. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of defined rules. Each of the next n lines contains one rule, which is an event type (a string) followed by a required status (a string). The next line contains an integer m (1 ≤ m ≤ 1000) — the number of events in the sequence. Each of the next m lines contains one event, which is an event type (a string) followed by a status (a string). For each event, print \\"Yes\\" on a new line if the event complies with the rules and \\"No\\" otherwise. # Input ``` n event_type_1 required_status_1 event_type_2 required_status_2 ... event_type_n required_status_n m event_type_a status_a event_type_b status_b ... event_type_m status_m ``` # Output ``` Yes No Yes ... ``` # Example Input ``` 3 login success logout success error fail 4 login success logout fail error fail login fail ``` Output ``` Yes No Yes No ```","solution":"def check_event_compliance(n, rules, m, events): Determines compliance of each event in the sequence according to the rules. Args: n (int): Number of defined rules. rules (list of tuple): A list of tuples where each tuple contains an event type and its required status. m (int): Number of events in the sequence. events (list of tuple): A list of tuples where each tuple contains an event type and its current status. Returns: list: A list of string \\"Yes\\" or \\"No\\" indicating whether each event is compliant. rule_dict = dict(rules) result = [] for event_type, status in events: if event_type in rule_dict and rule_dict[event_type] == status: result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"The students of a particular school are very keen on math puzzles. Today, their teacher gave them a challenging task. They need to form the largest possible number using a restricted set of digits and a specified number of positions. More formally, the teacher gave them the following problem: Given a string of digits and an integer m (1 ≤ m ≤ n), determine the largest possible number that can be formed by selecting exactly m digits from the string and rearranging them (if necessary). The number must not contain leading zeros unless the number itself is zero. The first line of input contains an integer n (1 ≤ n ≤ 100), the length of the string of digits. The next line contains a string of n digits, \'0\' to \'9\'. The output should be a single integer, the largest number that can be formed using exactly m digits from the input string. Examples: Input: 6 760534 3 Output: 765 Input: 5 10234 2 Output: 43 Input: 3 100 1 Output: 1 Note: In the first example, the optimal choice of digits is \'7\', \'6\', and \'5\', which rearrange to form the largest number \'765\'. In the second example, the optimal choice of digits is \'4\' and \'3\', forming the number \'43\'. In the third example, the optimal choice is \'1\', as it is the largest available digit when only one digit can be selected.","solution":"def largest_number(n, digits, m): Returns the largest number that can be formed by selecting m digits from the input string and rearranging them. sorted_digits = sorted(digits, reverse=True) selected_digits = sorted_digits[:m] return int(\\"\\".join(selected_digits))"},{"question":"You are given an array of integers where each element occurs twice except for one element which occurs only once. Find this element in linear time complexity and without using any extra space. The first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of integers in the array. The second line contains n integers separated by spaces — the elements of the array. Output the single integer that occurs only once. Example: ``` Input 7 4 3 2 4 1 3 2 Output 1 ``` Note: Your solution should run in O(n) time complexity and use O(1) extra space.","solution":"def find_unique_element(arr): Finds the element that occurs only once in the array. Parameters: arr (list): List of integers where each element occurs twice except one that occurs once. Returns: int: The element that occurs only once. unique_element = 0 for num in arr: unique_element ^= num return unique_element # Example run: # print(find_unique_element([4, 3, 2, 4, 1, 3, 2])) # Output: 1"},{"question":"You are given a rectangular maze consisting of n rows and m columns. The maze contains walls (represented by \'#\') and open spaces (represented by \'.\'). You start at the top-left corner of the maze (1, 1) and want to reach the bottom-right corner of the maze (n, m) — if possible. You can only move up, down, left, or right in the maze and cannot move through walls. Determine if it is possible to reach the bottom-right cell of the maze from the top-left cell. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the maze. The next n lines each contain a string of m characters representing the maze. Output \\"YES\\" if it is possible to reach the bottom-right cell from the top-left cell, otherwise print \\"NO\\". Example input: 5 5 ..... .#. .#... .#. ..... Example output: YES Example input: 3 3 #.# #.# .#. Example output: NO","solution":"def can_reach_end(n, m, maze): Returns \\"YES\\" if it is possible to reach the bottom-right cell from the top-left cell, otherwise returns \\"NO\\". from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are the organizer of a marathon event. The marathon route includes several checkpoints where runners must pass and log their times. Each checkpoint records the time when a runner crosses that checkpoint. However, due to a malfunction in one or more checkpoints, some log times might be missing. Your task is to reconstruct the missing log times based on the following rules: 1. If a checkpoint log is missing for a runner, and the runner crossed both the previous and the next checkpoints, assume the runner crossed the missing checkpoint at the halfway point between the recorded times of the previous and next checkpoints. 2. If the missing checkpoint is the first or the last one, assume the runner crossed it at the time of the first or last recorded checkpoint respectively. 3. All recorded and reconstructed times should be in the format hh:mm:ss. The format for this input is as follows: - The first line contains an integer n (1 ≤ n ≤ 100), the number of runners. - The second line contains an integer m (2 ≤ m ≤ 100), the number of checkpoints. - The next n lines each contain m entries. Each entry is either a time in the format hh:mm:ss, or a \'-\', indicating a missing time. For each runner, output their reconstructed checkpoint log on one line in the same format as the input. If there are multiple missing times for a checkpoint and it is not possible to infer times using the given rules, print \\"IMPOSSIBLE\\" for that runner. Example Input: ``` 2 4 12:00:00 - 12:30:00 13:00:00 - 10:30:00 11:00:00 - ``` Example Output: ``` 12:00:00 12:15:00 12:30:00 13:00:00 10:30:00 10:30:00 11:00:00 11:00:00 ``` Explanation: - For the first runner, the missing time at the second checkpoint is halfway between the first and third checkpoints (12:00:00 and 12:30:00), resulting in 12:15:00. - For the second runner, the first and last checkpoints are missing, so they take the time of the nearest recorded checkpoints, which results in 10:30:00 and 11:00:00 respectively.","solution":"def parse_time(time_str): Convert time string in hh:mm:ss format to seconds. h, m, s = map(int, time_str.split(\':\')) return h * 3600 + m * 60 + s def format_time(seconds): Convert seconds to time string in hh:mm:ss format. h = seconds // 3600 m = (seconds % 3600) // 60 s = seconds % 60 return f\\"{h:02}:{m:02}:{s:02}\\" def reconstruct_checkpoint_times(num_runners, num_checkpoints, logs): reconstructed_logs = [] for log in logs: times = log.split() for i in range(num_checkpoints): if times[i] == \'-\': # If first checkpoint is missing, copy next time if i == 0: if times[i+1] == \'-\': reconstructed_logs.append(\\"IMPOSSIBLE\\") break times[i] = times[i+1] # If last checkpoint is missing, copy previous time elif i == num_checkpoints - 1: if times[i-1] == \'-\': reconstructed_logs.append(\\"IMPOSSIBLE\\") break times[i] = times[i-1] # If intermediate checkpoint is missing, take average else: if times[i-1] == \'-\' or times[i+1] == \'-\': reconstructed_logs.append(\\"IMPOSSIBLE\\") break prev_time = parse_time(times[i-1]) next_time = parse_time(times[i+1]) times[i] = format_time((prev_time + next_time) // 2) else: reconstructed_logs.append(\\" \\".join(times)) return reconstructed_logs # Example usage: runners_logs = [ \\"12:00:00 - 12:30:00 13:00:00\\", \\"- 10:30:00 11:00:00 -\\" ] result = reconstruct_checkpoint_times(2, 4, runners_logs) for row in result: print(row)"},{"question":"Tarush is an avid mountain climber and data scientist. He believes the elevation profiles of various mountain ranges hold interesting patterns. Tarush had gathered elevation data which is represented as an array of positive integers where each integer denotes the elevation at that particular position. In an effort to identify unique landscape features, he wants to calculate how many unique elevation profiles he can get by considering all contiguous subarrays of fixed size. Given an array of integers representing the elevation profile and a parameter `k` denoting the size of subarrays, your task is to determine the number of unique elevation profiles (contiguous subarrays) of length `k`. Formally, you are given a list of integers `e` of length `n` and an integer `k`, return the number of distinct contiguous subarrays of length `k`. # Input: - The first line contains two integers `n` and `k` (1 ≤ `k` ≤ `n` ≤ 100,000) - the length of the elevation profile array and the size of subarrays, respectively. - The second line contains `n` positive integers `e[1], e[2], ..., e[n]` (1 ≤ `e[i]` ≤ 1,000,000) - the elevation profile. # Output: - Print a single integer — the number of distinct contiguous subarrays of length `k`. # Example: Input: ``` 5 3 1 2 1 2 3 ``` Output: ``` 3 ``` # Explanation: The contiguous subarrays of length 3 are: `[1, 2, 1]`, `[2, 1, 2]`, `[1, 2, 3]`. There are three unique subarrays: `[1, 2, 1]`, `[2, 1, 2]`, and `[1, 2, 3]`.","solution":"def count_unique_subarrays(n, k, elevations): Counts the number of unique contiguous subarrays of length k from the elevation profile array. Parameters: n (int): The length of the elevation profile array. k (int): The size of subarrays to consider. elevations (list): The elevation profile array. Returns: int: The number of unique contiguous subarrays of length k. unique_subarrays = set() for i in range(n - k + 1): subarray = tuple(elevations[i:i+k]) unique_subarrays.add(subarray) return len(unique_subarrays)"},{"question":"In the fantasy land of Algoria, there are n ancient obelisks, each of which possesses a unique array of magical stones. Each obelisk can emit a protective barrier, and the power of this barrier depends on the magical stones it contains. The kingdom\'s ruler wants to form the most powerful defense by selecting a group of k obelisks such that the combined power of their emitted barriers is maximized. The power of a barrier emitted by an obelisk can be calculated by dividing the sum of the magical stones\' strengths in that obelisk by the number of stones within it. Let the array a_i represent the strengths of the stones in the i-th obelisk. The power of the barrier of the i-th obelisk is equal to the sum of the elements of a_i divided by the number of elements in a_i. The ruler needs your help to determine the maximum possible combined power by selecting exactly k obelisks from the n available obelisks. # Input - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the total number of obelisks and the number of obelisks to be selected. - The next n lines contain arrays a_i — the list of integers representing the strengths of the stones in each obelisk. The i-th line starts with an integer m_i (1 ≤ m_i ≤ 100), the number of stones in the i-th obelisk, followed by m_i integers representing the strengths of the stones in that obelisk. # Output - Print a single integer — the maximum possible combined power of the k selected obelisks. The combined power is the sum of the individual powers of the selected obelisks, and should be rounded down to the nearest integer. # Example Input ``` 3 2 3 10 20 30 2 40 50 1 100 ``` Output ``` 105 ``` (Explanation: The individual powers of the obelisks are 20, 45, and 100, respectively. The maximum combined power of selecting 2 out of these 3 obelisks is maximizing 45 + 100 = 145.) # Note To maximize the combined power, sort the obelisks in descending order based on their respective barrier powers and sum the top k entries.","solution":"def max_combined_power(n, k, obelisks): Calculate the maximum possible combined power by selecting exactly k obelisks from the n available obelisks. :param n: Number of obelisks :param k: Number of obelisks to select :param obelisks: List of lists, where each list contains the strengths of stones in each obelisk :return: The maximum possible combined power powers = [] # Calculate the power of each obelisk for obelisk in obelisks: m = obelisk[0] stones = obelisk[1:] power = sum(stones) / m powers.append(power) # Sort powers in descending order powers.sort(reverse=True) # Sum the top k powers combined_power = sum(powers[:k]) # Return the floor value of the combined power return int(combined_power)"},{"question":"You are a software developer tasked with managing the software deployment in a data center. There are n servers in the data center, each with a certain processing capacity. You are given an array where the i-th element represents the processing capacity of the i-th server. Your goal is to allocate these servers for a given task that requires at least X processing power. To maximize efficiency, you want to use the minimum number of servers that can aggregate this required processing power. Write a function that takes the number of servers, an array of their processing capacities, and the required processing power, and returns the minimum number of servers needed to meet or exceed the required processing power. If it is not possible to achieve the required processing power with any combination of servers, return -1. The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of servers. The second line contains n space-separated integers representing the processing capacities of the servers (1 ≤ capacity ≤ 10^9). The third line contains a single integer X (1 ≤ X ≤ 10^9), the required processing power. Output a single integer representing the minimum number of servers needed, or -1 if it is not possible. Example: Input: 5 3 1 4 2 5 11 Output: 3 Explanation: To meet the required processing power of 11, we can use servers with capacities 5, 4, and 2, making a total of 3 servers. There is no combination of fewer servers that can meet or exceed the required processing power.","solution":"def min_servers_needed(n, capacities, required_power): Returns the minimum number of servers needed to reach or exceed the required processing power. If it is not possible, returns -1. capacities.sort(reverse=True) current_power = 0 server_count = 0 for capacity in capacities: current_power += capacity server_count += 1 if current_power >= required_power: return server_count return -1"},{"question":"Viktor is preparing for a coding competition and needs to practice his skills with arrays. He has an array of length n consisting of distinct positive integers. Viktor wants to apply a series of zero or more operations to make the array strictly increasing. In each operation, he can select exactly one element of the array and move it to any position in the array. Given an array of length n, your task is to calculate the minimum number of operations required to make the array strictly increasing. The first line of input contains a single integer n (1 leq n leq 2000) — the length of the array. The second line contains n distinct integers a_1, a_2, dots, a_n (1 leq a_i leq 10^6) — the elements of the array. Output a single integer — the minimum number of operations required to make the array strictly increasing. # Examples Input ``` 6 4 3 2 1 6 8 ``` Output ``` 3 ``` Input ``` 5 10 1 2 3 4 ``` Output ``` 1 ``` Input ``` 3 1 2 3 ``` Output ``` 0 ``` # Note In the first example, one possible sequence of operations is: 1. Move `6` to the beginning resulting in `6 4 3 2 1 8`. 2. Move `8` to the beginning resulting in `8 6 4 3 2 1`. 3. Move `1` to the position right before `8` resulting in `1 8 6 4 3 2`. In the second example, move `10` to the position right before `1` resulting in `1 2 3 4 10`. In the third example, the array is already strictly increasing so no operations are needed.","solution":"def min_operations_to_make_increasing(arr): Returns the minimum number of operations needed to make the array strictly increasing. n = len(arr) # We need to find the length of the longest increasing subsequence (LIS) first # In this case we use patience sorting method to find LIS in O(n log n) from bisect import bisect_right def lis_length(arr): lis = [] for val in arr: pos = bisect_right(lis, val) if pos < len(lis): lis[pos] = val else: lis.append(val) return len(lis) length_of_lis = lis_length(arr) # Minimum operations needed to make the array strictly increasing return n - length_of_lis"},{"question":"A company is organizing a team-building activity involving a maze. The maze is represented as an n x m grid where each cell can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). Participants start at the top-left corner of the grid (0, 0) and need to reach the bottom-right corner (n-1, m-1). Participants can move one step in four possible directions: - Up - Down - Left - Right However, they cannot move diagonally or move through obstacles. They need to find the shortest path from the start to the finish, if such a path exists. If no path exists, the output should be -1. Input Format: - The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the dimensions of the grid. - The following n lines contain m characters each, representing the grid. Output Format: - Print the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, print -1. Example: ``` Input: 5 6 . . # # . . . . # # . # . . . . . . # # # . . # # # # # . . Output: 10 ``` In this example, the shortest path consists of 10 steps: Right (0, 0) → Down (1, 0) → Down (2, 0) → Right (2, 1) → Right (2, 2) → Right (2, 3) → Down (3, 3) → Down (4, 3) → Right (4, 4) → Right (4, 5). Note: The obstacles in the maze (#) constrain the path, making it necessary to find an alternative route where possible.","solution":"from collections import deque def shortest_path_maze(n, m, grid): Finds the shortest path in a maze from top-left to bottom-right. :param n: Number of rows in the maze :param m: Number of columns in the maze :param grid: The labyrinth grid as a list of strings :return: The length of the shortest path, or -1 if no path exists if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0)]) distances = [[-1] * m for _ in range(n)] distances[0][0] = 1 while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return distances[x][y] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and distances[nx][ny] == -1: distances[nx][ny] = distances[x][y] + 1 queue.append((nx, ny)) return -1"},{"question":"You have been given an array `numbers` consisting of `n` integers. Let\'s call an array \\"good\\" if all its elements are distinct. You are allowed to perform the following operation: 1. Choose any element `x` from the array and change its value to any integer `y` such that `y` is not already present in the array. Your task is to determine the minimum number of operations required to make the given array \\"good\\". If the array is already \\"good\\", no operations are needed. The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the size of the array. The second line contains `n` integers `numbers[i]` (1 ≤ numbers[i] ≤ 10^9) — the elements of the array. Print a single integer — the minimum number of operations required to make the array \\"good\\". # Example Input: ``` 4 4 5 4 5 ``` Output: ``` 2 ``` Explanation: In this example, the array has duplicates of two values: 4 and 5. We need at least 2 changes to make every element unique, for example, we could change one 4 to 6 and one 5 to 7. Thus, the minimum number of operations is 2. Other valid changes are also possible.","solution":"def min_operations_to_make_good(numbers): Determine the minimum number of operations required to make all elements in the array distinct. import collections n = len(numbers) # Count the occurrences of each number counter = collections.Counter(numbers) # Set to keep track of all available unique numbers unique_numbers = set(numbers) operations = 0 # Iterate over the elements to find duplicates for number, count in counter.items(): while count > 1: # More than 1 occurrence count -= 1 operations += 1 new_number = number + 1 # Find a new unique number while new_number in unique_numbers: new_number += 1 unique_numbers.add(new_number) return operations"},{"question":"You are given an array of length n consisting of unique integers. You need to perform one of the following two operations: 1. Choose two adjacent elements and swap them. 2. Choose any element and move it to the front of the array. Your task is to sort the array in ascending order in the minimum number of operations. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100) — the length of the array. The second line contains n unique integers a1, a2, ..., an, the elements of the array. For each test case, print a single integer — the minimum number of operations needed to sort the array.","solution":"def minimum_operations_to_sort_array(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] operations = 0 sorted_array = sorted(array) if array == sorted_array: results.append(operations) continue if array[0] == sorted_array[0] or array[-1] == sorted_array[-1]: operations = 1 elif array[0] == sorted_array[-1] and array[-1] == sorted_array[0]: operations = 3 else: operations = 2 results.append(operations) return results"},{"question":"You are given an array of integers a_1, a_2, dots, a_n. You need to make the array non-decreasing by applying the following operation exactly once: - Choose a subarray of length at least 2 and reverse it. Find out if it is possible to make the array non-decreasing by applying the operation exactly once. # Input The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains an integer n (2 le n le 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. # Output For each test case, print \\"YES\\" if it is possible to make the array non-decreasing by applying the operation exactly once. Otherwise, print \\"NO\\". # Example Input ``` 3 5 5 4 3 2 1 4 1 3 2 4 4 5 1 2 3 ``` Output ``` YES YES NO ``` # Note - In the first test case, reversing the entire array will make it non-decreasing. - In the second test case, reversing the subarray [3, 2] will make the array non-decreasing. - In the third test case, it is not possible to make the array non-decreasing with exactly one reverse operation.","solution":"def can_become_non_decreasing_with_one_reverse(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] # Create a copy of the array and sort it sorted_a = sorted(a) # Determine the first and last index where the elements differ l, r = 0, n-1 while l < n and a[l] == sorted_a[l]: l += 1 while r >= 0 and a[r] == sorted_a[r]: r -= 1 # If l >= r, the array is already sorted or can be made sorted by reversing the found subarray if l >= r: results.append(\\"YES\\") else: # Reverse the subarray and check if the entire array becomes sorted subarr = a[l:r+1][::-1] if a[:l] + subarr + a[r+1:] == sorted_a: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Ravi is playing a maze game on an NxM grid. In this grid, some cells may be impassable, meaning Ravi cannot step into those cells. Ravi\'s goal is to move from the top-left corner of the grid (1,1) to the bottom-right corner (N,M) using the shortest path possible. In each step, Ravi can move one cell to the right, left, up or down, but cannot move diagonally. The grid contains \'.\' to indicate an empty cell that Ravi can move through, and \'#\' to indicate an impassable cell. You need to determine the minimum number of steps Ravi needs to reach the bottom-right corner or decide if it\'s impossible to reach that cell. The first line of input contains two integers, N and M (1 ≤ N, M ≤ 1000), representing the number of rows and columns in the grid. The next N lines each contain M characters (\'.\' or \'#\'), representing the maze grid. Output the minimum number of steps to reach the bottom-right corner, or -1 if it is impossible to reach that cell. # Example Input ``` 5 5 ..... .#.#. ..... .#. ..... ``` Output ``` 8 ``` In the above example, the minimum path to get from the top-left corner to the bottom-right corner is 8 steps. Explanation Path taken: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5). Note: - Always ensure the input format is strictly followed. - Ensure the boundaries and edge-cases in the grid are correctly managed in your implementation.","solution":"from collections import deque def min_steps_maze(maze, N, M): Finds the minimum number of steps to reach the bottom-right corner of the grid or returns -1 if not possible. if maze[0][0] == \'#\' or maze[N-1][M-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == N - 1 and y == M - 1: # Reached goal return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are a software engineer at a logistics company. You need to develop a software tool to help with optimizing delivery routes. The city is represented as a grid of size N x M, where each cell can either be a `\'.\'`, indicating an empty space, or `\'#\'`, indicating an obstacle. A delivery starts at cell `(0, 0)` and ends at cell `(N-1, M-1)`. The challenge is to find the minimum distance needed to reach the destination from the start. The delivery person can move up, down, left, or right, but cannot move diagonally or through obstacles (`\'#\'`). If there is no possible path, return `-1`. The first line of input contains two integers N and M (1 ≤ N, M ≤ 1000), indicating the rows and columns of the grid. The next N lines each contain M characters (`\'.\'` or `\'#\'`), representing the city grid. Output a single integer: the minimum distance from the start to the destination or `-1` if no such path exists. **Example:** ``` Input: 5 5 ..... .#. ...#. .#. ..... Output: 8 ``` In this example, the shortest path through the grid would be to move right, right, down, down, down, left, left, down. This path avoids all obstacles and has a length of 8.","solution":"from collections import deque def min_delivery_distance(N, M, grid): Finds the minimum distance needed to reach the destination from the start, avoiding obstacles (represented by \'#\'). :param N: Number of rows :param M: Number of columns :param grid: 2D list representing the city grid :return: Minimum distance, or -1 if no path exists if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0)]) distances = [[-1]*M for _ in range(N)] distances[0][0] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and distances[nx][ny] == -1: distances[nx][ny] = distances[x][y] + 1 queue.append((nx, ny)) return distances[N-1][M-1]"},{"question":"In the land of Arithmania, people love playing with arrays and numbers. Shem, the town\'s mathematician, recently came up with a fascinating problem. Given an array of n integers, Shem wants to divide it into exactly k non-empty contiguous subarrays such that the sum of elements in each subarray is maximized. Shem needs your help to achieve this. Write a program to determine the maximum possible minimum sum of elements among the k subarrays. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 5000), indicating the length of the array and the number of subarrays respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Print a single integer — the maximum possible minimum sum of elements among the k subarrays. **Example** **Input:** ``` 5 2 1 2 3 4 5 ``` **Output:** ``` 9 ``` **Explanation:** One way to split the array [1, 2, 3, 4, 5] into 2 subarrays is [1, 2, 3] and [4, 5]. The sums of elements in these subarrays are 6 and 9, respectively. Among all possible splits, the minimum sum that is maximized is 9.","solution":"def can_divide(nums, k, min_sum): current_sum = 0 subarrays = 1 for num in nums: if current_sum + num > min_sum: subarrays += 1 current_sum = num if subarrays > k: return False else: current_sum += num return True def maximum_minimum_sum(n, k, nums): left, right = max(nums), sum(nums) answer = left while left <= right: mid = (left + right) // 2 if can_divide(nums, k, mid): answer = mid right = mid - 1 else: left = mid + 1 return answer"},{"question":"You are given an n x n grid of integers. The goal is to determine if it is possible to travel from the top-left cell (1, 1) to the bottom-right cell (n, n) only by moving along paths consisting of increasing consecutive integers. From a cell (i, j) you can move to the adjacent cells (i+1, j), (i-1, j), (i, j+1), and (i, j-1) if the destination cell contains the next consecutive integer of the current cell. Write a function called `is_path_possible` to identify if such a path exists. The function should take the following arguments: - an integer `n`, where 1 ≤ n ≤ 500, representing the dimension of the grid. - a 2D list `grid` of integers where each integer is guaranteed to be unique and neither negative nor greater than 250,000. The function should output \\"YES\\" if the path exists, otherwise \\"NO\\". # Input Format - The first line contains an integer `n` — the dimension of the grid. - The next `n` lines each contain `n` integers representing the grid. # Output Format - Print \\"YES\\" if there is a valid path from (1, 1) to (n, n) consisting of increasing consecutive integers, otherwise print \\"NO\\". # Sample Input 1 ``` 3 1 2 3 6 5 4 7 8 9 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 3 1 2 3 4 6 5 7 8 10 ``` # Sample Output 2 ``` NO ``` # Explanation: - In the first example, it is possible to move from 1 to 2 to 3, then 4, 5, 6, 7, 8, and finally 9 to reach the bottom-right cell. - In the second example, there is no path that allows consecutive integers to be travelled from the starting cell to the final cell.","solution":"def is_path_possible(n, grid): Determines if it is possible to travel from the top-left cell (1, 1) to the bottom-right cell (n, n) only by moving along paths consisting of increasing consecutive integers. Parameters: n (int): The dimension of the grid. grid (list of lists of int): The n x n grid of integers. Returns: str: \\"YES\\" if the path exists, otherwise \\"NO\\". from collections import deque if grid[0][0] != 1: return \\"NO\\" destination = n * n moves = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < n queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if grid[x][y] == destination: return \\"YES\\" for dx, dy in moves: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] == grid[x][y] + 1 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given an array of `n` integers. Your task is to determine if you can make the array strictly increasing by modifying at most `k` elements. An array is considered strictly increasing if `a[i-1] < a[i]` for each `i` from 1 to `n-1`. In one move, you can change any element of the array to any integer value. The first line of the input contains two integers `n` and `k` (1 leq n leq 10^5; 0 leq k leq n). The second line contains `n` integers `a_1, a_2, ..., a_n` (1 leq a_i leq 10^9), representing the elements of the array. Output \\"YES\\" if it\'s possible to make the array strictly increasing by modifying at most `k` elements, otherwise output \\"NO\\". # Example ```plaintext Input: 5 1 1 2 3 0 5 Output: YES Input: 5 1 5 4 3 2 1 Output: NO ``` # Explanation In the first example, you can change the fourth element from `0` to `4` to make the array strictly increasing: `[1, 2, 3, 4, 5]`. In the second example, you cannot make the array strictly increasing by modifying just one element.","solution":"def can_be_strictly_increasing(n, k, array): Determines if an array can be made strictly increasing by modifying at most k elements. Parameters: n (int): The size of the array. k (int): The maximum number of elements that can be modified. array (list of int): The input array of integers. Returns: str: \\"YES\\" if the array can be made strictly increasing by modifying at most k elements, otherwise \\"NO\\". def can_increase_with_modifications(arr, max_modifications): modifications = 0 for i in range(1, len(arr)): if arr[i-1] >= arr[i]: modifications += 1 if modifications > max_modifications: return False # Simulate the minimal possible change if i == 1 or arr[i-2] < arr[i]: arr[i-1] = arr[i] - 1 else: arr[i] = arr[i-1] + 1 return True return \\"YES\\" if can_increase_with_modifications(array.copy(), k) else \\"NO\\""},{"question":"A string is called beautiful if it does not contain two identical consecutive characters. Given a string of lowercase English letters, determine the minimum number of characters to be inserted to make it beautiful. The first line contains a single string s (1 ≤ |s| ≤ 1000). Output the minimum number of characters required to make the string beautiful. For example, for the string \\"abb\\", you must add 1 character to make it \\"abab\\" or \\"abba\\" which are beautiful strings. For the string \\"aab\\", you must add 2 characters to make it \\"ababa\\" which is a beautiful string.","solution":"def min_insertions_to_make_beautiful(s): Calculate the minimum number of characters to be inserted to make the string beautiful (i.e., have no two identical consecutive characters). Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The minimum number of insertions required. insertions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: insertions += 1 return insertions"},{"question":"You have been given the task of controlling a robot that can move around on a grid. Initially, the robot is placed at the origin, i.e., at position (0, 0) on an infinite 2D plane grid. The robot can be moved by giving it a sequence of commands. The commands are represented by a string where each character can be one of the following: - \'U\' (move up by 1 unit) - \'D\' (move down by 1 unit) - \'L\' (move left by 1 unit) - \'R\' (move right by 1 unit) Your task is to determine the final coordinates of the robot after executing all the commands in the given sequence. # Input - The first line of the input contains an integer `T` (1 ≤ T ≤ 10^4), the number of test cases. - Each of the next `T` lines contains a string `S` (1 ≤ |S| ≤ 10^5) representing the command sequence for that test case. # Output For each test case, output the final coordinates of the robot after executing the command sequence. Each result should be printed on a new line. # Example Input ``` 3 UD LLRR UUDDLLRR ``` Output ``` (0, 0) (0, 0) (0, 0) ``` # Explanation In the first test case, the robot moves up and then down, returning to the origin. In the second test case, the robot moves left twice and right twice, again returning to the origin. In the third test case, the robot moves up twice, down twice, left twice, and right twice, ending back at the origin.","solution":"def final_robot_position(commands): This function takes a string of commands and returns the final position (x, y) of the robot. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y def process_test_cases(test_cases): This function processes a list of test cases, where each test case is a string of commands. Returns a list of resulting positions for each test case. results = [] for commands in test_cases: final_position = final_robot_position(commands) results.append(final_position) return results"},{"question":"In a futuristic car racing league, there are n cars competing in a series of races. The organizers have a new rule to determine the winner based on lap times. Each car completes m laps in a race, and the total race time for each car is the sum of its individual lap times. However, due to unpredicted anomalies, each car\'s lap times are recorded differently as follows: The organizers have provided the lap time records in a compressed format. For each car, the lap time records are given as a sequence of intervals. Specifically, the lap time for a car is recorded as k disjoint intervals with their respective counts. Each interval specifies a constant lap time for a certain number of consecutive laps. To determine the winner, you need to calculate the total race time for each car based on its lap time intervals and then find the car with the minimum total race time. If there are multiple cars with the same minimum total race time, any one of them can be declared as the winner. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of cars. The next n lines describe the lap times for each car. Each line starts with an integer k (1 ≤ k ≤ 10^4), the number of intervals for that car, followed by k pairs of integers. Each pair consists of an integer ti (1 ≤ ti ≤ 10^9), the lap time for the ith interval, and an integer ci (1 ≤ ci ≤ 10^4), the count of consecutive laps that have the time ti. Output one integer, the index of the car (1-based) that has the minimum total race time. Example Input: ``` 3 2 5 3 4 2 3 6 1 2 3 4 2 2 5 5 6 1 ``` Example Output: ``` 1 ``` Explanation: - Car 1 has intervals: (5, 3) and (4, 2) - Total race time = 5*3 + 4*2 = 15 + 8 = 23 - Car 2 has intervals: (6, 1), (2, 3), and (4, 2) - Total race time = 6*1 + 2*3 + 4*2 = 6 + 6 + 8 = 20 - Car 3 has intervals: (5, 5) and (6, 1) - Total race time = 5*5 + 6*1 = 25 + 6 = 31 Car 2 has the minimum total race time of 20, thus the output is 2.","solution":"def find_winner(n, lap_time_records): min_time = float(\'inf\') winner_index = -1 for i in range(n): k, *times = lap_time_records[i] total_time = sum([times[j] * times[j + 1] for j in range(0, 2 * k, 2)]) if total_time < min_time: min_time = total_time winner_index = i + 1 # Use 1-based indexing for the answer return winner_index"},{"question":"In a faraway kingdom, there are n cities numbered from 1 to n, connected by m directed roads. A king wants to arrange a tour starting from city 1 and visit each city exactly once before ending the trip back at city 1. However, not all cities are directly connected, and some routes are more costly than others. The cost to travel from city i to city j is dij if there is a direct road from i to j; otherwise, the cost is considered infinite. Determine the minimum cost required for the king\'s tour and if it\'s impossible to create such a route, output \\"Impossible!\\". The first line contains two integers n (2 ≤ n ≤ 15) and m (1 ≤ m ≤ n * (n - 1)) — the number of cities and the number of directed roads respectively. Each of the following m lines contains three integers u, v, and d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ d ≤ 100) — representing a directed road from city u to city v with cost d. Output a single integer — the minimum cost. If it is impossible to visit each city exactly once and return to the starting city, output \\"Impossible!\\". For example, if the input is: ``` 4 6 1 2 10 2 3 15 3 4 10 4 1 5 2 4 35 3 1 5 ``` The minimum cost output would be 40. If it\'s not possible to complete the tour, output \\"Impossible!\\".","solution":"from itertools import permutations def tsp_min_cost(n, m, roads): import sys INF = sys.maxsize # Create the adjacency matrix cost_matrix = [[INF] * n for _ in range(n)] for u, v, d in roads: cost_matrix[u-1][v-1] = d # Check all permutations of cities (excluding the starting city 1) cities = list(range(1, n)) min_cost = INF for perm in permutations(cities): current_cost = 0 current_path_valid = True # Start from city 1, first segment to the first city in the permutation if cost_matrix[0][perm[0]] == INF: continue current_cost += cost_matrix[0][perm[0]] for i in range(len(perm) - 1): if cost_matrix[perm[i]][perm[i+1]] == INF: current_path_valid = False break current_cost += cost_matrix[perm[i]][perm[i+1]] # Return to city 1 if current_path_valid and cost_matrix[perm[-1]][0] != INF: current_cost += cost_matrix[perm[-1]][0] min_cost = min(min_cost, current_cost) return min_cost if min_cost != INF else \\"Impossible!\\""},{"question":"Tom is organizing a marathon event. Each participant will start at different times. Tom would like to know the shortest amount of time in which all participants can complete the marathon. You are given the start times of each participant and the time it takes for each participant to complete the marathon. More specifically, you have an array of integers `startTimes` where `startTimes[i]` is the start time of the i-th participant, and an array of integers `times` where `times[i]` is the amount of time the i-th participant takes to complete the marathon. Write a program that calculates the earliest time at which all participants have completed the marathon. The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of participants. The second line contains n integers representing `startTimes`, where each integer is between 0 and 10^4 inclusive. The third line contains n integers representing `times`, where each integer is between 1 and 10^4 inclusive. Print a single integer — the earliest time at which all participants have completed the marathon. Example -------- Input: 3 1 2 3 5 4 3 Output: 6 Explanation: - The first participant starts at time 1 and takes 5 units of time, so finishes at time 6. - The second participant starts at time 2 and takes 4 units of time, so finishes at time 6. - The third participant starts at time 3 and takes 3 units of time, so finishes at time 6. The earliest time at which all participants have completed the marathon is 6.","solution":"def earliest_complete_time(n, startTimes, times): Calculate the earliest time at which all participants complete the marathon. :param n: Number of participants :param startTimes: List of start times for each participant. :param times: List of completion times for each participant. :return: Earliest time at which all participants have completed the marathon. end_times = [startTimes[i] + times[i] for i in range(n)] return max(end_times)"},{"question":"Alice and Bob are playing a game on a two-dimensional grid of n x m cells. Each cell is either empty or blocked. Alice always starts at the top-left corner (1, 1) and Bob at the bottom-right corner (n, m), and they want to meet somewhere on the grid. Both players can move up, down, left, or right to an adjacent cell, but cannot move into blocked cells or out of the grid. Your task is to determine if it is possible for Alice and Bob to meet on the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m characters. Each character is either \'.\' (an empty cell) or \'#\' (a blocked cell). Print \\"Yes\\" if it\'s possible for Alice and Bob to meet, and \\"No\\" otherwise. In the first example, Alice can move down and right to meet Bob in the bottom-right corner. In the second example, there is no clear path for Alice or Bob to meet because of the blocked cells.","solution":"def can_meet(grid): def bfs(start, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return visited n = len(grid) m = len(grid[0]) # If start or end position are blocked, return \\"No\\" if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" alice_reachable = bfs((0, 0), n, m) bob_reachable = bfs((n-1, m-1), n, m) if alice_reachable & bob_reachable: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are three distinct elements in the array whose sum is equal to the target sum. If such a triplet exists, output \\"YES\\", otherwise output \\"NO\\". The first line contains two integers n and target (3 ≤ n ≤ 105, -106 ≤ target ≤ 106) — the number of elements in the array and the target sum. The second line contains n integers (each between -106 and 106) representing the array. If there is a triplet (i, j, k) such that 0 ≤ i < j < k < n and arr[i] + arr[j] + arr[k] = target, print \\"YES\\". Otherwise, print \\"NO\\". Example: Input: 6 10 1 2 4 5 6 7 Output: YES Explanation: The triplet (1, 2, 7) sums to 10, which matches the target sum.","solution":"def has_triplet_with_sum(arr, target): This function checks if there are three distinct elements in the array whose sum is equal to the target sum. Parameters: arr (list): A list of integers. target (int): Target sum to find in the array. Returns: str: \\"YES\\" if such a triplet exists, otherwise \\"NO\\". arr.sort() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: triplet_sum = arr[i] + arr[left] + arr[right] if triplet_sum == target: return \\"YES\\" elif triplet_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Alice and Bob are playing a game called \\"Array Shuffling\\". They have an array **A** of length **n** comprising of distinct integers. Each round, they can select a subarray and shuffle it (rearrange the elements in any order they like). They want to sort the array in non-decreasing order using the minimum number of such operations. Your task is to write a program that takes the array **A** as input and determines the minimum number of subarray shuffle operations to sort the array. **Input:** - The first line contains a single integer **n** (2 le n le 1000) — the length of the array. - The second line contains **n** distinct integers **A_1, A_2, ..., A_n** (1 le A_i le 10000), the elements of the array. **Output:** - Output a single integer, the minimum number of subarray shuffle operations required to sort the array. **Example**: **Input**: ``` 5 3 1 4 5 2 ``` **Output**: ``` 2 ``` **Explanation:** - In the first operation, Alice and Bob can shuffle the subarray [3, 1], resulting in [1, 3, 4, 5, 2]. - In the second operation, they shuffle the subarray [4, 5, 2], resulting in [1, 3, 2, 4, 5]. - Finally, they shuffle the subarray [3, 2], resulting in [1, 2, 3, 4, 5]. Thus, a minimum of 2 operations is required to sort the array.","solution":"def min_subarray_shuffle_operations(n, A): Returns the minimum number of subarray shuffle operations required to sort the array. sorted_A = sorted(A) if A == sorted_A: return 0 # Tracking the longest sorted subsequence length longest_sorted = 1 current_length = 1 for i in range(1, n): if A[i] > A[i - 1]: current_length += 1 if current_length > longest_sorted: longest_sorted = current_length else: current_length = 1 return n - longest_sorted"},{"question":"In an ancient kingdom, there exists a circular fortress with n gates arranged in a circle. The gates are numbered from 1 to n in clockwise order and each gate has a distinct defensive capability represented by an integer value di. The kingdom wants to host a grand festival, and for security reasons, they want to close exactly k consecutive gates such that the sum of their defensive capabilities is maximized. You are tasked with finding the maximum sum of the defensive capabilities of any k consecutive gates. # Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^6), representing the number of gates and the number of consecutive gates to close, respectively. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^9), representing the defensive capabilities of the gates in clockwise order. # Output Output a single integer, the maximum sum of the defensive capabilities of any k consecutive gates. # Example Input: ``` 7 3 1 2 3 4 5 6 7 ``` Output: ``` 18 ``` Explanation: Closing gates 5, 6, and 7 will yield the maximum sum of 18 (5 + 6 + 7). # Note Since the fortress is circular, you have to also consider the cases where the k consecutive gates span from the end of the array back to the beginning.","solution":"def max_defensive_capability(n, k, defenses): Given the number of gates n and consecutive gates to close k, this function returns the maximum sum of the defensive capabilities of any k consecutive gates in a circular fortress. # Concatenate the array with itself to simulate the circular array defenses = defenses + defenses # Initial sum of the first k consecutive gates curr_sum = sum(defenses[:k]) max_sum = curr_sum # Use sliding window for i in range(1, n): curr_sum = curr_sum - defenses[i-1] + defenses[i+k-1] max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"You are given a sequence of integers and an integer k. You need to find the maximum sum of a subsequence of length k in the given sequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 * 10^5) — the number of elements in the sequence and the length of the subsequence, respectively. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Print a single integer — the maximum sum of a subsequence of length k. Example: Input: 5 2 1 2 3 4 5 Output: 9 Explanation: The maximum sum of a subsequence of length 2 is obtained by selecting the elements 4 and 5, which gives us 4 + 5 = 9.","solution":"def max_subsequence_sum(n, k, sequence): Returns the maximum sum of a subsequence of length k in the given sequence. # Sort the sequence in descending order sorted_sequence = sorted(sequence, reverse=True) # Take the first k elements from the sorted sequence max_sum = sum(sorted_sequence[:k]) return max_sum"},{"question":"You are given a string s consisting of lowercase and uppercase English letters, digits, and special characters. Your task is to determine whether the given string contains all the digits from 0 to 9 at least once. Input: A single line containing a string s (1 le |s| le 10^5). Output: Output \\"Yes\\" (without quotes) if the string contains every digit from 0 to 9, otherwise, output \\"No\\". Examples: Input: todayis20thnof2021year Output: No Input: 202345678901234567890 Output: Yes","solution":"def contains_all_digits(s): Checks if the string s contains all digits from 0 to 9 at least once. digit_set = set(\'0123456789\') for char in s: if char in digit_set: digit_set.remove(char) if not digit_set: return \\"Yes\\" return \\"No\\""},{"question":"You are given a string consisting of lowercase English letters. You need to find the length of the longest subsequence that contains each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') at least once. A subsequence is a sequence that can be derived from the original string by deleting some or no elements without changing the order of the remaining elements. The first line of input contains a single integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. In the output, print the length of the longest subsequence that satisfies the condition. If no such subsequence exists, print -1. In Sample 1, the longest subsequence satisfying the condition is \\"abcdefahijklmnopqrstu\\", and its length is 21. In Sample 2, there is no subsequence containing all vowels, so the output is -1.","solution":"def longest_vowel_subsequence(n, s): Returns the length of the longest subsequence that contains each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') at least once. # Define the required vowels vowels = set(\'aeiou\') current_vowels = set() max_length = -1 for i in range(n): if s[i] in vowels: current_vowels.add(s[i]) if len(current_vowels) == 5: max_length = n - i break if len(current_vowels) == 5: return n else: return -1"},{"question":"You are managing a social media platform where users can follow each other and post updates. Two users A and B are considered connected if there is a chain of followers leading from A to B or from B to A. Users can have a varied number of followers, and a chain of followers can be very long. Given the number of users n and a set of follower relationships, your task is to determine the number of distinct groups of connected users on the platform. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of users. - The second line contains an integer m (0 ≤ m ≤ 200,000) — the number of follower relationships. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that user u follows user v. Output: - Print a single integer representing the number of distinct groups of connected users. Example: ``` Input: 6 5 1 2 2 3 4 5 5 6 4 6 Output: 2 Explanation: There are 6 users and the following relationships: 1 follows 2 2 follows 3 4 follows 5 5 follows 6 4 follows 6 Users 1, 2, and 3 form one connected group. Users 4, 5, and 6 form another connected group.","solution":"def count_connected_groups(n, m, relationships): # Create an adjacency list to represent the graph adj_list = [[] for _ in range(n + 1)] # Add edges to the adjacency list for u, v in relationships: adj_list[u].append(v) adj_list[v].append(u) # Function to perform DFS and mark all the connected users def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) visited = [False] * (n + 1) num_groups = 0 # Perform DFS for each unvisited user for user in range(1, n + 1): if not visited[user]: visited[user] = True dfs(user, visited) num_groups += 1 return num_groups"},{"question":"You are given a matrix `M` of size `n x m` where each cell contains an integer. Your task is to identify the smallest sum of a submatrix of size `k x k` within `M`. A submatrix is defined as a contiguous block within the original matrix. For example, in a `3 x 3` matrix, a `2 x 2` submatrix would be any of the smaller squares formed by selecting 2 rows and 2 columns. The input consists of: 1. The first line contains three integers `n`, `m`, and `k` (1 ≤ k ≤ min(n, m); 1 ≤ n, m ≤ 100) representing the number of rows, columns, and the size of the square submatrix respectively. 2. The next `n` lines contain `m` integers each representing the elements of the matrix. Each element of the matrix is in the range [-1000, 1000]. Output a single integer representing the smallest sum of any `k x k` submatrix in the given `n x m` matrix. # Example Input: ``` 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output: ``` 14 ``` # Explanation For the given matrix, the 2x2 submatrices and their sums are: - ``` 1 2 5 6 ``` with sum = 14 - ``` 2 3 6 7 ``` with sum = 18 - ``` 3 4 7 8 ``` with sum = 22 - ... The smallest sum is 14, so the output is 14.","solution":"def smallest_submatrix_sum(n, m, k, matrix): min_sum = float(\'inf\') for i in range(n - k + 1): for j in range(m - k + 1): current_sum = 0 for x in range(k): for y in range(k): current_sum += matrix[i + x][j + y] if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"A robot is placed on a grid with `N` rows and `M` columns. The robot can start at any cell in the grid and its goal is to reach the bottom-right cell (N, M). The robot can only move either right or down. However, certain cells in the grid are blocked and the robot cannot step on these cells. Your task is to determine the number of distinct paths the robot can take to reach the bottom-right cell from any given starting cell (1, 1). If there is no path available, return 0. The input to your function will be: - An integer `T` representing the number of test cases. - For each test case: - Two integers `N` and `M` representing the dimensions of the grid. - An integer `B` representing the number of blocked cells. - `B` pairs of integers, where each pair `(x, y)` represents the coordinates of a blocked cell. The output should be a list of integers, where each integer represents the number of ways to reach the bottom-right cell from the top-left corner for each test case modulo `1,000,000,007`. **Constraints:** - `1 ≤ T ≤ 10` - `1 ≤ N, M ≤ 1000` - `0 ≤ B ≤ N × M` **Example:** **Input:** ``` 2 3 3 1 2 2 3 3 2 2 2 2 3 ``` **Output:** ``` 2 1 ``` **Explanation:** In the first test case: - Grid size: 3x3 - Blocked cell: (2, 2) - The paths from (1, 1) to (3, 3) are: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second test case: - Grid size: 3x3 - Blocked cells: (2, 2), (2, 3) - The only path from (1, 1) to (3, 3) is: - Right -> Down -> Right -> Down Note: - If the grid cell (1, 1) or (N, M) is blocked, there is no way to reach the destination.","solution":"def count_paths(T, test_cases): MOD = 1_000_000_007 def compute_paths(N, M, blocked_set): if (1, 1) in blocked_set or (N, M) in blocked_set: return 0 dp = [[0] * (M + 1) for _ in range(N + 1)] dp[1][1] = 1 for i in range(1, N + 1): for j in range(1, M + 1): if (i, j) != (1, 1) and (i, j) not in blocked_set: dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD return dp[N][M] results = [] for case in test_cases: N, M, B, blocked_cells = case blocked_set = set(blocked_cells) result = compute_paths(N, M, blocked_set) results.append(result) return results"},{"question":"Alice has a rectangular cake of size n times m (measured in cells). She wants to cut the cake into pieces using horizontal and/or vertical cuts, so that each piece contains exactly one cherry. If it is not possible to do so, she needs to know that as well. The cake is represented as a grid, where each cell contains either a \'.\' (empty) or a \'C\' (cherry). Alice can cut between any two consecutive rows or columns but each cut extends from one side of the cake to the other. Help Alice determine if it is possible to cut the cake such that each resulting piece contains exactly one cherry. # Input: - The first line of input contains two integers n and m (1 leq n, m leq 1000) - the number of rows and columns of the cake. - Each of the next n lines contains m characters. Each character is either \'.\' representing an empty cell, or \'C\' representing a cell containing a cherry. # Output: - Print \\"YES\\" if it is possible to cut the cake such that each piece contains exactly one cherry, otherwise print \\"NO\\". # Example: ``` Input: 3 4 .C.. .... ..C. Output: YES Input: 3 3 .C. C.C .C. Output: NO ```","solution":"def can_cut_cake(n, m, grid): # Count the number of cherries total_cherries = sum(row.count(\'C\') for row in grid) # If no cherries, it\'s trivially possible as there is no cherry to separate if total_cherries == 0: return \\"YES\\" # Check each row and column whether the cherries can be isolated cherries_per_row = [row.count(\'C\') for row in grid] cherries_per_col = [sum(grid[i][j] == \'C\' for i in range(n)) for j in range(m)] # Each row or column must have either 0 or 1 cherry for it to be possible to cut if all(x <= 1 for x in cherries_per_row) and all(x <= 1 for x in cherries_per_col): return \\"YES\\" else: return \\"NO\\""},{"question":"On the battlefield, a legendary hero is preparing to make a decisive strike against the enemy. The battlefield is represented by a 2D grid of size n x m, where each cell\'s value indicates the height at that position. His sword\'s effectiveness depends on a unique swing pattern: he can only swing to cells in the shape of a \'Z\'. Given the height at each cell in the grid, you are required to find the maximum possible difference in height the hero can achieve through a \'Z\' shaped swing. The \'Z\' shaped swing consists of the following cells in order: 1. Top left corner of the \'Z\' (i, j) 2. Top right corner of the \'Z\' (i, j+w) 3. Bottom left corner of the \'Z\' (i+h, j) 4. Bottom right corner of the \'Z\' (i+h, j+w) The difference in height is defined as the maximum height encountered in the \'Z\' minus the minimum height encountered in the same \'Z\'. Your task is to write a program that computes the maximum height difference for any \'Z\' pattern on the battlefield. The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the battlefield. The next n lines contain m integers each, representing the height of each cell in the battlefield. Output a single integer, the maximum height difference for any valid \'Z\' shaped swing. Examples: Input: 6 5 1 2 3 4 5 5 1 1 1 5 1 1 1 1 1 1 3 2 4 4 1 1 1 2 1 1 2 3 1 1 Output: 4 Explanation: The possible \'Z\' shaped swing with the maximum height difference can be starting at the top left corner (1, 0): 1. Top left corner (1, 0) -> height = 1 2. Top right corner (1, 1) -> height = 1 3. Bottom left corner (1, 1) -> height = 3 4. Bottom right corner (2, 2) -> height = 5","solution":"def max_Z_diff(n, m, grid): max_diff = 0 for i in range(n): for j in range(m): for h in range(n - i): for w in range(m - j): if h > 0 and w > 0: heights = [ grid[i][j], grid[i][j + w], grid[i + h][j], grid[i + h][j + w] ] max_height = max(heights) min_height = min(heights) diff = max_height - min_height if diff > max_diff: max_diff = diff return max_diff # Example usage: n, m = 6, 5 grid = [ [1, 2, 3, 4, 5], [5, 1, 1, 1, 5], [1, 1, 1, 1, 1], [1, 3, 2, 4, 4], [1, 1, 1, 2, 1], [1, 2, 3, 1, 1], ] print(max_Z_diff(n, m, grid)) # Output: 4"},{"question":"You are given a string consisting of lowercase Latin letters. You need to reorder the characters in the string such that no two adjacent characters are the same. If it is possible to reorder the string to meet the requirement, return the reordered string. Otherwise, return an empty string. For example: Given the string \\"aab\\", you can rearrange it to \\"aba\\". Given the string \\"aaab\\", it is not possible to rearrange it. Write a program that finds the reordered string or determines that it\'s not possible. The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of a single string of lowercase Latin letters. The number of characters in each string is between 1 and 10^5, inclusive. Output the reordered string for each test case. If it is not possible to reorder the string such that no two adjacent characters are the same, output an empty string. In the first example, the string \\"aab\\" can be rearranged to \\"aba\\". In the second example, the string \\"aaab\\" cannot be rearranged to meet the requirements.","solution":"from collections import Counter from heapq import heappop, heappush def reorder_string(s): counter = Counter(s) max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_char is not None: heappush(max_heap, (prev_freq, prev_char)) prev_char, prev_freq = char, freq + 1 if prev_freq == 0: prev_char = None if len(result) == len(s): return \'\'.join(result) else: return \\"\\" def solve_reorder(t, test_cases): results = [] for s in test_cases: results.append(reorder_string(s)) return results"},{"question":"You are given a string s that consists of lowercase English letters. Your task is to determine the length of the longest substring which contains unique characters (i.e., all the characters in the substring are distinct). For example, given the string \\"abcabcbb\\", the answer would be 3, because the longest substring with all unique characters is \\"abc\\", which has a length of 3. If the string was \\"bbbbb\\", the answer would be 1, since the longest substring is \\"b\\". The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. Output a single integer denoting the length of the longest substring with all distinct characters. Example Input 1: abcabcbb Example Output 1: 3 Example Input 2: bbbbb Example Output 2: 1 Example Input 3: pwwkew Example Output 3: 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_map = {} left = 0 max_len = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a list of `n` projects, each represented by a tuple `(start, end)` that describes the start and end times of the project, determine the maximum number of non-overlapping projects that can be scheduled. You are required to write a function to find out the maximum number of non-overlapping projects that can be completed. # Function Signature ```python def max_non_overlapping_projects(projects: List[Tuple[int, int]]) -> int: ``` # Input - An integer `n` (1 ≤ n ≤ 100) — the number of projects. - A list `projects` containing `n` tuples. Each tuple consists of two integers `start` and `end` (0 ≤ start < end ≤ 10^4) indicating the start and end times of the project. # Output - An integer representing the maximum number of non-overlapping projects that can be arranged. # Example Input: ```python n = 4 projects = [(1, 3), (2, 5), (4, 6), (6, 8)] ``` Output: ```python 3 ``` # Explanation In this example, the optimal set of non-overlapping projects is `(1, 3), (4, 6) and (6, 8)`. Thus, the maximum number of non-overlapping projects is 3.","solution":"from typing import List, Tuple def max_non_overlapping_projects(projects: List[Tuple[int, int]]) -> int: Returns the maximum number of non-overlapping projects that can be scheduled. # Sort the projects based on their end time projects.sort(key=lambda x: x[1]) # Count the maximum number of non-overlapping projects count = 0 last_end_time = 0 for start, end in projects: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"In a distant kingdom, there is a very peculiar farm where magical plants grow. Each plant grows within a specified number of days, and some plants produce fruits multiple times during their growth cycle. The king wants to maximize the total number of fruits he can harvest within a given number of days. You are given n magical plants, each described by three integers: g_i (the number of days it takes to fully grow the plant), f_i (the number of fruits produced every growth cycle), and p_i (the initial number of fruits the plant starts with). You are also given an integer D, which represents the total number of days the king has for harvesting. Your task is to calculate the maximum number of fruits the king can harvest from the plants within D days. # Input - The first line contains two integers n and D (1 leq n leq 5 cdot 10^5, 1 leq D leq 10^9) — the number of magical plants and the total number of days. - Each of the next n lines contains three integers g_i, f_i, and p_i (1 leq g_i leq D, 1 leq f_i, p_i leq 10^3) — the growth cycle duration in days, the number of fruits produced per cycle, and the initial fruits on the plant, respectively. # Output - Print one integer — the maximum number of fruits the king can harvest from the plants within D days. # Example ``` Input: 3 10 2 3 5 3 2 6 5 10 0 Output: 43 ``` # Explanation - For the first plant: Within 10 days, it can complete 5 full growth cycles (every 2 days), producing 5 times 3 = 15 fruits. Plus the initial 5 fruits, giving a total of 20 fruits. - For the second plant: Within 10 days, it can complete 3 full growth cycles (every 3 days), producing 3 times 2 = 6 fruits. Plus the initial 6 fruits, giving a total of 12 fruits. - For the third plant: Within 10 days, it can complete 2 full growth cycles (every 5 days), producing 2 times 10 = 20 fruits. It starts with no initial fruits. Hence, the total maximum number of fruits is 20 + 12 + 20 = 52.","solution":"def max_fruits(n, D, plants): Returns the maximum number of fruits that can be harvested from the magical plants within D days. :param n: Integer, number of magical plants :param D: Integer, total number of days for harvesting :param plants: List of tuples, each containing three integers representing the growth cycle duration (g_i), the number of fruits produced per cycle (f_i), and the initial number of fruits (p_i) for each plant :return: Integer, maximum number of fruits harvested total_fruits = 0 for g_i, f_i, p_i in plants: # Calculate the number of complete growth cycles within D days for each plant complete_cycles = D // g_i # Calculate the total fruits for each plant including initial fruits and fruits from complete cycles fruits = complete_cycles * f_i + p_i total_fruits += fruits return total_fruits"},{"question":"You are given an array of integers and a target integer. Your task is to determine whether you can find two distinct integers in the array whose sum is exactly equal to the target integer. The first line contains two integers n and t (1 ≤ n ≤ 10^5, -10^9 ≤ t ≤ 10^9). The second line contains n integers, the elements of the array (−10^9 ≤ element ≤ 10^9). If such a pair exists, print \\"YES\\" in the first line and two space-separated integers in the second line — the indices (1-based) of the two numbers in the array whose sum equals the target integer. If there are multiple valid answers, you may print any of them. If no such pair exists, print \\"NO\\".","solution":"def find_two_sum_indices(n, t, array): Determines if there are two distinct integers in the array whose sum equals t. Parameters: n (int): Length of the array. t (int): Target sum. array (list of int): List of integers. Returns: str: \\"YES\\" followed by indices if a pair is found, else \\"NO\\". seen = {} for i in range(n): complement = t - array[i] if complement in seen: return f\\"YESn{seen[complement] + 1} {i + 1}\\" seen[array[i]] = i return \\"NO\\""},{"question":"Lina is known for her collection of music playlists. She has m playlists, each consisting of various songs, and she wants to organize these songs into n different albums. Each song has a unique integer identifier, and a song can belong to multiple playlists. However, each song can be part of only a single album. Lina wants to maximize the variety of songs in each album, ensuring that no album ends up with fewer songs than a certain minimum threshold p. Given the song identifiers in all m playlists, help Lina decide which songs to include in each of the n albums such that the number of songs in each album is maximized while maintaining at least p songs per album. The first line contains three integers n, m, and p (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000, 1 ≤ p ≤ 100), representing the number of albums, the number of playlists, and the minimum number of songs per album respectively. The next m lines contain the playlists. Each line starts with an integer ki (1 ≤ ki ≤ 1000), the number of songs in the i-th playlist, followed by ki space-separated integers, representing the identifiers of the songs in the i-th playlist. Songs in different playlists can overlap. Print n lines, each line containing the identifiers of the songs included in the respective album. If there are multiple valid solutions, print any of them. If there is no valid solution, print \\"No solution\\". In the first example, Lina can distribute the songs such that each album has a variety of songs while maintaining at least p songs per album, ensuring genres are evenly spread out. In the second example, it\'s impossible to create n albums each having at least p songs due to the overlapping nature of the songs in the playlists. In the third example, since there are exactly enough songs to meet the minimum requirement for each album, any valid distribution satisfying the constraints will work.","solution":"def organize_albums(n, m, p, playlists): from collections import defaultdict, Counter # Step 1: Gather all unique songs all_songs = set() for playlist in playlists: all_songs.update(playlist[1:]) if len(all_songs) < n * p: return \\"No solution\\" # Step 2: Create a counter for the frequency of each song song_counter = Counter() for playlist in playlists: for song in playlist[1:]: song_counter[song] += 1 # Step 3: Sort songs based on frequency and then identifier sorted_songs = sorted(song_counter.items(), key=lambda x: (-x[1], x[0])) # Step 4: Distribute songs to albums albums = [[] for _ in range(n)] idx = 0 for song, _ in sorted_songs: albums[idx].append(song) idx = (idx + 1) % n # Verify if the solution is valid for album in albums: if len(album) < p: return \\"No solution\\" return albums"},{"question":"You are given a tree (a connected undirected graph with no cycles) with n vertices. Each vertex has a value associated with it. Your task is to find the maximum sum of values along any path in the tree. A path is defined as a sequence of vertices where each adjacent pair of vertices in the sequence is connected by an edge in the tree. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of vertices in the tree. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000) — the values associated with the vertices. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — denoting an edge between vertex u and vertex v. Output: - Print a single integer — the maximum sum of values along any path in the tree. Example: Input: 5 1 2 3 4 5 1 2 2 3 3 4 4 5 Output: 15 Explanation: The path that gives the maximum sum (1 + 2 + 3 + 4 + 5) = 15 is 1 -> 2 -> 3 -> 4 -> 5.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) def build_tree(edges, n): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def max_path_sum(n, values, edges): tree = build_tree(edges, n) visited = [False] * (n + 1) max_sum = [0] * (n + 1) def dfs(node): visited[node] = True curr_sum = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: curr_sum += dfs(neighbor) max_sum[node] = max(max_sum[node], curr_sum) return curr_sum for i in range(1, n + 1): if not visited[i]: dfs(i) return max(max_sum) # Example usage: n = 5 values = [1, 2, 3, 4, 5] edges = [ (1, 2), (2, 3), (3, 4), (4, 5) ] print(max_path_sum(n, values, edges)) # Output: 15"},{"question":"In a mysterious land, there are n magical fountains lined up in a row, each producing a specific type of potion with varying durations. The local wizard wants to collect a specific number of potion bottles by visiting some of these fountains in a single walk. You must ensure that the collection happens in such a way that the wizard collects exactly k bottles of potion. Each fountain can produce as many bottles of potion as its duration, but a fountain only produces a specific type of potion. The wizard can start collecting potions from any fountain and can only move to adjacent fountains until he has collected exactly k bottles. He can collect all potions from a fountain or skip it entirely if needed. Once the wizard starts the collecting process from a fountain, he cannot go back to a previously visited fountain. The wizard needs your help to find out the minimum duration (which is essentially the longest time the wizard needs to wait at any fountain in his path) required to collect exactly k bottles in a single walk from the fountains. The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 100,000 and 1 ≤ k ≤ 100,000) representing the number of fountains and the number of potion bottles needed, respectively. The second line contains n space-separated integers d1, d2, ..., dn (1 ≤ di ≤ 1,000,000) where di is the duration for which the ith fountain produces potion bottles. Print a single integer representing the minimum duration required to collect exactly k potion bottles in a single walk. For example, in the first sample, the wizard needs to collect exactly 5 bottles. The optimal path is to start at the second fountain and collect all 1 bottle, then move to the third fountain and collect all 4 bottles. The minimum duration is hence the maximum of 9 and 1, which is 9. In the second sample, to collect 10 bottles, the wizard should collect all 5 bottles from the first fountain and all 5 bottles from the next fountain, making the minimum duration 10.","solution":"def min_duration_to_collect_potions(n, k, durations): Returns the minimum duration required to collect exactly k potion bottles in a single walk. :param n: int - number of fountains. :param k: int - number of potion bottles needed. :param durations: List[int] - durations of the fountains. :return: int - minimum duration required. left, right = 1, max(durations) result = right while left <= right: mid = (left + right) // 2 current_sum = 0 max_dur = 0 temp_sum = 0 for duration in durations: if duration > mid: if temp_sum > 0: max_dur = max(max_dur, temp_sum) current_sum += temp_sum temp_sum = 0 continue temp_sum += duration if temp_sum >= k: max_dur = mid current_sum += temp_sum break if temp_sum > 0 and temp_sum < k: max_dur = max(max_dur, temp_sum) current_sum += temp_sum if current_sum >= k: result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"User has a novel idea for a card game. In this game, there are a total of n players numbered from 1 to n sitting in a circle. Each player receives a card with a unique number from 1 to n written on it. The game progresses in turns, and each turn, a player must pass their card to the player sitting immediately to their left. The game continues until a player receives the card they initially owned. Your task is to determine the total number of turns the game must continue until all players have received their initial cards back. Write a function: ```python def card_game_turns(n: int) -> int: # Your code here ``` Input: - A single integer n (1 le n le 10^5) representing the number of players. Output: - Return a single integer representing the number of turns until all players have received their initial cards back. Example: Input: ```python 5 ``` Output: ```python 5 ``` Explanation: In this example, there are 5 players, and each player must pass their card to the player on their left. After 5 turns, each card will have returned to its original owner.","solution":"def card_game_turns(n: int) -> int: Returns the total number of turns until all players have received their initial cards back. return n"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find the length of the longest substring of s such that this substring contains at most two distinct characters. For example, if the string is \\"eceba\\", then the longest substring with at most two distinct characters is \\"ece\\" with a length of 3. If the string is \\"ccaabbb\\", then the longest substring with at most two distinct characters is \\"aabbb\\" with a length of 5. Write a function `longestTwoDistinct(s)` that takes a string s as input and returns the length of the longest substring containing at most two distinct characters. # Input - The input is a single string s (1 ≤ |s| ≤ 100,000) consisting of lowercase English letters. # Output - The output is a single integer – the length of the longest substring of s that contains at most two distinct characters. # Example ```python assert longestTwoDistinct(\\"abcabcabc\\") == 2 assert longestTwoDistinct(\\"eceba\\") == 3 assert longestTwoDistinct(\\"ccaabbb\\") == 5 ```","solution":"def longestTwoDistinct(s): Returns the length of the longest substring with at most two distinct characters. if len(s) == 0: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers, find the length of the shortest contiguous subarray such that the sum of this subarray is greater than or equal to a given integer S. If there isn\'t one, return 0 instead. The first line of input contains two integers N (1 leq N leq 10^5) and S (1 leq S leq 10^9), representing the length of the array and the target sum respectively. The second line contains N positive integers a_1, a_2, dots, a_n (1 leq a_i leq 10^4) which represent the elements of the array. Output the length of the shortest subarray with sum greater than or equal to S. If no such subarray exists, print 0. # Example Input ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` Output ``` 2 ``` Explanation: The shortest subarray with sum greater than or equal to 15 is [7, 8], which has a length of 2. Even though other subarrays like [1, 2, 3, 4, 5], [4, 5, 6], etc., also have a sum greater than or equal to 15, their lengths are greater than 2. Hence, the solution is 2.","solution":"def min_subarray_length(S, array): from sys import maxsize N = len(array) min_length = maxsize current_sum = 0 start = 0 for end in range(N): current_sum += array[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= array[start] start += 1 return min_length if min_length != maxsize else 0 # Example Usage of the function # N and S N = 10 S = 15 array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(min_subarray_length(S, array)) # Expected output: 2"},{"question":"Farmer Bob has a rectangular field that is divided into a grid of m rows and n columns. Each cell in the grid can either be fertile (represented by a \'1\') or barren (represented by a \'0\'). Seeds can only be planted on fertile land but planting is costly. To minimize the planting cost, Bob wants to know the size of the largest square area of fertile land that can be planted as a single plot. Given the dimension of the field in terms of m (rows) and n (columns), followed by the grid itself, your task is to calculate the area of the largest possible square of fertile land that can be planted as a single plot. The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the field. Each of the next m lines contains n characters. Each character is either \'1\' (fertile) or \'0\' (barren). Print a single integer — the area of the largest square of fertile land that can be planted. Example: Input: 3 4 1010 1111 0110 Output: 4 In this example, the largest square of fertile land is a 2x2 square, giving an area of 4.","solution":"def largest_square_area(m, n, field): Returns the area of the largest square of fertile land that can be planted. m: int, number of rows n: int, number of columns field: list of strings, each with n characters (\'1\' or \'0\'), representing the grid. # Create a DP table to store the size of the largest square ending at (i, j) dp = [[0] * n for _ in range(m)] max_square_length = 0 for i in range(m): for j in range(n): if field[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 # Square of size 1 since it\'s on the edge else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update the maximum square length max_square_length = max(max_square_length, dp[i][j]) # Return the area of the largest square return max_square_length ** 2 # Example usage: # m, n = 3, 4 # field = [\\"1010\\", \\"1111\\", \\"0110\\"] # print(largest_square_area(m, n, field)) # Output: 4"},{"question":"You are given two integers x and y. Your task is to determine the minimum number of operations required to transform x into y using the following operations: 1. Multiply x by 2 (i.e., x = x * 2). 2. Subtract 1 from x (i.e., x = x - 1). You should always aim to use the multiplication operation first as long as it brings x closer to y. If x ever becomes greater than y, you should use the subtraction operation to try and reduce it. The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains two integers x and y (1 ≤ x, y ≤ 10^9). For each test case, print a single integer — the minimum number of operations required to transform x into y. For example, if x = 2 and y = 3, the output should be 2 because: 1. Multiply x by 2: x = 4 2. Subtract 1: x = 3 If x = 5 and y = 8, the output should be 2 because: 1. Multiply x by 2: x = 10 2. Subtract 1 two times: x = 8 (total operations = 2) For the third sample, if x = 7 and y = 5, the output should be 2 because: 1. Subtract 1 two times: x = 5","solution":"def min_operations_to_transform(x, y): operations = 0 while x != y: if x < y: if y % 2 == 0: y = y // 2 else: y += 1 else: operations += x - y break operations += 1 return operations def solve(test_cases): results = [] for x, y in test_cases: results.append(min_operations_to_transform(x, y)) return results"},{"question":"Polycarp is working on a project involving sequences of integers. He has a list of integers, and he wants to find segments of this list where all elements are the same. From these segments, he wants to remove some integers so that no two consecutive integers are equal. More formally, you are given a list of integers. You need to find the minimum number of integers to remove from this list so that the resulting list has no two consecutive elements being the same. The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 100) — the number of elements in the list. - The second line contains n integers separated by spaces — the elements of the list. For each test case, print the minimum number of integers Polycarp needs to remove in order to ensure no two consecutive integers in the list are the same. # Example Input: ``` 3 5 1 2 2 3 3 4 1 1 1 1 6 1 2 1 2 1 2 ``` Output: ``` 2 3 0 ``` # Explanation In the first test case, Polycarp can remove the second \'2\' and the second \'3\' to get the list [1, 2, 3]. In the second test case, Polycarp needs to remove three \'1\'s to get the list [1]. In the third test case, no removals are necessary as there are no two consecutive integers that are the same.","solution":"def min_removals(test_cases): results = [] for n, elements in test_cases: removals = 0 for i in range(1, n): if elements[i] == elements[i-1]: removals += 1 results.append(removals) return results"},{"question":"In a small village, there are multiple wells along the main road, each providing water at a unique efficiency rate. The villagers want to know the most efficient source of water for different needs they have during the day. Each well\'s efficiency is given in terms of water output per unit time. You are given an integer n that denotes the number of wells, and a list of n integers where the i-th integer represents the efficiency of the i-th well. You need to answer q queries. Each query consists of a single integer k, asking for the maximum efficiency of a well among the first k wells. The first line contains two integers, n and q (1 ≤ n, q ≤ 10^5). The second line contains n integers where the i-th integer (1 ≤ efficiency_i ≤ 10^9) is the efficiency of the i-th well. Each of the next q lines contains a single integer k (1 ≤ k ≤ n). Print q lines, each containing the maximum efficiency of a well among the first k wells. Sample Input: ``` 5 3 3 5 2 8 6 2 4 5 ``` Sample Output: ``` 5 8 8 ```","solution":"def max_efficiencies(n, q, efficiencies, queries): This function returns the maximum efficiency of a well among the first k wells for each query. Parameters: n (int): Number of wells. q (int): Number of queries. efficiencies (list of int): List containing the efficiencies of the wells. queries (list of int): List containing the queries. Returns: list of int: List containing the maximum efficiencies for each query. # Precompute prefix maximums for efficiencies prefix_max = [0] * n prefix_max[0] = efficiencies[0] for i in range(1, n): prefix_max[i] = max(prefix_max[i - 1], efficiencies[i]) result = [] for k in queries: result.append(prefix_max[k - 1]) return result # Example usage: n, q = 5, 3 efficiencies = [3, 5, 2, 8, 6] queries = [2, 4, 5] print(max_efficiencies(n, q, efficiencies, queries)) # Output: [5, 8, 8]"},{"question":"You are given a string s which consists of lowercase English letters. You need to perform several queries of the following type: 1. **UPDATE x c**: Change the character at the position x in the string s to the character c. 2. **ISPALINDROME l r**: Determine if the substring of s from index l to index r (inclusive) is a palindrome. A string is called a palindrome if it reads the same backward as forward. The first line contains two integers n and q (1 le n, q le 100000) — the length of the string s and the number of queries. The second line contains the string s of length n (1 le |s| le 100000, s contains only lowercase English letters). Each of the next q lines contains a query, which can be either: 1. \\"UPDATE x c\\" (1 ≤ x ≤ n, c is a lowercase English letter) 2. \\"ISPALINDROME l r\\" (1 ≤ l ≤ r ≤ n) For each \\"ISPALINDROME\\" query, print \\"YES\\" if the substring from index l to index r is a palindrome, otherwise print \\"NO\\". **Example:** **Input:** ``` 5 5 ababa ISPALINDROME 1 3 UPDATE 3 c ISPALINDROME 1 3 ISPALINDROME 2 5 UPDATE 3 a ISPALINDROME 1 5 ``` **Output:** ``` YES NO NO YES ```","solution":"def solve(n, q, s, queries): Solves the given problem with string updates and palindrome queries. :param n: Length of the string :param q: Number of queries :param s: The initial string :param queries: List of queries :return: List of responses for ISPALINDROME queries s = list(s) # Convert to list for mutable operations results = [] # Store results for ISPALINDROME queries for query in queries: parts = query.split() if parts[0] == \\"UPDATE\\": x = int(parts[1]) - 1 c = parts[2] s[x] = c elif parts[0] == \\"ISPALINDROME\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 substring = s[l:r+1] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A farming village has n fields and m paths. Fields are numbered from 1 to n. To ensure better security and prevent any overuse of the paths, the village chief has decided to form a new pattern such that paths can only be unidirectional. Meaning, for any path between fields u and v, the pathway allows travel either only from u to v or only from v to u. The challenge is to direct the traffic on the paths in a way that maximizes the number of pairs (u, v) where 1 ≤ u, v ≤ n and it is possible to reach field v from u via these unidirectional paths. The first line of input contains integers n and m, (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of fields and paths in the village. Each of the following m lines contains two integers u and v, (u ≠ v), indicating the two fields connected by the path in the village. If there is a path between any two fields, it means both fields can always be reached from each other (i.e., the initial paths were bidirectional). Print the maximum number of pairs (u, v) such that one can travel from field u to field v after the paths are directed. Example: Input: 5 5 1 2 2 3 3 4 4 5 1 5 Output: 14 Explanation: In this case, if all paths are directed from field with higher number to lower number, all pairs except pairs where u > v are reachable. So pairs are: (1,1), (2,2), (3,3), (4,4), (5,5), (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5). In total, 14 pairs are possible.","solution":"def maximum_reachable_pairs(n, m, paths): Function to calculate the maximum number of pairs (u, v) such that one can travel from field u to field v after the paths are directed. :param n: int : number of fields :param m: int : number of paths :param paths: list of tuples : each tuple contains two integers u and v representing a bidirectional path between fields u and v. :return: int : maximum number of reachable pairs (u, v) # Calculate the number of reachable pairs. return n * (n + 1) // 2"},{"question":"You have been given a rectangular grid of size n x m, composed of cells with positive integer values. Each cell represents a point with a particular value. You are provided with q queries, each consisting of two pairs of coordinates that define two cells in the grid. For each query, determine the largest value among the cells included in the rectangular subgrid defined by the two pairs of coordinates (inclusive). The first line contains three integers n, m, and q (1 <= n, m <= 500, 1 <= q <= 1000) — the number of rows, the number of columns, and the number of queries, respectively. The next n lines each consist of m integers. Each integer represents the value of a cell (1 <= value <= 10^9). The following q lines each consist of four integers r1, c1, r2, c2 (1 <= r1, r2 <= n, 1 <= c1, c2 <= m) — the coordinates of the top-left and bottom-right corners of the rectangle (1-indexed) for the query. Print q lines. For each query, print a single integer representing the maximum value found in the given subgrid. Example: Input: 5 5 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 1 3 3 2 2 5 5 Output: 13 25 Explanation: For the first query (1, 1, 3, 3), the subgrid includes the following values: 1 2 3 6 7 8 11 12 13 The maximum value in this subgrid is 13. For the second query (2, 2, 5, 5), the subgrid includes the following values: 7 8 9 10 12 13 14 15 17 18 19 20 22 23 24 25 The maximum value in this subgrid is 25.","solution":"def max_value_in_subgrid(grid, queries): results = [] for r1, c1, r2, c2 in queries: max_val = -1 for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): max_val = max(max_val, grid[i][j]) results.append(max_val) return results def process_input(n, m, q, grid_input, queries_input): grid = [list(map(int, grid_input[i].split())) for i in range(n)] queries = [list(map(int, queries_input[i].split())) for i in range(q)] return max_value_in_subgrid(grid, queries)"},{"question":"In a faraway kingdom, there are n castles numbered from 1 to n, connected by m bidirectional roads. Each road has a certain construction cost. The kingdom\'s king decided to ensure that there is a way to travel between every pair of castles using train tracks. However, the train tracks can only be built on some of the existing roads (i.e., no new roads can be constructed), and the objective is to minimize the overall construction cost. Given the map of the kingdom with the castles and roads, help the king determine the minimum cost to lay down the train tracks such that there exists a path between every pair of castles. The first line contains two integers, n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2 * 10^5), the number of castles and roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), where u and v are the castles connected by a road and w is the construction cost. If it\'s impossible to connect all castles, output -1. Otherwise, print the minimum construction cost. Example: Input: 4 4 1 2 1 2 3 2 3 4 1 4 1 3 Output: 4","solution":"def minimum_cost_to_connect_castles(n, m, roads): Determine the minimum cost to connect all castles or return -1 if impossible. Parameters: n : int : number of castles m : int : number of roads roads : list of tuples : each tuple contains three integers (u, v, w) where u, v are castles connected by a road with cost w Returns: int : minimum construction cost or -1 if all castles cannot be connected if m == 0: return -1 if n > 1 else 0 parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY roads.sort(key=lambda x: x[2]) # Sort edges based on cost total_cost = 0 connected_components = n for u, v, w in roads: if find(u - 1) != find(v - 1): union(u - 1, v - 1) total_cost += w connected_components -= 1 if connected_components == 1: return total_cost return -1 def process_input(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) roads = [] index = 2 for _ in range(m): u, v, w = int(data[index]), int(data[index+1]), int(data[index+2]) roads.append((u, v, w)) index += 3 return n, m, roads"},{"question":"You are given a 2D grid of size n times n consisting of non-negative integers. Each cell (i, j) contains an integer that represents a height. You start at the top-left corner of the grid (cell (1, 1)) and you want to reach the bottom-right corner (cell (n, n)). From any cell (i, j), you can only move in two directions: - Right to (i, j+1), as long as j+1 ≤ n. - Down to (i+1, j), as long as i+1 ≤ n. Your goal is to find the minimum elevation difference path from the top-left corner to the bottom-right corner. The elevation difference of the path is defined as the maximum absolute difference between the heights of two adjacent cells on the path. The first line contains an integer n (1 le n le 500) - the size of the grid. The next n lines each contain n integers, where the i-th integer in the j-th line represents the height of the cell (i, j). (0 le text{height at (i, j)} le 10^9). Print a single integer - the minimum elevation difference of the optimal path from the top-left corner to the bottom-right corner. Example: ``` 3 1 3 5 2 8 3 4 6 2 ``` Output: ``` 2 ``` In the example above, one of the possible paths is (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3), with the maximum elevation difference being 2 (between cells (1, 2) with height 3 and (2, 2) with height 8, and between cells (2, 2) with height 8 and (3, 2) with height 6). Hence, the minimum elevation difference path has a difference of 2.","solution":"from heapq import heappush, heappop def min_elevation_diff(grid): n = len(grid) directions = [(0, 1), (1, 0)] # Right and Down # Min-heap to store (max_diff, x, y) pq = [(0, 0, 0)] # Starting at (0, 0) with initial difference 0 visited = [[False] * n for _ in range(n)] visited[0][0] = True while pq: max_diff, x, y = heappop(pq) # If we\'ve reached the bottom-right corner if x == n - 1 and y == n - 1: return max_diff for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True new_diff = max(max_diff, abs(grid[nx][ny] - grid[x][y])) heappush(pq, (new_diff, nx, ny)) return -1 # If there is no path (shouldn\'t happen with valid inputs) # Example usage example_grid = [ [1, 3, 5], [2, 8, 3], [4, 6, 2] ] print(min_elevation_diff(example_grid)) # Output: 2"},{"question":"Vasya plays a new game called \\"Maze Escape\\", where he needs to guide a character out of a rectangular maze. The maze can be represented by an n x m grid where each cell can either be open (represented by \'.\') or blocked (represented by \'#\'). Vasya’s character starts at the top-left cell (1, 1) and tries to reach the bottom-right cell (n, m). At each step, the character can move one cell to the right, left, up, or down but cannot move into a blocked cell or leave the bounds of the grid. The character also leaves a trail of blocked cells behind them after each move, meaning the cell they move from becomes blocked. Help Vasya determine if it is possible for his character to reach the bottom-right cell (n, m) from the top-left cell (1, 1). The first line of input contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each, representing the maze. The character in the i-th row and j-th column represents the state of the (i, j) cell: \'.\' for an open cell and \'#\' for a blocked cell. The maze will be such that the starting cell (1, 1) and the ending cell (n, m) are always open (\'.\'). Output \\"YES\\" if the character can reach the bottom-right cell, otherwise, print \\"NO\\". Example input: 4 4 . ... . .... ..#. Output: YES Example input: 3 3 . .#. . Output: NO In the first example, the character can start from the top-left corner, move right along the first row to avoid the initial blocked cells, then down to the bottom row, and finally right to the bottom-right corner of the grid. In the second example, there are no possible paths to reach the bottom-right corner without encountering a blocked cell or returning to a previously visited cell which becomes blocked.","solution":"def can_escape_maze(n, m, maze): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' def dfs(x, y): if not is_valid(x, y): return False if x == n - 1 and y == m - 1: return True maze[x][y] = \'#\' for dx, dy in directions: if dfs(x + dx, y + dy): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"A group of software developers in an international company is organizing a database storage analysis. They have a list of file sizes, but their bandwidth to transfer these files is limited. To optimize the data transfer process, they decide to split the files into subgroups where each subgroup has a combined size that is as close as possible to a target size, without exceeding it. The company wants a solution that determines the minimum number of subgroups required to achieve this. Given integer values representing the sizes of the files and an integer representing the target size each subgroup should aim to get close to, develop an algorithm to find the minimum number of subgroups needed to store all files without exceeding the target size in any subgroup. The first line contains two integers `n` (1 ≤ n ≤ 200) and `target` (1 ≤ target ≤ 10^6) - the number of files and the target size of each subgroup, respectively. The second line contains n integers `sizes[1], sizes[2], ..., sizes[n]` (1 ≤ sizes[i] ≤ 10^6) - the sizes of the files. Output the minimum number of subgroups required to store all files. # Example Input: ``` 5 10 2 3 7 5 8 ``` Output: ``` 3 ``` In this example, we can have the subgroups: [2, 3, 5], [7], and [8]. This minimizes the total number of subgroups to 3.","solution":"def minimum_subgroups(n, target, sizes): Returns the minimum number of subgroups required to store all files without exceeding the target size in any subgroup. sizes.sort(reverse=True) subgroups = [] for size in sizes: placed = False for subgroup in subgroups: if sum(subgroup) + size <= target: subgroup.append(size) placed = True break if not placed: subgroups.append([size]) return len(subgroups)"},{"question":"The new question should be aligned with the existing ones in terms of complexity and scope. Here it goes: 1. Choose any character in the string and change it to any other lowercase Latin letter. 2. Delete any character from the string. Your goal is to transform string s into a palindrome with the minimum number of operations. Write a program to find the minimum number of operations required to transform the given string s into a palindrome. The first line contains an integer t (1 le t le 100), the number of test cases. The next t lines contain a string s (1 le |s| le 1000) for each test case. Print t lines with the minimum number of operations required to make each string a palindrome. In the first example, the string \\"ab\\" can be turned into a palindrome by changing \'b\' to \'a\', so the minimum number of operations is 1. In the second example, the string \\"abb\\" can be transformed by changing the first \'a\' to \'b\', or changing the last \'b\' to \'a\', so the minimum number of operations is 1. In the third example, string \\"racecar\\" is already a palindrome, so the minimum number of operations is 0.","solution":"def min_operations_to_palindrome(s): length = len(s) count = 0 for i in range(len(s) // 2): if s[i] != s[length - i - 1]: count += 1 return count def solve(test_cases): results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"Farmer John has a farm with n apple trees arranged in a single row, each with an integer number of apples. Every day, he will replant exactly one apple tree to another position in the row. He wants to determine if the tree he replants is the one with the maximum number of apples in the row, and exactly one other tree (chosen arbitrarily) has half or fewer apples than that maximum tree. Given the number of apples on each of the n apple trees, determine if it\'s possible to achieve the desired condition after one replanting operation. Additionally, if it is possible, calculate the minimum number of apples required for replanting to achieve this condition. **Input:** The first input line contains an integer n (1 ≤ n ≤ 100), the number of apple trees. The second input line contains n integers a[i] (1 ≤ a[i] ≤ 1000), the number of apples on the i-th apple tree. **Output:** Print an integer \\"1\\" if it\'s possible to achieve the desired condition after a replanting operation, otherwise print \\"0\\". If it\'s possible, also print the minimum number of apples required for replanting to achieve this condition. **Example:** Input: ``` 5 2 1 3 2 5 ``` Output: ``` 1 1 ``` Input: ``` 4 4 4 4 7 ``` Output: ``` 0 ``` **Explanation:** In the first example, replanting the tree with 3 apples to a position where it has 1 apple will satisfy the condition, as the tree with 5 apples will remain the maximum and there will be exactly one tree having half or fewer apples than the maximum (the tree replanted to have 1 apple). In the second example, no replanting operation can satisfy the desired condition since all the trees with the same or fewer apples cannot create a unique \\"half or fewer\\" condition to the maximum tree.","solution":"def can_replant_trees(n, apples): Determine if it\'s possible to replant one tree to achieve the condition that one tree has the maximum apples and exactly one other tree has half or fewer apples. If possible, return 1 and the minimum number of apples for replanting, otherwise return 0. max_apples = max(apples) half_apples_count = sum(1 for apple in apples if apple * 2 <= max_apples) if half_apples_count >= 1: return 1, min(apple for apple in apples if apple * 2 <= max_apples) return 0,"},{"question":"In a popular card game, each card has a rank and a suit. The ranks are 1 to 13, where 1 is Ace, 11 is Jack, 12 is Queen, and 13 is King. The suits are Hearts, Diamonds, Clubs, and Spades. Given a deck of cards, you need to find the longest subsequence of cards where all cards have the same suit and the ranks are in increasing consecutive order. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of cards in the deck. The next n lines each contain a string r and a string s where r is the rank of the card and s is the suit of the card. Ranks are given as \\"A\\", \\"2\\", \\"3\\", ..., \\"10\\", \\"J\\", \\"Q\\", \\"K\\" and suits as \\"H\\", \\"D\\", \\"C\\", \\"S\\" which stand for Hearts, Diamonds, Clubs, and Spades respectively. Print one integer — the length of the longest consecutive sequence of cards in the same suit. In the first sample, the longest consecutive sequence is two of hearts, three of hearts, four of hearts. In the second sample, there is no valid sequence. For example: Input: 5 2 H 3 H 4 H 9 C 10 S Output: 3","solution":"def longest_consecutive_subsequence(cards): suits = {\'H\': [], \'D\': [], \'C\': [], \'S\': []} rank_to_value = {\'A\': 1, \'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13} # Separate cards by suits and convert rank to numerical value for rank, suit in cards: suits[suit].append(rank_to_value[rank]) def find_longest_sequence(ranks): ranks = sorted(ranks) longest = current = 1 if ranks else 0 for i in range(1, len(ranks)): if ranks[i] == ranks[i-1] + 1: current += 1 else: longest = max(longest, current) current = 1 longest = max(longest, current) return longest max_length = 0 for suit in suits: max_length = max(max_length, find_longest_sequence(suits[suit])) return max_length"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each edge connects two different nodes and has an associated weight. Your task is to process `q` queries about the graph. Each query asks you to determine the shortest path between two given nodes. If there is no path between the nodes, output `-1` for that query. The graph might be sparse or dense, so efficiency is essential. The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of nodes and edges in the graph, respectively. The next `m` lines describe the edges, each containing three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000) — indicating that there is an edge between nodes `u` and `v` with weight `w`. The following line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. Each of the next `q` lines describes a query with two integers `a` and `b` (1 ≤ a, b ≤ n) — asking for the shortest path between nodes `a` and `b`. Print the answer for each query on a new line. If no path exists, print `-1` for that query.","solution":"import heapq import collections import sys def dijkstra(graph, start, n): # Distance from start to each node initially infinity distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] # (distance, node) heapq.heapify(priority_queue) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def solve(n, m, edges, queries): graph = collections.defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b in queries: if a == b: results.append(0) continue distances = dijkstra(graph, a, n) result = distances[b] if distances[b] != float(\'inf\') else -1 results.append(result) return results"},{"question":"Given an n x m grid representing a farm, Marisa the Rabbit needs to collect all the carrots placed on the grid while avoiding the foxes. Each cell in the grid can be empty, contain a carrot, or have a fox. Marisa can move up, down, left, or right but cannot move diagonally, and she cannot move into a cell containing a fox. Marisa starts at the top-left corner (1,1) and wants to find the maximum number of carrots she can collect while reaching the bottom-right corner (n,m). If it\'s not possible to reach the bottom-right corner, the output should be - 1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m characters representing the grid: - \'.\' denotes an empty cell, - \'C\' denotes a cell with a carrot, - \'F\' denotes a cell with a fox. Marisa always starts at an empty cell (1,1) and the bottom-right corner (n,m) is also an empty cell. Print an integer representing the maximum number of carrots Marisa can collect or -1 if she\'s unable to reach the bottom-right corner. # Example Input: 5 5 . . . F . C . C . . . F F . C C . . . C . . C . . Output: 3 Explanation: One possible path Marisa can take to collect the maximum number of carrots is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (5,4) -> (5,5) Along this path, she collects 3 carrots.","solution":"def collect_max_carrots(grid): from collections import deque n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 0)]) # (x, y, carrots) visited = [[False] * m for _ in range(n)] visited[0][0] = True max_carrots = -1 while queue: x, y, carrots = queue.popleft() if x == n-1 and y == m-1: if carrots > max_carrots: max_carrots = carrots for dx, dy in directions: nx, ny, nc = x + dx, y + dy, carrots if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] != \'F\': if grid[nx][ny] == \'C\': nc += 1 visited[nx][ny] = True queue.append((nx, ny, nc)) if max_carrots == -1: return -1 return max_carrots"},{"question":"You are part of a tech support team, and one day you are tasked with optimizing the storage of user logs on a server. The logs are currently stored as large text files with each line representing a single log entry. To save space, you decide to implement a log compression system that encodes consecutive log entries if they are identical. Your task is to write a program that takes a sequence of log entries and compresses it using Run-Length Encoding (RLE). In RLE, consecutive repeated entries are replaced with the entry followed by the number of repetitions. If an entry appears only once, it remains unchanged. For example, given the input: ``` AAA AAA BBB BBB CCC AAA ``` The compressed output would be: ``` AAA3 BBB2 CCC1 AAA1 ``` # Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) indicating the number of log entries. - The next n lines each contain a log entry consisting of uppercase letters (A-Z) with a length between 1 and 100 characters. # Output: - Output n lines containing the compressed log entries using the described RLE method. # Example: Input: ``` 6 AAA AAA BBB BBB CCC AAA ``` Output: ``` AAA3 BBB2 CCC1 AAA1 ```","solution":"def compress_logs(n, logs): Compress log entries using Run-Length Encoding (RLE). Parameters: n (int): Number of log entries logs (list): List of log entries as strings Returns: list: Compressed log entries if n == 0: return [] compressed_logs = [] current_log = logs[0] count = 1 for i in range(1, n): if logs[i] == current_log: count += 1 else: compressed_logs.append(f\\"{current_log}{count}\\") current_log = logs[i] count = 1 compressed_logs.append(f\\"{current_log}{count}\\") return compressed_logs"},{"question":"Given a list of integers and an integer target, return the indices of the two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. **Example 1:** ``` Input: [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. ``` **Example 2:** ``` Input: [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. ``` **Example 3:** ``` Input: [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6, we return [0, 1]. ``` **Constraints:** - Each input list will have exactly one solution. - You may not use the same element twice. - You can return the indices in any order. **Note:** - The input list may contain both positive and negative integers. - The length of the input list is between 2 and 10⁴. **Function Signature:** ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` **Example Usage:** ```python assert two_sum([2, 7, 11, 15], 9) == [0, 1] assert two_sum([3, 2, 4], 6) == [1, 2] assert two_sum([3, 3], 6) == [0, 1] ```","solution":"def two_sum(nums, target): Returns indices of the two numbers that add up to the target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"You are given a grid with n rows and m columns filled with integers. Your task is to find the largest sum of any rectangle subgrid. A rectangle subgrid is defined by choosing two rows and two columns. The sum of the rectangle subgrid is the sum of all integers inside the rectangle defined by these rows and columns. Write a function to compute the largest sum of any rectangle subgrid. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers separated by spaces — the elements of the grid. Each element of the grid will be an integer such that |element| ≤ 100. Print a single integer — the largest sum of any rectangle subgrid. # Example Input ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output ``` 29 ``` # Explanation The subgrid with the largest sum is: ``` 3 8 10 1 3 -4 -1 1 7 ``` Sum = 29","solution":"def max_sum_subgrid(grid): Returns the largest sum of any rectangle subgrid in the given grid. n = len(grid) m = len(grid[0]) # Initialize max_sum to be the smallest possible value max_sum = float(\'-inf\') # Temporary array used to store sums temp = [0] * n # Use the concept of Kadane\'s algorithm combined with column sums for left in range(m): # Initialize all elements of temp as 0 temp = [0] * n for right in range(left, m): # Calculate sum between current left and right for every row for i in range(n): temp[i] += grid[i][right] # Now we find the maximum sum subarray in temp array which is equivalent to using Kadane\'s algorithm current_max = temp[0] local_max = temp[0] for i in range(1, n): local_max = max(temp[i], local_max + temp[i]) current_max = max(current_max, local_max) # Update the max_sum if a new maximum is found max_sum = max(max_sum, current_max) return max_sum # Helper function to process input and generate the grid def find_largest_sum(n, m, elements): grid = [] for i in range(n): grid.append(elements[i]) return max_sum_subgrid(grid)"},{"question":"Alexander has received a series of training sessions to prepare for an upcoming competitive programming contest. Each session spans a certain number of consecutive days, where on each day, Alexander learns a new topic. He wants to remember as many topics as possible from these sessions, but given the long duration and overlap of some sessions, he may forget the earlier topics if they were too long ago. Alexander can retain the topics he learns for at most `k` consecutive days after learning them. Help him decide the order of sessions such that he maximizes the number of unique topics retained by the end of his training. The first line contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) – the number of sessions and the maximum number of consecutive days Alexander can retain the topics. Each of the next `n` lines contains an integer `d` (1 ≤ d ≤ 1000) followed by a string of `d` lowercase English characters. The integer `d` represents the number of days the session lasts, and the string contains the topics learned each day in the session. Print the maximum number of unique topics Alexander can retain and order the sessions (by indices starting from 1) to achieve this maximum count of unique retained topics. If there are multiple answers, print any of them. If it is impossible for Alexander to retain any unique topic given all sessions exceed his retaining ability, print \\"0\\". # Example Input ``` 3 7 4 abcd 3 cde 5 efgab ``` Output ``` 5 1 2 ``` Explanation Alexander can take the first session for the first 4 days, recalling topics {a, b, c, d}, then the second session for the next 3 days, adding topics {e}, totalling 5 unique topics {a, b, c, d, e}. If he chose the first and third sessions, he would only recall 5 unique topics {a, b, c, d, e} as law of overlaps would apply. Therefore, one possible valid answer is retaining topics from first and second session with a maximum of 5 unique topics.","solution":"def maximize_unique_topics(n, k, sessions): This function returns the maximum number of unique topics Alexander can retain and the order of sessions to achieve this. :param n: int, number of sessions :param k: int, maximum number of consecutive days Alexander can retain topics :param sessions: list of tuples, each tuple contains an integer d and a string of length d :return: tuple, (maximum number of unique topics retained, list of session indices) topics = [] indices = [] for i in range(n): d, session_topics = sessions[i] if d <= k: topics.append(set(session_topics)) indices.append(i+1) if not topics: return 0, [] unique_topics = set() retained_sessions = [] current_days = 0 for i, topic_set in enumerate(topics): if current_days + len(topic_set) <= k: unique_topics.update(topic_set) retained_sessions.append(indices[i]) current_days += len(topic_set) else: break return len(unique_topics), retained_sessions"},{"question":"You are given a binary tree consisting of N nodes, where each node has a value between 1 and N. Each node in the binary tree is identified by a unique integer between 1 and N. Additionally, each node’s parent is represented by an integer in an array. If the node is the root of the tree, its parent is represented by -1. You need to find the lowest common ancestor (LCA) of two nodes in the tree. The LCA of two nodes p and q in a tree is defined as the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself). The first line contains an integer N (1 ≤ N ≤ 100,000), the number of nodes in the tree. The second line contains N integers where the ith integer is the parent of the (i+1)th node. If the node is the root, the corresponding value is -1. The third line contains two integers p and q (1 ≤ p, q ≤ N), the nodes for which you need to find the LCA. Output the value of the lowest common ancestor of nodes p and q. Examples: Input: 5 -1 1 1 2 2 3 4 Output: 1 Input: 7 -1 1 1 2 2 3 3 4 5 Output: 2","solution":"def find_lca(n, parent_array, p, q): Finds the lowest common ancestor (LCA) of two nodes in a binary tree. n: int : Number of nodes in the tree parent_array: List[int] : The parent array of the tree p: int : The first node for which to find the LCA q: int : The second node for which to find the LCA Returns: int : The lowest common ancestor of nodes p and q # Function to find the path from the root to a given node def find_path(node, parent_array): path = [] while node != -1: path.append(node) node = parent_array[node - 1] return path # Find paths from the root to p and q path_p = find_path(p, parent_array) path_q = find_path(q, parent_array) # The first common node in the paths from the end is the LCA lca = -1 i, j = len(path_p) - 1, len(path_q) - 1 while i >= 0 and j >= 0 and path_p[i] == path_q[j]: lca = path_p[i] i -= 1 j -= 1 return lca # Example usage N = 5 parent_array = [-1, 1, 1, 2, 2] p, q = 3, 4 print(find_lca(N, parent_array, p, q)) # Output: 1"},{"question":"Given a grid of size N x M, you are tasked with finding the number of unique paths from the top-left corner of the grid to the bottom-right corner. You are only allowed to move either down or right at any point in time. # Input - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns of the grid, respectively. # Output - Print an integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 7 ``` Output ``` 28 ``` # Note In the example, there are 28 unique paths from the top-left corner (1,1) to the bottom-right corner (3,7) of the 3x7 grid. Each path consists of exactly (N-1) + (M-1) moves. # Hint To calculate the number of unique paths, you can use the combinatorial approach: [ C(n + m - 2, m - 1) ] Where C is the binomial coefficient which can be computed as: [ C(a, b) = frac{a!}{b!(a - b)!} ] Consider using an efficient approach to handle the large factorials and ensure the solution fits within typical computational limits for the problem constraints.","solution":"from math import comb def unique_paths(n, m): Calculate the number of unique paths in a grid of size n x m. # The number of unique paths from top-left to bottom-right is given by the binomial coefficient: # C(n + m - 2, n - 1) return comb(n + m - 2, n - 1)"},{"question":"You\'ve been tasked with helping Alex solve a very intriguing problem on sensors in a smart home system. Each sensor records a unique set of data points at various times during the day, and your goal is to identify patterns based on recent observations. Alex is particularly interested in determining whether the frequency of the recorded data points across different sensors is consistent. If so, Alex wants to know the most frequent interval between consecutive data points for each sensor. For each sensor i, you are given an integer n (1 ≤ n ≤ 1000) — the number of recorded data points, followed by n integers t1, t2, ..., tn (0 ≤ t1 < t2 < ... < tn ≤ 10^6) — timestamps of recorded data points in non-decreasing order. Your task is to print the most frequent interval between consecutive data points for each sensor. If there are multiple intervals with the same maximum frequency, print the smallest interval. # Input The first line contains an integer s (1 ≤ s ≤ 100) — the number of sensors. Each of the following s lines contains a sublist of integers representing the timestamps recorded by that sensor, starting with n followed by n integers t1, t2, ..., tn. # Output For each sensor, print the most frequent interval between consecutive data points. # Sample Input ``` 3 5 1 3 5 7 9 4 2 5 8 11 5 10 20 30 40 50 ``` # Sample Output ``` 2 3 10 ``` # Explanation For the first sensor, the intervals are [2, 2, 2, 2], so the most frequent interval is 2. For the second sensor, the intervals are [3, 3, 3], so the most frequent interval is 3. For the third sensor, the intervals are [10, 10, 10, 10], so the most frequent interval is 10.","solution":"def most_frequent_interval(sensor_data): Returns the most frequent interval between consecutive data points for each sensor. Parameters: sensor_data (list of lists): Each sublist consists of the first integer n followed by n integers representing timestamps. Returns: list: A list of most frequent intervals for each sensor. from collections import Counter results = [] for data in sensor_data: n = data[0] timestamps = data[1:] intervals = [timestamps[i] - timestamps[i - 1] for i in range(1, n)] if len(intervals) == 0: results.append(0) continue interval_counts = Counter(intervals) most_frequent_interval = min([interval for interval, count in interval_counts.items() if count == max(interval_counts.values())]) results.append(most_frequent_interval) return results # Example usage: # sensor_data = [ # [5, 1, 3, 5, 7, 9], # [4, 2, 5, 8, 11], # [5, 10, 20, 30, 40, 50] # ] # print(most_frequent_interval(sensor_data)) # Output: [2, 3, 10]"},{"question":"You are given an undirected graph represented by N nodes and M edges. Every edge has an associated travel cost. Starting at any node, you need to determine the shortest path distance from the starting node to any other node. The structure of the graph is such that there may be multiple short paths between nodes, and you need to find the minimum travel cost to each node. # Input - The first line contains two integers, N and M (1 leq N leq 1000, 0 leq M leq 5000) - representing the number of nodes and the number of edges in the graph. - The next M lines contain three integers u, v, and w (1 leq u, v leq N, 1 leq w leq 1000), representing an edge between nodes u and v with travel cost w. # Output Output a single line with N integers representing the shortest travel cost from node 1 to every other node. If a node is not reachable, output -1 for that node. * Note: Assume nodes are 1-indexed. # Example Input ``` 5 6 1 2 4 1 3 2 2 3 5 3 4 1 2 4 3 4 5 2 ``` Output ``` 0 4 2 3 5 ``` # Explanation - The shortest path from node 1 to 2 costs 4. - The shortest path from node 1 to 3 costs 2. - The shortest path from node 1 to 4 costs 3. - The shortest path from node 1 to 5 costs 5. - The shortest path to any other node starts with node 1 itself, hence the cost is 0.","solution":"import heapq from collections import defaultdict import sys def dijkstra_shortest_path(N, M, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [sys.maxsize] * (N + 1) dist[1] = 0 min_heap = [(0, 1)] # (cost, node) while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for neighbor, weight in graph[u]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) result = [] for i in range(1, N + 1): if dist[i] == sys.maxsize: result.append(-1) else: result.append(dist[i]) return result"},{"question":"You\'re given two integers, n and k. Your task is to find if it is possible to arrange an n x n board such that you can place k rooks on the board where no two rooks can attack each other. Recall that a rook can attack another rook if they are placed on the same row or the same column. The first line of the input contains two positive integers n and k (1 ≤ n ≤ 10^3, 0 ≤ k ≤ n^2) — the size of the board and the number of rooks respectively. Output \\"YES\\" if it is possible to arrange the rooks under the given conditions, otherwise print \\"NO\\". If the answer is \\"YES\\", then print a board configuration where k rooks are placed in such a way that no two rooks can attack each other. Use the character \'R\' to represent a rook and the character \'.\' to represent an empty cell. If there are multiple solutions, print any of them.","solution":"def arrange_rooks(n, k): Determines if it is possible to arrange k rooks on an n x n board such that no two rooks can attack each other. If possible, returns the board configuration. Otherwise, returns \\"NO\\". if k > n: return \\"NO\\" # Initialize the board with empty cells board = [[\'.\' for _ in range(n)] for _ in range(n)] for i in range(k): board[i][i] = \'R\' return \\"YES\\", board # Function to format the board into string output def format_board(board): return \\"n\\".join(\\"\\".join(row) for row in board)"},{"question":"Given a certain version of the Chessboard, the Black King has gone rogue and refuses to follow the traditional chess rules. Instead, it moves in a unique pattern. The Black King can move up 1 step, left 1 step, or up-left 1 step. Specifically, if it is positioned at ((x,y)) on the chessboard, in one move, it can go to: 1. ((x-1, y)) 2. ((x, y-1)) 3. ((x-1, y-1)) You, as the Chessmaster, want to capture this rogue Black King. Initially, the Black King is positioned at ((n, m)) on an (n times m) chessboard, and you need to position your White King at ((0, 0)) to capture it. Your task is to determine the minimum number of moves the Black King needs to reach ((0, 0)) from ((n, m)). Input The input consists of a single line containing two integers ( n ) and ( m ) ((1 leq n, m leq 10^9)) - the starting position of the Black King on the chessboard. Output Output a single integer - the minimum number of moves required for the Black King to reach ((0, 0)). Example Input 3 5 Output 5 Explanation Starting from ((3, 5)): 1. Move from ((3, 5)) to ((2, 4)) (up-left). 2. Move from ((2, 4)) to ((1, 3)) (up-left). 3. Move from ((1, 3)) to ((0, 2)) (left). 4. Move from ((0, 2)) to ((0, 1)) (left). 5. Move from ((0, 1)) to ((0, 0)) (left). Thus, the minimum number of moves is 5.","solution":"def min_moves_to_capture_black_king(n, m): Determine the minimum number of moves the Black King needs to reach (0, 0) from (n, m). The Black King moves up 1 step, left 1 step, or up-left 1 step. Parameters: n (int): the row position of the Black King. m (int): the column position of the Black King. Returns: int: the minimum number of moves required. return max(n, m)"},{"question":"You are given an undirected graph with n nodes and m edges. Each node of this graph has an initial value. Your task is to make all nodes have the same value by performing the following operation zero or more times: 1. Choose an edge connecting nodes u and v. 2. Increment the value of node u by 1 and decrement the value of node v by 1. Determine if it is possible to make all the values the same. If it is possible, find the minimum number of operations required to achieve this. The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of nodes and the number of edges. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the initial values of the nodes. Each of the next m lines contains two integers u and v (1 le u, v le n) — there is an edge connecting node u and node v. If it is possible to make all values equal, print the minimum number of operations required. Otherwise, print \\"-1\\". Consider the first example, the optimal strategy would be to perform the following operations: In the second example, it is not possible to make all node values the same. Therefore, the answer is \\"-1\\".","solution":"def can_make_equal(n, m, values, edges): Determines if it is possible to make all node values equal and returns the minimum number of operations if possible. Otherwise, returns -1. :param n: Number of nodes :param m: Number of edges :param values: List of initial values of the nodes :param edges: List of tuples representing the edges :return: Minimum number of operations or -1 if it\'s not possible if sum(values) % n != 0: return -1 # Check if all nodes are in one connected component from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) queue = deque() queue.append(1) visited[1] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 if count != n: return -1 avg = sum(values) // n operations = 0 for val in values: operations += abs(val - avg) return operations // 2"},{"question":"A wizard in a mystical land has been experimenting with arrays of integers. He found that certain configurations of these arrays are easier for him to manipulate with his magic. Specifically, he likes arrays where the sum of every prefix is non-negative. Can you help the wizard by determining whether an array has this property or not? A prefix of an array is any leading contiguous sequence of its elements. For example, given the array [3, -1, 2], the prefixes are [3], [3, -1], and [3, -1, 2]. Given an array of integers, your task is to check if the sum of every prefix is non-negative. Input: - The first line contains a single integer n (1 ≤ n ≤ 300000) — the length of the array. - The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output: - Print \\"YES\\" if the sum of every prefix of the array is non-negative. Otherwise, print \\"NO\\". Example: Input 5 1 2 -3 4 5 Output YES Input 4 1 -2 3 -4 Output NO Explanation: In the first example, the prefixes and their sums are: - [1] = 1 - [1, 2] = 3 - [1, 2, -3] = 0 - [1, 2, -3, 4] = 4 - [1, 2, -3, 4, 5] = 9 Since none of these sums are negative, the output is \\"YES\\". In the second example, the prefix [1, -2] has a sum of -1, which is negative. Hence, the output is \\"NO\\".","solution":"def is_prefix_sum_non_negative(n, arr): Function to determine if the sum of every prefix of the array is non-negative. Parameters: n (int): Length of the array arr (list): List of integers representing the array Returns: str: \\"YES\\" if the sum of every prefix is non-negative, otherwise \\"NO\\" prefix_sum = 0 for num in arr: prefix_sum += num if prefix_sum < 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid of size n times m, filled with non-negative integers. The grid represents a city\'s layout where each cell contains an elevation value. The city\'s energy efficiency is determined by the difference in elevations between adjacent cells. To optimize energy usage, you need to find the maximum \\"energy drop,\\" which is defined as the absolute difference in elevation between two adjacent cells (either vertically or horizontally). Your task is to calculate the maximum energy drop in the city. The first line of input contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The next n lines each contain m integers a_{ij} (0 le a_{ij} le 10^6) — the elevation values in the grid. Output a single integer — the maximum energy drop in the city. # Example: ``` Input: 3 4 1 3 4 5 4 2 8 3 6 7 3 1 Output: 6 ``` # Explanation: - Possible adjacent differences include values like: - |1 - 3| = 2 - |4 - 2| = 2 - |8 - 3| = 5 - |7 - 3| = 4 - |3 - 1| = 2 - The maximum energy drop found is |8 - 2| = 6.","solution":"def max_energy_drop(n, m, grid): max_drop = 0 for i in range(n): for j in range(m): if i > 0: max_drop = max(max_drop, abs(grid[i][j] - grid[i - 1][j])) if j > 0: max_drop = max(max_drop, abs(grid[i][j] - grid[i][j - 1])) if i < n - 1: max_drop = max(max_drop, abs(grid[i][j] - grid[i + 1][j])) if j < m - 1: max_drop = max(max_drop, abs(grid[i][j] - grid[i][j + 1])) return max_drop"},{"question":"Alice and Bob love playing with sequences of numbers. One day, they come up with a new game. There is a sequence of integers where each number is either 1 or -1. Alice and Bob take turns to choose a contiguous subsequence and reverse it. The goal of the game is to maximize the sum of the sequence after making k moves. Alice always plays first. Both Alice and Bob are playing optimally. After k moves, if the sum of the integers in the sequence is positive, Alice wins. If the sum is negative, Bob wins. If the sum is zero, it is a draw. Given the initial sequence and the number of moves k, determine the result of the game. Input The first line contains two integers n and k (1 ≤ n, k ≤ 100,000) - the number of integers in the sequence and the number of moves. The second line contains n integers a_1, a_2, ..., a_n (-1 or 1), the initial sequence of integers. Output Print \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, and \\"Draw\\" if it is a draw. Example: Input 5 1 1 -1 1 -1 1 Output Alice Input 4 2 1 -1 1 -1 Output Draw Input 3 3 1 1 -1 Output Alice","solution":"def determine_game_winner(n, k, sequence): Determines the winner of the game between Alice and Bob based on the initial sequence and the number of moves k. Parameters: n (int): Number of integers in the sequence k (int): Number of moves sequence (list of int): The initial sequence of integers Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, \\"Draw\\" if it is a draw sequence_sum = sum(sequence) # As the moves are reversals of contiguous segments, their impact on the sequence sum alternates with parity of k. if k % 2 == 0: if sequence_sum == 0: return \\"Draw\\" else: return \\"Alice\\" if sequence_sum > 0 else \\"Bob\\" else: # when k is odd, Alice has final move, can make sum positive return \\"Alice\\" if sequence_sum >= 0 else \\"Bob\\" # Example usage print(determine_game_winner(5, 1, [1, -1, 1, -1, 1])) # Output: Alice print(determine_game_winner(4, 2, [1, -1, 1, -1])) # Output: Draw print(determine_game_winner(3, 3, [1, 1, -1])) # Output: Alice"},{"question":"You are given a string s consisting of lowercase English letters. A substring is defined as any contiguous sequence of characters within the string. A substring is considered special if it contains exactly k unique characters. Your task is to find the length of the longest special substring of the given string. If there are multiple substrings of the maximum length that satisfy the condition, you just need to return the length of one of them. The first line of input contains a single integer k (1 ≤ k ≤ 26) — the number of unique characters a special substring should contain. The second line contains the string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output a single integer — the length of the longest special substring with exactly k unique characters. Example: Input: 3 abcabcabc Output: 9 Explanation: In the given example, the substring \\"abcabcabc\\" has 3 unique characters and is of length 9, which is the answer.","solution":"def longest_special_substring(k, s): Finds the length of the longest special substring with exactly k unique characters. Parameters: k (int): The number of unique characters in the substring. s (str): The input string. Returns: int: The length of the longest special substring with exactly k unique characters. from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0 left = 0 right = 0 char_count = defaultdict(int) max_length = 0 while right < n: char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == k: max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Joseph is an avid programmer who loves learning new things. Recently he was introduced to the concept of Dynamic Programming (DP). He finds it very interesting but challenging at the same time. To improve his understanding, he decided to solve a variety of DP problems. One such problem he encountered is the \\"Longest Alternating Subsequence\\" problem. An alternating sequence is a sequence where consecutive elements alternate between increasing and decreasing. For instance, a sequence [10, 22, 9, 33, 21, 50, 41, 60] is alternating because each pair of consecutive elements has a different relationship, either greater or less. Joseph has an array of n integers and he wants to find the length of the longest alternating subsequence. Help Joseph by writing a program that computes the length of such a subsequence. The first line of input contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the array. Print a single integer, the length of the longest alternating subsequence of the array. For example: Input: 8 1 5 4 9 8 6 3 7 Output: 6 In this example, one of the longest alternating subsequences is [1, 5, 4, 9, 8, 7], and its length is 6. Note that there can be other subsequences that are just as long.","solution":"def longest_alternating_subsequence(arr): Return the length of the longest alternating subsequence. An alternating sequence is a sequence where consecutive elements alternate between increasing and decreasing. n = len(arr) if n == 0: return 0 up = down = 1 for i in range(1, n): if arr[i] > arr[i - 1]: up = down + 1 elif arr[i] < arr[i - 1]: down = up + 1 return max(up, down) def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) arr = list(map(int, data[1:n + 1])) result = longest_alternating_subsequence(arr) print(result)"},{"question":"You are given a sequence of integers representing the climbing heights a hiker achieves at each checkpoint on a trail. The hiker wishes to increase their fitness level by choosing some segments of their hike to repeat. However, it would be optimal for the hiker to repeat the segments in a way that maximizes the total elevation gain while avoiding excessive altitude loss. Formally, consider a sequence of integers h_1, h_2, ldots, h_n where h_i represents the height at the i-th checkpoint. The hiker can repeat walks between any two checkpoints zero or more times to maximize the sum of positive elevation gains (i.e., climbing efforts). However, the hiker cannot repeat segments if they result in a net elevation loss. You need to determine the maximum possible sum of elevation gains by optimally choosing the segments of the hike to repeat, ensuring that each chosen segment yields a positive net gain. The first line contains a single integer n (1 le n le 200,000) — the number of checkpoints. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights at the corresponding checkpoints. Output a single integer, the maximum sum of elevation gains after optimally choosing and repeating segments of the hike. # Example Input: ``` 7 2 1 4 7 3 8 5 ``` Output: ``` 11 ``` Explanation: The optimal strategy involves selecting the segments [1, 4, 7] and [3, 8], which yield total elevation gains of (4-1) + (7-4) + (8-3) = 3 + 3 + 5 = 11. The segments [2, 1, 4] and [7, 3] would result in a net elevation loss and thus are not considered.","solution":"def max_elevation_gain(n, heights): total_gain = 0 for i in range(1, n): if heights[i] > heights[i - 1]: total_gain += heights[i] - heights[i - 1] return total_gain"},{"question":"In a fantasy land, there are n castles. Some of these castles are connected by bidirectional roads. Each castle has a certain amount of treasure. A hero wants to start from a given castle and collect treasures by visiting different castles. However, she can only visit each castle at most once due to the ancient curse that forbids revisiting any castle. Your task is to help the hero determine the maximum amount of treasure she can collect starting from the given castle until there are no more unvisited castles connected to her current location. The input consists of: - The first line contains two integers n and m — the number of castles and roads respectively (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 5×10^4). - The second line contains n integers t1, t2, ..., tn — the amount of treasure in each castle (1 ≤ ti ≤ 10^9). - Each of the next m lines contains two integers u and v — indicating that there is a bidirectional road between castles u and v (1 ≤ u, v ≤ n). - The last line contains a single integer s — the starting castle (1 ≤ s ≤ n). Print a single integer, the maximum amount of treasure that the hero can collect. Example: Input: 6 6 5 10 20 15 10 25 1 2 1 3 2 4 2 5 3 6 5 6 1 Output: 65 Explanation: Starting from castle 1, the hero can visit castles 2, 3, 4, 5, and 6 to collect treasures 5, 10, 15, 20, and 25 respectively, making the total treasure 65.","solution":"def max_treasure(n, m, treasures, roads, start): from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) visited = [False] * n queue = deque([start - 1]) total_treasure = 0 while queue: current = queue.popleft() if visited[current]: continue visited[current] = True total_treasure += treasures[current] for neighbor in graph[current]: if not visited[neighbor]: queue.append(neighbor) return total_treasure"},{"question":"Dreamoon and Satsuki are playing a game. The game is played on a rectangular grid of size n x m. Initially, Dreamoon starts at the top-left corner of the grid (cell (1, 1)), and Satsuki starts at the bottom-right corner of the grid (cell (n, m)). They take turns making moves, and Dreamoon always moves first. In each move, a player can move to an adjacent cell either horizontally or vertically. That is, from cell (i, j), the player can move to cell (i+1, j), cell (i-1, j), cell (i, j+1), or cell (i, j-1), but only if the target cell is within the boundaries of the grid. The game ends when both players end up on the same cell. The player who makes the move causing both players to be on the same cell wins the game. You need to determine if Dreamoon, given optimal play from both players, will win the game or not. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Output \\"Dreamoon\\" if Dreamoon will win the game, and \\"Satsuki\\" otherwise. For the first sample, Dreamoon can move to cell (1, 2) and Satsuki to cell (n, m-1). Eventually, both players will meet given optimal play. For the second sample, Dreamoon can move to cell (1, 2) and then to cell (2, 1). Satsuki can move to cell (1, 3) and then to cell (2, 2). Using optimal play, Dreamoon manages to force a situation where she wins. **Sample Input 1**: 2 2 **Sample Output 1**: Dreamoon **Sample Input 2**: 3 3 **Sample Output 2**: Dreamoon","solution":"def determine_winner(n, m): Determines the winner of the game based on optimal play. Dreamoon wins if the number of cells in the grid (n * m) is odd. Satsuki wins if the number of cells in the grid (n * m) is even. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. Returns: str: \\"Dreamoon\\" if Dreamoon will win the game, \\"Satsuki\\" otherwise. if n * m % 2 == 1: return \\"Dreamoon\\" else: return \\"Satsuki\\""},{"question":"In a faraway land, there exists a magical sequence known as Tibonacci. The Tibonacci sequence is similar to the classic Fibonacci sequence but with a twist: each term in the Tibonacci sequence is the sum of the previous three terms. Given the first three terms of the sequence, you need to determine the k-th term in the Tibonacci sequence. Formally, the Tibonacci sequence is defined as follows: - T(1) = a - T(2) = b - T(3) = c - For n > 3, T(n) = T(n-1) + T(n-2) + T(n-3) You are given multiple queries, and for each query, you need to calculate the k-th term of the Tibonacci sequence given the first three terms. The first line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. For each query, the following four integers are given: - a, b, c (0 ≤ a, b, c ≤ 10^9) — the first three terms of the Tibonacci sequence; - k (1 ≤ k ≤ 10^6) — the position of the term to find. Print q lines. The i-th line should contain the k-th term of the Tibonacci sequence for the i-th query. Sample Input: ``` 3 1 1 1 4 1 2 3 6 0 0 0 10 ``` Sample Output: ``` 3 12 0 ```","solution":"def tibonacci(a, b, c, k): Computes the k-th term of the Tibonacci sequence given the first three terms a, b, and c. if k == 1: return a elif k == 2: return b elif k == 3: return c # We store the first three terms t1, t2, t3 = a, b, c # Iterate to find the k-th term for _ in range(4, k + 1): t1, t2, t3 = t2, t3, t1 + t2 + t3 return t3 def process_queries(queries): Process multiple queries to calculate Tibonacci sequence terms. results = [] for a, b, c, k in queries: results.append(tibonacci(a, b, c, k)) return results"},{"question":"A group of friends loves playing a unique card game. In this game, each card has an integer value from 1 to m, and there are n players. Each player draws a card from the deck and holds it. The value of the card each player draws is recorded in an array a of length n, where ai represents the card value drawn by the i-th player. The goal of the game is to find a subset of players such that each player in the subset holds a card of a different value, and the sum of card values in this subset is maximized. Since the players are very competitive, you are asked to write a program to help them determine the maximum possible sum of card values that the subset can achieve, where no two players in the subset have the same card value. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of players and the maximum card value, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ m), representing the values of the cards drawn by each player. Output Print a single integer — the maximum possible sum of card values such that no two players in the subset have the same card value. Example Input: 5 10 1 2 3 4 5 Output: 15 Note: In the example, the maximum possible sum is 15, which is obtained by selecting all players since all card values are distinct.","solution":"def max_card_value_sum(n, m, card_values): Determines the maximum sum of card values from a subset of players where each card value is unique. Args: n (int): Number of players. m (int): Maximum card value. card_values (list of int): List of integers where each integer represents the card value drawn by the i-th player. Returns: int: Maximum possible sum of card values with unique values. unique_card_values = list(set(card_values)) return sum(unique_card_values)"},{"question":"Jamie loves to play board games, especially one that involves moving pieces on a rectangular board with n rows and m columns. Each cell on the board can either be empty or contain an obstacle. Jamie\'s piece can move up, down, left, or right by one cell at a time, but it cannot move into a cell with an obstacle or move outside the board. Jamie starts at the top-left corner of the board (1,1) and wants to reach the bottom-right corner (n,m). Write a program to determine the minimum number of moves required for Jamie to reach the bottom-right corner. If it is impossible for Jamie to reach the destination, return -1. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the board, respectively. The next n lines each contain m characters. Each character represents a cell on the board: \'.\' indicates an empty cell and \'#\' indicates an obstacle. Output the minimum number of moves required for Jamie to reach the bottom-right corner (n,m), or -1 if it is not possible. Example: Input: 5 5 ..... .#... .#.#. .#.#. ..... Output: 8 (Note: Jamie\'s piece moves from (1,1) to (1,2) to (1,3) to (1,4) to (1,5) to (2,5) to (3,5) to (4,5) to (5,5) in 8 moves).","solution":"from collections import deque def min_moves(n, m, board): Returns the minimum number of moves required for Jamie to reach the bottom-right corner of the board, or -1 if it is not possible. # Directions for movement (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If reached bottom-right corner if x == n - 1 and y == m - 1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and board[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path found return -1"},{"question":"You are given an array of integers. Your task is to find a subarray (contiguous segment) that has the maximum possible product. The subarray must have at least one element. Write a function that takes an array of integers and returns the maximum possible product of any subarray within that array. Input: The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output: Print a single integer, the maximum possible product of any subarray in the array. Example: Input: 5 2 3 -2 4 -1 Output: 48 Explanation: The subarray [2, 3, -2, 4, -1] has the maximum product 48.","solution":"def max_subarray_product(nums): Takes an array of integers and returns the maximum possible product of any subarray within that array. if not nums: return 0 max_product = float(\'-inf\') current_max, current_min = 1, 1 for num in nums: if num == 0: current_max, current_min = 1, 1 max_product = max(max_product, 0) continue temp_max = current_max * num current_max = max(num, temp_max, current_min * num) current_min = min(num, temp_max, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"You are given a list of integers and your task is to process multiple queries to modify the list and then extract certain information. Each query is of one of the following types: 1. \\"1 x y\\": Replace the element at position `x` in the list with the value `y`. 2. \\"2 l r\\": Compute the sum of elements from position `l` to `r` (inclusive). Note that the positions in the list are 1-indexed. The first line of the input contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) representing the size of the list and the number of queries, respectively. The second line of the input contains `n` space-separated integers that represent the initial elements of the list. The next `q` lines contain the queries. For each query of the first type, you should update the list accordingly. For each query of the second type, you should output the sum of the specified subarray. Output the result for each query of the second type in the order they were posed. # Input ``` n q a_1 a_2 ... a_n query_1 query_2 ... query_q ``` # Output For each query of the second type, print a single integer on a new line—the sum of the specified subarray. # Example Input ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 4 ``` Output ``` 6 16 ```","solution":"def process_queries(n, q, arr, queries): results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": x = int(parts[1]) - 1 # Converting 1-indexed to 0-indexed y = int(parts[2]) arr[x] = y elif parts[0] == \\"2\\": l = int(parts[1]) - 1 # Converting 1-indexed to 0-indexed r = int(parts[2]) - 1 # Converting 1-indexed to 0-indexed results.append(sum(arr[l:r + 1])) return results # Example usage: n, q = 5, 3 arr = [1, 2, 3, 4, 5] queries = [\\"2 1 3\\", \\"1 3 10\\", \\"2 2 4\\"] print(process_queries(n, q, arr, queries)) # Output should be [6, 16]"},{"question":"You are given n packages, each with a weight specified in an array. Your task is to equally distribute these packages into two delivery vans such that the difference between the total weights of the packages in the two vans is minimized. If it is not possible to distribute the packages exactly equally, output the closest possible minimum difference. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of packages. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the packages. Print the minimum possible difference between the total weight of the packages in the two delivery vans. Example 1: Input: 5 1 2 3 4 5 Output: 1 Example 2: Input: 3 4 7 15 Output: 4 Explanation: In the first example, we can divide the packages into two groups {1, 4, 5} and {2, 3}, which results in total weights 10 and 5, respectively. The difference is 1. In the second example, we can divide the packages into two groups {4, 15} and {7}, which results in total weights of 19 and 7, leading to a difference of 4.","solution":"def find_min_difference(n, weights): total_weight = sum(weights) half_total_weight = total_weight // 2 dp = [0] * (half_total_weight + 1) for weight in weights: for j in range(half_total_weight, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) closest_to_half = dp[half_total_weight] return abs(total_weight - 2 * closest_to_half)"},{"question":"You are a researcher working in a laboratory that breeds a particular kind of bacteria. The bacteria reproduce every minute, and each bacterium splits into two new bacteria every minute. Each experiment starts with a single bacterium at time t=0. To analyze the growth patterns, you decide to automate the process of calculating the bacterial population at a given time. Write a function that calculates the number of bacteria present after N minutes. The input contains a single integer N (0 ≤ N ≤ 10^9), representing the number of minutes. Output the number of bacteria present after N minutes.","solution":"def bacteria_population(N): Returns the number of bacteria present after N minutes. Each bacterium splits into two every minute. :param N: int - The number of minutes (0 ≤ N ≤ 10^9) :return: int - The number of bacteria after N minutes. return 2 ** N"},{"question":"The city of ByteLand is known for its intricate network of bidirectional roads connecting various districts. Each district is represented by an integer (1 to n). The road network is designed such that from any district, you can reach any other district through one or more roads. ByteLand also runs a unique subway line across multiple districts. Each subway line is defined by a series of consecutive districts it passes through. ByteLand has m subway lines, and the government has a task to enhance the connectivity between certain pairs of districts. In this task, you will be given which districts each subway line passes through, followed by several queries. Each query asks whether two specific districts are connected by at least one subway line. You need to determine if it\'s possible to travel between two given districts using any subway line without switching to another mode of transportation. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of districts and the number of subway lines, respectively. The next m lines describe the subway lines. Each line starts with an integer ki (2 ≤ ki ≤ n) — the number of consecutive districts the i-th subway line passes through. It is followed by ki space-separated integers representing the districts connected by that subway line. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) — the districts that need to be checked for connectivity through a subway line. Output q lines, each containing \\"YES\\" if there is a subway line that connects ai and bi directly, otherwise print \\"NO\\". Example input: ``` 5 2 3 1 2 3 2 3 4 4 1 3 1 4 2 5 3 4 ``` Example output: ``` YES YES NO YES ``` Note: In the given example, there are 5 districts and 2 subway lines. The first subway line connects districts 1, 2, and 3. The second subway line connects districts 3 and 4. The output for each query is \\"YES\\" if the districts in the query can be connected via at least one subway line.","solution":"def find_parent(parent, x): if parent[x] != x: parent[x] = find_parent(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find_parent(parent, x) rootY = find_parent(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def solve_connectivity(n, m, subway_lines, queries): parent = list(range(n + 1)) rank = [0] * (n + 1) for line in subway_lines: for i in range(1, len(line)): union(parent, rank, line[i - 1], line[i]) results = [] for a, b in queries: if find_parent(parent, a) == find_parent(parent, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a kingdom, there are n cities connected by m bidirectional roads. The cities are numbered from 1 to n. Each road connects two different cities and has a certain travel cost associated with it. The king wants to construct a new road network such that every city is accessible from every other city using the new roads. However, due to budget constraints, the king wants to minimize the total travel cost of the new road network. He also wants the road network to be as close as possible to the existing network, meaning that if an existing road can be reused, it should be preferred over constructing a new road with the same cost. You are to help the king by determining the minimum total travel cost of the new road network. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950) — the number of cities and the number of roads, respectively. Then m lines follow, each containing three space-separated integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — representing a road between city u and city v with cost w. Output a single integer — the minimum total travel cost of the new road network. Note: The graph provided in the input is guaranteed to be connected.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] # This will hold the resultant MST i = 0 # Initial index for sorted edges e = 0 # Initial index for result[] edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimum_travel_cost(n, roads): return kruskal(n, roads)"},{"question":"A scientist in a secret laboratory has developed a new type of robotic insects capable of constructing small structures out of blocks. These robotic insects can only move in a specific pattern and interact with blocks in a predetermined way. The scientist wants to optimize the number of blocks that can be placed using the insects\' unique movement strategy. The grid where the robots operate is represented by an n x m matrix filled with \'.\' characters indicating free spaces. A robot can start at any cell and move in one of the following patterns to place blocks: 1. It moves two cells up and one cell to the left. 2. It moves two cells up and one cell to the right. 3. It moves two cells down and one cell to the left. 4. It moves two cells down and one cell to the right. When a robot moves to a new position, it places a block (\'#\') on the cell it moved to. The robots can operate simultaneously, but no two robots can place a block on the same cell at the same time. Each cell can be visited by a robot at most once. Given the grid dimensions n and m, determine the maximum number of blocks that can be placed on the grid using the robots\' movement strategy. Also, produce one of the possible configurations showing the positions of the blocks placed by the robots. The only line contains two space-separated integers n and m — the sizes of the warehouse (1 ≤ n, m ≤ 100). In the first line print the maximum number of blocks that can be placed by the robots. In each of the next n lines, print m characters representing the grid. Use \\".\\" (dot) to mark empty space and \\"#\\" (hash) to mark the placement of a block. If there are several optimal solutions for a grid of the given size, print any of them.","solution":"def max_blocks(n, m): Returns the maximum number of blocks that can be placed by robots and the grid configuration. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. Returns: tuple: (max_blocks, grid) where max_blocks is an integer and grid is a list of strings. grid = [[\'.\' for _ in range(m)] for _ in range(n)] max_blocks = 0 for i in range(n): for j in range(m): if (i % 2 == 0 and j % 2 == 0): grid[i][j] = \'#\' max_blocks += 1 elif (i % 2 == 1 and j % 2 == 1): grid[i][j] = \'#\' max_blocks += 1 return max_blocks, [\'\'.join(row) for row in grid] # Example of running the function print(max_blocks(5, 5))"},{"question":"A group of archaeologists has discovered an ancient tablet inscribed with a sequence of symbols represented as a string. The symbols are either \'@\', \'#\', or \'&\'. They hypothesize that the sequence follows a strict pattern which needs to be validated. The pattern is defined as follows: - A valid sequence consists of blocks of symbols where each block must consist of exactly 3 symbols and must include one \'@\', one \'#\', and one \'&\'. - The order of symbols within each block does not matter, as long as each block contains all three symbols. Your task is to write a program that determines if the given sequence of symbols follows the described pattern. # Input - The first line of the input contains one integer `n` (1 ≤ n ≤ 300000) — the length of the sequence. - The second line contains a string of length `n`, consisting of the symbols \'@\', \'#\', and \'&\'. # Output - Print \\"VALID\\" if the sequence follows the described pattern. - Print \\"INVALID\\" otherwise. # Examples Example 1: **Input:** ``` 6 @#&#@& ``` **Output:** ``` VALID ``` Example 2: **Input:** ``` 9 @@#&&&#@ ``` **Output:** ``` INVALID ``` Example 3: **Input:** ``` 3 @#& ``` **Output:** ``` VALID ``` Example 4: **Input:** ``` 5 @#@&# ``` **Output:** ``` INVALID ``` In Example 1, the given sequence can be split into two valid blocks: `@#&` and `#@&`. In Example 2, the given sequence cannot be split into valid blocks as there are two \'@\' symbols in the first block and missing one in another valid block. In Example 3, the given sequence is already a valid block. In Example 4, the given sequence does not form valid blocks as its length is not a multiple of 3.","solution":"def validate_sequence(n, sequence): if n % 3 != 0: return \\"INVALID\\" grouped_blocks = [sequence[i:i+3] for i in range(0, n, 3)] for block in grouped_blocks: if len(set(block)) != 3 or \'@\' not in block or \'#\' not in block or \'&\' not in block: return \\"INVALID\\" return \\"VALID\\""},{"question":"In a distant land, there is a mystical forest filled with enchanted trees. Each tree has a certain number of magical fruits. Some trees may produce poisonous fruits that reduce the total count of magical fruits collected. The forest is represented as an array of integers where each integer indicates the number of fruits on a tree. Positive values indicate magical fruits, while negative values indicate poisonous fruits. A wanderer wants to collect fruits from these trees but can only collect from a continuous subarray of trees to maximize the total count of magical fruits. Your task is to help the wanderer find the maximum number of magical fruits that can be collected from any continuous subarray of trees. If all trees produce poisonous fruits, the wanderer should not collect any fruits. The first line contains a single integer n (1 ≤ n ≤ 100), the number of trees in the forest. The second line contains n space-separated integers a1, a2, ..., an (-104 ≤ ai ≤ 104), each representing the number of fruits on the i-th tree. Print a single integer, the maximum number of magical fruits that can be collected. Example input: ``` 5 -1 2 3 -5 4 ``` Example output: ``` 5 ``` Explanation: The maximum number of magical fruits can be collected from the subarray [2, 3], resulting in the total of 2 + 3 = 5.","solution":"def max_magical_fruits(n, fruits): Finds the maximum number of magical fruits that can be collected from any continuous subarray. :param n: Number of trees. :param fruits: List of integers representing the number of fruits on each tree. :return: Maximum number of magical fruits that can be collected. max_sum = float(\'-inf\') current_sum = 0 for fruit in fruits: current_sum = max(fruit, current_sum + fruit) max_sum = max(max_sum, current_sum) return max(max_sum, 0)"},{"question":"Given a directed, weighted graph with `n` nodes and `m` edges, you need to find and return the shortest path distance from the source node to every other node. If a node is unreachable from the source, the distance should be `-1`. The graph is represented by `m` edges, and each edge contains three integers `u`, `v`, and `w` which indicates there is a directed edge from node `u` to node `v` with weight `w`. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the number of nodes and edges in the graph, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4) which describe the directed edge from node `u` to node `v` with weight `w`. The last line contains one integer `source` (1 ≤ source ≤ n) — the source node from which the shortest path distances should be computed. Output `n` integers. The `i-th` integer should be the shortest distance from the source node to node `i`. If a node is unreachable, output `-1` instead. # Example Input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 ``` # Example Output: ``` 0 2 3 9 6 ``` Explanation: - The distance from node 1 to itself is 0. - The shortest path from node 1 to node 2 is 2. - The shortest path from node 1 to node 3 is 3 (1->2->3). - The shortest path from node 1 to node 4 is 9 (1->2->4). - The shortest path from node 1 to node 5 is 6 (1->3->5).","solution":"import heapq def shortest_path_from_source(n, m, edges, source): Finds the shortest path distances from the source node to every other node. :param n: Number of nodes :param m: Number of edges :param edges: List of tuples where each tuple represents (u, v, w) directed edge from u to v with weight w :param source: The source node :return: List of shortest path distances from the source node to every other node. If a node is unreachable, its distance is -1. graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[source] = 0 min_heap = [(0, source)] # (distance, node) while min_heap: curr_dist, u = heapq.heappop(min_heap) if curr_dist > distances[u]: continue for v, weight in graph[u]: distance = curr_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) result = [] for i in range(1, n+1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"There are n computers in a network. Some pairs of computers are directly connected through a cable. Your task is to determine the number of connected components in the network. A connected component is a set of computers such that there is a path between any two computers within this set, either directly or through other computers in the same set. The first line contains two integers n (1 leq n leq 10^5) and m (0 leq m leq 10^5), where n is the number of computers and m is the number of direct cables. Each of the next m lines contains two integers u and v (1 leq u, v leq n) representing that there is a direct cable between computers u and v. Output a single integer — the number of connected components in the network. For example, if the input is: 4 2 1 2 3 4 The output will be: 2 Explanation: Among the 4 computers, there are two pairs of connected computers (1-2) and (3-4), forming two separate connected components.","solution":"def count_connected_components(n, m, connections): from collections import defaultdict, deque # Initialize adjacency list for the graph graph = defaultdict(list) # Build the graph for u, v in connections: graph[u].append(v) graph[v].append(u) # Array to keep track of visited nodes visited = [False] * (n + 1) def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Counting connected components connected_components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i) connected_components += 1 return connected_components"},{"question":"Dr. Watson has a collection of books, where each book is represented by its height. He is planning to place all the books on one shelf such that the total height of the books on the shelf does not exceed a given maximum allowed height. However, he also wants the books to be arranged in a non-decreasing order of their heights for aesthetic purposes. You are tasked with helping Dr. Watson determine the maximum number of books he can place on the shelf while adhering to the above constraints. # Input - The first line contains an integer `n` (`1 <= n <= 200000`), the number of books. - The second line contains an integer `H` (`1 <= H <= 10^9`), the maximum allowed total height of the books on the shelf. - The third line contains `n` space-separated integers representing the heights of the books (`1 <= height_i <= 10^9`). # Output - Print a single integer, the maximum number of books that Dr. Watson can place on the shelf. # Example **Input:** ``` 5 15 2 3 5 8 1 ``` **Output:** ``` 4 ``` **Explanation:** - The sorted list of book heights is `[1, 2, 3, 5, 8]`. - The maximum number of books that can be placed on the shelf without exceeding the height `H=15` is 4 (books with heights `[1, 2, 3, 5]`). - The total height of these books is `1 + 2 + 3 + 5 = 11` which is within the allowed limit. - Adding the next book of height `8` would exceed the limit (`11 + 8 = 19`), so only the first 4 books can be placed on the shelf.","solution":"def max_books_on_shelf(n, H, heights): Determines the maximum number of books that can be placed on the shelf without exceeding the given maximum height and ensuring the books are sorted in non-decreasing order of their heights. :param n: Number of books :param H: Maximum allowed total height of books on the shelf :param heights: List of book heights :return: Maximum number of books that can be placed on the shelf # Sort book heights heights.sort() # Initialize variables current_height = 0 max_books = 0 # Iterate through the sorted list and find the maximum number of books for height in heights: if current_height + height <= H: current_height += height max_books += 1 else: break return max_books"},{"question":"You are given a number of string pairs. Each pair consists of two strings: `a` and `b`. For each pair, you are to determine the smallest possible length of a string `c` such that both `a` and `b` are subsequences of `c`. A string `x` is a subsequence of string `y` if `x` can be obtained by deleting some (possibly zero) characters from `y` without rearranging the remaining characters. The first line of input contains an integer `t` (1 ≤ t ≤ 100) — the number of pairs of strings. The next `2t` lines describe the pairs of strings for each test case: the first line of the pair contains string `a` and the second line contains string `b`. The lengths of each string in every pair are between 1 and 100, and the combined length of all strings doesn\'t exceed 10^5. For each test case, output the smallest possible length of string `c` on a new line. **Example:** **Input:** ``` 3 abc ac abcd efgh aaa aaaa ``` **Output:** ``` 3 8 4 ``` **Explanation:** In the given example: 1. For strings `\\"abc\\"` and `\\"ac\\"`, the smallest string containing both as subsequences is `\\"abc\\"`, which has a length of 3. 2. For strings `\\"abcd\\"` and `\\"efgh\\"`, the smallest string containing both as subsequences is `\\"abcdefgh\\"`, which has a length of 8. 3. For strings `\\"aaa\\"` and `\\"aaaa\\"`, the smallest string containing both as subsequences is `\\"aaaa\\"`, which has a length of 4.","solution":"def smallest_length_of_supersequence(a, b): Returns the smallest length of a string c such that both a and b are subsequences of c. m, n = len(a), len(b) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif a[i - 1] == b[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_string_pairs(t, pairs): Returns the list of smallest lengths of supersequences for each pair of strings. results = [] for i in range(t): a, b = pairs[i] results.append(smallest_length_of_supersequence(a, b)) return results"},{"question":"Peter loves solving puzzles and stumbled upon an interesting sequence problem. He names it a \\"Zigzag Sequence.\\" A sequence of numbers (a_1, a_2, ldots, a_n) is a Zigzag Sequence if it contains at least two elements, and it satisfies one of the two following properties throughout the entire sequence: 1. (a_1 < a_2 > a_3 < a_4 > ldots), or 2. (a_1 > a_2 < a_3 > a_4 < ldots). Given an array of integers, help Peter determine the longest Zigzag Subsequence that can be formed from the given array. The first line of the input contains a single integer (n) (1 ≤ (n) ≤ 1000) — the length of the array. The second line contains (n) integers (a_1, a_2, ldots, a_n) (1 ≤ (a_i) ≤ 10^9) — the elements of the array. Print the length of the longest Zigzag Subsequence of the given array. For example: Input: ``` 6 1 7 4 9 2 5 ``` Output: ``` 6 ``` Input: ``` 5 1 4 7 2 5 ``` Output: ``` 4 ``` Input: ``` 3 1 2 3 ``` Output: ``` 2 ```","solution":"def longest_zigzag_sequence(arr): if not arr: return 0 n = len(arr) if n == 1: return 1 up = [1] * n down = [1] * n for i in range(1, n): if arr[i] > arr[i - 1]: up[i] = down[i - 1] + 1 down[i] = down[i - 1] elif arr[i] < arr[i - 1]: down[i] = up[i - 1] + 1 up[i] = up[i - 1] else: up[i] = up[i - 1] down[i] = down[i - 1] return max(up[-1], down[-1]) def zig_zag(n, arr): return longest_zigzag_sequence(arr)"},{"question":"Four friends are organizing a game tournament and want to ensure that all players can play against each other. They are inviting `n` players, and each player has a certain skill level. The problem is to schedule matches such that the difference in skill levels of the players in any match is not more than `d`. Given `n` players and their skill levels, you need to determine the maximum number of matches that can be scheduled following the above condition. # Input - The first line contains two integers `n` and `d` (1 ≤ n ≤ 10^5, 0 ≤ d ≤ 10^5) — the number of players and the maximum acceptable skill level difference. - The second line contains `n` integers `s1, s2, ..., sn` (0 ≤ si ≤ 10^5) — the skill levels of the players. # Output - Output a single integer, the maximum number of matches that can be scheduled. # Example **Input:** ``` 5 3 1 6 4 3 8 ``` **Output:** ``` 2 ``` # Explanation The skill levels are `[1, 6, 4, 3, 8]`. The possible matches are: - `(1, 3)` with a skill difference of `2` - `(4, 6)` with a skill difference of `2` The pair `(6, 8)` does not make a valid match since the difference `8 - 6 = 2` is less than or equal to `d`, but it cannot participate since 6 is already matched with 4. Hence, the maximum number of matches is `2`.","solution":"def max_matches(n, d, skills): Returns the maximum number of matches that can be scheduled such that the difference in skill levels of the players in any match is not more than d. skills.sort() matches = 0 i = 0 while i < n - 1: if skills[i + 1] - skills[i] <= d: matches += 1 i += 2 # Move to the next pair else: i += 1 # Check the next player for a possible match return matches"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform the following operation as many times as you want: choose any character in the string and replace it with any other lowercase English letter. The cost of this operation is 1 unit. Your task is to determine the minimum cost required to make the string a palindrome. A string is called a palindrome if it reads the same forwards and backwards. For example, \\"abba\\" and \\"racecar\\" are palindromes, but \\"hello\\" and \\"world\\" are not. The first line of the input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000) — the string for the corresponding test case. Output t lines, each containing a single integer — the minimum cost required to make the corresponding string a palindrome. Example: Input: 3 abca abcd racecar Output: 1 2 0 Explanation: 1. By changing the character \'c\' to \'b\' or \'a\' to \'c\', the string \\"abca\\" can be made palindrome with the minimum cost of 1. 2. By changing \'b\' to \'c\' and \'d\' to \'b\', the string \\"abcd\\" can be made palindrome with the minimum cost of 2. 3. The string \\"racecar\\" is already palindrome, so the cost is 0.","solution":"def min_cost_to_make_palindrome(s): Returns the minimum cost to make the string s a palindrome. The cost is defined as 1 unit per character replacement. cost = 0 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: cost += 1 return cost def get_min_cost_per_test_case(t, test_cases): Given the number of test cases t and a list of test case strings, returns a list of the minimum costs to make each string a palindrome. results = [] for s in test_cases: results.append(min_cost_to_make_palindrome(s)) return results"},{"question":"You are given a positive integer n. The task is to find if there is a permutation of numbers from 1 to n such that the absolute difference between any two consecutive numbers is not more than k. If such a permutation exists, print it. If multiple permutations exist, print any. If no permutations exist, print -1. Formally, find a permutation of integers (p1, p2, ..., pn) such that for every valid i (1 ≤ i < n) the condition |pi - pi+1| ≤ k holds. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n). Print the permutation of numbers from 1 to n with the given property if it exists. Otherwise, print -1. Example: Input: 5 2 Output: 1 2 3 4 5","solution":"def find_permutation(n, k): if k <= 0 or k >= n: return -1 permutation = [] start = 1 while start <= n: end = min(start + k, n) for i in range(start, end + 1): permutation.append(i) start += k + 1 return permutation # Example usage: n, k = 5, 2 result = find_permutation(n, k) if result != -1: print(\\" \\".join(map(str, result))) else: print(result)"},{"question":"In the kingdom of Algorithmia, there is a unique system for grading students. For each subject, a student is asked to undertake a series of assignments, each graded out of 100 points. To pass a subject, a student needs to score an average of at least p points across all assignments in that subject. Given the scores for each subject, determine which subjects the student passes and which subjects they do not. The input consists of: - The first line contains an integer s (1 ≤ s ≤ 100) representing the number of subjects. - The next s lines each start with an integer k (1 ≤ k ≤ 100), representing the number of assignments for that subject, followed by k integers representing the scores (0 ≤ score ≤ 100) for each assignment. - The final line contains an integer p (0 ≤ p ≤ 100), the minimum average score required to pass a subject. Output: - For each subject, if the student passes, print \\"PASS\\", otherwise print \\"FAIL\\". Example input: ``` 3 4 55 60 70 65 3 90 85 78 2 50 60 60 ``` Example output: ``` PASS PASS FAIL ``` Explanation: - Subject 1: The average score is (55+60+70+65)/4 = 62.5, which is greater than the required 60 points. - Subject 2: The average score is (90+85+78)/3 = 84.33, which is greater than the required 60 points. - Subject 3: The average score is (50+60)/2 = 55, which is less than the required 60 points.","solution":"def grade_students(subjects, passing_score): Determines if the student passes each subject based on the average score of the assignments. Parameters: subjects (list of list): A list where each element is a list containing the number of assignments followed by the scores of these assignments. passing_score (int): The minimum average score required to pass a subject. Returns: list: List of strings \\"PASS\\" or \\"FAIL\\" for each subject. results = [] for subject in subjects: k, *scores = subject average_score = sum(scores) / k if average_score >= passing_score: results.append(\\"PASS\\") else: results.append(\\"FAIL\\") return results"},{"question":"Alex is a collector of rare coins. He likes to keep his coins in a specific order inside a cabinet. Recently, Alex has decided to reorganize his collection so that the value of the coins ascends from left to right. However, Alex has a unique way of sorting his coins. He can only swap two coins if their combined value does not exceed a given limit, S. Your task is to help Alex determine if he can sort his collection under this constraint. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of coins in Alex\'s collection. The second line contains n integers: c1, c2, ..., cn (1 ≤ ci ≤ 10^4) — the values of the coins in the order they are currently placed. The third line contains the integer S (1 ≤ S ≤ 10^4) — the maximum combined value of two coins that can be swapped. In a single line, print \\"YES\\" (without quotes) if Alex can sort the coins in ascending order by performing the swaps under the given constraint, otherwise print \\"NO\\" (without quotes). # Example Input: ``` 5 4 2 3 5 1 6 ``` Output: ``` YES ``` Explanation: Alex can sort the coins in the following manner: - Swap coins with values 4 and 2 (values do not exceed 6). - Swap coins with values 4 and 3 (values do not exceed 6). - Swap coins with values 4 and 1 (values do not exceed 6). - The collection is now sorted as: 1, 2, 3, 4, 5. So the result is \\"YES\\".","solution":"def can_sort_coins(n, coins, S): Determines if the coins can be sorted under the given swap constraint. Parameters: n (int): Number of coins. coins (list of int): Current order of coin values. S (int): Maximum allowable sum of values for a swap. Returns: str: \\"YES\\" if the coins can be sorted under the given constraint, \\"NO\\" otherwise. sorted_coins = sorted(coins) def bfs_can_sort(): from collections import deque visited = set() queue = deque([coins]) while queue: current_state = queue.popleft() if tuple(current_state) in visited: continue visited.add(tuple(current_state)) if current_state == sorted_coins: return True for i in range(n): for j in range(i + 1, n): if current_state[i] + current_state[j] <= S: new_state = current_state[:] new_state[i], new_state[j] = new_state[j], new_state[i] if tuple(new_state) not in visited: queue.append(new_state) return False return \\"YES\\" if bfs_can_sort() else \\"NO\\" # Example usage # n = 5 # coins = [4, 2, 3, 5, 1] # S = 6 # print(can_sort_coins(n, coins, S)) # Output: \\"YES\\""},{"question":"Monica wants to arrange a party for her friends. Each friend has some particular dietary preferences, given in the form of lists of foods they cannot eat. Monica has a list of all dishes she can prepare, along with a list of ingredients required for each dish. She wants to select a subset of dishes such that no friend has any of their restricted foods in the selected dishes. Given that she can prepare at most a certain number of dishes, help her find out if it\'s possible to select such a subset or not. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ m) — the number of dishes, the number of friends, and the maximum number of dishes Monica can prepare. The next n lines describe the dishes. Each line starts with an integer ri (1 ≤ ri ≤ 50) — the number of ingredients in the i-th dish, followed by ri integers indicating the ingredients of the dish (1 ≤ ingredient ≤ 100). The next m lines describe the friends. Each line starts with an integer si (0 ≤ si ≤ 50) — the number of foods the i-th friend cannot eat, followed by si integers indicating the restricted foods for the friend (1 ≤ food ≤ 100). Output \\"YES\\" if Monica can prepare a subset of dishes satisfying at least max(1, m-k) number of friends without exceeding the limit k on the number of dishes prepared, otherwise output \\"NO\\". Example: Input: 5 3 3 3 1 2 3 2 4 5 1 6 3 7 8 9 2 10 11 2 1 4 1 9 0 Output: YES Here, Monica can prepare dishes 2, 3, and 5 which have ingredients {4, 5}, {7, 8, 9}, and {10, 11} respectively, and no friend will have any of their restricted foods in these selected dishes.","solution":"def can_prepare_subset(n, m, k, dishes, friends): Determine if Monica can prepare a subset of dishes satisfying at least max(1, m-k) number of friends without exceeding the limit k on the number of dishes prepared. :param n: Number of dishes. :param m: Number of friends. :param k: Maximum number of dishes Monica can prepare. :param dishes: List of lists where each sub-list represents the ingredients in a dish. :param friends: List of lists where each sub-list represents the restricted foods for a friend. :return: \\"YES\\" if possible, otherwise \\"NO\\". from itertools import combinations # Find the minimum number of friends that must be satisfied min_friends_satisfied = m if k == 0 else max(1, m - k) # Function to check if selected dishes satisfy the friends\' requirements def satisfies_friends(selected_dishes): for friend in friends: if any(food in selected_dishes for food in friend): return False return True # Generate all possible subsets of dishes of size up to k for num_dishes in range(1, k + 1): for subset in combinations(range(n), num_dishes): selected_dishes = set() for dish in subset: selected_dishes.update(dishes[dish]) satisfied_friends = [friend for friend in friends if satisfies_friends(selected_dishes)] if len(satisfied_friends) >= min_friends_satisfied: return \\"YES\\" return \\"NO\\" # Example input variables for illustration n = 5 m = 3 k = 3 dishes = [ [1, 2, 3], [4, 5], [6], [7, 8, 9], [10, 11] ] friends = [ [1, 4], [9], [] ]"},{"question":"You are given an array of integers a_1, a_2, dots, a_n, and an integer k. Your task is to rearrange the array so that the maximum difference between any adjacent elements in the array is minimized. If there are multiple ways to rearrange the array with the same minimized maximum difference, return the lexicographically smallest one. The first line of the input contains two integers n (1 le n le 10^5) — the length of the array and k (1 le k le n-1) — the number of adjacent element differences we\'ll consider to minimize. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the array a. Print the rearranged array such that the maximum difference between any adjacent elements in the array is minimized. If there are multiple answers, print the lexicographically smallest one. # Example Input: ``` 6 2 10 1 6 8 4 2 ``` Output: ``` 1 2 4 6 8 10 ``` Input: ``` 5 3 3 9 1 4 7 ``` Output: ``` 1 3 4 7 9 ``` # Note In the first example, if we rearrange elements in the order `1 2 4 6 8 10`, the differences between adjacent elements are `1, 2, 2, 2, 2`, and the maximum of these differences (which are __(2, 2)__) is minimized. In the second example, the lexicographically smallest rearrangement is `1 3 4 7 9` with differences `2, 1, 3, 2`, and the maximum of these differences (which are __(2, 2, 2)__) is minimized.","solution":"def minimize_max_difference(n, k, arr): Rearranges the array to minimize the maximum difference between any adjacent elements, and returns the lexicographically smallest result. # Sort the array to get the lexicographically smallest order arr.sort() return arr"},{"question":"You are given a matrix of dimensions n times m filled with non-negative integers. Your task is to find the number of ways to start from the top-left cell (cell (1, 1)) and move to the bottom-right cell (cell (n, m)) while strictly increasing the values in the cells you are visiting. You can only move to the right or down from the current cell. The first line of the input contains two integers n and m (1 leq n, m leq 500) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the matrix. Each integer in the matrix is between 0 and 10^9 inclusive. Print one integer — the number of strictly increasing paths from the top-left to the bottom-right cell. # Example Input: ``` 3 3 1 2 3 2 3 4 3 4 5 ``` Output: ``` 6 ``` Input: ``` 2 2 1 3 2 4 ``` Output: ``` 2 ``` In the first example, there are 6 strictly increasing paths, all of which move either to the right or down. In the second example, there are only 2 strictly increasing paths since you can only move to cells with strictly increasing values.","solution":"def count_increasing_paths(matrix): from collections import defaultdict import itertools n = len(matrix) m = len(matrix[0]) # Flatten matrix along with indices and sort by value cells = [(i, j, matrix[i][j]) for i in range(n) for j in range(m)] cells.sort(key=lambda x: x[2]) # DP table to hold the number of ways to reach each cell dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Starting point for i, j, value in cells: if i > 0 and matrix[i-1][j] < value: dp[i][j] += dp[i-1][j] if j > 0 and matrix[i][j-1] < value: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"A new flavor of ice cream is being launched, and the ice cream shop wants to figure out the optimal price to maximize their revenue. The shop has decided to test different prices on different days to gather data on customer behavior. The shop has tracked the number of customers and the total revenue generated for each price point over a range of days. Now, they want your help to analyze this data and determine the optimal price for maximizing revenue. Given a list of n integers representing the price points and a list of n integers representing the corresponding revenues generated at those price points, you need to find the price point which yields the maximum revenue. If there are multiple price points that yield the maximum revenue, return the smallest price point. The first line contains an integer n (1 le n le 10^5) — the number of price points tested. The second line contains n integers p_1, p_2, ..., p_n (1 le p_i le 10^9) — the tested price points. The third line contains n integers r_1, r_2, ..., r_n (0 le r_i le 10^9) — the corresponding revenues for the price points. Print a single integer — the price point which yields the maximum revenue. If there are multiple such price points, print the smallest one. # Example Input ``` 5 20 10 20 30 10 1000 2000 1500 2500 2000 ``` Output ``` 30 ``` In this example, the maximum revenue is 2500, which is achieved at the price point 30. Therefore, the output is 30. Good luck!","solution":"def optimal_price(prices, revenues): Given a list of prices and corresponding list of revenues, this function returns the price point that yields the maximum revenue. If there are multiple price points with the same maximum revenue, the smallest one is returned. max_revenue = max(revenues) optimal_prices = [price for price, revenue in zip(prices, revenues) if revenue == max_revenue] return min(optimal_prices)"},{"question":"You are given a list of integers. You need to determine how many numbers in the list are greater than or equal to a given number k. The first line of the input contains two integers n (1 leq n leq 10^5) — the number of integers in the list, and k (-10^9 leq k leq 10^9). The second line contains n integers separated by spaces, representing the list of numbers (-10^9 leq x_i leq 10^9). Print one integer — the count of numbers in the list that are greater than or equal to k. For example: Input: ``` 6 5 1 5 8 4 6 3 ``` Output: ``` 3 ``` In this example, the numbers in the list that are greater than or equal to 5 are 5, 8, and 6. These sum up to 3 numbers.","solution":"def count_greater_or_equal_to_k(n, k, numbers): Returns the count of numbers in the list that are greater than or equal to k. :param n: int - The number of integers in the list :param k: int - The threshold number :param numbers: list of int - The list of integers :return: int - The count of numbers greater than or equal to k count = sum(1 for num in numbers if num >= k) return count"},{"question":"There is a popular hiking trail that has a distinctive uphill and downhill pattern. The trail is represented by an array of integers `heights` where `heights[i]` denotes the height of the trail at the i-th point. A peak of the trail is a point `i` such that `heights[i] > heights[i-1]` and `heights[i] > heights[i+1]`. You are planning a hiking event and you want to determine the highest peak in the trail that meets the criteria of a peak as described above. If multiple peaks have the same height, return the height value of the first peak found. If there are no peaks, return -1. The first line contains an integer `n` (3 ≤ n ≤ 10^5) — the number of points in the trail. The second line contains `n` space-separated integers `heights[i]` (1 ≤ heights[i] ≤ 10^5) — the height of each point in the trail. Output the height of the highest peak, or -1 if there are no peaks. # Example Input: ``` 8 1 3 2 4 5 3 2 1 ``` Output: ``` 5 ``` Input: ``` 4 1 2 3 4 ``` Output: ``` -1 ```","solution":"def find_highest_peak(n, heights): Find the height of the highest peak in the trail. :param n: Number of points in the trail :param heights: List of heights at each point :return: Height of the highest peak or -1 if no peaks highest_peak = -1 for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: highest_peak = max(highest_peak, heights[i]) return highest_peak"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each vertex has a unique integer value assigned to it. You need to perform `q` queries of the following type: For each query, you are given two integers `a` and `b`, representing two different vertices in the graph. You need to determine the smallest integer value that appears on the path between vertices `a` and `b`. Each query returns the smallest integer from the sequence of values assigned to the vertices on the path between `a` and `b`. # Input - The first line contains two integers `n` and `m` (`1 ≤ n ≤ 10^5`, `0 ≤ m ≤ 10^5`) — the number of vertices and edges in the graph. - The next line contains `n` integers, where the `i-th` integer is the value assigned to vertex `i`. - The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`, `u ≠ v`), representing an edge connecting vertices `u` and `v`. - The next line contains an integer `q` (`1 ≤ q ≤ 10^5`) — the number of queries. - The next `q` lines each contain two integers `a` and `b` (`1 ≤ a, b ≤ n`), representing the queries. # Output For each query, output the smallest integer value that appears on the path between vertices `a` and `b`. # Example Input ``` 7 6 5 1 3 4 8 6 2 1 2 2 3 3 4 3 5 5 6 5 7 3 1 4 6 7 2 7 ``` Output ``` 1 2 1 ``` # Explanation In the given graph: - The path from vertex 1 to vertex 4 is 1 -> 2 -> 3 -> 4; the values are [5, 1, 3, 4], the smallest is 1. - The path from vertex 6 to vertex 7 is 6 -> 5 -> 7; the values are [6, 8, 2], the smallest is 2. - The path from vertex 2 to vertex 7 is 2 -> 3 -> 5 -> 7; the values are [1, 3, 8, 2], the smallest is 1.","solution":"def find_minimum_on_path(n, m, values, edges, queries): from collections import defaultdict, deque import sys def bfs_path(start, end): queue = deque([start]) parents = {start: None} while queue: node = queue.popleft() if node == end: break for neighbor in graph[node]: if neighbor not in parents: parents[neighbor] = node queue.append(neighbor) # Reconstruct the path from end to start path = [] node = end while node is not None: path.append(node) node = parents[node] path.reverse() return path # Build the graph from edges graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Answer each query results = [] for a, b in queries: path = bfs_path(a-1, b-1) values_on_path = [values[node] for node in path] results.append(min(values_on_path)) return results # Example usage n = 7 m = 6 values = [5, 1, 3, 4, 8, 6, 2] edges = [(1, 2), (2, 3), (3, 4), (3, 5), (5, 6), (5, 7)] queries = [(1, 4), (6, 7), (2, 7)] print(find_minimum_on_path(n, m, values, edges, queries)) # Output: [1, 2, 1]"},{"question":"Ayesha owns a string store where customers can create their desired strings by joining smaller strings together. One day, Ayesha thought of a fun challenge: Given two strings, she wanted to see if the second string can be formed by reordering characters from the first string and additionally using at most one extra character from the first string for any character replacement. Let\'s call this operation a \\"Flexible Anagram\\". Formally, for two given strings s1 and s2 of equal length, s2 can be considered a Flexible Anagram of s1 if s2 can be formed by rearranging the characters of s1 and optionally replacing at most one character in s2 with any character from s1. For example: - s1 = \\"abc\\" and s2 = \\"cab\\" (s2 is a Flexible Anagram of s1 by only rearranging) - s1 = \\"abc\\" and s2 = \\"cad\\" (s2 is a Flexible Anagram of s1 because \'a\' can replace \'b\' in s1 and then rearranging) - s1 = \\"abc\\" and s2 = \\"aaa\\" (s2 is not a Flexible Anagram of s1) You need to write a program to solve this challenge for Ayesha. The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next 2*t lines contains two strings s1 and s2 respectively. It is guaranteed that both strings in each test case are of equal length and contain only lowercase English letters (1 ≤ |s1| = |s2| ≤ 100). For each test case, print \\"YES\\" if s2 is a Flexible Anagram of s1, otherwise print \\"NO\\". Example: Input: 3 abc cab abc cad abc aaa Output: YES YES NO","solution":"from collections import Counter def is_flexible_anagram(s1, s2): if s1 == s2: return True # Check frequencies of characters count_s1 = Counter(s1) count_s2 = Counter(s2) # Check the differences in the two frequency counters diff_s1_to_s2 = count_s1 - count_s2 # Characters in s1 that are not in s2 diff_s2_to_s1 = count_s2 - count_s1 # Characters in s2 that are not in s1 # If there is more than one character in either diff, it\'s not a flexible anagram if len(diff_s1_to_s2) > 1 or len(diff_s2_to_s1) > 1: return False # Check if using one character from diff_s1_to_s2 resolves the one discrepancy in diff_s2_to_s1 return sum(diff_s1_to_s2.values()) <= 1 and sum(diff_s2_to_s1.values()) <= 1 def flexible_anagram_test_cases(test_cases): results = [] for s1, s2 in test_cases: if is_flexible_anagram(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is organizing a treasure hunt game for her friends. She has a map that is represented by a grid of size n x m. Each cell in the grid either contains an obstacle or is empty. The top-left cell (0, 0) is the starting point, and the bottom-right cell (n-1, m-1) is the treasure location. Alice wants to find out the number of distinct paths from the start to the treasure, moving only down or right at each step, and avoiding obstacles. The input is given as follows: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000). - The next n lines each contain m characters. Each character is either \'.\' representing an empty cell or \'#\' representing an obstacle. Print the number of distinct paths from the top-left to the bottom-right cell modulo 1000000007 (10^9 + 7). Input: 3 3 . . . . # . . . . Output: 2 Explanation: In the given grid, there are 2 distinct paths from (0, 0) to (2, 2): 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Paths that go through the obstacle at (1, 1) are not valid. Hence, the output is 2.","solution":"def count_paths(n, m, grid): MOD = 1000000007 dp = [[0] * m for _ in range(n)] # Starting position dp[0][0] = 1 if grid[0][0] == \'.\' else 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 # No paths through obstacles else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[n-1][m-1] # Example usage: # n = 3 # m = 3 # grid = [ # [\'.\', \'.\', \'.\'], # [\'.\', \'#\', \'.\'], # [\'.\', \'.\', \'.\'] # ] # print(count_paths(n, m, grid)) # Output: 2"},{"question":"You are given an array of positive integers of length n, and an integer k. Your task is to divide this array into exactly k non-overlapping contiguous subarrays such that the maximum sum of elements in any of the subarrays is minimized. For example, consider the array [7, 2, 5, 10, 8] and k = 2. The optimal division would be [7, 2, 5] and [10, 8], where the maximum subarray sum is 18. Write a function that takes the array and the integer k as input and returns the minimum possible value of the maximum subarray sum after dividing the array. The first line of input contains two integers n and k (1 leq k leq n leq 10^5). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Print a single integer — the minimum possible value of the maximum subarray sum after dividing the array into exactly k subarrays.","solution":"def minimize_max_subarray_sum(arr, k): def can_split_with_max_sum(mid): current_sum = 0 subarrays = 1 for num in arr: current_sum += num if current_sum > mid: subarrays += 1 current_sum = num if subarrays > k: return False return True left, right = max(arr), sum(arr) result = right while left <= right: mid = (left + right) // 2 if can_split_with_max_sum(mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Alice is fascinated by unique sequences and she defines a sequence of length n as \\"interesting\\" if each number from 1 to n appears exactly once in the sequence. Alice believes that any sub-sequence of length k from an interesting sequence should also be interesting if it also contains each number from 1 to k exactly once. Your task is to help Alice to determine, for a given number n and a sequence of integers, if that sequence is interesting or not. The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each of the following 2 * t lines describe a test case. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5). The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ n). For each test case, print \\"YES\\" if the sequence is interesting according to the given definition, otherwise print \\"NO\\". Example: Input: 3 5 1 2 3 4 5 4 1 2 4 3 3 3 1 2 Output: YES YES YES Explanation: In the first test case, the sequence is already an interesting sequence containing each number from 1 to 5. In the second test case, subsequences like 1 2 and 2 4 are interesting as each subsequence contains all integers from 1 up to k in it. In the third test case, though the sequence starts from 3, the subsequences like 3 1 and 1 2 do contain all integers from 1 to 3 respectively.","solution":"def is_interesting_sequence(n, sequence): Determine if a sequence of numbers is interesting. if set(sequence) == set(range(1, n + 1)): return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for n, sequence in test_cases: results.append(is_interesting_sequence(n, sequence)) return results # Example usage: # t = 3 # test_cases = [(5, [1, 2, 3, 4, 5]), (4, [1, 2, 4, 3]), (3, [3, 1, 2])] # process_test_cases(test_cases)"},{"question":"Devu is a scientist who loves experimenting with chemicals. He has n bottles of chemicals, and each bottle has a unique concentration level. One day, he decides to mix these chemicals based on a specific rule to create new mixtures. The rule is as follows: Each time he mixes two bottles, he creates a new bottle with a concentration that is the sum of the concentrations of the two mixed bottles. He can perform this operation as many times as he wishes. However, Devu wants to ensure that after all possible mixes, he has exactly one bottle with a concentration level that is the sum of the concentrations of all the original bottles. He needs your help to determine the minimum number of mixing operations required to achieve this. Write a program that, given the concentration levels of the n bottles, computes the minimum number of mixing operations needed. The first line of the input contains an integer n (1 le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6), representing the concentration levels of the bottles. Output a single integer representing the minimum number of mixing operations required. # Input ``` 5 4 2 1 3 6 ``` # Output ``` 4 ``` In this example, the sums can be created step-by-step as follows, with each step indicated: 1. Mix bottle concentrations 4 and 2 to get a new concentration 6. (Number of operations = 1) 2. Mix bottle concentrations 6 and 1 to get a new concentration 7. (Number of operations = 2) 3. Mix bottle concentrations 7 and 3 to get a new concentration 10. (Number of operations = 3) 4. Mix bottle concentrations 10 and 6 to get a new concentration 16. (Number of operations = 4) Thus, the minimum number of operations required is 4.","solution":"def min_mixing_operations(n, concentrations): This function calculates the minimum number of mixing operations required to achieve a single bottle with the sum of concentrations. :param n: int - The number of bottles :param concentrations: List[int] - The concentration levels of each bottle :return: int - Minimum number of mixing operations required return n - 1"},{"question":"Alya loves to play with strings. She has recently learned about palindromes and is curious to find out more about them. A string is a palindrome if it reads the same backward as forward. Now, Alya wants to know the length of the longest palindromic subsequence in a given string. Given a string s of length n (1 ≤ n ≤ 1000), your task is to determine the length of the longest palindromic subsequence in the string. Note that a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines contain a single string s of length n each. Print the length of the longest palindromic subsequence for each test case. In the first example, the string \\"bbbab\\" has the longest palindromic subsequence \\"bbbb,\\" which has a length of 4. In the second example, the string \\"cbbd\\" has the longest palindromic subsequence \\"bb,\\" which has a length of 2. Other possible subsequence \\"cc\\" or \\"dd\\" of length 1 are also valid, but not the longest.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in given string s. n = len(s) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # All substrings of length 1 are palindromic of length 1 for i in range(n): dp[i][i] = 1 # Check substrings of length greater than 1 for cl in range(2, n+1): for i in range(n-cl+1): j = i+cl-1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of longest palindromic subseq for string s[0..n-1] return dp[0][n-1] def process_test_cases(t, test_cases): result = [] for i in range(t): result.append(longest_palindromic_subsequence(test_cases[i])) return result"},{"question":"You are given a directed graph with `n` vertices and `m` edges. Each vertex has a certain wealth associated with it, and each edge represents a unidirectional transaction from one vertex to another. Your task is to determine the maximum possible wealth you can accumulate starting from vertex 1 and reaching vertex n. The vertices are numbered from 1 to n. The wealth at vertex i is denoted by `wi`. The first line of the input contains two integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105) — the number of vertices and the number of edges, respectively. The second line contains n space-separated integers w1, w2, ..., wn (0 ≤ wi ≤ 109) — the wealth associated with each vertex. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — representing a directed edge from vertex a to vertex b. Print one integer — the maximum wealth that can be accumulated starting from vertex 1 and reaching vertex n. If it\'s not possible to reach vertex n from vertex 1, print -1. Example: ``` Input: 5 5 1 2 3 4 5 1 2 2 3 3 4 4 5 1 3 Output: 10 Input: 4 2 1 2 3 4 1 2 3 4 Output: -1 ``` In the first example, one possible path is 1 -> 2 -> 3 -> 4 -> 5, resulting in a total wealth of 1 + 2 + 3 + 4 + 5 = 15. Another possible path is 1 -> 3 -> 4 -> 5, with a wealth of 1 + 3 + 4 + 5 = 13. Here, any valid path from 1 to 5 should be considered. If no such path exists, return -1.","solution":"def maximum_wealth(n, m, wealth, edges): from collections import defaultdict, deque graph = defaultdict(list) for a, b in edges: graph[a].append(b) # Initialize distance and wealth array max_wealth = [-1] * (n + 1) max_wealth[1] = wealth[0] queue = deque([1]) while queue: curr = queue.popleft() for neighbor in graph[curr]: if max_wealth[neighbor] < max_wealth[curr] + wealth[neighbor - 1]: max_wealth[neighbor] = max_wealth[curr] + wealth[neighbor - 1] queue.append(neighbor) return max_wealth[n] if max_wealth[n] != -1 else -1"},{"question":"John has recently learned about prime palindromes and is fascinated by them. A prime palindrome is a number that is both prime and a palindrome. In other words, it should read the same forwards and backwards and should only have 1 and itself as divisors. John wants to find the smallest prime palindrome greater than or equal to a given number x. Can you help John find this number? The input consists of a single integer x (1 ≤ x ≤ 10^6). Output the smallest prime palindrome which is greater than or equal to x. Sample Input: 31 Sample Output: 101 In the sample, 31 is not a palindrome, but both 101 and 131 are prime palindromes and greater than or equal to 31. The smallest one is 101.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): return str(n) == str(n)[::-1] def smallest_prime_palindrome(x): while True: if is_palindrome(x) and is_prime(x): return x x += 1"},{"question":"Peter has a collection of books, and he loves to organize them. Each book has a width and a height. Peter has a free shelf with a length of L, and he wants to place as many books as possible on the shelf while respecting the following rules: 1. The total width of the books on the shelf must not exceed L. 2. The height of the tallest book on the shelf determines the shelf\'s height requirement. Given n books, each with a distinct width and height, write a program that helps Peter determine the maximum number of books he can place on the shelf and the total shelf height required. The first line of the input contains two integers n and L (1 ≤ n ≤ 1000, 1 ≤ L ≤ 10000) — the number of books and the length of the shelf, respectively. The next n lines each contain two integers wi and hi (1 ≤ wi, hi ≤ 1000) — the width and height of the ith book. Output two integers: the maximum number of books that Peter can place on the shelf and the height of the shelf when it contains the maximum number of books. Example Input: 5 10 1 2 2 1 3 5 4 2 4 1 Output: 4 5 Explanation: Peter can place books with widths [1, 2, 3, 4] on the shelf, which gives a total width of 10 and a maximum height of 5. Thus, the maximum number of books he can place is 4, and the shelf height required is 5.","solution":"def max_books_on_shelf(n, L, books): Determines the maximum number of books that Peter can place on the shelf and the required height. :param n: Number of books :param L: Length of the shelf :param books: List of tuples, each with (width, height) of the books :return: Tuple of two integers (max number of books, height of the shelf) # Sort books by their width books.sort(key=lambda x: x[0]) total_width = 0 max_height = 0 count = 0 for width, height in books: if total_width + width <= L: total_width += width max_height = max(max_height, height) count += 1 else: break return count, max_height"},{"question":"You are working on a text editor that supports Unicode characters. One of the unique features of this text editor is that it can detect palindromes not just on simple single-byte characters, but on user-specified multi-byte Unicode strings. Your task is to implement a function that takes a string and determines if it can be rearranged to form a palindrome. Given a string s, determine if there exists a permutation of the string that is a palindrome. # Input The input consists of a single string s (1 leq |s| leq 10^5). The string may contain any Unicode character, and the length of the string is the number of bytes in its UTF-8 representation. # Output Print \\"YES\\" if any permutation of the string can be rearranged to form a palindrome. Otherwise, print \\"NO\\". # Example ```text Input aab Output YES Input carerac Output YES Input code Output NO ``` # Notes - A permutation of the string can form a palindrome if at most one character occurs an odd number of times. - This problem tests your ability to handle multi-byte Unicode characters in strings and to check for permutations that can form a palindrome, which requires understanding of character frequency distribution.","solution":"def can_form_palindrome(s): Determine if a permutation of the string `s` can form a palindrome. :param s: String to check :return: \\"YES\\" if it can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter char_count = Counter(s) odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Given a binary tree, you are tasked with finding the maximum path sum. For each path, the path sum is the sum of the node values of each node in the path. A path is defined as any sequence of nodes starting from some node and going downwards, where each node in the sequence has exactly one child. The binary tree is represented using a tuple where the first element is the value of the node, the second element is the left subtree, and the third element is the right subtree. If a node does not have a left or right child, that subtree is represented as None. Your task is to write a function `max_path_sum(tree)` that takes the root of the binary tree as input and returns the maximum path sum. # Input Format - `tree`: A tuple representing the root of the binary tree. Each tuple is of the form `(value, left, right)` where `value` is an integer, `left` is either another tuple or None, and `right` is either another tuple or None. # Constraints - Each node will have a value in the range [-1000, 1000]. - The binary tree will have at most 1000 nodes. - You may assume that the function will be called with a non-empty tree. # Output Format - Return a single integer, the maximum path sum in the binary tree. # Example ```python # Example 1 tree = (1, (2, (4, None, None), (5, None, None)), (3, None, None)) print(max_path_sum(tree)) # Output: 11 (Path is 4 -> 2 -> 1 -> 3) # Example 2 tree = (-10, (9, None, None), (20, (15, None, None), (7, None, None))) print(max_path_sum(tree)) # Output: 42 (Path is 15 -> 20 -> 7) ``` # Function Signature ```python def max_path_sum(tree: tuple) -> int: pass ``` Write your implementation below:","solution":"def max_path_sum(tree): def helper(node): if not node: return (0, float(\'-inf\')) val, left, right = node left_single, left_max = helper(left) right_single, right_max = helper(right) # Maximum path sum without splitting max_single_path = max(val, val + left_single, val + right_single) # Maximum splitting path max_topology = max(max_single_path, val + left_single + right_single) return (max_single_path, max(max_topology, left_max, right_max)) return helper(tree)[1]"},{"question":"Jake is a renowned geographer who loves to explore rectangular pieces of land and calculate the maximum number of square-shaped plots he can divide the land into. Given that he can only use one size of square plot across the entire land, he wants to maximize the size of the square plot that can be uniformly cut from the rectangular land. Your task is to help Jake by figuring out the maximum possible side length of the square plots that he can use to completely cover the entire land without leaving any remainder. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 10^6), which represent the dimensions of the land (length and width respectively). Output the maximum possible side length of the square plots that can be uniformly cut from the rectangular land. Example: Input: 48 180 Output: 12 Explanation: The maximum side length of the square plots which can evenly cover the 48 by 180 rectangular piece of land is 12.","solution":"def max_square_side_length(n, m): Given the dimensions of the land (n and m), return the maximum possible side length of the square plots that can be uniformly cut from the rectangular land. import math return math.gcd(n, m)"},{"question":"A company wants to optimize its supply chain by minimizing the transportation costs associated with delivering goods from its central warehouse to multiple distribution centers. The company has a list of delivery routes connecting these centers, with each route having a specific transportation cost. The problem can be represented as an undirected, weighted graph where nodes represent the distribution centers and edges represent the delivery routes with their associated costs. The central warehouse is represented by node 1. The company\'s goal is to determine the minimum transportation cost required to connect all distribution centers to the central warehouse directly or indirectly, ensuring each center is reachable from the warehouse. Given the number of distribution centers and the list of delivery routes with their respective costs, determine the minimum cost to achieve the desired connectivity using a minimum spanning tree (MST). # Input - The first line contains two integers n and m (1 le n le 10^5, 1 le m le 2 cdot 10^5) — the number of distribution centers and the number of delivery routes. - Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — the two distribution centers connected by a delivery route and the transportation cost of that route. # Output - Print a single integer, which is the minimum transportation cost required to connect all distribution centers. If it is not possible to connect all centers, print \\"IMPOSSIBLE\\". # Example Input ``` 4 5 1 2 4 1 3 3 2 3 2 2 4 5 3 4 7 ``` Output ``` 10 ``` In the example provided, the minimum spanning tree connecting all distribution centers to the central warehouse has a total cost of 10.","solution":"import heapq def find(parent, i): A utility function to find set of an element i (uses path compression technique). if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): A function that does union of two sets of x and y (uses union by rank). root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree(n, edges): Function to calculate the minimum transportation cost using Kruskal\'s algorithm. if n == 1: return 0 # Sort edges based on weight edges.sort(key=lambda x: x[2]) parent = [] rank = [] # Create `n` single item sets for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: union(parent, rank, root_u, root_v) mst_weight += w mst_edges += 1 # If we already have n-1 edges in MST, we can stop if mst_edges == n - 1: break if mst_edges == n - 1: return mst_weight else: return \\"IMPOSSIBLE\\" # Main function to read input and call the MST function def minimum_transportation_cost(n, m, routes): return minimum_spanning_tree(n, routes)"},{"question":"Given a list of intervals, you need to merge all overlapping intervals and return the resulting list of intervals. Each interval is represented as a tuple (start, end). Two intervals (a, b) and (c, d) are considered to be overlapping if the end of one interval is greater than or equal to the start of the other interval, i.e., b >= c or d >= a. For example, given the intervals [(1, 3), (2, 6), (8, 10), (15, 18)], the merged intervals would be [(1, 6), (8, 10), (15, 18)]. Write a function `merge_intervals(intervals)` that takes a list of intervals and returns the merged list of intervals. # Input - A single integer n (1 leq n leq 10^4) — the number of intervals. - Followed by n lines, each containing two integers start and end (0 leq start < end leq 10^4), representing the start and end of an interval. # Output - The output should be the merged list of intervals in ascending order of start times. Each interval should be printed on a new line. # Example Input ``` 4 1 3 2 6 8 10 15 18 ``` Output ``` 1 6 8 10 15 18 ``` # Note You can assume that the input intervals are not necessarily sorted. Intervals within the result should be printed in ascending order of their start times.","solution":"def merge_intervals(intervals): Merges overlapping intervals. Parameters: intervals (list of tuples): List of intervals where each interval is represented as a tuple (start, end) Returns: list of tuples: List of merged intervals. # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) return merged"},{"question":"Liam the Librarian works at a library consisting of n bookshelves aligned in a single row. Each bookshelf has m books. The aisles between the bookshelves are narrow, and therefore only one book can be taken from each shelf at a time. Liam needs to remove as many books as possible, but he does not want to violate the constraint of removing only one book from each shelf at a time. To make his task more interesting, Liam decides to remove the books in such a way that the total sum of the values carried by the removed books is maximized. Each book has a specific value characterizing how valuable it is. Given the values of the books on each shelf, help Liam find out the maximum total book value he can remove by picking exactly one book from each shelf. The first line of input contains two integers, n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), which represent the number of bookshelves and the number of books on each shelf respectively. The next n lines each contain m integers, where the j-th integer in the i-th line represents the value of the j-th book on the i-th shelf. Print one integer, the maximum total value of books that Liam can remove by picking exactly one book from each shelf. # Example **Input:** ``` 3 4 5 3 8 4 6 1 2 7 4 9 5 1 ``` **Output:** ``` 24 ``` **Explanation:** Liam can maximize the total value by selecting: - 8 from the first shelf, - 7 from the second shelf, - 9 from the third shelf. So, the maximum total value is 8 + 7 + 9 = 24.","solution":"def max_book_values(n, m, bookshelf_values): Returns the maximum total book values Liam can remove by picking exactly one book from each shelf. Parameters: n (int): Number of bookshelves m (int): Number of books on each shelf bookshelf_values (list of list of int): Values of books on each shelf Returns: int: Maximum total value of books removed total_value = 0 for shelf in bookshelf_values: total_value += max(shelf) return total_value"},{"question":"A company requires passwords to follow a specific rule: they must contain the string \\"SEC\\" as a contiguous substring. The company has a password checking software that flags passwords which do not meet the criteria. You have been asked to automate this process. Given a list of passwords, determine which ones meet the requirement and which do not. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of passwords. The next n lines each contain a password, which is a string consisting of uppercase letters only and has length between 1 and 100. Output n lines: for each password, print \\"Valid\\" if the password contains the substring \\"SEC\\" and \\"Invalid\\" otherwise. Example: ``` Input: 5 SECRET POLICE SECURE ACCESS SECURITY Output: Valid Invalid Valid Invalid Valid ```","solution":"def check_passwords(passwords): Checks if each password in the list contains the substring \'SEC\' :param passwords: List of passwords to check :return: List of \\"Valid\\" or \\"Invalid\\" strings for each password results = [] for password in passwords: if \'SEC\' in password: results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"A robotics competition is fast approaching, and Alex is getting ready for it. He has an array of robot commands consisting of move (\\"M\\") and turn (\\"T\\") instructions. However, due to a bug in his code, the sequence might have redundant consecutive commands which do nothing when executed one after the other. To fix that, Alex needs to reduce the sequence by removing consecutive redundant commands. A consecutive sequence of commands is considered redundant if: 1. Two consecutive move commands (\\"MM\\") are redundant and should be reduced to a single \\"M\\". 2. Two consecutive turn commands (\\"TT\\") are redundant and should be reduced to a single \\"T\\". Help Alex by writing a function that takes his list of commands and returns the optimized list of commands after removing any redundant sequences. The command list will always have at least one command and at most 100,000 commands. The first line of the input contains a single integer n (1 le n le 100,000) — the number of commands in the sequence. The second line contains a string of length n consisting of characters \'M\' and \'T\' representing the commands. Print a single string containing the optimized sequence of commands. For example: Sample 1: Input: 5 MMTMT Output: MTMT Sample 2: Input: 8 TTMMTTMM Output: TMTM Sample 3: Input: 2 MT Output: MT","solution":"def optimize_commands(n, commands): Takes the number of commands and the command string, and returns the optimized command string after removing redundant sequences. Parameters: n (int): The number of commands. commands (str): The command sequence string. Returns: str: The optimized command sequence. if n <= 1: return commands result = [] for i in range(n): if i == 0 or commands[i] != commands[i - 1]: result.append(commands[i]) return \'\'.join(result) # Example usage: # n = 5 # commands = \\"MMTMT\\" # print(optimize_commands(n, commands)) # Output: \\"MTMT\\""},{"question":"Amara has a magical string of length n consisting of lowercase English letters. She can perform the following operation any number of times: - Choose any character in the string and replace it with any other character from \'a\' to \'z\'. Her goal is to transform the string into a palindrome in the fewest number of operations. A string is a palindrome if it reads the same forwards and backwards. Write a program to find the minimum number of operations required to transform the string into a palindrome. # Input - The first line contains one integer n (1 ≤ n ≤ 100,000), the length of the string. - The second line contains a string of length n consisting of lowercase English letters. # Output - Output one integer, the minimum number of operations required to transform the string into a palindrome. # Example Input: ``` 5 abcba ``` Output: ``` 0 ``` Input: ``` 4 abca ``` Output: ``` 1 ``` # Explanation - In the first example, the string \\"abcba\\" is already a palindrome, so no operations are needed. - In the second example, the string \\"abca\\" can be transformed into either \\"abca\\" -> \\"abba\\" or \\"acca\\" with one operation.","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to transform the string into a palindrome. left = 0 right = n - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations"},{"question":"Yulia is an agricultural scientist and she wants to maximize the production of a particular plant in a rectangular field of size n × m. To help her, you need to determine the optimal planting pattern. She knows that the productivity of the plants is influenced by their locations. Each cell in the field has a different productivity value associated with it. To measure the optimal planting pattern, you decide to find a subrectangle within the field that has the maximum productivity sum. The productivity of the field is given as a 2D list of integers. The first line of input consists of two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the field. Each of the next n lines contains m integers where each integer represents the productivity at that coordinate (i, j) (-1000 ≤ productivity[i][j] ≤ 1000). Output a single integer which is the maximum productivity sum of any subrectangle within the field. # Example Input: ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output: ``` 29 ``` Explanation: The subrectangle with the maximum production sum is: ``` 3 8 10 -4 -1 1 Which sums up to 29. ```","solution":"def maximum_productivity_sum(n, m, productivity): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += productivity[i][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum"},{"question":"You are given a sequence of n integers, where each integer represents the height of a building in a straight street. The city government wants to install a new lighting system to cover the entire street. Each light can illuminate a range of buildings such that the total height of illuminated buildings does not exceed a given threshold h. The goal is to determine the minimum number of lights required to cover all the buildings in the street. The first line contains two integers n and h (1 ≤ n, h ≤ 10^5) — the number of buildings and the height threshold, respectively. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the heights of the buildings. Output one integer — the minimum number of lights required to cover all the buildings. Example Input: 7 10 2 3 4 2 5 4 1 Output: 3 Explanation: One optimal solution is to place the first light to cover buildings with heights [2, 3, 4], the second light to cover the buildings with heights [2, 5], and the third light to cover the buildings with heights [4, 1].","solution":"def min_lights_required(n, h, buildings): min_lights = 0 i = 0 while i < n: current_height = 0 while i < n and current_height + buildings[i] <= h: current_height += buildings[i] i += 1 min_lights += 1 return min_lights def from_input_string(input_string): lines = input_string.strip().split(\'n\') n, h = map(int, lines[0].split()) buildings = list(map(int, lines[1].split())) return n, h, buildings def to_input_string(inputs): n, h, buildings = inputs return f\\"{n} {h}n{\' \'.join(map(str, buildings))}\\" def from_output_string(output_string): return int(output_string.strip()) def to_output_string(output): return str(output)"},{"question":"Given an array of integers, a \\"beautiful\\" subarray is defined as one where the sum of the elements is equal to a given target sum. Your task is to determine how many \\"beautiful\\" subarrays can be formed within the given array. The first line of the input contains two integers n and k (1 le n le 10^5, -10^9 le k le 10^9) — the length of the array and the target sum, respectively. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Print a single integer, the number of \\"beautiful\\" subarrays whose sum is equal to k. # Examples Input ``` 5 5 1 2 3 4 5 ``` Output ``` 2 ``` Input ``` 4 0 1 -1 1 -1 ``` Output ``` 4 ``` Note In the first example, the \\"beautiful\\" subarrays are [2, 3] and [5]. In the second example, the \\"beautiful\\" subarrays are [1, -1], [-1, 1], [1, -1], and [1, -1, 1, -1].","solution":"def count_beautiful_subarrays(arr, n, k): Returns the number of subarrays whose sum is equal to k. Parameters: arr (list of int): The list of integers to process. n (int): The length of the array. k (int): The target sum for a subarray to be considered \\"beautiful\\". Returns: int: The number of subarrays with sum equal to k. from collections import defaultdict sum_count = defaultdict(int) current_sum = 0 count = 0 for num in arr: current_sum += num if current_sum == k: count += 1 if current_sum - k in sum_count: count += sum_count[current_sum - k] sum_count[current_sum] += 1 return count # Example usage # n, k = 5, 5 # arr = [1, 2, 3, 4, 5] # print(count_beautiful_subarrays(n, k, arr)) # Output should be 2"},{"question":"Masha has recently learned about cyclic permutations, and she is fascinated by their properties. To better understand them, she devised the following problem: Given a string s consisting of lowercase English letters, a cyclic permutation of s is formed by repeatedly moving the first character of s to the end of the string. For example, if s = \\"abcde\\", its cyclic permutations are: 1. abcde 2. bcdea 3. cdeab 4. deabc 5. eabcd Masha wants to know if a given string t can be obtained as a cyclic permutation of string s. Help her by writing a function that determines whether t is a cyclic permutation of s. The first line contains the string s (1 ≤ |s| ≤ 1000). The second line contains the string t (1 ≤ |t| ≤ 1000). Print \\"YES\\" if t is a cyclic permutation of s, and \\"NO\\" otherwise. # Example Input ``` abcde cdeab ``` Output ``` YES ``` Input ``` abcde acbde ``` Output ``` NO ```","solution":"def is_cyclic_permutation(s, t): Returns \\"YES\\" if t is a cyclic permutation of s, otherwise returns \\"NO\\". # Check if t is a cyclic permutation of s if len(s) != len(t): return \\"NO\\" doubled_s = s + s if t in doubled_s: return \\"YES\\" else: return \\"NO\\""},{"question":"Anjali loves balanced parentheses! A string is considered balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and the parentheses are properly nested. You are given a string s consisting of only \'(\' and \')\'. Anjali wants to balance the string by performing the minimum number of insertions or deletions of parentheses. Write a function that returns the minimum number of insertions or deletions required to balance the string. **Input:** - The input consists of a single string s (1 ≤ |s| ≤ 10^5) containing the characters \'(\' and \')\'. **Output:** - Output a single integer representing the minimum number of insertions or deletions required to balance the string. **Example:** ``` Input: \\"(()\\" Output: 1 Input: \\"())(\\" Output: 2 ``` **Explanation:** 1. For the first example, you can insert a \')\' at the end to balance the string, making the total number of changes equal to 1. 2. For the second example, you can delete one \')\' and insert one \'(\' to balance the string, making the total number of changes equal to 2.","solution":"def min_insertions_deletions_to_balance(s): open_needed = 0 close_needed = 0 for char in s: if char == \'(\': # Increase the number of closing paren needed close_needed += 1 else: # If a closing paren is present but no open paren to match with, we need an open paren if close_needed == 0: open_needed += 1 else: # Match a closing paren with an open paren close_needed -= 1 # The total insertions/deletions needed will be the sum of remaining unmatched open and close parens return open_needed + close_needed"},{"question":"You are given an m by n grid filled with non-negative integers. You can think of it as a grid of gold mines where each cell contains a certain amount of gold. Your task is to start from the top-left corner of the grid and move to the bottom-right corner, collecting gold along the way. However, you can only move to the right or down at any point in time. Write a function that computes the maximum amount of gold you can collect by the time you arrive at the bottom-right corner of the grid. The first line of input contains two integers m and n (1 ≤ m, n ≤ 100), where m is the number of rows and n is the number of columns in the grid. Each of the next m lines contains n non-negative integers representing the amount of gold in that cell (0 ≤ gold ≤ 1000). Print the maximum amount of gold you can collect. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 In the example, the optimal path is 1→3→1→5→1→1, collecting a total of 12 units of gold.","solution":"def max_gold(grid): Returns the maximum amount of gold that can be collected by moving from the top-left corner to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize a DP table dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"Petya has a collection of binary strings. A binary string is a string that consists only of \'0\'s and \'1\'s. Petya considers a binary string to be beautiful if it has no two consecutive characters that are the same. For example, the strings \\"010101\\" and \\"1010101\\" are beautiful, but \\"110\\" and \\"001\\" are not. Petya has a binary string `s` and he wants to make it beautiful. He can perform the following operation any number of times: choose one of the characters in the string and flip it (i.e., change \'0\' to \'1\' or change \'1\' to \'0\'). Help Petya to find the minimum number of operations he needs to perform to make the binary string `s` beautiful. # Input The first line contains a single integer `t` (1 <= t <= 10), the number of test cases. Each of the next `t` lines contains a binary string `s` (1 <= |s| <= 1000), where |s| denotes the length of the string. # Output For each test case, print a single line containing the minimum number of operations required to make the given binary string beautiful. # Example ``` Input: 3 011 11111 000 Output: 1 4 2 ``` # Note In the first test case, we can flip the first \'1\' to \'0\' or the second \'1\' to \'0\' to make the string \\"010\\", which is beautiful. In the second test case, we need to flip every second \'1\' to \'0\' to get \\"01010\\", resulting in 4 flips. In the third test case, we need to flip every second \'0\' to \'1\' to get \\"010\\", resulting in 2 flips.","solution":"def min_operations_to_make_beautiful(t, test_cases): Calculates the minimum number of operations to make each given binary string beautiful. Args: t (int): Number of test cases. test_cases (List[str]): List of binary strings. Returns: List[int]: List of minimum operations required for each test case. results = [] for s in test_cases: operations = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: operations += 1 results.append(operations) return results"},{"question":"Polycarp has a collection of circular discs. Each disc has a radius and a color. He has two types of queries: 1. Add a new disc to his collection. Each disc has a radius and a color associated with it. 2. Determine the maximum radius among all discs of a given color in his collection. For each query of type 2, you need to output the maximum radius of all discs of the given color. If there are no discs of the specified color, output `-1`. The first line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. Each of the next `q` lines contains one of the following two types of queries: - `1 r c` — Add a new disc with radius `r` and color `c` to the collection. - `2 c` — Determine the maximum radius among all discs of color `c`. The colors are represented as strings consisting of lowercase English letters, and their lengths do not exceed 100. The radius of a disc is an integer between 1 and 1,000,000. Output the result for each query of the second type. Example: ``` Input: 7 1 5 red 1 10 blue 1 7 red 2 red 1 3 green 2 green 2 yellow Output: 7 3 -1 ```","solution":"def process_queries(queries): from collections import defaultdict disc_collection = defaultdict(list) result = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: radius, color = int(parts[1]), parts[2] disc_collection[color].append(radius) elif query_type == 2: color = parts[1] if color in disc_collection and disc_collection[color]: max_radius = max(disc_collection[color]) result.append(max_radius) else: result.append(-1) return result"},{"question":"A delivery company has a fleet of drones, each uniquely identified by an integer. The company receives n delivery requests, each with a specific weight limit that can only be handled by certain drones based on their capabilities. Each drone can only handle requests sequentially and cannot take on more than one delivery request at a time. The company wants to determine if they can complete all delivery requests with the given drones. More formally, for each request with a weight limit wl_i, there exists at least one available drone d_j that can handle wl_i and is not currently engaged in another delivery. Write a program to determine if all delivery requests can be assigned to drones. The first line contains an integer n (1 ≤ n ≤ 50) — the number of delivery requests. The second line contains n space-separated integers wl_1, wl_2, ..., wl_n (1 ≤ wl_i ≤ 1000) — the weight limits of the delivery requests. The third line contains an integer m (1 ≤ m ≤ 20) — the number of drones. The fourth line contains m space-separated integers c_1, c_2, ..., c_m (1 ≤ c_i ≤ 1000) — the maximum weight capacity of each drone. Print \\"YES\\" (without quotes) if all delivery requests can be fulfilled by assigning them to the available drones. Otherwise, print \\"NO\\". # Example Input ``` 3 200 500 1000 3 250 600 1500 ``` Output ``` YES ``` Explanation In this example, the first delivery request of 200 can be handled by the first drone (capacity 250), the second request of 500 by the second drone (capacity 600), and the third request of 1000 by the third drone (capacity 1500), so the answer is \\"YES\\". If we change the third drone\'s capacity to 900, the third request would not be fulfilled, and the answer would be \\"NO\\".","solution":"def can_fulfill_all_requests(n, weight_limits, m, capacities): Determines if all delivery requests can be assigned to the available drones. Parameters: n (int): number of delivery requests weight_limits (list of int): weight limits of the delivery requests m (int): number of drones capacities (list of int): maximum weight capacities of each drone Returns: str: \\"YES\\" if all requests can be fulfilled, otherwise \\"NO\\" # Sort the weight limits in ascending order weight_limits.sort() # Sort the drone capacities in ascending order capacities.sort() i = 0 # Index for weight_limits j = 0 # Index for capacities # Process each delivery request while i < n and j < m: if weight_limits[i] <= capacities[j]: i += 1 # Assign this delivery request to current drone j += 1 # Move to the next drone if i == n: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice and Bob are playing a game with strings. Alice gives Bob a string `s` of length `n` and asks Bob to re-arrange the string such that all identical characters are as far apart from each other as possible. If it is possible to re-arrange the string in such a way, Bob should return the new rearranged string. If it is not possible, Bob should return the word `\\"IMPOSSIBLE\\"`. Two identical characters in a string are considered to be as far apart as possible if there is no way to swap around any two different characters in the string to further increase the minimum distance between any pair of identical characters. The distance between two characters in a string is defined to be the number of characters between them. For example, in the string `\\"abac\\"`, the distance between the two `\'a\'` characters is 2. The input string will contain only lowercase English letters. Input: - A single integer n (1 ≤ n ≤ 100), the length of the string `s`. - A single string `s` of length `n`. Output: - A single string which is the rearranged string that meets Alice\'s condition, or \\"IMPOSSIBLE\\" if no such rearrangement exists. Example: Input: 6 aabbcc Output: abcabc Input: 3 aaa Output: IMPOSSIBLE","solution":"from collections import Counter import heapq def rearrange_string(n, s): Re-arranges the string \'s\' such that all identical characters are as far apart as possible. If it is not possible, returns \\"IMPOSSIBLE\\". char_count = Counter(s) max_count = max(char_count.values()) if max_count > (n + 1) // 2: return \\"IMPOSSIBLE\\" max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \\"\\" while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char return \\"\\".join(result)"},{"question":"You are given an n times n grid consisting of cells that are either empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The task is to determine if there exists a path from the top-left corner of the grid (cell (1,1)) to the bottom-right corner (cell (n,n)) such that each step you can move either right or down into an adjacent empty cell. If there exists such a path, print \\"YES\\". Otherwise, print \\"NO\\". # Input The first line contains an integer n (1 leq n leq 1000) - the size of the grid. The next n lines each contain n characters, where each character is either \'.\' or \'#\'. # Output Output a single line \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner, otherwise output \\"NO\\". # Example Input ``` 4 ..#. .... #. .... ``` Output ``` YES ``` Input ``` 3 .#. . .#. ``` Output ``` NO ``` # Note In the first example, there is a path that goes right, right, down, down, left, down, right to navigate through the grid. In the second example, there is no valid path from (1,1) to (3,3) due to obstacles completely blocking the path.","solution":"def find_path(grid, n): Determines if there exists a path from the top-left to the bottom-right of the grid. Args: grid: List of strings representing the grid. n: Integer, size of the grid. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. from collections import deque if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return \\"NO\\" directions = [(1, 0), (0, 1)] # Possible movements: right, down queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) grid = [data[i + 1] for i in range(n)] print(find_path(grid, n))"},{"question":"You are participating in a game where you and your opponents have to collect diamonds in a mine. The mine is represented by a 2D grid of size n x m, where each cell either contains some number of diamonds or is empty (denoted by 0). Your objective is to collect the maximum number of diamonds possible by following certain rules. Initially, you start at the top-left cell (1, 1), and you can only move either to the right or downward to reach the bottom-right cell (n, m). You need to collect all the diamonds from the cells you traverse including the starting and ending cells of your path. Given the grid, determine the maximum number of diamonds you can collect by traveling from the top-left to the bottom-right cell. The input starts with two integers n and m (1 ≤ n, m ≤ 500) — the dimensions of the grid. Each of the following n lines contains m integers, where each integer represents the number of diamonds in that cell (0 ≤ number of diamonds ≤ 100). Print the maximum number of diamonds you can collect. # Example **Input:** ``` 3 3 1 2 3 4 0 6 7 8 9 ``` **Output:** ``` 29 ``` In the provided example, the optimal path is (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) with diamond collection as: 1 + 4 + 7 + 8 + 9 = 29.","solution":"def max_diamonds(grid): Returns the maximum number of diamonds collected in the grid by traveling from the top-left to the bottom-right cell, moving only right or down. n = len(grid) m = len(grid[0]) # Create a dp array with the same dimensions as the grid dp = [[0]*m for _ in range(n)] # Initial cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the maximum number of diamonds return dp[n-1][m-1]"},{"question":"Given a sequence of n integers, your task is to determine whether it can become a strictly increasing sequence after performing at most one move. In one move, you can remove exactly one element from the sequence. The first line of the input contains a single integer n (2 ≤ n ≤ 100,000), the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000), the elements of the sequence. Output \\"YES\\" (without quotes) if it is possible to make the sequence strictly increasing by removing exactly one element, otherwise output \\"NO\\". For example, Input: 5 1 2 10 5 7 Output: YES Input: 5 1 2 2 3 4 Output: YES Input: 3 5 4 3 Output: NO Note: In the first example, by removing the element 10, the sequence becomes 1, 2, 5, 7, which is strictly increasing. In the second example, by removing one of the elements with value 2, the sequence becomes 1, 2, 3, 4, which is strictly increasing. In the third example, no single removal can make the sequence strictly increasing.","solution":"def can_become_strictly_increasing(n, sequence): Determines if a sequence can become strictly increasing by removing at most one element. :param n: Number of elements in the sequence :param sequence: List of integers representing the sequence :return: \\"YES\\" if it can become strictly increasing by removing one element, else \\"NO\\" def is_strictly_increasing(seq): for i in range(len(seq) - 1): if seq[i] >= seq[i + 1]: return False return True if is_strictly_increasing(sequence): return \\"YES\\" for i in range(n): if is_strictly_increasing(sequence[:i] + sequence[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"You\'re given a grid of size n times m where each cell contains either a \'.\' or a \'*\'. You can move from any cell to its neighboring cells (up, down, left, right), but you cannot move diagonally. A path is considered valid if it starts and ends with a cell containing a \'.\' and only moves through cells containing \'.\'. Your task is to find the largest rectangular subgrid within the given grid where all the cells contain \'.\' The first line of the input contains two space-separated integers n and m (2 le n, m le 1000). Each of the next n lines contains a string of m characters, representing the grid. Output a single integer — the area of the largest rectangular subgrid that contains only \'.\' cells. # Example Input: ``` 5 6 ****** *...** *..*** ***..* *.*..* ``` Output: ``` 4 ``` Explanation: In the given example, the largest rectangular subgrid consisting only of \'.\' cells has a size of 2 times 2, resulting in an area of 4.","solution":"def largest_rectangular_subgrid(n, m, grid): # Use dynamic programming to find the largest rectangular area if n == 0 or m == 0: return 0 max_area = 0 height = [0] * m left = [0] * m right = [m] * m for i in range(n): cur_left, cur_right = 0, m for j in range(m): if grid[i][j] == \'.\': height[j] += 1 else: height[j] = 0 for j in range(m): if grid[i][j] == \'.\': left[j] = max(left[j], cur_left) else: left[j] = 0 cur_left = j + 1 for j in range(m-1, -1, -1): if grid[i][j] == \'.\': right[j] = min(right[j], cur_right) else: right[j] = m cur_right = j for j in range(m): max_area = max(max_area, (right[j] - left[j]) * height[j]) return max_area # Example usage: # n, m = 5, 6 # grid = [ # \\"******\\", # \\"*...**\\", # \\"*..***\\", # \\"***..*\\", # \\"*.*..*\\" # ] # print(largest_rectangular_subgrid(n, m, grid)) # Output: 4"},{"question":"Timmy recently inherited a peculiar collection of ancient books that are arranged and managed by a series of mystical rules. Each book is assigned a unique identifier and has a certain magical value associated with it. To preserve the magical balance, Timmy needs to periodically find the books with the highest and lowest magical values in specific subsections of his collection. He could do this manually, but that would consume too much time. He seeks your help to write a program that can efficiently handle these queries. The first line contains an integer ( n ) ((2 leq n leq 10^5)), representing the number of books in Timmy\'s collection. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) ((1 leq a_i leq 10^9)), representing the magical values of the books. The third line contains an integer ( q ) ((1 leq q leq 10^4)), representing the number of queries Timmy needs to make. Each of the following ( q ) lines contains two integers ( l ) and ( r ) ((1 leq l leq r leq n)), representing the 1-based range of books Timmy wants to query. For each query, output the maximum and minimum magical values in the given range, separated by a space. To illustrate: **Input:** ``` 5 4 2 7 5 9 3 1 3 2 4 1 5 ``` **Output:** ``` 7 2 7 2 9 2 ``` In the example, Timmy queries the subsections of his collection as described in the input. The program outputs the maximum and minimum magical values for each specified range.","solution":"def query_books_values(n, values, queries): This function processes the queries to find the max and min magical values in specific subsections of Timmy\'s collection of books. :param n: Number of books :param values: List of magical values of books :param queries: List of queries, where each query is a tuple (l, r) :return: List of results for each query, where each result is a tuple (max_value, min_value) results = [] for query in queries: l, r = query subset = values[l-1:r] max_val = max(subset) min_val = min(subset) results.append((max_val, min_val)) return results"},{"question":"Little Anna loves numbers. One day, her teacher gave her a special number puzzle. The teacher gives Anna a number m and wants her to find all possible pairs (a, b) where a and b are positive integers, such that the equation a^2 + b^2 = m holds true. Anna feels overwhelmed with this task and needs your help to solve it. Write a program that finds all possible pairs (a, b) that satisfy the equation. The first line contains an integer m (1 ≤ m ≤ 109). In the first line, print the number of distinct pairs k. In the following k lines, print each pair (a, b) in ascending order of a. If there are multiple pairs with the same a, then order those by ascending b. In the first test case m = 5, the output should be: 2 1 2 2 1 In the second test case m = 10, the output should be: 1 1 3 Note: Each pair (a, b) should be considered distinct and both (a, b) and (b, a) should be treated as valid and different pairs if (a ≠ b).","solution":"def find_pairs(m): Returns a list of pairs (a, b) such that a^2 + b^2 = m and both a and b are positive integers. pairs = [] for a in range(1, int(m ** 0.5) + 1): b_squared = m - a**2 b = int(b_squared ** 0.5) if b_squared == b**2 and b > 0: pairs.append((a, b)) if a != b: pairs.append((b, a)) pairs = sorted(set(pairs)) return pairs"},{"question":"Alice is practicing her data structure skills and wants your help with a queue-related problem. She has a queue that initially contains the integers from 1 to n in order. She will perform m operations on this queue. Each operation is one of the following: 1. ENQUEUE x - Add integer x to the end of the queue. 2. DEQUEUE - Remove and print the integer at the front of the queue. 3. PRINTFRONT - Print the integer at the front of the queue without removing it. Given the sequence of operations, help Alice determine the output for each DEQUEUE and PRINTFRONT operation. The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000) — the initial number of integers in the queue and the number of operations respectively. The next m lines describe the operations. Each line will start with an integer ti (1 ≤ ti ≤ 3), denoting the type of the operation (see above). If ti = 1, it will be followed by an integer x (1 ≤ x ≤ 100,000). Output the results of each DEQUEUE and PRINTFRONT operation in the order they appear. For example: Input: 4 6 3 2 1 5 3 2 3 Output: 1 1 2 5 Explanation: The initial queue is [1, 2, 3, 4]. The operations are: - PRINTFRONT: The front is 1. - DEQUEUE: The front 1 is removed. Queue becomes [2, 3, 4]. - ENQUEUE 5: Queue becomes [2, 3, 4, 5]. - PRINTFRONT: The front is 2. - DEQUEUE: The front 2 is removed. Queue becomes [3, 4, 5]. - PRINTFRONT: The front is 3.","solution":"from collections import deque def process_queue_operations(n, m, operations): queue = deque(range(1, n+1)) results = [] for operation in operations: if operation[0] == 1: # ENQUEUE x x = operation[1] queue.append(x) elif operation[0] == 2: # DEQUEUE if queue: results.append(queue.popleft()) elif operation[0] == 3: # PRINTFRONT if queue: results.append(queue[0]) return results"},{"question":"You are given a string `s` and an integer `k`. Your task is to find the longest substring of `s` that contains at most `k` distinct characters. Your code should have the following signature: ```python def longest_substring_with_k_distinct(s: str, k: int) -> int: pass ``` # Example Input: `s = \\"eceba\\"`, `k = 2` Output: 3 Explanation: The longest substring with at most 2 distinct characters is \\"ece\\" with a length of 3. # Constraints * `1 <= len(s) <= 10^5` * `1 <= k <= 26` * The string `s` consists of only lowercase English letters.","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> int: Find the length of the longest substring of `s` that contains at most `k` distinct characters. from collections import defaultdict n = len(s) if k == 0 or n == 0: return 0 char_map = defaultdict(int) left = 0 max_length = 0 for right in range(n): char_map[s[right]] += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"[Alice\'s Maze Adventure] Alice is playing a maze game that consists of a grid of size n times m. Each cell in the grid can either be open (.) or blocked (#). Alice starts from a given cell and aims to reach another cell. She can move to an adjacent cell (up, down, left, or right) if it is open. However, there is a twist! Alice can perform a jump only to a directly adjacent cell if it has not been visited in the current path she is taking. Adding to this, the player can make maximum of `k` jumps during the entire process. Your task is to determine if Alice can reach her target using the given constraints. **Input:** - The first line contains three integers n, m, and k (1 le n, m le 1000, 0 le k le 10^6) — the dimensions of the grid and the maximum number of jumps allowed. - The following n lines each contain m characters (either \'.\' or \'#\'), representing the maze. - The next line contains four integers sx, sy, tx, and ty (1 le sx, sy, tx, ty le 1000) — the starting cell and the target cell (1-based indexing). **Output:** - Print \\"YES\\" if it\'s possible for Alice to reach the target cell within the given constraints. Otherwise, print \\"NO\\". **Example:** ```plaintext 5 5 3 ..... ..#.. .#.#. ..#.. ..... 1 1 5 5 ``` **Explanation:** In the given example, Alice starts at the cell (1, 1). She can move to adjacent cells and use jumps if necessary, but she should ensure that she does not exceed the maximum number of allowed jumps. You need to write a function that simulates this maze traversal and determines the possibility of reaching the target within the allowed constraints. Use appropriate data structures such as queues or stacks to implement the traversal algorithm efficiently.","solution":"from collections import deque def can_reach_with_jumps(n, m, k, grid, start, target): def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': yield nx, ny sx, sy, tx, ty = start[0] - 1, start[1] - 1, target[0] - 1, target[1] - 1 if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return \\"NO\\" queue = deque([(sx, sy, 0, k)]) visited = set() visited.add((sx, sy, 0)) while queue: x, y, jumps, remaining_jumps = queue.popleft() if (x, y) == (tx, ty): return \\"YES\\" for nx, ny in neighbors(x, y): if (nx, ny, jumps + 1) not in visited: visited.add((nx, ny, jumps + 1)) queue.append((nx, ny, jumps + 1, remaining_jumps - 1)) return \\"NO\\""},{"question":"In a certain town, there\'s an annual Event Planner\'s competition where planners have to organize events based on given resources and constraints. This year, the competition involves a scenario where planners need to allocate rooms for a series of events. Each event has a specific starting and ending time, and the planners must make sure that no two events overlap in the same room. You are given a list of events with their starting and ending times, and you need to determine the minimum number of rooms required to host all the events without any overlaps. Each event is represented by a start time and an end time, both given as integers. Note that the events are closed intervals, meaning that an event ending at time t and another event starting at time t do not overlap. Input format: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of events. - The next n lines contain two integers each, start_i and end_i (1 ≤ start_i < end_i ≤ 10^6), representing the start and end times of each event. Output format: - Print a single integer — the minimum number of rooms required to host all the events without overlap. Example: Input: 5 1 4 2 5 9 12 5 9 5 12 Output: 2 In the given example, one optimal way to allocate the events is: - Room 1: (1, 4), (5, 9) - Room 2: (2, 5), (9, 12), (5, 12)","solution":"def minMeetingRooms(intervals): Finds the minimum number of rooms required to host all events without overlap. :param intervals: List of tuples, where each tuple has two integers representing start and end time of an event. :return: Integer, minimum number of rooms required. if not intervals: return 0 # Separate out the start and end times. start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) start_ptr, end_ptr = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate over all the events. while start_ptr < len(start_times): # If there is an event that has started before the last checked event ended, # then allocate a new room. if start_times[start_ptr] < end_times[end_ptr]: used_rooms += 1 start_ptr += 1 else: # Otherwise, reuse an existing room. used_rooms -= 1 end_ptr += 1 # Keep track of the maximum number of rooms used. max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are given an integer array arr of length n consisting of positive integers. The task is to find all unique combinations of elements in the array that sum up to a target number s. Return the list of all unique combinations, where the same combination of integers cannot be counted more than once and can be presented in any order. Each element in the array can be used as many times as needed. The first line contains two integers n (1 leq n leq 20) and s (1 leq s leq 40). The second line contains n integers arr_i (1 leq arr_i leq 9). For example, given the target sum s = 7 and the array arr = [2, 3, 6, 7], the solution set is: ```[ [7], [2, 2, 3] ]``` Print the list of all unique combinations. If there are no combinations, return an empty list. If there are multiple answers, print any of them.","solution":"from typing import List def combinationSum(arr: List[int], s: int) -> List[List[int]]: result = [] arr.sort() def backtrack(remaining_sum, current_combination, start): if remaining_sum == 0: result.append(list(current_combination)) return for i in range(start, len(arr)): if arr[i] > remaining_sum: break current_combination.append(arr[i]) backtrack(remaining_sum - arr[i], current_combination, i) current_combination.pop() backtrack(s, [], 0) return result"},{"question":"Given a matrix of integers with dimensions n times m, your task is to find the largest submatrix (consecutive subarray) that can be rearranged to form a magic square. A magic square is a grid of distinct numbers in which the sums of the numbers in each row, each column, and both main diagonals are the same. The magic square does not necessarily need to use all the numbers in the submatrix. The first line of input contains two integers n and m (1 le n, m le 50) — the dimensions of the matrix. The following n lines contain m integers each, representing the matrix elements. Each element of the matrix is between -100 and 100 (inclusive). Output the size of the largest submatrix that can be rearranged to form a magic square. If no such submatrix exists, print 0. # Example **Input:** ``` 4 4 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 ``` **Output:** ``` 4 ``` **Explanation:** In the given example, the entire 4x4 matrix is already a magic square with a magic constant of 34. **Note:** 1. A submatrix is a rectangular section of the matrix that can be obtained by deleting some (possibly zero) rows and some (possibly zero) columns from the beginning or the end of the matrix. 2. A magic square cannot have duplicate numbers and must include each number only once.","solution":"def is_magic_square(grid, size): s = sum(grid[0]) # Check rows and columns for i in range(size): if sum(grid[i]) != s or sum(grid[j][i] for j in range(size)) != s: return False # Check diagonals if sum(grid[i][i] for i in range(size)) != s or sum(grid[i][size-i-1] for i in range(size)) != s: return False return True def largest_magic_square(matrix, n, m): max_size = min(n, m) for size in range(max_size, 1, -1): for i in range(n - size + 1): for j in range(m - size + 1): submatrix = [row[j:j+size] for row in matrix[i:i+size]] # Check if distinct flat_submatrix = [item for row in submatrix for item in row] if len(flat_submatrix) == len(set(flat_submatrix)): if is_magic_square(submatrix, size): return size return 0 def find_largest_magic_square(matrix): n = len(matrix) m = len(matrix[0]) if n > 0 else 0 return largest_magic_square(matrix, n, m)"},{"question":"Alice is a collector of rare stamps and she has a collection of stamps with distinct sizes (represented by integers). One day, she decided to arrange them in such a way that the absolute difference between the sizes of any two adjacent stamps in the arrangement is at least a given integer k. Given the array of stamp sizes and the integer k, Alice wonders in how many different ways she can rearrange the stamps to satisfy this condition. The first line contains an integer n (2 ≤ n ≤ 1000) – the number of stamps in Alice\'s collection. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the sizes of the stamps. The third line contains an integer k (1 ≤ k ≤ 1000) – the minimum absolute difference required between the sizes of any two adjacent stamps. Print the number of valid rearrangements modulo 10^9 + 7. If there are no such rearrangements, print 0. **Constraints:** - Each test case is independent. - It is guaranteed that the sizes of the stamps are distinct.","solution":"from itertools import permutations MOD = 10**9 + 7 def count_valid_rearrangements(n, stamps, k): Returns the number of valid rearrangements where the absolute difference between sizes of any two adjacent stamps is at least k, modulo 10^9 + 7. def is_valid_permutation(perm): for i in range(n - 1): if abs(perm[i] - perm[i + 1]) < k: return False return True valid_count = 0 for perm in permutations(stamps): if is_valid_permutation(perm): valid_count += 1 return valid_count % MOD"},{"question":"A merchant is planning to establish a chain of stores in a new city, and to ensure optimal placement, he decides to connect the stores in such a manner that any two stores can communicate directly or indirectly with each other. The merchant\'s city is structured as a grid with R rows and C columns of cells. Each cell of the grid represents a potential location for a store. The merchant wants to place exactly N stores in this grid (1 ≤ N ≤ R * C) such that the network of stores forms a connected component. A connected component means there is some way to move between any two stores directly or indirectly through adjacent (up, down, left, or right) stores. Your task is to help the merchant by designing a program that places N stores in the grid and ensures that they form a single connected component. Input: - The first line contains three integers R, C, and N (1 ≤ R, C ≤ 1000, 1 ≤ N ≤ R * C), the number of rows, columns, and stores to be placed, respectively. Output: - Output an R x C grid with \'S\' denoting a store and \'.\' denoting an empty cell. The grid should contain exactly N \'S\' characters and all \'S\' characters should form a connected component. Examples: Input: 4 5 8 Output: ..S.. ..SS. ...S. ...... Input: 3 3 5 Output: SS. .S. SS. Note: There could be multiple correct solutions. Any valid configuration of stores forming a single connected component is acceptable.","solution":"def place_stores(R, C, N): Places exactly N stores in the grid of size R x C ensuring that they form a connected component. Parameters: R (int): Number of rows in the grid. C (int): Number of columns in the grid. N (int): Number of stores to be placed. Returns: List[List[str]]: R x C grid with \'S\' denoting a store and \'.\' denoting empty space. # Initialize the grid with dots grid = [[\'.\' for _ in range(C)] for _ in range(R)] # Start placing stores from the top-left corner (0, 0) x, y = 0, 0 while N > 0: grid[x][y] = \'S\' N -= 1 # Decide the next cell to place a store in order to keep the component connected if x + 1 < R and (y == 0 or grid[x + 1][y - 1] == \'S\'): x += 1 elif y + 1 < C: y += 1 else: break return [\'\'.join(row) for row in grid] # Example Usage # R, C, N = 4, 5, 8 # result = place_stores(R, C, N) # for row in result: # print(row)"},{"question":"You are tasked with automating a parking system in a busy city. The system keeps track of a parking lot with a specific number of parking spaces and supports three types of operations: entry, exit, and query. Initially, all parking spaces are empty. Each car that enters is assigned the lowest numbered available space. If no spaces are available, the car is turned away. When a car leaves, its space becomes available for future use. Here\'s a description of the operations supported by the system: 1. `ENTER` car_id: A car with a unique identifier `car_id` attempts to enter the parking lot. If there is an available space, the car is assigned that space. If all spaces are occupied, the car is turned away. 2. `EXIT` car_id: The car with the specified `car_id` leaves its space, making that space available. 3. `QUERY` car_id: The system should return the parking space number currently occupied by the car with the specified `car_id`. If the car is not in the parking lot, return `-1`. Your task is to implement the parking system to handle these operations efficiently. Input Format - The first line contains two integers `n` and `q` (1 ≤ n ≤ 1000, 1 ≤ q ≤ 10000) denoting the number of parking spaces and the number of operations, respectively. - The next `q` lines contain the operations, each of which can be one of the following: - `ENTER car_id` where `car_id` is an integer (1 ≤ car_id ≤ 1000000). - `EXIT car_id` where `car_id` is an integer (1 ≤ car_id ≤ 1000000). - `QUERY car_id` where `car_id` is an integer (1 ≤ car_id ≤ 1000000). Output Format For each `QUERY` operation, output the parking space number occupied by the specified `car_id`. If the car is not in the parking lot, output `-1`. Example Input: ``` 5 6 ENTER 100 ENTER 200 QUERY 100 EXIT 100 QUERY 100 QUERY 300 ``` Output: ``` 1 -1 -1 ```","solution":"class ParkingSystem: def __init__(self, n): self.parking_spaces = [None] * n self.available_spaces = set(range(n)) self.car_parking = {} def enter(self, car_id): if not self.available_spaces: return space = min(self.available_spaces) self.parking_spaces[space] = car_id self.available_spaces.remove(space) self.car_parking[car_id] = space def exit(self, car_id): if car_id in self.car_parking: space = self.car_parking[car_id] self.parking_spaces[space] = None self.available_spaces.add(space) del self.car_parking[car_id] def query(self, car_id): return self.car_parking.get(car_id, -1)"},{"question":"You are given an integer n and a string s of length n consisting of lowercase English letters. In one operation, you can choose two adjacent characters in the string and: - If they are distinct, transform both into any one of the two characters. - If they are the same, transform both into any other lowercase English letter. Determine if it is possible to convert the string into having all identical characters using a finite number of operations. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 10^5) — the length of the string s. The second line of each test case contains the string s of length n consisting of lowercase English letters. It is guaranteed that the total length of all strings in one test case does not exceed 10^5. For each test case, print \\"YES\\" if it is possible to transform the string into having all identical characters using the given operations, otherwise print \\"NO\\". # Example Input ``` 3 3 aba 4 aabb 5 abcde ``` Output ``` YES YES NO ``` # Explanation In the first test case, you can transform \'a\', \'b\' into \'a\' and then \'a\', \'a\' into \'a\'. In the second test case, you can transform \'a\', \'a\' into \'b\' and then \'b\', \'b\' into \'b\'. In the third test case, it is impossible to transform all characters into the same character.","solution":"def can_transform_to_same_char(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] if len(set(s)) > 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Sample input reading function, usually to be used for testing def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) s = data[index + 1] test_cases.append((n, s)) index += 2 return t, test_cases # Sample output function to interface with the output environment def output_results(results): for result in results: print(result)"},{"question":"In a land far away, there is a thriving kingdom with n cities connected by m bi-directional roads. The kingdom\'s ruler wants to ensure that every pair of cities is connected, either directly or indirectly, by building some additional roads if necessary. The objective is to determine the minimum number of roads required to make the road network of the kingdom fully connected. Each road connects two cities and the cities are numbered from 1 to n. There may already be multiple roads between two cities or a road connecting a city to itself. You are given the list of existing roads. Your task is to compute the minimum number of additional roads needed to ensure that all cities in the kingdom are reachable from any other city. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10^5) denoting the number of cities and the number of existing roads, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a road between cities u and v. Output a single integer, the minimum number of additional roads needed to make the road network fully connected. Examples: Input: 5 3 1 2 2 3 4 5 Output: 1 Input: 4 2 1 2 3 4 Output: 1 Note: In the first example, cities 1, 2, and 3 are connected, and cities 4 and 5 are connected separately. To make the entire network connected, one additional road between any city from the first group (1, 2, 3) and any city from the second group (4, 5) is needed. In the second example, we need one additional road to connect city 2 to city 3 or city 1 to city 4, making all cities connected in a single network.","solution":"def min_additional_roads(n, m, roads): Calculates the minimum number of additional roads needed to make all cities fully connected. :param n: Number of cities :param m: Number of existing roads :param roads: List of tuples representing the roads :return: Minimum number of additional roads needed from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited, graph) components += 1 # The number of additional roads required return components - 1"},{"question":"You have been given two arrays `a` and `b` with lengths `n` and `m` respectively. Both arrays are non-decreasing. You need to merge these arrays into one non-decreasing array `c` with the length of `n + m`. Implement a function `merge_sorted_arrays(a: List[int], b: List[int]) -> List[int]` that merges the two input non-decreasing arrays and returns the resulting non-decreasing array. The function signature should be: ```python def merge_sorted_arrays(a: List[int], b: List[int]) -> List[int]: pass ``` # Example Input ``` a = [1, 3, 5] b = [2, 4, 6] ``` Output ``` [1, 2, 3, 4, 5, 6] ``` # Constraints - The length of array `a` (n) and the length of array `b` (m) are such that 1 ≤ n, m ≤ 10^5. - The elements of both arrays are such that -10^9 ≤ ai, bi ≤ 10^9.","solution":"from typing import List def merge_sorted_arrays(a: List[int], b: List[int]) -> List[int]: Merges two non-decreasing arrays into one non-decreasing array. c = [] i, j = 0, 0 n, m = len(a), len(b) while i < n and j < m: if a[i] < b[j]: c.append(a[i]) i += 1 else: c.append(b[j]) j += 1 # If there are remaining elements in a while i < n: c.append(a[i]) i += 1 # If there are remaining elements in b while j < m: c.append(b[j]) j += 1 return c"},{"question":"You are given a grid of size n times m (1 le n, m le 50) containing non-negative integers. The grid contains some blocked cells with a value of -1, which cannot be traversed. You need to find the number of distinct paths from the top-left cell (1,1) to the bottom-right cell (n, m) such that you only move right or down at each step. The first line of the input contains two integers n and m. The next n lines contain m integers each, representing the grid. Print the number of distinct paths. If there is no valid path, print 0. Note: The value of -1 represents a blocked cell which can\'t be part of any path. # Example Input ``` 3 3 0 0 0 0 -1 0 0 0 0 ``` Output ``` 2 ``` Input ``` 3 3 0 0 0 -1 -1 0 0 0 0 ``` Output ``` 1 ``` Input ``` 2 2 0 -1 -1 0 ``` Output ``` 0 ``` # Constraints * 1 le n, m le 50","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) # If the starting or ending cell is blocked, there is no valid path if grid[0][0] == -1 or grid[n-1][m-1] == -1: return 0 # Initialize dp table dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == -1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def get_input_and_solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[index])) index += 1 grid.append(row) print(unique_paths(grid))"},{"question":"The kingdom of Graphland has a capital city with n streets and m crossroads. The king wants to decorate the capital city by planting trees on the streets and putting street lamps at the crossroads. The decoration should follow these rules: 1. Each street must have exactly one tree. 2. Each crossroad must have at least one street lamp. 3. The total number of street lamps used should be minimized. Given the number of streets (n) and crossroads (m), two adjacent streets cannot have trees at the same point, and each crossroad must have street lamps to ensure it is well lit. Your task is to determine the minimum number of street lamps required to fulfill the king\'s requirement. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of streets and crossroads. Output a single integer — the minimum number of street lamps required to satisfy the king\'s decoration plans. Example: Input: 5 3 Output: 3 Explanation: On three crossroads, we can place 1 street lamp each for a total of 3 street lamps. Each of the 5 streets will have one tree.","solution":"def min_street_lamps(n, m): Given the number of streets (n) and crossroads (m), determine the minimum number of street lamps required to fulfill the king\'s decoration plans. # Since each crossroad must have at least one street lamp and we need to minimize the # number of lamps, we can place one lamp at each crossroad. return m"},{"question":"You are a city planner tasked with designing a new city grid. The city will consist of n rows and m columns, and each cell in the grid will have a certain height. The city council has demanded that you create an optimal path through the city from the top-left corner at (1, 1) to the bottom-right corner at (n, m). The path can only move right or down at each step. You need to ensure that the difference in height between any two consecutive cells in the path is minimized. Specifically, you are to minimize the maximum difference in height between any two consecutive cells along the path. The input consists of: - The first line containing two integers, n and m (1 le n, m le 500), the dimensions of the grid. - The next n lines each containing m integers, where the j-th integer in the i-th row denotes the height of the cell at (i, j) (0 le text{height} le 10^6). Output a single integer, the minimal possible value for the maximum difference in height between any two consecutive cells along the path from the top-left corner to the bottom-right corner. **Example:** Input: ``` 3 3 1 2 2 2 3 3 3 3 4 ``` Output: ``` 1 ``` Explanation: The optimal path here is (1,1) rightarrow (1,2) rightarrow (1,3) rightarrow (2,3) rightarrow (3,3). The heights in this path are [1, 2, 2, 3, 4], and the differences are [1, 0, 1, 1]. The maximum difference in this path is 1, which is the minimal possible value.","solution":"from heapq import heappop, heappush import sys def minimal_max_diff(n, m, grid): # Directions to move: right and down directions = [(0, 1), (1, 0)] # Priority queue to store (max_diff, x, y) pq = [(0, 0, 0)] # Track the minimum maximum difference to reach each cell dist = [[sys.maxsize] * m for _ in range(n)] dist[0][0] = 0 while pq: max_diff, x, y = heappop(pq) if x == n - 1 and y == m - 1: return max_diff for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: curr_diff = abs(grid[nx][ny] - grid[x][y]) new_max_diff = max(max_diff, curr_diff) if new_max_diff < dist[nx][ny]: dist[nx][ny] = new_max_diff heappush(pq, (new_max_diff, nx, ny)) return -1"},{"question":"Mila, a linguist, is studying the unique languages of a distant island where the inhabitants use a peculiar representation of communication strings. These strings are composed of a fixed set of consonants and vowels. Mila wants to find out how many distinct communication strings can be formed using a specific structure where vowels and consonants alternate, starting with a consonant. Given the total number of different consonants, `c`, and vowels, `v`, help Mila by writing a program that calculates the number of valid alternating communication strings of a given length `l`. For example, if `c = 3`, `v = 2`, and `l = 4`, a valid string of length 4 following the alternating structure could be \\"CVCV\\", \\"BCBC\\", etc. # Input: - The first line contains three integers `c`, `v`, and `l` (1 leq c, v leq 26, 1 leq l leq 100) representing the number of distinct consonants, vowels, and the length of the communication string, respectively. # Output: - Print one integer, the number of distinct alternating communication strings of length `l` modulo `10^9 + 7`. # Example: Input: ```plaintext 3 2 4 ``` Output: ```plaintext 36 ``` Explanation: - For `c = 3` (Consonants: Let’s use C, B, D) and `v = 2` (Vowels: A, E), and length `l = 4`, possible strings of length 4 are \\"CVCV\\", \\"BCBC\\", \\"DADA\\", etc. - The total number of such strings is calculated considering the alternating pattern starting with consonants. Note: Strings that do not start or adhere to the pattern (starting with a consonant and then alternating with a vowel) are not counted.","solution":"def count_alternating_strings(c, v, l): MOD = 10**9 + 7 if l % 2 == 0: num_strings = pow(c * v, l // 2, MOD) else: num_strings = (c * pow(c * v, l // 2, MOD)) % MOD return num_strings"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight representing the cost to travel between its two endpoints. Your task is to find the minimum cost to visit all vertices exactly once and return to the starting vertex, which is well known as the Traveling Salesman Problem (TSP). However, the graph in this problem is complete, and the edges\' weights are either 1 or 2. Due to the simplicity of the edge weights, you can apply an optimized approach to solve this problem. The first line of input contains one integer t (1 leq t leq 10) — the number of test cases. Each test case consists of the following: - The first line contains two integers n (2 leq n leq 18) and m (n-1 leq m leq frac{n(n-1)}{2}) — the number of vertices and the number of edges in the graph. - Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 2) representing an edge between vertices u and v with weight w. For each test case, output the minimum cost to complete the tour, or -1 if it is not possible to visit all vertices exactly once and return to the starting vertex. # Example Input ``` 2 4 5 1 2 1 2 3 2 3 4 2 4 1 1 1 3 2 3 3 1 2 1 2 3 2 3 1 1 ``` Output ``` 6 4 ``` # Explanation - **Test case 1:** One possible tour for the graph is 1 -> 2 -> 3 -> 4 -> 1 with a cost of 1 + 2 + 2 + 1 = 6. - **Test case 2:** One possible tour for the graph is 1 -> 2 -> 3 -> 1 with a cost of 1 + 2 + 1 = 4.","solution":"import itertools def tsp(n, edges): # Initialize adjacency matrix with large values inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] # Fill the adjacency matrix with given edges for u, v, w in edges: dist[u-1][v-1] = w dist[v-1][u-1] = w # Use dynamic programming to find the shortest Hamiltonian cycle # dp[mask][i] will store the minimum cost to visit the subset represented by mask, ending at node i dp = [[inf] * n for _ in range(1 << n)] dp[1][0] = 0 # Starting point for mask in range(1 << n): for i in range(n): if mask & (1 << i): for j in range(n): if mask & (1 << j) == 0: new_mask = mask | (1 << j) dp[new_mask][j] = min(dp[new_mask][j], dp[mask][i] + dist[i][j]) # The answer will be the minimum cost to visit all nodes, ending at the start node (0) result = inf for i in range(1, n): result = min(result, dp[(1 << n) - 1][i] + dist[i][0]) return result if result != inf else -1 def solve_tsp(test_cases): results = [] for n, m, edges in test_cases: result = tsp(n, edges) results.append(result) return results"},{"question":"Alice loves exploring mazes. She recently found a rectangular maze with n rows and m columns represented as a grid. The maze contains the following characters: - \'.\' representing an open path. - \'#\' representing a wall. - \'S\' representing the start position. - \'E\' representing the end position. Alice can move up, down, left, or right from any open path cell to another open path cell. However, Alice can only move to a position with a maximum of k steps. Alice wants to know if there is a way to reach the end position \'E\' from the start position \'S\' using no more than k steps. If multiple paths exist, she only needs to find one valid path. The input consists of: - The first line containing three integers, n, m, and k (1 ≤ n, m ≤ 50; 1 ≤ k ≤ 2500) — the number of rows, columns, and the maximum number of steps Alice can take. - The next n lines, each containing m characters, representing the maze grid. The output should be: - \\"YES\\" if Alice can reach \'E\' from \'S\' within k steps. - \\"NO\\" if it\'s not possible. Example: Input: ``` 4 5 6 ..... .#S#. .#.#. E.... ``` Output: ``` YES ```","solution":"def can_reach_end(n, m, k, maze): from collections import deque def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] != \'#\' # Locate start and end positions start, end = None, None for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) if not start or not end: return \\"NO\\" # BFS initialization queue = deque([(start[0], start[1], 0)]) # (x, y, current_steps) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() if steps > k: continue if (x, y) == end and steps <= k: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return \\"NO\\""},{"question":"A research team is analyzing a sequence of numbers using a sliding window technique to detect certain patterns of interest. They need a function that finds the maximum value in each sliding window of size k from the given array of integers. **Input:** The first line contains an integer n (1 ≤ n ≤ 2×10^5) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer k (1 ≤ k ≤ n) — the size of the sliding window. **Output:** Output a single line containing n - k + 1 space-separated integers — the maximum values of each sliding window of size k. **Example:** Input: ``` 8 1 3 -1 -3 5 3 6 7 3 ``` Output: ``` 3 3 5 5 6 7 ``` Explanation: - The maximum values in each sliding window of size 3 are: [3, 3, 5, 5, 6, 7]. - These correspond to the windows: [1, 3, -1], [3, -1, -3], [-1, -3, 5], [-3, 5, 3], [5, 3, 6], and [3, 6, 7].","solution":"from collections import deque def max_sliding_window(nums, k): Returns the maximum values in each sliding window of size k in the given array. Args: nums: List of integers, the array of numbers. k: Integer, size of the sliding window. Returns: List of integers, maximum values in each sliding window. n = len(nums) if n == 0 or k == 0: return [] if k == 1: return nums q = deque() result = [] for i in range(n): # Remove indices that are out of the current window while q and q[0] < i - k + 1: q.popleft() # Remove indices whose corresponding values are less than nums[i] while q and nums[q[-1]] < nums[i]: q.pop() q.append(i) # Starting from i = k - 1, we can add to the result list if i >= k - 1: result.append(nums[q[0]]) return result # Example code to run the function n = 8 nums = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 print(max_sliding_window(nums, k)) # Output should be [3, 3, 5, 5, 6, 7]"},{"question":"A magical mirror can alter elements of an array in a special manner. Given an array of integers and an integer k, you want to apply the mirror\'s magic to the array. By applying magic, you can select a subarray of length exactly k and reverse it. Your goal is to determine the lexicographically smallest array possible after applying the magic operation exactly once. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the length of the array and the length of the subarray to be reversed, respectively. The second line of the input contains n integers a_1, a_2, ..., a_n (-100 ≤ a_i ≤ 100) — the elements of the array. Print the lexicographically smallest array achievable by reversing exactly one subarray of length k. # Example **Input:** ``` 5 3 3 2 1 5 4 ``` **Output:** ``` 1 2 3 5 4 ``` **Explanation:** By reversing the subarray from index 1 to index 3 (the subarray is [3, 2, 1]), we get the lexicographically smallest array [1, 2, 3, 5, 4].","solution":"def lexicographically_smallest_array(n, k, array): smallest_array = array[:] for i in range(n - k + 1): potential_array = array[:i] + array[i:i+k][::-1] + array[i+k:] if potential_array < smallest_array: smallest_array = potential_array return smallest_array # Function to convert the array to formatted string for printing def to_output_format(array): return \' \'.join(map(str, array))"},{"question":"You are given a binary string s of length n. Let\'s define its **balance factor** as the difference between the number of ones and the number of zeros in the string. Let\'s say we can \\"flip\\" any contiguous subsegment of the string any number of times. Flipping changes all bits in the subsegment (ones to zeros and zeros to ones). Determine the maximum possible balance factor of the binary string you can achieve by performing any number of such flips. The first line contains a single integer n (1 leq n leq 10^5), the length of the binary string. The second line contains a binary string s of length n. Output a single integer — the maximum possible balance factor after any number of flips. **Example 1:** Input: ``` 5 11010 ``` Output: ``` 3 ``` **Example 2:** Input: ``` 3 000 ``` Output: ``` 3 ``` **Example 3:** Input: ``` 6 111111 ``` Output: ``` 6 ``` **Explanation:** 1. In the first example, we can flip the third and fourth bits to turn `11010` into `11101`, which then has a balance factor of 3 - 0 = 3. 2. In the second example, flipping the entire string `000` to `111` gives us a balance factor of 3 - 0 = 3, which is the maximum. 3. In the third example, no flip is needed because the balance factor is already at its maximum, which is 6.","solution":"def max_balance_factor(n, s): Calculate the maximum possible balance factor of the binary string after any number of flips. :param n: Length of the binary string :param s: The binary string :return: The maximum possible balance factor # Initial balance factor is the number of ones minus the number of zeros initial_balance = s.count(\'1\') - s.count(\'0\') # To find the maximum possible balance after flipping any contiguous subsegment, # we need to flip such that the count of zeros becomes the count of ones and vice versa. # Hence the maximum balance we can achieve is maximum(n - count of ones, n - count of zeros) num_ones = s.count(\'1\') num_zeros = s.count(\'0\') return max(num_ones, num_zeros) # Example Usage # n = 5 # s = \\"11010\\" # print(max_balance_factor(n, s)) # Output: 3"},{"question":"Olga is organizing a company trip for her team. She wants to choose a set of consecutive days within a given period when the total happiness level of the team will be maximized. Each day within the period has a happiness level that can be positive or negative. To help her decide the best days for the trip, she asks you to write a program that identifies the maximum sum of happiness levels over any consecutive subarray of days. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of days in the period. The second line contains n integers separated by spaces — the happiness levels of each day in the given period. The happiness levels can be negative, zero, or positive, and each value does not exceed 10⁶ in absolute value. Print a single integer — the maximum possible sum of happiness levels over any consecutive subarray of days. For example, in the first sample if the happiness levels are [1, -2, 3, 5, -1], the best trip period is days 3 and 4 with a total happiness level sum of 8. In the second sample with happiness levels [-1, -2, -3, -4], the best trip period is the first day with a total happiness level sum of -1.","solution":"def max_happiness(n, happiness_levels): Returns the maximum possible sum of happiness levels over any consecutive subarray of the given period. :param n: An integer, the number of days. :param happiness_levels: A list of integers representing happiness levels of each day. :return: An integer, maximum possible sum of happiness levels over any consecutive subarray. # Initialize current and global maximums max_current = max_global = happiness_levels[0] # Iterate through the happiness levels starting from the second element for i in range(1, n): max_current = max(happiness_levels[i], max_current + happiness_levels[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"A scientist is conducting an experiment that involves some physical quantities. For the purpose of recording the data, the scientist has a sequence of n data points, each represented by a pair of integers (ai, bi). The scientist wants to ensure the record is easy to analyze, so they decide to add a new quantity c to each of the data points by summing up adjacent points and storing it as the third quantity. Specifically, for each pair of adjacent data points (ai, bi) and (ai+1, bi+1), the third quantity ci is calculated as: ``` ci = (ai + ai+1, bi + bi+1) ``` Given a sequence of n (3 ≤ n ≤ 10^5) data points, compute all ci values for i from 1 to n-1. Input: - The first line contains an integer n, the number of data points. - Next n lines each contain two integers ai and bi, the coordinates of the ith data point. Output: - Output n-1 lines, each containing two integers ci. # Example Input: ``` 3 1 2 3 4 5 6 ``` Output: ``` 4 6 8 10 ``` Explanation: For the input, we calculate c1 = (1+3, 2+4) = (4, 6) and c2 = (3+5, 4+6) = (8, 10).","solution":"def compute_c_values(data_points): Given a list of n tuples where each tuple contains two integers (ai, bi), computes a list of (n-1) tuples where each tuple is the sum of adjacent points. ci_values = [] for i in range(len(data_points) - 1): a1, b1 = data_points[i] a2, b2 = data_points[i+1] ci_values.append((a1 + a2, b1 + b2)) return ci_values"},{"question":"You are given n sequences, each consisting of m integers. Your task is to determine whether it\'s possible to rearrange the integers within each sequence such that after rearranging, for every column (i) all the integers in that column form a strictly increasing sequence from top to bottom. In other words, after the rearrangement, for every column (1 leq j leq m), the following condition should be satisfied: a_{1j} < a_{2j} < ldots < a_{nj}. Each test case consists of multiple sequences, and you need to determine if such a rearrangement is possible for each test case. The first line contains a single integer T (1 leq T leq 50) — the number of test cases. Each test case starts with two integers, n and m (1 leq n, m leq 50), representing the number of sequences and the number of integers in each sequence, respectively. The next n lines contain m integers each, representing the sequence elements. For each test case, print \\"YES\\" if it is possible to rearrange the sequence as described above, otherwise print \\"NO\\". # Example Input: ``` 2 3 3 1 2 3 3 6 5 7 4 8 3 3 3 3 3 3 3 3 3 3 3 ``` Output: ``` YES NO ``` In the first test case, one possible rearrangement is: ``` 1 2 3 3 4 5 7 6 8 ``` which forms strictly increasing sequences for each column (1, 2, 3), (3, 4, 5), and (7, 6, 8). In the second test case, it is impossible to rearrange the sequences to form strictly increasing columns, so the answer is \\"NO\\".","solution":"def can_rearrange_sequences(test_cases): results = [] for n, m, sequences in test_cases: # Sort each sequence (row), as sorting does not change the strictly increasing requirement per column. for i in range(n): sequences[i].sort() # For columns, check strictly increasing condition is_possible = True for j in range(m): for i in range(1, n): if sequences[i][j] <= sequences[i - 1][j]: is_possible = False break if not is_possible: break results.append(\\"YES\\" if is_possible else \\"NO\\") return results def parse_input(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, data[index].split()) index += 1 sequences = [] for _ in range(n): sequences.append(list(map(int, data[index].split()))) index += 1 test_cases.append((n, m, sequences)) return test_cases def main(input_data): test_cases = parse_input(input_data) return can_rearrange_sequences(test_cases)"},{"question":"Given an array of integers `nums` and an integer `k`, your task is to determine whether there exist two different indices `i` and `j` in the array such that `nums[i]` and `nums[j]` are the same and the absolute difference between `i` and `j` is at most `k`. The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5), where `n` is the length of the array. The second line contains `n` space-separated integers `nums1, nums2, ..., numsn` (−10^9 ≤ numsi ≤ 10^9). Output \\"true\\" if such indices exist, and \\"false\\" otherwise. **Example:** Input: ``` 6 3 1 2 3 1 2 3 ``` Output: ``` true ``` Input: ``` 6 2 1 2 3 1 2 3 ``` Output: ``` false ``` **Explanation:** In the first example, the elements are `1, 2, 3, 1, 2, 3`. There are two `1\'s, 2\'s,` and `3\'s`, and among them, the indices of the first `1`s have an absolute difference of `3`, which is equal to `k`. Hence the output is \\"true\\". In the second example, the elements are the same, but the index difference condition is violated since all the same elements occur more than 2 indices apart. Hence the output is \\"false\\".","solution":"def contains_nearby_duplicate(nums, k): Determines if there are two distinct indices i and j such that nums[i] == nums[j] and the absolute difference between i and j is at most k. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"The problem involves rotating elements of a matrix. Given a matrix of size n times n (1 <= n <= 1000), you need to rotate the elements of the matrix by 90 degrees clockwise. Each element in the matrix is an integer, and you need to output the new matrix after rotation. The first line of the input contains one integer n — the size of the matrix. The next n lines contain n integers each, representing the matrix. Output the rotated matrix. **Example:** **Input:** ``` 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 7 4 1 8 5 2 9 6 3 ``` When the matrix is rotated 90 degrees clockwise, the element at position (i, j) moves to position (j, n-i-1).","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n matrix by 90 degrees clockwise. :param matrix: List of lists, where each inner list represents a row of the matrix. :return: The rotated matrix as a list of lists. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Zahra is a passionate gardener who loves to organize her plants in a specific manner. She has recently decided to arrange her potted plants in one line, using certain rules. Zahra has two types of plants: roses and tulips, and each plant has a height. She wants to alternately place the plants in the line, starting with a rose, then a tulip, and repeating this pattern. However, Zahra has some flexibility; she can skip placing a plant without replacing it, but she cannot break the alternation pattern if both types of plants are available. Given the list of plants with their types and heights, your task is to help Zahra create the longest possible line of plants that follows her desired pattern. If there are multiple ways to arrange them, any valid arrangement is acceptable. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the total number of plants. The next n lines each contain two space-separated items: a string t (either \\"rose\\" or \\"tulip\\") and an integer h (1 ≤ h ≤ 10^9), representing the type and height of the plant respectively. Output the longest possible sequence of plants using Zahra\'s arrangement following the alternating pattern. For each plant in the sequence, output its type followed by its height. Boundary conditions: - If there are no plants of either type, the output should be an empty sequence. - If it\'s not possible to alternate plants starting with a rose, output an empty sequence. Examples: Input: 6 rose 5 tulip 3 rose 2 tulip 10 rose 1 tulip 4 Output: rose 5 tulip 3 rose 2 tulip 10 rose 1 tulip 4 Input: 5 tulip 6 tulip 5 rose 8 tulip 2 tulip 9 Output: rose 8 tulip 6","solution":"def arrange_plants(n, plants): Arrange the plants in one line in an alternating pattern starting with a rose. :param n: An integer representing the number of plants. :param plants: A list of tuples where each tuple contains a string (\\"rose\\" or \\"tulip\\") and an integer (height of the plant). :return: A list of tuples arranged in the desired pattern. roses = [plant for plant in plants if plant[0] == \\"rose\\"] tulips = [plant for plant in plants if plant[0] == \\"tulip\\"] if not roses or not tulips: return [] arranged = [] while roses and tulips: arranged.append(roses.pop(0)) arranged.append(tulips.pop(0)) return arranged"},{"question":"Pedro loves prime numbers. He decided to perform a unique experiment where he creates arrays of prime numbers and manipulates them to observe patterns. He starts with an array of prime numbers of length k and performs a series of operations to transform this initial array. The transformation rules are as follows: 1. Select any two prime numbers from the array and replace them with their sum. 2. Repeat the previous step until there is exactly one number left in the array. For example, if the initial array is [2, 3, 5], Pedro can: - Sum 2 and 3 to get 5, resulting in the array [5, 5] - Sum the two 5s to get 10, resulting in the array [10] After transforming the array, Pedro is interested in finding out: - The number of distinct results he can obtain by performing the above operations. Given an initial array of prime numbers, help Pedro determine how many distinct results he can obtain. The first line contains an integer k (1 ≤ k ≤ 10) - the length of the initial array. The second line contains k prime numbers separated by spaces (each prime number is less than 100). Print a single integer - the number of distinct results that can be obtained after performing the transformations. Examples: Input 1: ``` 3 2 3 5 ``` Output 1: ``` 1 ``` Input 2: ``` 4 2 3 5 7 ``` Output 2: ``` 3 ``` Explanation: In the first example, there is only one way to sum the numbers to get 10 eventually. In the second example, the possible distinct results from the sums are 17, 19, and 29.","solution":"def distinct_prime_transformations(k, primes): Returns the number of distinct results obtained after transforming the initial array of primes. Since any series of operations results in the cumulative sum of the primes, there is only one unique result. return 1 # A function to parse input and execute the distinct_prime_transformations function def main(): import sys input = sys.stdin.read data = input().split() k = int(data[0]) primes = list(map(int, data[1:1+k])) print(distinct_prime_transformations(k, primes)) if __name__ == \\"__main__\\": main()"},{"question":"Given an undirected graph represented as an adjacency list, determine if the graph is bipartite. A graph is bipartite if you can divide the set of its nodes into two independent subsets such that there are no two vertices within the same set that are adjacent. # Input: - The first line contains two integers n and m (1 le n, m le 10^5), the number of vertices and the number of edges in the graph. - The following m lines contain two integers each u and v (1 le u, v le n), representing that there is an undirected edge between vertex u and vertex v. # Output: - Output \\"YES\\" if the graph is bipartite, otherwise, output \\"NO\\". # Example: Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` YES ``` Input: ``` 3 3 1 2 2 3 3 1 ``` Output: ``` NO ``` # Note: In the first example, one possible division of the vertices into two sets is {1, 3} and {2, 4}. The edges connect vertices from different sets, satisfying the condition for a bipartite graph. In the second example, it\'s impossible to divide the vertices into two sets such that no two vertices within the same set are adjacent. Hence, the graph is not bipartite.","solution":"def is_bipartite(n, m, edges): from collections import deque def bfs(start): queue = deque([start]) colors[start] = 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) colors = [-1] * (n + 1) for i in range(1, n + 1): if colors[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"You have been hired as a software developer at WidgetCorp, where your job is to manage a conveyor belt system that handles widget processing. Each widget has a unique identifier and a processing time—in seconds—that it takes to complete all required operations on the widget. Your task is to write a program that processes a series of operations on widgets, ensuring that each widget is processed according to its specified time. The conveyor belt can handle multiple widgets; however, it processes them one at a time in the order they arrive. Your program should be able to handle the following types of queries: 1. Add a new widget to the conveyor belt with a specified identifier and processing time. 2. Process the next widget in line (i.e., the one that arrived first). 3. Return the processing time of a widget given its identifier (if it has already been processed). 4. Return the average processing time of all widgets that have been processed so far. The input will consist of several lines. The first line contains an integer q (1 leq q leq 10^5), the number of queries. Each of the following q lines represents a query in one of the following formats: - `1 id p`: Add a new widget with identifier `id` and processing time `p` (1 ≤ p ≤ 86400). - `2`: Process the next widget in line. - `3 id`: Return the processing time of the widget with identifier `id`. - `4`: Return the average processing time of all processed widgets, rounded to the nearest integer. For each query of type `2`, `3`, and `4`, print the result on a new line. Example: ``` Input: 8 1 1001 30 1 1002 20 2 1 1003 5 2 3 1001 4 2 Output: 30 30 25 5 ``` Explanation of the example: 1. The first widget (id: 1001, time: 30) is added to the conveyor. 2. The second widget (id: 1002, time: 20) is added. 3. The next widget in line (id: 1001) is processed (processing time 30). 4. The third widget (id: 1003, time: 5) is added. 5. The next widget in line (id: 1002) is processed (processing time 20). 6. The processing time of the widget with id: 1001 is queried (30). 7. The average processing time of processed widgets ([30, 20]) is queried (rounded from 25). 8. The next widget in line (id: 1003) is processed (processing time 5). Write a program to solve this problem.","solution":"from collections import deque class ConveyorBelt: def __init__(self): self.queue = deque() self.processed = {} self.total_process_time = 0.0 self.processed_count = 0 def add_widget(self, widget_id, process_time): self.queue.append((widget_id, process_time)) def process_next(self): if self.queue: widget_id, process_time = self.queue.popleft() self.processed[widget_id] = process_time self.total_process_time += process_time self.processed_count += 1 return process_time return None def get_processing_time(self, widget_id): return self.processed.get(widget_id) def get_average_processing_time(self): if self.processed_count == 0: return 0 return round(self.total_process_time / self.processed_count) def manage_conveyor_belt(queries): belt = ConveyorBelt() result = [] for query in queries: parts = query.split() if parts[0] == \'1\': widget_id = int(parts[1]) process_time = int(parts[2]) belt.add_widget(widget_id, process_time) elif parts[0] == \'2\': process_time = belt.process_next() if process_time is not None: result.append(process_time) elif parts[0] == \'3\': widget_id = int(parts[1]) process_time = belt.get_processing_time(widget_id) if process_time is not None: result.append(process_time) elif parts[0] == \'4\': average_time = belt.get_average_processing_time() result.append(average_time) return result"},{"question":"In a kingdom far away, there are n cities connected by m bidirectional roads. Each road has a known travel time, measured in hours. Citizens of this kingdom love to visit various cities, and the king has decreed that the Autobots govern the travel routes to ensure that every citizen can travel efficiently. The Autobots work tirelessly to ensure that the citizens can travel from any city to any other city with the minimum possible delay. Your task is to help the Autobots by finding the shortest travel time between pairs of cities. Specifically, for every pair (i, j) of cities, you need to compute the minimum travel time from city i to city j. The first line of the input contains two space-separated integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 2000) — the number of cities and the number of roads, respectively. Each of the next m lines contains three space-separated integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 100), indicating that there is a road between city u and city v with travel time t hours. There can be multiple roads between two cities, but you can assume that there will be no road that connects a city to itself. Output n lines; each of these lines should contain n space-separated integers. The j-th integer on the i-th line should be the minimum travel time from city i to city j. If there is no path from city i to city j, the travel time should be -1. Note that the travel time from a city to itself should always be 0. You need to calculate the travel times for all pairs of cities in the kingdom. Example input: ``` 4 6 1 2 4 1 3 2 2 3 3 3 4 1 2 4 6 1 4 7 ``` Example output: ``` 0 4 2 3 4 0 3 4 2 3 0 1 3 4 1 0 ``` In this example, the matrix shows that the shortest travel time between city 1 and city 4 is 3 hours via the cities 1 -> 3 -> 4.","solution":"def floyd_warshall(n, roads): # Initialize the distances with \\"infinity\\", and 0 for self loops dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Add each road to the distance table for u, v, t in roads: dist[u-1][v-1] = min(dist[u-1][v-1], t) dist[v-1][u-1] = min(dist[v-1][u-1], t) # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Convert \'inf\' to -1 to signify no path exists for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist"},{"question":"Elena is preparing for a marathon and plans her training such that every day she runs a certain distance. Being a meticulous planner, she records her running distances in a string where each character represents the distance she ran on that day. For example, the string \\"1234\\" means she ran 1 unit on the first day, 2 units on the second day, and so on. One day, Elena wonders how many subsequences of consecutive days have distances that form a palindrome (read the same backward as forward). For example, in the string \\"12321\\", the subsequences \\"1\\", \\"2\\", \\"3\\", \\"2\\", \\"1\\", \\"232\\", and \\"12321\\" are palindromes. Help Elena find the total number of palindromic subsequences of consecutive days she has in her recording of n days. The first line of input contains an integer n (1 ≤ n ≤ 105), the number of days. The second line contains a string of n digits, each between \'1\' and \'9\', representing the distances she ran on those days. Output the total number of palindromic subsequences of consecutive days. For example, for the input: 5 12321 The output should be: 7 Explanation: The palindromic subsequences are \\"1\\", \\"2\\", \\"3\\", \\"2\\", \\"1\\", \\"232\\", and \\"12321\\".","solution":"def count_palindromic_subsequences(s): Calculates the number of palindromic subsequences of consecutive days in the given string representing running distances. Args: s: str : A string where each character represents the distance ran on that day. Returns: int : Total number of palindromic subsequences of consecutive days. def is_palindrome(sub): return sub == sub[::-1] n = len(s) count = 0 for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"You are given a collection of photos, each photo can be tagged with a list of people\'s names who appear in it. You need to generate a list of unique people\'s names from all the photos. The first line of input contains an integer n (1 leq n leq 10^5), the number of photos. Each of the next n lines contains a space-separated list of names representing the people tagged in the photo. Each name consists of lowercase English letters and has a length of up to 50 characters. Output the list of unique people\'s names in alphabetical order. # Input Format The first line: an integer n — the number of photos. The next n lines: a space-separated list of names. # Output Format Print the unique list of people\'s names in alphabetical order, each name on a new line. # Example Input ``` 3 alice bob charlie bob david alice edward ``` Output ``` alice bob charlie david edward ```","solution":"def unique_names(n, photos): Returns a list of unique people\'s names from a list of photos, sorted in alphabetical order. Parameters: n (int): Number of photos photos (list): List of strings, each string is space-separated names in a photo Returns: list: List of unique names sorted alphabetically unique_people = set() for photo in photos: names = photo.split() for name in names: unique_people.add(name) sorted_unique_people = sorted(unique_people) return sorted_unique_people"},{"question":"An artist named Lisa is creating a digital mosaic from several colored tiles. Each tile is represented by a distinct lowercase alphabetic character. She wants to make sure that no two adjacent tiles in any direction (up, down, left, right) share the same color. To achieve this, she prepares an initially empty grid and wants to fill it following her rules. Given an initially empty grid of dimensions m times n, help Lisa fill the grid with tiles such that no two adjacent tiles in any direction have the same color, while minimizing the number of distinct colors used. Each grid cell should contain exactly one lowercase alphabetic character (a color). Your goal is to find a tiling pattern that adheres to Lisa’s rules using the smallest number of distinct colors possible. The first line contains two integers m and n (1 leq m, n leq 50) — the dimensions of the grid. If possible, output the minimum number of distinct colors used and the resulting grid configuration. If not, output \\"IMPOSSIBLE\\". The resulting grid should be m lines, each containing n lowercase alphabetic characters, such that no two adjacent cells have the same character. Example: Input: 2 3 Output: 2 aba bab Input: 3 3 Output: 2 aba bab aba","solution":"def fill_mosaic(m, n): if m == 0 or n == 0: return \\"IMPOSSIBLE\\" grid = [[\'\' for _ in range(n)] for _ in range(m)] colors = [\'a\', \'b\'] # We only need two colors for i in range(m): for j in range(n): grid[i][j] = colors[(i + j) % 2] return (2, [\\"\\".join(row) for row in grid]) # Example Outputs print(fill_mosaic(2, 3)) print(fill_mosaic(3, 3))"},{"question":"A delivery company has a fleet of drones that they use to deliver packages. Each drone has a maximum carrying capacity and can only carry one package at a time. Each package has a specified weight. The company needs to assign drones to deliver packages such that the delivery is completed in the least amount of rounds, where each round consists of the drones each delivering one package. You are given the number of packages, the weights of the packages, and the maximum capacity of each drone. Determine the minimum number of rounds required to deliver all the packages. The input consists of two integers n and k, followed by a list of n integers representing the weights of the packages. The integer k represents the maximum capacity of each drone. Input format: The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 10000) — the number of packages and the maximum capacity of each drone. The second line contains n integers w1, w2, ..., wn — the weights of the packages (1 ≤ wi ≤ 10000). Output format: Print a single integer representing the minimum number of rounds required to deliver all the packages. Example: ``` Input: 6 10 2 3 5 6 7 8 Output: 4 ``` Explanation: - In the first round, drones deliver packages of weight 8, 2. - In the second round, drones deliver packages of weight 7, 3. - In the third round, a drone delivers a package of weight 6. - In the fourth round, a drone delivers a package of weight 5.","solution":"def min_delivery_rounds(n, k, weights): Determines the minimum number of rounds required to deliver all packages. weights.sort(reverse=True) rounds = 0 i = 0 j = n - 1 while i <= j: if weights[i] + weights[j] <= k: # If the lightest and the heaviest package can be delivered together in one drone j -= 1 # The heaviest package will always be delivered in the current round i += 1 rounds += 1 return rounds"},{"question":"John is a computer science student and loves working with trees. He recently came across a problem that involves binary trees and path sums, and he needs your help to solve it. The problem is as follows: Given a binary tree where each node contains an integer value, find all root-to-leaf paths where each path\'s sum equals a given number `S`. A leaf is a node with no children. You are required to write a function that will take the root of a binary tree and an integer `S` as inputs. The function should return a list of all root-to-leaf paths where the sum of the values along the path equals `S`. Input: You need to consider the following input format: - A binary tree represented in level-order traversal where `None` represents the absence of a node. - An integer `S` specifying the desired path sum. Output: Your function should print the list of paths, and each path should be represented as a list of node values from root to leaf. Example: ``` Input: tree = [5, 4, 8, 11, None, 13, 4, 7, 2, None, None, 5, 1] S = 22 Output: [[5, 4, 11, 2], [5, 8, 4, 5]] ``` Explanation: The input binary tree can be visualized as: ``` 5 / 4 8 / / 11 13 4 / / 7 2 5 1 ``` There are two root-to-leaf paths that sum up to 22: 1. 5 -> 4 -> 11 -> 2 2. 5 -> 8 -> 4 -> 5 Function signature: ``` def find_paths(tree: List[Optional[int]], S: int) -> List[List[int]]: ```","solution":"from typing import List, Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes: List[Optional[int]]) -> Optional[TreeNode]: if not nodes: return None root = TreeNode(nodes[0]) queue = [root] i = 1 while i < len(nodes): current = queue.pop(0) if nodes[i] is not None: current.left = TreeNode(nodes[i]) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] is not None: current.right = TreeNode(nodes[i]) queue.append(current.right) i += 1 return root def find_paths(tree: List[Optional[int]], S: int) -> List[List[int]]: root = build_tree(tree) result = [] def dfs(node, current_path, current_sum): if not node: return current_path.append(node.val) current_sum += node.val if not node.left and not node.right and current_sum == S: result.append(list(current_path)) dfs(node.left, current_path, current_sum) dfs(node.right, current_path, current_sum) current_path.pop() dfs(root, [], 0) return result"},{"question":"A robot starts at the origin (0, 0) of a 2D grid and can move either up, down, left, or right. The movements are described in a string where each character corresponds to a movement: \'U\' means up, \'D\' means down, \'L\' means left, and \'R\' means right. Given a string of moves, determine if the robot returns to the origin after performing all the moves. The first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the following t lines contains a string s (1 ≤ |s| ≤ 10^6), consisting only of characters \'U\', \'D\', \'L\', \'R\', which describes the robot\'s movements. It is guaranteed that the sum of |s| over all test cases doesn\'t exceed 10^6. For each test case, print \\"YES\\" if the robot returns to the origin after all moves, otherwise print \\"NO\\". You can print each letter in arbitrary case (small or large). For example: ``` Input: 3 UD LL UUDDLRLR Output: YES NO YES ```","solution":"def does_robot_return_to_origin(moves: str) -> str: Determines if the robot returns to the origin after performing all moves. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\" def robotic_journey(test_cases): results = [] for moves in test_cases: result = does_robot_return_to_origin(moves) results.append(result) return results # Example Usage: # test_cases = [\'UD\', \'LL\', \'UUDDLRLR\'] # print(robotic_journey(test_cases)) # Output: [\'YES\', \'NO\', \'YES\']"},{"question":"You are given an array of integers `arr` of length `n`. You can perform the following operation any number of times: select any two adjacent elements in the array and replace them with their sum. This operation reduces the length of the array by 1. You need to determine the maximum possible value of the last remaining element in the array after performing the operations optimally. The first line of the input contains an integer `n` (2 ≤ n ≤ 100000) — the length of the array `arr`. The second line contains `n` integers `arr1, arr2, ..., arrn` (1 ≤ arri ≤ 1000). Output a single integer — the maximum possible value of the last remaining element. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 15 ``` Explanation One of the optimal strategies to get the maximum possible value of the last remaining element is to always choose the two smallest adjacent elements to combine: 1. Combine 1 and 2 to get [3, 3, 4, 5] 2. Combine 3 and 3 to get [6, 4, 5] 3. Combine 4 and 5 to get [6, 9] 4. Combine 6 and 9 to get [15] Thus, the maximum possible value of the last remaining element is 15.","solution":"def max_last_element(arr): Returns the maximum possible value of the last remaining element in the array after performing the specified operations optimally. return sum(arr)"},{"question":"A tree is a connected acyclic undirected graph. The tree has n nodes, labeled from 1 to n, and n-1 edges. Each edge has a positive integer weight. Your job is to find two nodes u and v such that the distance between them is exactly d. The distance between u and v is defined as the sum of weights of the edges on the path between them. The first input line contains two integers, n (1 ≤ n ≤ 10^5) – the number of nodes, and d (1 ≤ d ≤ 10^9) – the desired distance. The following n-1 lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) – indicating an edge between node u and node v with weight w. If there are multiple pairs of nodes that satisfy the condition, print any one of them. If no such pair exists, print -1. Input: ``` 5 4 1 2 1 1 3 2 2 4 1 3 5 2 ``` Output (one possible): ``` 2 5 ``` In the given example, the distance between nodes 2 and 5 is 4: (2 -> 1 -> 3 -> 5) with weights 1+2+1 = 4. Other pairs that might satisfy the condition can also be an acceptable answer, or if no pairs satisfy the condition, the answer would be -1.","solution":"from collections import defaultdict, deque def find_nodes_with_distance(n, d, edges): def bfs(start): distance = [-1] * (n + 1) distance[start] = 0 q = deque([start]) while q: node = q.popleft() for neighbor, weight in graph[node]: if distance[neighbor] == -1: distance[neighbor] = distance[node] + weight q.append(neighbor) if distance[neighbor] == d: return neighbor return -1 # Construct the graph as an adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Perform BFS from node 1 to find a node at distance d result = bfs(1) if result == -1: return -1 else: return 1, result"},{"question":"Due to a busy schedule, a gardener has not trimmed the hedges in his garden for a long time. As a result, the heights of the hedges have become unequal. The gardener wants all hedges to be of the same height as the shortest hedge. The gardener can only use his trimmer to reduce the height of any hedge by exactly one unit per operation. Given the number of hedges n and the heights of the hedges h1, h2, ..., hn, determine the minimum number of operations required to ensure all hedges have the same height as the shortest hedge. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of hedges. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the initial heights of the hedges. Output a single integer — the minimum number of operations required. Example: Input: 3 4 7 2 Output: 7 Explanation: The shortest hedge is of height 2. - Reduce the 4th hedge by 2 units (2 operations). - Reduce the 7th hedge by 5 units (5 operations). Total operations required = 2 + 5 = 7.","solution":"def minimum_operations_to_trim_hedges(n, heights): Returns the minimum number of operations required to make all hedges the same height as the shortest hedge. Parameters: n (int): The number of hedges. heights (list of int): The heights of the hedges. Returns: int: The minimum number of operations required. shortest_height = min(heights) operations = 0 for height in heights: operations += height - shortest_height return operations"},{"question":"A robotic engineer is tasked with developing an algorithm to analyze the efficiency of a newly designed robotic arm. This robotic arm can move in a 2D grid and perform a set of predefined operations. Each operation is defined by a specific direction (up, down, left, or right) and a fixed number of steps. To measure the efficiency, you need to calculate the total distance covered by the robotic arm after executing a series of operations starting from the origin point (0, 0). The input consists of a single integer n (1 ≤ n ≤ 100), which denotes the number of operations, followed by n lines. Each line contains a character (U, D, L, or R) indicating the direction and an integer s (1 ≤ s ≤ 100) indicating the number of steps in that direction. Calculate the total Euclidean distance covered by the robotic arm after all operations are executed, rounded to two decimal places. # Input Format The first line contains a single integer n, the number of operations. The following n lines contain a character and an integer separated by a space: - A character: \'U\' (up), \'D\' (down), \'L\' (left), \'R\' (right) - An integer: the number of steps in that direction # Output Format Output a single float rounded to two decimal places representing the total Euclidean distance covered by the robotic arm. # Example Input ``` 4 U 3 R 4 D 2 L 1 ``` Output ``` 5.66 ``` # Explanation After executing the given operations: - The position of the robotic arm will be: (0, 3), (4, 3), (4, 1), (3, 1). - Total Euclidean distance covered is: √(4^2 + 3^2) + √(0^2 + 3^2) + √(0^2 + 2^2) + √(1^2 + 0^2) = 5.66 rounded to two decimal places.","solution":"import math def calculate_total_distance(n, operations): x, y = 0, 0 total_distance = 0.0 for direction, steps in operations: if direction == \'U\': new_y = y + steps total_distance += steps y = new_y elif direction == \'D\': new_y = y - steps total_distance += steps y = new_y elif direction == \'L\': new_x = x - steps total_distance += steps x = new_x elif direction == \'R\': new_x = x + steps total_distance += steps x = new_x total_distance = round(total_distance, 2) return total_distance"},{"question":"Sansa and Tyrion are playing a game with numbers. They start with an array of n non-negative integers. Sansa makes the first move, and then they take turns. In each move, a player removes any non-zero element from the array and splits it into two smaller non-zero integers that add up to the value of the removed element. The game ends when all elements in the array are zero. Sansa wins if there is at least one zero in the array at the end of her move. Tyrion wins if all elements in the array become zero at the end of his move. Given the initial array, determine who has a winning strategy. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n non-negative integers a_i (0 ≤ a_i ≤ 1,000,000) — the initial elements of the array. Print \\"Sansa\\" (without the quotes) if Sansa has a winning strategy, or \\"Tyrion\\" (without the quotes) if Tyrion has a winning strategy. For example, if the initial array is [2, 1], Sansa starts by splitting the element 2 into two 1s, then after her move the array becomes [1, 1, 1] and Tyrion can only reduce one of the 1s to zero. Therefore, Sansa wins. If the initial array is [3, 3], Sansa could split the first 3 into [1, 2, 3], and Tyrion could split 3 into [1, 2, 1, 2]. Every subsequent move will continue this pattern until Sansa is able to make a pair of zeros, leaving Tyrion without the ability to win. Therefore, Sansa wins in this case as well.","solution":"def game_winner(n, arr): Given the initial array, determine who has a winning strategy. :param n: An integer representing the number of elements in the array. :param arr: A list of integers representing the initial array elements. :return: \\"Sansa\\" if Sansa has a winning strategy, otherwise \\"Tyrion\\". # Count the number of zeroes in the array zero_count = arr.count(0) # If there is at least one zero in the array, Sansa wins if zero_count > 0: return \\"Sansa\\" # Calculate the sum of the elements in the array total_sum = sum(arr) # If the sum of the elements is even, Tyrion wins, else Sansa wins if total_sum % 2 == 0: return \\"Tyrion\\" else: return \\"Sansa\\""},{"question":"Alice and Bob are playing a game with a sequence of positive integers a1, a2, ..., an. They take turns, starting with Alice. On each turn, the player picks a number from the sequence, removes it, and replaces it with two numbers whose sum is equal to the removed number. The game continues until all numbers in the sequence are spent. However, there\'s a catch. If a player removes a number and replaces it with numbers that are not prime, they lose the game. A prime number is a number greater than 1 with no positive divisors other than 1 and itself. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of initial elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial sequence. Determine the winner of the game given optimal play from both players. **Input:** ``` 4 3 5 7 11 ``` **Output:** ``` Alice ``` Explanation: - Alice picks any prime number (say 3) and replaces it, which results in two numbers (1, 2), thus forcing non-prime numbers onto Bob\'s turn. Since 1 is not considered a prime, Bob loses on the next turn.","solution":"def is_prime(number): Returns True if the number is prime, otherwise False if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def determine_winner(seq): Determines the winner of the game given the initial sequence of numbers with optimal play. # Counting how many non-prime numbers there are non_prime_count = sum(not is_prime(num) for num in seq) # If there are any non-prime numbers initially, Alice wins as she starts first if non_prime_count > 0: return \\"Alice\\" # Otherwise, if all numbers are prime, Bob wins because Alice has to make a non-prime move return \\"Bob\\""}]'),Y={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},z={key:0,class:"empty-state"},F=["disabled"],R={key:0},P={key:1};function C(a,e,h,m,s,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",z,' No results found for "'+u(s.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[s.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,F)):l("",!0)])}const D=d(Y,[["render",C],["__scopeId","data-v-9fe18693"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/36.md","filePath":"deepseek/36.md"}'),L={name:"deepseek/36.md"},G=Object.assign(L,{setup(a){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{M as __pageData,G as default};
