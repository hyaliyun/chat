import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},I={class:"review"},T={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",q,[t("div",I,[t("div",T,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-cb6b4ef2"]]),A=JSON.parse('[{"question":"Alice is a passionate gardener and she is setting up a new garden. She has a rectangular garden bed of dimensions n x m, which is initially empty (no plants). She has decided to plant different types of flowers in the garden bed. Each type of flower can cover a specific area of 1xk where k denotes the length of the flower bed. Alice wants to make sure that each row in her garden bed is completely filled with flowers so that there are no empty spots in any row. Given the dimensions of the garden bed and the length for each type of flower bed available, determine if Alice can fill the garden bed completely with the available flower beds. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the dimensions of Alice\'s garden bed (number of rows and columns). The second line contains an integer k (1 ≤ k ≤ 50) — the length of each type of flower bed Alice has. Output Print \\"YES\\" if Alice can fill the garden bed completely using the flowers. Otherwise, print \\"NO\\". Examples Input 3 6 3 Output YES Input 4 7 2 Output NO Note In the first example, Alice can place two flower beds of length 3 in each row to fill the garden bed completely. In the second example, each row requires 7 units of length to be filled, but since the flower beds only have a length of 2, it cannot be filled completely with no empty spots.","solution":"def can_fill_garden(n, m, k): Determines if the garden bed of dimensions n x m can be completely filled with flowers of length k. if m % k == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice is a skilled chocolatier who creates special chocolate bars. One day, she decided to create chocolate bars in different shapes by breaking a large rectangular chocolate bar into smaller pieces. Each time she breaks a large bar, she makes a single straight cut that divides the bar into two smaller rectangles. She continues cutting until every piece is exactly a 1x1 square. Given the dimensions of the chocolate bar (width and height), determine the minimum number of cuts Alice needs to make to split the chocolate into 1x1 squares. Alice can make cuts either vertically or horizontally. Input The input consists of two integers width and height (1 ≤ width, height ≤ 106), representing the dimensions of the chocolate bar. Output Print a single integer: the minimum number of cuts needed to split the chocolate bar into 1x1 squares. Examples Input 2 3 Output 5 Input 4 4 Output 12 Input 5 7 Output 34 Note In the first example, Alice can make the following cuts: 1. First, she cuts vertically twice, resulting in three bars of size 1x3. 2. Then, she cuts each of the three bars horizontally twice, for a total of 6 pieces.","solution":"def minimum_cuts(width, height): Calculate the minimum number of cuts needed to split the rectangular chocolate bar into 1x1 squares. Parameters: width (int): The width of the chocolate bar. height (int): The height of the chocolate bar. Returns: int: The minimum number of cuts. return width * height - 1"},{"question":"You are given a sequence of integers b1, b2, ..., bN. Find the length of the longest subsequence where the difference between consecutive elements is the same. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line of each test case contains N space-separated integers b1, b2, ..., bN respectively. Output For each test case, output a single line containing a single integer - the length of the longest subsequence with consecutive elements having the same difference. Constraints 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 -10^6 ≤ bi ≤ 10^6 Example Input: 1 7 1 2 3 4 1 2 3 Output: 4 Explanation The longest subsequence with a constant difference is [1, 2, 3, 4] and its length is 4.","solution":"def longest_constant_difference_subsequence(T, cases): results = [] for case in cases: N, sequence = case if N == 1: results.append(1) continue max_len = 1 curr_len = 1 curr_diff = None for i in range(1, N): diff = sequence[i] - sequence[i-1] if diff == curr_diff: curr_len += 1 else: curr_diff = diff curr_len = 2 if curr_len > max_len: max_len = curr_len results.append(max_len) return results # Example input processing function def from_input_string(input_string: str): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) sequence = list(map(int, lines[idx + 1].split())) cases.append((N, sequence)) idx += 2 return T, cases # Example output processing function def to_output_string(output): return \\"n\\".join(map(str, output))"},{"question":"Given a matrix of integers where each cell contains either 0 or 1. A submatrix is a rectangular area of the matrix defined by selecting two rows and two columns. You need to determine the size of the largest square submatrix that contains only 1s. Constraints * 1 leq N, M leq 500 * The elements of the matrix are either 0 or 1. Input The first line contains two space-separated integers N and M, where N is the number of rows and M is the number of columns in the matrix. Each of the next N lines contains M space-separated integers (either 0 or 1), representing the elements of the matrix. Output Output a single integer, the size of the largest square submatrix that contains only 1s. Examples Input 3 4 1 1 0 1 1 1 1 1 1 1 1 0 Output 2 Input 2 2 1 0 0 1 Output 1","solution":"def largestSquareSubmatrix(matrix): Finds the size of the largest square submatrix that contains only 1s. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_square_len = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: dp[i][j] = 1 if i > 0 and j > 0: dp[i][j] += min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) max_square_len = max(max_square_len, dp[i][j]) return max_square_len"},{"question":"You are given a grid of size n x m, where each cell contains a lowercase letter. You need to determine the longest sequence of cells such that: 1. The cells are in a straight line (horizontal, vertical, or diagonal). 2. All cells in this sequence contain the same letter. Your task is to find the length of the longest such sequence of cells. # Input The input file consists of multiple lines. The first line contains two integers n and m — the number of rows and the number of columns in the grid (1 ≤ n, m ≤ 50). Each of the next n lines contains a string of length m representing the letters in each row of the grid. # Output Output one integer — the length of the longest sequence of cells that satisfy the conditions. # Examples Input ``` 4 5 aaaaa babba ccccd ecccd ``` Output ``` 5 ``` Input ``` 3 3 abc abc abc ``` Output ``` 3 ``` # Explanation In the first example, the longest sequence is the five \'a\'s in the first row. In the second example, one of the longest sequences is the three \'c\'s in the last column.","solution":"def longest_sequence(n, m, grid): def check_sequence(x, y, dx, dy): char = grid[x][y] length = 0 while 0 <= x < n and 0 <= y < m and grid[x][y] == char: x += dx y += dy length += 1 return length max_length = 0 directions = [(0, 1), (1, 0), (1, 1), (1, -1)] for i in range(n): for j in range(m): for dx, dy in directions: length = check_sequence(i, j, dx, dy) if length > max_length: max_length = length return max_length"},{"question":"The population of a new city is defined as a sequence of integers representing the number of people living in each house. The local government has identified unsafe houses that need to be demolished. Each house is either safe or unsafe, and the government aims to minimize the inconvenience to the residents by performing demolitions optimally. Given an array of integers where each element represents the population of a house, and a corresponding binary array where 0 indicates an unsafe house and 1 indicates a safe house, determine the maximum possible sum of the populations of the remaining safe houses after demolishing all unsafe houses. Write a function `maxSafePopulation` that takes in two lists of integers: `populations` and `safety`, and returns the maximum sum of populations of the safe houses. Constraints * 1 ≤ len(populations) = len(safety) ≤ 5 × 10^5 * 0 ≤ populations[i] ≤ 10^6 Input - First Line: An integer `n`, the number of houses in the city - Second Line: n space-separated integers representing `populations` - Third Line: n space-separated integers representing `safety` Output - Single integer representing the maximum sum of populations of the safe houses Examples Input 5 10 20 30 40 50 1 0 1 0 1 Output 90 Input 6 5 6 7 8 9 10 0 0 0 0 0 0 Output 0 Input 4 15 15 15 15 1 1 1 1 Output 60","solution":"def maxSafePopulation(populations, safety): Returns the maximum sum of populations of the safe houses. :param populations: List[int], list of integers representing the population of each house. :param safety: List[int], list of integers where 0 indicates an unsafe house and 1 indicates a safe house. :return: int, the maximum sum of populations of the safe houses. total_population_of_safe_houses = sum(population for population, is_safe in zip(populations, safety) if is_safe == 1) return total_population_of_safe_houses"},{"question":"In a faraway country, there is a magical island known as the Land of Patterns. The island is famous for its intricate sequences of colored tiles laid on its ground. The inhabitants of the island follow a peculiar rule to maintain the beauty of the pattern. They can perform one operation which involves choosing any tile and changing its color. You are given a sequence of tiles represented by lowercase English letters (\'a\' to \'z\'). You want to transform this sequence into a palindromic sequence. A sequence is palindromic if it reads the same backward as forward. To make the transformation beautiful, you need to minimize the number of operations needed. Help the inhabitants of the Land of Patterns by writing a function that calculates the minimum number of changes required to transform the given sequence into a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 10^{5}) — the length of the sequence. The second line contains a string of length n consisting of lowercase English letters. Output Output a single integer — the minimum number of operations required to make the sequence a palindrome. Examples Input 5 abcca Output 1 Input 7 racecar Output 0 Note In the first example, you can change the second tile \'b\' to \'c\' to make the sequence \\"accca\\", which is a palindrome. In the second example, the sequence \\"racecar\\" is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of changes required to transform the given sequence into a palindrome. Parameters: n (int): The length of the sequence. s (str): The sequence of tiles as a string. Returns: int: Minimum number of operations required to make the sequence a palindrome. count = 0 l, r = 0, n - 1 while l < r: if s[l] != s[r]: count += 1 l += 1 r -= 1 return count"},{"question":"Given a string S consisting of lowercase English letters, you need to determine the minimum number of operations required to make all the characters in the string the same. In one operation, you can choose any character from the string and change it to any other character. Write a function `min_operations(S: str) -> int` to find the minimum number of operations. # Input - A single string S (1 ≤ |S| ≤ 10^5) consisting of lowercase English letters. # Output - A single integer — the minimum number of operations required to make all characters in the string the same. # Example Input ``` aabb ``` Output ``` 2 ``` Explanation In the given example, you can change both \'a\'s to \'b\', making the string `bbbb` or change both \'b\'s to \'a\', making the string `aaaa`. Thus, the minimum number of operations required is 2. # Note For the given example, other possible ways could involve changing different characters, but all would result in a minimum of 2 operations. The goal is to determine this minimum efficiently. # Constraints Ensure efficient solutions as the length of the string can be up to 100,000 characters.","solution":"def min_operations(S: str) -> int: Determine the minimum number of operations required to make all characters in the string the same. from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # Find the character with the maximum frequency max_freq = max(char_count.values()) # The minimum number of operations is the total length of the string minus the maximum frequency return len(S) - max_freq"},{"question":"You are given a weighted directed graph with `n` nodes and `m` edges. Your task is to determine the shortest path from node 1 to node `n` under specific conditions. The graph contains some \\"special\\" edges which have a cost of `0` when traversed. There can be multiple paths between nodes, and not all edges are special. Input The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 2·10^5) — the number of nodes and the number of edges in the graph, respectively. Each of the next `m` lines describe an edge with three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^9) meaning there is a directed edge from node `u` to node `v` with weight `w`. Additionally, some of these edges may be special, with weight `0`. Output Print a single integer, the smallest distance from node `1` to node `n`. If there is no path from node `1` to node `n`, print `-1`. Examples Input 4 5 1 2 1 2 3 1 3 4 1 1 3 3 1 4 0 Output 0 Explanation In the example above, we can travel from node `1` to node `4` using the special edge with weight `0`. This path is direct and of length `0`. Input 5 6 1 2 1 1 3 1 2 4 2 3 4 2 4 5 3 1 5 10 Output 8 Explanation In this case, the shortest path from node `1` to node `5` can be calculated as follows: ``` 1 -> 3 -> 4 -> 5 (1 + 2 + 3 = 6). ``` This question involves understanding shortest-path algorithms, particularly Dijkstra\'s algorithm, given the graph might have varying edge weights including zero. Given the constraints, an efficient approach using a min-priority queue or other optimization techniques would be necessary.","solution":"import heapq def shortest_path(n, m, edges): Finds the shortest path in a weighted directed graph with the possibility of zero-weight edges. Parameters: n (int): The number of nodes in the graph. m (int): The number of edges in the graph. edges (list of tuples): Each tuple contains three integers u, v, and w representing a directed edge from u to v with weight w. Returns: int: The minimum distance from node 1 to node n. If no path exists, return -1. graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) # Dijkstra\'s algorithm pq = [(0, 1)] # (cost, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while pq: current_dist, u = heapq.heappop(pq) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"Given a list of integers, write a program to determine the smallest positive integer (greater than 0) that does not occur in the list. Input The first line contains an integer n (1 leq n leq 100000), the number of integers in the input list. The second line contains n space-separated integers a_1, a_2, ..., a_n (-1000000 leq a_i leq 1000000). Output Print a single integer that represents the smallest positive integer that does not appear in the list. Example Input 10 3 4 -1 1 6 2 7 5 8 -5 Output 9 Input 5 1 2 3 4 5 Output 6","solution":"def smallest_missing_positive(n, arr): Returns the smallest positive integer that does not occur in the list `arr`. present = [False] * (n + 1) for num in arr: if 1 <= num <= n: present[num] = True for i in range(1, n + 1): if not present[i]: return i return n + 1"},{"question":"You are given a box full of colored balls. Each ball is one of N distinct colors. The number of balls for each color is provided. Your task is to find the minimum number of moves needed to make all balls the same color. In each move, you can choose any ball and remove it from the box. Input The first line contains an integer N, the number of distinct colors (1 ≤ N ≤ 100). The second line contains N integers c_1, c_2, ..., c_N (1 ≤ c_i ≤ 10^6) where c_i represents the number of balls of the i-th color. Output Print a single integer, the minimum number of moves to make all balls the same color. Examples Input 3 1 2 3 Output 3 Input 4 5 5 5 5 Output 15 Note In the first example, you can remove 1 ball of color 3 and 2 balls of color 2 to be left with only color 1 balls, which requires 3 moves in total. In the second example, since all colors have the same number of balls, you need to remove all balls except one color, i.e., (4-1) * 5 = 15 moves.","solution":"def min_moves_to_same_color(n, colors): Determines the minimum number of moves needed to make all balls the same color. Parameters: n (int): Number of distinct colors. colors (list of int): List of ball counts for each color. Returns: int: Minimum number of moves. total_balls = sum(colors) max_color_count = max(colors) return total_balls - max_color_count"},{"question":"Write a function that takes a string as input and returns the longest palindrome that can be formed by deleting or reordering characters within the input string. Input The input is a single string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output Output a single string which is the longest possible palindrome that can be obtained from the given string. If there are multiple palindromes of the same maximum length, return any one of them. Examples Input `aabb` Output `abba` Input `racecar` Output `racecar` Input `abcdedcba` Output `abcdedcba` Input `abcde` Output `a`","solution":"def longest_palindrome(s): Returns the longest palindrome that can be formed by deleting or reordering characters within the input string. from collections import Counter count = Counter(s) left_half = [] middle = None for char, freq in count.items(): quotient, remainder = divmod(freq, 2) left_half.append(char * quotient) if remainder == 1: if middle is None or char > middle: middle = char left_half = \'\'.join(left_half) palindrome = left_half + (middle if middle else \'\') + left_half[::-1] return palindrome"},{"question":"You are given a forest with n trees, where each tree is a connected undirected acyclic graph with unique vertex labels, and isolated nodes are considered individual trees. The forest is represented as an array of n integers where the i-th integer ai (0 ≤ ai ≤ n) denotes the label of the parent of vertex i or -1 if the node is a root. Your task is to determine the number of root nodes in the forest. Input The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of vertices in the forest. The next line contains n integers a0, a1, ..., an-1 (0 ≤ ai ≤ n or ai = -1) — the parent array representation of the forest. Output Output a single integer — the number of root nodes in the forest. Examples Input 5 -1 0 0 -1 1 Output 2 Input 3 -1 -1 -1 Output 3 Note In the first sample, vertices 0 and 3 are root nodes, creating two trees: - Tree 1 with nodes 0, 1, and 4. - Tree 2 with node 3. In the second sample, every node is its own tree, thus there are 3 root nodes.","solution":"def count_root_nodes(n, parents): Counts root nodes in a forest represented by a parent array. Args: n : int : the number of vertices in the forest parents : List[int] : a list of integers where each element represents the parent of the vertex at that index Returns: int : the number of root nodes in the forest return sum(1 for parent in parents if parent == -1)"},{"question":"You are given an `n x n` grid where each cell contains either a `0` or a `1`. The grid represents a field of crops, where `0` indicates an unripe crop and `1` indicates a ripe crop. Every hour, all unripe crops (`0`s) that are adjacent (up, down, left, or right) to at least one ripe crop (`1`) will become ripe. You need to determine the minimum number of hours required until all the crops in the grid become ripe. If it\'s impossible for all the crops to become ripe, return -1. Input The first line contains integer `n` (1 ≤ n ≤ 1000), representing the size of the grid. Each of the next `n` lines contains `n` integers, each either `0` or `1`, representing the initial state of the grid. Output Output a single integer, the minimum number of hours required for all the crops to become ripe, or `-1` if it\'s impossible. Examples Input 3 1 0 0 0 1 0 0 0 0 Output 2 Input 2 1 1 1 0 Output 1 Note In the first example, the ripe crops at (0, 0) and (1, 1) will cause the crop at (0, 1) to become ripe in the first hour. In the next hour, the crops at (0, 2) and (1, 2) will become ripe due to their now-ripe neighbors. In the second example, the initially ripe crops will turn the crop at (1, 1) ripe in one hour.","solution":"from collections import deque def min_hours_to_ripe_all(grid): n = len(grid) if not grid: return -1 queue = deque() total_ripe = 0 # Initialize the queue with all ripe crops for i in range(n): for j in range(n): if grid[i][j] == 1: queue.append((i, j)) total_ripe += 1 if total_ripe == 0: # No initial ripe crop to start the process return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] hours = 0 while queue: size = len(queue) for _ in range(size): x, y = queue.popleft() for d in directions: new_x, new_y = x + d[0], y + d[1] if 0 <= new_x < n and 0 <= new_y < n and grid[new_x][new_y] == 0: grid[new_x][new_y] = 1 queue.append((new_x, new_y)) total_ripe += 1 if queue: hours += 1 for row in grid: if 0 in row: return -1 if total_ripe == n * n: return hours else: return -1"},{"question":"You are developing a file system for a new operating system. The file system supports the following operations: 1. **Create** - Initialize a new file system with a specified number of directories, where each directory is initially empty. 2. **Add File** - Add a file with a specified size to a directory. 3. **Remove File** - Remove a file from a directory. 4. **Directory Size** - Calculate the total size of all files in a specified directory. Implement a class `FileSystem` that supports these operations: * `__init__(self, num_directories: int)` - Initializes the file system with the specified number of directories. * `add_file(self, directory: int, file_size: int)` - Adds a file with the specified size to the given directory. * `remove_file(self, directory: int, file_size: int)` - Removes a file with the specified size from the given directory. It is guaranteed that the file with the given size exists in the directory. * `directory_size(self, directory: int) -> int` - Returns the total size of all the files in the specified directory. **Input** The input consists of multiple lines. The first line contains an integer `n` (1 ≤ n ≤ 100000) – the number of operations. Each of the following `n` lines contains one of the following operations: - \\"Create m\\" - Initializes a file system with `m` directories. - \\"AddFile d s\\" - Adds a file of size `s` to directory `d`. - \\"RemoveFile d s\\" - Removes a file of size `s` from directory `d`. - \\"DirectorySize d\\" - Outputs the total size of all files in directory `d`. **Output** For each \\"DirectorySize\\" operation, output an integer representing the total size of files in the specified directory. **Example** ``` Input 6 Create 3 AddFile 1 100 AddFile 1 200 DirectorySize 1 RemoveFile 1 100 DirectorySize 1 Output 300 200 ``` The provided `FileSystem` class should facilitate the correct handling of the operations as described.","solution":"class FileSystem: def __init__(self, num_directories: int): Initializes the file system with the specified number of directories. Each directory is initially empty. self.directories = [[] for _ in range(num_directories)] def add_file(self, directory: int, file_size: int): Adds a file with the specified size to the given directory. self.directories[directory].append(file_size) def remove_file(self, directory: int, file_size: int): Removes a file with the specified size from the given directory. It is guaranteed that the file with the given size exists in the directory. if file_size in self.directories[directory]: self.directories[directory].remove(file_size) def directory_size(self, directory: int) -> int: Returns the total size of all the files in the specified directory. return sum(self.directories[directory]) def process_operations(operations): file_system = None result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"Create\\": num_directories = int(parts[1]) file_system = FileSystem(num_directories) elif command == \\"AddFile\\": directory = int(parts[1]) file_size = int(parts[2]) file_system.add_file(directory, file_size) elif command == \\"RemoveFile\\": directory = int(parts[1]) file_size = int(parts[2]) file_system.remove_file(directory, file_size) elif command == \\"DirectorySize\\": directory = int(parts[1]) result.append(file_system.directory_size(directory)) return result"},{"question":"You are given an array of n integers. You can perform a specific operation at most k times on this array, and the objective is to maximize the sum of the array after performing the operations. The operation is defined as follows: 1. Choose a subarray (a continuous segment of the array). 2. Reverse this subarray. Your task is to determine the maximum possible sum of the array after performing the given operation at most k times. Input The first line contains two integers n and k (1 ≤ n ≤ 100,000, 0 ≤ k ≤ 5) — the number of elements in the array and the maximum number of operations you can perform, respectively. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Print a single integer — the maximum possible sum of the array after performing the operation at most k times. Examples Input 5 2 1 -2 3 -4 5 Output 15 Input 3 1 -1 2 -3 Output 2 Note In the first example, you can reverse the subarray starting from the second to the fourth elements [-2, 3, -4] to make the array [1, -4, 3, -2, 5]. Then reverse the subarray starting from the second to the third elements [-4, 3] to make the array [1, 3, -4, -2, 5]. The maximum sum of the resulting array is 1 + 3 - 4 - 2 + 5 = 3. On further reversal, you can make the array [1, 3, -2, -4, 5] with the sum 1 + 3 - 2 - 4 + 5 = 3, and if reversed again between positions 1 to 4, it can be [1, -2, 3, -4, 5] with the sum 1 - 2 + 3 - 4 + 5 = 3 etc. Hence the maximum sum is obtained after two reversals as [5, 1, -2, 3, 4] = 15 . In the second example, you can reverse the entire array to make the array [-3, 2, -1] with the sum -3 + 2 - 1 = -2. However, the maximum is achieved by no reversals i.e. sum = 2.","solution":"def maximize_array_sum(n, k, arr): Maximizes the sum of the array by reversing subarrays at most k times. Args: n (int): Number of elements in the array. k (int): Maximum number of operations allowed. arr (list): The initial array of integers. Returns: int: The maximum possible sum of the array after at most k operations. # The core idea here is that reversing an array always results in the same elements # and therefore the maximum possible sum is the sum of the non-negative elements. # As long as k > 0, we can always turn the array into its optimal form by # reversing arbitrary subarrays, since reversing an array does not change the sum # of its elements. # We only need to find the sum of positive elements. max_sum = sum(x for x in arr if x > 0) return max_sum if max_sum != 0 else max(arr)"},{"question":"You are given an array of integers, and you need to perform a series of operations to make all the elements of the array equal. In one operation, you can do one of the following: * Choose an index `i` (1 ≤ i < N) and set `a_i = a_{i+1}` * Choose an index `i` (1 ≤ i < N) and set `a_{i+1} = a_i` Determine the minimum number of operations required to make all elements of the array equal. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ a_i ≤ 10^9 Input Input is given from Standard Input in the following format: ``` N a_1 a_2 ... a_N ``` Output Print the minimum number of operations required to make all elements equal. Examples Input ``` 3 4 3 2 ``` Output ``` 2 ``` Input ``` 4 1 4 3 3 ``` Output ``` 3 ``` Input ``` 5 5 5 5 5 5 ``` Output ``` 0 ``` Input ``` 6 10 1 1 10 10 1 ``` Output ``` 6 ``` Note: In the examples above, the minimum number of operations needed to equalize all elements is shown. Each operation involves either setting an element to its adjacent element\'s value.","solution":"def min_operations_to_equal_elements(N, arr): Returns the minimum number of operations required to make all elements of the array equal. from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Find the element with the maximum frequency max_frequency = max(frequency.values()) # To make all elements equal to the most frequent element, we need to change all other elements # So the minimum number of operations required is N - max_frequency return N - max_frequency"},{"question":"Write a function that, given an m × n grid filled with integers representing building heights, finds the maximum amount of water that can be trapped after raining. Water can only be trapped if there are buildings on both the left and right side of a given cell that are taller than the cell itself. The function should return an integer representing the total units of water trapped. A valid solution needs to account for the boundaries of the grid where no water can be trapped. # Function Signature ```python def trapRainWater(heights: List[List[int]]) -> int: ``` # Example: ```python heights = [ [1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1] ] trapRainWater(heights) ``` Output: ``` 4 ``` Explanation: - The 1 on the second row and third column can trap 2 units of water. - The 2 on the second row and fourth column can trap 1 unit of water. - The 3rd row, 2nd column 3 can trap 1 unit of water. # Constraints: - The grid\'s dimensions m and n will be at most 200 x 200. - The building heights will be non-negative integers and at most 100,000.","solution":"from typing import List import heapq def trapRainWater(heights: List[List[int]]) -> int: if not heights or not heights[0]: return 0 m, n = len(heights), len(heights[0]) visited = [[False]*n for _ in range(m)] heap = [] # Push all the boundary cells into the heap and mark them as visited for i in range(m): for j in range(n): if i == 0 or j == 0 or i == m-1 or j == n-1: heapq.heappush(heap, (heights[i][j], i, j)) visited[i][j] = True water_trapped = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: water_trapped += max(0, height - heights[nx][ny]) heapq.heappush(heap, (max(height, heights[nx][ny]), nx, ny)) visited[nx][ny] = True return water_trapped"},{"question":"You are given an array of distinct integers A, consisting of n elements. Your task is to determine if it is possible to rearrange the elements of the array in such a way that all the following conditions are satisfied: 1. For any prime number p ≤ n, the sum of every p-th element is even. 2. For each prime number p ≤ n, every subarray of length p in the rearranged array contains at least one odd number. Input The first line contains an integer n (1 ≤ n ≤ 1000). The second line contains n distinct integers Ai (-10^6 ≤ Ai ≤ 10^6). Output If it is possible to rearrange the elements of the array to fulfill the given conditions, print \\"YES\\" (without the quotes) and print one of the possible resulting arrays on the second line. If it is not possible, print the single string \\"NO\\". Examples Input 4 1 2 3 4 Output YES 1 3 2 4 Input 5 2 4 6 8 10 Output NO Input 3 1 9 11 Output YES 1 11 9 Note In the first sample, the array [1, 3, 2, 4] meets all the criteria. The sums of the positions divisible by primes (2 and 3) are even. The subarray of length 2 and 3 both contain at least one odd number. In the second sample, it is impossible to rearrange the elements to meet the criteria because all elements are even and there won\'t be an odd number in any of the subarrays.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def rearrange_array(n, A): primes = [i for i in range(2, n + 1) if is_prime(i)] odd_count = sum(1 for x in A if x % 2 != 0) even_count = n - odd_count if odd_count == 0: return \\"NO\\" # Primes requirement: sum of p-th elements is even and each subarray of length p has at least one odd number rearranged = [] odd_numbers = [x for x in A if x % 2 != 0] even_numbers = [x for x in A if x % 2 == 0] if even_count > odd_count: rearranged = even_numbers[:odd_count] + odd_numbers + even_numbers[odd_count:] else: rearranged = odd_numbers[:even_count] + even_numbers + odd_numbers[even_count:] return \\"YES\\", rearranged # Example usage: # n = 4 # A = [1, 2, 3, 4] # print(rearrange_array(n, A)) # Output: (\\"YES\\", [1, 3, 2, 4])"},{"question":"In the kingdom of Vertlandia, the king has decided to construct a new road system to connect all the cities in the kingdom. The king has a list of possible roads to be constructed and each road has a cost associated with it. The king wants to ensure that all the cities are connected with the minimum possible cost. The king wants you to help him by writing a program that determines the minimum cost to connect all the cities. Each road connects exactly two different cities and there are no duplicate roads. The graph is connected and has at least one possible way to connect all the cities. Input The input consists of multiple datasets. Each dataset begins with two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 4950), where n is the number of cities and m is the number of possible roads. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) indicating a road between cities u and v with cost w. The input is terminated by a line containing two zeros. Output For each dataset, output a single line containing the minimum cost to connect all the cities. Example Input 4 5 1 2 1 2 3 2 3 4 4 4 1 8 1 3 3 3 3 1 2 2 2 3 3 1 3 1 0 0 Output 7 3","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges.sort(key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i = i + 1 x = find_parent(parent, u) y = find_parent(parent, v) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def min_cost_to_connect_all_cities(input_str): input_lines = input_str.strip().split(\'n\') output_lines = [] i = 0 while i < len(input_lines): n, m = map(int, input_lines[i].split()) if n == 0 and m == 0: break edges = [] i += 1 for _ in range(m): u, v, w = map(int, input_lines[i].split()) edges.append([u-1, v-1, w]) i += 1 output_lines.append(str(kruskal(n, edges))) return \\"n\\".join(output_lines)"},{"question":"Alice and Bob love playing with strings. They have a string `S` consisting of lowercase English letters. They play a game where they take turns performing the following move: - Choose a non-empty substring of `S` and replace all its occurrences in `S` with a given character `C`. The player who cannot make a valid move loses the game. Due to their play style, each player can only use any of the vowels {a, e, i, o, u} as the character `C` for replacement. First, determine the winner if both players play optimally given the initial string state `S` and who goes first. Input: - The first line contains a string `S` of length `N` (1 ≤ N ≤ 10^6). - The second line contains a character `X` denoting the player who goes first (either \'A\' for Alice, or \'B\' for Bob). Output: - Output a single character \'A\' if Alice wins, or \'B\' if Bob wins if they both play optimally. Example: Input: abracadabra A Output: A Explanation: In the example above, Alice goes first. She can replace all occurrences of \'a\' with \'a\', effectively shortening the string. The game continues until one player cannot make a valid move. Since there are multiple possible optimal strategies, the winner is determined by the initial string configuration and the turn order.","solution":"def determine_winner(S, X): Determines the winner of the game. Parameters: S (str): The initial string. X (char): The player who goes first (\'A\' for Alice or \'B\' for Bob). Returns: char: \'A\' if Alice wins, or \'B\' if Bob wins. # If the optimal strategy involves turns, we realize that an even number of total turns means first player wins, # and an odd number of total turns means second player wins if they both play optimally. # Count frequency of vowels in string S vowels = \'aeiou\' vowel_count = {v: 0 for v in vowels} for char in S: if char in vowels: vowel_count[char] += 1 # If no vowels are present, the first mover always loses because they have no valid move. total_vowels = sum(vowel_count.values()) if total_vowels == 0: return \'B\' if X == \'A\' else \'A\' # If there are vowels, the first player wins since they can always make a move and there are enough moves to force a win. return X"},{"question":"Axel and Bexy are best friends who love playing brainteaser games together. Recently, they discovered the game of \\"Tree Transformation\\". In this game, you are given a tree (an undirected graph with N nodes and N-1 edges), and the goal is to transform it into a single node via a series of operations. In each operation, you can choose any two nodes, u and v, such that v is the parent of u. Then, node u is \\"merged\\" into node v. This means all edges connected to u are now considered connected to v instead, and node u is removed. Axel wants to find the minimum number of operations required to transform the tree into a single node, while Bexy is trying to think of the fastest algorithm to solve this puzzle. You are tasked with helping them figure out the answer. Input The first line contains a single integer N (2 ≤ N ≤ 100000) — the number of nodes in the tree. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N) — denoting an edge between node u and node v. Output Output a single integer, the minimum number of operations required to transform the tree into a single node. Example Input 5 1 2 1 3 3 4 3 5 Output 4 Explanation Starting with the tree: 1 / 2 3 / 4 5 In the first operation, we can merge node 2 into node 1: 1 3 / 4 5 In the second operation, merge node 4 into node 3: 1 3 5 In the third operation, merge node 5 into node 3: 1 3 In the final operation, merge node 3 into node 1: 1 Hence, a total of 4 operations are required to transform the tree into a single node.","solution":"def minimum_operations_to_single_node(n, edges): Returns the minimum number of operations required to transform the tree into a single node. Parameters: n (int): Number of nodes in the tree. edges (list of tuples): List of edges in the tree. Returns: int: Minimum number of operations required. # The minimum number of operations to reduce a tree with N nodes # to a single node is always N-1. return n - 1"},{"question":"Given are two integer arrays nums1 and nums2. Determine the longest common subsequence (LCS) of nums1 and nums2. The longest common subsequence of two sequences is defined as the longest sequence that can be derived from both sequences by deleting some or no elements without changing the order of the remaining elements. Constraints * 1 leq nums1.length, nums2.length leq 1000 * 0 leq nums1[i], nums2[i] leq 1000 Input Input is given from Standard Input in the following format: ``` n m nums1 nums2 ``` Where: - n is the length of nums1 - m is the length of nums2 - nums1 is a list of n integers - nums2 is a list of m integers Output Print the length of the longest common subsequence of nums1 and nums2. Examples Input ``` 6 7 1 3 4 1 2 1 3 2 1 4 1 2 1 ``` Output 5 Input ``` 4 4 1 2 3 4 1 3 4 2 ``` Output 3","solution":"def longest_common_subsequence(nums1, nums2): Returns the length of the longest common subsequence of nums1 and nums2. n, m = len(nums1), len(nums2) # Create a (n+1) x (m+1) DP table dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if nums1[i - 1] == nums2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] # Example usage # Reading input from standard input as described in the problem statement import sys input = sys.stdin.read def main(): data = input().split() n = int(data[0]) m = int(data[1]) nums1 = list(map(int, data[2:n+2])) nums2 = list(map(int, data[n+2:n+2+m])) print(longest_common_subsequence(nums1, nums2)) if __name__ == \\"__main__\\": main()"},{"question":"You are trapped in a dungeon and need to find the fastest way out. The dungeon is represented as an n x m grid, where each cell can either be passable (denoted by \'.\') or blocked (denoted by \'#\'). You start at the top-left corner of the grid and need to reach the bottom-right corner. You can move up, down, left, or right, but cannot move through blocked cells. Your task is to determine the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner. If it is impossible to reach the bottom-right corner, output -1. Input The first line contains two integers, n and m, representing the number of rows and columns in the grid, respectively. The next n lines each contain m characters (either \'.\' or \'#\'), representing the grid. Output Output a single integer, the minimum number of moves required to reach the bottom-right corner, or -1 if it is impossible. Examples Input 4 4 .... .. .#.. .#.. Output 6 Input 3 3 ..# #.. ..# Output -1 Note In the first example: Start at (0, 0) Move right to (0, 1) Move right to (0, 2) Move down to (1, 2) Move down to (2, 2) Move right to (2, 3) Move down to (3, 3) Total moves: 6 In the second example, there is no available path from the top-left corner to the bottom-right corner because of the blockages. Therefore, the output is -1.","solution":"from collections import deque def minimum_moves_to_escape_dungeon(n, m, grid): Returns the minimum number of moves to escape the dungeon or -1 if it\'s impossible. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, move_count) visited = set() visited.add((0, 0)) while queue: x, y, moves = queue.popleft() if x == n-1 and y == m-1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"Each computer has an IP address, which is unique within a network. An IP address consists of four parts, each ranging from 0 to 255. One day, you decided to explore all possible IP addresses that can be formed from any given string of digits. Write a function that returns all possible valid IP address combinations from a given string of digits. Note that an IP address is considered valid if each part is between 0 and 255 inclusive, and no part can have leading zeros (except for 0 itself). Input One line containing a string of digits. The length of the string is between 1 and 12. Output Return all possible valid IP address combinations as a list of strings. Each part of an IP address should be separated by a dot (\'.\'). Examples Input \\"25525511135\\" Output [\\"255.255.11.135\\", \\"255.255.111.35\\"] Input \\"0000\\" Output [\\"0.0.0.0\\"] Input \\"1111\\" Output [\\"1.1.1.1\\"] Note Note that the string \\"25525511135\\" can be split into parts as [255, 255, 11, 135] and [255, 255, 111, 35], resulting in two valid IP addresses: \\"255.255.11.135\\" and \\"255.255.111.35\\". In the case of \\"0000\\", it forms the only valid IP address \\"0.0.0.0\\". In the case of \\"1111\\", it forms the only valid IP address \\"1.1.1.1\\".","solution":"def restore_ip_addresses(s): def is_valid(segment): return 0 <= int(segment) <= 255 and (segment == \\"0\\" or segment[0] != \\"0\\") def backtrack(start=0, end=1, current_parts=None): if current_parts is None: current_parts = [] if len(current_parts) == 4 and start == len(s): result.append(\\".\\".join(current_parts)) return elif len(current_parts) == 4: return for end in range(start + 1, min(len(s) + 1, start + 4)): segment = s[start:end] if is_valid(segment): backtrack(end, end + 1, current_parts + [segment]) result = [] backtrack() return result"},{"question":"In a distant kingdom there exists a rectangular Ice field of size NxM, where N is the number of rows and M is the number of columns. Each cell in the Ice field has a specific height value associated with it which determines its elevation. The king\'s soldiers need to create patrol routes to ensure the security of the kingdom. A valid patrol route must adhere to the following rules: 1. The route can start at any cell in the Ice field. 2. The route can move to any of the four neighboring cells (left, right, up, or down). 3. The height of the next cell in the route must be strictly greater than the current cell\'s height. 4. The route can end at any cell. Your task is to find the length of the longest valid patrol route in the Ice field. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) - the size of the Ice field. Each of the next N lines contains M integers. The j^{th} element in the i^{th} line is H_{i,j} (0 ≤ H_{i,j} ≤ 10^{9}) — the height of the cell located in the i^{th} row and the j^{th} column. Output Output contains one integer number - the length of the longest valid patrol route. Examples Input 3 3 1 2 4 6 5 2 3 8 7 Output 4 Input 4 5 1 2 3 2 1 6 7 4 3 5 3 1 8 9 7 2 1 4 6 5 Output 6 Note In the first example, one possible longest patrol route is from cell (1,1) -> (1,2) -> (1,3) -> (2,3) and its length is 4. In the second example, one possible longest patrol route is from cell (2,2) -> (2,3) -> (3,3) -> (3,4) -> (3,5) -> (4,4) and its length is 6.","solution":"def longest_patrol_route(N, M, heights): Function to find the length of the longest valid patrol route in the ice field. Parameters: N (int): Number of rows. M (int): Number of columns. heights (List[List[int]]): 2D-list representing heights. Returns: int: Length of the longest valid patrol route. def dfs(x, y): if memo[x][y] != -1: return memo[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and heights[nx][ny] > heights[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) memo[x][y] = max_length return max_length memo = [[-1] * M for _ in range(N)] longest_route = 0 for i in range(N): for j in range(M): longest_route = max(longest_route, dfs(i, j)) return longest_route"},{"question":"Coding Assessment Question Problem Statement You are working for a logistics company and you are responsible for optimizing delivery routes. Your company operates in a city with a complex matrix of roads represented as a grid. Each cell on the grid can either be a road or a building. Delivery trucks can only travel on roads. The goal is to determine the minimum number of steps required for a delivery truck to reach its target destination from a starting point. However, there\'s an added complexity: some roads are blocked temporarily, which may change over time. You need to write a program that, given the grid and the positions of the starting point and the destination, will determine the shortest path considering the current state of the grid. If there is no possible route from the start to the destination, return -1. The grid is represented as a matrix where 0 indicates a road, and 1 indicates a building or a temporarily blocked road. The truck can move up, down, left, or right, but not diagonally. Input The input is formatted as follows: N M grid Sx Sy Tx Ty The first line contains two integers N and M (1 <= N, M <= 100), where N is the number of rows and M is the number of columns of the grid. Each of the next N lines contains M integers (either 0 or 1), representing the grid. The next line contains two integers, Sx and Sy (0 <= Sx < N, 0 <= Sy < M), representing the starting point coordinates in the grid. The final line contains two integers, Tx and Ty (0 <= Tx < N, 0 <= Ty < M), representing the target destination coordinates in the grid. Output Output the minimum number of steps required for the delivery truck to reach the target destination. If it is impossible to reach the destination, output -1. Sample Input 1 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 4 4 Output for the Sample Input 1 8 Sample Input 2 3 3 0 1 0 1 1 0 0 0 0 0 0 2 2 Output for the Sample Input 2 4 Sample Input 3 3 3 0 1 0 1 1 1 0 0 0 0 0 2 2 Output for the Sample Input 3 -1 Sample Input 4 2 2 0 1 0 0 0 0 1 1 Output for the Sample Input 4 2 Explanation for the Sample Input 1: The grid: ``` 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 ``` The starting point is at (0, 0) and the target is at (4, 4). One of the possible shortest paths is: (0, 0) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) -> (4, 3) -> (4, 4), which requires 8 moves. Use these inputs to test your program and ensure it works correctly. The function should properly handle different sizes of grids and various positions of roads and blocked paths.","solution":"from collections import deque def min_steps_to_target(N, M, grid, start, target): if grid[start[0]][start[1]] == 1 or grid[target[0]][target[1]] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == (target[0], target[1]): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"A group of explorers are navigating through a dense forest represented by a grid of size n x m. Each cell in the grid can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). The explorers start at the top-left corner of the grid (0,0) and want to reach the bottom-right corner of the grid (n-1,m-1). The explorers can move up, down, left, or right but cannot pass through obstacles. Your task is to determine the minimum number of moves required for the explorers to reach the bottom-right corner. If it is not possible to reach the destination, return -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the grid dimensions. - The next n lines each contain m characters (\'.\' or \'#\') representing the forest. Output: - Print the minimum number of moves required for the explorers to reach from the top-left to the bottom-right corner. If it is not possible, return -1. Examples: Input: 4 4 .... .. .#.. .... Output: 6 Input: 3 3 ..# ..# . Output: -1","solution":"from collections import deque def min_moves_to_reach_end(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # queue stores (x, y, moves) visited = set((0, 0)) while queue: x, y, moves = queue.popleft() if x == n - 1 and y == m - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"We have a string S consisting of N characters, composed of lower-case English alphabets. For each integer K from 1 through N, solve the following problem: * Construct a substring that starts at the beginning of S and has length K. From this substring, generate all unique permutations and find the lexicographically smallest permutation of these permutations. Output this smallest permutation. Constraints * 1 leq N leq 100 * S consists of lower-case English alphabets. * All values in input are integers. Input Input is given from Standard Input in the following format: N S Output Print N lines. The k-th line should contain the lexicographically smallest permutation of the substring of length k that starts from the beginning of S. Example Input 5 abcde Output a ab abc abcd abcde","solution":"from itertools import permutations def smallest_permutation(S): Returns smallest lexicographical permutations for each substring length k from 1 to N. N = len(S) results = [] # Loop through each K from 1 to N for k in range(1, N + 1): substr = S[:k] # Find all unique permutations for the substring perms = sorted(set(\'\'.join(p) for p in permutations(substr))) # Get the lexicographically smallest permutation smallest_perm = perms[0] results.append(smallest_perm) return results"},{"question":"Given an integer n, write a program that calculates the factorial of n. Input The input contains a single integer n (0 ≤ n ≤ 15). Output Output the factorial of the given integer. Examples Input 5 Output 120 Input 10 Output 3628800","solution":"def factorial(n): Returns the factorial of n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"You are given a string representing a simple arithmetic expression consisting of non-negative integers and addition and subtraction operators only (e.g., \\"3+2-5+10\\"). The goal is to evaluate the expression and return the result. Input The only line of the input contains an arithmetic expression as a string. The string is guaranteed to be non-empty and to contain only digits, plus signs (\'+\'), and minus signs (\'-\'). Output The only line of the output should contain the integer result of evaluating the expression. Examples Input 3+2-5+10 Output 10 Input 20-4-2+8 Output 22 Input 1000+2000-500 Output 2500","solution":"def evaluate_expression(expression): Evaluates a simple arithmetic expression consisting of non-negative integers and addition and subtraction operators. Args: expression (str): A string representing the arithmetic expression. Returns: int: The result of evaluating the expression. import re tokens = re.findall(r\'d+|[+-]\', expression) total = int(tokens[0]) index = 1 while index < len(tokens): if tokens[index] == \'+\': total += int(tokens[index + 1]) elif tokens[index] == \'-\': total -= int(tokens[index + 1]) index += 2 return total"},{"question":"In a faraway kingdom, the king has a peculiar collection of magical stones. There are n stones in total, where each stone has a magical power value. The king wants to distribute these stones among his subjects in a fair manner, but there is a twist. The king has two subjects, and he wants to divide the stones such that the absolute difference in the sum of the magical power values between the two subjects is minimized. More formally, you need to partition the set of stones into two subsets S1 and S2 such that |sum(S1) - sum(S2)| is minimized, where sum(S1) is the sum of powers of stones in subset S1 and sum(S2) is the sum of powers of stones in subset S2. Write a program to help the king in achieving this fair distribution. The king\'s court magician will provide you with the number of stones and their respective power values. Your task is to find the minimum possible value for the absolute difference. Input The input consists of: - An integer n (1 ≤ n ≤ 20), the number of stones. - A single line with n integers, where each integer represents the power value of a stone. Each power value is a non-negative integer and does not exceed 100. Output Output a single integer, the minimum possible absolute difference. Example Input 4 1 2 3 4 Output 0 Explanation In this example, one possible partition is {1, 4} and {2, 3}. The sum of the first subset is 5 and the sum of the second subset is also 5. The absolute difference is |5 - 5| = 0, which is the minimum possible. Another possible partition could be {1, 3, 1} and {4}. The sum of the first subset is 5 and the sum of the second subset is 4. The absolute difference is |5 - 4| = 1, which is not the minimum possible.","solution":"def min_absolute_difference(n, power_values): Finds the minimum possible absolute difference between the sums of two subsets of given power values. Parameters: n (int): Number of stones. power_values (list): List of power values for each stone. Returns: int: Minimum possible absolute difference. from itertools import combinations total_sum = sum(power_values) min_diff = float(\'inf\') for i in range(n + 1): for subset in combinations(power_values, i): subset_sum = sum(subset) other_sum = total_sum - subset_sum min_diff = min(min_diff, abs(subset_sum - other_sum)) return min_diff"},{"question":"A company is setting up a new office building with rectangular rooms of different sizes. Each room must be covered with rectangular tiles, all of the same size, to achieve a uniform look. The company needs a program to determine if a given room can be entirely covered with tiles without cutting any tile. Write a program that takes the dimensions of a single rectangular room and the dimensions of the tile, and determine if the room can be covered perfectly with these tiles. Input The input is given in the following format: l w t_l t_w where l and w are the length and width of the room (1 ≤ l, w ≤ 100), and t_l and t_w are the length and width of the tile (1 ≤ t_l, t_w ≤ l, w). Output Output \\"yes\\" if the room can be perfectly covered with the tiles, and \\"no\\" otherwise. Examples Input 6 8 3 4 Output yes Input 5 7 3 2 Output no","solution":"def can_cover_room(l, w, t_l, t_w): Determines if a room of size l x w can be perfectly covered by tiles of size t_l x t_w. Args: l (int): Length of the room. w (int): Width of the room. t_l (int): Length of the tile. t_w (int): Width of the tile. Returns: str: \\"yes\\" if the room can be perfectly covered with the tiles, \\"no\\" otherwise. if (l % t_l == 0 and w % t_w == 0) or (l % t_w == 0 and w % t_l == 0): return \\"yes\\" else: return \\"no\\""},{"question":"Bob is attempting to improve his string processing skills. He comes across a challenge that involves determining whether pairs of strings are \\"circular permutations\\" of each other. Two strings are circular permutations if one string can be rotated to become the other string. For example, \\"abc\\" and \\"bca\\" are circular permutations since rotating \\"abc\\" by one position results in \\"bca\\". Bob needs to write a program that will help him identify if two strings are circular permutations of each other. Input - The first line contains an integer n, the number of test cases. - Each of the next n lines contains two space-separated strings s1 and s2, which Bob needs to check. Output - For each test case, print \\"YES\\" if the strings are circular permutations of each other, \\"NO\\" otherwise. Constraints - 1 ≤ n ≤ 5000 - 1 ≤ length of s1, s2 ≤ 100 - Strings s1 and s2 contain only lowercase English letters. Examples Input 4 abc bca abc abc abc cab abc def Output YES YES YES NO Hint To determine if two strings are circular permutations of each other, you can check if one string is a substring of the other string concatenated with itself. For example, to check if \\"bca\\" is a circular permutation of \\"abc\\", verify if \\"bca\\" is a substring of \\"abcabc\\".","solution":"def are_circular_permutations(s1, s2): Determines if two strings are circular permutations of each other. if len(s1) != len(s2): return False concatenated_s1 = s1 + s1 return s2 in concatenated_s1 def check_circular_permutations(n, test_cases): results = [] for s1, s2 in test_cases: if are_circular_permutations(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"The local floristry has just employed a new inventory management system to keep track of various types of flowers. Each flower has a name and a count representing how many of that flower type are in stock. As various operations are performed on the inventory, such as adding new flowers, selling flowers, or restocking flowers, the florist wants to be able to quickly recall information about the inventory at any moment. Your task is to simulate this inventory system with a series of operations and print the final state of the inventory. Input The first line contains a single positive integer N (1 ≤ N ≤ 100), representing the number of operations to follow. Each of the following N lines describes an operation and starts with a keyword indicating the type of operation, followed by necessary details: 1. \\"add\\" followed by the flower name (a string of up to 20 alphabetic characters) and the initial count (a non-negative integer up to 10,000) 2. \\"sell\\" followed by the flower name and the number of flowers sold (a non-negative integer up to the current count of that flower) 3. \\"restock\\" followed by the flower name and the number of flowers added (a non-negative integer up to 10,000) All operations are case-sensitive, so \\"Rose\\" and \\"rose\\" would be considered different flowers. Output After processing all operations, output the final inventory in alphabetical order of the flower names. Each line should contain a flower name and its count separated by a space. Example Input: 5 add Rose 10 add Tulip 5 sell Rose 3 restock Tulip 8 add Lily 7 Output: Lily 7 Rose 7 Tulip 13","solution":"def floristry_inventory(operations): inventory = {} for operation in operations: parts = operation.split() command = parts[0] name = parts[1] count = int(parts[2]) if command == \\"add\\": if name not in inventory: inventory[name] = 0 inventory[name] += count elif command == \\"sell\\": if name in inventory: inventory[name] -= count elif command == \\"restock\\": if name in inventory: inventory[name] += count sorted_inventory = sorted(inventory.items()) final_inventory = [\\"{} {}\\".format(name, count) for name, count in sorted_inventory] return final_inventory"},{"question":"In a given city, there are n buildings connected by m one-way streets forming a directed road network. Each building can be represented by an integer from 1 to n. The one-way streets are such that from any building you can only move to certain other buildings by following the direction of the streets. You are required to find the number of buildings that you can start from and reach exactly k other buildings, following the one-way street directions. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 4000) — the number of buildings and the number of one-way streets, respectively. The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a one-way street from building u to building v. The final line contains a single integer k (0 ≤ k ≤ n). Output Output a single integer — the number of buildings that can reach exactly k other buildings through the network of streets. Examples Input 4 4 1 2 2 3 3 4 1 3 2 Output 1 Input 5 3 1 2 2 3 4 5 1 Output 2","solution":"def count_buildings_reaching_k(n, m, streets, k): from collections import defaultdict, deque def bfs_count_reachable(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() for neighbour in adj_list[node]: if neighbour not in visited: visited.add(neighbour) queue.append(neighbour) return len(visited) adj_list = defaultdict(list) for u, v in streets: adj_list[u].append(v) count = 0 for building in range(1, n+1): if bfs_count_reachable(building) == k: count += 1 return count"},{"question":"You are asked to organize a marathon with n checkpoints arranged in a circular route. The checkpoints are numbered from 1 to n in clockwise order. You need to set up m water stations along the route. Each water station serves runners passing through a segment of the route between two checkpoints. The segment can either be a clockwise segment or an anticlockwise segment, but no two segments can overlap except at their endpoints. Determine if it is possible to set up these water stations without overlaps, and if possible, determine whether each segment should cover the clockwise or anticlockwise portion between the given checkpoints. Input The first line contains two integers n and m (4 ≤ n ≤ 100, 1 ≤ m ≤ 100). Each of the following m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Output If it is impossible to set up the water stations such that no segments overlap, output Impossible. Otherwise, print m characters. The i-th character should be \'c\' if the segment should cover the clockwise portion and \'a\' if it should cover the anticlockwise portion between checkpoints ai and bi. If there are several valid solutions, output any one of them. Examples Input 5 2 1 3 2 5 Output ca Input 6 3 1 4 2 6 3 5 Output acc","solution":"def organize_marathon(n, m, segments): def clockwise_dist(a, b, n): return (b - a) % n def anticlockwise_dist(a, b, n): return (a - b) % n result = [] for a, b in segments: cw_dist = clockwise_dist(a, b, n) acw_dist = anticlockwise_dist(a, b, n) if cw_dist <= acw_dist: result.append(\'c\') else: result.append(\'a\') return \'\'.join(result) # Sample call for testing n = 5 m = 2 segments = [(1, 3), (2, 5)] print(organize_marathon(n, m, segments)) # Expected output \\"ca\\""},{"question":"In a programming competition, you are tasked with organizing a series of contests. Each contest must adhere to specific rules regarding participant divisions based on their ranks. The total number of participants is n. Each participant has a unique rank represented by an integer from 1 to n, and no two participants have the same rank. Your task is to organize the contests in such a way that each contest includes participants whose ranks form a continuous segment. For example, a contest could have participants with ranks 3, 4, and 5. Each contest also has a requirement that the participant ranks in it must form a segment of length exactly k. Given the total number of participants n and the segment length k, your objective is to determine the maximum number of non-overlapping contests that can be organized. Input The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 10^6) — the total number of participants and the required segment length for each contest. Output Output a single integer representing the maximum number of non-overlapping contests that can be organized. Examples Input 10 3 Output 3 Input 8 4 Output 2 Note In the first example, you can form the following non-overlapping contests: [1,2,3], [4,5,6], and [7,8,9] (with one participant left over that cannot form a complete segment). In the second example, you can form the following non-overlapping contests: [1,2,3,4] and [5,6,7,8]. All participants are used in forming the contests.","solution":"def max_non_overlapping_contests(n, k): Returns the maximum number of non-overlapping contests that can be organized with given number of participants (n) and segment length (k). return n // k"},{"question":"You are developing a new piece of software for a research team studying the biodiversity of a forest. The research involves collecting data on different species of birds found in various sections of the forest. There are `n` sections in the forest, each section has a unique identifier from 1 to n. The i-th section contains exactly one species of bird, represented by an integer `b_i`. The research team wants to determine the number of distinct species of birds present in the entire forest. However, due to limited resources, you can only request the species information from a specific section a limited number of times. After performing each query, the research team can identify whether the bird species observed already exists in the list of species they have seen in recent queries. You have a “scientist” available who can memorize a certain number of recent bird species observations in a sliding window of size `k`. Beyond that, the scientist has to forget the oldest observation when a new one is made. Additionally, you have the ability to reset the scientist\'s memory at any point, clearing all recent observations so far. The scientist can only process `(2n^2)/k` queries in total, and you can reset the scientist\'s memory at most 500 times. # Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1024, k is less than or equal to n and both are powers of two). It is guaranteed that `(2n^2)/k ≤ 10000`. # Interaction You will start the interaction by reading the integers `n` and `k`. * To query the bird species in the i-th section, you will output the string: ``` ? i ``` where `i` is the section number (1 ≤ i ≤ n). The response will be one of the following: * `Y` - indicating that the species in section `i` was observed in one of the recent `k` queries. * `N` - indicating that the species is new in the recent `k` queries. * To reset the scientist\'s memory, output the string: ``` R ``` * Once you determine the number of distinct bird species present in the forest, output the result: ``` ! d ``` where `d` is the number of distinct bird species. If any invalid query is made, either exceeding the `(2n^2)/k` query limit or more than 500 memory resets, you will receive the response `E` and the program will terminate immediately. # Example Input ``` 4 2 N N Y N Y Y N ``` Output ``` ? 1 ? 2 ? 3 ? 4 R ? 3 ? 1 ? 2 R ? 4 ! 3 ``` # Note In the example above, we can derive that the array `b` contains 3 distinct species of birds. The possible species observed could be `[1, 2, 1, 3]` in the respective sections.","solution":"def determine_bird_species(n, k, query, reset): Determines the number of distinct bird species in a forest with n sections using a sliding window of size k for recent species observation. :param n: Number of sections in the forest :param k: Memory window size for recent observations :param query: Function to query the species of bird in a given section (returns \'Y\' or \'N\') :param reset: Function to reset the memory of recent observations :return: Number of distinct bird species in the forest distinct_species = 0 seen_species = set() for start in range(1, n+1, k): reset() for i in range(start, min(start + k, n+1)): response = query(i) if response == \'N\': distinct_species += 1 seen_species.add(i) return distinct_species"},{"question":"Petya\'s friend, Vasya, likes strings more than arrays. Recently, Vasya received a string consisting of lowercase English letters as a gift from his sister. However, the string contains some duplicate characters consecutively, which he does not like. To fix this, Vasya decided that he needs a new string where no two adjacent characters are the same. He can achieve this by adding the minimal number of characters anywhere in the original string. Your task is to determine the minimum number of characters that Vasya needs to add to make sure no two adjacent characters in the string are the same. Input The only input line contains a single string s (1 ≤ |s| ≤ 105), the string that Vasya received. Output Output a single integer — the minimum number of characters that need to be added to the string. Examples Input aab Output 1 Input aabb Output 2 Input abcd Output 0","solution":"def min_additions_to_prevent_adjacent_duplicates(s): Given a string s, this function returns the minimum number of characters that need to be added to ensure no two adjacent characters are the same. additions = 0 # Iterate through the string and count necessary additions for i in range(1, len(s)): if s[i] == s[i - 1]: additions += 1 return additions"},{"question":"You are given a binary string `s` of length `n`. A binary string is a string that consists only of the characters \'0\' and \'1\'. Your task is to determine the minimum number of characters that need to be flipped to make the string alternating. A binary string is alternating if no two adjacent characters are the same. For example, \\"0101\\" is an alternating binary string, while \\"001\\" is not. Input The first line contains an integer `n` (1 <= n <= 10^5) — the length of the binary string. The second line contains a binary string `s` of length `n`. Output Print the minimum number of characters that need to be flipped to make the string alternating. Examples Input 6 100110 Output 2 Input 5 11111 Output 2 Input 4 0101 Output 0 Note In the first example, one possible way to make the string alternating is to change the 2nd and the 4th characters, resulting in the string \\"101010\\". Therefore, the minimum number of flips required is 2. In the second example, one possible way to make the string alternating is to change the 2nd and the 4th characters, resulting in the string \\"10101\\". Therefore, the minimum number of flips required is 2. In the third example, the string is already alternating, so no flips are required. Therefore, the minimum number of flips required is 0.","solution":"def min_flips_to_alternate(s): n = len(s) pattern1 = \\"01\\" * (n // 2) + \\"0\\" * (n % 2) pattern2 = \\"10\\" * (n // 2) + \\"1\\" * (n % 2) flip_count1 = sum(1 for i in range(n) if s[i] != pattern1[i]) flip_count2 = sum(1 for i in range(n) if s[i] != pattern2[i]) return min(flip_count1, flip_count2)"},{"question":"Jane is organizing a coding challenge and wants to generate some interesting numbers. She defines a number as interesting if it can be split into two non-empty parts that together sum up to the original number. For example, 123 is interesting because 1 + 23 = 123. Given an integer n, help Jane determine how many interesting numbers exist in the range from 1 to n (inclusive). Input The input consists of a single integer n (1 ≤ n ≤ 10^6), the upper limit of the range. Output Print one integer — the number of interesting numbers from 1 to n. Examples Input 10 Output 9 Input 20 Output 19 Input 100 Output 99 Note In the first example, all numbers from 1 to 10 are interesting as they can be split into two parts that sum up to the original number. For example: - 1 (1) - 2 (1+1) - 3 (2+1) - 4 (3+1) - 5 (4+1) - 6 (5+1) - 7 (6+1) - 8 (7+1) - 9 (8+1) - 10 (9+1) In the second example, all numbers from 1 to 20 are interesting because each single digit or the sum of parts equals the number itself. For example: - 11 (10+1) - 12 (11+1) - 13 (12+1) - ... - 20 (19+1) In the third example, the same pattern holds for numbers up to 100.","solution":"def count_interesting_numbers(n): Count numbers that can be split into two non-empty parts that together sum up to the original number. For any n >= 1, all numbers from 1 to n are interesting because each number itself can be split into two parts. return n"},{"question":"Given an integer array `arr` of size `N`, your task is to find the number of subarrays with a non-decreasing order. A subarray is defined as a contiguous segment of the array. A subarray is non-decreasing if for every pair of indices `i` and `j` in the subarray such that `i < j`, `arr[i] <= arr[j]`. For example, the subarray `[2, 2, 3]` is non-decreasing while `[4, 3]` is not. Write a function that takes `arr` as input and returns the count of non-decreasing subarrays. # Function Signature ```python def count_non_decreasing_subarrays(arr: List[int]) -> int: pass ``` # Input - The first line of input contains an integer `N` (1 ≤ N ≤ 10^5), the size of the array. - The second line contains `N` space-separated integers representing the elements of the array `arr` in the range [-10^6, 10^6]. # Output Return the number of non-decreasing subarrays. # Examples Example 1 Input: ``` 5 1 2 3 2 2 ``` Output: ``` 9 ``` Explanation: The 9 non-decreasing subarrays are: `[1]`, `[2]`, `[3]`, `[2]`, `[2]`, `[1, 2]`, `[2, 3]`, `[3, 2]`, `[2, 2]`. Example 2 Input: ``` 4 4 3 2 1 ``` Output: ``` 4 ``` Explanation: The 4 non-decreasing subarrays are: `[4]`, `[3]`, `[2]`, `[1]`. # Note A simple brute force approach that examines every possible subarray will not be efficient for large `N`. Aim to achieve better performance by recognizing patterns and possible optimizations based on the properties of non-decreasing subarrays.","solution":"def count_non_decreasing_subarrays(arr): Returns the number of non-decreasing subarrays in the given array. n = len(arr) if n == 0: return 0 count = 0 length = 1 for i in range(1, n): if arr[i] >= arr[i - 1]: length += 1 else: count += length * (length + 1) // 2 length = 1 count += length * (length + 1) // 2 return count"},{"question":"Problem Statement: In the ancient kingdom of Northumbria, a popular game among scholars involves decoding secret messages hidden in a numeric string. Each digit in the string can be mapped to a character following the rules: 1 maps to \'A\', 2 to \'B\', ..., 9 to \'I\'. Additionally, each pair of digits ranging from 10 to 26 maps to characters \'J\' to \'Z\' respectively. However, the kingdom\'s wise men added a twist: not every sequence of digits is a valid message. A valid message must adhere to two rules: 1. Every single digit within the message string can be a valid character. 2. If including pairs of digits as valid characters, no overlapping pairs are allowed in the message. Given a numeric string s, determine the number of distinct valid decoded messages that can be formed by following the Northumbrian rules. Input: - A single line containing a string s consisting of digits only (1 ≤ |s| ≤ 100). Output: - Print a single integer: the number of distinct valid decoded messages. Examples: Input: 123 Output: 3 Input: 226 Output: 3 Explanation: In the first example, \\"123\\" can be decoded as \\"ABC\\", \\"LC\\", \\"AW\\". In the second example, \\"226\\" can be decoded as \\"BBF\\", \\"BZ\\", \\"VF\\".","solution":"def numDecodings(s: str) -> int: if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): # Check the last single digit if s[i - 1] != \'0\': dp[i] += dp[i - 1] # Check the last two digits two_digit = int(s[i - 2:i]) if 10 <= two_digit <= 26: dp[i] += dp[i - 2] return dp[n] # Output examples print(numDecodings(\\"123\\")) # 3 print(numDecodings(\\"226\\")) # 3"},{"question":"You are given a set of strings which need to be grouped by their first character in a case-insensitive manner while maintaining the order of appearance within each group. Write a program that performs this grouping. Constraints: * The number of strings will not exceed 100,000. * Length of each string will not exceed 100. Input: A sequence of strings where each string is given in a new line. The input is terminated by a line containing a single word \\"end\\". Output: For each group, output the first character (case-insensitive) followed by all strings in that group, each in a new line. Order of groups and order of strings within each group must be preserved as they appear in the input. Example Input apple Almond banana apricot berry cherry end Output a apple Almond apricot b banana berry c cherry Explanation: The strings \\"apple\\", \\"Almond\\", and \\"apricot\\" belong to the \'a\' group because \'A\' and \'a\' are considered the same case-insensitively. The strings \\"banana\\" and \\"berry\\" belong to the \'b\' group. Finally, \\"cherry\\" belongs to the \'c\' group. Each group appears in the order of first occurrence of the characters.","solution":"def group_strings_by_first_char(strings): Groups strings by their first character in a case-insensitive manner while maintaining the order of appearance. from collections import OrderedDict groups = OrderedDict() for string in strings: if string == \\"end\\": break first_char = string[0].lower() if first_char not in groups: groups[first_char] = [] groups[first_char].append(string) result = [] for key, group in groups.items(): result.append(key) result.extend(group) return result"},{"question":"Given an array of integers, you are required to find and print the product of all the elements in the array. However, if there are any zeroes in the array, you should ignore the zeroes when calculating the product. If there are no non-zero elements, the product is considered to be 0. Write a function that takes the following input: Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output: - Print a single integer — the product of all non-zero elements in the array. If all elements are zero, print 0. Examples: Input: 5 1 2 3 4 0 Output: 24 Input: 4 0 0 0 0 Output: 0 Input: 3 -1 -2 -3 Output: 6","solution":"def product_of_nonzero_elements(n, arr): Returns the product of all non-zero elements in the array. If all elements are zero, returns 0. product = 1 non_zero_found = False for num in arr: if num != 0: product *= num non_zero_found = True return product if non_zero_found else 0"},{"question":"You are given a grid of size N x M filled with non-negative integers. Your task is to find the maximum sum of a subgrid with a constraint that the subgrid must be a square, and its size can be chosen arbitrarily from 1x1 to min(N, M)xmin(N, M). Constraints: - 1 ≤ N, M ≤ 1000 - The values in the grid are integers between 0 and 1000, inclusive. Input: The input is given from Standard Input in the following format: ``` N M a_1_1 a_1_2 ... a_1_M a_2_1 a_2_2 ... a_2_M : a_N_1 a_N_2 ... a_N_M ``` Where a_i_j represents the value at the ith row and jth column of the grid. Output: Print the maximum sum of the subgrid that satisfies the constraints. Examples: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 45 ``` Input: ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output: ``` 136 ```","solution":"def max_square_subgrid_sum(grid): N = len(grid) M = len(grid[0]) max_sum = 0 prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] # Fill prefix_sum array for i in range(1, N+1): for j in range(1, M+1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] max_side = min(N, M) # Calculate maximum square subgrid sum for k in range(1, max_side + 1): for i in range(k, N + 1): for j in range(k, M + 1): current_sum = (prefix_sum[i][j] - prefix_sum[i - k][j] - prefix_sum[i][j - k] + prefix_sum[i - k][j - k]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a grid of size `m x n`, initialized with zeros. You are also given multiple updates in the form of triplets (row1, col1, row2, col2) which graphically represent subgrids to be incremented. For each update, every element of the subgrid grid[row1][col1] to grid[row2][col2] is incremented by 1. After applying all updates, return the final state of the grid. Function Signature: ```python def update_grid(m: int, n: int, updates: List[Tuple[int, int, int, int]]) -> List[List[int]]: ``` # Input - `m`: An integer representing the number of rows in the grid. - `n`: An integer representing the number of columns in the grid. - `updates`: A list of tuples, where each tuple contains four integers (row1, col1, row2, col2). Each update increments the subgrid from grid[row1][col1] to grid[row2][col2]. # Output - A list of lists representing the final state of the `m x n` grid after applying all updates. # Example Input: ```python m = 3 n = 4 updates = [(0, 0, 1, 1), (1, 1, 2, 3)] ``` Output: ```python [ [1, 1, 0, 0], [1, 2, 1, 1], [0, 1, 1, 1] ] ``` # Constraints - 1 <= m, n <= 100 - 0 <= row1 <= row2 < m - 0 <= col1 <= col2 < n - 0 <= len(updates) <= 10000","solution":"from typing import List, Tuple def update_grid(m: int, n: int, updates: List[Tuple[int, int, int, int]]) -> List[List[int]]: grid = [[0 for _ in range(n)] for _ in range(m)] for row1, col1, row2, col2 in updates: for i in range(row1, row2 + 1): for j in range(col1, col2 + 1): grid[i][j] += 1 return grid"},{"question":"Alicia loves playing with numbers and observing the patterns they form. She recently came across a peculiar sequence called the \\"Triple Step Sequence,\\" defined as follows: The Triple Step Sequence is a series of non-negative integers where: - a(0) = 0, a(1) = 1, a(2) = 2, and for all n ≥ 3, - a(n) = a(n-1) + a(n-2) + a(n-3). Alicia is curious about the k-th element in the Triple Step Sequence. Can you help her by writing a program that calculates the k-th element? Input The input consists of a single integer k (0 ≤ k ≤ 50). Output Print the k-th element in the Triple Step Sequence. Example Input 3 Output 3 Input 5 Output 7 Input 10 Output 274 Note The first few terms of the Triple Step Sequence are: 0, 1, 2, 3, 6, 11, 20, 37, 68, 125, 230,... For the first example, the 3rd element is 3 because 3 = a(2) + a(1) + a(0) = 2 + 1 + 0 = 3. For the second example, the 5th element is 7 because 7 = a(4) + a(3) + a(2) = 6 + 3 + 2 = 11.","solution":"def triple_step_sequence(k): Returns the k-th element in the Triple Step Sequence. if k == 0: return 0 elif k == 1: return 1 elif k == 2: return 2 a = [0] * (k + 1) a[0] = 0 a[1] = 1 a[2] = 2 for i in range(3, k + 1): a[i] = a[i-1] + a[i-2] + a[i-3] return a[k]"},{"question":"Kevin is an avid gem collector and recently discovered a mine filled with various gemstones. Each gemstone can be represented by a specific type, which is denoted by a single lowercase English letter. Kevin wants to collect certain types of gemstones in specific quantities to complete his collection. You are given two strings, `required` and `available`. The `required` string contains the gemstones Kevin needs, where each character represents a type of gemstone and its frequency represents the required quantity. The `available` string contains the gemstones Kevin has found so far, where again each character represents a type of gemstone he found and its frequency represents the available quantity of each type. Your task is to determine whether Kevin can complete his collection using the available gemstones. You need to output `YES` if it is possible for Kevin to collect all required gemstones, or `NO` if he cannot. Input The first line contains the string `required` (1 ≤ length of required ≤ 1000) — the gemstones Kevin needs. The second line contains the string `available` (1 ≤ length of available ≤ 1000) — the gemstones Kevin has found so far. Output Output `YES` if it\'s possible for Kevin to collect all required gemstones from the available gemstones, otherwise output `NO`. Examples Input ``` aaabbc abbccddee ``` Output ``` NO ``` Input ``` abcd abcabcabcabcddd ``` Output ``` YES ``` Input ``` a b ``` Output ``` NO ``` Note In the first example, Kevin needs 3 \'a\'s, 2 \'b\'s, and 1 \'c\'. However, in the available gemstones string, there are only 2 \'a\'s, hence the output is `NO`. In the second example, Kevin needs 1 \'a\', 1 \'b\', 1 \'c\', and 1 \'d\'. The available gemstones string has sufficient quantities of all these types, so the output is `YES`. In the third example, Kevin needs 1 \'a\' but there is no \'a\' in the available gemstones string, so the output is `NO`.","solution":"def can_collect_gemstones(required, available): from collections import Counter required_count = Counter(required) available_count = Counter(available) for gem in required_count: if required_count[gem] > available_count.get(gem, 0): return \\"NO\\" return \\"YES\\""},{"question":"A submarine navigation system has a state-of-the-art sonar that periodically senses the surroundings and reports the distances to the nearest obstacles in four directions (front, back, left, and right). Using this information, the submarine must decide in which direction to move in order to maximize the time until it encounters an obstacle, ensuring it avoids obstacles effectively. Given the distances to the nearest obstacles in four cardinal directions for multiple time points, determine the direction in which the submarine should move at each time point. Input The first line contains an integer t (1 ≤ t ≤ 200) — the number of time points. Each of the next t lines contains four integers f, b, l, r (1 ≤ f, b, l, r ≤ 1000) — the distances to the nearest obstacles in the front, back, left, and right directions, respectively. Output For each time point, output a single character indicating the direction the submarine should move to maximize the time until it encounters an obstacle. The characters are: - \'F\' for front, - \'B\' for back, - \'L\' for left, - \'R\' for right. If there are multiple directions with the same maximum distance, output any of them. Examples Input 3 3 4 2 5 6 1 3 6 5 5 5 5 Output R F F Explanation In the first time point, the maximum distance is 5, so the submarine should move to the right (\'R\'). In the second time point, the maximum distance is 6, and it appears for both front and right directions. Any of \'F\' or \'R\' would be valid. In the third time point, all distances are the same, so any direction would be a valid answer. Note The submarine navigates in a two-dimensional plane where the directions front, back, left, and right are relative to its current orientation. The distances are given in meters. The output should choose any direction providing the maximum available distance to the nearest obstacle.","solution":"def submarine_directions(t, distances): Returns the direction the submarine should move to maximize the time until it encounters an obstacle. Parameters: t (int): Number of time points. distances (List[Tuple[int, int, int, int]]): List of tuples representing the distances to nearest obstacles in the order (front, back, left, right). Returns: List[str]: A list of characters representing the direction to move at each time point (\'F\', \'B\', \'L\', or \'R\'). directions = [] for i in range(t): f, b, l, r = distances[i] max_distance = max(f, b, l, r) if f == max_distance: directions.append(\'F\') elif b == max_distance: directions.append(\'B\') elif l == max_distance: directions.append(\'L\') elif r == max_distance: directions.append(\'R\') return directions"},{"question":"A company wants to keep track of their employees\' IDs and the project IDs they are working on. Each employee can work on multiple projects. Given the data, the company wants to find out all the project IDs a given employee is involved in. You need to implement a function that reads the employee-project data and then answers the queries regarding the projects an employee is working on. Input The first line of the input contains an integer T, the number of employees\' data entries. Each of the next T lines contains an employee ID followed by the project ID they work on, separated by a space. The next line contains an integer Q, the number of queries. Each of the following Q lines contains an employee ID for which the projects need to be listed. Output For each query, output the project IDs the employee is working on in ascending order, separated by spaces. If the employee is not found, output \\"No Data\\". Constraints 1<= T <= 100 1 <= Q <= 50 1 <= Employee_ID, Project_ID <= 1000 Input: 4 101 202 101 303 102 202 103 303 2 101 104 Output: 202 303 No Data","solution":"def find_employee_projects(employee_projects, queries): This function takes a list of employee-project pairs and a list of queries for employee IDs. It returns the projects each queried employee is involved in. from collections import defaultdict # Dictionary to store the projects for each employee employee_dict = defaultdict(set) # Parse the employee-project pairs and fill the dictionary for emp_id, proj_id in employee_projects: employee_dict[emp_id].add(proj_id) results = [] # Process each query to get the projects for query in queries: if query in employee_dict: results.append(\\" \\".join(map(str, sorted(employee_dict[query])))) else: results.append(\\"No Data\\") return results"},{"question":"In a certain laboratory, scientists are testing a new way of combining chemical solutions. Each of these solutions has a specific concentration level, measured in integers from 1 to 100. The scientists want to mix these solutions in a way that the total concentration level is an even number. You are given an array of integers where each integer represents the concentration level of a solution. Your task is to determine the minimum number of solutions that need to be combined to achieve a total even concentration level. If it is impossible to achieve an even total concentration with any combination of the given solutions, return -1. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of solutions. The second line contains n integers ci (1 ≤ ci ≤ 100) — the concentration levels of the solutions. Output Output a single integer — the minimum number of solutions to combine to achieve an even total concentration level or -1 if it\'s not possible. Examples Input 5 1 3 5 7 9 Output -1 Input 6 2 4 6 8 10 12 Output 1 Input 4 1 2 3 5 Output 2 Note In the first example, there\'s no way to combine any number of the given solutions to get an even concentration level because all numbers are odd. In the second example, since all numbers are even, you only need to take one of them to achieve an even concentration level. In the third example, you can combine concentrations 1 and 3, or other similar odd pairs to get an even total concentration level.","solution":"def min_solutions_to_even_concentration(n, concentrations): This function takes an integer n and a list of concentrations and returns the minimum number of solutions needed to get an even total concentration. If this is not possible, it returns -1. :param n: Number of solutions :param concentrations: List of concentration levels of the solutions :return: Minimum number of solutions to get an even total concentration or -1 if not possible odd_count = sum(1 for c in concentrations if c % 2 != 0) even_count = n - odd_count # if there are no odd numbers, return 1 because any single even number will do if odd_count == 0: return 1 # if there are no even numbers, return -1 because it\'s impossible to get an even sum using only odd numbers if even_count == 0: return -1 # Otherwise, we need at least one even number and combine with odd numbers for an even sum return 2"},{"question":"Write a program to manage a collection of employees in a company with the following operations: * hire(id, salary): hire an employee with the given id and salary. * fire(id): remove the employee with the given id from the company. * promote(id, increment): increase the salary of the employee with the given id by the increment amount. * check(id): output the salary of the employee with the given id. If the employee is not found, output \\"Employee not found\\". Constraints * 1 ≤ q ≤ 100000 * 1 ≤ id ≤ 100000 * 1 ≤ salary, increment ≤ 100000 Input q query1 query2 : queryq In the first line, q (the number of queries) is given. Then, the ith query queryi is given in the following format: 1 id salary 2 id 3 id increment 4 id The first digit represents the type of the query. \'1\' denotes hire(id, salary), \'2\' denotes fire(id), \'3\' denotes promote(id, increment), and \'4\' denotes check(id). Output For each check operation, print the salary of the employee with the given id or \\"Employee not found\\" if the employee does not exist. Examples Input 5 1 101 50000 1 102 60000 3 101 5000 4 101 4 103 Output 55000 Employee not found Input 4 1 201 45000 2 201 4 201 4 202 Output Employee not found Employee not found","solution":"class Company: def __init__(self): self.employees = {} def hire(self, id: int, salary: int): self.employees[id] = salary def fire(self, id: int): if id in self.employees: del self.employees[id] def promote(self, id: int, increment: int): if id in self.employees: self.employees[id] += increment def check(self, id: int): if id in self.employees: return self.employees[id] else: return \\"Employee not found\\" def process_queries(q, queries): company = Company() results = [] for query in queries: parts = query.split() action = int(parts[0]) if action == 1: id = int(parts[1]) salary = int(parts[2]) company.hire(id, salary) elif action == 2: id = int(parts[1]) company.fire(id) elif action == 3: id = int(parts[1]) increment = int(parts[2]) company.promote(id, increment) elif action == 4: id = int(parts[1]) result = company.check(id) results.append(result) return results"},{"question":"Problem You are tasked with designing a software for managing a library\'s book inventory. Each book in the library is characterized by its title, author, genre, and year of publication. The library offers the following functionalities: 1. Add a new book 2. Remove a book by title 3. Search for a book by title 4. Search for books by author 5. List all books sorted by year of publication Your task is to implement this system using a class-based approach in Python. You need to implement the `Library` class, which will manage the book inventory. # Class `Book` - **Attributes**: - `title` (str): Title of the book - `author` (str): Author of the book - `genre` (str): Genre of the book - `year` (int): Year the book was published - **Methods**: - `__init__(self, title, author, genre, year)`: Initializes a new `Book` instance with the given attributes. # Class `Library` - **Attributes**: - `books` (list): A list that will hold the `Book` objects. - **Methods**: - `__init__(self)`: Initializes an empty list of books. - `add_book(self, book)`: Adds a `Book` object to the library. - `remove_book(self, title)`: Removes a book with the given title from the library. - `search_by_title(self, title)`: Searches for a book by its title and returns its details. - `search_by_author(self, author)`: Searches for books by an author and returns a list of those books. - `list_books_sorted_by_year(self)`: Lists all books sorted by the year of publication. # Implementation You need to implement the `Library` class and ensure it works with the given functionalities. Below are the constraints: - There will be no more than 1000 books in the library. - Year of publication is between 1000 and 9999. - Titles and authors are strings with a length of at most 100 characters. - You are not required to handle invalid inputs. # Examples Below is an example usage of the `Library` class: ```python # Creating book instances book1 = Book(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", \\"Fiction\\", 1951) book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"Fiction\\", 1960) book3 = Book(\\"1984\\", \\"George Orwell\\", \\"Dystopian\\", 1949) # Creating library instance and adding books library = Library() library.add_book(book1) library.add_book(book2) library.add_book(book3) # Removing a book library.remove_book(\\"1984\\") # Searching for a book by title print(library.search_by_title(\\"The Catcher in the Rye\\")) # Searching for books by author print(library.search_by_author(\\"Harper Lee\\")) # Listing books sorted by year print(library.list_books_sorted_by_year()) ``` # Expected Output ```python The Catcher in the Rye by J.D. Salinger, genre: Fiction, published: 1951 [To Kill a Mockingbird by Harper Lee, genre: Fiction, published: 1960] [1984 by George Orwell, genre: Dystopian, published: 1949, The Catcher in the Rye by J.D. Salinger, genre: Fiction, published: 1951, To Kill a Mockingbird by Harper Lee, genre: Fiction, published: 1960] ```","solution":"class Book: def __init__(self, title, author, genre, year): self.title = title self.author = author self.genre = genre self.year = year def __str__(self): return f\\"{self.title} by {self.author}, genre: {self.genre}, published: {self.year}\\" class Library: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def remove_book(self, title): self.books = [book for book in self.books if book.title != title] def search_by_title(self, title): for book in self.books: if book.title == title: return str(book) return \\"Book not found\\" def search_by_author(self, author): return [str(book) for book in self.books if book.author == author] def list_books_sorted_by_year(self): return [str(book) for book in sorted(self.books, key=lambda x: x.year)]"},{"question":"Alice loves puzzles and has recently started exploring unique patterns in nature. During one of her nature walks, she came across an interesting pattern in the arrangement of tree leaves. The leaves\' positions can be represented in a 2D grid where each position (i, j) indicates a leaf\'s height \'H\'. Alice observes that the height values increase as she moves right or down the grid. She now wants to analyze the maximum height difference between any two leaves in the grid. Your task is to compute the maximum height difference between any two leaves in the grid. The height difference is defined as the absolute difference between the heights of the leaves. **Input** The input consists of a single data set. - The first line contains two integers, `M` and `N`, representing the number of rows and columns in the grid, respectively. - The next `M` lines each contain `N` integers representing the height values `H` in the corresponding cells of the grid. **Output** Output a single integer representing the maximum height difference between any two leaves in the grid. **Example** Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 8 ``` **Explanation** In the given example, the grid is: ``` 1 2 3 4 5 6 7 8 9 ``` The maximum height difference is between the minimum height (1) and the maximum height (9), which is `|9 - 1| = 8`. **Constraints** - 1 ≤ M, N ≤ 100 - 0 ≤ H ≤ 1000","solution":"def max_height_difference(grid): Calculates the maximum height difference between any two leaves in a grid. Parameters: grid (list of list of int): 2D grid representing the heights of leaves. Returns: int: Maximum height difference. max_height = float(\'-inf\') min_height = float(\'inf\') for row in grid: for height in row: if height > max_height: max_height = height if height < min_height: min_height = height return max_height - min_height def read_input(input_str): Reads the input string and converts it to a grid of heights. Parameters: input_str (str): Multiline string with input data. Returns: list of list of int: 2D grid of heights. lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [list(map(int, lines[i + 1].split())) for i in range(M)] return grid def main(input_str): grid = read_input(input_str) return max_height_difference(grid)"},{"question":"In a small town, the mayor wants to build a series of monuments and parks. There are n parks, each numbered from 1 to n, where some of them need to be connected to pipe networks to provide water. Each connection between parks is bidirectional and can supply water to both parks involved. However, connecting two parks comes with a certain cost. The mayor has a list of potential connections which includes the cost associated with each connection. The goal is to connect all the parks in such a way that all the parks get water with the minimum total connection cost. Input The first line contains two integers, n (2 ≤ n ≤ 1000) representing the number of parks and m (1 ≤ m ≤ 10000) representing the number of potential connections. The following m lines each contain three integers, ui, vi, wi (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 1000) where ui and vi are the parks that can be connected by a pipe of cost wi. Output Print the minimum total cost required to connect all parks. If it is not possible to connect all parks, print -1. Examples Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 6 Input 4 3 1 2 3 2 3 4 4 4 1 Output -1","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_cost_to_connect_parks(n, m, connections): # Kruskal\'s algorithm # Step 1: Sort all the edges in non-decreasing order of their weight connections = sorted(connections, key=lambda x: x[2]) parent = [] rank = [] # Step 2: Create n disjoint sets (one for each vertex) for node in range(n): parent.append(node) rank.append(0) result = 0 # To store the minimum cost to connect all parks num_edges = 0 # To keep the count of edges chosen # Step 3: Pick the smallest edge and increment the index for the next iteration for connection in connections: u, v, w = connection x = find(parent, u-1) y = find(parent, v-1) # If including this edge does not cause a cycle, include it in the result # and increment the count of edges in the result if x != y: result += w union(parent, rank, x, y) num_edges += 1 # If we already have n-1 edges, stop the process if num_edges == n - 1: break # Check if the graph is connected (i.e., has exactly n-1 edges) if num_edges != n - 1: return -1 return result"},{"question":"You are given an array of integers representing a sequence of operations. Each element in the array is an integer that represents either an addition operation or a multiplication operation. Specifically, the integer x at the i-th position represents adding x or multiplying the current total by x. Starting with an initial value of 1, perform the operations in sequence on the current total. However, there\'s a twist: once the total reaches or exceeds a given threshold, any further addition and multiplication do not change the total (it remains fixed at that threshold). Write a function to calculate the final value after performing all given operations, constrained by the threshold condition. **Input** - An integer array `operations` where each element is an integer x (1 ≤ |x| ≤ 100) that represents either adding x (if x is positive) or multiplying by |x| (if x is negative). - An integer `threshold` (1 ≤ threshold ≤ 10^9). **Output** - Return an integer representing the final value after performing all given operations constrained by the threshold condition. **Example** ``` Input operations: [2, -3, 5, -2, 10] threshold: 100 Output 100 ``` ``` Input operations: [1, 1, 1, 1, -2] threshold: 10 Output 10 ``` **Explanation** In the first example, starting at 1: 1. Add 2 → total becomes 3 2. Multiply by 3 (|-3|) → total becomes 9 3. Add 5 → total becomes 14 4. Multiply by 2 (|-2|) → total becomes 28 5. Add 10 → total becomes 38 Since 38 < 100, the final total is 38 before reaching the threshold. But if the sequence would continue: 6. Any further addition or multiplication that sets the total ≥ threshold → total is capped at 100 In the second example, starting at 1: 1. Add 1 → total becomes 2 2. Add 1 → total becomes 3 3. Add 1 → total becomes 4 4. Add 1 → total becomes 5 5. Multiply by 2 (|-2|) → total becomes 10 The total reached the threshold of 10 and remains fixed.","solution":"def apply_operations(operations, threshold): Apply a sequence of operations with a threshold constraint. Parameters: operations (list of int): The list of operations to apply. threshold (int): The threshold value which the total should not exceed. Returns: int: The final value after applying the operations constrained by the threshold. total = 1 for op in operations: if abs(total) >= threshold: return threshold if op > 0: total += op else: total *= abs(op) if total >= threshold: return threshold return total"},{"question":"You are given a large text document, and your task is to analyze the frequency of words that appear in it. A word is defined as any contiguous sequence of alphabetic characters (both uppercase and lowercase letters are considered alphabetic). For the purpose of this problem, words are case insensitive. You must determine the frequency of each word in the document and then identify the top K most frequent words. If there is a tie (i.e., multiple words have the same frequency), the lexicographically smaller word should precede others in the list. Input: The first line contains an integer T denoting the number of test cases. Each test case consists of the following: - The first line contains an integer K representing the number of top frequent words to retrieve. - The second line contains the large text document. Output: For each test case, output K lines, each containing one of the top K most frequent words along with its frequency, sorted primarily by frequency in descending order and secondarily by the word in lexicographical order. Constraints: 1 ≤ T ≤ 50 1 ≤ K ≤ 100 1 ≤ length of document ≤ 10^6 SAMPLE INPUT 2 3 This is a test. This test is only a test. 2 Hello world! Hello everyone. Welcome to the world of programming. SAMPLE OUTPUT test 3 a 2 is 2 Hello 2 world 2 Explanation In the first test case, the word \\"test\\" appears 3 times, \\"this\\" and \\"is\\" appear 2 times each, but \\"a\\" is lexicographically smaller than \\"this\\". In the second test case, \\"Hello\\" and \\"world\\" both appear 2 times, so they are listed as the top 2 most frequent words.","solution":"import re from collections import Counter def top_k_frequent_words(T, test_cases): result = [] for K, document in test_cases: # Use regex to find all words (case-insensitive) words = re.findall(r\'bw+b\', document.lower()) # Calculate word frequencies word_count = Counter(words) # Sort words by frequency (descending) and lexicographically (ascending) sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Collect the top K frequent words result.append(sorted_words[:K]) return result def format_result(result): formatted_result = [] for case_result in result: for word, count in case_result: formatted_result.append(f\\"{word} {count}\\") return \\"n\\".join(formatted_result)"},{"question":"You are given an integer array `nums` consisting of `n` integers. Let\'s define a subsequence as harmonious if the difference between the maximum value and the minimum value in the subsequence is exactly `1`. Your task is to find the length of the longest harmonious subsequence in the array `nums`. A subsequence is a sequence derived from the array `nums` by deleting some or no elements without changing the order of the remaining elements. Input The first line of the input contains one integer `n` (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array `nums`. The second line of the input contains `n` integers `nums_1, nums_2, ..., nums_n` (1 ≤ nums_i ≤ 10^9), where `nums_i` is the i-th element of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5). Output Print the length of the longest harmonious subsequence in the array `nums`. If no harmonious subsequence exists, print 0. Example Input 8 1 3 2 2 5 2 3 7 Output 5 Explanation The longest harmonious subsequence is [3, 2, 2, 2, 3], which has a length of 5.","solution":"from collections import Counter def findLHS(nums): Finds the length of the longest harmonious subsequence in the array nums. num_count = Counter(nums) max_length = 0 for num in num_count: if num + 1 in num_count: max_length = max(max_length, num_count[num] + num_count[num + 1]) return max_length"},{"question":"You are given a list of integers and an integer target. Your task is to determine if there exist two distinct indices i and j in the list such that the sum of the elements at these indices equals the target. Write a function `find_pair_with_sum(nums: List[int], target: int) -> bool` that takes a list of integers `nums` and an integer `target`, and returns `True` if there exist two distinct indices i and j such that `nums[i] + nums[j] == target`, and `False` otherwise. Input - A single list of integers `nums`, where 2 <= len(nums) <= 1000 and -10^9 <= nums[i] <= 10^9. - A single integer `target`, where -10^9 <= target <= 10^9. Output - Return `True` if there are two distinct indices i and j in the list such that `nums[i] + nums[j] == target`. - Return `False` otherwise. Examples Input [2, 7, 11, 15], 9 Output True Input [3, 2, 4], 6 Output True Input [3, 3], 7 Output False","solution":"from typing import List def find_pair_with_sum(nums: List[int], target: int) -> bool: Returns True if there exist two distinct indices i and j in nums such that nums[i] + nums[j] == target. Returns False otherwise. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"You are tasked with making sure that a new system of subway lines does not have any cyclical routes. A cyclic route would mean there is a way to start at one station, travel along the subway lines, and return to the original station without traversing any line more than once. Your task is to determine whether the proposed set of subway lines contains any cycles. The subway system consists of n stations and m bidirectional lines. Each line connects exactly two different stations. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5; 0 ≤ m ≤ 10^5) – the number of stations and the number of subway lines, respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n; ui ≠ vi) – meaning there is a line connecting stations ui and vi. Output Output \\"YES\\" if the proposed set of subway lines contains any cycle, and \\"NO\\" otherwise. Examples Input 4 3 1 2 2 3 3 4 Output NO Input 4 4 1 2 2 3 3 4 4 1 Output YES","solution":"def detect_cycle(n, m, connections): from collections import defaultdict def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() for station in range(1, n + 1): if station not in visited: if dfs(station, -1): return \\"YES\\" return \\"NO\\""},{"question":"Imagine you are tasked with managing inventory in a warehouse. The warehouse operates using boxes of various weights and each box belongs to a specific category. Due to logistics constraints, you need to pack all items into a fixed number of containers, ensuring that the weight of items in each container falls within a given range. Your goal is to minimize the number of categories represented in each container, while still meeting the weight constraints. Write a program to help you distribute the boxes into containers. Input The first input line contains four integers n, m, W_min, and W_max (1 ≤ n, m ≤ 103, 1 ≤ W_min ≤ W_max ≤ 109) — the number of boxes, the number of containers, and the minimum and maximum allowed weight of each container, respectively. Each of the next n lines contains two integers wi and ci (1 ≤ wi ≤ W_max, 1 ≤ ci ≤ 2) — the weight and category of the i-th box. Output In the first line, print \\"YES\\" if it is possible to distribute the boxes according to the given constraints, otherwise print \\"NO\\". If the answer is \\"YES\\", then print m lines, where the i-th line contains the description of the i-th container as \\"t b1 b2 ... bt\\" (without the quotes), where t is the number of boxes in the i-th container, and b1, b2, ..., bt (1 ≤ bj ≤ n) are the indices of the boxes assigned to the i-th container. All indices provided in the output should be distinct, each box must belong to exactly one container. You may print the boxes in the containers in any order. If there are multiple suitable ways to distribute the boxes, you are allowed to print any one of them. Examples Input 4 2 3 10 3 1 4 1 5 2 2 2 Output YES 2 1 2 2 3 4 Input 5 2 10 15 5 1 3 1 4 2 6 2 5 1 Output NO Note In the first example, it is possible to distribute the boxes such that the weight of each container is within the specified range. Containers have the weights 7 and 7 respectively, meeting the requirements. In the second example, it is impossible to distribute the boxes among 2 containers without violating the weight constraints.","solution":"def distribute_boxes(n, m, W_min, W_max, boxes): from itertools import combinations # Initialize containers containers = [[] for _ in range(m)] container_weights = [0] * m # Sort boxes by weight in decreasing order sorted_boxes = sorted([(i+1, w, c) for i, (w, c) in enumerate(boxes)], key=lambda x: x[1], reverse=True) for i in range(n): idx, w, c = sorted_boxes[i] placed = False # Try to find a container to place the current box for j in range(m): if container_weights[j] + w <= W_max: containers[j].append(idx) container_weights[j] += w placed = True break # If the box couldn\'t be placed in any container, return NO if not placed: return \\"NO\\", [] # Ensure all containers meet the weight constraints for weight in container_weights: if weight < W_min or weight > W_max: return \\"NO\\", [] return \\"YES\\", containers"},{"question":"You are given an array of strings `words` and a string `order` that represents the new alphabetical order of letters. Your task is to determine if the given array of strings `words` is sorted lexicographically according to the new order of letters. Input - A single line containing the alphabet order in string format `order`. - The next line contains space-separated strings forming the array `words`. Output - Output a single line with \\"YES\\" if the array `words` is sorted according to the new alphabetical order, and \\"NO\\" otherwise. Constraints - Each string in `words` and the string `order` only consist of lowercase English letters. - 1 ≤ |`words`| ≤ 1000 - 1 ≤ |`order`| = 26 - 1 ≤ length of each string in the array ≤ 100 Example Input hlabcdefgijkmnopqrstuvwxyz hello leetcode Output YES Input worldabcefghijkmnpqstuvxyz word world row Output NO","solution":"def is_sorted(words, order): Determines if the array of strings \'words\' is sorted according to the given \'order\'. order_index = {char: idx for idx, char in enumerate(order)} def compare(word1, word2): len1, len2 = len(word1), len(word2) for i in range(min(len1, len2)): if word1[i] != word2[i]: return order_index[word1[i]] < order_index[word2[i]] return len1 <= len2 for i in range(len(words) - 1): if not compare(words[i], words[i + 1]): return \\"NO\\" return \\"YES\\" # Usage # print(is_sorted([\\"hello\\", \\"leetcode\\"], \\"hlabcdefgijkmnopqrstuvwxyz\\")) # Expected output: YES # print(is_sorted([\\"word\\", \\"world\\", \\"row\\"], \\"worldabcefghijkmnpqstuvxyz\\")) # Expected output: NO"},{"question":"Given a list of integers, write a function to check if the list contains any duplicates. Your function should return `True` if any value appears at least twice in the list, and `False` if every element is distinct. Constraints * The input list will have at most 10^4 elements. * Each element in the list is an integer between -10^5 and 10^5. Input The input is given as a single list of integers. Output The output is a single boolean value. Examples Input [1, 2, 3, 4, 5] Output False Input [1, 2, 3, 2, 5] Output True","solution":"def contains_duplicates(nums): Returns True if the list contains any duplicates, otherwise False. return len(nums) != len(set(nums))"},{"question":"Bill is an avid gardener and loves organizing his plants in rows. Each row can have a different number of plants, and he always ensures that the number of plants in any row is either equal to or one more than the number of plants in the previous row. To be precise, if row `i` has `r_i` plants, then row `i+1` can have `r_i` or `r_i + 1` plants. Bill wants to count the number of ways he can organize his garden rows subject to the condition that the total number of plants in his garden is exactly `N`. Given a positive integer `N`, determine the number of distinct ways Bill can organize the rows of plants. Print the result modulo `1000000007`. Input The input contains a single integer `N` (1 ≤ N ≤ 1000). Output Output a single integer representing the number of distinct ways to organize the garden rows, taken modulo `1000000007`. Example Input 5 Output 7 Explanation The 7 ways to arrange 5 plants are: 1. [5] 2. [1, 4] 3. [2, 3] 4. [1, 1, 3] 5. [1, 2, 2] 6. [2, 1, 2] 7. [1, 1, 1, 2]","solution":"def count_ways(N): MOD = 1000000007 ways = [0] * (N + 1) ways[0] = 1 # There\'s one way to arrange 0 plants for i in range(1, N + 1): for j in range(i, N + 1): ways[j] = (ways[j] + ways[j - i]) % MOD return ways[N] # Example usage: # print(count_ways(5)) # Should return 7"},{"question":"You are given a binary string s of length n consisting of characters \'0\' and \'1\'. You can flip exactly one character from \'0\' to \'1\' or vice versa in each move. You want to make the binary string symmetrical (i.e., it reads the same forward and backward). Your task is to find the minimum number of moves required to make the binary string symmetrical. Input The first line of input contains one integer n (1 ≤ n ≤ 200,000): the length of the binary string. The second line of input contains a binary string s of length n. Output Print one integer, the minimum number of moves required to make the binary string symmetrical. Examples Input 5 01100 Output 1 Input 4 1001 Output 0","solution":"def min_moves_to_symmetrical(n, s): Returns the minimum number of moves required to make the binary string symmetrical. Parameters: n (int): Length of the binary string. s (str): Binary string consisting of \'0\'s and \'1\'s. Returns: int: Minimum number of moves required. moves = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: moves += 1 return moves"},{"question":"There is a popular game that involves finding patterns in a grid of lights. Each cell in the grid can either be on or off, represented by ‘1’ and ‘0’ respectively. You need to determine the size of the largest square sub-grid that contains only ‘1’s. The output should be the area of this largest square sub-grid. Input format: The first line contains an integer, T, denoting the number of test cases. Each test case starts with two integers, N and M, denoting the size of the grid (rows and columns, respectively). The following N lines contain M integers, denoting the values in the grid. Output format: For each test case, print the area of the largest square sub-grid of ‘1’s. Constraints: 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 Each element of the grid is either \'0\' or \'1\'. SAMPLE INPUT 2 4 5 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 3 3 1 0 1 0 1 0 1 0 1 SAMPLE OUTPUT 4 1 Explanation In the first test case, the largest square sub-grid with all \'1\'s has size 2x2. Its area is 4. In the second test case, the largest square sub-grid with all \'1\'s has size 1x1. Its area is 1.","solution":"def max_square_area(grid): if not grid or not grid[0]: return 0 N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] # Initialize the first row and first column for i in range(N): dp[i][0] = grid[i][0] for j in range(M): dp[0][j] = grid[0][j] max_side = 0 for i in range(N): for j in range(M): if grid[i][j] == 1: if i > 0 and j > 0: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = grid[i][j] max_side = max(max_side, dp[i][j]) return max_side * max_side def largest_square_subgrid(T, cases): results = [] for case in cases: N, M, grid = case results.append(max_square_area(grid)) return results"},{"question":"Aria and Boris are playing a game with a string of lowercase English letters. The game proceeds in rounds. In each round, Aria selects a subsequence of the string, and Boris tries to replace each character in the selected subsequence with some other lowercase English letter such that the string becomes a palindrome. Aria wants to know if it is possible to choose a subsequence in such a way that no matter what modifications Boris makes, the string will never be transformed into a palindrome. Aria needs your help to determine this. A string is a palindrome if it reads the same backward as forward. Input The input consists of a single string s (1 ≤ |s| ≤ 200000) — the original string. Output Output \\"YES\\" if Aria can select such a subsequence; otherwise, output \\"NO\\". Examples Input abcba Output NO Input abcd Output YES Input aabb Output NO Note In the first example case, the string \\"abcba\\" is already a palindrome, so any subsequence chosen can potentially still be transformed to a palindrome. In the second example case, Aria can select the entire string \\"abcd\\". Regardless of how Boris tries to change the characters, the string cannot be turned into a palindrome. In the third example case, \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\", which are palindromes. Therefore, Aria cannot select a subsequence to meet her criteria.","solution":"def can_select_subsequence(s): Determines if Aria can select a subsequence in which the string cannot be made a palindrome. # A string can always be rearranged to a palindrome if it contains at most one character with an odd count frequency. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 odd_count = sum(1 for count in frequency.values() if count % 2 == 1) # If there are two or more characters with an odd frequency, it is impossible to rearrange them into a palindrome. if odd_count >= 2: return \\"YES\\" else: return \\"NO\\""},{"question":"Consider a string S consisting of lowercase English letters. S is called \\"almost palindrome\\" if you can convert it to a palindrome by removing exactly one character. Your task is to determine whether the given string is an \\"almost palindrome\\". Input The first line contains a single integer T - the number of test cases. Each of the next T lines contains a string S. Output For each test case, print \\"YES\\" if the given string is an \\"almost palindrome\\", otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 Example Input: 3 abca racecar abccba Output: YES NO NO Explanation \\"abca\\" can become a palindrome (\\"aca\\" or \\"aba\\") by removing exactly one character. \\"racecar\\" is already a palindrome, so removing any character would make it not a palindrome. \\"abccba\\" is also already a palindrome, so removing any character would not fulfill the condition.","solution":"def is_almost_palindrome(s): Check if a string can be converted to a palindrome by removing exactly one character. def is_palindrome_range(i, j): Check if string is palindrome between indexes i and j inclusive. while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Two cases: remove left or remove right return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return False def solve(test_cases): Process the list of test cases and determine if each string is an \\"almost palindrome\\". results = [] for s in test_cases: if is_almost_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a program that reads an integer n and a sequence of n integers a_1, a_2, ldots, a_n. The program should then construct and print a new sequence b_1, b_2, ldots, b_n, where each b_i is the sum of the a_i and all previous elements in the sequence a. Specifically, the element b_i is obtained using the following formula: [ b_i = sum_{k=1}^i a_k ] Note 解説 Constraints * 1 leq n leq 1000 * Each a_i is an integer such that -1000 leq a_i leq 1000 Input In the first line, an integer n is given. In the second line, n integers a_1, a_2, ldots, a_n are given separated by space characters. Output Print the sequence b in one line. Print a single space character between adjacent elements. Example Input 5 1 -2 3 -1 2 Output 1 -1 2 1 3","solution":"def cumulative_sum_sequence(n, a): Generates the cumulative sum sequence b from the input sequence a. Parameters: n (int): The number of elements in the sequence. a (list of int): The input sequence of integers. Returns: list of int: The cumulative sum sequence. b = [0] * n for i in range(n): if i == 0: b[i] = a[i] else: b[i] = b[i - 1] + a[i] return b"},{"question":"A system administrator is managing a network of N computers. Each computer is assigned a unique identifier from 1 to N. The administrator needs to ensure that all the computers are able to communicate with each other, either directly or indirectly, through a series of connections. Connections between the computers are represented as pairs of computer identifiers (u, v), indicating that computer u is directly connected to computer v. Determine if the network is fully connected. If every computer can communicate with every other computer, print `Connected`; otherwise, print `Disconnected`. Constraints * 1 leq N leq 100 * 0 leq E leq N*(N-1)/2 (where E is the number of connections) * 1 leq u, v leq N * u ≠ v * No duplicate connections are provided. Input Input is given from Standard Input in the following format: N E u1 v1 u2 v2 ... uE vE Output If the network is fully connected, print `Connected`; otherwise, print `Disconnected`. Examples Input 4 3 1 2 2 3 3 4 Output Connected Input 4 2 1 2 3 4 Output Disconnected Input 5 4 1 2 2 3 3 4 4 5 Output Connected","solution":"def is_network_connected(N, connections): from collections import defaultdict, deque graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) return \\"Connected\\" if len(visited) == N else \\"Disconnected\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) E = int(data[1]) connections = [] index = 2 for _ in range(E): u = int(data[index]) v = int(data[index + 1]) connections.append((u, v)) index += 2 print(is_network_connected(N, connections))"},{"question":"You are given a rectangular grid of size MxN where each cell in the grid either contains a 0 or a 1. A block is defined as a collection of connected 1s. Two cells are connected if they share an edge. Your task is to determine the size of the largest block (number of cells) composed of \'1\'s in the grid. Write a program that takes in several test cases, each with a grid of varying sizes. For each grid, find and print the size of the largest block of connected 1s. INPUT The first line contains T, the number of test cases. For each test case, the first line contains two integers M (number of rows) and N (number of columns). The next M lines each contain a string of N characters representing the grid (each character is either \'0\' or \'1\'). OUTPUT The output should contain T lines. Each line contains the size of the largest connected block of 1s for the corresponding grid. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 SAMPLE INPUT 2 4 4 1100 1100 0010 0001 3 3 101 010 101 SAMPLE OUTPUT 4 1","solution":"def largest_block_size(grid, M, N): def dfs(i, j): if i < 0 or j < 0 or i >= M or j >= N or grid[i][j] == \'0\': return 0 grid[i][j] = \'0\' # Mark the cell as visited size = 1 # Explore all 4 possible directions size += dfs(i + 1, j) size += dfs(i - 1, j) size += dfs(i, j + 1) size += dfs(i, j - 1) return size max_size = 0 for i in range(M): for j in range(N): if grid[i][j] == \'1\': max_size = max(max_size, dfs(i, j)) return max_size def process_test_cases(test_cases): results = [] for grid_info in test_cases: M, N, grid = grid_info grid = [list(row) for row in grid] results.append(largest_block_size(grid, M, N)) return results # Example usage: # test_cases = [ # (4, 4, [\'1100\', \'1100\', \'0010\', \'0001\']), # (3, 3, [\'101\', \'010\', \'101\']), # ] # print(process_test_cases(test_cases))"},{"question":"Write a program to calculate the factorial of a given positive integer. SAMPLE INPUT 5 SAMPLE OUTPUT 120","solution":"def factorial(n): Returns the factorial of a given positive integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") if n == 0: return 1 fact = 1 for i in range(1, n + 1): fact *= i return fact"},{"question":"In a desolate and barren land, there are certain watering stations that are designated for the LoneliCamel to refill its water supply. The land can be depicted as an m × m grid, where each point (x, y) (0 ≤ x, y ≤ m) represents a potential watering station. The LoneliCamel can travel in four directions: North, South, East, West. If a watering station exists at a certain grid point, the camel will stop and refill its water automatically when it reaches that point. Given the initial position of the camel on the grid, its starting direction, and the number of steps it will take, determine the final position of the camel after it has moved the given number of steps. Input The first line contains two integers: the number of watering stations w and the size of the grid m (0 ≤ w ≤ 1000, 1 ≤ m ≤ 10^9). Each of the next w lines contains two space-separated integers xi and yi (0 ≤ xi, yi ≤ m) representing the coordinates of a watering station. The next line contains an integer p denoting the number of plans for the camel\'s journey (1 ≤ p ≤ 10^5). Each of the next p lines contains four space-separated integers xj, yj representing the initial coordinates of the camel (0 ≤ xj, yj ≤ m), character dj representing the initial direction (N, S, E, W) and the number of steps tj the camel will take (0 ≤ tj ≤ 10^15). Output For each plan, print the final coordinates of the camel after it has moved the given number of steps. If the camel hits the edge of the land and cannot move further in that direction, print the coordinates where it stops. Examples Input 3 5 1 2 3 3 4 1 4 0 0 N 2 2 2 E 4 5 5 S 3 1 1 W 6 Output 0 2 5 2 2 5 0 1","solution":"def move_camel(w, m, watering_stations, plans): Determines the final coordinates of the camel after moving in a desolate land based on the given watering stations, initial positions, directions, and steps. Parameters: - w (int): Number of watering stations. - m (int): Size of the grid. - watering_stations (list of tuples): List containing each watering station\'s coordinates (xi, yi). - plans (list of tuples): List containing each plan in the format (xj, yj, dj, tj). Returns: - list of tuples: Final coordinates of the camel for each plan. watering_set = set(watering_stations) results = [] for plan in plans: x, y, direction, steps = plan if direction == \'N\': y = min(m, y + steps) elif direction == \'S\': y = max(0, y - steps) elif direction == \'E\': x = min(m, x + steps) elif direction == \'W\': x = max(0, x - steps) results.append((x, y)) return results"},{"question":"Gleb is preparing for his latest coding challenge. He has a number of projects, each requiring a certain amount of time to complete. Gleb has M (1 ≤ M ≤ 100) hours available each day to work on his projects, but he can decide in which order to work on them. Gleb also knows the amount of time each project will take, and he aims to complete all projects as soon as possible. Gleb needs your help to determine the earliest day by which he can finish all his projects. Each project can be started and stopped at any hour, but once started, it must be worked on continuously within the given day until completion. Input The first line contains two integers N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 100)—the number of projects and the number of hours Gleb can work each day, respectively. The next line contains N integers t1, t2, ..., tN (1 ≤ ti ≤ 1000), where each ti represents the number of hours required to complete the ith project. Output Print a single integer—the number of days required for Gleb to complete all his projects. Examples Input 3 8 5 2 4 Output 2 Input 4 3 3 3 3 3 Output 4 Input 5 6 2 5 8 4 9 Output 5 Note In the first example, Gleb can complete all projects in 2 days: - On the first day, he can complete the projects that take 5 hours and 2 hours (total of 7 hours). - On the second day, he can complete the project that takes 4 hours. In the second example, Gleb needs 4 days because each project takes exactly 3 hours and he can work 3 hours each day. In the third example, Gleb needs 5 days to complete all projects: - On the first day, he can complete the project that takes 2 hours (leaving 4 hours unused). - On the second day, he completes the project that takes 5 hours (leaving 1 hour unused). - On the third day, he completes the project that takes 4 hours (leaving 2 hours unused). - On the fourth day, he completes the project that takes 9 hours (using the entire day). - On the fifth day, he completes the project that takes 8 hours (using the entire day).","solution":"def min_days_to_complete_projects(N, M, project_times): Returns the minimum number of days required to complete all projects. days = 0 day_hours_left = M for time in project_times: if time <= day_hours_left: day_hours_left -= time else: days += 1 day_hours_left = M - time if day_hours_left < M: days += 1 # This covers any last residual hours spent on projects return days"},{"question":"# Problem: Array Segments Summation You are given an array of integers, and your task is to find the sum of elements in specified segments of the array. Each segment is defined by its starting and ending indices (inclusive). Write a function `segment_sum(arr: List[int], queries: List[Tuple[int, int]]) -> List[int]` that takes an array `arr` and a list of queries, where each query is a tuple containing two integers representing the start and end indices of a segment (0-based index). The function should return a list of sums, corresponding to the sum of elements for each segment in the input queries. # Input - An array `arr` of n integers (1 ≤ n ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). - A list of m queries (1 ≤ m ≤ 10^5), where each query is a tuple of two integers (l, r) representing the start and end indices of the segment (0 ≤ l ≤ r < n). # Output - Return a list of integers, where the i-th integer is the sum of elements in the segment defined by the i-th query. # Example Input ```python arr = [1, 2, 3, 4, 5] queries = [(1, 3), (0, 2), (2, 4)] ``` Output ```python [9, 6, 12] ``` Explanation - For the query (1, 3), the sum is 2 + 3 + 4 = 9. - For the query (0, 2), the sum is 1 + 2 + 3 = 6. - For the query (2, 4), the sum is 3 + 4 + 5 = 12. # Note To achieve optimal performance given the constraints, consider using prefix sums or other efficient methods for calculating the sum of array segments. # Implementation ```python def segment_sum(arr, queries): # Calculate prefix sums prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for l, r in queries: results.append(prefix_sums[r + 1] - prefix_sums[l]) return results # Example usage arr = [1, 2, 3, 4, 5] queries = [(1, 3), (0, 2), (2, 4)] print(segment_sum(arr, queries)) # Output: [9, 6, 12] ```","solution":"from typing import List, Tuple def segment_sum(arr: List[int], queries: List[Tuple[int, int]]) -> List[int]: Given an array of integers and a list of queries specifying start and end indices, returns the sum of elements for each segment defined by the queries. # Calculate prefix sums prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for l, r in queries: results.append(prefix_sums[r + 1] - prefix_sums[l]) return results"},{"question":"Given a list of integers, you are to determine the maximum sum of any non-empty subarray of the list. A subarray is defined as a contiguous portion of the array. Your task is to write a function that calculates this maximum sum efficiently. Input format: - The first line contains a single integer N, the length of the list. - The second line contains N space-separated integers representing the elements of the list. Output format: - Print a single integer, the maximum sum of any non-empty subarray of the list. Constraints: 1 ≤ N ≤ 10^5 -10^6 ≤ list[i] ≤ 10^6 SAMPLE INPUT 8 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation: The subarray with the maximum sum is [4, -1, 2, 1], which has a sum of 6.","solution":"def max_subarray_sum(arr): Given a list of integers, this function calculates the maximum sum of any non-empty subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Polycarp loves constructing sequences. He recently learned about arithmetic sequences and decided to create his own. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. Polycarp wants to construct a sequence with terms denoted as a_1, a_2, ..., a_n, where the difference between consecutive terms is d (i.e., a_i+1 - a_i = d for 1 ≤ i < n). Polycarp wants to generate a subsequence from an initial array b of m elements, by removing some elements (possibly zero) such that the resulting subsequence forms an arithmetic sequence. Help Polycarp determine the length of the longest possible arithmetic subsequence he can obtain from array b. Input The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer m (1 ≤ m ≤ 2 ⋅ 10^5) — the length of the array b. The second line of each test case contains m numbers b_1, b_2, …, b_m (1 ≤ b_i ≤ 2 ⋅ 10^5) — elements of the array b. Output For each test case output one integer — the length of the longest arithmetic subsequence that can be obtained from the array b. Example Input 4 5 1 5 7 8 9 6 2 4 6 8 10 12 4 1 3 5 7 3 5 1 4 Output 3 6 4 2 Note In the first test case, one of the possible longest arithmetic subsequences is [5, 7, 9]. In the second test case, the entire array already forms an arithmetic subsequence with a common difference of 2. In the third test case, the entire array forms an arithmetic sequence with a common difference of 2. In the fourth test case, one of the possible longest arithmetic subsequences is [1, 4].","solution":"def longest_arithmetic_subsequence_length(b): n = len(b) if n == 1: return 1 lengths = {} max_length = 1 for i in range(n): for j in range(i + 1, n): diff = b[j] - b[i] if (i, diff) in lengths: lengths[(j, diff)] = lengths[(i, diff)] + 1 else: lengths[(j, diff)] = 2 max_length = max(max_length, lengths[(j, diff)]) return max_length def process_input(t, test_cases): results = [] for i in range(t): m, b = test_cases[i] results.append(longest_arithmetic_subsequence_length(b)) return results"},{"question":"Consider a list of non-negative integers where every number except one appears twice. Your task is to identify the number that appears only once. Write a function `findUniqueNumber` to accomplish this. The function should take a single list of integers as its argument and return the integer that only appears once. **Function signature:** `def findUniqueNumber(arr: List[int]) -> int:` **Input:** - `arr`: a list of non-negative integers where all numbers except one appear exactly twice. **Output:** - An integer representing the number that appears only once. **Example:** **Input:** ```python [4, 1, 2, 1, 2] ``` **Output:** ```python 4 ``` **Input:** ```python [2, 2, 3, 5, 3] ``` **Output:** ```python 5 ``` **Constraints:** - The input list will have at least 1 element and a maximum of 10^5 elements. - Every element in the list is a non-negative integer less than or equal to 10^6. - There will always be exactly one unique number in the input list.","solution":"def findUniqueNumber(arr): Find the number that appears only once in a list where every other number appears twice. Args: arr: List[int] - List of non-negative integers Returns: int - The unique number that appears only once unique_number = 0 for num in arr: unique_number ^= num return unique_number"},{"question":"Sam loves playing with strings and performing various operations on them. He recently came across a challenge where he needs to determine the longest palindromic substring within a given string. A palindromic substring is a contiguous sequence of characters that reads the same forward and backward. Your task is to write a program that finds the longest palindromic substring in a given string and returns its length. Input: The first and only line of input contains a string S, consisting of lowercase letters. Output: Print the length of the longest palindromic substring in S. Constraints: 1 ≤ |S| ≤ 1000 SAMPLE INPUT babad SAMPLE OUTPUT 3","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"Given an array of integers, you need to perform a series of range xor operations and range updates on this array. There are two types of queries you need to handle: * 1 l r x — xor all the elements in the subarray from index l to index r (inclusive) by the integer x. * 2 l r x — update all the elements in the subarray from index l to index r (inclusive) by setting them to x. After processing all queries, output the resulting array. Input The first line of input contains two integers n (1 ≤ n ≤ 100000) and q (1 ≤ q ≤ 100000) — the size of the array and the number of queries. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the initial elements of the array. The following q lines describe the queries in the format specified: * 1 l r x (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 109) — xor all elements in the subarray a[l], a[l+1], ..., a[r] with x. * 2 l r x (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 109) — set all elements in the subarray a[l], a[l+1], ..., a[r] to x. Output Output the resulting array after processing all queries. Example Input 5 4 1 2 3 4 5 1 1 3 2 2 2 4 6 1 3 5 1 2 1 2 9 Output 9 9 7 5 1 Explanation Initially, the array is [1, 2, 3, 4, 5]. 1. After the first query (1 1 3 2), the array becomes [3, 0, 1, 4, 5]. 2. After the second query (2 2 4 6), the array becomes [3, 6, 6, 6, 5]. 3. After the third query (1 3 5 1), the array becomes [3, 6, 7, 7, 4]. 4. After the fourth query (2 1 2 9), the array becomes [9, 9, 7, 7, 4].","solution":"def process_queries(n, q, array, queries): Processes range xor and range update queries on the given array. Parameters: n (int): the size of the array q (int): the number of queries array (list of int): the initial elements of the array queries (list of tuple): the queries to process Returns: list of int: the resulting array after processing all queries for query in queries: type_query = query[0] l, r, x = query[1], query[2], query[3] # Convert to zero-based indexing l -= 1 r -= 1 if type_query == 1: # XOR all elements in the subarray from index l to index r by x for i in range(l, r + 1): array[i] ^= x elif type_query == 2: # Set all elements in the subarray from index l to index r to x for i in range(l, r + 1): array[i] = x return array"},{"question":"I\'m making a new recipe and I need your help to determine whether I have enough ingredients to make it. You are given a list of ingredients needed for a recipe and the quantity of each ingredient you currently have in your kitchen. Write a program to check whether you can make the recipe with the given quantities of ingredients. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of ingredients needed for the recipe. - The next `n` lines each contain a string `ingredient_name` and an integer `required_quantity`, representing an ingredient and its required quantity for the recipe. - The following line contains an integer `m` (1 ≤ m ≤ 100), the number of ingredients you have in your kitchen. - The next `m` lines each contain a string `ingredient_name` and an integer `available_quantity`, representing an ingredient you have and its quantity in your kitchen. # Output - Output \\"Yes\\" if you can make the recipe with the given ingredients, otherwise print \\"No\\". # Example Input ``` 3 milk 500 sugar 200 flour 300 3 milk 500 sugar 300 flour 100 ``` Output ``` No ``` Input ``` 2 butter 100 salt 50 2 butter 150 salt 50 ``` Output ``` Yes ``` # Note In the first example, you cannot make the recipe because the available quantity of flour (100) is less than the required quantity (300). In the second example, you can make the recipe because the available quantities of butter and salt are at least equal to their required quantities.","solution":"def can_make_recipe(n, recipe_ingredients, m, kitchen_ingredients): recipe_dict = {ingredient: qty for ingredient, qty in recipe_ingredients} kitchen_dict = {ingredient: qty for ingredient, qty in kitchen_ingredients} for ingredient, required_qty in recipe_dict.items(): if kitchen_dict.get(ingredient, 0) < required_qty: return \\"No\\" return \\"Yes\\""},{"question":"You are given a string ( s ) consisting of lowercase English letters and the characters ‘_’ (underscore). You need to determine the number of distinct strings that can be formed for each underscore in the string, such that the resulting string has only lowercase English letters and no underscores. Each underscore must be replaced by a lowercase English letter (\'a\' to \'z\'). Input The input consists of a single string ( s ) (1 ≤ |s| ≤ 10^5) where |s| denotes the length of the string. The string contains only lowercase English letters and underscores. Output Output a single integer: the number of distinct strings that can be formed. Examples Input ``` a_d ``` Output ``` 676 ``` Input ``` __b_c_ ``` Output ``` 11881376 ``` Note For the first test case, the input string is \\"a_d\\". The underscore can be replaced by any of the 26 lowercase English letters, resulting in 26 choices for the first underscore and 26 choices for the second, giving a total of 26 * 26 = 676 distinct strings. For the second test case, the input string is \\"__b_c_\\". Each of the three underscores can be replaced by any of the 26 lowercase English letters, resulting in (26^5 = 11881376) distinct strings.","solution":"def distinct_strings_count(s): Returns the number of distinct strings that can be formed by replacing underscores with lowercase English letters. underscores_count = s.count(\'_\') return 26 ** underscores_count"},{"question":"A company has employees organized hierarchically in a tree. Each employee has a distinct rank represented by an integer. The CEO of the company is the root of the tree, and each employee reports to exactly one supervisor, except for the CEO who reports to no one. Given the hierarchical structure of the employees, the company wants to ensure that there are no \\"rank conflicts\\" in any part of the hierarchy. A \\"rank conflict\\" occurs if a supervisor has the same rank as any of their direct or indirect subordinates. Write a function that, given the hierarchical structure and ranks of the employees, checks whether there are any rank conflicts in the hierarchy. # Function Signature ```python def has_rank_conflict(n: int, ranks: List[int], hierarchy: List[Tuple[int, int]]) -> bool: ``` # Input - `n`: An integer representing the number of employees (2 ≤ n ≤ 10^5). - `ranks`: A list of n integers where the i-th integer represents the rank of the (i+1)-th employee in 1-based indexing (1 ≤ ranks[i] ≤ 10^9). - `hierarchy`: A list of (n-1) tuples where each tuple (u, v) represents an edge from employee u to employee v, indicating that employee v reports directly to employee u. (1 ≤ u, v ≤ n) # Output - Return `True` if there is any rank conflict in the hierarchy. Otherwise, return `False`. # Examples Example 1 Input ```python n = 4 ranks = [4, 2, 3, 2] hierarchy = [(1, 2), (1, 3), (3, 4)] ``` Output ```python False ``` Example 2 Input ```python n = 3 ranks = [1, 2, 1] hierarchy = [(1, 2), (1, 3)] ``` Output ```python True ``` Example 3 Input ```python n = 5 ranks = [5, 3, 6, 3, 7] hierarchy = [(1, 2), (1, 3), (2, 4), (3, 5)] ``` Output ```python True ``` # Note - You can assume that the input always forms a valid tree. - The function should be efficient and able to handle the upper constraints promptly.","solution":"from typing import List, Tuple from collections import defaultdict, deque def has_rank_conflict(n: int, ranks: List[int], hierarchy: List[Tuple[int, int]]) -> bool: # Build the adjacency list tree = defaultdict(list) for u, v in hierarchy: tree[u].append(v) # Use a set to track ranks seen in the current DFS/branch visited = [False] * (n + 1) def dfs(node, rank_set): if ranks[node - 1] in rank_set: return True rank_set.add(ranks[node - 1]) visited[node] = True for child in tree[node]: if not visited[child]: if dfs(child, rank_set): return True rank_set.remove(ranks[node - 1]) return False # Start DFS from the root (assumed to be employee 1) return dfs(1, set())"},{"question":"In a mystical land, there is a grove with N enchanted trees, each possessing a certain magic power. Elves visit this grove for their rituals and need to know the most powerful enchanted tree within a certain range multiple times throughout the year. Your task is to help the elves by answering their queries about the most powerful tree in different ranges. Each tree has a positive integer value representing its magic power. Given multiple queries, each specifying a range of trees, report the maximum magic power within that range. Input The first line contains an integer N (1 ≤ N ≤ 100,000) — the number of trees in the grove. The second line contains N integers p_1, p_2, ..., p_N (1 ≤ p_i ≤ 1,000,000) — the magic power of each tree. The third line contains an integer Q (1 ≤ Q ≤ 100,000) — the number of queries. Each of the next Q lines contains two integers L and R (1 ≤ L ≤ R ≤ N) — the range (inclusive) of the trees for which the maximum magic power needs to be found. Output For each query, print the maximum magic power within the specified range in a separate line. Examples Input 5 10 20 30 40 50 3 1 3 2 5 3 4 Output 30 50 40","solution":"def max_magic_powers(N, powers, Q, queries): Returns the maximum magic powers for given ranges in queries. Parameters: N (int): The number of trees. powers (list): A list containing the magic power of each tree. Q (int): The number of queries. queries (list): A list containing the ranges for each query as tuples (L, R). Returns: list: A list of maximum magic powers for each range provided in queries. result = [] for L, R in queries: max_power = max(powers[L-1:R]) result.append(max_power) return result"},{"question":"You are given an array of integers `arr` of length `N`, where every element in the array belongs to the set {1, 2, 3}. You can perform the following operation on the array exactly N-1 times: select two adjacent elements and replace them with their sum. The resulting array will then have a length of N-1. Repeat this process until only one element remains in the array. Find the number of distinct possible values of the final element that remain in the array when only one element is left. Since the number can be large, return the result modulo 10^9+7. Constraints * 1 ≤ N ≤ 100,000 * Each element in the array is 1, 2, or 3. Input Input is given from Standard Input in the following format: N arr Output Print the number of distinct possible values of the final element, modulo 10^9+7. Examples Input 3 1 2 3 Output 4 Input 4 1 1 1 1 Output 1 Input 5 1 2 1 2 1 Output 7","solution":"def distinct_final_values(N, arr): Returns the number of distinct possible values of the final element when only one element is left, modulo 10^9+7. MOD = 10**9 + 7 return (2 * N + 1) % MOD"},{"question":"You are given an array of integers. The task is to find all the integers in this array, that when multiplied together, equal the largest product obtainable by multiplying three distinct elements from the array. Input The first line contains one integer `n` (3 <= n <= 1000) — the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (-1000 <= ai <= 1000) — the elements of the array. Output Print three integers from the array that give the largest product when multiplied together. Print them in any order. If there are multiple sets of elements with the same maximum product, any set can be printed. Examples Input 5 1 2 3 4 5 Output 3 4 5 Input 6 -10 -10 1 3 2 4 Output -10 -10 4","solution":"def largest_product_of_three(arr): Given an array of integers, finds three distinct elements that give the largest product when multiplied together. # Sort the array. arr.sort() # The maximum product of three can either be: # - The product of the three largest numbers. # - The product of the two smallest (most negative) numbers and the largest number. max1 = arr[-1] * arr[-2] * arr[-3] max2 = arr[0] * arr[1] * arr[-1] if max1 > max2: return [arr[-3], arr[-2], arr[-1]] else: return [arr[0], arr[1], arr[-1]]"},{"question":"You\'re given a non-empty string s consisting entirely of lowercase English letters. You need to perform the following transformation on the string: For each character in the string, if it is a vowel (one of \'a\', \'e\', \'i\', \'o\', \'u\'), you need to replace it with the next vowel in the sequence (\'a\'->\'e\', \'e\'->\'i\', \'i\'->\'o\', \'o\'->\'u\', \'u\'->\'a\'). If the character is a consonant, leave it unchanged. Your task is to transform the string and print the resulting string. Input The input contains a single line with a string s (1 ≤ |s| ≤ 100000). Output Output the transformed string. Examples Input hello Output hillu Input programming Output prugremmong","solution":"def transform_string(s): Transforms the input string s by replacing each vowel with the next vowel in the sequence. vowels = \'aeiou\' next_vowel = {\'a\': \'e\', \'e\': \'i\', \'i\': \'o\', \'o\': \'u\', \'u\': \'a\'} transformed_chars = [] for char in s: if char in vowels: transformed_chars.append(next_vowel[char]) else: transformed_chars.append(char) return \'\'.join(transformed_chars)"},{"question":"A group of students is participating in a treasure hunt game, where they need to unlock a hidden treasure chest. The chest is locked with a special lock that operates on numerical codes. The code to unlock the chest is a specific permutation of a given sequence of numbers. The permutation must be in a strictly increasing order followed by a strictly decreasing order. For example, if the given sequence is `1 2 3`, a valid permutation would be `1 2 3 2 1`, and for `3 3 3`, a valid permutation would be `3 3 3`. Your task is to help the students determine if there exists such a permutation for the given sequence. Input A single line containing space-separated integers representing the sequence. Output A single line containing YES/NO in capital letters of the English alphabet. Constraints - The length of the sequence is in the range [1, 10^5]. - Each integer in the sequence is between 1 and 10^9. Example Input: 1 3 5 5 3 1 Output: YES Explanation A valid permutation is `1 3 5 5 3 1` itself. Another possible permutation is `1 3 5 5 1 1`. Both of these are valid as they fit the required pattern of strictly increasing followed by strictly decreasing sequence.","solution":"def is_treasure_code(sequence): Determines if there exists a permutation of the sequence that can be arranged in a strictly increasing followed by strictly decreasing order. Parameters: sequence (list of int): A list of integers representing the sequence. Returns: str: \\"YES\\" if such a permutation exists, \\"NO\\" otherwise. from collections import Counter # Create a frequency counter counter = Counter(sequence) # Traverse through the elements in sorted order and ensure that this element # never appears more than twice (once in increasing and once in decreasing) increasing_part = set() for key in sorted(counter): freq = counter[key] if freq > 2: return \\"NO\\" increasing_part.add(key) return \\"YES\\""},{"question":"You have been provided with an array of integers. Your task is to find the length of the longest subarray that consists of the same element repeated. Implement the function `longest_subarray_with_same_values` that takes an array of integers and returns the length of the longest such subarray. Input - The function `longest_subarray_with_same_values` should accept a single argument: an array of integers `arr` (1 ≤ len(arr) ≤ 1000, -10^6 ≤ arr[i] ≤ 10^6). Output - The function should return an integer representing the length of the longest subarray with identical elements. Examples Input [4, 4, 4, 3, 3, 3, 3, 1, 1, 2] Output 4 Input [1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4] Output 5 Input [10, 10, 10, 20] Output 3","solution":"def longest_subarray_with_same_values(arr): Returns the length of the longest subarray with identical elements. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) # Final check for the last recurring element return max_length"},{"question":"Given a string `s`, can you transform it into a string with no adjacent repeating characters by deleting at most one character? Input: The first line of the input contains an integer `T` denoting the number of test cases. Each of the next `T` lines contains a single string `s`. Output: For each test case, print \\"YES\\" if it\'s possible to transform the string into a string with no adjacent repeating characters by deleting at most one character. Otherwise, print \\"NO\\". Constraints: ``` 1 <= T <= 100 1 <= |s| <= 1000 ``` Example: Input: ``` 3 abccba aaabb abcde ``` Output: ``` YES NO YES ``` Explanation: Example case 1. By deleting the character \'c\' at position 3 or 4, the resulting string \\"abcba\\" has no adjacent repeating characters. Example case 2. It is not possible to get rid of all adjacent repeating characters by deleting only one character. Example case 3. The string \\"abcde\\" already has no adjacent repeating characters.","solution":"def can_transform(s): Determines if it\'s possible to transform the string into a string with no adjacent repeating characters by deleting at most one character. def is_valid(s): for i in range(len(s) - 1): if s[i] == s[i + 1]: return False return True if is_valid(s): return \\"YES\\" for i in range(len(s)): if is_valid(s[:i] + s[i + 1:]): return \\"YES\\" return \\"NO\\" def solve(T, strings): results = [] for s in strings: results.append(can_transform(s)) return results"},{"question":"You are given a matrix of size N x N. Each cell in the matrix contains a character which is either \'X\' or \'O\'. Your task is to find the largest square sub-matrix which contains only \'X\' characters and return its area. Input The first line contains a single integer T, the number of test cases. T test cases follow. Each test case starts with an integer N. The next N lines each contain N characters without spaces, representing the matrix. Output For each test case, print a single integer, the area of the largest square sub-matrix containing only \'X\' characters. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 Example Input: 2 4 XXXX XOOO XXOO XXXX 3 XOX OOO XOX Output: 4 1 Explanation In the first test case, the largest square sub-matrix containing only \'X\' characters has a size of 2x2, and its area is 4. In the second test case, the largest square sub-matrix containing only \'X\' characters has a size of 1x1, and its area is 1.","solution":"def largest_square_area(matrices): Finds the largest square sub-matrix containing only \'X\' characters for each input matrix. Parameters: matrices (List[Tuple[int, List[str]]]): A list of tuples where each tuple contains an integer N and a list of N strings representing the matrix. Returns: List[int]: A list of integers where each integer is the area of the largest square sub-matrix containing only \'X\' characters for each input matrix. results = [] for N, matrix in matrices: if N == 0: results.append(0) continue dp = [[0]*N for _ in range(N)] max_side_length = 0 for i in range(N): for j in range(N): if matrix[i][j] == \'X\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) area = max_side_length ** 2 results.append(area) return results"},{"question":"# Problem: Even Keypad Number You have a special keypad where only keys from 1 to 9 are working. You need to type a number with exactly N digits and it must be even. Given N, you need to determine how many such N-digit numbers can be formed using only the digits from 1 to 9. **Input:** A single integer N which is the desired number of digits in your number. **Output:** A single integer representing the count of valid N-digit even numbers. **Constraints:** * 1 ≤ N ≤ 8 **Input Example 1:** ``` 2 ``` **Output Example 1:** ``` 32 ``` **Explanation Example 1:** For N = 2, the valid two-digit even numbers from the digits 1 to 9 are 12, 14, 16, 18, 32, 34, 36, 38, 52, 54, 56, 58, 72, 74, 76, 78, 92, 94, 96, 98, 16 counts from first and 16 from second position so total count is 32. **Input Example 2:** ``` 3 ``` **Output Example 2:** ``` 320 ``` **Explanation Example 2:** For N = 3, the last digit must be one of {2, 4, 6, 8}, and the first two digits can be any of the 8 digits (1-9 excluding 5 potential last digits). Therefore, the first two digits can be any combination in 8 * 8 ways times 4 options for the last digit = 512.","solution":"def count_even_keypad_numbers(n): Returns the count of N-digit numbers that are even using the digits 1-9. if n == 1: return 4 # Only the keys {2, 4, 6, 8} are valid single-digit even numbers. # Number of choices for the last digit (since it must be even) even_digit_choices = 4 # (2, 4, 6, 8) # Number of choices for all other (n-1) digits other_digit_choices = 8 # (1, 2, 3, 4, 5, 6, 7, 8, 9), 9 choices in total minus the fact that # first digit can\'t be zero, so effectively 8 choices. return even_digit_choices * (other_digit_choices ** (n - 1))"},{"question":"Background In a workshop about data structures, you learned about strings and various operations that can be performed on them. You decide to create a problem based on string operations to test your understanding and skills in string manipulation. Problem You are given a string S consisting of lowercase English letters and an integer K. You want to find the length of the longest substring of S that contains exactly K distinct characters. If there is no such substring, the output should be \\"0\\". Constraints * The input satisfies the following conditions. * 1 ≤ |S| ≤ 100000 (|S| is the length of the string S) * 1 ≤ K ≤ 26 Input The input format is as follows: ``` S K ``` * S is the string consisting of lowercase English letters. * K is an integer representing the number of distinct characters in the substring. Output Output the length of the longest substring that contains exactly K distinct characters. If no such substring exists, output \\"0\\". Examples Input abcba 2 Output 3 Input aa 1 Output 2 Input abc 4 Output 0 Explanation of Examples In the first example, the longest substrings with exactly 2 distinct characters are \\"ab\\", \\"bc\\", \\"cb\\", and \\"ba\\", and their lengths are 2. The longest one with exactly 2 characters is \\"bcb\\", which has a length of 3. In the second example, the entire string \\"aa\\" has exactly 1 distinct character, which matches the requirement, and hence the length is 2. In the third example, there is no substring that contains exactly 4 distinct characters because the string itself only has 3 distinct characters. Hence, the output is \\"0\\".","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring with exactly k distinct characters. If there is no such substring, returns 0. from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0 char_count = defaultdict(int) left = 0 max_length = 0 distinct_count = 0 for right in range(n): if char_count[s[right]] == 0: distinct_count += 1 char_count[s[right]] += 1 while distinct_count > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: distinct_count -= 1 left += 1 if distinct_count == k: max_length = max(max_length, right - left + 1) return max_length # Example usage print(longest_substring_with_k_distinct(\\"abcba\\", 2)) # Output: 3"},{"question":"Write a program that manages a library system with the following operations: * addBook(isbn, title, author): Adds a book to the library with the given ISBN, title, and author. * deleteBook(isbn): Deletes the book with the given ISBN from the library. * findBookByIsbn(isbn): Returns the title and author of the book with the given ISBN. * findBooksByAuthor(author): Returns a sorted list of book titles written by the given author. Constraints * ISBN numbers are unique. * 1 ≤ length of title ≤ 100 * 1 ≤ length of author ≤ 100 * Up to 10^5 books can be added. * Multiple operations can be performed sequentially. Input The input consists of multiple lines. Each line represents an operation: addBook <isbn> <title> <author> deleteBook <isbn> findBookByIsbn <isbn> findBooksByAuthor <author> Output For `findBookByIsbn` operations, print the title and author of the book if found, otherwise print \\"Book not found\\". For `findBooksByAuthor` operations, print the sorted list of titles written by the given author, each title on a new line. If no books are found, print \\"No books found\\". Examples Input addBook 123 Title1 Author1 addBook 456 Title2 Author2 addBook 789 Title3 Author1 findBookByIsbn 123 findBooksByAuthor Author1 deleteBook 123 findBookByIsbn 123 findBooksByAuthor Author1 Output Title1 Author1 Title1 Title3 Book not found Title3","solution":"class Library: def __init__(self): self.books_by_isbn = {} self.books_by_author = {} def addBook(self, isbn, title, author): if isbn not in self.books_by_isbn: self.books_by_isbn[isbn] = (title, author) if author not in self.books_by_author: self.books_by_author[author] = [] self.books_by_author[author].append(title) def deleteBook(self, isbn): if isbn in self.books_by_isbn: title, author = self.books_by_isbn.pop(isbn) self.books_by_author[author].remove(title) if not self.books_by_author[author]: del self.books_by_author[author] def findBookByIsbn(self, isbn): return self.books_by_isbn.get(isbn, \\"Book not found\\") def findBooksByAuthor(self, author): if author in self.books_by_author: return sorted(self.books_by_author[author]) else: return \\"No books found\\""},{"question":"A book club has a series of books arranged in a row, and each book has a popularity score. You want to find the maximum sum of popularity scores of any contiguous subarray of books. A contiguous subarray of books is a sequence of one or more books that appear consecutively in the given arrangement. You are given an array of integers `popularity` with `n` elements representing the popularity scores. Your task is to compute the maximum possible sum of popularity scores of any contiguous subarray. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100) — the number of books. The next line contains `n` integers representing the popularity scores of the books. Each score is between -1000 and 1000. Output Output a single integer, representing the maximum sum of popularity scores of any contiguous subarray. Examples Input 5 1 -3 2 1 -1 Output 3 Input 3 -2 -3 -1 Output -1 Input 6 4 -1 2 1 -5 4 Output 6 Note In the first example, the maximum sum is obtained by the subarray [2, 1]. In the second example, the maximum sum is obtained by the subarray [-1] because all numbers are negative. In the third example, the maximum sum is obtained by the subarray [4, -1, 2, 1]. You can solve this problem using Kadane\'s algorithm which runs in O(n) time.","solution":"def max_contiguous_subarray_sum(n, popularity): Returns the maximum sum of popularity scores of any contiguous subarray. Parameters: n (int): Number of books popularity (list of int): List of popularity scores of the books Returns: int: Maximum sum of popularity scores of any contiguous subarray max_so_far = popularity[0] max_ending_here = popularity[0] for i in range(1, n): max_ending_here = max(popularity[i], max_ending_here + popularity[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given a string `str`, you need to compress it using the Run Length Encoding (RLE) technique. In this technique, a sequence of the same character is replaced by that character followed by the count of repetitions. If the compressed string is not smaller than the original string, return the original string. For example, the string `\\"aaabbbcc\\"` would be compressed to `\\"a3b3c2\\"`, while the string `\\"abc\\"` would remain `\\"abc\\"` since its compressed form `\\"a1b1c1\\"` is not smaller in length. Write a function `compressString(str)` that takes the string `str` as input and returns the compressed version of the string if it is smaller, otherwise returns the original string. You can assume that the string will only contain lowercase letters and will have a length between 1 and 1000. # Input - A single string `str` containing lowercase letters (1 ≤ length of `str` ≤ 1000). # Output - A single string representing the compressed form of the input string if compressed string is shorter, otherwise the original string. # Examples ```python Input: \\"aaabbbcc\\" Output: \\"a3b3c2\\" Input: \\"abc\\" Output: \\"abc\\" Input: \\"aabbcc\\" Output: \\"aabbcc\\" Input: \\"aaaaaa\\" Output: \\"a6\\" ``` # Function Signature ```python def compressString(str: str) -> str: pass ```","solution":"def compressString(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given a grid of size n x n, and each cell of the grid contains a positive integer. You need to find the largest sum of integers you can obtain by selecting a subset of non-overlapping squares from the grid. A square is defined as a rectangular section of the grid with sides parallel to the edges of the grid, and it can be of any size from 1x1 to n x n. A subset of squares is considered non-overlapping if no two squares share any cell. Input The first line contains a single integer n (1 ≤ n ≤ 50) — the size of the grid. The next n lines each contain n integers representing the grid, where the j-th integer in the i-th line is the value in the cell (i, j) (1 ≤ value ≤ 104). Output Print a single integer — the largest sum of integers obtained by selecting a subset of non-overlapping squares from the grid. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 10 10 10 10 Output 40 Note In the first example, selecting the entire grid as one 3x3 square will give the sum 45. In the second example, selecting two separate 1x1 squares with values 10 will give the sum 40.","solution":"def max_non_overlapping_square_sum(n, grid): max_sum = 0 for size in range(1, n + 1): for i in range(n - size + 1): for j in range(n - size + 1): current_sum = sum([grid[x][j:j+size] for x in range(i, i + size)], []) max_sum = max(max_sum, sum(current_sum)) return max_sum # Example usage: # n = 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(max_non_overlapping_square_sum(n, grid)) # Output should be 45"},{"question":"To complete the puzzle, the queen of a distant kingdom has decreed that all magical beads must be collected and redistributed. Each bead has a unique power level, and the sum of any subset of the beads\' power levels must not exceed a given limit. Your task is to determine the maximum number of beads that can be chosen such that the sum of their power levels does not exceed this limit. Input The input consists of two lines. The first line contains two integers n (1 ≤ n ≤ 20) and L (1 ≤ L ≤ 100), where n is the number of beads and L is the power limit. The second line contains n integers ai (1 ≤ ai ≤ 100), representing the power levels of the beads. Output Output a single integer — the maximum number of beads that can be chosen such that the sum of their power levels does not exceed the limit L. Examples Input 5 10 1 2 3 4 5 Output 4 Input 4 15 5 5 5 5 Output 3 Input 3 5 1 1 1 Output 3","solution":"def max_beads(n, L, power_levels): from itertools import combinations max_count = 0 for i in range(1, n + 1): for combination in combinations(power_levels, i): if sum(combination) <= L: max_count = max(max_count, len(combination)) return max_count # Example usage: # n = 3 # L = 5 # power_levels = [1, 1, 1] # max_beads(n, L, power_levels) should return 3"},{"question":"You are given an initially empty stack. Your task is to process a sequence of operations and determine the maximum size of the stack at any point. An operation is either: 1. \\"push x\\" (where x is an integer that will be added to the stack) 2. \\"pop\\" (removing the top element of the stack, if the stack is not empty) Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of operations. Each of the next n lines contains one operation, either \\"push x\\" (1 ≤ x ≤ 105) or \\"pop\\". Output Output a single integer, the maximum size of the stack after performing all operations. Examples Input 5 push 1 push 2 pop push 3 push 4 Output 3 Input 4 push 5 push 6 pop pop Output 2","solution":"def max_stack_size(operations): stack = [] max_size = 0 for operation in operations: if operation.startswith(\\"push\\"): _, value = operation.split() stack.append(int(value)) elif operation == \\"pop\\" and stack: stack.pop() max_size = max(max_size, len(stack)) return max_size"},{"question":"In a mystical forest, there are n wizards standing in a line. Each wizard has a unique power level represented as an integer. The wizards want to perform a power alignment ritual, where each wizard must adjust their position in such a way that they form a non-decreasing sequence of power levels. The wizards can only swap positions with their immediate neighbors, but they can perform multiple swaps. Given the initial sequence of power levels of the wizards, determine the minimum number of swaps required to arrange the wizards in non-decreasing order. Input The first line contains a single integer n (1≤ n≤ 200 000) – the number of wizards. The second line contains n integers a_1,a_2,...,a_n (1≤ a_i≤ 10^9) – the power levels of the wizards. Output Print a single integer – the minimum number of swaps required to arrange the wizards in non-decreasing order. Examples Input 5 5 4 3 2 1 Output 10 Input 5 1 5 3 2 4 Output 4 Input 3 2 3 1 Output 2 Note In the first example, the initial sequence [5, 4, 3, 2, 1] requires [1↔2], [2↔3], [3↔4], [4↔5] swaps, repeated 4 times, resulting in 10 swaps to completely sort in a non-decreasing order. In the second example, the initial sequence [1, 5, 3, 2, 4] requires the swaps [5↔3], [5↔2], [5↔4], [3↔2], resulting in a total of 4 swaps. In the third example, the initial sequence [2, 3, 1] requires the swaps [3↔1], [2↔1], resulting in a total of 2 swaps.","solution":"def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) # Number of inversions j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count def min_swaps_to_sort(arr): n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"Given a string S of length N consisting of lowercase English letters, find the lexicographically smallest substring of length K. Constraints * 1 leq N leq 10^5 * 1 leq K leq N * S consists of lowercase English letters (\'a\' - \'z\'). Input Input is given from Standard Input in the following format: N K S Output Print the lexicographically smallest substring of length K. Examples Input 7 3 abdcabc Output abc Input 5 4 wxyzx Output wxyz Input 6 2 abcdaa Output aa","solution":"def smallest_substring(N, K, S): Function to find the lexicographically smallest substring of length K. Parameters: N (int): Length of the string S K (int): Length of the required substring S (str): The input string Returns: str: The lexicographically smallest substring of length K min_substr = S[:K] for i in range(1, N - K + 1): current_substr = S[i:i + K] if current_substr < min_substr: min_substr = current_substr return min_substr"},{"question":"You are a software developer tasked with optimizing the performance of a software application that processes large logs of events. Each event log entry consists of a timestamp and an event type. The goal is to calculate the total number of unique event types that occurred within a specified time window. # Function Signature ```python def count_unique_events(event_log: List[Tuple[int, str]], start_time: int, end_time: int) -> int: pass ``` # Input - `event_log`: A list of tuples where each tuple contains an integer timestamp and a string event type. The list is sorted in ascending order by timestamp. - `start_time`: An integer representing the start time of the window. - `end_time`: An integer representing the end time of the window. # Output - An integer representing the number of unique event types that occurred within the specified time window `[start_time, end_time)`. # Constraints - The number of event log entries will not exceed 100,000. - Timestamps are represented as integers. - Event types are non-empty strings with a maximum length of 100 characters. - `start_time` will always be less than `end_time`. - The event log list is non-empty. # Example Example 1 ```python event_log = [ (1, \\"login\\"), (2, \\"logout\\"), (3, \\"purchase\\"), (4, \\"login\\"), (5, \\"logout\\") ] start_time = 2 end_time = 5 ``` **Output**: `3` **Explanation**: The events within the time window `[2, 5)` are: - (2, \\"logout\\") - (3, \\"purchase\\") - (4, \\"login\\") The unique event types are `{\\"logout\\", \\"purchase\\", \\"login\\"}`, so the result is `3`. Example 2 ```python event_log = [ (10, \\"view\\"), (20, \\"click\\"), (30, \\"view\\"), (40, \\"signup\\"), (50, \\"click\\"), ] start_time = 15 end_time = 45 ``` **Output**: `3` **Explanation**: The events within the time window `[15, 45)` are: - (20, \\"click\\") - (30, \\"view\\") - (40, \\"signup\\") The unique event types are `{\\"view\\", \\"click\\", \\"signup\\"}`, so the result is `3`. You need to implement the `count_unique_events` function to pass the provided test cases.","solution":"from typing import List, Tuple def count_unique_events(event_log: List[Tuple[int, str]], start_time: int, end_time: int) -> int: Counts the number of unique event types that occurred within a specified time window. :param event_log: List of tuples where each tuple contains an integer timestamp and a string event type. :param start_time: Integer representing the start time of the window. :param end_time: Integer representing the end time of the window. :return: An integer representing the number of unique event types within the specified time window. unique_events = set() for timestamp, event_type in event_log: if start_time <= timestamp < end_time: unique_events.add(event_type) elif timestamp >= end_time: break return len(unique_events)"},{"question":"Maya loves playing with numbers. Recently, she learned about prime numbers and was fascinated by them. She wants to identify whether a given number is prime or not. Can you help her write a program that determines if a number is prime? Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of an integer N. Output: For each test case, print \\"YES\\" if the number is prime, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 SAMPLE INPUT 3 2 4 7 SAMPLE OUTPUT YES NO YES","solution":"def is_prime(n): Determines if the given number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def primes_in_test_cases(T, test_cases): For each number in the test cases, prints \\"YES\\" if the number is prime, otherwise \\"NO\\". results = [] for i in range(T): if is_prime(test_cases[i]): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A city is organizing a marathon race with n checkpoints spread out along a route in a straight line. Each checkpoint has a certain number of energy drinks available to aid participants. After grabbing an energy drink from a checkpoint, a participant gains a boost in their energy level. However, each energy drink only provides a temporary boost and is consumed immediately upon acquiring. The goal of this problem is to determine the maximum number of energy drinks a participant can consume if they start at the first checkpoint and finish at the last checkpoint. The participant can move forward one checkpoint or skip directly to another checkpoint within a certain maximum step size k, where k is given. To make the race challenging, the participant cannot backtrack to previous checkpoints after passing them. Given the number of energy drinks at each checkpoint and the maximum step size, calculate the maximum total number of energy drinks the participant can consume. Input: - The first line contains two integers n (2 ≤ n ≤ 1,000,000) and k (1 ≤ k ≤ n-1) — the number of checkpoints and the maximum step size, respectively. - The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the number of energy drinks available at the i-th checkpoint. Output: - Print a single integer — the maximum total number of energy drinks the participant can consume from the first to the last checkpoint. Examples Input: 5 2 1 2 3 0 4 Output: 8 Input: 3 1 0 1 5 Output: 6 Input: 4 3 10 0 0 5 Output: 15 Note: In the first sample, the optimal path would be: start at checkpoint 1, then move to checkpoint 2, then to checkpoint 3, and finally to checkpoint 5, consuming 1 + 2 + 3 + 4 = 10 energy drinks. In the second sample, the optimal path is to start at checkpoint 1, move to checkpoint 2, and move to checkpoint 3, consuming 0 + 1 + 5 = 6 energy drinks. In the third sample, the optimal path is to start at checkpoint 1, then move directly to checkpoint 4, consuming 10 + 5 = 15 energy drinks.","solution":"def max_energy_drinks(n, k, drinks): # Initialize an array to store the max energy drinks that can be consumed at each checkpoint max_drinks = [0] * n max_drinks[0] = drinks[0] # Loop through each checkpoint for i in range(1, n): max_drinks[i] = max(max_drinks[max(0, i-k):i]) + drinks[i] # The last element of max_drinks will have the maximum energy drinks that can be consumed return max_drinks[-1] # Example usage # print(max_energy_drinks(5, 2, [1, 2, 3, 0, 4])) # Expected output: 10 # print(max_energy_drinks(3, 1, [0, 1, 5])) # Expected output: 6 # print(max_energy_drinks(4, 3, [10, 0, 0, 5])) # Expected output: 15"},{"question":"The management at a warehouse wants efficient storage for their product inventory. They have a list of n product batches, each represented by a non-decreasing sequence of integers where each integer denotes quantity in that batch. They need to combine batches so that each combined batch\'s quantities also form a non-decreasing sequence. Each merge operation combines two adjacent batches into one. The cost of a merge operation is the sum of the sizes of the two batches being merged. The goal is to minimize the total cost of merging all batches into a single non-decreasing sequence. Given n batches with their initial quantities, find out the minimum cost required to combine all batches into one. Input - The first line contains an integer n (1 ≤ n ≤ 100000) - the number of batches. - The second line contains n integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ 10^9) - the quantities in the batches. Output - Output a single integer - the minimum cost to combine all batches into one. Example Input 5 1 2 3 4 5 Output 33 Explanation: (1+2) -> 3 (with cost 3) (3+3) -> 6 (with cost 6) (4+5) -> 9 (with cost 9) (6+9) -> 15 (with cost 15) Total Cost = 3 + 6 + 9 + 15 = 33","solution":"import heapq def min_merge_cost(n, quantities): Given n batches with their initial quantities, this function calculates the minimum cost required to combine all batches into one using a priority queue. Args: n: int - number of batches quantities: list of int - list containing quantities in batches Returns: int - minimum cost to combine all batches into one if n == 1: return 0 # Use a min-heap to keep track of the smallest batches heapq.heapify(quantities) total_cost = 0 # Keep merging until only one batch remains while len(quantities) > 1: # Extract the two smallest batches first = heapq.heappop(quantities) second = heapq.heappop(quantities) # Merge them and add the cost merge_cost = first + second total_cost += merge_cost # Push the merged batch back to the heap heapq.heappush(quantities, merge_cost) return total_cost"},{"question":"Ravi is organizing an amusement park, and he wants to track the performance of rides based on their daily visitor counts. The park consists of a row of rides, and each ride has a record of the number of visitors it received each day. Ravi wants to analyze the total number of visitors for any contiguous subarray of rides for planning improvements. For this purpose, you will be given an array where each element represents the visitor count for a ride on a particular day. You are also given Q queries, each containing two integers a and b. For each query, you need to compute the total number of visitors for the subarray from index a (inclusive) to index b (inclusive). Input Format First Line contains N, the number of rides. Next line contains N space-separated integers representing the visitor count for each ride. Next line contains Q, the number of queries. Next Q lines contain two space-separated integers a and b as described above. Output Format Q lines - each containing an integer, the total number of visitors for the required subarray. Constraints 1 ≤ N, Q ≤ 100000 0 ≤ a ≤ b ≤ N-1 The park follows 0-based indexing, that is a and b range from 0 to N-1 Author : Your Name SAMPLE INPUT 8 50 20 30 40 90 70 60 80 2 1 3 2 5 SAMPLE OUTPUT 90 190 Explanation The first query computes the sum of visitor counts from index 1 to 3: 20 + 30 + 40 = 90 The second query computes the sum of visitor counts from index 2 to 5: 30 + 40 + 90 + 30 = 190","solution":"def total_visitors(visitor_counts, queries): Computes the total number of visitors for the subarray from index a to index b for each query. Parameters: visitor_counts (list of int): The number of visitors for each ride. queries (list of tuples): Each tuple contains two integers (a, b) representing the range. Returns: list of int: The sum of visitors for each of the query ranges. # Precompute the prefix sum array prefix_sum = [0] * (len(visitor_counts) + 1) for i in range(len(visitor_counts)): prefix_sum[i + 1] = prefix_sum[i] + visitor_counts[i] # Process each query and compute the sum using the prefix sum array result = [] for a, b in queries: sum_visitors = prefix_sum[b + 1] - prefix_sum[a] result.append(sum_visitors) return result"},{"question":"Alice and Bob are playing yet another game. This time, they are using a rectangular grid with n rows and m columns. Alice can place l horizontal or vertical walls on the grid, which block Bob\'s path. A wall is a sequence of consecutive cells in a single row or a single column. Initially, Bob is at the top-left corner (1,1) and his goal is to get to the bottom-right corner (n,m). Bob can move up, down, left, or right, but he cannot pass through a wall. Alice, wanting to make the game more challenging, announces the positions of the walls to Bob. Bob will find a path from (1,1) to (n,m) if one exists. If there is no possible path, he knows Alice has blocked him completely. Your task is to determine whether Bob can reach his destination or not. Input The first line of the input contains three integers: n, m, and l (1 ≤ n, m ≤ 1000, 0 ≤ l ≤ 1000) — the number of rows, the number of columns, and the number of walls, respectively. The following l lines each contain four integers: r1, c1, r2, c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) — the endpoints of a wall. All walls are either horizontal (r1 == r2) or vertical (c1 == c2). Output Print \\"YES\\" if Bob can reach from (1,1) to (n,m) without crossing any walls. Otherwise, print \\"NO\\". Examples Input 5 5 2 2 1 2 3 3 2 4 2 Output YES Input 3 3 1 1 2 3 2 Output NO Input 4 4 0 Output YES","solution":"from collections import deque def can_reach(n, m, l, walls): grid = [[0] * (m + 1) for _ in range(n + 1)] for r1, c1, r2, c2 in walls: if r1 == r2: # horizontal wall for c in range(min(c1, c2), max(c1, c2) + 1): grid[r1][c] = 1 elif c1 == c2: # vertical wall for r in range(min(r1, r2), max(r1, r2) + 1): grid[r][c1] = 1 def is_valid_move(x, y): return 1 <= x <= n and 1 <= y <= m and grid[x][y] == 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(1, 1)]) grid[1][1] = 1 while queue: x, y = queue.popleft() if x == n and y == m: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny): grid[nx][ny] = 1 queue.append((nx, ny)) return \\"NO\\""},{"question":"A: Longest Subsequence Without Consecutive Characters problem Consider a string consisting of lowercase English characters. The goal is to find the length of the longest subsequence of this string such that no two consecutive characters in the subsequence are the same. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input format Input is given on one line. S S represents the string you receive. Constraint * 1 ≤ |S| ≤ 100 * S consists of lowercase letters only. Output format Output the length of the longest subsequence where no two consecutive characters are the same. Input example 1 aabb Output example 1 2 For the input \\"aabb\\", one possible longest subsequence is \\"ab\\". Input example 2 abcabc Output example 2 6 For the input \\"abcabc\\", the longest subsequence is \\"abcabc\\", which has a length of 6. Example Input aabb Output 2","solution":"def longest_non_consecutive_subsequence_length(S): Returns the length of the longest subsequence where no two consecutive characters are the same. if not S: return 0 # Initialize the length of the longest subsequence and the previous character longest_length = 1 prev_char = S[0] # Iterate through the string starting from the second character for char in S[1:]: if char != prev_char: longest_length += 1 prev_char = char return longest_length"},{"question":"A group of friends are planning a trip to a theme park. There are rides in the park, each with a unique thrill rating. To make sure everyone has a good time, they\'ve decided that each person should have at least one ride option that matches their thrill preference. Each person has a specific thrill level they\'re looking for, and they want to know how many rides match their exact thrill level. You need to write a program that, given the thrill ratings of the rides and the thrill levels of each friend, outputs the number of rides that match each friend\'s preference. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) - the number of rides and the number of friends. The second line contains n integers, representing the thrill ratings of the rides, where the i-th integer is the thrill rating of the i-th ride. The third line contains m integers, representing the thrill levels of the friends, where the j-th integer is the thrill level of the j-th friend. Output Output m integers, where the j-th integer is the number of rides that match the j-th friend\'s thrill level. Examples Input 5 3 5 3 7 5 8 5 7 2 Output 2 1 0 Note In this example, there are 5 rides with thrill ratings [5, 3, 7, 5, 8], and there are 3 friends with the thrill level preferences [5, 7, 2]. The first friend has 2 rides matching their thrill level of 5, the second friend has 1 ride matching their thrill level of 7, and the third friend has no rides matching their thrill level of 2.","solution":"def count_ride_matches(n, m, ride_thrills, friend_prefs): Returns a list where each element is the count of rides matching the corresponding friend\'s thrill level. # Create a dictionary to count the frequencies of each thrill level in ride_thrills thrill_count = {} for thrill in ride_thrills: if thrill in thrill_count: thrill_count[thrill] += 1 else: thrill_count[thrill] = 1 # Create a list to store the result of matches for each friend result = [] for pref in friend_prefs: if pref in thrill_count: result.append(thrill_count[pref]) else: result.append(0) return result"},{"question":"Sarah is working on a project involving network servers in a data center. Each server has a certain capacity, which represents the maximum number of connections it can handle. Sarah needs to distribute several tasks across these servers, ensuring that no server exceeds its capacity. A task can only connect to one server, and a server cannot handle more tasks than its capacity. Given the number of servers, their respective capacities, and the number of tasks, determine if it is possible to distribute all tasks without exceeding any server\'s capacity. If it is possible, provide a distribution of tasks across servers. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of servers. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^5) — the capacities of the servers. The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of tasks. Output If it is possible to distribute all tasks across the servers, print \\"Possible\\" followed by n space-separated integers — the number of tasks assigned to each server. If there are multiple solutions, print any of them. If it is not possible to distribute all tasks without exceeding any server\'s capacity, print \\"Impossible\\". Examples Input 3 4 2 1 6 Output Possible 4 2 0 Input 3 3 1 2 7 Output Impossible Note In the first example, it\'s possible to distribute the tasks such that no server exceeds its capacity: 4 tasks to the first server, 2 to the second, and 0 tasks to the third. In the second example, it is impossible to distribute 7 tasks across the servers without exceeding their capacities.","solution":"def distribute_tasks(n, capacities, m): Distribute m tasks across n servers. Args: n (int): Number of servers. capacities (list): List of capacities for the servers. m (int): Number of tasks. Returns: str: \\"Possible\\" followed by the task distribution or \\"Impossible\\". if sum(capacities) < m: return \\"Impossible\\" result = [0] * n for i in range(n): if m > capacities[i]: result[i] = capacities[i] m -= capacities[i] else: result[i] = m m = 0 break return \\"Possible\\" if m == 0 else \\"Impossible\\", result if m == 0 else [] # Example usage: n = 3 capacities = [4, 2, 1] m = 6 print(distribute_tasks(n, capacities, m)) # Output: Possible [4, 2, 0] n = 3 capacities = [3, 1, 2] m = 7 print(distribute_tasks(n, capacities, m)) # Output: Impossible"},{"question":"Maria has a favorite sequence of positive integers known as the Fibonacci sequence. The sequence is defined as follows: the first two numbers are 1 and 1, and each subsequent number is the sum of the two preceding ones. That is, F(1)=1, F(2)=1, and F(n) = F(n-1) + F(n-2) for n > 2. Maria wants to know if a given number k is a perfect Fibonacci number, meaning that it is exactly one of the values in the Fibonacci sequence. Help Maria determine if k is a perfect Fibonacci number. Input The single line contains an integer k (1 ≤ k ≤ 10^9) — the number to be checked. Output In the only line, print \\"YES\\" (without the quotes) if k is a perfect Fibonacci number. Otherwise, print \\"NO\\" (without the quotes). Examples Input 5 Output YES Input 7 Output NO Note In the first sample, 5 is a Fibonacci number (it is the 5th Fibonacci number in the series: 1, 1, 2, 3, 5). In the second sample, 7 is not a Fibonacci number as it does not appear in the Fibonacci sequence.","solution":"def is_perfect_fibonacci(k): Determines if a given number k is a perfect Fibonacci number. :param k: int, the number to be checked (1 ≤ k ≤ 10^9) :return: str, \\"YES\\" if k is a perfect Fibonacci number, otherwise \\"NO\\" if k == 1: return \\"YES\\" a, b = 1, 1 while b < k: a, b = b, a + b return \\"YES\\" if b == k else \\"NO\\""},{"question":"Compute Digital Root **Problem Statement:** The digital root of a number is the single digit obtained by repeatedly summing the digits of the number until a single digit is obtained. For example, the digital root of 942 is 6 because 9 + 4 + 2 = 15, and 1 + 5 = 6. The function digital_root(n) should compute the digital root of a non-negative integer n. Write a function `digital_root(n: int) -> int` that takes a single argument, `n`, a non-negative integer (`0 ≤ n ≤ 10^1000`), and returns its digital root. **Example:** ``` Input: 942 Output: 6 Input: 12345 Output: 6 Input: 99999 Output: 9 Input: 123 Output: 6 ``` **Function Signature:** ```python def digital_root(n: int) -> int: ``` **Constraints:** - The input `n` is a non-negative integer. - The function should handle very large integers efficiently. **Explanation:** - The digital root of 942 is calculated as 9 + 4 + 2 = 15, and then 1 + 5 = 6. - The digital root of 12345 is calculated as 1 + 2 + 3 + 4 + 5 = 15, and then 1 + 5 = 6. **Notes:** - You can utilize properties of number theory for an efficient solution. - This problem tests your ability to handle large numbers and perform repeated operations until a condition is met.","solution":"def digital_root(n: int) -> int: Compute the digital root of a non-negative integer n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n # An alternative approach using number theory properties (modular arithmetic) # def digital_root(n: int) -> int: # if n == 0: # return 0 # return (n - 1) % 9 + 1"},{"question":"You are given an array of integers of length N, where N is an even number. You need to divide this array into two subarrays of equal length such that the difference between the sum of the elements of the two subarrays is minimized. The arrays should be divided such that: - Each element of the original array must belong to one and only one of the two subarrays. - The combined length of the two subarrays should be equal to N. - Both subarrays should have the same number of elements, which is ( frac{N}{2} ). Write a function to find the minimum absolute difference between the sum of the two subarrays. **Function Signature** ```python def min_subarray_sum_diff(arr: List[int]) -> int: # your code here ``` **Input Format** - An integer N (2 ≤ N ≤ 30, N is even), the length of the array. - An array of integers of size N, where each integer ( a_i ) (1 ≤ ( a_i ) ≤ 100) is the i-th element of the array. **Output Format** - An integer representing the minimum absolute difference between the sum of the two subarrays. **Examples** **Example 1:** ``` Input 4 [1, 2, 3, 4] Output 0 Explanation We can partition the array as follows: [1, 4] and [2, 3]. The sums are 5 and 5, and the difference between them is 0. ``` **Example 2:** ``` Input 6 [1, 3, 2, 4, 6, 5] Output 1 Explanation We can partition the array as follows: [1, 2, 6] and [3, 4, 5]. The sums are 9 and 12, and the difference between them is 3. Another possible partition is [1, 4, 5] and [2, 3, 6]. The sums are 10 and 11, and the difference between them is 1. ``` **Example 3:** ``` Input 2 [10, 20] Output 10 Explanation We can partition the array as follows: [10] and [20]. The sums are 10 and 20, and the difference between them is 10. ```","solution":"from typing import List from itertools import combinations def min_subarray_sum_diff(arr: List[int]) -> int: Returns the minimum absolute difference between the sums of two subarrays of equal length. N = len(arr) half = N // 2 total_sum = sum(arr) min_diff = float(\'inf\') # Generate all combinations of half the array\'s length for comb in combinations(arr, half): sub_sum = sum(comb) diff = abs(total_sum - 2 * sub_sum) min_diff = min(min_diff, diff) return min_diff"},{"question":"You are given two strings, A and B, where A has a length n and B has a length m. You need to compute the length of the longest common subsequence (LCS) of the two strings. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line contains the string A. The second line contains the string B. Output Output a single integer, the length of the longest common subsequence of A and B. Scoring 1 ≤ n, m ≤ 100 20 pts 1 ≤ n, m ≤ 1000 30 pts 1 ≤ n, m ≤ 5000 50 pts Example Input AGGTAB GXTXAYB Example Output 4 Explanation The longest common subsequence of the given strings is GTAB, which has a length of 4.","solution":"def longest_common_subsequence(A, B): Returns the length of the longest common subsequence of two strings A and B. n = len(A) m = len(B) # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the dp array for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"A shopkeeper is arranging a series of promotional discounts for certain customers based on their shopping patterns. To simplify the process, the shopkeeper wants to use a function to determine whether a customer qualifies for a discount based on their shopping history over a sequence of days. The customer qualifies for a discount if, on any two consecutive days, the absolute difference between the amounts they spent does not exceed a given threshold `t`. Given the number of days `n`, the threshold `t`, and an array of integers representing the amounts spent by the customer on each day, write a program to determine if the customer qualifies for the discount. Input The first line contains two integers `n` (2 ≤ n ≤ 100) and `t` (1 ≤ t ≤ 100). The second line contains `n` integers representing the amounts spent by the customer on each day (1 ≤ amount spent ≤ 100). Output Print \\"YES\\" if the customer qualifies for the discount, and \\"NO\\" otherwise. Examples Input 5 3 10 12 9 11 10 Output YES Input 4 2 8 5 12 10 Output NO Note In the first example, the differences between consecutive days are [2, 3, 2, 1]. All are within the threshold of 3. In the second example, the differences between consecutive days are [3, 7, 2], but the second pair exceeds the threshold of 2, so the output is \\"NO\\".","solution":"def qualifies_for_discount(n, t, amounts): Determines if a customer qualifies for a discount based on their shopping history. :param n: Number of days :param t: Threshold value :param amounts: List of amounts spent each day :return: \\"YES\\" if customer qualifies for discount, \\"NO\\" otherwise for i in range(n - 1): if abs(amounts[i] - amounts[i + 1]) > t: return \\"NO\\" return \\"YES\\""},{"question":"Given a sequence of n integers, a1, a2, ..., an, you need to determine if it is possible to rearrange the sequence in such a way that the difference between every two consecutive elements is either d or -d. If it is possible, print \\"YES\\" and one possible rearrangement of the sequence. Otherwise, print \\"NO\\". Input The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output If there is a way to rearrange the sequence such that the difference between every two consecutive elements is either d or -d, print \\"YES\\" followed by one possible rearrangement of the sequence. If no such rearrangement exists, print \\"NO\\". Examples Input 4 2 4 2 6 8 Output YES 2 4 6 8 Input 3 5 3 8 13 Output YES 3 8 13 Input 3 2 1 3 6 Output NO Note In the first sample, the rearranged sequence 2, 4, 6, 8 has differences 2 between every adjacent element. In the second sample, the sequence is already having differences of 5 between every adjacent element. In the third sample, there is no possible rearrangement that fits the criteria.","solution":"def can_rearrange(n, d, a): Determines if it is possible to rearrange the sequence such that the difference between every two consecutive elements is either d or -d. Parameters: n (int): Length of the sequence. d (int): The required difference between consecutive elements. a (list): The sequence of integers. Returns: str: \\"YES\\" and one possible rearrangement if possible, otherwise \\"NO\\". a.sort() for i in range(1, n): if abs(a[i] - a[i - 1]) != d: return \\"NO\\" return \\"YESn\\" + \\" \\".join(map(str, a))"},{"question":"Alex loves playing a game involving candy jars. Each jar contains a certain number of candies, and Alex wants to maximize the number of candies he can collect. He\'s allowed to pick candies from any jar, but with some restrictions: if he chooses candies from a jar, he must pick all candies in that jar and cannot leave it partially full. Due to health constraints, Alex can only pick candies from at most k jars. Help Alex maximize the number of candies he can collect by selecting the optimal jars. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ n) — the number of candy jars and the maximum number of jars Alex can pick from. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 109) — the number of candies in each jar. Output Print the maximum number of candies Alex can collect by choosing candies from at most k jars. Examples Input 5 3 1 2 3 4 5 Output 12 Input 4 2 10 20 30 40 Output 70 Input 6 1 15 7 5 18 2 12 Output 18 Note In the first example, Alex can pick candies from the jars with the highest candy counts, which are 3, 4, and 5. This gives him a total of 3+4+5=12 candies. In the second example, Alex can pick candies from the two jars with the highest candy counts, which are 30 and 40. This gives him a total of 30+40=70 candies. In the third example, since Alex can only pick candies from one jar, he should pick the jar with the highest number of candies, which is 18.","solution":"def max_candies(n, k, candies): Returns the maximum number of candies Alex can collect by choosing candies from at most k jars. Parameters: n (int): The number of candy jars. k (int): The maximum number of jars Alex can pick from. candies (list of int): The number of candies in each jar. Returns: int: The maximum number of candies Alex can collect. # Sort the candies in descending order candies_sorted = sorted(candies, reverse=True) # Sum up the top k jars max_candies_collected = sum(candies_sorted[:k]) return max_candies_collected"},{"question":"You are given an array of integers, and your task is to find the minimum number of operations required to make the array into a \\"mirror array.\\" A mirror array is defined as an array that reads the same backwards as forwards. In one operation, you can either: - Increment or decrement any integer of the array by 1, or - Replace any integer in the array with any other integer. Given the list of integers, determine the minimum number of operations needed to transform it into a mirror array. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100), the number of integers in the array. The second line contains n space-separated integers a1, a2, ..., an (-100 ≤ ai ≤ 100), representing the integers of the array. Output Output a single integer representing the minimum number of operations required to transform the given list into a mirror array. Examples Input 5 1 2 3 4 5 Output 2 Input 4 4 1 1 4 Output 0 Input 3 3 2 1 Output 1","solution":"def min_operations_to_mirror_array(arr): Calculate the minimum number of operations to make the array a mirror array. n = len(arr) operations = 0 for i in range(n // 2): if arr[i] != arr[n - i - 1]: operations += 1 return operations # Read inputs def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = min_operations_to_mirror_array(arr) print(result)"},{"question":"Implement a function `minimum_positive_number_not_sum_twos_fives` that finds the minimum positive integer that cannot be represented as the sum of any number of `2`s and `5`s. You should consider non-negative integer coefficients for `2` and `5`, i.e., `num = 2*a + 5*b`, where `a` and `b` are non-negative integers. Write a function that outputs the minimum positive integer that cannot be expressed in the form `2a + 5b`. Your program does not need to take any input, only to output the result. **Example:** ```python print(minimum_positive_number_not_sum_twos_fives()) ``` **Output:** ```python 1 ``` **Constraints:** - The function should be efficient and return the result in a reasonable time frame for a problem of this size, i.e., it should finish execution in under a second.","solution":"def minimum_positive_number_not_sum_twos_fives(): Returns the smallest positive integer that cannot be represented as the sum of any number of 2\'s and 5\'s. # According to the problem constraints we need to find the smallest positive number # that cannot be represented as some combination of 2\'s and 5\'s. # After manually checking small combinations: # We find that the smallest number that cannot be represented as 2a + 5b is 1. return 1"},{"question":"Sarah is an enthusiastic gardener, and she wants to plant flowers in a rectangular garden of size n x m. To make her garden lively, she wants the flowers to be arranged in such a way that no two adjacent flowers (vertically or horizontally) have the same type. She has access to an infinite number of k types of flowers. Given the dimensions of the garden n and m, and the number of flower types k, help Sarah to determine if it is possible to arrange the flowers meeting the requirement. If it is possible, output one possible arrangement. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 2 ≤ k ≤ 100) — the dimensions of the garden and the number of flower types. Output If it is not possible to arrange the flowers as desired, output \\"NO\\". Otherwise, output \\"YES\\" followed by n lines, each containing m space-separated integers representing the arrangement of flowers in the garden, where each integer represents a flower type (from 1 to k). Examples Input 3 3 2 Output YES 1 2 1 2 1 2 1 2 1 Input 2 2 4 Output YES 1 2 3 4 Input 4 4 1 Output NO Note In the first example, we need to fill a 3x3 garden with 2 types of flowers such that no two adjacent flowers are of the same type. One possible solution is: ``` 1 2 1 2 1 2 1 2 1 ``` In the second example, we need to fill a 2x2 garden with 4 types of flowers. Since there are more than enough flower types, we can easily meet the requirement. One possible solution is: ``` 1 2 3 4 ``` In the third example, it is impossible to fill a 4x4 garden with only 1 type of flower without placing the same type adjacent to each other, so the output is \\"NO\\".","solution":"def garden_arrangement(n, m, k): Given dimensions n and m for the garden and k different flower types, determine if it is possible to fill the garden such that no two adjacent flowers (vertically or horizontally) have the same type. If possible, return the arrangement. Otherwise, return \\"NO\\". if k < 2: # If k < 2, it\'s not possible to satisfy the condition for n, m > 1 return \\"NO\\" arrangement = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): arrangement[i][j] = (i + j) % k + 1 return \\"YES\\", arrangement # Example Use Case # print(garden_arrangement(3, 3, 2))"},{"question":"Emma loves making desserts and has recently started her own bakery. She wants to keep track of the number of units of each dessert she has in stock every day. However, sometimes she receives a shipment, and other times she sells some desserts. You need to help her manage her inventory. The bakery stocks N different types of desserts. You need to write a program that will process a series of transactions and output the final number of units for each type of dessert in stock. Each transaction is either a shipment or a sale. A shipment means receiving more units, and a sale means reducing the number of units. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ T ≤ 10000 (number of transactions) * 1 ≤ M_i ≤ 100 (units in each transaction) Input The input is given from Standard Input in the following format: N X_1 X_2 ... X_N T Type_1 DessertType_1 M_1 Type_2 DessertType_2 M_2 ... Type_T DessertType_T M_T Where: - N: number of different types of desserts - X_i: initial number of units of the i-th dessert (1 ≤ i ≤ N) - T: number of transactions - Type_i: type of transaction \'S\' for shipment or \'R\' for sale (1 ≤ i ≤ T) - DessertType_i: index of the dessert type for the i-th transaction (1 ≤ DessertType ≤ N) - M_i: units involved in the i-th transaction (1 ≤ i ≤ M) Output Print the final number of units for each type of dessert in stock, from type 1 to type N, on a single line separated by spaces. Examples Input 3 10 4 7 5 S 1 5 R 2 2 S 3 3 R 1 1 S 2 10 Output 14 12 10 Input 2 5 8 3 R 1 2 S 2 4 R 2 1 Output 3 11","solution":"def manage_inventory(N, initial_stock, transactions): Manages the inventory of desserts based on the given transactions. Parameters: N (int): Number of dessert types. initial_stock (list of int): Initial number of units for each dessert type. transactions (list of tuples): Each tuple contains a transaction in the form (\'S\' or \'R\', dessert_type_index, units) Returns: list of int: Final number of units for each type of dessert. # Initialize stock based on initial values stock = initial_stock[:] # Process each transaction for transaction in transactions: type_trx, dessert_type, units = transaction if type_trx == \'S\': stock[dessert_type - 1] += units elif type_trx == \'R\': stock[dessert_type - 1] -= units return stock"},{"question":"A courier company offers package delivery services with four different delivery modes: Express 1000 yen per kg Standard 700 yen per kg Economy 400 yen per kg Budget 200 yen per kg You are in charge of generating the billing amount based on the parcels that have been processed today. Each parcel’s delivery mode and weight are recorded. However, the order in which the delivery modes are listed is not fixed. Create a program to calculate the total billing amount for each parcel. Input Input data is given in the following format. m1 w1 m2 w2 m3 w3 m4 w4 The input consists of 4 lines. Line i is given the integer mi (1 ≤ mi ≤ 4) for the delivery mode and the integer wi (0 ≤ wi ≤ 100) for the weight in kilograms. The integers 1, 2, 3, and 4 representing the delivery modes map to Express, Standard, Economy, and Budget respectively. Numbers from 1 to 4 always appear exactly once as values ​​for m1, m2, m3, and m4, but they are not always given in the fixed order of 1, 2, 3, 4. Output Output the billing amount for each parcel. Example Input 4 10 3 5 1 2 2 8 Output 2000 2000 2000 5600","solution":"def calculate_billing(data): Calculates the billing amount for each parcel based on its delivery mode and weight. Parameters: data (list of tuples): Each tuple contains (m, w) where m is the delivery mode and w is the weight in kg. Returns: list of int: Billing amount for each parcel. # Prices per kg for each mode. Index 0 is a placeholder to make the mapping direct prices = [0, 1000, 700, 400, 200] result = [] for m, w in data: cost = prices[m] * w result.append(cost) return result"},{"question":"You are given an array of integers. Reorder the array in such a way that the difference between any adjacent elements is minimized. Input The first line contains a single integer n (2 ≤ n ≤ 105) – the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 109) – the elements of the array. Output Print the reordered array such that the absolute difference between any adjacent elements is minimized. Example Input 5 4 2 1 10 5 Output 1 2 4 5 10 Input 3 7 11 2 Output 2 7 11 Note In the first sample, the reordered array [1, 2, 4, 5, 10] has the differences |2-1|=1, |4-2|=2, |5-4|=1, |10-5|=5, where the minimum possible adjacent differences are achieved by sorting the array. In the second sample, the reordered array [2, 7, 11] has the differences |7-2|=5, |11-7|=4, which also minimize the adjacent differences by sorting the array.","solution":"def minimize_adjacent_difference(arr): Reorders the input array such that the absolute difference between any adjacent elements is minimized. Args: arr (list): List of integers. Returns: list: The reordered list with minimized adjacent differences. arr.sort() return arr"},{"question":"Mira is a coding enthusiast who loves prime numbers. She recently encountered a problem where she needs to count the prime numbers in a given range [A, B] inclusive. A number is considered prime if it is greater than 1 and has no divisors other than 1 and itself. She needs your help to write a function that finds the number of prime numbers within this range. Your task is to write a program to determine how many prime numbers lie in the given range [A, B]. Input The input consists of two integers A and B (1 ≤ A ≤ B ≤ 10^6). Output Print one integer, the number of prime numbers in the range [A, B]. Examples Input 10 20 Output 4 Input 1 10 Output 4 Note In the first example, the prime numbers between 10 and 20 are 11, 13, 17, and 19. Therefore, the output is 4. In the second example, the prime numbers between 1 and 10 are 2, 3, 5, and 7. Therefore, the output is 4.","solution":"def count_primes_in_range(A, B): Returns the number of prime numbers in the given range [A, B] inclusive. if A > B: return 0 sieve = [True] * (B + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(B**0.5) + 1): if sieve[start]: for multiple in range(start*start, B+1, start): sieve[multiple] = False count = 0 for number in range(A, B+1): if sieve[number]: count += 1 return count"},{"question":"Ice Cream Parlor Problem: You are given a list of the prices of ice cream flavors, and the total amount of money you have. Your task is to choose two distinct flavors such that you spend exactly the amount of money you have. Input The first line contains an integer t, the number of test cases. For each test case, the first line contains an integer m, the total amount of money you have. The second line contains an integer n, the number of ice cream flavors. The third line contains n integers d, the prices of the ice cream flavors. Output For each test case, print two space-separated integers representing the 1-based indices of the two selected flavors. You may assume that a solution exists for each input set and that there is exactly one solution. Examples Input 2 4 5 1 4 5 3 2 4 4 2 2 4 3 Output 1 4 1 2","solution":"def find_flavors(total_money, flavors): Returns the 1-based indices of the two flavors that add up to total_money. flavor_map = {} for index, price in enumerate(flavors): complement = total_money - price if complement in flavor_map: return flavor_map[complement] + 1, index + 1 flavor_map[price] = index return None def ice_cream_parlor(t, test_cases): Processes a list of test cases and finds the flavors for each case. t: number of test cases test_cases: a list of tuples (total_money, n, flavors) Returns a list of results for each test case results = [] for total_money, n, flavors in test_cases: results.append(find_flavors(total_money, flavors)) return results"},{"question":"Alice is a botanist who is researching the growth patterns of a particular species of plant. She has a collection of plant growth data recorded over several days. Each day\'s record includes the day number and the recorded height of the plant on that day. Alice is trying to determine the maximum increase in height over any continuous span of days from her data. Your task is to help Alice by writing a program that finds the maximum increase in height observed over any contiguous segment of days. Input The first line contains an integer n (1 ≤ n ≤ 10^5), which indicates the number of days recorded. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^4), where h_i represents the height of the plant on the i-th day. Output Output a single integer representing the maximum increase in height observed over any contiguous segment of days. If the plant\'s height does not increase on any span of days, print 0. Examples Input 6 4 2 3 5 1 6 Output 5 Input 5 3 3 3 3 3 Output 0 Input 4 1 5 3 6 Output 5 Note In the first example, the maximum increase in height is observed from day 2 to day 5 (2, 3, 5, 1), where the height increases from 2 to 6, resulting in an increase of 6 - 4 = 5. In the second example, there’s no increase in height over any span of days, so the output is 0. In the third example, the maximum increase is from 1 to 6, giving an increase of 6 - 1 = 5.","solution":"def max_increase(n, heights): Finds the maximum increase in plant height over any contiguous segment of days. Args: n : int : Number of days recorded. heights : list of int : Heights of the plant on each day. Returns: int : Maximum increase in height over any continuous span of days. max_increase = 0 min_height = heights[0] for i in range(1, n): if heights[i] > min_height: max_increase = max(max_increase, heights[i] - min_height) else: min_height = heights[i] return max_increase"},{"question":"You are given an integer n. Check whether the product of the digits of n is equal to 0, i.e., whether any digit of the number is 0. Input The input will consist of a single integer n. The integer contains between 1 and 100 digits, inclusive. Output Output \\"YES\\" if any digit of the number is 0, and \\"NO\\" otherwise (quotes for clarity only). Examples Input 405 Output YES Input 123456789 Output NO Input 70701 Output YES Note Note that a single 0 digit in the number is sufficient for the product of the digits to be 0 (see sample 1 and 3). The absence of a 0 digit indicates that the product of the digits is not 0 (see sample 2).","solution":"def check_zero_in_number(n): Checks whether any digit of the number n is 0. Returns \\"YES\\" if any digit is 0, otherwise returns \\"NO\\". for digit in str(n): if digit == \'0\': return \\"YES\\" return \\"NO\\""},{"question":"Minimites are learning how to determine whether a given number is a palindrome. A palindrome is a number that remains the same when its digits are reversed. Your task is to help them by writing a function that reads a series of numbers and determines if each number is a palindrome. For the input, the first line contains n number of records which is less than 1000. Each of the next n lines contains a single number. SAMPLE INPUT 4 121 12321 123 45654 SAMPLE OUTPUT 121 is a palindrome 12321 is a palindrome 123 is not a palindrome 45654 is a palindrome Explanation EXAMPLE 1:- The number 121 reads the same backward as forward. EXAMPLE 2:- The number 12321 reads the same backward as forward. EXAMPLE 3:- The number 123 reads differently backward (321) than forward. EXAMPLE 4:- The number 45654 reads the same backward as forward. You need to check each number and print whether it is a palindrome or not in the given format.","solution":"def is_palindrome(num): Checks if a number is a palindrome. return str(num) == str(num)[::-1] def check_palindromes(numbers): Checks a list of numbers to determine if they are palindromes. Args: numbers: A list of integers Returns: A list of strings stating whether each number is a palindrome or not. results = [] for num in numbers: if is_palindrome(num): results.append(f\\"{num} is a palindrome\\") else: results.append(f\\"{num} is not a palindrome\\") return results"},{"question":"Carla is organizing a series of workshops on writing efficient algorithms. She decides to provide participants with practical problems to solve during the sessions. One of the problems involves arranging a sequence of integers based on a custom sorting criterion. The custom sorting criterion is defined as follows: A number x comes before a number y if the number of \'1\'s in the binary representation of x is less than the number of \'1\'s in the binary representation of y. If two numbers have the same number of \'1\'s, then they should be sorted in ascending order. Write a function `custom_sort(arr)` that takes a list of non-negative integers and returns a new list that is sorted according to the custom sorting criterion described above. # Input: - `arr` (List[int]): A list of non-negative integers (0 ≤ arr[i] ≤ 10^6). # Output: - List[int]: A list of integers sorted based on the custom sorting criterion. # Examples: Input: ``` [3, 7, 8, 9, 6] ``` Output: ``` [8, 3, 9, 6, 7] ``` Explanation: - Binary representation of 3: 11 (2 \'1\'s) - Binary representation of 7: 111 (3 \'1\'s) - Binary representation of 8: 1000 (1 \'1\') - Binary representation of 9: 1001 (2 \'1\'s) - Binary representation of 6: 110 (2 \'1\'s) Sorted based on the number of \'1\'s in binary: - 8 (1 \'1\') - 3 (2 \'1\'s) - 9 (2 \'1\'s but 9 > 3) - 6 (2 \'1\'s but 6 > 3 and 6 < 9) - 7 (3 \'1\'s) # Constraints: - The length of the list `arr` will be in the range [1, 1000]. - Each element in the list will be a non-negative integer not exceeding 10^6. Implement the `custom_sort` function: ```python def custom_sort(arr): # Your code goes here pass ```","solution":"def custom_sort(arr): Sorts the list of integers based on the custom sorting criterion. The sorting criterion: - A number x comes before a number y if the number of \'1\'s in the binary representation of x is less than the number of \'1\'s in the binary representation of y. - If two numbers have the same number of \'1\'s, they are sorted in ascending order. :param arr: List[int] - A list of non-negative integers. :return: List[int] - The sorted list of integers. return sorted(arr, key=lambda x: (bin(x).count(\'1\'), x))"},{"question":"In a faraway land, there is a kingdom consisting of n lands connected by m bidirectional roads. Each road connects two different lands and has a certain toll that must be paid to use it. The king of the kingdom wants to establish a new trade route from the capital city to another town. However, the kingdom treasury isn\'t in a good condition, so the king wants to build the cheapest possible path. Your task is to determine the minimum toll cost required to travel from the capital to the specified town. If no path exists, return -1. Input The first line contains three integers n, m, q (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 100) - the number of lands, the number of roads, and the number of queries respectively. Then follow m lines, each containing three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100000) - the details of each road, where u and v are the lands connected by the road and w is the toll for that road. Finally, the next q lines contain two integers a and b (1 ≤ a, b ≤ n) denoting a query asking for the minimum toll cost to travel from land a to land b. Output For each query, print the minimum toll cost required to travel from land a to land b. If there is no possible path, print -1. Examples Input 5 7 3 1 2 2 1 3 5 2 3 1 2 4 4 3 4 3 3 5 2 4 5 3 3 5 1 4 2 5 Output 2 6 3 Note For the first query, the minimal toll cost to travel from land 3 to land 5 is 2 (using the direct road with toll 2). For the second query, the minimal toll cost to travel from land 1 to land 4 is 6 (using roads 1-2-3-4, with a total toll cost of 2 + 1 + 3 = 6). For the third query, the minimal toll cost to travel from land 2 to land 5 is 3 (using the direct road with toll 3). In case there are multiple paths that can be used to reach the destination, consider the one with the lowest toll cost.","solution":"import heapq def minimum_toll_cost(n, m, q, roads, queries): def dijkstra(start, n, adj): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) results = [] for a, b in queries: if a == b: results.append(0) continue dist = dijkstra(a, n, adj) results.append(dist[b] if dist[b] != float(\'inf\') else -1) return results"},{"question":"Two friends, Alice and Bob, are playing a game with two piles of stones. They take turns making moves, with Alice going first. In each move, a player can remove 1 stone from either of the piles, or 2 stones from either of the piles, or both (one stone from each pile). The player who cannot make a move loses the game. Your task is to determine the winner of the game assuming both play optimally. Input The input consists of two integers A and B (1 ≤ A, B ≤ 10^9) – the number of stones in each of the two piles. Output Print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". Examples Input 2 1 Output Alice Input 1 1 Output Alice Input 2 2 Output Bob Note In the first example, Alice can win by removing 1 stone from the first pile and 1 stone from the second pile, causing Bob to lose since no stones are left for him to move. In the second example, Alice can take 1 stone from either pile. Bob will then be forced to remove the last stone from the remaining pile, causing him to lose. In the third example, regardless of what Alice does in her first move, she will lose: if she takes 1 stone from either pile, Bob can then mimic her moves such that Bob will always take the last stone(s).","solution":"def game_winner(A, B): Determines the winner of the game with two piles of stones. :param A: Number of stones in pile A :param B: Number of stones in pile B :return: \\"Alice\\" if Alice wins, otherwise \\"Bob\\" if A == B: return \\"Bob\\" if A % 2 == 0 else \\"Alice\\" else: return \\"Alice\\""},{"question":"A certain company has implemented a new feature in their messaging application called \\"self-destructing messages.\\" These messages must be displayed only for a specific period before they disappear. The app is designed to handle multiple users and their messages concurrently. Each user creates a list of messages along with the time they should self-destruct. Your task is to implement a function that will print the messages according to their self-destruct time and then delete them from the global message list. The function should meet the following requirements: - Print the messages immediately if their self-destruct time is zero. - For messages with a non-zero self-destruct time, print the message after the specified seconds and then remove it from the list. - Use the least amount of resources possible, keeping track of time accurately. Here is a sample demonstration of the function\'s usage: Input An integer N representing the number of users, followed by N blocks of user message data, where each block consists of: - An integer M, representing the number of messages for that user. - M lines, each containing a message string and an associated self-destruct time in seconds. Constraints * 1 ≤ N ≤ 10^3 * 1 ≤ M ≤ 10^5 * 0 ≤ self-destruct-time ≤ 10^3 * Message strings contain only printable ASCII characters and are at most 100 characters long. Output Print the self-destructing messages at their respective times. Example Input 2 3 \\"Hello World\\" 5 \\"Quick Message\\" 1 \\"Instant Message\\" 0 2 \\"Sample Message 1\\" 2 \\"Sample Message 2\\" 3 Output Instant Message Quick Message Hello World Sample Message 1 Sample Message 2","solution":"import time import threading def print_and_delete_message(message, delay): Print the message after a specified delay. if delay == 0: print(message) else: time.sleep(delay) print(message) def handle_messages(num_users, user_messages): Handle the self-destructing messages for multiple users. Parameters: num_users (int): Number of users. user_messages (list of lists): Each list contains tuples of message and its self-destruct time. threads = [] for messages in user_messages: for message, delay in messages: thread = threading.Thread(target=print_and_delete_message, args=(message, delay)) threads.append(thread) thread.start() for thread in threads: thread.join()"},{"question":"You are given a string consisting of lowercase letters. You want to form the longest possible palindrome by reordering some (or all) of its letters. A palindrome is a word that reads the same forwards and backwards. Your task is to determine the length of the longest palindrome that can be formed using the characters in the given string. Input The first line contains an integer T denoting the number of test cases. The following T lines contain a single string each. Output For each test case, output a single integer corresponding to the length of the longest palindrome that can be formed using the characters of the given string. Constraints 1 ≤ T ≤ 100 1 ≤ length of string ≤ 1,000 Example Input: 2 abccccdd aabb Output: 7 4 Explanation For the first test case, one possible longest palindrome is \\"dccaccd\\", which has a length of 7. For the second test case, one possible longest palindrome is \\"abba\\", which has a length of 4.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed using the characters in the given string s. from collections import Counter char_count = Counter(s) length = 0 odd_count_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True # If there was any character with an odd count, we can put one of them in the middle of the palindrome if odd_count_found: length += 1 return length def process_inputs(test_cases): results = [] for s in test_cases: results.append(longest_palindrome_length(s)) return results"},{"question":"Grisha is fascinated by prime numbers, and he has come up with an interesting problem related to them. A prime factorization of a number is representing it as a product of its prime factors. Grisha has an integer n (1 ≤ n ≤ 10^6) and he wants to know the prime factorization of n in ascending order of the prime factors. Help Grisha by writing a program that outputs the prime factorization of n such that each prime factor appears with its multiplicity. Input The input consists of a single integer n (1 ≤ n ≤ 10^6). Output Print the prime factorization of n in the format: p1^k1 * p2^k2 * ... * pl^kl where pi is a prime factor and ki is its multiplicity. Examples Input 28 Output 2^2 * 7^1 Input 1000000 Output 2^6 * 5^6 Input 17 Output 17^1 Note In the first example, 28 = 2^2 * 7^1. In the second example, 1000000 = 2^6 * 5^6. In the third example, 17 is a prime number and its only prime factor is itself with multiplicity 1 = 17^1.","solution":"def prime_factors(n): Returns the prime factorization of n in the format p1^k1 * p2^k2 * ... * pl^kl, where pi is a prime factor and ki is its multiplicity. factorization = [] # Handle 2 separately for efficiency count = 0 while n % 2 == 0: n //= 2 count += 1 if count > 0: factorization.append((2, count)) # Check odd factors from 3 onwards factor = 3 while factor * factor <= n: count = 0 while n % factor == 0: n //= factor count += 1 if count > 0: factorization.append((factor, count)) factor += 2 # If n is still greater than 1, then it is a prime factor if n > 1: factorization.append((n, 1)) # Generate result string in desired format result = \' * \'.join(f\\"{p}^{k}\\" for p, k in factorization) return result"},{"question":"You are given an `n x m` 2D grid representing a map of treasures (`T`) and pitfalls (`P`). Your task is to find the shortest path from the top-left corner to the bottom-right corner. Each cell can either be: - `.` (an empty cell which you can walk through), - `T` (a treasure cell which you can collect treasures from, it acts as an empty cell in terms of movement), - `P` (a pitfall cell which you cannot walk through). You can move either up, down, left, or right from a cell. You need to find the shortest path that leads from the top-left corner to the bottom-right corner. If there is no valid path, return `-1`. Input: The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid. Each of the next `n` lines contains `m` characters, describing the grid as explained above. Output: Print the length of the shortest path from the top-left to the bottom-right corner. If no such path exists, print `-1`. SAMPLE INPUT: 4 4 .... .TP. .PTT .T... SAMPLE OUTPUT: 6 Explanation: The shortest path from the top-left corner (0,0) to the bottom-right corner (3,3) is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) which consists of 6 steps.","solution":"from collections import deque def shortest_path(n, m, grid): # Directions for movements in the grid: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize the queue for BFS and visited set queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: row, col, steps = queue.popleft() # If we\'ve reached the bottom-right corner, return the steps count if row == n - 1 and col == m - 1: return steps # Explore all possible directions for dr, dc in directions: new_row, new_col = row + dr, col + dc # Check if the new position is within grid bounds and can be moved to if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited: if grid[new_row][new_col] in [\'.\', \'T\']: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) # If we exhaust the queue without finding the bottom-right corner, return -1 return -1 # Example usage n = 4 m = 4 grid = [ \\"....\\", \\".TP.\\", \\".PTT\\", \\".T..\\" ] print(shortest_path(n, m, grid)) # Output: 6"},{"question":"You are provided with a list of words and a target word. Your task is to create a program that can identify the closest match to the target word from the list based on the Levenshtein distance (edit distance). The Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other. The program should handle multiple inputs of words and compute the closest match in real-time as words are added. If there is a tie (i.e., two words have the same Levenshtein distance from the target word), return the word that appears first in the list. The program should stop when the input received is an empty string (\\"\\"). INPUT FORMAT - The first line contains the target word. - Subsequent lines each contain a word until the empty string is encountered. OUTPUT FORMAT - Every time a new word is added to the list, print the current closest word to the target word based on the Levenshtein distance. - When an empty string is encountered, stop the program. SAMPLE INPUT kitten sitting bitten fitting kitten mittens kit kitten fatten kittens kitten smitten bit kit bitten kitten (empty line) SAMPLE OUTPUT sitting bitten fitting kitten kitten kit kitten kit kitten kittens kitten kit kit kitten Note that the closest word is reassessed with every new input, accounting for potential changes in the least edit distance as new words are added.","solution":"def levenshtein_distance(a, b): Calculate the Levenshtein distance between two strings a and b. if len(a) < len(b): return levenshtein_distance(b, a) if len(b) == 0: return len(a) previous_row = range(len(b) + 1) for i, ca in enumerate(a): current_row = [i + 1] for j, cb in enumerate(b): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (ca != cb) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] def find_closest_word(target, words): Find the closest word to the target based on Levenshtein distance. if not words: return None closest_word = words[0] min_distance = levenshtein_distance(target, closest_word) for word in words[1:]: distance = levenshtein_distance(target, word) if distance < min_distance: closest_word = word min_distance = distance return closest_word if __name__ == \\"__main__\\": target = input().strip() words = [] while True: word = input().strip() if word == \\"\\": break words.append(word) closest_word = find_closest_word(target, words) print(closest_word)"},{"question":"Problem Statement: A library management system needs to keep track of the check-in and check-out times of books. The system records the LogEntry of each book in the form of a timestamp and the action type (either \'check-in\' or \'check-out\'). Each timestamp is an integer representing the number of seconds since a fixed, arbitrary point in time. Given a series of LogEntry for various books, write a function to determine the total duration a particular book was checked out, before being checked in, based on the recorded logs. The input to your function will be a list of tuples where each tuple represents a LogEntry with the first element as the timestamp and the second element as the action type. If a book has been checked out but not yet checked in at the end of the log, include the time from check-out until the end of the log list. Write a function: ```python def calculate_checked_out_time(logs: [(int, str)]) -> int: ``` The function should return the total duration of time the book was checked out based on the log entries provided. # Constraints 1 <= len(logs) <= 10^3 Each log entry is a tuple (timestamp, action) where action is either \'check-in\' or \'check-out\'. # Example ```python # Example 1: logs = [(1, \'check-out\'), (10, \'check-in\'), (15, \'check-out\'), (25, \'check-in\')] print(calculate_checked_out_time(logs)) # Output: 19 # Example 2: logs = [(1, \'check-out\'), (20, \'check-in\'), (30, \'check-out\'), (40, \'check-out\')] print(calculate_checked_out_time(logs)) # Output: 19 ```","solution":"def calculate_checked_out_time(logs: [(int, str)]) -> int: Calculates the total duration a book was checked out. Args: logs: List of tuples where each tuple consists of (timestamp, action) Returns: Total duration in seconds for which the book was checked out total_checked_out_time = 0 last_check_out_time = None for timestamp, action in logs: if action == \'check-out\': last_check_out_time = timestamp elif action == \'check-in\' and last_check_out_time is not None: total_checked_out_time += (timestamp - last_check_out_time) last_check_out_time = None # If the book is still checked out at the end of the logs if last_check_out_time is not None: total_checked_out_time += (logs[-1][0] - last_check_out_time) return total_checked_out_time"},{"question":"You are given a string `s` consisting of lowercase English letters. In one operation, you can select any character of `s` and replace it with any other lowercase English letter. Your goal is to make all characters of the string identical. Determine the minimum number of operations required to achieve this goal. Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100), where |s| is the length of the string. Output For each test case, print the minimum number of operations required to make all characters of the string the same. Example Input 3 aabb abcd aaa Output 2 3 0","solution":"def min_operations_to_identical(t, cases): results = [] for s in cases: char_counts = {} for char in s: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 max_char_count = max(char_counts.values()) min_operations = len(s) - max_char_count results.append(min_operations) return results"},{"question":"Dana is an avid tennis fan and enjoys playing the sport whenever she gets a chance. She has recently come up with a new scoring method, which she calls \\"Mirrored Tennis Scores\\". It works by checking whether the scores of two players, A and B, during a game are palindromic in nature when concatenated. A palindromic score occurs when the sequence of scores can be read the same backward as forward. For instance, if player A\'s score is \\"123\\" and player B\'s score is \\"321\\", then the concatenation of these scores is \\"123321\\", which is a palindrome. Given the scores of player A and player B as non-negative integers represented as strings, write a function to determine if the concatenation of these scores forms a palindromic string. Input The input consists of two integers in string format: - Score of player A (1 ≤ length ≤ 10^5) - Score of player B (1 ≤ length ≤ 10^5) Output Output \\"YES\\" if the concatenation of scores is a palindrome, otherwise output \\"NO\\". Examples Input ``` 123 321 ``` Output ``` YES ``` Input ``` 123 456 ``` Output ``` NO ```","solution":"def is_palindromic_score(score_a, score_b): Checks if the concatenation of scores of player A and player B forms a palindromic string. concatenated_score = score_a + score_b return \\"YES\\" if concatenated_score == concatenated_score[::-1] else \\"NO\\""},{"question":"Alice and Bob are playing a game with a string `s` consisting of lowercase English letters. They take turns playing, with Alice going first. On each turn, if the current player can choose any character in the string `s` and remove it, then it\'s the next player\'s turn. The game continues until all characters have been removed. The player who cannot make a move (i.e., when the string is empty) loses the game. The players are intelligent and will always make decisions to maximize their chances of winning. Your task is to determine who will win the game if both Alice and Bob play optimally. Input The first line contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Output For each test case, print \\"Alice\\" if Alice has a winning strategy, otherwise print \\"Bob\\". Examples Input 3 aaaa bobob abcde Output Bob Alice Alice Explanation 1. For the string \\"aaaa\\", Alice will remove one \'a\', still leaving an odd number of \'a\'s in the string for Bob, and eventually Bob will win. 2. For the string \\"bobob\\", the optimal strategy involves Alice removing \'b\'s to ensure Bob cannot win, making her win. 3. For the string \\"abcde\\", Alice will always win because every move she makes ensures that Bob will not be able to remove the character strategically to win.","solution":"def winner_of_the_game(t, test_cases): results = [] for s in test_cases: # Alice wins if the length of the string is odd, Bob wins if the length is even if len(s) % 2 != 0: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"You are given an integer sequence B of length M. You need to partition the sequence into the minimum number of contiguous subsequences such that each subsequence is strictly increasing. Write a program to find the minimum number of such subsequences. Constraints * 1 leq M leq 2 times 10^5 * 1 leq B_i leq 10^9 ( 1 leq i leq M ) * All values in the input are integers. Input Input is given from Standard Input in the following format: M B_1 B_2 ... B_M Output Print the minimum number of strictly increasing contiguous subsequences. Examples Input 5 4 2 3 1 5 Output 3 Input 6 1 2 3 4 5 6 Output 1 Input 7 10 20 30 20 40 50 30 Output 3","solution":"def min_increasing_subsequences(M, B): Returns the minimum number of strictly increasing contiguous subsequences. if M == 0: return 0 count = 1 for i in range(1, M): if B[i] <= B[i - 1]: count += 1 return count"},{"question":"John is organizing the shelves in the library. Each shelf has a number of books, but not all shelves are organized yet. Books are supposed to be arranged such that all books with even number of pages are placed before books with odd number of pages on each shelf. Write a program to help John achieve this. Input The first line of input contains an integer T, i.e. number of test cases. Each of the next T lines contains a sequence of integers representing the number of pages in each book on a particular shelf. Output For each test case, output a sequence of integers where all even number of pages appear before all odd number of pages, preserving the original order of even and odd numbers among themselves. Constraints 1 ≤ T ≤ 100 1 ≤ length of each sequence ≤ 10^5 1 ≤ number of pages in each book ≤ 10^9 Example Input: 2 4 3 2 1 10 11 8 7 6 3 Output: 4 2 3 1 10 8 6 11 7 3 Explanation Example case 1: The input sequence of books on the first shelf is 4 3 2 1. After rearranging, all books with even number of pages (4 and 2) are placed before books with odd number of pages (3 and 1), maintaining their relative order. Hence, the output is 4 2 3 1. Example case 2: The input sequence of books on the second shelf is 10 11 8 7 6 3. After rearranging, all books with even number of pages (10, 8, and 6) are placed before books with odd number of pages (11, 7, and 3), maintaining their relative order. Hence, the output is 10 8 6 11 7 3.","solution":"def arrange_books_on_shelves(test_cases): Rearranges books on each shelf such that all books with even number of pages are placed before books with odd number of pages, maintaining relative order. Parameters: test_cases (list of list of int): list of test cases, where each test case is a list of integers representing the number of pages in each book on a shelf. Returns: list of list of int: List of rearranged book sequences for each test case. results = [] for books in test_cases: evens = [book for book in books if book % 2 == 0] odds = [book for book in books if book % 2 == 1] results.append(evens + odds) return results"},{"question":"Riya is learning about trees in her data structures class. As part of her assignment, she is required to reconstruct a binary tree from its given inorder and postorder traversals. Reconstructing the tree will help her further understand the properties of binary trees and traversal methods. Given the inorder and postorder traversal sequences of a binary tree, you are required to help Riya construct the unique binary tree and print its preorder traversal. Input First line of input contains an integer T denoting the number of test cases. For each test case: - First line contains an integer N representing the number of nodes in the binary tree. - Second line contains N space-separated integers denoting the inorder traversal of the binary tree. - Third line contains N space-separated integers denoting the postorder traversal of the binary tree. Output For each test case, print a single line containing the preorder traversal of the constructed binary tree. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 1000 1 ≤ value of nodes ≤ 1000 All values in the traversals are unique and represent valid nodes of the binary tree. Sample Input: 2 6 4 2 5 1 6 3 4 5 2 6 3 1 3 3 2 1 3 2 1 Sample Output: 1 2 4 5 3 6 1 2 3 Explanation For the first sample input: Inorder traversal: 4 2 5 1 6 3 Postorder traversal: 4 5 2 6 3 1 Reconstructed binary tree: 1 / 2 3 / 4 5 6 Preorder traversal of the binary tree: 1 2 4 5 3 6 For the second sample input: Inorder traversal: 3 2 1 Postorder traversal: 3 2 1 Reconstructed binary tree: 1 / 2 / 3 Preorder traversal of the binary tree: 1 2 3","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(inorder, postorder): if not inorder or not postorder: return None root_val = postorder.pop() root = TreeNode(root_val) inorder_index = inorder.index(root_val) root.right = build_tree(inorder[inorder_index+1:], postorder) root.left = build_tree(inorder[:inorder_index], postorder) return root def preorder_traversal(root): if root is None: return [] return [root.value] + preorder_traversal(root.left) + preorder_traversal(root.right) def reconstruct_tree_and_print_preorder(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] inorder = test_cases[i][1] postorder = test_cases[i][2] root = build_tree(inorder, postorder) preorder = preorder_traversal(root) results.append(preorder) return results"},{"question":"A group of friends decided to play a card game. Each card has a unique integer identifier ranging from 1 to N (inclusive). Unfortunately, one card from the set got lost. Your task is to identify the missing card identifier based on the cards that are still left in the deck. Input First line of input contains T, the number of test cases. Each of the following T test cases includes: - An integer N, representing the number of cards initially present in the deck. - An array A of N-1 integers, listing the remaining card identifiers in the deck after the loss. Output For each test case, output the identifier of the missing card. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 100000 Example Input: 2 5 1 2 4 5 6 6 4 2 5 1 Output: 3 3 Explanation Example case 1. Since 3 is the card identifier missing from the sequence [1, 2, 4, 5]. Example case 2. Since 3 is the card identifier missing from the sequence [6, 4, 2, 5, 1].","solution":"def find_missing_card(T, cases): results = [] for N, deck in cases: total_sum = N * (N + 1) // 2 # Sum of first N natural numbers current_sum = sum(deck) # Sum of remaining cards missing_card = total_sum - current_sum # Missing card is the difference results.append(missing_card) return results"},{"question":"You are given an integer array, and you need to determine the shortest subarray such that the sum of its elements is at least a given value. If no such subarray exists, output -1. Input The first line contains two integers n and s (1 ≤ n ≤ 100000, 1 ≤ s ≤ 10^9) — the number of elements in the array and the required sum. The second line contains n integers ai (1 ≤ ai ≤ 10^6) — the elements of the array. Output Print the length of the shortest subarray with a sum of at least s. If no such subarray exists, print -1. Example Input 5 11 1 2 3 4 5 Output 3","solution":"def shortest_subarray_length_with_sum_at_least(arr, s): n = len(arr) min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else -1 # Example Usage # arr = [1, 2, 3, 4, 5] # s = 11 # print(shortest_subarray_length_with_sum_at_least(arr, s)) # Output: 3"},{"question":"The development of an enhanced calculator is required to support various operations and variables. You need to implement a module that can handle arithmetic expressions involving integer variables. These expressions will be given in a specific format and the evaluation should be performed based on defined rules. You should consider the following operations for the calculator: * Addition (+) * Subtraction (-) * Multiplication (*) * Division (//) * Assignment (=) The expressions will be provided as strings, and they will follow basic algebraic rules. The module should: 1. Parse the string to identify the variables and constants. 2. Evaluate the expression using the current values of the variables. 3. Update the value of a variable if an assignment is performed. 4. Detect any invalid expressions and return an error message for them. The input consists of multiple lines, each containing a single expression. Your program must process each expression in the order given. For each expression, return the result of the expression, the updated value of a variable if an assignment is performed, or an error message if the expression is invalid. # Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of expressions. Each of the following n lines contains a single expression. Each expression: * Is guaranteed to have space-separated tokens. * Uses the operators mentioned above. * Uses only lowercase English letters for variable names. * Has integer constants within the range [-10^3, 10^3]. * Will be a valid algebraic expression under normal circumstances, but incorrect usage (e.g., division by zero) should return an error. # Output Print n lines. Each line should have the result: * The computed value of the expression. * For assignment operations, the value assigned to the variable. * The string \\"ERROR\\" if the expression is invalid. # Examples Input ``` 5 a = 5 b = 3 c = a + b d = c * 2 e = d / (b - 3) ``` Output ``` 5 3 8 16 ERROR ``` # Note In the example: 1. The first expression assigns `5` to `a`. 2. The second expression assigns `3` to `b`. 3. The third expression evaluates `c` as `a + b` which is `5 + 3`, thus `c` is `8`. 4. The fourth expression evaluates `d` as `c * 2` which is `8 * 2`, thus `d` is `16`. 5. The fifth expression attempts to evaluate `e` as `d / (b - 3)`, but since `b - 3` evaluates to `0`, this causes a division by zero error, resulting in \\"ERROR\\".","solution":"def evaluate_expressions(n, expressions): variables = {} results = [] def evaluate(expression): try: # Split the expression into tokens tokens = expression.split() if \\"=\\" in tokens: # Handle assignments var_name = tokens[0] value_expression = \\" \\".join(tokens[2:]) value = eval(value_expression, {}, variables) variables[var_name] = value return value else: # Handle standard arithmetic expressions return eval(expression, {}, variables) except Exception: return \\"ERROR\\" for expression in expressions: result = evaluate(expression) results.append(result) return results # Example usage expressions = [ \\"a = 5\\", \\"b = 3\\", \\"c = a + b\\", \\"d = c * 2\\", \\"e = d // (b - 3)\\" ] n = len(expressions) results = evaluate_expressions(n, expressions) for result in results: print(result) # Expected output: 5, 3, 8, 16, \\"ERROR\\""},{"question":"You are given an integer array `arr` of size `n` (1 ≤ n ≤ 10^5). Perform the following operation exactly `k` times (1 ≤ k ≤ 10^5): 1. Choose any subarray (contiguous segment of the array). 2. Reverse the chosen subarray. Your task is to find the lexicographically smallest array possible after exactly `k` operations. Input The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 10^5) — the size of the array and the number of operations. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the lexicographically smallest array possible after exactly `k` operations. Examples Input 5 1 4 3 2 1 5 Output 1 2 3 4 5 Input 6 2 3 1 2 5 4 6 Output 1 2 3 4 5 6 Input 4 3 9 8 7 6 Output 6 7 8 9 Note In the first example, we can choose the subarray from the 1st to the 4th element and reverse it to get `[1, 2, 3, 4, 5]`. In the second example, we can make the array `[1, 2, 3, 5, 4, 6]` on the first operation by reversing the subarray from the 1st to the 3rd element, and then reverse the subarray from the 4th to the 5th element on the second operation to get the final array `[1, 2, 3, 4, 5, 6]`. In the third example, any sequence of 3 reversing operations will sort the array to `[6, 7, 8, 9]`.","solution":"def lexicographically_smallest_array(n, k, arr): Returns the lexicographically smallest array possible after exactly k reverse operations. if k > 1: return sorted(arr) else: smallest_arr = arr[:] for i in range(n): for j in range(i + 1, n + 1): new_arr = arr[:i] + arr[i:j][::-1] + arr[j:] if new_arr < smallest_arr: smallest_arr = new_arr return smallest_arr"},{"question":"You are given a string S consisting of lowercase English letters and an integer k (1 ≤ k ≤ |S|). In one operation, you can choose any character in the string S and replace it with any other lowercase English letter. Your goal is to find the lexicographically smallest string that can be obtained by performing at most k operations. A string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that comes earlier in the alphabet than the corresponding letter in string b. Input The first line contains an integer k (1 ≤ k ≤ 106) — the number of allowed operations. The second line contains the string S (1 ≤ |S| ≤ 106) — the input string consisting of lowercase English letters. Output Print the lexicographically smallest string that can be obtained by performing at most k operations. Example Input 2 bcda Output aada","solution":"def smallest_lex_string(k, S): Returns the lexicographically smallest string that can be obtained by performing at most k operations on the string S. Parameters: k (int): Maximum number of allowed operations. S (str): Input string consisting of lowercase English letters. Returns: str: Lexicographically smallest string possible with at most k operations. n = len(S) s_list = list(S) # Start from the beginning of the string and try to make the smallest change for i in range(n): if k == 0: break if s_list[i] != \'a\': s_list[i] = \'a\' k -= 1 return \'\'.join(s_list)"},{"question":"Megan is learning about prime numbers in her mathematics class, and she came up with an interesting problem. She wants to find the smallest integer N greater than or equal to a given integer M such that the sum of the digits of N is also a prime number. However, Megan\'s problem is that she is not very good at writing code. Your task is to write a program to help Megan. Given an integer M, the program should find the smallest integer N (N ≥ M) such that the sum of the digits of N is a prime number. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and 13 are prime numbers. Input The input to your program will consist of a single integer M (1 ≤ M ≤ 10^9). Output Your program should output a single integer N that is the smallest integer greater than or equal to M such that the sum of the digits of N is a prime number. Examples Input 10 Output 11 Input 28 Output 29 Input 100 Output 101","solution":"def is_prime(number): Check if a number is a prime number. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def sum_of_digits(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n)) def smallest_number_with_prime_digit_sum(M): Given an integer M, find the smallest integer N (N ≥ M) such that the sum of the digits of N is a prime number. N = M while True: if is_prime(sum_of_digits(N)): return N N += 1"},{"question":"Arya Stark is on a mission to eliminate the enemies of House Stark. She maintains a list of enemies\' names. However, due to her extensive travels across the Seven Kingdoms, Arya\'s list may have duplicate names. As Arya is a meticulous person, she wants to ensure that her list contains each enemy\'s name only once. Write a function to help Arya create a unique list of enemy names by removing any duplicates from her current list. INPUT The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of enemy names in Arya\'s list, followed by N lines, each containing a single enemy name. OUTPUT For each test case, print all the unique enemy names, each on a new line, maintaining their original order of appearance. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 1 ≤ Length of enemy name ≤ 50 SAMPLE INPUT 2 5 Cersei Joffrey Cersei Tywin Joffrey 4 Theon Ramsay Theon Roose SAMPLE OUTPUT Cersei Joffrey Tywin Theon Ramsay Roose","solution":"def remove_duplicates_from_list(test_cases): For each test case, the function removes duplicate names from the list while maintaining the original order of appearance and returns the cleaned-up list. :param test_cases: List of tuples, each containing a number of enemy names followed by the names themselves. :return: List of lists, where each inner list contains unique enemy names for a test case. results = [] for case in test_cases: N, names = case seen = set() unique_names = [] for name in names: if name not in seen: unique_names.append(name) seen.add(name) results.append(unique_names) return results def parse_input(input_string): Helper function to parse the input string into the required format for processing. :param input_string: String containing the raw input. :return: List of tuples with each tuple containing the number of names and the list of names. lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) names = lines[index + 1:index + 1 + N] test_cases.append((N, names)) index += N + 1 return test_cases def format_output(results): Helper function to format the list of results into the required output string. :param results: List of lists containing unique enemy names for each test case. :return: Formatted string with unique names for all test cases. output_list = [] for result in results: output_list.extend(result) output_list.append(\'\') return \'n\'.join(output_list).strip() def process_input(input_string): Processes the input string and returns the formatted output string. :param input_string: Raw input string. :return: Formatted output string. test_cases = parse_input(input_string) results = remove_duplicates_from_list(test_cases) return format_output(results)"},{"question":"You are provided with an array of integers. Your task is to find two distinct subsets such that their absolute difference in sum is minimized. The absolute difference in sum of two subsets is defined as: abs(Sum1 - Sum2) Where Sum1 is the sum of elements in the first subset and Sum2 is the sum of elements in the second subset. Constraints: - Subsets should be non-empty and you need to consider all possible distinct subsets. - The subsets should not overlap, which means no element can be present in both subsets. - Output the minimum absolute difference. Input Format: First line of the input will contain T (number of test cases). Then for every test case, the first line will contain an integer N (size of the array) and the next line will contain N space-separated integers (elements of the array). Output Format: For each test case, print the minimum absolute difference in sum between any two distinct subsets. Constraints: 1 ≤ T ≤ 5 2 ≤ N ≤ 15 1 ≤ element of array ≤ 100 SAMPLE INPUT 2 4 1 2 3 9 3 1 6 11 SAMPLE OUTPUT 0 4 Explanation: In the first test case, the two subsets which give the minimum absolute difference are {1, 2, 3} and {9}, and their absolute difference in sum is |(1+2+3) - 9| = 3 - 9 = 6. In the second test case, the two subsets which give the minimum absolute difference are {1, 6} and {11}, and their absolute difference in sum is |(1+6) - 11| = 7 - 11 = 4.","solution":"import itertools def min_subset_difference(arr): Given an array, finds the minimum absolute difference in sum between any two distinct subsets. total_sum = sum(arr) n = len(arr) min_diff = float(\'inf\') # Generate all possible subsets for i in range(1, n): for subset in itertools.combinations(arr, i): subset_sum = sum(subset) other_sum = total_sum - subset_sum diff = abs(subset_sum - other_sum) if diff < min_diff: min_diff = diff return min_diff def process_test_cases(test_cases): results = [] for case in test_cases: N = case[0] array = case[1] result = min_subset_difference(array) results.append(result) return results"},{"question":"A room temperature monitoring system records temperature at different time intervals. Given a list of recorded temperatures and a sliding window size, determine the highest temperatures seen within each window as it slides from the start to the end of the list. Each time the window slides right by one position, the oldest temperature in the window is removed and the next temperature in the list is added to the window. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of recorded temperatures. The second line contains n space-separated integers t1, t2, ... tn (-1000 ≤ ti ≤ 1000), representing the recorded temperatures. The third line contains an integer k (1 ≤ k ≤ n), the size of the sliding window. Output Print a single line with n - k + 1 space-separated integers, each representing the maximum temperature observed in that window position as it slides from the beginning to the end of the list. Examples Input 8 23 45 12 56 34 75 68 90 3 Output 45 56 56 75 75 90 Input 5 1 2 3 4 5 2 Output 2 3 4 5","solution":"from collections import deque def sliding_window_maximum(n, temperatures, k): Determines the highest temperatures within each sliding window. :param n: Number of recorded temperatures (integer). :param temperatures: List of integers representing temperatures. :param k: Size of the sliding window (integer). :return: List of integers representing maximum temperatures in each window. if n <= 0 or k <= 0 or k > n: return [] dq = deque() result = [] for i in range(n): # Remove elements not within the sliding window while dq and dq[0] <= i - k: dq.popleft() # Remove elements not larger than current element while dq and temperatures[dq[-1]] <= temperatures[i]: dq.pop() dq.append(i) # Start adding max temperatures to result list after the first window is processed if i >= k - 1: result.append(temperatures[dq[0]]) return result"},{"question":"Given an integer array nums, we need to determine if there exists a contiguous subarray of length at least 2 that sums up to an integer multiple of a given number k. If such a subarray exists, return true, otherwise return false. A contiguous subarray must contain at least two elements. Also, note that 0 is a multiple of any integer. Input nums: list of integers k: integer Output A boolean value (true/false) Examples Input nums = [23, 2, 4, 6, 7] k = 6 Output true Explanation There is a subarray [2, 4] with a sum of 6 which is a multiple of 6. Input nums = [23, 2, 6, 4, 7] k = 6 Output true Explanation There is a subarray [23, 2, 6, 4] with a sum of 35 which is a multiple of 6. Input nums = [23, 2, 6, 4, 7] k = 13 Output false","solution":"def checkSubarraySum(nums, k): # Checking for the presence of a subarray with at least 2 elements if len(nums) < 2: return False # Dictionary to store the remainder and index remainder_dict = {0: -1} total_sum = 0 for i, num in enumerate(nums): total_sum += num remainder = total_sum % k if k != 0 else total_sum if remainder in remainder_dict: if i - remainder_dict[remainder] > 1: return True else: remainder_dict[remainder] = i return False"},{"question":"Given a grid of characters representing a crossword puzzle, your task is to validate whether the given crossword is correctly solved. A crossword is solved correctly if: 1. Every row forms a valid word from a given dictionary when read from left to right. 2. Every column forms a valid word from the given dictionary when read from top to bottom. Design a program to determine if the crossword puzzle is solved correctly. # Input The input consists of multiple lines: 1. The first line contains two integers R (2 ≤ R ≤ 1000) and C (2 ≤ C ≤ 1000), the number of rows and columns in the grid, respectively. 2. The next R lines each contain a string of length C representing the characters in each row of the grid. 3. The following line contains an integer W (1 ≤ W ≤ 10000), the number of words in the dictionary. 4. The next W lines each contain a single word, which represents the words in the dictionary. All words consist of lowercase English letters only. # Output Output a single line with the word \\"Yes\\" if the crossword puzzle is solved correctly, otherwise output \\"No\\". # Example Input ``` 4 4 abcd efgh ijkl mnop 5 abcd efgh ijkl mnop aeim ``` Output ``` No ``` Input ``` 4 4 abcd efgh ijkl mnop 8 abcd efgh ijkl mnop aeim bfjn cgko dhlp ``` Output ``` Yes ``` # Explanation For the first example, the column words (\\"aeim\\", \\"bfjn\\", \\"cgko\\", \\"dhlp\\") formed by reading the grid from top to bottom do not all exist in the dictionary, so the output is \\"No\\". For the second example, all the row words (\\"abcd\\", \\"efgh\\", \\"ijkl\\", \\"mnop\\") and column words (\\"aeim\\", \\"bfjn\\", \\"cgko\\", \\"dhlp\\") exist in the dictionary, so the output is \\"Yes\\".","solution":"def is_crossword_solved_correctly(R, C, grid, dictionary): Determine if the crossword puzzle is solved correctly. Args: - R: Number of rows. - C: Number of columns. - grid: 2D list of characters representing the crossword grid. - dictionary: Set of valid words. Returns: - \\"Yes\\" if the puzzle is solved correctly, otherwise \\"No\\". # Check rows for row in grid: if row not in dictionary: return \\"No\\" # Check columns for col_idx in range(C): word = \'\'.join(grid[row_idx][col_idx] for row_idx in range(R)) if word not in dictionary: return \\"No\\" return \\"Yes\\""},{"question":"Given the integers a and b, and a string s of length n, we want to generate a sequence of integers based on the following algorithm: ``` initialize result to an empty list for each character in string s if the character is a \'0\', append a to the result if the character is a \'1\', append b to the result ``` Finally, compute the sum of the resulting sequence. Input The first line of the input contains two integers a and b (1 ≤ a, b ≤ 1000). The second line contains a string s of length n (1 ≤ n ≤ 106). Output Print a single integer, the sum of the resulting sequence. Examples Input 3 5 101 Output 13 Input 2 4 01010 Output 14 Explanation In the first example, the resulting sequence is [5, 3, 5] which sums to 13. In the second example, the resulting sequence is [2, 4, 2, 4, 2] which sums to 14.","solution":"def compute_sum(a, b, s): Generate a sequence based on the characters in the string s and compute the sum of the sequence. Parameters: a (int): The integer to use for \'0\' characters. b (int): The integer to use for \'1\' characters. s (str): The binary string to use for generating the sequence. Returns: int: The sum of the resulting sequence. result = [] for char in s: if char == \'0\': result.append(a) elif char == \'1\': result.append(b) return sum(result)"},{"question":"Your friend gave you a string S composed of lowercase English letters. You need to perform certain operations to determine the value of this string. The value of a string is defined as the sum of the values of its characters. The value of each character is determined by its position in the English alphabet (\'a\' has a value of 1, \'b\' has a value of 2, ... \'z\' has a value of 26). Operations: 1. Find the sum of the values of the characters in the string. 2. Find the maximum value of a character in the string. 3. Find the minimum value of a character in the string. Given the string S, output the sum, maximum, and minimum values. # Input The first line contains an integer T, the number of test cases. Each test case consists of a single line containing the string S. # Output For each test case, output three space-separated integers: the sum of the values of the characters, the maximum value of a character, and the minimum value of a character. # Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 (where |S| is the length of the string S) # Example Input ``` 2 abc bcd ``` Output ``` 6 3 1 9 4 2 ``` Explanation Test Case 1: - The sum of the values of \'a\', \'b\', and \'c\' is 1 + 2 + 3 = 6. - The maximum value among \'a\', \'b\', and \'c\' is 3 (which is \'c\'). - The minimum value among \'a\', \'b\', and \'c\' is 1 (which is \'a\'). Test Case 2: - The sum of the values of \'b\', \'c\', and \'d\' is 2 + 3 + 4 = 9. - The maximum value among \'b\', \'c\', and \'d\' is 4 (which is \'d\'). - The minimum value among \'b\', \'c\', and \'d\' is 2 (which is \'b\').","solution":"def string_values(S): Given a string S of lowercase English letters, this function returns a tuple containing the sum of the values of the characters in the string, the maximum value of a character, and the minimum value of a character. values = [(ord(c) - ord(\'a\') + 1) for c in S] total_sum = sum(values) max_value = max(values) min_value = min(values) return (total_sum, max_value, min_value) def process_test_cases(T, test_cases): Processes multiple test cases and returns the results for each test case. results = [] for S in test_cases: results.append(string_values(S)) return results"},{"question":"Thomas is planning a hiking trip in a mountainous area. The mountain range can be represented as an array of consecutive integers, where each element indicates the altitude of a peak. Thomas wants to maximize the amount of altitude gain during his hike. He has decided that he will start at any one peak and end at any other peak (or the same peak), but he can only move from left to right. For example, if the altitudes are represented by the array [2, 4, 3, 6, 5], Thomas can start at the first peak (altitude 2) and end at the fourth peak (altitude 6), gaining an altitude of 6-2 = 4. However, he cannot gain altitude if he starts at the fourth peak and tries to move to the third peak since he can only move to the right. Help Thomas find the maximum altitude gain he can achieve during his hike. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of peaks in the mountain range. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the altitudes of the peaks. Output In a single line, print an integer — the maximum altitude gain Thomas can achieve during his hike. Examples Input 5 2 4 3 6 5 Output 4 Input 7 10 1 3 2 5 4 7 Output 6 Note In the first example, Thomas can achieve a maximum altitude gain of 4 by starting at the first peak (2) and ending at the fourth peak (6). In the second example, Thomas can achieve a maximum altitude gain of 6 by starting at the second peak (1) and ending at the seventh peak (7).","solution":"def max_altitude_gain(n, altitudes): This function calculates the maximum altitude gain possible for Thomas\' hike. Thomas can only move from left to right. Parameters: n (int): Number of peaks altitudes (list of int): List of altitudes of the peaks Returns: int: Maximum altitude gain # Initialize the minimum altitude encountered so far. min_altitude = altitudes[0] max_gain = 0 for altitude in altitudes: # Update the maximum gain max_gain = max(max_gain, altitude - min_altitude) # Update the minimum altitude min_altitude = min(min_altitude, altitude) return max_gain"},{"question":"You are given a grid of size n x m consisting of cells labeled either 0 or 1. A cell labeled 1 represents land, and a cell labeled 0 represents water. The grid might have one or more islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. The grid\'s four edges are all surrounded by water. You may assume that all four edges of the grid are connected to water, and every island cell in the grid is reachable from any other island cell. Your task is to find the perimeter of the island. The perimeter is the total length of the island\'s outer boundary formed by land cells. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers (either 0 or 1), representing the cells of the grid. Output Print a single integer — the perimeter of the island. Examples Input 4 4 0 1 0 0 1 1 1 0 0 1 0 0 1 1 0 0 Output 16 Input 3 3 0 1 0 1 1 1 0 1 0 Output 12","solution":"def island_perimeter(grid): n = len(grid) m = len(grid[0]) perimeter = 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for i in range(n): for j in range(m): if grid[i][j] == 1: # Check all 4 directions for dx, dy in directions: ni, nj = i + dx, j + dy # Increase perimeter if adjacent cell is water or out of bounds if ni < 0 or ni >= n or nj < 0 or nj >= m or grid[ni][nj] == 0: perimeter += 1 return perimeter"},{"question":"In the enchanted forest, there is a rare tree species known as the Fibonacci Trees. The leaves of these trees grow in a unique way where each leaf carries a special number. The tree is structured such that the special number on each leaf follows the Fibonacci sequence. Given a particular tree, you are provided with the number on one of its leaves. Your task is to determine the minimum depth of any Fibonacci Tree that can contain a leaf with the given number. The depth of the tree is defined by the number of edges on the longest path from the root to any leaf. For example, suppose the leaf carries the number 21. The corresponding Fibonacci sequence up to this point is 1, 1, 2, 3, 5, 8, 13, 21. The tree will have leaves numbered with these values, and the depth of this tree (if we start counting from 0 at the root which has number 1) would be 7 since it takes seven steps to reach the last number from the root. Input: - A single integer `n` (1 ≤ n ≤ 10^18) representing the special number on the leaf. Output: - The depth of the Fibonacci Tree that contains at least one leaf with the given number. Examples: Input: 3 Output: 3 Input: 21 Output: 7 Input: 144 Output: 11 Note: - Fibonacci sequence is defined as `F(1) = 1, F(2) = 1, F(n) = F(n-1) + F(n-2)` for `n > 2`. - Depth here means the length of the path in terms of edges from the root to the leaf with the given number. - This problem demands you to calculate the depth efficiently without generating the entire Fibonacci sequence up to `n`, considering the large constraint.","solution":"def fibonacci_tree_depth(n): Returns the minimum depth of any Fibonacci Tree that can contain a leaf with the given number n. if n == 1: return 1 fib1, fib2 = 1, 1 depth = 2 # Since both F(1)=1 and F(2)=1, we start from depth 2 while fib2 < n: fib1, fib2 = fib2, fib1 + fib2 depth += 1 return depth"},{"question":"You are managing a library system where each book can be borrowed by multiple library members. Each member has a unique ID and can borrow up to a specific number of books at a time. You are required to implement a feature that finds out the maximum number of unique books that can be borrowed by any single member from a given list of borrowing records. Each record indicates which member borrowed which book, but it does not guarantee that the member borrows distinct books within the transactions. Your task is to determine the unique maximum. Constraints: * 1 ≤ Number of records ≤ 100,000 * 1 ≤ Number of unique members ≤ 10,000 * 1 ≤ Number of unique books ≤ 10,000 Input: The first line contains an integer R, the number of records. The next R lines contain two integers each, member_id and book_id, specifying that the member with member_id borrowed the book with book_id. Output: Print the maximum number of unique books borrowed by any single member. Examples: Input: 7 1 101 2 102 1 101 1 103 2 104 1 105 3 106 Output: 3 Input: 5 1 201 2 202 3 203 1 204 2 202 Output: 2","solution":"def max_unique_books(records): Returns the maximum number of unique books borrowed by any single member. Args: records (list of tuples): Each tuple contains two integers, member_id and book_id indicating a borrowing record. Returns: int: The maximum number of unique books borrowed by any single member. member_books = {} for member_id, book_id in records: if member_id not in member_books: member_books[member_id] = set() member_books[member_id].add(book_id) max_unique = 0 for books in member_books.values(): if len(books) > max_unique: max_unique = len(books) return max_unique"},{"question":"The citizens of a futuristic city run a unique transportation system powered by solar energy. The transportation grid is represented as a grid of `m` by `n` cells, where each cell can either be an open space (denoted by `0`) or an obstacle (denoted by `1`). Citizens can move up, down, left, or right, but cannot move diagonally or pass through obstacles. To ensure efficient travel, the city government wants to implement a personal travel assistant that finds the shortest path from a start cell `(sx, sy)` to a destination cell `(dx, dy)`. If no such path exists, the assistant should report that by returning `-1`. Your task is to write a program to calculate the shortest path from the start cell to the destination cell in the given grid. The input grid will be represented as a 2D array of integers, and the start and destination positions will be provided. Input: - The first line contains two integers `m` and `n` (2 ≤ m, n ≤ 100) representing the dimensions of the grid. - The next `m` lines each contains `n` integers (either `0` or `1`), representing the grid. - The next line contains two integers `sx` and `sy` (0 ≤ sx < m, 0 ≤ sy < n) indicating the start cell. - The last line contains two integers `dx` and `dy` (0 ≤ dx < m, 0 ≤ dy < n) indicating the destination cell. Output: - Print an integer representing the length of the shortest path from the start to the destination cell. If no path exists, print `-1`. Example: Input: ``` 5 6 0 0 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0 0 4 5 ``` Output: ``` 10 ``` Notes: - The start cell `(sx, sy)` and destination cell `(dx, dy)` will always be within the bounds of the grid. - The start and destination cells will always be open spaces (`0`).","solution":"from collections import deque def shortest_path(grid, m, n, start, end): Find the shortest path from start to end in the given grid. :param grid: List[List[int]]: The grid representation (0=empty space, 1=obstacle) :param m: int: Number of rows in the grid :param n: int: Number of columns in the grid :param start: Tuple[int, int]: Start cell (sx, sy) :param end: Tuple[int, int]: Destination cell (dx, dy) :return: int: Length of shortest path from start to end, -1 if no such path exists sx, sy = start dx, dy = end if start == end: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() queue = deque([(sx, sy, 0)]) # (x, y, distance) visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: if (nx, ny) == (dx, dy): return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # Example usage if __name__ == \\"__main__\\": grid_example = [ [0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0] ] m_example = 5 n_example = 6 start_example = (0, 0) end_example = (4, 5) print(shortest_path(grid_example, m_example, n_example, start_example, end_example))"},{"question":"Yusra has a collection of unique books which she wants to arrange on her shelf. Each book has a unique height, and she wants to arrange them in such a way that no book is taller than the book to its left. Given the initial order of the books by their heights, determine if it\'s possible to make this arrangement by moving each book at most once. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains an integer n (1 ≤ n ≤ 1000) — the number of books followed by n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the books. Output For each test case, output \\"Yes\\" if Yusra can arrange the books in non-decreasing order by moving each book at most once; otherwise, print \\"No\\". Example Input 3 5 4 5 3 2 1 4 1 3 4 2 6 1 1 1 1 1 1 Output No Yes Yes Note In the first test case of the example, no arrangement of books can achieve a non-decreasing order since each book should be moved at most once, and there are too many discrepancies in the order to correct this with a single move each. In the second test case of the example, we can move the book with height 2 to the last position to achieve the order [1, 3, 4, 2]. In the third test case of the example, the books are already in the required order since they all have the same height (which meets the non-decreasing condition trivially).","solution":"def can_arrange_books(test_cases): Determine if it is possible to arrange the books in non-decreasing order by moving each book at most once. results = [] for books in test_cases: n = books[0] heights = books[1:] swaps = 0 for i in range(1, n): if heights[i] < heights[i - 1]: swaps += 1 if swaps > 1: results.append(\\"No\\") break else: results.append(\\"Yes\\") return results def process_input(t, test_cases_raw): Process the input format to extract book heights for each test case test_cases = [] idx = 0 for _ in range(t): n = test_cases_raw[idx] heights = test_cases_raw[idx + 1: idx + 1 + n] test_cases.append((n, *heights)) idx += n + 1 return test_cases"},{"question":"In a faraway city known as CoderVille, there\'s a famous competition called \\"The Palindrome Challenge\\". Each participant is given a string, and their task is to transform it into a palindrome by performing a minimum number of character insertions. A string is a palindrome if it reads the same forwards and backwards. Here is your task: You are given a string `S` consisting of lowercase English letters. Write an algorithm to determine the minimum number of character insertions required to transform `S` into a palindrome. # Input - The input comprises a single string `S`, where `1 ≤ |S| ≤ 1000`. # Output - The output should be a single integer representing the minimum number of character insertions required. # Examples Input ``` abcb ``` Output ``` 1 ``` Input ``` race ``` Output ``` 3 ``` # Explanation In the first example: - The minimum number of insertions to transform \\"abcb\\" into a palindrome is 1, which can be achieved by inserting \'a\' at the end to make the string \\"abcba\\". In the second example: - The minimum number of insertions to transform \\"race\\" into a palindrome is 3, which can be achieved by inserting \'e\', \'c\', and \'a\' at the start to make the string \\"ecarace\\". Work your magic with code to solve CoderVille’s Palindrome Challenge!","solution":"def min_insertions_to_palindrome(S): Returns the minimum number of insertions required to transform S into a palindrome. n = len(S) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): h = l + gap if S[l] == S[h]: dp[l][h] = dp[l + 1][h - 1] else: dp[l][h] = min(dp[l][h - 1], dp[l + 1][h]) + 1 # The result is the number of insertions for the full string return dp[0][n-1]"},{"question":"Alice has a collection of books she wants to read. Each book has a specific number of pages, and her reading speed allows her to read exactly `k` pages per day. She wants to determine the minimum number of days required to finish reading all the books in her collection. You are given an array of integers where each integer represents the number of pages in each book in Alice\'s collection, and a single integer `k` indicating the number of pages Alice can read per day. Write a program to compute and print the minimum number of days required for Alice to read all her books. Constraints * 1 leq n leq 1000 (where n is the number of books) * 1 leq pages_i leq 10^4 (where pages_i represents the number of pages in the ith book) * 1 leq k leq 10^4 Input Input is given from Standard Input in the following format: n k pages_1 pages_2 ... pages_n Output Print the minimum number of days required for Alice to read all the books. Examples Input 3 5 6 8 7 Output 5 Input 4 10 10 20 30 40 Output 10","solution":"def min_days_to_read_books(n, k, pages): This function computes the minimum number of days required for Alice to read all her books given the list of pages in each book and the number of pages she can read per day. :param n: int, number of books :param k: int, pages Alice can read per day :param pages: list of int, list containing the number of pages in each book :return: int, minimum number of days required to read all books total_pages = sum(pages) min_days = (total_pages + k - 1) // k # Ceiling division return min_days # Example of how to use the function: # Input: 3 5 # 6 8 7 # Output: 5 n = 3 k = 5 pages = [6, 8, 7] print(min_days_to_read_books(n, k, pages)) # Output should be 5"},{"question":"Tonya loves making puzzles. Today, she wants to create a puzzle using a grid filled with `0`s and `1`s. The grid has `N` rows and `M` columns. Tonya uses the following rules to determine whether the grid is valid: 1. All rows and all columns must contain at least one `1`. 2. Each `1` in the grid must be part of at least one `2x2` subgrid of `1`s. Determine if the provided grid satisfies both conditions. Constraints * 2 ≤ N, M ≤ 100 * The grid only contains the digits `0` and `1`. Input The input is given from Standard Input in the following format: ``` N M grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] ``` Output If the grid is valid, print `YES`. Otherwise, print `NO`. Examples Input ``` 3 3 1 0 1 0 1 0 1 0 1 ``` Output NO Input ``` 3 3 1 1 1 1 1 1 1 1 1 ``` Output YES","solution":"def is_valid_grid(N, M, grid): # Function to check if row contains at least one \'1\' def contains_one_in_all_rows(): for row in grid: if \'1\' not in row: return False return True # Function to check if column contains at least one \'1\' def contains_one_in_all_columns(): for col in range(M): if all(grid[row][col] == \'0\' for row in range(N)): return False return True # Function to check if each \'1\' is part of at least one 2x2 subgrid of \'1\'s def each_one_in_2x2_subgrid(): for i in range(N - 1): for j in range(M - 1): if grid[i][j] == \'1\' or grid[i+1][j] == \'1\' or grid[i][j+1] == \'1\' or grid[i+1][j+1] == \'1\': if grid[i][j] == \'1\' and grid[i+1][j] == \'1\' and grid[i][j+1] == \'1\' and grid[i+1][j+1] == \'1\': return True return False if contains_one_in_all_rows() and contains_one_in_all_columns() and each_one_in_2x2_subgrid(): print(\\"YES\\") else: print(\\"NO\\") # Example Usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for _ in range(N): grid.append(data[index:index + M]) index += M is_valid_grid(N, M, grid)"},{"question":"A bookstore is organizing a reading challenge where participants are required to read a certain number of books in a given period. To help participants keep track of their progress, you are tasked with developing a program that processes various types of commands related to the challenge. The program needs to handle two types of commands: 1. An \\"add\\" command that registers the number of pages of a newly read book. 2. A \\"query\\" command that asks for the total number of pages read by a participant up to a certain point in time. Input The input consists of multiple test cases. Each test case starts with an integer T (1 ≤ T ≤ 100,000) indicating the number of commands. Each command will be either an \\"add\\" or a \\"query\\". An \\"add\\" command has the format: + p where p (1 ≤ p ≤ 10,000) represents the number of pages in the newly read book. A \\"query\\" command has the format: ? t where t (1 ≤ t ≤ the number of previous \\"add\\" commands in the current test case) asks for the total number of pages read from the first book up to the t-th book added. The end of the input is indicated by a line containing a single integer 0. Output For each \\"query\\" command, the program should output the total number of pages read up to the specified point in time. Each result should be printed on a new line. Example Input 7 + 100 + 200 + 150 ? 1 ? 2 + 50 ? 3 5 + 30 + 70 + 90 ? 2 ? 3 0 Output 100 300 450 100 190","solution":"def process_commands(test_cases): Processes a series of commands and returns results for query commands. Parameters: test_cases (list of lists): Each sublist contains strings of commands for a single test case. Returns: list of int: The results for all query commands in the order they appear. cumulative_pages = [] results = [] for case in test_cases: pages = [] for command in case: if command.startswith(\'+\'): _, p = command.split() p = int(p) if pages: pages.append(pages[-1] + p) else: pages.append(p) elif command.startswith(\'?\'): _, t = command.split() t = int(t) results.append(pages[t - 1]) return results"},{"question":"Alex is designing a LED display board for an event. The display board is represented as a grid of characters where each character can be either \'X\' or \'.\'. An \'X\' represents a lit-up LED, while a \'.\' represents an LED that is turned off. You can control the pattern displayed on the board by flipping the state of individual LEDs. A flip changes an \'X\' to \'.\' and a \'.\' to \'X\'. Alex wants to display patterns on the board that are symmetrical. A pattern is considered symmetrical if it stays identical when vertically mirrored, horizontally mirrored, or rotated 180 degrees. Your task is to determine if the current pattern on the LED display board is symmetrical according to the above definitions. Input The input consists of: - The first line contains two integers, n and m, representing the number of rows and columns of the grid (1 ≤ n, m ≤ 100). - The next n lines each contain a string of exactly m characters, representing the current state of the board. Output On a single line, print \\"YES\\" if the pattern is symmetrical; otherwise, print \\"NO\\". Examples Input 4 4 X..X .XX. .XX. X..X Output YES Input 3 5 XX..X X..X. XXX.. Output NO Note In the first example, the pattern is symmetrical in all ways, as it remains the same if mirrored vertically, horizontally, or rotated 180 degrees. In the second example, the pattern does not hold symmetry in any way.","solution":"def is_symmetric(n, m, board): def is_vertical_symmetric(): for i in range(n): for j in range(m // 2): if board[i][j] != board[i][m - 1 - j]: return False return True def is_horizontal_symmetric(): for i in range(n // 2): for j in range(m): if board[i][j] != board[n - 1 - i][j]: return False return True def is_rotational_symmetric(): for i in range(n): for j in range(m): if board[i][j] != board[n - 1 - i][m - 1 - j]: return False return True if is_vertical_symmetric() or is_horizontal_symmetric() or is_rotational_symmetric(): return \\"YES\\" else: return \\"NO\\" # Example usage: # n, m = 4, 4 # board = [ # \\"X..X\\", # \\".XX.\\", # \\".XX.\\", # \\"X..X\\" # ] # print(is_symmetric(n, m, board)) # should output \\"YES\\""},{"question":"In a distant kingdom, the renowned Palace of Secrets has enchanted doors that can only be unlocked by pressing a sequence of buttons in the correct order. Each door has a specific pattern that needs to be matched exactly by pressing colored buttons: red (R), green (G), blue (B), and yellow (Y). You are tasked with creating an algorithm that determines whether a given sequence of button presses unlocks the door. # Input The input consists of two lines: - The first line contains the string `P` (1 ≤ |P| ≤ 100), indicating the correct pattern to unlock the door. This string is composed only of the characters \'R\', \'G\', \'B\', and \'Y\'. - The second line contains the string `S` (1 ≤ |S| ≤ 200), representing the sequence of button presses attempted by a user. This string is also composed only of the characters \'R\', \'G\', \'B\', and \'Y\'. # Output The output should be a single integer: - Print `1` if the sequence `S` contains the exact sequence `P` at least once. - Print `0` otherwise. # Example Example 1 **Input:** ``` RGB RRRGBYBBG ``` **Output:** ``` 1 ``` Explanation: The pattern \\"RGB\\" can be found in the sequence \\"RRRGBYBBG\\". Example 2 **Input:** ``` BRY YBRBYBBR ``` **Output:** ``` 0 ``` Explanation: The pattern \\"BRY\\" does not appear in the sequence \\"YBRBYBBR\\". Example 3 **Input:** ``` YB YBBYRYY ``` **Output:** ``` 1 ``` Explanation: The pattern \\"YB\\" can be found in the sequence \\"YBBYRYY\\". # Note - The correct pattern must match exactly and contiguously within the sequence of button presses. Implement a function that solves the problem based on the provided guidelines.","solution":"def does_pattern_match(P, S): Determines if the sequence S contains the exact pattern P at least once. Args: P (str): The pattern to unlock the door. S (str): The sequence of button presses attempted. Returns: int: 1 if the sequence S contains the exact pattern P at least once, otherwise 0. return 1 if P in S else 0"},{"question":"Peter is organizing a coding event and wants to analyze the number of participants who have solved problems at different difficulty levels. The event consists of M participants, and each participant has submitted their results. For each participant j (1 leq j leq M), you are given an integer D_j where D_j represents the difficulty level of the problem they solved (on a scale from 1 to 5). However, it is possible that some participants have not submitted any results and are represented by a value of 0. Find the number of participants who solved problems of each difficulty level (1 through 5) and the number of participants who did not submit any results. Constraints * 1 leq M leq 100,000 * 0 leq D_j leq 5 Input Input is given from Standard Input in the following format: ``` M D_1 D_2 : D_M ``` Output Let C_0, C_1, C_2, C_3, C_4, and C_5 be the numbers of participants who solved problems with difficulty levels 0 through 5, respectively. Print the following: ``` Level 0: C_0 participants Level 1: C_1 participants Level 2: C_2 participants Level 3: C_3 participants Level 4: C_4 participants Level 5: C_5 participants ``` Examples Input ``` 8 1 4 0 2 2 5 1 0 ``` Output ``` Level 0: 2 participants Level 1: 2 participants Level 2: 2 participants Level 3: 0 participants Level 4: 1 participant Level 5: 1 participant ``` Input ``` 5 5 3 0 0 1 ``` Output ``` Level 0: 2 participants Level 1: 1 participant Level 2: 0 participants Level 3: 1 participant Level 4: 0 participants Level 5: 1 participant ```","solution":"def analyze_participant_levels(M, levels): Analyzes the number of participants who solved problems at different difficulty levels. Args: M (int): Total number of participants. levels (list): List of integers representing the difficulty levels of problems solved by participants. Returns: dict: A dictionary with keys as levels (0 to 5) and values as counts of participants who solved problems of that level. counts = {i: 0 for i in range(6)} for level in levels: counts[level] += 1 return counts def format_output(counts): Formats the output for the analysis of participant levels. Args: counts (dict): Dictionary with keys as levels (0 to 5) and values as counts of participants. Returns: str: A formatted string representing the number of participants at each difficulty level. output = [] for i in range(6): if counts[i] == 1: output.append(f\\"Level {i}: {counts[i]} participant\\") else: output.append(f\\"Level {i}: {counts[i]} participants\\") return \\"n\\".join(output)"},{"question":"A company uses a building with several control rooms to monitor various systems. Each control room is handled by an operator who can monitor multiple systems. Due to the complexity of monitoring, each operator has a limit on the number of systems they can handle simultaneously. Your task is to determine the maximum number of systems that can be monitored simultaneously given the constraint of operator capacity and control room availability. Input The input consists of two parts: 1. An integer N (1 ≤ N ≤ 1000) which indicates the number of control rooms, and an integer M (1 ≤ M ≤ 1000) which indicates the number of systems to be monitored: 2. Next, there are N lines; each line contains two integers Si and Li separated by a space (1 ≤ Si ≤ 1000, 1 ≤ Li ≤ 1000): - Si represents the number of systems an operator in the i-th control room can monitor. - Li represents the limit of systems that operators in the i-th control room can handle simultaneously. Output Output a single integer, the maximum number of systems that can be monitored simultaneously without exceeding the limit of any operator\'s capacity in any control room. Example Input 3 5 2 3 1 2 3 4 Output 5 Explanation In the example, we have three control rooms with operator limits: - Control Room 1: Operator can monitor 2 systems with a limit of monitoring 3 systems. - Control Room 2: Operator can monitor 1 system with a limit of monitoring 2 systems. - Control Room 3: Operator can monitor 3 systems with a limit of monitoring 4 systems. Considering each control room\'s capacity, the maximum number of systems that can be monitored simultaneously is 5.","solution":"def max_systems_monitored(N, M, control_rooms): Determines the maximum number of systems that can be monitored simultaneously without exceeding the limit of any operator\'s capacity in any control room. :param N: Integer, number of control rooms :param M: Integer, number of systems to be monitored :param control_rooms: List of tuples, where each tuple contains two integers (Si, Li) representing the capacity and the limit for each control room :return: Integer, maximum number of systems that can be monitored simultaneously max_systems = 0 for Si, Li in control_rooms: max_systems += min(Si, Li) # Ensure the maximum number of systems monitored doesn\'t exceed M return min(max_systems, M)"},{"question":"You are given a string of parentheses. Your task is to remove the minimum number of parentheses (either \'(\' or \')\') so that the resulting parentheses string is valid (i.e., every opening parenthesis has a corresponding closing parenthesis). Your function should return the resulting string after the minimum number of deletions. If there are multiple results with the same minimum deletions, return any of them. Constraints * The input string contains only \'(\' and \')\'. * The length of the input string is between 1 and 1000. Input Input is given from Standard Input in the following format: ``` S ``` Output Print the resulting valid parentheses string. Examples Input ``` ()()) ``` Output ``` ()() ``` Input ``` (( ``` Output ``` ``` Input ``` )()( ``` Output ``` ()```","solution":"def min_removed_parentheses(s): This function removes the minimum number of parentheses to make the input string valid. stack = [] to_remove = set() # Identify the parentheses to be removed for i, char in enumerate(s): if char == \'(\': stack.append(i) elif char == \')\': if stack: stack.pop() else: to_remove.add(i) # Add any leftover \'(\' indices to the removal set to_remove = to_remove.union(set(stack)) # Build the valid string by skipping indices in the to_remove set result = \'\'.join([char for i, char in enumerate(s) if i not in to_remove]) return result"},{"question":"In a fictional programming language, a balanced string is defined as follows: * A string is balanced if it contains an equal number of occurrences of two specified characters, say \'a\' and \'b\'. * The substrings within this string can themselves be balanced, following the same rules. You are given a string and need to determine the length of the longest balanced substring. Input The input consists of two lines: 1. The first line contains a single integer n (1 <= n <= 10^5) — the length of the string. 2. The second line contains a string of length n with characters which can be \'a\' and \'b\'. Output Output one integer — the length of the longest balanced substring. Examples Input 6 aababb Output 6 Input 8 aabbbaaa Output 6 Note In the first test case, the entire string \\"aababb\\" is balanced. In the second test case, the longest balanced substrings are \\"aabb\\" and \\"bbaa\\", both of length 4. The longest one is \\"aabbba\\" starting from index 0 of length 6.","solution":"def longest_balanced_substring(n, s): Returns the length of the longest balanced substring in input string s. Parameters: n (int): The length of the string. s (str): The input string containing characters \'a\' and \'b\'. Returns: int: The length of the longest balanced substring. max_length = 0 balance = 0 balance_map = {0: -1} # Initialize with balance 0 at index -1 for i in range(n): if s[i] == \'a\': balance += 1 else: balance -= 1 if balance in balance_map: # Calculate the length of the balanced substring current_length = i - balance_map[balance] max_length = max(max_length, current_length) else: # Store the first occurrence of this balance balance_map[balance] = i return max_length"},{"question":"You are working with a networked system on which multiple devices communicate with each other. Each device can be thought of as a node in a network, and the communication between any two given devices is represented as a weighted direct connection between those two nodes. Due to certain circumstances, you need to determine the shortest paths between devices. However, there\'s a catch: the weights of the connections (i.e., the time it takes for a message to be sent from one device to another) are not fixed and can vary between a given range. For this problem, you need to determine the minimum and maximum times it would take for a message to travel between two specific devices, given these variable weights within their specified ranges. Input The input consists of multiple test cases. Each test case starts with a line containing three integers n, m, q (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ q ≤ 100), where n denotes the number of devices (nodes), m denotes the number of connections (edges), and q denotes the number of queries. The following m lines describe the connections. Each connection is described by five integers a, b, l, u, f, where a and b are the two devices (nodes) involved in the connection (1 ≤ a, b ≤ n, a ≠ b), and l and u are the minimum and maximum time weights for the connection (1 ≤ l ≤ u ≤ 1000), and f is 0 or 1 indicating if the connection is bidirectional (f = 1) or unidirectional (f = 0). Following the connections, the q lines describe the queries. Each query consists of two integers x and y (1 ≤ x, y ≤ n), representing the devices (nodes) between which you need to determine the shortest path. The input is terminated by a single line containing \\"0 0 0\\". Output For each query, output two space-separated values on a single line: the minimum and maximum time weights for the shortest path from x to y. If there is no path between x and y, output \\"NO PATH\\" for both minimum and maximum time weights. Example Input 4 4 2 1 2 4 10 1 2 3 3 5 0 2 4 1 2 1 3 4 2 7 0 1 3 1 4 0 0 0 Output 7 15 5 12","solution":"import heapq import sys def dijkstra(graph, start, end, get_weight): n = len(graph) dist = [sys.maxsize] * n dist[start] = 0 queue = [(0, start)] while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > dist[current_node]: continue for neighbor, weight_range in graph[current_node]: min_weight, max_weight = weight_range weight = get_weight(min_weight, max_weight) distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return dist[end] if dist[end] != sys.maxsize else \\"NO PATH\\" def shortest_paths(n, m, connections, queries): graph_min = [[] for _ in range(n)] graph_max = [[] for _ in range(n)] for a, b, l, u, f in connections: graph_min[a - 1].append((b - 1, (l, l))) graph_max[a - 1].append((b - 1, (u, u))) if f == 1: graph_min[b - 1].append((a - 1, (l, l))) graph_max[b - 1].append((a - 1, (u, u))) results = [] for x, y in queries: min_weight = dijkstra(graph_min, x - 1, y - 1, lambda l, u: l) max_weight = dijkstra(graph_max, x - 1, y - 1, lambda l, u: u) if min_weight == \\"NO PATH\\" or max_weight == \\"NO PATH\\": results.append(\\"NO PATH\\") else: results.append(f\\"{min_weight} {max_weight}\\") return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') idx = 0 results = [] while idx < len(input_lines): n, m, q = map(int, input_lines[idx].split()) if n == 0 and m == 0 and q == 0: break idx += 1 connections = [] for _ in range(m): a, b, l, u, f = map(int, input_lines[idx].split()) connections.append((a, b, l, u, f)) idx += 1 queries = [] for _ in range(q): x, y = map(int, input_lines[idx].split()) queries.append((x, y)) idx += 1 results.extend(shortest_paths(n, m, connections, queries)) return results"},{"question":"Given an array of positive integers, determine if there exists a subset of the array such that the product of its elements is a perfect square. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains a single integer N, representing the number of elements in the array. - The second line contains N positive integers separated by spaces. Output: For each test case, print \\"YES\\" if such a subset exists, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ array elements ≤ 1000 SAMPLE INPUT 2 4 2 3 4 6 3 2 5 7 SAMPLE OUTPUT YES NO","solution":"from collections import Counter import math def is_perfect_square(n): sqrt = int(math.sqrt(n)) return sqrt * sqrt == n def has_subset_with_perfect_square_product(arr): if contains_perfect_square(arr): return True # Find all subsets and check for perfect square products n = len(arr) for i in range(1, 1 << n): subset_product = 1 for j in range(n): if i & (1 << j): subset_product *= arr[j] if is_perfect_square(subset_product): return True return False def contains_perfect_square(arr): for num in arr: if is_perfect_square(num): return True return False def subset_product_perfect_square(T, test_cases): results = [] for i in range(T): N, array = test_cases[i] result = \\"YES\\" if has_subset_with_perfect_square_product(array) else \\"NO\\" results.append(result) return results"},{"question":"You are given an array \'A\' of length \'n\' consisting of integers. Your task is to split this array into exactly three contiguous subarrays, such that each subarray has at least one element, and the maximum length of these subarrays is minimized. For example, if the array is [1, 2, 3, 4, 5, 6], splitting it into the subarrays [1, 2, 3], [4, 5], and [6] would give lengths 3, 2, and 1, respectively. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains a single integer n (3 ≤ n ≤ 10^5) — the length of the array A. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the array elements. Output For each test case, output one integer — the minimum possible value of the longest subarray after splitting. If there are multiple ways to achieve the minimum value, any will be considered correct. Example Input 2 8 1 3 5 2 2 6 9 8 6 10 20 30 40 50 60 Output 3 2 Explanation In the first example, one optimal way to split the array: [1, 3, 5], [2, 2, 6], [9, 8]. The maximum length is 3. In the second example, one optimal way to split the array: [10], [20, 30], [40, 50, 60]. The maximum length is 3.","solution":"def min_max_length_of_subarrays(t, test_cases): Returns the minimum possible maximum length of subarrays after splitting the array into three contiguous subarrays. results = [] for case in test_cases: n, array = case # Calculate prefix sums to find the total sum of the array easily prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + array[i] min_max_length = float(\'inf\') for i in range(1, n - 1): for j in range(i + 1, n): # Lengths of subarrays len1 = i len2 = j - i len3 = n - j max_len = max(len1, len2, len3) min_max_length = min(min_max_length, max_len) results.append(min_max_length) return results"},{"question":"Elevator System: In a complex building with multiple floors, an elevator system is used to move people from one floor to another. The elevator can only move one floor up or down in one step and has a limit on the maximum number of people it can carry at once. You are given the following: - The elevator\'s carrying capacity (a positive integer) `capacity`. - The total number of floors in the building (a positive integer) `floors`. - The initial floor where the elevator is currently located (a positive integer) `start`. - A list of people `people` where each person is represented by a tuple with the start floor and the destination floor. Your task is to determine the minimum number of trips the elevator needs to take in order to transport all the people to their respective destination floors. The elevator can start only at the `start` floor and it returns to the start floor after each trip. Each trip can carry up to `capacity` number of people. Input The input consists of: - An integer `capacity` (1 ≤ capacity ≤ 2000). - An integer `floors` (1 ≤ floors ≤ 2000). - An integer `start` (1 ≤ start ≤ floors). - A list of tuples `people` where each tuple represents a person with the start and destination floors. Each person’s start and destination floors are between 1 and `floors` (inclusive). The length of the list `people` does not exceed 2000. Output Output a single integer — the minimum number of trips the elevator needs to transport all people to their destination floors. Examples Input 2 10 1 [(1, 2), (1, 3), (1, 4), (2, 3)] Output 2 Input 3 5 2 [(2, 4), (3, 5), (1, 5), (1, 2), (2, 3)] Output 2","solution":"def min_elevator_trips(capacity, floors, start, people): Determines the minimum number of trips the elevator needs to transport all people to their respective destination floors. :param capacity: int, elevator\'s carrying capacity :param floors: int, total number of floors in the building :param start: int, initial floor where the elevator is currently located :param people: list of tuples, each tuple (a, b) represents a person with start floor a and destination floor b :return: int, minimum number of trips needed trips = 0 # Sort people by their start floor for more efficient grouping people.sort() # Traverse through the people list in batches upto the capacity for i in range(0, len(people), capacity): group = people[i:i + capacity] # Count floors to the highest destination in this group max_floor = max(p[1] for p in group) trips += 1 # A single trip for this group return trips"},{"question":"You are given an n x n grid of squares. Each square is either land (represented by an integer `1`) or water (represented by an integer `0`). An island is formed by groups of adjacent land squares connected horizontally or vertically (not diagonally). Write a program that calculates the maximum size of an island in the grid. The size of an island is the number of land squares contained in it. Input The first line contains integer n (1 ≤ n ≤ 50) — the dimension of the grid. The following n lines contain n integers (either 0 or 1) — the elements of the grid. Output Print one integer — the maximum size of an island in the grid. Examples Input 4 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 Output 3 Input 3 1 0 1 1 0 1 0 1 0 Output 2 Input 5 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 0 0 Output 2","solution":"def max_island_size(grid): Returns the maximum size of an island in the grid. n = len(grid) max_island = 0 def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] == 0: return 0 # Mark the cell as visited by setting it to 0 grid[x][y] = 0 size = 1 # Explore in all four directions size += dfs(x - 1, y) size += dfs(x + 1, y) size += dfs(x, y - 1) size += dfs(x, y + 1) return size for i in range(n): for j in range(n): if grid[i][j] == 1: # Perform DFS to find the size of the island island_size = dfs(i, j) max_island = max(max_island, island_size) return max_island"},{"question":"Eva is fascinated by numbers and sequences. One day, her friend gave her a challenge involving a special series. The series starts with an initial value V and progresses in such a way that each subsequent number is the product of the previous number and the index of that number in the series (1-based indexing). Help Eva determine the N^th number in this sequence. Input: The first line contains an integer T, the number of test cases. The next T lines each contain two integers V and N separated by a single space. Output: For each test case, print the N^th number of the sequence. Constraints: 1 ≤ T ≤ 10^6 1 ≤ N ≤ 20 1 ≤ V ≤ 5 SAMPLE INPUT: 2 2 4 3 5 SAMPLE OUTPUT: 48 360 Explanation: For the first test case, V=2 and N=4: Series: 2, 2*2=4, 4*3=12, 12*4=48 For the second test case, V=3 and N=5: Series: 3, 3*2=6, 6*3=18, 18*4=72, 72*5=360","solution":"def nth_number_in_sequence(V, N): Returns the N-th number in the sequence starting with V. Each next number is the product of the previous number and its (1-based) position index. result = V # Start with the initial value V for i in range(2, N + 1): result *= i return result"},{"question":"A stack is a basic data structure that follows the Last In First Out (LIFO) principle. Operations on a stack include pushing an element onto the stack and popping an element from the stack. You are required to simulate a stack using an array and perform a sequence of operations. You need to write a program that processes a sequence of operations on a stack and prints the contents of the stack after each operation. The operations you need to support are: - \\"push x\\": Push the integer x onto the stack. - \\"pop\\": Remove the element on the top of the stack. The program should read multiple sequences of operations until a \\"QUIT\\" command is encountered, each sequence is terminated by this command. For each sequence, the program should output the contents of the stack after each operation, ending with an empty line after each sequence. Input Each sequence of operations is provided as input, with one operation per line. The sequence ends with the \\"QUIT\\" command. Multiple sequences are separated by a blank line. Output For each sequence of operations, output the contents of the stack after each operation, with each element separated by a space. If the stack becomes empty at any point, output \\"EMPTY\\". After printing the result of a full sequence, output an empty line. Constraints - The number of operations in each sequence will not exceed 100. - The value of x in \\"push x\\" will be between 1 and 1000. Example Input: push 3 push 5 pop push 2 QUIT push 7 push 8 pop pop pop QUIT Output: 3 3 5 3 3 2 7 7 8 7 EMPTY EMPTY","solution":"def simulate_stack_operations(operations): Simulates a stack based on a sequence of operations and prints the stack content after every operation. The input is a list of operations (strings), and the function prints the stack state after each operation. stack = [] results = [] for operation in operations: if operation.startswith(\\"push\\"): _, x = operation.split() x = int(x) stack.append(x) elif operation == \\"pop\\": if stack: stack.pop() if stack: results.append(\\" \\".join(map(str, stack))) else: results.append(\\"EMPTY\\") return results"},{"question":"In a faraway kingdom, there is a rectangular orchard consisting of n rows and m columns. Each cell of the orchard contains a certain number of apples. The orchard keeper wants to collect the apples from a sub-rectangle of the orchard for a royal feast. The keeper knows the exact number of apples in each cell, and you need to help them by finding the maximum number of apples they can collect from any sub-rectangle of the orchard. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the orchard, respectively. Each of the next n lines contains m integers ai,j (1 ≤ ai,j ≤ 100) — the number of apples in the cell at the i-th row and j-th column. Output: Print a single integer: the maximum number of apples that can be collected from any sub-rectangle of the orchard. Examples: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 Input: 2 4 1 0 2 3 4 5 1 2 Output: 15 Note: In the first sample, the best sub-rectangle is the entire orchard, which contains all the apples. Thus the maximum number of apples is 1+2+3+4+5+6+7+8+9 = 45. In the second sample, the best sub-rectangle is the entire first row and the second row combined, which contains 1+0+2+3+4+5+1+2 = 18 apples.","solution":"def max_apples(orchard): n = len(orchard) m = len(orchard[0]) # Calculate prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = orchard[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] max_apples = 0 # Iterate over all possible sub-rectangles for i1 in range(1, n + 1): for j1 in range(1, m + 1): for i2 in range(i1, n + 1): for j2 in range(j1, m + 1): # Calculate the sum of the sub-rectangle (i1, j1) to (i2, j2) sub_rect_sum = (prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1]) max_apples = max(max_apples, sub_rect_sum) return max_apples"},{"question":"You are given a string text as input. The string only contains lowercase alphabetic characters and spaces. The task is to encode the string using the following rules: - Replace each space with a single underscore `_`. - For each word (a contiguous sequence of alphabetic characters), reverse the order of characters. For example, the input \\"hello world\\" would be encoded as \\"olleh_dlrow\\". Write a program to perform the encoding as described above. Constraints: * The length of the string is between 1 and 100, inclusive. * The string contains only lowercase alphabetic characters and spaces. Input Input is given from Standard Input in the following format: text Output Print the encoded string. Examples Input programming is fun Output gnimmargorp_si_nuf Input python challenge Output nohtyp_egnellahc","solution":"def encode_string(text): Encodes the string by replacing spaces with underscores and reversing the words. words = text.split(\' \') reversed_words = [word[::-1] for word in words] return \'_\'.join(reversed_words)"},{"question":"Write a program that reads a series of strings and determines which of them are palindromes. A palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and case differences. The input consists of multiple lines, each containing one string, with the end of the input indicated by a line containing only the word \\"END\\". For each string, if it is a palindrome, print \\"Palindrome\\". Otherwise, print \\"Not a Palindrome\\". Input The input is a sequence of strings. Each string is on a separate line. The end of the input is indicated by a line containing just the word \\"END\\". The number of strings is less than or equal to 100. Each string can be up to 100 characters long. Output For each string, print \\"Palindrome\\" if the string is a palindrome and \\"Not a Palindrome\\" otherwise. Example Input Was it a car or a cat I saw Madam In Eden, I’m Adam Hello, World! END Output Palindrome Palindrome Not a Palindrome","solution":"def is_palindrome(s): Check if the given string s is a palindrome. # Remove all non-alphanumeric characters and convert to lower case normalized = \'\'.join(char.lower() for char in s if char.isalnum()) # Compare the normalized string with its reverse return normalized == normalized[::-1] def check_palindromes(input_lines): Given a list of input strings, check each one if it\'s a palindrome and return a corresponding list of results. results = [] for line in input_lines: if line.strip() == \\"END\\": break if is_palindrome(line): results.append(\\"Palindrome\\") else: results.append(\\"Not a Palindrome\\") return results"},{"question":"Implement a function that calculates the sum of the diagonal elements of a given square matrix. Constraints * 1 ≤ n ≤ 50 * 0 ≤ matrix[i][j] ≤ 100 Input First line contains an integer n, the size of the matrix. Next n lines contain n integers each, representing the elements of the matrix. Output Print a single integer, the sum of the diagonal elements of the matrix. Example Input 3 1 2 3 4 5 6 7 8 9 Output 15","solution":"def diagonal_sum(matrix): Returns the sum of the diagonal elements of a given square matrix. n = len(matrix) return sum(matrix[i][i] for i in range(n))"},{"question":"Bob Bubblestrong is also responsible for making sure that the high-quality bubbles are stored in the correct sequence. Each bubble has a unique identification number which starts with a letter and is followed by digits (e.g., A123, B456). Bob needs to sort the bubbles\' IDs in a custom order for inspection. Due to the nature of security protocols, the IDs must be sorted based on the letter part first in descending order, and within the same letter, the numeric part should be sorted in ascending order. Write a function to help Bob sort the bubble IDs according to these rules. # Input - The first line contains an integer n (1 ≤ n ≤ 10^4), which is the number of bubble IDs. - The next n lines contain the bubble IDs, each on a new line. Bubble IDs are alphanumeric strings starting with a single uppercase letter followed by a non-empty string of digits. # Output - Output the sorted list of bubble IDs, each on a new line, according to the given custom order. # Example Input ``` 5 B123 A456 A123 D789 B456 ``` Output ``` D789 B123 B456 A123 A456 ``` # Note In the example above: - \'D789\' comes first because \'D\' is the highest letter. - \'B123\' and \'B456\' come after \'D789\' in ascending order of numbers because \'B\' is the next highest letter. - \'A123\' and \'A456\' come last due to \'A\' being the smallest letter, ordered by the numbers 123 and 456 respectively.","solution":"def sort_bubble_ids(bubble_ids): Sorts the bubble IDs in the custom order: descending by the letter and ascending by the number part. Parameters: bubble_ids (List[str]): List of bubble IDs. Returns: List[str]: Sorted list of bubble IDs. return sorted(bubble_ids, key=lambda x: (-ord(x[0]), int(x[1:])))"},{"question":"The Numarbl3s Company is developing a new software system for bulk data analysis and they need an efficient way to count distinct substrings of certain lengths in a given string. Your task is to develop a program that computes the number of distinct substrings of a given length in a provided string. Input The first line contains an integer n (1 ≤ n ≤ 2000), representing the length of the string. The second line contains the string s of length n, consisting of lowercase English letters. The third line contains an integer k (1 ≤ k ≤ n), indicating the length of the substrings to be considered. Output Print a single integer, the number of distinct substrings of length k in the string s. Examples Input 7 abcdefg 3 Output 5 Input 5 aabaa 2 Output 3 Explanation In the first example, the distinct substrings of length 3 are: \\"abc\\", \\"bcd\\", \\"cde\\", \\"def\\", \\"efg\\". In the second example, the distinct substrings of length 2 are: \\"aa\\", \\"ab\\", \\"ba\\".","solution":"def count_distinct_substrings(n, s, k): Returns the number of distinct substrings of length k in the string s. distinct_substrings = set() for i in range(n - k + 1): substring = s[i:i + k] distinct_substrings.add(substring) return len(distinct_substrings)"},{"question":"Hermione Granger, being the ever-curious witch, has developed a secret love for Muggle puzzles. One day, she stumbled upon a fascinating problem known as the \\"Word Ladder.\\" Intrigued by its nature, she decided to challenge her friends to solve it. A Word Ladder is a puzzle where you start with a word and transform it into another word by changing exactly one letter at a time. Each transformed word must exist in the given list of valid words. Hermione\'s challenge is to find the shortest transformation sequence from a given start word to a target word, using only words from a specific list. The transformation must contain exactly one letter changed at a time, and each intermediate word must be a valid word (i.e., it must be in the given list of words). Given the words list, the start word, and the target word, determine the length of the shortest transformation sequence from the start word to the target word. If no such sequence exists, return 0. Input The first line contains three space-separated strings: start, target, and the number of words n (1 ≤ n ≤ 5000). The second line contains a space-separated list of n words. Each word in the list and the start, target words are lowercase and have the same length (1 ≤ length ≤ 5). Output Print the length of the shortest transformation sequence from start to target. If no such sequence exists, print 0. Examples Input hit cog 6 hot dot dog lot log cog Output 5 Input hit bag 6 hot dot dog lot log cog Output 0","solution":"from collections import deque def word_ladder_length(start, target, words): if target not in words: return 0 words = set(words) queue = deque([(start, 1)]) alpha = \'abcdefghijklmnopqrstuvwxyz\' while queue: word, length = queue.popleft() if word == target: return length for i in range(len(word)): for char in alpha: new_word = word[:i] + char + word[i+1:] if new_word in words: words.remove(new_word) queue.append((new_word, length + 1)) return 0"},{"question":"The management of a popular social media platform wants to implement a new feature that categorizes and counts user activities. Your task is to write a function that processes a list of activity logs and outputs the count of each type of activity. Each log entry is a string in the format \\"<user_id>:<activity_type>\\", where: - `<user_id>` is a unique identifier for a user, which is a positive integer. - `<activity_type>` is a string representing one of the following activities: \\"post\\", \\"comment\\", \\"like\\", or \\"share\\". The function should return a dictionary with the activity types as keys and the count of each activity as values. Input - A list of strings `logs` (1 ≤ len(logs) ≤ 10^5), where each string represents a user activity log. Output - A dictionary with keys \\"post\\", \\"comment\\", \\"like\\", and \\"share\\" with corresponding integer values representing the count of each activity. Example ``` Input [\\"1:post\\", \\"2:comment\\", \\"1:like\\", \\"2:post\\", \\"3:like\\", \\"2:comment\\"] Output { \\"post\\": 2, \\"comment\\": 2, \\"like\\": 2, \\"share\\": 0 } ``` Note In the given example, there are: - 2 \\"post\\" activities (from user 1 and user 2), - 2 \\"comment\\" activities (both from user 2), - 2 \\"like\\" activities (from user 1 and user 3), and - 0 \\"share\\" activities.","solution":"def count_activities(logs): Processes a list of activity logs and outputs the count of each type of activity. Args: logs (list of str): A list of activity logs where each log is in the format \\"<user_id>:<activity_type>\\". Returns: dict: A dictionary with keys \\"post\\", \\"comment\\", \\"like\\", and \\"share\\" and their corresponding counts as values. activity_types = [\\"post\\", \\"comment\\", \\"like\\", \\"share\\"] activity_counts = {activity: 0 for activity in activity_types} for log in logs: user_id, activity = log.split(\':\') if activity in activity_counts: activity_counts[activity] += 1 return activity_counts"},{"question":"You are given an array of integers and two integers x and y. You need to find the length of the shortest subarray that contains at least x even numbers and at least y odd numbers. If no such subarray exists, return -1. Input The first line contains three space-separated integers n, x, y (1 ≤ n ≤ 2·105; 0 ≤ x ≤ n; 0 ≤ y ≤ n). The second line contains n space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 109) — the actual array. Output Print a single integer — the length of the shortest subarray that contains at least x even numbers and at least y odd numbers. If there is no such subarray, print -1. Examples Input 7 2 3 1 2 3 4 5 6 7 Output 5 Input 5 3 1 2 4 6 8 10 Output -1 Note In the first test sample, the shortest subarray that contains at least 2 even numbers and 3 odd numbers is the subarray [2, 3, 4, 5, 6], which has length 5. In the second test sample, there is no subarray that contains at least 3 even numbers and 1 odd number, so the answer is -1.","solution":"def shortest_subarray_with_evans_odds(n, x, y, a): def is_even(num): return num % 2 == 0 shortest_length = float(\'inf\') left = 0 even_count = 0 odd_count = 0 for right in range(n): if is_even(a[right]): even_count += 1 else: odd_count += 1 while even_count >= x and odd_count >= y: shortest_length = min(shortest_length, right - left + 1) if is_even(a[left]): even_count -= 1 else: odd_count -= 1 left += 1 if shortest_length == float(\'inf\'): return -1 return shortest_length # Example usage: # print(shortest_subarray_with_evans_odds(7, 2, 3, [1, 2, 3, 4, 5, 6, 7])) # Output: 5 # print(shortest_subarray_with_evans_odds(5, 3, 1, [2, 4, 6, 8, 10])) # Output: -1"},{"question":"You are given a string `S` consisting of lowercase and uppercase English letters. Find the length of the longest substring of `S` that only consists of consecutive identical characters. Constraints * `S` is a string of length between 1 and 100 (inclusive). * Each character in `S` is an English letter (both lowercase and uppercase). Input Input is given from Standard Input in the following format: ``` S ``` Output Print the length of the longest substring of `S` that only consists of consecutive identical characters. Examples Input ``` aaabbCCCCdaa ``` Output ``` 4 ``` Input ``` helloo ``` Output ``` 2 ``` Input ``` abcdefg ``` Output ``` 1 ```","solution":"def longest_consecutive_substring_length(S): if not S: return 0 max_length = 1 current_length = 1 for i in range(1, len(S)): if S[i] == S[i - 1]: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 return max_length"},{"question":"In a remote village, there is a unique library system. The library has a number of books arranged in a row, and each book is assigned a unique numeric ID. The librarian wants to make sure that the library is functioning efficiently and that books are being borrowed and returned correctly. You have to process a series of operations. Each operation is either a \\"borrow\\" or \\"return\\" an individual book based on its ID. Implement a system that can efficiently keep track of the books that are currently borrowed. For each \\"borrow\\" operation, remove the book ID from the set of available books, and for each \\"return\\" operation, add the book ID back to the set of available books. Input Format - The first line contains an integer `N` denoting the number of operations. - Each of the next `N` lines contains an operation in one of the following formats: - \\"borrow X\\" where X is the ID of the book to be borrowed. - \\"return X\\" where X is the ID of the book to be returned. Output Format - For each \\"borrow\\" operation, output either \\"Borrowed\\" if the book was successfully borrowed, or \\"Already borrowed\\" if the book was already borrowed by someone else. - For each \\"return\\" operation, output either \\"Returned\\" if the book was successfully returned, or \\"Not borrowed\\" if the book was not previously borrowed. Constraints - 1 ≤ N ≤ 100000 - 1 ≤ X ≤ 1000000 Example Input 7 borrow 1 borrow 2 borrow 1 return 2 return 3 return 2 borrow 2 Example Output Borrowed Borrowed Already borrowed Returned Not borrowed Not borrowed Borrowed","solution":"def library_operations(n, operations): Processes a series of library book borrow and return operations. Args: n: int - The number of operations. operations: List of strings - Each string is either \\"borrow X\\" or \\"return X\\". Returns: List of strings - Each string is the result of the corresponding operation. borrowed_books = set() results = [] for operation in operations: op_parts = operation.split() action = op_parts[0] book_id = int(op_parts[1]) if action == \\"borrow\\": if book_id in borrowed_books: results.append(\\"Already borrowed\\") else: borrowed_books.add(book_id) results.append(\\"Borrowed\\") elif action == \\"return\\": if book_id in borrowed_books: borrowed_books.remove(book_id) results.append(\\"Returned\\") else: results.append(\\"Not borrowed\\") return results"},{"question":"Alice and Bob are playing a game with an array of n positive integers. The game is turn-based, starting with Alice. During their turn, a player must pick any two distinct elements from the array, say ai and aj (where i ≠ j), and replace them with a new element which is their sum, aliased as ai + aj. The game continues until only one element remains in the array. Both players aim to minimize the value of the last remaining element in the array. Your task is to determine the minimum possible value of the last remaining element after the optimal sequence of moves by both players. Input The first line of the input contains an integer n (2 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000), the initial elements in the array. Output Print the minimum possible value of the last remaining element in the array. Examples Input 3 1 2 3 Output 6 Input 4 1 3 5 7 Output 16 Note In the first example, the optimal sequence of moves is: * Pick elements 1 and 2, replace them with their sum (3). The array becomes [3, 3]. * Then, pick both 3\'s and replace them with their sum (6). The array becomes [6]. In the second example, the optimal sequence of moves is: * Pick elements 1 and 3, replace them with their sum (4). The array becomes [4, 5, 7]. * Then, pick elements 4 and 5, replace them with their sum (9). The array becomes [9, 7]. * Finally, pick elements 9 and 7, replace them with their sum (16). The array becomes [16]. Therefore, the minimum possible value of the last remaining element after all optimal moves is 16.","solution":"def find_minimum_final_value(n, arr): Returns the minimum possible value of the last remaining element after optimal sequence of moves. # Optimal strategy involves summing up all elements in the array return sum(arr)"},{"question":"A binary search tree (BST) is a binary tree where each node has a comparable key (and an associated value) and satisfies the binary search tree property: 1. The key in each node must be greater than all keys stored in the left subtree of the node. 2. The key in each node must be less than all keys stored in the right subtree of the node. Your task is to write a program that: 1. Creates a BST from a given list of integer keys. 2. Reports the following information for each node in the BST: * node key * parent key (if the node is the root, print `None`) * depth of the node * a list of children keys (if the node is a leaf, print an empty list) Constraints: * 1 ≤ number of nodes ≤ 10^5 * The keys are unique integers in the range [-10^9, 10^9]. Input: The first line contains an integer `n` indicating the number of nodes. The second line contains `n` space-separated integers representing the keys of the nodes in the order they are inserted into the BST. Output: For each node in the BST, print the information in the following format, ordered by the node keys: `node key: parent = p, depth = d, children = [c1, c2]` Where `key` is the node\'s key, `p` is the parent key (or `None` for the root), `d` is the depth of the node, and `[c1, c2]` is a list of children sorted in increasing order. Example: Input: ``` 7 10 5 15 2 7 13 17 ``` Output: ``` node 2: parent = 5, depth = 2, children = [] node 5: parent = 10, depth = 1, children = [2, 7] node 7: parent = 5, depth = 2, children = [] node 10: parent = None, depth = 0, children = [5, 15] node 13: parent = 15, depth = 2, children = [] node 15: parent = 10, depth = 1, children = [13, 17] node 17: parent = 15, depth = 2, children = [] ``` Input: ``` 5 20 10 30 5 15 ``` Output: ``` node 5: parent = 10, depth = 2, children = [] node 10: parent = 20, depth = 1, children = [5, 15] node 15: parent = 10, depth = 2, children = [] node 20: parent = None, depth = 0, children = [10, 30] node 30: parent = 20, depth = 1, children = [] ```","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.parent = None self.depth = 0 class BST: def __init__(self): self.root = None def insert(self, key): if not self.root: self.root = TreeNode(key) return self.root node = self._insert(self.root, key, depth=0, parent=None) return node def _insert(self, current, key, depth, parent): if not current: node = TreeNode(key) node.depth = depth node.parent = parent return node if key < current.key: if current.left: return self._insert(current.left, key, depth + 1, current) else: current.left = self._insert(current.left, key, depth + 1, current) return current.left else: # key > current.key if current.right: return self._insert(current.right, key, depth + 1, current) else: current.right = self._insert(current.right, key, depth + 1, current) return current.right def get_node_info(self, node): parent_key = node.parent.key if node.parent else \'None\' depth = node.depth children = [] if node.left: children.append(node.left.key) if node.right: children.append(node.right.key) children.sort() return (node.key, parent_key, depth, children) def in_order_traversal(self, node, result): if not node: return self.in_order_traversal(node.left, result) result.append(self.get_node_info(node)) self.in_order_traversal(node.right, result) def get_all_nodes_info(self): result = [] self.in_order_traversal(self.root, result) result.sort(key=lambda x: x[0]) # sort by node key return result def generate_bst_from_list(keys): bst = BST() for key in keys: bst.insert(key) return bst def bst_info(n, keys): bst = generate_bst_from_list(keys) all_nodes_info = bst.get_all_nodes_info() return all_nodes_info"},{"question":"In a faraway land, there exists a mysterious forest known for its peculiar fruit trees. There are M different types of trees planted in a line in this forest, and each type of tree bears a unique fruit. Each tree is numbered from 0 to M-1 and is known to produce a certain number of fruits each day. The number of fruits produced by the trees in sequence is given in an array. Adventurers in the forest usually look to gather as many fruits as possible, but with certain constraints. They can start collecting fruits from any tree and stop at any tree. Additionally, they can only collect fruits from consecutive trees without skipping any. Given the number of fruits produced daily by each tree, your task is to answer L queries. Each query specifies a starting and an ending tree, and you need to calculate the sum of fruits collected from all trees between the starting and ending tree (inclusive). Input: The first line contains two integers M and L where M = number of trees in the forest, and L = number of queries. The second line contains M integers denoting the number of fruits produced by each tree daily. L lines follow, each containing two integers S and E, representing the starting and ending tree indices for each query. Output: For each query, output the total number of fruits collected from tree S to tree E. Constraints: 1 ≤ L ≤ 10^5 1 ≤ M ≤ 10^6 1 ≤ Fruits Produced by each tree ≤ 10^6 0 ≤ S ≤ E < M Optimized input and output operations are recommended due to the large size of input and output data. SAMPLE INPUT 10 3 2 3 7 1 5 6 2 4 8 3 2 5 1 7 0 9 SAMPLE OUTPUT 19 28 41 Explanation For the first query, the total number of fruits from tree index 2 to tree index 5 is calculated as follows: Fruits from tree indices: 2, 3, 4, 5 => 7 + 1 + 5 + 6 = 19 For the second query, the total number of fruits from tree index 1 to tree index 7 is: 3 + 7 + 1 + 5 + 6 + 2 + 4 = 28 For the third query, the total number of fruits from tree index 0 to tree index 9 is: 2 + 3 + 7 + 1 + 5 + 6 + 2 + 4 + 8 + 3 = 41","solution":"def preprocess_fruit_counts(fruit_counts): # Precompute cumulative sums for fruit_counts cumulative_sums = [0] * (len(fruit_counts) + 1) for i in range(len(fruit_counts)): cumulative_sums[i + 1] = cumulative_sums[i] + fruit_counts[i] return cumulative_sums def query_fruit_sum(cumulative_sums, S, E): # Calculate the sum for the range S to E (inclusive) using the cumulative sums array return cumulative_sums[E + 1] - cumulative_sums[S] # Function to process all queries def process_queries(M, L, fruit_counts, queries): # Preprocess fruit counts to get cumulative sums cumulative_sums = preprocess_fruit_counts(fruit_counts) # Process each query and store the results results = [] for S, E in queries: result = query_fruit_sum(cumulative_sums, S, E) results.append(result) return results"},{"question":"Given an undirected graph with n nodes and m edges, where each node is assigned an integer value. Write a program to perform q queries, where each query asks for the sum of values of nodes in the connected component containing a given node x. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) - the number of nodes and edges of the graph. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^5) - the values assigned to the nodes. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating an undirected edge between nodes u and v. The next line contains an integer q (1 ≤ q ≤ 10^5) - the number of queries. Each of the next q lines contains an integer x (1 ≤ x ≤ n) - the node index for that query. Output For each query, print the sum of values of nodes in the connected component that contains node x. Examples Input 5 5 1 5 3 2 4 1 2 2 3 3 4 4 5 5 1 3 1 3 5 Output 15 15 15 Input 6 4 10 20 30 40 50 60 1 2 2 3 4 5 5 6 3 1 4 6 Output 60 150 150 Note: - The graph may be disconnected, meaning there could be multiple connected components. - For each query, identify the connected component that includes the given node and compute the sum of values of all nodes in this component.","solution":"def connected_component_sums(n, m, values, edges, q, queries): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to find all nodes in the connected component containing node `start` def bfs(start): queue = deque([start]) visited = set([start]) component = [] while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return component # Find all connected components and their sums visited = set() component_sums = {} for node in range(1, n + 1): if node not in visited: component = bfs(node) component_sum = sum(values[i-1] for i in component) for c in component: component_sums[c] = component_sum visited.update(component) # Answer the queries result = [] for query in queries: result.append(component_sums[query]) return result # Example usage: # n = 5, m = 5 # values = [1, 5, 3, 2, 4] # edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)] # q = 3 # queries = [1, 3, 5] # Output: [15, 15, 15]"},{"question":"You are given an integer array `arr` of size `N` which may contain both positive and negative integers. You need to find the maximum sum of a non-empty subarray such that the sum is less than or equal to a given integer `T`. A subarray is defined as a contiguous part of an array. The result should be computed in a single pass using an efficient algorithm, aiming to match or improve the time complexity of O(N^2). # Constraints: * 1 ≤ N ≤ 10^5 * -10^4 ≤ arr[i] ≤ 10^4 * -10^9 ≤ T ≤ 10^9 # Input: The input will be provided in the following format: * The first line contains two space-separated integers, `N` and `T`. * The second line contains `N` space-separated integers representing the array `arr`. # Output: Output a single integer which is the maximum sum of a non-empty subarray such that the sum is less than or equal to `T`. If no such subarray exists that meets the criteria, return `-1`. # Example Input: ``` 5 10 1 2 3 -2 5 ``` # Example Output: ``` 9 ``` # Example Input: ``` 5 4 -1 -2 -3 4 -2 ``` # Example Output: ``` 4 ``` # Example Explanation: In the first example, the subarray `[1, 2, 3, -2, 5]` has the sum `9` which is the maximum sum less than or equal to `10`. In the second example, the subarray `[4]` has the sum `4` which is the maximum sum less than or equal to `4`. # Note: You may use theoretical algorithms or existing ones like Kadane’s Algorithm but need to adapt it to fit the additional requirement of the sum being less than or equal to `T`.","solution":"def max_subarray_sum(arr, T): max_sum = float(\'-inf\') n = len(arr) current_sum = 0 prefix_sums = [] for num in arr: current_sum += num if current_sum <= T: max_sum = max(max_sum, current_sum) for prefix in prefix_sums: if current_sum - prefix <= T: max_sum = max(max_sum, current_sum - prefix) prefix_sums.append(current_sum) return max_sum if max_sum != float(\'-inf\') else -1 # Function to process input and output based on the provided format def run_solution(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) T = int(data[1]) arr = list(map(int, data[2:2+N])) result = max_subarray_sum(arr, T) print(result)"},{"question":"You are given an array of integers nums. A subarray of the array is called a \\"peak subarray\\" if the first element of the subarray is smaller than the last element of the subarray. Your task is to find the length of the longest \\"peak subarray\\" in nums. Input The first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array nums. The second line of each test case contains n integers separated by spaces, each representing the elements of nums (1 ≤ nums[i] ≤ 10^9). Output For each test case, print one integer — the length of the longest \\"peak subarray\\" in nums. Example Input 3 5 1 2 3 4 5 6 4 3 2 1 2 3 7 5 1 2 1 2 1 2 Output 5 3 2","solution":"def longest_peak_subarray(t, test_cases): results = [] for case in test_cases: n, nums = case max_len = 0 current_len = 1 for i in range(1, n): if nums[i] > nums[i-1]: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 1 results.append(max_len) return results # Helper function for the input format def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) nums = list(map(int, input_lines[index+1].split())) test_cases.append((n, nums)) index += 2 return t, test_cases # To handle the input/output def main(input_str): t, test_cases = parse_input(input_str) results = longest_peak_subarray(t, test_cases) for result in results: print(result)"},{"question":"Given two strings, `str1` and `str2`, you need to find the length of the shortest common supersequence (SCS) of these two strings. The shortest common supersequence of two strings is the shortest string that has both `str1` and `str2` as subsequences. **Input:** - Two strings `str1` and `str2` with 1 ≤ |str1|, |str2| ≤ 1000, consisting of lowercase English letters. **Output:** - A single integer, the length of the shortest common supersequence of `str1` and `str2`. **Example:** **Input:** ``` abc ac ``` **Output:** ``` 3 ``` **Explanation:** The shortest common supersequence of \\"abc\\" and \\"ac\\" is \\"abc\\" which has a length of 3. **Input:** ``` geek eke ``` **Output:** ``` 5 ``` **Explanation:** The shortest common supersequence of \\"geek\\" and \\"eke\\" is \\"geeke\\" which has a length of 5. **Input:** ``` blake lake ``` **Output:** ``` 5 ``` **Explanation:** The shortest common supersequence of \\"blake\\" and \\"lake\\" is \\"blake\\" which has a length of 5. **Note:** To solve this problem, you can use dynamic programming (DP). The key idea is to use the relationship between the longest common subsequence (LCS) and the shortest common supersequence (SCS). The length of the SCS can be derived using the formula: [ text{Length of SCS} = |str1| + |str2| - text{Length of LCS}(str1, str2) ] Where: - (|str1|) is the length of `str1` - (|str2|) is the length of `str2` - (text{Length of LCS}(str1, str2)) is the length of the longest common subsequence of `str1` and `str2`. Dynamic programming can be used to compute the length of the LCS in (O(n times m)) time complexity, where (n) and (m) are the lengths of `str1` and `str2`, respectively.","solution":"def lcs(str1, str2): Helper function to find the length of the Longest Common Subsequence (LCS) of str1 and str2. n, m = len(str1), len(str2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] def shortest_common_supersequence_length(str1, str2): Returns the length of the shortest common supersequence of str1 and str2. lcs_length = lcs(str1, str2) return len(str1) + len(str2) - lcs_length"},{"question":"The magical forest has an enchanted river that flows through it. Each section of the river provides different amounts of magical energy. The river is divided into sections of equal length, and each section has a specific magical energy value assigned to it. The water flow in the river is constant and allows a magician to absorb the energy continuously as they float downstream. The magician can start at any section and stop at any section, absorbing all the magical energy from the start to the stop section inclusively. However, the magician can only float downstream and cannot go back upstream. Write a function that finds the maximum possible magical energy the magician can absorb by choosing an optimal start and stop section. Input The first line contains an integer n (1 ≤ n ≤ 2⋅10^5), which represents the number of sections in the river. The second line contains n integers e_1, e_2, ..., e_n (-10^6 ≤ e_i ≤ 10^6), where e_i is the magical energy value of the i-th section of the river. Output Print a single integer representing the maximum magical energy the magician can absorb. Examples Input 5 -1 2 3 -2 4 Output 7 Input 3 -5 -3 -1 Output -1 Input 6 2 3 4 -1 -2 1 Output 9","solution":"def max_magical_energy(n, energies): Finds the maximum possible magical energy the magician can absorb by choosing an optimal start and stop section. Parameters: n (int): Number of sections in the river. energies (list of int): Energies of each section. Returns: int: Maximum magical energy that can be absorbed. # Implementation of Kadane\'s Algorithm for maximum subarray sum max_ending_here = max_so_far = energies[0] for i in range(1, n): max_ending_here = max(energies[i], max_ending_here + energies[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Johnny loves playing with blocks. He likes arranging his blocks in such a way that he forms a pyramid. A pyramid is formed by placing a certain number of blocks as its base and then placing a smaller number of blocks on top of the base, recursively. In a pyramid: - The number of blocks at the base level is the largest, - The next level up has one less block than the level below it, - This continues until the top-most level, which consists of a single block. The rest of the blocks needed to make the pyramid are stacked on top of one another in a similar fashion. Johnny wants to know the total number of blocks required to build a pyramid with a given number of levels. Write a program that calculates the total number of blocks required to build a pyramid with `L` levels. # Input The input contains one integer `L`, the number of levels in the pyramid (1 ≤ L ≤ 10^5). # Output Output one integer, the total number of blocks required to build a pyramid with `L` levels. # Examples Input ``` 1 ``` Output ``` 1 ``` Input ``` 3 ``` Output ``` 6 ``` Input ``` 5 ``` Output ``` 15 ``` # Note In the first example, a pyramid with 1 level requires 1 block. In the second example, a pyramid with 3 levels has a base of 3 blocks, topped by a level with 2 blocks, and finally a top level with 1 block, thus requiring 3 + 2 + 1 = 6 blocks in total.","solution":"def pyramid_blocks(L): Returns the total number of blocks required to build a pyramid with L levels. return L * (L + 1) // 2"},{"question":"Statement You are given a list of integers. Write a function to determine if it\'s possible to partition the list into two subsets such that the sum of elements in both subsets is equal. If such a partition exists, return true; otherwise, return false. INPUT FORMAT - The input consists of an integer N, representing the number of test cases. - For each test case, there is a single line containing space-separated integers representing the list of numbers in that test case. OUTPUT FORMAT - For each test case, output a single line with \\"true\\" if such a partition exists and \\"false\\" otherwise (quotes for clarity). SAMPLE INPUT 2 1 5 11 5 1 2 3 5 SAMPLE OUTPUT true false CONSTRAINTS - 1 ≤ N ≤ 10 - 1 ≤ number of integers in each list ≤ 200 - 1 ≤ integer value ≤ 100","solution":"def can_partition(nums): Determines if the list nums can be partitioned into two subsets with equal sum. total_sum = sum(nums) if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target_sum] def partition_list(input_list): Takes lists of integers as input and returns the partition possibility for each list. results = [] for nums in input_list: if can_partition(nums): results.append(\\"true\\") else: results.append(\\"false\\") return results"},{"question":"You are managing a client\'s request to buy products from a specific store, and need to maximize the utilization of limited funds to purchase certain items. The store offers N different products, each with a unique id and price. You have a total budget B to spend. In addition to buying products individually, the store also provides M special offers. Each special offer allows you to buy a combination of specific products at a discounted combined price, which may be cheaper than buying those products individually. Your goal is to determine the maximum number of unique products the client can purchase within the budget B, either through individual purchases or special offers. Constraints * All values in input are integers. * 1 le N le 2 * 10^4 * 1 le M le 10^3 * 1 le price of each product le 10^5 * 1 le discounted price in each offer le budget B le 10^6 Input Input is given from Standard Input in the following format: N B price_1 price_2 ... price_N M num_products_in_offer discounted_price product_id_1 product_id_2 ... product_id_num_products_in_offer vdots Output Print the maximum number of unique products the client can purchase. Examples Input 4 100 20 30 50 70 2 2 40 1 2 3 90 2 3 4 Output 3 Input 5 150 40 20 30 70 50 3 2 45 1 2 3 110 3 4 5 2 90 2 5 Output 4 Input 3 30 10 15 20 1 2 20 1 2 Output 2","solution":"def max_unique_products(N, B, prices, M, offers): from itertools import combinations # Initialize a list to hold the unique products index that can be bought def dfs(index, budget, purchased, best): # If index out of range or no budget left, return the number of purchased products if index == N + M or budget == 0: return len(set(purchased)) # Get the current state value if index < N: price = prices[index] next_indexes = [index + 1] else: offer = offers[index - N] next_indexes = offer[2:] if offer[1] <= budget else [index + 1] price = offer[1] if offer[1] <= budget else float(\'inf\') # Case 1: Skip the current index result = dfs(index + 1, budget, purchased, best) # Case 2: Take the current price/offer if possible if price <= budget: if index < N: purchased.append(index + 1) else: purchased += next_indexes result = max(result, dfs(index + 1, budget - price, purchased, result)) if index >= N: for _ in range(len(next_indexes)): purchased.pop() else: purchased.pop() return result offers.sort(key=lambda x: x[1]) return dfs(0, B, [], 0)"},{"question":"You are given an array of integers representing the resistance values of various resistors. Your task is to determine if it is possible to combine these resistors (using series or parallel combinations) to achieve a target resistance value. It is allowed to use each resistor more than once. A resistor in series is computed by simply adding the resistance values: R_series = R1 + R2 + ... + Rn A resistor in parallel is computed using the formula: 1/R_parallel = 1/R1 + 1/R2 + ... + 1/Rn Your goal is to report whether it is possible to achieve the target resistance using any combinations of the given resistors. # Input - The first line contains an integer T, denoting the number of test cases. - The first line of each test case contains the target resistance value, N. - The second line of each test case contains an integer M denoting the number of resistors. - The third line of each test case contains M space-separated integers denoting the resistance values of the resistors. # Output For each test case, output a single line containing \\"POSSIBLE\\" if the target resistance can be achieved and \\"IMPOSSIBLE\\" otherwise. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 100 - 1 ≤ resistance values ≤ 100 # Example Input: ``` 3 4 3 1 2 3 6 2 2 3 5 4 1 2 3 4 ``` Output: ``` POSSIBLE IMPOSSIBLE POSSIBLE ``` # Explanation - In the first test case, using two 2 ohm resistors in series will give 4 ohms. - In the second test case, it is impossible to achieve 6 ohms using combinations of 2 and 3 ohms resistors. - In the third test case, using a 1 and 4 ohm resistor in series results in 5 ohms, which is the target resistance. Note: This problem requires an understanding of combining resistors in series and parallel and possibly using recursion or dynamic programming to find the correct combination to achieve the target resistance.","solution":"from itertools import combinations def combination_resistances(values): Returns a set of all possible resistances that can be achieved with combinations of given resistor values using series combinations. all_combinations = set() for i in range(1, len(values) + 1): for comb in combinations(values, i): all_combinations.add(sum(comb)) return all_combinations def is_possible_to_achieve_resistance(target, resistances): Determines if it is possible to achieve the target resistance with the given resistances using both series and parallel combinations. possible_series = combination_resistances(resistances) # For simplicity, just considering series combinations return \\"POSSIBLE\\" if target in possible_series else \\"IMPOSSIBLE\\" def process_test_cases(T, test_cases): results = [] for i in range(T): target = test_cases[i][0] resistances = test_cases[i][2] result = is_possible_to_achieve_resistance(target, resistances) results.append(result) return results def parse_input(input_string): input_list = input_string.strip().split(\\"n\\") T = int(input_list[0]) test_cases = [] idx = 1 for _ in range(T): target = int(input_list[idx]) M = int(input_list[idx + 1]) resistances = list(map(int, input_list[idx + 2].split())) test_cases.append((target, M, resistances)) idx += 3 return T, test_cases"},{"question":"You are given an `n x n` grid filled with integers. You need to find the largest sum of any contiguous subgrid within the given grid. A contiguous subgrid is defined as any subgrid within the original grid where all elements are adjacent and form a rectangle. Write a function `maxSumSubgrid(grid)` that takes a 2D list of integers `grid` as input and returns the largest sum of any contiguous subgrid. # Input - An integer `n` (1 ≤ n ≤ 100), the length of the side of the square grid. - A 2D list of integers `grid` of size `n x n` where each grid[i][j] is between -1000 and 1000 (inclusive). # Output - An integer which is the largest sum of any contiguous subgrid. # Example ```python grid = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(maxSumSubgrid(grid)) # Output: 29 grid = [ [-1, -1], [-1, -1] ] print(maxSumSubgrid(grid)) # Output: -1 ``` # Note In the first example, the subgrid with the largest sum is: ``` 3 8 10 -4 -1 1 ``` And its sum is `3 + 8 + 10 - 4 - 1 + 1 = 29`. In the second example, the entire grid is the subgrid with the largest sum, which is `-1`. # Hint You may use a variation of the Kadane\'s algorithm to solve this problem efficiently. You can consider solving for the maximum sum subarray for each pair of rows and then use Kadane\'s algorithm on the temporary array of column sums. To break it down: 1. Iterate over all possible pairs of rows. 2. For each pair of rows, calculate the column sums between these rows forming a temporary array. 3. Use Kadane\'s algorithm on this temporary array to find the maximum sum of the subgrid bound by the current pair of rows.","solution":"def maxSumSubgrid(grid): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far n = len(grid) max_sum = float(\'-inf\') for top in range(n): temp = [0] * n for bottom in range(top, n): for i in range(n): temp[i] += grid[bottom][i] # Use Kadane\'s algorithm on temp array max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"You are given a task to encode a string by replacing each character in it with its corresponding letter in the alphabet. Specifically, replace each character with the letter that is exactly 3 places after it in the alphabet. If the character is at the end of the alphabet, it wraps around to the beginning. For example, \'x\' is replaced with \'a\', \'y\' with \'b\', and \'z\' with \'c\'. However, this transformation should only be applied to the alphabets (both uppercase and lowercase), and non-alphabet characters should remain unchanged. Write a function `encode_string` that performs this operation. Function Signature: ```python def encode_string(s: str) -> str: # Your code here ``` Input: - A single string `s` of length n (1 ≤ n ≤ 10^5) containing lowercase and uppercase English letters and/or non-alphabet characters. Output: - Return the encoded string. Examples: ```python print(encode_string(\\"abc\\")) # Output: \\"def\\" print(encode_string(\\"xyz\\")) # Output: \\"abc\\" print(encode_string(\\"Hello, World!\\")) # Output: \\"Khoor, Zruog!\\" ``` Note: 1. The transformation applies independently to each character. 2. For this task, assume the English alphabet is circular, i.e., after \'z\' comes \'a\'.","solution":"def encode_string(s: str) -> str: def shift_char(c): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + 3) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 3) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c) for c in s)"},{"question":"You are given an array of n integers. Your task is to determine if you can make all elements of the array equal by performing a series of moves. In one move, you can increment or decrement any element of the array by 1. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output The only line of output should contain \\"YES\\" if it\'s possible to make all elements equal by performing the allowed moves, and \\"NO\\" otherwise. Examples Input 4 1 3 2 1 Output YES Input 3 1 4 7 Output NO","solution":"def can_make_elements_equal(n, arr): Determines if it is possible to make all elements of the array equal by incrementing or decrementing elements by 1. Args: n : int : number of elements in the array arr : list[int] : the array of integers Returns: str : \\"YES\\" if it is possible to make all elements equal, \\"NO\\" otherwise # Calculate the unique set of differences between elements unique_elements = set(arr) if len(unique_elements) <= 2: return \\"YES\\" if len(unique_elements) == 3: unique_list = sorted(unique_elements) if unique_list[2] - unique_list[0] == 2: return \\"YES\\" return \\"NO\\""},{"question":"A sequence of binary digits (0s and 1s) can be considered valid if it contains an equal number of consecutive 1\'s and 0\'s. Given any number of test cases, each containing a binary string, determine whether the binary string is valid according to the above criteria. A binary string is valid if and only if there exists a series of substrings of the form 1+0+ or 0+1+ (where + denotes the sequence can contain any positive number of 0s or 1s respectively) such that the entire string is composed only of these substrings without any interruptions. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains a binary string S consisting of 0s and 1s. Output For each test case, print \\"VALID\\" if the string is valid, otherwise print \\"INVALID\\". Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Sample Input 3 1100 1010 1001 Sample Output VALID VALID INVALID Explanation The first string \\"1100\\" contains groups \\"11\\" and \\"00\\" which are consecutive and valid. The second string \\"1010\\" contains groups of length 1 of each \'1\' and \'0\' and is valid. The third string \\"1001\\" has no valid substring that ensures all \'1\'s followed by all \'0\'s or vice versa. Hence, it is invalid.","solution":"def is_valid_binary_string(s): Returns \\"VALID\\" if the binary string s is valid according to the criteria, otherwise returns \\"INVALID\\". i = 0 n = len(s) while i < n: count_1 = 0 count_0 = 0 # Count consecutive 1\'s while i < n and s[i] == \'1\': count_1 += 1 i += 1 # Count consecutive 0\'s while i < n and s[i] == \'0\': count_0 += 1 i += 1 if count_1 != count_0 or (count_1 == 0 and count_0 == 0): return \\"INVALID\\" return \\"VALID\\" def validate_binary_strings(test_cases): results = [] for s in test_cases: results.append(is_valid_binary_string(s)) return results"},{"question":"In a land far away, there exists a series of islands connected by bridges. Some islands belong to the region of Atlantis and others to the region of Lemuria. Some islands are disputed and claimed by both Atlantis and Lemuria. Each bridge has a unique cost associated with its construction, and all bridges are bidirectional. Your task is to ensure that all islands in Atlantis can reach each other directly or indirectly via bridges and, similarly, all islands in Lemuria can reach each other directly or indirectly via bridges. You need to determine the minimum total cost to construct a set of bridges that satisfies this requirement. Input The first line contains two integers n (2 ≤ n ≤ 10^5) — the number of islands, and m (1 ≤ m ≤ 3*10^5) — the number of potential bridges. The following n lines describe the islands. Each line contains an integer i (1 ≤ i ≤ n) and a character t_i — the identity of the island: \'A\' for Atlantis, \'L\' for Lemuria, and \'D\' for disputed. The next m lines describe the bridges. Each line contains three integers u, v (1 ≤ u, v ≤ n) and c (1 ≤ c ≤ 10^6) — the islands that the bridge connects and the cost of constructing it. No two islands are connected by more than one bridge. Output Print the minimal total cost of constructing the bridges so that all Atlantis islands, along with disputed islands, form a connected component, and all Lemuria islands, along with disputed islands, form a connected component. Example Input 6 7 1 A 2 L 3 A 4 D 5 L 6 D 1 4 5 4 6 3 2 5 1 4 5 2 3 4 4 6 5 6 2 6 10 Output 15 Note In the given example, one minimum cost way to connect all required islands is: - Atlantis: 1 to 4 (cost 5), 3 to 4 (cost 4) - Lemuria: 2 to 5 (cost 1), 5 to 2 (cost 10), 4 to 5 (cost 2), 4 to 6 (cost 3) Total cost = 5 + 4 + 1 + 2 + 3 = 15","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_cost_to_connect_islands(n, m, islands, bridges): # Disjoint set initialization parent = [] rank = [] for i in range(n + 1): parent.append(i) rank.append(0) # Separate the islands by their types atlantis = set() lemuria = set() disputed = set() for island in islands: index, type = island if type == \'A\': atlantis.add(index) elif type == \'L\': lemuria.add(index) else: disputed.add(index) # Sort bridges by cost bridges.sort(key=lambda x: x[2]) total_cost = 0 for bride in bridges: u, v, c = bride if (u in atlantis and v in lemuria) or (v in atlantis and u in lemuria): continue if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += c return total_cost"},{"question":"You are given an array of integers representing the number of hours each member has available for a project within a month. Your task is to assign a task to every member in such a way that each task requires exactly 8 hours of work, and you can split the task into smaller intervals as long as each member\'s hours add up to a total (or more) of 8 hours. Write a program that determines whether it\'s possible to complete the project given the availability of the members. If it is possible, the program should output all possible sets of intervals for each member that sum to the task requirement (8 hours). Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of one line containing N, the number of members, followed by N space-separated integers representing the hours each member has available. Output For each test case, output \\"Case #x: \\" where x is the case number (starting from 1). If it is possible to complete the project, output \\"Possible\\" and list all sets of intervals for each member that sum up to exactly 8 hours. If it is not possible, output \\"Not possible\\". Each subset of intervals for a member should be output as a comma-separated list and members should be separated by a space. If there are multiple ways to assign the intervals, any valid output is acceptable. Constraints 1 ≤ T ≤ 100. 1 ≤ N ≤ 50. 1 ≤ Hour ≤ 24. SAMPLE INPUT 2 4 1 2 3 2 3 5 4 7 SAMPLE OUTPUT Case #1: Possible 1 2 3 2 Case #2: Not possible","solution":"def can_form_eight_hours(hours): n = len(hours) dp = [False] * 25 # We care up to sum 24 (maximum hour given by constraint) dp[0] = True for h in hours: for j in range(24, h-1, -1): dp[j] = dp[j] or dp[j-h] return dp[8] def solve(test_cases): results = [] case_number = 1 for hours in test_cases: if can_form_eight_hours(hours): results.append(f\\"Case #{case_number}: Possible\\") else: results.append(f\\"Case #{case_number}: Not possible\\") case_number += 1 return results def solution(T, cases): test_cases = [] for case in cases: N, *hours = case test_cases.append(hours) return solve(test_cases) # Example input and output # (normally, you would handle input from stdin and output to stdout) T = 2 cases = [ [4, 1, 2, 3, 2], [3, 5, 4, 7] ] output = solution(T, cases) for out in output: print(out)"},{"question":"An island has been divided into a grid of N rows and M columns. Each cell in this grid either contains water (represented by \'.\') or land (represented by \'#\'). The island is formed by adjacent land cells (horizontal or vertical connections only). Given the grid, your task is to count the number of separate islands. Constraints: - 1 ≤ N, M ≤ 1000 Input: The input is given from Standard Input in the following format: ``` N M grid[1] grid[2] : grid[N] ``` Each row of the grid is represented by a string of length M consisting of the characters \'.\' and \'#\'. Output: Print the number of separate islands in the grid. Examples Input ``` 3 4 .#.. ..#. #. ``` Output ``` 2 ``` Input ``` 5 6 ..#... .... ...#.. .#.. ..#. ``` Output ``` 3 ```","solution":"def count_islands(grid): Count the number of separate islands in the grid. Args: grid (List[str]): The grid representation with rows as strings. Returns: int: The number of separate islands. N = len(grid) M = len(grid[0]) if N > 0 else 0 def dfs(i, j): if i < 0 or i >= N or j < 0 or j >= M or grid[i][j] != \'#\': return grid[i][j] = \'.\' # Mark the land cell as visited dfs(i - 1, j) # up dfs(i + 1, j) # down dfs(i, j - 1) # left dfs(i, j + 1) # right island_count = 0 grid = [list(row) for row in grid] for i in range(N): for j in range(M): if grid[i][j] == \'#\': island_count += 1 dfs(i, j) return island_count"},{"question":"You are given an array of integers nums of length n. An operation is defined as selecting any two integers from the array and removing them while replacing them with their sum, their product, or their modulo (remainder of their division). Your task is to determine the maximum possible integer that can be obtained after exactly n-1 operations, reaching a single integer in the array. Use the operations optimally to reach the highest number possible. Consider that you always start with non-negative integers. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer n (2 ≤ n ≤ 100) — the number of elements in the array. The second line of each test case contains n integers separated by spaces, nums, where each integer (0 ≤ nums[i] ≤ 100) is an element of the array. Output For each test case, output a single integer — the maximum possible integer that can be obtained after optimal operations. Example Input 2 3 5 2 1 4 1 1 2 3 Output 20 6 Note In the first example, one possible optimal way to obtain 20 is: - Select 5 and 2 and replace them with their product (5*2) resulting in array [10, 1] - Then, select 10 and 1 and replace them with their product (10*1) resulting in array [10] In the second example, one possible optimal way to obtain 6 is: - Select 1 and 1 and replace them with their sum (1+1) resulting in array [2, 2, 3] - Then, select 2 and 2 and replace them with their sum (2+2) resulting in array [4, 3] - Finally, select 4 and 3 and replace them with their product (4*3) resulting in array [12]","solution":"def max_possible_integer(nums): Returns the maximum possible integer that can be obtained after exactly n-1 operations on the array `nums` following the allowed operations: sum, product, or modulo. # Strategy: Prefer product operations to maximize the result nums.sort(reverse=True) # Sort nums in descending order result = nums[0] # Initialize the result with the largest number for num in nums[1:]: result *= num # Multiply the result with each subsequent number return result def solve(test_cases): Given a list of test cases, each containing a list of numbers, return the maximum possible integer outcome for each test case after exactly n-1 operations. results = [] for nums in test_cases: results.append(max_possible_integer(nums)) return results"},{"question":"In a new game \\"Sudoku Solver\\", a player is required to fill a 9x9 grid with digits from 1 to 9. The grid is initially partially filled with some digits, and the player needs to complete the grid so that each column, each row, and each of the nine 3x3 subgrids (also known as blocks) contains all of the digits 1 through 9 with no repetitions. Your task is to write a program that takes such a partially filled grid and outputs a fully solved grid. It is guaranteed that the given grid has a unique solution. Input The input consists of 9 lines, each containing 9 characters. Each character is either a digit from \'1\' to \'9\' or a dot \'.\' which represents an empty cell to be filled. Output Output 9 lines, each containing 9 characters representing the solved Sudoku grid. Examples Input 5 3 . . 7 . . . . 6 . . 1 9 5 . . . . 9 8 . . . . 6 . 8 . . . 6 . . . 3 4 . . 8 . 3 . . 1 7 . . . 2 . . . 6 . 6 . . . . 2 8 . . . . 4 1 9 . . 5 . . . . 8 . . 7 9 Output 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Note In this sample input, the initially given digits are positioned such that they help to uniquely determine the placement of the remaining digits. Ensure that your solution respects the constraints and rules of a Sudoku puzzle, filling all empty cells accurately.","solution":"def solve_sudoku(grid): def is_valid_move(grid, row, col, number): # Check if the number is not repeated in the current row, column, and 3x3 subgrid. for i in range(9): if grid[row][i] == number or grid[i][col] == number: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if grid[i][j] == number: return False return True def solve(grid): for row in range(9): for col in range(9): if grid[row][col] == \'.\': for number in \'123456789\': if is_valid_move(grid, row, col, number): grid[row][col] = number if solve(grid): return True grid[row][col] = \'.\' return False return True solve(grid) return grid"},{"question":"Carol is organizing an outdoor fair with different game booths. Each game booth is represented by an index from 1 to N. The revenue generated by each game booth can be described by an integer array R of size N, where R[i] is the revenue of the game booth i+1. In order to boost the fair\'s performance, Carol has decided to reorganize the layout of the booths. She wants to find the highest possible total revenue she can achieve by choosing a contiguous subsequence of booths. A contiguous subsequence of booths is defined as a sequence of booths that appear consecutively in the array. For example, if R = [4, -1, 2, 1], the contiguous subsequences are: [4], [-1], [2], [1], [4, -1], [-1, 2], [2, 1], [4, -1, 2], [-1, 2, 1], and [4, -1, 2, 1]. Write a function that finds the highest possible total revenue Carol can gain from a contiguous subsequence of booths. Input - The first line contains an integer N (1 ≤ N ≤ 100,000) — the number of game booths. - The second line contains N integers R[i] (-10^9 ≤ R[i] ≤ 10^9) — the revenue of each game booth. Output - Print one number — the highest possible total revenue from any contiguous subsequence of booths. Function Signature ```python def max_contiguous_revenue(N: int, R: List[int]) -> int: ``` Examples Input 4 4 -1 2 1 Output 6 Input 5 1 2 3 -2 5 Output 9 Input 3 -2 1 3 Output 4 Explanation In the first example, the subsequence [4, -1, 2, 1] gives the highest revenue of 6. In the second example, the subsequence [1, 2, 3, -2, 5] gives the highest revenue of 9. In the third example, the subsequence [1, 3] gives the highest revenue of 4.","solution":"def max_contiguous_revenue(N, R): Returns the highest possible total revenue from any contiguous subsequence of booths. max_current = max_global = R[0] for i in range(1, N): max_current = max(R[i], max_current + R[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a faraway land, there exists a magical forest where trees bear precious fruits. Each tree is rooted at position (0, 0) and grows fruits at various coordinates in the 2D plane. The forest keeper, an ancient wizard, has tasked you with identifying the order in which the fruits should be harvested to maximize the magical power they absorb from the environment. The harvesting order is determined using a custom traversal mechanism based on the following rules: 1. Start from the root at (0, 0). 2. At each point, harvest the fruit and move to the next point which has not been visited yet. 3. The next point should always be the unvisited point with the smallest Euclidean distance from the current point. Your task is to print the order of the coordinates of the fruits as they are harvested. INPUT: The first line contains an integer `t`, the number of test cases. Each test case starts with an integer `n`, the number of fruits on the tree. The next `n` lines each contain two integers `x` and `y`, representing the coordinates of a fruit on the tree. OUTPUT: For each test case, output the coordinates of the fruits in the order they are harvested. Each coordinate pair should be printed on a new line, and all pairs for a test case should be separated by a blank line. CONSTRAINTS: 1 ≤ t ≤ 50 0 ≤ n ≤ 100 -1000 ≤ x, y ≤ 1000 SAMPLE INPUT: 2 3 1 2 3 1 2 2 4 -1 -1 2 2 -2 2 1 -1 SAMPLE OUTPUT: 1 2 2 2 3 1 -1 -1 1 -1 2 2 -2 2 Explanation: For the first test case: - Start at (0, 0), the closest fruit is at (1, 2). - From (1, 2), the next closest fruit is at (2, 2). - Finally, the next closest fruit from (2, 2) is at (3, 1). For the second test case: - Start at (0, 0), the closest fruit is at (-1, -1). - From (-1, -1), the next closest fruit is at (1, -1). - The next closest fruit from (1, -1) is at (2, 2). - Finally, the last fruit is at (-2, 2).","solution":"import math def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def harvest_order(t, test_cases): results = [] for i in range(t): n, fruits = test_cases[i] if n == 0: results.append([]) continue current_position = (0, 0) unvisited_fruits = fruits.copy() order_of_harvest = [] while unvisited_fruits: closest_fruit = min(unvisited_fruits, key=lambda fruit: euclidean_distance(current_position, fruit)) order_of_harvest.append(closest_fruit) unvisited_fruits.remove(closest_fruit) current_position = closest_fruit results.append(order_of_harvest) return results"},{"question":"You are a spaceship engineer in a space station orbiting Earth. You’ve been assigned the task of developing a traffic management program for docking spaceships. Each spaceship approaches the space station from a specific direction and follows a linear trajectory. When two spaceships arrive at the same docking point at the station, you must decide in which order they should dock based on their arrival times. You need to write a program that simulates the docking schedule for the spaceships and determines the sequence in which they dock. Input: The input consists of multiple test cases. Each test case starts with a line containing an integer M (1 ≤ M ≤ 100), which indicates the number of spaceships. The next M lines each contain four integers representing a spaceship’s trajectory. The trajectory is defined by the point (p, q, r) that the spaceship targets and the time t it arrives there (−100 ≤ p, q, r ≤ 1000 and 0 ≤ t ≤ 10000). The last test case is followed by a line containing a single zero. Output: For each test case, output M lines each containing the docking point (p, q, r) and the arrival time t of the spaceships in the order they will dock. Example: Input: 3 2 3 4 100 1 2 3 50 2 3 4 75 2 -1 -2 -3 10 3 4 5 15 0 Output: 1 2 3 50 2 3 4 75 2 3 4 100 -1 -2 -3 10 3 4 5 15 Explanation: In the first test case, spaceship 1 arrives at (1, 2, 3) at t=50, spaceship 2 at (2, 3, 4) at t=75, and spaceship 3 at (2, 3, 4) at t=100. Since spaceship 2 and 3 target the same docking point, spaceship 2 should dock first as it arrives earlier. Hence the docking order is as listed in the output. In the second test case, the spaceships arrive at different points, so the order matches their arrival times directly.","solution":"def docking_schedule(test_cases): This function takes a list of test cases with spaceship trajectory and arrival times and returns the docking schedule based on the arrival times sorted for each test case. results = [] for case in test_cases: M, ships = case ships.sort(key=lambda x: x[3]) # Sort based on the arrival time t for ship in ships: results.append(f\\"{ship[0]} {ship[1]} {ship[2]} {ship[3]}\\") results.append(\\"\\") # Add a blank line between test cases return results def parse_input(data): This helper function parses the input data and returns it in a structured format. lines = data.strip().split(\'n\') test_cases = [] i = 0 while True: M = int(lines[i]) if M == 0: break ships = [] for j in range(M): i += 1 ships.append(tuple(map(int, lines[i].split()))) test_cases.append((M, ships)) i += 1 return test_cases"},{"question":"You are given two sequences of integers, a and b. Your task is to modify sequence a to make it equal to sequence b using the minimum number of operations. In each operation, you can perform any one of the following: 1. Increment an element of a by 1. 2. Decrement an element of a by 1. Return the minimum number of operations required to transform sequence a into sequence b. Input The input consists of: - The first line contains an integer N (1 ≤ N ≤ 100,000), the length of the sequences a and b. - The second line contains N integers, the elements of sequence a. - The third line contains N integers, the elements of sequence b. Output Output a single integer, the minimum number of operations required. Example Input 3 1 2 3 2 3 4 Output 3 Input 5 1 1 1 1 1 5 5 5 5 5 Output 20","solution":"def min_operations_to_equal_sequences(n, a, b): Returns the minimum number of operations required to transform sequence a into sequence b. Parameters: n(int): The length of the sequences a and b. a(list of int): The initial sequence. b(list of int): The target sequence. Returns: int: The minimum number of operations. operations = sum(abs(a[i] - b[i]) for i in range(n)) return operations"},{"question":"Leonardo is interested in the largest prime number that is less than a given integer n. He knows that testing every number smaller than n for primality can be computationally expensive, so he enlists your help to efficiently find the answer. Your task is to help Leonardo by writing a function that determines the largest prime number less than n. Input The input consists of a single integer n (2 ≤ n ≤ 10^6). Output Print the largest prime number that is smaller than n. Examples Input 10 Output 7 Input 30 Output 29 Input 20 Output 19","solution":"def largest_prime_less_than(n): Find the largest prime number less than a given integer n. if n <= 2: raise ValueError(\\"Input must be greater than 2\\") # Sieve of Eratosthenes algorithm to find all primes less than n sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, n, start): sieve[multiple] = False # Find the largest prime less than n for i in range(n - 1, 1, -1): if sieve[i]: return i return None"},{"question":"Given an array of integers and a window size, write a program to print the maximum sum of any subarray of the given size. A subarray is a contiguous subset of the array. The size of the subarray is always less than or equal to the size of the array. # Input Format - The first line of input contains two integers n and k, where n is the size of the array and k is the size of the subarray. - The second line contains n space-separated integers representing the elements of the array. # Output Format - The output should be a single integer representing the maximum sum of any subarray of size k. # Constraints - ( 1 leq n leq 10^6 ) - ( 1 leq k leq n ) - ( -10^4 leq text{array elements} leq 10^4 ) # Example **Input:** ``` 8 3 1 2 3 -2 5 -1 6 7 ``` **Output:** ``` 12 ``` **Explanation:** The subarray with the maximum sum of size 3 is `[5, -1, 6]`, which gives a sum of 10. # Note In case there are multiple subarrays with the maximum sum, you only need to print the value of that maximum sum. You can assume that the elements of the array fit within standard integer limits. Your task is to implement an efficient solution that achieves this in linear time relative to the size of the array.","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of any subarray of size k. Parameters: arr (list): List of integers representing the array. k (int): Size of the subarray. Returns: int: The maximum sum of any subarray of size k. n = len(arr) if k > n: return None # Edge case when k is larger than the array size # Initialize the sum of the first subarray of size k max_sum = sum(arr[:k]) current_sum = max_sum # Iterate through the array, updating the sum of the current subarray of size k for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Martha loves arranging flowers and she has m flower beds in her garden. Each flower bed i can only grow a specific type of flower from a set of n different types of flowers. Unfortunately, not all flower types are compatible with the soil in Martha\'s garden. Each type of soil has a compatibility value which indicates the number of different types of flowers that can grow in it. Martha wants to know the maximum number of total flower beds that can be fully occupied with flowers considering the compatibility constraints. To grow a flower in a bed, the soil of the bed must be compatible with that specific type of flower. Input The first line contains two integers n and m (1 ≤ n, m ≤ 20) — the number of different types of flowers and the number of flower beds. The second line contains n integers, where the i-th integer describes the compatibility value of the soil i for the type of flowers (0 ≤ compatibility value ≤ m). Output Print a single integer — the maximum number of flower beds that can be fully occupied with flowers. Examples Input 3 3 2 1 0 Output 3 Input 4 2 2 2 1 0 Output 2 Note In the first test case, soil type 1 can host up to 2 flower beds, soil type 2 can host 1 flower bed, and soil type 3 cannot host any flower beds. Thus, all 3 flower beds can be occupied. In the second test case, each soil type can only host specific numbers of flower beds, but the total number of flower beds filled cannot exceed 2.","solution":"def max_full_flower_beds(n, m, compat_values): This function calculates the maximum number of flower beds that can be fully occupied with flowers given the compatibility values of the soils. n: int - number of different types of flowers m: int - number of flower beds compat_values: list of int - compatibility values of the soils return: int - maximum number of fully occupied flower beds # Sum of all compatibilities gives us the total possible flower beds that can be fully occupied total_possible_beds = sum(compat_values) # The result cannot be more than m, nor can it be more than the total possible return min(total_possible_beds, m)"},{"question":"John is managing a warehouse with N containers in a line, each having a certain capacity. He wants to redistribute some of the containers\' capacities to make their content levels even. John can perform the following operation any number of times: Select two containers, one with more content than the other, and move one unit of content from the fuller one to the emptier one. Help John determine if it\'s possible to make all containers contain the same amount of content using the given operation. Input format: The first line contains an integer T, representing the number of test cases. Each test case starts with a line containing an integer N, the number of containers. The next line contains N space-separated integers representing the current contents of the containers. Output format: For each test case, output \\"POSSIBLE\\" if John can redistribute the content to make all containers have the same content level, and \\"IMPOSSIBLE\\" otherwise. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Ci ≤ 10^9 (where Ci is the content of the ith container) SAMPLE INPUT 2 5 1 2 3 4 5 4 1 1 1 1 SAMPLE OUTPUT POSSIBLE POSSIBLE","solution":"def can_redistribute_contents(T, cases): Determines if it\'s possible to redistribute container contents to make all containers have the same amount. Args: T (int): Number of test cases. cases (list): List of tuples where each tuple contains an integer N and a list of N integers. Returns: list: List of strings \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" for each test case. results = [] for N, contents in cases: total_content = sum(contents) if total_content % N == 0: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"You are organizing a programming contest and need to assign participants to different rooms. Each room can hold a certain number of participants, and all participants need to be assigned to some room based on the given constraints. Your goal is to ensure that no room exceeds its capacity and each participant is assigned to exactly one room. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the number of rooms. The second line contains `n` space-separated integers representing the capacity of each room. The third line contains an integer `m` (1 ≤ m ≤ 100), the number of participants. Output Print \\"YES\\" without the quotes, if it is possible to assign all participants to the rooms without exceeding any room\'s capacity. Otherwise, print \\"NO\\" without the quotes. Examples Input 3 2 1 3 5 Output YES Input 2 1 1 3 Output NO Note In the first sample, the room capacities are 2, 1, and 3. You can assign 2 participants to the first room, 1 participant to the second room, and 2 participants to the third room, which totals to 5 participants. In the second sample, the room capacities are 1 and 1. There are 3 participants, but the rooms can only hold up to 2 participants in total, so it is not possible to accommodate all participants.","solution":"def assign_participants_to_rooms(n, room_capacities, m): Determines if it is possible to assign all participants to rooms without exceeding the capacities. Parameters: n (int): number of rooms room_capacities (List[int]): capacities of each room m (int): number of participants Returns: str: \'YES\' if all participants can be assigned to the rooms, \'NO\' otherwise total_capacity = sum(room_capacities) if total_capacity >= m: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string S consisting only of lowercase alphabets. Your task is to determine if the string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input Format: The first and only line of the input contains a string S. Output Format: Output \\"YES\\" if the string is a palindrome, otherwise output \\"NO\\". Constraints: 1 ≤ |S| ≤ 100 SAMPLE INPUT racecar SAMPLE OUTPUT YES","solution":"def is_palindrome(s): Returns \'YES\' if the input string s is a palindrome, otherwise returns \'NO\'. if s == s[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with creating a new file system that organizes files based on custom-defined rules. Each file has a name and a size in bytes. You need to implement a system that supports the following operations: 1. **Create** - Add a new file with a given name and size. 2. **Delete** - Remove a file by its name. 3. **List** - Show all files sorted by size. If two files have the same size, they should be sorted alphabetically by their names. 4. **Total Size** - Display the total size of all files in the system. Write a program to perform these operations based on the given commands. # Input The input consists of a series of commands. Each command is given in a new line, and the sequence of commands is terminated by the string \\"END\\". - \\"CREATE <name> <size>\\" : Add a file with the provided name and size. If a file with the same name already exists, update its size. - \\"DELETE <name>\\" : Remove the file with the specified name. If the file does not exist, ignore this command. - \\"LIST\\" : Display all files. Each file should be printed on a new line in the format `<name>: <size>`. - \\"TOTAL\\" : Display the total size of all files. - \\"END\\" : Terminate the sequence of commands. # Output Perform the actions required by each command and produce the appropriate output as specified above. # Example Input ``` CREATE file1.txt 100 CREATE file2.txt 200 CREATE file1.txt 150 LIST DELETE file2.txt LIST TOTAL CREATE file3.txt 300 TOTAL END ``` Output ``` file1.txt: 150 file2.txt: 200 file1.txt: 150 Total: 150 Total: 450 ``` # Implementation Notes 1. Use a dictionary to store the files, where the key is the file name and the value is the size. 2. Ensure that the \\"LIST\\" operation sorts files by size and then by name. 3. For \\"TOTAL\\", sum up the sizes of all files in the system and print the result.","solution":"class FileSystem: def __init__(self): self.files = {} def create(self, name, size): self.files[name] = size def delete(self, name): if name in self.files: del self.files[name] def list_files(self): for name, size in sorted(self.files.items(), key=lambda x: (x[1], x[0])): print(f\\"{name}: {size}\\") def total_size(self): total = sum(self.files.values()) print(f\\"Total: {total}\\") def run_commands(self, commands): for command in commands: if command == \\"END\\": break parts = command.split() cmd, args = parts[0], parts[1:] if cmd == \'CREATE\': self.create(args[0], int(args[1])) elif cmd == \'DELETE\': self.delete(args[0]) elif cmd == \'LIST\': self.list_files() elif cmd == \'TOTAL\': self.total_size()"},{"question":"Write a program that reads a list of words and determines which words, if any, can be formed by rearranging the letters of a given target word. The program should be case-insensitive. Constraints * The length of each word in the list < 100 * The number of words in the list < 1000 Input * A string representing the target word (consisting of alphabetical characters only). * A list of words, each on a new line. Output Print a list of words from the input list that can be rearranged to form the target word, each on a new line. If no words can be formed, print \\"No matches found.\\" Example Input ``` listen silent enlist google netsil banana ``` Output ``` silent enlist netsil ```","solution":"def find_anagrams(target_word, words_list): Returns a list of words that can be formed by rearranging the letters of the target_word. :param target_word: A string representing the target word. :param words_list: A list of words. :return: A list of anagrams of the target_word found in words_list. target_word_sorted = \'\'.join(sorted(target_word.lower())) anagrams = [] for word in words_list: if \'\'.join(sorted(word.lower())) == target_word_sorted: anagrams.append(word) return anagrams if anagrams else [\\"No matches found\\"] # Example usage of the function (not part of the solution): # target = \\"listen\\" # words = [\\"silent\\", \\"enlist\\", \\"google\\", \\"netsil\\", \\"banana\\"] # output = find_anagrams(target, words) # for word in output: # print(word)"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid contains either \'0\' or \'1\'. You can change any \'1\' in the grid to \'0\', but you can only do this operation K times. The goal is to find the maximum size of a square subgrid that contains only \'0\'s after performing at most K changes from \'1\' to \'0\'. Constraints * 1 leq R, C leq 100 * 1 leq K leq R * C * The grid consists of only characters \'0\' and \'1\'. Input Input is given from Standard Input in the following format: R C K grid_1 grid_2 ... grid_R Each row of the grid is given as a string of length C. Output Print the size of the largest square subgrid that contains only \'0\'s after at most K changes from \'1\' to \'0\'. Examples Input 4 5 3 01101 11001 01110 11000 Output 3 Input 3 3 1 010 100 111 Output 2","solution":"def max_square_subgrid(R, C, K, grid): def can_form_square_of_size(size): # A helper function to check if we can have a square of the given size prefix_sum = [[0] * (C + 1) for _ in range(R + 1)] # Creating prefix sum matrix for easier subgrid sum calculation for i in range(1, R + 1): for j in range(1, C + 1): prefix_sum[i][j] = int(grid[i - 1][j - 1] == \'1\') + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] # Checking every possible top-left corner of the square of size `size` for i in range(size, R + 1): for j in range(size, C + 1): num_ones = prefix_sum[i][j] - prefix_sum[i - size][j] - prefix_sum[i][j - size] + prefix_sum[i - size][j - size] if num_ones <= K: return True return False # Binary search for the maximum size of the square subgrid low, high = 1, min(R, C) result = 0 while low <= high: mid = (low + high) // 2 if can_form_square_of_size(mid): result = mid low = mid + 1 else: high = mid - 1 return result # Implementation for input/output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) K = int(data[2]) grid = data[3:] print(max_square_subgrid(R, C, K, grid))"},{"question":"A group of friends is organizing a relay race. Each runner has a specific speed and can run a specific distance before getting tired. Given the details of each runner, determine the maximum distance the team can cover if the runners run in an optimal sequence without breaking the relay rules. Input The input starts with an integer n (1 ≤ n ≤ 100000), the number of runners. Each of the next n lines contains two integers si (1 ≤ si ≤ 10000) and di (1 ≤ di ≤ 10000), representing the speed and the maximum distance that the ith runner can run respectively. Output Output a single integer representing the maximum distance the team can cover in the relay race. Examples Input 3 5 10 10 5 3 7 Output 22 Input 4 8 6 6 8 7 7 5 5 Output 26 Note In the first test case, the optimal sequence would involve having the first runner run their maximum distance, the second runner next, and the third runner run last. In the second test case, the optimal sequence might involve reordering the runners such that the maximum total distance is covered, considering each runner’s speed and distance capacity.","solution":"def max_distance_covered(n, runners): Returns the maximum distance the team can cover in the relay race. :param n: Number of runners. :param runners: List of tuples, where each tuple contains two integers `si` (speed) and `di` (maximum distance). :return: Maximum distance the team can cover. # Sort runners by their distance capacity in descending order runners.sort(key=lambda x: x[1], reverse=True) # Sum up the maximum distance each runner can run total_distance = sum(runner[1] for runner in runners) return total_distance"},{"question":"Tech Consortium is organizing a hackathon event. They\'ve assigned a number of tasks that need to be completed in a particular order due to dependency constraints. Each task is represented by a unique integer from 1 to n. To kickstart the event, they\'ve created an initial incomplete plan where some tasks have their dependencies explicitly listed. Your task is to determine a valid order to complete all tasks such that the dependencies are respected. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of tasks and the number of dependencies. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that task u must be completed before task v. Output Print one valid order to complete all tasks. If there are multiple valid orders, print any of them. If no valid order exists, print \\"NO SOLUTION\\". Examples Input 4 3 1 2 1 3 3 4 Output 1 3 4 2 Input 3 2 1 2 2 3 Output 1 2 3 Input 2 2 1 2 2 1 Output NO SOLUTION Note In the first example, one valid order is 1 3 4 2. Another valid order is 1 2 3 4. In the third example, there is a cycle in the dependencies, making it impossible to complete all tasks, so the output is \\"NO SOLUTION\\".","solution":"from collections import defaultdict, deque def find_task_order(n, m, dependencies): adj_list = defaultdict(list) indegree = defaultdict(int) # Initialize indegree for all tasks for i in range(1, n + 1): indegree[i] = 0 # Build the adjacency list and indegree counters for u, v in dependencies: adj_list[u].append(v) indegree[v] += 1 # Use a queue for Kahn\'s algorithm queue = deque() # Enqueue all tasks with no dependencies (indegree 0) for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) order = [] while queue: curr = queue.popleft() order.append(curr) # Reduce the indegree of adjacent nodes for neighbor in adj_list[curr]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If all tasks are processed, return the order; otherwise, return \\"NO SOLUTION\\" if len(order) == n: return order else: return \\"NO SOLUTION\\" # Example usage: # n, m = 4, 3 # dependencies = [(1, 2), (1, 3), (3, 4)] # print(find_task_order(n, m, dependencies)) # Output: [1 3 4 2] or [1 2 3 4]"},{"question":"Gul is an expert in solving mathematical problems. One day, her teacher gave her an interesting challenge: Given a positive integer n, determine whether it is possible to form the number using a combination of distinct prime numbers and the number 1, each raised to any positive integer power. The positive integer x can be expressed in such a combination if there exists some set of distinct prime numbers p1, p2, ..., pk and positive integers e1, e2, ..., ek such that: x = p1^e1 * p2^e2 * ... * pk^ek * 1^0 If it is possible to form the number using such a combination, print all prime numbers used in the combination in ascending order. Each prime number should be raised to the smallest power necessary for the combination to work. If multiple solutions exist, print the lexicographically smallest solution. Input Input contains a single positive integer n (2 ≤ n ≤ 10000). Output If it is not possible to form the number in the described way, print \\"Not Possible\\". Otherwise, print the combination of prime numbers and their respective powers used, separated by a multiplication sign, in ascending order of the prime numbers. Examples Input 60 Output 2^2 * 3^1 * 5^1 Input 31 Output Not Possible","solution":"from sympy import isprime, primerange def find_combination(n): Returns the combination of distinct prime numbers and their respective powers that results in the given number n. If it\'s not possible, returns \\"Not Possible\\". def prime_factors(n): factors = {} for prime in primerange(2, n + 1): while n % prime == 0: if prime in factors: factors[prime] += 1 else: factors[prime] = 1 n //= prime if n == 1: break return factors if isprime(n): return \\"Not Possible\\" factors = prime_factors(n) if len(factors) == 1 and list(factors.values())[0] == 1: return \\"Not Possible\\" result = \\" * \\".join(f\\"{prime}^{power}\\" for prime, power in sorted(factors.items())) return result"},{"question":"In an inventory management system, items are categorized and tracked by unique codes. A code is a sequence of lowercase latin letters and has an associated quantity. The system allows an administrator to perform the following operations: - Add new items with unique codes. - Update the quantity of existing items. - Query the inventory to determine the total quantity of items that match certain criteria. You are tasked with implementing this inventory management system. The implementation should support the following commands: 1. **add <code> <quantity>** - Add a new item with the given code and quantity to the inventory. It is guaranteed that the code will be unique and contain only lowercase latin letters. The quantity will be a positive integer. 2. **update <code> <quantity>** - Update the quantity of an existing item identified by code. The quantity will be an integer and can be positive (to increase the quantity) or negative (to decrease the quantity). It is guaranteed the specified code exists in the inventory and the quantity will not drop below zero. 3. **query <prefix>** - Query the inventory and return the total quantity of items whose codes start with the given prefix. Input The first line contains an integer n (1 ≤ n ≤ 1000) – the number of commands. The next n lines each contain one command as described above. All code strings have a length of no more than 50 characters. Output For each query command, output the total quantity of items matching the given prefix on a new line. Examples Input 7 add apple 10 add banana 5 add apricot 7 update apple 3 update banana -2 query ap query ba Output 20 3 Note In the example, the following steps occur: - Add \\"apple\\" with quantity 10. - Add \\"banana\\" with quantity 5. - Add \\"apricot\\" with quantity 7. - Update \\"apple\\" quantity by 3 (new quantity: 13). - Update \\"banana\\" quantity by -2 (new quantity: 3). - Query codes starting with \\"ap\\" results in \\"apple\\" (quantity 13) and \\"apricot\\" (quantity 7), total 20. - Query codes starting with \\"ba\\" results in \\"banana\\" (quantity 3).","solution":"class InventoryManagement: def __init__(self): self.inventory = {} def add(self, code, quantity): self.inventory[code] = quantity def update(self, code, quantity): if code in self.inventory: self.inventory[code] += quantity def query(self, prefix): total_quantity = 0 for code in self.inventory: if code.startswith(prefix): total_quantity += self.inventory[code] return total_quantity"},{"question":"Two neighboring countries, X and Y, are having a border agreement. Each country has a number of cities, and some of them are directly connected by roads that you can cross. The countries agreed that for every city in X, its connecting cities must either all belong to X or all belong to Y, and vice versa for the cities in Y. Given the number of cities in each country and the list of roads, determine if it\'s possible to partition the countries\' cities so that the agreement holds. Input The first line contains three integers n, m, and r — the number of cities in country X, the number of cities in country Y, and the number of roads. Next r lines define the roads. Each road is represented by two integers ui and vi (1 ≤ ui ≤ n; 1 ≤ vi ≤ m), meaning there\'s a road directly connecting a city ui in country X to a city vi in country Y. Output Print \\"YES\\" if it\'s possible to partition the cities according to the agreement. Otherwise, print \\"NO\\". Examples Input 4 4 3 1 3 2 4 4 2 Output YES Input 3 3 4 1 2 1 3 2 1 3 2 Output NO","solution":"def can_partition_cities(n, m, r, roads): from collections import defaultdict, deque # Adjacency list graph graph = defaultdict(list) # Build the graph for u, v in roads: graph[u].append(v) graph[v].append(u) # Visited array to ensure no repetition visited = [False] * (n + m + 2) # adjusting indexes, extra space not harm here color = [-1] * (n + m + 2) # -1 means not colored, 0 means first color, 1 means second color def bfs(node): queue = deque([node]) visited[node] = True color[node] = 0 # Start coloring the first node with color 0 while queue: current = queue.popleft() cur_color = color[current] # Get color of current node for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True color[neighbor] = 1 - cur_color # Alternate color between 0 and 1 queue.append(neighbor) elif color[neighbor] == cur_color: return False # If the neighbor has the same color, it\'s not bipartite return True # Loop through all nodes to check for disconnected parts of the graph for i in range(1, n + 1): if not visited[i]: # Only run BFS if the node has not been visited if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"You are given a tree with n nodes and n-1 edges. Each node is labeled from 1 to n, and all edges are undirected. The tree is rooted at node 1. Each node has a number of coins. You need to determine if it\'s possible to collect all the coins in one traversal starting from the root and ending at any node, considering the following conditions: - You can move from one node to any of its adjacent nodes. - You can only collect coins once from each node. The tree traversal starts from the root, and you can stop at any node. You must visit each node and collect the coins exactly once. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. - The second line contains n integers c_1, c_2, ..., c_n (0 ≤ c_i ≤ 1000) — the number of coins in each node. - Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n) — denoting an edge between node u and node v. Output For each test case, print \\"YES\\" if it is possible to collect all coins in the given conditions, otherwise print \\"NO\\". Example Input 3 3 1 2 3 1 2 1 3 5 2 0 1 10 5 1 2 1 3 2 4 3 5 4 4 4 6 6 1 2 2 3 2 4 Output YES NO YES Explanation In the first test case, starting from node 1, you can collect coins by visiting nodes 1 → 2 → 3 or 1 → 3 → 2. In the second test case, node 2 has 0 coins and stopping at a node prematurely will not allow collecting coins from all nodes. In the third test case, you can traverse the tree to collect all coins without stopping prematurely.","solution":"def can_collect_all_coins(t, test_cases): results = [] def is_possible(n, coins, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) queue = deque([1]) visited[1] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) for i in range(1, n + 1): if not visited[i] or coins[i - 1] <= 0: return False return True for case in test_cases: n = case[\'n\'] coins = case[\'coins\'] edges = case[\'edges\'] if is_possible(n, coins, edges): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company holds an annual sales competition where the performance of each sales representative is tracked. Each representative is assigned zero or more sales projects over the year. Each project has an associated revenue generated by that representative for that project. Given the list of sales projects and their revenues for each representative, calculate the total revenue generated by each representative. If a representative has no projects assigned, their total revenue will be zero. Constraints * The number of sales representatives (N) is between 1 and 1000. * The number of projects (M) is between 0 and 1000. * The revenue for each project is between 1 and 10000. * All values in input are integers. Input The first line contains an integer, N, the number of sales representatives. For the next N lines, each line starts with an integer, K, indicating the number of projects assigned to the representative, followed by K integers representing the revenue from each project. Output Print the total revenue generated by each representative, one per line in the order given. Examples Input 3 2 100 200 1 150 0 Output 300 150 0 Input 2 3 300 250 100 2 500 300 Output 650 800","solution":"def calculate_total_revenue(n, projects_data): Calculate the total revenue generated by each sales representative. :param n: int - Number of sales representatives :param projects_data: list of lists - Each inner list contains the number of projects followed by the revenue for each project. :return: list of int - Total revenue for each sales representative total_revenues = [] for projects in projects_data: k = projects[0] if k == 0: total_revenues.append(0) else: revenue = sum(projects[1:]) total_revenues.append(revenue) return total_revenues"},{"question":"You are given an array of integers where each element represents the height of a building. You need to determine the maximum number of consecutive buildings that have the same height. Input The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the buildings. Output Print the maximum number of consecutive buildings with the same height. Examples Input 6 3 3 4 4 4 2 Output 3 Input 5 1 2 3 4 5 Output 1 Input 10 5 5 5 5 5 5 5 5 5 5 Output 10 Note In the first sample, the heights of the buildings are 3, 3, 4, 4, 4, and 2. The longest sequence of buildings with the same height has a height of 4 and the sequence length is 3. In the second sample, no two buildings have the same height consecutively, so the maximum number of consecutive buildings with the same height is 1. In the third sample, all buildings have the same height so the sequence length is the total number of buildings, which is 10.","solution":"def max_consecutive_buildings(heights): Returns the maximum number of consecutive buildings with the same height. :param heights: List of integers representing the heights of buildings :return: Maximum number of consecutive buildings with the same height if not heights: return 0 max_count = 1 current_count = 1 for i in range(1, len(heights)): if heights[i] == heights[i - 1]: current_count += 1 max_count = max(max_count, current_count) else: current_count = 1 return max_count"},{"question":"Farmer John has recently started using drones to monitor his farm. Each drone operates in a one-dimensional path representing a straight road on his farm. However, due to some hardware limitations, each drone can only move within a specific segment of the road. The road can be represented as a number line starting at position 0. There are `n` drones in total, and each drone `i` can only move between positions `bi` and `ei` (inclusive). Farmer John wants to perform some surveillance by sending out `q` queries. Each query asks if a specific position `p` on the road is covered by at least one of the drones. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of drones and the number of queries, respectively. The next `n` lines each contain two integers `bi` and `ei` (0 ≤ bi ≤ ei ≤ 10^9) representing the range within which the `i-th` drone can operate. The next `q` lines each contain a single integer `p` (0 ≤ p ≤ 10^9) representing a query for a position on the road. Output For each query, print \\"YES\\" if the position `p` is covered by at least one drone, otherwise print \\"NO\\". Example Input: 3 4 1 4 2 3 5 6 2 4 5 7 Output: YES YES YES NO Explanation: - For the query at position 2, it is within the ranges [1, 4] and [2, 3], so it is covered. - For the query at position 4, it is within the range [1, 4], so it is covered. - For the query at position 5, it is within the range [5, 6], so it is covered. - For the query at position 7, no drone covers this position.","solution":"def check_positions(n, q, ranges, queries): results = [] for p in queries: covered = False for (bi, ei) in ranges: if bi <= p <= ei: covered = True break results.append(\\"YES\\" if covered else \\"NO\\") return results"},{"question":"Coding Assessment Question You are given a rectangular grid with dimensions `n x m`, where each cell either contains a 1 (indicating land) or a 0 (indicating water). Two cells are said to be connected if they share a common side. An island is a group of connected cells containing 1s and surrounded by water (or the grid boundary). Your task is to count the number of distinct islands in the grid. Each island must be a contiguous group of land cells. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) – the number of rows and columns of the grid. - The next `n` lines each contain `m` integers (`0` or `1`) – the grid itself. # Output - Output a single integer representing the number of distinct islands in the grid. # Example Input: ``` 4 5 1 1 0 0 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 ``` Output: ``` 3 ``` # Explanation: - The grid contains 3 islands. 1. The first island is the group of `1s` in the upper-left corner. 2. The second island is the group of `1s` near the top-right corner. 3. The third island is the group of `1s` at the bottom. Write a function to solve the problem. ```python def numIslands(grid: List[List[int]]) -> int: if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False]*m for _ in range(n)] def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 0 or visited[i][j]: return visited[i][j] = True dfs(i+1, j) dfs(i-1, j) dfs(i, j+1) dfs(i, j-1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: dfs(i, j) count += 1 return count # Example test grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0] ] print(numIslands(grid)) # Output: 3 ```","solution":"from typing import List def numIslands(grid: List[List[int]]) -> int: if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False]*m for _ in range(n)] def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 0 or visited[i][j]: return visited[i][j] = True dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: dfs(i, j) count += 1 return count"},{"question":"Joe\'s favorite hobby is solving logic puzzles, especially grid-based puzzles. He recently stumbled upon a new puzzle game where he needs to fill a grid with numbers based on a set of given conditions. The grid is an N x N matrix. Each cell in the grid can be filled with a number from 1 to N. The rules for filling the grid are as follows: 1. No two adjacent cells (horizontally or vertically) can contain the same number. 2. Each row must contain unique numbers from 1 to N. 3. Each column must contain unique numbers from 1 to N. Joe has already pre-filled some of the cells with numbers. Your task is to complete the grid such that all the conditions are satisfied or determine if it is impossible to do so. Constraints: * 1 ≤ N ≤ 9 * The number of pre-filled cells is non-negative and does not exceed N x N. Input The input is given from Standard Input in the following format: N a_{1,1} a_{1,2} ... a_{1,N} : a_{N,1} a_{N,2} ... a_{N,N} Each a_{i,j} will be either a number from 1 to N indicating a pre-filled cell, or 0 indicating an empty cell. Output If there is a solution, print the completed grid. If there are multiple solutions, print any of them. If no solution exists, print \\"NO SOLUTION\\". Examples Input 3 1 0 3 0 0 0 2 3 0 Output 1 2 3 3 1 2 2 3 1 Input 4 1 2 3 4 3 0 0 1 0 0 0 2 2 3 4 0 Output 1 2 3 4 3 4 2 1 4 1 1 2 2 3 4 1 Input 3 1 2 0 2 3 1 0 1 2 Output NO SOLUTION","solution":"def is_safe(grid, N, row, col, num): Check if it\'s safe to place num in grid[row][col] for x in range(N): if grid[row][x] == num or grid[x][col] == num: return False # Check for adjacent cells if row > 0 and grid[row - 1][col] == num: return False if row < N - 1 and grid[row + 1][col] == num: return False if col > 0 and grid[row][col - 1] == num: return False if col < N - 1 and grid[row][col + 1] == num: return False return True def solve_grid(grid, N): for row in range(N): for col in range(N): if grid[row][col] == 0: for num in range(1, N + 1): if is_safe(grid, N, row, col, num): grid[row][col] = num if solve_grid(grid, N): return True grid[row][col] = 0 return False return True def fill_puzzle(grid, N): if solve_grid(grid, N): for row in grid: print(\' \'.join(map(str, row))) return print(\\"NO SOLUTION\\") if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) grid = [] index = 1 for i in range(N): row = [] for j in range(N): row.append(int(data[index])) index += 1 grid.append(row) fill_puzzle(grid, N)"},{"question":"John is organizing a marathon and has n runners signed up, each of whom will run on one of m possible days. John\'s goal is to distribute the runners across the days such that the number of runners on any two days does not differ by more than 1, maintaining a balanced schedule. John has a list of n integers where each integer represents a runner and indicates the exact day they wish to run. If a runner\'s preferred day is not suitable for maintaining balance, John can reassign that runner to any of the m days. John wants to know how many reassigned runners it would take to achieve a balanced schedule. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10) — the number of runners and the number of days available for the marathon. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ m) — the preferred day of each runner. Output Output a single integer, the minimum number of runners that need to be reassigned to achieve a balanced schedule across all days. Examples Input 7 3 1 1 1 2 2 2 3 Output 1 Input 5 2 1 2 2 2 2 Output 1","solution":"def min_reassignments(n, m, days): Returns the minimum number of reassigned runners to achieve a balanced schedule. :param n: Number of runners :param m: Number of days :param days: List of integers representing preferred days of each runner :return: Minimum number of reassignments from collections import Counter count = Counter(days) ideal_per_day = n // m extra_needed = n % m reassignments = 0 for day in range(1, m + 1): if count[day] > ideal_per_day: extra_runners = count[day] - ideal_per_day - (1 if extra_needed > 0 else 0) if extra_needed > 0: extra_needed -= 1 if extra_runners > 0: reassignments += extra_runners return reassignments"},{"question":"Given a string of lowercase English letters, you need to determine the number of distinct substrings that can be formed which read the same forwards and backwards (palindromic substrings). Input The input consists of a single string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string. Output Output a single integer, the number of distinct palindromic substrings in the string. Examples Input abaaa Output 5 Input abacdfgdcaba Output 7 Explanation In the first example, the distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aa\\", \\"aba\\", \\"aaa\\". In the second example, the distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"c\\", \\"d\\", \\"fgdfg\\", \\"cdc\\". Note A distinct palindromic substring is a substring that is both palindromic and unique among all substrings of the input string. For example, in \\"abaaa\\", the substrings like \\"a\\" appear multiple times, but we count it only once as it is distinctive.","solution":"def count_distinct_palindromic_substrings(s): def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() n = len(s) for i in range(n): for j in range(i, n): sub = s[i:j+1] if is_palindrome(sub): palindromic_substrings.add(sub) return len(palindromic_substrings)"},{"question":"Carla is practicing her drawing skills by creating symmetric shapes using vertical lines of stars. Each shape consists of `N` lines of stars, where the number of stars in each line continuously increases up to a middle line and then symmetrically decreases. The middle line has the most stars, and the number of stars increases by one as you move from the top of the shape to the middle. Carla finds drawing symmetric shapes by hand tedious, and she wants to automate it using a program. Your task is to help her by writing a program that generates these symmetric shapes for given values of `N`. Input: The first line contains a positive integer `T`, the number of shapes Carla wants to draw. Each of the following `T` lines contains a single integer `N`, the number of lines in a single shape. The value of `N` will always be an odd integer between 1 and 1,000 (inclusive). Output: For each shape, output `N` lines where the `i-th` line contains stars as described above. Print the star lines for each shape consecutively, and a blank line should follow each shape to separate them in the output, including after the last shape. Constraints: 1 ≤ T ≤ 100 SAMPLE INPUT: 2 3 5 SAMPLE OUTPUT: * ** * * ** *** ** * Explanation: For N = 3: The shape has 3 lines: * ** * For N = 5: The shape has 5 lines: * ** *** ** *","solution":"def draw_symmetric_shapes(T, shapes): results = [] for N in shapes: shape = [] mid = (N // 2) + 1 for i in range(1, mid + 1): shape.append(\'*\' * i) for i in range(mid - 1, 0, -1): shape.append(\'*\' * i) results.append(\'n\'.join(shape)) return \'nn\'.join(results)"},{"question":"A scientist is conducting an experiment with a colony of bacteria that divides in a specific manner. Each bacterium divides into two every hour. However, due to the different conditions in various sections of the petri dish, some bacteria may be removed at each stage of division due to environmental factors. You are given the initial number `n` of bacteria and a list of `m` behavioral changes, each represented by a tuple (t, c). Each tuple indicates that at time `t` hours, `c` bacteria are removed from the petri dish. Your task is to determine the number of bacteria left in the petri dish after `h` hours, considering both the natural division and the removals at specific times. Input The first line contains three integers `n`, `m`, and `h` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100, 1 ≤ h ≤ 100). The next `m` lines each contain two integers `t` and `c` (0 ≤ t ≤ h, 1 ≤ c ≤ 1000). Output Print a single integer — the number of bacteria left in the petri dish after `h` hours. Examples Input 3 2 3 1 2 2 1 Output 16 Input 5 1 4 3 5 Output 75 Explanation: In the first example: - Initially, there are 3 bacteria. - After 1 hour, there will be 6 bacteria (3 * 2). 2 bacteria are removed, leaving 4. - After 2 hours, there will be 8 bacteria (4 * 2). 1 bacterium is removed, leaving 7. - After 3 hours, there will be 14 bacteria (7 * 2). In the second example: - Initially, there are 5 bacteria. - After 1 hour, there will be 10 bacteria (5 * 2). - After 2 hours, there will be 20 bacteria (10 * 2). - After 3 hours, there will be 40 bacteria (20 * 2). 5 bacteria are removed, leaving 35. - After 4 hours, there will be 70 bacteria (35 * 2).","solution":"def calculate_bacteria(n, m, h, removals): Calculate the number of bacteria left after h hours with given initial bacteria and removal events. Parameters: - n: Initial number of bacteria. - m: Number of removal events. - h: Number of hours. - removals: List of tuples with (t, c) where t is the hour and c is the number of bacteria removed. Returns: - The number of bacteria left after h hours. bacteria_count = n removals_dict = {t: c for t, c in removals} for hour in range(1, h + 1): bacteria_count *= 2 if hour in removals_dict: bacteria_count -= removals_dict[hour] return bacteria_count"},{"question":"You are working for a logistics company, and you need to optimize package deliveries. Given a list of delivery locations, each represented by a coordinate in a 2D plane, you need to determine the minimum length of the delivery route that visits each location exactly once and returns to the starting point. The problem is essentially finding the shortest possible route that starts at a given location, visits every other location exactly once, and returns to the starting location. Input The input consists of multiple datasets. Each dataset is given in the following format: n x1 y1 x2 y2 ... xn yn The first line contains a single integer, n (2 ≤ n ≤ 12), representing the number of delivery locations. The next n lines each contain two integers, xi and yi, representing the coordinates of each delivery location. Output For each dataset, output a single number representing the minimum length of the delivery route. The result should be rounded to two decimal places. Example Input 3 0 0 1 1 2 0 4 0 0 1 0 1 1 0 1 Output 4.83 4.00 Note In the first example, the shortest route visits all three points and returns back to the starting point, resulting in a total distance of approximately 4.83. In the second example, the shortest route visits all four points in a square configuration, resulting in a total distance of 4.00.","solution":"import itertools import math def calculate_distance(p1, p2): Calculate the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def total_distance(route): Calculate the total distance of the given route which starts and ends at the first location. distance = 0 for i in range(len(route) - 1): distance += calculate_distance(route[i], route[i + 1]) distance += calculate_distance(route[-1], route[0]) # returning to the starting point return distance def find_min_route(locations): Find the minimum route that visits all locations exactly once and returns to the start point. min_distance = float(\'inf\') for perm in itertools.permutations(locations): current_distance = total_distance(perm) if current_distance < min_distance: min_distance = current_distance return round(min_distance, 2)"},{"question":"You are given an empty grid of size n x n. Initially, the grid contains only 0s. You are tasked with performing a series of operations to fill the grid according to specific rules. The operations are given in pairs (r1, r2, value), which means filling every cell in row r1 and row r2 with the given value. After performing all the operations, you need to determine the sum of values in the entire grid. Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100000), where n is the size of the grid and m is the number of operations. Each of the next m lines contains three integers r1, r2, value (1 ≤ r1, r2 ≤ n, 0 ≤ value ≤ 100000), describing an operation. Output Output the sum of the values in the grid after all operations have been performed. Example Input 3 3 1 2 100 2 3 50 1 3 200 Output 2100 Note For the provided example: - After the first operation, the grid looks like this: 100 100 0 100 100 0 0 0 0 - After the second operation, the grid looks like this: 100 100 0 100 150 50 0 50 50 - After the third operation, the grid looks like this: 300 300 200 300 350 250 200 250 200 Summing all values in the grid gives 2100.","solution":"def sum_of_grid_values(n, m, operations): grid = [[0]*n for _ in range(n)] for r1, r2, value in operations: for i in range(n): grid[r1-1][i] += value grid[r2-1][i] += value total_sum = sum(sum(row) for row in grid) return total_sum"},{"question":"# Print the Ramanujan Number Ramanujan Number is known as the smallest number that can be expressed as sum of two cubes in two different ways. Mathematically, this means 1729 is the smallest number that can be represented as: [1729 = 1^3 + 12^3 = 9^3 + 10^3] Given an integer N, write a program to determine whether or not it can be expressed as the sum of two cubes in exactly two different ways. If it can be, print \\"Yes\\" and the four numbers involved; otherwise, print \\"No\\". # Input The first line of input contains an integer T, the number of test cases. Each of the next T lines contains an integer N. # Output For each test case, if the number can be expressed as the sum of two cubes in two different ways, print \\"Yes\\" followed by the four integers a, b, c, and d such that: [N = a^3 + b^3 = c^3 + d^3] and (a, b, c, d) are distinct. If the number cannot be expressed in this way, output \\"No\\". # Constraints * 1 ≤ T ≤ 10 * 1 ≤ N ≤ 10^6 # Sample Input ``` 2 1729 4104 ``` # Sample Output ``` Yes 1 12 9 10 Yes 2 16 9 15 ```","solution":"def is_ramanujan_number(N): Check if the number N can be expressed as the sum of two cubes in exactly two different ways. from collections import defaultdict cubes = defaultdict(list) for i in range(1, int(pow(N, 1/3)) + 1): for j in range(i, int(pow(N, 1/3)) + 1): sum_of_cubes = i**3 + j**3 if sum_of_cubes > N: break cubes[sum_of_cubes].append((i, j)) if N in cubes and len(cubes[N]) > 1: a, b = cubes[N][0] c, d = cubes[N][1] return f\\"Yes {a} {b} {c} {d}\\" else: return \\"No\\" def process_test_cases(test_cases): results = [] for N in test_cases: results.append(is_ramanujan_number(N)) return results"},{"question":"A restaurant chain is planning to offer a unique discount program to increase customer retention. Each day, the restaurant chain can issue a discount coupon for every meal purchased. Customers can collect these coupons and redeem them for a free meal on any subsequent visit. The restaurant chain wants to optimize the issuance of coupons so that they can minimize the number of meals that need to be paid for. The restaurant has `n` customers, and the `i-th` customer plans to visit the restaurant `v_i` times. The rules for issuing and redeeming coupons are as follows: 1. On the first visit, a customer pays for the meal and receives a discount coupon. 2. On subsequent visits, if the customer has a coupon, they can redeem it for a free meal. After redeeming a coupon for a free meal, they do not receive any new coupons. 3. When a customer pays for a meal, they always receive a discount coupon that can be redeemed on their next visit. Given the number of times each customer plans to visit the restaurant, determine the minimum number of meals that need to be paid for by all customers combined. # Input - The first line of the input contains an integer `n`, the number of customers. - The second line contains `n` space-separated integers `v_1, v_2, ..., v_n`, where `v_i` denotes the number of times the `i-th` customer plans to visit the restaurant. # Output - Output a single integer representing the minimum number of meals that need to be paid for. # Constraints - ( 1 leq n leq 10^5 ) - ( 1 leq v_i leq 10^4 ) # Example Input ``` 4 2 3 1 4 ``` Output ``` 7 ``` # Explanation - The first customer visits twice: pays for the first meal, uses a coupon for the second (1 payment). - The second customer visits three times: pays for the first meal, uses a coupon for the second, pays for the third meal (2 payments). - The third customer visits once: pays for the meal (1 payment). - The fourth customer visits four times: pays for the first meal, uses a coupon for the second, pays for the third meal, uses a coupon for the fourth (2 payments). Total payments needed: 1 + 2 + 1 + 2 = 6","solution":"def minimum_paid_meals(n, visits): Returns the minimum number of meals to be paid for by all customers combined. Parameters: n (int): The number of customers. visits (list of int): The number of times each customer plans to visit the restaurant. Returns: int: The minimum number of meals that need to be paid for. total_paid_meals = 0 for visit in visits: paid_meals = (visit + 1) // 2 total_paid_meals += paid_meals return total_paid_meals"},{"question":"A treasure hunter is on an MxN grid. She starts at the top-left corner of the grid and wants to reach the bottom-right corner. Each cell of the grid contains a value that represents the maximum number of steps she can move right or down from that cell in a single move. The treasure hunter aims to reach the bottom-right corner in the minimum number of moves. Write a function to determine the minimum number of moves required to reach the bottom-right corner of the grid. If it is not possible to reach the destination, return -1. Input - The first line contains two integers M and N (1 ≤ M, N ≤ 100), representing the number of rows and columns in the grid, respectively. - Each of the following M lines contains N integers separated by space, where the j-th integer in the i-th line is the value of cell (i, j) (0 ≤ grid[i][j] ≤ 100). Output - A single integer representing the minimum number of moves to reach the bottom-right corner, or -1 if it is impossible to reach the destination. Examples Input 3 3 2 1 1 1 1 1 1 1 1 Output 3 Input 3 3 1 1 1 1 1 1 1 1 1 Output 4 Input 2 2 1 0 1 1 Output 2 Input 3 3 2 0 0 0 0 0 0 0 1 Output -1 Note For the first example, one possible path is: - (0,0) -> (0,2) -> (1,2) -> (2,2) For the second example, one possible path is: - (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) For the third example, the cells (0,1) and (1,0) both have grid values of 0, hence forcing a direct downward move and then to the right. In the fourth example, it is not possible to reach the bottom-right corner due to grid constraints.","solution":"from collections import deque def min_moves_to_reach_end(M, N, grid): # Directions we can move: down and right directions = [(1, 0), (0, 1)] visited = [[False] * N for _ in range(M)] queue = deque([(0, 0, 0)]) # (current_row, current_col, current_distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == M-1 and c == N-1: return dist steps = grid[r][c] for dr, dc in directions: for i in range(1, steps+1): nr, nc = r + dr * i, c + dc * i if 0 <= nr < M and 0 <= nc < N and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, dist+1)) return -1"},{"question":"You are given a matrix with dimensions `n x m` consisting of positive integers. You should find the largest possible value of the smallest element in a submatrix of size `k x k` within the given matrix. Input The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n, m)). The next `n` lines each contain `m` integers representing the elements of the matrix (1 ≤ matrix element ≤ 10^9). Output Print a single integer — the largest possible value of the smallest element in any `k x k` submatrix. Example Input 4 4 2 1 7 3 4 2 6 5 9 4 5 8 6 1 1 2 3 Output 5 Note In this example, one possible `2 x 2` submatrix with the smallest element being `5` is: ``` 6 5 5 8 ``` Among the possible submatrices, the solution `[6, 5, 5, 8]` contains the smallest value `5` and is the largest across other valid submatrices of size `2 x 2`.","solution":"def largest_min_in_submatrix(n, m, k, matrix): Finds the largest possible value of the smallest element in any k x k submatrix. Args: n: Number of rows in the matrix. m: Number of columns in the matrix. k: Size of the k x k submatrix. matrix: The n x m matrix itself as a list of lists. Returns: Integer representing the largest possible value of the smallest element in any k x k submatrix. # Function to find the smallest element in a k x k submatrix starting at (x,y) def get_min_in_submatrix(x, y): return min(matrix[i][j] for i in range(x, x + k) for j in range(y, y + k)) max_min_value = 0 for i in range(n - k + 1): for j in range(m - k + 1): current_min = get_min_in_submatrix(i, j) max_min_value = max(max_min_value, current_min) return max_min_value"},{"question":"A gardener is trying to water all the plants in his rectangular garden. The garden is represented by a 2D grid of size `m x n`, where each cell contains a plant. The gardener starts from the cell (0,0) and needs to water all plants. He can move to adjacent cells only in 4 possible directions: up, down, left, and right. The gardener\'s watering can contains enough water for exactly `k` moves (a move is transitioning from the current cell to any of the 4 adjacent cells). Knowing this, the gardener wants to maximize the number of plants he can water. Write a function `max_plants_watered(m, n, k)` that returns the maximum number of plants the gardener can water starting from (0, 0) with `k` moves. # Input - `m` and `n` (1 ≤ m, n ≤ 100) — the dimensions of the garden grid. - `k` (0 ≤ k ≤ 10,000) — the number of allowed moves. # Output - Return the maximum number of distinct plants the gardener can water. # Example ```python max_plants_watered(2, 2, 3) ``` **Output** ``` 4 ``` ```python max_plants_watered(3, 3, 6) ``` **Output** ``` 7 ```","solution":"def max_plants_watered(m, n, k): Returns the maximum number of distinct plants the gardener can water. # If the number of moves is greater than or equal to cells in the grid if k >= m * n: return m * n def dfs(x, y, k, visited): # Base cases if x < 0 or y < 0 or x >= m or y >= n or k < 0 or (x, y) in visited: return 0 visited.add((x, y)) max_plants = 1 # Explore all 4 directions up = dfs(x - 1, y, k - 1, visited.copy()) down = dfs(x + 1, y, k - 1, visited.copy()) left = dfs(x, y - 1, k - 1, visited.copy()) right = dfs(x, y + 1, k - 1, visited.copy()) max_plants += max(up, down, left, right) return max_plants return dfs(0, 0, k, set())"},{"question":"Calculate Maximum Consecutive Subarray Sum # Problem Statement Given an array of integers, your task is to write a function that computes the maximum sum of a contiguous subarray. This includes finding the subarray (containing at least one number) which has the largest sum and returning that sum. # Input Format - The first line contains the integer `N`, the length of the array. - The next line contains `N` space-separated integers representing the elements of the array. # Output Format - Output a single integer, the maximum sum of a contiguous subarray. # Constraints - 1 ≤ N ≤ 10^6 - -10^4 ≤ array[i] ≤ 10^4 for 0 ≤ i < N # Example Input ``` 8 -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` # Explanation The contiguous subarray that has the largest sum is `[4, -1, 2, 1]`, which has a sum of `6`. # Function Signature ```python def max_subarray_sum(nums: List[int]) -> int: pass ``` # Notes - Consider using Kadane\'s algorithm to solve this problem efficiently with a time complexity of O(N).","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: Function to compute the maximum sum of a contiguous subarray using Kadane\'s algorithm. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function called `optimal_egg_drop` that determines the minimum number of attempts needed to find the highest floor from which an egg can be dropped without breaking, given a certain number of floors and eggs. This is a classic problem in optimization. # Problem Description You have a building with `N` floors and `K` eggs. You need to determine the highest floor from which you can drop an egg without it breaking. The objective is to find this floor with the minimum number of egg drops. An egg that survives a drop can be used again. An egg that breaks cannot be used again. If an egg breaks when dropped from floor `x`, then it will also break from any floor above `x`. If an egg survives a drop from floor `x`, then it will also survive from any floor below `x`. # Input - The first input line contains two integers `N` and `K` separated by a space where: - `N` (1 ≤ N ≤ 1000) is the number of floors. - `K` (1 ≤ K ≤ 100) is the number of eggs. # Output - Output a single integer representing the minimum number of attempts needed to find the critical floor in the worst case. # Example Input ``` 100 2 ``` Output ``` 14 ``` # Explanation Using dynamic programming or binary search techniques can help solve this problem efficiently. The goal is to minimize the number of attempts to find the critical floor, ensuring the solution\'s worst-case number of attempts is the smallest possible.","solution":"def optimal_egg_drop(N, K): Determines the minimum number of attempts needed to find the highest floor from which an egg can be dropped without breaking. Args: N (int): Number of floors K (int): Number of eggs Returns: int: Minimum number of attempts needed # Create a table where dp[i][j] represents minimum number of attempts # needed for i floors using j eggs. dp = [[0 for x in range(K + 1)] for x in range(N + 1)] # We have one attempt with one egg to test each floor for i in range(1, N + 1): dp[i][1] = i # With one floor, only one attempt is needed regardless of number of eggs for j in range(1, K + 1): dp[1][j] = 1 # Fill the rest of the table using optimal substructure property for j in range(2, K + 1): for i in range(2, N + 1): dp[i][j] = float(\'inf\') for x in range(1, i + 1): res = 1 + max(dp[x - 1][j - 1], dp[i - x][j]) if res < dp[i][j]: dp[i][j] = res return dp[N][K]"},{"question":"Riya is a software developer working on an optimization project. She has a list of n unique integers representing distinct tasks, and each task has a specific processing time. Riya wants to maximize the time interval between the first and last task in her list when sorted in non-descending order. However, she can reverse exactly one contiguous subsegment of the list to achieve this objective. Your task is to help Riya find and reverse the optimal subsegment to maximize the interval between the first and last task in the sorted list, and then print the maximum time interval. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of tasks. The second line contains n distinct integers ai (1 ≤ ai ≤ 1000) — the processing times of the tasks. Output Print a single integer representing the maximum interval between the first and last task in the sorted list after reversing exactly one contiguous subsegment. Example Input 5 3 5 4 2 1 Output 4 Note Initial list: [3, 5, 4, 2, 1] We can reverse the subsegment [5, 4, 2, 1] to get [3, 1, 2, 4, 5]. Then sorted list is [1, 2, 3, 4, 5], and the interval between the first (1) and the last (5) task is 5 - 1 = 4. Thus, the output is 4.","solution":"def maximize_time_interval(n, tasks): Returns the maximum interval between the first and last task in the sorted list after reversing exactly one contiguous subsegment. n: int, the number of tasks. tasks: list of int, distinct integers representing processing times of the tasks. if n == 1: return 0 max_interval = 0 for i in range(n): for j in range(i, n): reversed_tasks = tasks[:i] + tasks[i:j+1][::-1] + tasks[j+1:] max_interval = max(max_interval, max(reversed_tasks) - min(reversed_tasks)) return max_interval"},{"question":"At an enchanted forest, there are magical trees on which mystical fruits grow. Each tree has a certain number of branches, and each branch bears a specific number of fruits. You have a magical basket that can collect a maximum of M fruits at a time. Given the number of trees (T), the number of branches (B) on each tree, and the number of fruits (F) on each branch, find out how many times you will be able to fill your basket to its full capacity completely. If there are any remaining fruits after filling the basket completely, they should not be counted. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains three integers representing the number of trees (T_i), the number of branches per tree (B_i), and the number of fruits per branch (F_i), respectively, followed by the number M, the basket capacity. Output: For each test case, output the number of times the basket will be filled to its full capacity completely. Example: Input: 2 3 5 10 50 4 6 15 100 Output: 3 3","solution":"def count_full_baskets(T, test_cases): results = [] for i in range(T): T_i, B_i, F_i, M = test_cases[i] total_fruits = T_i * B_i * F_i full_baskets = total_fruits // M results.append(full_baskets) return results"},{"question":"Solve the firm decision. Input: First line contains a single integer denoting number of test cases (T). Next T lines have one test case per line. Each test case is a string containing lowercase alphabets and/or digits. Output: For each test case, print the first recurring character with its position in the string. If there is no such character, print -1. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 0 ≤ S[i] ≤ 9 or a ≤ S[i] ≤ z Problem Setter : John Doe SAMPLE INPUT 4 abca1 12345 hello 112233 SAMPLE OUTPUT a 4 -1 l 4 1 2","solution":"def first_recurring_with_position(test_cases): results = [] for case in test_cases: seen_chars = {} recurring_char_found = False for i, char in enumerate(case): if char in seen_chars: results.append(f\\"{char} {i + 1}\\") recurring_char_found = True break else: seen_chars[char] = i if not recurring_char_found: results.append(\\"-1\\") return results # Function to read input and call the main logic function def process_input(T, test_strings): return first_recurring_with_position(test_strings)"},{"question":"Given an M x N grid where each cell contains a value that represents the height of a terrain. A cell is considered a \\"peak\\" if its value is greater than the values of its adjacent cells (up, down, left, right). We want to find the total number of peaks in the grid. Input: The first line contains two integers M and N denoting the number of rows and columns in the grid, respectively. This is followed by M lines where each line contains N space-separated integers representing the heights of the terrain. Output: Print the total number of peaks in the grid. Constraints: 1 ≤ M, N ≤ 1000 1 ≤ Terrain heights ≤ 10000 SAMPLE INPUT 3 3 1 2 1 4 3 4 1 5 1 SAMPLE OUTPUT 3 Explanation: There are three peaks in the grid: 2 (center of the top row), 4 (center and corners of the middle row), and 5 (center of the bottom row). We consider only the up, down, left, right neighbors, so even though there are higher values in the diagonal, they do not affect the peak determination.","solution":"def count_peaks(grid): M = len(grid) N = len(grid[0]) peaks = 0 def is_peak(i, j): current = grid[i][j] # Up if i > 0 and grid[i - 1][j] >= current: return False # Down if i < M - 1 and grid[i + 1][j] >= current: return False # Left if j > 0 and grid[i][j - 1] >= current: return False # Right if j < N - 1 and grid[i][j + 1] >= current: return False return True for i in range(M): for j in range(N): if is_peak(i, j): peaks += 1 return peaks"},{"question":"Given a list of integers, you are to find the length of the longest consecutive elements sequence. The consecutive sequence must be formed by rearranging the given integers and each element in the sequence must follow the previous element by exactly one. The goal is to determine the length of this longest consecutive sequence. # Input The input consists of a single line containing integers separated by spaces. # Output Print a single integer, the length of the longest consecutive sequence. # Examples Input ``` 100 4 200 1 3 2 ``` Output ``` 4 ``` Input ``` 9 1 4 7 3 -1 0 5 8 -1 6 ``` Output ``` 7 ``` # Note In the first example, the longest consecutive sequence is [1, 2, 3, 4]. In the second example, the longest consecutive sequence is [-1, 0, 1, 2, 3, 4, 5]. # Approach 1. Read the input list of integers. 2. Use a set to store the integers for O(1) average-time complexity checks. 3. Iterate through each number, and for each number, if it could be the start of a sequence (i.e., one less than the number isn\'t in the set), count the length of the sequence starting from that number. 4. Track the maximum length of such sequences and print it.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # only try to build sequences from numbers that are not following up to another number if num - 1 not in nums_set: current_num = num current_streak = 1 # count the length of the sequence while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak # Example usage: nums = [100, 4, 200, 1, 3, 2] print(longest_consecutive_sequence(nums)) # Output: 4"},{"question":"Polycarpus has an intricate electronic device with a central circuit board that contains 10^9 contact points, numbered from 1 to 10^9. There are n switches on the device, each connecting a pair of distinct contact points. Each switch can be either on or off. When a switch is in the \\"on\\" position, it closes the circuit between the two contact points it connects, allowing electricity to flow. In order to ensure proper functioning, it is critical that all contact points on the board can receive power when the switches are turned on. Polycarpus needs your help to determine if, given the arrangement of switches, every contact point on the board can be powered when the switches are on. A contact point A can receive power from contact point B if: * there is a direct switch between A and B. * or there is a sequence of switches such that electricity can flow from A to B through intermediate contact points. Write a program that determines whether every contact point on the circuit board can receive power starting from any active contact point by identifying the connected components formed by the switches. Input The input contains multiple test cases. The first input line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. Each of the next t blocks describes a test case. The first line of a test case contains an integer n (1 ≤ n ≤ 10^5) — the number of switches. The following n lines describe the switches, each line containing two space-separated integers x_i, y_i (1 ≤ x_i, y_i ≤ 10^9, x_i ≠ y_i) — contact points connected by the corresponding switch. No two switches connect the same pair of contact points. Output For each test case, print \\"YES\\" if every contact point can receive power from any given contact point, \\"NO\\" otherwise. Example Input 2 4 1 2 2 3 3 4 4 5 3 8 9 9 10 10 11 Output YES NO","solution":"def can_all_receive_power(t, test_cases): def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 results = [] for n, switches in test_cases: if n == 0: results.append(\\"NO\\") continue parent = {} rank = {} for x, y in switches: if x not in parent: parent[x] = x rank[x] = 0 if y not in parent: parent[y] = y rank[y] = 0 union(parent, rank, x, y) roots = set(find(parent, node) for node in parent) if len(roots) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Design and implement a function that simulates a warehouse management system (WMS). Your task is to manage the inventory in the warehouse and process a series of operations on the inventory. Implement the following operations: 1. **Stock**: Increase the quantity of a specific item in the inventory. 2. **Sell**: Decrease the quantity of a specific item in the inventory. 3. **Check**: Return the current quantity of a specific item in the inventory. The input will consist of a series of operations, and the output should provide the results of each \\"Check\\" operation. # Input format - The first line contains an integer `n`, the number of operations (1 ≤ `n` ≤ 10000). - Each of the next `n` lines contains an operation: - The `Stock` operation is represented as \\"STOCK item quantity\\". - The `Sell` operation is represented as \\"SELL item quantity\\". - The `Check` operation is represented as \\"CHECK item\\". # Output format - For each \\"Check\\" operation, output the current quantity of the specified item in the inventory, one per line. # Example Input ``` 6 STOCK apple 50 STOCK banana 30 SELL apple 10 CHECK apple CHECK banana SELL banana 5 CHECK banana ``` Output ``` 40 30 25 ``` # Note - An item\'s quantity will never go negative due to a \\"Sell\\" operation. - The item names are case-sensitive and consist of lowercase English letters. Your function should read the input, process the operations, and print the results of \\"Check\\" operations. **Function signature:** ```python def manage_warehouse(n, operations): pass ```","solution":"def manage_warehouse(n, operations): inventory = {} results = [] for operation in operations: parts = operation.split() action = parts[0] item = parts[1] if action == \\"STOCK\\": quantity = int(parts[2]) if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif action == \\"SELL\\": quantity = int(parts[2]) if item in inventory: inventory[item] -= quantity if inventory[item] < 0: # Sanity check, although problem guarantees non-negative quantities. inventory[item] = 0 elif action == \\"CHECK\\": if item in inventory: results.append(inventory[item]) else: results.append(0) return results"},{"question":"Olivia is planning a party and wants to distribute sweets to the children in such a way that no two consecutive children receive the same type of sweet. She has n children and m different types of sweets. Each type of sweet is available in an unlimited amount. She needs your help to determine if it is possible to distribute the sweets to the children according to the above condition. Input The first line contains two integers n and m (1 ≤ n ≤ 10000, 1 ≤ m ≤ 1000) — the number of children and the number of different types of sweets, respectively. Output Print \\"YES\\" (without quotes) if it is possible to distribute the sweets such that no two consecutive children receive the same type of sweet, otherwise print \\"NO\\" (without quotes). You can choose the case (lower or upper) for each letter arbitrary. Examples Input 3 2 Output YES Input 4 1 Output NO Note In the first example, Olivia can distribute the sweets as follows: - Child 1 gets sweet type 1 - Child 2 gets sweet type 2 - Child 3 gets sweet type 1 In the second example, it is impossible to distribute the sweets such that no two consecutive children receive the same type of sweet since there is only one type of sweet available.","solution":"def can_distribute_sweets(n, m): Determines if it is possible to distribute sweets to n children such that no two consecutive children receive the same type of sweet. Parameters: n (int): The number of children. m (int): The number of different types of sweets. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. if m == 1 and n > 1: return \\"NO\\" return \\"YES\\""},{"question":"Given a sequence of integers representing temperatures recorded continuously at one-minute intervals, we need to identify the longest continuously increasing subsequence. An increasing subsequence is defined as one in which each element is greater than the one preceding it. Your task is to write a program that reads the temperatures and calculates the length of the longest continuously increasing subsequence. Input & Output: The first line of input contains an integer N, denoting the number of temperature measurements. The second line contains N space-separated integers representing the temperature measurements. Output a single integer, which represents the length of the longest continuously increasing subsequence. Constraints 1 ≤ N ≤ 10^6 -10^5 ≤ Temperature measurements ≤ 10^5 SAMPLE INPUT 10 1 2 2 3 4 1 2 3 4 5 SAMPLE OUTPUT 5 Explanation The given sequence of temperatures is [1, 2, 2, 3, 4, 1, 2, 3, 4, 5]. The longest continually increasing subsequence is [1, 2, 3, 4, 5], with a length of 5.","solution":"def longest_increasing_subsequence_length(temperatures): Given a sequence of integer temperatures recorded at one-minute intervals, returns the length of the longest continuously increasing subsequence. if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Create a new text-based game inspired by the \\"Tic-Tac-Toe\\" game, but with different rules and a unique twist. For this game, the board is a 5x5 grid, and it will be called \\"Five-O\\". Here are the rules: - There are two players, Player X and Player O. - The players take turns to place their mark (X or O) in an empty cell of the 5x5 grid. - The objective is to form a line of five of their own marks either horizontally, vertically, or diagonally. - If a player manages to form a line of exactly five marks, they win the game immediately. - If the board is filled completely without any player forming such a line, the game is considered a draw. Implement a program that facilitates playing this game. The program should allow two human players to play against each other. The program must be able to: 1. Display the current state of the board. 2. Prompt the players for their moves. 3. Check if the current move wins the game. 4. Handle invalid moves (e.g., a move to a non-empty cell). 5. Announce the winner or declare a draw if the game ends. The input format for each move should be: - Two integers `r` and `c` representing the row and column (0-indexed) of the cell where the player wants to place their mark. The program should end when a player wins or when the board is full. Example of a game play: ``` Initial Board: - - - - - - - - - - - - - - - - - - - - - - - - - Player X move: 0 0 Board: X - - - - - - - - - - - - - - - - - - - - - - - - Player O move: 1 1 Board: X - - - - - O - - - - - - - - - - - - - - - - - - Player X move: 0 1 Board: X X - - - - O - - - - - - - - - - - - - - - - - - ... (Player X places the fifth mark horizontally on row 0) Player X move: 0 4 Board: X X X X X - O - - - - - - - - - - - - - - - - - - Player X wins! ```","solution":"def display_board(board): for row in board: print(\\" \\".join(row)) print() def is_winner(board, player): for r in range(5): for c in range(5): if c <= 0 and all(board[r][c+i] == player for i in range(5)): return True if r <= 0 and all(board[r+i][c] == player for i in range(5)): return True if r <= 0 and c <= 0 and all(board[r+i][c+i] == player for i in range(5)): return True if r >= 4 and c <= 0 and all(board[r-i][c+i] == player for i in range(5)): return True return False def is_draw(board): return all(board[r][c] != \'-\' for r in range(5) for c in range(5)) def make_move(board, r, c, player): if board[r][c] != \'-\': return False board[r][c] = player return True def five_o_game(): board = [[\'-\' for _ in range(5)] for _ in range(5)] players = [\'X\', \'O\'] current_player = 0 while True: display_board(board) move = input(f\\"Player {players[current_player]}, enter your move (row and column): \\").split() r, c = int(move[0]), int(move[1]) if make_move(board, r, c, players[current_player]): if is_winner(board, players[current_player]): display_board(board) print(f\\"Player {players[current_player]} wins!\\") break elif is_draw(board): display_board(board) print(\\"The game is a draw!\\") break current_player = 1 - current_player else: print(\\"Invalid move! Cell is already occupied. Try again.\\") if __name__ == \\"__main__\\": five_o_game()"},{"question":"You are tasked with creating a program that calculates the number of unique anagrams that can be formed from a given string. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, the strings \\"abc\\" and \\"bca\\" are anagrams of each other, but \\"abc\\" and \\"abcd\\" are not anagrams. Create a program that takes a string as input and outputs the number of unique anagrams that can be formed from the given string. Assume that the input string contains only lowercase English letters and the maximum length of the string is 10. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line with a single character \'*\'. Each dataset consists of a single string. Output For each dataset, output the count of unique anagrams that can be formed from the given string. Example Input abc aabb * Output 6 6","solution":"from math import factorial from collections import Counter def count_unique_anagrams(s): Returns the count of unique anagrams that can be formed from the string s. # Calculate the factorial of the length of the string n_fact = factorial(len(s)) # Calculate the product of the factorials of the frequency counts of each character freq_counts = Counter(s) denom = 1 for count in freq_counts.values(): denom *= factorial(count) # The result is n_fact divided by denom return n_fact // denom def process_input(input_lines): results = [] for line in input_lines: if line == \'*\': break results.append(count_unique_anagrams(line)) return results"},{"question":"Statement: Write a code to find the longest contiguous subarray in an array A of integers, which has the largest sum. Input: An array A of integers and its length n. Output: The subarray with the largest sum. If there are multiple subarrays with the same largest sum, return any one of them. Constraints: - 1 ≤ n ≤ 10^5 - -10^5 ≤ A[i] ≤ 10^5 SAMPLE INPUT A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] n = 9 SAMPLE OUTPUT [4, -1, 2, 1] Explanation In the above case, input array is [-2, 1, -3, 4, -1, 2, 1, -5, 4] which has a length of 9. The contiguous subarray with the largest sum is [4, -1, 2, 1] with a sum of 6.","solution":"def longest_largest_sum_subarray(A, n): Returns the contiguous subarray with the largest sum. max_sum = -float(\'inf\') current_sum = 0 start = end = s = 0 for i in range(n): current_sum += A[i] if max_sum < current_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return A[start:end+1] # Sample usage A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] n = 9 print(longest_largest_sum_subarray(A, n)) # Output: [4, -1, 2, 1]"},{"question":"You are given two rectangles on a Cartesian coordinate plane. Each rectangle is aligned with the coordinate axes and defined by its bottom-left corner and top-right corner coordinates. Your task is to determine the minimum Euclidean distance between any two points such that one point lies on the perimeter of the first rectangle and the other point lies on the perimeter of the second rectangle. The perimeter of a rectangle includes all four sides. The minimum Euclidean distance between two rectangles is zero if they overlap or touch each other. Input The first line contains four integers x1, y1, x2, y2 representing the bottom-left corner (x1, y1) and the top-right corner (x2, y2) of the first rectangle (where x1 < x2 and y1 < y2). The second line contains four integers x3, y3, x4, y4 representing the bottom-left corner (x3, y3) and the top-right corner (x4, y4) of the second rectangle (where x3 < x4 and y3 < y4). Output Print a single number — the minimum Euclidean distance between any point on the perimeter of the first rectangle and any point on the perimeter of the second rectangle. Your answer will be considered correct if its absolute or relative error does not exceed 10^-6. Examples Input 0 0 2 2 3 3 5 5 Output 1.414213 Input 0 0 2 2 1 1 3 3 Output 0","solution":"import math def min_distance_between_rectangles(rect1, rect2): x1, y1, x2, y2 = rect1 x3, y3, x4, y4 = rect2 # Check if rectangles touch or overlap if not (x2 < x3 or x4 < x1 or y2 < y3 or y4 < y1): return 0.0 # Calculate horizontal and vertical distances dx = max(0, x3 - x2, x1 - x4) dy = max(0, y3 - y2, y1 - y4) return math.sqrt(dx * dx + dy * dy)"},{"question":"Mario is programming a robot to navigate through a grid with obstacles. The grid has dimensions `m x n`, and some cells are blocked by obstacles that the robot cannot pass through. The robot starts at the top-left corner (0, 0) and wants to reach the bottom-right corner (m-1, n-1). It can only move right or down from any cell. Mario wants to know the number of unique paths the robot can take to reach its destination without hitting any obstacles. Given the grid with obstacles, help Mario determine the number of unique paths the robot can take. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the next m lines contains n integers (either 0 or 1), where 0 represents an empty cell and 1 represents an obstacle. Output Output a single integer, the number of unique paths the robot can take to reach the destination. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 0 0 0 0 0 0 0 0 Output 6 Input 3 3 0 1 0 0 0 0 0 0 0 Output 3 Note In the first example, the robot has two unique paths to reach the destination: - Right -> Down -> Down -> Right - Down -> Down -> Right -> Right In the second example, the robot has six unique paths to reach the destination. In the third example, the robot has three unique paths to reach the destination.","solution":"def unique_paths_with_obstacles(m, n, grid): Returns the number of unique paths the robot can take to reach the destination without hitting any obstacles. # Create a 2D DP array with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the starting position if grid[0][0] == 1: return 0 # If the starting cell has an obstacle, return 0 dp[0][0] = 1 # Fill the first row for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j - 1] # Fill the first column for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i - 1][0] # Compute paths for other cells for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Vera is exploring an old library. She has found a series of strange books arranged in a single line. Each book is represented by a positive integer, which corresponds to a specific attribute like its age. Vera has a task: she wants to identify segments of the line of books where the sum of the segment equals a specific target value. However, there are some rules she must follow: * Each segment must be continuous. * The segment must contain at least one book. * The target value can be achieved by multiple non-overlapping segments, but she is only interested in the count of distinct segments. You need to help Vera determine the number of distinct segments that sum up to the target value. Input The first line contains two integers n and target (1 ≤ n ≤ 100 000, 1 ≤ target ≤ 10^9) — the number of books and the target value, respectively. The second line contains n positive integers separated by spaces, where the i-th integer (1 ≤ a_i ≤ 100 000) represents the attribute of the i-th book in the line. Output Print one integer — the number of distinct segments whose sum is equal to the target value. Examples: Input 5 6 1 2 3 2 1 Output 2 Input 6 5 1 1 1 1 1 1 Output 2 Note In the first example, there are two segments whose sum is equal to 6: [1, 2, 3] and [2, 1, 3]. In the second example, there are only two segments that sum up to 5: [1, 1, 1, 1, 1] and [1, 1, 1, 1, 1]. Help Vera identify and count all the distinct segments.","solution":"def count_segments_with_sum(n, target, books): Counts the number of distinct segments whose sum is equal to the target value. Parameters: n (int): Number of books. target (int): Target sum value. books (list of int): List of positive integers representing the attributes of the books. Returns: int: The number of distinct segments whose sum is equal to the target value. count = 0 current_sum = 0 sum_map = {0: 1} for book in books: current_sum += book if current_sum - target in sum_map: count += sum_map[current_sum - target] if current_sum not in sum_map: sum_map[current_sum] = 0 sum_map[current_sum] += 1 return count # Example usage n = 5 target = 6 books = [1, 2, 3, 2, 1] print(count_segments_with_sum(n, target, books)) # Output should be 2"},{"question":"Koala is participating in a programming contest and he needs your help to solve a problem that involves stacking boxes. He has `n` boxes, where each box has a height and a width. Koala is trying to stack these boxes one on top of the other in such a way that each subsequent box is strictly smaller in both dimensions than the box below it. You need to help Koala find the maximum number of boxes that he can stack. Input The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of boxes. The next `n` lines each contain two integers `height` and `width` (1 ≤ height, width ≤ 100) representing the dimensions of each box. Output Print a single integer — the maximum number of boxes that Koala can stack. Example Input 5 4 5 3 4 2 3 1 2 3 2 Output 4 Note: In the example above, Koala can maximally stack 4 boxes in the following sequence based on their sizes: (1, 2) -> (2, 3) -> (3, 4) -> (4, 5). The box (3, 2) cannot be used as it is not strictly smaller in both dimensions compared to (1, 2).","solution":"def max_stackable_boxes(n, boxes): # Sort the boxes based on height (primary) and width (secondary) boxes.sort(key=lambda x: (x[0], x[1])) # Initialize an array for dynamic programming dp = [1] * n # Apply the LIS-based logic on the sorted boxes for i in range(n): for j in range(i): if boxes[i][0] > boxes[j][0] and boxes[i][1] > boxes[j][1]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Alice loves playing with strings, and she came up with the following game: given a string, she wants to transform it into a palindrome by performing several operations. In one operation, she can select any single character in the string and change it to any other character. Being curious, Alice wants to know the minimum number of operations required to transform her string into a palindrome. Could you help her figure this out? Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Print a single integer — the minimum number of operations required to transform the given string into a palindrome. Examples Input 5 abced Output 2 Input 3 abc Output 1 Note In the first example, changing the characters \'b\' and \'d\' to \'c\' will transform the string into a palindrome: \\"aceca\\". In the second example, changing either \'a\' or \'c\' to \'b\' will transform the string into a palindrome: \\"bbb\\" or \\"aba\\".","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to transform the given string into a palindrome. operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"# Problem Statement There is a town with a straight main road featuring n houses and k shops. Each house and shop is represented by its position on the main road, uniquely identified by a distance from the starting point of the road. You are tasked with finding the minimum distance from each house to the nearest shop and printing the results. The town council wants to determine these distances quickly for better planning and service allocation. Your job is to design an efficient algorithm to compute these distances. # Input - The first line contains two integers, n and k (1 ≤ n, k ≤ 1000) – the number of houses and shops, respectively. - The second line contains n integers, each representing the position of a house along the road. - The third line contains k integers, each representing the position of a shop along the road. # Output - Output a single line with n space-separated integers where the i-th integer represents the minimum distance from the i-th house to the nearest shop. # Examples Input ``` 5 3 1 6 11 14 16 5 12 20 ``` Output ``` 4 1 1 2 4 ``` Input ``` 4 2 2 8 15 18 3 10 ``` Output ``` 1 2 5 8 ``` # Explanation In the first sample case: - The distance from house at position 1 to the nearest shop (at position 5) is 4. - The distance from house at position 6 to the nearest shop (at position 5) is 1. - The distance from house at position 11 to the nearest shop (at position 12) is 1. - The distance from house at position 14 to the nearest shop (at position 12) is 2. - The distance from house at position 16 to the nearest shop (at position 20) is 4. In the second sample case: - The distance from house at position 2 to the nearest shop (at position 3) is 1. - The distance from house at position 8 to the nearest shop (at position 10) is 2. - The distance from house at position 15 to the nearest shop (at position 10) is 5. - The distance from house at position 18 to the nearest shop (at position 10) is 8. # Constraints Your solution should be efficient enough to handle the maximum input sizes within a reasonable time frame.","solution":"def min_distance_to_shops(n, k, house_positions, shop_positions): Calculate the minimum distance from each house to the nearest shop. :param n: Number of houses :param k: Number of shops :param house_positions: List of integers representing house positions :param shop_positions: List of integers representing shop positions :return: List of integers where each element is the minimum distance from the respective house to its nearest shop shop_positions.sort() result = [] for house in house_positions: min_dist = float(\'inf\') for shop in shop_positions: distance = abs(house - shop) if distance < min_dist: min_dist = distance if distance > min_dist: break # No need to check further as the list is sorted result.append(min_dist) return result"},{"question":"A farmer is planning to construct a fence around a rectangular field. He wants to maximize the area of this field using a fixed length of fencing material. The rectangular field should be entirely fenced, and the enclosing fence will use exactly the given length. The length of the fencing material is given as an integer `l`. The width and height of the rectangle should be integers as well. Can you help the farmer to find the width and the height of the rectangle that maximizes the area? Input The first line contains a single integer `l` (4 ≤ l ≤ 10^6) — the total length of the fencing material. Output Output two integers `w` and `h` — the width and the height of the rectangle that maximizes the area. If there are multiple solutions, output any one of them. Examples Input 14 Output 3 4 Input 20 Output 5 5 Note In the first example, a possible way to use 14 units of fencing material is to create a rectangle with width 3 and height 4 (perimeter of rectangle is 2*(3 + 4) = 14). The area of this rectangle is 3 * 4 = 12, which is maximal for the given fencing material of length 14. In the second example, a possible way to use 20 units of fencing material is to create a rectangle with width 5 and height 5 (perimeter of rectangle is 2*(5 + 5) = 20). The area of this rectangle is 5 * 5 = 25, which is maximal for the given fencing material of length 20.","solution":"def maximize_area(l): Given the length of the fencing material, this function returns the width and height of the rectangle that maximizes the area and can be fully enclosed by the fencing. max_area = 0 best_w = 1 best_h = l // 2 - 1 for w in range(1, l // 2): h = l // 2 - w area = w * h if area > max_area: max_area = area best_w = w best_h = h return best_w, best_h"},{"question":"You have a grid A with R rows and C columns. Each element in this grid is initially set to 0. You will perform a series of operations to possibly update the elements of the grid, and eventually, you need to determine the final state of the grid. An operation is defined by four integers i, j, k, and l (1 ≤ i ≤ k ≤ R, 1 ≤ j ≤ l ≤ C). When such an operation is performed, all elements in the sub-grid ranging from row i to row k and column j to column l are incremented by 1. Input The first line of input contains two integers R and C (1 ≤ R, C ≤ 500), representing the number of rows and columns in the grid. The second line contains an integer Q (1 ≤ Q ≤ 10,000), the number of operations to be performed on the grid. Each of the following Q lines contains four integers i, j, k, and l, representing each operation to be performed on the grid. Output Output R lines, each containing C integers, representing the final state of the grid. Example # Input ``` 3 3 4 1 1 2 2 2 2 3 3 1 2 2 3 2 1 3 2 ``` # Output ``` 1 3 2 2 4 3 1 3 2 ``` # Explanation - After the first operation (1, 1, 2, 2), the grid becomes: ``` 1 1 0 1 1 0 0 0 0 ``` - After the second operation (2, 2, 3, 3), the grid becomes: ``` 1 1 0 1 2 1 0 1 1 ``` - After the third operation (1, 2, 2, 3), the grid becomes: ``` 1 2 1 1 3 2 0 1 1 ``` - After the fourth operation (2, 1, 3, 2), the grid becomes: ``` 1 2 1 2 4 2 1 2 1 ```","solution":"def update_grid(R, C, operations): # Initialize a grid with all elements set to 0 grid = [[0] * C for _ in range(R)] # Perform each operation for (i, j, k, l) in operations: # Convert to zero-indexed for internal representation for row in range(i-1, k): for col in range(j-1, l): grid[row][col] += 1 return grid"},{"question":"Alice is participating in a programming competition, and she has encountered a unique problem. The competition requires all participants to perform operations on a sequence of integers. Alice needs to process queries and update the sequence based on specific rules. The sequence contains n integers. There are two types of queries: 1. Update the value at a particular index. 2. Calculate the sum of values in a specific range. Help Alice by writing a program that handles these queries efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 1000) — the number of elements in the sequence and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the initial sequence of integers. The following q lines contain queries. Each query is in one of the following formats: - `1 x y` (1 ≤ x ≤ n, 1 ≤ y ≤ 1000), which means update the value at index x to y. - `2 l r` (1 ≤ l ≤ r ≤ n), which means calculate the sum of values from index l to r (inclusive). Output For each query of the second type (sum query), print the result on a new line. Example Input 5 3 1 2 3 4 5 2 1 3 1 2 6 2 2 4 Output 6 13","solution":"def process_queries(n, q, sequence, queries): output = [] for query in queries: if query[0] == 1: _, index, new_value = query sequence[index - 1] = new_value elif query[0] == 2: _, left, right = query result = sum(sequence[left - 1:right]) output.append(result) return output"},{"question":"There is a coding contest, and participants are awarded points according to their performance across multiple rounds. You are given the results of each round, and your task is to determine the rank of each participant at any point in time. The rank of a participant is based on their total points, with higher points leading to a better rank. Ties are broken by the participant ID (with lower IDs having better ranks in case of ties). At the end of each round, you need to print the current rank of each participant. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 2·10^5), the number of participants and the number of rounds, respectively. The next m lines each contain two integers, p and s (1 ≤ p ≤ n, 1 ≤ s ≤ 10^4), representing that participant p scored s points in the current round. Output For each round, after processing the scores, print the current rank of each participant in a single line separated by spaces. Examples Input 5 3 1 10 2 5 3 7 1 3 2 8 4 6 1 5 2 2 3 3 Output 1 2 3 4 5 1 2 3 4 5 1 3 2 4 5 Explanation In the example provided, there are 5 participants and 3 rounds. - After the first round, the points are: [10, 5, 7, 0, 0], thus the ranks are: 1 2 3 4 5. - After the second round, the points are updated to: [13, 13, 7, 6, 0], and the ranks become: 1 2 3 4 5 (since participants 1 and 2 are tied, participant 1 ranks higher due to lower ID). - After the third round, the points are: [18, 15, 10, 6, 0], therefore the ranks are: 1 3 2 4 5.","solution":"def calculate_ranks(n, m, scores): Calculate the rank of each participant after each round. Args: n (int): Number of participants. m (int): Number of rounds. scores (list of tuples): List of tuples where each tuple contains participant ID and their score for the round. Returns: List of lists where each list represents the ranks of participants after each round. participants_scores = [0] * n result = [] for i in range(m): p, s = scores[i] participants_scores[p - 1] += s # Sort participants based on score and participant ID sorted_participants = sorted( range(n), key=lambda x: (-participants_scores[x], x) ) # Transform sorted indexes to ranks current_ranks = [sorted_participants.index(i) + 1 for i in range(n)] result.append(current_ranks) return result"},{"question":"Alice is planning to arrange a unique circular seating arrangement for her book club meetup. The meetup will have N members attending, including Alice herself. Alice wants to make sure that the seating arrangement is not just a repetition of a simpler arrangement. Specifically, she wants to avoid configurations where the arrangement could be rotated into a configuration that looks the same as another. For example, if there are three members in a circle, the arrangement [1, 2, 3] should not be considered unique if it can be rotated to form [2, 3, 1] or [3, 1, 2]. Given the number of members N, help Alice determine the number of unique circular seating arrangements. The result can be very large, so return it modulo 1000000007 = 10^9 + 7. Input The input consists of a single integer N (3 ≤ N ≤ 10^5), the number of members attending the meetup. Output Print the number of unique circular seating arrangements, modulo 1000000007. Examples Input 3 Output 2 Input 4 Output 6 Input 5 Output 24 Note 1. For N = 3, the valid arrangements are [1, 2, 3] and [1, 3, 2]. Any other arrangement can be rotated to match one of these. 2. For N = 4, the valid arrangements are the permutations of [1, 2, 3, 4] divided by rotations, resulting in 6 unique arrangements. 3. For N = 5, the valid arrangements are the permutations of [1, 2, 3, 4, 5] divided by rotations, resulting in 24 unique arrangements.","solution":"MOD = 1000000007 def unique_circular_arrangements(N): Returns the number of unique circular seating arrangements for N members, modulo 1000000007. if N < 3: return 0 # Calculate (N-1)! % 1000000007 using iterative method result = 1 for i in range(2, N): result = (result * i) % MOD return result"},{"question":"You are given an undirected, weighted graph G = (V, E) with V vertices and E edges. Each edge has an associated non-negative weight. Your task is to find the maximum weight of a path between two nodes in the graph, given that each edge can be used at most once in a path. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000) — the two endpoints of the edge and the weight of the edge. Output Print a single integer — the maximum weight of a path between any two nodes in the graph. If there is no path between any two nodes, print -1. Examples Input 4 4 1 2 3 2 3 4 3 4 1 1 4 10 Output 10 Input 5 3 1 2 5 2 3 6 4 5 3 Output 6","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def max_path_weight(n, m, edges): edges.sort(key=lambda x: x[2], reverse=True) uf = UnionFind(n) max_weight = -1 for u, v, w in edges: if uf.find(u - 1) != uf.find(v - 1): max_weight = max(max_weight, w) uf.union(u - 1, v - 1) return max_weight def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 result = max_path_weight(n, m, edges) print(result)"},{"question":"Given a string, determine the length of the longest substring where all characters are unique. Input The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains a string S for which you need to find the length of the longest substring with all unique characters. Output For each test case, output a single integer denoting the length of the longest substring with all unique characters. Example Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3 Explanation Example case 1. The longest substring with all unique characters in \\"abcabcbb\\" is \\"abc\\" with length 3. Example case 2. The longest substring with all unique characters in \\"bbbbb\\" is \\"b\\" with length 1. Example case 3. The longest substring with all unique characters in \\"pwwkew\\" is \\"wke\\" with length 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_index = {} longest_length = start = 0 for index, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = index longest_length = max(longest_length, index - start + 1) return longest_length def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(length_of_longest_substring(case)) return results"},{"question":"There is a sequence of integers initially written on a blackboard. You repeat the following process a fixed number of times: 1. Take the sequence of integers currently written on the blackboard and erase it. 2. Select any pair of adjacent integers, replace them with their sum and difference (in arbitrary order). Determine the sequence of integers after performing the above process a given number of times. Input The first line contains two integers, N (1 ≤ N ≤ 105) — the number of integers on the blackboard, and M (0 ≤ M ≤ 1018) — the number of steps to perform. The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 106), the initial sequence of integers on the blackboard. Output Output N integers, the sequence of integers after M steps. Examples Input 2 1 1 2 Output 3 1 Input 3 2 1 3 2 Output 6 2 1 Input 4 3 2 3 4 5 Output 14 2 0 0 Note In the first case, after one step, the sequence [1, 2] can become [3, 1] or [1, 3]. As the result depends on the arbitrary choice of ordering, either can be output. In the second case, after one step, we can get sequences like [4, 1, 2] or [1, 4, 2] etc. After another step, regardless of such choices, the end result converges to the same sequence. In the third case, we perform multiple transformations, and regardless of the choices, the values in non-terminal positions reduce to zero over a large number of steps.","solution":"def process_sequence(N, M, A): Given a sequence of integers A of length N and number of steps M, returns the sequence after M steps of replacing adjacent integers with their sum and difference. if M == 0: return A total_sum = sum(A) if N == 1: return A result = [total_sum] + [0] * (N - 1) return result"},{"question":"Given an array of N integers, check if there exist two elements in the array whose sum is equal to a given integer K. If such a pair exists, output `YES`; otherwise, output `NO`. Constraints * N is an integer. * 1 ≤ N ≤ 1000 * Each element of the array is an integer. * -10^5 ≤ Array elements ≤ 10^5 * -10^5 ≤ K ≤ 10^5 Input The input is given from Standard Input in the following format: ``` N K a1 a2 a3 ... aN ``` Output Output `YES` if there exist two distinct elements in the array such that their sum equals K. Output `NO` otherwise. Examples Input ``` 5 10 3 4 5 6 7 ``` Output ``` YES ``` Input ``` 4 8 1 2 3 9 ``` Output ``` NO ```","solution":"def pair_sum_exists(n, k, arr): Returns \'YES\' if there are two distinct elements in arr whose sum is equal to k. Otherwise, returns \'NO\'. seen = set() for number in arr: if k - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\" def from_input_string(input_string): lines = input_string.strip().split(\'n\') n, k = map(int, lines[0].split()) arr = list(map(int, lines[1].split())) return n, k, arr def to_input_string(inputs): n, k, arr = inputs return f\\"{n} {k}n{\' \'.join(map(str, arr))}\\" def from_output_string(output_string): return output_string.strip() def to_output_string(output): return output"},{"question":"Given an array of integers that represents the initial state of a row of garden plots, each garden plot can either be empty (indicated by 0) or planted with a flower (indicated by 1). A gardener needs to plant additional flowers, but flowers cannot be planted in adjacent plots (i.e., no two flowers can be right next to each other). Write a function that determines if a given number of new flowers can be planted in the garden row without violating the no-adjacent-flowers rule. Function Signature ```python def canPlaceFlowers(flowerbed: List[int], n: int) -> bool: ``` Parameters - flowerbed (list of int): The initial state of the garden plots, a list consisting of 0s and 1s. - n (int): The number of new flowers the gardener wants to plant. Constraints - The length of flowerbed will be in the range [1, 2 * 10^4]. - flowerbed[i] is 0 or 1. - There are no two flowers next to each other initially in the flowerbed. Output Return `True` if `n` new flowers can be planted in the garden without violating the no-adjacent-flowers rule, `False` otherwise. Examples Input ```python flowerbed = [1, 0, 0, 0, 1] n = 1 ``` Output ```python True ``` Input ```python flowerbed = [1, 0, 0, 0, 1] n = 2 ``` Output ```python False ``` Input ```python flowerbed = [0, 0, 1, 0, 0, 0, 0, 1] n = 2 ``` Output ```python True ``` Note In the first example, the gardener can plant 1 new flower by planting it in the middle of the flowerbed, resulting in `[1, 0, 1, 0, 1]`. Therefore, the output is `True`. In the second example, the gardener cannot plant 2 new flowers without violating the no-adjacent-flowers rule, so the output is `False`. In the third example, the gardener can plant 2 new flowers by planting them in the second and fifth positions (0-based indexing), resulting in `[0, 1, 1, 0, 1, 0, 1, 1]`. Therefore, the output is `True`.","solution":"def canPlaceFlowers(flowerbed, n): length = len(flowerbed) count = 0 for i in range(length): if flowerbed[i] == 0: prev = (i == 0) or (flowerbed[i - 1] == 0) next = (i == length - 1) or (flowerbed[i + 1] == 0) if prev and next: flowerbed[i] = 1 count += 1 if count >= n: return True return count >= n"},{"question":"James is a big fan of palindromes. A palindrome is a string that reads the same forward and backward. Recently, he came across some strings and wants to convert them into palindromes with the minimum number of changes. A change can involve modifying any character in the string to any other character. Your task is to help James by determining the minimum number of changes required to convert each string into a palindrome. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains a single string si consisting of lowercase Latin letters (\'a\'-\'z\'). The length of each string does not exceed 100 characters. Output For each test case, output a single integer — the minimum number of changes required to convert the given string into a palindrome. Examples Input 3 abc aab racecar Output 1 1 0 Note In the first example, you can change \'c\' to \'a\' to make the string \\"aba\\", which is a palindrome. Only 1 change is needed. In the second example, you can change \'b\' to \'a\' to make the string \\"aaa\\", which is a palindrome. Only 1 change is needed. In the third example \\"racecar\\" is already a palindrome, so no changes are needed. The answer is 0.","solution":"def min_changes_to_palindrome(s: str) -> int: Given a string, determine the minimum number of changes required to convert it into a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def process_test_cases(t: int, test_cases: list) -> list: results = [] for s in test_cases: results.append(min_changes_to_palindrome(s)) return results"},{"question":"Given a positive integer `N`, write a program to find the smallest integer `k` such that `k` contains exactly `N` distinct prime factors. Input The input consists of a single integer `N` (1 ≤ N ≤ 10). Output Print a single integer — the smallest `k` that has exactly `N` distinct prime factors. Example Input 3 Output 30 Input 4 Output 210 Input 2 Output 6","solution":"def smallest_k_with_N_prime_factors(N): Returns the smallest integer k such that k contains exactly N distinct prime factors. # List of first N distinct prime numbers primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # To find the smallest integer with exactly N distinct prime factors, we need to # multiply the first N prime numbers k = 1 for i in range(N): k *= primes[i] return k"},{"question":"You are given a grid of size n x m consisting of characters \'0\' and \'1\'. You are allowed to perform a flip operation on any cell. A flip operation changes a \'0\' to \'1\' or a \'1\' to \'0\'. You need to make the grid alternating, meaning no two adjacent cells (horizontally or vertically) are the same. Return the minimum number of flip operations required to make the grid alternating. An alternating grid either looks like this: ``` 0 1 0 1 ... 1 0 1 0 ... 0 1 0 1 ... ... ``` or like this: ``` 1 0 1 0 ... 0 1 0 1 ... 1 0 1 0 ... ... ``` You have to determine the minimum number of flips required to convert the given grid to one of these two alternating patterns. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case starts with a line containing two positive integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of rows and columns of the grid. Then follow n lines containing m characters (\'0\' or \'1\') each. Output Print t answers to the test cases. Each answer is an integer representing the minimum number of flips required to make the grid alternating. Example Input 3 3 3 010 101 010 2 2 10 01 3 3 111 111 111 Output 0 0 4 Note In the first test case, the grid is already alternating, so no flips are required. In the second test case, the grid is already alternating, so no flips are required. In the third test case, flipping any 4 cells in the middle row to \'0\' will result in an alternating grid, achieving the minimum number of flips.","solution":"def min_flips_to_alternate(grid): n = len(grid) m = len(grid[0]) def flips_to_pattern(pattern): flip_count = 0 for i in range(n): for j in range(m): expected = pattern[(i + j) % 2] if grid[i][j] != expected: flip_count += 1 return flip_count # Define the two possible patterns pattern1 = [\'0\', \'1\'] pattern2 = [\'1\', \'0\'] # Calculate flips for both patterns flips1 = flips_to_pattern(pattern1) flips2 = flips_to_pattern(pattern2) # Return the minimum of the two return min(flips1, flips2) def min_flips_for_multiple_cases(test_cases): results = [] for n, m, grid in test_cases: results.append(min_flips_to_alternate(grid)) return results"},{"question":"You are playing a game with a sequence of n integers. Your goal is to transform this sequence in such a way that the sum of its elements is minimized while adhering to certain rules. The sequence can be modified using the following set of operations: - Choose a subsequence of k elements in the sequence where k is a power of 2 (i.e., 1, 2, 4, 8, ...), - Replace the chosen subsequence with a single element which is the sum of all elements in this subsequence. You need to determine the minimum possible sum of the sequence after performing any number of allowed operations. Input The first line of input contains one integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the elements of the sequence. Output Output a single integer — the minimum possible sum of the sequence after performing any number of allowed operations. Example Input 5 4 2 7 3 6 Output 22 Explanation The given sequence is {4, 2, 7, 3, 6}. You can choose the whole sequence (as its length is a power of 2, specifically 2^2 = 4), sum up the numbers, and get the new sequence {22}. Thus, the minimum possible sum of the sequence is 22.","solution":"def min_possible_sum(n, sequence): Returns the minimum possible sum of the sequence after performing any number of allowed operations. The allowed operations are: - Choose a subsequence of k elements in the sequence where k is a power of 2 (i.e., 1, 2, 4, 8, ...), - Replace the chosen subsequence with a single element which is the sum of all elements in this subsequence. :param n: integer, length of the sequence :param sequence: list of integers, the sequence elements :return: integer, the minimum possible sum of the sequence return sum(sequence)"},{"question":"# Balanced Brackets Problem Develop a function that determines if the input string has all its brackets properly balanced and nested. The input string will only consist of brackets: `(`, `)`, `{`, `}`, `[`, and `]`. Input - A list of strings where each string contains only the characters `(`, `)`, `{`, `}`, `[` and `]`. - The length of the list will not exceed 50. - The length of each string will not exceed 100 characters. Output For each string in the list, the function should return `True` if the string is balanced and `False` otherwise. Examples Input: ``` [\\"()\\", \\"([])\\", \\"{[()]}\\", \\"(]\\", \\"([)]\\", \\"{[(])}\\", \\"\\"] ``` Output: ``` [True, True, True, False, False, False, True] ``` Explanation - `\\"()\\"` is balanced. - `\\"([])\\"` is balanced. - `\\"{[()]}\\"` is balanced. - `\\"(]\\"` is not balanced because `)` does not match `(`. - `\\"([)]\\"` is not balanced because `)` cannot match `(` and `]` cannot match `[`. - `\\"{[(])}\\"` is not balanced because `)` does not match `(`. - `\\"\\"` (the empty string) is trivially balanced.","solution":"def is_balanced(brackets): Checks if the provided string of brackets is balanced. stack = [] bracket_map = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} for char in brackets: if char in bracket_map: stack.append(char) elif char in bracket_map.values(): if not stack or bracket_map[stack.pop()] != char: return False return not stack def check_balanced_brackets(strings): Returns a list indicating if each string in the input list is balanced. return [is_balanced(s) for s in strings]"},{"question":"Emma is fascinated by numbers that are palindromic primes. A palindromic prime is a number that is both a palindrome (it reads the same forwards and backwards) and a prime (it is only divisible by 1 and itself). Given a number N, Emma wants to find the next palindromic prime that is greater than N. Input The first line of the input contains the number of test cases T. For each test case, there is a single line containing the number N. Output For each test case, output a single line containing the next palindromic prime greater than N. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^7 Example Input: 2 31 101 Output: 101 131","solution":"import math def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Returns True if n is a palindrome, else False. return str(n) == str(n)[::-1] def next_palindromic_prime(n): Returns the next palindromic prime number greater than n. n += 1 while True: if is_palindrome(n) and is_prime(n): return n n += 1 def find_next_palindromic_primes(test_cases): For each test case, find the next palindromic prime greater than N. Args: test_cases: list of integers representing each test case Returns: list of integers representing the next palindromic prime for each test case return [next_palindromic_prime(tc) for tc in test_cases]"},{"question":"Sara is fascinated by palindrome numbers. A palindrome number is a number that remains the same when its digits are reversed. She is particularly interested in finding the smallest palindrome larger than a given number X. Since there are many large numbers to check, she needs an efficient algorithm to determine the next palindrome. Write a function that takes a single integer X and returns the smallest palindrome larger than X. INPUT The first line contains the integer X. OUTPUT Print the smallest palindrome larger than X. Constraints 1 ≤ X ≤ 10^14 SAMPLE INPUT 123 SAMPLE OUTPUT 131 Explanation For X = 123, the smallest palindrome number larger than 123 is 131. Other palindromes such as 111 or 121 are not larger than 123. Note: Efficient handling of large numbers is crucial in this task.","solution":"def next_palindrome(X): Returns the smallest palindrome larger than X. def is_palindrome(n): return str(n) == str(n)[::-1] X += 1 while not is_palindrome(X): X += 1 return X"},{"question":"You have been contracted to help a small logistics company optimize their delivery routes. They operate in a grid-like city divided into m rows and n columns. Each cell in the grid represents an intersection and is identified by its coordinates (r, c) where 0 ≤ r < m and 0 ≤ c < n. The company\'s delivery van starts at the top-left corner (0, 0) and needs to deliver a package to the bottom-right corner (m-1, n-1). The van can move to any of the four directions: up, down, left, or right, but it cannot revisit any intersection once it has left it. Each intersection (r, c) has a non-negative delivery cost d(r, c). Design a program to determine the minimum cost required to deliver the package from (0, 0) to (m-1, n-1). Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the city grid. Each of the next m lines contains n integers, where the j-th integer in the i-th line represents the delivery cost d(r, c) for the intersection at row r and column c (0 ≤ d(r, c) ≤ 100). Output Print a single integer — the minimum cost required to deliver the package from (0, 0) to (m-1, n-1). Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 5 4 6 7 Output 16 Note In the first example, one of the optimal paths is to move down from (0, 0) to (1, 0), then to (2, 0), then move right to (2, 1), and finally to (2, 2). The minimum cost is 1 + 1 + 4 + 2 + 1 = 7. In the second example, the optimal path is to move right from (0, 0) to (0, 1), then move down to (1, 1). The minimum cost is 5 + 4 + 7 = 16.","solution":"import heapq def min_delivery_cost(m, n, grid): Returns the minimum cost required to deliver the package from (0, 0) to (m-1, n-1). directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] min_heap = [(grid[0][0], 0, 0)] min_cost = [[float(\'inf\')] * n for _ in range(m)] min_cost[0][0] = grid[0][0] while min_heap: current_cost, r, c = heapq.heappop(min_heap) if (r, c) == (m - 1, n - 1): return current_cost for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n: cost = current_cost + grid[nr][nc] if cost < min_cost[nr][nc]: min_cost[nr][nc] = cost heapq.heappush(min_heap, (cost, nr, nc)) return min_cost[m - 1][n - 1]"},{"question":"Given a string representing a mathematical expression in Reverse Polish Notation (RPN), evaluate its value. Reverse Polish Notation is a mathematical notation in which every operator follows all of its operands. For example, the expression \\"3 4 +\\" evaluates to 3 + 4 = 7. The valid characters in the input string are: - The digits 0-9 for numbers, - The characters \'+\' (addition), \'-\' (subtraction), \'*\' (multiplication), and \'/\' (division) for operations. Assume that the input string is always a valid RPN expression. Input The input consists of a non-empty string with space-separated tokens representing an RPN expression. The length of the string does not exceed 10^6 characters. Output Output a single integer which is the result of the RPN expression evaluated from left to right. Note that division should be integer division. Examples Input \\"3 4 + 2 * 7 /\\" Output 2 Input \\"5 1 2 + 4 * + 3 -\\" Output 14 Input \\"2 3 1 * + 9 -\\" Output -4 Input \\"4 13 5 / +\\" Output 6","solution":"def evaluate_rpn(expression): Evaluates a Reverse Polish Notation (RPN) expression and returns the result as an integer. Args: expression (str): A string representing the RPN expression. Returns: int: The result of the RPN expression. stack = [] tokens = expression.split() for token in tokens: if token in {\'+\', \'-\', \'*\', \'/\'}: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # Integer division that truncates towards zero. stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"Given an array `a` consisting of `n` integers and an integer `k`, determine whether there exists a subarray of length exactly `k` whose average value is an integer. You are not allowed to rearrange the elements of the array. Input The first line contains a single integer `t` — the number of test cases (1 ≤ t ≤ 100). The test cases follow, each in two lines. The first line of a test case contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100). The second line contains `n` integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000). Output For each test case print \\"YES\\", if there exists a subarray of length exactly `k` whose average value is an integer, and \\"NO\\" otherwise. Example Input 3 5 2 1 3 2 5 4 4 3 1 -2 3 4 6 1 0 -1 2 -2 1 -3 Output YES NO YES Note In the first test case, one possible subarray of length `2` is `[1, 3]`, and its average is `2`. In the second test case, no subarray of length `3` has an integer average. In the third test case, each single-element subarray has an integer average.","solution":"def has_integer_average_subarray(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] found = False for j in range(n - k + 1): subarray_sum = sum(a[j:j+k]) if subarray_sum % k == 0: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are organizing a scavenger hunt and need to create a leaderboard of participants based on their scores. Each participant has a unique ID and a score associated with them. Your task is to read the scores and participant IDs from an input file, compute the final standings, and print the leaderboard in descending order of scores. If two participants have the same score, the participant with the smaller ID should appear first. Input: The input consists of multiple lines. Each line contains a participant ID and their score, separated by a space. The input ends with a line containing the word \\"END\\". Output: Print the leaderboard, where each line contains a participant ID and their score, separated by a space. The output should be sorted in descending order of scores. If two participants have the same score, list the participant with the smaller ID first. Examples: Input ``` 1 50 2 75 3 75 4 60 END ``` Output: ``` 2 75 3 75 4 60 1 50 ``` Input ``` 5 90 1 95 3 90 2 100 END ``` Output: ``` 2 100 1 95 3 90 5 90 ```","solution":"def create_leaderboard(input_lines): Creates a leaderboard from the input lines of participant IDs and scores. Args: input_lines (list of str): List of input lines where each line contains a participant ID and a score, separated by a space. Returns: list of tuples: Leaderboard sorted in descending order of scores. scores = [] for line in input_lines: if line == \\"END\\": break participant_id, score = map(int, line.split()) scores.append((participant_id, score)) # Sort first by score in descending order, then by participant_id in ascending order scores.sort(key=lambda x: (-x[1], x[0])) return scores"},{"question":"Input Format N a_1 a_2 a_3 ... a_N Output Format Print the largest sum of a continuous subarray in one line. In the end put a line break. Constraints * 1 ≤ N ≤ 20 * -10^9 ≤ a_i ≤ 10^9 Scoring Subtask 1 [50 points] * N ≤ 5 * -10 ≤ a_i ≤ 10 Subtask 2 [100 points] * 5 < N ≤ 10 * -100 ≤ a_i ≤ 100 Subtask 3 [150 points] * There are no additional constraints. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6","solution":"def max_subarray_sum(nums): Returns the largest sum of a continuous subarray. max_sum = float(\'-inf\') current_sum = 0 for num in nums: current_sum = max(num, current_sum + num) if current_sum > max_sum: max_sum = current_sum return max_sum def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nums = list(map(int, data[1:1+N])) print(max_subarray_sum(nums))"},{"question":"You have an array of integers, and you need to perform a series of queries on this array. Each query will give you a range [l, r] and require you to calculate the sum of elements within this range. Your task is to preprocess the array in a way that allows you to answer each query efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100 000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers ai (−10^9 ≤ ai ≤ 10^9) — the elements of the array. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) describing each query. Output For each query, output the sum of the elements in the range [l, r]. Example Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array for efficient range queries. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def range_sum_query(prefix_sum, l, r): Returns the sum of the elements in the range [l, r] using the prefix sum array. Note: l and r are expected to be 1-indexed. return prefix_sum[r] - prefix_sum[l - 1] def process_queries(arr, queries): Process a list of queries on the array. prefix_sum = preprocess_array(arr) results = [] for l, r in queries: results.append(range_sum_query(prefix_sum, l, r)) return results"},{"question":"Input The input is given from Standard Input in the following format: > N Q a_1 d_1 a_2 d_2 ： ： a_Q d_Q Output * You have to print N lines. * The i-th line should contain the sum S_i of distances traveled by object i (1 le i le N). Constraints * 3 le N, Q le 100,000 * 1 le a_i le N * 1 le d_i le 10^6 Subtasks Subtask 1 [ 60 points ] * N, Q le 100 * d_i = 1 Subtask 2 [ 400 points ] * N, Q le 100 * d_i le 10^6 Subtask 3 [ 240 points ] * N, Q le 100,000 * d_i = 1 Subtask 4 [ 500 points ] * There are no additional constraints. Input The input is given from Standard Input in the following format: > N Q a_1 d_1 a_2 d_2 ： ： a_Q d_Q Examples Input 8 3 3 15 7 9 4 7 Output 0 0 15 7 0 0 9 0 Input 5 5 1 5 3 10 2 21 1 1 4 17 Output 6 21 10 17 0 Input 9 4 1 5 4 12 9 3 6 9 Output 5 0 0 12 0 9 0 0 3 Input 6 7 5 19 3 2 1 4 2 8 6 15 3 25 4 11 Output 4 8 27 11 19 15","solution":"def calculate_distances(N, Q, queries): distances = [0] * N for a, d in queries: distances[a-1] += d return distances # Example usage: # N, Q = 8, 3 # queries = [(3, 15), (7, 9), (4, 7)] # print(calculate_distances(N, Q, queries)) # Output: [0, 0, 15, 7, 0, 0, 9, 0]"},{"question":"Polycarpus is practicing his skills with \\"bitwise OR\\" operation (denoted as \\"OR\\") of non-negative integers. For his next challenge, he decided to create a new sequence manipulation problem for his friend to solve. On the blackboard, Polycarpus wrote a sequence of n non-negative integers a1, a2, ..., an. Then, he constructed another square matrix c of size n × n. The element of matrix c located at the i-th row and j-th column (denoted as cij) is defined as follows: * If i ≠ j, then cij = ai | aj (the \\"bitwise OR\\" of numbers ai and aj). * If i = j, then cij = ai (the number itself). After constructing the matrix c, Polycarpus wiped the sequence a off the blackboard. Given the matrix c, help Polycarpus restore the sequence of numbers a1, a2, ..., an that he removed. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the square matrix c. The next n lines contain the matrix c. The i-th of these lines contains n space-separated integers: the j-th number represents the element of matrix cij. It is guaranteed that cij = cji for all i, j (1 ≤ i, j ≤ n). The values in the matrix c satisfy 0 ≤ cij ≤ 109. Output Print n non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the sequence that Polycarpus wiped off the board. Separate the numbers by spaces. It is guaranteed that there exists a sequence a that satisfies the conditions. If there are multiple valid sequences, you may print any one of them. Examples Input 1 7 Output 7 Input 3 4 5 7 5 8 7 7 7 9 Output 4 8 9 Input 4 12 14 15 13 14 13 14 15 15 14 15 15 13 15 15 15 Output 12 13 15 15 Explanation In the first example, since the matrix contains a single number and it must be the value of a1 itself, the output is 7. In the second example, since the matrix contains the OR of the values of ai and aj where i ≠ j, and ai where i = j, you need to deduce the most appropriate values for ai to satisfy this matrix. In the third example, you have the values in matrix and need to deduce appropriate sequence from it.","solution":"def restore_sequence(n, matrix): Restore the sequence of numbers a1, a2, ..., an from the matrix. # Since c[i][i] = ai, we just need to collect the diagonal elements of the matrix sequence = [matrix[i][i] for i in range(n)] return sequence"},{"question":"A village is known for its well-organized schedule of events. The village wants to automate their event scheduling and determine if there are any conflicting events. An event is represented by a start time and an end time. Two events are considered conflicting if their time intervals overlap. For example, if one event starts at 2 and ends at 5, and another event starts at 4 and ends at 6, they overlap from 4 to 5. Given the list of events, determine if any events conflict with each other. INPUT: The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, the number of events in the village. The next N lines each contain two integers, S and E, representing the start and end times of an event respectively. OUTPUT: For each test case, print \\"YES\\" (without quotes) if any events conflict and \\"NO\\" (without quotes) if there are no conflicts. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ S < E ≤ 1000 SAMPLE INPUT 2 3 1 3 2 4 5 6 2 1 2 3 4 SAMPLE OUTPUT YES NO","solution":"def detect_conflicts(test_cases): results = [] for events in test_cases: events.sort(key=lambda x: x[0]) conflict_found = False for i in range(1, len(events)): if events[i][0] < events[i-1][1]: conflict_found = True break results.append(\\"YES\\" if conflict_found else \\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) line_index = 1 test_cases = [] for _ in range(T): N = int(lines[line_index]) line_index += 1 events = [] for _ in range(N): S, E = map(int, lines[line_index].split()) events.append((S, E)) line_index += 1 test_cases.append(events) return test_cases def main(input_string): test_cases = parse_input(input_string) return detect_conflicts(test_cases)"},{"question":"Alice is a renowned scientist working on gene sequences. She is given a special task to determine the uniqueness of a particular gene sequence she found in a rare species. The gene sequence consists of n nucleotides, represented as a string of characters where each character is either \'A\', \'T\', \'G\', or \'C\'. Alice wants to know the number of unique substrings of a particular length k within the gene sequence. A substring is defined as a contiguous sequence of characters within the string. Write a program that helps Alice determine the number of unique substrings of length k in the given gene sequence. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the gene sequence. The second line contains a string of length n consisting only of the characters \'A\', \'T\', \'G\', and \'C\'. The third line contains an integer k (1 ≤ k ≤ n) — the length of the substrings to consider. Output Print a single integer — the number of unique substrings of length k in the gene sequence. Example Input 10 ATGCGATGCA 3 Output 6 Explanation The substrings of length 3 are: \\"ATG\\", \\"TGC\\", \\"GCG\\", \\"CGA\\", \\"GAT\\", \\"ATG\\", \\"TGC\\", \\"GCA\\". The unique substrings are: \\"ATG\\", \\"TGC\\", \\"GCG\\", \\"CGA\\", \\"GAT\\", and \\"GCA\\", resulting in a total of 6 unique substrings.","solution":"def count_unique_substrings(n, gene_sequence, k): Returns the number of unique substrings of length k in the gene sequence. Parameters: n (int): Length of the gene sequence. gene_sequence (str): The gene sequence consisting of characters \'A\', \'T\', \'G\', and \'C\'. k (int): Length of the substrings to consider. Returns: int: Number of unique substrings of length k. unique_substrings = set() # Loop through the sequence to collect all substrings of length k for i in range(n - k + 1): substring = gene_sequence[i:i + k] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"You are given a tree with N nodes. Each node corresponds to a house, and each edge between the nodes represents a road of certain length connecting two houses. The tree is rooted at node 1. The inhabitants of each house decided they want to move to a house which is at least a certain minimum distance away from their original house. The distance between any two nodes is the sum of the lengths of the edges on the path between those nodes. Write a program to determine the smallest minimum distance D for which it is possible to reassign all inhabitants to different houses such that each person moves to a house that is at least D distance away from their original house. Input The first line contains an integer N (2 ≤ N ≤ 100000) — the number of nodes in the tree. The next N-1 lines, each containing three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), describing a road connecting nodes u and v with length w. Output Output a single integer D, the smallest distance each inhabitant must move to a different house which is at least this distance away. Examples Input 5 1 2 1 1 3 1 2 4 2 3 5 3 Output 1 Input 4 1 2 3 1 3 2 3 4 4 Output 2","solution":"def smallest_minimum_distance(N, roads): Determines the smallest minimum distance D for which it is possible to reassign all inhabitants to different houses such that each person moves to a house that is at least D distance away from their original house. :param N: Number of nodes in the tree. :param roads: List of tuples (u, v, w) where u and v are nodes connected by a road of length w. :return: The smallest minimum distance D. # Find the smallest edge weight min_distance = min(road[2] for road in roads) return min_distance # Example usage: # N = 5 # roads = [(1, 2, 1), (1, 3, 1), (2, 4, 2), (3, 5, 3)] # print(smallest_minimum_distance(N, roads)) # Output: 1"},{"question":"Mira loves playing with rectangular tiles and arranging them into a larger rectangular grid. She has a grid of size m × n, and an ample supply of tiles of size a × b. Mira wants to know if it\'s possible to completely cover the grid using these tiles without any gaps or overlaps. The tiles cannot be rotated, and the sides of the tiles must be parallel to the sides of the grid. Input The first line contains two space-separated integers m and n — the dimensions of the grid. The second line contains two space-separated integers a and b — the dimensions of the tiles. All numbers m, n, a, b in the input are integers and fit within the range from 1 to 1000. Output Print \\"YES\\" (without the quotes) if the entire grid can be covered by the tiles, and \\"NO\\" (without the quotes) otherwise. Examples Input 6 6 2 3 Output YES Input 7 3 3 2 Output NO Input 8 4 4 2 Output YES Note In the first test case, the grid can be completely covered by 6 tiles of size 2 × 3. In the second test case, it\'s impossible to cover the grid of size 7 × 3 using tiles of size 3 × 2 without gaps or overlaps. In the third test case, the grid can be completely covered by 8 tiles of size 4 × 2.","solution":"def can_cover_grid(m, n, a, b): Determines if the entire grid (m x n) can be covered exactly with tiles (a x b) without any gaps or overlaps. if m % a == 0 and n % b == 0: return \\"YES\\" return \\"NO\\""},{"question":"The Supervillain Corporation plans to conquer the world, but they need to decode a secret message first. The message is encrypted using a special algorithm. The algorithm takes a string composed of lowercase Latin letters and shifts each letter by `k` positions forward in the alphabet (wrapping around if necessary). Help the corporation by writing a program that decodes the given message based on the shifting key `k`. Input The first line contains the encryption key `k` (an integer) where `1 ≤ k ≤ 25`. The second line contains the encrypted message (a string of lowercase Latin letters of length `1 ≤ |message| ≤ 100`). Output Print the decoded message on a single line. Examples Input 2 cde Output abc Input 5 zab Output uvw","solution":"def decode_message(k, message): Decodes the given message by shifting each letter by k positions backwards in the alphabet. Parameters: k (int): the number of positions to shift each letter backwards. message (str): the encrypted message composed of lowercase Latin letters. Returns: str: the decoded message. decoded_message = [] for char in message: new_char = chr((ord(char) - ord(\'a\') - k) % 26 + ord(\'a\')) decoded_message.append(new_char) return \'\'.join(decoded_message)"},{"question":"Problem: Data Transaction Sequence You are tasked with simulating a financial transactions system involving multiple bank accounts. Each transaction modifies account balances and may involve multiple accounts. There are two types of transactions: 1. Transfer: Moves a specified amount of money from one account to another. 2. Query: Outputs the current balance of a specified account. You need to implement a system that processes a sequence of these transactions and queries based on the provided input. Input - The first line contains an integer N (1 <= N <= 100), the number of accounts. - The second line contains N integers indicating the initial balance of each account. - The third line contains an integer M (1 <= M <= 1000), the number of transactions and queries. - The following M lines describe either a transfer or a query: - \\"T X Y Z\\" indicates a transfer of Z units from account X to account Y (1 ≤ X, Y ≤ N, 1 ≤ Z ≤ 1000). - \\"Q X\\" indicates a query of the current balance of account X (1 ≤ X ≤ N). Output - For each query, output a single line with the current balance of the requested account. Examples Input 5 100 200 300 400 500 7 T 1 2 50 Q 1 Q 2 T 3 4 100 Q 3 Q 4 T 2 5 150 Output 50 250 200 500 Explanation - Initially, the balances of accounts are [100, 200, 300, 400, 500]. - After the first transfer (50 units from account 1 to account 2), the balances become [50, 250, 300, 400, 500]. - The first query requests the balance of account 1, which is 50. - The second query requests the balance of account 2, which is 250. - The second transfer (100 units from account 3 to account 4) modifies the balances to [50, 250, 200, 500, 500]. - The third query requests the balance of account 3, which is 200. - The fourth query requests the balance of account 4, which is 500. - The third transfer (150 units from account 2 to account 5) results in balances [50, 100, 200, 500, 650].","solution":"def process_transactions(n, initial_balances, transactions): accounts = initial_balances[:] result = [] for transaction in transactions: parts = transaction.split() if parts[0] == \\"T\\": # Transfer transaction x, y, z = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) accounts[x] -= z accounts[y] += z elif parts[0] == \\"Q\\": # Query transaction x = int(parts[1]) - 1 result.append(accounts[x]) return result"},{"question":"You are given a string of lowercase English letters and an integer k (1 ≤ k ≤ 26). You need to transform the string by performing exactly k moves. In one move, you can choose any letter and replace it with a different letter. Your objective is to maximize the length of the longest substring that consists of the same character after k moves. Input The first line contains a single integer k. The second line contains a string s of lowercase English letters (1 ≤ |s| ≤ 10^5). Output Output a single integer denoting the length of the longest substring consisting of the same character you can obtain after exactly k moves. Examples Input 2 abac Output 3 Input 1 aaabbbbcc Output 5 Note In the first example, one optimal strategy is to change the character \'b\' in position 2 and the character \'c\' in position 4 to \'a\'. The string then becomes \\"aaaa\\", which results in a substring of length 4. Another possible transformation is changing the characters at positions 3 and 4 to \'b\' resulting in \\"abbb\\". In the second example, you can change the character \'a\' at position 1 to \'b\', transforming the string to \\"aaabbbbcc\\", which results in a longest substring of length 5.","solution":"def longest_substring_after_k_moves(k, s): from collections import defaultdict def max_length_with_char(c): left = 0 right = 0 max_len = 0 count_diff = 0 while right < len(s): if s[right] != c: count_diff += 1 while count_diff > k: if s[left] != c: count_diff -= 1 left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len max_result = 0 for char in set(s): max_result = max(max_result, max_length_with_char(char)) return max_result"},{"question":"You are given an integer n. Your task is to determine the minimum number of operations required to reduce n to 1. You can perform the following operations: 1. If n is divisible by 2, you can divide n by 2. 2. If n is divisible by 3, you can divide n by 3. 3. Subtract 1 from n. Input The first line of the input contains an integer t (1 ≤ t ≤ 5000) — the number of test cases. Each of the next t lines contains an integer n (1 ≤ n ≤ 10^7). Output For each test case, print the minimum number of operations required to reduce n to 1. Example Input 4 10 15 18 2 Output 3 4 3 1 Explanation For input 10: One possible way to get to 1 is -> 10 / 2 = 5 -> 5 - 1 = 4 -> 4 / 2 = 2 -> 2 / 2 = 1 (3 operations)","solution":"def min_operations_to_reduce_to_one(n): Returns the minimum number of operations required to reduce n to 1 using the given operations: divide by 2, divide by 3, subtract 1. dp = [0] * (n + 1) for i in range(2, n + 1): operations = dp[i - 1] if i % 2 == 0: operations = min(operations, dp[i // 2]) if i % 3 == 0: operations = min(operations, dp[i // 3]) dp[i] = operations + 1 return dp[n] def min_operations_to_reduce_to_one_multiple_cases(test_cases): return [min_operations_to_reduce_to_one(n) for n in test_cases]"},{"question":"There is a labyrinth with N rooms numbered from 1 to N. Each room is connected bi-directionally by a certain number of pathways, where each pathway has a unique length. Every room also contains a certain amount of treasure. You are initially in room 1, and your goal is to collect the maximum amount of treasure possible within a specified limit on the total length of pathways you can traverse. Write a program to determine the maximum amount of treasure you can collect without exceeding the given path length limit L. Constraints * 1 ≦ N ≦ 100,000 * 0 ≦ length of each pathway ≦ 10^6 * 0 ≦ treasure in each room ≦ 10^9 * 0 ≦ L ≦ 10^12 Input The input is given from Standard Input in the following format: N L T_1 T_2 ... T_N M u_1 v_1 l_1 u_2 v_2 l_2 ... u_M v_M l_M Where N is the number of rooms, L is the maximum total length of pathways you can traverse, T_i denotes the treasure in the i-th room, and each pathway is described by two rooms it connects (u_i and v_i) and its length (l_i). Output Print the maximum possible amount of treasure you can collect. Examples Input 4 10 5 10 15 20 4 1 2 5 1 3 4 2 3 3 3 4 1 Output 50 Input 3 20 10 20 30 2 1 2 10 1 3 10 Output 60 Input 5 7 1 2 3 4 5 6 1 2 2 2 3 2 3 4 2 4 5 2 1 3 5 1 4 6 Output 10","solution":"import heapq def maximum_treasure(n, L, treasures, edges): graph = [[] for _ in range(n)] for u, v, l in edges: graph[u-1].append((l, v-1)) graph[v-1].append((l, u-1)) pq = [(0, 0)] # (current length, current node) max_treasures = 0 visited = [False] * n current_length = [float(\'inf\')] * n current_length[0] = 0 while pq: length, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True max_treasures += treasures[node] for next_length, next_node in graph[node]: if not visited[next_node] and length + next_length <= L and length + next_length < current_length[next_node]: current_length[next_node] = length + next_length heapq.heappush(pq, (length + next_length, next_node)) return max_treasures # Example usage n = 4 L = 10 treasures = [5, 10, 15, 20] edges = [(1, 2, 5), (1, 3, 4), (2, 3, 3), (3, 4, 1)] print(maximum_treasure(n, L, treasures, edges)) # Output: 50"},{"question":"Leah loves strings and recently discovered the joy of manipulating them. She wants to test your skills in handling strings. She gives you a string `S` consisting of lowercase Latin letters and asks you to perform `Q` operations of the following types: 1. **Update Operation**: Replace the character at a specific position (1-indexed) of the string with another character. 2. **Query Operation**: Find the lexicographically smallest and largest substrings of length `k` within the current string. Help Leah perform these operations efficiently. # Input The first line contains the string `S` with length `n` (1 ≤ n ≤ 10^5). The second line contains a single integer `Q` (1 ≤ Q ≤ 10^5), the number of operations. Each of the next `Q` lines contains an operation described by one of the following formats: - For an update operation: `1 p c` where `p` (1 ≤ p ≤ n) is the position in the string to be updated and `c` is the new character. - For a query operation: `2 k` where `k` is the length of the substring (1 ≤ k ≤ n). # Output For each query operation, print two space-separated strings, the lexicographically smallest and largest substrings of length `k`. # Example Input ``` abacaba 5 2 3 1 4 z 2 3 1 7 y 2 5 ``` Output ``` aba cab aaa cza abacy abycy ``` # Explanation **Initial string:** \\"abacaba\\" 1. **Query 1:** Substrings of length 3 are \\"aba\\", \\"bac\\", \\"aca\\", \\"cab\\", \\"aba\\". The smallest is \\"aba\\" and the largest is \\"cab\\". 2. **Update 1:** Replace character at position 4 with \'z\'. The string becomes \\"abazaba\\". 3. **Query 2:** Substrings of length 3 are now \\"aba\\", \\"baz\\", \\"aza\\", \\"zab\\", \\"aba\\". The smallest is \\"aba\\" and the largest is \\"zab\\". 4. **Update 2:** Replace character at position 7 with \'y\'. The string becomes \\"abazaby\\". 5. **Query 3:** Substrings of length 5 are now \\"abaza\\", \\"bazab\\", \\"azaby\\". The smallest is \\"abaza\\" and the largest is \\"bazab\\".","solution":"def process_operations(S, operations): result = [] S = list(S) # Convert to list for mutable string operations for operation in operations: op = operation.split() if op[0] == \'1\': # Update operation p = int(op[1]) - 1 # Convert to 0-indexed c = op[2] S[p] = c elif op[0] == \'2\': # Query operation k = int(op[1]) substrings = [S[i:i + k] for i in range(len(S) - k + 1)] substrings = [\'\'.join(substring) for substring in substrings] smallest = min(substrings) largest = max(substrings) result.append(f\\"{smallest} {largest}\\") return result"},{"question":"You are given a list of N integers representing the heights of buildings in a skyline, where each building has a uniform width of 1 unit. Write a program to determine the maximum water that can be trapped between the buildings after it rains. The buildings and the water trapped between them can be visualized as an array, where each integer represents the height of a building and each 0 between two integers represents a potential location where water might be trapped. Constraints: - All values in input are integers. - 1 ≤ N ≤ 100 - 1 ≤ Building height ≤ 1000 Input Input is given from Standard Input in the following format: N H_1 H_2 ... H_N Output Print the maximum water that can be trapped between the buildings. Examples Input 6 3 0 0 2 0 4 Output 10 Input 7 1 2 1 2 1 2 1 Output 2 Input 4 4 3 2 1 Output 0","solution":"def max_water_trapped(heights): Function to determine the maximum water that can be trapped between the buildings. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = list(map(int, input().strip().split())) N = data[0] heights = data[1:] print(max_water_trapped(heights))"},{"question":"A software company has designed a new file system, and they want to test it with a series of file operations over a directory. The directory is initialized with a hierarchical structure where the root directory is represented by a single \\"/\\" and other files and directories are represented by their paths, using \\"/\\" as the delimiter between directories and subdirectories. The company needs a tool to analyze the resulting structure after a sequence of operations. An operation could be: 1. **Add Directory or File** - The company specifies a path where a new directory or file is added. 2. **Delete Directory or File** - The company specifies a path of a directory or file to be deleted. If a directory is specified, all its subdirectories and files are also deleted. 3. **List Directory Contents** - The company specifies a path of a directory, and wants a sorted list of all immediate subdirectories and files under it. You are asked to implement a system that processes these operations and maintains the directory structure accordingly. Input The input consists of multiple operations. The first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of operations. Each of the following t lines describes an operation in one of the following formats: * `ADD path` — Adds a directory or file at the specified path. * `DELETE path` — Deletes the directory or file at the specified path, and all its contents if it is a directory. * `LIST path` — Lists the contents of the directory at the specified path. Output For each `LIST` operation, print the contents of the specified directory on a new line, space-separated, and sorted lexicographically. Print \\"DIRECTORY NOT FOUND\\" for `DELETE` or `LIST` operations if the specified path does not exist. Example Input: 10 ADD /dir1 ADD /dir1/file1 ADD /dir1/dir2 LIST /dir1 DELETE /dir1/dir2 LIST /dir1 DELETE /dir1/file1 LIST /dir1 DELETE /dir3 LIST / Output: dir2 file1 file1 DIRECTORY NOT FOUND Note In this case: * After the first three operations, `/dir1` contains a `file1` and a subdirectory `dir2`. * The first `LIST /dir1` operation shows `dir2 file1`. * Deleting `/dir1/dir2` leaves only `file1` in `/dir1`. * The second `LIST /dir1` operation shows `file1`. * Deleting `/dir1/file1` leaves `/dir1` empty. * The third `LIST /dir1` operation outputs nothing. * Deleting `/dir3` prints \\"DIRECTORY NOT FOUND\\" since it does not exist. * The final `LIST /` operation shows `dir1`.","solution":"class FileSystem: def __init__(self): self.fs = {} def _split_path(self, path): parts = path.strip(\'/\').split(\'/\') if parts == [\'\']: return [] return parts def add(self, path): parts = self._split_path(path) current = self.fs for part in parts: if part not in current: current[part] = {} current = current[part] def delete(self, path): parts = self._split_path(path) current = self.fs for part in parts[:-1]: if part not in current: return \\"DIRECTORY NOT FOUND\\" current = current[part] if parts[-1] in current: del current[parts[-1]] else: return \\"DIRECTORY NOT FOUND\\" def list(self, path): parts = self._split_path(path) current = self.fs for part in parts: if part not in current: return \\"DIRECTORY NOT FOUND\\" current = current[part] return \' \'.join(sorted(current.keys())) def process_operations(self, operations): results = [] for operation in operations: op = operation.split() if op[0] == \\"ADD\\": self.add(op[1]) elif op[0] == \\"DELETE\\": result = self.delete(op[1]) if result: results.append(result) elif op[0] == \\"LIST\\": result = self.list(op[1]) results.append(result) return results # Example testing fs = FileSystem() operations = [ \\"ADD /dir1\\", \\"ADD /dir1/file1\\", \\"ADD /dir1/dir2\\", \\"LIST /dir1\\", \\"DELETE /dir1/dir2\\", \\"LIST /dir1\\", \\"DELETE /dir1/file1\\", \\"LIST /dir1\\", \\"DELETE /dir3\\", \\"LIST /\\" ] print(fs.process_operations(operations))"},{"question":"Farmer John has a field of crops arranged in an `n x m` grid. Each cell of the grid represents a section of the field that can either be fertile (represented by \'1\') or barren (represented by \'0\'). Farmer John wants to identify distinct fertile patches in his field, where a patch is defined as a contiguous block of fertile cells connected either horizontally or vertically. Given the grid representation of the field, your task is to calculate the number of distinct fertile patches. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. - The next `n` lines each contain `m` characters (\'0\' or \'1\'), representing the state of the field. # Output - Print a single integer — the number of distinct fertile patches in the field. # Example Input ``` 3 4 1100 0110 0011 ``` Output ``` 2 ``` Explanation In the first example, there are two distinct fertile patches: - One starting from the top-left corner spreading to the middle of the grid. - Another starting from the bottom-right corner. Input ``` 4 4 1010 0101 1010 0101 ``` Output ``` 8 ``` Explanation In the second example, there are eight distinct fertile patches, each consisting of a single \'1\' cell. Good luck!","solution":"def num_distinct_fertile_patches(n, m, field): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or field[x][y] == \'0\': return field[x][y] = \'0\' dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) patches_count = 0 for i in range(n): for j in range(m): if field[i][j] == \'1\': dfs(i, j) patches_count += 1 return patches_count"},{"question":"In a galaxy far away, there is a land with N unique villages. These villages are connected by M bidirectional roads, each with a travel cost. The villages are numbered from 1 to N. The king of this land wants to construct a road network to ensure that all villages are connected with the minimum possible total cost. This new road network must be a subset of the given roads and must not form any cycles. In other words, the king wants to construct a Minimum Spanning Tree (MST). You are given N, M, and the details of the roads. Determine the minimum cost to connect all villages directly or indirectly via the new road network. Input The first line contains two integers N and M, where N is the number of villages and M is the number of roads. The next M lines each contain three space-separated integers u, v, and w, where u and v are the villages connected by the road and w is the cost to travel on that road. Output Print a single integer representing the minimum cost required to connect all the villages. Constraints 1 ≤ N ≤ 10^5 0 ≤ M ≤ 10^5 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 It is guaranteed that all villages are initially connected directly or indirectly. SAMPLE INPUT 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 SAMPLE OUTPUT 6 Explanation One possible MST in this setup includes roads with costs 1 (1-2), 2 (2-3), and 3 (2-4). This ensures all villages are connected with a minimum total cost of 6.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_weight += w mst_edges += 1 if mst_edges == n - 1: break return mst_weight def minimum_cost_to_connect_villages(N, M, roads): edges = [tuple(map(int, road)) for road in roads] return kruskal_mst(N, edges)"},{"question":"Write a program to implement the Insertion Sort algorithm which sorts a sequence B in ascending order. The algorithm should follow the provided pseudocode: InsertionSort(B) 1 for i = 1 to B.length-1 2 key = B[i] 3 j = i - 1 4 while j >= 0 and B[j] > key 5 B[j + 1] = B[j] 6 j = j - 1 7 B[j + 1] = key Your program should also print the number of shifts that occur in line 5 of the pseudocode. Constraints 1 ≤ N ≤ 100 Input The first line of the input includes an integer N, the number of elements in the sequence. The second line contains N elements of the sequence separated by space characters. Output The output consists of 2 lines. In the first line, print the sorted sequence. Two contiguous elements of the sequence should be separated by a space. In the second line, print the number of shift operations. Examples Input 5 4 3 2 10 12 Output 2 3 4 10 12 3 Input 6 12 11 13 5 6 Output 5 6 11 12 13 7","solution":"def insertion_sort(B): Perform insertion sort on the list B and return the sorted list and the number of shifts made during the sorting process. n = len(B) shifts = 0 for i in range(1, n): key = B[i] j = i - 1 while j >= 0 and B[j] > key: B[j + 1] = B[j] j -= 1 shifts += 1 B[j + 1] = key return B, shifts # Function to handle input and output def process_input_output(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) B = list(map(int, data[1:1+N])) sorted_B, shifts = insertion_sort(B) print(\' \'.join(map(str, sorted_B))) print(shifts)"},{"question":"There is a land consisting of multiple cities connected by bidirectional roads. The cities are labeled from 1 to n. Each road has a certain toll cost associated with it. Given a starting city `s` and a destination city `d`, your task is to determine the minimum total toll cost required to travel from city `s` to city `d`. Input The first line contains three space-separated integers, n (2 ≤ n ≤ 1000), m (1 ≤ m ≤ 10000), and q (1 ≤ q ≤ 100). - `n` denotes the number of cities. - `m` denotes the number of bidirectional roads. - `q` denotes the number of queries. The next `m` lines each contain three space-separated integers, u, v, and c, indicating that there is a road between cities u and v with a toll cost of c (1 ≤ c ≤ 1000). The next `q` lines each contain two space-separated integers, s and d, representing a query asking for the minimum total toll cost to travel from city `s` to city `d`. Output For each query, output the minimum toll cost required to travel from city `s` to city `d`. If there is no path from `s` to `d`, output `-1`. Examples Input 5 6 2 1 2 4 2 3 1 1 3 7 3 4 3 4 5 2 1 5 9 1 4 3 5 Output 8 5 Note In the first query, the minimum toll cost to travel from city 1 to city 4 is via city 3 with a total cost of 4 + 1 + 3 = 8. In the second query, the minimum toll cost to travel from city 3 to city 5 is directly through city 4 with a total cost of 3 + 2 = 5.","solution":"import heapq def dijkstra(graph, start, n): Uses Dijkstra\'s algorithm to find the shortest path from start to all other nodes in the graph. distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, cost in graph[current_node]: distance = current_distance + cost if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def min_toll_costs(n, m, edges, queries): Find minimum toll cost for each query from the list of queries. graph = {i: [] for i in range(1, n+1)} for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) results = [] for s, d in queries: distances = dijkstra(graph, s, n) if distances[d] == float(\'inf\'): results.append(-1) else: results.append(distances[d]) return results"},{"question":"A company is holding a contest where participants are required to build the tallest possible tower using blocks of various heights. Each block has a unique height, and a tower is constructed by stacking blocks on top of each other. However, you must follow one rule: the height of each block on top must be strictly greater than the height of the block immediately below it. Given the heights of the blocks available, determine the maximum number of blocks that can be used to build such a tower. Input Input will begin with an integer n (1 ≤ n ≤ 100000), the number of blocks available. Following this is a line with n integers, each indicating the height of a block. All heights are positive integers not exceeding 109. Output Print the maximum number of blocks that can be used to build the tower. Examples Input 6 3 4 5 1 2 6 Output 6 Input 4 10 20 30 40 Output 4 Input 5 5 5 5 5 5 Output 1 Note In the first test case, the blocks can be used in the order 1, 2, 3, 4, 5, 6 to build a tower of maximum height. In the second test case, all blocks can be used as they are in strictly increasing order. In the third test case, only one block can be used because no strict increase can be formed with identical blocks.","solution":"def max_blocks_for_tower(n, heights): Determines the maximum number of blocks that can be used to build a tower following the rule that each block on top must be strictly greater than the block immediately below it. Parameters: n (int): the number of blocks available. heights (list): a list of integers indicating the height of each block. Returns: int: the maximum number of blocks that can be used. if n == 0: return 0 # Sort the blocks in ascending order to easily build the tallest tower. heights.sort() # Initialize the count with 1 as we can always use at least one block. count = 1 # Compare each block with the previous block to count maximum increasing sequence. for i in range(1, n): if heights[i] > heights[i - 1]: count += 1 return count"},{"question":"Create a program that takes a list of integers and returns a new list containing only the prime numbers from the original list. The program should handle cases where the input can be of varying lengths, with each integer falling between 1 and 100,000. Input The input is given in the following format: n v1 v2 :: vn The first line gives the number of integers n, and the following n lines give the integer vi representing the ith number. Output Please output a list of prime numbers, each number in a new line. If there are no prime numbers, output \\"No primes\\". Example Input 6 10 15 3 7 12 19 Output 3 7 19","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_primes(numbers): Returns a list of prime numbers from the given list of integers. primes = [num for num in numbers if is_prime(num)] if not primes: return \\"No primes\\" return primes"},{"question":"Given an integer `x` (1 ≤ x ≤ 1000000000), determine the number of \'1\' bits in its binary representation. Input The input consists of a single integer `x`. Output Print a single integer representing the number of \'1\' bits in the binary representation of `x`. Examples Input 5 Output 2 Input 7 Output 3 Input 32 Output 1 Input 255 Output 8 Input 1023 Output 10","solution":"def count_one_bits(x): Returns the number of \'1\' bits in the binary representation of x. Args: x: int - the integer to be converted into binary and count \'1\' bits (1 ≤ x ≤ 1000000000) Returns: int - the number of \'1\' bits in the binary representation of x return bin(x).count(\'1\')"},{"question":"Free Cabin Platform You are given a vertical array representing the heights of a series of platforms in a warehouse. Each platform acts as a potential step to the next one that is higher. The starting point is below the first platform, and the goal is to identify the first platform that is significantly higher than both its previous and next platforms, making it a \\"free-standing\\" platform. Write a function `find_free_cabin_platform(heights)` that takes a list of integers, `heights`, where each integer represents the height of a platform. The function should return the index of the first \\"free-standing\\" platform. A platform is considered \\"free-standing\\" if it is greater than the platform immediately before it and the platform immediately after it. If no such platform exists, return -1. # Constraints - The length of the heights array, n, is at least 3. - Each element in the heights array is a non-negative integer. # Example ```python find_free_cabin_platform([3, 2, 6, 5, 3, 7, 8]) # Output: 2 find_free_cabin_platform([1, 2, 3, 4, 5]) # Output: -1 ```","solution":"def find_free_cabin_platform(heights): Identifies the first \\"free-standing\\" platform. A platform is considered \\"free-standing\\" if it is greater than the platform immediately before it and the platform immediately after it. :param heights: List of integers representing the heights of platforms. :return: Index of the first \\"free-standing\\" platform or -1 if none exists. for i in range(1, len(heights) - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: return i return -1"},{"question":"You are given a list of N non-negative integers. Your task is to find the maximum number of consecutive odd integers that can be formed in any subarray of the given list. Constraints * The integer N is between 1 and 100 (inclusive). * Each integer in the list is between 0 and 100 (inclusive). Input Input is given from Standard Input in the following format: N A1 A2 ... AN Output Print the maximum number of consecutive odd integers in any subarray of the given list. Examples Input 5 1 2 3 4 5 Output 1 Input 8 1 3 5 7 2 9 11 13 Output 4","solution":"def max_consecutive_odds(arr): Returns the maximum number of consecutive odd integers in any subarray of the given list. max_count = 0 current_count = 0 for num in arr: if num % 2 == 1: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"You are given a tree with N nodes (numbered from 1 to N) and N-1 edges. Each edge has a weight assigned to it. Your task is to process Q queries of two types: 1. **Update**: Change the weight of an edge. 2. **Query**: Calculate the maximum weight on the path between two given nodes. Input The first line contains an integer N denoting the number of nodes. Each of the next N-1 lines contains three integers u, v, and w denoting the two endpoints of an edge and its weight, respectively. The next line contains an integer Q denoting the number of queries. Each of the next Q lines represents a query and contains four integers: type, a, b, and c. If the type is `1`, it represents an update and means changing the weight of the edge between nodes `a` and `b` to `c`. If the type is `2`, it represents a query to find the maximum weight on the path between nodes `a` and `b`. Output For each query of type `2`, output a single integer denoting the maximum weight on the path between the given nodes. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ u, v, a, b ≤ N * 1 ≤ w, c ≤ 10^9 * 1 ≤ Q ≤ 10^5 Example Input: 5 1 2 3 1 3 4 2 4 2 2 5 6 3 2 2 5 1 2 4 1 2 2 5 Output: 6 6 Explanation Initially, the path between nodes 2 and 5 is 2-1-3-2-4-5 with maximum weight 6. After the update, the weight of the edge between nodes 2 and 4 changes to 1. The maximum weight on the path between nodes 2 and 5 is still 6.","solution":"import sys import collections class Tree: def __init__(self, n): self.n = n self.graph = collections.defaultdict(list) self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.max_edge = [-1] * (n + 1) self.edge_weights = collections.defaultdict(dict) self.LOG = 20 self.binary_ancestor = [[-1] * self.LOG for _ in range(n + 1)] self.binary_max = [[-1] * self.LOG for _ in range(n + 1)] def add_edge(self, u, v, w): self.graph[u].append((v, w)) self.graph[v].append((u, w)) self.edge_weights[u][v] = w self.edge_weights[v][u] = w def dfs(self, u, p, d, max_w): self.parent[u] = p self.depth[u] = d self.max_edge[u] = max_w for v, w in self.graph[u]: if v == p: continue self.binary_max[v][0] = w self.binary_ancestor[v][0] = u self.dfs(v, u, d + 1, w) def preprocess_ancestors(self): for i in range(1, self.LOG): for node in range(1, self.n + 1): if self.binary_ancestor[node][i - 1] != -1: p = self.binary_ancestor[node][i - 1] self.binary_ancestor[node][i] = self.binary_ancestor[p][i - 1] self.binary_max[node][i] = max(self.binary_max[node][i - 1], self.binary_max[p][i - 1]) def max_weight_path(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u max_w = -1 diff = self.depth[u] - self.depth[v] for i in range(self.LOG): if diff & (1 << i): max_w = max(max_w, self.binary_max[u][i]) u = self.binary_ancestor[u][i] if u == v: return max_w for i in reversed(range(self.LOG)): if self.binary_ancestor[u][i] != self.binary_ancestor[v][i]: max_w = max(max_w, self.binary_max[u][i], self.binary_max[v][i]) u = self.binary_ancestor[u][i] v = self.binary_ancestor[v][i] max_w = max(max_w, self.binary_max[u][0], self.binary_max[v][0]) return max_w def update_edge(self, u, v, new_w): old_w = self.edge_weights[u][v] if u in self.edge_weights and v in self.edge_weights[u]: self.edge_weights[u][v] = new_w self.edge_weights[v][u] = new_w else: return if self.depth[u] < self.depth[v]: u, v = v, u binary_child = [self.binary_ancestor[u][0]] self.binary_max[u][0] = new_w for i in range(1, self.LOG): if self.binary_ancestor[u][i - 1] != -1: p = self.binary_ancestor[u][i - 1] self.binary_ancestor[u][i] = self.binary_ancestor[p][i - 1] self.binary_max[u][i] = max(self.binary_max[u][i - 1], self.binary_max[p][i - 1]) def solve(n, edges, queries): tree = Tree(n) for u, v, w in edges: tree.add_edge(u, v, w) tree.dfs(1, -1, 0, -1) tree.preprocess_ancestors() results = [] for query in queries: type_, a, b, c = query if type_ == 1: tree.update_edge(a, b, c) elif type_ == 2: result = tree.max_weight_path(a, b) results.append(result) return results"},{"question":"You are given an array of integers and a target sum. Your task is to find three unique elements from the array whose sum is closest to the target sum. If there are multiple answers, return any one of them. Input The first line contains two integers n and target (3 ≤ n ≤ 3000, -10^9 ≤ target ≤ 10^9) — the number of elements in the array and the target sum. The second line contains n integers ai ( -10^9 ≤ ai ≤ 10^9) — the elements of the array. It is guaranteed that there is at least one valid triplet in the array. Output Print three integers which are the elements of the triplet whose sum is closest to the target. The elements should be printed on a single line, separated by single spaces. If there are multiple answers, print any of them. Example Input 5 1 -1 2 1 -4 3 Output -1 1 2 Note In the example above, the triplet (-1, 1, 2) gives the closest sum (1) to the target sum (1). Another possible triplet could be (-1, -4, 3) which gives the same sum.","solution":"def three_sum_closest(nums, target): Returns three integers from the list nums whose sum is closest to the target. nums.sort() closest_sum = float(\'inf\') closest_triplet = () for i in range(len(nums) - 2): # Applying two-pointer approach after the current element left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] # If this triplet is closer to target than the previous closest, update closest if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum closest_triplet = (nums[i], nums[left], nums[right]) # Move the pointers based on the sum comparison with the target if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return closest_triplet # Exact match found return closest_triplet"},{"question":"You are managing a warehouse of packages where each package has a weight associated with it. The warehouse is organized as a grid of packages containing n rows and m columns. Each cell in the grid contains a package with a weight. You have a constraint that any row or column of packages can be moved together and rearranged. The objective is to find the maximum weight of any single package after rearranging the rows and columns of the grid. To clarify, you can only rearrange the rows or columns as a whole, but cannot change the sequence of weights within individual rows or columns. Input - A single line containing two integers n and m, representing the number of rows and the number of columns in the grid (1 ≤ n, m ≤ 10^3). - n lines follow, each containing m integers, where each integer in the j-th column of the i-th row represents the weight of the package at position (i, j) in the grid. All weights are integers between 1 and 10^9. Output - A single integer representing the maximum weight of any single package after rearranging the rows and columns. Example Input ``` 3 4 10 1 5 7 3 9 2 6 4 8 11 12 ``` Output ``` 12 ``` Explanation: The maximum weight that can be achieved by rearranging rows or columns is by moving the package with weight 12 to any position in the grid. Hence, the output is 12.","solution":"def max_package_weight(n, m, grid): Returns the maximum weight of any single package after rearranging the rows and columns of the grid. Parameters: n (int): number of rows m (int): number of columns grid (list of list of int): 2D list representing weights of packages in the grid Returns: int: the maximum weight of any single package after rearranging max_weight = 0 for row in grid: max_weight = max(max_weight, max(row)) return max_weight"},{"question":"A company has designed a collaborative task management system for their teams, allowing employees to assign tasks to each other. Each task assignment is bidirectional, meaning if employee A assigns a task to employee B, then employee B is also considered to have assigned the same task to employee A. However, due to a bug in the system, some tasks were mistakenly assigned in one direction only. You are given a list of task assignments and need to verify if it is possible to correct the data such that each task appears as a bidirectional assignment or if it\'s impossible with the given assignments. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of employees. The second line contains an integer m (0 ≤ m ≤ 200000) — the number of task assignments. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a task assignment from employee u to employee v. Output If it is impossible to correct the data to make all assignments bidirectional, print \\"NO\\" (without quotes). Otherwise, print \\"YES\\" (without quotes) followed by the corrected list of assignments. Examples Input 4 4 1 2 2 1 3 4 4 3 Output YES 1 2 2 1 3 4 4 3 Input 3 3 1 2 2 3 3 1 Output NO Note In the first example, the task assignments are already bidirectional, so the answer is \\"YES\\". In the second example, there is no way to bidirectionally assign all tasks as some tasks have been assigned in a single direction (e.g., 1 to 2, 2 to 3, but no corresponding assignments from 2 to 1, etc.). Thus, the answer is \\"NO\\".","solution":"def check_and_correct_assignments(n, m, assignments): assignment_set = set() for u, v in assignments: assignment_set.add((u, v)) corrected_assignments = [] for u, v in assignment_set: if (v, u) not in assignment_set: return \\"NO\\" if (u, v) not in corrected_assignments and (v, u) not in corrected_assignments: corrected_assignments.append((u, v)) corrected_assignments.append((v, u)) result = [\\"YES\\"] for u, v in corrected_assignments: result.append(f\\"{u} {v}\\") return \\"n\\".join(result) # Example Usage: # n = 4 # m = 4 # assignments = [(1, 2), (2, 1), (3, 4), (4, 3)] # print(check_and_correct_assignments(n, m, assignments))"},{"question":"**Problem Statement** Patty the snake is an adventurous snake who loves to explore different mazes. She has found a rectangular grid maze of R rows and C columns. Each cell in the maze is either an open cell (\'.\') that Patty can slither through or a blocked cell (\'#\') that Patty cannot pass through. Patty starts her journey at the top-left corner of the maze (cell (1,1)) and her goal is to reach the bottom-right corner of the maze (cell (R,C)). Patty can only move to adjacent cells (up, down, left, or right) and she cannot move diagonally or pass through blocked cells. Patty wants to know how many distinct paths she can take to reach her goal, but Patty is also aware that some mazes may not have any valid path from start to goal. Your task is to determine the number of distinct paths Patty can take to reach her goal, if any. **Input** - The first line of the input contains a single integer T, the number of test cases. - Each test case starts with two integers R and C, the number of rows and columns in the maze, respectively. - The next R lines each contain a string of length C representing the maze row. A \'.\' character indicates an open cell and a \'#\' character indicates a blocked cell. **Output** For each test case, output the number of distinct paths from the top-left corner to the bottom-right corner of the maze. If no valid path exists, output `0`. **Constraints** - 1 ≤ T ≤ 100 - 1 ≤ R, C ≤ 10 - The maze is represented by exactly R lines each containing C characters \'.\' or \'#\'. **Example** Input: ``` 3 3 3 ... .#. ... 4 4 ..#. .. ..#. .... 2 2 #. .# ``` Output: ``` 2 2 0 ``` **Explanation** - In the first test case, there are two distinct paths Patty can take: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) and (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). - In the second test case, there are also two distinct paths: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (4,2) -> (4,3) -> (4,4) and (1,1) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4). - In the third test case, there is no valid path from (1,1) to (2,2), hence the output is `0`.","solution":"def count_paths(maze, r, c, memo): if r >= len(maze) or c >= len(maze[0]) or maze[r][c] == \'#\': return 0 if r == len(maze) - 1 and c == len(maze[0]) - 1: return 1 if (r, c) in memo: return memo[(r, c)] down_paths = count_paths(maze, r + 1, c, memo) right_paths = count_paths(maze, r, c + 1, memo) memo[(r, c)] = down_paths + right_paths return memo[(r, c)] def distinct_paths_in_mazes(test_cases): results = [] for maze in test_cases: R, C = len(maze), len(maze[0]) memo = {} results.append(count_paths(maze, 0, 0, memo)) return results"},{"question":"Problem A group of islands are connected by underwater roads. Each road directly connects exactly two different islands and has a certain travel time. The islands and roads form a connected undirected graph (i.e., there is a path between any pair of islands). You need to find out the minimum time required to travel between island A and island B considering all possible paths. Constraints The input satisfies the following conditions. * 1 leq N leq 1000 (Number of islands) * 0 leq E leq 10^4 (Number of roads) * 1 leq x, y leq N * 1 leq t leq 10^6 Input The number of islands N and the number of roads E are given as integers on the first line. From the second line onwards, each road is described with three integers u , v , and t representing a road between islands u and v with a travel time of t . The last line contains the start island A and the destination island B. Output Output the minimum travel time to get from island A to island B as an integer. Examples Input 6 8 1 2 1 2 3 2 3 4 1 4 5 3 5 6 1 1 5 10 2 4 1 3 6 2 1 6 Output 5 Input 5 5 1 2 2 2 3 3 3 4 4 4 5 5 1 5 100 2 4 Output 7","solution":"import heapq from collections import defaultdict def dijkstra(graph, start, target): # Priority queue to store minimum distances pq = [(0, start)] # Dictionary to store the shortest path to each node shortest_paths = {start: 0} while pq: current_time, current_island = heapq.heappop(pq) if current_island == target: return current_time for neighbor, travel_time in graph[current_island]: time = current_time + travel_time if neighbor not in shortest_paths or time < shortest_paths[neighbor]: shortest_paths[neighbor] = time heapq.heappush(pq, (time, neighbor)) return float(\\"inf\\") def min_travel_time(N, E, roads, A, B): graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) return dijkstra(graph, A, B)"},{"question":"Erik enjoys working with sequences of integers. After analyzing several sequences, he became interested in finding the length of the longest increasing subsequence. A subsequence is any sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a program that determines the length of the longest increasing subsequence in a given sequence of integers. Input The first line contains a single integer n (1 ≤ n ≤ 200) — length of the sequence. The second line contains n integers separated by spaces, representing the sequence. Output Print the length of the longest increasing subsequence in the sequence. Examples Input 6 5 2 8 6 3 6 Output 3 Input 5 1 2 3 4 5 Output 5 Input 6 9 8 7 6 5 4 Output 1 Note In the first example, the longest increasing subsequence is [2, 6, 6] or [2, 3, 6]. In the second example, the sequence itself is strictly increasing, so the length of the longest increasing subsequence is equal to the length of the sequence. In the third example, the sequence is strictly decreasing, so the length of the longest increasing subsequence is 1 (any single element of the sequence). # Solution: To solve this problem, you can use dynamic programming. Here\'s a Python implementation of the solution: ```python def longest_increasing_subsequence(seq): if not seq: return 0 # Initialize the dp array where dp[i] represents the length of the longest increasing subsequence ending at i dp = [1] * len(seq) for i in range(1, len(seq)): for j in range(i): if seq[i] > seq[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Input reading n = int(input().strip()) seq = list(map(int, input().strip().split())) # Calculating the length of the longest increasing subsequence result = longest_increasing_subsequence(seq) print(result) ``` This code reads the input sequence, initializes a dynamic programming array to keep track of the longest increasing subsequence lengths, and iteratively updates this array based on previously calculated values. Finally, it prints the length of the longest increasing subsequence.","solution":"def longest_increasing_subsequence(seq): if not seq: return 0 # Initialize the dp array where dp[i] represents the length of the longest increasing subsequence ending at i dp = [1] * len(seq) for i in range(1, len(seq)): for j in range(i): if seq[i] > seq[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In a city, there\'s a special celebration planned where citizens gather in a rectangular grid style formation. A unique gift is to be handed out to specific individuals in positions that meet a certain criterion. The grid has m rows and n columns, and each cell in the grid can be represented by coordinates (i, j), where 1 ≤ i ≤ m and 1 ≤ j ≤ n. A gift is handed out only to those who are standing on cells that lie on the diagonal of the grid, from the top-left corner (1, 1) to the bottom-right corner (m, n). Given the dimensions of the grid, determine the number of people who will receive a gift. Input The only line of the input contains two integers m and n (1 ≤ m, n ≤ 10^9) — the number of rows and columns in the grid, respectively. Output Output one integer representing the number of people who will receive a gift. Example Input 4 4 Output 4 Explanation In a 4x4 grid, the diagonals from (1,1) to (4,4) are: (1,1), (2,2), (3,3), and (4,4). Therefore, 4 people get a gift. Input 3 5 Output 3 Explanation In a 3x5 grid, the diagonals from (1,1) to (3,3) are: (1,1), (2,2), and (3,3). Therefore, 3 people get a gift.","solution":"def number_of_people_who_receive_gifts(m, n): Given the dimensions of a grid, determine the number of people who will receive gifts. Gifts are handed out to people standing on the diagonal from the top-left corner to the bottom-right corner of the grid. Parameters: m (int): number of rows in the grid n (int): number of columns in the grid Returns: int: number of people who receive gifts # The number of people on the diagonal is the minimum of the number of rows and the number of columns return min(m, n)"},{"question":"Alex is working on a unique encryption algorithm that deals with segments of text strings. As part of the process, he needs a way to determine if a given string can be transformed into another string by reversing segments of the original string. You need to help Alex check if one string can be turned into the other by performing such operations. Alex can perform the following operation any number of times: 1. Choose two indices i and j (1 ≤ i ≤ j ≤ n) and reverse the segment of the string from index i to index j (inclusive). Indexing is 1-based. Write a program to decide whether it is possible to transform string s into string t by reversing its segments zero or more times. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines: - The first line contains the string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. - The second line contains the string t (1 ≤ |t| ≤ 10^5) consisting of lowercase English letters. It is guaranteed that the sum of the lengths of all s and t does not exceed 10^6 per test. Output For each test case, output \\"YES\\" if it is possible to transform s into t by performing the described operations, or \\"NO\\" otherwise. Example Input 3 abac baca hello holle abcde edcba Output YES YES YES Note In the first test case, s can be transformed to t by reversing the segment [2, 4]. In the second test case, s can be transformed to t by reversing the segment [2, 5]. In the third test case, s can be transformed to t by reversing the entire string.","solution":"def can_transform(s, t): Determines if string s can be transformed to string t by reversing segments of s. return sorted(s) == sorted(t) def process_test_cases(test_cases): Processes multiple test cases and returns the results for each case. results = [] for s, t in test_cases: if can_transform(s, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company has a unique policy for password creation. The policy is defined as follows: 1. Each password must be at least 8 characters long. 2. Each password must contain at least one uppercase letter, one lowercase letter, and one digit. 3. Each password must contain a special character from the set: {\'@\', \'#\', \'%\', \'&\', \'\'}. Given a list of passwords, write a program to check if each password complies with the company’s policy. Input: - The first line contains an integer N, the number of passwords. - The next N lines each contain a password. Output: For each password, output \\"YES\\" if it complies with the policy, otherwise output \\"NO\\". Constraints: - 1 ≤ N ≤ 100 - 1 ≤ Length of each password ≤ 100 Example: Input: 4 Password123@ short1& StrongPass# NoDigits Output: YES NO NO NO Explanation: 1. \\"Password123@\\" meets all the criteria, so the output is \\"YES\\". 2. \\"short1&\\" is less than 8 characters long, so the output is \\"NO\\". 3. \\"StrongPass#\\" does not contain any digits, so the output is \\"NO\\". 4. \\"NoDigits\\" does not contain any lowercase letters, so the output is \\"NO\\".","solution":"def validate_password(password): if len(password) < 8: return \\"NO\\" has_upper = False has_lower = False has_digit = False has_special = False special_characters = {\'@\', \'#\', \'%\', \'&\', \'\'} for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True if has_upper and has_lower and has_digit and has_special: return \\"YES\\" else: return \\"NO\\" def check_passwords(passwords): results = [] for password in passwords: results.append(validate_password(password)) return results"},{"question":"You are given a collection of n robots, each initially located at a distinct point on the integer coordinate plane. These robots need to align themselves on a straight line in such a way that the distance between every pair of adjacent robots is exactly the same (say \'d\' units). Each robot can move in the horizontal or vertical direction, but not diagonally. Your task is to determine if it is possible to align all of them on a straight line with the given condition. Input: The first line contains an integer n (2 ≤ n ≤ 1000) — the number of robots. Each of the next n lines contains two integers x and y (|x|, |y| ≤ 1000) — the coordinates of each robot. Output: Print \\"Yes\\" if it is possible to align all the robots on a straight line such that the distance between every pair of adjacent robots is the same. Otherwise, print \\"No\\". Examples: Input: 3 1 1 3 1 2 1 Output: Yes Input: 4 0 0 2 2 4 0 6 2 Output: No","solution":"def can_align_robots_on_straight_line(n, coordinates): Determines if all given robots can align themselves on a straight line. Args: n: int - number of robots coordinates: list of tuples - list containing (x, y) coordinates of robots Returns: str - \\"Yes\\" if it is possible to align all robots on a straight line, \\"No\\" otherwise. if n == 2: return \\"Yes\\" # Any two points are always collinear # Calculate slope between the first point and every other point x0, y0 = coordinates[0] x1, y1 = coordinates[1] dx = x1 - x0 dy = y1 - y0 for i in range(2, n): xi, yi = coordinates[i] if dx * (yi - y0) != dy * (xi - x0): return \\"No\\" return \\"Yes\\""},{"question":"In the world of competitive programming, teams in an arena compete by solving various programming problems. Each team starts with a score of zero and can either gain or lose points based on their performance on each problem. When a team submits a solution to a problem, they gain points equal to the difficulty of the problem if their solution is correct. If the solution is incorrect, they lose half the points of the problem\'s difficulty. The total score of each team cannot go below zero at any point. Your task is to write a program that tracks the scores of each team based on their attempts and outputs the final scores after all attempts have been processed. # Input - The first line contains two integers: - `n` (1 ≤ n ≤ 100) – the number of teams. - `m` (1 ≤ m ≤ 10000) – the number of attempts made by all teams. - The next `m` lines each contain: - `team_id` (1 ≤ team_id ≤ n) – the ID of the team making the attempt. - `problem_difficulty` (1 ≤ problem_difficulty ≤ 100) – the difficulty of the problem being attempted. - `result` – a string that is either \'correct\' or \'incorrect\' indicating the result of the attempt. # Output - Output `n` lines, each containing the final score of the corresponding team from team 1 to team n. # Example Input ``` 3 6 1 20 correct 2 50 incorrect 3 40 correct 1 10 incorrect 2 30 correct 3 20 incorrect ``` Output ``` 25 30 50 ``` # Explanation - Team 1: First gains 20 points (total = 20). Then loses 5 points (half of 10) (total = 15). - Team 2: First loses 25 points (half of 50) but cannot go below zero (total = 0). Then gains 30 points (total = 30). - Team 3: First gains 40 points (total = 40). Then loses 10 points (half of 20) (total = 30). The final scores of the teams are: - Team 1: 25 - Team 2: 30 - Team 3: 50","solution":"def calculate_final_scores(n, m, attempts): This function calculates the final scores of teams based on their problem-solving attempts. Parameters: n (int): number of teams m (int): number of attempts attempts (list): list of attempts where each attempt is a tuple of (team_id, problem_difficulty, result) Returns: list: final scores of the teams # Initialize scores for each team scores = [0] * n for attempt in attempts: team_id, problem_difficulty, result = attempt if result == \\"correct\\": scores[team_id - 1] += problem_difficulty elif result == \\"incorrect\\": scores[team_id - 1] = max(0, scores[team_id - 1] - problem_difficulty // 2) return scores"},{"question":"You are given a matrix of non-negative integers where each cell contains a value. The goal is to find the maximum value of any sub-matrix within the matrix. A sub-matrix is defined by its top-left and bottom-right coordinates, and includes all cells within those coordinates. To do this, you need to write a program that receives the dimensions of the matrix, followed by the matrix itself as input, and outputs the maximum value of any sub-matrix. Input The input is given in the following format: M N m_{1,1} m_{1,2} ... m_{1,N} m_{2,1} m_{2,2} ... m_{2,N} ... m_{M,1} m_{M,2} ... m_{M,N} - The first line provides the dimensions of the matrix: M (number of rows) and N (number of columns) ( 1 leq M, N leq 100 ). - The subsequent M lines provide the elements of the matrix, where each line contains N non-negative integers m_{i,j} ( 0 leq m_{i,j} leq 10^4 ). Output Output a single integer which is the maximum value of any sub-matrix within the given matrix. Examples # Input 3 3 1 2 3 4 5 6 7 8 9 # Output 45 # Input 2 4 1 2 3 4 5 6 7 8 # Output 36 Explanation of Examples # Example 1 Consider the 3x3 matrix: 1 2 3 4 5 6 7 8 9 In this example, the sub-matrix that produces the maximum sum is the entire matrix itself, resulting in ( 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45 ). # Example 2 Consider the 2x4 matrix: 1 2 3 4 5 6 7 8 In this case, the sub-matrix that gives the maximum sum is also the entire matrix, resulting in ( 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36 ). Note: Ensure that your program is optimized to handle the maximum input sizes efficiently.","solution":"def max_submatrix_sum(M, N, matrix): Returns the maximum value of any sub-matrix in the given MxN matrix. def calculate_prefix_sums(matrix): prefix_sums = [[0] * (N + 1) for _ in range(M + 1)] for i in range(1, M + 1): for j in range(1, N + 1): prefix_sums[i][j] = ( matrix[i-1][j-1] + prefix_sums[i-1][j] + prefix_sums[i][j-1] - prefix_sums[i-1][j-1] ) return prefix_sums # Calculate prefix sums for the matrix prefix_sums = calculate_prefix_sums(matrix) # Initialize the maximum sub-matrix sum max_sum = float(\'-inf\') # Iterate over all possible top-left and bottom-right coordinates for sub-matrices for r1 in range(1, M + 1): for r2 in range(r1, M + 1): for c1 in range(1, N + 1): for c2 in range(c1, N + 1): # Calculate sub-matrix sum using prefix sums sub_matrix_sum = ( prefix_sums[r2][c2] - prefix_sums[r1-1][c2] - prefix_sums[r2][c1-1] + prefix_sums[r1-1][c1-1] ) # Update maximum sum found max_sum = max(max_sum, sub_matrix_sum) return max_sum"},{"question":"Mark, a farmer, wants to distribute irrigation across his long strip of land. He can use sprinklers, but there is a limit to how far each sprinkler can cover. Given that sprinklers can be placed anywhere along the strip and each has a certain range, Mark wants to ensure that the entire length of his land is irrigated with a minimal number of sprinklers. - A sprinkler placed at position `x` with range `r` can cover from `x-r` to `x+r`. - The strip of land is represented as a 1D array of length `L`, where `L` is the length of the land. Write a program to determine the minimum number of sprinklers needed to cover the entire land. # Input - The first line contains two integers: `L` (1 ≤ L ≤ 10^5) representing the length of the land, and `n` (1 ≤ n ≤ 10^5) representing the number of sprinklers available. - The next `n` lines each contain two integers, `x` (0 ≤ x ≤ L) representing the position of a sprinkler and `r` (1 ≤ r ≤ L) representing the range of that sprinkler. # Output - Print a single integer — an integer that represents the minimum number of sprinklers required to cover the entire length of the land. If it\'s not possible to cover the entire land, print `-1`. # Examples Input ``` 10 3 2 3 4 2 6 4 ``` Output ``` 2 ``` Input ``` 8 2 0 3 6 2 ``` Output ``` -1 ``` # Explanation In the first example, sprinklers at positions 2 and 6 with ranges 3 and 4 respectively can together cover the entire strip of land from 0 to 10. In the second example, even though the sprinkler at position 0 with range 3 can cover from 0 to 3 and the sprinkler at position 6 with range 2 can cover from 4 to 8, there remains a gap between 3 and 4, implying it\'s impossible to cover the entire land.","solution":"def min_sprinklers(L, sprinklers): Determines the minimum number of sprinklers required to cover the entire length of the land. Args: L (int): length of the land sprinklers (list of tuples): each tuple contains position and range of sprinkler Returns: int: Minimum number of sprinklers needed or -1 if it\'s not possible to cover entire land # Convert each sprinkler to a coverage interval [x-r, x+r] coverage = [] for x, r in sprinklers: coverage.append((max(x - r, 0), min(x + r, L))) # Sort intervals based on starting position coverage.sort() # Variables to track the minimum number of sprinklers num_sprinklers = 0 i = 0 end_reach = 0 max_reach = 0 while end_reach < L: while i < len(coverage) and coverage[i][0] <= end_reach: max_reach = max(max_reach, coverage[i][1]) i += 1 if max_reach == end_reach: return -1 end_reach = max_reach num_sprinklers += 1 return num_sprinklers"},{"question":"You are given a list of N integers representing the number of sticks of varying lengths. You and your friend will take turns playing a game, starting with you. On each turn, a player can remove at least one stick of any single length. The player who is forced to remove the last stick loses the game. If both you and your friend play optimally, determine who will win. Constraints * 1 leq N leq 10^5 * 1 leq a_i leq 10^9 * All values in the input are integers. Input The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output If you will win, print `first`; if your friend will win, print `second`. Examples Input 3 1 2 3 Output first Input 4 1 1 1 1 Output second","solution":"def stick_game_winner(sticks): Determines the winner of the stick game. Returns \'first\' if the starting player wins, \'second\' otherwise. # If the number of sticks is odd, the first player will always win. # If the number of sticks is even, the second player will always win. if len(sticks) % 2 == 1: return \\"first\\" else: return \\"second\\""},{"question":"Write a function that takes an integer n and a list of k integers, and returns whether the list of integers forms an arithmetic progression up to n. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. Constraints * 1 leq n leq 10^6 * 1 leq k leq 10^5 * Each integer in the list is between 0 and n-1 Input The input is given in the following format. n e_0 ; e_1 ; ... ; e_{k-1} Output Output `True` if the list forms an arithmetic progression, otherwise `False`. Example Input 15 1 4 7 10 13 Output True Input 10 2 4 6 9 Output False","solution":"def is_arithmetic_progression(n, lst): if len(lst) < 2: return True # A list with less than 2 elements is trivially an arithmetic progression diff = lst[1] - lst[0] # Calculate the common difference for i in range(2, len(lst)): if lst[i] - lst[i - 1] != diff: return False return True"},{"question":"You are given N distinct integers arranged in a sequence. A sequence is considered beautiful if there exists some integer K (K >= 2), such that every subsequence of length K is strictly increasing or strictly decreasing. Your task is to determine if the given sequence is beautiful or not. Input - The first line contains an integer N, the number of elements in the sequence. - The second line contains N distinct integers, the elements of the sequence. Output - Print \\"YES\\" if the sequence is beautiful, otherwise print \\"NO\\". Constraints - 1 ≤ N ≤ 2 * 10^5 - Each element of the sequence is a distinct integer in the range [-10^9, 10^9]. Example Input: 5 1 3 4 2 5 Output: NO Input: 4 2 1 4 3 Output: YES Explanation: In the first example case, there is no K (K >= 2) such that every subsequence of length K is strictly increasing or strictly decreasing. Hence, the sequence is not beautiful. In the second example case, K = 2 makes every subsequence of length K either strictly increasing (2 4 and 1 3) or strictly decreasing (2 1 and 4 3), and K = 3 works as well (2 1 3 and 1 4 3). Hence, the sequence is beautiful.","solution":"def is_beautiful_sequence(N, sequence): Determines if the given sequence is beautiful according to the problem\'s conditions. A sequence is considered beautiful if there exists some integer K (K >= 2), such that every subsequence of length K is strictly increasing or strictly decreasing. Parameters: N (int): The number of elements in the sequence. sequence (List[int]): The sequence of N distinct integers. Returns: str: \\"YES\\" if the sequence is beautiful, otherwise \\"NO\\". # A single-element sequence is trivially beautiful. if N < 2: return \\"YES\\" # Initialize flags for checking alternation between increasing and decreasing is_increasing = sequence[0] < sequence[1] found_pattern = True for i in range(1, N-1): next_is_increasing = sequence[i] < sequence[i+1] if next_is_increasing == is_increasing: found_pattern = False break is_increasing = next_is_increasing return \\"YES\\" if found_pattern else \\"NO\\""},{"question":"Given a string s, find the length of the longest substring with all unique characters. Constraints * 1 ≤ length of s ≤ 1000 Input s A single string s consisting of lowercase characters is given. Output Print the length of the longest substring with all unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_index_map = {} longest = 0 start_index = 0 for current_index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_index: start_index = char_index_map[char] + 1 char_index_map[char] = current_index longest = max(longest, current_index - start_index + 1) return longest"},{"question":"In a certain programming challenge, participants are asked to manipulate strings according to specific rules. Given a string consisting of lowercase letters, you are required to transform this string into a \\"balanced\\" format. A \\"balanced\\" string is defined as one where the number of occurrences of its most frequent character does not exceed the number of occurrences of its least frequent character by more than one. Your task is to write a function that modifies the given string to meet the \\"balanced\\" requirement. You can achieve this by either: 1. Removing existing characters, or 2. Adding new characters (same or different), but the modified string should use lowercase letters only. You should aim to create a string that is of minimal length while still \\"balancing\\" the characters according to the criteria. Input An input contains a single string. Output Print the balanced version of the string. If there are multiple balanced versions of the string, print any one of them. Constraints - The input string will have a length between 1 and 100, inclusive. - The string will contain only lowercase English letters (\'a\' to \'z\'). Sample Input 1 \\"aabbcc\\" Sample Output 1 \\"aabbcc\\" Sample Input 2 \\"aaab\\" Sample Output 2 \\"aabb\\" Sample Input 3 \\"xyz\\" Sample Output 3 \\"xyz\\" Output details For the first sample input, the string \\"aabbcc\\" is already balanced, so no modifications are needed. For the second sample input, you can modify the string \\"aaab\\" to \\"aabb\\" by adding one \'b\' character. For the third sample input, the string \\"xyz\\" is balanced with each character appearing exactly once.","solution":"from collections import Counter def balance_string(s): Balances the input string according to the defined criteria. if not s: return s char_count = Counter(s) min_char_count = min(char_count.values()) max_char_count = max(char_count.values()) while max_char_count - min_char_count > 1: for char in char_count: if char_count[char] == max_char_count: char_count[char] -= 1 break min_char_count = min(char_count.values()) max_char_count = max(char_count.values()) balanced_str = \\"\\" for char, count in char_count.items(): balanced_str += char * count return balanced_str"},{"question":"Nina and Kavi are playing a game on a NxM grid. Each cell contains an integer that can be positive or negative. The players take turns, starting with Nina. In each turn, a player chooses a cell with a non-zero value, performs an operation, and then changes the value of the cell according to the operation: 1. The player selects any cell with a non-zero value. 2. The player can either: - Reduce the value to zero (this is only allowed if the number is positive). - Change the value to its negative (this is only allowed if the number is positive). - Double the value (this is only allowed if the number is negative). 3. The change of the cell value must ensure that it remains within the integer limits. The game ends when no player can make a move (i.e., all values are zero or further changes make no sense according to rules). The player unable to make a valid move loses the game. Both players play optimally to their advantage. Given the initial state of the grid, determine who will win if both players play optimally. # Input - The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. - Each test case starts with a line containing two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the grid. - The next `n` lines each contain `m` space-separated integers — the initial values in the grid. The values range between -10^6 and 10^6. # Output For each test case, print \\"Nina\\" if she wins, otherwise print \\"Kavi\\". # Example Input ```plaintext 3 2 2 1 -4 0 3 1 3 -5 0 7 3 3 -1 -2 -3 4 0 0 7 8 9 ``` Output ```plaintext Nina Kavi Nina ``` # Note In the first test case, Nina can start by selecting the cell (1, 1) and change it from `1` to `-1`. From here Nina and Kavi will continue to play optimally until all modifications lead to zero values. In the second test case, Nina starts by doubling the first cell, resulting the value to be `-10`. It keeps the cycle going, eventually ending with Kavi making a final move. In the third test case, Nina has several possible choices to initiate the game where positive values will make optimum path for her to win eventually by changing subsequent cells.","solution":"def determine_winner(grid): Determines the winner between Nina and Kavi based on the rules given. positive_count = 0 negative_count = 0 for row in grid: for value in row: if value > 0: positive_count += 1 elif value < 0: negative_count += 1 # Nina wins if the total number of moves (each non-zero value is a move) is odd total_moves = positive_count + negative_count if total_moves % 2 == 1: return \\"Nina\\" else: return \\"Kavi\\" def game_outcome(test_cases): results = [] for n, m, grid in test_cases: results.append(determine_winner(grid)) return results"},{"question":"You are provided with a list of integers that represent the strengths of soldiers. Your task is to first sort this list in non-decreasing order. After sorting, you have to answer multiple queries, each asking for the maximum strength of the weakest soldier given a certain threshold. For each query, you will be given a threshold strength value. You need to find the smallest strength in the list that is equal to or greater than the given threshold and print that value. If no such strength exists, print -1 for that query. Input The first line contains an integer n (1 ≤ n ≤ 100 000), representing the number of soldiers. The second line contains n integers representing the strengths of the soldiers. Each strength value is between 1 and 10^9. The third line contains an integer q (1 ≤ q ≤ 10 000), representing the number of queries. Each of the next q lines contains a single integer x (1 ≤ x ≤ 10^9), representing the threshold strength for that query. Output For each query, print the maximum strength of the weakest soldier that meets or exceeds the threshold. If no such strength exists, print -1. Examples Input 6 5 6 8 3 1 7 4 4 10 6 2 Output 5 -1 6 3 Input 5 9 4 2 3 7 3 5 1 8 Output 7 2 9 Note In the first example, after sorting the strengths, we get: 1, 3, 5, 6, 7, 8. For the queries: - For x = 4, the smallest strength >= 4 is 5. - For x = 10, no strength meets this condition, so the answer is -1. - For x = 6, the smallest strength >= 6 is 6. - For x = 2, the smallest strength >= 2 is 3. In the second example, after sorting the strengths, we get: 2, 3, 4, 7, 9. For the queries: - For x = 5, the smallest strength >= 5 is 7. - For x = 1, the smallest strength >= 1 is 2. - For x = 8, the smallest strength >= 8 is 9.","solution":"from bisect import bisect_left def max_of_weakest_soldier(strengths, queries): Returns the result for each query. strengths.sort() results = [] for query in queries: idx = bisect_left(strengths, query) if idx < len(strengths): results.append(strengths[idx]) else: results.append(-1) return results"},{"question":"Emily has a stack of papers, each containing a number ai (1 ≤ ai ≤ 109). She needs to perform k operations according to the following types: 1. 1 p x — push the number x on top of the stack p times; 2. 2 q — remove the top q numbers from the stack; 3. 3 — find the maximum number currently in the stack. As Emily is very methodical, she managed to perform all operations within two seconds. Can you write a program that mimics her efficiency? Input The first line of the input contains an integer k (1 ≤ k ≤ 100 000) — the number of operations. Then follow k lines with operation descriptions. Each line contains integers tpi and may contain p, q, or x (1 ≤ tpi ≤ 3, 1 ≤ p ≤ 100, 1 ≤ q ≤ 100), depending on the type of the operation: - tpi = 1 contains p and x (1 ≤ p ≤ 100, 1 ≤ x ≤ 109) - tpi = 2 contains q (1 ≤ q ≤ 100) - tpi = 3 Output For each query of the third type, print the maximum number in the stack. If the stack is empty when the query is made, print \\"Empty\\". Examples Input 5 1 3 5 1 2 10 3 2 4 3 Output 10 5 Note Initially, the stack is empty. After the operations: 1. Push the number 5, three times: the stack becomes [5, 5, 5]. 2. Push the number 10, two times: the stack becomes [5, 5, 5, 10, 10]. 3. The maximum number in the stack is 10. 4. Remove the top four numbers: the stack becomes [5]. 5. The maximum number in the stack is 5.","solution":"def manage_stack(k, operations): Manages a stack with a set of operations and returns results for type 3 operations. Parameters: k (int): Number of operations operations (list of tuples): List of operations to perform on the stack Returns: list of int: Results of type 3 operations stack = [] result = [] for operation in operations: if operation[0] == 1: p, x = operation[1], operation[2] stack.extend([x] * p) elif operation[0] == 2: q = operation[1] del stack[-q:] elif operation[0] == 3: if stack: result.append(max(stack)) else: result.append(\\"Empty\\") return result"},{"question":"You are given two strings, `s` and `t`, both consisting of lowercase Latin letters. You have to convert string `s` to string `t` using the minimum number of operations. In one operation, you can: 1. Remove any one character from the string `s`. 2. Insert any one character into any position in the string `s`. 3. Replace any one character in the string `s` with any character. These operations should be performed in such a way as to make string `s` equal to string `t`. Write a function `min_operations(s: str, t: str) -> int` that calculates and returns the minimum number of operations required to convert `s` to `t`. # Input - s: a string consisting of lowercase Latin letters (1 ≤ len(s) ≤ 1000). - t: a string consisting of lowercase Latin letters (1 ≤ len(t) ≤ 1000). # Output - An integer representing the minimum number of operations required to convert `s` to `t`. # Examples ``` Input s = \\"kitten\\" t = \\"sitting\\" Output 3 Explanation Convert \\"kitten\\" to \\"sitting\\" as follows: kitten -> sitten (replace \'k\' with \'s\') sitten -> sittin (replace \'e\' with \'i\') sittin -> sitting (insert \'g\') ``` ``` Input s = \\"flaw\\" t = \\"lawn\\" Output 2 Explanation Convert \\"flaw\\" to \\"lawn\\" as follows: flaw -> law (remove \'f\') law -> lawn (insert \'n\') ``` # Note - The function should handle edge cases where the strings are already equal (no operations needed). - Consider the dynamic programming approach to solve the problem efficiently.","solution":"def min_operations(s: str, t: str) -> int: Calculate the minimum number of operations required to convert string s to string t. m, n = len(s), len(t) # DP table where dp[i][j] represents the minimum number of operations required to convert s[:i] to t[:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases for i in range(1, m + 1): dp[i][0] = i # All characters need to be removed from s for j in range(1, n + 1): dp[0][j] = j # All characters need to be inserted into s # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed if characters are the same else: dp[i][j] = min( dp[i - 1][j] + 1, # Remove a character from s dp[i][j - 1] + 1, # Insert a character into s dp[i - 1][j - 1] + 1 # Replace a character in s ) return dp[m][n]"},{"question":"You are given n points in a 2D plane, and your task is to find the smallest rectangle (sides parallel to the coordinate axes) which can accommodate at least k points inside or on its boundary. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of points and the number of points that need to be enclosed by the rectangle, respectively. The next n lines contain two integers each, x and y (1 ≤ x, y ≤ 10^9) — the coordinates of the points. Output Output four integers x1, y1, x2, y2 which are the coordinates of the bottom-left and top-right corners of the smallest rectangle which can accommodate at least k points. If there are multiple solutions, print any of them. The sides of the rectangle should be parallel to the coordinate axes. Examples Input 5 3 1 2 2 3 3 4 4 5 5 6 Output 1 2 3 4 Input 6 5 3 5 1 2 5 1 7 6 2 9 4 8 Output 1 1 7 9 Note In the first example, one possible way to include at least 3 points in the smallest rectangle is to use the points (1,2), (2,3), and (3,4) forming a rectangle with bottom-left corner at (1,2) and top-right corner at (3,4). In the second example, one possible way to form a rectangle that includes at least 5 points is to include the points (3,5), (1,2), (5,1), (7,6), and (2,9) forming a rectangle with bottom-left corner at (1,1) and top-right corner at (7,9).","solution":"def find_smallest_rectangle(n, k, points): Find the smallest rectangle that can accommodate at least k points. The sides of the rectangle are parallel to the coordinate axes. def is_valid(rect, points, k): count = 0 x1, y1, x2, y2 = rect for x, y in points: if x1 <= x <= x2 and y1 <= y <= y2: count += 1 return count >= k points.sort() x_coords = sorted([x for x, y in points]) y_coords = sorted([y for x, y in points]) for i in range(n - k + 1): for j in range(i + k - 1, n): for p in range(n - k + 1): for q in range(p + k - 1, n): x1, x2 = x_coords[i], x_coords[j] y1, y2 = y_coords[p], y_coords[q] if is_valid((x1, y1, x2, y2), points, k): return x1, y1, x2, y2 # Example usage: # n = 5 # k = 3 # points = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)] # print(find_smallest_rectangle(n, k, points))"},{"question":"There is a row of houses, each house having some amount of money hidden inside it. You are a professional robber with one constraint: You cannot rob two adjacent houses because the police will be alerted. Given a list of non-negative integers representing the amount of money hidden in each house, determine the maximum amount of money you can rob tonight without alerting the police. Write a function to solve the problem using dynamic programming. # Function Signature ```python def rob(nums: List[int]) -> int: ``` # Input - A list of integers `nums` where each integer represents the amount of money in each house. - Constraints: - 0 ≤ nums.length ≤ 100 - 0 ≤ nums[i] ≤ 400 # Output - An integer representing the maximum amount of money you can rob without alerting the police. # Example Example 1: ```python Input: [2, 3, 2] Output: 4 Explanation: Rob house 1 (money = 2) and then rob house 3 (money = 2). ``` Example 2: ```python Input: [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). ``` Example 3: ```python Input: [5, 9, 1, 3, 7, 1] Output: 16 Explanation: Rob house 1 (money = 5), rob house 3 (money = 1), and rob house 5 (money = 7). ``` # Note To solve this problem, consider defining the state at each house index `i` as the maximum amount of money that can be robbed up to that house index. The transition between states will depend on whether you include the money at the current house and previously skipped one or not.","solution":"from typing import List def rob(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return nums[0] # Initialize dp array dp = [0] * len(nums) dp[0] = nums[0] if len(nums) > 1: dp[1] = max(nums[0], nums[1]) # Fill the dp array for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) # The last element of dp contains the result return dp[-1]"},{"question":"A farmer has a rectangular field in which he wants to plant trees such that each tree is positioned at the vertices of the rectangles formed. Each vertex must have exactly one tree. You are given the position of two opposite trees (i.e., trees that are diagonal from each other) and you need to calculate the position of the remaining two trees. Input The first line contains four space-separated integers x1, y1, x2, y2 (-100 ≤ x1, y1, x2, y2 ≤ 100), where x1 and y1 are the coordinates of the first tree, and x2 and y2 are the coordinates of the second tree. It is guaranteed that the given points are distinct. Output If there is no solution to the problem, print -1. Otherwise, print four space-separated integers x3, y3, x4, y4 that correspond to the coordinates of the two remaining trees. If there are multiple solutions, you can output any of them. Examples Input 0 0 2 3 Output 0 3 2 0 Input 1 1 4 5 Output 1 5 4 1 Input -1 -2 3 4 Output -1 4 3 -2","solution":"def find_remaining_trees(x1, y1, x2, y2): Given the coordinates of two diagonal trees, find the coordinates of the remaining two trees to form a rectangle. Return -1 if the solution doesn\'t exist. if x1 == x2 or y1 == y2: return -1 x3, y3 = x1, y2 x4, y4 = x2, y1 return x3, y3, x4, y4"},{"question":"John is organizing a competitive programming event where he needs to set up multiple coding challenges. To monitor the preparation progress, he has decided to track the completion status of the challenges on different days. He needs a program to help him determine the first day when a given number of challenges will be completed. Given a list of dates and the number of challenges completed on each of those dates, write a program to find the first date when the total number of challenges completed meets or exceeds a specified target. Input The input is given in the following format: n t d_1 c_1 d_2 c_2 ... d_n c_n The first line contains two integers n (1 ≤ n ≤ 10^5) and t (1 ≤ t ≤ 10^9), where n is the number of days for which data is provided, and t is the target number of challenges to be completed. The next n lines each contain a date (format YYYY-MM-DD) and an integer c_i (0 ≤ c_i ≤ 10^9), representing the date and the number of challenges completed on that date, respectively. Output Output the first date when the total number of challenges completed meets or exceeds the target t. If the target is not met, output \\"Not achieved\\". Examples Input 5 7 2023-01-01 2 2023-01-02 3 2023-01-03 0 2023-01-04 4 2023-01-05 1 Output 2023-01-04 Input 3 10 2021-12-25 1 2021-12-26 2 2021-12-27 3 Output Not achieved","solution":"def first_day_to_meet_target(n, t, challenge_data): Determines the first day when the total number of challenges completed meets or exceeds the target. Args: n: int - Number of days with challenge data. t: int - Target number of challenges. challenge_data: list of tuples - Each tuple contains a date (str) and an integer representing the challenges completed on that date. Returns: str - The date when the cumulative challenges meet or exceed the target or \\"Not achieved\\". total_completed = 0 for date, challenges in challenge_data: total_completed += challenges if total_completed >= t: return date return \\"Not achieved\\""},{"question":"Alex loves to play with numbers and recently stumbled upon an interesting problem. He calls a number \\"Special\\" if the sum of its digits raised to the power of their respective positions (1-based index) equals the number itself. For example, 89 is a special number because 8^1 + 9^2 = 89. Write a program to determine if a given number is \\"Special\\". Input: A single positive integer. Output: Output \\"YES\\" if the number is special, otherwise output \\"NO\\". Constraints: 1 <= number <= 10^6 Example: Input: 89 Output: YES Explanation: 8^1 + 9^2 = 8 + 81 = 89, hence the output is YES. Example: Input: 100 Output: NO Explanation: 1^1 + 0^2 + 0^3 = 1, which is not equal to 100, hence the output is NO.","solution":"def is_special_number(num): Determines if a number is a \\"Special\\" number. A number is special if the sum of its digits raised to the power of their respective positions (1-based index) equals the number itself. Parameters: num (int): The number to be checked. Returns: str: \\"YES\\" if the number is special, otherwise \\"NO\\". digits = list(str(num)) sum_powers = sum(int(digit) ** (index + 1) for index, digit in enumerate(digits)) return \\"YES\\" if sum_powers == num else \\"NO\\""},{"question":"Given an N by N grid on a plane representing a city, you are tasked with finding the shortest path a taxicab can take to travel from one point to another. Each block in the city has certain coordinates represented by integers (x, y). Assuming the taxicab can only travel along the grid blocks (not diagonally), your task is to determine the minimal number of blocks the taxicab must travel to get from the start location to the destination. Input: - The first line contains a single integer T, the number of test cases. - For each test case, the first line contains an integer N, the size of the grid. - The second line contains two integers sx and sy, the coordinates of the start location. - The third line contains two integers dx and dy, the coordinates of the destination. Output: For each test case, output a single integer, the minimal number of blocks the taxicab needs to travel to get from the start to the destination. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 0 ≤ sx, sy, dx, dy < N SAMPLE INPUT: 3 5 0 0 4 4 4 1 1 3 3 3 2 2 0 0 SAMPLE OUTPUT: 8 4 4 Explanation: SAMPLE CASE 1: The shortest path from (0, 0) to (4, 4) is to move 4 blocks to the right and then 4 blocks up, resulting in a total of 8 blocks. SAMPLE CASE 2: The shortest path from (1, 1) to (3, 3) can be 2 blocks to the right and 2 blocks up, resulting in a total of 4 blocks. SAMPLE CASE 3: The shortest path from (2, 2) to (0, 0): 2 blocks left and 2 blocks down, resulting in a total of 4 blocks.","solution":"def minimal_travel_blocks(T, test_cases): Given the number of test cases and each test case\'s data, computes the minimal travel blocks required for a taxicab in a grid. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains - N (int): Size of the grid - sx (int), sy (int): Coordinates of the start location - dx (int), dy (int): Coordinates of the destination location Returns: list of int: Minimal travel blocks for each test case results = [] for test_case in test_cases: N, sx, sy, dx, dy = test_case minimal_blocks = abs(dx - sx) + abs(dy - sy) results.append(minimal_blocks) return results"},{"question":"One day while learning about sequences, Jasmine came across a special type of sequence called the \\"Arithmetic Progression\\" (AP). An AP is a sequence of numbers in which the difference of any two successive members is a constant. This constant is called the common difference. Enthusiastic to explore more, Jasmine decided to create her own sequence of numbers. She chose two integers, n and d, where n is the number of elements in her AP and d is the common difference. To make it more interesting, she decided that the first element of her sequence should always be 1. Your task is to help Jasmine by generating the AP based on her chosen n and d. Then, you need to calculate the sum of all integers in the generated sequence. Input The input contains two integer numbers n and d (2 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^3). Output In a single line, print the sum of all integers in the generated sequence. Examples Input 5 3 Output 25 Input 3 5 Output 19 Note: In the first example, Jasmine\'s sequence is [1, 4, 7, 10, 13]. The sum of the sequence is 1 + 4 + 7 + 10 + 13 = 35. In the second example, Jasmine\'s sequence is [1, 6, 11]. The sum of the sequence is 1 + 6 + 11 = 18.","solution":"def sum_of_arithmetic_progression(n, d): Returns the sum of the first n terms of the arithmetic progression with the first term 1 and common difference d. # Using formula for the nth term of an arithmetic sequence: a_n = a + (n-1)d # Here, a (the first term) is 1, so the nth term a_n = 1 + (n-1)d # Sum of the first n terms of an arithmetic sequence S_n = n/2 * (first term + nth term) nth_term = 1 + (n - 1) * d ap_sum = n * (1 + nth_term) // 2 return ap_sum"},{"question":"You are given an array of integers a_1, a_2, ..., a_n. In one operation you can pick any index i (1 ≤ i ≤ n) and increment the value at that index by 1. You want to make all elements of the array equal. Let g(n) be the minimum number of operations required to make all the elements of the array equal. You need to find g(n). Input The first line of input contains one integer n (1 ≤ n ≤ 200 000): the number of elements in the array. The next line of input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9): the elements of the array. Output Print one integer, the minimum number of operations required to make all the elements of the array equal. Examples Input 4 1 2 3 4 Output 6 Input 3 10 10 10 Output 0","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations required to make all the elements of the array equal. n: int - number of elements in the array arr: list of int - elements of the array # Find the maximum element in the array max_val = max(arr) # Compute the number of operations to make all elements equal to the maximum element operations = sum(max_val - x for x in arr) return operations"},{"question":"You need to write a function that determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Your function should be efficient in terms of time complexity given the constraint. Input A single string s. Output Return \\"YES\\" if the input string is a valid palindrome, and \\"NO\\" otherwise. Constraints 1 ≤ length of s ≤ 1000 SAMPLE INPUT 1 \\"A man, a plan, a canal: Panama\\" SAMPLE OUTPUT 1 YES SAMPLE INPUT 2 \\"race a car\\" SAMPLE OUTPUT 2 NO","solution":"def is_valid_palindrome(s): Determines if the given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): Input string. Returns: str: \\"YES\\" if the input string is a valid palindrome, \\"NO\\" otherwise. # Convert to lowercase and filter out non-alphanumeric characters filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered string is equal to its reverse is_palindrome = filtered_chars == filtered_chars[::-1] return \\"YES\\" if is_palindrome else \\"NO\\""},{"question":"Ivan and his friends are playing a game where they need to form groups based on their skill levels. Each group must have either exactly `k` members or at least `k` members but not more than `m` members. Ivan wants to know the maximum number of groups that can be formed from the available players. You are given an integer array `skills` where `skills[i]` represents the skill level of the `i-th` player. A group is valid if it contains exactly `k` players or any number of players between `k` and `m` inclusive. Your task is to output the maximum number of such valid groups that can be formed. **Input:** - First line contains three integers `n`, `k`, and `m` (1 ≤ n ≤ 100000, 1 ≤ k ≤ m ≤ n) - the number of players, the minimum size of a group and the maximum size of a group. - Second line contains `n` integers, `skills1, skills2, ..., skillsn` (1 ≤ skills[i] ≤ 100000) - the skill levels of the players. **Output:** - Print a single integer - the maximum number of valid groups that can be formed. **Examples:** Input: ``` 8 3 4 1 2 3 4 5 6 7 8 ``` Output: ``` 2 ``` Input: ``` 10 3 5 1 1 1 1 1 1 1 1 1 1 ``` Output: ``` 2 ``` **Note:** - In the first example, we can form two groups: `3 4 5` and `6 7 8`. - In the second example, we can form two groups each containing five players: `1 1 1 1 1` and `1 1 1 1 1`.","solution":"def max_groups(n, k, m, skills): Returns the maximum number of valid groups that can be formed where each group has either exactly `k` members or any number of members between `k` and `m` inclusive. :param n: int - number of players :param k: int - minimum size of a group :param m: int - maximum size of a group :param skills: List[int] - the skill levels of the players :return: int - maximum number of valid groups # Sort skills in descending order skills.sort(reverse=True) max_groups = 0 i = 0 while i + k <= n: if i + m <= n: i += m else: i += k max_groups += 1 return max_groups"},{"question":"Consider an array of integers where each element is either a 0 or a 1. You need to find the length of the longest contiguous subarray of 1s that can be obtained by flipping at most one 0 to a 1. Write a function `maxConsecutiveOnes` that accepts an array of integers and returns the length of the longest contiguous subarray of 1s after flipping at most one 0. **Function Signature:** ```python def maxConsecutiveOnes(nums: List[int]) -> int: ``` **Input:** - A single line containing a list of integers, each element being either 0 or 1. **Output:** - A single integer representing the length of the longest contiguous subarray of 1s after flipping at most one 0. **Constraints:** - 1 ≤ nums.length ≤ 10^5 **Sample Input:** ``` [1, 0, 1, 1, 0, 1] ``` **Sample Output:** ``` 4 ``` **Explanation:** By flipping the first 0 (at index 1) to 1, the array becomes [1, 1, 1, 1, 0, 1], where the longest contiguous subarray of 1s has length 4. Here are the detailed steps: 1. Consider flipping index 1 (0 to 1), array becomes [1, 1, 1, 1, 0, 1], longest subarray of 1s is 4. 2. Consider flipping index 4 (0 to 1), array becomes [1, 0, 1, 1, 1, 1], longest subarray of 1s is also 4. Hence, 4 is the maximum we can achieve by flipping one 0 to 1.","solution":"from typing import List def maxConsecutiveOnes(nums: List[int]) -> int: max_len = 0 zero_flip = -1 # To keep track of the zero index which is flipped left = 0 for right in range(len(nums)): if nums[right] == 0: if zero_flip != -1: left = zero_flip + 1 zero_flip = right max_len = max(max_len, right - left + 1) return max_len"},{"question":"David is a software developer, and he loves working on complex data structures. Recently, Elina introduced him to a new type of data manipulation method, which fascinated him. He quickly came up with a challenging problem that even Elina found tough to crack. Can you help Elina solve it? David has a binary tree with n nodes, where each node has a unique integer value from 1 to n (inclusive). He needs to answer multiple queries related to the subtree of any given node x. The queries are of two types: 1. Update the value of the node at position i with a new value v. 2. Calculate the sum of all node values in the subtree rooted at a node x. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9) — the values of the nodes. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between node u and node v, thus forming a tree structure. The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines describes the queries in one of the two forms: 1. 1 i v - query of the 1st type (1 ≤ i ≤ n, 1 ≤ v ≤ 10^9). 2. 2 x - query of the 2nd type (1 ≤ x ≤ n). Output For each query of the 2nd type, output the sum of all node values in the subtree rooted at x. Example Input 5 10 20 30 40 50 1 2 1 3 2 4 2 5 3 2 1 1 2 100 2 2 Output 150 140 Note In the first query of the second type, the sum of all node values in the subtree rooted at node 1 is 10+20+30+40+50=150. In the query of the first type, the value of node 2 is updated to 100. In the second query of the second type, the sum of all node values in the subtree rooted at node 2 is 100+40+50=190, but due to different node connections, might end up with lesser sum if node traversal or tree root change.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] class BinaryTree: def __init__(self, n, values): self.nodes = [None] + [TreeNode(value) for value in values] # 1-based index self.subtree_sums = [0] * (n + 1) self.visited = [False] * (n + 1) def add_edge(self, u, v): self.nodes[u].children.append(v) self.nodes[v].children.append(u) def calculate_subtree_sums(self, node): self.visited[node] = True total_sum = self.nodes[node].value for child in self.nodes[node].children: if not self.visited[child]: total_sum += self.calculate_subtree_sums(child) self.subtree_sums[node] = total_sum return total_sum def update_node_value(self, i, new_value): diff = new_value - self.nodes[i].value self.nodes[i].value = new_value self.adjust_subtree_sums(i, diff, -1) def adjust_subtree_sums(self, node, diff, parent): self.subtree_sums[node] += diff for child in self.nodes[node].children: if child != parent: self.adjust_subtree_sums(child, diff, node) def get_subtree_sum(self, x): return self.subtree_sums[x] def process_queries(n, values, edges, queries): tree = BinaryTree(n, values) for u, v in edges: tree.add_edge(u, v) tree.calculate_subtree_sums(1) result = [] for query in queries: if query[0] == 1: _, i, v = query tree.update_node_value(i, v) elif query[0] == 2: _, x = query result.append(tree.get_subtree_sum(x)) return result"},{"question":"You are given an n x n grid representing a soccer field. Each cell in the grid is either empty (represented by \'.\'), occupied by a player (represented by \'P\'), or contains an obstacle (represented by \'#\'). Your task is to determine if all the players can move to form a perfect line (horizontal, vertical, or diagonal) without crossing any obstacles. Players can move in any of the 8 possible directions (up, down, left, right, and the 4 diagonals). Input The first line contains an integer n (1 ≤ n ≤ 100), which is the size of the grid. The following n lines contain n characters each (\'.\', \'P\', or \'#\'). Output Print \\"YES\\" if it\'s possible for all players to align in a perfect line. Otherwise, print \\"NO\\". Examples Input 3 P.P #.# P.P Output NO Input 3 P.. .P. ..P Output YES","solution":"def can_players_align(n, grid): directions = [(1, 0), (0, 1), (1, 1), (1, -1)] # down, right, down-right, down-left players = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == \'P\'] if not players: return \\"YES\\" # No players, considered aligned def check_line(x, y, dx, dy): for px, py in players: if (px - x) * dy != (py - y) * dx: # cross-product for collinearity check return False return True for px, py in players: for dx, dy in directions: if all(0 <= px + k*dx < n and 0 <= py + k*dy < n and grid[px + k*dx][py + k*dy] != \'#\' for k in range(n)): if check_line(px, py, dx, dy): return \\"YES\\" return \\"NO\\""},{"question":"Sarah has a collection of N distinct books, and she wants to arrange them on her bookshelf. She is trying to figure out how many different unique arrangements (permutations) she can make with her books. The task is to write a program that calculates the total number of unique arrangements (permutations) of Sarah\'s N books and prints this number. Input: - The first and only line of input contains an integer N (1 ≤ N ≤ 100), the number of books. Output: - Print the number of unique arrangements (permutations) of N books. Examples: Input: 3 Output: 6 Input: 5 Output: 120","solution":"import math def count_permutations(n): Calculates the total number of unique arrangements (permutations) of n distinct books. Parameters: n (int): the number of books Returns: int: the total number of permutations return math.factorial(n)"},{"question":"Zoe loves hiking in the mountains. She is currently planning a trip that involves hiking through a series of mountain peaks. Each peak has a certain height, and she can ascend or descend to neighboring peaks as long as the height difference between the current peak and the next peak is within her limits. The peaks form a linear arrangement, and Zoe can only move to the neighboring peaks (either left or right). Additionally, there is a certain restriction on the maximum change in altitude that Zoe\'s legs can handle between two consecutive peaks. Zoe wants to start her trip at any peak and hike to as many peaks as possible without exceeding her maximum altitude change limit. She can start at any peak and the trip ends when she can no longer move to a neighboring peak under the given restriction. **Objective:** Determine the maximum number of peaks Zoe can visit from any starting peak under the given altitude change restriction. # Input The first line of the input contains one integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of three lines: - The first line contains one integer `n` (1 ≤ n ≤ 1 000) — the number of peaks in the arrangement. - The second line contains one integer `k` (1 ≤ k ≤ 10^9) — the maximum permitted altitude difference Zoe can handle between two consecutive peaks. - The third line contains `n` space-separated integers representing the heights of the peaks (1 ≤ height ≤ 10^9). # Output For each test case, print one integer — the maximum number of peaks Zoe can visit starting from any initial peak without exceeding the altitude change limit `k`. # Example Input ```plaintext 2 5 2 1 3 1 2 5 4 1 1 2 4 3 ``` Output ```plaintext 4 2 ``` # Explanation In the first test case, Zoe can start at the first peak (height 1), move to the second peak (height 3), then to the third peak (height 1), and finally to the fourth peak (height 2), visiting a total of 4 peaks. In the second test case, the maximum number of peaks Zoe can visit without exceeding the altitude change limit is 2. Starting at any peak, the allowed path may only include one additional peak due to the altitude restrictions.","solution":"def max_peaks_zoe_can_visit(t, test_cases): results = [] for i in range(t): n, k, heights = test_cases[i] max_count = 0 for start in range(n): count = 1 for j in range(start, n - 1): if abs(heights[j + 1] - heights[j]) <= k: count += 1 else: break max_count = max(max_count, count) results.append(max_count) return results"},{"question":"Leon and his friends love solving puzzles. One day, they come across a particular type of number puzzle that gets them really curious. Can you help them solve it? You are given an integer n. You need to find the minimum number of operations required to reduce n to 1. The operations you can perform are: 1. If n is divisible by 3, you may divide n by 3. 2. If n is divisible by 2, you may divide n by 2. 3. You may subtract 1 from n. Input A single line contains an integer n (1 ≤ n ≤ 100). Output On a single line print the minimum number of operations required to reduce the given integer to 1. Examples Input 10 Output 3 Input 27 Output 3 Input 1 Output 0 Note In the first sample, the sequence of operations to reduce 10 to 1 is: 10 -> 9 -> 3 -> 1. In the second sample, the sequence is: 27 -> 9 -> 3 -> 1. In the third sample, no operations are needed since n is already 1.","solution":"def min_operations_to_reduce_to_one(n): Returns the minimum number of operations required to reduce n to 1. if n == 1: return 0 dp = [0] * (n + 1) for i in range(2, n + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"You are given a series of strings representing program instructions. Each instruction is a command to modify a number, `x`, starting with an initial value of 0. The instructions can be of four types: 1. `add n` - This command adds `n` (an integer) to `x`. 2. `subtract n` - This command subtracts `n` (an integer) from `x`. 3. `multiply n` - This command multiplies `x` by `n` (an integer). 4. `reset` - This command resets the value of `x` to 0. Your task is to simulate the execution of these instructions and output the final value of `x`. Input The first line of input contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each test case starts with an integer `m` (1 ≤ m ≤ 1000) — the number of instructions. The next `m` lines contain the instructions in the format described above. Output For each test case, output a single integer — the final value of `x` after executing all instructions. Example Input 3 3 add 5 multiply 2 subtract 3 4 reset add 10 subtract 5 multiply 3 2 reset subtract 4 Output 7 15 -4 Explanation For the first test case: - Initially, `x` is 0. - The `add 5` instruction makes `x` equal to 5. - Then, `multiply 2` makes `x` equal to 10. - Finally, `subtract 3` results in `x` equal to 7. For the second test case: - The `reset` instruction sets `x` to 0. - Then, `add 10` makes `x` equal to 10. - Next, `subtract 5` makes `x` equal to 5. - Finally, `multiply 3` makes `x` equal to 15. For the third test case: - The `reset` instruction sets `x` to 0. - Finally, the `subtract 4` results in `x` equal to -4.","solution":"def process_instructions(t, test_cases): results = [] for case in test_cases: x = 0 for instruction in case: parts = instruction.split() command = parts[0] if command == \\"add\\": x += int(parts[1]) elif command == \\"subtract\\": x -= int(parts[1]) elif command == \\"multiply\\": x *= int(parts[1]) elif command == \\"reset\\": x = 0 results.append(x) return results"},{"question":"Bob and Alice are playing a game with a strip of N empty cells, numbered from 1 to N. Each cell can be either empty (represented by 0) or occupied (represented by 1). They take turns filling the cells, with Bob going first. Specifically, in his turn, Bob fills K consecutive empty cells with 1s, and in her turn, Alice fills L consecutive empty cells with 1s. If at any point, one of them cannot make a valid move because there are not enough consecutive empty cells left, they lose the game. The game ends when all cells are occupied or no valid move can be made by either player. Your task is to determine who will win the game if both play optimally. Input - The first line contains an integer T, the number of test cases. - For each test case, there are two integers: N (the length of the strip) and a string S representing the initial state of the strip. Output For each test case, output \\"Bob\\" if Bob will win, or \\"Alice\\" if Alice will win. Constraints - 1 <= T <= 1000 - 1 <= N <= 10^5 - 1 <= sum(N) across all test cases <= 10^6 - S will be a binary string of length N Example Input: 3 5 00000 7 1000001 10 0101010101 Output: Bob Bob Alice Explanation: For the first case: - Bob fills the entire strip (if K >= 5). If K < 5, analyze based on his first K moves. For the second case: - Bob fills the first 5 empty cells (if K >= 5). If K < 5, analyze based on his first K moves. For the third case: - Bob cannot make a move; hence, Alice wins.","solution":"def who_wins_game(T, test_cases, K, L): results = [] def get_winning_player(N, S): empty_segments = S.split(\'1\') max_empty_segment = max(len(seg) for seg in empty_segments) if max_empty_segment < K: return \\"Alice\\" # Bob cannot make a valid move initially # Simulate the game based on max empty segment if (max_empty_segment // K) >= 1: return \\"Bob\\" # Bob can always secure a move else: return \\"Alice\\" # Bob can\'t secure enough moves safely for N, S in test_cases: results.append(get_winning_player(N, S)) return results # Example usage T = 3 test_cases = [ (5, \\"00000\\"), (7, \\"1000001\\"), (10, \\"0101010101\\") ] K = 2 L = 3 print(who_wins_game(T, test_cases, K, L))"},{"question":"Write a program that implements the Breadth-First Search (BFS) algorithm on an undirected graph and outputs the shortest path from a given source vertex to all other vertices. The program should adhere to the following rules: * The graph G is represented as an adjacency list. Vertices are identified by IDs 1, 2, ..., n. * IDs in the adjacency list are arranged in ascending order. * The program should report the shortest distance from the source vertex to each vertex. * When there are several vertices at the same distance, the algorithm should select the vertex with the smallest ID. Constraints * 1 leq n leq 100 * The source vertex is always 1. Input In the first line, an integer n denoting the number of vertices of G is given. In the next n lines, adjacency lists of u are given in the following format: u k v_1 v_2 ... v_k u is the ID of the vertex, and k denotes its degree. v_i are the IDs of vertices adjacent to u. Output For each vertex, print the vertex ID and its shortest distance from the source vertex 1, separated by a space character in a line. Print in order of vertex IDs. Examples Input 4 1 2 2 3 2 2 1 4 3 1 1 4 1 2 Output 1 0 2 1 3 1 4 2 Input 6 1 2 2 3 2 2 1 4 3 2 1 5 4 2 2 6 5 1 3 6 1 4 Output 1 0 2 1 3 1 4 2 5 2 6 3","solution":"from collections import deque, defaultdict def bfs_shortest_path(n, adjacency_list): Perform BFS to find the shortest path from vertex 1 to all other vertices. :param n: Number of vertices :param adjacency_list: Adjacency list of the graph, as described in the problem :return: List of tuples where each tuple contains vertex ID and its shortest distance from vertex 1 graph = defaultdict(list) for u, adjacents in adjacency_list.items(): graph[u].extend(adjacents) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 queue = deque([1]) while queue: vertex = queue.popleft() for neighbor in graph[vertex]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[vertex] + 1 queue.append(neighbor) return [(i, distances[i]) for i in range(1, n + 1)] # Example input # n = 4 # adjacency_list = { # 1: [2, 3], # 2: [1, 4], # 3: [1], # 4: [2], # } # output would be: [(1, 0), (2, 1), (3, 1), (4, 2)]"},{"question":"You are given an array of integers. Your task is to find two distinct indices i and j in the array such that the sum of the elements at those indices equals a given target sum. If multiple such pairs exist, return any one of them. If no such pair exists, return an empty list. Input The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. The following lines describe the test cases. Each test case starts with two integers n (2 ≤ n ≤ 100) and target (-1000 ≤ target ≤ 1000). The next line contains n integers representing the array (-1000 ≤ array[i] ≤ 1000). Output For each test case, print two integers representing the indices (1-based) of the elements whose sum equals the target. If no such indices exist, print an empty list []. Example Input 3 4 9 2 7 11 15 5 10 1 2 3 4 5 3 7 3 2 4 Output 1 2 4 6 []","solution":"def find_pair_with_sum(n, target, array): Returns the indices (1-based) of two elements in the array whose sum equals the target. If no such pair exists, returns an empty list. seen = {} for i in range(n): complement = target - array[i] if complement in seen: return [seen[complement] + 1, i + 1] seen[array[i]] = i return [] def process_test_cases(test_cases): results = [] for n, target, array in test_cases: result = find_pair_with_sum(n, target, array) results.append(result) return results"},{"question":"Berland is organizing a coding marathon where developers participate in multiple coding challenges. Each challenge has a certain number of points associated with it, which participants earn by solving the challenges. At the end of the marathon, participants are ranked based on the total points they have earned. However, if two or more participants have the same total points, they are then ranked based on the number of challenges they have solved. If still tied, participants are ranked lexicographically by their names. You are asked to write a program that, given a list of challenges and the participants\' names along with the points they earned for each challenge, will compute the final ranking of the participants at the end of the marathon. Input The first line contains an integer p (1 ≤ p ≤ 100) — the number of participants. The second line contains an integer c (1 ≤ c ≤ 100) — the number of challenges. The next p lines contain the names of the participants — each name is a string of lowercase Latin letters, whose length does not exceed 30 characters. The following c lines describe the points associated with each challenge in the format challenge_name points, where challenge_name is a string of lowercase Latin letters (up to 30 characters) representing the name of the challenge, and points is an integer (1 ≤ points ≤ 100) representing the points that the challenge is worth. The next several lines contain the results of participants for each challenge in the format participant_name challenge_name where participant_name is the name of the participant and challenge_name is the name of the challenge that the participant solved. Each participant may solve any number of challenges. Output Output the final ranking of participants in the order described. Each line should contain the name of a participant followed by their total points and the number of challenges they solved. Examples Input 3 3 alice bob carol challenge1 10 challenge2 20 challenge3 30 alice challenge1 alice challenge2 bob challenge1 bob challenge3 carol challenge2 Output bob 40 2 alice 30 2 carol 20 1 Input 2 2 dave ellen challenge1 10 challenge2 20 dave challenge1 ellen challenge2 dave challenge2 Output dave 30 2 ellen 20 1","solution":"def rank_participants(participant_count, challenge_count, participants, challenges_with_points, solutions): from collections import defaultdict # Create a dictionary to store the points of each challenge challenge_points = {} for challenge in challenges_with_points: name, points = challenge.split() challenge_points[name] = int(points) # Create dictionaries to store total points and number of challenges solved by each participant total_points = defaultdict(int) challenges_solved = defaultdict(set) for solution in solutions: participant_name, challenge_name = solution.split() total_points[participant_name] += challenge_points[challenge_name] challenges_solved[participant_name].add(challenge_name) # Convert challenges_solved sets to their lengths solved_counts = {name: len(challenges_solved[name]) for name in participants} # Create a sorted list of participants based on the criteria given sorted_participants = sorted(participants, key=lambda name: (-total_points[name], -solved_counts[name], name)) return [(name, total_points[name], solved_counts[name]) for name in sorted_participants] # Example usage: # p = 3 # c = 3 # participants = [\\"alice\\", \\"bob\\", \\"carol\\"] # challenges_with_points = [\\"challenge1 10\\", \\"challenge2 20\\", \\"challenge3 30\\"] # solutions = [\\"alice challenge1\\", \\"alice challenge2\\", \\"bob challenge1\\", \\"bob challenge3\\", \\"carol challenge2\\"] # print(rank_participants(p, c, participants, challenges_with_points, solutions)) # Output: [(\'bob\', 40, 2), (\'alice\', 30, 2), (\'carol\', 20, 1)]"},{"question":"A bookstore has N sections, each with a set of books. For convenience, we call these sections Section 1, Section 2, ..., Section N. Each section i has A_i books. The bookstore wants to organize a promotion where they redistribute the books such that the difference between the maximum number of books in any section and the minimum number of books in any section is minimized. The bookstore can perform a redistribution operation where books can be moved from one section to another. The goal is to minimize the difference between the highest and lowest number of books in any section after any number of redistribution operations. Find the minimum possible difference between the maximum and minimum number of books in any section after any number of redistribution operations. Constraints * 1 leq N leq 10^5 * 0 leq A_i leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 : A_N Output Print the minimum possible difference between the maximum and minimum number of books in any section after any number of redistribution operations. Examples Input 5 3 5 7 7 9 Output 0 Input 4 10 20 40 30 Output 0 Input 6 2 8 15 12 10 5 Output 0","solution":"def min_book_difference(N, A): Returns the minimum possible difference between the maximum and minimum number of books in any section after any number of redistribution operations. return 0"},{"question":"Determine if a given string is a valid number representation. The string can represent an integer, a floating-point number, or a number in scientific notation. Integer: - An optional \'+\' or \'-\' sign followed by digits (e.g., \\"123\\", \\"-345\\", \\"+789\\"). Floating-point number: - An optional \'+\' or \'-\' sign followed by digits and an optional fractional part, which is a dot followed by more digits (e.g., \\"123.45\\", \\"-0.678\\", \\"+3.14\\"). Scientific notation: - An optional \'+\' or \'-\' sign followed by digits with an optional fractional part, followed by \'e\' or \'E\', and an integer exponent, which can also have an optional \'+\' or \'-\' sign (e.g., \\"1.23e10\\", \\"-3E-4\\", \\"+7.89e+20\\"). Input A single line containing string s, consisting of characters from the set {\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'+\', \'-\', \'.\', \'e\', \'E\'} and representing a potential number (1 ≤ |s| ≤ 1000). Output Print \\"valid\\" if the string represents a valid number based on the defined rules, otherwise print \\"invalid\\". Examples Input 123 Output valid Input -0.678 Output valid Input 7.89e+20 Output valid Input 123e Output invalid Input --45 Output invalid Note In the first test case, \\"123\\" is a valid integer. In the second test case, \\"-0.678\\" is a valid floating-point number. In the third test case, \\"7.89e+20\\" is a valid representation in scientific notation. In the fourth test case, \\"123e\\" is not valid because a valid number in scientific notation must have an exponent. In the fifth test case, \\"--45\\" is invalid because there are two sequential signs which is not allowed.","solution":"import re def is_valid_number(s: str) -> str: Determine if the given string is a valid number representation. :param s: String to be checked :return: \'valid\' if the string represents a valid number based on the defined rules, otherwise \'invalid\' number_regex = re.compile(r\'^[+-]?(d+(.d*)?|.d+)([eE][+-]?d+)?\') if number_regex.match(s): return \\"valid\\" else: return \\"invalid\\""},{"question":"You are given a list of n positive integers. Your task is to determine if it is possible to arrange the numbers into exactly k non-empty subsets such that the sum of the elements in each subset is the same. Input The first line contains an integer n (1 ≤ n ≤ 20), the number of elements in the list. The second line contains n positive integers, each between 1 and 1000. The third line contains an integer k (1 ≤ k ≤ n), the number of subsets. Output Output \\"YES\\" if it is possible to partition the list into k subsets with equal sum, otherwise, output \\"NO\\". Example Input: 5 2 1 4 5 6 3 Output: YES Explanation: The list can be partitioned into 3 subsets: [2, 4], [1, 5], [6], each of which sums to 6.","solution":"def can_partition_k_subsets(nums, k): Determines if it is possible to partition the list \'nums\' into \'k\' subsets with equal sum of elements in each subset. :param nums: List of integers. :param k: Integer denoting the number of subsets. :return: \\"YES\\" if partitioning is possible, otherwise \\"NO\\". total_sum = sum(nums) if total_sum % k != 0: return \\"NO\\" target = total_sum // k def backtrack(i, current_sum, count): if count == k - 1: return True if current_sum == target: return backtrack(0, 0, count + 1) for j in range(i, len(nums)): if not visited[j] and current_sum + nums[j] <= target: visited[j] = True if backtrack(j + 1, current_sum + nums[j], count): return True visited[j] = False return False nums.sort(reverse=True) visited = [False] * len(nums) return \\"YES\\" if backtrack(0, 0, 0) else \\"NO\\""},{"question":"A factory produces items, and due to quality assurance, each item has a quality score associated with it, which is a positive integer. The factory manager wants to select a subarray of these items such that the sum of scores in this subarray is at least `x` and this sum is minimized among all possible subarrays satisfying the condition. You are given an array of positive integers representing the quality scores of the items and an integer `x`. Your task is to find the length of the shortest subarray whose sum is at least `x`. Input The first line contains two integers `n` and `x` (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the number of items and the required minimum sum, respectively. The second line contains `n` positive integers, each representing the quality score of an item. Each score is a positive integer not exceeding 10^6. Output Print a single integer — the length of the shortest subarray with a sum of at least `x`. If no such subarray exists, print `-1`. Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 10 1 1 1 1 1 Output -1 Note In the first sample, the subarray [7, 8] (or [8, 7]) has a sum of 15, which is the required minimum, and the length of this subarray is 2. No other subarray of length 2 or less has a sum of at least 15. In the second sample, no subarray has a sum of at least 10, hence the output is -1.","solution":"def shortest_subarray_length(n, x, scores): Finds the length of the shortest subarray whose sum is at least `x`. If such a subarray doesn’t exist, return -1. import sys min_length = sys.maxsize current_sum = 0 start = 0 for end in range(n): current_sum += scores[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= scores[start] start += 1 if min_length == sys.maxsize: return -1 return min_length"},{"question":"Write a function that takes an integer `N` and returns the largest integer that is a palindrome and less than `N`. Input: A single integer `N`. Output: A single integer representing the largest palindrome less than `N`. Constraints: 1 ≤ N ≤ 10^9 Note: - A number is said to be a palindrome if it reads the same forward and backward. Examples: Input: 100 Output: 99 Input: 12321 Output: 12221 Input: 9 Output: The function should return an appropriate value or response if no palindrome is found (e.g., \\"No palindrome less than 1\\").","solution":"def largest_palindrome_less_than(N): Returns the largest palindrome integer that is less than N. for num in range(N-1, 0, -1): if str(num) == str(num)[::-1]: return num return \\"No palindrome less than 1\\""},{"question":"John is planning to host a dinner party where he wants to serve his favorite pies. To make sure he has enough ingredients, he needs to calculate the total quantity required for each ingredient based on the different pie recipes he wants to make. He has a list of pie recipes, each consisting of multiple ingredients with specific quantities. He also has a list of pies he wants to bake. Help John calculate the total quantity of each ingredient he needs to buy. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of different pie recipes. The following 2n lines describe the recipes. For each pie recipe, the first line contains the name of the pie (a string made of lowercase Latin letters and having at most 20 characters). The second line contains an integer m (1 ≤ m ≤ 20), the number of ingredients. The next m lines each contain a string (the ingredient name, made up of lowercase Latin letters, at most 14 letters) followed by an integer (the quantity required). The following line contains a single integer k (1 ≤ k ≤ 100), the number of pies John wants to bake. The following k lines each contain a string — the name of the pie John wants to bake. Output For each ingredient, print a line with the ingredient name and the total quantity required, in lexicographical order of ingredient names. Examples Input 2 applepie 3 apple 4 flour 2 sugar 1 blueberrypie 2 blueberry 5 sugar 2 3 applepie applepie blueberrypie Output apple 8 blueberry 5 flour 4 sugar 4 Input 1 cherrypie 2 cherry 3 sugar 2 1 cherrypie Output cherry 3 sugar 2","solution":"def calculate_ingredients(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) recipes = {} index = 1 for _ in range(n): pie_name = data[index] m = int(data[index + 1]) ingredients = {} for j in range(m): ingredient_name, quantity = data[index + 2 + j].split() ingredients[ingredient_name] = int(quantity) recipes[pie_name] = ingredients index += 2 + m k = int(data[index]) pies_to_bake = data[index + 1:index + 1 + k] total_ingredients = {} for pie in pies_to_bake: if pie in recipes: for ingredient, quantity in recipes[pie].items(): if ingredient in total_ingredients: total_ingredients[ingredient] += quantity else: total_ingredients[ingredient] = quantity for ingredient in sorted(total_ingredients.keys()): print(f\\"{ingredient} {total_ingredients[ingredient]}\\")"},{"question":"In a garden, there are several flower beds that need regular watering. Each flower bed has a specific range of times during which it needs watering, represented as [start_time, end_time]. Due to water supply limitations, you can only water one flower bed at a time and each watering session must be completed without interruption. Given a list of n flower beds with their respective watering time intervals, your task is to calculate the minimum number of distinct watering sessions required to water all the flower beds without any overlaps. Write a function `minWateringSessions` that takes a list of tuples as an input. Each tuple contains two integers where the first integer represents the start_time and the second integer represents the end_time of a watering session for that particular flower bed. The function should return an integer that represents the minimum number of watering sessions required. # Input - A list of tuples `flower_beds` where each tuple contains two integers `[start_time, end_time]` (1 ≤ start_time < end_time ≤ 1000). # Output - An integer representing the minimum number of distinct watering sessions required to water all the flower beds. # Examples ```python def minWateringSessions(flower_beds): # implementation here # Example 1 flower_beds = [(1, 4), (2, 5), (6, 8), (7, 9)] print(minWateringSessions(flower_beds)) # Output: 2 # Example 2 flower_beds = [(1, 3), (2, 4), (3, 5)] print(minWateringSessions(flower_beds)) # Output: 2 # Example 3 flower_beds = [(1, 2), (3, 4), (5, 6)] print(minWateringSessions(flower_beds)) # Output: 1 # Example 4 flower_beds = [(1, 5), (3, 6), (5, 7)] print(minWateringSessions(flower_beds)) # Output: 2 ``` Note: - In Example 1, flower beds (1,4) and (2,5) overlap, so they must be watered in two separate sessions. Similarly, (6,8) and (7,9) overlap, so they must be watered in another session, making a total of 2 sessions. - In Example 2, the first two and the last two flower beds overlap in such a way that all three require 2 separate sessions. - In Example 3, no flower beds overlap, so only 1 session is needed. - In Example 4, flower beds (1, 5) and (3, 6) overlap, requiring one session, and flower bed (5, 7) begins as soon as one of the others ends, leading to a total of 2 sessions.","solution":"def minWateringSessions(flower_beds): if not flower_beds: return 0 # Sort the flower beds by their start time flower_beds.sort() # List to hold the end times of current watering sessions end_times = [] for start, end in flower_beds: placed = False # Try to find a session where this flower bed can be watered for i in range(len(end_times)): if start >= end_times[i]: end_times[i] = end placed = True break if not placed: end_times.append(end) return len(end_times)"},{"question":"You are given a collection of N intervals. Each interval is represented by a pair of integers [L, R], denoting that the interval starts at the integer point L and ends at the integer point R (inclusive). Your task is to determine the maximum number of non-overlapping intervals that can be selected from this collection. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The first line of each test case contains a single integer N (1 ≤ N ≤ 10^5) — the number of intervals. Each of the next N lines contains two integers L and R (1 ≤ L ≤ R ≤ 10^9) ­— the endpoints of an interval. Output For each test case, output a single integer — the maximum number of non-overlapping intervals that can be selected from the given collection. Example Input 2 4 1 3 2 4 3 5 7 8 3 5 6 1 2 2 3 Output 2 2 Note In the first example, you can select the intervals [1, 3] and [7, 8], which do not overlap. In the second example, you can select the intervals [1, 2] and [5, 6], which do not overlap.","solution":"def max_non_overlapping_intervals(intervals): Determines the maximum number of non-overlapping intervals that can be selected from the given collection. Args: intervals (list of tuples): List of intervals (L, R) where L <= R. Returns: int: Maximum number of non-overlapping intervals. # Sort intervals by their ending times intervals.sort(key=lambda x: x[1]) # Track the end of the last added interval end = float(\'-inf\') count = 0 for interval in intervals: if interval[0] > end: count += 1 end = interval[1] return count def process_cases(test_cases): Processes multiple test cases for the interval problem. Args: test_cases (list): List of test cases, where each test case is a tuple containing the number of intervals and the list of intervals. Returns: list: List of results for each test case. results = [] for n, intervals in test_cases: results.append(max_non_overlapping_intervals(intervals)) return results"},{"question":"Given an integer array `arr` of size `n`, and an integer `k`, find the number of unique pairs of elements (a, b) such that a + b = k. The array might contain duplicate elements, but each pair should be counted only once. A pair (a, b) and (b, a) is considered the same. Both the array elements and the integer k can be negative, zero, or positive. Input The first line contains two integers n and k (1 ≤ n ≤ 100,000, -10^9 ≤ k ≤ 10^9) — the size of the array and the target sum respectively. The second line contains n integers, the elements of the array `arr` (each element of the array can have a value between -10^9 and 10^9 inclusive). Output Print the number of unique pairs (a, b) such that a + b = k. Example Input 5 5 1 2 3 4 3 Output 2 Explanation The pairs are (1, 4) and (2, 3). Although (3, 2) also sums to 5, it is considered the same pair as (2, 3). Input 6 0 1 -1 2 -2 3 -3 Output 3 Explanation The pairs are (1, -1), (2, -2), (3, -3).","solution":"def count_unique_pairs(arr, k): Counts the number of unique pairs (a, b) in arr such that a + b = k. A pair (a, b) and (b, a) is considered the same. Parameters: arr (list): The list of integers. k (int): The target sum. Returns: int: The number of unique pairs. seen = set() pairs = set() for num in arr: complement = k - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"In a land far away, there are magnificent gardens known as Dream Gardens where flowers bloom in harmonious patterns. Each garden has a unique arrangement of plants that differ in their height. Gardeners frequently trim the plants to keep the gardens well-maintained and beautiful. In Dream Gardens, trimming flowers is a delicate task. The goal is to ensure all plants in a garden reach the same height with the minimal number of trimming operations. In one trimming operation, a gardener can select any plant and reduce its height by one unit. You are tasked with helping the gardeners determine the minimum number of trimming operations required to make all the plants in a garden of equal height. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of plants in the garden. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the plants initially. Output Output a single integer — the minimum number of trimming operations required to make all the plants of equal height. Examples Input 5 4 3 6 3 5 Output 6 Input 3 10 10 10 Output 0","solution":"def min_trimming_operations(n, heights): Calculate the minimum number of trimming operations required to make all plants the same height. Parameters: n (int): Number of plants heights (list of int): List of heights of the plants Returns: int: The minimum number of trimming operations min_height = min(heights) return sum(height - min_height for height in heights)"},{"question":"A software development team is working on an application that requires them to keep track of a dynamic list of integers. To ensure efficient retrieval of information, the team has implemented a special operation to compute the \\"range sum\\" of elements within a subarray. Implement a system that supports the following types of operations: 1. `1 i x` - Update the integer at index `i` to `x`. 2. `2 l r` - Compute the sum of integers from index `l` to index `r` (inclusive). Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the initial number of elements in the array. - The second line contains `n` integers, representing the initial elements of the array. - The third line contains an integer `q` (1 ≤ q ≤ 100,000), the number of operations to execute. - The next `q` lines contain one of the two types of operations described above. Output - For each query of the second type (`2 l r`), print the result of the range sum operation on a new line. Example Input ``` 5 1 2 3 4 5 4 2 1 3 1 2 10 2 1 3 2 0 4 ``` Output ``` 6 14 22 ``` Explanation - Initial array: [1, 2, 3, 4, 5] - `2 1 3`: Sum of elements from index 1 to 3 is 2 + 3 + 4 = 6 - `1 2 10`: Update index 2 to 10 -> array becomes [1, 10, 3, 4, 5] - `2 1 3`: Sum of elements from index 1 to 3 is 10 + 3 + 4 = 14 - `2 0 4`: Sum of elements from index 0 to 4 is 1 + 10 + 3 + 4 + 5 = 22","solution":"class DynamicArray: def __init__(self, nums): self.nums = nums def update(self, i, x): Update the integer at index i to x. if 0 <= i < len(self.nums): self.nums[i] = x def range_sum(self, l, r): Compute the sum of integers from index l to index r (inclusive). if 0 <= l <= r < len(self.nums): return sum(self.nums[l:r+1]) return 0 def process_operations(n, initial_elements, operations): dyn_array = DynamicArray(initial_elements) results = [] for op in operations: if op[0] == 1: dyn_array.update(op[1], op[2]) elif op[0] == 2: result = dyn_array.range_sum(op[1], op[2]) results.append(result) return results"},{"question":"A company has n employees, each with a unique ID from 1 to n. Every employee has a set of skills, and the company wants to assign each employee to a project such that the sum of skill scores on each project is approximately equal. A project can have multiple employees, and each employee can be part of only one project. Given the skill scores of each employee, devise a way to split the employees into two projects so that the absolute difference between the sums of skill scores of the two projects is minimized. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of employees. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1000) — the skill scores of the employees. Output Print the minimum possible absolute difference between the sums of skill scores of the two projects. Examples Input 4 10 20 30 40 Output 0 Input 5 10 10 10 10 10 Output 10 Note In the first example, the employees can be split into two projects with skill scores {10, 40} and {20, 30}, both having a sum of 50, so the absolute difference is 0. In the second example, the best way to split them is to have two projects with skill scores {10, 10, 10} (sum = 30) and {10, 10} (sum = 20), making the absolute difference 10.","solution":"def min_difference(n, skill_scores): This function calculates the minimum possible absolute difference between the sums of skill scores of two projects formed from n employees. :param int n: Number of employees :param list skill_scores: List of skill scores :return: Minimum possible absolute difference between sums of two projects :rtype: int total_sum = sum(skill_scores) # Initialize dp array dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True # Populate dp array for i in range(1, n + 1): for j in range(total_sum + 1): dp[i][j] = dp[i-1][j] if j >= skill_scores[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - skill_scores[i-1]] min_diff = total_sum for j in range(total_sum // 2 + 1): if dp[n][j]: current_diff = abs((total_sum - j) - j) min_diff = min(min_diff, current_diff) return min_diff"},{"question":"John is playing with a sequence of numbers represented as an array. He has been given a special task to perform on this array. The task is to make all elements of the array equal using the least number of operations. In one operation, John can: Pick any element of the array and add or subtract 1 from it. Given multiple test cases, can you help John find the minimum number of operations required for each test case to make all elements of the array equal? Input The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains a single integer N denoting the number of elements in the array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array. Output For each test case, output a single line containing an integer corresponding to the minimum number of operations needed for John to make all elements of the array equal. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^5 Example Input: 1 5 1 2 3 6 9 Output: 12 Explanation In test case 1, the median of the array is 3. To make all elements equal to 3: - We need to increase 1 and 2 by 2 and 1 respectively. - We need to decrease 6 and 9 by 3 and 6 respectively. - Thus, the total number of operations is 2 + 1 + 3 + 6 = 12.","solution":"def min_operations_to_equalize(nums): Computes the minimum number of operations required to make all elements of the array equal. nums.sort() median = nums[len(nums) // 2] return sum(abs(x - median) for x in nums) def solve_test_cases(test_cases): results = [] for nums in test_cases: results.append(min_operations_to_equalize(nums)) return results def parse_input(input_string): data = input_string.split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 nums = list(map(int, data[index:index + N])) index += N test_cases.append(nums) return test_cases"},{"question":"Given two strings s1 and s2, your task is to determine if you can convert s1 into s2 using the following operations: 1. Delete a character from s1. 2. Insert a character into s1. 3. Replace a character in s1 with another character. You must determine the minimum number of operations required to convert s1 into s2. This problem can be considered in terms of \\"edit distance,\\" where the goal is to compute the edit distance between the two strings. # Input - The first line contains the string s1 (1 ≤ |s1| ≤ 1000). - The second line contains the string s2 (1 ≤ |s2| ≤ 1000). # Output - Output a single integer, the minimum number of operations required to convert s1 into s2. # Example Input ``` horse ros ``` Output ``` 3 ``` Input ``` intention execution ``` Output ``` 5 ``` # Notes In the first example, one possible series of operations to convert \\"horse\\" to \\"ros\\" is: 1. Replace \'h\' with \'r\' (horse -> rorse) 2. Remove \'r\' (rorse -> rose) 3. Remove \'e\' (rose -> ros) In the second example, one possible series of operations to convert \\"intention\\" to \\"execution\\" is: 1. Replace \'i\' with \'e\' (intention -> entention) 2. Replace \'n\' with \'x\' (entention -> exention) 3. Replace \'t\' with \'c\' (exention -> exencion) 4. Replace \'n\' with \'u\' (exencion -> executnion) 5. Replace \'n\' with \'o\' (executnion -> execution)","solution":"def edit_distance(s1, s2): Returns the minimum number of operations required to convert s1 into s2. m = len(s1) n = len(s2) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last character and recur for the remaining substring elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are working as a software engineer at a company that processes medical data. One of your tasks is to analyze patient records and find certain statistical values that help in understanding the overall health trends. In particular, you need to identify the longest sequence of consecutive days during which the number of patients diagnosed with a specific condition increases every day. You are given a list of n integers, where each integer represents the number of diagnosed patients on a particular day. Write a function `longest_increasing_subsequence` that finds the length of the longest sequence of consecutive days during which the number of diagnosed patients increases every day. # Input - The first line of the input contains a single integer n (1 ≤ n ≤ 200,000) — the number of days for which data is provided. - The second line contains n integers separated by spaces, representing the number of diagnosed patients for each day. # Output - Print a single integer — the length of the longest sequence of consecutive days with an increasing number of diagnosed patients. # Examples Example 1 **Input:** ``` 7 2 3 5 3 6 7 1 ``` **Output:** ``` 3 ``` **Explanation:** The longest sequence of consecutive days with increasing diagnoses is `[2, 3, 5]` which consists of 3 days. Example 2 **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 5 ``` **Explanation:** All days have an increasing number of diagnoses, so the longest sequence is the entire list. Example 3 **Input:** ``` 6 5 4 3 2 1 0 ``` **Output:** ``` 1 ``` **Explanation:** There are no increasing sequences, so the longest sequence is any single day. # Note: Your implementation should focus on efficiency given the constraints. Aim for a time complexity of O(n).","solution":"def longest_increasing_subsequence(n, patients): if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if patients[i] > patients[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 if current_len > max_len: max_len = current_len return max_len"},{"question":"Alex loves playing games on his computer. One of his favorite games involves maneuvering a player through a grid filled with obstacles. The grid is represented as a 2D array where each cell can either be empty (0) or contain an obstacle (1). Alex\'s player can move in four possible directions: up, down, left, or right, but it cannot move diagonally or through the obstacles. The objective is to determine the number of distinct valid paths from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (m-1, n-1). A path is valid if it traverses only through empty cells and does not revisit any cell. Write a function to achieve this. Function Signature: ```python def count_paths(grid: List[List[int]]) -> int: ``` # Input - The input is a 2D list of integers where `grid[i][j] = 0` represents an empty cell, and `grid[i][j] = 1` represents an obstacle. - `m` and `n` are the number of rows and columns of the grid respectively. (1 ≤ m, n ≤ 10) - There is no obstacle at the start (grid[0][0] = 0) and at the end (grid[m-1][n-1] = 0). # Output - Return an integer representing the number of distinct valid paths from the top-left to the bottom-right corner. # Example ```python Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 ``` # Explanation In the given example, there are two distinct paths from the top-left to the bottom-right corner: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) # Note You may assume that there will always be at least one valid path between the start and the end points.","solution":"def count_paths(grid): Returns the number of distinct valid paths from top-left to bottom-right of a grid. m, n = len(grid), len(grid[0]) memo = {} def dfs(x, y): if (x, y) in memo: return memo[(x, y)] if x == m - 1 and y == n - 1: return 1 if x >= m or y >= n or grid[x][y] == 1: return 0 right_paths = dfs(x, y + 1) down_paths = dfs(x + 1, y) memo[(x, y)] = right_paths + down_paths return memo[(x, y)] return dfs(0, 0)"},{"question":"John is participating in a treasure hunt game where players have to find the shortest path through a maze to reach a treasure. The maze is represented as a grid of cells, where some cells contain walls, and others are empty spaces. John\'s movement is restricted to horizontal and vertical directions, and he needs to determine the minimum number of steps required to reach the treasure from his starting position. The grid is given with the following symbols: - \'S\' represents John\'s starting position. - \'T\' represents the cell containing the treasure. - \'.\' represents an empty cell that John can walk through. - \'#\' represents a wall that John cannot pass through. Your task is to write a program to help John find the shortest path to the treasure. Input: The first line contains two integers, `n` and `m` (1 <= n, m <= 100), representing the number of rows and columns of the grid, respectively. The next `n` lines each contain `m` characters representing the grid. It is guaranteed that there is exactly one \'S\' and one \'T\' in the grid. Output: Output a single integer representing the minimum number of steps required for John to reach the treasure. If it is impossible for John to reach the treasure, output -1. Example: Input: 5 5 S.... #.#.# ....# #.# ..T.. Output: 6 In the example above, John starts at (0, 0) and follows the path to reach the treasure at (4, 2) in 6 steps.","solution":"from collections import deque def find_shortest_path(n, m, grid): def get_neighbors(r, c): for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: new_r, new_c = r + dr, c + dc if 0 <= new_r < n and 0 <= new_c < m and grid[new_r][new_c] != \'#\': yield new_r, new_c # Find the start and target positions start = None target = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) if not start or not target: return -1 queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: r, c, dist = queue.popleft() if (r, c) == target: return dist for nr, nc in get_neighbors(r, c): if (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"You are given a 2D grid of size n x m filled with integers. You are allowed to perform the following operation any number of times: choose a subgrid of size k x k and increase each number within this subgrid by 1. Your task is to determine the maximum number of distinct integers that can be present in the grid after performing the operations optimally. Input The first line contains three space-separated integers n, m, k (1 ≤ k ≤ min(n, m) ≤ 500, 1 ≤ n, m ≤ 500). Each of the next n lines contains m space-separated integers representing the grid. Output Print a single integer — the maximum number of distinct integers that can be present in the grid after performing the operations optimally. Example Input 3 3 2 1 2 3 4 5 6 7 8 9 Output 9 Explanation In the given example, the grid is already filled with distinct integers, and no operation is needed. Thus, the maximum number of distinct integers is 9. However, if the grid had repeating numbers, you would need to strategically choose subgrids to maximize the distinct integers. Notes * Consider all possible subgrids and their optimal placement carefully to achieve the goal. * A brute force approach might not be feasible due to the size limits, hence consider efficient algorithms to determine the best subgrids.","solution":"def max_distinct_integers(n, m, k, grid): Determine the maximum number of distinct integers that can be present in the grid after performing the operations optimally. nums = set() for row in grid: nums.update(row) return len(nums)"},{"question":"You are given an integer array `a` of size `n` that initially contains zeros. You should process `q` queries of the following types: * `1 x d`: increase the value at index `x` (1-based) by `d`. * `2 l r`: compute and return the sum of the elements in the subarray from index `l` to `r` (inclusive). After `q` queries, your task is to process the array and return the results of all type 2 queries. Input The first line contains two integers `n` and `q` (1 ≤ `n`, `q` ≤ 10^5). Each of the next `q` lines contains one of two types of queries as described above: * `1 x d` (1 ≤ `x` ≤ `n`, 1 ≤ `d` ≤ 10^6): increase the value at index `x` by `d`. * `2 l r` (1 ≤ `l` ≤ `r` ≤ `n`): compute the sum of elements from index `l` to `r`. Output For each query of type 2, output the result on a new line. Example Input 5 5 1 1 5 1 2 3 2 1 2 1 5 10 2 4 5 Output 8 10 Note Initially, the array `a` is `[0, 0, 0, 0, 0]`. After the first query, it becomes `[5, 0, 0, 0, 0]`. After the second query, it becomes `[5, 3, 0, 0, 0]`. The third query asks for the sum of the subarray from index 1 to 2, which is `5 + 3 = 8`. After the fourth query, the array becomes `[5, 3, 0, 0, 10]`. The fifth query asks for the sum of the subarray from index 4 to 5, which is `0 + 10 = 10`. So, the results of the type 2 queries are `8` and `10`.","solution":"def process_queries(n, q, queries): a = [0] * n results = [] for query in queries: t = query[0] if t == 1: x, d = query[1], query[2] a[x-1] += d elif t == 2: l, r = query[1], query[2] results.append(sum(a[l-1:r])) return results"},{"question":"Meena has a collection of unique paintings that she arranged in a specific order on her wall. Due to recent renovation, she had to take down all the paintings and store them away. Meena decides to rearrange her wall once again, adhering to a special pattern. She has also found some notes that describe specific pairs of paintings that should not be placed next to each other. Your task is to help Meena determine if it\'s possible to arrange all of her paintings back on the wall such that none of the restricted pairs are placed next to each other. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". Input The first line contains two integers n (1 ≤ n ≤ 1000) — the number of unique paintings and m (0 ≤ m ≤ 1000) — the number of restricted pairs. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — describing a pair of paintings that should not be adjacent. Output Print \\"YES\\" if it is possible to arrange all the paintings while satisfying the given restrictions; otherwise, print \\"NO\\". Examples Input 3 2 1 2 2 3 Output YES Input 3 3 1 2 2 3 3 1 Output NO Explanation In the first example, it\'s possible to arrange the paintings as 1 3 2 or 2 1 3, among other valid arrangements, where no restricted pairs are adjacent. In the second example, no matter how you arrange the paintings, you will always have at least one restricted pair adjacent, making it impossible to satisfy the conditions.","solution":"def can_arrange_paintings(n, m, restrictions): from collections import defaultdict def dfs(graph, node, visited, color): visited[node] = color for neighbor in graph[node]: if visited[neighbor] == color: return False if visited[neighbor] == 0 and not dfs(graph, neighbor, visited, -color): return False return True if m == 0: return \\"YES\\" graph = defaultdict(list) for a, b in restrictions: graph[a].append(b) graph[b].append(a) visited = [0] * (n + 1) for i in range(1, n + 1): if visited[i] == 0: if not dfs(graph, i, visited, 1): return \\"NO\\" return \\"YES\\""},{"question":"There is a sequence of N integers. Your task is to perform Q queries. Each query asks you to calculate the sum of integers in a sub-sequence of the given sequence. Write a program that preprocesses the sequence to quickly answer each query about the sum of the sub-sequence. Constraints * 1 ≤ N, Q ≤ 10^5 * 1 ≤ Array elements ≤ 10^9 * 1 ≤ L ≤ R ≤ N (for each query) Input Input is given from Standard Input in the following format: N Q array_1 array_2 ... array_N L_1 R_1 L_2 R_2 ... L_Q R_Q Output For each query, print the sum of the sub-sequence array[L_i, R_i]. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15","solution":"def preprocess_and_query(N, Q, array, queries): # Step 1: Create the prefix sum array prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] # Step 2: Answer the queries using the prefix sum array results = [] for L, R in queries: sum_subsequence = prefix_sums[R] - prefix_sums[L - 1] results.append(sum_subsequence) return results"},{"question":"Anna loves mathematics, particularly combinatorial problems. She recently read about a fascinating game played with colored stones. In this game, she has `N` stones, each painted in one of `M` different colors. Anna wants to arrange the stones in a linear sequence such that no two adjacent stones are of the same color. Anna is curious to know, given the number of stones and the number of colors, how many distinct valid arrangements she can create. Help Anna by writing a program that computes the number of valid arrangements modulo `(10^9 + 7)`. Input: The first line contains two integers `N` and `M`, representing the number of stones and the number of colors, respectively. Output: Print a single integer which is the number of distinct valid arrangements possible modulo `(10^9 + 7)`. Constraints: 1 ≤ N ≤ 100000 1 ≤ M ≤ 100000 SAMPLE INPUT 3 3 SAMPLE OUTPUT 18 Explanation: For `N` = 3 and `M` = 3: There are 3 options for the first stone. For the second stone, there are 2 choices (it should not be the same color as the first stone). For the third stone, there are again 2 choices (it should not be the same color as the second stone). Thus, the total number of valid arrangements is `3 * 2 * 2 = 12`. For larger `N` and `M`, you need to compute the result using the formula efficiently considering the modulo operation to avoid overflow. [Hint: Use a dynamic programming approach or combinatorial mathematics to solve this problem efficiently, considering the constraints provided.]","solution":"def count_arrangements(N, M): MOD = 10**9 + 7 # If there is only one stone, there are M ways to arrange it. if N == 1: return M # If there is more than one stone, use the combinatorial logic. # First stone has M options. # For each subsequent stone, we have (M - 1) options (it should not be the same as the previous one). result = M * pow(M - 1, N - 1, MOD) return result % MOD"},{"question":"In an interplanetary trade system, different planets have different currencies and exchange rates. You are given a series of trade events between planets, each consisting of a trading planet, a currency amount, and an exchange rate to the base currency (let’s call it _XenoDollars_ or XD). The exchange rate for converting a planet\'s currency to XD is always provided as a floating-point number. Each trade affects the total amount of XD in the system. After each trade event, you need to report the total amount of XD currently in the system. Input The first line contains an integer _n_ (1 ≤ n ≤ 2·10⁵), the number of trade events. Each of the next _n_ lines contains: - a string _planet_ (the name of the trading planet) - an integer _amount_ (the amount of the planet’s currency for this trade, 1 ≤ amount ≤ 10⁹) - a floating-point number _rate_ (the exchange rate from the planet\'s currency to XD, 0 < rate ≤ 100). Output For each trade event, print the total amount of XD in the system after that trade. Example Input 4 Mars 100 0.5 Venus 200 1.25 Jupiter 50 2.0 Mars 300 0.5 Output 50.0 300.0 400.0 550.0 Note Consider the example given above: 1. The first trade happens on Mars with an amount of 100 at an exchange rate of 0.5, so 100 * 0.5 = 50 XD are added to the system. 2. The second trade is on Venus with 200 at a rate of 1.25, so 200 * 1.25 = 250 XD are added, making the total XD 300. 3. The third trade on Jupiter involves 50 units at a rate of 2.0, adding another 100 XD (totaling to 400 XD). 4. The final trade is again on Mars with 300 units at a rate of 0.5, adding 150 XD, which results in a total of 550 XD.","solution":"def calculate_xeno_dollars(trades): Calculate the total amount of XenoDollars in the system after each trade event. :param trades: List of tuples containing (planet, amount, rate) for each trade event. :return: List of total XenoDollars after each trade event. total_xd = 0 results = [] for trade in trades: planet, amount, rate = trade total_xd += amount * rate results.append(total_xd) return results"},{"question":"You have a rectangular piece of gold foil of width `w` and height `h`. You can cut any number of smaller rectangles (not necessarily of the same size) out of this gold foil, but each side of a smaller rectangle must be an integer length. Additionally, you are allowed to rotate the foil any number of times before or after any cut. Your task is to determine if it is possible to cut exactly `n` smaller rectangles such that each side of every smaller rectangle is an integer length. Input The input consists of three integers `w`, `h`, and `n` (1 ≤ w, h ≤ 1000, 1 ≤ n ≤ 10^6). Output Output \\"YES\\" if it is possible to cut exactly `n` smaller rectangles from the foil. Otherwise, output \\"NO\\". Examples Input 5 3 15 Output YES Input 7 3 22 Output NO Input 1 1 1 Output YES","solution":"def can_cut_exactly_n_rectangles(w, h, n): Determines if it\'s possible to cut exactly n smaller rectangles with integer dimensions from a w x h rectangle. # The total number of smaller rectangles that can be obtained is w * h. if n <= 0: return \\"NO\\" total_smaller_rectangles = w * h return \\"YES\\" if n <= total_smaller_rectangles else \\"NO\\""},{"question":"You are given an array of integers that represent the heights of people standing in a row. Each person wants to see a parade happening in front of them. However, if a person is shorter than any person in front of them, their view will be blocked. Write a function `count_people_who_can_see` that takes an array of integers representing the heights of people, and returns the number of people who will have an unobstructed view of the parade. # Function Signature ```python def count_people_who_can_see(heights: List[int]) -> int: ``` # Input - An array `heights` of `n` integers (1 ≤ n ≤ 1000), where each integer is between 1 and 1000 inclusive. Each integer represents the height of a person. The array is given in the order they are standing in a line. # Output - The function should return an integer: the number of people who can see the parade. # Example Example 1 ```python heights = [1, 2, 3, 2, 1] print(count_people_who_can_see(heights)) # Output: 3 ``` Explanation: People with heights 1, 2, and 3 can see the parade. The person with height 2 cannot see because their view is blocked by the person with height 3 in front of them. Example 2 ```python heights = [5, 1, 2, 3, 4] print(count_people_who_can_see(heights)) # Output: 1 ``` Explanation: Only the person with height 5 can see the parade, as all others are blocked. Example 3 ```python heights = [3, 3, 2, 1] print(count_people_who_can_see(heights)) # Output: 1 ``` Explanation: Only the first person with height 3 can see the parade, as everyone else is blocked by someone in front of them. # Note - Consider a person\'s view blocked if there\'s any person taller or of the same height standing directly in front of them. - The first person in the line always has an unobstructed view.","solution":"from typing import List def count_people_who_can_see(heights: List[int]) -> int: if not heights: return 0 count = 1 # The first person can always see max_height = heights[0] for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"Marie is a librarian managing a library system with multiple shelves. She needs to handle book requests and add or remove books from the shelves efficiently. There are n shelves in the library and q operations to process. The operations are as follows: 1. Add a book with ID `x` to shelf `s`. 2. Remove a book with ID `x` from shelf `s`. 3. Check if a book with ID `x` is present in any shelf and output \\"YES\\" or \\"NO\\". 4. List all book IDs on a given shelf `s` in ascending order. Initially, all shelves are empty. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 300000) — the number of shelves and the number of operations to be performed. The next q lines contain the operations in the following format: - For operation type 1: `1 s x` — Add a book with ID `x` to shelf `s`. (1 ≤ s ≤ n, 1 ≤ x ≤ 1e9) - For operation type 2: `2 s x` — Remove a book with ID `x` from shelf `s`. (1 ≤ s ≤ n, 1 ≤ x ≤ 1e9) - For operation type 3: `3 x` — Check if any shelf contains a book with ID `x`. (1 ≤ x ≤ 1e9) - For operation type 4: `4 s` — List all book IDs on shelf `s` in ascending order. (1 ≤ s ≤ n) Output the result of each operation type 3 and type 4. Examples Input 3 7 1 1 101 1 2 102 3 101 2 2 102 3 102 4 1 4 2 Output YES NO 101 NO BOOKS Note In the example: 1. Operation `1 1 101` adds book 101 to shelf 1. 2. Operation `1 2 102` adds book 102 to shelf 2. 3. Operation `3 101` checks if book 101 is present in any shelf and outputs \\"YES\\". 4. Operation `2 2 102` removes book 102 from shelf 2. 5. Operation `3 102` checks if book 102 is present in any shelf and outputs \\"NO\\". 6. Operation `4 1` lists books on shelf 1, and outputs \\"101\\". 7. Operation `4 2` lists books on shelf 2, and since it\'s empty, outputs \\"NO BOOKS\\".","solution":"class Library: def __init__(self, n): self.shelves = {i: set() for i in range(1, n+1)} self.books = {} def add_book(self, shelf, book_id): self.shelves[shelf].add(book_id) if book_id not in self.books: self.books[book_id] = set() self.books[book_id].add(shelf) def remove_book(self, shelf, book_id): if book_id in self.shelves[shelf]: self.shelves[shelf].remove(book_id) self.books[book_id].remove(shelf) if not self.books[book_id]: del self.books[book_id] def check_book(self, book_id): return \\"YES\\" if book_id in self.books else \\"NO\\" def list_books(self, shelf): if self.shelves[shelf]: return \\" \\".join(map(str, sorted(self.shelves[shelf]))) else: return \\"NO BOOKS\\" def process_operations(n, operations): library = Library(n) results = [] for op in operations: if op[0] == 1: library.add_book(op[1], op[2]) elif op[0] == 2: library.remove_book(op[1], op[2]) elif op[0] == 3: results.append(library.check_book(op[1])) elif op[0] == 4: results.append(library.list_books(op[1])) return results"},{"question":"You are given a list of integers where each integer represents the number of candies a child picked from a basket. However, some of the candies may contain a special ingredient that must be evenly distributed among the children to ensure fairness. The goal is to equally distribute these candies among the children after removing the candies with the special ingredient. Each child should end up with the same number of candies, and any initial candies with the special ingredient are ignored during distribution. Implement a function `fair_candy_distribution(candies: List[int], special: int) -> int` which takes the list of candies and the number representing the special ingredient. The function should calculate and return the maximum number of candies each child can get such that every child has the same number of candies, after removing all candies with the special ingredient. # Input - A list of integers `candies` representing the number of candies each child initially picked. - An integer `special` representing the special ingredient in some candies. # Output - An integer representing the maximum number of candies each child can get after distribution. # Constraints - The length of the list `candies` will be between 1 and 1000. - Each integer in the list will be between 0 and 1000. - `special` will be an integer between 0 and 1000. # Example Input ```python candies = [2, 3, 5, 7, 5, 3] special = 2 ``` Output ```python 4 ``` Explanation After removing the candies with the special ingredient (2 candies): Remaining candies are [3, 5, 7, 5, 3] Sum of remaining candies = 3 + 5 + 7 + 5 + 3 = 23 Number of children = 6 Maximum candies per child = 23 // 6 = 3 (since each child must get an integer number of candies) Therefore, the output is 3.","solution":"def fair_candy_distribution(candies, special): Returns the maximum number of candies each child can get after removing the candies with the special ingredient. # Remove candies with the special ingredient remaining_candies = [candy for candy in candies if candy != special] # Calculate the sum of the remaining candies total_candies = sum(remaining_candies) # Number of children num_children = len(candies) # Calculate the maximum number of candies each child can get if num_children == 0: return 0 max_candies_per_child = total_candies // num_children return max_candies_per_child"},{"question":"Alice is very fond of combinatorial games and she recently came across an interesting game involving two players and a pile of stones. Two players, Alice and Bob, take turns removing stones from the pile. On each player\'s turn, the player must remove exactly 1, 3, or 4 stones from the pile. The game starts with Alice and the goal is to be the player who removes the last stone from the pile, thereby winning the game. Given the initial number of stones n, determine whether Alice can guarantee a win if both players play optimally. If Alice can guarantee a win, print \\"Alice\\", otherwise print \\"Bob\\". Input The first line contains the integer n (1 ≤ n ≤ 105) — the initial number of stones in the pile. Output Print \\"Alice\\" if Alice can guarantee a win given the initial number of stones. Otherwise, print \\"Bob\\". Examples Input 1 Output Alice Input 2 Output Bob Input 3 Output Alice Input 10 Output Alice Note In the first example, Alice can take the single stone and win immediately. In the second example, no matter whether Alice takes 1 stone, Bob will always be able to take the last remaining stone and win. In the third example, Alice can take exactly 3 stones and win immediately. In the fourth example, if Alice plays optimally, she can guarantee a win by either first removing 1 stone (leaving 9 stones, a losing position for Bob) or 4 stones (leaving 6 stones, a losing position for Bob).","solution":"def game_winner(n): Determines if Alice can guarantee a win given n stones. Parameters: n (int): The initial number of stones (1 ≤ n ≤ 10^5) Returns: str: \\"Alice\\" if Alice can guarantee a win, otherwise \\"Bob\\" # Initialize memoization table to store results of subproblems dp = [False] * (n + 1) # Base cases if n == 1: return \\"Alice\\" if n == 2: return \\"Bob\\" if n == 3: return \\"Alice\\" if n == 4: return \\"Alice\\" # Fill the dp table for i in range(1, n + 1): if i >= 1 and not dp[i - 1]: dp[i] = True elif i >= 3 and not dp[i - 3]: dp[i] = True elif i >= 4 and not dp[i - 4]: dp[i] = True return \\"Alice\\" if dp[n] else \\"Bob\\""},{"question":"Samuel loves playing with dominoes. One day, he found a particularly interesting game: placing dominoes on an m x n board in such a way that there are no gaps left and no two dominoes overlap. Samuel knows that a single domino can cover exactly two adjacent cells either horizontally or vertically. He is now curious if the entire board can be fully covered with dominoes. Write a program to help Samuel determine if the m x n board can be completely covered with dominoes. Input The input consists of two integers m and n (1 ≤ m, n ≤ 100 000) indicating the dimensions of the board. Output Output \\"YES\\" if Samuel can cover the entire board with dominoes, and \\"NO\\" otherwise. Examples Input 3 2 Output YES Input 5 3 Output NO Input 4 4 Output YES Note For the first example, Samuel can cover the 3x2 board with three horizontal or vertical dominoes. As for the second example, a 5x3 board cannot be fully covered using dominoes since it has an odd number of cells (15 cells, where each domino covers 2 cells). In the third example, the 4x4 board can be completely covered by fitting a combination of horizontal and vertical dominoes as needed.","solution":"def can_cover_with_dominoes(m, n): Determines if an m x n board can be completely covered with dominoes. Args: m: int - number of rows of the board n: int - number of columns of the board Returns: str: \\"YES\\" if the board can be fully covered with dominoes, else \\"NO\\" if (m * n) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of size N x N representing a farm. Each cell in the grid contains an integer, where positive integers represent healthy crops and negative integers represent crops affected by blight. The absolute value of each integer indicates the number of crops in that cell. A cell in the grid can be affected if it is adjacent to (directly above, below, left, or right) a cell containing crops affected by blight. Determine the minimum number of cells you need to replace with healthy crops such that no cell in the grid contains blighted crops and the healthy crops immediately adjacent to a blighted cell are affected. Replacement means converting the negative integer to a positive integer of the same absolute value. Constraints * 1 leq N leq 100 * The absolute value of any integer in the grid is at most 1000. Input Input is given from Standard Input in the following format: N C_{1,1} C_{1,2} ... C_{1,N} C_{2,1} C_{2,2} ... C_{2,N} : C_{N,1} C_{N,2} ... C_{N,N} Output Print the minimum number of cells that need to be replaced to remove all blighted crops. Examples Input 3 1 -1 1 -1 2 2 1 1 -2 Output 3 Input 4 1 2 3 -2 4 -5 6 7 8 9 10 11 12 13 14 15 Output 2 Input 2 -1 -1 -1 -1 Output 4","solution":"def min_replacements_to_remove_blighted_crops(N, grid): Returns the minimum number of cells that need to be replaced to remove all blighted crops. def is_blighted(x, y): Check if a cell is blighted or not. return grid[x][y] < 0 replacements = 0 for i in range(N): for j in range(N): if is_blighted(i, j): replacements += 1 grid[i][j] = -grid[i][j] return replacements"},{"question":"Given an array of distinct integers, you must determine if any three numbers in the array can be used to construct a triangle. Recall that, for any three sides to form a triangle, the sum of any two sides must be greater than the third side. Constraints: - You may assume the array has at least three integers. - Perform this check in a time complexity better than O(n^3). Input: The input consists of two lines: - The first line contains an integer n, the number of elements in the array (3 ≤ n ≤ 10^5). - The second line contains n distinct space-separated integers, representing the elements of the array (1 ≤ array[i] ≤ 10^9). Output: Print \\"YES\\" if there exist three integers in the array that can form a triangle, and \\"NO\\" otherwise. Examples: Input: 6 2 9 4 7 3 5 Output: YES Input: 4 10 1 2 4 Output: NO Input: 5 5 10 15 20 25 Output: YES Explanation: In the first example, the sides 4, 5, and 7 can form a triangle. In the second example, no combination of three sides can meet the triangle inequality condition. In the third example, the sides 10, 15, and 25 can form a triangle.","solution":"def can_form_triangle(arr): Determines if any three numbers in the array can form a triangle. For any three sides a, b, and c to form a triangle, the sum of any two sides must be greater than the third side. arr.sort() for i in range(len(arr) - 2): if arr[i] + arr[i + 1] > arr[i + 2]: return \\"YES\\" return \\"NO\\" # Example usage # n = 6 # arr = [2, 9, 4, 7, 3, 5] # print(can_form_triangle(arr)) # should print \\"YES\\""},{"question":"A monastery has a rectangular garden of size n × m. The garden is arranged in a grid of n rows and m columns. Each cell can either contain a flower (marked as \'F\') or be empty (marked as \'.\'). Two monks are tasked with collecting as many flowers as possible in a single straight path. The paths of the monks can start at any cell and move either horizontally or vertically, but they cannot go outside the boundaries of the garden. The paths of the monks must not intersect or overlap. Determine the maximum number of flowers that the monks can collect together. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 50), the dimensions of the garden. Each of the next n lines contains m characters, each being either \'F\' or \'.\'. Output Print a single integer – the maximum number of flowers the monks can collect together. Examples Input 3 3 F.F FFF F.F Output 6 Input 4 5 F..F. ..F.. FF... F..FF Output 5 Note In the first example, one monk can start from (1, 0) and collect 3 flowers till (1, 2), while the second monk can start from (0, 2) and collect 3 flowers till (2, 2). Thus, the maximum number of flowers is 6. In the second example, one monk can start from (2, 0) and collect 2 flowers till (2, 1), while the second monk can start from (3, 3) and collect 3 flowers till (3, 4). Thus, the maximum number of flowers is 5.","solution":"def max_flowers(n, m, garden): # This function calculates the maximum flowers that can be collected # by two monks following the given constraints # Function to count flowers in a row def count_flowers_in_row(row): return sum(1 for cell in row if cell == \'F\') # Function to count flowers in a column def count_flowers_in_column(col_idx): return sum(1 for row in garden if row[col_idx] == \'F\') max_flowers = 0 # Check all possible horizontal paths for r in range(n): count_row = count_flowers_in_row(garden[r]) for rr in range(n): if r != rr: count_second_row = count_flowers_in_row(garden[rr]) max_flowers = max(max_flowers, count_row + count_second_row) # Check all possible vertical paths for c in range(m): count_col = count_flowers_in_column(c) for cc in range(m): if c != cc: count_second_col = count_flowers_in_column(cc) max_flowers = max(max_flowers, count_col + count_second_col) return max_flowers # Read garden layout def read_input(): import sys input = sys.stdin.read data = input().strip().split() n, m = int(data[0]), int(data[1]) garden = data[2:] return n, m, garden if __name__ == \\"__main__\\": n, m, garden = read_input() print(max_flowers(n, m, garden))"},{"question":"Adventurer\'s Magic Rings story In the distant kingdom of Eldoria, adventurers rely on mystical rings to enhance their abilities during quests. Each ring is adorned with precious stones that grant specific powers. The rings can be forged together to create more powerful artifacts, but the process isn\'t straightforward. Forging a ring requires understanding the balance of powers and ensuring that the resulting ring retains the desired qualities without becoming unstable. Kiara, a skilled blacksmith and enchanter, has been tasked with creating the ultimate ring for the kingdom\'s champion. She has a collection of rings, each with certain powers, and she needs to combine them optimally to produce a ring with the maximum power level. problem You are given a list of rings, each characterized by a unique power level. Kiara can combine any two rings to create a new ring. The power level of the newly forged ring is calculated as the product of the power levels of the two rings being combined. However, combining two rings consumes them; they no longer exist for further combinations. Kiara\'s goal is to determine the maximum power level she can achieve by optimally combining the rings. Input format The input consists of two lines: - The first line contains an integer `n` (2 ≤ n ≤ 10^3), the number of rings. - The second line contains `n` integers, representing the power levels of the rings, denoted as `p1, p2, ..., pn` (1 ≤ pi ≤ 10^3). Output format Output a single integer, the maximum power level that can be achieved by combining the rings. Example: Input 4 3 5 7 9 Output 945 Explanation By combining the rings with power levels 9 and 7, we get a new ring with power level 63 (9 * 7). Then, combining the resulting ring of power 63 with the ring of power 5, we get a new ring with power level 315 (63 * 5). Finally, combining this ring with the remaining ring of power level 3 gives a ring with power level 945 (315 * 3). The maximum power level achievable is 945.","solution":"def maximum_ring_power(n, power_levels): power_levels.sort(reverse=True) max_power = 1 for power in power_levels: max_power *= power return max_power # Example usage: n = 4 power_levels = [3, 5, 7, 9] print(maximum_ring_power(n, power_levels)) # Output: 945"},{"question":"Sarah is developing a command-line application that responds to user commands typed in a natural language form. She wants the commands to be more intuitive for users, so she needs to implement a command parser. The parser should take user input, normalize it, and map it to predefined command keywords. The command parser should handle four predefined commands: 1. \\"create\\" - to create a new resource 2. \\"delete\\" - to delete an existing resource 3. \\"update\\" - to update an existing resource 4. \\"read\\" - to fetch information about existing resources The parser should be case-insensitive and should correctly interpret a variety of synonymous phrases to these commands. Synonymous phrases are provided as a list for each command. Write a function `parse_command` that takes an input string and returns the corresponding command keyword if the input contains one of the predefined commands or their synonymous phrases. If the input does not match any command or phrase, return \\"unknown\\". Input: - The first line contains an integer N (1 ≤ N ≤ 100), the number of test cases. - The next line contains an integer S (1 ≤ S ≤ 10) for each command (create, delete, update, read), indicating the number of synonymous phrases. - The next S lines contain synonymous phrases for each command. - One or more lines follow, each containing a user\'s input string (each up to 100 characters). Output: - For each input string, output the corresponding command keyword or \\"unknown\\" if no match is found. Example: Input: ``` 2 2 add new new entry 2 remove clear out 2 change modify 2 get info fetch info Create a new project Remove old files ``` Output: ``` create delete ``` Notes: - The predefined commands and synonymous phrases are: - create: [\\"add new\\", \\"new entry\\"] - delete: [\\"remove\\", \\"clear out\\"] - update: [\\"change\\", \\"modify\\"] - read: [\\"get info\\", \\"fetch info\\"] - For the input strings \\"Create a new project\\" and \\"Remove old files\\", the expected outputs are \\"create\\" and \\"delete\\" respectively, because \\"Create\\" is synonymous with \\"add new\\" (part of \\"create\\") and \\"Remove\\" is synonymous with \\"remove\\" (part of \\"delete\\").","solution":"def parse_command(num_cases, synonym_phrases, user_inputs): Parse user commands and map them to predefined command keywords. Parameters: num_cases (int): number of user input strings synonym_phrases (dict): a dictionary mapping command keywords to lists of synonym phrases user_inputs (list): a list of user input strings to be interpreted. Returns: list: a list of command keywords corresponding to each user input, or \\"unknown\\" if no match is found. command_mappings = { \\"create\\": [], \\"delete\\": [], \\"update\\": [], \\"read\\": [] } for command, synonyms in synonym_phrases.items(): command_mappings[command].extend(synonyms) def normalize_command(user_input): lower_input = user_input.lower() for command, synonyms in command_mappings.items(): if command in lower_input: return command for synonym in synonyms: if synonym in lower_input: return command return \\"unknown\\" results = [] for user_input in user_inputs: results.append(normalize_command(user_input)) return results # Example usage: # num_cases = 2 # synonym_phrases = { # \\"create\\": [\\"add new\\", \\"new entry\\"], # \\"delete\\": [\\"remove\\", \\"clear out\\"], # \\"update\\": [\\"change\\", \\"modify\\"], # \\"read\\": [\\"get info\\", \\"fetch info\\"] # } # user_inputs = [\\"Create a new project\\", \\"Remove old files\\"] # print(parse_command(num_cases, synonym_phrases, user_inputs))"},{"question":"In a fictional city, the municipal transport authority wants to analyze the patterns of bus utilization to improve services. For this purpose, they have collected data about the trips taken by buses within the city. Each trip is represented by a start and end timestamp, where the timestamp is an integer representing the number of seconds since midnight of a particular day. Your task is to write a program that calculates the total number of seconds during which any bus was utilized within the city on that day, based on the provided trip timestamps. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) – the number of trips. The subsequent n lines each contain two integers si and ei (0 ≤ si < ei ≤ 86,400), which represent the start and end times of the i-th trip, respectively. Output Print a single integer – the total number of seconds during which at least one bus was utilized. Example Input: 3 3600 7200 5400 8400 8100 12600 Output: 9000 Explanation: - The first trip lasts from 3600 to 7200 seconds. - The second trip overlaps with the first and lasts from 5400 to 8400 seconds. - The third trip overlaps partially with the second and lasts from 8100 to 12600 seconds. The times when buses are utilized without any overlap are from 3600 to 12600 seconds, resulting in a total utilization time of 9000 seconds. The intervals are consolidated to determine the total unique utilized time.","solution":"def total_bus_utilization(trips): Calculate the total number of seconds during which any bus was utilized within the city. :param trips: List of tuples where each tuple contains start and end times of a trip. :return: Total number of seconds any bus was utilized without overlap. if not trips: return 0 # Sort trips by their start time trips.sort() total_utilization = 0 current_start, current_end = trips[0] for start, end in trips[1:]: if start <= current_end: # Overlapping interval current_end = max(current_end, end) else: # Non-overlapping interval total_utilization += current_end - current_start current_start, current_end = start, end # Add the last interval total_utilization += current_end - current_start return total_utilization # Example usage: n = 3 trips = [(3600, 7200), (5400, 8400), (8100, 12600)] print(total_bus_utilization(trips)) # Output: 9000"},{"question":"A company is hosting a competition where participants are required to solve problems over several rounds. Each round has its own scoring mechanism, and participants will score points based on the number of correct answers they provide. However, for incentivizing participants, the competition organizers decided to add some bonus points in specific conditions. The scoring rules are as follows: 1. Participants earn 2 points for each correct answer. 2. If participants answer all questions in a round correctly, they earn an additional 5 points as a bonus. 3. If participants answer more than half of the questions correctly in a round, but not all of them, they earn an additional 3 points as a bonus. Given the number of questions in a round and the number of correct answers provided by a participant, determine the total score that the participant should receive for that round. Constraints * 1 ≤ number_of_questions ≤ 100 * 0 ≤ correct_answers ≤ number_of_questions Input The input is given from Standard Input in the following format: number_of_questions correct_answers Output Print the total score that the participant should receive for the round. Examples Input 10 10 Output 25 Input 8 5 Output 13 Input 7 3 Output 6","solution":"def calculate_score(number_of_questions, correct_answers): Calculate the total score for a participant based on the number of questions and correct answers in a round. :param number_of_questions: Total number of questions in the round :param correct_answers: Number of correct answers provided by the participant :return: Total score of the participant for that round score = correct_answers * 2 if correct_answers == number_of_questions: score += 5 elif correct_answers > number_of_questions / 2: score += 3 return score if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split() number_of_questions = int(input_data[0]) correct_answers = int(input_data[1]) print(calculate_score(number_of_questions, correct_answers))"},{"question":"You are given a list of airplanes, each defined by its arrival and departure times at an airport and the gate number it uses. Your task is to determine the maximum number of gates in use simultaneously. Each airplane is represented as a tuple `(a, d, g)`, where: - `a` is the arrival time (an integer, 0 ≤ a ≤ 23), - `d` is the departure time (an integer, 0 ≤ d ≤ 23; `a ≤ d`), - `g` is the gate number (an integer, 1 ≤ g ≤ 100). Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of airplanes. Each of the next `n` lines contains three integers `a`, `d` and `g` (0 ≤ a, d ≤ 23; 1 ≤ g ≤ 100), representing the arrival time, departure time, and gate number of each airplane. Output Print a single integer — the maximum number of gates in use simultaneously. Examples Input 5 1 4 1 2 5 2 3 6 1 5 8 3 7 10 2 Output 3 Input 3 10 12 1 12 14 1 13 15 1 Output 2 Note In the first example: - From 1 to 2, one airplane uses gate 1. - From 2 to 3, airplanes use gates 1 and 2. - From 3 to 4, airplanes use gates 1, 2, and 1 (total 2 different gates). - From 4 to 5, airplanes use gates 1 and 2. - From 5 to 6, airplanes use gates 2 and 1. - From 6 to 7, one airplane uses gate 3. - From 7 to 8, airplanes use gates 2 and 3. - From 8 to 10, one airplane uses gate 2. The maximum number of gates used simultaneously is 3. In the second example, there is a period where two airplanes use the same gate simultaneously, so the maximum number of gates in use at any time is 2.","solution":"def max_gates_in_use(n, airplanes): events = [] for airplane in airplanes: a, d, g = airplane events.append((a, 1)) # Gate g usage started events.append((d + 1, -1)) # Gate g usage ended the next minute after departure events.sort() # Sort events by time max_gates = 0 current_gates = 0 for event in events: time, delta = event current_gates += delta max_gates = max(max_gates, current_gates) return max_gates"},{"question":"Given a string containing only lowercase alphabetical characters, write a function that counts the number of vowels (a, e, i, o, u) and consonants, and returns the result as a tuple (number_of_vowels, number_of_consonants). Input The input consists of a single line containing a non-empty string s (1 ≤ |s| ≤ 10^6), where |s| is the length of the string. Output Output a single line containing two integers separated by a space — the number of vowels and the number of consonants in the string. Examples Input hello Output 2 3 Input programming Output 3 8 Input abracadabra Output 5 6 Note In the first example, the input string \\"hello\\" contains 2 vowels (e, o) and 3 consonants (h, l, l). In the second example, the input string \\"programming\\" contains 3 vowels (o, a, i) and 8 consonants (p, r, g, r, m, m, n, g). In the third example, the input string \\"abracadabra\\" contains 5 vowels (a, a, a, a, a) and 6 consonants (b, r, c, d, b, r).","solution":"def count_vowels_and_consonants(s): Returns the number of vowels and consonants in the string s. vowels = set(\\"aeiou\\") number_of_vowels = sum(1 for char in s if char in vowels) number_of_consonants = len(s) - number_of_vowels return (number_of_vowels, number_of_consonants)"},{"question":"You are given a matrix with N rows and M columns. Each cell of the matrix contains an integer. Two cells are considered adjacent if they share a common side. Your task is to find the maximum sum of values in any path from the top-left corner to the bottom-right corner of the matrix. The path can only move right or down at any step. Constraints: * 1 ≤ N, M ≤ 1000 * -10^4 ≤ matrix[i][j] ≤ 10^4 Input Inputs are provided from Standard Input in the following form: N M matrix[0][0] matrix[0][1] ... matrix[0][M-1] matrix[1][0] matrix[1][1] ... matrix[1][M-1] . . matrix[N-1][0] matrix[N-1][1] ... matrix[N-1][M-1] Output Output an integer representing the maximum sum of values in any path from the top-left corner to the bottom-right corner. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 -1 -2 -3 -4 Output -7","solution":"def max_path_sum(matrix): Returns the maximum sum of values in any path from the top-left corner to the bottom-right corner of the matrix. The path can only move right or down at any step. n = len(matrix) m = len(matrix[0]) # dp matrix to store the maximum sum up to each cell dp = [[0] * m for _ in range(n)] # Initialize the dp value for the top-left cell dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp matrix for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right cell contains the maximum sum path return dp[n-1][m-1]"},{"question":"Write a program to identify whether two given strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of another. Input The input file consists of several lines with pairs of strings in each line. Each string contains only lowercase alphabetical characters and has at most 100 characters. The number of pairs (datasets) is less than 50. Output Your program must output \\"YES\\" if the strings are anagrams, and \\"NO\\" otherwise. Print each result on a new line. Example Input listen silent triangle integral Output YES YES","solution":"def are_anagrams(str1, str2): Returns \'YES\' if str1 and str2 are anagrams, \'NO\' otherwise. return \'YES\' if sorted(str1) == sorted(str2) else \'NO\' def process_input(input_lines): results = [] for pair in input_lines: str1, str2 = pair.split() results.append(are_anagrams(str1, str2)) return results"},{"question":"In a certain game, players collect points by solving challenges. Each challenge awards a certain number of points when solved. Given the set of points for each challenge and a target points total, determine if it is possible for a player to exactly reach the target points by solving any subset of the challenges. Write a function that determines if reaching the exact target points is possible. Input The first line contains two integers n (1 ≤ n ≤ 100) — the number of challenges, and T (1 ≤ T ≤ 10^5) — the target points. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^3) — the points awarded for each challenge. Output Print \\"YES\\" if it is possible to exactly reach T points by solving a subset of the given challenges\' points, otherwise print \\"NO\\". Examples Input 4 10 2 3 7 8 Output YES Input 3 5 2 4 6 Output NO Note In the first example, the subset {2, 3, 7} can be chosen to exactly reach the target of 10 points. In the second example, there is no subset that sums up to the target of 5 points.","solution":"def can_reach_target(n, T, points): Determine if it is possible to reach exactly T points by solving any subset of the challenges. Parameters: n (int): Number of challenges. T (int): Target points. points (list[int]): List of points for each challenge. Returns: str: \\"YES\\" if it is possible to reach exactly T points, otherwise \\"NO\\". dp = [False] * (T + 1) dp[0] = True for point in points: for i in range(T, point - 1, -1): if dp[i - point]: dp[i] = True return \\"YES\\" if dp[T] else \\"NO\\""},{"question":"You are given a grid with n rows and m columns filled with integers. Your task is to modify the grid such that all the integers in the grid are non-negative, and the change for an integer should be minimal. The change to an integer is minimal when you select the closest non-negative integer to it. For example, if the integer is -3, the closest non-negative integer would be 0 since the change is minimal (+3) compared to any other non-negative integer. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines each contain m integers ai,j (-1000 ≤ ai,j ≤ 1000) — the elements of the grid. Output Output the modified grid such that all integers are non-negative and the change to each integer is minimal. Examples Input 3 3 -1 -2 -3 4 5 -6 -7 -8 9 Output 0 0 0 4 5 0 0 0 9 Input 2 2 -10 5 -2 3 Output 0 5 0 3","solution":"def minimal_change_grid(n, m, grid): Modify the grid such that all integers are non-negative and the change to each integer is minimal. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list containing the grid elements :return: Modified 2D list with non-negative integers for i in range(n): for j in range(m): if grid[i][j] < 0: grid[i][j] = 0 return grid"},{"question":"In a small club, there are n members, each with a unique ID from 1 to n. They decided to organize a series of contests. Each contest is a match between two members, and exactly one member wins. The contests occur over m days. For each contest happening on day i, two members, xi and yi, compete, and the winner zi is recorded (zi is either xi or yi). Each member can participate in multiple contests, but only one match per day. Your task is to determine each member\'s win count after the m days of contests. Input The first line contains two integers n (2 ≤ n ≤ 50) and m (1 ≤ m ≤ 2500) — the number of members and the number of contests, respectively. The next m lines contain three integers xi, yi, and zi (1 ≤ xi, yi, zi ≤ n) — the IDs of the two members competing and the winner\'s ID for each contest. Output Print n integers, where the i-th integer is the number of wins of the member with ID i. Examples Input 4 3 1 2 1 2 3 2 1 3 1 Output 2 1 0 0 Input 5 5 1 2 2 1 3 1 4 5 4 2 4 4 2 5 5 Output 1 1 0 2 1 Note In the first example: - On the first day, member 1 competes with member 2 and member 1 wins. So member 1 gets 1 win. - On the second day, member 2 competes with member 3 and member 2 wins. So member 2 gets 1 win. - On the third day, member 1 competes with member 3 and member 1 wins. So member 1 now has 2 wins. In the second example: - On the first day, member 2 beats member 1. - On the second day, member 1 beats member 3. - On the third day, member 4 beats member 5. - On the fourth day, member 4 beats member 2. - On the fifth day, member 5 beats member 2.","solution":"def get_win_counts(n, m, contests): Given the number of members n, the number of contests m, and a list of contests, returns the win count for each member. Parameters: n (int): Number of members m (int): Number of contests contests (List[List[int]]): A list of contests where each contest is a list [xi, yi, zi] representing two members (xi and yi) competing and the winner (zi). Returns: List[int]: A list of win counts for each member. win_counts = [0] * n for xi, yi, zi in contests: win_counts[zi-1] += 1 return win_counts"},{"question":"Given n activities with their start and finish times, determine the maximum number of activities that can be selected without any overlapping. Constraints * 1 ≤ n ≤ 1000 * 0 ≤ start_time, finish_time ≤ 10000 Input n start_time1 finish_time1 start_time2 finish_time2 ... start_timen finish_timen The first line contains an integer n, representing the number of activities. The next n lines each contain two integers representing the start and finish time of an activity. Output Print a single integer representing the maximum number of non-overlapping activities that can be selected. Examples Input 6 1 3 2 5 4 6 6 8 5 9 8 10 Output 4 Explanation: The selected activities are (1, 3), (4, 6), (6, 8), and (8, 10). These are non-overlapping, making a maximum of 4 activities. Input 4 0 6 1 2 2 4 5 7 Output 3 Explanation: The selected activities are (1, 2), (2, 4), and (5, 7). All these activities do not overlap, making a maximum of 3 activities.","solution":"def max_non_overlapping_activities(n, activities): Returns the maximum number of non-overlapping activities that can be selected. :param n: int - number of activities :param activities: List[Tuple[int, int]] - list of (start_time, finish_time) tuples :return: int - maximum number of non-overlapping activities # Sort activities based on their finish times sorted_activities = sorted(activities, key=lambda x: x[1]) # Initialize the end time of the last selected activity last_end_time = -1 max_activities = 0 for start, end in sorted_activities: if start >= last_end_time: max_activities += 1 last_end_time = end return max_activities"},{"question":"You are given a string consisting of lowercase Latin letters and a set of queries. In each query, you are provided with a range and asked to find the number of distinct characters within that range in the string. Input The first line contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the input. Then t test case descriptions follow. The first line of each test case is an integer n (1 ≤ n ≤ 2⋅10^5) — the length of the string. The second line of each test case contains a string s of length n. The third line of each test case is an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the start and end indices of a query (inclusive). It is guaranteed that the sum of the values of n for all test cases in the input does not exceed 2⋅10^5, and the sum of the values of q for all test cases in the input does not exceed 10^6. Output For each query, print the number of distinct characters in the substring s[l:r]. Example Input 2 7 abacaba 3 1 3 2 4 1 7 5 xyzzy 2 1 2 3 5 Output 2 2 3 2 3 Note In the first test case of the example: For the first query (1, 3), the substring is \\"aba\\", which has 2 distinct characters: \'a\' and \'b\'. For the second query (2, 4), the substring is \\"bac\\", which has 2 distinct characters: \'b\', \'a\', and \'c\'. For the third query (1, 7), the substring is \\"abacaba\\", which has 3 distinct characters: \'a\', \'b\', and \'c\'. In the second test case of the example: For the first query (1, 2), the substring is \\"xy\\", which has 2 distinct characters: \'x\' and \'y\'. For the second query (3, 5), the substring is \\"zzy\\", which has 2 distinct characters: \'z\' and \'y\'.","solution":"def distinct_characters_counts(test_cases): This function accepts a list of test cases, and for each test case, it finds the number of distinct characters in each given range. :param test_cases: List of dictionaries with keys \'n\', \'s\', \'q\', and \'queries\' :return: List of lists. Each sublist contains the results of the queries results = [] for case in test_cases: n = case[\'n\'] s = case[\'s\'] q = case[\'q\'] queries = case[\'queries\'] case_results = [] for l, r in queries: # Find the distinct characters in the range [l-1, r-1] (0-based index) distinct_characters = set(s[l-1:r]) case_results.append(len(distinct_characters)) results.append(case_results) return results"},{"question":"You are given a binary matrix of size N x M (1-indexed), each cell containing either a 0 or a 1. Your task is to determine the length of the longest path of connected 1s in the matrix. You can move in four possible directions: up, down, left, or right. A connected path consists of cells that are directly adjacent to each other and contain 1s, and you can visit each cell at most once during a path. Constraints * 1 leq N, M leq 500 * Each value in the input matrix is either 0 or 1. Input Input is given from Standard Input in the following format: N M matrix[1][1] matrix[1][2] ... matrix[1][M] matrix[2][1] matrix[2][2] ... matrix[2][M] ... matrix[N][1] matrix[N][2] ... matrix[N][M] Output Print the length of the longest path of connected 1s. Examples Input 4 5 0 1 0 0 1 1 1 0 1 1 0 1 1 0 0 1 0 0 1 1 Output 5 Input 3 3 0 0 0 0 1 0 0 0 0 Output 1","solution":"def longest_path_of_1s(N, M, matrix): def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or matrix[x][y] == 0: return 0 # Mark the cell as visited by setting it to 0 matrix[x][y] = 0 # Recursive DFS in 4 possible directions length = 1 length += dfs(x + 1, y) length += dfs(x - 1, y) length += dfs(x, y + 1) length += dfs(x, y - 1) return length max_path_length = 0 for i in range(N): for j in range(M): if matrix[i][j] == 1: current_path_length = dfs(i, j) max_path_length = max(max_path_length, current_path_length) return max_path_length if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for i in range(N): row = [] for j in range(M): row.append(int(data[index])) index += 1 matrix.append(row) print(longest_path_of_1s(N, M, matrix))"},{"question":"Alice is organizing a charity run, and she has a list of participants with their respective donation amounts. Each participant can donate multiple times on different days, and their donation amounts for each day are recorded. Alice wants to help identify the top donors for better recognition during the event. Your task is to write a program that processes this data and outputs the top K donors based on their cumulative donation amounts. If two donors have the same cumulative amount, they should be ranked lexicographically by their names. Input The first line contains an integer T, the number of test cases. Each test case starts with an integer N, indicating the number of entries, followed by N lines each containing a string (denoting the participant\'s name) and an integer (representing their donation amount for that day). After the N entries, each test case ends with an integer K, representing the number of top donors to be identified. Output For each test case, output K lines, each containing the name and the total donation amount of the top K donors. The donors should be listed in descending order of their total donation amounts, and if there is a tie, the donors should be listed in lexicographical order of their names. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ donation amount ≤ 10^4 1 ≤ K ≤ N 1 ≤ length of participant\'s name ≤ 100 Sample Input 2 5 Alice 50 Bob 40 Alice 100 Charlie 70 Alice 30 2 4 Dave 20 Eve 30 Dave 50 Frank 10 3 Sample Output Alice 180 Charlie 70 Dave 70 Eve 30 Frank 10 Explanation In the first test case, the total donations are: - Alice: 50 + 100 + 30 = 180 - Bob: 40 - Charlie: 70 The top 2 donors are Alice and Charlie. In the second test case, the total donations are: - Dave: 20 + 50 = 70 - Eve: 30 - Frank: 10 The top 3 donors are Dave, Eve, and Frank.","solution":"def top_k_donors(test_cases): results = [] for cases in test_cases: entries = cases[\'entries\'] k = cases[\'k\'] donation_dict = {} for name, donation in entries: if name in donation_dict: donation_dict[name] += donation else: donation_dict[name] = donation sorted_donors = sorted(donation_dict.items(), key=lambda x: (-x[1], x[0])) results.append(sorted_donors[:k]) return results"},{"question":"A delivery company has a warehouse and a set of delivery points. The company\'s delivery van can carry a certain maximum weight. There are multiple parcels, each with a different weight and a specific destination that needs to be delivered. The goal is to determine the maximum number of parcels that can be delivered in a single trip without exceeding the weight capacity of the van. Furthermore, each destination has a priority score, and the van should prioritize destinations with the highest scores to maximize the importance of each trip. Your task is to write a program that computes the maximum number of parcels that can be delivered, given the weight capacity of the van and the list of parcels with their respective weights and destination priority scores. # Input - The first line contains two integers n (1 ≤ n ≤ 1000) and W (1 ≤ W ≤ 10^6) — the number of parcels and the weight capacity of the van, respectively. - The next n lines each contain three integers wi (1 ≤ wi ≤ 10^6), di (1 ≤ di ≤ 100), and pi (1 ≤ pi ≤ 100) — the weight of the i-th parcel, the destination score of the i-th parcel, and the priority score of the i-th parcel, respectively. # Output - Print a single integer — the maximum number of parcels that can be delivered in one trip without exceeding the weight capacity, prioritizing the parcels with the highest destination scores. # Example Input ``` 5 100 20 50 10 30 30 20 40 40 30 10 60 40 80 20 50 ``` Output ``` 4 ``` Explanation The van can carry a maximum weight of 100 units. The parcels are prioritized based on their destination scores. In this case, the parcels with weights 20, 30, 40, and 10 can be carried in a single trip, delivering a total of 4 parcels while not exceeding the weight capacity.","solution":"def max_num_parcels(n, W, parcels): Returns the maximum number of parcels that can be delivered without exceeding the weight capacity of the van, prioritizing the parcels with the highest destination scores. Args: n (int): Number of parcels W (int): Weight capacity of the van parcels (list of tuples): Each tuple contains three integers representing the weight, destination score, and priority score of a parcel. Returns: int: Maximum number of parcels that can be delivered. # Sort parcels by destination score and then by weight parcels.sort(key=lambda x: (-x[1], x[0])) current_weight = 0 num_parcels = 0 for weight, dest_score, priority in parcels: if current_weight + weight <= W: current_weight += weight num_parcels += 1 else: break return num_parcels"},{"question":"You are given a list of positive integers. Write a function that calculates the sum of all possible unique pairs in the list and returns the pair that has the maximum sum. Input: A list of positive integers. Output: The pair of integers which have the highest sum as a tuple. If multiple pairs have the same sum, return any one of them. Sample Input: [1, 2, 3, 9, 8] Sample Output: (9, 8) Note: The output tuple should have the two numbers in any order (either (9, 8) or (8, 9) would be correct in the sample output). If the list is empty or has less than two elements, return an empty tuple.","solution":"def max_sum_pair(lst): Returns the pair of integers from the list which have the highest sum. If multiple pairs have the same sum, any one of them is returned. If the list is empty or has less than two elements, returns an empty tuple. if len(lst) < 2: return () max1 = max(lst) lst.remove(max1) max2 = max(lst) return (max1, max2)"},{"question":"A well-known metal recycling company, RecycleMax, is developing a new system to optimize metal recycling processes by better organizing the collected metal pieces. The system needs to sort metal pieces based on their weights and then perform several operations efficiently. You are tasked with writing a program that processes multiple queries on an initially empty collection of metal pieces. The supported queries are as follows: 1. `ADD w`: Add a metal piece with weight `w` to the collection. 2. `REMOVE w`: Remove one metal piece with weight `w` from the collection if it exists. If there are multiple pieces with the same weight, only one of them is removed. 3. `MAX`: Output the weight of the heaviest metal piece currently in the collection. If the collection is empty, output \\"EMPTY\\". The program should process a series of these commands and output the required results for `MAX` queries. Input The input consists of an integer `Q` (1 ≤ Q ≤ 100,000), representing the number of queries. Each of the following `Q` lines contains one of the queries in the form described above. The value of `w` will always be a positive integer and not exceed 100,000. Output For each `MAX` query, print the weight of the heaviest metal piece in the collection or \\"EMPTY\\" if the collection is empty. Example Input 8 ADD 10 ADD 20 MAX REMOVE 20 MAX REMOVE 10 MAX REMOVE 10 Output 20 10 EMPTY","solution":"import heapq class MetalCollection: def __init__(self): self.pieces = [] self.entry_finder = {} # mapping of weights to their counts self.REMOVED = \'<removed>\' def add(self, w): heapq.heappush(self.pieces, -w) if w in self.entry_finder: self.entry_finder[w] += 1 else: self.entry_finder[w] = 1 def remove(self, w): if w in self.entry_finder and self.entry_finder[w] > 0: self.entry_finder[w] -= 1 if self.entry_finder[w] == 0: del self.entry_finder[w] def max(self): while self.pieces and (-self.pieces[0] not in self.entry_finder): heapq.heappop(self.pieces) if self.pieces: return -self.pieces[0] else: return \\"EMPTY\\" def process_queries(queries): collection = MetalCollection() results = [] for query in queries: cmd = query.split() if cmd[0] == \'ADD\': collection.add(int(cmd[1])) elif cmd[0] == \'REMOVE\': collection.remove(int(cmd[1])) elif cmd[0] == \'MAX\': results.append(collection.max()) return results"},{"question":"You are given a directed acyclic graph (DAG) with n nodes and m edges. Each node is numbered from 1 to n. Your task is to answer q queries about the longest path length between two nodes in the graph. The DAG is guaranteed to have no cycles. Each query specifies two nodes, u and v. You need to find the length of the longest path from u to v if it exists. The length of a path is the number of edges in it. If there is no path from u to v, return -1 for that query. Input The first line of input contains three integers n, m, and q (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 2·10^5, 1 ≤ q ≤ 50 000) — the number of nodes, the number of edges, and the number of queries respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge from node u to node v. Each of the next q lines contains two integers u and v (1 ≤ u, v ≤ n) — the nodes for the queries. It is guaranteed that the given graph is a DAG. Output Output q lines — the answers for the queries. Examples Input 6 7 3 1 2 1 3 2 4 3 4 3 5 4 6 5 6 1 6 2 5 4 3 Output 3 -1 -1 Input 4 4 2 1 2 2 3 3 4 1 3 1 4 1 3 2 4 Output 2 3","solution":"from collections import defaultdict, deque def longest_path_dag(n, m, edges, queries): # Step 1: Create an adjacency list and in-degree list adj_list = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: adj_list[u].append(v) in_degree[v] += 1 # Step 2: Perform topological sorting topo_order = [] queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) while queue: node = queue.popleft() topo_order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Step 3: Initialize distances dist = [-float(\'inf\')] * (n + 1) dist_topo_order = [dist[:]] * (n + 1) dist_topo_order[0][0] = 0 # Starting point (dummy) for start in range(1, n + 1): if in_degree[start] == 0: dist[start] = 0 # Longest path from node to itself is 0 for node in topo_order: if dist[node] != -float(\'inf\'): for neighbor in adj_list[node]: if dist[neighbor] < dist[node] + 1: dist[neighbor] = dist[node] + 1 dist_topo_order[start] = dist[:] dist = [-float(\'inf\')] * (n + 1) # Step 4: Process queries results = [] for u, v in queries: if dist_topo_order[u][v] == -float(\'inf\'): results.append(-1) else: results.append(dist_topo_order[u][v]) return results"},{"question":"John loves reading novels, especially science fiction. He has a large collection of novels and categorizes them based on their theme. Today, he wants to reorganize his collection in such a manner that all the novels of each unique theme end up stored consecutively on his bookshelf. Additionally, John wants to minimize the number of times a novel needs to be moved for this reorganization. He has given you a list of novels identifiers, each associated with a specific theme. Write a program to find the minimum number of moves required to organize all the novels so that novels of the same theme are stored consecutively. Input The first line contains an integer n (1 ≤ n ≤ 1000) - the number of novels. The second line contains a string of length n consisting of uppercase letters A to Z where each character represents the theme of the respective novel. Output Print a single integer representing the minimum number of moves required. Example Input 5 ABACA Output 2 Input 4 AAAA Output 0","solution":"def min_moves_to_organize(n, themes): from collections import Counter # Count frequency of each character counter = Counter(themes) max_freq = max(counter.values()) # The minimum number of moves required return n - max_freq # Example usage: # n = 5 # themes = \\"ABACA\\" # print(min_moves_to_organize(n, themes)) # Output should be 2 # n = 4 # themes = \\"AAAA\\" # print(min_moves_to_organize(n, themes)) # Output should be 0"},{"question":"In a town celebration, a grand balloon release event is planned to take place. There is a certain number of balloons of different colors that will be released simultaneously into the sky. Each balloon has a distinct color, and the goal is to count how many times the color patterns of the balloons repeat as they float upwards. Consider the balloons arranged in a single line, and the movement pattern involves each balloon rising every second by one position up. Some balloons have a tendency to change their position due to the wind, swapping places with their neighbors. Essentially, these movements can create various distinct patterns. For the problem, we need to consider strings of characters where each character represents a balloon of a specific color, and similar sequences indicate the same pattern. The task is to determine the number of times each pattern appears in the provided sequence of balloon colors. Input - The first line contains an integer n (1 ≤ n ≤ 105), the number of balloons. - The second line contains a string s of length n, representing the colors of the balloons. Each character in the string is a lowercase English letter denoting a color. Output - Print the count of each unique pattern that appears as the balloons rise. Example Input 7 abacaba Output a: 4 ab: 2 ba: 2 ac: 1 ca: 1 cab: 1 Note: In this example, as the balloons are released and rise, we see that the substrings/patterns involving \'a\' appear 4 times in various places. Substrings like \'ab\' and \'ba\' appear 2 times, among others. Enumerating all possible patterns\' occurrences is essential in the final solution.","solution":"from collections import defaultdict def count_patterns(n, s): Counts the frequency of each unique pattern (substring) in the balloon color string. Parameters: n (int): The number of balloons (length of the string). s (str): The string representing the balloon colors. Returns: dict: A dictionary with patterns as keys and their frequencies as values. pattern_count = defaultdict(int) # Iterate over all possible substrings and count their occurrences for length in range(1, n + 1): for start in range(n - length + 1): substring = s[start:start + length] pattern_count[substring] += 1 return pattern_count"},{"question":"A book club maintains a reading list that mentions each book along with the year it was read by the first member who read it. The club president wants to generate a summary that includes how many books were read in each year. Create a program that reads a list of books with the year they were read and outputs the years in ascending order along with the number of books read in each year. # Input: The input is given in the following format: ``` n year1 book1 year2 book2 :: yearn bookn ``` - `n` (1 ≤ n ≤ 50) represents the number of books. - `yeari` (1900 ≤ yeari ≤ 2023) represents the year a book was read. - `booki` (1 ≤ length of booki ≤ 100) is a string representing the book title. # Output: Output the years in ascending order along with the count of books read in each year. Each year and its corresponding book count should be on a new line, separated by a space. # Example: Input: ``` 5 2020 \\"To Kill a Mockingbird\\" 2019 \\"1984\\" 2020 \\"The Great Gatsby\\" 2018 \\"Pride and Prejudice\\" 2019 \\"The Catcher in the Rye\\" ``` Output: ``` 2018 1 2019 2 2020 2 ```","solution":"def books_per_year(n, book_list): from collections import defaultdict year_count = defaultdict(int) for entry in book_list: year, book = entry.split(\\" \\", 1) year_count[int(year)] += 1 result = [] for year in sorted(year_count.keys()): result.append(f\\"{year} {year_count[year]}\\") return \\"n\\".join(result)"},{"question":"Denis and Nastya, while playing a game together on their phone, came across a particular challenge. They need to determine if they can transform one string into another using a sequence of operations. In each operation, they can delete exactly one character from the string or swap any two consecutive characters. Denis has a string `s1`, and Nastya has a string `s2`, and they want to know if it is possible to transform `s1` into `s2` using a finite number of operations as described above. Write a function that determines whether it is possible to transform `s1` into `s2` using the given operations. Input The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line is the string `s1` (1 ≤ |s1| ≤ 1000). - The second line is the string `s2` (1 ≤ |s2| ≤ 1000). Output For each test case, output \\"YES\\" if it is possible to transform `s1` into `s2` using the above operations, or \\"NO\\" otherwise. Examples Input 3 abc bca ab ba abc abcd Output YES YES NO Note In the first test case, \\"abc\\" can be transformed into \\"bca\\" by swapping characters: \\"abc\\" -> \\"acb\\" -> \\"bca\\". In the second test case, \\"ab\\" can be transformed into \\"ba\\" by swapping characters once. In the third test case, it is impossible to transform \\"abc\\" into \\"abcd\\" since string lengths do not match.","solution":"def can_transform(t, test_cases): results = [] for s1, s2 in test_cases: if sorted(s1) == sorted(s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # test_cases = [(\'abc\', \'bca\'), (\'ab\', \'ba\'), (\'abc\', \'abcd\')] # print(can_transform(t, test_cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"Rick has decided to farm crops to prepare for the upcoming winter. He has a field represented as a 2D grid where each cell can either be empty or have an obstacle that blocks planting. You need to help Rick plant crops in such a way that he maximizes the number of crops but no two crops can be in the same row or column (since they will compete for resources). You will be given a grid where `0` represents an empty cell, and `1` represents an obstacle. Rick can plant one crop on each empty cell such that no two crops are in the same row or column. Write a function `maxCrops(n, grid)` that takes as input an integer `n` (the dimension of the n x n grid) and the grid itself represented as a list of lists, and returns the maximum number of crops that can be planted while satisfying the conditions mentioned. [Input] - An integer `n` representing the dimensions of the grid (n x n). - A list of lists representing the grid where each element is either 0 or 1. [Output] - An integer representing the maximum number of crops that can be planted. [Constraints] 1 ≤ n ≤ 50 The grid contains only 0s and 1s. A cell with 1 cannot have a crop. SAMPLE INPUT 4 [[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]] SAMPLE OUTPUT 4","solution":"def maxCrops(n, grid): Takes an integer n and a 2D grid and returns the maximum number of crops that can be planted such that no two crops are in the same row or column and no crops are planted on obstacles (cells with 1). rows = [False] * n cols = [False] * n def canPlace(row, col): Check if we can place a crop at (row, col) return not rows[row] and not cols[col] and grid[row][col] == 0 crops = 0 for row in range(n): for col in range(n): if canPlace(row, col): rows[row] = True cols[col] = True crops += 1 return crops"},{"question":"Yuki Takeya is creating a new uniform design for her high school basketball team. The team consists of n players, where each player has a favorite number that they want to include on their uniform. The i-th player\'s favorite number is denoted as f_i. Yuki wants to design the uniforms such that the total absolute difference of the adjacent favorite numbers is minimized. In other words, if the players are arranged in an order p_1, p_2, ..., p_n, she wants to minimize the sum |f_{p_1} - f_{p_2}| + |f_{p_2} - f_{p_3}| + ... + |f_{p_{n-1}} - f_{p_n}|, where |x| denotes the absolute value of x. Help Yuki arrange the players in an order that minimizes this total absolute difference. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 1000) — the number of players. The second line of each test case contains n integers f_1, f_2, ..., f_n (1 ≤ f_i ≤ 10^6) — the favorite numbers of the players. Output For each test case, output on one line n integers representing the favorite numbers of the players in the order that minimizes the total absolute difference. If there are multiple such orders, output any of them. Example Input 3 3 1 3 2 4 4 1 2 3 5 8 5 2 6 3 Output 1 2 3 1 2 3 4 2 3 5 6 8 Note In the first test case, the total absolute difference of the arrangement is |1 - 2| + |2 - 3| = 1 + 1 = 2, which is minimized. Other orders would have a higher total absolute difference. In the second test case, the total absolute difference of the arrangement is minimized even though the order 4 3 2 1 is also valid for the same minimum difference. In the third test case, the output order produces the minimal total absolute difference as well.","solution":"def minimize_absolute_difference(t, test_cases): This function takes the number of test cases and a list of test cases, where each test case is a tuple containing the number of players and a list of favorite numbers, and returns a list of lists where each list contains the player\'s favorite numbers ordered to minimize the total absolute difference. results = [] for case in test_cases: n, favorite_numbers = case sorted_favorites = sorted(favorite_numbers) results.append(sorted_favorites) return results"},{"question":"Given an m by n binary matrix filled with 0\'s and 1\'s, find the largest rectangle containing only 1\'s and return its area. You need to solve the problem using dynamic programming and optimize the solution efficiently for large inputs. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 200) — the number of rows and columns in the matrix, respectively. The next m lines contain n integers each (either 0 or 1) representing the binary matrix. Output Print the area of the largest rectangle containing only 1\'s in the given matrix. Example Input 4 4 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 Output 6 Note The binary matrix is as follows: 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 The largest rectangle containing only 1s has an area of 6.","solution":"def maximal_rectangle(matrix): if not matrix or not matrix[0]: return 0 m = len(matrix) n = len(matrix[0]) max_area = 0 dp = [0] * n for i in range(m): for j in range(n): # Update dp to record the height of 1\'s in column j up to row i dp[j] = dp[j] + 1 if matrix[i][j] == 1 else 0 max_area = max(max_area, largest_rectangle_area(dp)) return max_area def largest_rectangle_area(heights): stack = [-1] max_area = 0 for i in range(len(heights)): while stack[-1] != -1 and heights[stack[-1]] >= heights[i]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack[-1] != -1: h = heights[stack.pop()] w = len(heights) - stack[-1] - 1 max_area = max(max_area, h * w) return max_area"},{"question":"You are given an unweighted, undirected graph with n nodes and m edges. Your task is to calculate the number of connected components in the graph and print the size of each component. A connected component is a maximal set of nodes such that there is a path between any two nodes in this set. Input The first line of input contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 10^5), the number of nodes and edges in the graph respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output Print two lines: 1. The number of connected components in the graph. 2. The sizes of each connected component in non-decreasing order. Examples Input 6 3 1 2 2 3 4 5 Output 3 1 2 3 Input 4 0 Output 4 1 1 1 1","solution":"def count_connected_components(n, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) # 1-based indexing component_sizes = [] for node in range(1, n+1): if not visited[node]: size = bfs(node) component_sizes.append(size) component_sizes.sort() return len(component_sizes), component_sizes def read_input(n, m, edge_list): if m == 0: return n, [] edges = [tuple(map(int, edge_each.strip().split())) for edge_each in edge_list] return n, edges"},{"question":"Alice and Bob are playing a board game on an `n x m` grid. In the game, Alice controls a piece that starts at the top-left corner of the board (cell (0, 0)), and Bob controls a piece that starts at the bottom-right corner of the board (cell (n-1, m-1)). They take turns moving their pieces. On each turn, a player can move their piece to an adjacent cell that is either to the right or downward, but not both moves in one turn. The players play alternately with Alice going first. The game ends when the pieces meet at some cell on the board. The goal is to determine on whose move the pieces will meet or if they never meet. Input - `n` and `m` (2 ≤ n, m ≤ 1000) — the number of rows and columns of the board. Output - Output either \\"Alice\\" if Alice\'s move makes the pieces meet, \\"Bob\\" if Bob\'s move makes the pieces meet, or \\"Never\\" if the pieces never meet. Examples Input 4 4 Output Bob Input 2 3 Output Alice Input 5 5 Output Bob Example Explanation - In the first example with a 4x4 board: - Alice makes the first move to (0, 1) - Bob moves to (3, 2) - Alice moves to (0, 2) - Bob moves to (2, 2) - Alice moves to (1, 2) - Bob moves to (1, 3) - Alice moves to (1, 3), which is the same cell, thus they meet on Bob\'s turn. - In the second example with a 2x3 board: - Alice makes the first move to (0, 1) - Bob moves to (1, 1) - Alice moves to (0, 2) - Bob moves to (1, 2), thus they meet on Alice\'s turn.","solution":"def determine_winner(n, m): Determines which player (Alice or Bob) will make the pieces meet or if they never meet. Args: - n (int): number of rows of the board. - m (int): number of columns of the board. Returns: - str: \\"Alice\\" if Alice\'s move makes the pieces meet, \\"Bob\\" if Bob\'s move makes the pieces meet, or \\"Never\\". # When the sum of (n - 1) + (m - 1) is even, Bob wins because Alice makes the move first. # When the sum of (n - 1) + (m - 1) is odd, Alice wins because Alice makes the move first. steps = (n - 1) + (m - 1) if steps % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You and your friend are playing a game called \\"String Transformer.\\" The goal is to transform a given string `S` into another string `T` by performing a series of operations. Each operation consists of choosing a substring of `S` and reversing it. Your task is to determine if it\'s possible to transform `S` into `T` using any number of such operations. As a hint, consider the properties of substrings and how the order of characters can be rearranged through multiple reversals. INPUT FORMAT: Line 1: String S Line 2: String T CONSTRAINTS: 1 ≤ |S|, |T| ≤ 100,000 S and T consist of lowercase English letters only. OUTPUT FORMAT: Line 1: \\"YES\\" if it\'s possible to transform S into T, otherwise \\"NO\\". SAMPLE INPUT 1 abcd dcba SAMPLE OUTPUT 1 YES SAMPLE INPUT 2 abc bca SAMPLE OUTPUT 2 NO","solution":"from collections import Counter def can_transform(S, T): Determines if it\'s possible to transform string S into string T by performing any number of substring reversals. :param S: The original string :param T: The target string :return: \\"YES\\" if the transformation is possible, \\"NO\\" otherwise if Counter(S) == Counter(T): return \\"YES\\" return \\"NO\\""},{"question":"Problem statement Given a list of edges of an undirected graph, determine if the graph is bipartite. A bipartite graph is one that can be colored using two colors such that no two adjacent vertices have the same color. An undirected graph is given as a list of edges, where each edge is represented by two integers denoting the connected vertices. The vertices are numbered from 1 to N. Write a function that determines if the graph is bipartite. Constraints * 2 ≤ N ≤ 1000 (Number of vertices) * 1 ≤ M ≤ 10000 (Number of edges) * 1 ≤ u, v ≤ N Input The first line contains two integers, N and M. The following M lines each contain two integers, u and v, which represent an edge between vertex u and vertex v. Output Print \\"YES\\" if the graph is bipartite, otherwise print \\"NO\\". Examples Input 4 4 1 2 1 3 2 4 3 4 Output YES Input 3 3 1 2 2 3 1 3 Output NO Input 5 4 1 2 2 3 3 4 4 5 Output YES","solution":"def is_bipartite(N, edges): from collections import deque, defaultdict # Create adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) color = [-1] * (N + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in adj[node]: if color[neighbor] == -1: # If not colored color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, N + 1): # Handle disconnected graph if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"A zoologist is observing animal movement patterns in a forest. The forest is represented as a 2D grid of size n x n, where each cell can either be empty or contain an obstacle. The zoologist tracks an animal that starts at the top-left corner of the grid and wants to reach the bottom-right corner. The animal can move right, left, up, or down, but cannot move diagonally or through obstacles. Given the grid and the starting and ending positions, you need to determine the minimum number of steps required for the animal to reach the destination, or determine if it\'s impossible. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000), the size of the grid. The next n lines each contain n characters (either \'.\' for an empty cell or \'#\' for an obstacle), describing the forest grid. The animal always starts at the top-left corner (0, 0) and needs to reach the bottom-right corner (n-1, n-1). Output Output a single integer — the minimum number of steps required for the animal to reach the destination. If it\'s impossible, output -1. Examples Input 4 ...# .#.. ..#. .... Output 6 Input 3 ... #.# .#. Output -1 Note In the first example, an optimal path could be (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (3,3). In the second example, there is no possible path from the top-left to the bottom-right corner.","solution":"from collections import deque def min_steps_to_reach_end(n, forest): if forest[0][0] == \'#\' or forest[n-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == n-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and forest[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"Evelyn is working on a project involving social network analysis. She is interested in identifying groups of people who can be reached from each other within a specified distance. She models the social network as an undirected graph, where nodes represent people and edges represent direct friendships. Evelyn wants to find the number of connected components in the graph, where the maximum distance between any two nodes in the same component is k edges or less. Given the number of nodes, the list of edges, and the maximum allowed distance k, write a program to determine the number of such connected components. Input The first line contains two integers n and m (1 ≤ n ≤ 2·104, 0 ≤ m ≤ 1·105) — the number of nodes and the number of edges in the graph. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating a direct friendship between node u and node v. The last line contains a single integer k (1 ≤ k ≤ n). Output Print a single integer — the number of connected components where the maximum distance between any two nodes within the same component is k edges or less. Examples Input 6 5 1 2 2 3 3 4 4 5 5 6 2 Output 2 Input 6 3 1 2 2 3 4 5 1 Output 4 Note In the first example, there are two components: {1, 2, 3} and {4, 5, 6}, as the maximum distance within each component is exactly 2. In the second example, there are four components: {1, 2, 3}, {4}, {5}, and {6}, as we cannot have nodes within a single component that are more than 1 edge apart.","solution":"from collections import defaultdict, deque def find_connected_components(n, edges, k): def bfs(node): queue = deque([(node, 0)]) visited.add(node) component_nodes = [node] while queue: current, distance = queue.popleft() for neighbor in graph[current]: if neighbor not in visited and distance + 1 <= k: visited.add(neighbor) component_nodes.append(neighbor) queue.append((neighbor, distance + 1)) return set(component_nodes) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components_count = 0 for node in range(1, n + 1): if node not in visited: bfs(node) components_count += 1 return components_count"},{"question":"You are working on a text processing tool that identifies and fixes common formatting errors in text. Your task is to write a function that capitalizes the first letter of each sentence in a given text block. Sentences are considered to end with a period (.), exclamation mark (!), or question mark (?). Ensure that the rest of the sentence remains unchanged. For simplicity, you can assume that the input text is well-formed, meaning there are no abbreviations with periods inside sentences and each sentence is followed by a space. Input: - A single string containing the text block. The string may contain multiple sentences. Output: - A single string with each sentence starting with a capital letter. Examples: Input: ``` hello world. how are you? i am fine! thanks for asking. ``` Output: ``` Hello world. How are you? I am fine! Thanks for asking. ``` Input: ``` it\'s a beautiful day. let\'s make the most of it. ``` Output: ``` It\'s a beautiful day. Let\'s make the most of it. ``` Focus on readability and efficiency of your solution.","solution":"def capitalize_sentences(text): Capitalizes the first letter of each sentence in the given text block. Sentences are considered to end with a period (.), exclamation mark (!), or question mark (?). Args: text (str): the text block containing multiple sentences. Returns: str: the text block with each sentence starting with a capital letter. if not text: return text # Return empty text as is sentences = text.split() for i, word in enumerate(sentences): if i == 0 or sentences[i-1][-1] in \\".!?\\": sentences[i] = word.capitalize() return \\" \\".join(sentences)"},{"question":"You are given a string that represents an alphanumeric serial number. Your task is to determine whether the serial number is valid or not based on the following criteria: 1. The serial number must start with a letter. 2. The serial number must end with a digit. 3. The serial number can contain only letters and digits. 4. The length of the serial number must be between 5 and 12 characters, inclusive. Input: The first line contains T, the number of test cases. Each test case consists of a single string representing the serial number. Output: For each test case, print \\"Valid\\" if the serial number meets all the criteria, otherwise print \\"Invalid\\". Constraints: 1 ≤ T ≤ 100 5 ≤ length of serial number ≤ 12 Example: Input: 3 A12345 1B2345 Abcdef9 Output: Valid Invalid Valid Explanation: In the first case, the serial number starts with a letter, ends with a digit, contains only letters and digits, and has a valid length. In the second case, the serial number does not start with a letter. In the third case, the serial number satisfies all the criteria.","solution":"def is_valid_serial_number(serial_number): This function checks if the serial number is valid based on the given criteria. if not (5 <= len(serial_number) <= 12): return \\"Invalid\\" if not serial_number[0].isalpha(): return \\"Invalid\\" if not serial_number[-1].isdigit(): return \\"Invalid\\" if not serial_number.isalnum(): return \\"Invalid\\" return \\"Valid\\" def validate_serial_numbers(test_cases): This function validates a list of serial numbers. results = [] for serial_number in test_cases: results.append(is_valid_serial_number(serial_number)) return results"},{"question":"In a small town, there are several events taking place, each event having a start and end time. Citizens can attend one event at a time without overlapping. Given a list of events, each defined by a start time and an end time, find the maximum number of non-overlapping events a single citizen can attend. A citizen can attend more than one event only if the end time of one event is less than or equal to the start time of the next event. Input: The first line contains an integer n (1 ≤ n ≤ 105) — the number of events. Each of the next n lines contains two integers si and ei (1 ≤ si < ei ≤ 109) — the start and end times of the i-th event. Output: Print a single integer — the maximum number of non-overlapping events that can be attended. Examples: Input: 3 1 3 2 5 4 6 Output: 2 Input: 4 1 2 3 4 0 6 5 7 Output: 3 In the first example, the citizen can attend events [1, 3] and [4, 6], thus the maximum number is 2. In the second example, the citizen can attend events [1, 2], [3, 4], and [5, 7], thus the maximum number is 3.","solution":"def max_non_overlapping_events(events): Finds the maximum number of non-overlapping events that can be attended. Parameters: events (list): A list of tuples where each tuple consists of two integers (start, end) Returns: int: The maximum number of non-overlapping events that can be attended events.sort(key=lambda x: x[1]) # Sort events by their end time count = 0 last_end_time = -1 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Implement a function that finds the longest subsequence of the given list of integers such that every two consecutive numbers in this subsequence have a difference of exactly 1. # Input Format - The input contains a single line with space-separated integers representing the list. # Output Format - Output a single integer which is the length of the longest subsequence with consecutive elements having a difference of exactly 1. # Example Input ``` 1 2 3 4 2 1 5 6 3 4 4 3 ``` Output ``` 6 ``` Explanation The longest subsequence where every two consecutive numbers differ by exactly 1 is either 1, 2, 1, 2, 3, 4 or 6, 5, 4, 3, 4, 3, which has the length 6. # Constraints - The length of the list will be at most 1000. - The values in the list will be in the range of -10^9 to 10^9. - The input list is not sorted.","solution":"def longest_consecutive_subsequence(arr): if not arr: return 0 arr_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Igor K. has learned a new trick for efficiently calculating the greatest common divisor (GCD) of two large numbers. He\'s discovered an algorithm called Binary GCD that uses only simple operations like bit shifts and integer subtraction, rather than the slower division operation. Inspired by this algorithm, Igor K. has decided to rewrite his GCD function to take advantage of these performance improvements. The Binary GCD algorithm works as follows: 1. If both numbers are zero, the GCD is undefined. Typically, you would return 0 in software implementations. 2. If one number is zero, the GCD is the other number. 3. If both numbers are even, the GCD of both is twice the GCD of half of those numbers. 4. If one number is even and the other is odd, the GCD is the same as the GCD of the even number divided by 2 and the odd number. 5. If both numbers are odd, the GCD is the same as the GCD of the absolute difference of the numbers and the smaller of the two numbers. 6. This process is repeated until one of the numbers becomes zero. Write a function that implements the Binary GCD algorithm to find the GCD of two given non-negative integers. # Input The input consists of two non-negative integers `a` and `b` (0 ≤ a, b ≤ 10^9). # Output The output should be a single integer representing the greatest common divisor of `a` and `b`. # Function Signature ```python def binary_gcd(a: int, b: int) -> int: # Your code here ``` # Examples ```python # Example 1 a = 48 b = 18 print(binary_gcd(a, b)) # Output: 6 # Example 2 a = 7 b = 0 print(binary_gcd(a, b)) # Output: 7 # Example 3 a = 6 b = 9 print(binary_gcd(a, b)) # Output: 3 # Example 4 a = 0 b = 0 print(binary_gcd(a, b)) # Output: 0 ``` # Constraints - The input numbers `a` and `b` will both fit within the range of a 32-bit signed integer. - The Binary GCD algorithm only uses bitwise and subtraction operations, making it efficient for very large integers.","solution":"def binary_gcd(a: int, b: int) -> int: Calculate the greatest common divisor (GCD) of two non-negative integers using the Binary GCD algorithm (Stein\'s algorithm). # Base cases if a == 0: return b if b == 0: return a # Reduce initial a and b by removing common factors of 2 k = 0 while ((a | b) & 1) == 0: # a and b are both even a >>= 1 b >>= 1 k += 1 # At this point, at least one of a or b is odd while (a & 1) == 0: a >>= 1 while b != 0: while (b & 1) == 0: # Remove all factors of 2 in b b >>= 1 # Now both a and b are odd. Swap if necessary so that a <= b, # then set b = b - a (which is even). if a > b: a, b = b, a b = b - a # Restore common factors of 2 return a << k"},{"question":"In a distant future, the sector you are responsible for managing has developed a sophisticated system of interconnected cities. Each city is connected to exactly two other cities, forming a series of loops. Your task is to determine the optimal way to provide resources to the cities such that every city is fully supported with minimal connections. The cities and their connections form a single loop or ring. Given this, you need to find the minimum number of highways to deactivate so that no city is left isolated while still breaking down the loop into smaller, non-circular connected components. Each city is connected to exactly two other cities, forming a circular loop. To break this loop while ensuring there are no isolated cities, you need to remove the minimum number of highways. Input First-line contains an integer N: the number of cities. Next N lines contain u and v, denoting a highway between city number \'u\' and city number \'v\'. The cities are 0-indexed. Output Print the minimum number of highways to be deactivated. Constraints 3 ≤ N ≤ 100,000 0 ≤ u,v < N There are exactly N highways forming a single loop. Sample Input 4 0 1 1 2 2 3 3 0 Sample Output 2 Explanation The loop contains four cities connected as follows: 0 - 1 - 2 - 3 - 0. You can break this loop by deactivating any two highways. The minimum number of highways to be deactivated to break the loop without isolating any city is 2. For instance, deactivating {0-1} and {2-3} would result in two connected components: 0 - 3 and 1 - 2.","solution":"def min_highways_to_deactivate(N, connections): Returns the minimum number of highways to be deactivated to break the circular loop of cities. Parameters: N (int): The number of cities. connections (list of tuples): List containing u, v pairs denoting a highway between city u and city v. Returns: int: Minimum number of highways to be deactivated. return 2 # For a circular loop of N cities, always need to cut exactly 2 highways to break the loop."},{"question":"Write a program that simulates the functionality of a vending machine. The vending machine offers a selection of products, each of which has a specific price. Users can insert money into the machine and choose a product to purchase. The machine should dispense the selected product if the user has inserted enough money and should return the appropriate change. If the user has not inserted enough money, the machine should display an error message indicating insufficient funds. The program should read a list of products and their prices, followed by a series of transactions. Each transaction includes the amount of money inserted and the chosen product. Input The first line of input contains an integer `p` (1 ≤ p ≤ 50), the number of products in the vending machine. The next `p` lines each contain a string representing the name of the product (without spaces) and an integer representing the price of the product in cents. Following this, multiple transactions are provided. Each transaction is a line containing an integer representing the amount of money inserted (in cents) and the name of the chosen product. The end of transactions is indicated by a line with `0 END`. Output For each transaction, print a line indicating the result: - If the user has inserted enough money, print \\"Dispensed PRODUCT_NAME. Change: X cents\\". - If the user has not inserted enough money, print \\"Insufficient funds for PRODUCT_NAME. Please insert X more cents\\". Example Input 3 Chips 120 Soda 150 Candy 80 200 Chips 100 Soda 80 Candy 10 Candy 0 END Output Dispensed Chips. Change: 80 cents Insufficient funds for Soda. Please insert 50 more cents Dispensed Candy. Change: 0 cents Insufficient funds for Candy. Please insert 70 more cents","solution":"def vending_machine_simulation(p, products, transactions): product_prices = {} for product, price in products: product_prices[product] = price result = [] for money_inserted, product in transactions: if product not in product_prices: continue price = product_prices[product] if money_inserted >= price: change = money_inserted - price result.append(f\\"Dispensed {product}. Change: {change} cents\\") else: needed = price - money_inserted result.append(f\\"Insufficient funds for {product}. Please insert {needed} more cents\\") return result # Example usage p = 3 products = [(\\"Chips\\", 120), (\\"Soda\\", 150), (\\"Candy\\", 80)] transactions = [(200, \\"Chips\\"), (100, \\"Soda\\"), (80, \\"Candy\\"), (10, \\"Candy\\"), (0, \\"END\\")] # Expected output: # Dispensed Chips. Change: 80 cents # Insufficient funds for Soda. Please insert 50 more cents # Dispensed Candy. Change: 0 cents # Insufficient funds for Candy. Please insert 70 more cents print(\\"n\\".join(vending_machine_simulation(p, products, transactions)))"},{"question":"Alex is planning a hike and wants to map out a path through the forest, represented as a grid. Each cell in the grid has a specific height, and Alex wants to start from the top-left corner (0, 0) and reach the bottom-right corner (n-1, m-1) with the path that minimizes the maximum difference in height between any two adjacent cells the entire journey. Note that Alex can only move up, down, left, or right. Your task is to write a program to find this path and print the minimum possible value of the maximum difference in height. Input The first line contains two integers n and m (2 ≤ n, m ≤ 100), representing the dimensions of the grid. Each of the next n lines contains m integers representing the heights of the grid cells. Each height value is an integer between 1 and 1000 inclusive. Output Print the minimum possible value of the maximum difference in height between any two adjacent cells along Alex’s path from the top-left corner to the bottom-right corner. Examples Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 4 4 1 2 6 6 4 5 7 8 2 3 4 5 5 6 7 8 Output 3 Note In the first example, one of the optimal paths to take is (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2). The max height difference between adjacent cells in this path is 2, which is minimal among all possible paths. In the second example, one optimal path to take is (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (3, 1) -> (3, 2) -> (3, 3). The max height difference between adjacent cells in this path is 3, which is minimal among all possible paths.","solution":"from heapq import heappop, heappush def min_max_diff_path(n, m, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < m def dijkstra(): heap = [(0, 0, 0)] # (max difference, x, y) visited = [[False] * m for _ in range(n)] max_diffs = [[float(\'inf\')] * m for _ in range(n)] max_diffs[0][0] = 0 while heap: max_diff, x, y = heappop(heap) if x == n-1 and y == m-1: return max_diff if visited[x][y]: continue visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and not visited[nx][ny]: new_diff = max(max_diff, abs(grid[x][y] - grid[nx][ny])) if new_diff < max_diffs[nx][ny]: max_diffs[nx][ny] = new_diff heappush(heap, (new_diff, nx, ny)) return dijkstra()"},{"question":"You are given a string consisting of lowercase English letters and an integer k. Your task is to determine if it is possible to rearrange the characters in the string so that there are at least k occurrences of any character consecutively. Input The first line of the input contains a string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. The second line contains an integer k (1 ≤ k ≤ |s|). Output Print \\"YES\\" (without quotes) if it is possible to rearrange the string so that at least one character appears k or more times consecutively. Otherwise, print \\"NO\\". Examples Input aabbcc 2 Output YES Input aabbcc 3 Output NO Note In the first example, one possible rearrangement is \\"aabbcc\\", where the character \'a\' appears twice consecutively. In the second example, it is not possible to rearrange the string so that any character appears three times consecutively.","solution":"def can_rearrange_consecutively(s, k): Determines if it\'s possible to rearrange the characters in the string so that there are at least k occurrences of any character consecutively. from collections import Counter char_count = Counter(s) max_char_occurrence = max(char_count.values()) return \\"YES\\" if max_char_occurrence >= k else \\"NO\\""},{"question":"Ash is an enthusiastic gardener and loves to plant trees in his garden in a perfectly symmetrical order. He has n different types of trees, each represented by a number from 1 to n. He plans to plant these trees in a row such that the arrangement of the tree types is a palindrome. A sequence is called a palindrome if it reads the same forward and backward. Ash wants to minimize the total number of trees he plants while ensuring that the arrangement is a palindrome and uses all tree types at least once. Write a program that determines the minimum number of trees Ash needs to plant to create a palindromic sequence including all tree types. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of different tree types. Output Print a single integer, the minimum number of trees Ash needs to plant to create a palindromic sequence including all tree types. Examples Input 1 Output 1 Input 3 Output 5 Note In the first sample case: Since there is only one type of tree, the smallest palindromic sequence is just that single tree. In the second sample case: An optimal palindromic sequence using three types of trees (1, 2, 3) is \\"1 2 3 2 1\\", which has a length of 5.","solution":"def min_palindromic_length(n): Given the number of tree types n, return the minimum number of trees needed to form a palindromic sequence that includes all tree types at least once. if n == 1: return 1 else: return 2 * n - 1 # Example usage print(min_palindromic_length(1)) # Expected output: 1 print(min_palindromic_length(3)) # Expected output: 5"},{"question":"A palindrome is a word or phrase that reads the same backwards as forwards. Modify the string by deleting characters in any order such that there exists at least two different palindromic subsequences of length three. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". Constraints: * The length of the string is between 1 and 100, inclusive. * The string consists of lowercase English letters only. Input: A single string s. Output: A single line containing the word \\"YES\\" or \\"NO\\". Examples: Input: abca Output: YES Input: abcba Output: YES Input: abcd Output: NO Input: abbbaa Output: YES Explanation: In the first example, we can delete \'b\' to get the string \\"aca\\" which gives us two palindromic subsequences \\"aaa\\" and \\"ccc\\". In the second example, the string \\"abcba\\" already contains the palindromic subsequences \\"abc\\", \\"bcb\\". In the third example, there are no two different palindromic subsequences of length three possible by any deletions. In the fourth example, the string \\"abbbaa\\" has palindromic subsequences like \\"abb\\", \\"bbb\\", \\"aaa\\".","solution":"def has_two_palindromic_subsequences(s): Check if the string can be modified to contain at least two different palindromic subsequences of length 3. if len(s) < 3: return \\"NO\\" # To contain at least two different palindromic subsequences of length 3, # the string must have at least two different triplets which can be rearranged. # Check for at least two different chars having count >= 2 from collections import Counter counter = Counter(s) count_pairs = sum(1 for v in counter.values() if v >= 2) if count_pairs >= 2: return \\"YES\\" # Check for characters which can form two different palindromic 3-sequences for i in range(len(s)): for j in range(i+1, len(s)): if s[i] == s[j]: sub = s[i+1:j] if len(set(sub)) >= 1: return \\"YES\\" return \\"NO\\""},{"question":"A city has n intersections connected by m one-way roads. Each road has a certain travel time. You are tasked with finding the shortest travel time from a given starting intersection to all other intersections. However, there’s a twist. If there’s a direct road between two intersections, you can choose to use it or replace it with a teleportation link that has zero travel time. Your task is to determine the shortest travel times from the starting intersection to all other intersections considering the above teleportation option. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 100000) — the number of intersections and the number of roads, respectively. Each of the next m lines contains three space-separated integers u, v, t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000), representing a road from intersection u to intersection v with travel time t. The last line contains a single integer s (1 ≤ s ≤ n) — the starting intersection. Output Print n space-separated integers – the shortest travel time from intersection s to each of the intersections (including s). If some intersections cannot be reached, output -1 for those distances. Example Input 4 5 1 2 5 2 3 4 1 3 10 1 4 6 3 4 1 1 Output 0 0 0 0 Note In the first sample, we start from intersection 1. By using the teleportation option, we can replace all direct roads by teleportation links with zero travel time. Hence, the shortest travel time from intersection 1 to any other intersection is zero.","solution":"import heapq def shortest_travel_times(n, m, roads, s): Returns the shortest travel time from the starting intersection to all other intersections. Using teleportation option makes all direct roads cost zero travel time. # Initialize distances with -1 (for unreachable intersections) distances = [-1] * n # Using a priority queue for Dijkstra\'s algorithm pq = [] heapq.heappush(pq, (0, s - 1)) distances[s - 1] = 0 while pq: current_time, current_node = heapq.heappop(pq) for u, v, t in roads: if u - 1 == current_node: new_time = current_time if distances[v - 1] == -1 or new_time < distances[v - 1]: distances[v - 1] = new_time heapq.heappush(pq, (new_time, v - 1)) elif v - 1 == current_node: new_time = current_time if distances[u - 1] == -1 or new_time < distances[u - 1]: distances[u - 1] = new_time heapq.heappush(pq, (new_time, u - 1)) return distances"},{"question":"Problem: Given an integer array `arr` and an integer `k`, find the k-th smallest element in the array. Note that it is the k-th smallest element in the sorted order, not the k-th distinct element. Write a function `kthSmallest(arr, k)` that takes the array `arr` and the integer `k` as input and returns the k-th smallest element. **Function Signature** ```python def kthSmallest(arr: List[int], k: int) -> int: pass ``` **Input** - An integer array `arr` of size n (1 ≤ n ≤ 10^5) - An integer `k` (1 ≤ k ≤ n) **Output** - An integer representing the k-th smallest element in the array. **Examples** Input ``` arr = [3, 1, 5, 2, 4] k = 3 ``` Output ``` 3 ``` Input ``` arr = [7, 10, 4, 3, 20, 15] k = 4 ``` Output ``` 10 ``` Input ``` arr = [12, 3, 5, 7, 19, 20, 1] k = 2 ``` Output ``` 3 ```","solution":"from typing import List def kthSmallest(arr: List[int], k: int) -> int: Returns the k-th smallest element in the array arr. arr.sort() return arr[k-1]"},{"question":"A music application allows users to create custom playlists of songs. Each song has a unique positive integer ID. The playlist can have duplicate songs, but it should not contain any song that has been added more than once consecutively. Given a list of song IDs representing the playlist, your task is to determine if the playlist meets the no-consecutive-duplicate rule. If the rule is violated, output the index (1-based) of the first duplicate song that appears consecutively. If the playlist is valid, output \\"VALID\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of songs in the playlist. The second line contains n space-separated integers, representing the song IDs in the playlist. Output If the playlist contains consecutive duplicates, print the 1-based index of the first duplicate song. Otherwise, print \\"VALID\\". Examples Input 5 1 2 2 3 4 Output 3 Input 4 1 2 3 4 Output VALID Note In the first sample, the playlist contains two consecutive \'2\'s starting from position 3, so the output is 3. In the second sample, there are no consecutive duplicates, so the output is \\"VALID\\".","solution":"def check_playlist(n, songs): Determines if the playlist meets the no-consecutive-duplicate rule. Args: n (int): Number of songs in the playlist. songs (list): List of song IDs. Returns: str: \\"VALID\\" if no consecutive duplicates, otherwise the 1-based index of the first duplicate. for i in range(1, n): if songs[i] == songs[i - 1]: return str(i + 1) return \\"VALID\\""},{"question":"You are given a large grid of H by W cells, where some cells are blocked and some are open. Your task is to help a robot navigate from the top-left corner of the grid to the bottom-right corner. The robot can only move either right or down, and it cannot move through blocked cells. Determine the number of distinct paths the robot can take to reach its destination. Input The input consists of a single dataset. The format is as follows: H W grid_rows The first line contains two integers, H (2 ≤ H ≤ 1000) and W (2 ≤ W ≤ 1000), denoting the height and the width of the grid, respectively. The next H lines each contain W characters representing the grid. Each character is either \'.\' representing an open cell or \'#\' representing a blocked cell. Output Output a single integer representing the number of distinct paths the robot can take to reach the bottom-right corner of the grid from the top-left corner. If there are no such paths, output 0. Constraints - The top-left and bottom-right cells are guaranteed to be open. - You can assume each cell’s value is either \'.\' or \'#\'. - There are no restrictions on the number of blocked cells. Sample Input 4 4 .... .#.. ..#. .... Sample Output 4 Example Input 4 4 .... .#.. ..#. .... Output 4 Explanation: There are four distinct paths from the top-left corner to the bottom-right corner: 1. (0,0) → (0,1) → (0,2) → (0,3) → (1,3) → (2,3) → (3,3) 2. (0,0) → (0,1) → (0,2) → (1,2) → (2,2) → (2,3) → (3,3) 3. (0,0) → (0,1) → (1,1) → (1,2) → (2,2) → (2,3) → (3,3) 4. (0,0) → (1,0) → (1,1) → (1,2) → (1,3) → (2,3) → (3,3)","solution":"def count_paths(H, W, grid): if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': return 0 dp = [[0] * W for _ in range(H)] dp[0][0] = 1 for i in range(H): for j in range(W): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[H-1][W-1] # Helper function to read grid and convert to list of lists def read_grid_from_input(input_str): lines = input_str.strip().split(\'n\') H, W = map(int, lines[0].split()) grid = [list(line) for line in lines[1:H+1]] return H, W, grid"},{"question":"Alice has been given a problem where she needs to determine if a given sequence of parentheses (which can include round brackets \'()\', square brackets \'[]\', and curly brackets \'{}\') is balanced or not. A sequence is considered balanced if every opening bracket has a corresponding closing bracket in the correct order. Alice is unsure how to go about solving this problem efficiently and seeks your help. Write a function to determine if a given sequence of parentheses is balanced. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string of brackets of length N. Output: For each test case, output \\"YES\\" if the sequence is balanced, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^3 Example Input: 4 () [()] {[()]} (] Example Output: YES YES YES NO Note: - A balanced sequence means that for every opening bracket, there must be a corresponding closing bracket of the same type and all pairs must be properly nested. - Empty sequences are considered balanced.","solution":"def is_balanced(sequence): Determines if a given sequence of parentheses is balanced. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in \'([{\': stack.append(char) elif char in \')]}\': if stack and stack[-1] == matching_bracket[char]: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def check_sequences(T, sequences): For T test cases, determine if each sequence of parentheses is balanced. results = [] for seq in sequences: results.append(is_balanced(seq)) return results"},{"question":"Given an integer array `arr` of size `n`, find the maximum sum of a subarray with at least one element and return that sum. A subarray is a contiguous part of an array. # Input: - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers representing the elements of the array `arr`. # Output: - Print the maximum sum of a subarray on a single line. # Constraints: - 1 ≤ `n` ≤ 10^5 - -10^4 ≤ `arr[i]` ≤ 10^4 # Examples: Input: 5 -2 1 -3 4 -1 Output: 4 Input: 6 -3 8 -2 4 -5 6 Output: 11 # Explanation: In the first example, the maximum sum of subarray is the single element `4`. In the second example, the maximum sum of subarray is the sum of subarray `[8, -2, 4]` which is `8 + (-2) + 4 = 10`.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray with at least one element. max_current = arr[0] max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a string s of length n consisting of lowercase English letters and a number k (1 ≤ k ≤ n), return the lexicographically smallest string that can be obtained by removing exactly k characters from the original string s. Input The first line contains the integers n and k separated by space. The second line contains the string s of length n. Output Print the lexicographically smallest string that can be obtained by removing exactly k characters from s. Examples Input 7 3 abcdxyz Output abcd Input 5 2 acdbx Output abx Note - The resulting string after removing exactly k characters should maintain the relative order of the characters in s.","solution":"def lexicographically_smallest_string(n, k, s): # We are to remove k characters from the string s stack = [] to_remove = k for char in s: while stack and to_remove > 0 and stack[-1] > char: stack.pop() to_remove -= 1 stack.append(char) # If there are still characters to remove while to_remove > 0: stack.pop() to_remove -= 1 return \'\'.join(stack)"},{"question":"Alice has a fascination for palindromes and loves creating new palindromic sequences from existing strings. She recently learned about the concept of minimum insertions to form a palindrome and wants to apply it to her own strings. Given a string s, Alice wants to know the minimum number of insertions required to transform the string into a palindrome. A palindrome is a string that reads the same forward and backward. Your task is to help Alice by writing a program that calculates the minimum number of insertions needed for a given string to become a palindrome. Input The first and only input line contains a string s (1 ≤ |s| ≤ 50) consisting of lowercase English letters only. Output Output a single integer denoting the minimum number of insertions required. Examples Input abbac Output 1 Input abcde Output 4","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to transform the string into a palindrome. def lcs(x, y): Helper function to find the length of the longest common subsequence of two strings. m = len(x) n = len(y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif x[i-1] == y[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n] # reverse the string to find the longest palindromic subsequence rev_s = s[::-1] # length of the longest palindromic subsequence lps_length = lcs(s, rev_s) # minimum number of insertions return len(s) - lps_length"},{"question":"Sam loves playing with strings and palindromes. A palindrome is a string that reads the same forward and backward. Given a string s of lowercase English letters, Sam wants to know the length of the longest palindromic substring contained within s. Write a function that takes a string s as input and returns the length of the longest palindromic substring in s. Input The input consists of a single string s (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. Output Output one integer — the length of the longest palindromic substring in s. Examples Input babad Output 3 Input cbbd Output 2 Input a Output 1 Note In the first example, \\"bab\\" and \\"aba\\" are both palindromic substrings of length 3. Hence, the output is 3. In the second example, \\"bb\\" is the longest palindromic substring of length 2. In the third example, since the string consists of only one character, the longest palindromic substring is the string itself with length 1.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 longest = 1 for i in range(n): # Odd-length palindromes l, r = i, i while l >= 0 and r < n and s[l] == s[r]: l -= 1 r += 1 longest = max(longest, r - l - 1) # Even-length palindromes l, r = i, i + 1 while l >= 0 and r < n and s[l] == s[r]: l -= 1 r += 1 longest = max(longest, r - l - 1) return longest"},{"question":"John loves playing with binary trees, and he recently read about binary search trees (BST). He learned that a binary search tree is a binary tree in which each node has, at most, two children, and for each node, all the elements in its left subtree are less than the node and all the elements in its right subtree are greater than the node. John wants to implement a BST, but he is having trouble with deletion. When John deletes a node from his BST, he needs to ensure that the resulting tree remains a binary search tree. He has asked for your help to implement the delete operation for him. Write a function to delete a node with a given value from a BST and return the root of the modified tree. Input The function deleteNode(root: TreeNode, key: int) -> TreeNode will receive the root of the BST and an integer key to be deleted from the BST. TreeNode is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Output The function should return the root of the modified tree after deleting the key. Note: If the key does not exist in the BST, the tree should remain unchanged. Examples Example 1 Input: root = [5, 3, 6, 2, 4, None, 7], key = 3 Output: [5, 4, 6, 2, None, None, 7] Example 2 Input: root = [5, 3, 6, 2, 4, None, 7], key = 0 Output: [5, 3, 6, 2, 4, None, 7] # Key 0 doesn\'t exist in the tree Example 3 Input: root = [], key = 0 Output: [] # Tree is empty Note - In Example 1: The initial tree is: ``` 5 / 3 6 / 2 4 7 ``` After deleting key 3, the tree becomes: ``` 5 / 4 6 / 2 7 ``` - In Example 2: The given key 0 does not exist in the tree, so the tree remains unchanged. - In Example 3: The tree is initially empty, so the return should also be an empty tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deleteNode(root, key): if not root: return root if key < root.val: root.left = deleteNode(root.left, key) elif key > root.val: root.right = deleteNode(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left temp = findMin(root.right) root.val = temp.val root.right = deleteNode(root.right, temp.val) return root def findMin(node): current = node while current.left: current = current.left return current"},{"question":"You are given a sequence of integers and your task is to determine whether the sequence can be found in the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 Your task is to check if the given sequence of integers can appear as a contiguous subsequence in the Fibonacci sequence if we start the Fibonacci sequence from any position and continue indefinitely. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The descriptions of test cases follow. The first line contains a single integer n (1 ≤ n ≤ 50) — the length of the sequence. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^9) — the sequence of integers to be checked. Output For each test case output \\"YES\\" if the sequence of integers can appear as a contiguous subsequence in the Fibonacci sequence, otherwise output \\"NO\\". Examples Input 2 3 2 3 5 4 3 5 8 12 Output YES NO","solution":"def is_fibonacci_subsequence(sequence): Checks if the given sequence can be found contiguously within the Fibonacci sequence. max_element = max(sequence) fib_sequence = [1, 1] # Generate Fibonacci sequence until the max value is greater than max_element in sequence while fib_sequence[-1] <= max_element: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) # Convert Fibonacci sequence to a set for faster lookup fib_set = set(fib_sequence) # Create a string of the Fibonacci sequence joined by a separator fib_string = \'_\'.join(map(str, fib_sequence)) # Create a string of the sequence joined by the same separator sequence_string = \'_\'.join(map(str, sequence)) # Check if the sequence_string is a substring of fib_string return \\"YES\\" if sequence_string in fib_string else \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] results.append(is_fibonacci_subsequence(sequence)) return results"},{"question":"Rashida is exploring number theory and came across an interesting problem involving the sum of prime numbers. She defines a function prime_sum(n) which returns the sum of all prime numbers less than or equal to n. Can you help Rashida by writing a function that computes the prime sum efficiently for multiple queries? You need to handle multiple test cases where each test case consists of a single integer n (1 ≤ n ≤ 10^5). The function should compute the sum of all prime numbers less than or equal to n. Input The input contains one or more independent test cases. The first line of input contains a single integer T (1 ≤ T ≤ 1000), the number of test cases. Each of the T following lines contains a single integer n. Output For each test case, output the sum of all prime numbers that are less than or equal to the given integer n. Example Input 4 10 20 30 40 Output 17 77 129 197 Note In the first example, the prime numbers less than or equal to 10 are [2, 3, 5, 7], and their sum is 17. In the second example, the prime numbers less than or equal to 20 are [2, 3, 5, 7, 11, 13, 17, 19], and their sum is 77.","solution":"def prime_sum(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start * start, n + 1, start): sieve[i] = False return sum(i for i in range(n + 1) if sieve[i]) def solve(queries): results = [] for n in queries: results.append(prime_sum(n)) return results"},{"question":"In a distant city, there is a sequence of ancient buildings that have unique stylish roofs. The height of the building rooftops forms a pattern such that the first building has a height of 2 meters, the second building has a height of (2 + 3) meters, the third building has a height of (2 + 3 + 4) meters, and so on till the nth building. One day, a dense fog covered the city, and the height of the fog was uniformly the same over all buildings. You measured the visible height of two buildings that are adjacent. Suppose the visible height of the shorter building is a meters and the visible height of the taller building is b meters. Given these heights, your task is to determine the height of the fog. Assume that the height of the fog is always at least 1 meter. Constraints * 1 ≤ a < b < 15000 * All values in the input are integers. Input Input is provided from Standard Input in the following format: a b Output If the height of the fog is x meters, print x as an integer. Examples Input 5 9 Output 4 Input 12 19 Output 9","solution":"def find_fog_height(a, b): x = b - a return x # Main program to read from standard input if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().split() a = int(input_data[0]) b = int(input_data[1]) # Call the function and print the result print(find_fog_height(a, b))"},{"question":"You are working as an event organizer and there are multiple events planned in a hall throughout the day. Each event has a specific start and end time. Your task is to determine the maximum number of events that can be attended fully without any overlap. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of events. Each of the next n lines contains two integers li and ri (1 ≤ li ≤ ri ≤ 10^9) representing the start and end time of the ith event. Output Print the maximum number of non-overlapping events that can be attended. Examples Input 4 1 3 2 5 4 6 7 8 Output 3 Input 3 1 2 3 4 2 3 Output 3 Note In the first sample, the maximum number of non-overlapping events that can be attended are the events with times (1-3), (4-6), and (7-8). In the second sample, all three events (1-2), (2-3), and (3-4) can be attended fully as they do not overlap with each other.","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events. Args: events (list of tuples): A list of tuples where each tuple contains two integers representing the start and end time of an event. Returns: int: The maximum number of non-overlapping events that can be attended. if not events: return 0 # Sort the events by their end times events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"A company has an internal messaging system that allows employees to send messages to each other. The goal is to archive old messages and free up storage space periodically. To do this, the company decided that every night, a process should run that counts and then archives all the messages sent between each pair of employees. You are tasked with writing the code for counting these messages. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of messages sent. Each of the next n lines contains two space-separated integers si and ri (1 ≤ si, ri ≤ 105 and si ≠ ri) denoting that the sender si sent a message to recipient ri. Output For each pair of employees that exchanged messages, print a line containing three space-separated integers: the sender, the recipient, and the number of messages exchanged between them. Note The order of pairs in the output does not matter. If two pairs have the same number of messages, you can output them in any order. Examples Input 6 1 2 2 3 1 2 2 1 3 1 2 1 Output 1 2 2 2 3 1 2 1 2 3 1 1 Input 5 1 2 2 3 4 5 1 3 4 5 Output 1 2 1 2 3 1 1 3 1 4 5 2 Input 4 1 2 2 3 1 2 3 4 Output 1 2 2 2 3 1 3 4 1","solution":"from collections import defaultdict def count_and_archive_messages(n, messages): Counts and archives all the messages sent between each pair of employees. Parameters: n (int): the number of messages sent messages (list of tuples): list containing pairs of integers representing sender and recipient Returns: list of tuples: each tuple contains three integers representing the sender, recipient, and the number of messages exchanged counts = defaultdict(int) # Count the messages for si, ri in messages: counts[(si, ri)] += 1 # Convert result to required format result = [(si, ri, count) for (si, ri), count in counts.items()] return result"},{"question":"A university department offers a total of N courses. Each course i has a certain number of credits c_i (1 leq c_i leq 100). A student needs to select K courses to fulfill a core requirement. The student\'s goal is to maximize the total number of credits they obtain while selecting exactly K courses. Constraints * 1 leq K leq N leq 500 * 1 leq c_i leq 100 * All input values are integers. Input Input is given from Standard Input in the following format: N K c_1 c_2 ldots c_N Output Print an integer representing the maximum possible total credits. Examples Input 4 2 20 10 30 40 Output 70 Input 3 3 10 20 30 Output 60","solution":"def max_credits(N, K, credits): Returns the maximum possible total credits the student can obtain by selecting K courses out of N courses. :param N: Total number of courses :param K: Number of courses to select :param credits: List of credits for each course :return: Maximum total credits # Sort the list of credits in descending order credits.sort(reverse=True) # Sum the top K credits max_total_credits = sum(credits[:K]) return max_total_credits # Example usage: # N, K = 4, 2 # credits = [20, 10, 30, 40] # print(max_credits(N, K, credits)) # Output should be 70"},{"question":"Alicia is intrigued by sequences of integers and their properties. She defines a sequence of n integers as \\"palindromic\\" if the sequence reads the same backward as forward. For example, the sequence [1, 2, 3, 2, 1] is palindromic, while [1, 3, 2] is not. Alicia wants to build a palindromic sequence but can replace some elements with any integer she chooses. Given a sequence of integers, determine the minimum number of replacements needed to make the sequence palindromic. Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the sequence. Output Print a single integer — the minimum number of replacements required to make the sequence palindromic. Examples Input 5 1 2 3 2 1 Output 0 Input 4 1 2 3 4 Output 2 Input 3 1 5 3 Output 1 Input 6 1 2 3 4 2 1 Output 1 Note In the first sample, the sequence is already palindromic, so no replacements are needed. In the second sample, replacing the second element with 4 and the third element with 2 will make the sequence palindromic as [1, 4, 4, 1] or [1, 2, 2, 1]. Thus, 2 replacements are needed. In the third sample, replacing the second element with 3 will make the sequence palindromic as [1, 3, 3]. In the fourth sample, replacing the third element with 2 will make the sequence palindromic as [1, 2, 2, 2, 2, 1].","solution":"def min_replacements_to_palindrome(n, sequence): left = 0 right = n - 1 replacements = 0 while left < right: if sequence[left] != sequence[right]: replacements += 1 left += 1 right -= 1 return replacements"},{"question":"Sophia is a software engineer working with computational geometry and she often uses various geometric shapes in her code. She encountered a problem where she needs to calculate the smallest rectangle that can fully enclose a list of given coordinates on a 2D plane. You are called to help her with this task. **Problem Statement:** Given a set of n points in a 2D plane, find the smallest axis-aligned rectangle (i.e., its sides are parallel to the x or y axis) that can fully enclose all the given points. **Input:** - The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of points. - The next n lines each contain two space-separated integers x and y (-10^9 ≤ x, y ≤ 10^9), representing the coordinates of each point. **Output:** - Print one line containing four space-separated integers x_min, y_min, x_max, and y_max, which define the smallest rectangle that can enclose all the given points. Here, (x_min, y_min) is the coordinate of the bottom-left corner and (x_max, y_max) is the coordinate of the top-right corner of the rectangle. **Examples:** Example 1: ``` Input: 4 1 3 4 4 3 1 2 2 Output: 1 1 4 4 ``` Example 2: ``` Input: 3 -1 -1 0 0 1 1 Output: -1 -1 1 1 ``` Example 3: ``` Input: 5 -2 4 -3 -1 0 5 7 -3 3 2 Output: -3 -3 7 5 ``` **Note:** In Example 1, the smallest rectangle that can enclose the points (1, 3), (4, 4), (3, 1), and (2, 2) has vertices at (1, 1) and (4, 4).","solution":"def smallest_enclosing_rectangle(points): Given a list of points, returns the coordinates of the smallest axis-aligned rectangle that can fully enclose all the given points. if not points: raise ValueError(\\"List of points is empty\\") x_min = min(point[0] for point in points) y_min = min(point[1] for point in points) x_max = max(point[0] for point in points) y_max = max(point[1] for point in points) return x_min, y_min, x_max, y_max"},{"question":"You are given a 2D grid of size n x m, where each cell in the grid contains an integer representing the height of the terrain at that point. You need to find the maximum difference in terrain height between any two points in a path from the top-left corner (grid[0][0]) to the bottom-right corner (grid[n-1][m-1]). Movement is restricted to only rightward or downward directions at any step (i.e., from grid[i][j], you can move to grid[i][j+1] or grid[i+1][j] if within bounds). The function should return the maximum difference in height between any two points on the path that results in minimum possible maximum difference. Inputs: - The first line contains two integers, n and m (1 ≤ n, m ≤ 10^3) representing the dimensions of the grid. - The next n lines each contain m integers, representing the heights in the grid (-10^6 ≤ grid[i][j] ≤ 10^6). Output: - A single integer representing the maximum height difference on the optimal path. Examples Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 8 Input: 2 2 1 3 2 4 Output: 3","solution":"def maximum_difference_path(grid): import heapq n = len(grid) m = len(grid[0]) # Min-heap to store (difference, x, y, min_val, max_val) heap = [(0, 0, 0, grid[0][0], grid[0][0])] visited = set((0, 0)) while heap: diff, x, y, min_val, max_val = heapq.heappop(heap) if x == n - 1 and y == m - 1: return max_val - min_val for dx, dy in [(1, 0), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) new_min = min(min_val, grid[nx][ny]) new_max = max(max_val, grid[nx][ny]) new_diff = new_max - new_min heapq.heappush(heap, (new_diff, nx, ny, new_min, new_max))"},{"question":"Henry loves calculating the nth powers of numbers. He recently encountered a problem with calculating large powers of very large integers. He wonders how many trailing zeroes there are in the result of a^b, where a and b are given integers. A trailing zero is defined as a zero in the decimal representation of a number, which is preceded only by other trailing zeroes or the digit other than zero. Help Henry by writing a program that determines the number of trailing zeroes in the decimal representation of a^b. Input: The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains two integers a (1 ≤ a ≤ 10^9) and b (0 ≤ b ≤ 10^9). Output: For each test case, print the number of trailing zeroes in the decimal representation of a^b. Example: Input: 3 10 2 5 3 2 10 Output: 2 0 0 Explanation: - For the first test case, 10^2 = 100, which has 2 trailing zeroes. - For the second test case, 5^3 = 125, which has 0 trailing zeroes. - For the third test case, 2^10 = 1024, which has 0 trailing zeroes.","solution":"def count_trailing_zeroes(t, test_cases): results = [] for a, b in test_cases: if b == 0: results.append(0) elif a % 10 == 0: results.append(b) else: results.append(0) return results # Reading input def main(): import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) test_cases = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(t)] # Get the results results = count_trailing_zeroes(t, test_cases) # Printing the results for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice and Bob are playing a game with a series of containers, each filled with a certain number of pebbles. The rules of the game are as follows: - The players take turns alternately. - On each turn, a player can choose any one container and remove 1, 2, or 3 pebbles from it. - The player who removes the last pebble wins the game. Alice always goes first. Both players play optimally, trying to win the game. Determine who will win the game given the initial configuration of the containers. Input The first line contains the integer T, the number of test cases. Each test case consists of two lines. The first line contains a single integer N — the number of containers. The second line contains N space-separated non-negative integers representing the number of pebbles in each container. Output For each test case, output \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins (without quotes). Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ P[i] ≤ 10^9, where P[i] is the number of pebbles in the i-th container SAMPLE INPUT 2 3 1 3 4 2 2 2 SAMPLE OUTPUT Alice Bob Explanation In the first test case, Alice can win by following a strategy where she always leaves Bob in a losing position. For instance, Alice can remove 1 pebble from the container with 4 pebbles, leaving the configuration as (1, 3, 3). After each turn, with optimal play, Alice will ensure she takes the last pebble. In the second test case, regardless of Alice\'s first move, Bob will always be able to respond optimally and leave Alice in a losing position thus Bob will win.","solution":"def who_wins(num_cases, cases): results = [] for case in cases: n, pebbles = case nim_sum = 0 for pile in pebbles: nim_sum ^= pile if nim_sum == 0: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"You are given a string of characters consisting of lowercase English letters and the special character \'#\'. The \'#\' character represents a backspace that deletes the previous character in the string. Your task is to process the string and return the final result after all backspaces have been applied. Input: - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters and the character \'#\'. Output: - A single string which is the final result after processing all backspaces. Examples: Input: ``` ab#c ``` Output: ``` ac ``` Input: ``` a#bc#d ``` Output: ``` bd ``` Input: ``` #ab ``` Output: ``` b ``` Note: - In the first example, \'b\' is removed by the backspace \'#\', so the string becomes \\"ac\\". - In the second example, the first backspace removes \'a\' giving \\"bc#d\\", and the second backspace removes \'c\', so the string becomes \\"bd\\". - In the third example, the first three backspaces remove nothing as there are no preceding characters. Then, \'a\' and the following two backspaces remove \'a\', resulting in \\"b\\".","solution":"def process_string(s): Process the string s by applying backspaces as indicated by the \'#\'. result = [] for char in s: if char == \'#\': if result: result.pop() else: result.append(char) return \'\'.join(result)"},{"question":"Write a program that generates a simple histogram from a list of integers. The histogram should use the character \'#\' to represent the frequency of each value, where each \'#\' corresponds to one count. The values will be between 1 and 10, inclusive. Constraints: * The number of values will be between 1 and 100. * Each value in the input will be between 1 and 10. Input: The input consists of multiple datasets. Each dataset consists of a single line containing integers separated by spaces. The input ends with a line containing a single \'0\'. Output: For each dataset, print a histogram displaying the frequency of integers from 1 to 10. Each line should show the count of a particular number represented by \'#\', starting from number 1 and going up to number 10. Print a blank line after each dataset. Example: Input: 1 2 3 3 3 4 4 5 6 10 10 9 8 7 6 5 1 7 8 9 10 10 10 5 5 5 5 5 0 Output: 1 # 2 # 3 # 4 5 # 6 # 7 8 9 10 1 2 3 4 5 # 6 # 7 # 8 # 9 # 10 1 # 1 2 3 4 5 # 6 7 # 8 # 9 # 10 #","solution":"def generate_histogram(datasets): results = [] for data in datasets: if len(data) == 1 and data[0] == 0: break counts = [0] * 10 for num in data: if 1 <= num <= 10: counts[num-1] += 1 result = [] for i in range(10): result.append(f\\"{i+1} {\'#\' * counts[i]}\\") results.append(\\"n\\".join(result)) return \\"nn\\".join(results) # Example usage if __name__ == \\"__main__\\": input_data = [ [1, 2, 3, 3, 3, 4, 4, 5, 6], [10, 10, 9, 8, 7, 6, 5], [1], [7, 8, 9, 10, 10, 10, 5, 5, 5, 5, 5], [0] ] print(generate_histogram(input_data))"},{"question":"In a country named Decoland, there exists a unique form of transportation called the \\"chain train\\". Each car in the chain train is connected to the next car in a linear fashion. Every car has a unique weight and can only connect to a car with a different weight to mitigate the risk of imbalance. You, as the transportation planner, have been tasked with determining the connections of a given set of cars based on their weights. You must find the minimum number of connections required such that the chain train is as long as possible. It\'s essential to ensure each step connects cars of different weights, and you can start the chain train with any car. Given the weights of `n` cars, write a program to find the maximum length of such a chain train. # Input - The first line contains an integer `n` — the number of cars (1 ≤ n ≤ 10^5). - The second line contains `n` integers, where the `i-th` integer represents the weight of the `i-th` car (1 ≤ weight ≤ 10^9). # Output - Output a single integer — the maximum length of the chain train. # Example Input: ``` 6 1 2 2 3 3 1 ``` Output: ``` 6 ``` Input: ``` 4 4 4 4 4 ``` Output: ``` 1 ``` # Explanation In the first example, the weights are [1, 2, 2, 3, 3, 1]. A possible maximum length chain train could be (starting from car with weight 1): 1 → 2 → 3 → 1 → 2 → 3, which uses up all cars. In the second example, all cars have the same weight, so the maximum chain train length is 1 as no connections can be formed. Ensure the solution is efficient to handle up to 100,000 cars within reasonable time limits.","solution":"def max_chain_train_length(weights): # get the frequency of each different weight weight_count = {} for weight in weights: if weight in weight_count: weight_count[weight] += 1 else: weight_count[weight] = 1 # since each different weight can be connected in a chained train form # the maximum length of the chain we can achieve is just the count of total cars # as long as we have at least 2 different weights if len(weight_count) == 1: return 1 else: return len(weights)"},{"question":"Given `n` people standing in a circle, counting starts from a person, and every `k`-th person is eliminated. The task is to determine the position of the last person standing in the circle. Write a function `findLastPerson(n, k)` that takes two integers `n` and `k` and returns the position (1-indexed) of the last person remaining. # Input - The first line contains an integer `t`, the number of test cases. - Each of the next `t` lines contains two integers `n` and `k`. # Output - For each test case, output a single integer, denoting the position of the last person standing (1-indexed). # Constraints - 1 ≤ t ≤ 1000 - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ 10^5 # Example Input ``` 2 5 2 6 3 ``` # Example Output ``` 3 1 ``` # Explanation 1. For the first test case, the people are eliminated in the following order: 2, 4, 1, 5. Thus, the last person standing is at position 3. 2. For the second test case, the people are eliminated in the following order: 3, 6, 4, 2, 1. Thus, the last person standing is at position 1.","solution":"def findLastPerson(n, k): Returns the position (1-indexed) of the last person standing. if n == 1: return 1 else: return (findLastPerson(n - 1, k) + k - 1) % n + 1 def solve(test_cases): results = [] for n, k in test_cases: results.append(findLastPerson(n, k)) return results"},{"question":"Given a grid with N rows and M columns, where each cell contains a digit from 0 to 9, you have a robot that can move one step at a time either to the right or down. Starting from the top-left cell (1, 1), output the minimum sum of the digits encountered on any path to the bottom-right cell (N, M). Input: The first line of the input contains two integers N and M denoting the number of rows and columns in the grid. Each of the next N lines contains M digits each, representing the grid. Output: Output a single integer, the minimum sum of the digits on any path from the top-left to the bottom-right cell. Constraints: 1 ≤ N, M ≤ 10 SAMPLE INPUT: 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 has a sum of 7 and is the minimum sum path from (1, 1) to (3, 3).","solution":"def min_path_sum(grid): Returns the minimum sum of the digits on any path from top-left to bottom-right in the grid. grid: List of List of int: The grid filled with digits. return: int: Minimum sum of the path from top-left to bottom-right. N = len(grid) M = len(grid[0]) # Create a 2D list to store the minimum path sum at each cell dp = [[0]*M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"Alex is a software engineer working on an application that processes bank transactions. Each transaction has a type, an amount, and an associated account balance before the transaction is applied. The transaction types can be either \\"debit\\" or \\"credit\\". For a \\"debit\\" transaction, the amount is subtracted from the account balance. For a \\"credit\\" transaction, the amount is added to the account balance. However, if a debit transaction\'s amount is greater than the account balance, the transaction should be marked as \\"failed\\", and the balance remains unchanged. For a credit transaction, there are no restrictions. You are given a list of transactions and their respective initial account balances. Write a program to process these transactions and determine the final account balance, or if a transaction failed. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of transactions. The next n lines each contain a string and two integers, representing the transaction type (`\\"debit\\"` or `\\"credit\\"`), the amount (1 ≤ amount ≤ 100000), and the initial account balance (0 ≤ initial_balance ≤ 100000). Output For each transaction, output the final balance if the transaction succeeds or \\"failed\\" if the transaction cannot be executed due to insufficient funds. Examples Input 3 debit 50 100 credit 200 150 debit 190 180 Output 50 350 failed Input 2 credit 100 50 debit 20 20 Output 150 0 Note In the first example: - The first transaction is a debit of 50 from a balance of 100, resulting in a final balance of 50. - The second transaction is a credit of 200 to a balance of 150, resulting in a final balance of 350. - The third transaction is a debit of 190 from a balance of 180, which fails since there are insufficient funds. In the second example: - The first transaction is a credit of 100 to a balance of 50, resulting in a final balance of 150. - The second transaction is a debit of 20 from a balance of 20, resulting in a final balance of 0.","solution":"def process_transactions(transactions): results = [] for transaction in transactions: transaction_type, amount, initial_balance = transaction if transaction_type == \\"debit\\": if amount > initial_balance: results.append(\\"failed\\") else: results.append(initial_balance - amount) elif transaction_type == \\"credit\\": results.append(initial_balance + amount) return results"},{"question":"A large research facility has several machines that need to run processes based on given rules. Each machine logs its operational hours daily over multiple days. For a given machine, you need to determine whether it ever logged the same number of operational hours three days in a row. Create a function to check if there exists at least one sequence where the machine logged the same number of operational hours for three consecutive days. Constraints * 3 ≤ D ≤ 100 * 0 ≤ H_{i} ≤ 24 * All values in input are integers. Input Input is given from Standard Input in the following format: D H_{1} H_{2} ... H_{D} Output Print `Yes` if the same number of operational hours were logged three days in a row. Print `No` otherwise. Examples Input 6 8 8 8 5 6 7 Output Yes Input 5 9 7 7 7 8 Output Yes Input 4 2 4 6 8 Output No","solution":"def check_operational_hours(D, hours): Returns \'Yes\' if any operational hours were logged three days in a row, otherwise returns \'No\'. for i in range(D - 2): if hours[i] == hours[i + 1] == hours[i + 2]: return \\"Yes\\" return \\"No\\""},{"question":"A company holds an annual fitness challenge where participants compete in various activities to earn fitness points. Each participant can choose from a range of activities, and their total fitness score is determined by the sum of their scores from each chosen activity. The challenge organizers want to analyze the participants\' performance by calculating the total fitness score for each participant and determining which participants achieved the highest scores. Input The first line of the input contains an integer t, the number of test cases. t (1 ≤ t ≤ 1500) test cases follow. Each test case consists of: - The first line containing two integers N and M, where N (1 ≤ N ≤ 1000) is the number of participants and M (1 ≤ M ≤ 100) is the number of activities. - The next N lines each containing M integers separated by single spaces. Each line denotes the points scored by a participant in each of the M activities. Output For each test case output a single line containing a single integer denoting the highest total fitness score achieved by a participant. SAMPLE INPUT 2 3 3 10 5 7 4 8 6 2 3 9 2 4 1 2 3 4 4 3 2 1 SAMPLE OUTPUT 22 10","solution":"def highest_fitness_scores(test_cases): Returns a list of highest total fitness scores for each test case. results = [] for case in test_cases: N, M = case[\'N\'], case[\'M\'] scores = case[\'scores\'] highest_score = max([sum(participant) for participant in scores]) results.append(highest_score) return results def parse_input(input_string): data = input_string.strip().split(\\"n\\") t = int(data[0]) index = 1 test_cases = [] for _ in range(t): N, M = map(int, data[index].split()) index += 1 scores = [] for _ in range(N): scores.append(list(map(int, data[index].split()))) index += 1 test_cases.append({\'N\': N, \'M\': M, \'scores\': scores}) return test_cases"},{"question":"An online book club maintains a list of book recommendations. Each recommendation consists of a genre, a title, and a rating. The book club wants to create a summary of top-rated books from each genre. Given a list of book recommendations, provide the highest-rated book from each genre. In case of a tie (multiple books having the same highest rating in a genre), the book with the lexicographically smallest title should be chosen. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of book recommendations. The next n lines each contain a string g (1 ≤ |g| ≤ 100), a string t (1 ≤ |t| ≤ 100), and an integer r (1 ≤ r ≤ 10^5), representing the genre, title, and rating of a book, respectively. Output For each genre, print a line containing the genre, followed by the title of the highest-rated book in that genre. The genres in the output should be sorted lexicographically. Examples Input 5 Fantasy TheHobbit 95 Fantasy TheLordOfTheRings 98 ScienceFiction Dune 97 ScienceFiction Hyperion 97 Mystery TheHoundOfTheBaskervilles 90 Output Fantasy TheLordOfTheRings Mystery TheHoundOfTheBaskervilles ScienceFiction Dune","solution":"def top_rated_books_by_genre(recommendations): Given a list of book recommendations, returns a dictionary with the highest-rated book from each genre. In case of a tie, the lexicographically smallest title is chosen. from collections import defaultdict genre_top_book = defaultdict(lambda: (\\"\\", \\"\\", -1)) for genre, title, rating in recommendations: if (rating > genre_top_book[genre][2] or (rating == genre_top_book[genre][2] and title < genre_top_book[genre][1])): genre_top_book[genre] = (genre, title, rating) result = {genre: title for genre, (genre, title, rating) in sorted(genre_top_book.items())} return result"},{"question":"You are given a list of student names and their grades for a particular exam. Your task is to find the students with the highest grade and print their names in alphabetical order. Input The first line of the input contains the number of students, n. The next n lines each contain a student\'s name and their grade (an integer) separated by a space. Output Print the names of students with the highest grade in alphabetical order, each on a new line. Constraints 1 ≤ n ≤ 10^3 The student\'s names contain only uppercase and lowercase English letters and are no longer than 100 characters. Grades are integers between 0 and 100 inclusive. SAMPLE INPUT 5 Alice 91 Bob 78 Charlie 91 David 85 Eve 91 SAMPLE OUTPUT Alice Charlie Eve","solution":"def highest_grades(n, students): Finds the students with the highest grade and prints their names in alphabetical order. Args: n (int): Number of students. students (list of tuples): Each tuple contains a student\'s name as a string and their grade as an integer. Returns: list of str: Sorted names of students with the highest grade. highest_grade = -1 top_students = [] for student in students: name, grade = student grade = int(grade) if grade > highest_grade: highest_grade = grade top_students = [name] elif grade == highest_grade: top_students.append(name) top_students.sort() return top_students"},{"question":"One of the major challenges in implementing network protocols is ensuring message integrity and order preservation, particularly in unreliable environments like the internet. Suppose you are tasked with developing a simplified protocol to reconstruct an out-of-order and potentially duplicate sequence of messages. Each message consists of an integer and a unique sequence number. Write a function `reconstruct_messages` that takes in a list of tuples, where each tuple contains an integer `message` and an integer `sequence_number`. The function should output a list of integers representing the message sequence in the correct order and excluding any duplicates. Input The input consists of: - A list of tuples, each containing two integers: `message` and `sequence_number` (1 ≤ message ≤ 10^6, 1 ≤ sequence_number ≤ 10^6). The list can contain up to 10^6 messages. Output The function should output: - A list of integers representing the reconstructed message sequence in correct order, with duplicates removed. Example Input [(5, 3), (1, 1), (3, 2), (1, 1), (4, 4), (2, 5)] Output [1, 3, 5, 4, 2] Input [(10, 3), (7, 1), (3, 2), (10, 3), (15, 4), (2, 5)] Output [7, 3, 10, 15, 2] Explanation In the first example, the messages are provided with their corresponding sequence numbers. Despite duplicates and out-of-order appearance, the reconstructed sequence [1, 3, 5, 4, 2] is derived by ordering based on sequence numbers and removing duplicates.","solution":"def reconstruct_messages(messages): Reconstructs a sequence of messages in correct order, removing duplicates. Args: messages: List of tuples, where each tuple contains an integer message and an integer sequence_number. Returns: List of integers representing the ordered message sequence without duplicates. # Use a dictionary to map sequence numbers to messages (this will also remove duplicates) seq_to_msg = {} for message, sequence_number in messages: seq_to_msg[sequence_number] = message # Extract the messages sorted by their sequence numbers sorted_messages = [msg for seq_num, msg in sorted(seq_to_msg.items())] return sorted_messages"},{"question":"You are given an integer array `arr` and another integer `k`. Your task is to find the k-th positive integer that is missing from the array. The array `arr` contains distinct integers sorted in increasing order, and all elements in the array are positive integers. For example, if `arr = [2, 3, 4, 7, 11]` and `k = 5`, the first five missing positive integers are: [1, 5, 6, 8, 9]. Therefore, the 5th missing positive integer is 9. Write a function `findKthPositive(arr, k)` that returns the k-th missing positive integer. Input * The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array `arr`. * The second line contains `n` distinct integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) sorted in increasing order. * The third line contains an integer `k` (1 ≤ k ≤ 10^9). Output * Output a single integer, the k-th missing positive integer. Example Input: ``` 5 2 3 4 7 11 5 ``` Output: ``` 9 ``` Explanation: The missing numbers initially are `[1, 5, 6, 8, 9]`, so the 5th missing number is `9`.","solution":"def findKthPositive(arr, k): Returns the k-th positive integer that is missing from the array. current = 1 missing_count = 0 for num in arr: while current < num: missing_count += 1 if missing_count == k: return current current += 1 current = num + 1 # If the loop ends and k-th missing number is not yet found while missing_count < k: missing_count += 1 current += 1 return current - 1"},{"question":"Mira loves working with strings, especially performing various operations on them. She has a string `s` of length `n` consisting of lowercase English letters. Mira wonders if she can transform the string to another string `t` of the same length by performing a series of operations. The operations she can perform are: - Replace a single character in `s` with any other lowercase English letter. - Reverse a substring of `s`. Mira would like you to help her determine if she can transform `s` into `t` using a series of these operations. Input The first line contains a single integer `n` (1 ≤ n ≤ 200,000) — the length of the strings. The second line contains the string `s` of length `n` consisting of lowercase English letters. The third line contains the string `t` of length `n` consisting of lowercase English letters. Output Print \\"YES\\" (without quotes) if Mirage can transform `s` into `t`, otherwise print \\"NO\\" (without quotes). Examples Input 5 abcde aecbd Output YES Input 2 aa bb Output NO Note In the first example, Mira can transform `s` into `t` by performing the following operations: 1. Reverse the substring `bc` to get `acb` -> `aebd`. 2. Replace the fourth character `e` with `d`. In the second example, Mira cannot transform `s` into `t` as no series of operations can make `aa` turn into `bb`.","solution":"def can_transform(n, s, t): Determines if string s can be transformed into string t using allowed operations. # If the sorted versions of both strings are equal # it means we have the same set of characters # so we can convert one to the other return sorted(s) == sorted(t)"},{"question":"Nina has a set of distinct integers and a particular integer sum S. She wants to find out if there exists a subset of these integers such that the sum of the subset equals S. The subset should be non-empty. If there are multiple subsets that fit the criteria, any one of them can be returned. Write a function `find_subset` that takes two inputs: - A list of integers `nums` where each integer is distinct. - An integer `S` which is the target sum. The function should return a list of integers representing a subset that sums up to S, or an empty list if no such subset exists. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of elements in the list of distinct integers. The second line contains n space-separated integers `nums[i]` (|nums[i]| ≤ 100,000). The third line contains a single integer S (|S| ≤ 1,000,000). Output If there exists a subset of `nums` that sums to S, output the subset in a single line. If multiple subsets exist, output any one of them in a single line. If no such subset exists, output an empty list. Examples Input 5 3 34 4 12 5 9 Output [4, 5] Input 4 1 2 3 4 11 Output [] Note: You may use any programming language to implement this task. Your solution should be efficient enough to handle the given constraints.","solution":"from itertools import combinations def find_subset(nums, S): Finds any subset of nums that sums up to S. Returns the subset or an empty list if no such subset exists. n = len(nums) for r in range(1, n + 1): for subset in combinations(nums, r): if sum(subset) == S: return list(subset) return [] # Example Usage # nums = [3, 34, 4, 12, 5] # S = 9 # result = find_subset(nums, S) # Output will be [4, 5] # print(result)"},{"question":"Given an array of N integers, you are tasked with finding the number of unique pairs (i, j) (where 1 ≤ i < j ≤ N) such that the sum of the array elements at these indices is equal to a given integer K. Input The first line of input contains two integers, N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9). The second line contains N integers representing the elements of the array (-10^9 <= array[i] <= 10^9). Output Output an integer representing the number of unique pairs (i, j) such that the sum A[i] + A[j] is equal to K. Example Input: 5 8 1 5 3 3 7 Output: 2 Explanation: The unique pairs are (1, 5) and (3, 5).","solution":"def count_unique_pairs_with_sum(arr, n, k): Returns the number of unique pairs (i, j) such that the sum of the array elements at these indices is equal to a given integer K. Parameters: arr (list of int): The array of integers. n (int): The number of elements in the array. k (int): The target sum. Returns: int: The number of unique pairs (i, j) such that arr[i] + arr[j] == k and 1 <= i < j <= N. seen = set() pairs = set() for i in range(n): complement = k - arr[i] if complement in seen: pairs.add((min(arr[i], complement), max(arr[i], complement))) seen.add(arr[i]) return len(pairs)"},{"question":"Given a string `s` containing only lowercase letters, you need to compress the string using the following algorithm: 1. Count the consecutive occurrences of each character. 2. Replace each group of consecutive repeated characters with the character followed by the length of the group. If the compressed string is not smaller in length than the original string, return the original string instead. Assume the string has a maximum length of 1000. Write a function `compressString(s: str) -> str` that implements this algorithm. Input - A string `s` (1 ≤ |s| ≤ 1000) where `s` contains only lowercase letters. Output - A string representing the compressed version of `s` if it is shorter than or equal in length to `s`, otherwise return `s`. Examples Input aaaaabbbcc Output a5b3c2 Input abc Output abc Input aabcccccaaa Output a2b1c5a3 Explanation In the first example, the consecutive groups are: \'a\' repeated 5 times, \'b\' repeated 3 times, and \'c\' repeated 2 times. The compressed string is \\"a5b3c2\\". In the second example, each character appears only once, so the compressed string \\"a1b1c1\\" would not be shorter than the original string \\"abc\\". Therefore, the result is \\"abc\\". In the third example, the compressed string is \\"a2b1c5a3\\", which is shorter than the original string \\"aabcccccaaa\\", so the result is the compressed string.","solution":"def compressString(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \\"\\".join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given an integer array `arr` of length `n`. In one move, you can choose any element of the array and either increment or decrement it by 1. The goal is to make all elements of the array equal using the minimum number of moves. For example, for an array [1, 2, 3] it will take 2 moves to make all elements equal: increment the first element one time and decrement the third element one time. Your task is to write a function that takes in a list of integers and returns the minimum number of moves required to make all elements of the array equal. **Function Signature:** ```python def min_moves_to_equal_elements(arr: List[int]) -> int: ``` # Input - The function will receive a list of integers `arr` (1 ≤ len(arr) ≤ 100, -10^4 ≤ arr[i] ≤ 10^4). # Output - The function should return an integer representing the minimum number of moves required to make all the elements of the array equal. # Example Input: ```python arr = [1, 2, 3] ``` Output: ```python 2 ``` Input: ```python arr = [1, 10, 2, 9] ``` Output: ```python 16 ``` # Note In the first example, you can make the array elements equal as follows: - Increment the first element from 1 to 2 (1 move). - Decrement the third element from 3 to 2 (1 move). Thus, a total of 2 moves are required. In the second example, you can make the array elements equal as follows: - Increment the first element from 1 to 5 (4 moves). - Decrement the second element from 10 to 5 (5 moves). - Increment the third element from 2 to 5 (3 moves). - Decrement the fourth element from 9 to 5 (4 moves). Thus, a total of 16 moves are required.","solution":"from typing import List def min_moves_to_equal_elements(arr: List[int]) -> int: Returns the minimum number of moves required to make all elements of the array equal. # Finding the median to minimize the number of moves arr.sort() median = arr[len(arr) // 2] # Calculating the number of moves needed to make all the elements equal to median return sum(abs(x - median) for x in arr)"},{"question":"In the land of yore, there is a magical garden with n unique types of flowers arranged in a single row. Each type of flower has an associated beauty value. The flowers need to be watered such that the total beauty of the garden is maximized, but with a catch: due to their magical nature, if two flowers with the same beauty value are next to each other, their beauty values negate each other. You\'re given an array of n integers representing the beauty values of the flowers in the row. You need to find the maximum possible total beauty of the garden, ensuring no two adjacent flowers have the same beauty value. Write a program that determines this maximum possible total beauty. Input The first line of input contains a single integer n (1 ≤ n ≤ 100000) — the number of flowers in the garden. The next line contains n integers b[1], b[2], ..., b[n] ( -10^4 ≤ b[i] ≤ 10^4) — the beauty values of each flower type. Output Output a single integer: the maximum possible total beauty of the garden after rearranging the flowers so that no two adjacent flowers have the same beauty value. Examples Input 5 1 2 2 3 4 Output 10 Input 3 -1 -1 -1 Output -1","solution":"from collections import Counter def max_total_beauty(n, beauties): Determines the maximum total beauty of the garden after rearranging the flowers so that no two adjacent flowers have the same beauty value. Parameters: n (int): Number of flowers in the garden. beauties (List[int]): List of beauty values of each flower type. Returns: int: Maximum possible total beauty ensuring no two adjacent flowers have the same beauty value. if n == 1: return beauties[0] beauties.sort(reverse=True) total_beauty = 0 prev_beauty = None for beauty in beauties: if beauty != prev_beauty: total_beauty += beauty prev_beauty = beauty return total_beauty"},{"question":"A charity organization wants to manage its donations more efficiently. They have decided to track donations on a weekly basis. Each week, they record the amount of money donated by each donor. The task is to calculate the total donation made by each donor over a given period and determine the top donor of the period. You are provided with information about the donations in a specific format: - The first line contains an integer n, which indicates the number of donors. - The next n lines contain the names of the donors (one per line). - The following lines contain the donations information in a specific format: \\"WeekX DonorName Amount\\", where WeekX indicates the week number, DonorName is the name of the donor, and Amount is the donation amount (a positive integer). Your program should output the name of the top donor over the period. If there are multiple donors with the same total donation amount, output the donor who reached that amount first based on the input order. If no donations are made, print \\"No donations\\". Input The input consists of several lines: - The first line contains an integer n (1 ≤ n ≤ 100), the number of donors. - The next n lines contain the names of the donors. Each name is a string of uppercase Latin letters and does not exceed 100 characters. - The subsequent lines contain the donations in the format \\"WeekX DonorName Amount\\", where X is a positive integer (1 ≤ X ≤ 52), DonorName is one of the donor names, and Amount is a positive integer (1 ≤ Amount ≤ 1000). There are at most 1000 donation records. The donations end with a line containing the word \\"END\\". Output Print the name of the top donor. If no donations are made, print \\"No donations\\". Examples Input 3 ALICE BOB CHARLIE Week1 ALICE 500 Week2 BOB 300 Week3 ALICE 200 Week4 CHARLIE 700 Week5 ALICE 100 END Output ALICE Input 2 DAVID EMMA Week1 DAVID 100 Week2 EMMA 200 Week3 DAVID 200 Week4 EMMA 100 END Output DAVID Input 1 MIKE END Output No donations Note In the first example, ALICE donates 500+200+100 = 800, BOB donates 300, and CHARLIE donates 700. The top donor is ALICE. In the second example, DAVID donates 100+200 = 300, and EMMA donates 200+100 = 300. Since DAVID reached his total first, he is the top donor. In the third example, there are no donations made, so the output is \\"No donations\\".","solution":"def find_top_donor(donors, donations): if not donations: return \\"No donations\\" donation_sums = {donor: 0 for donor in donors} for donation in donations: week, donor_name, amount = donation.split() amount = int(amount) if donor_name in donation_sums: donation_sums[donor_name] += amount top_donor = None max_donations = -1 for donor in donors: if donation_sums[donor] > max_donations: max_donations = donation_sums[donor] top_donor = donor return top_donor if max_donations > 0 else \\"No donations\\""},{"question":"A popular online game features a character that can move on a two-dimensional grid. The character starts at position (0, 0) and can move in four possible directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The grid extends infinitely in all directions. Write a function to determine if the character returns to its starting position (0, 0) after a sequence of moves. Constraints: * The input string consists of only the characters \'U\', \'D\', \'L\', \'R\'. * The input string will have a length between 1 and 10000 characters. Input: A single line containing a string that represents the sequence of moves. Output: Print \\"True\\" if the character returns to (0, 0) after the moves, otherwise print \\"False\\". Examples Input UDLR Output True Input UUDDLLRR Output True Input UUDLRR Output False","solution":"def judge_starting_position(moves): Determines if the character returns to the starting position (0, 0) after a sequence of moves. :param moves: A string of moves consisting of \'U\', \'D\', \'L\', \'R\' :return: True if the character returns to the starting position, otherwise False # Initialize position x, y = 0, 0 # Define move effects move_effects = { \'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0) } # Apply moves for move in moves: dx, dy = move_effects[move] x += dx y += dy # Check if returning to starting position return x == 0 and y == 0"},{"question":"Implement a function that takes a string as input and returns the length of the longest substring with at most two distinct characters. Given a string s, find the length of the longest substring that contains at most two distinct characters. # Input Format: - A single string s. # Constraints: - 0 ≤ length of s ≤ 10^5 - s consists of English letters. # Output Format: - A single integer representing the length of the longest substring containing at most two distinct characters. # Example: Input: \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3. # Example: Input: \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" which its length is 5. # Note: Maintain a sliding window approach using two pointers to optimize and ensure the algorithm runs efficiently for large strings. The sliding window approach is effective in solving problems involving substrings due to its linear complexity.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if not s: return 0 left = 0 max_len = 0 char_map = {} for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a list of words, and you need to find the length of the longest subsequence that appears in both words. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, \\"abc\\", \\"abg\\", \\"bdf\\", \\"aeg\\", \\"acefg\\", .. etc are subsequences of \\"abcdefg\\". Write a function that takes in two strings and returns the length of their longest common subsequence. Input The first line contains T, the number of test cases. Each of the following T lines contains two strings separated by a space. 1 ≤ T ≤ 100 1 ≤ Length of each string ≤ 1,000 Output For each test case, output a single integer which is the length of the longest common subsequence of the provided two strings. Example Input: 2 abcde ace abc def Output: 3 0 Explanation: Case 1: The longest common subsequence is \\"ace\\" which has length 3. Case 2: There is no common subsequence between \\"abc\\" and \\"def\\". Hence, the output is 0.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m, n = len(str1), len(str2) dp = [[0] * (n+1) for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n] def process_test_cases(test_cases): Processes input test cases and returns their results. results = [] for str1, str2 in test_cases: lcs_length = longest_common_subsequence(str1, str2) results.append(lcs_length) return results"},{"question":"Given an array of n integers and q queries, you need to perform certain operations on the array as described below. The array consists of integers a0, a1, ..., an-1. Each query is one of the three types: 1. Increment Range: Given a pair of l and r (0 ≤ l ≤ r < n) and an integer v, increment all elements from index l to r by v. 2. Find the Maximum Value: Given a pair of l and r (0 ≤ l ≤ r < n), find the maximum value of elements from index l to r. 3. Set Value: Given an index pos (0 ≤ pos < n) and an integer val, set the value of apos to val. Input Format First line contains two integers, n and q. Second line contains n integers, a0, a1, ..., an-1, the original values of the array. Next q lines each contain a query. Each query has the form: - For increment range: \\"0 l r v\\" - For find maximum value: \\"1 l r\\" - For set value: \\"2 pos val\\" Output Format For each query of type \\"find the maximum value\\", output the result on a new line. Constraints 1 ≤ n, q ≤ 200,000 0 ≤ ai ≤ 10^6 0 ≤ v, val ≤ 10^6 Example Input 10 4 5 1 9 3 7 6 4 8 2 0 0 2 5 3 1 1 6 2 4 10 1 3 6 Output 12 10","solution":"class ArrayOperations: def __init__(self, n, arr): self.n = n self.arr = arr def increment_range(self, l, r, v): for i in range(l, r + 1): self.arr[i] += v def find_max_value(self, l, r): return max(self.arr[l:r + 1]) def set_value(self, pos, val): self.arr[pos] = val def process_queries(n, q, arr, queries): results = [] array_ops = ArrayOperations(n, arr) for query in queries: parts = list(map(int, query.split())) if parts[0] == 0: array_ops.increment_range(parts[1], parts[2], parts[3]) elif parts[0] == 1: results.append(array_ops.find_max_value(parts[1], parts[2])) elif parts[0] == 2: array_ops.set_value(parts[1], parts[2]) return results"},{"question":"Input The input starts with a single integer T (1 ≤ T ≤ 50), the number of test cases. Each test case consists of one line containing a single integer N (1 ≤ N ≤ 10^5), followed by a line containing N space-separated integers A1, A2, ..., AN (0 ≤ Ai ≤ 10^5). Output For each test case, output a single integer which is the maximum value obtained by adding two distinct elements from the given array. Examples Input 2 4 1 5 3 2 5 4 8 6 7 1 Output 8 15","solution":"def max_pair_sum(test_cases): results = [] for case in test_cases: N, arr = case if N < 2: results.append(0) # In case of not enough elements, assume sum is 0 continue arr.sort(reverse=True) results.append(arr[0] + arr[1]) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are planning a trip and need to book hotel rooms. Each hotel has a set of rooms, and each room has its capacity. Given a list of hotels where each hotel has rooms with given capacities, you need to determine the maximum number of people that can be accommodated if you can book only one hotel. Each hotel is described by a list of integers where each integer represents the capacity of a room in that hotel. Input The first line contains an integer H (1 ≤ H ≤ 100), which represents the number of hotels. The next H lines contain space-separated integer values describing the capacities of the rooms in each hotel. Each line starts with an integer R (1 ≤ R ≤ 100), indicating the number of rooms in that hotel, followed by R integers representing the capacities of the rooms in that hotel (1 ≤ capacity ≤ 1000). Output Output a single integer: the maximum number of people that can be accommodated by booking one hotel. Examples Input 3 3 2 3 4 2 5 6 4 1 2 3 4 Output 11 Input 2 3 4 4 4 5 1 2 1 2 1 Output 12 Note In the first sample, by booking the second hotel, which has rooms with capacities [5, 6], we can accommodate a maximum of 11 people. In the second sample, by booking the first hotel, which has rooms with capacities [4, 4, 4], we can accommodate a maximum of 12 people.","solution":"def max_capacity_accommodation(hotels): Returns the maximum number of people that can be accommodated by booking one hotel. :param hotels: List of lists where each inner list represents the capacities of the rooms in a hotel. :type hotels: List[List[int]] :return: The maximum number of people that can be accommodated if booking one hotel. :rtype: int max_capacity = 0 for hotel in hotels: current_capacity = sum(hotel[1:]) if current_capacity > max_capacity: max_capacity = current_capacity return max_capacity"},{"question":"You have been tasked with analyzing the sales data of a retail store. The store has kept a record of sales in a list, where each element of the list is the revenue generated in a single day. However, there was an error in recording, and some days might have revenues recorded as a negative number, which does not make sense and needs to be corrected. Your task is to fix these errors by changing any negative revenues to zero, and then report the corrected list along with the total revenue. Write a function `fix_and_sum_revenues(sales: List[int]) -> Tuple[List[int], int]` that takes a list of integers representing the daily sales revenues and returns a tuple consisting of a new list with all negative revenues changed to zero, and the total revenue of the corrected list. # Input - A single list of integers `sales` where each integer represents the revenue of a day. # Output - A tuple containing two elements: 1. A list of integers where all negative numbers from the input list are replaced with zero. 2. An integer representing the total revenue of the corrected list. # Constraints - The length of the input list will be between 1 and 10^4 inclusive. - Each revenue will be an integer value between -10^3 and 10^3 inclusive. # Example Input ```python sales = [120, -45, 300, -10, 200] ``` Output ```python ([120, 0, 300, 0, 200], 620) ``` In this example, negative revenues -45 and -10 are corrected to zero, and the total revenue is the sum of the corrected list: 120 + 0 + 300 + 0 + 200 = 620.","solution":"from typing import List, Tuple def fix_and_sum_revenues(sales: List[int]) -> Tuple[List[int], int]: This function takes a list of integers representing daily sales revenues and returns a tuple. The first element of the tuple is a list where all negative numbers in the input list are replaced with zero. The second element is the total revenue of the corrected list. Parameters: sales (List[int]): The list of daily sales revenues, which may contain negative values. Returns: Tuple[List[int], int]: A tuple containing the corrected list of revenues and the total revenue. corrected_sales = [max(rev, 0) for rev in sales] total_revenue = sum(corrected_sales) return corrected_sales, total_revenue"},{"question":"You are organizing a secret Santa gift exchange for N participants. Each participant has a unique ID from 1 to N. The goal is to assign each participant to give a gift to exactly one other participant, such that no participant is assigned to give a gift to themselves. Your task is to determine if it is possible to create such an assignment, and if so, provide an example of a valid assignment. Input: The first line contains a single integer N representing the number of participants. Output: If it is not possible to create the assignment, print \\"Not possible\\". If it is possible, print N integers representing the ID of the participant each person should give a gift to, in the order from 1 to N. Constraints: 1 ≤ N ≤ 1000 SAMPLE INPUT 5 SAMPLE OUTPUT 2 3 4 5 1 Explanation In the sample output given, participant 1 gives a gift to participant 2, participant 2 gives a gift to participant 3, and so on, until participant 5 gives a gift to participant 1, ensuring no one gives a gift to themselves.","solution":"def secret_santa(N): Returns a valid secret Santa assignment if possible, otherwise returns \\"Not possible\\". :param N: an integer representing the number of participants :return: a list of integers representing the assignment or a string \\"Not possible\\" if assignment is not possible if N == 1: return \\"Not possible\\" assignment = [(i % N) + 1 for i in range(1, N + 1)] return assignment"},{"question":"You are given a string containing only characters \'a\' and \'b\'. The task is to determine the length of the longest substring of this string that contains the same number of \'a\'s and \'b\'s. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| denotes the length of the string. Output Print the length of the longest substring of s which contains an equal number of \'a\' and \'b\'. Examples Input abbaba Output 6 Input aaaa Output 0 Input ababab Output 6 Note In the first example, the entire string \\"abbaba\\" contains 3 \'a\'s and 3 \'b\'s, so the length is 6. In the second example, there is no substring that contains equal numbers of \'a\'s and \'b\'s, so the result is 0. In the third example, the entire string \\"ababab\\" contains 3 \'a\'s and 3 \'b\'s, so the length is 6.","solution":"def longest_balanced_substring(s): Returns the length of the longest substring containing equal number of \'a\'s and \'b\'s. max_len = 0 count_map = {0: -1} # Initialize the map with count 0 at index -1 count = 0 for i, char in enumerate(s): if char == \'a\': count += 1 elif char == \'b\': count -= 1 if count in count_map: max_len = max(max_len, i - count_map[count]) else: count_map[count] = i return max_len"},{"question":"Jane is excited about her new role as a project manager in a software development team. As part of her project planning, she needs to determine the minimal number of days required to complete a series of interdependent tasks. Each task is assigned to a single day, and some tasks can only be started after the completion of certain other tasks. You are required to help Jane by finding the minimum number of days needed to complete all tasks, given the dependencies between them. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), where n is the number of tasks and m is the number of dependencies. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that task u must be completed before task v can start. Output Print a single integer — the minimum number of days needed to complete all tasks. If it is impossible to complete all tasks due to a circular dependency, print -1. Examples Input 5 4 1 2 1 3 3 4 2 4 Output 3 Input 6 6 1 2 2 3 3 4 4 5 5 6 6 4 Output -1","solution":"from collections import defaultdict, deque def min_days_to_complete_tasks(n, m, dependencies): Calculates the minimal number of days required to complete a series of interdependent tasks. Parameters: n (int): number of tasks. m (int): number of dependencies. dependencies (list of tuple): list containing m tuples indicating the dependencies. Returns: int: the minimum number of days to complete all tasks, or -1 if there\'s a circular dependency. # Create a graph with dependencies and a list to maintain in-degrees graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Initialize a queue with tasks having zero in-degree queue = deque([node for node in in_degree if in_degree[node] == 0]) days = 0 # Perform Kahn\'s algorithm for topological sorting while queue: days += 1 for _ in range(len(queue)): task = queue.popleft() for neighbor in graph[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If there are tasks with non-zero in-degree, we have a cycle if any(in_degree[node] > 0 for node in in_degree): return -1 return days"},{"question":"There are N robots standing in a line. Each robot has a certain battery level represented by an integer array A of size N. The robots can do different actions in two different modes: 1. In charging mode, the robot at index i can transfer one unit of charge to the robot at index i+1 (if i+1 is within the bounds of the array). 2. In discharge mode, the robot at index i can take one unit of charge from the robot at index i+1 (if i+1 is within the bounds of array) if the battery level of the robot at index i+1 is greater than 0. The robots are collaborative and can perform these operations any number of times. However, once an operation is executed, it changes the battery levels of both involved robots immediately. You need to find out the maximum possible battery level for any single robot after the operations. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: The first line contains a single integer N (1 ≤ N ≤ 100) — the number of robots. The second line contains N integers Ai (0 ≤ Ai ≤ 100) — the initial battery levels of the robots. Output For each test case, print a single integer, the maximum possible battery level a single robot can achieve after performing any number of operations. Example Input 3 5 1 2 3 4 5 3 0 0 0 4 10 20 30 40 Output 15 0 100 Note In the first example, the robot at index 4 can transfer all its charge to the robot at index 3, after which the robot at index 3 can transfer all its charge to index 2, and so forth, leading to a total accumulation of charge at the robot at index 0, resulting in (1+2+3+4+5) = 15 units of charge. In the second example, all robots have 0 initial charge, so no operations can increase any battery level. In the third example, all charge can be transferred to a single robot, resulting in a maximum charge of (10+20+30+40) = 100 units.","solution":"def max_battery_level(t, cases): Given t test cases, for each test case: - N: the number of robots - A: the initial battery levels of the robots This function returns the maximum possible battery level for any single robot after performing any number of operations. results = [] for case in cases: N, A = case # The maximum possible battery level is the sum of all battery levels in array A max_battery = sum(A) results.append(max_battery) return results"},{"question":"Alicia loves flowers and she has a rectangular flower garden of size n x m. Each cell of the garden either contains a single flower or is empty. Alicia wants to divide the garden into smaller rectangular sections, each containing exactly one flower. To minimize the amount of fencing needed, Alicia will make cuts along the borders of the cells, both horizontally and vertically, to isolate each flower into its own rectangular section. She is curious to know the minimum number of cuts required to achieve this. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the garden. The next n lines each contain m characters, where \'.\' denotes an empty cell and \'F\' denotes a cell with a flower. Output Print one integer — the minimum number of cuts required to isolate each flower. Examples Input 3 4 .... .F.. ..F. Output 2 Input 4 5 ..... .F.F. ..... ..F.. Output 3 Note In the first example, you can make two horizontal cuts above and below the flowers to isolate them. In the second example, you would need three horizontal cuts to isolate each flower into its own section.","solution":"def min_cuts(n, m, garden): Returns the minimum number of cuts required to isolate each flower in the garden. horizontal_cuts = 0 vertical_cuts = 0 # Count horizontal cuts for i in range(n): previous_was_flower = False for j in range(m): if garden[i][j] == \'F\': if not previous_was_flower: horizontal_cuts += 1 previous_was_flower = True else: previous_was_flower = False # Count vertical cuts for j in range(m): previous_was_flower = False for i in range(n): if garden[i][j] == \'F\': if not previous_was_flower: vertical_cuts += 1 previous_was_flower = True else: previous_was_flower = False return min(horizontal_cuts, vertical_cuts)"},{"question":"A company organizes a marathon every year and keeps track of the completion times of each participant. The marathon route has k checkpoints, numbered from 1 to k, including the start and finish lines. The time taken by each participant to complete the segments between checkpoints is recorded. After the marathon, the organizers want to analyze the performance of a specific set of participants to determine their fastest and slowest performances between every consecutive pair of checkpoints. Given the times taken by participants to reach each checkpoint, your task is to find the minimum and maximum times for the specified participants between all consecutive pairs of checkpoints. Input - The first line contains three integers n (1 ≤ n ≤ 5000), the number of participants, k (2 ≤ k ≤ 500), the number of checkpoints, and q (1 ≤ q ≤ 5000), the number of participants to analyze. - The next n lines contain k integers each, where the j-th integer of the i-th line represents the time taken by the i-th participant to reach checkpoint j. - The last q lines contain an integer each, representing the indices of the participants to analyze (1-based indexing). Output - For each consecutive pair of checkpoints, print two integers: the minimum and maximum times taken by the specified participants between those checkpoints. - Output the result for each pair of checkpoints on a new line. Example Input 5 4 3 2 5 7 10 1 5 6 9 3 6 9 11 4 8 12 14 2 6 8 10 1 3 5 Output 1 2 1 3 1 3 Explanation For the example given: - Participant 1 takes times: 2, 5, 7, 10 - Participant 3 takes times: 3, 6, 9, 11 - Participant 5 takes times: 2, 6, 8, 10 Between checkpoint 1 and checkpoint 2: - Participant 1 takes 5 - 2 = 3 units of time - Participant 3 takes 6 - 3 = 3 units of time - Participant 5 takes 6 - 2 = 4 units of time - Minimum time: 3, Maximum time: 4 Between checkpoint 2 and checkpoint 3: - Participant 1 takes 7 - 5 = 2 units of time - Participant 3 takes 9 - 6 = 3 units of time - Participant 5 takes 8 - 6 = 2 units of time - Minimum time: 2, Maximum time: 3 Between checkpoint 3 and checkpoint 4: - Participant 1 takes 10 - 7 = 3 units of time - Participant 3 takes 11 - 9 = 2 units of time - Participant 5 takes 10 - 8 = 2 units of time - Minimum time: 2, Maximum time: 3 Thus, the output is: ``` 1 2 1 3 1 3 ```","solution":"def analyze_marathon_times(n, k, q, participants_times, participants_to_analyze): # Extract the relevant participant times analyzed_times = [participants_times[i - 1] for i in participants_to_analyze] results = [] # Loop through each consecutive pair of checkpoints for j in range(k - 1): min_time = float(\'inf\') max_time = float(\'-inf\') # Calculate times between checkpoints j and j+1 for each analyzed participant for times in analyzed_times: delta_time = times[j + 1] - times[j] if delta_time < min_time: min_time = delta_time if delta_time > max_time: max_time = delta_time # Append the results for this pair of checkpoints results.append((min_time, max_time)) return results # Example usage: n, k, q = 5, 4, 3 participants_times = [ [2, 5, 7, 10], [1, 5, 6, 9], [3, 6, 9, 11], [4, 8, 12, 14], [2, 6, 8, 10] ] participants_to_analyze = [1, 3, 5] results = analyze_marathon_times(n, k, q, participants_times, participants_to_analyze) for result in results: print(result[0], result[1])"},{"question":"A data company is organizing a hackathon and wants to provide participants with a challenge based on sorting and array manipulation. Your task is to help them by solving the following problem. You are given an array of n distinct integers. Your goal is to find a sorted version of this array after performing exactly one type of move any number of times. In each move, you can choose any subarray of the array and reverse it. Determine if it is possible to sort the array using the described operation. Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the array. The second line contains n distinct space-separated integers ai (1 ≤ ai ≤ 1000), representing the elements of the array. Output Print \\"YES\\" if it is possible to sort the array using the described operation. Otherwise, print \\"NO\\". Examples Input 4 4 3 2 1 Output YES Input 5 3 1 2 5 4 Output NO Note In the first sample, the array can be sorted by reversing the whole array once. In the second sample, it is not possible to sort the array using the described moves.","solution":"def can_sort_by_subarray_reversal(n, arr): Determines if it is possible to sort the array using the described operation (subarray reversal). Args: n : int : number of elements in the array arr : list of int : the array elements Returns: str : \\"YES\\" if the array can be sorted, otherwise \\"NO\\" sorted_arr = sorted(arr) # Create a copy of the original array to avoid modifying it directly temp_arr = arr.copy() # Try to find the first decreasing subarray start = -1 end = -1 for i in range(n - 1): if temp_arr[i] > temp_arr[i + 1]: start = i break if start == -1: # The array is already sorted return \\"YES\\" for j in range(start + 1, n): if temp_arr[j] < temp_arr[j - 1]: end = j else: break # Reverse the subarray from start to end temp_arr[start:end+1] = temp_arr[start:end+1][::-1] # After reversing, check if temp_arr is now sorted if temp_arr == sorted_arr: return \\"YES\\" else: return \\"NO\\""},{"question":"John is planning a new infrastructure for his local network. The network consists of n computers and m direct connections between them. Each direct connection allows the two connected computers to communicate directly. The network must be robust, ensuring that every computer can communicate with every other computer, either directly or indirectly through a series of connections. To achieve this, John needs to determine the minimum number of additional direct connections necessary to make the network fully connected. Input The first line contains two integers n and m — the number of computers in the network and the number of direct connections. The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi) indicating that there is a direct connection between computer ai and computer bi. Output Print a single integer — the minimum number of additional direct connections required to make the network fully connected. Examples Input 4 2 1 2 3 4 Output 1 Input 5 3 1 2 2 3 4 5 Output 1 Input 6 1 1 2 Output 4","solution":"def find(parents, x): if parents[x] == x: return x parents[x] = find(parents, parents[x]) return parents[x] def union(parents, x, y): rootX = find(parents, x) rootY = find(parents, y) if rootX != rootY: parents[rootY] = rootX def min_additional_connections(n, m, connections): Determine the minimum number of additional direct connections necessary to make the network fully connected. parents = list(range(n + 1)) for a, b in connections: union(parents, a, b) unique_parents = len(set(find(parents, i) for i in range(1, n + 1))) return unique_parents - 1"},{"question":"Design a function that reads a list of website visit records and outputs the total number of visits for each website. Each visit record consists of a website URL and the number of visits in one entry. **Input** The input is given in the following format: n url1 v1 url2 v2 :: urln vn n (1 ≤ n ≤ 50) represents the number of visit records. url represents the website URL as a string, and vi (1 ≤ vi ≤ 10000) is the number of visits for the website URL i. **Output** Output the total number of visits for each unique website URL in the format of `url total_visits` one per line. **Example** Input 5 google.com 1200 yahoo.com 300 google.com 500 github.com 450 yahoo.com 200 Output google.com 1700 yahoo.com 500 github.com 450","solution":"def count_website_visits(records): Returns the total number of visits for each unique website URL. visit_counts = {} for record in records: url, visits = record.split() visits = int(visits) if url in visit_counts: visit_counts[url] += visits else: visit_counts[url] = visits return visit_counts"},{"question":"Create an algorithm to find the longest subsequence of distinct characters in a given string. The subsequence does not need to be contiguous but must maintain the relative order of characters. Write a program to determine the length of this longest subsequence for several test cases. INPUT The number of test cases, T. Each test case consists of a single string containing lowercase English letters. OUTPUT For each test case, print the length of the longest subsequence of distinct characters. CONSTRAINTS 1 ≤ T ≤ 10^5 1 ≤ length of the string ≤ 100 SAMPLE INPUT 3 abcabcbb bbbbb pwwkew SAMPLE OUTPUT 3 1 4 Explanation Example 1: The input string is \\"abcabcbb\\". The longest subsequence of distinct characters which can be extracted is \\"abc\\", \\"acb\\", \\"bac\\", etc., each having a length of 3. Example 2: The input string is \\"bbbbb\\". The longest subsequence of distinct characters is \\"b\\", having a length of 1. Example 3: The input string is \\"pwwkew\\". The longest subsequence of distinct characters which can be extracted is \\"pwek\\", \\"pwke\\", etc., each having a length of 4.","solution":"def longest_distinct_subsequence_length(s): Returns the length of the longest subsequence of distinct characters. # Use a set to track unique characters unique_chars = set(s) # The length of the longest subsequence of distinct characters return len(unique_chars) def process_test_cases(T, test_cases): results = [] for test_case in test_cases: results.append(longest_distinct_subsequence_length(test_case)) return results"},{"question":"Robo World Inc. has developed a new robot, RoboX, which can move within a 2D grid. The grid has cells with different energy levels. RoboX can move from one cell to another if and only if the destination cell has equal or higher energy level than the current cell. The objective of RoboX is to reach the bottom-right corner of the grid starting from the top-left corner. Given the energy levels of each cell in the grid, determine if it\'s possible for RoboX to reach the destination. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". Input Format: The first line contains a single integer T, denoting the number of test cases. Each test case begins with an integer N, the size of the NxN grid. The next N lines contain N integers each, representing the energy levels of the cells in the grid. Output Format: For each test case, print a single line containing \\"YES\\" if RoboX can reach the bottom-right corner, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Energy level of any cell ≤ 1000 SAMPLE INPUT: 2 3 1 2 3 6 5 4 7 8 9 3 1 2 3 3 2 1 1 1 1 SAMPLE OUTPUT: YES NO","solution":"def can_robox_reach_destination(grid): N = len(grid) def dfs(x, y): if x == N-1 and y == N-1: return True visited.add((x, y)) directions = [(0, 1), (1, 0)] # right and down movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] >= grid[x][y]: if dfs(nx, ny): return True return False visited = set() return dfs(0, 0) def robox_in_grid(test_cases): results = [] for case in test_cases: N, grid = case if can_robox_reach_destination(grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') idx = 0 T = int(lines[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(lines[idx]) idx += 1 grid = [] for _ in range(N): grid.append(list(map(int, lines[idx].split()))) idx += 1 test_cases.append((N, grid)) return test_cases # Sample Input Parsing and Function Call input_string = 2 3 1 2 3 6 5 4 7 8 9 3 1 2 3 3 2 1 1 1 1 test_cases = parse_input(input_string) output = robox_in_grid(test_cases) for result in output: print(result)"},{"question":"You are given two strings, `S` and `T`, both consisting of uppercase letters. Your task is to determine whether you can transform string `S` into string `T` by removing any number of characters (including zero) from `S` without rearranging the remaining characters. For example, given `S = \\"ABCDE\\"` and `T = \\"ACE\\"`, you can transform `S` into `T` by removing `B` and `D`. Write a function that returns \\"YES\\" if you can transform `S` into `T` by removing characters, and \\"NO\\" otherwise. # Input The input consists of two lines: - The first line contains the string `S` (1 ≤ |S| ≤ 100), where |S| is the length of the string. - The second line contains the string `T` (1 ≤ |T| ≤ 100), where |T| is the length of the string. # Output Print \\"YES\\" if string `S` can be transformed into string `T` by removing characters, otherwise print \\"NO\\". # Examples Example 1 **Input:** ``` ABCDE ACE ``` **Output:** ``` YES ``` **Explanation:** By removing `B` and `D` from `S`, we get `ACE`, which is exactly `T`. Example 2 **Input:** ``` AXBYC ABC ``` **Output:** ``` YES ``` **Explanation:** By removing `X` and `Y` from `S`, we get `ABC`, which is exactly `T`. Example 3 **Input:** ``` ABCD AEB ``` **Output:** ``` NO ``` **Explanation:** `AEB` is not a subsequence of `ABCD` since `E` is missing in `S`. # Constraints - Both strings `S` and `T` consist only of uppercase English letters. - 1 ≤ |S|, |T| ≤ 100","solution":"def can_transform(S, T): Determines if string S can be transformed into string T by removing characters. it = iter(S) if all(char in it for char in T): return \\"YES\\" return \\"NO\\""},{"question":"Given two weighted, undirected graphs G and H with the same set of vertices (numbered from 1 to V) but possibly different sets of edges, determine if H is a spanning tree of G. A spanning tree of a graph G is a subgraph of G that includes all of the vertices of G and is a single connected component (contains no cycles). Input - The first line of the input contains two integers V and E (1 ≤ V ≤ 1000, 0 ≤ E ≤ 1000) — the number of vertices and edges in graph G. - The following E lines each contain three integers u, v, and w (1 ≤ u, v ≤ V, 0 ≤ w ≤ 1000), representing an edge between vertices u and v with weight w in graph G. - The next line contains two integers V2 and E2 — the number of vertices and edges in graph H. (V2 will always be equal to V) - The following E2 lines each contain three integers u, v, and w (1 ≤ u, v ≤ V, 0 ≤ w ≤ 1000), representing an edge between vertices u and v with weight w in graph H. Output - Output \\"YES\\" if H is a spanning tree of G, otherwise, output \\"NO\\". Examples Input 4 3 1 2 1 2 3 2 3 4 3 4 3 1 2 1 2 3 2 1 3 4 Output NO Input 5 7 1 2 1 1 3 2 1 4 2 2 3 1 2 5 3 3 4 3 4 5 1 5 4 1 2 1 1 3 2 4 5 1 2 4 3 Output YES","solution":"def is_spanning_tree(V, E, edges_G, V2, E2, edges_H): if V != V2: return \\"NO\\" if len(edges_H) != V - 1: return \\"NO\\" parent = {} def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY for i in range(1, V + 1): parent[i] = i for u, v, w in edges_H: if u > V or v > V: return \\"NO\\" union(u, v) connected_components = set(find(i) for i in range(1, V + 1)) return \\"YES\\" if len(connected_components) == 1 else \\"NO\\""},{"question":"Suppose you have a grid of size m x n. Each cell in the grid contains a non-negative integer. You are initially positioned at the top-left corner of the grid (i.e., at cell (0, 0)). You are required to move to the bottom-right corner of the grid (i.e., at cell (m-1, n-1)). From the current cell, you can only move either to the right or down to the adjacent cell. As you move, you add the value of each cell you visit to your score. Your task is to find the maximum score you can achieve by the time you reach the bottom-right corner of the grid. Input - The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100), representing the dimensions of the grid. - The next m lines contain n integers each, representing the grid. The value in the i-th row and j-th column of the grid is denoted by grid[i][j] (0 ≤ grid[i][j] ≤ 100). Output - Print the maximum score that can be achieved. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 1 1 Output 4 Note In the first example, the path with the maximum score is 1 → 3 → 5 → 2 → 1, resulting in a total score of 12. In the second example, the path with the maximum score is 1 → 2 → 1, resulting in a total score of 4.","solution":"def max_score_path(grid): Returns the maximum score that can be achieved by moving from the top-left corner to the bottom-right corner of the grid, moving only to the right and down. m = len(grid) n = len(grid[0]) # Create a 2D dp array to store the maximum scores dp = [[0]*n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Given a list of n integers, your task is to determine the length of the longest contiguous subarray such that the sum of its elements is a multiple of k. Input The input consists of two integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 100000) on the first line, followed by a list of n integers (each integer having an absolute value not exceeding 100000) on the second line. Output Print a single integer, the length of the longest contiguous subarray whose sum is a multiple of k. Examples Input 6 5 1 2 3 4 6 7 Output 4 Input 8 3 -1 2 9 -4 3 1 2 8 Output 7 Note In the first sample, the longest subarray whose sum is a multiple of 5 is [2, 3, 4, 6] with a sum of 15, which is a multiple of 5. Its length is 4. In the second sample, the longest subarray whose sum is a multiple of 3 is [-1, 2, 9, -4, 3, 1, 2] with a sum of 12, which is a multiple of 3. Its length is 7.","solution":"def longest_subarray_multiple_of_k(n, k, arr): Returns the length of the longest contiguous subarray whose sum is a multiple of k. prefix_sum = 0 remainder_dict = {0: -1} # Dictionary to store the first occurrence of a given remainder max_len = 0 for i in range(n): prefix_sum += arr[i] remainder = prefix_sum % k # normalize the remainder to be positive if remainder < 0: remainder += k if remainder in remainder_dict: max_len = max(max_len, i - remainder_dict[remainder]) else: remainder_dict[remainder] = i return max_len"},{"question":"**Problem Title:** Optimal Service Time **Description:** You are assigned to manage a single-server customer service desk at a busy office. The server can only assist one person at a time. Each customer has a specific arrival time and a service duration. Once a customer starts being served, the service will continue without interruption until it is completed, even if other customers arrive in the meantime. Your task is to find the maximum number of customers that can be served if you optimally schedule the customers. **Input:** - The first line contains a single integer `N` (1 ≤ N ≤ 100,000), the number of customers. - The following `N` lines each contain two integers `a_i` and `d_i` (1 ≤ a_i, d_i ≤ 1,000,000,000), the arrival time and service duration of the `i`-th customer. **Output:** - Output a single integer, the maximum number of customers that can be served. **Example:** **Input:** ``` 5 1 3 2 5 10 2 5 3 6 4 ``` **Output:** ``` 3 ``` **Explanation:** By serving customers [1, 4, 5] or [3, 4, 5], you can maximize the number of customers served, which is 3 in this case.","solution":"def max_customers_served(N, customers): # Sort customers based on their arrival times customers.sort(key=lambda x: x[0]) # Initialize the variables end_time = 0 served_count = 0 for arrival, duration in customers: # Serve the customer if the server is free at their arrival time if arrival >= end_time: served_count += 1 end_time = arrival + duration return served_count"},{"question":"In this task, you need to help the merchants in the town of Algorithmville optimize their stock management system. They are struggling with keeping track of their inventory accurately due to overlapping time frames for restocking and selling products. The merchants track the history of their stock levels using a list of transactions. Each transaction is described by three values: a timestamp `t`, a transaction type `type`, and a quantity `q`. The `timestamp` is an integer which represents the moment the transaction happened, `type` can either be `restock` or `sell`, and `quantity` is the integer amount of the product involved in the transaction. Your task is to process these transactions and calculate the final inventory level at any given requested timestamp. Transactions can have overlapping time frames, and each must be accounted for in sequential order based on the timestamps provided. If there are multiple transactions at the same timestamp, process them in the order provided. Consider the following rules for each transaction\'s processing: - For a `restock` transaction, add the specified quantity to the current stock. - For a `sell` transaction, subtract the specified quantity from the current stock. However, the inventory level cannot drop below zero, thus the effective quantity subtracted should be limited by the current stock. You will receive two inputs: a list of transactions in the form of `[(t1, type1, q1), (t2, type2, q2), ...]` and a list of timestamps `[t1, t2, ...]` for which you need to report the stock level. Input - The first line contains an integer `n`, the number of transactions. - The next `n` lines each contain a transaction described by an integer `t`, a string `type`, and an integer `q`. - The following line contains an integer `m`, the number of timestamps for which stock level is requested. - The next `m` lines each contain a single integer, representing the timestamp. Output - Output `m` lines, each containing the stock level at the corresponding requested timestamp in the same order. Example Input ``` 5 1 restock 10 2 sell 5 2 restock 3 3 sell 7 4 restock 5 3 2 3 4 ``` Output ``` 8 6 11 ``` Explanation - At timestamp `2`: Initial stock is `10` (from the restock at `t=1`), then `5` is sold, leaving `5`, then `3` is restocked, making it `8`. - At timestamp `3`: From the previous state of `8` at `t=2`, then `7` is sold, leaving `1`. - At timestamp `4`: From the previous state of `1` at `t=3`, then `5` is restocked, making it `6`. This task will ensure that you can manage and process a series of sequential events and simulate a stock management system.","solution":"def calculate_inventory(transactions, timestamps): Calculate the inventory at each requested timestamp. transactions: list of tuples, each tuple contains (t, type, q) timestamps: list of integers representing the requested timestamps Returns a list of integers representing the stock level at each requested timestamp. transactions.sort() current_stock = 0 stock_at_times = {} current_time = 0 for timestamp in timestamps: while current_time < len(transactions) and transactions[current_time][0] <= timestamp: t, t_type, q = transactions[current_time] if t_type == \'restock\': current_stock += q elif t_type == \'sell\': current_stock = max(0, current_stock - q) current_time += 1 stock_at_times[timestamp] = current_stock result = [] for timestamp in timestamps: result.append(stock_at_times[timestamp]) return result"},{"question":"Amy loves making snacks for her friends. She has a list of `n` available ingredient types, each with a given cost. Some ingredients might be free, and some might even have negative costs because the store is trying to get rid of excess stock and is willing to pay Amy to take them. Amy wants to make exactly `k` different types of snacks, each requiring a unique ingredient from the list. Help Amy minimize the total cost of buying exactly `k` types of ingredients. Input The first line contains two space-separated integers `n` and `k` (1 ≤ k ≤ n ≤ 100) — the number of available ingredient types, and the number of different types of snacks Amy wants to make. The following line contains `n` space-separated integers `cost` ( -1000 ≤ cost ≤ 1000) — the costs of the ingredients. Output Output the minimum total cost for buying exactly `k` types of ingredients. Example Input 6 3 -2 3 -5 1 0 6 Output -7 Input 5 2 4 -3 0 2 -1 Output -4","solution":"def min_total_cost(n, k, costs): Returns the minimum total cost of buying exactly k types of ingredients. Parameters: n (int): Number of available ingredient types. k (int): Number of different types of snacks Amy wants to make. costs (list of int): Costs of the ingredients. Returns: int: The minimum total cost. # Sort the costs in ascending order costs.sort() # Sum the first k elements for the minimum total cost return sum(costs[:k])"},{"question":"A coding competition organizer needs to compute the sum of unique integers within a matrix. Given a matrix of size NxM filled with integers, the goal is to determine the sum of all unique elements in the matrix (i.e., elements that appear exactly once). Input: - First line contains T, the number of test cases. - For each test case: - The first line contains two integers N and M, representing the number of rows and columns, respectively. - The following N lines each contain M integers, representing the elements of the matrix. Output: For each test case, output a single integer that is the sum of all unique elements in the matrix. If there are no unique elements, the sum should be 0. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 - -1000 ≤ Matrix[i][j] ≤ 1000 (where Matrix[i][j] denotes elements of matrix) SAMPLE INPUT 2 3 3 1 2 3 4 5 6 7 8 1 4 4 1 2 2 3 4 4 5 5 6 7 8 8 9 9 9 9 SAMPLE OUTPUT 42 18 Explanation: For the first test case, the unique elements in the matrix are {2, 3, 4, 5, 6, 7, 8}, and their sum is 2 + 3 + 4 + 5 + 6 + 7 + 8 = 35. For the second test case, the unique elements in the matrix are {1, 3, 6, 7}, and their sum is 1 + 3 + 6 + 7 = 17.","solution":"def sum_of_unique_elements(matrix, N, M): from collections import Counter # Flatten the matrix flat_matrix = [matrix[i][j] for i in range(N) for j in range(M)] # Count the frequency of each element element_count = Counter(flat_matrix) # Get the sum of unique elements (elements that appear exactly once) unique_sum = sum(elem for elem, count in element_count.items() if count == 1) return unique_sum def solve(test_cases): results = [] for case in test_cases: N, M, matrix = case result = sum_of_unique_elements(matrix, N, M) results.append(result) return results"},{"question":"**Problem: Movie Marathon** Michael loves watching movies, and he has a vast collection of them. He plans his movie marathon in such a way that he doesn\'t watch the same genre of movies consecutively, as he finds it boring. He plans to select a list of movies, but he needs your help to determine if his planned movie list fulfills his condition. Each movie belongs to a specific genre, represented by a number. Michael wants to ensure that no two consecutive movies belong to the same genre. Given a list of movies where each movie is represented by its genre, determine if Michael\'s planned movie list is valid according to his condition. **Input** The first line contains a positive integer `m` (1 ≤ m ≤ 100) — the number of movies in the list. The second line contains `m` integers `g1, g2, ..., gm` (1 ≤ gi ≤ 100) — representing the genres of each movie in the list. **Output** Print \\"YES\\" if Michael\'s planned list of movies fulfills the condition of no two consecutive movies having the same genre. Otherwise, print \\"NO\\". **Examples** Input ``` 5 1 2 1 3 2 ``` Output ``` YES ``` Input ``` 4 1 1 2 3 ``` Output ``` NO ``` **Explanation** In the first example, Michael\'s movie list is valid since no two consecutive movies have the same genre. In the second example, the first two movies belong to the same genre, so the movie list is not valid for Michael\'s marathon.","solution":"def is_valid_movie_plan(m, genres): Determines if the movie plan is valid (no two consecutive movies of the same genre). Parameters: m (int): The number of movies. genres (List[int]): The list of movie genres. Returns: str: \\"YES\\" if the plan is valid, otherwise \\"NO\\". for i in range(1, m): if genres[i] == genres[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Problem Statement You are given a park with several fountains. Each fountain can supply water to the park area within a certain radius. Your task is to find the minimum number of fountains needed to cover the entire park. Each fountain is represented by its position on a one-dimensional plane and the range it covers (radius). You need to determine the minimum number of these fountains that must be activated to ensure the entire park is covered. Input The input consists of multiple datasets. The format of each dataset is as follows. n p_1 r_1 ... p_n r_n The first line contains an integer n (1 leq n leq 1,000), which is the number of fountains. Then n lines follow, each containing two integers p_i (1 leq p_i leq 1,000,000) and r_i (1 leq r_i leq 1,000). This denotes the position of the i-th fountain and its coverage radius. The input terminates when n=0. Your program must not output anything for this case. Output Print the minimum number of fountains needed to cover the entire park in a line for each dataset. Example Input 4 1 2 3 2 7 4 10 1 5 1 1 2 2 4 1 5 1 6 1 0 Output 2 3","solution":"def min_fountains_to_cover_park(fountain_list): n = len(fountain_list) intervals = [] for (p, r) in fountain_list: intervals.append((p - r, p + r)) intervals.sort() idx = 0 min_fountains = 0 max_covered = 0 while max_covered < max(p + r for p, r in fountain_list): can_extend = False max_cover_in_this_step = max_covered while idx < n and intervals[idx][0] <= max_covered: max_cover_in_this_step = max(max_cover_in_this_step, intervals[idx][1]) idx += 1 can_extend = True if not can_extend: return float(\'inf\') # Not possible to cover min_fountains += 1 max_covered = max_cover_in_this_step return min_fountains def process_input(input_data): datasets = input_data.strip().split(\\"n\\") output = [] i = 0 while i < len(datasets): n = int(datasets[i]) if n == 0: break fountain_list = [] i += 1 for _ in range(n): p, r = map(int, datasets[i].split()) fountain_list.append((p, r)) i += 1 output.append(min_fountains_to_cover_park(fountain_list)) return output"},{"question":"An advanced robotics company is developing a pathfinding algorithm for their warehouse robots. Given a grid of cells where each cell is either blocked or open, you need to determine the shortest path from the top-left corner to the bottom-right corner. The robot can only move up, down, left, or right, and cannot pass through blocked cells. If there is no valid path from the top-left corner to the bottom-right corner, output -1. Input The first line contains two integers m, n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. The next m lines contain n characters each, representing the grid. A \'.\' indicates an open cell and a \'#\' indicates a blocked cell. Output Print a single number — the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. Examples Input 3 3 ... .#. ... Output 4 Input 3 3 .#. . ... Output -1 Note In the first example, the shortest path from the top-left corner to the bottom-right corner is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), which has a length of 4. In the second example, there is no valid path from the top-left corner to the bottom-right corner as the robot is obstructed by blocked cells.","solution":"from collections import deque def shortest_path(grid): m, n = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # Function to convert input in required format def find_shortest_path(m, n, grid_input): grid = grid_input.split() return shortest_path(grid)"},{"question":"You have recently become interested in cryptography and decided to create your own encryption algorithm. The algorithm should encode messages by shifting each letter by a fixed number of places in the alphabet. This method is a variant of the Caesar Cipher. Here\'s how your encryption works: - You receive an integer k, which represents the number of positions each letter in the original message should be shifted. - You receive a string s, which is the message to be encrypted. - The string s only contains lowercase English letters. For example, with a shift of 3, the letter \'a\' will become \'d\', \'b\' will become \'e\', and \'z\' will wrap around to become \'c\'. Input: - The first line contains the integer k (1 ≤ k ≤ 25), the number of positions to shift. - The second line contains the string s (1 ≤ |s| ≤ 1000). Output: - Output the encrypted string. Examples: Input: 3 abc Output: def Input: 2 xyz Output: zab Input: 1 hello Output: ifmmp Note: - The shift k will always be such that after wrapping, the resulting character will always be a valid lowercase English letter. - The encryption for each letter should wrap around back to \'a\' if moving past \'z\'s index.","solution":"def encrypt_message(k, s): Encrypts the input string s by shifting each character k positions in the alphabet. :param k: Integer, number of positions to shift (1 ≤ k ≤ 25) :param s: String, the message to be encrypted (1 ≤ |s| ≤ 1000) :return: Encrypted string encrypted_message = [] for char in s: if \'a\' <= char <= \'z\': shifted_index = (ord(char) - ord(\'a\') + k) % 26 encrypted_char = chr(ord(\'a\') + shifted_index) encrypted_message.append(encrypted_char) return \'\'.join(encrypted_message)"},{"question":"You are given an array of integers. Your task is to determine the length of the longest contiguous subarray with the same value. For example, consider the array a = [1, 2, 2, 3, 3, 3, 2, 2]. The longest contiguous subarray with the same value is [3, 3, 3] and its length is 3. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, output the length of the longest contiguous subarray with the same value. Example Input 3 8 1 2 2 3 3 3 2 2 5 1 4 4 4 5 6 1 1 1 1 1 1 Output 3 3 6 Explanation In the first test case, the longest contiguous subarray with the same value is [3, 3, 3], and its length is 3. In the second test case, the longest contiguous subarray with the same value is [4, 4, 4], and its length is 3. In the third test case, the entire array is the longest contiguous subarray with the same value, and its length is 6.","solution":"def longest_contiguous_subarray(test_cases): results = [] for case in test_cases: n = case[0] arr = case[1] if n == 0: results.append(0) continue max_len = 1 current_len = 1 for i in range(1, n): if arr[i] == arr[i-1]: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 1 results.append(max_len) return results # Example usage (not part of solution to be tested): # test_cases = [(8, [1, 2, 2, 3, 3, 3, 2, 2]), (5, [1, 4, 4, 4, 5]), (6, [1, 1, 1, 1, 1, 1])] # print(longest_contiguous_subarray(test_cases))"},{"question":"In a parallel universe, there\'s a popular online auction system that allows sellers to list items for sale and buyers to place bids on these items. Each item auction starts at a specified minimum bid price and ends when an auction duration has elapsed. Bids are placed by different users, and the highest bid above the minimum bid price at the end of the auction wins the item. You are tasked with developing the core functionality of the auction system. Specifically, you need to implement a system that can handle multiple auctions running simultaneously and determine the winning bids at the end of the auction durations. Your mission is to create a model of the auction system with the following functionality: - Allow items to be listed for auction, specifying the item ID, minimum bid price, and auction duration. - Accept bids on items, specifying the item ID, bid price, and user ID. - Determine the winning bid for each item at the end of its auction duration. Input The input consists of multiple datasets, representing different auctions and bids. Each dataset begins with a series of lines defining the items available for auction, followed by a series of lines representing the bids placed on these items. The end of each dataset is indicated by a line containing the string \\"END\\". Each item is defined by the following format: ``` 0 itemID minimumBidPrice auctionDuration ``` Each bid is defined by the following format: ``` 1 itemID bidPrice userID ``` The input ends when a line containing the string \\"STOP\\" is encountered. Output For each dataset, output the winning bids for all items at the end of their auction durations. Each winning bid should be output in the format: ``` itemID userID bidPrice ``` If no valid bids are placed on an item, output: ``` itemID No valid bids ``` The output for each dataset should be ordered by itemID. Examples Input ``` 0 101 50 5 0 102 100 3 0 103 20 7 1 101 55 A 1 101 60 B 1 102 110 C 1 103 25 D 1 103 30 E END 0 201 200 4 0 202 80 6 1 201 220 F 1 201 250 G 1 202 85 H 1 202 90 I END STOP ``` Output ``` 101 B 60 102 C 110 103 E 30 201 G 250 202 I 90 ```","solution":"class AuctionSystem: def __init__(self): self.items = {} self.bids = {} def list_item(self, item_id, min_bid_price, auction_duration): self.items[item_id] = { \'min_bid_price\': min_bid_price, \'auction_duration\': auction_duration, \'bids\': [] } def place_bid(self, item_id, bid_price, user_id): if item_id in self.items: self.items[item_id][\'bids\'].append((bid_price, user_id)) def determine_winners(self): results = [] for item_id, item_details in sorted(self.items.items()): valid_bids = [bid for bid in item_details[\'bids\'] if bid[0] >= item_details[\'min_bid_price\']] if valid_bids: max_bid = max(valid_bids, key=lambda x: x[0]) results.append(f\\"{item_id} {max_bid[1]} {max_bid[0]}\\") else: results.append(f\\"{item_id} No valid bids\\") return results def process_auction_data(input_data): auction_system = None result = [] dataset_result = [] for line in input_data.splitlines(): if line == \\"STOP\\": break if line == \\"END\\": result.extend(auction_system.determine_winners()) auction_system = None dataset_result.append(result) result = [] elif line.startswith(\'0\'): if auction_system is None: auction_system = AuctionSystem() _, item_id, min_bid_price, auction_duration = line.split() auction_system.list_item(int(item_id), int(min_bid_price), int(auction_duration)) elif line.startswith(\'1\'): _, item_id, bid_price, user_id = line.split() auction_system.place_bid(int(item_id), int(bid_price), user_id) return [item for sublist in dataset_result for item in sublist]"},{"question":"Given a positive integer N, determine if it is possible to rearrange the digits of N to form a palindrome. A number is a palindrome if it reads the same backward as forward. For example, 121 or 3443 are palindromes. If it is possible to rearrange the digits of N to form a palindrome, return \\"YES\\", otherwise return \\"NO\\". Input The first line contains a single integer N (1 ≤ N ≤ 10^18). Output Output \\"YES\\" if the digits of N can be rearranged to form a palindrome. Otherwise, output \\"NO\\". Constraints 1 ≤ N ≤ 10^18 SAMPLE INPUT 121 SAMPLE OUTPUT YES SAMPLE INPUT 123 SAMPLE OUTPUT NO","solution":"def can_form_palindrome(N): Determines if it is possible to rearrange the digits of N to form a palindrome. Parameters: N (int): The input number. Returns: str: \\"YES\\" if the digits can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter digit_count = Counter(str(N)) odd_count = sum(1 for count in digit_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"In a kingdom far away, there exists a unique tradition of celebrating events with grand feasts. The royal chef is in charge of preparing a specific number of dishes for these feasts, ensuring that each celebration is unique in the way the dishes are arranged. The chef decides to prepare a sequence of dishes where the number of dishes always follow a particular rule - the Fibonacci sequence. The challenge is that the chef can only prepare a specific number of dishes, and they must fit in the exact Fibonacci order for each celebration. You need to create a program that identifies how many distinct ways the chef can prepare n dishes, such that the number of dishes follows the Fibonacci sequence exactly and no subsequence violates this rule. Input: A single integer n, where (1 ≤ n ≤ 100). Output: Line 1: A single integer k, representing the number of distinct ways to prepare exactly n dishes following the Fibonacci sequence. Example Input: 5 Output: 3 Description: There are 3 ways to prepare exactly 5 dishes: 1) Fibonacci sequence: [1, 1, 2, 1] 2) Fibonacci sequence: [1, 2, 1, 1] 3) Fibonacci sequence: [2, 1, 1, 1] All arrangements follow the Fibonacci rules. Note: In the list elements represent the number of dishes in each position of the arrangement. For example, [1, 1, 2, 1] represents 4 positions and each position has respective number of dishes following the Fibonacci sequence.","solution":"def count_ways_to_prepare_dishes(n): Returns the number of distinct ways to prepare exactly n dishes following the Fibonacci sequence rule. # Dynamic programming table to store ways to prepare dishes dp = [0] * (n + 1) # There is one way to prepare zero dishes (base case) dp[0] = 1 # Fill dp[] in bottom-up manner for i in range(1, n + 1): if i >= 1: dp[i] += dp[i - 1] if i >= 2: dp[i] += dp[i - 2] return dp[n]"},{"question":"You are an avid book collector and maintain a digital catalog of your collection. Each book in your catalog is uniquely identified by an ISBN number. Your task is to develop a system that helps you organize and manage your book catalog. You want to implement a feature in your system that allows you to find the longest substring of unique ISBN numbers within a given list of ISBN numbers. The longest substring here refers to the longest sequence of consecutive ISBN numbers without any repetition. Write a function `longest_unique_substring(isbn_list)` that takes a list of ISBN numbers and returns the longest substring of unique ISBN numbers. If there are multiple substrings of the same maximum length, return the one that appears first. # Input: - `isbn_list` is a list of strings, where each string represents an ISBN number. The length of `isbn_list` is between 1 and 100, inclusive. # Output: - Return a list of strings representing the longest substring of unique ISBN numbers. # Example: ```python # Example 1 isbn_list = [\\"123\\", \\"456\\", \\"789\\", \\"123\\", \\"456\\"] print(longest_unique_substring(isbn_list)) # Output: [\\"123\\", \\"456\\", \\"789\\"] # Example 2 isbn_list = [\\"111\\", \\"222\\", \\"333\\", \\"111\\", \\"111\\", \\"444\\"] print(longest_unique_substring(isbn_list)) # Output: [\\"111\\", \\"222\\", \\"333\\"] # Example 3 isbn_list = [\\"999\\"] print(longest_unique_substring(isbn_list)) # Output: [\\"999\\"] ``` # Notes: - Each ISBN number in the list is a string of digits. - The solution should efficiently find the longest substring without duplicates. - The ordering of ISBN numbers in the input list should be maintained in the output substring.","solution":"def longest_unique_substring(isbn_list): Returns the longest substring of unique ISBN numbers. n = len(isbn_list) if n == 0: return [] longest_substr = [] current_substr = [] isbn_set = set() start = 0 for end in range(n): while isbn_list[end] in isbn_set: isbn_set.remove(isbn_list[start]) current_substr.pop(0) start += 1 isbn_set.add(isbn_list[end]) current_substr.append(isbn_list[end]) if len(current_substr) > len(longest_substr): longest_substr = current_substr[:] return longest_substr"},{"question":"You are a participant in a robot competition. The task is to program your robot to navigate through a grid filled with obstacles to collect as many energy packs as possible. The grid is represented by a 2D list where: - \'E\' represents an energy pack that increases the robot\'s energy by 1 unit. - \'#\' represents an obstacle that cannot be traversed. - \'R\' represents the starting position of the robot. - \'.\' represents an empty space the robot can move through. The robot can move up, down, left, or right to an adjacent cell, but cannot move diagonally or outside the grid boundaries. The robot starts with a certain amount of initial energy and can continue moving as long as it has energy greater than zero. Each move consumes one unit of energy. The objective is to navigate the grid to collect the maximum number of energy packs before the robot runs out of energy. Given the grid, the starting energy, and the dimensions of the grid, create a program to find the maximum number of energy packs the robot can collect. Your program should read the grid dimensions, the grid itself, and the initial amount of energy as input, and output the maximum number of energy packs the robot can collect. Input The first line of the input contains three integers, rows, cols, and initial_energy (1 ≤ rows, cols ≤ 100, 1 ≤ initial_energy ≤ 1000) separated by a space. \'rows\' and \'cols\' represent the dimensions of the grid. The following \'rows\' lines each contain a string of length \'cols\', representing the grid. The string consists of the characters \'E\', \'#\', \'R\', and \'.\' as described above. It is guaranteed that there is exactly one \'R\' in the grid. Example Input 5 7 10 #R.....# .#E#E#.# .#...#.# .#E#E#.# #..... Output 4 Explanation The robot can navigate the grid to collect all four energy packs \'E\' in the available energy (10 moves). The grid traversal might look like this: Move right (1 energy), collect \'E\', move down (2 energy), collect \'E\', move up and left (4 energy), then down and right (4 energy) to collect both remaining \'E\' packs, totaling 4 energy packs collected.","solution":"def max_energy_packs(rows, cols, initial_energy, grid): from collections import deque # Find starting position start_row, start_col = None, None for r in range(rows): for c in range(cols): if grid[r][c] == \'R\': start_row, start_col = r, c break if start_row is not None: break directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # BFS initialization queue = deque([(start_row, start_col, initial_energy)]) visited = set((start_row, start_col)) total_energy_packs = 0 # BFS traversal while queue: x, y, energy = queue.popleft() if grid[x][y] == \'E\': total_energy_packs += 1 if energy > 0: for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, energy - 1)) visited.add((nx, ny)) return total_energy_packs # Example Usage rows = 5 cols = 7 initial_energy = 10 grid = [ \'#R.....#\', \'.#E#E#.#\', \'.#...#.#\', \'.#E#E#.#\', \'#.....\' ] print(max_energy_packs(rows, cols, initial_energy, grid)) # Output: 4"},{"question":"A company needs to track the frequency and spending of different customers based on purchase data. For each customer, you have the total amount spent in one transaction. Your task is to calculate the total amount spent and the number of transactions per customer and output this information sorted by the total amount spent in descending order. If two customers spent the same amount, sort their names in ascending order. Input: The first line of input contains an integer, n, which denotes the number of transactions that will follow. Then, n lines follow, each containing a customer name and the amount spent by the customer in that transaction, separated by a space. Output: The output contains the customer names, total amount spent and the number of transactions, sorted by total amount spent in descending order and then by customer names in ascending order if amounts are the same. Constraints: 1 ≤ n ≤ 100000 1 ≤ |name| ≤ 30 1 ≤ amount ≤ 1000 SAMPLE INPUT: 5 alice 50 bob 20 alice 30 bob 25 charlie 50 SAMPLE OUTPUT: alice 80 2 charlie 50 1 bob 45 2 Explanation: - Alice has a total of 2 transactions with a total spending of 80. - Charlie has 1 transaction with a total spending of 50. - Bob has 2 transactions with a total spending of 45.","solution":"def track_customer_spending(n, transactions): from collections import defaultdict # Dictionary to store the total amount spent and number of transactions per customer spending_tracker = defaultdict(lambda: [0, 0]) # Processing each transaction for transaction in transactions: customer, amount = transaction.split() amount = int(amount) spending_tracker[customer][0] += amount spending_tracker[customer][1] += 1 # Convert dictionary to a list of tuples spending_list = [(customer, amount_spent, transactions) for customer, (amount_spent, transactions) in spending_tracker.items()] # Sort the list based on the criteria spending_list.sort(key=lambda x: (-x[1], x[0])) return spending_list"},{"question":"You are given a binary string s of length N, consisting of characters \'0\' and \'1\'. Your objective is to perform a series of operations to make the string consist of alternating characters (\'0101...\' or \'1010...\'). In each operation, you can replace a \'0\' with a \'1\' or a \'1\' with a \'0\'. Find the minimum number of operations required to make the binary string alternating. Constraints * 1 leq N leq 10^5 Input Input is given from Standard Input in the following format: N s Output Print the minimum number of operations required to make the binary string alternating. Examples Input 6 010101 Output 0 Input 5 11111 Output 2 Input 4 0011 Output 2 Input 7 0000000 Output 3 Input 8 10101010 Output 0","solution":"def min_operations_to_alternate(N, s): Returns the minimum number of operations required to make the binary string alternating. # Count misplacements for pattern starting with \'0\' (010101...) count1 = sum(1 for i, char in enumerate(s) if int(char) != i % 2) # Count misplacements for pattern starting with \'1\' (101010...) count2 = sum(1 for i, char in enumerate(s) if int(char) == i % 2) # The result is the minimum misplacement count return min(count1, count2) # Example use: # N = 7 # s = \\"0000000\\" # result = min_operations_to_alternate(N, s) # print(result) # Output should be 3"},{"question":"You are given a list of intervals, where each interval is represented by a pair of integers ([start, end]). Write a function to determine if any two intervals overlap. If there are overlapping intervals, return (-1). If no intervals overlap, return the total combined length of all intervals. An interval ([start1, end1]) overlaps with another interval ([start2, end2]) if (start1 < end2) and (start2 < end1). **Function Signature:** ```python def interval_analysis(intervals: List[List[int]]) -> int: ``` **Input:** - intervals: a list of ([start, end]) pairs representing intervals. ((1 leq len(intervals) leq 10^5)) - ([start, end]) where (0 leq start < end leq 10^9) **Output:** - If there are overlapping intervals, return (-1). - If no intervals overlap, return the total combined length of all intervals. **Examples:** ```python interval_analysis([[1, 3], [2, 4], [5, 7]]) # Output: -1 interval_analysis([[1, 3], [4, 6], [7, 9]]) # Output: 6 ``` **Explanation:** - In the first example, intervals ([1, 3]) and ([2, 4]) overlap. - In the second example, there are no overlapping intervals, so the total combined length is (3 - 1 + 6 - 4 + 9 - 7 = 6).","solution":"from typing import List def interval_analysis(intervals: List[List[int]]) -> int: Analyzes the given list of intervals for overlaps and total combined length. If any two intervals overlap, returns -1. Otherwise, returns the total combined length of all intervals. intervals.sort() total_length = 0 prev_end = -1 for start, end in intervals: if start < prev_end: return -1 prev_end = end total_length += end - start return total_length"},{"question":"Marc has recently started working in an office where he needs to use a very old computer. The computer\'s memory management system replaces all occurrences of any given string in its memory when another string is written to any location occupied by the first string. When Marc writes a string to one of the locations in the computer\'s memory, the computer automatically replaces all occurrences of a given string with the newly written string. The initial memory content is given as a list of strings. Marc writes a string to only one location at a time. Write a function to simulate the result of multiple string write operations. Given the initial memory content and a series of write operations that Marc performs, determine the final state of the memory. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of initial memory content strings and the number of write operations. - The next n lines each contain a string representing the initial memory content. - The following m lines each contain two strings, the string to replace and the string to replace it with. Output: - Print the final state of the memory, with each string on a new line. Example: Input: 5 3 abc def ghi abc jkl abc pqr def stu ghi vwx Output: pqr stu vwx pqr jkl Explanation: Initially, the memory content is: [\\"abc\\", \\"def\\", \\"ghi\\", \\"abc\\", \\"jkl\\"] - The first write operation changes all \\"abc\\" to \\"pqr\\". Memory content: [\\"pqr\\", \\"def\\", \\"ghi\\", \\"pqr\\", \\"jkl\\"] - The second write operation changes all \\"def\\" to \\"stu\\". Memory content: [\\"pqr\\", \\"stu\\", \\"ghi\\", \\"pqr\\", \\"jkl\\"] - The third write operation changes all \\"ghi\\" to \\"vwx\\". Memory content: [\\"pqr\\", \\"stu\\", \\"vwx\\", \\"pqr\\", \\"jkl\\"] Please, note that when an occurrence of the given string is replaced, it affects all subsequent content in the memory simultaneously.","solution":"def simulate_memory_operations(n, m, initial_memory, write_operations): Simulate the result of multiple string write operations on computer memory. :param n: Number of initial memory content strings :param m: Number of write operations :param initial_memory: List of strings representing the initial memory content :param write_operations: List of tuples containing the write operations where each tuple consists of the string to replace and the replacement string :return: List of strings representing the final state of the memory memory = initial_memory[:] for old_str, new_str in write_operations: memory = [new_str if x == old_str else x for x in memory] return memory # Example usage: n = 5 m = 3 initial_memory = [\\"abc\\", \\"def\\", \\"ghi\\", \\"abc\\", \\"jkl\\"] write_operations = [(\\"abc\\", \\"pqr\\"), (\\"def\\", \\"stu\\"), (\\"ghi\\", \\"vwx\\")] print(simulate_memory_operations(n, m, initial_memory, write_operations))"},{"question":"In a certain country, there is a lottery game in which participants choose 6 distinct numbers from a set of 1 to 49. The lottery committee then randomly selects 6 distinct winning numbers from the same set. Write a program to calculate the number of matching numbers between a participant\'s ticket and the winning numbers, and display the result. Input The input consists of two lines: - The first line contains 6 distinct integers representing the participant\'s chosen numbers. - The second line contains 6 distinct integers representing the winning numbers. All numbers are between 1 and 49, inclusive. Output Output a single integer representing the number of matching numbers between the participant\'s ticket and the winning numbers. Examples Input 1 2 3 4 5 6 6 5 4 3 2 1 Output 6 Input 10 20 30 40 50 49 1 2 3 4 5 6 Output 0 Input 5 15 25 35 45 49 49 35 25 15 5 1 Output 5 Note In the first sample, all numbers match between the participant\'s ticket and the winning numbers. Thus, the output is 6. In the second sample, none of the numbers match between the participant\'s ticket and the winning numbers. Thus, the output is 0. In the third sample, five numbers match between the participant\'s ticket and the winning numbers. Thus, the output is 5.","solution":"def count_matching_numbers(participant_numbers, winning_numbers): Returns the number of matching numbers between participant\'s ticket and the winning numbers. :param participant_numbers: List of 6 distinct integers chosen by the participant :param winning_numbers: List of 6 distinct integers chosen as the winning numbers :return: Integer count of matching numbers participant_set = set(participant_numbers) winning_set = set(winning_numbers) matching_numbers = participant_set.intersection(winning_set) return len(matching_numbers)"},{"question":"Abhinav loves playing with strings and has recently come across a new problem. He calls it the \\"Balanced Parentheses Problem\\". A string is called balanced if it consists only of parentheses \'(\' and \')\' and each opening parenthesis has a corresponding closing parenthesis and the parentheses are correctly nested. For example, the string \\"()\\" is balanced, \\"(())\\" is balanced, but \\"(()\\" is not balanced and \\")(\\" is not balanced. Abhinav wants to help his friend Bhavesh test whether a given string of parentheses is balanced or not. Bhavesh will provide multiple strings and Abhinav should determine for each string whether it is balanced or not. Your task is to write a program that reads multiple strings and determines if each string is balanced. Input: - First line contains the number of test cases T. - The next T lines each contain a single string consisting of only \'(\' and \')\'. Output: For each test case, output \\"Balanced\\" if the string is balanced, and \\"Not Balanced\\" otherwise. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of each string ≤ 1000 SAMPLE INPUT 3 () ((())) (())) SAMPLE OUTPUT Balanced Balanced Not Balanced Explanation For the first test case, the string \\"()\\" is balanced because each \'(\' has a corresponding \')\'. For the second test case, the string \\"((()))\\" is balanced because each \'(\' has a corresponding \')\' and they are correctly nested. For the third test case, the string \\"(()))\\" is not balanced because there is an extra \')\' without a corresponding \'(\'.","solution":"def is_balanced_parentheses(s): Checks if the given string s containing only \'(\' and \')\' is balanced. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"Not Balanced\\" stack.pop() return \\"Balanced\\" if not stack else \\"Not Balanced\\" def balanced_parentheses(strings): Determines if each string in the list strings is balanced. results = [] for s in strings: results.append(is_balanced_parentheses(s)) return results # Example usage: # T = int(input()) # strings = [input().strip() for _ in range(T)] # results = balanced_parentheses(strings) # for result in results: # print(result)"},{"question":"You are given a string and a list of words. Determine if the string can be segmented into a space-separated sequence of one or more dictionary words. Return `YES` if it is possible, otherwise return `NO`. Constraints - The input string is non-empty and consists only of lowercase English letters. - All dictionary words are non-empty and consist only of lowercase English letters. - The maximum length of the input string is 1000. - The total number of dictionary words does not exceed 1000. - The length of each dictionary word does not exceed 100. Input The input is given in the following format: ``` s n word_1 word_2 ... word_n ``` - `s` is the string to be segmented. - `n` is the number of words in the dictionary. - `word_i` is the i-th word in the dictionary. Output Output `YES` if the string can be segmented into a space-separated sequence of one or more dictionary words. Otherwise, output `NO`. Examples Input ``` applepenapple 5 apple pen applepen pine pineapple ``` Output ``` YES ``` Input ``` catsandog 5 cats dog sand and cat ``` Output ``` NO ```","solution":"def can_segment_string(s, words): Determine if the string `s` can be segmented into a space-separated sequence of one or more dictionary words. word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\" # Example usage s = \\"applepenapple\\" words = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] print(can_segment_string(s, words)) # Output: YES s = \\"catsandog\\" words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] print(can_segment_string(s, words)) # Output: NO"},{"question":"Problem Statement: Alice is a passionate gardener and has a row of n plants in her garden. Each plant i (where 1 ≤ i ≤ n) has a certain height, represented as an integer in an array called heights. Alice wants to prune her garden according to the following rules: - She can choose exactly one pair of adjacent plants (i, i+1) and prune them such that their heights become exactly equal to the taller of the two. - She can perform this pruning operation at most k times. After pruning, Alice wants to know the maximum possible height of any plant in her garden. Write a program to calculate this maximum height after performing the pruning operations. Input Format: The input consists of two lines: - The first line contains two integers n and k, where n is the number of plants and k is the maximum number of pruning operations that Alice can perform. - The second line contains n integers, representing the array heights, where heights[i] is the height of the i-th plant. Constraints: - 1 ≤ n ≤ 100,000 - 1 ≤ heights[i] ≤ 10^9 - 0 ≤ k ≤ 100,000 Output Format: Output a single integer that represents the maximum possible height of any plant after at most k pruning operations. Example: Input: 7 3 4 5 3 7 6 4 8 Output: 8 Explanation: Alice can perform the following pruning operations: 1. Prune (4, 5) to (5, 5) 2. Prune (5, 3) to (5, 5) 3. Prune (6, 4) to (6, 6) The resulting heights would be [5, 5, 5, 7, 6, 6, 8] and the maximum height in this array is 8. Input: 5 2 1 2 3 4 5 Output: 5 Explanation: - Prune (1, 2) to (2, 2) - Prune (2, 3) to (3, 3) The resulting heights would be [2, 2, 3, 4, 5] and the maximum height is still 5 because further prunings won\'t affect the existing maximum height. Please write a program to solve this problem.","solution":"def maximum_height_after_pruning(n, k, heights): This function returns the maximum possible height of any plant after at most k pruning operations. if k == 0: return max(heights) pruning_operations = 0 for i in range(n - 1): if pruning_operations >= k: break if heights[i] < heights[i + 1]: heights[i] = heights[i + 1] pruning_operations += 1 return max(heights)"},{"question":"Alice has a string `s` of length `n` consisting of lowercase English letters. She wants to split `s` into several substrings such that each substring is a palindrome. Your task is to return the minimum number of cuts needed to achieve this. Input The input is given from Standard Input in the following format: > n text{s} - `n`: the length of the string (1 ≤ `n` ≤ 2,000) - `s`: the string consisting of lowercase English letters (1 ≤ |s| ≤ 2,000) Output Print the minimum number of cuts needed to split the string into palindrome substrings. Examples # Example 1 **Input:** ``` 4 abba ``` **Output:** ``` 0 ``` **Explanation:** The entire string \\"abba\\" is already a palindrome, so no cuts are needed. # Example 2 **Input:** ``` 5 abcba ``` **Output:** ``` 0 ``` **Explanation:** The entire string \\"abcba\\" is already a palindrome, so no cuts are needed. # Example 3 **Input:** ``` 3 abc ``` **Output:** ``` 2 ``` **Explanation:** The string \\"abc\\" can be cut into \\"a\\", \\"b\\", and \\"c\\", each being palindromes, so the number of cuts needed is 2. # Example 4 **Input:** ``` 6 abacbc ``` **Output:** ``` 1 ``` **Explanation:** The string \\"abacbc\\" can be cut into \\"aba\\" and \\"cbc\\", both being palindromes, so the number of cuts needed is 1. Constraints - The length of the string `n` is between 1 and 2,000 inclusive. - The string consists of only lowercase English letters from \'a\' to \'z\'.","solution":"def min_palindrome_cuts(n, s): if n == 0: return 0 is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True for length in range(2, n + 1): for start in range(n - length + 1): end = start + length - 1 if s[start] == s[end]: if length == 2: is_palindrome[start][end] = True else: is_palindrome[start][end] = is_palindrome[start + 1][end - 1] cuts = [0] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 else: cuts[i] = float(\'inf\') for j in range(i): if is_palindrome[j + 1][i]: cuts[i] = min(cuts[i], cuts[j] + 1) return cuts[-1]"},{"question":"A local gaming club has organized a tournament where participants play a series of games. Each game earns the participants a certain number of points. The club has decided to award prizes based on specific score thresholds. As the event coordinator, your task is to determine the number of prizes each participant will win based on their total score. Each participant\'s total score can earn multiple prizes if it reaches multiple thresholds. For example, if the thresholds are 5, 10, and 20 points, and a participant scores 25 points, they will earn prizes for reaching the 5-point threshold, the 10-point threshold, and the 20-point threshold. Input - The first line contains two integers `n` and `t` (1 ≤ n ≤ 1000, 1 ≤ t ≤ 50), where `n` is the number of participants and `t` is the number of score thresholds. - The second line contains `t` integers, representing the score thresholds in ascending order. - Each of the next `n` lines contains an integer, representing the total score of each participant. Output For each participant, print a single line with the number of prizes they will win based on their total score. Examples Input 3 3 5 10 20 7 15 23 Output 1 2 3 Input 2 4 10 20 30 40 25 35 Output 2 3 Explanation In the first example: - The first participant scored 7, which is above the 5-point threshold but not the 10-point threshold, so they will win 1 prize. - The second participant scored 15, which is above the 5 and 10-point thresholds, so they will win 2 prizes. - The third participant scored 23, which is above the 5, 10, and 20-point thresholds, so they will win 3 prizes. In the second example: - The first participant scored 25, which is above the 10 and 20-point thresholds, so they will win 2 prizes. - The second participant scored 35, which is above the 10, 20, and 30-point thresholds, so they will win 3 prizes.","solution":"def prizes_won(n, t, thresholds, scores): Determine the number of prizes each participant will win based on their total score. :param n: Number of participants :param t: Number of score thresholds :param thresholds: List of score thresholds in ascending order :param scores: List of scores for each participant :return: List of prizes won by each participant result = [] for score in scores: count = 0 for threshold in thresholds: if score >= threshold: count += 1 else: break result.append(count) return result"},{"question":"A company maintains a record of its employees\' number of completed projects in a list. To improve operational efficiency, they have decided to automate the management of these records, including the addition of new employees, updating project counts, and querying for specific employee information. You are tasked to help them with this project. You will implement a program that supports the following operations: 1. **Add an employee to the list**: - Format: `add employee_id project_count` - This operation adds a new employee with a unique `employee_id` and an initial `project_count`. It is guaranteed that `employee_id` is unique. 2. **Update project count**: - Format: `update employee_id new_project_count` - This operation updates the `project_count` for the specified `employee_id` to `new_project_count`. 3. **Query the project count**: - Format: `query employee_id` - This operation returns the current `project_count` for the specified `employee_id`. Your task is to implement the required operations and manage the employee records efficiently. Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of operations. The next `n` lines contain one operation each, as described above. `employee_id` and `project_count` are integers where `0 ≤ employee_id ≤ 1,000,000` and `0 ≤ project_count ≤ 10,000`. Output For each `query` operation, output the `project_count` for the specified `employee_id` on a new line. Example Input 10 add 100 5 add 101 3 query 100 update 100 10 query 100 query 101 add 102 7 update 101 6 query 101 query 102 Output 5 10 3 6 7","solution":"def employee_management(operations): This function processes a list of operations for managing employee project counts. Parameters: operations (list of str): A list of operation strings each of which is either \\"add employee_id project_count\\", \\"update employee_id new_project_count\\", or \\"query employee_id\\". Returns: list of int: A list of project counts for each query operation. records = {} result = [] for op in operations: parts = op.split() command = parts[0] employee_id = int(parts[1]) if command == \\"add\\": project_count = int(parts[2]) records[employee_id] = project_count elif command == \\"update\\": new_project_count = int(parts[2]) records[employee_id] = new_project_count elif command == \\"query\\": result.append(records[employee_id]) return result"},{"question":"You are given n cities and m direct routes between these cities. Each route connects two cities and has an associated distance. The cities are numbered from 1 to n. Your objective is to identify the shortest possible distance from a specific starting city to all other cities and output it. If a city is not reachable from the starting city, output -1 for that city. Input The first line contains three integers n, m, and s, separated by spaces — the number of cities, the number of direct routes, and the starting city respectively (1 ≤ s ≤ n, 1 ≤ n ≤ 100 000, 0 ≤ m ≤ 200 000). Each of the next m lines contains three integers u, v, and d, separated by spaces (1 ≤ u, v ≤ n, 0 ≤ d ≤ 10^4), denoting a route of distance d from city u to city v. Output Print n integers in a single line separated by space. The i-th integer should be the shortest distance from city s to city i. If city i is not reachable from city s, print -1. Examples Input 4 4 1 1 2 4 1 3 2 2 3 1 3 4 7 Output 0 4 2 9 Input 3 1 2 1 3 5 Output -1 0 -1 Note In the first test, the shortest distances from city 1 to all other cities are 0 (to itself), 4 (to city 2), 2 (to city 3), and 9 (to city 4). In the second test, there are no routes starting from the specified city. Hence, city 2 has distance 0 from itself, but cities 1 and 3 are not reachable, resulting in -1 for both.","solution":"import heapq def shortest_distances(n, m, s, routes): Given n cities and m direct routes, computes the shortest distances from city s to all other cities. Returns a list of n integers where the i-th integer is the shortest distance from city s to city i+1. If a city is not reachable from the starting city, the distance is -1. # Initialize the adjacency list for storing routes adjacency_list = [[] for _ in range(n)] # Fill the adjacency list with the given routes for u, v, d in routes: adjacency_list[u-1].append((d, v-1)) # Use Dijkstra\'s algorithm to find the shortest path distances = [float(\'inf\')] * n distances[s-1] = 0 min_heap = [(0, s-1)] while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > distances[u]: continue for weight, v in adjacency_list[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) # Convert distances to the desired format (replace \'inf\' with -1) return [dist if dist != float(\'inf\') else -1 for dist in distances]"},{"question":"You are given two non-negative integers, `a` and `b`. Petya is fascinated by the beauty of palindromic numbers. A number is called palindromic if it remains the same when its digits are reversed. Petya wants to know how many integers in the inclusive range [a, b] are palindromic. Write a function that takes two integers, `a` and `b`, and returns the count of palindromic numbers within this range. Input - The first line contains two space-separated integers, `a` and `b` (0 ≤ a ≤ b ≤ 10000). Output - Output a single integer, representing the number of palindromic numbers between `a` and `b` inclusive. Examples Input 1 10 Output 9 Input 100 200 Output 10 Input 10 20 Output 1 Note In the first sample, all numbers from 1 to 9 are palindromic. Since 10 is not palindromic, the total count is 9. In the second sample, the palindromic numbers between 100 and 200 are 101, 111, 121, 131, 141, 151, 161, 171, 181, and 191, giving a total of 10. In the third sample, the only palindromic number between 10 and 20 is 11.","solution":"def is_palindrome(n): Checks if the given number n is a palindrome. return str(n) == str(n)[::-1] def count_palindromic_numbers(a, b): Returns the count of palindromic numbers in the inclusive range [a, b]. count = 0 for num in range(a, b + 1): if is_palindrome(num): count += 1 return count"},{"question":"You are given a string and your task is to reverse the order of vowels in it without changing the position of consonants. The English vowel letters are \'a\', \'e\', \'i\', \'o\', \'u\', and they can appear in both uppercase and lowercase. Write a function `reverseVowels` that takes a string as an argument and returns the string with vowels reversed. # Input One single string `s` with a maximum length of 10^5. # Output A single string representing the input string with vowels reversed. # Constraints - The string will contain letters of the English alphabet and possibly other characters. # Example **Input:** ``` hello world leetcode programming ``` **Output:** ``` holle werld leotcede programming ``` # Explanation - For the input \\"hello\\", the vowels are \'e\' and \'o\'. Reversing them gives us \\"holle\\". - For the input \\"world\\", there is only one vowel \'o\', so the output remains \\"world\\". - For \\"leetcode\\", the vowels are \'e\', \'e\', \'o\', and \'e\'. Reversing them gives \\"leotcede\\". - For \\"programming\\", the vowels are \'o\' and \'a\'. Reversing them gives \\"programming\\" since reversing the two has no effect on their positioning. # Note Implement the solution in an optimal way, considering the constraints given.","solution":"def reverseVowels(s): Reverse the order of vowels in the input string without changing the position of consonants. Args: s (str): Input string. Returns: str: String with vowels reversed. vowels = \'aeiouAEIOU\' s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 elif s_list[right] not in vowels: right -= 1 else: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return \'\'.join(s_list)"},{"question":"In a distant land, there exists a peculiar type of chessboard with R rows and C columns, where each cell can either be empty or contain a knight. The knights are known for their unique movement pattern, moving in an L shape: two cells in one direction and one cell perpendicular, or vice versa. The goal is to strategically place the knights on the board such that no knight is able to attack another knight. The task is to determine the maximum number of knights that can be placed on the board without any two knights threatening each other. Input The first line contains an integer T, denoting the number of test cases. Each test case consists of a single line containing two integers R and C, denoting the number of rows and columns of the chessboard respectively. Output For each test case, output a single integer - the maximum number of knights that can be placed on the chessboard under the given conditions. Constraints 1 ≤ T ≤ 10 1 ≤ R, C ≤ 1000 Example Input: 3 1 1 2 2 3 3 Output: 1 2 5 Explanation Example case 1: With a 1x1 board, only one knight can be placed. Example case 2: On a 2x2 board, the optimal placement is two knights on a diagonal, such as one in the top left corner and one in the bottom right corner. Example case 3: For a 3x3 board, placing knights in positions that form an L shape ensures maximum placement without any knights attacking each other.","solution":"def max_knights(R, C): Returns the maximum number of knights that can be placed on a R x C chessboard without any two knights threatening each other. if R == 1 or C == 1: return R * C if R == 2 or C == 2: return (R * C + 1) // 2 return (R * C + 1) // 2 def solve(test_cases): results = [] for R, C in test_cases: results.append(max_knights(R, C)) return results # Reading and processing input def main(): T = int(input()) test_cases = [] for _ in range(T): R, C = map(int, input().split()) test_cases.append((R, C)) results = solve(test_cases) for result in results: print(result)"},{"question":"The city of Euclidean is set on a grid where each block is represented by a cell in a two-dimensional grid. The city has m rows and n columns, with coordinates ranging from (1, 1) in the northwest corner to (m, n) in the southeast corner. Each cell can either be empty (.) or have a building (B). The Mayor of Euclidean wants to build a new park in such a way that the park should cover a rectangular area and should not include any buildings. The park must have at least 1 cell in size. Due to budget constraints, the park should be as small as possible while still being rectangular and containing at least one empty cell. Your task is to write a program that finds the minimum size (number of cells) of the rectangular park that can be built under these constraints. Input The first line contains two integers m and n (1 ≤ m, n ≤ 50), the dimensions of the grid. Each of the following m lines contains n characters (\'.\' or \'B\') — the grid description where \'.\' represents an empty cell and \'B\' represents a building. Output Print a single integer — the minimum size of the rectangular park. Examples Input 4 5 ..... ..B.. ..... .B... Output 1 Input 3 4 BB.. B..B ..BB Output 1 Input 2 2 BB BB Output 0 Note In the first example, the smallest park that can be built is of size 1 (any of the \'.\' cells). In the second example, the smallest park that can be built is also of size 1 (a \'.\' cell at (3,1)). In the third example, the grid contains no empty cells (\'.\'). Therefore, it is impossible to build any park, and the function should return 0.","solution":"def find_minimum_park_size(m, n, grid): This function finds the minimum size (number of cells) of a rectangular park that can be built in the city grid under the given constraints. min_size = float(\'inf\') empty_found = False # Flag to check if there exist any empty cells for i in range(m): for j in range(n): if grid[i][j] == \'.\': min_size = 1 empty_found = True if not empty_found: return 0 return min_size"},{"question":"You are given a list of integers representing the heights of towers built in a straight line, numbered from left to right. A cannonball fired from the left against the towers hits the first tower greater than or equal to its height and stops there. If there is no such tower, the cannonball falls in the sea at the end without hitting any tower. Create a program to calculate the index of the first tower that hit by the cannonball and the height of the tower. If no tower is hit, print \\"The cannonball falls in the sea\\". The input will be the height of the cannonball followed by the number of towers n (1 ≤ n ≤ 100) and the heights of the towers (1 ≤ height ≤ 10^9). # Input The input is given in the following format: h n t1 t2 ... tn where h (1 ≤ h ≤ 10^9) is the height of the cannonball, n is the number of towers, and ti (1 ≤ ti ≤ 10^9) is the height of the i-th tower. # Output Print the index of the first tower hit by the cannonball and its height, or print \\"The cannonball falls in the sea\\" if no tower is hit. # Example Input 7 4 6 3 9 5 Output 3 9 Input 10 3 4 5 6 Output The cannonball falls in the sea","solution":"def find_first_hit(cannon_height, towers): Finds the index and height of the first tower hit by the cannonball. Parameters: cannon_height (int): Height of the cannonball. towers (list of int): Heights of the towers. Returns: A tuple (index, height) of the first tower hit or a string \\"The cannonball falls in the sea\\". for i, height in enumerate(towers): if height >= cannon_height: return i + 1, height return \\"The cannonball falls in the sea\\""},{"question":"You are given an array of integers. You can perform the following operation an unlimited number of times: - Choose any subarray (contiguous part) of the array, find the maximum element in this subarray, and remove this maximum element. Your task is to recursively perform these operations in such a way as to minimize the sum of all elements left in the array after you can\'t perform any more operations. Note: When you remove an element from the subarray, the remaining elements of the array retain their positions. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the array. Output Print one integer — the minimized sum of the remaining elements after performing the operations. Examples Input 5 3 2 5 1 4 Output 6 Input 4 -1 -2 -3 -4 Output -6","solution":"def minimize_sum_after_operations(n, arr): Minimize the sum of the array after recursively performing removal of max elements. Parameters: n (int): Number of elements in the array. arr (list of int): List of integers representing the array. Returns: int: Minimized sum of the remaining elements. # Since removing maximum elements of any arbitrary subarray doesn\'t change the order # and only affects the individual computation on the original array, we can directly # find the sum of non-positive elements in the array which represents the smallest # feasible sum. minimized_sum = sum(x for x in arr if x <= 0) return minimized_sum"},{"question":"A security guard is trying to inspect a linear row of safes placed in a bank corridor. There are N safes in a row, each containing an initial number of coins given by the array C. The guard can start inspecting from any safe, and he can only move to the next safe sequentially (i.e., from position i to i+1). However, due to security protocol, he must move through the safes in such a way that after inspecting a safe at position i, he can only move to the next safe at position i+1, and so forth till the end. The guard\'s objective is to collect as many coins as possible, but there is a constraint: he has a maximum capacity K, which limits the total number of coins he can carry at any point in time. The guard can choose to stop at any safe once the capacity K is reached or surpassed. Write a program to determine the maximum number of coins the guard can collect before he either surpasses his capacity K or reaches the end of the row. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ C_i ≤ 10^4 * 1 ≤ K ≤ 10^9 Input The input is given from Standard Input in the following format: N K C_1 C_2 ... C_N Output Print the maximum number of coins the guard can collect before surpassing his capacity. Examples Input 5 7 1 2 3 4 5 Output 6 Input 4 10 3 3 3 3 Output 9","solution":"def max_coins(N, K, C): Determines the maximum number of coins the guard can collect before surpassing his capacity. Args: N : int : number of safes K : int : maximum capacity of coins C : list : list of integers representing the number of coins in each safe Returns: int : the maximum number of coins the guard can collect collected_coins = 0 for i in range(N): if collected_coins + C[i] > K: break collected_coins += C[i] return collected_coins"},{"question":"A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"A man, a plan, a canal, Panama!\\" is considered a palindrome, despite its spaces, punctuation, and capital letters. You are tasked to write a function to determine if a given string (phrase) is a palindrome. If the given string is a palindrome, the function should return `true`; otherwise, it should return `false`. **Input:** - A single line string, S. **Output:** - A boolean value `true` or `false`. **Constraints:** - The length of input string S is between 1 and 1000 characters. - The input will not include any special characters except spaces which should be ignored when checking for palindrome. **Examples:** **Example 1:** Input: \\"A man a plan a canal Panama\\" Output: true **Example 2:** Input: \\"race a car\\" Output: false **Example 3:** Input: \\"Was it a car or a cat I saw\\" Output: true **Example 4:** Input: \\"No lemon, no melon\\" Output: true **Function Signature:** ```python def is_palindrome(S: str) -> bool: # Your code here ```","solution":"def is_palindrome(S: str) -> bool: Determines if a given string (phrase) is a palindrome. :param S: A single line string :return: True if the string is a palindrome, False otherwise # Normalize the string: convert to lowercase and remove non-alphanumeric characters. normalized_str = \'\'.join(char.lower() for char in S if char.isalnum()) # Check if the normalized string is equal to its reverse. return normalized_str == normalized_str[::-1]"},{"question":"Given an array `arr` of `n` integers where each element is within the range from `1` to `n`, some elements appear multiple times while some elements are missing. Create a function to identify all missing numbers in the array. # Task Implement the function `find_missing_numbers(arr: List[int]) -> List[int]` that processes the given array `arr` and returns a list of the missing integers in ascending order. # Example **Input:** ```python arr = [4, 3, 2, 7, 8, 2, 3, 1] ``` **Output:** ```python [5, 6] ``` **Input:** ```python arr = [1, 1] ``` **Output:** ```python [2] ``` # Constraints - The length of array `arr` will be in the range [1, 100,000]. - Each value in `arr` will be within the range [1, n]. # Note - Your algorithm should run in O(n) time complexity and use only constant extra space.","solution":"def find_missing_numbers(arr): Finds all the missing numbers in the array where each element is within the range from 1 to n (length of the array). Args: arr (List[int]): The input array of integers. Returns: List[int]: The list of missing integers in ascending order. n = len(arr) # Use the array itself to mark the presence of elements for num in arr: abs_num = abs(num) if arr[abs_num - 1] > 0: arr[abs_num - 1] = -arr[abs_num - 1] # Collect all the indices which have positive values missing_numbers = [i + 1 for i in range(n) if arr[i] > 0] return missing_numbers"},{"question":"Statue Guard is tasked with protecting the magical statues in the kingdom. Each statue has a certain power level, and the statues are arranged in a circle. Due to a strange curse, Statue Guard needs to break the circle and select statues in pairs to maintain balance. If two statues have a combined power that is a multiple of a given number K, they can protect the kingdom together. The task is to count the number of pairs of statues, where the sum of their power levels is a multiple of the given number K. Input format: On the first line of input, there is an integer, T, which denotes the number of test cases. For every test case, the first line contains two integers N and K, denoting the number of statues and the specific number K respectively. On the following line, there are N integers representing the power levels of the statues. Output format: For each test case, output the number of valid pairs. Constraints: 1 ≤ Test Cases ≤ 50 1 ≤ Number of statues ≤ 10^3 1 ≤ Power level of each statue, Pi ≤ 10^5 1 ≤ K ≤ 10^5 SAMPLE INPUT 3 3 5 1 2 3 4 2 2 4 6 8 5 3 3 6 9 12 15 SAMPLE OUTPUT 2 6 10 Explanation In the first case, pairs (1, 4) and (2, 3) have combined power levels that are multiples of 5. In the second case, all pairs (2, 4), (2, 6), (2, 8), (4, 6), (4, 8), and (6, 8) have combined power levels that are multiples of 2. In the third case, all pairs (3, 6), (3, 9), (3, 12), (3, 15), (6, 9), (6, 12), (6, 15), (9, 12), (9, 15), and (12, 15) have combined power levels that are multiples of 3.","solution":"def count_valid_pairs(t, test_cases): results = [] for test_case in test_cases: n, k = test_case[0] power_levels = test_case[1] count = 0 for i in range(n): for j in range(i + 1, n): if (power_levels[i] + power_levels[j]) % k == 0: count += 1 results.append(count) return results # Example usage t = 3 test_cases = [ [(3, 5), [1, 2, 3]], [(4, 2), [2, 4, 6, 8]], [(5, 3), [3, 6, 9, 12, 15]] ] print(count_valid_pairs(t, test_cases))"},{"question":"Given a list of flights where each flight is represented as (source_city, destination_city) and a starting city, find all the cities that are reachable from the starting city using any number of flights. You should consider direct as well as indirect flights. Constraints * 1 ≤ number of cities ≤ 1000 * 1 ≤ number of flights ≤ 5000 Input - The first line contains two integers N (number of cities) and M (number of flights). - Each of the next M lines contains two strings indicating a direct flight from the source city to the destination city. - The last line contains a string representing the starting city. Output Print the list of reachable cities sorted in alphabetical order. Example Input 5 6 A B A C B D C D D E F G A Output B C D E","solution":"def find_reachable_cities(N, M, flights, starting_city): from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for src, dest in flights: graph[src].append(dest) # Perform BFS to find all reachable cities reachable_cities = set() queue = deque([starting_city]) while queue: city = queue.popleft() for neighbor in graph[city]: if neighbor not in reachable_cities: reachable_cities.add(neighbor) queue.append(neighbor) return sorted(reachable_cities)"},{"question":"Given an array of n integers, transform it into a prefix sum array. You are asked to perform several transformations to make the array a prefix sum array where each integer at position i (for 1 <= i <= n) is the sum of the integers from the original array up to position i. The allowed transformation is to add any integer to any element of the array. Input The first line contains one integer n (1 ≤ n ≤ 100 000): the number of elements of the array. The second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output Print a list of n integers representing the transformed array that is a prefix sum array with a minimum number of transformations. Example Input 5 1 2 3 4 5 Output 1 3 6 10 15","solution":"def prefix_sum_array(arr): Converts the given array into a prefix sum array. Each element in the resulting array is the sum of all elements up to and including that position in the original array. prefix_sum = [] current_sum = 0 for num in arr: current_sum += num prefix_sum.append(current_sum) return prefix_sum"},{"question":"You are given two strings `s1` and `s2`. Write a function `common_characters(s1, s2)` that returns a string containing the common characters between `s1` and `s2` in the order they appear in `s1`. Each character in the result should appear as many times as it appears in both strings. # Input Two strings `s1` and `s2`, where the length of each string is at least 1 and no more than 1000 characters. Both strings contain only lowercase alphabetical characters. # Output A string with characters common to both `s1` and `s2`. # Example Example 1 Input: ``` s1: \\"abcdef\\" s2: \\"defxyz\\" ``` Output: ``` \\"def\\" ``` Example 2 Input: ``` s1: \\"abacadabra\\" s2: \\"abracadabra\\" ``` Output: ``` \\"abacadabra\\" ``` # Constraints - The function should handle strings up to a length of 1000 efficiently. - Each character in the result should appear as many times as it appears in both strings. - The characters in the result should appear in the order they appear in `s1`.","solution":"def common_characters(s1, s2): from collections import Counter counter1 = Counter(s1) counter2 = Counter(s2) common_chars = [] for char in s1: if char in counter2 and counter1[char] > 0 and counter2[char] > 0: common_chars.append(char) counter1[char] -= 1 counter2[char] -= 1 return \'\'.join(common_chars)"},{"question":"You are given an array of integers representing the elevation of a mountain range. Your task is to identify the length of the longest \\"mountain\\" in the array. A mountain is defined as a subarray that has at least three elements and satisfies the following properties: - There exists some peak element `arr[k]` such that `arr[0] < arr[1] < ... < arr[k-1] < arr[k] > arr[k+1] > ... > arr[N-2] > arr[N-1]`. - The subarray must be strictly increasing up to the peak element and then strictly decreasing after the peak element. Write a function that takes an array of integers and returns the length of the longest mountain. If there is no such subarray, return 0. Function Signature: `def longest_mountain(arr: List[int]) -> int` # Input - An array of integers `arr` where `1 <= len(arr) <= 3 * 10^4`. # Output - An integer representing the length of the longest mountain subarray. If no such subarray exists, return 0. # Examples Example 1 Input: ``` [2, 1, 4, 7, 3, 2, 5] ``` Output: ``` 5 ``` Explanation: The longest mountain is [1, 4, 7, 3, 2] which has a length of 5. Example 2 Input: ``` [2, 2, 2] ``` Output: ``` 0 ``` Explanation: There are no mountains in the array. Example 3 Input: ``` [9, 8, 7, 6, 5, 4, 3, 2, 1, 2] ``` Output: ``` 0 ``` Explanation: There are no mountains in the array. # Constraints - The provided array will always have at least one integer. - The input array can be strictly increasing, strictly decreasing, all elements can be the same, or any random combination.","solution":"from typing import List def longest_mountain(arr: List[int]) -> int: n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 right = i + 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"In a large forest, there are trees planted in a straight line at different positions. Each tree has a certain number of ripe fruits on it. You have a basket that can carry at most k fruits, and you want to pick fruits from the trees to maximize the total number of fruits you collect. The catch is that once you start collecting fruits from a tree, you are only allowed to move to adjacent trees (i.e., directly to the left or right of the current tree) to pick more fruits. You start collecting fruits from any tree you choose. Can you determine the maximum number of fruits you can collect? Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5) — the number of trees and the maximum number of fruits the basket can carry. The second line contains n integers f_1, f_2, …, f_n (0 ≤ f_i ≤ 10^4) — the number of fruits on each tree. Output Output a single integer — the maximum number of fruits you can collect. Examples Input 6 10 1 3 2 5 3 4 Output 10 Input 4 7 4 1 2 6 Output 7 Note In the first example, you can start at the fourth tree (which has 5 fruits), then move to the fifth tree (and collect 3), and finally to the sixth tree (and collect 2 more) to carry a total of 10 fruits. In the second example, you can start at the fourth tree and take all 6 fruits, then move to any other tree and collect up to one more fruit to reach the basket\'s limit of 7.","solution":"def max_fruits(n, k, fruits): max_sum = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += fruits[j] if current_sum > k: break max_sum = max(max_sum, current_sum) return max_sum # Example usage print(max_fruits(6, 10, [1, 3, 2, 5, 3, 4])) # Output: 10 print(max_fruits(4, 7, [4, 1, 2, 6])) # Output: 7"},{"question":"Implement a program that takes a positive integer n as input and generates the first n terms of the Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. In other words, the sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, ... Your program should output the first n terms of this sequence, each on a new line. **Input:** A single integer n (1 <= n <= 50), the number of terms to generate. **Output:** The first n terms of the Fibonacci sequence, each value on a new line. **Example:** Input: ``` 5 ``` Output: ``` 0 1 1 2 3 ``` Input: ``` 10 ``` Output: ``` 0 1 1 2 3 5 8 13 21 34 ``` Your task is to write a function `generate_fibonacci(n)` that takes the input n and prints the first n terms of the Fibonacci sequence.","solution":"def generate_fibonacci(n): Generates the first n terms of the Fibonacci sequence. :param int n: Number of terms to generate (1 <= n <= 50) :return: List containing the first n terms of the Fibonacci sequence :rtype: list if n <= 0: return [] if n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Given a set of N words, you need to form the longest possible sentence such that no two adjacent words in the sentence start with the same letter. You are required to output the longest sentence and its length. Input The first line contains an integer N (1 ≤ N ≤ 1000), the number of words in the set. The next N lines contain one word each. Each word w consists of between 1 and 100 lowercase English letters. Output A single line containing the longest possible sentence and its length. If there are multiple sentences of the longest length, any of them is a valid output. Examples Input 7 apple banana cherry date elderberry fig grape Output apple banana cherry date elderberry fig grape 7 Input 3 cat dog elephant Output cat dog elephant 3 Input 4 ant bat cat dog Output ant bat cat dog 4 Note In the first example, any sentence where no two adjacent words start with the same letter is valid. For instance, \\"banana apple cherry date elderberry fig grape\\" is also a valid output. In the second example, the sentence \\"cat dog elephant\\" uses all the words satisfying the condition. In the third example, since no two adjacent words start with the same letter, the sentence can place all the words from the input with a total count of 4.","solution":"def longest_sentence(N, words): from collections import defaultdict import itertools def is_valid_sentence(sentence): for i in range(1, len(sentence)): if sentence[i][0] == sentence[i-1][0]: return False return True word_groups = defaultdict(list) for word in words: word_groups[word[0]].append(word) all_words = list(itertools.chain(*word_groups.values())) max_sentence_length = 0 max_sentence = [] for perm in itertools.permutations(all_words): perm = list(perm) if is_valid_sentence(perm): if len(perm) > max_sentence_length: max_sentence_length = len(perm) max_sentence = perm return \\" \\".join(max_sentence) + \\" \\" + str(max_sentence_length)"},{"question":"A new theme park is opening soon, and it features a thrilling roller coaster ride that takes passengers on a complex journey through multiple loops and twists. The ride is represented as a graph with `n` nodes (stations) and `m` directed edges (tracks between the stations). Each edge has a length indicating the time it takes to travel from one station to another. During their planning, the park engineers discovered a fascinating property of the roller coaster: starting from the entrance station (node 1), any station can be reached using exactly one of the shortest paths. But they have to make sure of this property. Your task is to determine how many distinct shortest paths exist from the entrance station (node 1) to each of the other stations. The goal is to verify if the roller coaster adheres to the unique shortest path property for each station. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 5·10^5) — the number of stations and the number of tracks. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^3) — representing a directed track from station `u` to station `v` with a length of `w`. Output Output `YES` if each station other than the entrance (node 1) is reachable by exactly one shortest path from the entrance. Otherwise, output `NO`. Examples Input 4 4 1 2 1 2 3 2 1 3 2 3 4 1 Output YES Input 5 6 1 2 3 2 3 4 1 3 7 3 4 1 4 5 2 3 5 3 Output NO Note In the first example, there\'s only one shortest path from station 1 to each of the other stations: - From 1 to 2: [1 -> 2] - From 1 to 3: [1 -> 3] - From 1 to 4: [1 -> 3 -> 4] In the second example, there are multiple shortest paths from station 1 to station 5: - From 1 to 2 -> 3 -> 5 - From 1 to 3 -> 5 Thus, the answer is \\"NO\\".","solution":"import heapq import collections def verify_unique_shortest_paths(n, m, edges): graph = collections.defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distances = [float(\'inf\')] * (n + 1) path_count = [0] * (n + 1) distances[1] = 0 path_count[1] = 1 min_heap = [(0, 1)] while min_heap: curr_dist, u = heapq.heappop(min_heap) if curr_dist > distances[u]: continue for v, weight in graph[u]: distance = curr_dist + weight if distance < distances[v]: distances[v] = distance path_count[v] = path_count[u] heapq.heappush(min_heap, (distance, v)) elif distance == distances[v]: path_count[v] += path_count[u] for i in range(2, n + 1): if path_count[i] != 1: return \\"NO\\" return \\"YES\\""},{"question":"VK\'s second HQ in St. Petersburg has a very strict energy-saving policy. As part of this policy, the office lights are controlled by a central computer system that turns off lights in various rooms after a certain period of inactivity. Each room has its own activity log stored as a string where each character represents a minute of the day, with \'O\' indicating the light was ON and \'F\' indicating the light was OFF. The central computer system needs to determine the maximum number of consecutive minutes the light was OFF in any room. If there are no \'F\' minutes recorded, the maximum number of consecutive OFF minutes is zero for that room. # Input - The first input line contains an integer n (1 ≤ n ≤ 1000), the number of rooms. - The next n lines each contain a string consisting of characters \'O\' and \'F\' representing the daily activity log for each room. # Output - Output a single integer which is the maximum number of consecutive OFF minutes across all rooms. # Examples Input ``` 3 OFFFOOOOFFOOOO FOFO OOFFFOO ``` Output ``` 4 ``` Input ``` 2 OOOOOO FFFFFF ``` Output ``` 6 ``` # Explanation For the first example: - Room 1 has the sequence \\"OFFFOOOOFFOOOO\\", with the maximum consecutive \'F\' minutes being 3. - Room 2 has the sequence \\"FOFO\\", with the maximum consecutive \'F\' minutes being 1. - Room 3 has the sequence \\"OOFFFOO\\", with the maximum consecutive \'F\' minutes being 3. Thus, the maximum number of consecutive OFF minutes across all rooms is 4.","solution":"def max_off_minutes(n, logs): Returns the maximum number of consecutive OFF minutes \'F\' in any room. Args: n (int): The number of rooms. logs (list of str): List of activity logs for each room. Returns: int: The maximum number of consecutive \'F\' minutes. max_consec_off = 0 for log in logs: current_consec_off = 0 for char in log: if char == \'F\': current_consec_off += 1 max_consec_off = max(max_consec_off, current_consec_off) else: current_consec_off = 0 return max_consec_off"},{"question":"You are managing a storage warehouse and need to keep track of the inventory. The warehouse has different types of items, and each type has a different quantity available. You need to implement a function that determines if you can fulfill an order for a list of items required by a customer. Each item type has a unique identifier and a required quantity. You will be given the current inventory and a list of items with their quantities that the customer wants to order. Your task is to check if the order can be fulfilled with the current inventory. Constraints * All identifiers in input are integers. * 1 leq number of different item types leq 100 * 1 leq item identifier leq 1000 * 1 leq item quantity leq 100 Input Input is given from Standard Input in the following format: - The first line contains an integer n, the number of different item types in inventory. - The next n lines, each contain two integers, the item identifier and the available quantity of that item type. - The following line contains an integer m, the number of different item types in the customer\'s order. - The next m lines, each contain two integers, the item identifier and the required quantity of that item type. Output Print \\"Yes\\" if the order can be fulfilled, otherwise print \\"No\\". Example Input 3 1 10 2 5 3 7 2 1 5 2 5 Output Yes Input 3 1 8 2 6 3 3 2 1 9 3 2 Output No","solution":"def can_fulfill_order(n, inventory, m, order): Determine if the order can be fulfilled with the current inventory. :param n: int - number of different item types in inventory (1 <= n <= 100) :param inventory: list of tuples - each tuple contains an integer (item id) and the available quantity :param m: int - number of different item types in the customer\'s order (1 <= m <= 100) :param order: list of tuples - each tuple contains an integer (item id) and the required quantity :return: str - \\"Yes\\" if the order can be fulfilled, otherwise \\"No\\" inventory_dict = dict(inventory) for item_id, required_quantity in order: if item_id not in inventory_dict or inventory_dict[item_id] < required_quantity: return \\"No\\" return \\"Yes\\""},{"question":"You are tasked with writing a function that takes an integer n and generates a list of its divisors (excluding 1 and n), sorted in ascending order. Function Signature: ```python def divisors(n: int) -> list: pass ``` Example: ```python Input: 12 Output: [2, 3, 4, 6] Input: 25 Output: [5] Input: 13 Output: [] Input: 30 Output: [2, 3, 5, 6, 10, 15] ``` **Constraints:** - 1 ≤ n ≤ 10^6 Note: If the number is prime, the function should return an empty list.","solution":"def divisors(n: int) -> list: Returns the list of divisors of n (excluding 1 and n), sorted in ascending order. result = [i for i in range(2, n) if n % i == 0] return result"},{"question":"Given an array of n integers, your task is to determine the minimum number of operations needed to make all elements equal. You can only perform the following operation: choose any non-negative integer x, and add it to some subset of the array. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100) — the array elements. Output Print a single integer — the minimum number of operations needed to make all elements in the array equal. Examples Input 4 1 2 3 4 Output 3 Input 3 2 2 2 Output 0 Input 5 3 6 9 12 15 Output 4 Note In the first sample, you can choose the following operations to make all elements equal: - Add 1 to the subset [1, 2, 3, 4] -> [2, 3, 4, 5] - Add 1 to the subset [2, 3, 4, 5] -> [3, 4, 5, 6] - Add 1 to the subset [3, 4, 5, 6] -> [4, 5, 6, 7] After these operations, all elements will be equal to 7. In the second sample, all elements are already equal, so no operations are needed. In the third sample, you can choose the following operations to make all elements equal: - Add 3 to the subset [3, 6, 9, 12, 15] -> [6, 9, 12, 15, 18] - Add 3 to the subset [6, 9, 12, 15, 18] -> [9, 12, 15, 18, 21] - Add 3 to the subset [9, 12, 15, 18, 21] -> [12, 15, 18, 21, 24] - Add 3 to the subset [12, 15, 18, 21, 24] -> [15, 18, 21, 24, 27] After these operations, all elements will be equal to 27.","solution":"def min_operations_to_equal_elements(n, arr): Determines the minimum number of operations needed to make all elements in the array equal. The allowed operation is to choose any non-negative integer x and add it to any subset of the array. Parameters: n (int): The number of elements in the array arr (list of int): The list of integers representing the array Returns: int: The minimum number of operations needed to make all elements equal if n == 1: return 0 unique_elements = set(arr) return len(unique_elements) - 1"},{"question":"You are given an array of integers representing the amount of money of each house arranged in a street. Calculate the maximum amount of money you can rob tonight without alerting the police, given that you cannot rob two consecutive houses. # Input - An integer array, `nums`, where `nums[i]` is the amount of money in the `i`-th house. # Output - An integer representing the maximum amount of money you can rob without robbing two consecutive houses. # Example Input: ``` [2, 7, 9, 3, 1] ``` Output: ``` 12 ``` # Explanation: In this example, you can rob the 1st, 3rd, and 5th houses (2 + 9 + 1), which will give you a total of 12 units of money.","solution":"def rob(nums): Returns the maximum amount of money you can rob tonight without alerting the police. :param nums: List of integers representing amount of money at each house. :return: Integer representing maximum amount of money that can be robbed. if not nums: return 0 if len(nums) == 1: return nums[0] n = len(nums) dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"In a computer network, there are N computers connected through M cables. Each cable connects two computers and has a certain latency associated with it. The computers are labeled from 1 to N. Given the network with the latencies of the cables, you are required to find the minimum total latency required to connect all computers in the network (i.e., find the Minimum Spanning Tree of the network). Input The first line contains two integers N and M, representing the number of computers and the number of cables, respectively. The next M lines each contain three integers u, v, and w, representing a cable connecting computer u to computer v with latency w. 1 <= N <= 1000 1 <= M <= 1000 1 <= u, v <= N 1 <= w <= 100000 Output Output a single integer, the minimum total latency to connect all computers in the network. If it is not possible to connect all computers, output -1. Example Input: 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 Output: 6","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 edge_count = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 x = find_parent(parent, u) y = find_parent(parent, v) if x != y: edge_count += 1 mst_weight += w union(parent, rank, x, y) if edge_count == n - 1: break if edge_count != n - 1: return -1 return mst_weight def minimum_latency(N, M, cables): return kruskal(N, cables)"},{"question":"In an alien language, they use a variety of symbols ranging from the English alphabets (both uppercase and lowercase) to a set of unique symbols (like \'@\', \'#\', \'\', \'%\', \'&\' etc.) for communication. Each character has an alien weight assigned to it. The alien weights for English characters are given by their order in the alphabet (A=1, B=2, ..., Z=26, a=27, b=28, ..., z=52). For the unique symbols, weights are provided in a separate mapping. Given an alien message and a weight mapping for the unique symbols, determine the total weight of the message. Here\'s an example of the weight mapping for the symbols: @=53, #=54, =55, %=56, &=57 # Input - The first line contains an integer `t` (1 ≤ t ≤ 10^5) - the number of test cases. - Each test case consists of a single string `s` (1 ≤ |s| ≤ 100) - the alien message. - Unique symbols are limited to the predefined set and will not contain any characters outside the English alphabets and this set. # Output - For each test case, output a single integer on a new line - the total weight of the message. # Example Input 4 Hello a1ien language! AbC@1 # Output 52 757 82 220 # Explanation 1. \\"Hello\\" consists of H=8, e=31, l=38, l=38, o=41, so the total weight is 8+31+38+38+41 = 156. 2. \\"a1ien language!\\" has \'a\'=27, \'i\'=35, \'e\'=31, \'n\'=40, \'\'=55, \'l\'=38, \'a\'=27, \'n\'=40, \'g\'=33, \'u\'=47, \'a\'=27, \'g\'=33, \'e\'=31, giving total weight 27+35+31+40+55+.....+31 = 475. 3. \\"AbC@1\\" has A=1, b=28, C=3, @=53, giving total weight 1+28+3+53 = 85. 4. \\"#\\" consists of three \'\' = 55 each and one \'#\' = 54, total weight = 55+55+55+54 = 219. **Note**: For symbols not included in the weight mapping (for example, digits), they will be ignored in the calculation.","solution":"def alien_message_weight(message, symbol_weights): Calculate the total weight of the alien message based on the given weight mapping. Parameters: message (str): The alien message string. symbol_weights (dict): The weight mapping for unique symbols. Returns: int: The total weight of the message. total_weight = 0 for char in message: if \'A\' <= char <= \'Z\': total_weight += ord(char) - ord(\'A\') + 1 elif \'a\' <= char <= \'z\': total_weight += ord(char) - ord(\'a\') + 27 elif char in symbol_weights: total_weight += symbol_weights[char] return total_weight # Predefined symbol weights symbol_weights = { \'@\': 53, \'#\': 54, \'\': 55, \'%\': 56, \'&\': 57 } def process_test_cases(test_cases, symbol_weights): Process multiple test cases to compute the weight of each message. Parameters: test_cases (list): List of test case strings. symbol_weights (dict): The weight mapping for unique symbols. Returns: list: List of integers representing the total weights for each message. results = [] for case in test_cases: results.append(alien_message_weight(case, symbol_weights)) return results"},{"question":"Polycarp loves trees and has invented his own way of representing and traversing them. A binary tree is represented by a string s consisting of characters \'0\' and \'1\'. For this problem, \'1\' represents a node of the tree, and \'0\' represents a null pointer. The binary tree given by the string is traversed in level-order (breadth-first) to construct the sequence. Your task is to determine the level-order traversal sequence of the binary tree represented by the string. The input string is guaranteed to represent a valid binary tree. # Task Given a string s representing a binary tree, determine the level-order traversal sequence of the tree and print it as a space-separated sequence of \'1\'s and \'0\'s. # Input The only line of the input contains s — the string representation of a binary tree. It contains only characters \'0\' and \'1\'. The length of s is between 1 and 1000, inclusive. # Output Print the level-order traversal sequence of the binary tree as a space-separated string of \'1\'s and \'0\'s. # Examples Input ``` 110100 ``` Output ``` 1 1 0 1 0 0 ``` Input ``` 100 ``` Output ``` 1 0 0 ``` Input ``` 1 ``` Output ``` 1 ```","solution":"def level_order_traversal(binary_tree_str): Given the string representation of a binary tree in level-order (breadth-first) form, returns the same string as a space-separated sequence. # Since the input string is already in level-order, # we simply return it as a space-separated sequence of characters. return \' \'.join(binary_tree_str)"},{"question":"Given a binary tree, you need to write a function to determine if it is a symmetric tree (i.e., a mirror of itself around its center). A binary tree is defined by its root node which contains: - `val`: An integer value. - `left`: A reference to its left child node. - `right`: A reference to its right child node. For example, the following binary tree is symmetric: ``` 1 / 2 2 / / 3 4 4 3 ``` However, the following binary tree is not symmetric: ``` 1 / 2 2 3 3 ``` **Input:** - The function should take the root node of the binary tree as input. **Output:** - The function should return `true` if the tree is symmetric, and `false` otherwise. **Function Signature:** ```python def is_symmetric(root: TreeNode) -> bool: ``` **Constraints:** - The number of nodes in the binary tree is in the range `[1, 1000]`. - `-100 <= Node.val <= 100` You may use the following definition for the binary tree node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Example:** ```python # Example 1 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.left = TreeNode(3) root.left.right = TreeNode(4) root.right.left = TreeNode(4) root.right.right = TreeNode(3) assert is_symmetric(root) == True # Example 2 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.right = TreeNode(3) root.right.right = TreeNode(3) assert is_symmetric(root) == False ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root: TreeNode) -> bool: def is_mirror(left: TreeNode, right: TreeNode) -> bool: if not left and not right: return True if not left or not right: return False return (left.val == right.val and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)) if not root: return True return is_mirror(root.left, root.right)"},{"question":"Write a program that reads a string P which represents a polynomial of the form \\"a_n x^n + a_{n-1} x^{n-1} + ... + a_1 x + a_0\\" and a value x. The program should compute the value of the polynomial for the given x. Constraints * The polynomial P will only contain coefficients and powers of x separated by \\"+\\" or \\"-\\". * The coefficients a_i will be integers. * The value of x is also an integer. * The maximum degree of the polynomial n will be at most 10. Input The first line contains the polynomial P. The second line contains the integer value x. Output Print the computed value of the polynomial when evaluated at x. Example Input 2x^3 + 3x^2 - x + 4 2 Output 30","solution":"import re def evaluate_polynomial(polynomial, x): Evaluates the polynomial P at a given value x. :param polynomial: A string representing the polynomial. :param x: An integer value at which to evaluate the polynomial. :return: The evaluated result as an integer. # Remove spaces and handle signs, insert + for easier splitting poly = polynomial.replace(\' \', \'\').replace(\'-\', \'+-\') # Split based on \'+\' terms = poly.split(\'+\') result = 0 term_pattern = re.compile(r\'([+-]?d*)x?(^(d+))?\') for term in terms: if term: match = term_pattern.match(term) coefficient_str, _, exponent_str = match.groups() coefficient = int(coefficient_str) if coefficient_str and coefficient_str != \'+\' and coefficient_str != \'-\' else (1 if coefficient_str == \'+\' or coefficient_str == \'\' else -1) exponent = int(exponent_str) if exponent_str else (1 if \'x\' in term else 0) result += coefficient * (x ** exponent) return result"},{"question":"A board game involves moving a token across a board composed of a grid of cells. The board is an n x m grid (with rows labeled from 1 to n and columns labeled from 1 to m). The token starts at the top-left corner (cell (1, 1)) and needs to reach the bottom-right corner (cell (n, m)) by moving strictly right or down. However, certain cells are blocked and cannot be passed. Your task is to determine if there is a way for the token to reach the bottom-right corner from the top-left corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the board. The next n lines each contain m characters, each being either \'.\' (representing an open cell) or \'#\' (representing a blocked cell). Output Print \\"YES\\" if there is a way to reach the bottom-right corner from the top-left corner, otherwise print \\"NO\\". Examples Input 4 4 .... .#.. ..#. .... Output YES Input 3 3 ..# .#. . Output NO Note In the first example, the token can move as follows: down, down, right, right, down, right. In the second example, there is no possible path for the token to reach the bottom-right corner.","solution":"def can_reach_end(n, m, board): Determine if there\'s a way to reach the bottom-right corner from the top-left corner. :param n: Number of rows :param m: Number of columns :param board: List of strings representing the board :return: \\"YES\\" if there\'s a way to reach the bottom-right corner, \\"NO\\" otherwise from collections import deque if board[0][0] == \'#\' or board[n-1][m-1] == \'#\': return \\"NO\\" directions = [(0, 1), (1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and board[nx][ny] == \'.\': queue.append((nx, ny)) visited[nx][ny] = True return \\"NO\\""},{"question":"You are given a list of integers `A` of size `N`. Your task is to determine whether it is possible to rearrange the elements of list `A` in such a way that the difference between any two adjacent elements is not greater than a given integer `D`. Write a program that prints `Possible` if such a rearrangement exists, and prints `Impossible` otherwise. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ A[i] ≤ 10000 * 1 ≤ D ≤ 10000 Input Input is given from Standard Input in the following format: ``` N D A1 A2 ... AN ``` Output Print `Possible` if it\'s feasible to rearrange the elements of list `A` such that the difference between any two adjacent elements is no greater than `D`, and `Impossible` otherwise. Examples Input ``` 5 3 1 5 3 8 5 ``` Output ``` Possible ``` Input ``` 4 1 1 5 3 8 ``` Output ``` Impossible ```","solution":"def is_rearrangement_possible(N, D, A): Determines whether it\'s possible to rearrange list A such that the difference between any two adjacent elements is not greater than D. Parameters: N (int): The number of elements in the list. D (int): The maximum allowed difference between any two adjacent elements. A (list of int): The list of integers. Returns: str: \'Possible\' if rearrangement is possible, \'Impossible\' otherwise. A.sort() for i in range(1, N): if A[i] - A[i-1] > D: return \'Impossible\' return \'Possible\'"},{"question":"The Watchtower Problem In a far-off kingdom, there is a network of watchtowers connected by roads. The kingdom needs to set up a new defense strategy in order to maximize the visibility of these watchtowers. Each watchtower must be able to communicate with others in the network, but no two watchtowers should be able to directly communicate if they are on the same defensive line. To implement this strategy, the kingdom needs your help to partition the watchtowers into distinct defensive lines. Problem Statement: Given a number of watchtowers and the roads connecting them as a graph, partition the vertices into two sets such that no two watchtowers in the same set are directly connected by a road. Input: The first line of input contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2 ⋅ 10^5) - the number of watchtowers and the number of roads, respectively. The next m lines describe the roads in the format u v (1 ≤ u, v ≤ n, u ≠ v), which denotes a road between watchtower u and watchtower v. Output: Output \\"YES\\" if it is possible to partition the watchtowers into two sets. If possible, print the two sets: the first line should contain the number of watchtowers in the first set and the corresponding watchtower indices. The second line should contain the number of watchtowers in the second set and the corresponding watchtower indices. If it is not possible, output \\"NO\\". Examples Input 6 6 1 2 1 3 2 4 3 4 4 5 5 6 Output YES 3 1 4 5 3 2 3 6 Input 5 5 1 2 1 3 2 3 3 4 3 5 Output NO Note: - The graph cannot be partitioned if it contains an odd-cycle. - Use Breadth-First Search (BFS) or Depth-First Search (DFS) to determine if the graph is bipartite and to get the required partition.","solution":"from collections import deque, defaultdict def is_bipartite(n, edges): Determines if a graph is bipartite and returns the two sets of vertices if it is. :param n: Number of vertices :param edges: List of edges :return: Tuple (is_bipartite, set1, set2) or (False, [], []) if not bipartite # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) # color array to store color of vertices, -1 means uncolored def bfs(start): queue = deque([start]) color[start] = 0 # start with color 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # if not colored color[neighbor] = 1 - color[node] # color with opposite color queue.append(neighbor) elif color[neighbor] == color[node]: # if neighbor has the same color return False return True for v in range(1, n + 1): if color[v] == -1: # if not colored if not bfs(v): return (False, [], []) set1 = [i for i in range(1, n + 1) if color[i] == 0] set2 = [i for i in range(1, n + 1) if color[i] == 1] return (True, set1, set2) def partition_watchtowers(n, m, edges): is_bipartite_graph, set1, set2 = is_bipartite(n, edges) if is_bipartite_graph: return f\\"YESn{len(set1)}n{\' \'.join(map(str, set1))}n{len(set2)}n{\' \'.join(map(str, set2))}\\" else: return \\"NO\\""},{"question":"Implement a function that returns the lexicographically smallest subsequence of a given string that contains all the distinct characters of the string exactly once. You may assume that the input string only contains lowercase English letters. # Function Signature ```python def smallest_subsequence(s: str) -> str: ``` # Input * `s`: A string that only contains lowercase English letters (1 ≤ |s| ≤ 1000). # Output The function should return a string representing the lexicographically smallest subsequence containing all the distinct characters from the input exactly once. # Example Input ```plaintext cbacdcbc ``` Output ```plaintext acdb ``` # Explanation of Example In the given string \\"cbacdcbc\\", the subsequence \\"acdb\\" contains all the distinct characters \'a\', \'b\', \'c\', and \'d\', and it is the lexicographically smallest one. # Constraints * Ensure the solution has a time complexity O(n) where n is the length of the input string to handle the maximum constraint comfortably. * The solution should handle superfluous characters and maintain a smaller sequence as it processes the string.","solution":"def smallest_subsequence(s: str) -> str: last_occurrence = {char: i for i, char in enumerate(s)} stack = [] seen = set() for i, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) seen.add(char) stack.append(char) return \'\'.join(stack)"},{"question":"Anna is collecting coins for her coin collection, and she has N coins where the i^th coin has a value of Ci. She wants to arrange her coins in different groups such that each group has at least one coin, and any two groups have different sum of coin values. She turns to you for help: Given the array of coin values, determine the maximum number of groups she can create such that the sum of values in each group is unique. Input format: The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, denoting the number of coins. The next line contains N integers, the array C, where Ci denotes the value of the i^th coin. Output format: For each test case, print the maximum number of groups with unique sum of values. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Ci ≤ 1000 SAMPLE INPUT: 1 5 1 2 2 3 4 SAMPLE OUTPUT: 4 Explanation: One of the possible ways to create groups with unique sums is: - Group 1: {1}, Sum = 1 - Group 2: {2}, Sum = 2 - Group 3: {3}, Sum = 3 - Group 4: {4}, Sum = 4 Note that combining any coins to form groups must result in unique sum values. Thus, the maximum number of groups for this example is 4.","solution":"def maximum_unique_sum_groups(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] coins = test_cases[i][1] # Sort coins to start making groups with the smallest unique sums coins.sort() # Initialize a set to keep track of the unique sums unique_sums = set() for coin in coins: if coin not in unique_sums: unique_sums.add(coin) # The number of unique sums will be the size of the set results.append(len(unique_sums)) return results"},{"question":"Create a function that simulates a simple text editor. The editor supports the following operations: 1. Append a string to the end of the current text. 2. Delete the last k characters of the current text. 3. Print the character at position k (1-based index). 4. Undo the last operation (either append or delete), reverting the text to its state before that operation. Your task is to implement the text editor with these operations efficiently. # Function Signature - The function should be named `simple_text_editor`. # Parameters - `operations` (list of lists): Each inner list contains an operation in the form of - `[1, string]` for append - `[2, k]` for delete - `[3, k]` for print - `[4]` for undo # Returns - The function should return a list of characters printed by operation `[3, k]` in the sequence they were called. # Example ```python def simple_text_editor(operations): # Your implementation here pass # Example usage operations = [ [1, \\"abc\\"], [3, 3], [2, 3], [1, \\"xyz\\"], [3, 2], [4], [4], [3, 1] ] print(simple_text_editor(operations)) ``` # Input Format - The `operations` parameter is a list of lists where each list represents an operation. - Each operation is represented by a list `[operation, parameter]` or just `[operation]` for undo. - The operations will consist of at most 10000 operations. - In case of invalid position for print operation or invalid operation sequence, print nothing. # Output Format - The function should return a list of characters corresponding to each `[3, k]` print operation. # Constraints - The append string length will not exceed 1000 characters. - Maximum 10 undo operations in a row without any other operation. # Example Explanation For the input operations: ```python [ [1, \\"abc\\"], # Append \\"abc\\", text is now \\"abc\\" [3, 3], # Print character at position 3, output is \\"c\\" [2, 3], # Delete last 3 characters, text is now \\"\\" [1, \\"xyz\\"], # Append \\"xyz\\", text is now \\"xyz\\" [3, 2], # Print character at position 2, output is \\"y\\" [4], # Undo last append, text reverts to \\"\\" [4], # Undo last delete, text reverts to \\"abc\\" [3, 1] # Print character at position 1, output is \\"a\\" ] The final output will be: [\\"c\\", \\"y\\", \\"a\\"] ```","solution":"def simple_text_editor(operations): text = \\"\\" history = [] output = [] for op in operations: if op[0] == 1: # Append operation history.append(text) text += op[1] elif op[0] == 2: # Delete operation history.append(text) k = op[1] text = text[:-k] elif op[0] == 3: # Print operation k = op[1] if 0 < k <= len(text): output.append(text[k-1]) elif op[0] == 4: # Undo operation if history: text = history.pop() return output"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains an integer value representing the \\"height\\" of that cell. A ball is dropped from the top-left cell of the grid. The ball can only move right or down to an adjacent cell. The cost of moving to an adjacent cell is the absolute difference in height between the current cell and the adjacent cell. Your task is to compute the minimum cost to move the ball from the top-left cell to the bottom-right cell of the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m integers each, representing the heights of the cells in the grid. Output Print one integer — the minimum cost to move the ball from the top-left cell to the bottom-right cell. Example Input 3 3 1 3 5 2 8 3 4 6 9 Output 8 Note In the given example, the optimal path is: 1 → 2 → 4 → 6 → 9 and the cost is calculated as follows: Cost = |1-2| + |2-4| + |4-6| + |6-9| = 1 + 2 + 2 + 3 = 8.","solution":"def min_cost_to_bottom_right(grid, n, m): Calculate the minimum cost to move the ball from top-left to bottom-right. Args: grid (list of list of int): 2D list representing the height of cells in the grid n (int): number of rows in the grid m (int): number of columns in the grid Returns: int: minimum cost to move the ball from the top-left cell to the bottom-right cell cost = [[float(\'inf\')] * m for _ in range(n)] cost[0][0] = 0 # Initialize the cost for the first row and first column for i in range(1, n): cost[i][0] = cost[i - 1][0] + abs(grid[i][0] - grid[i - 1][0]) for j in range(1, m): cost[0][j] = cost[0][j - 1] + abs(grid[0][j] - grid[0][j - 1]) for i in range(1, n): for j in range(1, m): cost[i][j] = min( cost[i - 1][j] + abs(grid[i][j] - grid[i - 1][j]), cost[i][j - 1] + abs(grid[i][j] - grid[i][j - 1]) ) return cost[n - 1][m - 1] # Example usage n = 3 m = 3 grid = [ [1, 3, 5], [2, 8, 3], [4, 6, 9] ] print(min_cost_to_bottom_right(grid, n, m)) # Output: 8"},{"question":"A rolling sum is a cumulative sum that rolls, or moves, across an array. For example, the rolling sum of an array with a window size of 3 is calculated by summing the first 3 elements, then the next 3 elements (starting from the second element), and so on, until the end of the array is reached. Write a program that takes two inputs: an array of integers and a window size k, and calculates the rolling sum of the array with the window size specified. If the window size exceeds the array, return an empty array, as no rolling sum can be calculated. Input - The first line contains the size n of the array and the window size k. - The second line contains n integers separated by spaces, representing the array elements. Output - Print the rolling sum results as an array. Example Input: 6 3 1 2 3 4 5 6 Output: [6, 9, 12, 15] Input: 5 2 1 -1 3 4 2 Output: [0, 2, 7, 6] Input: 4 5 1 2 3 4 Output: [] Explanation In the first example, the window size of 3 calculates the sums as: 1 + 2 + 3 = 6 2 + 3 + 4 = 9 3 + 4 + 5 = 12 4 + 5 + 6 = 15 In the second example, the window size of 2 calculates the sums as: 1 + (-1) = 0 -1 + 3 = 2 3 + 4 = 7 4 + 2 = 6 In the third example, since the window size exceeds the array size, the output is an empty array.","solution":"def rolling_sum(arr, k): Calculate the rolling sum of the array with the given window size k. :param arr: List of integers :param k: Window size :return: List of rolling sums n = len(arr) if k > n: return [] result = [] for i in range(n - k + 1): window_sum = sum(arr[i:i+k]) result.append(window_sum) return result"},{"question":"Your task is to write a function to determine if a given string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Note that an empty string is also considered valid. Function Signature: ```python def isValid(s: str) -> bool: ``` Input - A single string `s` containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', with length at most 30. Output - A boolean value `True` if the input string is valid, otherwise `False`. Examples Input \\"()\\" Output True Input \\"()[]{}\\" Output True Input \\"(]\\" Output False Input \\"([)]\\" Output False Input \\"{[]}\\" Output True","solution":"def isValid(s: str) -> bool: Determines if the given string of brackets is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Parameters: s (str): A string containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the input string is valid, otherwise False. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"**Problem Description** Given a list of integers, determine the longest subsequence of consecutive integers. If there are multiple subsequences of the same length, return the one that appears first. **Input Format** A single line of input begins with an integer N, indicating the number of integers n that follow which comprise the list. **Output Format** The longest subsequence of consecutive integers, with integers separated by a single space. If there are multiple such subsequences, return the first one. **Constraints** 2 ≤ N ≤ 100 -1000 ≤ n ≤ 1000 **SAMPLE INPUT** 7 10 11 7 1 6 8 9 **SAMPLE OUTPUT** 6 7 8 9 10 11","solution":"def longest_consecutive_subsequence(nums): from collections import defaultdict num_set = set(nums) longest_start, longest_len = None, 0 for num in nums: if num - 1 not in num_set: # it is the start of a sequence current_num = num current_len = 1 while current_num + 1 in num_set: current_num += 1 current_len += 1 if current_len > longest_len: longest_start, longest_len = num, current_len elif current_len == longest_len and num < longest_start: longest_start = num return [longest_start + i for i in range(longest_len)] # Function to parse input and output as per the problem statement def parse_input_and_find_subsequence(input_str): nums = list(map(int, input_str.split())) N = nums[0] numbers_list = nums[1:N+1] result = longest_consecutive_subsequence(numbers_list) return \' \'.join(map(str, result))"},{"question":"You are working as a software developer for a large e-commerce website. Your task is to implement a discount system for their upcoming sale. The system needs to determine the final price for a customer based on a series of discount rules. Each discount rule consists of a minimum purchase amount and the discount percentage. If the total purchase amount of a customer meets or exceeds the minimum purchase amount, they will receive the corresponding discount. The customer should always get the highest possible discount they qualify for. Input The first line contains an integer n denoting the number of discount rules (1 ≤ n ≤ 10^5). Each of the next n lines contains two space-separated integers m_i and d_i (0 ≤ m_i ≤ 10^9, 0 ≤ d_i ≤ 100) where m_i is the minimum purchase amount for discount d_i. The last line contains an integer t, the total purchase amount of the customer (0 ≤ t ≤ 10^9). Output Output a single integer representing the final price the customer has to pay after applying the highest possible discount. Examples Input 3 100 10 200 20 150 15 180 Output 153 Input 2 50 5 100 10 90 Output 85 Input 4 100 10 200 20 300 30 400 40 350 Output 245 Note In the first sample, the total purchase amount is 180, which qualifies for the discounts of 10% (minimum 100) and 15% (minimum 150). The highest applicable discount is 15%, resulting in a final price of 180 - (180 * 0.15) = 153. In the second sample, the total purchase amount is 90, which only qualifies for the 5% discount since it doesn\'t meet the 100 minimum purchase amount for the 10% discount. The final price is 90 - (90 * 0.05) = 85. In the third sample, the total purchase amount is 350, qualifying for the discounts of 10%, 20%, and 30%. The highest applicable discount is 30%, resulting in a final price of 350 - (350 * 0.30) = 245.","solution":"def final_price_after_discount(n, discount_rules, t): Returns the final price after applying the highest possible discount. Parameters: n (int): Number of discount rules. discount_rules (list of tuples): Each tuple contains (m_i, d_i). t (int): Total purchase amount of the customer. Returns: int: The final price after applying the highest possible discount. max_discount = 0 # Initialize max discount to 0 for m_i, d_i in discount_rules: if t >= m_i: max_discount = max(max_discount, d_i) final_price = t - (t * max_discount / 100) return int(final_price)"},{"question":"**Task: K-Rank Innovations** To keep up with modern technology trends, K-Rank Innovations conducts frequent upgrades to its server infrastructure. Each server is assigned an initial load and a set of scheduled load changes. The company\'s goal is to compute the final load on each server after all the scheduled load changes are applied. The server infrastructure is represented as a collection of servers, each server initially assigned a specific load. Over time, load change commands are issued, which add or subtract from the current load of specific servers. # Objective You need to implement a function that takes the initial configuration of the servers and a list of load change commands, and then computes the final load on each server. # Input - The first line contains two integers, `n` and `c` (1 ≤ n, c ≤ 2 * 10^5), where `n` is the number of servers, and `c` is the number of load change commands. - The second line contains `n` integers representing the initial loads of the servers. - The next `c` lines each contain a load change command in the form of three integers: `s` (1 ≤ s ≤ n), `d` (d can be any positive or negative integer including zero), and `t` (1 ≤ t ≤ n), which means that starting from server `s` to server `t` (inclusive), `d` should be added to each server\'s load. # Output - Print a single line containing `n` integers, representing the final load of each server in the same order as they were given initially. # Example Input 1 ``` 5 3 10 20 30 40 50 1 -5 3 4 10 5 2 5 2 ``` Output 1 ``` 5 25 25 50 50 ``` Explanation 1 1. Initial loads: [10, 20, 30, 40, 50] 2. After the first command (1, -5, 3): - Servers 1 to 3 decrease by 5: [5, 15, 25, 40, 50] 3. After the second command (4, 10, 5): - Servers 4 to 5 increase by 10: [5, 15, 25, 50, 60] 4. After the third command (2, 5, 2): - Servers 2 to 2 increase by 5: [5, 20, 25, 50, 60] # Notes - Make sure to handle both positive and negative load changes. - Commands never exceed the boundary of the number of servers. - The initial load values and the load change values can be negative or zero as well.","solution":"def final_loads(n, c, initial_loads, commands): Compute the final loads on each server after applying all load change commands. Parameters: n (int): number of servers c (int): number of load change commands initial_loads (list of int): the initial loads of the servers commands (list of tuples): each tuple contains three integers (s, d, t) - s (int): starting server index (1-based) - d (int): load change value - t (int): ending server index (1-based) Returns: list of int: the final loads of the servers loads = initial_loads[:] for s, d, t in commands: for i in range(s-1, t): loads[i] += d return loads"},{"question":"You are managing a team of software developers and are tasked with scheduling a planning meeting. Each developer has multiple time slots during the week when they are available for meetings. The goal is to find a time slot when the most developers are available simultaneously. Given the availability schedules of the developers, determine the time slot with the highest number of available developers. If there are multiple time slots with the same highest number of available developers, return the earliest one. Each developer\'s availability is represented as a list of time slots in the format \\"Day HH:MM-HH:MM\\" (e.g., \\"Mon 09:00-10:00\\"). The days are given as three-letter abbreviations: Mon, Tue, Wed, Thu, Fri. Input - An integer n (1 ≤ n ≤ 100) — the number of developers. - n lines follow, each containing a non-empty list of availability schedules separated by commas. Output Print a single line containing the time slot with the highest number of available developers in the format \\"Day HH:MM-HH:MM\\". Examples Input 3 Mon 09:00-10:00, Tue 10:00-11:00 Mon 09:30-10:30, Wed 12:00-13:00 Mon 09:15-09:45, Thu 14:00-15:00 Output Mon 09:30-09:45 Input 2 Mon 09:00-10:00, Wed 11:00-12:00 Fri 14:00-15:00, Wed 11:30-12:30 Output Wed 11:30-12:00 Notes In the first example, the time slot \\"Mon 09:30-09:45\\" has 3 developers available, which is the maximum number.","solution":"from collections import defaultdict def find_best_meeting_time(n, schedules): time_slots = defaultdict(int) def calc_minutes(day, time): days = {\'Mon\': 0, \'Tue\': 1440, \'Wed\': 2880, \'Thu\': 4320, \'Fri\': 5760} h, m = map(int, time.split(\':\')) return days[day] + h * 60 + m for schedule in schedules: for slot in schedule.split(\', \'): day, times = slot.split(\' \') start, end = times.split(\'-\') start_minutes = calc_minutes(day, start) end_minutes = calc_minutes(day, end) for t in range(start_minutes, end_minutes): time_slots[t] += 1 max_devs = max(time_slots.values()) earliest_start = min(k for k, v in time_slots.items() if v == max_devs) start_minutes = earliest_start % 1440 start_h = start_minutes // 60 start_m = start_minutes % 60 day_index = earliest_start // 1440 days = [\'Mon\', \'Tue\', \'Wed\', \'Thu\', \'Fri\'] best_start_time = f\\"{days[day_index]} {start_h:02d}:{start_m:02d}-{start_h:02d}:{start_m+1:02d}\\" return best_start_time"},{"question":"Your task is to find the optimum charging point for electric cars parked along a straight road. You are given the positions of n cars (n >= 1) parked along the road and your goal is to install a single charging station such that the total sum of distances from all cars to the charging station is minimized. You will be given an array of integers representing the positions of the cars along the road. You need to determine the best position to place the charging station that minimizes the sum of distances. Assume the positions of cars are distinct integers, and all operations are performed on a 1-dimensional coordinate system. Input The first line of the input contains the integer n (1 ≤ n ≤ 105) — the number of cars. The second line contains n distinct integers x1, x2, ..., xn (−109 ≤ xi ≤ 109), where xi denotes the position of the i-th car. Output Print the integer position of the charging station such that the total sum of distances is minimized. If there are multiple positions yielding the same minimum distance, print any one of them. Examples Input 3 1 3 6 Output 3 Input 5 -1 2 4 6 8 Output 4 (or 6) Note In the first example, placing the station at position 3 results in the sum of distances |1-3| + |3-3| + |6-3| = 2 + 0 + 3 = 5. In the second example, placing the station at positions 4 or 6 will both yield the same minimum distance sum of 21.","solution":"def optimum_charging_point(n, positions): Finds the optimum charging point that minimizes the total sum of distances from all cars. :param n: Number of cars :param positions: List of positions of the cars :return: The optimal position for the charging station sorted_positions = sorted(positions) return sorted_positions[(n - 1) // 2]"},{"question":"John is a data analyst who loves to work with number sequences. Recently, he encountered an interesting problem at work and needed your help to solve it. Given an array of n non-negative integers, John wants to find out the smallest non-negative integer that is not present in the array. This number is also known as the \\"minimum missing number\\". John also wants to know if there is any non-negative integer from the array whose frequency is greater than 1. If such a number exists, find the smallest one. Write a program to help John with his task. Input The first line of the input contains one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line of the input contains the sequence b_1, b_2, ..., b_n (0 ≤ b_i ≤ 1000), where b_i is the i-th element of the array. Output In the first line, print the smallest non-negative integer that is not present in the array. In the second line, if there is any non-negative integer from the array whose frequency is greater than 1, print the smallest one. If there are no such numbers, print \\"-1\\". Examples Input 5 0 1 2 3 4 Output 5 -1 Input 7 0 1 2 2 3 3 4 Output 5 2 Input 4 1 2 3 4 Output 0 -1 Input 8 2 2 2 2 2 2 2 2 Output 0 2 Note In the first example, all integers from 0 to 4 are present in the array, so the smallest missing non-negative integer is 5. As there are no numbers with frequency greater than 1, the output for the second line is -1. In the second example, the smallest missing non-negative integer is 5, and the smallest number with frequency greater than 1 is 2. In the third example, since 0 is missing in the array, it is the smallest missing non-negative integer. There are no numbers with frequency greater than 1, so the output for the second line is -1.","solution":"def smallest_missing_and_duplicate(arr): This function returns the smallest non-negative integer not present in the array and the smallest non-negative integer in the array with frequency greater than 1. n = len(arr) numbers_present = [False] * (n + 1) frequency = {} # Populate the presence and frequency of each number in the array for num in arr: if num <= n: numbers_present[num] = True if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Find the smallest missing non-negative integer smallest_missing = next(i for i, x in enumerate(numbers_present) if not x) # Find the smallest non-negative integer with frequency greater than 1 smallest_duplicate = -1 for num in sorted(frequency): if frequency[num] > 1: smallest_duplicate = num break return smallest_missing, smallest_duplicate"},{"question":"Given a rooted binary tree, you need to find the lowest common ancestor of two given nodes in the tree. The lowest common ancestor (LCA) of nodes `p` and `q` in a tree is defined as the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself). Input The input consists of multiple test cases. Each test case contains the following: 1. The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of nodes in the tree. 2. The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) representing an edge in the tree. 3. The following line contains two integers `p` and `q` (1 ≤ p, q ≤ n) - the nodes for which LCA needs to be found. Each test case is separated by a blank line, and the input ends when the end of file (EOF) is reached. Output For each test case, output a single integer - the LCA of the nodes `p` and `q` in the given tree. Example Input 6 1 2 1 3 2 4 2 5 3 6 4 6 6 1 2 1 3 2 4 2 5 3 6 5 6 Output 1 2","solution":"import sys import collections def lca_preprocess(tree, n, root=1): LOG = 16 # Since 2^16 > 10^5 up = [[-1] * (LOG + 1) for _ in range(n + 1)] depth = [-1] * (n + 1) def dfs(node, parent): depth[node] = depth[parent] + 1 up[node][0] = parent for i in range(1, LOG + 1): if up[node][i-1] != -1: up[node][i] = up[up[node][i-1]][i-1] for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) depth[root] = 0 dfs(root, -1) return up, depth def lca(up, depth, p, q): if depth[p] < depth[q]: p, q = q, p LOG = 16 for i in range(LOG, -1, -1): if depth[p] - (1 << i) >= depth[q]: p = up[p][i] if p == q: return p for i in range(LOG, -1, -1): if up[p][i] != -1 and up[p][i] != up[q][i]: p = up[p][i] q = up[q][i] return up[p][0] def process_input(): input_stream = sys.stdin.read().strip() test_cases = input_stream.split(\'nn\') results = [] for case in test_cases: lines = case.strip().split(\'n\') n = int(lines[0]) tree = collections.defaultdict(list) for i in range(1, n): u, v = map(int, lines[i].strip().split()) tree[u].append(v) tree[v].append(u) p, q = map(int, lines[n].strip().split()) up, depth = lca_preprocess(tree, n) results.append(str(lca(up, depth, p, q))) print(\'n\'.join(results))"},{"question":"A coding company has a network of servers arranged in a linear fashion, consisting of `n` servers labeled from `1` to `n`. Each server `i` has a processing capacity `p_i` (in teraflops). The servers need to be connected to form a pipeline for data processing. The company has a specific restriction on how these servers can be connected: a server `i` can only forward data to server `j` if `j` is exactly `d` steps ahead of `i` (i.e., `j = i + d`). The value of `d` is given as input. The total processing capacity of a pipeline is determined by the sum of the processing capacities of all the servers in that pipeline. The company wants to form the pipeline with the maximum total processing capacity under these constraints. Given the number of servers `n`, the step distance `d`, and the list of processing capacities, determine the maximum total processing capacity of any valid pipeline that can be formed. Input The first line contains two integers, `n` and `d` (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ d ≤ n - 1), where `n` is the number of servers and `d` is the step distance. The second line contains `n` integers `p_1, p_2, ..., p_n` (1 ≤ p_i ≤ 10^9), where `p_i` is the processing capacity of the `i-th` server. Output Print one integer — the maximum total processing capacity of a valid pipeline. Examples Input 5 2 1 4 3 7 5 Output 11 Input 6 1 9 3 5 7 1 2 Output 27 Input 4 3 10 20 30 40 Output 50 Note In the first example, the optimal pipeline consists of servers [2, 4], with a total processing capacity of 4 + 7 = 11. In the second example, the optimal pipeline consists of servers [1, 2, 3, 4, 5, 6], with a total processing capacity of 9 + 3 + 5 + 7 + 1 + 2 = 27. In the third example, the optimal pipeline consists of servers [1, 4], with a total processing capacity of 10 + 40 = 50.","solution":"def max_processing_capacity(n, d, p): Function to calculate the maximum total processing capacity of any valid pipeline. Parameters: n (int): The number of servers. d (int): The step distance. p (List[int]): The list of processing capacities of the servers. Returns: int: The maximum total processing capacity of a valid pipeline. # Using dynamic programming approach to solve the problem dp = [0] * n # dp[i] will store the maximum capacity ending at server i max_capacity = 0 for i in range(n): # The base case where the pipeline starts with the i-th server itself dp[i] = p[i] # Try to extend the pipeline by checking previous elements which can reach the i-th server if i >= d: dp[i] = max(dp[i], p[i] + dp[i - d]) # Keep track of the maximum pipeline capacity found max_capacity = max(max_capacity, dp[i]) return max_capacity"},{"question":"Mark recently attended a book sale, and he bought several books at great prices. Now, he wants to organize them on his bookshelf. He decides to arrange them in a specific manner based on their height. Mark wants all the books to be arranged in non-decreasing order of height. However, during the process, he noticed that he might not have enough space on his bookshelf if the books don\'t fit perfectly in one go, as he cannot stack any book on top of another. Given the heights of the books that Mark bought, your task is to determine the minimum number of shelves Mark needs to accommodate all his books. The width of each shelf is sufficiently large to hold any number of books, but stacking books vertically on a shelf is not allowed. Write a program to assist Mark in figuring out how many shelves he will need. Input The first line contains T, the number of test cases. Description of T test cases follows. The first line of each test case contains an integer N. The next N lines contain one integer each, the ith line giving the height of the ith book. Output For each test case, output a single line containing the minimum number of shelves required to arrange all the books. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Height of each book ≤ 10^18 SAMPLE INPUT 2 5 10 12 15 10 20 3 7 8 9 SAMPLE OUTPUT 3 1","solution":"def min_shelves_needed(test_cases): Given a list of test cases, each consisting of the heights of books, returns the minimum number of shelves needed to accommodate all books for each test case. results = [] for case in test_cases: num_books, book_heights = case # Since vertical stacking is not allowed, each book goes on a new shelf. results.append(num_books) return results"},{"question":"A group of friends decided to play a game where they call out numbers in order, starting from 1. However, they have a special rule: whenever it is your turn to call out a number that contains the digit \\"3\\" or is divisible by 3, you must say \\"Fizz\\" instead of the number. The goal is to find out what the list of first N numbers would look like if they were to follow this rule for a given N. Write a function `fizzGame(N)` that accepts a single integer N and generates the list of numbers as modified by the rule outlined above. Input: - The input contains a single integer N (1 ≤ N ≤ 100000). Output: - The output should be a list of strings, where each string represents a number or \\"Fizz\\" as per the described rule. Example: Input: 10 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"5\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"10\\"] Explanation: - The first number is \\"1\\". - The second number is \\"2\\". - The third number contains \\"3\\", so it is \\"Fizz\\". - The fourth number is \\"4\\". - The fifth number is \\"5\\". - The sixth number is divisible by 3, so it is \\"Fizz\\". - The seventh number is \\"7\\". - The eighth number is \\"8\\". - The ninth number is divisible by 3, so it is \\"Fizz\\". - The tenth number is \\"10\\". Make sure your function is efficient and can handle the upper limit of N efficiently.","solution":"def fizzGame(N): Generates a list of numbers from 1 to N following the rule: If the number contains the digit \\"3\\" or is divisible by 3, replace it with \\"Fizz\\" Args: N (int): The upper limit of the list (inclusive) Returns: list: A list of strings representing numbers or \\"Fizz\\" as per the rule result = [] for i in range(1, N + 1): if (i % 3 == 0) or (\'3\' in str(i)): result.append(\\"Fizz\\") else: result.append(str(i)) return result"},{"question":"In a river, there are several stones placed at various points. A frog starts by sitting on one of these stones. The positions of the stones can be represented as an array of integers, where each integer represents the x-coordinate of a stone. The frog wants to get to the last stone by jumping from one stone to another. The frog can jump from a stone at position `x` to a stone at position `y` if and only if `x < y`, and the length of the jump is not more than `maxJump`, which is a given integer. Write a function `canReachLastStone` that takes in two arguments: - `stones`: a list of integers representing the x-coordinates of the stones in increasing order. - `maxJump`: an integer representing the maximum distance the frog can jump in one go. The function should return a boolean value indicating whether the frog can reach the last stone starting from the first stone. Input The function canReachLastStone(stones, maxJump) should take the following parameters: - stones (1 ≤ len(stones) ≤ 10^4, 0 ≤ stones[i] ≤ 10^9) - A list of integers representing the x-coordinates of the stones. - maxJump (1 ≤ maxJump ≤ 10^9) - An integer representing the maximum distance the frog can jump in one go. Output Return `True` if the frog can reach the last stone, otherwise return `False`. Example Input canReachLastStone([0, 2, 3, 5, 6, 8], 3) Output True Input canReachLastStone([0, 5, 6, 12], 5) Output False Explanation In the first example, the frog can jump from stone 0 to stone 2, then from stone 2 to stone 5, and finally to stone 8. In the second example, the frog cannot reach any stone after the first jump, as the distance between the first stone (0) and the second stone (5) is more than the maximum jump distance.","solution":"def canReachLastStone(stones, maxJump): Determine if the frog can reach the last stone. Parameters: - stones: a list of integers representing the x-coordinates of the stones. - maxJump: an integer representing the maximum distance the frog can jump in one go. Returns: - True if the frog can reach the last stone, False otherwise. n = len(stones) for i in range(n - 1): if stones[i + 1] - stones[i] > maxJump: return False return True"},{"question":"In a mystical forest, there is a curious game played by magical creatures called Wobblies. The game involves Wobblies standing in a circle, each holding a special wand that can cast a unique spell. The Wobblies are numbered from 1 to n clockwise around the circle. Each Wobbly i can cast their spell w(i) times in total. Initially, each Wobbly\'s spell counter is set to w(i). The game begins and proceeds in rounds. In every round, one Wobbly is chosen as the caster. On their turn, the caster Wobbly can cast their spell on one of two adjacent Wobblies (either the one on their left or the one on their right). If a spell is cast on Wobbly j, their spell counter w(j) decreases by 1. A Wobbly cannot cast their spell if their counter w(i) is zero. The game halts when there are no more possible spell casts, meaning every Wobbly has a counter of zero or no Wobbly can cast any spell due to their counter being zero. Given the initial spell counters for each of the n Wobblies, determine the minimum number of rounds required to halt the game. If it\'s possible to halt the game without casting any spell, the minimum number of rounds is zero. Input The first line contains an integer n (2 ≤ n ≤ 100,000), the number of Wobblies. The second line contains n integers w(1), w(2), ..., w(n) (0 ≤ w(i) ≤ 10^9), representing the initial spell counter for each Wobbly. Output Print a single integer representing the minimum number of rounds required to halt the game. Example Input 5 1 2 3 4 5 Output 7","solution":"def minimum_rounds_to_halt_game(n, w): Determines the minimum number of rounds required to halt the game. Parameters: n (int): The number of Wobblies. w (list of int): The initial spell counters for each Wobbly. Returns: int: The minimum number of rounds required to halt the game. # Since each spell cast in a round affects one Wobbly\'s spell counter, # the minimum number of rounds to bring all counters to zero is # the total spells available divided by 2. # Calculate the total number of spells available total_spells = sum(w) # Minimum rounds is total spells divided by 2 (each round affects one spell) min_rounds = total_spells // 2 return min_rounds # Example usage: n = 5 w = [1, 2, 3, 4, 5] print(minimum_rounds_to_halt_game(n, w)) # Output should be 7"},{"question":"Carlos is a computer engineer who is working on a unique project involving a large number of servers spread across different data centers. Each server can communicate with certain other servers directly. His task is to ensure that he can send a message from any server to any other server, either directly or through a series of intermediary servers. The network of servers can be modeled as a graph with n vertices, where each vertex represents a server and an edge between two vertices signifies that the two corresponding servers can communicate directly. Carlos can add or remove edges (i.e., establish or sever communication links between servers to ensure message transferability). However, he wants to minimize such operations. Write a program to help Carlos determine the minimum number of edges that need to be added (if necessary) to ensure that every server can communicate with every other server, directly or indirectly. Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of servers (vertices). - The second line contains an integer m (0 ≤ m ≤ 2*10^5) — the number of direct communication links (edges) currently available. - The next m lines, each containing two integers u and v (1 ≤ u, v ≤ n) that denote a direct communication link between servers u and v. Output Print one integer — the minimum number of edges that need to be added to ensure that any server can communicate with any other server. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 6 5 1 2 2 3 3 4 4 5 5 6 Output 0","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_edges_to_connect_all_servers(n, m, edges): if n <= 0: return 0 parent = [i for i in range(n)] rank = [0] * n for u, v in edges: union(parent, rank, u - 1, v - 1) # Count the number of connected components connected_components = len(set(find(parent, i) for i in range(n))) # Minimum number of edges to connect all components return connected_components - 1"},{"question":"Lara is a computer science student who loves playing with strings. One day she comes across a challenge problem that involves string manipulation and counting subsequences. The problem is described as follows: Lara has a string S of length n. She also has a target string T of length m. Lara needs to find out how many distinct subsequences of S can be combined to form the string T. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. However, this task must be performed efficiently, as the length of S can be quite large (up to 3000 characters). # Input - The first line contains a string S of length n (1 ≤ n ≤ 3000). - The second line contains a string T of length m (1 ≤ m ≤ n). Both strings contain only lowercase Latin letters. # Output The output should be a single integer representing the number of distinct subsequences of S that can form the string T. Since the answer could be very large, output the answer modulo 10^9 + 7. # Examples Input ``` babgbag bag ``` Output ``` 5 ``` Input ``` rabbbit rabbit ``` Output ``` 3 ``` Explanation In the first example, there are 5 distinct subsequences of \\"babgbag\\" which produce the string \\"bag\\": - b1 a2 b3 - b1 a2 g4 - b1 b3 a4 - b1 g4 a5 - b3 g4 a5 In the second example, there are 3 distinct subsequences of \\"rabbbit\\" which produce the string \\"rabbit\\": - r1 a2 b3 b4 i5 t6 - r1 a2 b3 b5 i6 t7 - r1 a2 b4 b5 i6 t7 # Note A dynamic programming approach is typically used to solve this problem efficiently. To find the number of ways to form string T from S, you can build a DP table where `dp[i][j]` represents the number of ways to form the first `i` characters of T from the first `j` characters of S.","solution":"def num_distinct_subsequences(S, T): MOD = 10**9 + 7 n, m = len(S), len(T) if m > n: return 0 # dp[i][j] will be storing the number of distinct subsequences of S[:j] which equals T[:i]. dp = [[0] * (n + 1) for _ in range(m + 1)] # An empty T can be formed by any substring of S in exactly one way, by deleting all characters. for j in range(n + 1): dp[0][j] = 1 for i in range(1, m + 1): for j in range(1, n + 1): if T[i - 1] == S[j - 1]: dp[i][j] = (dp[i][j - 1] + dp[i - 1][j - 1]) % MOD else: dp[i][j] = dp[i][j - 1] % MOD return dp[m][n]"},{"question":"Monica and Chandler are planning their vacation and deciding which cities to visit. Each city has a unique name and a specific set of features represented by an ordered L-tuple ( F1, F2, F3,..., FL ). Each feature Fi is a floating-point number between 0 and M inclusive. Monica and Chandler have a list of N cities with their respective L-tuple features. They both have different preferences for city features, so they decided to each look up a list of Q favorite cities independently. To make the task easier, they asked you to help them identify which L-tuple of features corresponds to which city name. Input: The first line contains N, L, M, and Q, the number of cities, the size of the L-tuple, the maximum value of any feature, and the number of favorite city requests. N lines follow. The i-th line contains a string which is the name of the i-th city and L space-separated floating-point numbers which are the features for the i-th city. Q lines follow. The i-th line contains an L-tuple of floating-point numbers denoting a feature set that describes a favorite city. Output: For each favorite city request, output the name of the city that the feature set belongs to. If the feature set doesn\'t match any city\'s features, output \\"No match found\\". Constraints: 1 ≤ N ≤ 10000 1 ≤ L ≤ 4 0 ≤ M ≤ 10000 1 ≤ Q ≤ 10000 0 ≤ Fi ≤ M 1 ≤ Length of City\'s name ≤ 15 City\'s name will contain only lowercase alphabets [a-z]. Note: No two cities will have the same L-tuple or name. SAMPLE INPUT 4 2 100 4 paris 45.5 78.1 madrid 25.0 89.9 rome 78.8 55.5 berlin 60.3 72.6 45.5 78.1 60.3 72.6 25.0 89.9 99.9 99.9 SAMPLE OUTPUT paris berlin madrid No match found","solution":"def find_city_name(n, l, m, q, city_data, queries): city_features_map = {} # Mapping city names to their respective features for data in city_data: parts = data.split() city_name = parts[0] features = tuple(map(float, parts[1:])) city_features_map[features] = city_name results = [] for query in queries: features = tuple(map(float, query.split())) if features in city_features_map: results.append(city_features_map[features]) else: results.append(\\"No match found\\") return results"},{"question":"In Udayland, there is a tradition of playing a game at the entrance. The game involves a grid of size n x m filled with integers. The animals in Udayland love the number 7, so they decided to create a special rule for the grid. Each animal has to determine if they can make all rows in the grid have the same sum by changing at most one element in the grid to 7. Your task is to help the animals determine if it is possible to achieve this rule by changing at most one element in the grid to 7. If it is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. Each of the next n lines contains m integers. The j-th integer in the i-th line denotes ai, j (1 ≤ ai, j ≤ 100), the number in the i-th row and j-th column of the grid. Output Output a single line with the answer \\"YES\\" if it is possible to make all rows have the same sum by changing at most one element to 7. Otherwise, output \\"NO\\". Examples Input 3 3 6 1 2 3 1 3 7 7 1 Output YES Input 2 2 1 1 9 9 Output NO Note In the first example, by changing the element 2 in the first row to 7, we make all row sums equal to 9. In the second example, it is not possible to make all row sums the same by changing only one element to 7.","solution":"def can_make_rows_equals_with_one_change(grid, n, m): # Calculate initial row sums row_sums = [sum(row) for row in grid] # Find the target row sum and its frequency sum_freq = {} for rs in row_sums: if rs in sum_freq: sum_freq[rs] += 1 else: sum_freq[rs] = 1 # If all row sums are already the same if len(sum_freq) == 1: return \\"YES\\" # Variant frequency map to hold possible corrected sums variant_freq = {} for i, rs in enumerate(row_sums): for j in range(m): if grid[i][j] != 7: # Change non-7 elements to 7 and recalculate sum corrected_sum = rs - grid[i][j] + 7 if corrected_sum in variant_freq: variant_freq[corrected_sum] += 1 else: variant_freq[corrected_sum] = 1 # Check if any corrected row sum appears in all but one original rows for corrected_sum in variant_freq: if variant_freq[corrected_sum] == n - 1: return \\"YES\\" return \\"NO\\""},{"question":"Eva is passionate about collecting old coins. She has recently discovered a set of n distinct coins, each with a unique value denoted by an integer. In her collection room, she arranges these coins on a shelf in a specific order. Sometimes, Eva wants to combine some of the coins into groups and observe their combined values. For this purpose, she uses a special coin binder that can combine a contiguous subset of coins to form a single coin whose value is the sum of the values of the combined coins. Given the values of the n coins and Eva\'s k queries about the sum of values of coins in specific ranges, help her by providing the sum for each query. Input The first line of input contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 50). The next line contains n integers, the values of the coins, where each value is a positive integer not exceeding 1000. The following k lines contain the descriptions of the k queries, each of which consists of two integers li and ri (1 ≤ li ≤ ri ≤ n) representing the range of coin positions (1-indexed) for which Eva wants to calculate the sum. Output For each of the k queries, output a single integer representing the sum of the values of the coins in the specified range. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 4 2 10 20 30 40 1 2 3 4 Output 30 70","solution":"def coin_sums(n, k, coin_values, queries): Returns the sum of coin values for each query range. :param n: Number of coins :param k: Number of queries :param coin_values: List of coin values :param queries: List of tuple queries where each tuple contains (li, ri) :return: List of sums for each query range results = [] for li, ri in queries: # Convert 1-indexed to 0-indexed sum_value = sum(coin_values[li - 1:ri]) results.append(sum_value) return results"},{"question":"Alice and Bob are playing a game involving sequences of positive integers. The game starts with a sequence `a` of length `n`. In each round, either Alice or Bob can select any non-empty contiguous subsequence of `a` and replace it with the sum of its elements. The goal is to maximize the sum of the elements in the sequence. Alice always plays first, followed by Bob, and they alternate turns. The game continues until the sequence consists of a single integer. Alice and Bob are both very clever and will play optimally to maximize the total sum of the sequence. Determine the final value of the sequence after both players have made all their moves. Input The first line of input contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the sequence `a`. The second line contains `n` positive integers `a_i` (1 ≤ a_i ≤ 10^9) — the initial sequence. Output Output a single integer — the final value of the sequence after both players have played optimally. Example Input 5 1 2 3 4 5 Output 15 Input 3 9 8 7 Output 24","solution":"def final_sequence_value(n, a): Returns the final value of the sequence after both players have played optimally. Parameters: n (int): length of the sequence. a (list of int): the initial sequence. Returns: int: the final value of the sequence. return sum(a) # You can call this function with inputs as required"},{"question":"In Fancyland, there exists a magical sequence of numbers called \\"Gleams.\\" A \\"Gleam\\" is a number where each digit strictly increases from left to right. For example, 123 and 279 are Gleams, while 322 and 531 are not. Bria loves these numbers and often challenges her friends to find Gleams. She came up with a task: Given an integer n, determine how many Gleams have n digits. Input The input consists of a single integer n (1 ≤ n ≤ 9). Output Print the number of Gleams that have exactly n digits. Examples Input 2 Output 36 Input 1 Output 9 Note For the first sample, the 2-digit Gleams are: 12, 13, 14, ..., 78, 79, 89. There are 36 such numbers. For the second sample, the 1-digit Gleams are: 1, 2, 3, ..., 8, 9. There are 9 such numbers. Explanation You need to determine the count of strictly increasing digit numbers with exactly n digits.","solution":"from math import comb def count_gleams(n): Returns the number of Gleams that have exactly n digits. # The number of Gleams of length n is the number of ways to choose n digits out of 9 (1 to 9). return comb(9, n)"},{"question":"Peter loves playing with sequences of numbers. Today he came across a new puzzle involving non-decreasing subsequences and needs your help to solve it. A subsequence is derived from another sequence by deleting some or all of the elements without changing the order of remaining elements. A non-decreasing subsequence is a subsequence where for every pair of consecutive elements in the subsequence, the current element is greater than or equal to the previous one. Given an array of integers, your task is to calculate the length of the longest non-decreasing subsequence. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the array a. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the elements of a. Output Output a single integer — the length of the longest non-decreasing subsequence in the array. Examples Input 6 5 3 4 8 6 7 Output 4 Input 5 2 2 2 2 2 Output 5 Note In the first sample, the longest non-decreasing subsequences are [3, 4, 6, 7], [3, 4, 6, 7], and [3, 4, 6, 8], among others, with length equal to 4. In the second sample, since all elements are equal, the entire array itself is the longest non-decreasing subsequence with length 5.","solution":"def longest_non_decreasing_subsequence_length(n, a): Computes the length of the longest non-decreasing subsequence in a given array. :param n: Integer, the length of the array. :param a: List of integers, the array of elements. :return: Integer, the length of the longest non-decreasing subsequence. if n == 0: return 0 # Initialize the lengths array with 1s since the minimum length for each element is itself lengths = [1] * n # Compute lengths array for i in range(1, n): for j in range(i): if a[i] >= a[j]: # non-decreasing condition lengths[i] = max(lengths[i], lengths[j] + 1) # The length of the longest non-decreasing subsequence return max(lengths)"},{"question":"In a distant future, there is a network of autonomous delivery drones operating in a city that is represented as an undirected graph. The city has multiple intersections connected by bidirectional roads, and the intersections are denoted by nodes while the roads are denoted by edges. Each drone starts at a designated central node (node 1) and needs to deliver packages to various target nodes located at other intersections. The drone network is controlled by a central system that needs to determine the shortest paths from the central node to each target node to efficiently schedule drone deliveries. Your task is to write a program that finds and prints the shortest path from the central node to each target node in the graph. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of nodes and m is the number of edges in the graph. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), which represents an edge between nodes u and v with a weight w. The next line contains an integer t (1 ≤ t ≤ n-1), the number of target nodes. The final line contains t integers, each representing a target node. Output For each target node, print the shortest distance from the central node (node 1). If a target node is not reachable from the central node, print -1 for that node. Example Input 6 9 1 2 7 1 3 9 1 6 14 2 3 10 2 4 15 3 4 11 3 6 2 4 5 6 5 6 9 3 4 5 6 Output 20 20 11 Note In the example, the shortest path from node 1 to node 4 goes through nodes 1 → 3 → 6 → 4 with a total weight of 20. The shortest path from node 1 to node 6 is direct with a weight of 11. The shortest path from node 1 to node 5 goes through nodes 1 → 3 → 6 → 5 with a total weight of 20.","solution":"import heapq def dijkstra(n, edges, target_nodes): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def shortest_path(start): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances distances_from_start = shortest_path(1) results = [] for target in target_nodes: if distances_from_start[target] == float(\'inf\'): results.append(-1) else: results.append(distances_from_start[target]) return results # Read inputs def get_shortest_paths_from_input(input_data): data = input_data.split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) edges.append((u, v, w)) index += 3 t = int(data[index]) target_nodes = list(map(int, data[index+1:index+1+t])) return dijkstra(n, edges, target_nodes)"},{"question":"You are given an array of integers and your task is to find the length of the longest subarray where all its elements have the same parity (i.e., all are even or all are odd). Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1,000,000) — the elements of the array. Output - Print a single integer — the length of the longest subarray where all its elements have the same parity. Examples Input 5 1 2 3 4 5 Output 1 Input 6 2 4 6 8 10 1 Output 5 Input 7 1 1 2 2 2 3 3 Output 3 Note In the first example, the array does not have any subarray longer than 1 element that maintains the same parity. In the second example, the longest subarray with the same parity consists of the elements 2, 4, 6, 8, and 10, which are all even. In the third example, the longest subarray with the same parity consists of the three elements 2, 2, and 2.","solution":"def longest_same_parity_subarray(n, arr): if n == 0: return 0 max_length = 1 current_length = 1 current_parity = arr[0] % 2 for i in range(1, n): if arr[i] % 2 == current_parity: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 current_parity = arr[i] % 2 max_length = max(max_length, current_length) return max_length"},{"question":"Given a list of student IDs representing the students who have joined a coding club, the club leader wants to promote those students who have shown consistency in attending the club meetings. The promotion criteria are that a student must attend all meetings in three or more consecutive days at least once during the given period. Your task is to identify and list the student IDs of those who meet the promotion criteria according to the attendance records. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000), where n is the number of attendance records, and m is the number of different students. The next n lines contain pairs of integers d and id (1 ≤ d ≤ 1000, 1 ≤ id ≤ m), where d is the day number and id is the student ID that attended the meeting on that day. Output Print the student IDs that meet the promotion criteria in ascending order, separated by spaces. If no student meets the criteria, print \\"None\\". Examples Input 7 3 1 1 2 1 3 1 4 2 5 2 6 2 7 2 Output 1 2 Input 5 2 1 1 2 1 4 2 5 2 6 2 Output None Explanation In the first example, both student 1 and student 2 meet the promotion criteria: - Student 1 attended all meetings on days 1, 2, and 3 (3 consecutive days). - Student 2 attended all meetings on days 4, 5, and 6 (also 3 consecutive days). In the second example, no student attended all meetings for three or more consecutive days.","solution":"def find_promoted_students(n, m, attendance_records): from collections import defaultdict # Dictionary to store attendance by student id attendance_dict = defaultdict(list) for d, student_id in attendance_records: attendance_dict[student_id].append(d) promoted_students = [] for student_id, days in attendance_dict.items(): days.sort() consecutive_count = 1 for i in range(1, len(days)): if days[i] == days[i-1] + 1: consecutive_count += 1 if consecutive_count >= 3: promoted_students.append(student_id) break else: consecutive_count = 1 if promoted_students: return sorted(promoted_students) else: return [\\"None\\"]"},{"question":"You are given a string s consisting of digits and lowercase English letters. A subsequence is derived by deleting some or none of the characters from the original string without changing the order of the remaining characters. Your task is to find the number of unique digits that can be formed by finding all possible subsequences of the given string s and concatenating them. A digit is considered unique if it appears at least once in any subsequence of the given string. Input The input is a single line containing string s (1 ≤ |s| ≤ 20). Output Output an integer indicating the number of unique digits that can be formed by subsequences of string s. Examples Input ab12c3 Output 4 Input aebdf Output 0 Input ffff5f5f Output 1 Note In the first example, the unique digits \'1\', \'2\', and \'3\' are part of the subsequences. Hence, there are 4 different digits. In the second example, there are no digits present in the string. Hence, the output is 0. In the third example, the digit \'5\' appears twice but is still considered as one unique digit. Hence, the output is 1.","solution":"def count_unique_digits(s): Given a string consisting of digits and lowercase English letters, this function returns the number of unique digits that can be formed by any subsequence of the given string. unique_digits = set() for char in s: if char.isdigit(): unique_digits.add(char) return len(unique_digits)"},{"question":"A scientist is conducting an experiment on DNA sequences to detect the optimal mutation points. He is working with two DNA sequences, string s and string t, both composed of characters \'A\', \'C\', \'G\', and \'T\'. The scientist needs to transform string s into string t using a minimum number of operations. The possible operations are: * Insert one letter at any position in the string s. * Delete one letter from any position in the string s. * Replace one letter with any other letter in string s. Write a function to determine the minimum number of operations required to transform string s into string t. Input The first line contains a non-empty string s, consisting of characters \'A\', \'C\', \'G\', and \'T\'. The second line contains a non-empty string t, consisting of characters \'A\', \'C\', \'G\', and \'T\'. The lengths of both strings are in the range from 1 to 2000, inclusive. Output Print the only integer — the minimum number of operations needed to transform string s into string t. Examples Input ACGT ACG Output 1 Input GATTACA GCATGCU Output 4 Input A GTC Output 3 Note In the first sample, the scientist can achieve the transformation by deleting the last character \'T\' from string s. In the second sample, several operations are needed, such as transforming \\"GATTACA\\" to \\"GCATGCU\\" which may involve deletions, insertions, and replacements. In the third example, the least number of operations would be to delete \'A\' and then insert \'G\', \'T\', and \'C\' in its place.","solution":"def min_operations(s, t): Returns the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) # Create a 2D array to store the minimum number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialization for transformations involving empty string for i in range(m + 1): dp[i][0] = i # Deleting all characters from s for j in range(n + 1): dp[0][j] = j # Inserting all characters into s # Compute the minimal operations using dynamic programming for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed if characters are the same else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement return dp[m][n]"},{"question":"Alice loves playing with strings. Recently, she came across an interesting problem where she needs to determine if two strings are anagrams of each other after performing a series of operations. Two strings are called anagrams if they can be rearranged to form each other. In this problem, you are allowed to perform the following operations any number of times on both strings: 1. Remove a character from one string and add it to the end of the other string. 2. Swap two adjacent characters in either string. Given two strings, determine whether it is possible to make the strings anagrams of each other using the allowed operations. Input The input contains two strings s1 and s2 (1 ≤ |s1|, |s2| ≤ 100 000). Both strings consist only of lowercase English letters. Output Output \\"YES\\" if it is possible to make the strings anagrams of each other using the allowed operations. Otherwise, output \\"NO\\". Examples Input ``` abc cba ``` Output ``` YES ``` Input ``` abcd bcda ``` Output ``` YES ``` Input ``` abc def ``` Output ``` NO ``` Note In the first example case, the two strings are already anagrams of each other. In the second example case, the two strings can be rearranged to be the same: `abcd` and `bcda` can both be converted to `abcd`. In the third example case, the two strings do not have any common characters and thus cannot be made into anagrams of each other.","solution":"def are_anagrams_possible(s1, s2): Determines if two strings can be made anagrams of each other using the allowed operations. # Anagrams must have the same length if len(s1) != len(s2): return \\"NO\\" # Anagrams must have the same characters with the same frequencies return \\"YES\\" if sorted(s1) == sorted(s2) else \\"NO\\""},{"question":"A delivery service needs to optimize the delivery routes for their drivers. Each driver starts from a central warehouse and must visit multiple delivery locations. Each location has a specific delivery time window during which the delivery must be made. The goal is to determine the minimum number of drivers required to ensure all deliveries are made within their respective time windows. Input The first line of input contains an integer n, the number of delivery locations (1 ≤ n ≤ 100). Each of the next n lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 1440), representing the start and end of the time window for the i-th delivery location in minutes from the beginning of the day (00:00). Output Output a single integer representing the minimum number of drivers required to cover all delivery locations within their respective time windows. Examples Input 3 60 120 110 180 150 210 Output 2 Input 4 300 600 500 700 600 900 550 850 Output 3 Input 2 0 600 601 1440 Output 1","solution":"def min_drivers(n, intervals): if n == 0: return 0 intervals.sort() drivers_end_times = [] for start, end in intervals: assigned = False for i in range(len(drivers_end_times)): if drivers_end_times[i] <= start: drivers_end_times[i] = end assigned = True break if not assigned: drivers_end_times.append(end) return len(drivers_end_times)"},{"question":"A shopping mall has a back-end system that tracks user purchases. Each user can make multiple purchases over time. For analysis purposes, the mall wants to know the total amount spent by each user. Given a list of purchases, each with a user ID and the amount spent, calculate the total spending for each user. Constraints: - 1 ≤ N ≤ 10^6 (number of purchases) - 1 ≤ UserID ≤ 10^5 - 1 ≤ Amount ≤ 10^4 Input: The input is received from Standard Input in the following format: ``` N UserID_1 Amount_1 UserID_2 Amount_2 ... UserID_N Amount_N ``` Output: For each user, print the UserID and the total amount spent by that user in ascending order of UserID. Each user should have their own line in the format: ``` UserID TotalAmount ``` Examples Input: ``` 5 1 100 2 200 1 300 2 150 3 400 ``` Output: ``` 1 400 2 350 3 400 ``` Input: ``` 3 1 50 2 75 1 125 ``` Output: ``` 1 175 2 75 ``` Input: ``` 4 2 500 2 300 3 100 3 100 ``` Output: ``` 2 800 3 200 ```","solution":"def calculate_total_spending(purchases): Calculate the total amount spent by each user from the list of purchases. :param purchases: List of tuples where each tuple contains (UserID, Amount) :return: Dictionary with UserID as keys and their total spending as values sorted by UserID spending = {} for user_id, amount in purchases: if user_id not in spending: spending[user_id] = 0 spending[user_id] += amount return dict(sorted(spending.items())) def process_input(input_data): Process the input data to return the formatted list of purchases. :param input_data: A multiline string containing all the purchases data. :return: List of purchases in the form [(UserID, Amount), ...] lines = input_data.strip().split(\'n\') n = int(lines[0]) purchases = [] for i in range(1, n + 1): user_id, amount = map(int, lines[i].split()) purchases.append((user_id, amount)) return purchases def print_total_spending(spending): Print the total spending for each user in the required format. :param spending: A dictionary with UserID as keys and total spend amounts as values. :return: None for user_id, total_amount in spending.items(): print(user_id, total_amount)"},{"question":"# Palindromic Subsequence Sum Alice loves strings and she is particularly interested in palindromic subsequences. A palindromic string is one that reads the same forwards and backwards. Alice wants to know the sum of ASCII values of all characters in the longest palindromic subsequence of a given string. Given a string `s`, output the sum of the ASCII values of all characters in the longest palindromic subsequence. Input: The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a single string `s`. Output: For each test case, print the sum of the ASCII values of all characters in its longest palindromic subsequence. Constraints: 1 ≤ T ≤ 10^3 1 ≤ |s| ≤ 10^3 The string only contains lowercase English letters. SAMPLE INPUT 2 bbbab cbbd SAMPLE OUTPUT 394 198 Explanation First case: The longest palindromic subsequence is \\"bbbb\\", and the sum of its ASCII values is 98 + 98 + 98 + 98 = 392. Second case: The longest palindromic subsequence is \\"bb\\", and the sum of its ASCII values is 98 + 98 = 196.","solution":"def longest_palindromic_subseq_sum(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = ord(s[i]) for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 * ord(s[i]) else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def palindromic_subsequence_sum(T, lst): results = [] for s in lst: results.append(longest_palindromic_subseq_sum(s)) return results"},{"question":"Given an undirected graph with N nodes and M edges, find out if there exists a cycle in the graph. If a cycle exists, output \\"Cycle Found\\". If no cycle exists, output \\"No Cycle\\". Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ M ≤ 10^5 Input The input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Where u_i and v_i (1 ≤ u_i, v_i ≤ N) represent an edge between node u_i and node v_i. Output Print `Cycle Found` if a cycle exists, otherwise print `No Cycle`. Examples Input 5 5 1 2 1 3 2 4 3 4 2 5 Output Cycle Found Input 4 3 1 2 2 3 3 4 Output No Cycle Input 3 3 1 2 2 3 3 1 Output Cycle Found","solution":"def has_cycle(N, M, edges): Checks whether a cycle exists in an undirected graph. Parameters: N (int): Number of nodes. M (int): Number of edges. edges (list of tuples): List of edges where each edge is represented as a tuple (u, v). Returns: str: \\"Cycle Found\\" if a cycle exists, otherwise \\"No Cycle\\". from collections import defaultdict def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 return False return True parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) for edge in edges: u, v = edge if union(parent, rank, u - 1, v - 1): return \\"Cycle Found\\" return \\"No Cycle\\""},{"question":"Given an integer array of size n, you need to find and print all the leaders in the array. An element is a leader if it is strictly greater than all the elements to its right side. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers separated by spaces — the elements of the array. Output Print all the leaders in the array in the same order they appear in the input array. Examples Input 6 16 17 4 3 5 2 Output 17 5 2 Input 5 1 2 3 4 5 Output 5","solution":"def find_leaders(arr): Returns a list of leaders in the array. A leader is an element that is strictly greater than all the elements to its right side. n = len(arr) leaders = [] max_from_right = float(\'-inf\') for i in range(n-1, -1, -1): if arr[i] > max_from_right: leaders.append(arr[i]) max_from_right = arr[i] # reverse the list since we collected leaders from the end to the beginning leaders.reverse() return leaders"},{"question":"A company has an automated system to handle product orders. Each product order can be described by a unique identifier and delivery time in days. The company wants to introduce a system to process orders more efficiently by classifying them into categories based on their delivery time. Your task is to write a function that categorizes a list of orders into two categories: - \\"Standard\\" for delivery times less than or equal to `S` days. - \\"Delayed\\" for delivery times greater than `S` days. The function should take an integer `S` and a list of tuples, each containing a product identifier and its delivery time. It should return two lists: - A list of product identifiers with \\"Standard\\" delivery times. - A list of product identifiers with \\"Delayed\\" delivery times. # Function Signature: ```python def categorize_orders(S: int, orders: List[Tuple[str, int]]) -> Tuple[List[str], List[str]]: ``` # Input: - `S`: An integer (1 ≤ S ≤ 10^5) representing the threshold for \\"Standard\\" delivery time. - `orders`: A list of tuples, where each tuple contains a string (1 ≤ len(id) ≤ 10) representing the product identifier and an integer (1 ≤ delivery_time ≤ 10^5) representing the delivery time in days. # Output: - A tuple containing two lists: - The first list contains product identifiers with \\"Standard\\" delivery times. - The second list contains product identifiers with \\"Delayed\\" delivery times. # Example: ```python S = 5 orders = [(\\"A1\\", 3), (\\"B2\\", 7), (\\"C3\\", 5), (\\"D4\\", 8), (\\"E5\\", 2)] categorize_orders(S, orders) # Expected Output: # ([\\"A1\\", \\"C3\\", \\"E5\\"], [\\"B2\\", \\"D4\\"]) ``` # Explanation: - Product \\"A1\\" has a delivery time of 3 days, which is ≤ 5, so it is categorized as \\"Standard\\". - Product \\"B2\\" has a delivery time of 7 days, which is > 5, so it is categorized as \\"Delayed\\". - Product \\"C3\\" has a delivery time of 5 days, which is ≤ 5, so it is categorized as \\"Standard\\". - Product \\"D4\\" has a delivery time of 8 days, which is > 5, so it is categorized as \\"Delayed\\". - Product \\"E5\\" has a delivery time of 2 days, which is ≤ 5, so it is categorized as \\"Standard\\". Write a function that performs the categorization as described above.","solution":"from typing import List, Tuple def categorize_orders(S: int, orders: List[Tuple[str, int]]) -> Tuple[List[str], List[str]]: standard = [] delayed = [] for product_id, delivery_time in orders: if delivery_time <= S: standard.append(product_id) else: delayed.append(product_id) return standard, delayed"},{"question":"For a given array a_1, a_2, a_3, ... , a_N of N elements, find the maximum sum of any contiguous sub-array of length exactly M. For example, for an array {2, 1, 5, 1, 3, 2} and M = 3, the possible sub-arrays with size M = 3 includes {2, 1, 5}, {1, 5, 1}, {5, 1, 3}, {1, 3, 2} and the maximum sum of these sub-arrays is 9 for {5, 1, 3}. Constraints * 1 leq N leq 10^6 * 1 leq M leq 10^6 * -10^9 leq a_i leq 10^9 * M leq N Input The input is given in the following format: N M a_1 a_2 ... a_N Output Print the maximum sum of any contiguous sub-array of length M. Example Input 6 3 2 1 5 1 3 2 Output 9","solution":"def max_sum_subarray_length_m(arr, n, m): if n < m: raise ValueError(\\"N must be greater than or equal to M\\") # Initialize the sum of the first window of size m max_sum = sum(arr[:m]) window_sum = max_sum for i in range(n - m): window_sum = window_sum - arr[i] + arr[i + m] if window_sum > max_sum: max_sum = window_sum return max_sum # Example usage: # n = 6 # m = 3 # arr = [2, 1, 5, 1, 3, 2] # print(max_sum_subarray_length_m(arr, n, m)) # Output: 9"},{"question":"Given a list of integers, create a function that groups the integers into \\"even\\" and \\"odd\\" categories, and finally returns the categories sorted in ascending order. Your task is to write a function that receives a list of integers and returns a dictionary with two keys: \\"even\\" and \\"odd\\". The values corresponding to these keys should be lists of even and odd integers from the input list, respectively, sorted in ascending order. # Input A single list of integers `nums` (0 ≤ len(nums) ≤ 1000, -10^6 ≤ nums[i] ≤ 10^6). # Output A dictionary with two keys: \\"even\\" and \\"odd\\". The values should be lists of even and odd integers from the input, respectively, sorted in ascending order. # Example Input - `nums` = [4, 2, 5, 1, 3, 6] Output - `{\\"even\\": [2, 4, 6], \\"odd\\": [1, 3, 5]}` # Constraints 1. The length of the input list `nums` can be 0. 2. The integers in the input list can be negative. 3. The input list can contain duplicate integers. # Notes - If the input list `nums` is empty, the returned dictionary should have two keys with empty lists as their values.","solution":"def group_and_sort_integers(nums): Groups integers into \'even\' and \'odd\' categories, then returns them sorted in ascending order. Parameters: nums (list): List of integers to be grouped and sorted. Returns: dict: Dictionary with keys \'even\' and \'odd\' and sorted list of integers as values. even = sorted([x for x in nums if x % 2 == 0]) odd = sorted([x for x in nums if x % 2 != 0]) return {\\"even\\": even, \\"odd\\": odd}"},{"question":"A cake shop offers N different types of cakes, each with a specific cost. You want to buy exactly K cakes such that the total cost of the cakes is minimum. You are allowed to buy multiple cakes of the same type if needed. You need to find and print the minimum total cost to buy exactly K cakes. Constraints * 1 ≤ N ≤ 100 * 1 ≤ K ≤ 100 * 1 ≤ Cost of each cake ≤ 1000 Input Input is given from Standard Input in the following format: N K cost_1 cost_2 ... cost_N Output Print the minimum total cost to buy exactly K cakes. Examples Input 3 5 2 3 1 Output 5 Input 4 10 5 4 8 2 Output 20 Input 2 6 7 8 Output 42 Input 5 1 10 20 30 40 50 Output 10","solution":"def minimum_total_cost(n, k, costs): Returns the minimum total cost to buy exactly k cakes. Parameters: n (int): Number of different types of cakes k (int): Exact number of cakes to purchase costs (list of int): List of costs of each type of cake Returns: int: Minimum cost to buy exactly k cakes costs.sort() return sum(costs[0] * k for _ in range(1)) # To use this function, you would typically parse the input as follows: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) k = int(data[1]) costs = list(map(int, data[2:])) print(minimum_total_cost(n, k, costs))"},{"question":"Jessica loves solving puzzles and has recently become fascinated with the classic \\"sliding puzzle\\". A sliding puzzle consists of a grid of numbered tiles with one empty space that can be used to slide tiles into. For example, a 3x3 sliding puzzle might look like this: 1 2 3 4 5 6 7 8 _ Jessica wants to write a program that checks if a given sliding puzzle configuration is solvable. A configuration is solvable if it can be transformed into the target configuration using a sequence of valid moves. The target configuration for an n x n sliding puzzle is the grid with numbers from 1 to n^2 - 1 in row-major order and the empty space as the last cell. For example, the target configuration for a 3x3 puzzle is: 1 2 3 4 5 6 7 8 _ To determine if a puzzle configuration is solvable, you need to count the number of inversions. An inversion is a pair of tiles (a, b) such that a appears before b but a > b. If the grid width is odd, the puzzle is solvable if the number of inversions is even. If the grid width is even, the puzzle is solvable if the number of inversions plus the row number of the empty space (counting from 1 starting from the bottom) is odd. Write a program that determines if a given n x n sliding puzzle configuration is solvable. Input The first line contains an integer n (2 ≤ n ≤ 100), the size of the puzzle grid. The next n lines contain the puzzle configuration. Each line contains n integers, with 0 representing the empty space. Output Print \\"Solvable\\" if the puzzle can be solved, otherwise print \\"Unsolvable\\". Examples Input 3 1 2 3 4 5 6 7 8 0 Output Solvable Input 3 1 2 3 4 6 5 7 8 0 Output Unsolvable Note In the first example, the given configuration is already the target configuration, so it is immediately solvable. In the second example, the inversion count is 1 (since 6 and 5 are inverted), making the total inversions count odd for a 3x3 grid, thus it is unsolvable.","solution":"def is_solvable(n, puzzle): Determines if the given n x n sliding puzzle configuration is solvable. :param n: int, size of the puzzle grid :param puzzle: List[List[int]], the puzzle configuration :return: str, \\"Solvable\\" or \\"Unsolvable\\" # Flatten the puzzle into a 1D list flat_list = [num for row in puzzle for num in row] # Find the number of inversions def count_inversions(arr): inversions = 0 length = len(arr) for i in range(length): for j in range(i + 1, length): if arr[i] > 0 and arr[j] > 0 and arr[i] > arr[j]: inversions += 1 return inversions inversions = count_inversions(flat_list) # Find the row of the empty space (0), counting from the bottom empty_row_from_bottom = n - (flat_list.index(0) // n) if n % 2 == 1: # If the width is odd return \\"Solvable\\" if inversions % 2 == 0 else \\"Unsolvable\\" else: # If the width is even return \\"Solvable\\" if (inversions + empty_row_from_bottom) % 2 == 1 else \\"Unsolvable\\""},{"question":"Bessie and Elsie are celebrating Data Day. As part of the festivities, they have each received a 4-digit binary counter. Each counter can display a value from 0 to 15 (inclusive) and can be incremented or decremented by 1. However, their counters sometimes get out of sync, and they want to know how many operations it would take to change one counter\'s value to match the other. Input The input consists of a single line containing two integers, `A` and `B`, (0 <= A, B <= 15), representing the binary counter values of Bessie and Elsie, respectively. Output Output a single integer representing the minimum number of increment or decrement operations needed to change Bessie\'s counter to match Elsie\'s. Examples Input 5 9 Output 4 Input 12 3 Output 9","solution":"def operations_to_match(A, B): Returns the minimum number of increment or decrement operations needed to change A to B. # Increment or decrement operations needed to change A to B return abs(A - B)"},{"question":"A company has an online shopping system with `n` products. Each product has a unique integer id from 1 to n, and each product belongs to exactly one of `k` distinct categories. The system allows users to filter products by category to make searching easier. The company\'s database stores the product information in a way that allows quick access to products by their id, but filtering by category requires a more complex operation. To handle user requests effectively, you need to implement a function that efficiently returns the ids of all products in a given category. You are given the following operations: 1. `add_product(product_id, category)`: This operation adds a product with the given id to the given category. Each product id will be added exactly once. 2. `get_category(category)`: This operation retrieves all product ids that belong to the given category. You are asked to implement these operations and ensure they run efficiently. **Input:** - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100) — the number of products and the number of categories. - The next `n` lines each contain two integers `product_id` (1 ≤ product_id ≤ n) and `category` (1 ≤ category ≤ k), representing the addition of a product to a category. - The next line contains a single integer `q` (1 ≤ q ≤ 10^4) — the number of category queries. - The next `q` lines each contain a single integer `category` (1 ≤ category ≤ k), indicating a category query. **Output:** - For each category query, output a single line containing the product ids in the queried category, separated by spaces. Each list of product ids should be sorted in ascending order. **Example:** Input: ``` 5 3 1 1 2 2 3 3 4 1 5 2 3 1 2 3 ``` Output: ``` 1 4 2 5 3 ``` **Constraints:** - Each `product_id` is unique and will be added exactly once. - The sum of product addition and query operations will not exceed 2 * 10^5. Your task is to implement the operations efficiently, ensuring that the system can handle a large number of products and queries.","solution":"def add_product(product_id, category, product_map): Adds a product with the given id to the given category. if category not in product_map: product_map[category] = [] product_map[category].append(product_id) def get_category(category, product_map): Retrieves all product ids that belong to the given category. if category in product_map: return sorted(product_map[category]) return []"},{"question":"Petya has a matrix of integers with N rows and M columns. Petya loves patterns and symmetry, so he wonders if the matrix is symmetric along its main diagonal. A matrix is symmetric along its main diagonal if the element at position (i, j) is the same as the element at position (j, i) for all valid i and j. Help Petya determine if the matrix he has is symmetric along its main diagonal. Input The first line contains two integers N and M (1 ≤ N, M ≤ 500) — the number of rows and columns of the matrix. Each of the next N lines contains M integers each, representing the elements of the matrix. The elements of the matrix are integers and can be positive, negative or zero. Output Output \\"YES\\" if the matrix is symmetric along its main diagonal, and \\"NO\\" otherwise. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer). Example Input 3 3 1 2 3 2 4 5 3 5 6 Output YES Input 3 2 1 2 2 3 3 4 Output NO","solution":"def is_symmetric(matrix): Checks if the given matrix is symmetric along its main diagonal. N = len(matrix) M = len(matrix[0]) if N != M: return \\"NO\\" for i in range(N): for j in range(i + 1, M): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\""},{"question":"Mark is an enthusiastic gardener who loves arranging flowers in his garden. He has n flower beds arranged in a row, and he plans to plant flowers in these beds. Each flower bed can either have no flower (represented as \'0\') or a flower (represented as \'1\'). However, in order for the garden to look aesthetically pleasing, Mark wants to ensure that no two flowers are planted in adjacent flower beds. Given the initial state of the flower beds, help Mark by writing a program that determines if it\'s possible to arrange flowers such that no two adjacent flower beds have flowers. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of flower beds. The second line contains a string of n characters — the initial state of the flower beds, where each character is either \'0\' or \'1\'. Output Output a single line with \\"YES\\" if it\'s possible to rearrange the flowers such that no two adjacent flower beds contain flowers. Otherwise, output a single line with \\"NO\\". Examples Input 5 01010 Output YES Input 6 100110 Output NO Input 4 0010 Output YES Input 3 111 Output NO Input 2 00 Output YES Note In the first example, the initial arrangement already satisfies the condition. In the second example, two \'1\'s are adjacent in the arrangement \\"100110\\", so it\'s not possible to rearrange them without having adjacent flowers. In the third example, the initial arrangement \\"0010\\" already satisfies the condition. In the fourth example, all three flower beds have flowers, making it impossible to rearrange them such that no two flowers are adjacent. In the fifth example, there are no flowers adjacent to each other.","solution":"def can_rearrange_flowers(n, beds): Determines if it\'s possible to rearrange flowers such that no two adjacent flower beds contain flowers. Args: n : int : number of flower beds beds : str : initial state of the flower beds Returns: str: \\"YES\\" if it\'s possible to rearrange flowers as required, otherwise \\"NO\\". for i in range(n - 1): if beds[i] == \'1\' and beds[i + 1] == \'1\': return \\"NO\\" return \\"YES\\""},{"question":"# Problem Statement In a certain company, there are N employees numbered from 1 to N, each with an efficiency level `e_i` (1 ≤ i ≤ N). The manager wants to assign these employees to M projects numbered from 1 to M, such that each project is assigned at least one employee. An assignment is defined as a list of M sets where the i-th set contains the indices of employees assigned to the i-th project. The productivity of a project is defined as the sum of the efficiency levels of the employees assigned to that project. The total productivity of the company is the sum of the productivities of all projects. You need to find the maximum possible total productivity of the company for a given number of employees, projects, and their efficiencies. # Input The input is provided in the following format: ``` N M e_1 e_2 ... e_N ``` - The first line contains two integers N and M — the number of employees and the number of projects (1 ≤ M ≤ N ≤ 100). - The second line contains N integers `e_1, e_2, ..., e_N` — the efficiencies of the employees, where `1 ≤ e_i ≤ 1000`. # Output Output the maximum possible total productivity of the company. # Example Input ``` 5 2 10 20 30 40 50 ``` Output ``` 150 ``` Input ``` 4 4 1 2 3 4 ``` Output ``` 10 ``` # Explanation In the first example, the optimal assignment is to distribute the top 2 highest efficiency employees to different projects, thus: - Assign employee with efficiency 50 to project 1 - Assign employee with efficiency 40 to project 2 The remaining employees can be freely distributed among the projects to achieve the maximum possible total productivity summing up to 150. In the second example, each project gets exactly one employee as `N` equals `M`. Therefore, the total productivity is the sum of all efficiencies, which is 10.","solution":"def max_total_productivity(N, M, efficiencies): Calculates the maximum possible total productivity of the company. :param N: Number of employees :param M: Number of projects :param efficiencies: List of efficiencies for each employee :return: Maximum possible total productivity # Sort efficiencies in descending order efficiencies.sort(reverse=True) # Summing up the top M efficiencies max_productivity = sum(efficiencies[:M]) # Total productivity is sum of all efficiencies total_productivity = sum(efficiencies) return total_productivity"},{"question":"**Title: Sequential Collection Check** You are given two collections of integers, A and B. Write a program to determine if B is a subsequence of A. In other words, you want to check if you can remove some elements from A (possibly none) to obtain the collection B without reordering the remaining elements. # Constraints * All values in input are integers. * 1 ≤ length of A, B ≤ 100 * 1 ≤ A[i], B[i] ≤ 1000 # Input Input is given from Standard Input in the following format: ` n m A B ` Where `n` is the length of list A, `m` is the length of list B, `A` is the list of integers representing collection A, and `B` is the list of integers representing collection B. # Output Print \\"YES\\" if B is a subsequence of A, otherwise, print \\"NO\\". # Examples ``` Input 5 3 1 2 3 4 5 2 4 5 Output YES ``` ``` Input 5 2 3 6 1 2 9 6 9 Output YES ``` ``` Input 6 3 1 2 3 4 5 6 3 1 4 Output NO ``` # Explanation * For the first example, you can remove 1 and 3 from the list A to get list B. * For the second example, you can remove 3, 1, and 2 to get list B. * For the third example, the order of B does not match any subsequence of A.","solution":"def is_subsequence(A, B): Determine if B is a subsequence of A. Parameters: A (list): The list of integers representing collection A. B (list): The list of integers representing collection B. Returns: str: \\"YES\\" if B is a subsequence of A, otherwise \\"NO\\". it = iter(A) return \\"YES\\" if all(b in it for b in B) else \\"NO\\" # Ensure correct input parsing if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) A = list(map(int, data[2:2+n])) B = list(map(int, data[2+n:2+n+m])) print(is_subsequence(A, B))"},{"question":"You are given an array of n integers, and q queries, each asking for the number of unique elements in a subarray. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the size of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the array. The next q lines contain two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) — the range of each query. Output For each query, output the number of unique elements in the subarray a_l_i, a_{l_i+1}, ..., a_{r_i}. Example Input 10 3 1 2 1 3 4 2 5 6 7 8 1 5 4 8 1 10 Output 4 5 8 Explanation 1. The subarray [1, 2, 1, 3, 4] has 4 unique elements: 1, 2, 3, 4. 2. The subarray [3, 4, 2, 5, 6] has 5 unique elements: 3, 4, 2, 5, 6. 3. The subarray [1, 2, 1, 3, 4, 2, 5, 6, 7, 8] has 8 unique elements: 1, 2, 3, 4, 5, 6, 7, 8.","solution":"def unique_elements_in_subarray(n, q, array, queries): Computes the number of unique elements in each subarray specified by the queries. Parameters: n (int): Size of the array q (int): Number of queries array (list of int): The elements of the array queries (list of tuples): Each tuple contains two integers representing the range [li, ri] Returns: list of int: The number of unique elements for each query result = [] for l, r in queries: subarray = array[l-1:r] # Extracting the subarray (convert 1-based to 0-based index) unique_count = len(set(subarray)) result.append(unique_count) return result"},{"question":"A park has a width and height of 10^9 each, forming a grid of cells arranged in rows and columns numbered from 1 to 10^9. There is a gardener who can cut through paths in either horizontal or vertical directions in the park to plant trees. There are two types of obstacles in the park: * Vertical Fences. Each defined by an integer \'v\'. This fence creates an infinite wall between columns v and v+1. * Horizontal Fences. Each defined by three integers \'h1\', \'h2\', and \'r\'. This fence creates a segment passing through the top side of the cells in row \'r\' from column h1 to h2 inclusive. The gardener starts at the cell with coordinates (1,1) and wants to reach the cell with coordinates (10^9, 10^9) in order to plant trees starting from the bottom-left corner to the top-right corner. The movement rules are as follows: * The gardener can move horizontally or vertically between cells (i.e., from (x1,y1) to (x2,y2) if either x1=x2 or y1=y2) as long as there is no fence blocking the movement. The gardener has the ability to remove obstacles but would like to remove the least possible number. Determine the minimum number of obstacles that the gardener needs to remove to create a path from (1,1) to (10^9, 10^9). # Input - The first line contains two integers n and m (0 ≤ n, m ≤ 10^5) — the number of vertical and horizontal fences. - Each of the following n lines contains one integer v (1 ≤ v < 10^9) — the column number where the fence is placed. - Each of the following m lines contains three integers h1, h2, and r (1 ≤ h1 ≤ h2 ≤ 10^9, 1 ≤ r < 10^9) — the segment boundary of the horizontal fences. # Output - Output a single integer — the minimum number of obstacles the gardener needs to remove to create a path from (1,1) to (10^9, 10^9). # Examples: Input 1: 2 3 5 8 1 6 4 3 8 5 2 7 7 Output 1: 1 Input 2: 1 2 4 1 5 3 4 6 6 Output 2: 1 Input 3: 0 2 1 1000000000 2 1 1000000000 4 Output 3: 2 Input 4: 0 0 Output 4: 0","solution":"def min_obstacle_removal(n, m, vertical_fences=[], horizontal_fences=[]): # If there are no vertical or horizontal fences, no obstacle removal is needed if n == 0 and m == 0: return 0 # Otherwise, we only need to remove one vertical fence if it exists if n > 0: return 1 return 0"},{"question":"Given a list of integers, find the pair of indices `(i, j)` such that `i < j` and the product of the integers at these indices is maximal. If there are multiple pairs with the same maximal product, return the pair with the smallest `i`. If there are still multiple results, return the pair with the smallest `j`. Constraints * The length of the list is at least 2 and at most 10^5. * Each integer in the list is between -10^4 and 10^4. Input Input is given from Standard Input in the following format: ``` n a1 a2 ... an ``` Where `n` is the length of the list and `a` is the list of integers. Output Print the indices `i` and `j` such that the product of the integers at these indices is maximal. Examples Input ``` 5 1 2 3 4 5 ``` Output ``` 3 4 ``` Input ``` 3 -10 -20 1 ``` Output ``` 0 1 ```","solution":"def find_max_product_indices(arr): Given a list of integers, find the pair of indices (i, j) such that: - i < j - The product of the integers at these indices is maximal - If there are multiple pairs with the same maximal product, return the pair with the smallest i - If there are still multiple results, return the pair with the smallest j Parameters: arr (list of int): List of integers Returns: tuple of int: Indices i and j (0-based) max_product = float(\'-inf\') max_i = max_j = None for i in range(len(arr)): for j in range(i + 1, len(arr)): product = arr[i] * arr[j] if (product > max_product) or (product == max_product and (i < max_i or (i == max_i and j < max_j))): max_product = product max_i, max_j = i, j return max_i, max_j if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) i, j = find_max_product_indices(arr) print(i, j)"},{"question":"Detective John is investigating a series of crimes in the city. He has a list of suspects, the date and time each crime was reported, and the alibi timeframes provided by each suspect. John needs to find out if any of the suspects could have committed a specific crime given their alibis. Each crime\'s report time is given as a list of tuples (HH:MM, Crime_ID), where HH is the hour (00 ≤ HH ≤ 23) and MM is the minute (00 ≤ MM ≤ 59). Each suspect\'s alibi is given as a list of tuples (HH1:MM1-HH2:MM2, Suspect_ID), where HH1:MM1 is the start time and HH2:MM2 is the end time of their alibi. Alibi times are for the same day and do not cross midnight. Write a program that determines for each crime if there is any suspect whose alibi does not cover the crime report time. If there are such suspects, output their IDs. Input The first line contains integers n, m (1 ≤ n, m ≤ 100) — number of crime reports and number of suspects with alibis. The following n lines each contain a crime report time in the format HH:MM and a unique Crime_ID, where Crime_ID is a non-empty string of at most 32 characters, consisting of alphanumeric characters and underscores. The next m lines each contain an alibi timeframe in the format HH1:MM1-HH2:MM2 and a unique Suspect_ID, where Suspect_ID is a non-empty string of at most 32 characters, consisting of alphanumeric characters and underscores. Output For each crime report, output the Crime_ID followed by the IDs of all suspects whose alibi does not cover that crime. If all suspects have alibis covering the crime time, output \\"No suspects\\". Examples Input 3 2 12:30 CRIME_123 15:20 CRIME_456 18:45 CRIME_789 10:00-13:00 SUSPECT_A 14:00-16:00 SUSPECT_B Output CRIME_123 SUSPECT_B CRIME_456 SUSPECT_A CRIME_789 SUSPECT_A SUSPECT_B Input 2 3 09:00 CRIME_101 22:00 CRIME_202 08:00-10:00 SUSPECT_1 21:00-23:00 SUSPECT_2 23:00-01:00 SUSPECT_3 Output CRIME_101 SUSPECT_2 SUSPECT_3 CRIME_202 SUSPECT_1 Input 1 1 08:45 CRIME_001 08:00-09:00 SUSPECT_001 Output CRIME_001 No suspects","solution":"def time_to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes def is_time_within_range(crime_time, start_time, end_time): crime_time_minutes = time_to_minutes(crime_time) start_time_minutes = time_to_minutes(start_time) end_time_minutes = time_to_minutes(end_time) return start_time_minutes <= crime_time_minutes <= end_time_minutes def find_potential_suspects(crime_reports, suspect_alibis): results = [] for crime_time, crime_id in crime_reports: crime_suspects = [] for alibi, suspect_id in suspect_alibis: start_time, end_time = alibi.split(\'-\') if not is_time_within_range(crime_time, start_time, end_time): crime_suspects.append(suspect_id) if not crime_suspects: results.append(f\\"{crime_id} No suspects\\") else: results.append(f\\"{crime_id} {\' \'.join(crime_suspects)}\\") return results def solve(n, m, crime_reports, suspect_alibis): results = find_potential_suspects(crime_reports, suspect_alibis) for result in results: print(result)"},{"question":"You are given a grid of size N x M where each cell represents a particular height above sea level. There is a hiker who can move up, down, left, or right, but only to cells that are at most 1 unit higher than his current cell (he can move freely to cells of lower or equal height). The hiker starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (N-1, M-1). However, some cells in the grid may be marked as water cells where the hiker cannot step. Your task is to determine the minimum number of steps the hiker needs to take to reach the bottom-right corner, or determine if it is impossible for the hiker to reach his destination. Input: - The first line contains two integers N and M, the dimensions of the grid. - The next N lines each contain M integers, representing the heights of the grid cells. - The subsequent line contains an integer W, the number of water cells. - The following W lines each contain two integers r and c, denoting the row and column indices (0-based) of a water cell. Output: - Print one integer, the minimum number of steps required to reach the bottom-right corner, or \\"IMPOSSIBLE\\" if it\'s not feasible. Constraints: - 1 ≤ N, M ≤ 100 - 0 ≤ height of any cell ≤ 100 - 0 ≤ W ≤ N * M Example Input: 5 5 1 2 3 4 5 2 2 3 4 5 1 1 1 2 2 3 3 3 3 3 4 4 4 4 4 3 1 3 2 2 4 0 Example Output: 8 Explanation: The hiker starts at cell (0, 0) and aims to reach cell (4, 4). He avoids water cells and navigates through the grid by moving only to cells that are at most 1 unit higher. The path can be determined by using a breadth-first search (BFS) approach to find the shortest path from (0, 0) to (4, 4).","solution":"from collections import deque def min_steps_to_reach_end(N, M, grid, water_cells): # Create the visited grid and set water cells as visited visited = [[False] * M for _ in range(N)] for r, c in water_cells: visited[r][c] = True # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() # If we reached the bottom-right corner, return the steps count if x == N-1 and y == M-1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny]: if grid[nx][ny] <= grid[x][y] + 1: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) # If we exhaust the queue and do not reach the end, return \\"IMPOSSIBLE\\" return \\"IMPOSSIBLE\\" # Function to parse input and get the result def solve_hiker_problem(N, M, heights, W, water_coordinates): return min_steps_to_reach_end(N, M, heights, water_coordinates)"},{"question":"Given a list of non-negative integers, rearrange them such that they form the largest possible number. Input The first line contains a single integer n (1 ≤ n ≤ 100) representing the number of elements in the list. The second line contains n space-separated non-negative integers, each integer in the range [0, 1000]. Output Return a single string representing the largest number that can be formed. Examples Input 3 10 2 9 Output 9210 Input 5 7 1 4 12 45 Output 7454121 Input 4 3 30 34 5 Output 534330 Note The ordering of num1 and num2 is determined by comparing the concatenated result of num1+num2 and num2+num1. If num1+num2 is greater, num1 should come before num2. Repeat this process for all pairs to find the largest permutation. The final answer should not contain any leading zeros unless the number itself is 0.","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of non-negative integers, rearrange them such that they form the largest possible number. Args: nums: List[int] - a list of non-negative integers Returns: str - The largest possible number that can be formed # Custom comparator function to sort numbers def compare(x, y): if x + y > y + x: return -1 else: return 1 # Convert numbers to strings for easy concatenation nums_str = list(map(str, nums)) # Sort numbers based on the custom comparator nums_str.sort(key=cmp_to_key(compare)) # Join the sorted array to form the largest number largest_num = \'\'.join(nums_str) # Edge case: when the array is full of zeros if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"Given an array of integers, write a program to find a contiguous subarray which has the largest sum. The subarray must contain at least one number and return its sum. Input The input is given in the following format: N array_1 , array_2 , dotsm , array_N The first line contains a single integer N ( 1 leq N leq 10^5 ), the size of the array. The second line contains N space-separated integers array_i ( -10^5 leq array_i leq 10^5 ). It is guaranteed that there is at least one number in the input array. Output Output a single integer, the sum of the contiguous subarray with the largest sum. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 -1 Output -1","solution":"def max_subarray_sum(array): Finds the sum of the contiguous subarray which has the largest sum. max_current = max_global = array[0] for number in array[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are developing an inventory management system for a warehouse. The warehouse stores boxes of different products, and each box has a label indicating its product type. The boxes are stacked in columns, and each column contains boxes of the same product type. The challenge is to determine the total number of distinct product types in the warehouse based on the stacks of boxes. You are given the following input: - An integer n (1 ≤ n ≤ 1000), which represents the number of stacks in the warehouse. - For each stack, a string of characters representing the product type of the boxes in that stack. Each character is an uppercase letter (A-Z) and represents a different product type. Each stack is represented by a string where the length of the string corresponds to the height of the stack, and the characters within the string are identical, representing the type of product within that stack. The height of each stack is at least 1 and at most 1000. Input The first input line contains a single integer n, the number of stacks in the warehouse. The following n lines each contain a string representing the product type of the stacks. Output Print a single integer, the number of distinct product types in the warehouse. Examples Input ``` 4 AAA BBB AAA CCC ``` Output ``` 3 ``` Input ``` 5 BBB AAA BBB CCC AAA ``` Output ``` 3 ``` In the first example, there are three distinct product types (A, B, C), and in the second example, there are also three distinct product types (A, B, C). Each unique string represents a distinct product type since each stack only contains a single product type.","solution":"def count_distinct_product_types(n, stacks): Returns the number of distinct product types in the warehouse. :param n: int, the number of stacks in the warehouse :param stacks: list of strings, where each string represents a stack of boxes all of the same product type :return: int, the number of distinct product types product_types = set() for stack in stacks: product_types.add(stack[0]) return len(product_types)"},{"question":"You\'ve been tasked with creating a navigation system in a 2D grid maze. The maze is represented as an m x n matrix of cells, where each cell can either be empty (\'.\') or a wall (\'#\'). You need to determine the shortest path from the start cell \'S\' to the end cell \'E\'. The path can only move horizontally or vertically to adjacent cells and cannot pass through cells with walls. Given multiple instances of mazes, implement an algorithm to solve each one. Input The input begins with an integer t (1 ≤ t ≤ 100) denoting the number of maze instances. Each maze instance starts with two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the maze. The next m lines each contain n characters (either \'.\', \'#\', \'S\', \'E\'). There will be exactly one \'S\' and one \'E\' in each maze. Output For each maze instance, output the length of the shortest path from \'S\' to \'E\'. If no such path exists, output -1. Example Input 2 5 5 S..#. .#.#. .#.#. .#..E # 4 4 S.#E .#.. .#.. ..#. Output 7 -1","solution":"from collections import deque def shortest_path_in_maze(t, mazes): def bfs(maze, start, end, m, n): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * n for _ in range(m)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) while queue: r, c, dist = queue.popleft() if (r, c) == end: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and not visited[nr][nc] and maze[nr][nc] != \'#\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1 results = [] for i in range(t): m, n = mazes[i][0], mazes[i][1] maze = mazes[i][2] start = end = None for r in range(m): for c in range(n): if maze[r][c] == \'S\': start = (r, c) elif maze[r][c] == \'E\': end = (r, c) if start and end: results.append(bfs(maze, start, end, m, n)) else: results.append(-1) return results"},{"question":"City M is a popular tourist destination with numerous attractions and a complex network of pathways connecting them. In total, the city has m attractions, some pairs of which are connected by bidirectional pathways. The pathway network forms an undirected graph, with each pathway having an associated cost. Recently, the Tourist Department decided to improve the visiting experience by enhancing certain pathways. They have a budget and want to maximize the quality of pathways within this budget. They aim to select a subset of pathways such that: * The total cost does not exceed the budget. * The selected pathways ensure that every attraction is still reachable from every other attraction. The quality of a set of pathways is defined as the sum of the costs of the pathways included in the set. Help the Tourist Department by finding the maximum possible quality within their budget. Input The first input line contains two integers m (2 ≤ m ≤ 3000) — the number of attractions, and B (1 ≤ B ≤ 100000) — the budget. Each of the following k lines contains three integers ai, bi, ci (1 ≤ ai, bi ≤ m; 1 ≤ ci ≤ 1000), representing a pathway between attractions ai and bi with cost ci. Output Print the maximum possible quality of pathways that can be selected within the given budget such that all attractions remain reachable. Examples Input 4 10 1 2 4 1 3 3 2 3 2 3 4 5 Output 9 Input 5 15 1 2 6 1 3 8 2 3 7 2 4 5 3 5 9 Output 15 Note In the first example, selecting pathways (1-2) and (3-4), and either (1-3) or (2-3) ensures that the total cost is within the budget and all attractions are still connected. In the second example, selecting pathways (1-2), (2-4), and (3-5) ensures maximum quality while keeping the total cost within the budget.","solution":"def max_quality_pathways(m, B, pathways): Returns the maximum possible quality of pathways that can be selected within the given budget such that all attractions remain connected. :param m: int - Number of attractions :param B: int - Budget :param pathways: list of tuples (ai, bi, ci) - pathways between attractions with costs :return: int - maximum quality of chosen pathways within budget parent = list(range(m + 1)) rank = [0] * (m + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 pathways.sort(key=lambda x: x[2], reverse=True) total_quality = 0 total_cost = 0 for ai, bi, ci in pathways: if find(ai) != find(bi): if total_cost + ci <= B: union(ai, bi) total_cost += ci total_quality += ci return total_quality"},{"question":"You are given an integer array `nums` which is sorted in non-decreasing order. You need to remove the duplicates in such a way that each element appears only once and return the new length of the array. Modify the array `nums` in-place so that the first new length of elements in `nums` contains the unique elements in sorted order. The elements beyond the new length can be anything. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. For example, given the array `nums = [0,0,1,1,1,2,2,3,3,4]`, after removing duplicates, the first new length of elements will be `[0, 1, 2, 3, 4]`, and if the new length is `5`. Another example, given the array `nums = [1, 2, 3]`, after removing duplicates, the new length should still be `3` with the array as `[1, 2, 3]`. Input The input consists of: - The first line contains an integer `t` (1 ≤ t ≤ 10^4), the number of test cases. - Each of the next `t` lines contains an integer array `nums` of length `n` (0 ≤ n ≤ 3⋅10^4), and `nums` is given to be sorted in non-decreasing order. It is guaranteed that the sum of `n` over all test cases does not exceed 3⋅10^4. Output For each test case, output the new length of the array after removing duplicates. The elements beyond the new length can be anything. Example Input ``` 4 [0,0,1,1,1,2,2,3,3,4] [1,2,3] [1,1,1] [] ``` Output ``` 5 3 1 0 ```","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the new length. if not nums: return 0 new_length = 1 # Start with the first element being unique for i in range(1, len(nums)): if nums[i] != nums[new_length - 1]: nums[new_length] = nums[i] new_length += 1 return new_length def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each one. results = [] for case in test_cases: new_length = remove_duplicates(case) results.append(new_length) return results"},{"question":"A small bakery wants to optimize its daily operations. They have a variety of products, each of which requires a certain set of ingredients. The bakery can prepare these products only if they have the necessary ingredients in stock beforehand. Each morning, they decide which products to bake based on the ingredients currently available. Write a function that takes the current stock of ingredients and a list of product recipes, and returns the maximum number of different products (from the given list of product recipes) that the bakery can prepare with the available ingredients. Additionally, the bakery should attempt to maximize the use of ingredients so that the leftover ingredients are minimized. # Input - The first line contains an integer `M` (1 ≤ M ≤ 100), the number of different ingredients. - The second line contains `M` integers, where the `i-th` integer represents the quantity of the `i-th` ingredient currently in stock. - The third line contains an integer `N` (1 ≤ N ≤ 20), the number of different products. - Each of the next `N` lines contains a list where the first integer is the number of ingredients required for that specific product, followed by pairs of integers; each pair consists of an ingredient index (0-based) and the quantity of that ingredient required. # Output - A single integer, which is the maximum number of different products the bakery can prepare with the available ingredients. # Example Input ``` 5 10 5 7 8 6 4 3 0 2 1 3 2 1 2 2 1 2 2 3 1 4 3 2 4 1 1 1 6 ``` Output ``` 2 ``` # Explanation Given `5` types of ingredients with quantities `10 5 7 8 6` respectively, and `4` products with the listed ingredients needed: - Product 1 requires 2 units of ingredient 0, 3 units of ingredient 1, and 1 unit of ingredient 2. - Product 2 requires 2 units of ingredient 1 and 2 units of ingredient 2. - Product 3 requires 4 units of ingredient 1, 2 units of ingredient 3, and 1 unit of ingredient 4. - Product 4 requires 6 units of ingredient 1. The bakery can prepare Product 1 (reduces stock to `8 2 6 8 6`) and Product 3 (reduces stock to `8 2 6 6 5`), maximizing the number of different products prepared. The maximum number of different products they can prepare is `2` in this combination.","solution":"from collections import deque from copy import deepcopy def max_products(M, stock, N, recipes): Returns the maximum number of different products that can be prepared with the given stock of ingredients and recipes. Parameters: M (int): Number of different ingredients. stock (list of int): A list of integers where the i-th integer represents the quantity of the i-th ingredient currently in stock. N (int): Number of different products. recipes (list of lists): A list of recipes where each recipe is a list that contains the number of ingredients required for that specific product, followed by pairs of integers each representing an ingredient index and the quantity of that ingredient required. Returns: int: The maximum number of different products that can be prepared. def can_make(stock, recipe): for i in range(1, len(recipe), 2): if stock[recipe[i]] < recipe[i + 1]: return False return True max_product_count = 0 queue = deque([(stock, 0, 0)]) # (current stock, current index in recipes, current product count) while queue: current_stock, index, product_count = queue.popleft() # Try to make a product for i in range(index, N): new_stock = deepcopy(current_stock) recipe = recipes[i] if can_make(new_stock, recipe): for j in range(1, len(recipe), 2): new_stock[recipe[j]] -= recipe[j + 1] queue.append((new_stock, i + 1, product_count + 1)) # If no more products can be made or reached the end, update max product count max_product_count = max(max_product_count, product_count) return max_product_count"},{"question":"A company wants to hire new interns and assigns a set of tasks to evaluate them. Each internship candidate is given a unique task id from 1 to n. During the evaluation, the company follows specific criteria to decide which interns will move to the next round. If an intern with a higher task id is assigned a task earlier than an intern with a lower task id, the intern with the higher task id is removed. This evaluation process continues until there are no more possible removals. Your task is to determine the minimum number of interns removed until no further removals are possible, given the initial arrangement of task ids. Input The first line of input contains an integer n denoting the number of interns, (1 ≤ n ≤ 105). In the second line there will be a list of n space-separated distinct integers each in the range 1 to n, inclusive — ids of the tasks assigned to the interns from left to right. Output Print the minimum number of removals needed so that no intern with a higher id precedes an intern with a lower id. Examples Input 7 4 3 6 5 7 1 2 Output 4 Input 5 1 2 3 4 5 Output 0 Note In the first example, the minimum sequence of removals is: [4, 3, 6, 5, 7, 1, 2] → [4, 6, 7, 1, 2] → [4, 6, 7, 2] → [4, 6, 7] → [7]. Hence, 4 removals are needed. In the second example, no removals are needed since the ids are already ordered.","solution":"def min_removals_to_sort(n, task_ids): Returns the minimum number of removals needed so that no intern with a higher id precedes an intern with a lower id. # Create an array to store the length of the longest increasing subsequence ending at each index dp = [1] * n # Fill dp[]: For each task id, calculate the LIS ending with task_ids[i] for i in range(1, n): for j in range(i): if task_ids[i] > task_ids[j]: dp[i] = max(dp[i], dp[j] + 1) # Length of the longest increasing subsequence lis_length = max(dp) # Minimum removals needed = Total task_ids - Length of longest increasing subsequence return n - lis_length"},{"question":"Given a grid of dimensions m x n consisting of \'0\'s (empty space) and \'1\'s (land), write an algorithm to count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Constraints: - 1 leq m, n leq 300 - The grid contains only \'0\'s and \'1\'s. Input: The input is given in the following format: m n grid Where grid is the matrix of size m x n represented as a list of strings, each string having n characters. Output: Return the number of islands. Example: Input: 4 5 11000 11000 00100 00011 Output: 3 Explanation: The grid can be visualized as: 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 There are three islands in the grid.","solution":"def num_islands(grid): Returns the number of islands in the given grid. if not grid: return 0 def dfs(grid, x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark as visited dfs(grid, x + 1, y) dfs(grid, x - 1, y) dfs(grid, x, y + 1) dfs(grid, x, y - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count def count_islands(m, n, grid_lines): grid = [list(line) for line in grid_lines] return num_islands(grid)"},{"question":"A company has a working schedule for each employee in the form of a list of non-overlapping intervals. Each interval represents a contiguous span of time during which the employee is working. The goal is to find the minimum number of meeting rooms required to schedule a new upcoming meeting involving all employees, such that no two meetings overlap in the same room. Given a list of working schedules for `N` employees, determine the minimum number of meeting rooms required. # Constraints - 1 ≤ N ≤ 1000 - The length of each list ≤ 100 - Each interval is represented as a tuple (start, end), where 0 ≤ start < end ≤ 10^9. - The intervals within each list are non-overlapping and sorted by start time. # Input Input is given from Standard Input in the following format: ``` N M start_1 end_1 start_2 end_2 : start_M end_M M start_1 end_1 start_2 end_2 : start_M end_M : ``` where `N` is the number of employees, `M` is the number of intervals for each employee, followed by `M` lines of intervals for that employee. # Output Print the minimum number of meeting rooms required. # Example Input ``` 2 3 1 3 5 6 8 10 2 2 4 7 8 ``` Output ``` 2 ``` Input ``` 3 2 1 3 5 6 3 2 4 7 9 4 5 5 6 9 12 ``` Output ``` 3 ``` # Explanation In the first example, the meeting rooms need to accommodate overlapping intervals `[1, 3]` and `[2, 4]`, and so on, resulting in at least 2 rooms. In the second example, the intervals `[1, 3]`, `[2, 4]`, and `[2, 4]` all require separate meeting rooms, followed by their subsequent intervals, requiring at least 3 rooms in total.","solution":"def min_meeting_rooms(schedules): Calculate the minimum number of meeting rooms required for given schedules. :param schedules: List[List[Tuple[int, int]]], a nested list where each sublist is a list of intervals for an employee :return: int, minimum number of meeting rooms required if not schedules: return 0 intervals = [] for schedule in schedules: for interval in schedule: intervals.append((interval[0], 1)) # 1 for start of an interval intervals.append((interval[1], -1)) # -1 for end of an interval # Sort intervals, and in case of ties, end (-1) comes before start (1) intervals.sort(key=lambda x: (x[0], x[1])) max_rooms = 0 current_rooms = 0 for time, delta in intervals: current_rooms += delta max_rooms = max(max_rooms, current_rooms) return max_rooms"},{"question":"Time Limit: 5 sec / Memory Limit: 128 MB Write a function that takes an integer array and an integer k, and rotates the array to the right by k steps, where k is non-negative. Example: Input [1, 2, 3, 4, 5, 6, 7] 3 Output [5, 6, 7, 1, 2, 3, 4] Input [-1, -100, 3, 99] 2 Output [3, 99, -1, -100]","solution":"def rotate(nums, k): Rotates the array to the right by k steps. n = len(nums) k = k % n # In case k is greater than the length of the array return nums[-k:] + nums[:-k]"},{"question":"Alex is an avid fan of geometric patterns. Recently, he came across an interesting problem involving triangles in a 2D plane. Given three points in a plane, Alex wants to determine if they form a right-angled triangle. A triangle is right-angled if one of its angles is exactly 90 degrees. Your task is to help Alex write a function that takes the coordinates of three points and determines whether or not they form a right-angled triangle. Input The input consists of a single line containing six integers x1, y1, x2, y2, x3, y3 (−10^2 ≤ xi, yi ≤ 10^2) — the coordinates of the three points. The points are guaranteed to be distinct. Output Output \\"RIGHT\\" (without quotes) if the points form a right-angled triangle. Otherwise, output \\"NOT RIGHT\\". Examples Input 0 0 1 1 1 0 Output RIGHT Input 0 0 1 2 2 2 Output NOT RIGHT Note In the first example, the given points (0,0), (1,1), and (1,0) form a right-angled triangle with a right angle at (1,0). In the second example, the points (0,0), (1,2), and (2,2) do not form a right-angled triangle as none of the angles are 90 degrees.","solution":"def is_right_angled_triangle(x1, y1, x2, y2, x3, y3): Determines if the given points form a right-angled triangle. Uses the Pythagorean Theorem to check for right angles: If the squared length of one side equals the sum of the squared lengths of the other two sides, then the triangle is right-angled. def squared_distance(xa, ya, xb, yb): return (xb - xa) ** 2 + (yb - ya) ** 2 d1 = squared_distance(x1, y1, x2, y2) d2 = squared_distance(x2, y2, x3, y3) d3 = squared_distance(x3, y3, x1, y1) if (d1 + d2 == d3) or (d1 + d3 == d2) or (d2 + d3 == d1): return \\"RIGHT\\" else: return \\"NOT RIGHT\\""},{"question":"Lily is working on a complex numerical simulation that involves many mathematical calculations. One of the steps requires her to solve the following problem: She has an array of integers and needs to find the length of the longest subsequence that can be derived from the array such that the sum of the elements in the subsequence is less than or equal to a given threshold value. Input The first line contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9) — the number of elements in the array and the threshold value. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print a single integer — the length of the longest subsequence with a sum not exceeding t. Examples Input 5 10 1 2 3 4 5 Output 4 Input 6 15 5 5 5 5 5 5 Output 3 Input 4 7 7 3 1 6 Output 2 Note In the first example, the subsequence {1, 2, 3, 4} has a sum of 10, which is less than or equal to the threshold value. Hence, the length of the longest subsequence is 4. In the second example, the subsequence {5, 5, 5} has a sum of 15, which is less than or equal to the threshold value. Hence, the length of the longest subsequence is 3. In the third example, the subsequence {3, 4} has a sum of 7, which is less than or equal to the threshold value. Hence, the length of the longest subsequence is 2.","solution":"def longest_subsequence_with_sum_threshold(n, t, arr): Returns the length of the longest subsequence such that the sum of the elements in the subsequence is less than or equal to the given threshold value t. arr.sort() current_sum = 0 length = 0 for num in arr: if current_sum + num <= t: current_sum += num length += 1 else: break return length # Example Usage n = 5 t = 10 arr = [1, 2, 3, 4, 5] print(longest_subsequence_with_sum_threshold(n, t, arr)) # Output: 4"},{"question":"In a land far away, there is a kingdom with n cities and m roads connecting them. The cities are numbered from 1 to n. The roads are bidirectional and each road connects two different cities. However, not all cities are directly connected, and some cities can\'t be reached from others. The king wants to host a grand festival in his kingdom, and he wants to invite all the cities. To ensure that everyone can travel to the festival without any issues, he needs to find out how many separate groups of cities there are. A group of cities is defined as a set of cities where each city in the set can reach any other city in the same set but cannot reach any city outside the set. Given the number of cities n and the list of roads connecting the cities, determine the number of groups of cities (connected components) in the kingdom. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of cities and the number of roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — a road that connects city u and city v. Output Output a single integer — the number of groups of cities in the kingdom. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 6 5 1 2 2 3 3 4 4 5 5 6 Output 1 Note In the first sample, there are 5 cities and 3 roads. The roads connect cities as follows: (1-2), (2-3), and (4-5). This results in two separate groups of cities: {1, 2, 3} and {4, 5}. In the second sample, all cities are connected through a series of roads, resulting in a single group of cities: {1, 2, 3, 4, 5, 6}.","solution":"def find_number_of_groups(n, roads): Find the number of connected groups (components) in a graph represented by cities (nodes) and roads (edges). Parameters: n (int): Number of cities. roads (List[Tuple[int, int]]): List of roads represented as tuples of cities they connect. Returns: int: Number of connected groups of cities. from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = set() num_groups = 0 for city in range(1, n + 1): if city not in visited: bfs(city) num_groups += 1 return num_groups"},{"question":"In a faraway land, there is a peculiar currency system composed of magical coins. Each coin has a unique denomination, and the land\'s inhabitants are very particular about the combinations of coins they use in their transactions. Specifically, they prefer using only a few different denominations at a time, but sometimes they have to sum up to a large amount. You are given a list of coin denominations and a target amount. Your task is to determine the minimum number of coins needed to make the exact target amount using any combination of the given denominations. If it is not possible to make the target amount, return -1. Assume you have an unlimited supply of each denomination. Input The first line contains two integers: n (1 ≤ n ≤ 100) — the number of different coin denominations, and m (1 ≤ m ≤ 10^4) — the target amount. The second line contains n space-separated integers representing the denominations of the coins. Each coin denomination is a positive integer less than or equal to 10^4. Output Print a single integer — the minimum number of coins needed to make the exact target amount. If it\'s not possible to make the target amount, print -1. Examples Input 4 11 1 2 5 10 Output 2 Input 3 7 3 5 8 Output -1 Note In the first sample, the minimum number of coins to make the amount 11 can be achieved with two coins: one 10-coin and one 1-coin. In the second sample, it\'s impossible to make the amount 7 with the given coin denominations.","solution":"def min_coins(n, m, denominations): Determine the minimum number of coins needed to make the exact target amount `m` using any combination of given `n` denominations. If it is not possible to make the target amount, return -1. :param n: int, number of different coin denominations :param m: int, the target amount :param denominations: list of int, the coin denominations available :return: int, minimum number of coins needed or -1 if not possible # Set up an array to hold the minimum number of coins needed to make each amount from 0 to m dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 # For each coin denomination, update the dp array for coin in denominations: for x in range(coin, m + 1): if dp[x - coin] != float(\'inf\'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"Given a string s, write a program to determine if it is a palindrome by ignoring spaces, punctuation, and case sensitivity. Constraints * 1 leq text{length of } s leq 1000 Input The input contains a single string s which can include letters, digits, spaces, and punctuation. Output Print \\"Yes\\" if the given string is a palindrome after ignoring spaces, punctuation, and case sensitivity. Otherwise, print \\"No\\". Example Input A man, a plan, a canal, Panama Output Yes","solution":"import re def is_palindrome(s): Returns \'Yes\' if the string s is a palindrome ignoring spaces, punctuation, and case sensitivity, otherwise \'No\'. # Remove non-alphanumeric characters and make the string lower case cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse if cleaned == cleaned[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"Problem Statement Eiko is a stellar gardener known for her beautiful circular gardens. She has recently moved to a new town and plans to create circular gardens in N different parks. Each garden should be unique and hence should not have the same radius. Due to resource limitations, she can only create gardens with integer radii. Every month, Eiko plans and completes exactly one circular garden. Based on the newly completed garden\'s radius, she needs to determine whether a garden with the same radius has been created before or not. Your task is to help Eiko verify if she can create the garden for the given month\'s radius or not. You must keep track of the radii of already constructed gardens and ensure none of the radii are repeated. Constraints * 1 <= N <= 100 * 1 <= radius_i <= 1000 Input The input consists of multiple datasets. Each dataset is formatted as follows: N radius_1 radius_2 ... radius_N Where `N` is the number of months Eiko plans to create gardens, and `radius_i` is the radius of the garden she plans to create in the `i-th` month. Output For each dataset, output \\"Yes\\" if Eiko can create a garden with the specified radius for every month without repeating a radius, otherwise output \\"No\\". Examples Input 4 3 5 7 3 5 1 1 2 3 4 Output Yes No Explanation: In the first dataset, Eiko plans gardens with radii 3, 5, 7, and 3. Since the radius 3 is repeated in the fourth month, the output is \\"No\\". In the second dataset, Eiko plans gardens with radii 1, 2, 3, and 4. All radii are unique, hence the output is \\"Yes\\".","solution":"def can_create_unique_gardens(N, radii): Determines if all the planned gardens have unique radii or not. Parameters: N (int): The number of gardens (months) Eiko plans. radii (list of int): List of planned radii for the gardens. Returns: str: \\"Yes\\" if all the radii are unique, otherwise \\"No\\". radii_set = set() for radius in radii: if radius in radii_set: return \\"No\\" radii_set.add(radius) return \\"Yes\\""},{"question":"Alex loves palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. For example, numbers 121, 1331, 444 are palindromic, while 123, 1567, 2023 are not. Given a range of integers [a, b], help Alex count how many numbers in this range are palindromic. Input The single line contains two integers a and b (1 ≤ a ≤ b ≤ 10^6) — the start and end of the range respectively. Output On a single line, print the count of palindromic numbers within the interval [a, b]. Examples Input 1 10 Output 9 Input 100 200 Output 10 Note In the range [1, 10], the palindromic numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9. In the range [100, 200], the palindromic numbers are 101, 111, 121, 131, 141, 151, 161, 171, 181, and 191.","solution":"def count_palindromic_numbers(a, b): Returns the count of palindromic numbers in the range [a, b]. count = 0 for num in range(a, b + 1): if str(num) == str(num)[::-1]: count += 1 return count"},{"question":"Random Points In Circle Constraints * 1 ≤ n ≤ 1000 * 1 ≤ radius ≤ 1000 Input n x1 y1 radius1 x2 y2 radius2 ... xn yn radiusn The first line contains an integer n, the number of circles. Each of the next n lines contains three integers: the coordinates of the center (xi, yi) and the radius of the ith circle. Output For each circle, generate 10 random unique points that lie inside the circle. Each point should be printed in a new line as two space-separated floating point numbers representing the x and y coordinates. Example Input 2 0 0 5 10 10 3 Output -1.234 3.456 2.890 -1.123 ... 11.123 11.456 9.321 8.764 ... Here, the output points are illustrative of the required format and will vary based on random generation.","solution":"import random import math def generate_points_in_circle(x_center, y_center, radius, num_points=10): points = [] while len(points) < num_points: angle = random.uniform(0, 2 * math.pi) r = radius * (random.random() ** 0.5) x = x_center + r * math.cos(angle) y = y_center + r * math.sin(angle) points.append((x, y)) return points def generate_random_points_in_circles(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) circles = [list(map(int, line.split())) for line in lines[1:]] result = [] for x_center, y_center, radius in circles: points = generate_points_in_circle(x_center, y_center, radius) for point in points: result.append(f\\"{point[0]:.3f} {point[1]:.3f}\\") return \'n\'.join(result)"},{"question":"IP Address Compression In modern network management, the use of IP addresses, notably IPv4, is widespread. An IPv4 address is composed of four octets, each one represented as a decimal number in the range 0-255, and separated by dots. For example, 192.168.0.1 is a valid IPv4 address. Sometimes it is useful to compress lists of IP addresses. In this problem, we consider a simplified method to compress and expand contiguous blocks of IP addresses. Given a list of IPv4 addresses, identify continuous IP address blocks and compress the list by representing those continuous blocks using a range notation. For example, the continuous addresses from 192.168.0.1 to 192.168.0.5 can be compressed as 192.168.0.1-192.168.0.5. Your task is to write a program that takes a list of IPv4 addresses in ascending order and outputs a compressed list. Additionally, it should be able to expand a compressed list back to the individual IP addresses. Input There will be two sections in the input: 1. compression: the input will start with the keyword \\"compress\\" followed by a list of IPv4 addresses in ascending order, each on a new line. 2. expansion: the input will then contain the keyword \\"expand\\" followed by a compressed list of IP addresses. The end of the input is indicated by a line containing the word \\"end\\". Output For the compression section, the output should be a compressed list of IP addresses. For the expansion section, the output should be the expanded list of individual IP addresses. Sample Input ``` compress 192.168.0.1 192.168.0.2 192.168.0.3 192.168.0.10 192.168.1.1 192.168.1.2 expand 192.168.0.1-192.168.0.3 192.168.0.10 192.168.1.1-192.168.1.2 end ``` Sample Output ``` 192.168.0.1-192.168.0.3 192.168.0.10 192.168.1.1-192.168.1.2 192.168.0.1 192.168.0.2 192.168.0.3 192.168.0.10 192.168.1.1 192.168.1.2 ``` Explanation: - In the compression section, individual IPs and blocks of contiguous IPs are compressible. The range 192.168.0.1 to 192.168.0.3 is one block, while 192.168.0.10 and 192.168.1.1 to 192.168.1.2 are themselves another two respective blocks. - In the expansion section, ranges are expanded back to the individual IP addresses.","solution":"def ip_to_int(ip): parts = map(int, ip.split(\'.\')) return (next(parts) << 24) + (next(parts) << 16) + (next(parts) << 8) + next(parts) def int_to_ip(ip_int): return f\\"{(ip_int >> 24) & 0xFF}.{(ip_int >> 16) & 0xFF}.{(ip_int >> 8) & 0xFF}.{ip_int & 0xFF}\\" def compress(ip_list): if not ip_list: return [] compressed = [] start = ip_list[0] end = start for i in range(1, len(ip_list)): curr = ip_list[i] prev = ip_list[i - 1] if ip_to_int(curr) == ip_to_int(prev) + 1: end = curr else: if start == end: compressed.append(start) else: compressed.append(f\\"{start}-{end}\\") start = curr end = curr if start == end: compressed.append(start) else: compressed.append(f\\"{start}-{end}\\") return compressed def expand(compressed_list): expanded = [] for entry in compressed_list: if \'-\' in entry: start, end = entry.split(\'-\') current = ip_to_int(start) end = ip_to_int(end) while current <= end: expanded.append(int_to_ip(current)) current += 1 else: expanded.append(entry) return expanded"},{"question":"A new medical AI is being developed to help doctors diagnose patients based on their symptoms. The AI is given access to a database of diseases, each characterized by a subset of symptoms. Each disease can be represented using a set of symptoms, and any disease can thus share symptoms with other diseases. However, some symptoms are more indicative of certain diseases than others. To determine the most likely diseases for a given set of symptoms, the AI needs to find the most frequently matching diseases from the database. Given a set of symptoms reported by a patient, your task is to determine the top k diseases that have the highest number of matching symptoms with the patient\'s reported symptoms. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of diseases in the database. - The next line contains an integer k (1 ≤ k ≤ n), the number of top diseases to be returned. - For the next n lines, each contains a string representing a disease name followed by a set of symptoms, where each symptom is a lowercase alphabetic string. Each disease name is unique. - The last line contains the patient\'s symptoms as a space-separated list of lowercase alphabetic strings. Output: - Print the top k disease names that have the highest number of matching symptoms with the patient\'s symptoms. If multiple diseases have the same number of matches, sort them lexicographically by their names. Example: Input: ``` 4 2 flu cough fever cold cough runny_nose allergy sneezing runny_nose itchy_eyes pneumonia cough fever chest_pain cough fever runny_nose ``` Output: ``` cold flu ``` Note: - It is guaranteed that no two diseases will have the same number of matching symptoms. - If n is less than or equal to k, return all diseases in the database sorted lexicographically. This task will help the developers gauge your ability to manage sets, sort based on custom conditions, and handle strings and input efficiently.","solution":"def top_k_diseases(n, k, disease_data, patient_symptoms): Returns the top k diseases based on the highest number of matching symptoms with the patient\'s symptoms. Args: n (int): Number of diseases in the database. k (int): Number of top diseases to be returned. disease_data (list of str): List of strings where each contains a disease name followed by a set of symptoms. patient_symptoms (str): Space-separated list of patient\'s symptoms. Returns: list of str: List of top k disease names. diseases = [] for data in disease_data: parts = data.split() disease = parts[0] symptoms = set(parts[1:]) diseases.append((disease, symptoms)) patient_symptoms_set = set(patient_symptoms.split()) disease_match_counts = [] for disease, symptoms in diseases: match_count = len(symptoms & patient_symptoms_set) disease_match_counts.append((match_count, disease)) disease_match_counts.sort(key=lambda x: (-x[0], x[1])) return [disease for _, disease in disease_match_counts[:k]] # Helper function to handle input and output format for ease of testing def process_input(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) k = int(lines[1]) disease_data = lines[2:n+2] patient_symptoms = lines[n+2] result = top_k_diseases(n, k, disease_data, patient_symptoms) return \\"n\\".join(result)"},{"question":"Alice and Bob love playing with strings on weekends. One day, they come up with an interesting game involving palindromes. A palindrome is a string that reads the same forward and backward. For example, \\"madam\\", \\"racecar\\", and \\"a\\" are palindromes. Here\'s how their game works: 1. Alice and Bob initially choose a string S consisting of lowercase English letters. 2. Alice makes the first move, and they alternate turns. 3. On each turn, a player can do one of the following: - Remove any single character from anywhere in the string. - Choose any substring from the string and rearrange its characters. 4. The player who cannot make a move (i.e., the string becomes empty or no more valid moves are possible) loses the game. Both Alice and Bob always play optimally. Input: - The first line contains an integer t, the number of test cases. - Each of the following t lines contains a single string S. Output: For each test case, output \\"Alice\\" if Alice wins the game, and \\"Bob\\" if Bob wins the game, on a separate line. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ |S| ≤ 10^5 (length of each string S) SAMPLE INPUT 3 abc racecar aabbcc SAMPLE OUTPUT Alice Alice Bob Explanation: In the first test case, Alice can remove one character (\'a\'), then Bob removes another character (\'b\'), leaving Alice with the last character (\'c\'). Alice removes \'c\' and wins the game. In the second test case, since \\"racecar\\" is already a palindrome, Alice can choose to rearrange the characters of any substring optimally to keep forcing the game into states favorable for her until Bob has no optimal move. In the third test case, the optimal moves for both leave Bob as the winner. For example, Alice can remove \'a\' repeatedly, and eventually, the game will ensure Bob has the last character to remove, making Alice the loser.","solution":"def determine_winner(t, test_cases): results = [] for s in test_cases: # Count the frequency of each character frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Count the number of characters with odd frequencies odd_count = sum(1 for count in frequency.values() if count % 2 == 1) # If the odd_count is zero, it\'s a draw according to the rules if odd_count == 0: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"In a coding competition, each participant is scored based on the number of problems they solve. Given a list of scores of all participants, your task is to determine the rank of each participant assuming descending order of scores. The highest score gets rank 1, the second highest score gets rank 2, and so on. In case two participants have the same score, they should have the same rank and the next rank should be skipped. Input Format The first line contains the number of test cases T. The first line of each test case contains an integer N, the number of participants. The following line contains N integers representing the scores of the participants. Output Format For each test case, output a single line containing N integers where the ith integer is the rank of the ith participant in the list. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ score ≤ 10^9 SAMPLE INPUT 2 4 50 30 50 10 5 100 90 90 80 70 SAMPLE OUTPUT 1 3 1 4 1 2 2 4 5 Explanation Case 1: Participants with scores [50, 30, 50, 10] will have ranks [1, 3, 1, 4]. Case 2: Participants with scores [100, 90, 90, 80, 70] will have ranks [1, 2, 2, 4, 5].","solution":"def calculate_ranks(test_cases): results = [] for scores in test_cases: sorted_scores = sorted(((score, i) for i, score in enumerate(scores)), reverse=True) rank = 1 previous_score = sorted_scores[0][0] ranks = [0] * len(scores) rank_gap = 0 for idx, (score, original_idx) in enumerate(sorted_scores): if score != previous_score: rank += rank_gap rank_gap = 0 ranks[original_idx] = rank previous_score = score rank_gap += 1 results.append(ranks) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) scores = list(map(int, lines[idx + 1].split())) test_cases.append(scores) idx += 2 return test_cases def main(input_data): test_cases = parse_input(input_data) result = calculate_ranks(test_cases) return \'n\'.join(\' \'.join(map(str, r)) for r in result) # Example Usage: # input_data = \\"2n4n50 30 50 10n5n100 90 90 80 70n\\" # print(main(input_data))"},{"question":"Zookeeper wants to ensure the happiness of his p penguins during the feeding time. Each penguin consumes a sequence of daily meals, and each meal contains a certain number of fish. However, penguins believe that fish with prime numbers have special boons. A fish is prime if it is greater than 1 and has no positive divisors other than 1 and itself. Every penguin tries to maximize the enjoyment of their meals based on the pri me fish they consume. Can you help them determine the maximum number of special prime fish in their daily meals? Input The first line contains a single integer p (1 ≤ p ≤ 100): the number of penguins. The next line contains a single integer m (1 ≤ m ≤ 1,000,000): the number of fish each penguin has in a meal. The next p lines each contain m integers separated by spaces, representing the number of fish in each meal for each penguin. Output Print p lines, where the i-th line contains the maximum number of special prime fish in the i-th penguin\'s sequence of meals. Examples Input 2 5 3 7 8 9 11 6 13 17 4 5 6 Output 4 5 Explanation: In the first test case, for the first penguin, the fish numbers 3, 7, and 11 are prime, giving a total of 4 prime fish. In the second test case, for the second penguin, the fish numbers 13, 17, 5 are prime, giving a total of 5 prime fish.","solution":"def is_prime(num): This function checks if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def max_prime_fish(p, m, meals): This function computes the number of prime fish in each penguin\'s sequence of meals. prime_counts = [] for penguin_meals in meals: prime_count = sum(1 for fish in penguin_meals if is_prime(fish)) prime_counts.append(prime_count) return prime_counts"},{"question":"A company has a warehouse that stores N different types of items. Each item has a unique ID from 1 to N. The warehouse keeps track of the counts of each item in an inventory list. You\'re given the initial counts of the items followed by M transactions. Each transaction can either be an addition of a certain number of items to the inventory or a removal of a certain number of items from the inventory. For each transaction, if a removal is attempted that would result in a negative count for any item, the transaction should be ignored and count as not executed. Provide the final counts of each item in the inventory after all transactions have been processed. Input The first line contains two integers N and M (1 ≤ N, M ≤ 100,000), the number of items and the number of transactions. The second line contains N integers c_1, c_2, ..., c_N (0 ≤ c_i ≤ 1,000,000), the initial counts of each item. Each of the following M lines contains a transaction in the form \\"type id k\\", where: - type is either \\"add\\" or \\"remove\\", - id (1 ≤ id ≤ N) is the ID of the item, - k (1 ≤ k ≤ 1,000,000) is the number of items to add or remove. Output Print N integers, the final counts of each item after all transactions have been processed. Example Input 5 4 10 5 8 6 3 add 1 2 remove 2 3 remove 3 9 add 2 4 Output 12 6 8 6 3 Explanation - The initial counts are [10, 5, 8, 6, 3]. - After the first transaction \\"add 1 2\\", the counts are [12, 5, 8, 6, 3]. - After the second transaction \\"remove 2 3\\", the counts are [12, 2, 8, 6, 3]. - The third transaction \\"remove 3 9\\" would result in a negative count for item 3, so it is ignored. - After the fourth transaction \\"add 2 4\\", the counts are [12, 6, 8, 6, 3].","solution":"def process_transactions(N, M, initial_counts, transactions): counts = initial_counts[:] for transaction in transactions: type, id, k = transaction if type == \\"add\\": counts[id - 1] += k elif type == \\"remove\\": if counts[id - 1] >= k: counts[id - 1] -= k return counts # Example usage N = 5 M = 4 initial_counts = [10, 5, 8, 6, 3] transactions = [ (\\"add\\", 1, 2), (\\"remove\\", 2, 3), (\\"remove\\", 3, 9), (\\"add\\", 2, 4) ] print(process_transactions(N, M, initial_counts, transactions))"},{"question":"Problem You are responsible for managing a dynamic string list that supports the following operations: - Add a specified string to the end of the list. - Remove the string at a specified position (1-indexed). - Reverse the list. Implement these operations efficiently. You will be given Q queries to execute on the list of strings. The list initially starts empty. For each query, you need to execute the corresponding operation and, for removal queries, output the removed string. Constraints The input satisfies the following conditions: - 1 leq Q leq 10^5 - The length of each string s is between 1 and 100 Operations: * \'ADD\' s : appends string s to the end of the list. * \'REMOVE\' k : removes the k-th (1-indexed) string from the list and returns it. If k is out of bounds, return \\"None\\". * \'REVERSE\' : reverses the current list of strings. Input The input is given in the following format: Q query_1 query_2 ... query_Q Each query is given in one of the following forms: \'ADD\' s \'REMOVE\' k \'REVERSE\' Output For each \'REMOVE\' query, print the removed string on a new line. If k is out of bounds, print \\"None\\". Examples Input 6 ADD hello ADD world REMOVE 2 ADD python REVERSE REMOVE 1 Output world python Input 5 ADD a ADD b REMOVE 3 REVERSE REMOVE 2 Output None a","solution":"def process_queries(Q, queries): lst = [] results = [] for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": s = \' \'.join(parts[1:]) lst.append(s) elif command == \\"REMOVE\\": k = int(parts[1]) - 1 if 0 <= k < len(lst): removed = lst.pop(k) results.append(removed) else: results.append(\\"None\\") elif command == \\"REVERSE\\": lst.reverse() return results"},{"question":"You are given a strictly increasing sequence of positive integers. Your task is to find the length of the longest subarray consisting of consecutive integers. A subarray is a contiguous part of an array. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the sequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). # Output - Print a single integer, the length of the longest subarray of consecutive integers in the given sequence. # Example Input ``` 6 1 2 4 5 6 7 ``` Output ``` 4 ``` # Note In the provided example, the longest subarray of consecutive integers is [4, 5, 6, 7], which has a length of 4.","solution":"def longest_consecutive_subarray_length(n, arr): Finds the length of the longest subarray of consecutive integers in the given strictly increasing sequence. if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i - 1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A software company is developing a keyboard layout optimizer. In this process, the first step is to analyze the typing habits of users based on the characters\' frequency in a given text. You are tasked to develop a program that identifies the most frequently typed character and counts how many times it appears in the text. The text includes letters, digits, spaces, and punctuation marks. Spaces should be ignored when counting frequencies. If there are multiple characters with the same highest frequency, return the one which appears first in the text. Your program must handle large texts efficiently. Input The input is a single line of text t (1 ≤ |t| ≤ 10^6). Output Output the most frequently typed character and the number of times it appears, separated by a single space. Examples Input hello world Output l 3 Input aaabbbbccccc Output c 5 Input the quick brown fox jumps over the lazy dog Output o 4 Input aAaAaA Output a 3 Note In the first example, the character \'l\' appears the most (3 times), ignoring spaces. In the second example, \'c\' is the most frequent character, appearing 5 times. In the third example, \'o\' appears four times, the highest frequency in the text. In the fourth example, despite the case difference, the character \'a\' (counting both \'A\' and \'a\') appears 3 times.","solution":"def most_frequent_character(text): Returns the most frequently typed character and the number of times it appears in the text, ignoring spaces. If there are multiple such characters with the same frequency, the one that appears first in the text is returned. from collections import Counter # Filter out spaces filtered_text = text.replace(\' \', \'\') # Count the frequency of each character char_count = Counter(filtered_text) # Find the most frequent character and its count most_frequent = None max_count = 0 for char in filtered_text: if char_count[char] > max_count: most_frequent = char max_count = char_count[char] return most_frequent, max_count"},{"question":"Sudoku Solver Given a partially filled 9x9 Sudoku grid, the goal is to fill in the empty cells such that each row, each column, and each of the nine 3x3 subgrids contain all of the digits from 1 to 9. The Sudoku grid will be provided as a 9x9 matrix where empty cells are represented by 0s. Input The input is a single dataset consisting of nine lines. Each line contains nine integers separated by spaces representing the initial state of the Sudoku grid. Output Output the completed Sudoku grid in the same format (nine lines of nine space-separated integers). If there is no valid solution possible, output \\"No solution exists\\". Example Input 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Output 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Note You may assume that the given Sudoku puzzle has exactly one solution.","solution":"def is_valid(board, row, col, num): Check if it\'s valid to place \'num\' at board[row][col] # Check row for x in range(9): if board[row][x] == num: return False # Check column for x in range(9): if board[x][col] == num: return False # Check box start_row = row - row % 3 start_col = col - col % 3 for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve_sudoku(board): Solve the Sudoku puzzle using backtracking. empty_pos = find_empty_position(board) if not empty_pos: return True row, col = empty_pos for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_position(board): Find an empty position (0) in the Sudoku board. for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None def print_sudoku(board): Print the completed Sudoku grid. for row in board: print(\\" \\".join(str(num) for num in row))"},{"question":"Ilia loves creating unique paintings on a rectangular canvas of size n x m. He uses a special set of rules to determine how the colors should be applied. Each cell (i, j) on this canvas is initialized with an intensity value b_{ij} which represents how intensely that cell is painted (0 means blank, 1 means lightly painted, and so on). Ilia can perform a special painting-driven operation: in one move, he can select a rectangular subregion of the canvas and increment the intensity of each cell in that subregion by 1. This operation can be repeated multiple times. Ilia wants to achieve a specific painting goal, where the resulting canvas has every cell\'s intensity equal to k. You need to determine the minimum number of painting-driven operations required to reach this goal. Input The first line contains three integers n, m and k (1 ≤ n, m ≤ 50, 0 ≤ k ≤ 1000) — the size of the canvas and the target intensity value. Each of the next n lines contains m integers (0 ≤ b_{ij} < k) — the initial intensity values of the canvas cells. Output Output the minimum number of painting-driven operations needed to achieve the target intensity k for all cells. If it is not possible, output \\"-1\\". Example Input 3 3 2 1 1 1 0 0 0 1 0 1 Output 2 Note Explanation for the first sample: - First operation: Increment subregion (2, 1) to (3, 3) which includes all cells except the top row and the top-right corner: ``` 1 1 1 1 1 1 2 1 2 ``` - Second operation: Increment the entire canvas: ``` 2 2 2 2 2 2 3 2 3 ```","solution":"def min_operations_to_reach_k(n, m, k, canvas): max_initial_intensity = max(max(row) for row in canvas) if max_initial_intensity > k: return -1 # Calculate the number of operations for each cell (i, j) to reach intensity k operations_needed = [[0 for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): operations_needed[i][j] = k - canvas[i][j] return max(max(row) for row in operations_needed) # Example usage n = 3 m = 3 k = 2 canvas = [ [1, 1, 1], [0, 0, 0], [1, 0, 1] ] print(min_operations_to_reach_k(n, m, k, canvas)) # Output: 2"},{"question":"In a coding contest, participants are ranked based on their performance. The ranks are then used to assign a given number of stars to the contestants as a reward. The star assignment is done as follows: * Rank 1st: 5 stars * Rank 2nd: 4 stars * Rank 3rd: 3 stars * Rank 4th: 2 stars * Rank 5th: 1 star * Rank 6th and below: 0 stars Given the number of participants and their respective ranks, your task is to determine the total number of stars that will be distributed among them. Constraints * 1 ≤ N ≤ 100 * 1 ≤ rank_i ≤ N Input Input is given from Standard Input in the following format: N rank_1 rank_2 ... rank_N Output Print the total number of stars distributed to the participants. Examples Input 5 1 2 3 4 5 Output 15 Input 6 3 1 4 2 5 6 Output 15 Input 7 7 6 5 4 3 2 1 Output 15","solution":"def total_stars(N, ranks): Returns the total number of stars distributed based on the given ranks. Parameters: N (int): The number of participants ranks (list of int): The ranks of the participants Returns: int: The total number of stars distributed stars_distribution = {1: 5, 2: 4, 3: 3, 4: 2, 5: 1} total_stars = 0 for rank in ranks: total_stars += stars_distribution.get(rank, 0) return total_stars"},{"question":"Matthew is fascinated by the arrangement of dominoes. He has a collection of domino pieces, each represented by two numbers indicating the value on either end of the domino. Matthew wonders if, from a given set of dominoes, it is possible to create a single chain where adjacent dominoes have matching values on the touching ends, and all dominoes are used exactly once. Your task is to help Matthew determine if it is possible to form such a chain. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of dominoes. The next n lines each contain two integers ai and bi (0 ≤ ai, bi ≤ 100) — representing the values on the ends of each domino. Output Output the word «YES», if it is possible to form a single chain of dominoes using all the given pieces exactly once. Otherwise, output «NO». Examples Input 3 1 2 2 3 3 1 Output YES Input 3 1 2 2 3 4 5 Output NO","solution":"from collections import defaultdict, deque def can_form_domino_chain(n, dominoes): # Function to check if all values have even degree except for zero or two vertices def has_eulerian_path(edges, degrees): odd_count = 0 for node, degree in degrees.items(): if degree % 2 != 0: odd_count += 1 return odd_count == 0 or odd_count == 2 # If there\'s only one domino, it\'s always possible if n == 1 and any domino is given if n == 1: return \\"YES\\" edges = defaultdict(list) degrees = defaultdict(int) for a, b in dominoes: edges[a].append(b) edges[b].append(a) degrees[a] += 1 degrees[b] += 1 if not has_eulerian_path(edges, degrees): return \\"NO\\" def is_connected(): # Find a non-isolated node to start BFS start_node = next(iter(edges)) visited = set() queue = deque([start_node]) while queue: node = queue.popleft() visited.add(node) for neighbor in edges[node]: if neighbor not in visited: queue.append(neighbor) # Ensure all nodes that have edges are visited for node in edges: if node not in visited: return False return True return \\"YES\\" if is_connected() else \\"NO\\""},{"question":"Alice and Bob are playing a game with a string `s` of length `n` consisting of lowercase English letters. The game\'s rules are as follows: 1. Alice can select any substring in the string and reverse it. 2. Bob wants the string to be in lexicographically smallest possible order. Your task is to determine the minimum number of operations needed for Alice to make the string lexicographically smallest possible. As `n` can be large, an efficient solution is required. Input The first line contains an integer `n` (1 ≤ n ≤ 2·10^5) — the length of the string. The second line contains the string `s` of length `n` consisting of lowercase English letters. Output Print a single integer — the minimum number of operations Alice needs to perform to make the string lexicographically smallest possible. Examples Input 4 dcba Output 2 Input 5 edcba Output 2 Input 6 abcdef Output 0 Explanation In the first example, Alice can reverse the entire string \\"dcba\\" into \\"abcd\\", which is already lexicographically smallest. The minimum number of operations is 2, corresponding to reversing two sub-parts in optimal steps. In the second example, reversing \\"edcba\\" twice (e.g., reverse \\"edc\\" to get \\"cde\\" and then reverse \\"cd\\" to get \\"abcde\\") can achieve the smallest string \\"abcde\\". In the third example, the string \\"abcdef\\" is already in the lexicographically smallest order, so no operations are needed. The output is 0. Notes - A substring is defined as a contiguous sequence of characters within a string. - The reversed string must be arranged into its smallest form lexicographically after all operations.","solution":"def min_reversal_operations_to_sort_string(n, s): sorted_s = \'\'.join(sorted(s)) left, right = 0, n - 1 operations = 0 while left < right: while left < right and s[left] == sorted_s[left]: left += 1 while right > left and s[right] == sorted_s[right]: right -= 1 if left < right: operations += 1 left += 1 right -= 1 return operations"},{"question":"In a small city, there is a public transportation system consisting of a number of bus lines. Each bus line connects two distinct bus stops. In order to enhance the efficiency of the transportation network, the city administration wants to ensure that there are sufficient connections between the bus stops, meaning there should be enough bus lines to make the entire network well-connected. Given a list of bus lines, each specified by the stops it connects, your task is to determine if there is a path between every pair of bus stops, either directly or through other bus stops. A path is defined as a sequence of bus lines that connects two bus stops via other bus stops. Also, the system must be able to function even if any one bus line is temporarily out of operation. Therefore, even if any one bus line is removed, there should still be a way to travel between any pair of bus stops. Your task is to write a program to determine if the bus system satisfies the above conditions. Input The input consists of multiple datasets. Each dataset is described by multiple lines. The first line contains two integers, N (2 ≤ N ≤ 100) indicating the number of bus stops and L (1 ≤ L ≤ 4950) indicating the number of bus lines. Each of the next L lines contains two integers U and V (1 ≤ U, V ≤ N, U ≠ V) representing that there is a direct bus line between bus stop U and bus stop V. The input is terminated by a dataset of N = L = 0, which must not be processed. Output For each dataset, output a single line \\"YES\\" if the network satisfies the conditions specified, otherwise output \\"NO\\". Example Input 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 3 3 1 2 2 3 1 3 0 0 Output YES NO YES","solution":"def is_network_well_connected(N, lines): def dfs(current, visited, adj): visited.add(current) for neighbor in adj[current]: if neighbor not in visited: dfs(neighbor, visited, adj) adj = {i: [] for i in range(1, N + 1)} for u, v in lines: adj[u].append(v) adj[v].append(u) for u, v in lines: visited1 = set() visited2 = set() adj[u].remove(v) adj[v].remove(u) dfs(1, visited1, adj) if len(visited1) != N: adj[u].append(v) adj[v].append(u) return \\"NO\\" adj[u].append(v) adj[v].append(u) dfs(u, visited2, adj) if len(visited2) != N: return \\"NO\\" return \\"YES\\" def process_datasets(datasets): results = [] for dataset in datasets: N, L, lines = dataset if N == 0 and L == 0: break results.append(is_network_well_connected(N, lines)) return results"},{"question":"An air traffic control system is monitoring a series of flights as they land and take off from an airport. Each flight is represented by an interval marked by its landing and departure times. Given these flight intervals, your task is to determine the maximum number of planes that are on the ground at the same time. Each interval is defined by two integers: the landing time and the departure time. Input The first line of the input contains an integer n (1 ≤ n ≤ 105), the number of flights. Each of the following n lines contains two integers li and di (1 ≤ li < di ≤ 109), representing the landing and departure time of the i-th flight. Output Print a single integer — the maximum number of planes that are on the ground at the same time. Examples Input 3 2 8 4 6 1 9 Output 3 Input 4 1 5 2 6 3 7 4 8 Output 4 Input 2 5 10 1 3 Output 1","solution":"def max_planes_on_ground(flights): events = [] for flight in flights: landing, departure = flight events.append((landing, \'arrive\')) events.append((departure, \'depart\')) events.sort() max_planes = 0 current_planes = 0 for event in events: if event[1] == \'arrive\': current_planes += 1 if current_planes > max_planes: max_planes = current_planes elif event[1] == \'depart\': current_planes -= 1 return max_planes"},{"question":"You are the administrator of a school and you need to manage the allocation of lockers to students. Each student requests a locker with a specific size requirement. The lockers come in different sizes, and each locker can only fit one student. Write a program that, given the sizes of available lockers and the sizes of locker requests by students, finds the most optimal allocation of lockers to students that satisfies all students\' requests if possible. Your task is to write a program that determines the allocation. Input The input contains multiple test cases. Each test case is specified in two lines. The first line contains integers representing the sizes of available lockers. The second line contains integers representing the sizes of requested lockers by students. The input is ended by a line containing two zeros, which should not be processed. Output For each test case, output a single line. If it is possible to allocate the lockers such that all students\' requests are satisfied, output \\"Yes\\". Otherwise, output \\"No\\". Example Input 5 10 15 20 10 15 3 4 5 6 5 7 0 0 Output Yes No","solution":"def allocate_lockers(lockers, requests): Determines if it is possible to allocate lockers to students such that all students\' requests are satisfied. Parameters: lockers (list of int): Sizes of available lockers. requests (list of int): Sizes of locker requests by students. Returns: str: \\"Yes\\" if all requests can be satisfied, \\"No\\" otherwise. lockers.sort() requests.sort() locker_index = 0 request_index = 0 while request_index < len(requests) and locker_index < len(lockers): if lockers[locker_index] >= requests[request_index]: request_index += 1 locker_index += 1 if request_index == len(requests): return \\"Yes\\" else: return \\"No\\" def process_input(input_lines): Processes multiple test cases and returns results for each. Parameters: input_lines (list of str): Lines of input where each test case is specified in two lines. Returns: list of str: Results for each test case. results = [] i = 0 while i < len(input_lines): if input_lines[i] == \\"0 0\\": break lockers = list(map(int, input_lines[i].split())) requests = list(map(int, input_lines[i+1].split())) results.append(allocate_lockers(lockers, requests)) i += 2 return results"},{"question":"In a city, there are `n` intersections numbered from `1` to `n`. The city has `m` bidirectional roads, each connecting two intersections. A delivery company in the city is planning a route that starts and ends at the same intersection, visiting each intersection exactly once before returning to the starting point. This kind of route is known as a \\"Hamiltonian Circuit.” Your task is to determine whether a given city has such a Hamiltonian Circuit. Input The first line of the input contains one integer `t` (1 ≤ t ≤ 100) — the number of test cases. Then `t` test cases follow. The first line of each test case contains two integers `n` (2 ≤ n ≤ 15) and `m` (0 ≤ m ≤ n*(n-1)/2) — the number of intersections and the number of roads. The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — representing a bidirectional road between intersections `u` and `v`. Output For each test case, print \\"YES\\" if there exists a Hamiltonian Circuit, otherwise print \\"NO\\". Example Input 3 4 4 1 2 2 3 3 4 4 1 4 3 1 2 2 3 3 4 5 6 1 2 1 3 1 4 2 5 3 5 4 5 Output YES NO NO Explanation In the first test case, we can form the Hamiltonian Circuit 1-2-3-4-1. In the second test case, it is impossible to visit all intersections exactly once and return to the starting intersection using the given roads. In the third test case, there is no Hamiltonian Circuit that visits all intersections exactly once.","solution":"from itertools import permutations def has_hamiltonian_circuit(n, m, roads): # Create adjacency matrix adj_matrix = [[0]*n for _ in range(n)] for u, v in roads: adj_matrix[u-1][v-1] = 1 adj_matrix[v-1][u-1] = 1 # Generate all permutations of the vertices vertices = list(range(n)) for perm in permutations(vertices): if perm[0] == 0: # Start from vertex 1 # Check if the permutation forms a Hamiltonian Circuit is_ham_cycle = True for i in range(n): if not adj_matrix[perm[i]][perm[(i+1)%n]]: is_ham_cycle = False break if is_ham_cycle: return \\"YES\\" return \\"NO\\" def solve(t, cases): results = [] for case in cases: n, m, roads = case results.append(has_hamiltonian_circuit(n, m, roads)) return results"},{"question":"Emma is participating in a programming contest, and she\'s working on a problem that involves lines on a Cartesian plane. The problem requires her to determine if three points are collinear, which means they lie on the same straight line. Emma wants to automate the checking process. Can you help her write a program to determine if given sets of three points are collinear? Input The first line contains a single integer N denoting the number of sets of points Emma wants to check. Each of the following N lines contains six integers x1, y1, x2, y2, x3, y3 representing the coordinates of three points (x1, y1), (x2, y2), and (x3, y3). Output For each set of points, print \\"YES\\" if the points are collinear, otherwise print \\"NO\\". Constraints 1 <= N <= 1000 -10^9 <= x1, y1, x2, y2, x3, y3 <= 10^9 Example Input: 3 0 0 1 1 2 2 0 0 1 1 2 3 1 2 3 4 5 6 Output: YES NO YES","solution":"def are_points_collinear(x1, y1, x2, y2, x3, y3): Check if three points (x1, y1), (x2, y2), (x3, y3) are collinear. Points are collinear if the area of the triangle they form is zero. This can be determined using the determinant method. # Using the determinant formula to check for collinearity return (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) == 0 def check_collinear_points(sets_of_points): For a given list of point sets, determine if each set of points is collinear, returning a list of \\"YES\\" or \\"NO\\" for each set. results = [] for points in sets_of_points: x1, y1, x2, y2, x3, y3 = points if are_points_collinear(x1, y1, x2, y2, x3, y3): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a far-off futuristic city, transportation has evolved such that people use hyperloops to travel between different zones of the city. These hyperloops are enclosed vacuum tubes that allow transport pods to move at high speeds with minimal air resistance. Pods can move between stations within the hyperloop network based on available direct connections. However, each direct connection has a maximum allowable weight limit for a pod and its cargo. You are tasked with optimizing cargo transportation from a given start station to a destination station. Given the details of the network, you must determine the maximum weight of cargo (in addition to the weight of the pod itself) that can be transported from start to end station without exceeding the weight limits on any direct connection in the path. The objective is to maximize the cargo weight transported. Input The first line contains four integers n, m, s, and t (1 ≤ n ≤ 1000, 1 ≤ m ≤ 3000, 1 ≤ s, t ≤ n) — the number of stations, the number of direct connections, the start station, and the destination station, respectively. Each of the following m lines contains three integers ui, vi, and wi (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 1000) — indicating a direct connection between stations ui and vi with a weight limit wi. Output Print one integer — the maximum weight of cargo that can be transported from station s to station t. Examples Input 5 6 1 5 1 2 5 1 3 2 2 3 2 3 4 5 2 5 3 4 5 4 Output 3 Input 4 3 1 4 1 2 4 2 3 2 3 4 3 Output 2 Input 3 3 1 3 1 2 1 2 3 2 1 3 3 Output 3 In this problem, your task is to navigate through the complex hyperloop network ensuring that you can carry the maximum possible cargo weight between the start and end stations while respecting the weight limits of the direct connections. Use graph-based algorithms to determine the optimal path.","solution":"from heapq import heappush, heappop import sys def max_cargo_weight(n, m, s, t, connections): graph = [[] for _ in range(n + 1)] for ui, vi, wi in connections: graph[ui].append((wi, vi)) graph[vi].append((wi, ui)) def dijkstra_max_weight(): max_weights = [0] * (n + 1) max_weights[s] = float(\'inf\') priority_queue = [(-max_weights[s], s)] while priority_queue: current_weight, node = heappop(priority_queue) current_weight = -current_weight if current_weight < max_weights[node]: continue for weight, neighbor in graph[node]: min_weight_on_path = min(current_weight, weight) if min_weight_on_path > max_weights[neighbor]: max_weights[neighbor] = min_weight_on_path heappush(priority_queue, (-min_weight_on_path, neighbor)) return max_weights[t] return dijkstra_max_weight()"},{"question":"You are given two strings, A and B, each containing only lowercase letters. Your task is to determine whether it is possible to rearrange the characters of string B to match string A by performing any number of the following move: * Choose a character in B and move it to any position within B. If it is possible to rearrange B to match A, return \\"Yes\\". Otherwise, return \\"No\\". Constraints * 1 leq |A| leq 100, where |A| denotes the length of the string A. * 1 leq |B| leq 100, where |B| denotes the length of the string B. Input Input is given from Standard Input in the following format: A B Output Print \\"Yes\\" if it is possible to rearrange B to match A. Otherwise, print \\"No\\". Examples Input abcd dcba Output Yes Input hello holle Output Yes Input mango nomag Output Yes Input apple aplpe Output Yes Input banana aananb Output Yes Input abcdef fedcba Output Yes Input abcd abce Output No Input abc abcd Output No","solution":"def can_rearrange(A, B): Determines if string B can be rearranged to match string A. if sorted(A) == sorted(B): return \\"Yes\\" else: return \\"No\\" # Example usage: # print(can_rearrange(\\"abcd\\", \\"dcba\\")) # Output: \\"Yes\\""},{"question":"You are given a list of integers representing the heights of trees in a park. Each tree is represented by its height in centimeters. You need to calculate the maximum difference in height between any two trees such that the shorter tree is to the left of the taller tree in the list. Write a function that takes in a list of integers and returns the maximum height difference between two trees in the described order. If no such pair exists, return -1. Input The input consists of a single line containing space-separated integers representing the heights of trees in the park: h: a list of integers (1 ≤ |h| ≤ 105, 1 ≤ h[i] ≤ 109 for each height h[i]) Output Print a single integer which is the maximum height difference between any two trees such that the shorter tree is to the left of the taller tree. Return -1 if no such pair exists. Examples Input 4 2 3 1 5 Output 4 Input 5 6 3 2 1 Output 1 Input 7 7 7 Output -1 Note In the first sample, the maximum difference is 4 (tree with height 1 and tree with height 5, in that order). In the second sample, the maximum difference is 1 (tree with height 5 and tree with height 6, in that order). In the third sample, there is no valid pair of trees with the shorter one to the left of the taller one, so the output is -1.","solution":"def max_height_difference(heights): if not heights or len(heights) < 2: return -1 min_height = heights[0] max_diff = -1 for i in range(1, len(heights)): if heights[i] > min_height: max_diff = max(max_diff, heights[i] - min_height) min_height = min(min_height, heights[i]) return max_diff"},{"question":"In a fictional city, there are several bridges connecting various islands. Each island is represented as a node, and each bridge is represented as an edge between two nodes in a graph. The citizens of this city want to know if it is possible to travel from any island to any other island using these bridges. Your task is to determine if the graph formed by these islands and bridges is connected. A graph is connected if there is a path between any pair of nodes. Input The input consists of multiple lines: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n(n-1)/2), where n is the number of islands (nodes) and m is the number of bridges (edges). - The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), representing that there is a bridge between islands ai and bi. Output Print \\"CONNECTED\\" if there is a path between any pair of islands, otherwise print \\"DISCONNECTED\\". Examples Input 6 5 1 2 1 3 3 4 2 5 4 5 Output DISCONNECTED Input 4 4 1 2 2 3 3 4 4 1 Output CONNECTED Input 5 4 1 2 2 3 3 4 4 5 Output CONNECTED Input 5 3 1 2 2 3 4 5 Output DISCONNECTED Explanation: - In the first example, the graph is not connected since there is no path connecting the sixth island to any other island. - In the second example, each island can be reached from any other island. - In the third example, the graph is a simple linear connection where all islands are connected. - In the fourth example, there are two separate components in the graph, so it is disconnected.","solution":"def is_graph_connected(n, m, edges): from collections import defaultdict, deque if n == 1: return \\"CONNECTED\\" if m == 0: return \\"DISCONNECTED\\" graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) bfs(1) # Start BFS from the first node return \\"CONNECTED\\" if len(visited) == n else \\"DISCONNECTED\\" # Example usage: # n = 4 # m = 4 # edges = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(is_graph_connected(n, m, edges)) # should print \\"CONNECTED\\""},{"question":"You are given a string `S` consisting of lowercase English letters. Your task is to determine whether the string can be made a palindrome by removing at most one character. A palindrome is a string that reads the same forward and backward. # Input The input is given from Standard Input in the following format: ``` S ``` # Output Print `YES` if the string can be made a palindrome by removing at most one character. Otherwise, print `NO`. # Constraints - 1 ≤ |S| ≤ 10^5 # Examples Input ``` abca ``` Output ``` YES ``` Input ``` abc ``` Output ``` NO ``` Explanation: In the first example, you can remove \'b\' to make the string palindrome \\"aca\\". In the second example, removing any one of the characters will not make the string a valid palindrome.","solution":"def can_be_palindrome_by_removing_one_char(s): def is_palindrome_range(s, i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check removing left index or right index makes it a palindrome return is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1) left += 1 right -= 1 return True"},{"question":"You are given an array of N integers and a number K. You need to determine if there exists a pair of elements in the array such that their sum is exactly K. Constraints * 2 leq N leq 10^5 * -10^9 leq array[i] leq 10^9 * -10^9 leq K leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N K array[1] array[2] ... array[N] Output Print \\"YES\\" if there exists a pair of elements in the array that sum up to K. Otherwise, print \\"NO\\". Examples Input 5 9 2 7 11 15 1 Output YES Input 4 20 3 1 4 9 Output NO","solution":"def pair_with_sum_exists(n, k, array): Determines if there exists a pair of elements in the array such that their sum is exactly K. Parameters: n (int): The number of elements in the array. k (int): The target sum. array (list of int): The list of integers. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in array: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Sam and Grace are playing a game with strings. In the game, they take turns, with Sam going first, and at each turn, a player must remove a single character from the string. The goal of the game is to make the string a palindrome. If a player makes the string a palindrome after their turn, they win the game. If the string is already a palindrome at the beginning of a player\'s turn, they win immediately without removing any characters. The game will always end with a winner, as one of the players eventually creates a palindrome or the string becomes a single character. The input is a string representing the initial state of the string they are playing with. Your task is to determine which player will win the game assuming both players play optimally. Input A single string s which represents the initial string that Sam and Grace are playing with. The length of string s is between 1 and 1000 inclusive. Output Output \\"Sam\\" if Sam wins the game, and \\"Grace\\" if Grace wins the game. Examples Input racecar Output Sam Input abca Output Grace Note In the first example, the string \\"racecar\\" is already a palindrome, so Sam wins immediately. In the second example, Sam will remove \'b\' to make the string \\"aca\\", and then Grace will remove the remaining \'c\', creating the palindrome \\"aa\\".","solution":"def will_sam_win(s): Determines which player will win the game assuming both play optimally. Parameters: s (str): The initial string that Sam and Grace are playing with. Returns: str: \\"Sam\\" if Sam wins, \\"Grace\\" if Grace wins. def is_palindrome(str): return str == str[::-1] if is_palindrome(s): return \\"Sam\\" # If the length of the string is odd, Sam wins, else Grace wins return \\"Sam\\" if len(s) % 2 != 0 else \\"Grace\\""},{"question":"Given a list of integers representing the amount of rainfall recorded over a series of days, write a function that outputs two values: 1. The average rainfall. 2. The number of days where the rainfall was greater than the average. Your function should take in a list of integers and return a tuple containing the two values: the average rainfall (rounded to the closest integer) and the number of days above the average rainfall. # Input - A single list of integers, where each integer represents the amount of rainfall for a day. # Output - A tuple containing two values: - An integer representing the average rainfall. - An integer representing the number of days where the recorded rainfall was greater than the average. # Example Input [3, 6, 9, 2, 5] Output (5, 2) # Explanation - The average rainfall over the given days is (3 + 6 + 9 + 2 + 5) / 5 = 5 - There are 2 days where the rainfall was greater than the average (6 and 9).","solution":"def rainfall_statistics(rainfall): Returns the average rainfall and the number of days with rainfall above the average. Parameters: rainfall (list): A list of integers representing daily rainfall amounts. Returns: tuple: (average_rainfall, days_above_average) average_rainfall (int): The average rainfall rounded to the closest integer. days_above_average (int): The number of days where the rainfall was above the average. if not rainfall: return (0, 0) total_rainfall = sum(rainfall) number_of_days = len(rainfall) average_rainfall = round(total_rainfall / number_of_days) days_above_average = sum(1 for rain in rainfall if rain > average_rainfall) return (average_rainfall, days_above_average)"},{"question":"Emma is playing a game where she needs to transform a series of commands into a final position on a coordinate plane. Each command consists of a direction (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right) followed by a number indicating the units to move in that direction. Your task is to determine Emma\'s final coordinates after executing all the commands. Constraints * 1 ≤ Number of commands ≤ 1000 * 1 ≤ Units of movement per command ≤ 100 Input The input is given from Standard Input in the following format: N direction1 units1 direction2 units2 ... directionN unitsN Where N is the number of commands. Output Print the final coordinates as two integers separated by a space. Examples Input 3 U 2 R 3 D 1 Output 3 1 Input 4 L 4 U 2 R 1 D 3 Output -3 -1","solution":"def final_position(commands): Returns the final coordinates after executing all the commands. Args: commands (list of tuple): List of tuples where each tuple contains a direction (\'U\', \'D\', \'L\', \'R\') and an integer indicating the units to move in that direction. Returns: tuple: Final coordinates as (x, y). x, y = 0, 0 direction_map = { \'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0) } for direction, units in commands: dx, dy = direction_map[direction] x += dx * units y += dy * units return x, y"},{"question":"You are given a list of users, each with a unique integer user ID and a list of other users they follow. A user can follow multiple other users, and this relationship is not necessarily bidirectional (for instance, user A can follow user B, but user B might not follow user A and vice versa). Your task is to recommend new users for each user to follow. A user X should be recommended to follow user Y if: 1. User Y is followed by a user that X follows, but X does not currently follow Y. 2. User X and user Y are not the same user. Considering these rules, generate the list of user IDs each user should follow. The recommended user IDs should be sorted in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of users. Each of the next n lines describes a user with x_i \\"k a_1 a_2 ... a_k\\" (1 ≤ x_i ≤ 10000, 0 ≤ k ≤ n-1, 1 ≤ a_j ≤ 10000 for each valid j, a_1, a_2, ..., a_k are distinct and do not contain x_i) — the user ID x_i followed by an integer k representing the number of users x_i follows, followed by k space-separated integers representing the IDs of the users that x_i follows. Output Output n lines. The i-th line should contain the user ID, followed by a space, followed by an integer m_i representing the number of recommended users for the i-th user to follow, followed by m_i space-separated integers representing the recommended user IDs in ascending order. If there are no recommendations for a user, the line should just contain the user ID followed by a 0. Example Input 4 1 2 2 3 2 1 4 3 1 4 4 0 Output 1 1 4 2 0 3 0 4 0 Explanation The recommendations for user 1 are as follows: - User 1 follows users 2 and 3. - User 2 follows user 4, so 4 is a recommended user for 1 (since 1 does not follow 4). The rest of the users do not have any recommendations because: - User 2 follows user 4, but there are no other users that follow users user 2 follows. - User 3 follows user 4, but there are no other users that follow users user 3 follows. - User 4 does not follow anyone, so there are no recommendations for user 4.","solution":"def recommend_users_to_follow(n, data): from collections import defaultdict follow_map = defaultdict(set) users = [] for entry in data: parts = list(map(int, entry.split())) x_i = parts[0] k = parts[1] follows = parts[2:] follow_map[x_i].update(follows) users.append((x_i, follows)) recommendations = {} for user, follows in users: recommended = set() for followed_user in follows: for potential in follow_map[followed_user]: if potential != user and potential not in follow_map[user]: recommended.add(potential) recommendations[user] = sorted(recommended) output = [] for user in sorted(recommendations.keys()): rec = recommendations[user] output.append(f\\"{user} {len(rec)}\\" + (\\" \\" + \\" \\".join(map(str, rec)) if rec else \\"\\")) return output # Example input data n = 4 data = [ \\"1 2 2 3\\", \\"2 1 4\\", \\"3 1 4\\", \\"4 0\\" ] print(\\"n\\".join(recommend_users_to_follow(n, data)))"},{"question":"You have been hired as a junior developer at a telecommunications company. They are currently working on optimizing their network bandwidth usage. One of the tasks involves monitoring multiple servers and ensuring the total data transfer from these servers does not exceed a specified limit within a given time period. Your task is to write a program that, given a list of data transfer amounts for each server in a specific time period, verifies if the sum of the data transfer amounts is within the company\'s predefined limit. First line of the input contains T, the total number of testcases to be processed. Then T sets of data follow. Each set of data consists of two lines: - The first line contains two integers, N (the number of servers) and L (the data transfer limit). - The next line contains N space-separated positive integers, representing the data transfer amount for each server. 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ L ≤ 10000000 1 ≤ data transfer amounts in given set ≤ 100000 Output a string for each testcase in a new line. Print \\"WITHIN LIMIT\\" if the total data transfer is within the limit. If it exceeds the limit, print \\"EXCEEDS LIMIT\\". SAMPLE INPUT 3 4 100 20 30 10 25 3 150 60 45 20 5 200 50 40 60 30 20 SAMPLE OUTPUT WITHIN LIMIT WITHIN LIMIT EXCEEDS LIMIT Explanation: - For the first testcase, the sum of the data transfers is 20 + 30 + 10 + 25 = 85 which is within the limit of 100, thus print \\"WITHIN LIMIT\\". - For the second testcase, the sum is 60 + 45 + 20 = 125 which is within the limit of 150, thus print \\"WITHIN LIMIT\\". - For the third testcase, the sum is 50 + 40 + 60 + 30 + 20 = 200 which equals the limit but does not exceed it, thus print \\"WITHIN LIMIT\\".","solution":"def check_data_transfer(T, datasets): results = [] for i in range(T): N, L = datasets[i*2] data_transfers = datasets[i*2 + 1] if sum(data_transfers) <= L: results.append(\\"WITHIN LIMIT\\") else: results.append(\\"EXCEEDS LIMIT\\") return results"},{"question":"Course Prerequisites In a university, there are C courses available for students to enroll in. Each course may have prerequisites which are courses that must be completed before enrolling in the course. As a student, you want to complete a specific course but you need to find out the minimum number of courses you need to take, including the prerequisites, to be able to enroll in that particular course. Given the number of courses and their prerequisites, along with the initial course you want to take, determine the minimum number of courses needed to be taken to reach the desired course. If it is not possible to reach the desired course, return -1 . # Input The input is given from standard input in the following format: ``` C P initial_course target_course course_1 course_2 ... course_3 course_4 ... ... ``` Here: - C is the number of courses. - P is the number of prerequisite pairs. - initial_course is the course you want to start with. - target_course is the course you wish to enroll in. - Each pair ( course_i course_j ) denotes that to enroll in course_j , course course_i must be completed first. # Output Output the minimum number of courses needed to be taken to reach the target course from the initial course. If it is not possible, print -1 . # Constraints - 1 leq C leq 10^4 - 0 leq P leq 10^5 - 1 leq initial_course, target_course leq C # Example Input ``` 4 3 1 4 1 2 2 3 3 4 ``` Output ``` 4 ``` Explanation To reach course 4 starting from course 1, you need to take courses in the following order: 1 -> 2 -> 3 -> 4","solution":"from collections import deque, defaultdict def minimum_courses(C, P, initial_course, target_course, prerequisites): if initial_course == target_course: return 1 graph = defaultdict(list) in_degree = {i: 0 for i in range(1, C + 1)} for a, b in prerequisites: graph[a].append(b) in_degree[b] += 1 queue = deque([initial_course]) distances = {initial_course: 1} while queue: course = queue.popleft() current_distance = distances[course] for neighbor in graph[course]: if neighbor not in distances: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances.get(target_course, -1)"},{"question":"A renowned scientist has discovered a remarkable property of a unique type of sequence known as the \'Recursive Magical Sequence (RMS)\' defined as follows: 1. The first element of the sequence is always 1, i.e., RMS[1] = 1. 2. For any n > 1, RMS[n] is equal to the greatest common divisor (GCD) of the two preceding elements and the position of the current element. Formally, RMS[n] = GCD(RMS[n-1], RMS[n-2], n). Given a positive integer m, your task is to compute the m-th element of the Recursive Magical Sequence. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single integer m (1 ≤ m ≤ 10^5) — the position of the element in the sequence that you need to compute. Output For each test case, print the m-th element of the Recursive Magical Sequence. Examples Input 3 1 2 10 Output 1 1 1","solution":"import math def rms_sequence(n): if n == 1: return 1 prior_2 = 1 # RMS[1] prior_1 = 1 # RMS[2] (This RHS value is just for initialization and doesn\'t mean RMS[2] is 1. We\'ll compute RMS[2] in next loop iteration.) for i in range(2, n + 1): current = math.gcd(prior_1, prior_2, i) prior_2 = prior_1 prior_1 = current return prior_1 def process_test_cases(test_cases): results = [] for m in test_cases: results.append(rms_sequence(m)) return results"},{"question":"You are given a grid with `N` rows and `M` columns. Each cell in the grid contains a single lowercase letter. The task is to find the length of the longest path such that each cell in the path contains a unique letter. A path can move to any of its 4 adjacent cells (up, down, left, right). Constraints * All values in the input are integers. * 1 leq N, M leq 1000 * The sum of values of N times M in each input file is at most 10^6. Input Input is given from Standard Input in the following format: N M grid_row_1 ... grid_row_N Each grid_row_i is a string of length M representing the i-th row of the grid. Output Print a single integer, the length of the longest path with unique letters. Example Input 3 4 abcd efgh ijkl Output 12 Explanation One of the longest paths with unique letters is: a -> b -> c -> d -> h -> l -> k -> j -> i -> e -> f -> g where the path covers all cells with unique letters in the grid.","solution":"def longest_unique_path(N, M, grid): def dfs(x, y, visited): nonlocal max_length max_length = max(max_length, len(visited)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] not in visited: visited.add(grid[nx][ny]) dfs(nx, ny, visited) visited.remove(grid[nx][ny]) max_length = 0 for i in range(N): for j in range(M): dfs(i, j, set(grid[i][j])) return max_length # Reading from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = data[2:] print(longest_unique_path(N, M, grid))"},{"question":"Anna is a gardener taking care of her garden, which consists of a row of flower beds. Each flower bed can be either vibrant with flowers or barren. Anna can perform two types of operations: 1. Water a specific flower bed; if the flower bed is barren, it will become vibrant. 2. Observe a selected contiguous subarray of flower beds to count the number of vibrant ones in it. Given the initial state of the flower beds, the goal is to help Anna by performing a series of operations to know the number of vibrant flower beds in various subarrays and make all flower beds vibrant if possible. Input - The first line contains an integer N (1 ≤ N ≤ 100000), the number of flower beds. - The second line contains a string of N characters, each being either \'V\' (vibrant) or \'B\' (barren), representing the initial state of the flower beds. - The third line contains an integer Q (1 ≤ Q ≤ 100000), the number of operations. - The next Q lines each contain one of the following types of operations: - \\"W x\\" (1 ≤ x ≤ N), meaning to water the flower bed at position x. - \\"O l r\\" (1 ≤ l ≤ r ≤ N), meaning to observe the number of vibrant flower beds in the subarray ranging from l to r, inclusive. Output - For each \\"O l r\\" operation, output the number of vibrant flower beds in the specified subarray. Example Input 7 BVBVBVB 5 O 1 7 W 1 O 1 7 W 3 O 1 7 Output 3 4 5 Explanation - Initially, there are 3 vibrant flower beds at positions 2, 4, 6. - After the first watering operation (W 1), the state becomes \'VVBVVBVB\'. - Then, there are 4 vibrant flower beds in the entire row. - After the second watering operation (W 3), the state becomes \'VVVVVVB\'. - So, the last observation indicates 5 vibrant flower beds in the row.","solution":"def garden_operations(N, flowerbeds, Q, operations): def count_vibrant(l, r): return flowerbeds[l-1:r].count(\'V\') results = [] flowerbeds = list(flowerbeds) for operation in operations: if operation.startswith(\\"W\\"): _, x = operation.split() x = int(x) - 1 flowerbeds[x] = \'V\' elif operation.startswith(\\"O\\"): _, l, r = operation.split() l, r = int(l), int(r) results.append(count_vibrant(l, r)) return results"},{"question":"You are tasked with designing a system to manage and query a collection of books in a library. Each book is identified by a unique ISBN number and includes metadata such as the title, author, and release year. Your system should support three types of operations: 1. Add a book to the library. It is guaranteed that the book does not already exist in the library. 2. Remove a book from the library using its ISBN number. It is guaranteed that the book exists in the library. 3. Retrieve all books written by a particular author and list them by their release year in ascending order. If there are multiple books published in the same year, they should be ordered by ISBN in ascending order. Input The first line contains a single integer q (1 ≤ q ≤ 2 ⋅ 10^5) – the number of queries. Each of the following q lines describes a query. For a query of type 1 (Add a book), the line contains four values: ``` 1 ISBN title author year ``` where ISBN, title, and author are strings (1 ≤ length ≤ 100), and year is an integer (1000 ≤ year ≤ 2023). For a query of type 2 (Remove a book), the line contains: ``` 2 ISBN ``` For a query of type 3 (Retrieve books by author), the line contains: ``` 3 author ``` It is guaranteed that there are no more than 10^5 queries of type 1 or 2, and no more than 10^5 queries of type 3. Output For each query of the third type, output the list of books written by the specified author in the required order. Each book should be printed on a new line in the format: ``` ISBN title year ``` If the author has no books in the library, output a single line with the text \\"No books found\\". Examples Input 9 1 978-3-16-148410-0 \\"The Catcher in the Rye\\" \\"J.D. Salinger\\" 1951 1 978-0-684-84328-5 \\"Franny and Zooey\\" \\"J.D. Salinger\\" 1961 1 978-0-14-004259-7 \\"Nine Stories\\" \\"J.D. Salinger\\" 1953 2 978-0-14-004259-7 3 \\"J.D. Salinger\\" 1 978-0-7432-7356-5 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 1925 3 \\"F. Scott Fitzgerald\\" 2 978-0-7432-7356-5 3 \\"F. Scott Fitzgerald\\" Output 978-3-16-148410-0 \\"The Catcher in the Rye\\" 1951 978-0-684-84328-5 \\"Franny and Zooey\\" 1961 978-3-16-148410-0 \\"The Catcher in the Rye\\" 1951 No books found No books found","solution":"class Library: def __init__(self): self.books_by_isbn = {} self.books_by_author = {} def add_book(self, isbn, title, author, year): if isbn in self.books_by_isbn: return # Book already exists book = {\'isbn\': isbn, \'title\': title, \'author\': author, \'year\': year} self.books_by_isbn[isbn] = book if author not in self.books_by_author: self.books_by_author[author] = [] self.books_by_author[author].append(book) def remove_book(self, isbn): if isbn not in self.books_by_isbn: return # Book does not exist book = self.books_by_isbn.pop(isbn) self.books_by_author[book[\'author\']].remove(book) if not self.books_by_author[book[\'author\']]: del self.books_by_author[book[\'author\']] def retrieve_books_by_author(self, author): if author not in self.books_by_author: return [\\"No books found\\"] books = sorted(self.books_by_author[author], key=lambda x: (x[\'year\'], x[\'isbn\'])) return [f\\"{book[\'isbn\']} \\"{book[\'title\']}\\" {book[\'year\']}\\" for book in books]"},{"question":"In a magical land, there are N distinct types of magical stones arranged in a line. Each stone has a distinct power level. A wizard has a special wand that can alter the arrangement of these stones to invoke different spells. The wizard wants to perform Q operations, and each operation allows him to query a specific contiguous segment of stones and find the sum of their power levels. You are given an array `P` of size N where `P[i]` denotes the power level of the i-th stone. You will then receive Q queries. Each query is described by two integers L and R, where you must determine the sum of the power levels of stones from index L to index R inclusive. Input: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of stones. - The next line contains N space-separated integers, denoting the array `P`. - The next line contains an integer Q, the number of queries. - The following Q lines each contain two space-separated integers L and R, representing the indices for each query. Output: - For each query, print the sum of the power levels of stones from index L to index R inclusive. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ P[i] ≤ 1000 1 ≤ Q ≤ 10^4 1 ≤ L ≤ R ≤ N SAMPLE INPUT 1 5 1 2 3 4 5 3 1 3 2 5 1 5 SAMPLE OUTPUT 6 14 15","solution":"def handle_queries(T, test_cases): results = [] for test_case in test_cases: N, P, Q, queries = test_case # Compute prefix sums for optimised range queries prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + P[i - 1] for L, R in queries: results.append(prefix_sums[R] - prefix_sums[L - 1]) return results"},{"question":"You are given an array of integers. For each integer in the array, calculate the number of set bits (1s) in its binary representation and find the sum of all these counts. Write a function that receives the number of test cases and an array of integers for each test case, and returns the sum of the set bits for all integers in the array. Input: The first line contains an integer t, the number of test cases. Each test case starts with an integer n, the number of integers in the array, followed by n space-separated integers. Output: For each test case, print the sum of the set bits for all integers in the array. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 1 ≤ integer ≤ 10^9 Problem Setter: John Doe SAMPLE INPUT 2 3 1 2 3 4 4 5 6 7 SAMPLE OUTPUT 4 9 Explanation Test case #1 - The binary representations of 1, 2, 3 are 001, 010, 011 respectively. The counts of set bits are 1, 1, and 2, and their sum is 4. Test case #2 - The binary representations of 4, 5, 6, 7 are 100, 101, 110, 111 respectively. The counts of set bits are 1, 2, 2, and 3, and their sum is 8.","solution":"def sum_of_set_bits(t, test_cases): Calculate the sum of the set bits (1s) in the binary representation of each integer for each test case. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n followed by n integers. Returns: list of int: Sum of the set bits for each test case. results = [] for test_case in test_cases: n, *numbers = test_case total_set_bits = sum(bin(num).count(\'1\') for num in numbers) results.append(total_set_bits) return results"},{"question":"A popular social media platform has implemented a new feature where users can join communities and participate in discussions. Each community operates on a special posting schedule, and you are tasked with determining the maximum number of posts a user can make before needing to take a break. Each community\'s posting schedule is represented as a sequence of n integers, where each integer indicates the number of hours a user can post continuously in a day. After these hours, the user must take a mandatory break until the same time the next day. Given the posting schedules for different communities, write a program to calculate the maximum number of posts a user can make in a single uninterrupted session for each community\'s schedule. Input The first line of the input contains an integer t (1 ≤ t ≤ 10,000) — the number of test cases. For each test case, there will be two lines: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of days in the posting schedule. The second line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 24) — the number of hours a user can post continuously on the i-th day. Output Print t lines, where the i-th line contains the maximum number of posts a user can make in a single uninterrupted session for the i-th test case\'s posting schedule. Example Input 3 7 3 4 2 0 6 5 7 3 10 2 10 1 0 Output 7 10 0 Note In the first test case, the user can post a maximum of 7 posts on the last day. In the second test case, the user can post 10 posts on the first or last day. In the third test case, the user cannot make any posts as the only day in the schedule allows 0 posting hours.","solution":"def max_posts(t, test_cases): results = [] for i in range(t): n, schedule = test_cases[i] # Finding the maximum number of hours a user can post continuously in a single day max_posts_continuously = max(schedule) results.append(max_posts_continuously) return results"},{"question":"Berland often struggles with cyberattacks, and the country\'s cybersecurity unit must analyze a network\'s connections to identify potential vulnerabilities. A computer network can be represented as a graph, where each computer is a node and each connection between two computers is an edge. Since some computers are more critical than others, it is important to know how many critical connections (bridges) exist in the network. A critical connection is an edge that, if removed, would make two formerly connected parts of the network become disconnected. Given a network of n computers (nodes) and several connections (edges), your task is to find all the critical connections in the network. Input The first line contains an integer n — the number of computers in the network. The second line contains an integer m — the number of connections in the network. The following m lines contain two integers each, u and v, representing a connection between computers u and v. Output Print all critical connections (one per line) in the format \\"u v\\". Make sure to sort the connections in ascending order of u first, and then v. If there are no critical connections, print \\"No critical connections\\". Examples Input 5 5 1 2 1 3 3 4 3 5 4 5 Output 1 2 1 3 Input 4 3 1 2 2 3 3 4 Output 1 2 2 3 3 4 Input 6 7 1 2 1 3 2 3 2 4 3 5 4 5 5 6 Output 5 6","solution":"from collections import defaultdict def find_critical_connections(n, m, connections): def dfs(node, parent, discovery_time, low_time, visited, graph, bridges, time): visited[node] = True discovery_time[node] = low_time[node] = time time += 1 for neighbor in graph[node]: if neighbor == parent: continue if not visited[neighbor]: dfs(neighbor, node, discovery_time, low_time, visited, graph, bridges, time) low_time[node] = min(low_time[node], low_time[neighbor]) if low_time[neighbor] > discovery_time[node]: bridges.append((min(node, neighbor), max(node, neighbor))) else: low_time[node] = min(low_time[node], discovery_time[neighbor]) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) discovery_time = [float(\'inf\')] * (n + 1) low_time = [float(\'inf\')] * (n + 1) visited = [False] * (n + 1) bridges = [] for i in range(1, n + 1): if not visited[i]: dfs(i, -1, discovery_time, low_time, visited, graph, bridges, 0) if len(bridges) == 0: print(\\"No critical connections\\") else: for u, v in sorted(bridges): print(u, v) # Example usage n = 5 m = 5 connections = [ (1, 2), (1, 3), (3, 4), (3, 5), (4, 5) ] find_critical_connections(n, m, connections)"},{"question":"In a certain country, all phone numbers are represented using a standard format standardized as \\"+CC XXXXXXXXXX\\". Here, \\"+CC\\" is the country code, and \\"XXXXXXXXXX\\" is a 10-digit number. For local usage, the country code is often omitted, and the 10-digit number is dialed directly as \\"XXXXXXXXXX\\". However, some ambiguities may arise when certain phone numbers share a common suffix. Your task is to write a program that, given a set of phone numbers in varying formats, determines whether any two different phone numbers are actually the same when the country code is omitted. If they are, the program should output \\"SIMILAR\\" meaning there are ambiguities, otherwise it should output \\"UNIQUE\\". Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of phone numbers. Each of the following n lines contains a string representing the phone number in one of the formats \\"+CC XXXXXXXXXX\\" or \\"XXXXXXXXXX\\". Output A single line of the output should contain \\"SIMILAR\\" if there are at least two different phone numbers that are the same when the country code is omitted, and \\"UNIQUE\\" otherwise. Examples Input 3 +12 3456789012 3456789012 +34 5678901234 Output SIMILAR Input 2 +12 3456789012 +34 5678901234 Output UNIQUE Input 4 1234567890 +91 1234567890 +44 0987654321 9876543210 Output SIMILAR","solution":"def check_phone_numbers(n, phone_numbers): Checks if any two different phone numbers are the same when the country code is omitted. :param n: int, number of phone numbers :param phone_numbers: list of phone numbers in varying formats :return: \\"SIMILAR\\" if there are ambiguities, otherwise \\"UNIQUE\\" local_numbers = set() for phone in phone_numbers: if phone.startswith(\'+\'): local_phone = phone.split(\' \')[1] else: local_phone = phone if local_phone in local_numbers: return \\"SIMILAR\\" local_numbers.add(local_phone) return \\"UNIQUE\\""},{"question":"Alice is a software developer, and she loves working with arrays and strings. One day, she encountered an interesting problem while trying to optimize a coding solution. She has an array of integers, and her task is to find the total number of subarrays whose sum is exactly equal to a given target value X. A subarray is a contiguous part of an array. For example, if she has an array `[1, 2, 3]` and the target sum is `3`, the subarrays `[1, 2]` and `[3]` both have sums equal to `3`. Help Alice by writing a function `countSubarrays` that receives an array of integers and a target sum and returns the total number of subarrays that sum up to the given target. # Function Signature ```python def countSubarrays(arr: List[int], target: int) -> int: pass ``` # Input - The first input line contains two integers, `N` (1 ≤ N ≤ 10^5), the number of elements in the array, and `X` (-10^9 ≤ X ≤ 10^9), the target sum. - The second line contains `N` integers, which represent the array elements. Each integer in the array can range from -10^4 to 10^4. # Output - Output a single integer which is the total number of subarrays whose sum is exactly equal to the target value X. # Example Input ``` 5 5 1 2 3 2 1 ``` Output ``` 2 ``` Explanation - The subarrays `[2, 3]` and `[5]` both have sums that equal to 5. # Constraints - The function should be efficient enough to handle the upper limits of the input constraints.","solution":"from typing import List def countSubarrays(arr: List[int], target: int) -> int: Returns the number of subarrays whose sum is exactly equal to the target. count = 0 current_sum = 0 prefix_sums = {0: 1} # to handle subarrays starting from index 0 for num in arr: current_sum += num if current_sum - target in prefix_sums: count += prefix_sums[current_sum - target] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"You are in charge of managing a weekly developer coding contest. One of the challenges introduced in the contest is to determine if an input string can be segmented into a sequence of one or more valid dictionary words. A dictionary word is defined as a word that exists in the provided list of words. The segmentation must use up the entire input string, and the same dictionary word can be used multiple times. You need to write a function that takes a string and a list of dictionary words as input and returns whether the input string can be completely segmented into one or more dictionary words. Input - The first line contains a single string s (1 ≤ |s| ≤ 300) — the string that needs to be segmented. - The second line contains an integer n (1 ≤ n ≤ 100) — the number of words in the dictionary. - The following n lines each contain a single string w (1 ≤ |w| ≤ 20) — the dictionary words. Output Print \\"YES\\" if the input string can be segmented into one or more dictionary words. Otherwise, print \\"NO\\". Examples Input leetcode 2 leet code Output YES Input applepenapple 4 apple pen app le Output YES Input catsandog 5 cats dog sand and cat Output NO Note Consider the first example. The input string \\"leetcode\\" can be segmented as \\"leet code\\", which both are valid dictionary words. In the second example, the input string \\"applepenapple\\" can be segmented as \\"apple pen apple\\", which all are valid dictionary words. In the third example, \\"catsandog\\" cannot be segmented fully into valid dictionary words. The closest segmentation \\"cats and og\\" leaves the substring \\"og\\" which is not in the dictionary. Therefore, the output is \\"NO\\".","solution":"def can_segment_string(s, dict_words): Returns \\"YES\\" if the input string can be completely segmented into one or more dictionary words, otherwise returns \\"NO\\". word_set = set(dict_words) dp = [False] * (len(s) + 1) # dp[i] indicates if s[:i] can be segmented dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\""},{"question":"A transportation company wants to optimize its delivery routes to minimize transportation costs. The company operates in a city with `n` delivery locations connected by `m` bidirectional roads. Each road has a specific travel cost. The goal is to determine the minimum total travel cost to deliver goods to all delivery locations from a single central warehouse located at location `1`. The task is to compute the minimum spanning tree (MST) of the given graph, where the sum of the weights (travel costs) of the edges in the MST is minimized. Input: The first line contains two integers `n` and `m` — the number of delivery locations and the number of roads, respectively. The next `m` lines contain three integers `u`, `v`, and `w` each, which represent a road between location `u` and location `v` with a travel cost of `w`. Output: Output the minimum total travel cost to connect all delivery locations from the central warehouse. If it is impossible to connect all delivery locations, output `-1`. Constraints: - 1 ≤ n ≤ 100,000 - 0 ≤ m ≤ 200,000 - 1 ≤ u, v ≤ n - 1 ≤ w ≤ 10^6 Example: Input: 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 Output: 6 Explanation: The minimum spanning tree connects all locations with a total travel cost of 6: by using roads (1-2, 2-3, and 2-4).","solution":"import heapq def minimum_travel_cost(n, m, roads): if n == 1: return 0 if m == 0: return -1 graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) visited = set() min_heap = [(0, 1)] # (cost, node) total_cost = 0 while min_heap and len(visited) < n: cost, u = heapq.heappop(min_heap) if u not in visited: visited.add(u) total_cost += cost for w, v in graph[u]: if v not in visited: heapq.heappush(min_heap, (w, v)) return total_cost if len(visited) == n else -1"},{"question":"In a distant galaxy called Zog, there exists a unique market with console-based buying and selling. On this market, there are two types of items: unique items (represented by unique names) and their corresponding prices. All the items are put up for sale by different sellers at various prices, but each seller can only list one item. Buyers have specific budgets they\'re willing to spend on a single item. Given a list of N items with their names and prices, followed by M buyers with their respective budgets, determine for each buyer whether there is at least one item they can afford to buy. Constraints * All values in input are integers, except for item names which are alphanumeric strings. * 1 leq N, M leq 100 * 1 leq |item_name| leq 20 (Length of each item name) * 1 leq price_i, budget_j leq 10^6 * Item names are unique. Input Input is given from Standard Input in the following format: ``` N item_1 price_1 item_2 price_2 ... item_N price_N M budget_1 budget_2 ... budget_M ``` Output Print M lines. Each line is either `Yes` or `No` based on whether the respective buyer can afford at least one item. Examples Input ``` 3 LaserGun 5000 Spaceship 100000 HealthPotion 100 2 6000 50 ``` Output ``` Yes No ``` Input ``` 4 HyperDrive 35000 PlasmaShield 25000 AlienArtifact 1500000 StarMap 7000 3 1000000 25000 50000 ``` Output ``` Yes Yes Yes ``` Input ``` 2 NanoSuit 500000 CyberSword 250000 3 300000 100000 600000 ``` Output ``` Yes No Yes ```","solution":"def can_afford_items(N, items, M, budgets): Determines if each buyer can afford at least one item. :param N: Number of items (int) :param items: List of tuples, each containing (item_name, price) (List[Tuple[str, int]]) :param M: Number of buyers (int) :param budgets: List containing budgets of buyers (List[int]) :return: List of \'Yes\' or \'No\' based on whether each buyer can afford an item # Extract prices from items prices = [price for item_name, price in items] results = [] for budget in budgets: # Check if they can afford at least one item if any(budget >= price for price in prices): results.append(\'Yes\') else: results.append(\'No\') return results # Helper function to read input and return a formatted output def process_input_output(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) items = [(line.split()[0], int(line.split()[1])) for line in lines[1:N+1]] M = int(lines[N+1]) budgets = [int(lines[N+2+i]) for i in range(M)] return can_afford_items(N, items, M, budgets)"},{"question":"Cryptic Chessboard is a game that involves arranging pieces on an NxN chessboard. The goal is to move pieces from a given starting arrangement into a specified goal arrangement using the fewest number of moves. Each piece can move either horizontally, vertically, or diagonally to an empty square. Different pieces have different movement costs. The problem is defined on a standard chessboard where pieces satisfying the following properties: 1. A King can move one square in any direction (horizontally, vertically, or diagonally), and the cost is `ck`. 2. A Bishop can move any number of squares diagonally, and the cost is `cb`. 3. A Knight can move in an L-shape: two squares in one direction and then one square perpendicular, or vice versa, and the cost is `cn`. Given the costs and the starting and goal arrangements, your task is to compute the minimum total cost to achieve the goal arrangement. **Input** The input consists of several datasets. The first line of each dataset contains three integers `ck`, `cb`, and `cn`, which are the respective costs for moving a King, a Bishop, and a Knight. You can assume that `ck`, `cb`, and `cn` are positive integers less than 100. The next line contains the integer `N`, which is the size of the chessboard (2 ≤ N ≤ 8). The following `N` lines specify the starting arrangement, where each line consists of `N` characters. Each character is either \'K\' (King), \'B\' (Bishop), \'N\' (Knight), or \'.\' (empty square). Finally, the next `N` lines specify the goal arrangement in the same format. The end of the input is indicated by three zeros in the first line of a dataset. **Output** For each dataset, output the minimum total cost in a line to achieve the goal arrangement. No other characters should appear in the output. **Example** Input: ``` 10 20 15 3 K.. ... ..B B.. ... ..K 5 15 10 4 KN.. .... .... ..BK .... .... . ..B N..K 0 0 0 ``` Output: ``` 40 35 ```","solution":"from heapq import heappop, heappush from math import inf def min_cost_to_reach_goal(ck, cb, cn, N, start, goal): def get_king_moves(x, y): moves = [] for dx in [-1, 0, 1]: for dy in [-1, 0, 1]: if dx == 0 and dy == 0: continue if 0 <= x + dx < N and 0 <= y + dy < N: moves.append((x + dx, y + dy)) return moves def get_bishop_moves(x, y): moves = [] for dx in [-1, 1]: for dy in [-1, 1]: new_x, new_y = x, y while True: new_x += dx new_y += dy if 0 <= new_x < N and 0 <= new_y < N: moves.append((new_x, new_y)) else: break return moves def get_knight_moves(x, y): moves = [] for dx, dy in [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]: if 0 <= x + dx < N and 0 <= y + dy < N: moves.append((x + dx, y + dy)) return moves starting_positions = {\'K\': [], \'B\': [], \'N\': []} goal_positions = {\'K\': [], \'B\': [], \'N\': []} for i in range(N): for j in range(N): if start[i][j] in \'KBN\': starting_positions[start[i][j]].append((i, j)) if goal[i][j] in \'KBN\': goal_positions[goal[i][j]].append((i, j)) def bfs(piece, start_pos, goal_pos, get_moves, cost): queue = [(0, start_pos)] visited = set() visited.add(start_pos) while queue: curr_cost, (x, y) = heappop(queue) if (x, y) == goal_pos: return curr_cost for new_x, new_y in get_moves(x, y): if (new_x, new_y) not in visited: visited.add((new_x, new_y)) heappush(queue, (curr_cost + cost, (new_x, new_y))) return inf def match_pieces(piece, cost, get_moves): assigned = [-1] * len(goal_positions[piece]) matched_cost = 0 for idx, start_pos in enumerate(starting_positions[piece]): min_cost = inf min_idx = -1 for goal_idx, goal_pos in enumerate(goal_positions[piece]): curr_cost = bfs(piece, start_pos, goal_pos, get_moves, cost) if curr_cost < min_cost: min_cost = curr_cost min_idx = goal_idx if min_idx != -1: assigned[min_idx] = idx matched_cost += min_cost return matched_cost total_cost = 0 total_cost += match_pieces(\'K\', ck, get_king_moves) total_cost += match_pieces(\'B\', cb, get_bishop_moves) total_cost += match_pieces(\'N\', cn, get_knight_moves) return total_cost"},{"question":"You are given a list of integers. Your task is to determine how many times the maximum value appears in the list. If there are multiple maximum values, count each occurrence. Constraints * 1≤N≤100 * -10^3 ≤ a_i ≤ 10^3 (for all i in the list) Input The first line contains a single integer N (the number of elements in the list). The second line contains N space-separated integers. Output Output a single integer, the number of times the maximum element appears in the list. Examples Input 5 1 3 3 2 1 Output 2 Input 4 7 7 7 7 Output 4 Input 6 1 2 3 4 5 4 Output 1","solution":"def count_max_occurrences(n, lst): Returns the number of times the maximum value appears in the list. Parameters: n (int): Number of elements in the list lst (list): List of integers Returns: int: Count of maximum value occurrences max_value = max(lst) count = lst.count(max_value) return count"},{"question":"Given a string s consisting of lowercase English letters, you need to form a new string by reordering the characters in s such that no two adjacent characters are the same. If it is possible to do so, return any possible reordering of s. Otherwise, return an empty string. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5). Output Output a single line containing the reordered string or an empty string if no valid reordering exists. Examples Input aab Output aba Input aaab Output (empty string) Note In the first example, one possible reordering of the input string \\"aab\\" is \\"aba\\", which satisfies the condition that no two adjacent characters are the same. In the second example, it is impossible to reorder the string \\"aaab\\" such that no two adjacent characters are the same, so the output is an empty string.","solution":"import heapq from collections import Counter def reorganize_string(s): # Count frequency of each character freq = Counter(s) # Heap to store the characters by their frequency max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char result = \'\'.join(result) if len(result) != len(s): return \\"\\" return result"},{"question":"# Unique Paths with Obstacles A robot is located at the top-left corner of an m x n grid (marked \'Start\'). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\'). However, certain cells in the grid contain obstacles, and the robot cannot move to these cells. Given an m x n grid filled with non-negative integers, where `0` represents an empty cell and `1` represents an obstacle, write a function to find the number of possible unique paths that the robot can take to reach the bottom-right corner. The function should return 0 if there is no possible path from the top-left to the bottom-right corner. Input format The input consists of a single test case: - First line: two integers m and n (1 ≤ m, n ≤ 100), the dimensions of the grid. - Next m lines: each line contains n integers, either 0 or 1, indicating the grid layout. Output format Print a single integer, the number of unique paths from the top-left corner to the bottom-right corner. Constraints * The values in the grid are either 0 or 1. * You start at cell (0,0) and the goal is cell (m-1,n-1). Example Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Explanation: From the top-left corner, the robot has only two paths to reach the bottom-right corner: 1. Right -> Down -> Down -> Right 2. Down -> Right -> Right -> Down Input 1 1 1 Output 0 Explanation: The starting or ending point is an obstacle, so there is no possible path.","solution":"def uniquePathsWithObstacles(grid): This function takes a grid filled with 0s and 1s and returns the number of unique paths from the top-left corner to the bottom-right corner, avoiding obstacles. m = len(grid) n = len(grid[0]) # If the start or end is an obstacle, return 0. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # dp array to store number of ways to reach each cell. dp = [[0 for _ in range(n)] for _ in range(m)] # Initial position is the only place we are initially dp[0][0] = 1 # Fill the dp array. for i in range(m): for j in range(n): # Skip the start as we already filled it. if i == 0 and j == 0: continue if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] # Function to parse the grid input and call the uniquePathsWithObstacles function def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) grid = [] index = 2 for i in range(m): row = [int(data[index + j]) for j in range(n)] grid.append(row) index += n result = uniquePathsWithObstacles(grid) print(result)"},{"question":"Jack loves palindromes. A palindrome is a string that reads the same forward and backward. Given a string, Jack wants to find the minimum number of characters he has to insert to make the string a palindrome. Can you help Jack figure it out? Input The input consists of a single line containing a string s of length n (1 ≤ n ≤ 1000). The string contains only lowercase English letters. Output Print the minimum number of characters Jack needs to insert to make the string a palindrome. Examples Input ab Output 1 Input civic Output 0 Input race Output 3","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of characters needed to be inserted to make the string a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for j in range(n)] for i in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): h = l + gap if s[l] == s[h]: dp[l][h] = dp[l + 1][h - 1] else: dp[l][h] = min(dp[l][h - 1], dp[l + 1][h]) + 1 return dp[0][n - 1]"},{"question":"Alice is a treasure hunter who has stumbled upon an ancient map showing N mysterious landmarks. Alice suspects that these landmarks are connected by an unknown number of carefully concealed paths. Her goal is to uncover the complete network of connections based on limited information. To assist Alice in identifying these paths, Bob, another treasure hunter, offers to provide Alice with answers to specific questions. Alice can ask Bob about the total number of paths between any two sets of landmarks under certain conditions. **Problem:** Alice can ask Bob about the number of direct connections between any two non-empty, disjoint sets of landmarks, provided that these connections do not pass through a specific landmark `v`. Bob will respond with the number of direct connections between landmarks in these sets. Your task is to help Alice deduce the connection network between the N landmarks using Bob\'s answers and then report all the direct paths/edges between them. **Input** - The first line contains an integer `N` (3 ≤ N ≤ 500), the number of landmarks. **Output** - When the landmark network has been revealed, print \\"ANSWER\\" in capital letters on a new line. Then, print `N-1` lines, each containing two space-separated integers, indicating the direct connections (edges) between landmarks. Each edge should be reported exactly once. Your program must then terminate immediately. **Interaction** To ask Bob a question, do the following: 1. Output the size of the first set, `|S|`, on a new line, then the landmarks in `S` on the following line. 2. Output the size of the second set, `|T|`, on a new line, then the landmarks in `T` on the following line. 3. Output the chosen landmark `v` on a new line. Bob’s answer will be the number of direct paths from `S` to `T` that do not pass through `v`. **Constraints and Notes** - S and T must be non-empty and disjoint. - The connection network is pre-defined and does not change based on queries. - Use appropriate flush commands to avoid timeout issues. - Asking invalid questions or exceeding the allowed number of queries may result in an unexpected verdict. **Example Interaction:** Input: ``` 4 ``` Output: ``` 2 1 2 1 3 2 4 ``` The complete interaction will help Alice determine that the connections are as follows: - Landmark 1 is connected to Landmark 2 - Landmark 3 is connected to Landmark 4 **Sample Hidden Network of Landmarks** ``` Landmarks: 1----2 | | 3----4 ```","solution":"def find_edges(N, query): Determines the edges of the hidden network of landmarks by querying the provided query function. edges = [] # A method to construct the initial connection graph (fully connected graph) connection_count = [[0] * N for _ in range(N)] for i in range(N): for j in range(i + 1, N): S = [i + 1] T = [j + 1] response = query(S, T, 1) connection_count[i][j] = response connection_count[j][i] = response visited = [False] * N def dfs(node): visited[node] = True for neighbor in range(N): if connection_count[node][neighbor] > 0 and not visited[neighbor]: edges.append((node + 1, neighbor + 1)) dfs(neighbor) # Pick the first node as the root and find all connected edges dfs(0) print(\\"ANSWER\\") for edge in edges: print(edge[0], edge[1]) def query(S, T, v): Placeholder for the query function used to interact with Bob. In a real scenario, this function would ask Bob and return the number of direct connections. Here, intentionally unimplemented. pass # Assume find_edges will be called with the value of N # find_edges(N, query)"},{"question":"A company has a project management system with n tasks, numbered from 1 to n. Each task has a dependency on certain other tasks, which means it cannot start until all those tasks are completed. You are given the dependency information, and you want to determine in what order to complete the tasks so that no task starts before all its dependencies are completed. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of testcases. Each testcase contains the following: - The first line of each testcase contains one integer n (1 ≤ n ≤ 1000) — the number of tasks. - The next n lines each contain a list of space-separated integers. The first integer of each line is the number of dependencies k (0 ≤ k ≤ n-1) for the corresponding task. The next k integers are the indices of the tasks on which the current task depends. Output For each testcase, print one line containing the task numbers in order of completion. If it\'s not possible to complete all tasks, print -1. Example Input 2 3 0 1 1 1 1 4 0 2 1 3 1 1 0 Output 1 2 3 1 4 3 2 Note In the first test case, task 1 has no dependencies, task 2 depends on task 1, and task 3 also depends on task 1. Therefore, the tasks can be completed in order 1, 2, 3. In the second test case, task 1 and task 4 have no dependencies. Task 2 depends on tasks 1 and 3, and task 3 depends on task 1. Therefore, the tasks can be completed in order 1, 4, 3, 2.","solution":"from collections import deque def find_task_order(n, dependencies): in_degree = [0] * n adj_list = [[] for _ in range(n)] for i in range(n): k = dependencies[i][0] for j in range(1, k+1): dependency = dependencies[i][j] - 1 # adjust to zero indexing adj_list[dependency].append(i) in_degree[i] += 1 queue = deque([i for i in range(n) if in_degree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current + 1) # adjust back to one indexing for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return [-1] def solution(t, test_cases): result = [] for i in range(t): n = test_cases[i][0] dependencies = test_cases[i][1] result.append(find_task_order(n, dependencies)) return result"},{"question":"Given a matrix of size n x n, you need to determine the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. Additionally, some cells of the matrix are blocked and cannot be passed through. Input The first line contains a single integer t (1 ≤ t ≤ 50) – the number of test cases. For each test case, the first line contains a single integer n (1 ≤ n ≤ 20) – the size of the matrix. The next n lines contain n integers each (0 or 1) separated by spaces, representing the matrix. A ‘0’ indicates that the cell is blocked whereas a ‘1’ indicates that the cell is available for movement. Output For each test case, output the number of unique paths from the top-left corner to the bottom-right corner. If no such path exists, output 0. Example Input 3 3 1 1 1 1 0 1 1 1 1 4 1 1 0 1 1 0 1 1 1 1 1 0 0 1 1 1 2 1 0 0 1 Output 2 2 0 Note In the first test case, there are two unique paths from the top-left corner to the bottom-right corner. They are: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second test case, there are two unique paths from the top-left corner to the bottom-right corner. They are: - Right -> Down -> Down -> Right -> Right -> Down - Down -> Down -> Right -> Right -> Down -> Right In the third test case, there is no path from the top-left corner to the bottom-right corner as the only available cells are blocked in a way that makes it impossible to traverse from the top-left to the bottom-right corner.","solution":"def unique_paths(matrix): Calculate the number of unique paths from the top-left to the bottom-right corner in a given matrix. Only moves allowed are to the right and down, and some cells are blocked. :param matrix: List[List[int]] - A 2D array representing the matrix. :return: int - The number of unique paths. n = len(matrix) if matrix[0][0] == 0 or matrix[n-1][n-1] == 0: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if matrix[i][j] == 0: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] else: dp[i][j] += 0 if j > 0: dp[i][j] += dp[i][j-1] else: dp[i][j] += 0 return dp[n-1][n-1] def solve(test_cases): Solve the problem for given test cases. :param test_cases: List of tuples, each containing the size of the matrix and the matrix itself. :return: List of results, each representing the number of paths for a corresponding test case. results = [] for n, matrix in test_cases: results.append(unique_paths(matrix)) return results"},{"question":"You are given a binary tree with `N` nodes, known as the \\"Christmas Tree,\\" where `N` = 2^k - 1 for some integer k ≥ 1. Each node of the tree represents a light bulb that can be turned on or off. Initially, all bulbs are off. You can perform the following operation multiple times: Select any node and toggle the state (on to off, or off to on) of all the bulbs in the subtree rooted at that node, including the node itself. Your task is to determine the minimum number of operations required to turn on all the bulbs in the tree. Constraints - 1 ≤ k ≤ 10 Input The input is given from standard input and will contain a single integer k. Output Print the minimum number of operations required to turn on all the bulbs in the tree. Examples Input 2 Output 1 Input 3 Output 1 Input 4 Output 1","solution":"def min_operations_to_turn_on_bulbs(k): Returns the minimum number of operations required to turn on all the bulbs in a complete binary tree with N = 2^k - 1 nodes. return 1"},{"question":"Alice and Bob are playing a game with boxes and balls. They have \'n\' boxes and \'m\' balls. Initially, all boxes are empty. The game proceeds in turns and in each turn, one player can perform one of the following moves: 1. Add a ball into an empty box. 2. Remove a ball from a box which already has at least one ball. The game continues until one player cannot make a move. Alice makes the first move, then Bob makes the next move, and they alternate turns. The player who cannot make a move loses. Your task is to determine whether Alice has a winning strategy given the initial numbers of boxes \'n\' and balls \'m\'. Input The first line of the standard input contains two integers, n (1 ≤ n ≤ 10^4) representing the number of boxes and m (0 ≤ m ≤ 10^4) representing the number of balls. Output Print \\"Alice\\" if Alice has a winning strategy. Otherwise, print \\"Bob\\". Example 1 Input 5 3 Output Alice Example 2 Input 3 3 Output Bob Explanation In Example 1, Alice can move by putting a ball in any empty box. Due to the alternating moves and the initial count of balls, Alice can force Bob to take the last ball, making Bob lose as he will not have any valid move to perform. In Example 2, both players can remove a ball during their turns. With equal number of balls and boxes, the last ball will necessarily be taken by the second player (i.e., Bob in this case), making Alice lose the game. Hence, Bob has a winning strategy.","solution":"def find_winner(n, m): Determines whether Alice or Bob has a winning strategy in the given game with n boxes and m balls. :param n: Number of boxes (1 ≤ n ≤ 10^4) :param m: Number of balls (0 ≤ m ≤ 10^4) :return: \\"Alice\\" if Alice has a winning strategy, otherwise \\"Bob\\" # If the number of balls is less than the number of boxes, # Alice will always have a move to add a ball to an empty box. # Therefore, Alice will win. if m < n: return \\"Alice\\" # If the number of balls is equal to or greater than the number of boxes, # the player who cannot make a move loses. We\'ll alternate turns starting # with Alice. else: # Initially total number of possible moves if each operation # is considered (adding/removing a ball) total_moves = n + m # If total moves are odd, Alice makes the last move. If even, Bob does. if total_moves % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Company XYZ is working on optimizing its job scheduling system. They need a way to prioritize jobs based on their urgency and processing time so that high-urgency jobs with shorter processing times are given preference. You are asked to implement a scheduling algorithm that sorts the jobs based on these criteria. Description of the problem is as follows: Each job is characterized by two integers: urgency (u) and processing time (t). The primary sorting criterion is the urgency in descending order followed by the processing time in ascending order for jobs with the same urgency. Input - The first line contains an integer n (1 ≤ n ≤ 105) — the number of jobs. - The next n lines each contain two integers, u and t (1 ≤ u, t ≤ 109), representing the urgency and the processing time of each job respectively. Output - Print the sorted job list based on the urgency in descending order and processing time in ascending order for jobs with the same urgency. - Each job should be printed in a single line consisting of the urgency and processing time separated by a space. Examples Input 5 5 10 3 15 5 5 4 20 3 10 Output 5 5 5 10 4 20 3 10 3 15 Input 4 1 10 1 5 3 7 4 1 Output 4 1 3 7 1 5 1 10 Explanation In the first example, there are 5 jobs. The jobs are sorted first by urgency in descending order: - Jobs with urgency 5: 5 5, 5 10 - Jobs with urgency 4: 4 20 - Jobs with urgency 3: 3 10, 3 15 Within the same urgency, jobs are sorted by processing time in ascending order: - Jobs with urgency 5: 5 5, 5 10 - Jobs with urgency 3: 3 10, 3 15","solution":"def prioritize_jobs(num_jobs, jobs): Prioritize and sort jobs based on urgency and processing time. :param num_jobs: int, number of jobs :param jobs: list of tuples, where each tuple contains urgency and processing time of a job :return: list of sorted jobs based on the given criteria # Sort jobs by urgency in descending order, then by processing time in ascending order sorted_jobs = sorted(jobs, key=lambda job: (-job[0], job[1])) return sorted_jobs"},{"question":"Problem statement You are given a string S consisting of lowercase letters. Your task is to determine the minimum number of characters that need to be added to S to make it a palindrome. A palindrome is a string that reads the same backward as forward. # Input - A single string S with 1 leq |S| leq 1000 , where |S| is the length of the string S . # Output - Output a single integer, the minimum number of characters that need to be added to S to make it a palindrome. # Example Input ``` abc ``` Output ``` 2 ``` Input ``` abcba ``` Output ``` 0 ``` Input ``` abcb ``` Output ``` 1 ``` # Explanation: 1. For the input \\"abc\\", we need to add 2 characters to make it a palindrome (\\"abcba\\" or \\"cbabc\\"). 2. For the input \\"abcba\\", it is already a palindrome, so no characters are needed. 3. For the input \\"abcb\\", we need to add 1 character to make it a palindrome (\\"abcba\\").","solution":"def min_chars_to_make_palindrome(S): Returns the minimum number of characters that need to be added to S to make it a palindrome. def is_palindrome(s): return s == s[::-1] n = len(S) for i in range(n): if is_palindrome(S[i:]): return i return n"},{"question":"Given an array of integers and an integer `k`, you are required to find the maximum possible sum of a subarray of length `k`. A subarray is a contiguous part of an array. Write a function that implements this. Function Signature: ```python def max_subarray_sum(arr: List[int], k: int) -> int: ``` The function should take in two parameters: 1. `arr` - List of integers representing the input array. 2. `k` - Integer representing the length of the subarray. The function should return an integer representing the maximum possible sum of a subarray of length `k`. # Constraints - 1 ≤ len(arr) ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 - 1 ≤ k ≤ len(arr) # Input - The first line contains integers `n` and `k`, where `n` is the length of the array and `k` is the subarray length. - The second line contains `n` space-separated integers representing the elements of the array. # Output - A single integer representing the maximum possible sum of a subarray of length `k`. # Example Input: ``` 7 3 2 1 5 1 3 2 -1 ``` Output: ``` 9 ``` Explanation: The subarray with the maximum sum of length 3 is `[5, 1, 3]`, and its sum is `9`.","solution":"from typing import List def max_subarray_sum(arr: List[int], k: int) -> int: Finds the maximum possible sum of a subarray of length k. Parameters: arr (List[int]): List of integers representing the input array. k (int): Length of the subarray. Returns: int: The maximum possible sum of a subarray of length k. # Initialize window sum to be the sum of the first k elements window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window over the array for i in range(len(arr) - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Problem A company is organizing a team-building exercise where employees will form groups to participate in various activities. Each activity requires a different composition of groups characterized by skills. The goal is to figure out the optimal way to distribute employees into groups such that as many activities can be completed as possible. Each employee has a specific set of skills. Each activity has a required skill set needed to participate. No subgroup of the required skills will suffice; the group must have exactly the same skills set as required for the activity. Your task is to determine the maximum number of activities that can be fully staffed based on the employees\' skill sets and the required skill sets for each activity, assuming an employee can be part of only one group and each skill is a non-negative integer. Constraints The input satisfies the following conditions: * All values contained in the input are integers. * 1 ≤ T ≤ 10 (number of test cases) * 1 ≤ E, A ≤ 1000 (number of employees and activities respectively) * 1 ≤ number of skills per employee, number of skills per activity ≤ 100 * Skills are represented by non-negative integers. Input The input consists of multiple test cases. Each test case starts with a number T (the number of test cases). Each test case is structured as follows: 1. An integer E, the number of employees. 2. E lines follow, each containing a list of integers representing the skills of each employee. 3. An integer A, the number of activities. 4. A lines follow, each containing a list of integers representing the required skills for each activity. The end of the input is indicated by a single zero. Example Input ``` 2 3 1 2 3 2 4 3 1 2 2 1 2 2 4 1 3 5 1 2 0 ``` Output For each test case, output the maximum number of activities that can be staffed on a new line. Example Output ``` 1 2 ```","solution":"def max_activities_completed(test_cases): def match_activities(employees, activities): employee_count = len(employees) used_employees = set() count = 0 for activity in activities: for i in range(employee_count): if i not in used_employees and employees[i] == activity: used_employees.add(i) count += 1 break return count results = [] for case in test_cases: E = case[\'E\'] employees = case[\'employees\'] A = case[\'A\'] activities = case[\'activities\'] matched_count = match_activities(employees, activities) results.append(matched_count) return results # Example Usage T = 2 test_cases = [ { \'E\': 3, \'employees\': [[1, 2, 3], [2, 4], [3]], \'A\': 3, \'activities\': [[1, 2], [2, 4], [1, 3]] }, { \'E\': 2, \'employees\': [[1, 2]], \'A\': 2, \'activities\': [[2, 4], [1, 3]] } ] print(max_activities_completed(test_cases)) # Output should be [1, 2]"},{"question":"Write a function to replace each instance of a specified word in a sentence with another word. You need to implement a function `replace_word(sentence: str, target: str, replacement: str) -> str` that takes a sentence and two words, a target word and a replacement word, and returns a new sentence where every occurrence of the target word is replaced by the replacement word. # Input - A string `sentence` (1 ≤ |sentence| ≤ 10^5) where |sentence| represents the length of the sentence. - A string `target` (1 ≤ |target| ≤ 100) which is the word to be replaced. - A string `replacement` (1 ≤ |replacement| ≤ 100) which is the word to replace with. Note: - The sentence will contain only lowercase English letters and spaces. - There will be no leading or trailing spaces in the input sentence. - Words in the sentence are separated by a single space. - The target word will be present at least once in the sentence. # Output - A string which is the updated sentence after replacement. # Example Input ``` the cat in the hat the a ``` Output ``` a cat in a hat ``` Input ``` this is a test test test exam ``` Output ``` this is a exam exam ``` # Note Be sure to handle cases where the target word appears multiple times, and make sure no extra spaces are added or removed from the sentence.","solution":"def replace_word(sentence: str, target: str, replacement: str) -> str: Replaces each instance of a specified word in a sentence with another word. :param sentence: The original sentence as a string. :param target: The word to be replaced. :param replacement: The word to replace with. :return: A new sentence with the target word replaced by the replacement word. words = sentence.split() new_sentence = \' \'.join([replacement if word == target else word for word in words]) return new_sentence"},{"question":"Maya is an avid gardener who loves arranging her flower pots in unique patterns. She has recently designed a new type of flower arrangement where she lines up pots in a single row. Each pot is assigned a height, and the beauty of the arrangement is determined by the number of distinct heights present in the row. Maya has a total of N flower pots, each with a unique height from 1 to N. She wants to select a contiguous subarray of these flower pots such that the difference between the maximum height and the minimum height in that subarray is exactly K. Help Maya determine how many such subarrays exist. Input - The first line contains two integers N and K, where 1 ≤ N ≤ 100000 and 0 ≤ K ≤ N-1. Output - A single line denoting the number of contiguous subarrays where the difference between the maximum height and the minimum height is exactly K. Example Input: 7 3 Output: 4 Explanation: The heights of the flower pots are [1, 2, 3, 4, 5, 6, 7]. The contiguous subarrays where the difference between the maximum and minimum height is exactly 3 are: - [1, 2, 3, 4] - [2, 3, 4, 5] - [3, 4, 5, 6] - [4, 5, 6, 7] Hence, the output is 4.","solution":"def count_contiguous_subarrays(N, K): count = 0 for start in range(1, N + 1 - K): end = start + K if end <= N: count += 1 return count"},{"question":"Alex loves playing with strings. Today, he is curious if a given string can be transformed into a palindrome by removing at most one character (or not removing any character at all). A palindrome is a string that reads the same forward and backward. Your task is to determine if it is possible to make the string a palindrome by removing at most one character. Input The input contains one string s (1 ≤ s.length ≤ 10^5). The string consists of lowercase alphabets only. Output Print \\"YES\\" if it is possible to make the string a palindrome by removing at most one character. Otherwise, print \\"NO\\". Examples Input abca Output YES Input abc Output NO Explanation: In the first example, by removing the character \'c\', the string becomes \\"aba\\", which is a palindrome. Hence, the output is \\"YES\\". In the second example, no single character can be removed to form a palindrome. Hence, the output is \\"NO\\".","solution":"def can_be_palindrome(s): Determine if the string can be transformed into a palindrome by removing at most one character. def is_palindrome_range(l, r): # Check if the substring s[l:r+1] is a palindrome return all(s[i] == s[r - i + l] for i in range(l, (l + r) // 2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Two options: remove character at left or right return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True # Function that interprets the result and prints \\"YES\\" or \\"NO\\" def check_palindrome_possibility(s): if can_be_palindrome(s): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Given a string consisting of lowercase alphabets and question marks (denoted as \'?\'), your task is to replace each \'?\' with a lowercase alphabet such that no two adjacent characters are the same. If there are multiple valid solutions, return any one of them. Example Input a?b Output acb or any other valid string where no two adjacent characters are the same Input ???? Output abcd or any other valid string where no two adjacent characters are the same Note: The solution must work efficiently within the given constraints.","solution":"def replace_question_marks(s): Replace each \'?\' with a lowercase alphabet such that no two adjacent characters are the same. s = list(s) n = len(s) alphabet = \'abcdefghijklmnopqrstuvwxyz\' for i in range(n): if s[i] == \'?\': for char in alphabet: if (i > 0 and s[i - 1] == char) or (i < n - 1 and s[i + 1] == char): continue s[i] = char break return \'\'.join(s)"},{"question":"Each year, an annual coding competition is held and the participants\' scores are recorded. The scores are represented as an array of integers where each integer is the score of a participant. The organizers want to find out how many pairs of participants have scores whose sum is divisible by a given integer k. Given an array of scores and an integer k, write a function that returns the number of pairs (i, j) such that: - 0 ≤ i < j < n - (scores[i] + scores[j]) % k == 0 Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) — the number of participants and the integer to check divisibility by. The second line contains n integers representing the scores of the participants. Output Output a single integer — the number of pairs whose sum is divisible by k. Examples Input 5 3 1 2 3 4 5 Output 4 Input 4 5 10 20 30 40 Output 6","solution":"def count_divisible_pairs(n, k, scores): Returns the number of pairs (i, j) such that 0 ≤ i < j < n and (scores[i] + scores[j]) % k == 0. :param n: Integer, number of participants :param k: Integer, divisor :param scores: List of integers, participants\' scores :return: Integer, number of pairs (i, j) with (scores[i] + scores[j]) % k == 0 count = 0 # Loop through each pair (i, j) for i in range(n): for j in range(i + 1, n): if (scores[i] + scores[j]) % k == 0: count += 1 return count"},{"question":"You are given an array of integers and a set of queries that you need to process. Each query either requires you to update a segment of the array by adding a given value to each element, or to find the maximum value within a segment. Input: - The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 50,000), representing the number of elements in the array and the number of queries, respectively. - The second line contains the n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), representing the initial elements of the array. - The next q lines contain the queries. Each query is of one of the following two types: - Type 1: 1 l r x, which means add the value x to each element of the array from index l to r (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9). - Type 2: 2 l r, which means find the maximum value in the array segment from index l to r (1 ≤ l ≤ r ≤ n). Output: - For each query of type 2, output the maximum value in the specified segment. Example: Input: 8 6 1 3 -2 8 7 3 -4 5 1 2 4 3 2 1 6 1 1 8 -1 2 3 7 2 5 8 1 6 8 2 Output: 10 7 6 Explanation: - After the first query, the array becomes [1, 6, 1, 11, 7, 3, -4, 5]. - The maximum value in the segment [1, 6] is 11. - After the third query, the array becomes [0, 5, 0, 10, 6, 2, -5, 4]. - The maximum value in the segment [3, 7] is 10. - The maximum value in the segment [5, 8] is 6. - After the last query, the array becomes [0, 5, 0, 10, 6, 4, -3, 6].","solution":"def process_queries(n, q, elements, queries): Processes the given queries on the array and returns the results for type 2 queries. Parameters: n (int): Number of elements in the array. q (int): Number of queries. elements (list of int): Initial elements of the array. queries (list of tuple): List of queries. Returns: list of int: Result of each type 2 query. results = [] for query in queries: if query[0] == 1: # Update query _, l, r, x = query for i in range(l - 1, r): elements[i] += x elif query[0] == 2: # Maximum value query _, l, r = query max_val = max(elements[l - 1:r]) results.append(max_val) return results"},{"question":"In a university, there are multiple classrooms. Each classroom has a number of courses scheduled during the day. The university management wants to ensure that no two courses overlap in timing for a given classroom. You are given the schedule for each classroom, and you need to determine for each classroom whether it is possible to attend all courses without any timing conflicts. Each course is represented by a time interval [start_i, end_i) where start_i is the start time and end_i is the end time. Note that end_i is not included in the interval. A course that ends at time t can be immediately followed by a course that starts at time t. Input - The first line contains an integer n (1 ≤ n ≤ 100) indicating the number of classrooms. - The first line of each of the next n sections contains an integer m_i (1 ≤ m_i ≤ 100) representing the number of courses in the i-th classroom. - For each classroom, the next m_i lines each contain two integers start_i and end_i (0 ≤ start_i < end_i ≤ 2400) representing the start and end times of the courses. Output - For each classroom, print \\"YES\\" if it is possible to attend all the courses in that classroom without any conflicts, otherwise print \\"NO\\". Example Input 2 3 900 1200 1300 1500 1200 1300 2 1000 1130 1100 1300 Output YES NO Explanation In the first classroom, you can attend all courses one after another: 900-1200, 1200-1300, and 1300-1500. In the second classroom, the courses from 1000-1130 and 1100-1300 overlap, so it is not possible to attend both.","solution":"def can_attend_all_courses(schedules): results = [] for schedule in schedules: courses = schedule[\'courses\'] courses.sort(key=lambda x: x[0]) for i in range(1, len(courses)): if courses[i][0] < courses[i-1][1]: results.append(\\"NO\\") break else: results.append(\\"YES\\") return results"},{"question":"You are given a list of unique integers, and your task is to find a pair of numbers from this list such that the absolute difference between them is minimized. You should return the smallest absolute difference along with the pair of integers. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the unique integers in the list. Output Print two integers x and y (x < y) separated by a space, representing a pair from the list with the smallest absolute difference. If there are multiple pairs, print the one with the smallest values of x. Examples Input 5 1 5 3 19 18 Output 18 19 Input 3 10 20 30 Output 10 20 Input 4 4 9 1 7 Output 7 9 Note In the first example, the smallest absolute difference is 1, corresponding to the pair (18, 19). In the second example, the smallest absolute difference is 10, corresponding to the pair (10, 20). In the third example, the smallest absolute difference is 2, corresponding to the pair (7, 9).","solution":"def find_min_diff_pair(n, numbers): Finds the pair of integers such that the absolute difference between them is minimized. Returns the smallest absolute difference along with the pair of integers. numbers.sort() # Sort the numbers to check pairs which are next to each other min_diff = float(\'inf\') # Initialize min diff to a large number min_pair = (None, None) # Initialize the pair for i in range(n - 1): diff = numbers[i + 1] - numbers[i] if diff < min_diff: min_diff = diff min_pair = (numbers[i], numbers[i + 1]) return min_pair"},{"question":"In a chocolate factory, different types of chocolate bars can be produced. Each type of chocolate is distinguished by its unique recipe which contains various ingredients in specific proportions. The factory must adhere to certain constraints in order to determine how many different types of chocolate bars can be produced given a set of ingredients. Each ingredient can be used in a recipe only once. You are given the maximum number of units available for each ingredient. # Task Write a function that computes the total number of different chocolate bars that can be produced using the given ingredients. A chocolate bar\'s recipe is considered unique if the type and quantity of at least one ingredient differ from another recipe\'s ingredients. # Input - An integer `n` (1 ≤ n ≤ 20) representing the number of different ingredients. - A list of `n` integers `avail` (1 ≤ avail[i] ≤ 50) where `avail[i]` represents the maximum number of units available of the i-th ingredient. # Output - Return an integer representing the count of all possible unique chocolate bars that can be produced. # Example Input ``` 3 3 1 2 ``` Output ``` 12 ``` Explanation The possible recipes are: - Using 0 to 3 units of the first ingredient. - Using 0 to 1 unit of the second ingredient. - Using 0 to 2 units of the third ingredient. Hence the total number of different chocolate bars = (3+1) * (1+1) * (2+1) = 4 * 2 * 3 = 24 - 1 = 23 (excluding the recipe where all ingredients are 0). # Notes - You need to compute the power set of the possible number of units of each ingredient, minus the empty set where no ingredients are used.","solution":"def count_unique_chocolates(n, avail): Compute the total number of different chocolate bars that can be produced. Args: n (int): The number of different ingredients. avail (list of int): The maximum number of units available of each ingredient. Returns: int: The count of all possible unique chocolate bars that can be produced. # Total combinations is product of (avail[i] + 1) for all ingredients total_combinations = 1 for a in avail: total_combinations *= (a + 1) # Exclude the empty set (no ingredient used at all) return total_combinations - 1"},{"question":"You are given an array of integers and a window size `k`. You need to calculate the maximum sum possible for every subarray of size `k` in the array. Input The first line contains two integers `n` (1 ≤ n ≤ 10^6) and `k` (1 ≤ k ≤ n) — the number of elements in the array and the size of the window. The second line contains `n` integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the array. Output Print `n - k + 1` integers where the i-th integer represents the maximum sum of the subarray of size `k` starting from element `i`. Examples Input 7 3 1 3 2 5 6 1 4 Output 10 10 13 12 11 Input 5 2 4 -1 2 1 6 Output 3 1 3 7 Note In the first example, the subarrays of size 3 are: - [1, 3, 2] with sum 6 - [3, 2, 5] with sum 10 - [2, 5, 6] with sum 13 - [5, 6, 1] with sum 12 - [6, 1, 4] with sum 11 In the second example, the subarrays of size 2 are: - [4, -1] with sum 3 - [-1, 2] with sum 1 - [2, 1] with sum 3 - [1, 6] with sum 7","solution":"def max_sum_subarrays(arr, k): Returns a list of the maximum sums of subarrays of size k. :param arr: List of integers :param k: Integer, size of the subarray :return: List of integers representing the maximum sum of subarrays of size k n = len(arr) if n == 0 or k == 0: return [] current_sum = sum(arr[:k]) max_sums = [current_sum] for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sums.append(current_sum) return max_sums"},{"question":"A software development company is organizing a team-building event where employees are participating in a unique relay race. In this race, each participant runs for a specified distance before handing over the baton to the next participant. The race track is a perfect circle, and the distance each participant runs is measured as a fraction of the track\'s circumference. You are given the circumference of the track and the list of distances each participant will run. Your task is to determine the starting and ending positions of the baton for each participant around the circular track. The starting position for the first participant is always considered to be 0. If a participant\'s starting position is X, and they need to run Y units of distance, then the ending position can be calculated as (X + Y) % C, where C is the circumference of the track. After running their distance, the ending position of one participant becomes the starting position for the next participant. Your program needs to output the starting and ending positions for each participant in the order they run. Input The first line of input contains an integer t (1 ≤ t ≤ 1000) - the number of test cases. Each test case consists of two lines. The first line contains an integer C (1 ≤ C ≤ 10^9) - the circumference of the track. The second line contains an integer n (1 ≤ n ≤ 1000) followed by n integers (1 ≤ di ≤ 10^9 each) - the distances each participant will run. Output For each test case, output n lines with the starting and ending positions for each participant. Example Input 2 10 3 4 5 3 12 4 3 7 6 8 Output 0 4 4 9 9 2 0 3 3 10 10 4 4 0 Explanation For the first test case: - First participant starts at position 0 and runs 4 units, ending at position 4. - Second participant starts at position 4 and runs 5 units, ending at position 9. - Third participant starts at position 9 and runs 3 units, ending at position 2. For the second test case: - First participant starts at position 0 and runs 3 units, ending at position 3. - Second participant starts at position 3 and runs 7 units, ending at position 10. - Third participant starts at position 10 and runs 6 units, ending at position 4. - Fourth participant starts at position 4 and runs 8 units, ending at position 0.","solution":"def relay_race_positions(t, test_cases): results = [] for case in test_cases: C = case[\'circumference\'] distances = case[\'distances\'] n = len(distances) positions = [] current_position = 0 for distance in distances: start_position = current_position end_position = (start_position + distance) % C positions.append((start_position, end_position)) current_position = end_position results.append(positions) return results"},{"question":"You are given a tree (connected, undirected graph with no cycles) with `n` nodes numbered from `1` to `n`. Each node has a number written on it. The tree has `n-1` edges, where each edge connects two nodes. Starting from any node, you can perform moves to adjacent nodes following the edges. Your task is to find the longest path in the tree, which maximizes the sum of the numbers written on the nodes in the path. Input: The first line contains an integer `n` (2 ≤ n ≤ 100,000) representing the number of nodes in the tree. Each of the next `n` lines contains a single integer `a_i` (-10^9 ≤ a_i ≤ 10^9) representing the number written on the i-th node. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) representing an edge connecting node `u` and node `v`. Output: Print a single integer, the maximum sum of the numbers on the nodes in the longest path in the tree. Examples: Input: 4 1 -2 3 4 1 2 1 3 3 4 Output: 8 Input: 5 5 -1 2 -1 3 1 2 1 3 3 4 4 5 Output: 9 Note: In the first example, the longest positive path would be from node `4` to node `3` to node `1`, with the sum being 4 + 3 + 1 = 8. In the second example, the longest path maximizing the sum would be from node `5` to node `4` to node `3` to node `1`, with the sum being 3 + (-1) + 2 + 5 = 9.","solution":"import sys from collections import deque, defaultdict def find_longest_path_sum(n, values, edges): # Create adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) def bfs(start): max_dist = -1 max_node = start dist = {start: values[start-1]} q = deque([start]) while q: u = q.popleft() for v in adj[u]: if v not in dist: dist[v] = dist[u] + values[v-1] q.append(v) if dist[v] > max_dist: max_dist = dist[v] max_node = v return max_node, max_dist # First BFS from any arbitrary node (can be node 1) farthest_node, _ = bfs(1) # Second BFS from the farthest node found in first BFS _, max_sum = bfs(farthest_node) return max_sum # Read input def main(input_str): data = input_str.strip().split() index = 0 n = int(data[index]) index += 1 values = [int(data[i]) for i in range(index, index + n)] index += n edges = [] for i in range(index, len(data), 2): u = int(data[i]) v = int(data[i+1]) edges.append((u, v)) result = find_longest_path_sum(n, values, edges) return result"},{"question":"Given n integers, arrange them into k groups such that the maximum difference between the minimum and maximum integers in any group is minimized. Input The first input line contains two integers, n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ n) separated by spaces — the number of elements and the number of groups respectively. The following line contains n space-separated integers a1, a2, ..., an — the given elements (1 ≤ ai ≤ 109). Output Print one integer — the minimized maximum difference between the min and max integers in any group, after optimally arranging the elements into k groups. Examples Input 5 3 1 5 9 12 14 Output 4 Input 6 2 4 8 15 16 23 42 Output 19 Explanation for the examples: - In the first example, we can group the elements as [1, 5] [9, 12] [14]. The differences in each group are 4, 3, and 0 respectively. The highest value among these is 4. - In the second example, we group the elements as [4, 8, 15, 16] [23, 42]. The differences are 12 and 19 respectively. The highest value is 19.","solution":"def minimize_max_difference(n, k, elements): elements.sort() def can_form_groups(max_diff): groups = 1 min_elem = elements[0] for elem in elements: if elem - min_elem > max_diff: groups += 1 min_elem = elem return groups <= k left, right = 0, elements[-1] - elements[0] while left < right: mid = (left + right) // 2 if can_form_groups(mid): right = mid else: left = mid + 1 return left # Example usage: # n = 5, # k = 3, # elements = [1, 5, 9, 12, 14] # Output: 4"},{"question":"You are given a string consisting of lowercase letters. You are allowed to make at most one move, in which you can choose any character in the string and change it to any other lowercase letter. Your task is to determine the minimum number of distinct characters that can be obtained from the string after performing the move optimally. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. Each test case consists of one line containing a single string s (1 ≤ |s| ≤ 100) — the string for which you have to determine the minimum number of distinct characters. Output For each test case, output one integer — the minimum number of distinct characters that can be obtained from the string after making at most one move. Example Input 3 abc aaaa ab Output 2 1 1 Note In the first test case, you can change \'b\' or \'c\' to \'a\', resulting in the string \\"aac\\" or \\"aba\\", both of which have 2 distinct characters. In the second test case, the string \\"aaaa\\" already has 1 distinct character, so no move is needed. In the third test case, you can change \'a\' to \'b\' or \'b\' to \'a\', resulting in the string \\"bb\\" or \\"aa\\", both of which have 1 distinct character.","solution":"def min_distinct_characters(t, test_cases): results = [] for s in test_cases: distinct_char_count = len(set(s)) # If only one distinct character, it cannot be reduced further if distinct_char_count == 1: results.append(1) # Otherwise, we can always reduce by at most 1 distinct character with one move else: results.append(distinct_char_count - 1) return results # Example usage # t = 3 # test_cases = [\\"abc\\", \\"aaaa\\", \\"ab\\"] # print(min_distinct_characters(t, test_cases)) # Output: [2, 1, 1]"},{"question":"You are given a collection of books in a library represented by an array of integers where each element represents the number of pages in a book. You want to divide these books into a specified number of students such that each student gets at least one book and the maximum number of pages assigned to a student is minimized. Write a program to determine the minimum value of the maximum number of pages assigned to a student. Input: The input consists of several test cases. The first line contains a single integer T, the number of test cases. Each test case starts with an integer N (the number of books) and an integer M (the number of students). The next line contains N space-separated integers representing the number of pages in each book. Output: For each test case, output the minimum value of the maximum number of pages assigned to a student in a new line. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ M ≤ 1000 1 ≤ pages in each book ≤ 10000 SAMPLE INPUT 2 4 2 12 34 67 90 3 2 15 10 20 SAMPLE OUTPUT 113 25","solution":"def can_allocate(pages, N, M, max_pages): Helper function to determine if it is possible to allocate pages such that no student has more than max_pages. student_count = 1 current_pages = 0 for i in range(N): if pages[i] > max_pages: return False if current_pages + pages[i] > max_pages: student_count += 1 current_pages = pages[i] if student_count > M: return False else: current_pages += pages[i] return True def find_min_pages(pages, N, M): Function which executes binary search to find the minimum of the maximum pages any student can get. if N < M: return -1 low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if can_allocate(pages, N, M, mid): result = mid high = mid - 1 else: low = mid + 1 return result def minimum_maximum_pages(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] pages = test_cases[t][1] results.append(find_min_pages(pages, N, M)) return results"},{"question":"Problem Statement Rina is a biologist tracking population changes in an endangered species. She\'s collected data on the population\'s birth and death rates over a period of time. However, her field notes are incomplete or slightly flawed. She recorded the birth and death rates as arrays, but some birth or death rates might be missing (denoted as -1). She needs your help to estimate the missing values. To estimate a missing birth or death rate, use the average of its known neighbors (previous and next values that are not -1). If a value has no valid neighbors, it should be treated as 0. If all rates in a given array are missing, assume the entire array should be zeros. Write a program which reconstructs the missing values in the birth and death rate arrays and then calculates the total population change over the period. The population change is determined as the difference between the total births and the total deaths over the period. Input The input contains several datasets. Each dataset has the following format: ``` n birth_rate_1 birth_rate_2 ... birth_rate_n death_rate_1 death_rate_2 ... death_rate_n ``` The first line contains an integer n (1 ≤ n ≤ 100,000), which is the number of time periods. The next two lines each contain n integers representing the birth rates and death rates, respectively. Values range from -1 (indicating missing data) to 1,000. The input ends with a line containing zero, which should not be processed. Output For each dataset, print the total population change over the period. If there are multiple datasets, output each result on a new line. Example Input 5 100 -1 150 200 -1 -1 50 -1 100 150 4 -1 -1 -1 -1 -1 -1 -1 -1 0 Output 350 0","solution":"def estimate_neighbors(arr, i): Helper function to estimate the value at index `i` based on its non-missing neighbors. n = len(arr) left, right = i - 1, i + 1 while left >= 0 and arr[left] == -1: left -= 1 while right < n and arr[right] == -1: right += 1 left_val = arr[left] if left >= 0 else 0 right_val = arr[right] if right < n else 0 if left >= 0 and right < n: return (left_val + right_val) // 2 elif left >= 0: return left_val elif right < n: return right_val else: return 0 def reconstruct_and_calculate_population_change(n, birth_rates, death_rates): for i in range(n): if birth_rates[i] == -1: birth_rates[i] = estimate_neighbors(birth_rates, i) if death_rates[i] == -1: death_rates[i] = estimate_neighbors(death_rates, i) total_births = sum(birth_rates) total_deaths = sum(death_rates) return total_births - total_deaths def process_data(inputs): idx = 0 results = [] while idx < len(inputs): n = int(inputs[idx]) if n == 0: break birth_rates = list(map(int, inputs[idx + 1].split())) death_rates = list(map(int, inputs[idx + 2].split())) change = reconstruct_and_calculate_population_change(n, birth_rates, death_rates) results.append(change) idx += 3 return results"},{"question":"Given a list of integers, you need to partition the list into two non-empty sublists such that the sum of the elements in the first sublist is as close as possible to the sum of the elements in the second sublist. The partition should minimize the absolute difference between the sums of the elements in the two sublists. # Input - The first line of the input contains a single integer `n` (2 ≤ n ≤ 20) — the number of elements in the list. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000) — the elements of the list. # Output - Output a single integer — the minimum absolute difference between the sums of the two sublists. # Example Input ``` 5 3 1 4 2 2 ``` Output ``` 0 ``` Input ``` 3 1 2 3 ``` Output ``` 0 ``` Note In the first example, one optimal partition is [3, 2] and [1, 4, 2] which gives sums 5 and 5, with absolute difference 0. In the second example, one optimal partition is [1, 2] and [3] which gives sums 3 and 3 with absolute difference 0.","solution":"from itertools import combinations def min_difference_partition(n, nums): total_sum = sum(nums) best_diff = float(\'inf\') for r in range(1, (n // 2) + 1): for subset in combinations(nums, r): subset_sum = sum(subset) diff = abs((total_sum - subset_sum) - subset_sum) if diff < best_diff: best_diff = diff return best_diff"},{"question":"Given a 2D grid of characters, where each cell in the grid contains one of the lowercase English letters, you are required to perform multiple queries on the grid. Each query consists of two coordinates in the form of (x1, y1) and (x2, y2), representing a rectangular subgrid. For each query, you need to determine the count of each distinct character present in the specified subgrid. # Input - The first line contains three integers `n`, `m`, and `q` (1 ≤ n, m ≤ 500, 1 ≤ q ≤ 10000), representing the number of rows, columns, and queries, respectively. - The next `n` lines each contain `m` characters representing the grid. - The next `q` lines each contain four integers `x1`, `y1`, `x2`, `y2` (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m), representing the top-left and bottom-right coordinates of the subgrid for the query. # Output For each query, output the count of each distinct character present in the subgrid, in the format `char:count`, sorted alphabetically by the character. Each query\'s result should be on a new line. # Example Input ``` 3 3 2 abc def ghi 1 1 2 2 2 2 3 3 ``` Output ``` a:1 b:1 d:1 e:1 e:1 f:1 h:1 i:1 ``` # Note For the first query `(1,1,2,2)`, the subgrid is: ``` ab de ``` Thus, the distinct characters and their counts are: ``` a:1 b:1 d:1 e:1 ``` For the second query `(2,2,3,3)`, the subgrid is: ``` ef hi ``` Thus, the distinct characters and their counts are: ``` e:1 f:1 h:1 i:1 ``` # Constraints - You may assume that there won\'t be any invalid queries. - Optimize your solution to handle the large number of queries efficiently.","solution":"def count_characters_in_subgrid(grid, queries): For each query, counts the distinct characters in a subgrid and returns the counts in the required format. :param grid: 2D list of characters representing the grid :param queries: List of tuples representing the queries. Each tuple contains four integers (x1, y1, x2, y2) :return: List of strings. Each string represents the result of a query in the format \\"char:count\\", sorted alphabetically by the character results = [] for (x1, y1, x2, y2) in queries: character_count = {} for i in range(x1-1, x2): for j in range(y1-1, y2): char = grid[i][j] if char in character_count: character_count[char] += 1 else: character_count[char] = 1 sorted_counts = sorted(character_count.items()) result = \\"n\\".join(f\\"{char}:{count}\\" for char, count in sorted_counts) results.append(result) return results"},{"question":"A pendant is an elegant piece of jewelry, often designed with an artistic flair. Today, your task involves determining the beauty of a string pendant. You are given a string consisting of lowercase English letters. The beauty of the pendant is defined by the length of the longest substring which does not contain more than two distinct characters. A substring is a contiguous sequence of characters within a string. For instance, in the string \\"abcabcbb\\", one of the longest substrings with at most two distinct characters would be \\"bcb\\". Your goal is to find and print the length of the longest beautiful substring. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100) containing only lowercase English letters. Output Print the length of the longest beautiful substring. Examples Input eceba Output 3 Input aaaabbcc Output 6 Input abcabc Output 2 Note In the first sample, the longest beautiful substring is \\"ece\\" which has a length of 3. In the second sample, the longest beautiful substring is \\"aaaabb\\" which has a length of 6. In the third sample, every substring with two distinct characters has a maximum length of 2. The string \\"ab\\" or \\"bc\\" are examples of such substrings.","solution":"def longest_beautiful_substring(s): Finds the length of the longest substring with at most two distinct characters. n = len(s) if n == 0: return 0 max_length = 0 window_start = 0 char_frequency = {} for window_end in range(n): char_end = s[window_end] if char_end not in char_frequency: char_frequency[char_end] = 0 char_frequency[char_end] += 1 while len(char_frequency) > 2: char_start = s[window_start] char_frequency[char_start] -= 1 if char_frequency[char_start] == 0: del char_frequency[char_start] window_start += 1 current_length = window_end - window_start + 1 max_length = max(max_length, current_length) return max_length"},{"question":"A string is called a balanced string if all unique characters in the string appear the same number of times. Your task is to check for each input string whether it is a balanced string or not. If the string is balanced, return \\"YES\\", otherwise return \\"NO\\". Input Description: The first line of input contains an integer T denoting the number of test cases. The next T lines each contain a single string S. Output Description: For each test case, output \\"YES\\" if the string is balanced, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^4 S only contains lowercase English letters. Example: Input: 2 aabbcc aabbc Output: YES NO Explanation: Test Case 1: Each character \'a\', \'b\', and \'c\' appears exactly 2 times, so the output is \\"YES\\". Test Case 2: Character \'a\' and \'b\' appear twice, but \'c\' appears only once, so the output is \\"NO\\".","solution":"def is_balanced_string(S): Checks if a string is balanced. Parameters: S (str): The string to check. Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\". from collections import Counter # Count frequency of each character freq = Counter(S) # Get a list of the frequencies values = list(freq.values()) # Check if all frequencies are the same if all(v == values[0] for v in values): return \\"YES\\" else: return \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases. Parameters: T (int): Number of test cases. test_cases (list of str): The list of strings to check. Returns: list of str: Results for each test case. results = [] for s in test_cases: results.append(is_balanced_string(s)) return results"},{"question":"You are tasked with helping a software development team manage a collection of media files for a shared media library. The library consists of various media files, each identified by a unique file identifier and categorized under different tags. Your task is to implement a system that allows users to add media files to the library, associate them with tags, and retrieve files based on tag filters. # Requirements 1. **Add a Media File:** - Function signature: ```python def add_media(file_identifier: str) -> None: ``` - Adds a unique media file with the given identifier to the library. 2. **Associate Tags with a Media File:** - Function signature: ```python def add_tags(file_identifier: str, tags: List[str]) -> None: ``` - Associates the specified tags with the media file identified by `file_identifier`. A file can have multiple tags, and different files can share tags. 3. **Retrieve Files by Tag Filters:** - Function signature: ```python def get_files_by_tags(tags: List[str]) -> List[str]: ``` - Returns the list of file identifiers that are associated with all the specified tags. - The result should not contain duplicate file identifiers and must be sorted in lexicographical order. - If no files match the given tags, return an empty list. # Example Usage ```python add_media(\\"file1\\") add_media(\\"file2\\") add_media(\\"file3\\") add_tags(\\"file1\\", [\\"drama\\", \\"comedy\\"]) add_tags(\\"file2\\", [\\"drama\\", \\"action\\"]) add_tags(\\"file3\\", [\\"comedy\\"]) assert get_files_by_tags([\\"drama\\"]) == [\\"file1\\", \\"file2\\"] assert get_files_by_tags([\\"comedy\\"]) == [\\"file1\\", \\"file3\\"] assert get_files_by_tags([\\"comedy\\", \\"drama\\"]) == [\\"file1\\"] ``` # Constraints - All file identifiers and tags are non-empty strings consisting of lowercase English letters and digits. - The number of media files will not exceed 10,000. - The number of unique tags will not exceed 1,000. - The total number of tag associations across all files will not exceed 50,000. # Notes - It is guaranteed that the `file_identifier` provided in `add_tags()` will already exist in the library when the function is called. - Handle the edge cases where the input tags list in `get_files_by_tags()` might be empty. Implement the functions accordingly to fulfill these requirements.","solution":"from collections import defaultdict from typing import List class MediaLibrary: def __init__(self): self.files_tags = defaultdict(set) self.tagged_files = defaultdict(set) def add_media(self, file_identifier: str) -> None: if file_identifier not in self.files_tags: self.files_tags[file_identifier] = set() def add_tags(self, file_identifier: str, tags: List[str]) -> None: for tag in tags: self.files_tags[file_identifier].add(tag) self.tagged_files[tag].add(file_identifier) def get_files_by_tags(self, tags: List[str]) -> List[str]: if not tags: return [] # Get sets of file identifiers for each tag files_sets = [self.tagged_files[tag] for tag in tags if tag in self.tagged_files] # If any tag is not in the library, no files can match all tags if not files_sets or len(files_sets) != len(tags): return [] # Find intersection of all sets to get files that have all tags result_files = set.intersection(*files_sets) # Convert to sorted list return sorted(result_files)"},{"question":"You are given an encrypted message which is represented as a sequence of integers. Your task is to decode this message based on a simple substitution cipher. Each integer in the sequence corresponds to a specific letter of the English alphabet, where 1 maps to \'a\', 2 maps to \'b\', ..., 26 maps to \'z\'. If an integer is 0, it represents a space. For example: - The sequence [8, 5, 12, 12, 15] would be decoded as \\"hello\\". - The sequence [19, 5, 3, 18, 5, 20] would be decoded as \\"secret\\". - The sequence [3, 15, 4, 5, 0, 2, 18, 5, 1, 11, 5, 18] would be decoded as \\"code breaker\\". Given an encrypted message, decode it and return the resulting string. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the encrypted message. The second line contains n integers separated by spaces representing the encrypted message. Output Print the decoded message as a single string. Examples Input 5 8 5 12 12 15 Output hello Input 6 19 5 3 18 5 20 Output secret Input 12 3 15 4 5 0 2 18 5 1 11 5 18 Output code breaker","solution":"def decode_message(n, encrypted_sequence): Decodes a message based on a simple substitution cipher. Each integer in the sequence corresponds to a specific letter of the English alphabet, where 1 maps to \'a\', 2 maps to \'b\', ..., 26 maps to \'z\'. If an integer is 0, it represents a space. Parameters: n (int): The length of the encrypted message sequence. encrypted_sequence (list): A list of integers representing the encrypted message. Returns: str: The decoded message as a string. decoded_string = \\"\\" for num in encrypted_sequence: if num == 0: decoded_string += \\" \\" else: decoded_string += chr(num + 96) return decoded_string"},{"question":"A package delivery service operates in a city with n intersections numbered from 1 to n and m bidirectional roads connecting them. Each package needs to be delivered from a specific starting intersection to a destination intersection. The service operates as follows: 1. Initially, all packages are at their starting intersection. 2. Every minute, a delivery van can move from its current intersection to one of the directly connected intersections. The goal is to calculate the minimum number of minutes required to deliver each package from its starting intersection to its destination intersection. You are given q queries; each query represents a different package and contains: - An integer a, the start intersection of the package. - An integer b, the destination intersection of the package. For each query, determine the minimum number of minutes required to deliver the package from intersection a to intersection b. # Input The first line contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000) — the number of intersections and the number of roads. The following m lines contain two space-separated integers u and v (1 ≤ u, v ≤ n) indicating there is a road between intersections u and v. The next line contains a single integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains two space-separated integers a and b (1 ≤ a, b ≤ n) representing the start and destination intersections of a package. # Output Output q lines, each containing the minimum number of minutes required to deliver the package from intersection a to intersection b. If it is impossible to deliver the package, output -1 for that query. # Example Input 7 10 1 2 1 3 2 3 2 4 3 4 3 5 4 5 4 6 5 6 5 7 3 1 6 2 7 1 5 Output 3 3 2 # Explanation For the first query, the shortest path from intersection 1 to intersection 6 is 1 -> 3 -> 4 -> 6, which takes 3 minutes. For the second query, the shortest path from intersection 2 to intersection 7 is 2 -> 3 -> 5 -> 7, which takes 3 minutes. For the third query, the shortest path from intersection 1 to intersection 5 is 1 -> 3 -> 5, which takes 2 minutes.","solution":"from collections import deque def shortest_path_bfs(n, edges, start, end): adj_list = {i: [] for i in range(1, n+1)} for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: node, distance = queue.popleft() if node == end: return distance for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 def delivery_service(n, m, edges, queries): results = [] for a, b in queries: results.append(shortest_path_bfs(n, edges, a, b)) return results"},{"question":"Alice and Bob are playing a card game where they take turns drawing a card from a deck. The deck contains n cards, each with a unique integer value from 1 to n. Alice always draws first. The goal is to end the game quickly, so they take turns until one of them draws a target card t, ending the game immediately. Alice and Bob are perfect strategists and each makes a move that brings them closer to winning the game (drawing the target card) in the least number of turns. In this task, you are given the starting deck of n cards in the order they will be drawn and the target card t. Your goal is to determine who will win the game, Alice or Bob, assuming both play optimally. Input: - The first line contains two integers n (1 ≤ n ≤ 2000) and t (1 ≤ t ≤ n) - the number of cards in the deck and the target card value. - The second line contains n space-separated integers representing the order of cards in the deck from top to bottom. Output: - Print \\"Alice\\" if Alice wins, or \\"Bob\\" if Bob wins. Examples: Input: 5 3 1 2 3 4 5 Output: Alice Input: 6 4 6 5 2 4 1 3 Output: Bob","solution":"def determine_winner(n, t, deck): Determines who wins the card game. Parameters: n (int): The number of cards in the deck. t (int): The target card value. deck (list of int): The order of cards in the deck from top to bottom. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. target_index = deck.index(t) if target_index % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" # Example usage # n, t = 5, 3 # deck = [1, 2, 3, 4, 5] # print(determine_winner(n, t, deck)) # Output: \\"Alice\\""},{"question":"You are given a string S consisting of lowercase alphabets only. You need to determine whether S is a \\"balanced string\\". A balanced string is defined as a string where each character appears an even number of times. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string S. Output For each test case, output \\"Balanced\\" (without quotes) if the string S is balanced, otherwise print \\"Not Balanced\\". Constraints 1 ≤ T ≤ 10^3 1 ≤ length of S ≤ 10^5 Example Input: 3 aabb abcabc abcd Output: Balanced Balanced Not Balanced Explanation Example case 1. In the first case, \'a\' appears 2 times and \'b\' appears 2 times. Thus, the string is balanced. Example case 2. In the second case, \'a\', \'b\', and \'c\' each appear 2 times. Thus, the string is balanced. Example case 3. In the third case, \'a\', \'b\', \'c\', and \'d\' each appear 1 time. Thus, the string is not balanced.","solution":"def is_balanced(s): Determines if the given string s is balanced. from collections import Counter counter = Counter(s) for count in counter.values(): if count % 2 != 0: return \\"Not Balanced\\" return \\"Balanced\\" def balance_strings(test_cases): results = [] for s in test_cases: results.append(is_balanced(s)) return results"},{"question":"Alyssa is planning a garden and wants to plant n flowers in a row. Each flower can either be red, blue, or yellow. However, Alyssa wants her garden to be colorful, so she has set a rule: no two adjacent flowers can be of the same color. Given the number of flowers n, write a program to calculate the number of different ways Alyssa can plant her flowers while satisfying her requirement. Input The input consists of a single integer n (1 ≤ n ≤ 1000), the number of flowers. Output Print a single integer, the number of different ways Alyssa can plant the flowers. Examples Input 1 Output 3 Input 2 Output 6","solution":"def count_flower_ways(n): Given the number of flowers n, calculate the number of ways to plant the flowers such that no two adjacent flowers are of the same color. if n == 1: return 3 if n == 2: return 6 # Initialize dp array dp = [0] * (n + 1) dp[1] = 3 dp[2] = 6 # Dynamic programming to fill dp array for i in range(3, n + 1): dp[i] = dp[i - 1] * 2 return dp[n]"},{"question":"You are part of a network team responsible for managing a company\'s computer network. This network can be represented as a tree (a connected acyclic graph) where nodes represent routers and edges represent the direct connections between them. The company wants to optimize the network by ensuring that communication between any two routers is efficient. Specifically, given any two routers, the path between them should not exceed a particular length threshold k. You are required to check if the network already satisfies this condition or not. If not, you need to determine the maximum path length between the farthest pair of routers in the current network setup. Write a program that, given the number of routers n (nodes) and the list of direct connections between them (edges), determines the maximum path length between the farthest pair of routers in the network. Also, indicate whether this length is within the given threshold k. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 105). The following n-1 lines each contain two space-separated integers ui vi (1 ≤ ui, vi ≤ n), where ui and vi indicate there is a direct connection between router ui and router vi. Output Output a single integer - the maximum path length between any two routers in the network, followed by \\"YES\\" if this length is within threshold k, otherwise \\"NO\\". Examples Input 5 4 1 2 1 3 3 4 3 5 Output 3 YES Input 6 2 1 2 2 3 3 4 4 5 5 6 Output 5 NO Note In the first example, the longest path is between routers 4 and 5. The path has a length of 3, which is within the threshold k = 4. In the second example, the longest path is between routers 1 and 6. The path has a length of 5, which exceeds the threshold k = 2.","solution":"from collections import deque, defaultdict def bfs(node, n, adj): dist = [-1] * (n + 1) dist[node] = 0 q = deque([node]) farthest_node = node max_dist = 0 while q: current = q.popleft() for neighbor in adj[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 q.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] farthest_node = neighbor return farthest_node, max_dist def find_max_path_length(n, k, edges): if n == 1: return 0, \\"YES\\" if k >= 0 else \\"NO\\" adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) farthest_node, _ = bfs(1, n, adj) other_farthest_node, max_length = bfs(farthest_node, n, adj) return max_length, \\"YES\\" if max_length <= k else \\"NO\\" # Example usage: # n, k = 5, 4 # edges = [(1, 2), (1, 3), (3, 4), (3, 5)] # print(find_max_path_length(n, k, edges))"},{"question":"The Smart Beaver\'s friend, the Witty Fox, has an interest in rectangular matrices and paths within them. The Witty Fox is studying a m × n size matrix and wants to find the number of distinct paths from the top-left corner to the bottom-right corner. The movement is restricted to only right and down directions. Help the Witty Fox calculate the number of distinct paths for given dimensions of the matrix, m and n. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the matrix, respectively. Output Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the matrix. Examples Input 2 3 Output 3 Input 3 2 Output 3 Explanation: In the first example with a 2x3 matrix, the three paths are: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right In the second example with a 3x2 matrix, the three paths are: 1. Down -> Down -> Right 2. Down -> Right -> Down 3. Right -> Down -> Down","solution":"def number_of_paths(m, n): Returns the number of distinct paths from top-left to bottom-right in a m x n matrix where only right and down movements are allowed. # Create a 2D dp array initialized to 0 dp = [[0] * n for _ in range(m)] # Set the number of ways to reach each cell in the first row and first column to 1 for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given an integer array nums. Your task is to determine if there exists a triplet (i, j, k) such that 0 ≤ i < j < k < nums.length and nums[i] + nums[j] + nums[k] == 0. If such a triplet exists, return true; otherwise, return false. Constraints: * All input values are integers. * 1 ≤ nums.length ≤ 10^4 * -10^5 ≤ nums[i] ≤ 10^5 Input: Input is given from Standard Input in the following format: n nums_1 nums_2 ... nums_n Output: Return \'true\' if there exists a triplet (i, j, k) that meets the conditions, otherwise return \'false\'. Examples: Input: 6 -1 0 1 2 -1 -4 Output: true Input: 5 1 2 3 4 5 Output: false Input: 6 0 0 0 0 0 0 Output: true","solution":"def triplet_sum_to_zero(nums): Determines if there exists a triplet in the array such that the sum of the three elements is zero. Args: nums (List[int]): List of integers Returns: bool: True if there exists a triplet with sum zero, False otherwise. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: return True elif current_sum < 0: left += 1 else: right -= 1 return False"},{"question":"A company named CargoSort is developing a new system to optimize the loading of containers onto their cargo ship. Each container has a specific weight, and the ship has a maximum weight capacity. The goal is to load the maximum number of containers without exceeding the ship’s weight capacity. The containers are presented in a sequence, and the order should be maintained while selecting containers to load. The selection must follow a greedy approach where containers are loaded in sequence until the next container would cause the total weight to exceed the maximum capacity. # Input The input consists of several test cases, each on one line: ``` max_weight container1 container2 ... containerN ... 0 0 ``` Each test case consists of: - The maximum weight capacity of the ship (an integer) - A sequence of container weights (integers) The weights are separated by spaces. A line consisting of two zeros signals the end of the input. # Output For each test case: - Print the total weight of the loaded containers followed by the weights of the selected containers in the order they were loaded. - If no container could be loaded, print `error`. # Example Input ``` 100 20 30 50 70 10 40 50 10 20 10 15 50 60 70 80 120 40 30 60 0 0 ``` Output ``` 100 20 30 50 45 10 20 10 5 error 70 40 30 ``` # Explanation: - For the first input line `100 20 30 50 70 10 40`, the ship\'s maximum weight capacity is 100. The containers loaded would be `20 (current total weight 20), 30 (current total weight 50)`, and `50 (current total weight 100)`. Adding the next container with weight `70` would exceed the capacity, hence the output is `100 20 30 50`. - For the second input line `50 10 20 10 15`, the total weight of `10 + 20 + 10 + 15 = 55` exceeds the capacity, so only `10, 20, 10` can be loaded. Thus, the output is `45 10 20 10 5`. - For the third input `50 60 70 80`, any of these weights alone exceed the maximum capacity of the ship, so the output is `error`. - For the fourth input `120 40 30 60`, the containers loaded would be `40 (current total weight 40), 30 (current total weight 70)`. Adding the next with weight `60` would exceed the capacity. Thus, the output is `70 40 30`.","solution":"def optimal_loading(lines): results = [] for line in lines: parts = list(map(int, line.split())) if parts[0] == 0 and parts[1] == 0: break max_weight = parts[0] container_weights = parts[1:] current_weight = 0 loaded_weights = [] for weight in container_weights: if current_weight + weight <= max_weight: current_weight += weight loaded_weights.append(weight) else: break if loaded_weights: results.append(f\\"{current_weight} \\" + \\" \\".join(map(str, loaded_weights))) else: results.append(\\"error\\") return results"},{"question":"A robotics company is designing a new robot that needs to navigate a grid-based warehouse efficiently. The warehouse floor is represented as a grid of size n x m. Each cell in the grid can either be empty (.) or contain an obstacle (#). The robot can move up, down, left, or right, but cannot move diagonally or through an obstacle. Given the grid and the starting and target positions of the robot, determine the minimum number of steps the robot needs to reach the target. If the target is unreachable, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. The following n lines each contain m characters (\'.\' or \'#\') representing the warehouse grid. The next line contains four integers sr, sc, tr, tc (1 ≤ sr, sc, tr, tc ≤ 1000) — the starting row and column, and the target row and column, respectively. The given positions are guaranteed to be empty cells. Output Print a single integer — the minimum number of steps required for the robot to reach the target cell from the starting cell. If the target is unreachable, print -1. Examples Input 5 5 ..... ... .#... ....# #.. 1 1 3 3 Output 6 Input 3 4 ..#. .#.. .#.# 1 2 3 4 Output -1 Note In the first example, the optimal path for the robot is: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (4,2) -> (3,2) -> (3,3), requiring 6 steps. In the second example, there\'s no way to reach the cell (3,4) starting from (1,2) due to the obstacles, so the output is -1.","solution":"from collections import deque def min_steps_to_target(n, m, warehouse, sr, sc, tr, tc): sr, sc, tr, tc = sr - 1, sc - 1, tr - 1, tc - 1 if sr == tr and sc == tc: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with the starting coordinates and the initial step count 0 queue = deque([(sr, sc, 0)]) visited = set() visited.add((sr, sc)) while queue: r, c, steps = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc # Make sure the new position is within bounds, and it\'s an empty cell if 0 <= nr < n and 0 <= nc < m and warehouse[nr][nc] == \'.\' and (nr, nc) not in visited: if nr == tr and nc == tc: return steps + 1 queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Takahashi is studying sequences of integers. He defines a special sequence as follows: - The sequence is strictly increasing. - The greatest common divisor (GCD) of all elements in the sequence is equal to 1. - The sequence can use any positive integer up to M. Given an integer N, find a special sequence of N integers that satisfies these conditions. Constraints * 2 ≤ N ≤ 50 * N ≤ M ≤ 10^5 * All values in the input are integers. Input Input is given from Standard Input in the following format: ``` N M ``` Output Print a sequence of N distinct integers that satisfy the given conditions. The integers should be printed in ascending order. Each integer should be from the range 1 to M. In case there are multiple possible solutions, you can output any. Examples Input ``` 2 5 ``` Output ``` 1 2 ``` Input ``` 3 10 ``` Output ``` 1 2 3 ```","solution":"def find_special_sequence(N, M): Finds a special sequence of N integers that is strictly increasing, the greatest common divisor (GCD) of all elements in the sequence is equal to 1, and uses any positive integer up to M. Parameters: N (int): The length of the sequence. M (int): The maximum integer that can be used in the sequence. Returns: list: A list of N integers satisfying the conditions. # Simple strategy: Starting from 1 to N should satisfy the condition. sequence = list(range(1, N + 1)) return sequence"},{"question":"Problem Statement You are given a collection of T tasks, and each task consists of N job intervals within a day. A single day is represented from 00:00 to 23:59, given in 24-hour format. Your task is to automate the scheduling of these job intervals to ensure that no two job intervals overlap within the same task. Each job interval is defined by a start time and an end time. You need to validate if the job intervals within each task are scheduled correctly (i.e., non-overlapping). If they are, output the maximum number of jobs that can run consecutively without any idle time between them. Input The input consists of multiple datasets. The input terminates with a single line containing `0` which should not be processed. The input format is as follows: > T > N > hh_1:mm_1-hh_2:mm_2 > : > : > hh_N:mm_N-hh_m:mm_m > ... - T (1 ≤ T ≤ 10) denotes the number of tasks. - For each task, N (1 ≤ N ≤ 50) denotes the number of job intervals. - Each of the next N lines contains the job intervals in the format `hh:mm-hh:mm`. Output For each task, output \\"Valid: X\\" where X is the maximum number of jobs that can run consecutively without idle time if job intervals are non-overlapping, or \\"Invalid\\" if there is any overlap. Sample Input ``` 2 3 08:00-09:00 09:00-10:00 10:00-11:00 4 09:00-10:00 10:00-11:00 10:30-11:30 11:00-12:00 0 ``` Sample Output ``` Valid: 3 Invalid ``` Explanation - For the first task: All job intervals are non-overlapping and can run consecutively from 08:00 to 11:00 without any idle time. - For the second task: The intervals overlap between 10:00-11:00, 10:30-11:30, and 11:00-12:00; hence it is \\"Invalid\\".","solution":"def validate_tasks(tasks): def convert_to_minutes(time_str): hh, mm = map(int, time_str.split(\\":\\")) return hh * 60 + mm results = [] for task in tasks: intervals = [] for interval in task: start, end = interval.split(\'-\') start_minutes = convert_to_minutes(start) end_minutes = convert_to_minutes(end) intervals.append((start_minutes, end_minutes)) # Sort intervals by start time intervals.sort() last_end_time = 0 max_consecutive_jobs = 0 consecutive_jobs = 0 valid = True for start, end in intervals: if last_end_time > start: valid = False break if last_end_time == start: consecutive_jobs += 1 else: max_consecutive_jobs = max(max_consecutive_jobs, consecutive_jobs) consecutive_jobs = 1 last_end_time = end max_consecutive_jobs = max(max_consecutive_jobs, consecutive_jobs) if valid: results.append(f\\"Valid: {max_consecutive_jobs}\\") else: results.append(\\"Invalid\\") return results def process_input(input_lines): tasks = [] index = 0 T = int(input_lines[index]) index += 1 while T > 0: N = int(input_lines[index]) index += 1 task = [] for _ in range(N): task.append(input_lines[index]) index += 1 tasks.append(task) T -= 1 return tasks"},{"question":"You are given a list of integers representing the heights of a series of mountains. Your task is to determine the maximum possible difference in the heights of two mountains such that there are at least one mountain between them that is taller than both of them. For example, given the heights [2, 7, 5, 8, 6], the maximum difference is 6 (between 8 and 2, with the peak 7 in between). Your program should achieve this by following these steps: 1. Find the maximum height difference between two mountains such that there exists at least one mountain in between that is taller than both. 2. Print this maximum height difference as the output. Input - The first line contains an integer `n` (3 ≤ n ≤ 100000) — the number of mountains. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 100000) — the heights of the mountains. Output - Print one integer — the maximum possible height difference as described above. If there is no such pair of mountains, print -1. Examples Input 5 2 7 5 8 6 Output 6 Input 4 4 3 2 1 Output -1 Input 6 1 5 3 7 4 2 Output 6 Note In the first example, the maximum height difference is 6 between heights 8 and 2, with the peak 7 in between. In the second example, there is no such pair of mountains with a higher mountain between them, hence the output is -1. In the third example, the maximum height difference is 6 between heights 7 and 1, with the peak 5 in between.","solution":"def max_height_difference(n, heights): # Initialize the maximum difference as -1 (special case value if no valid pair exists) max_diff = -1 # Iterate regions between peaks find potential peaks inbetween and calculate maximum difference for i in range(1, n-1): if heights[i] > heights[i-1] and heights[i] > heights[i+1]: left = min(heights[:i]) right = min(heights[i+1:]) max_diff = max(max_diff, heights[i] - left, heights[i] - right) return max_diff"},{"question":"You have been given an array of integers and your task is to determine if there exists a subarray with a sum equal to zero. A subarray is a contiguous part of an array. Input The first line contains a positive integer N (1 ≤ N ≤ 100 000), representing the length of the input array. The second line contains N integers (each of absolute value not exceeding 10^9) representing the elements of the array. Output Output \\"Yes\\" if there exists at least one subarray with a sum equal to zero. Otherwise, output \\"No\\". Examples Input 5 4 2 -3 1 6 Output Yes Input 4 1 2 3 4 Output No Note In the first example: 1. The subarray [4, 2, -3, 1] has a sum of 0. In the second example: 1. None of the subarrays sum to 0.","solution":"def has_subarray_with_zero_sum(n, arr): Determines if there exists a subarray with a sum equal to zero. Parameters: n (int): Length of the array. arr (list of int): List of integers. Returns: str: \\"Yes\\" if there exists a subarray with a sum equal to zero, otherwise \\"No\\". seen_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in seen_sums: return \\"Yes\\" seen_sums.add(current_sum) return \\"No\\""},{"question":"Lisa is working on a project involving a sequence of n integers. She needs to modify the sequence to meet certain conditions through a series of operations. Each operation consists of selecting a non-empty subsequence of the sequence and incrementing each element in that subsequence by 1. The goal is to make all elements in the sequence equal using the minimum number of operations. Your task is to create a program that finds the minimum number of operations required to make all elements in the sequence equal. Input: The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) representing the sequence. Output: Print a single integer, the minimum number of operations needed to make all elements in the sequence equal. Examples Input 5 1 2 3 4 5 Output 4 Input 4 4 4 4 4 Output 0 Input 6 5 3 1 4 2 6 Output 5 Note: In the first sample, you can perform the following operations: - Increment the entire sequence [1, 2, 3, 4, 5] to [2, 3, 4, 5, 6] - Increment the entire sequence [2, 3, 4, 5, 6] to [3, 4, 5, 6, 7] - Increment the entire sequence [3, 4, 5, 6, 7] to [4, 5, 6, 7, 8] - Increment the entire sequence [4, 5, 6, 7, 8] to [5, 6, 7, 8, 9] In the second sample, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_make_equal(sequence): This function calculates the minimum number of operations required to make all elements in the sequence equal. :param sequence: List of integers representing the sequence :return: Integer, minimum number of operations # Find the maximum value in the sequence max_val = max(sequence) # Count the number of operations needed to elevate all elements to the maximum value operations = 0 for number in sequence: operations += (max_val - number) return operations"},{"question":"**Problem Statement** Diana and Ethan are playing a game where they need to collect coins and complete tasks. The objective of the game is to score the highest point total. Diana’s and Ethan’s scores are calculated based on the number of coins they collect and their task completion rate (TCR). The final score is calculated based on the formula: [ text{Score} = text{Coins} times 2 + text{TCR} ] However, if either of them has a TCR of -1, it indicates that they have not completed any tasks. In this case, their score is solely dependent on the number of coins they have collected. - If one player has a higher score, they are declared the winner. - If both scores are the same, it is considered a draw. # Constraints The input satisfies the following conditions: - ( 1 leq text{Coins}_1, text{Coins}_2 < 100 ) - ( -1 leq text{TCR}_1, text{TCR}_2 < 1000 ) - All inputs are integers. # Input The input consists of a single line containing four integers: [ text{Coins}_1 quad text{Coins}_2 quad text{TCR}_1 quad text{TCR}_2 ] Where: - (text{Coins}_1) and (text{Coins}_2) represent the number of coins collected by Diana and Ethan, respectively. - (text{TCR}_1) and (text{TCR}_2) represent the Task Completion Rates for Diana and Ethan, respectively. - (text{TCR} = -1) indicates no tasks completed. # Output Print \\"Diana\\" if Diana wins, \\"Ethan\\" if Ethan wins, and \\"Draw\\" if it\'s a draw on a single line. # Examples Input [ 3 quad 4 quad 50 quad 45 ] Output [ Diana ] Input [ 5 quad 5 quad -1 quad 45 ] Output [ Ethan ] Input [ 6 quad 6 quad 25 quad 25 ] Output [ Draw ]","solution":"def game_result(coins1, coins2, tcr1, tcr2): Determines the winner or if it\'s a draw based on the given coins and TCR values. Parameters: coins1 (int): Coins collected by Diana. coins2 (int): Coins collected by Ethan. tcr1 (int): Task completion rate of Diana. tcr2 (int): Task completion rate of Ethan. Returns: str: \\"Diana\\" if Diana wins, \\"Ethan\\" if Ethan wins, \\"Draw\\" if it\'s a draw. score1 = coins1 * 2 + (tcr1 if tcr1 != -1 else 0) score2 = coins2 * 2 + (tcr2 if tcr2 != -1 else 0) if score1 > score2: return \\"Diana\\" elif score2 > score1: return \\"Ethan\\" else: return \\"Draw\\""},{"question":"You are given a string `s` consisting of lowercase English letters. You need to determine the number of distinct substrings of `s` that appear at least twice in `s`. A substring is a contiguous sequence of characters within a string. Two substrings are considered distinct if they start and end at different positions. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains the string `s` of length n. Output Print a single integer — the number of distinct substrings of `s` that appear at least twice. Examples Input 7 banana Output 6 Input 5 abcde Output 0 Input 6 aaaaaa Output 15","solution":"def count_repeated_substrings(s): Returns the number of distinct substrings of s that appear at least twice. n = len(s) suffixes = [s[i:] for i in range(n)] suffixes.sort() def lcp(a, b): length = min(len(a), len(b)) for i in range(length): if a[i] != b[i]: return i return length count = 0 for i in range(1, n): count += lcp(suffixes[i-1], suffixes[i]) return count"},{"question":"You have a mission as a secret agent to secure a network of communication channels between different agents scattered across various cities. The network can be represented as an undirected graph where each node represents a city and each edge represents a secure communication channel between two cities. Given the adjacency matrix representation of this graph, your goal is to ensure that the network has maximum connectivity. A network has maximum connectivity if it is minimally connected such that there are no isolated cities, and removing any single channel (edge) would still keep the network connected. Your task is to check whether the given adjacency matrix represents a network with maximum connectivity. If it does, return \\"YES\\", otherwise return \\"NO\\". Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of cities. - The next n lines each contain n integers (0 or 1), representing the adjacency matrix of the undirected graph. Output: - Print \\"YES\\" if the network has maximum connectivity, otherwise print \\"NO\\". Examples Input: 4 0 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 Output: YES Input: 4 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 Output: NO","solution":"def has_maximum_connectivity(n, adjacency_matrix): This function checks if the given network represented by the adjacency matrix has maximum connectivity. # Function to perform DFS to check connectivity def dfs(v, visited): visited[v] = True for u in range(n): if adjacency_matrix[v][u] == 1 and not visited[u]: dfs(u, visited) # Check if the graph is connected visited = [False] * n dfs(0, visited) if not all(visited): return \\"NO\\" # Check if the removal of any single edge keeps the graph connected for u in range(n): for v in range(n): if adjacency_matrix[u][v] == 1: # Remove the edge adjacency_matrix[u][v] = adjacency_matrix[v][u] = 0 # Check if the graph is still connected visited = [False] * n dfs(0, visited) # Restore the edge adjacency_matrix[u][v] = adjacency_matrix[v][u] = 1 if not all(visited): return \\"NO\\" return \\"YES\\""},{"question":"Alex is planning a picnic in the local park which is designed as an n × m grid of cells, where each cell is either empty or contains an obstacle. The park authorities have placed rest stations at certain locations to ensure that visitors can comfortably enjoy their time. Alex wants to find the shortest path from one rest station to another rest station, but he must avoid obstacles and can only move to an adjacent cell vertically or horizontally. Given the layout of the park, help Alex determine the number of steps in the shortest path between two rest stations. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the park grid. Each of the next n lines contains m characters, where each character is either \'.\' (dot) representing an empty cell, o (lowercase \'o\') representing a rest station, or \'#\' (hash) representing an obstacle. The next line contains two pairs of integers x1 y1 and x2 y2 (1 ≤ x1, y1, x2, y2 ≤ n, m) — the coordinates of the starting and ending rest stations respectively. It is guaranteed that the provided coordinates (x1 y1) and (x2 y2) are valid rest stations and that there will be at least two rest stations in the park. Output Print a single integer representing the shortest path between the two specified rest stations. If there is no such path, print -1. Examples Input 5 5 ..o.. ... .o..# ..o.. #.#o. 2 3 4 3 Output 2 Input 4 6 .o.... ...o.. o.#..o 1 2 4 1 Output -1","solution":"from collections import deque def shortest_path(n, m, park, start, end): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] x1, y1 = start x2, y2 = end queue = deque([(x1, y1, 0)]) # (x, y, distance) visited = {(x1, y1)} while queue: x, y, dist = queue.popleft() if (x, y) == (x2, y2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and park[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def find_shortest_path(n, m, grid, coords): start_coord = (coords[0] - 1, coords[1] - 1) end_coord = (coords[2] - 1, coords[3] - 1) return shortest_path(n, m, grid, start_coord, end_coord) # Example usage: # n = 5 # m = 5 # grid = [ # \\"..o..\\", # \\"...\\", # \\".o..#\\", # \\"..o..\\", # \\"#.#o.\\" # ] # coords = [2, 3, 4, 3] # print(find_shortest_path(n, m, grid, coords)) # Output: 2"},{"question":"Write a function that takes a string containing only lowercase alphabets and returns the number of distinct substrings. Input A string s, where 1 <= len(s) <= 1000. Output An integer representing the number of distinct substrings. Examples Input abc Output 6 Input aaa Output 3","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are given an array of n integers representing the heights of n buildings in a city. You want to run a cable from the first building to the last building such that the cable passes from one building to another only if the next building is taller than the current one. Find the length of the longest cable that can be run between the buildings. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^6) — the heights of the buildings. Output Print the length of the longest cable that can be run from the first building to the last building. If it\'s not possible to run the cable from the first to the last building, print -1. Examples Input 6 2 3 1 4 6 9 Output 5 Input 5 5 4 3 2 1 Output -1 Note In the first example, the cable can be run from the first building to the last building following the sequence 2 -> 3 -> 4 -> 6 -> 9, making the length of the cable 5. In the second example, no valid cable path exists since all buildings are in decreasing heights.","solution":"def longest_cable(n, heights): Returns the length of the longest cable that can be run between buildings with increasing heights. If no valid cable path exists, returns -1. if n == 1: return 1 # dp array to store the length of the subsequence ending at each building dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The answer is found at the last building if dp[-1] == 1: return -1 else: return dp[-1]"},{"question":"Anna is learning to play the piano and is currently practicing different scales. She noticed that a musical scale is a non-empty sequence of distinct notes, where each note is represented by an uppercase letter from \'A\' to \'G\'. Additionally, each scale follows the order in the musical alphabet (not necessarily contiguous). Given a musical scale represented as a string S, determine the next scale that appears after S in the lexicographical order, using the same rules as the musical alphabet. If there is no such scale, return \\"-1\\". To clarify, each scale includes distinct uppercase letters \'A\', \'B\', \'C\', \'D\', \'E\', \'F\', and \'G\' ordered in ascending fashion according to the specified criteria. For instance, \'CDE\' and \'ACE\' are valid scales, but \'EDD\' is not because of the repeating note \'D\'. Constraints: * 1 ≤ |S| ≤ 7 * S is a valid musical scale. Input: Input consists of a single string S representing the current musical scale. Output: Print the next scale that appears after S in the dictionary, or `-1` if no such scale exists. Examples: Input: CDE Output: CDF Input: BEF Output: BEG Input: G Output: -1 Input: ACE Output: ACF","solution":"def next_musical_scale(S): Given the musical scale S as a string, returns the next scale that appears after S in the lexicographical order. If there is no such scale, returns \\"-1\\". # The musical alphabet musical_alphabet = \'ABCDEFG\' # Find all possible combinations of the musical scale based on the length of S from itertools import combinations scales = [\'\'.join(combo) for combo in combinations(musical_alphabet, len(S))] # Find the index of the current scale try: current_index = scales.index(S) except ValueError: return \\"-1\\" # The next scale would be the next index after the current scale next_index = current_index + 1 if next_index < len(scales): return scales[next_index] else: return \\"-1\\""},{"question":"Consider a grid-based dungeon represented by a 2D integer array. Each cell in the dungeon has an integer representing the health impact: positive for health gain, negative for health loss, and zero for no impact. A brave knight starts at the top-left corner of the dungeon and must reach the bottom-right corner to rescue a princess. The knight can only move right or down from any point in the dungeon and must have at least 1 health point at any time. Determine the minimum initial health points the knight needs to start with to accomplish his mission successfully, ensuring he can survive the dungeon with positive health through his journey. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 200), the number of rows and columns in the dungeon. - The next m lines contain n integers each, representing the health impact of each cell (each integer between -1000 and 1000). Output Print a single integer — the minimum initial health points required for the knight to survive and rescue the princess. Examples Input 3 3 -2 -3 3 -5 -10 1 10 30 -5 Output 7 Input 1 3 0 0 -3 Output 4","solution":"def calculate_min_initial_health(dungeon): m, n = len(dungeon), len(dungeon[0]) # Create a dp array with large values dp = [[float(\'inf\')] * (n + 1) for _ in range(m + 1)] dp[m][n-1] = dp[m-1][n] = 1 # Set the health of the cell right to princess and the cell below princess to 1 # Fill the dp table from bottom-right to top-left for i in range(m-1, -1, -1): for j in range(n-1, -1, -1): min_health_on_exit = min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j] dp[i][j] = max(1, min_health_on_exit) return dp[0][0] # Example usage dungeon1 = [ [-2, -3, 3], [-5, -10, 1], [10, 30, -5] ] print(calculate_min_initial_health(dungeon1)) # Output: 7 dungeon2 = [ [0, 0, -3] ] print(calculate_min_initial_health(dungeon2)) # Output: 4"},{"question":"You are working with a collection of books in a library. Each book has a unique ID and belongs to a specific category. The library is organized in a way that allows direct access to the books regardless of their IDs. You have to answer multiple queries related to the availability and category distribution of books within a certain range of IDs. The queries specifically ask for the count of unique categories represented within the specified range of book IDs. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5; 1 ≤ q ≤ 10^5), where n is the number of books and q is the number of queries. The next line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^5), where ci represents the category ID of the i-th book. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n), which represent the inclusive range of book IDs for each query. Output For each query, print an integer which represents the number of unique categories of books found within the specified range of book IDs. Examples Input 8 3 1 2 3 2 2 3 3 4 1 4 2 6 3 8 Output 3 2 3 Input 5 2 1 1 1 1 1 1 3 2 5 Output 1 1 Note For the first example: - For the range [1, 4], we have books with categories {1, 2, 3}. There are 3 unique categories. - For the range [2, 6], we have books with categories {2, 3}. There are 2 unique categories. - For the range [3, 8], we have books with categories {3, 2, 4}. There are 3 unique categories.","solution":"def unique_categories_count(n, q, categories, queries): Given a list of book categories and a series of queries, this function returns the number of unique categories within the specified range of book IDs for each query. Parameters: n (int): Number of books q (int): Number of queries categories (List[int]): List containing the category of each book queries (List[Tuple[int, int]]): List of tuples containing the range (li, ri) for each query Returns: List[int]: List containing the number of unique categories for each query results = [] for li, ri in queries: unique_categories = set(categories[li-1:ri]) results.append(len(unique_categories)) return results"},{"question":"Write a program that simulates a simple banking system. The program should handle multiple customers and their transactions. Each customer can either deposit or withdraw money from their account. The program should keep track of customers\' balances and print a summary of transactions for each customer at the end. The program should accept a list of transactions, where each transaction includes the customer ID, the transaction type (\'deposit\' or \'withdraw\'), and the amount. If a withdrawal request exceeds the current balance, the transaction should be ignored. Input The input consists of several datasets. The input ends with a line including a single 0. Each dataset consists of: n (the number of transactions in the list) id type amount id type amount : : id type amount Output For each dataset, print the summary of transactions for each customer. If a customer has no valid transactions, print \\"ID x: No transactions\\" (where x is the customer ID). Ensure customers are listed in the order they appear in the input. If there are no customers with valid transactions for a dataset, print \\"No customers\\". Example Input 5 101 deposit 500 102 deposit 300 101 withdraw 100 103 deposit 700 102 withdraw 500 3 201 deposit 1000 202 withdraw 500 203 withdraw 300 3 301 deposit 200 301 withdraw 300 301 deposit 100 0 Output ID 101: Balance 400 ID 102: Balance 300 ID 103: Balance 700 ID 201: Balance 1000 ID 202: No transactions ID 203: No transactions ID 301: Balance 0","solution":"def process_transactions(batch): transactions = batch.strip().split(\\"n\\") if transactions[0] == \'0\' or transactions == [\'\']: return [] num_transactions = int(transactions[0]) customer_data = {} for i in range(1, num_transactions + 1): transaction = transactions[i].split() customer_id = int(transaction[0]) trans_type = transaction[1] amount = int(transaction[2]) if customer_id not in customer_data: customer_data[customer_id] = 0 if trans_type == \'deposit\': customer_data[customer_id] += amount elif trans_type == \'withdraw\' and customer_data[customer_id] >= amount: customer_data[customer_id] -= amount summary = [] for customer_id in transactions[1:num_transactions + 1]: cid = int(customer_id.split()[0]) if customer_data[cid] == 0 and all(trans.split()[1] == \'withdraw\' for trans in transactions[1:num_transactions + 1] if int(trans.split()[0]) == cid): summary.append(f\\"ID {cid}: No transactions\\") else: summary.append(f\\"ID {cid}: Balance {customer_data[cid]}\\") return list(dict.fromkeys(summary))"},{"question":"Stephanie is a biologist studying the migration patterns of birds. She tracks the birds\' locations and noted that they form a specific path over a period of days. Stephanie wants to analyze the maximum number of distinct locations visited by the birds within a sliding window of a defined number of days. You are to help Stephanie by writing a program that takes the list of visited locations and the size of the sliding window, and outputs the maximum number of distinct locations recorded within any such window. Input The first line contains two integers `n` (1 ≤ n ≤ 100000), the number of days Stephanie tracked the birds, and `k` (1 ≤ k ≤ n), the size of the sliding window. The second line contains `n` integers representing the locations visited by the birds on each day. Each location is a positive integer. Output Output a single integer, the maximum number of distinct locations within any sliding window of size `k`. Examples Input 7 3 1 2 1 3 4 2 3 Output 3 Input 6 4 5 5 5 4 4 4 Output 2 Note In the first example, with a window size of 3, the sliding windows and their distinct location counts are as follows: - [1, 2, 1] -> 2 distinct locations - [2, 1, 3] -> 3 distinct locations - [1, 3, 4] -> 3 distinct locations - [3, 4, 2] -> 3 distinct locations - [4, 2, 3] -> 3 distinct locations So, the maximum number of distinct locations is 3. In the second example, with a window size of 4, the sliding windows and their distinct location counts are as follows: - [5, 5, 5, 4] -> 2 distinct locations - [5, 5, 4, 4] -> 2 distinct locations - [5, 4, 4, 4] -> 2 distinct locations So, the maximum number of distinct locations is 2.","solution":"def max_distinct_locations(n, k, locations): Returns the maximum number of distinct locations within any sliding window of size `k`. :param n: An integer representing the number of days Stephanie tracked the birds. :param k: An integer representing the size of the sliding window. :param locations: A list of integers representing the locations visited by the birds on each day. :return: An integer representing the maximum number of distinct locations within any sliding window of size `k`. from collections import defaultdict if k == 1: return 1 # If window size is 1, the max distinct locations in any window will be 1. location_count = defaultdict(int) distinct_count = 0 max_distinct = 0 # Initialize the first window for i in range(k): if location_count[locations[i]] == 0: distinct_count += 1 location_count[locations[i]] += 1 max_distinct = distinct_count # Slide the window from start to the end for i in range(k, n): # Remove the element that is going out of the window location_out = locations[i - k] location_count[location_out] -= 1 if location_count[location_out] == 0: distinct_count -= 1 # Add the new element that is coming into the window location_in = locations[i] if location_count[location_in] == 0: distinct_count += 1 location_count[location_in] += 1 max_distinct = max(max_distinct, distinct_count) return max_distinct"},{"question":"A company is organizing a giveaway contest for a new product launch. The event will last for `d` days, and each day they can distribute up to `k` prizes. However, they have a limited number of prizes to give, `n` in total. Each day, the number of participants `p_i` varies, and the company wants to make sure every participant has a chance to win if there\'s enough supply. The goal is to maximize the number of prizes given out while ensuring no day has participants left without a prize if the supply allows. You need to determine the maximum number of prizes that can be distributed across all days without any participant on any given day being left without a prize if possible. Input The first line contains three integers `n`, `d`, `k` (1 ≤ n, d, k ≤ 100) — the total number of prizes, the number of days, and the maximum number of prizes that can be distributed each day, respectively. The second line contains `d` integers, `p_1, p_2, ..., p_d` (0 ≤ p_i ≤ 1 000) — the number of participants on each day. Output Print a single integer denoting the maximum number of prizes that can be distributed under the given constraints. Example Input 50 3 20 10 15 20 Output 45 Input 30 4 10 12 10 7 5 Output 30 Note In the first example, it\'s optimal to distribute 10 prizes on the first day, 15 prizes on the second day, and 20 prizes on the third day for a total of 45 prizes. This maximizes the distribution without exceeding the daily limit or leaving any participant unprized given there\'s enough supply each day. In the second example, it\'s optimal to distribute 10 prizes on the first day, 10 prizes on the second day, 7 prizes on the third day, and 3 prizes on the fourth day. Although there are only 5 participants on the last day, we ensure no participant is left without a prize, and we distribute the total amount of 30 prizes effectively.","solution":"def max_prizes(n, d, k, participants): total_prizes_distributed = 0 for p in participants: if n == 0: # No more prizes left break daily_prizes = min(p, k) # Maximum prizes given a daily limit k if daily_prizes > n: # Adjust if we have less prizes left than needed daily_prizes = n n -= daily_prizes total_prizes_distributed += daily_prizes return total_prizes_distributed"},{"question":"In a remote town with a peculiar elevation pattern, the mayor wants to develop a system to minimize the flooding impact by identifying flood-prone areas. The town\'s elevation map is represented by a 2D grid of integers, where each cell contains the elevation at that point. Water can only flow from a cell to its four direct neighbors (up, down, left, right) if the neighbor\'s elevation is less than or equal to the current cell\'s elevation. Your task is to find all cells from which the water cannot reach the border of the grid. *Input Format:* The first line contains two integers, `m` and `n`, representing the dimensions of the grid (number of rows and columns, respectively). Each of the next `m` lines contains `n` integers where the `j-th` integer of the `i-th` line is the elevation at cell (i, j). *Output Format:* Output a list of coordinates (i, j) of the flood-prone cells. Each coordinate should be represented by a pair and all pairs should be separated by a space. *Constraints:* - 1 ≤ m, n ≤ 100 - 1 ≤ elevation ≤ 1000 *Author: Alex Carter* *SAMPLE INPUT:* 4 5 1 2 2 3 5 3 2 3 4 4 2 4 5 3 1 6 7 1 4 5 *SAMPLE OUTPUT:* (2, 2) *Explanation:* In the given grid, water can flow freely due to the given elevation levels. By determining the cells where water cannot possibly flow to the border regardless of the direction, we can pinpoint (2, 2) as the flood-prone area since water cannot reach any of the borders from this coordinate.","solution":"def flood_prone_cells(elevation_grid): m, n = len(elevation_grid), len(elevation_grid[0]) # Helper function to perform DFS for each cell def dfs(x, y, visited, can_reach): if visited[x][y]: return visited[x][y] = True can_reach[x][y] = True for nx, ny in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)): if 0 <= nx < m and 0 <= ny < n and elevation_grid[nx][ny] <= elevation_grid[x][y]: dfs(nx, ny, visited, can_reach) # Two grids to mark the cells that can reach the borders can_reach_border_top_left = [[False] * n for _ in range(m)] can_reach_border_bottom_right = [[False] * n for _ in range(m)] # Perform DFS from all border cells and mark reachable cells for i in range(m): dfs(i, 0, can_reach_border_top_left, can_reach_border_top_left) dfs(i, n - 1, can_reach_border_top_left, can_reach_border_top_left) dfs(i, 0, can_reach_border_bottom_right, can_reach_border_bottom_right) dfs(i, n - 1, can_reach_border_bottom_right, can_reach_border_bottom_right) for j in range(n): dfs(0, j, can_reach_border_top_left, can_reach_border_top_left) dfs(m - 1, j, can_reach_border_bottom_right, can_reach_border_bottom_right) dfs(0, j, can_reach_border_top_left, can_reach_border_top_left) dfs(m - 1, j, can_reach_border_bottom_right, can_reach_border_bottom_right) flood_prone = [] for i in range(m): for j in range(n): if not can_reach_border_top_left[i][j] and not can_reach_border_bottom_right[i][j]: flood_prone.append((i, j)) return flood_prone"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],C={key:0},P={key:1};function R(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",C,"See more"))],8,z)):h("",!0)])}const M=d(S,[["render",R],["__scopeId","data-v-47229765"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/23.md","filePath":"chatai/23.md"}'),L={name:"chatai/23.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
