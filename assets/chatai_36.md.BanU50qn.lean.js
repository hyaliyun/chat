import{_ as h,o as n,c as i,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},S={class:"review-content"};function E(a,e,l,p,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const F=h(k,[["render",E],["__scopeId","data-v-6e8247a5"]]),C=JSON.parse('[{"question":"** Design a function `evaluate_and_optimize` that simulates a simple gradient descent optimization process for a linear regression model. The function will accept the following parameters: - `X`: Numpy array of shape (m, n) containing the features of the dataset. - `y`: Numpy array of shape (m,) containing the target values. - `learning_rate`: Scalar value representing the step size for each iteration of the gradient descent. - `iterations`: Integer value specifying the number of iterations to run the optimization. - `plot_performance`: Boolean value indicating whether to plot the cost function over iterations. Your task is to: 1. Initialize the weights and bias to zero. 2. Implement the gradient descent algorithm to update the weights and bias. 3. Compute the cost function (Mean Squared Error) at each iteration. 4. Store the cost at each iteration in a list called `cost_history`. 5. If `plot_performance` is set to True, plot the cost function over the iterations using `matplotlib.pyplot.plot` and `matplotlib.pyplot.show`. Your function signature should be: ```python def evaluate_and_optimize(X, y, learning_rate, iterations, plot_performance): ``` Here is a helper code snippet and the required libraries: ```python import numpy as np import matplotlib.pyplot as plt def compute_cost(X, y, weights, bias): m = len(y) predictions = X.dot(weights) + bias cost = (1 / (2 * m)) * np.sum((predictions - y) ** 2) return cost def gradient_descent_step(X, y, weights, bias, learning_rate): m = len(y) predictions = X.dot(weights) + bias dW = (1 / m) * X.T.dot(predictions - y) db = (1 / m) * np.sum(predictions - y) weights -= learning_rate * dW bias -= learning_rate * db return weights, bias def evaluate_and_optimize(X, y, learning_rate, iterations, plot_performance): m, n = X.shape weights = np.zeros(n) bias = 0 cost_history = [] for i in range(iterations): weights, bias = gradient_descent_step(X, y, weights, bias, learning_rate) cost = compute_cost(X, y, weights, bias) cost_history.append(cost) if plot_performance: plt.plot(range(iterations), cost_history) plt.xlabel(\'Iterations\') plt.ylabel(\'Cost\') plt.title(\'Cost Function over Iterations\') plt.show() return weights, bias, cost_history # Example usage X = np.random.randn(100, 2) y = X[:, 0] * 3 + X[:, 1] * 5 + np.random.randn(100) evaluate_and_optimize(X, y, 0.01, 1000, True) ```","solution":"import numpy as np import matplotlib.pyplot as plt def compute_cost(X, y, weights, bias): Computes the Mean Squared Error cost function. m = len(y) predictions = X.dot(weights) + bias cost = (1 / (2 * m)) * np.sum((predictions - y) ** 2) return cost def gradient_descent_step(X, y, weights, bias, learning_rate): Performs one step of gradient descent on the weights and bias. m = len(y) predictions = X.dot(weights) + bias dW = (1 / m) * X.T.dot(predictions - y) db = (1 / m) * np.sum(predictions - y) weights -= learning_rate * dW bias -= learning_rate * db return weights, bias def evaluate_and_optimize(X, y, learning_rate, iterations, plot_performance): Simulates the gradient descent optimization process for a linear regression model. m, n = X.shape weights = np.zeros(n) bias = 0 cost_history = [] for i in range(iterations): weights, bias = gradient_descent_step(X, y, weights, bias, learning_rate) cost = compute_cost(X, y, weights, bias) cost_history.append(cost) if plot_performance: plt.plot(range(iterations), cost_history) plt.xlabel(\'Iterations\') plt.ylabel(\'Cost\') plt.title(\'Cost Function over Iterations\') plt.show() return weights, bias, cost_history # Example usage X = np.random.randn(100, 2) y = X[:, 0] * 3 + X[:, 1] * 5 + np.random.randn(100) evaluate_and_optimize(X, y, 0.01, 1000, True)"},{"question":"You are required to develop a function named `calculate_meeting_days` that determines the number of days two colleagues will meet at the office based on their individual work schedules. Both colleagues have schedules that repeat weekly. # Function Specification 1. **Input**: The function should accept two arguments: - A list representing the days the first colleague is in the office, e.g., `[1, 2, 3]` where 1 corresponds to Monday, 2 to Tuesday, etc. - A list representing the days the second colleague is in the office, e.g., `[3, 4, 5]`. 2. **Output**: The function should return an integer representing the number of days both colleagues are in the office simultaneously. # Example ```python def calculate_meeting_days(schedule1: List[int], schedule2: List[int]) -> int: ``` Example 1: ```plaintext Input: schedule1 = [1, 3, 5], schedule2 = [2, 3, 5] Output: 2 Explanation: Colleagues meet on Tuesdays (3) and Thursdays (5). ``` Example 2: ```plaintext Input: schedule1 = [1, 2, 3, 4, 5, 6, 7], schedule2 = [1, 2, 3, 4, 5, 6, 7] Output: 7 Explanation: Both colleagues are at the office every day of the week. ``` # Constraints - You can assume both input lists have unique values within the range [1, 7]. Write the function `calculate_meeting_days` to determine how many days both colleagues will be in the office together.","solution":"def calculate_meeting_days(schedule1, schedule2): Returns the number of days both colleagues are in the office simultaneously. :param schedule1: List of integers representing the days first colleague is in the office. :param schedule2: List of integers representing the days second colleague is in the office. :return: Integer count of days both colleagues are in the office. # Convert the lists to sets set1 = set(schedule1) set2 = set(schedule2) # Find the intersection of both sets common_days = set1.intersection(set2) # Return the number of common days return len(common_days)"},{"question":"** You are tasked with creating a function named `find_common_elements` that identifies common elements from two lists and returns them as a sorted list without duplicates. Here\'s the detailed requirement: 1. Define a function `find_common_elements(list1, list2)` which will perform the following tasks: - Accept two lists as inputs: `list1` and `list2`. - Identify the common elements between the two lists. - Remove any duplicate values that might arise, ensuring that each element in the returned list is unique. - Return the common elements sorted in ascending order. **Function Signature**: ```python def find_common_elements(list1, list2): pass ``` **Examples**: ```python find_common_elements([1, 2, 3, 4], [3, 4, 5, 6]) # Returns: [3, 4] find_common_elements([\'apple\', \'banana\', \'cherry\'], [\'banana\', \'cherry\', \'date\', \'apple\']) # Returns: [\'apple\', \'banana\', \'cherry\'] find_common_elements([1.1, 2.2, 3.3], [3.3, 4.4, 5.5, 1.1]) # Returns: [1.1, 3.3] ``` In this task, you will gain experience with set operations, list manipulations, and sorting in Python.","solution":"def find_common_elements(list1, list2): Returns a sorted list of unique common elements from two lists. # Convert input lists to sets to find intersection set1 = set(list1) set2 = set(list2) # Find common elements common_elements = set1.intersection(set2) # Sort the common elements and convert to list before returning return sorted(common_elements)"},{"question":"You are asked to implement a function that generates a rotated version of a given 2D matrix. The function should be able to rotate the matrix 90, 180, or 270 degrees clockwise. You can accomplish this by first writing helper functions that generate the necessary transformations. The function should be named `rotate_matrix`. # Function Signature ```python def rotate_matrix(matrix: list[list[int]], angle: int) -> list[list[int]]: ``` # Parameters - `matrix` (list of list of int): A 2D list representing the matrix to be rotated. You can assume the input matrix will be non-empty and square (NxN). - `angle` (int): The degree of rotation. It can be `90`, `180`, or `270`. # Returns - `list of list of int`: A new matrix which is the rotated version of the input matrix. # Behavior 1. If the angle is `90`, the function should rotate the matrix 90 degrees clockwise. 2. If the angle is `180`, the function should rotate the matrix 180 degrees. 3. If the angle is `270`, the function should rotate the matrix 270 degrees clockwise. # Example ```python matrix_1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] angle_1 = 90 print(rotate_matrix(matrix_1, angle_1)) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] matrix_2 = [ [1, 2], [3, 4] ] angle_2 = 180 print(rotate_matrix(matrix_2, angle_2)) # Output should be: # [ # [4, 3], # [2, 1] # ] matrix_3 = [ [1, 2], [3, 4] ] angle_3 = 270 print(rotate_matrix(matrix_3, angle_3)) # Output should be: # [ # [2, 4], # [1, 3] # ] ``` # Constraints - The input matrix will always be a square matrix with side length between 1 and 100, inclusive. - The `angle` parameter will always be one of `90`, `180`, or `270`. - You are not allowed to use any in-built rotation functions or libraries for this task; implement the rotation logic manually.","solution":"def rotate_matrix(matrix: list[list[int]], angle: int) -> list[list[int]]: Rotates the given NxN matrix to the specified angle. Args: matrix (list of list of int): A 2D list representing the matrix. angle (int): The angle of rotation. Can be 90, 180, or 270 degrees. Returns: list of list of int: A new matrix which is the rotated version of the input matrix. def rotate_90(matrix): n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated def rotate_180(matrix): n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[n-1-i][n-1-j] = matrix[i][j] return rotated def rotate_270(matrix): n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[n-1-j][i] = matrix[i][j] return rotated if angle == 90: return rotate_90(matrix) elif angle == 180: return rotate_180(matrix) elif angle == 270: return rotate_270(matrix) else: raise ValueError(\\"Invalid rotation angle. Choose between 90, 180, 270.\\")"},{"question":"You are tasked with writing a function that generates a random password of a given length, ensuring it includes at least one uppercase letter, one lowercase letter, one digit, and one special character. The password should be returned as a string. Function Specification **Function Name:** `generate_password` **Parameters:** - `length (int)`: An integer representing the length of the password. The length should be at least 4 to accommodate all required character types. **Behavior:** - The function should generate a random password containing at least: - One uppercase letter: [A-Z] - One lowercase letter: [a-z] - One digit: [0-9] - One special character: [!@#%^&*()_+] - The remaining characters of the password can be a mix of any of the above categories. - The function should raise a `ValueError` if the specified length is less than 4. - Use the `random` module to generate the password. **Requirements:** - Ensure the password is randomized each time the function is called. - Avoid simple patterns, ensuring a high degree of randomness. Below is the skeleton code for the function. Your goal is to complete the function: ```python import random import string def generate_password(length): if length < 4: raise ValueError(\\"Password length must be at least 4 characters\\") # Ensure each type of characters appears at least once characters = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(\'!@#%^&*()_+\') ] # Fill the remaining characters all_characters = string.ascii_letters + string.digits + \'!@#%^&*()_+\' characters += random.choices(all_characters, k=length-4) # Shuffle to ensure randomness random.shuffle(characters) return \'\'.join(characters) ```","solution":"import random import string def generate_password(length): if length < 4: raise ValueError(\\"Password length must be at least 4 characters\\") # Ensure each type of characters appears at least once characters = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(\'!@#%^&*()_+\') ] # Fill the remaining characters all_characters = string.ascii_letters + string.digits + \'!@#%^&*()_+\' characters += random.choices(all_characters, k=length-4) # Shuffle to ensure randomness random.shuffle(characters) return \'\'.join(characters)"},{"question":"Design a Python function named `flatten_and_sort_list()` that takes a list of lists of integers and returns a single, sorted list of all the integers. Your function will: 1. Accept a single parameter `list_of_lists`, which is a list of lists containing integers. 2. Flatten the `list_of_lists` into one single list that contains all the integers. 3. Sort the resulting list in ascending order. 4. Return the sorted list. Make sure your function adheres to the following details: - Ensure that the function works for lists of arbitrary length and depth, as long as the input is a list of lists where each nested list contains integers. - Your function should use Python’s built-in list methods and functionality like list comprehensions. - Do not use external libraries or built-in sorting functions, such as `sorted()` or `itertools.chain`. Example: ``` flatten_and_sort_list([[3, 2, 1], [4, 6, 5], [], [9, 7, 8]]) ``` Sample Output: ``` [1, 2, 3, 4, 5, 6, 7, 8, 9] ```","solution":"def flatten_and_sort_list(list_of_lists): Flattens a list of lists of integers and returns a sorted list of integers. Parameters: - list_of_lists: list of lists containing integers. Returns: - A sorted list of integers. # Flatten the list of lists flat_list = [num for sublist in list_of_lists for num in sublist] # Sorting the flattened list using Bubble Sort (since built-in sorted() is not allowed) n = len(flat_list) for i in range(n): for j in range(0, n-i-1): if flat_list[j] > flat_list[j+1]: flat_list[j], flat_list[j+1] = flat_list[j+1], flat_list[j] return flat_list"},{"question":"In this problem, you need to implement a function that solves a classic puzzle using recursion: the Tower of Hanoi. The Tower of Hanoi is a mathematical puzzle in which you have three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest disk on the top, making a conical shape. Your task is to complete the implementation of the provided `solve_hanoi` function. The function should print the steps to move all the disks from the source rod to the target rod using an auxiliary rod. **Function Signature:** ```python def solve_hanoi(n: int, source: str, target: str, auxiliary: str) -> None: ``` **Parameters:** - `n` (int): The number of disks. - `source` (str): The rod where all disks are initially stacked. - `target` (str): The rod where disks need to be moved. - `auxiliary` (str): The rod used for temporarily holding disks. **Returns:** - None. Print the steps to move the disks. **Instructions:** 1. The function should follow these rules: - Only one disk can be moved at a time. - Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod. - No larger disk may be placed on top of a smaller disk. 2. The function should print the steps in the following format: ``` Move disk <disk_number> from <source> to <target> ``` For example, \\"Move disk 1 from A to B\\". 3. Start by moving the top `n-1` disks from the source rod to the auxiliary rod, then move the nth disk to the target rod, and finally move the `n-1` disks from the auxiliary rod to the target rod. Here are some example calls of the `solve_hanoi` function and their corresponding output: **Example 1:** ```python solve_hanoi(2, \'A\', \'C\', \'B\') ``` **Output:** ``` Move disk 1 from A to B Move disk 2 from A to C Move disk 1 from B to C ``` **Example 2:** ```python solve_hanoi(3, \'A\', \'C\', \'B\') ``` **Output:** ``` Move disk 1 from A to C Move disk 2 from A to B Move disk 1 from C to B Move disk 3 from A to C Move disk 1 from B to A Move disk 2 from B to C Move disk 1 from A to C ``` Write the `solve_hanoi` function to solve the Tower of Hanoi puzzle and print the steps for the given number of disks.","solution":"def solve_hanoi(n: int, source: str, target: str, auxiliary: str) -> None: Solves the Tower of Hanoi problem and prints the steps required to move disk. Parameters: n (int): The number of disks. source (str): The rod where all disks are initially stacked. target (str): The rod where disks need to be moved. auxiliary (str): The rod used for temporarily holding disks. Returns: None if n == 1: print(f\\"Move disk {n} from {source} to {target}\\") return solve_hanoi(n-1, source, auxiliary, target) print(f\\"Move disk {n} from {source} to {target}\\") solve_hanoi(n-1, auxiliary, target, source)"},{"question":"You are given a list of weighted edges that represent a directed graph, and your task is to implement a function called `shortest_path` that computes the shortest path from a given source node to all other nodes in the graph using Dijkstra\'s algorithm. The function should return a dictionary where the keys are the node ids and the values are the shortest path distances from the source node. Your function should have the following signature: ```python def shortest_path(edges, num_nodes, source): ``` Where: - `edges` is a list of tuples `(u, v, w)`, where `u` is the starting node, `v` is the ending node, and `w` is the weight of the edge. - `num_nodes` is an integer representing the number of nodes in the graph (nodes are labeled from `0` to `num_nodes - 1`). - `source` is an integer representing the source node from which to compute the shortest paths. Your task is to: 1. Implement Dijkstra\'s algorithm to compute the shortest path from the `source` node to all other nodes. 2. Return a dictionary where each key is a node id and the corresponding value is the shortest path distance from the `source` node. If a node is unreachable from the source, its distance should be set to float(\'inf\'). You may use the `heapq` module in Python to implement the priority queue required for Dijkstra\'s algorithm.","solution":"import heapq def shortest_path(edges, num_nodes, source): Implements Dijkstra\'s algorithm to find the shortest path from the source node to all other nodes in the directed graph described by edges. Parameters: - edges (List[Tuple[int, int, int]]): List of edges in the form (u, v, w) - num_nodes (int): Number of nodes in the graph - source (int): Source node Returns: - dict: A dictionary where keys are node ids and values are shortest path distances from the source graph = {i: [] for i in range(num_nodes)} for u, v, w in edges: graph[u].append((v, w)) distances = {i: float(\'inf\') for i in range(num_nodes)} distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"In a financial application, you are required to develop a function that calculates the compound interest over a given period. The formula to calculate compound interest is: [ A = P times left(1 + frac{r}{n}right)^{n times t} ] where: - ( A ) is the amount of money accumulated after n years, including interest. - ( P ) is the principal amount (the initial amount of money). - ( r ) is the annual interest rate (in decimal). - ( n ) is the number of times that interest is compounded per year. - ( t ) is the time in years. Your function should take as input the principal amount, the annual interest rate, the number of times that interest is compounded per year, and the time the money is invested or borrowed for, and return the accumulated amount after that period. **Given:** - `principal`: A float representing the initial amount of money. - `annual_rate`: A float representing the annual interest rate in decimal form (e.g., 0.05 for 5%). - `times_compounded`: An integer representing the number of times interest is compounded per year. - `years`: A float representing the time the money is invested or borrowed for, in years. **Function Specification:** - **Function Name:** `compute_compound_interest` - **Parameters:** - `principal`: A float value for the initial amount of money. - `annual_rate`: A float value for the annual interest rate in decimal form. - `times_compounded`: An integer value for the number of times interest is compounded per year. - `years`: A float value for the time in years. - **Return:** A float representing the accumulated amount after the specified period. **Example Usage:** ```python def compute_compound_interest(principal, annual_rate, times_compounded, years): return principal * (1 + annual_rate / times_compounded) ** (times_compounded * years) # Example P = 1000.0 # principal amount r = 0.05 # annual interest rate n = 12 # number of times interest is compounded per year t = 10 # time in years accumulated_amount = compute_compound_interest(P, r, n, t) print(accumulated_amount) # This should output the accumulated amount after 10 years. ```","solution":"def compute_compound_interest(principal, annual_rate, times_compounded, years): Calculate the compound interest. Parameters: - principal: float, the initial amount of money. - annual_rate: float, the annual interest rate in decimal form. - times_compounded: int, the number of times interest is compounded per year. - years: float, the time in years the money is invested or borrowed for. Returns: - float, the accumulated amount after the specified period. return principal * (1 + annual_rate / times_compounded) ** (times_compounded * years)"},{"question":"You are tasked with handling a collection of tasks, each with a start and end time. The objective is to determine the maximum number of non-overlapping tasks you can accomplish within a given timeframe. This is a variant of the interval scheduling maximization problem. Your function, `max_non_overlapping_tasks`, should meet the following criteria: 1. **Function Name**: `max_non_overlapping_tasks`. 2. **Parameters**: - `tasks` (list of tuples): Each tuple represents a task with a start and end time, `(start, end)`. 3. **Output**: Return an integer representing the maximum number of non-overlapping tasks that can be accommodated. # Detailed Instructions: 1. **Sort** the tasks based on their end times. 2. Iterate through the sorted list of tasks and select tasks in such a way that no two tasks overlap. 3. For each task, check if its start time is greater than or equal to the end time of the last selected task. 4. Count and return the number of these non-overlapping tasks. # Example: ```python def max_non_overlapping_tasks(tasks): # Sort tasks based on end times tasks = sorted(tasks, key=lambda x: x[1]) # The end time of the last added task to the optimal schedule last_end_time = float(\'-inf\') # Count of maximum non-overlapping tasks max_count = 0 for task in tasks: if task[0] >= last_end_time: last_end_time = task[1] max_count += 1 return max_count # Testing the function with a set of tasks tasks = [(1, 3), (2, 4), (3, 5), (7, 8), (5, 7)] print(max_non_overlapping_tasks(tasks)) ``` The above example should return `3`, as the maximum number of non-overlapping tasks that can be chosen is 3 (tasks (1, 3), (5, 7), and (7, 8)).","solution":"def max_non_overlapping_tasks(tasks): Determine the maximum number of non-overlapping tasks. Parameters: - tasks (list of tuples): Each tuple represents a task with a start and end time, (start, end). Returns: - int: The maximum number of non-overlapping tasks. if not tasks: return 0 # Sort tasks based on end times tasks = sorted(tasks, key=lambda x: x[1]) # The end time of the last added task to the optimal schedule last_end_time = float(\'-inf\') # Count of maximum non-overlapping tasks max_count = 0 for task in tasks: if task[0] >= last_end_time: last_end_time = task[1] max_count += 1 return max_count"},{"question":"In this problem, you are tasked with writing a function that separates a list of integers into two lists: one containing the prime numbers and the other containing the non-prime numbers. Additionally, sort both lists in ascending order. The function you need to write is named `separate_primes` and it takes a single parameter: - `lst`: a list of integers. The function should: - Identify prime and non-prime numbers in the input list. - Store prime numbers in one list and non-prime numbers in another. - Sort both lists in ascending order. - Return a tuple containing the two sorted lists, with the list of prime numbers as the first element and the list of non-prime numbers as the second element. **Function Signature:** ```python def separate_primes(lst: List[int]) -> Tuple[List[int], List[int]]: ``` **Example:** ```python Example 1: Input: lst = [11, 24, 7, 12, 29, 8] Output: ([7, 11, 29], [8, 12, 24]) Example 2: Input: lst = [10, 15, 20, 21, 22] Output: ([], [10, 15, 20, 21, 22]) ``` **Requirements**: - Implement a helper function to determine if a number is prime. - Ensure that both lists are sorted in ascending order before returning. Implement the `separate_primes` function to achieve the desired functionality.","solution":"from typing import List, Tuple def is_prime(n: int) -> bool: Returns True if the number n is prime, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def separate_primes(lst: List[int]) -> Tuple[List[int], List[int]]: Separates a list of integers into two lists: one containing the prime numbers and the other containing the non-prime numbers, and sorts both lists in ascending order. prime_numbers = [] non_prime_numbers = [] for number in lst: if is_prime(number): prime_numbers.append(number) else: non_prime_numbers.append(number) prime_numbers.sort() non_prime_numbers.sort() return prime_numbers, non_prime_numbers"},{"question":"Implement a function `find_prime_factors` that calculates and returns the prime factors of a given positive integer. The function should: 1. Take a single argument: - `n`: an integer greater than 1 whose prime factors are to be found. 2. Use an efficient method to determine the prime factors of the given integer (e.g., trial division). 3. Return a list of the prime factors in ascending order. Each prime factor should appear as many times as it divides the number. The goal is to understand the basic algorithm to determine prime factors and manipulate lists. **Example Input:** ```python n = 84 prime_factors = find_prime_factors(n) print(prime_factors) # Output: [2, 2, 3, 7] ``` **Example Input:** ```python n = 29 prime_factors = find_prime_factors(n) print(prime_factors) # Output: [29] # \'29\' is a prime number itself ``` Note: Ensure the implementation supports edge cases like very large numbers efficiently.","solution":"def find_prime_factors(n): Returns a list of prime factors of the given integer n in ascending order. if n <= 1: raise ValueError(\\"Input should be greater than 1\\") prime_factors = [] # Divide by 2 until n is odd while n % 2 == 0: prime_factors.append(2) n //= 2 # Check for all odd factors from 3 onward factor = 3 while factor * factor <= n: while n % factor == 0: prime_factors.append(factor) n //= factor factor += 2 # If n is still greater than 1, it must be prime if n > 1: prime_factors.append(n) return prime_factors"},{"question":"You are required to write a Python function named `replace_word_in_files` that performs the following tasks: 1. The function should take three arguments: - `directory` (default is `None`), a string, which specifies the directory to process. If `None`, the current working directory is used. - `target_word`, a string, which specifies the word in the files that needs to be replaced. - `replacement_word`, a string, which specifies the word to replace `target_word`. 2. If a `directory` is provided, change the working directory to the specified directory. If no directory is provided, work in the current working directory. 3. List all `.txt` files in the specified directory. 4. For each `.txt` file, replace all occurrences of `target_word` with `replacement_word`. 5. Save the modified content back to the same file. 6. Print the name of each file that gets modified in the format: \\"Modified <filename>\\". You are required to use the `os` module\'s functions: `os.listdir`, `os.getcwd`, `os.chdir`, and file handling functions such as `open` for file reading and writing.","solution":"import os def replace_word_in_files(directory=None, target_word=\'\', replacement_word=\'\'): Replaces all occurrences of target_word with replacement_word in all .txt files in the specified directory. If no directory is specified, the current working directory is used. if directory: os.chdir(directory) current_directory = os.getcwd() for filename in os.listdir(current_directory): if filename.endswith(\'.txt\'): with open(filename, \'r\') as file: content = file.read() if target_word in content: new_content = content.replace(target_word, replacement_word) with open(filename, \'w\') as file: file.write(new_content) print(f\\"Modified {filename}\\")"},{"question":"Create a function named `summarize_student_scores(data)`, which takes a single argument, `data`, a list of dictionaries. Each dictionary represents a student\'s scores and is structured as follows: ```python { \\"name\\": \\"student_name\\", # The name of the student (str) \\"scores\\": [subject_scores] # A list of integers representing the student\'s scores in various subjects } ``` Your task is to: 1. Calculate the average score for each student. 2. Identify the student with the highest average score. 3. Return a dictionary with the names of the students as the keys and their average scores as the values, along with the name of the student with the highest average score. # Requirements: - **Function Name**: `summarize_student_scores` - **Input**: - `data` (list): A list of dictionaries, each containing a student\'s name and scores. - **Output**: - (dict): A dictionary where the keys are student names and the values are their average scores, along with a special key `\'top_student\'` whose value is the name of the student with the highest average score. - **Operations**: - Compute the average score for each student. - Determine the student with the highest average score. - Return the summarized data including top student information. # Example: ```python students_data = [ {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 82]}, {\\"name\\": \\"Bob\\", \\"scores\\": [79, 88, 91]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [92, 93, 88]} ] result = summarize_student_scores(students_data) print(result) # Output: # { # \\"Alice\\": 85.67, # \\"Bob\\": 86.0, # \\"Charlie\\": 91.0, # \\"top_student\\": \\"Charlie\\" # } ``` # Notes: - Use built-in Python functions to calculate averages. - Assume the list of scores for each student is not empty and contains valid integers. - If there are multiple students with the highest average score, return any one of them as the `\'top_student\'`.","solution":"def summarize_student_scores(data): Calculate the average score for each student and identify the student with the highest average score. Args: data (list): A list of dictionaries, each containing a student\'s name and scores. Returns: dict: A dictionary with student names as keys and their average scores as values, along with a \'top_student\' key for the highest average scorer. result = {} highest_avg = float(\'-inf\') top_student = None for student in data: name = student[\'name\'] scores = student[\'scores\'] average_score = sum(scores) / len(scores) result[name] = round(average_score, 2) # rounding to 2 decimal places for better readability if average_score > highest_avg: highest_avg = average_score top_student = name result[\'top_student\'] = top_student return result"},{"question":"** Imagine you are working on a project that involves handling dates and calculating differences between them. You are required to create a function `days_between_dates` that takes two date strings in the format \'YYYY-MM-DD\' and returns the number of days between these two dates. To accomplish this, you will use Python\'s `datetime` module. Below are the specifications: 1. **Function Name**: `days_between_dates` 2. **Input**: Two string parameters `date1` and `date2`, each representing a date in the \'YYYY-MM-DD\' format. 3. **Output**: An integer representing the number of days between `date1` and `date2`. The result should always be a positive number regardless of the order of the input dates. If either date string is invalid, the function should raise a `ValueError` with an appropriate message. **Examples**: ```python days_between_dates(\'2023-10-01\', \'2023-10-20\') # Output: 19 days_between_dates(\'2023-10-20\', \'2023-10-01\') # Output: 19 days_between_dates(\'2023-10-01\', \'2023-10-01\') # Output: 0 days_between_dates(\'invalid-date\', \'2023-10-01\') # Raises ValueError ``` Here is the skeleton of the function you need to implement: ```python def days_between_dates(date1, date2): pass ``` **","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates in \'YYYY-MM-DD\' format. Parameters: date1 (str): First date string in \'YYYY-MM-DD\' format. date2 (str): Second date string in \'YYYY-MM-DD\' format. Returns: int: Number of days between the two dates. Raises: ValueError: If either date string is invalid. try: d1 = datetime.strptime(date1, \'%Y-%m-%d\') d2 = datetime.strptime(date2, \'%Y-%m-%d\') except ValueError as e: raise ValueError(\\"Invalid date format\\") from e delta = abs((d2 - d1).days) return delta"},{"question":"Determine the k-th largest element in an unsorted list. This function should use a heap data structure for optimal performance. The function must handle common edge cases, such as when the given list is empty or when k is out of range. The function should raise appropriate exceptions for these cases: - ValueError: If the input list is empty. - IndexError: If k is out of the acceptable range (1 <= k <= len(list)). The function should output: int: The k-th largest element in the list. You should write self-contained code starting with: ``` import heapq def find_kth_largest(lst, k): ```","solution":"import heapq def find_kth_largest(lst, k): Finds the k-th largest element in an unsorted list using a heap. :param lst: List of elements :param k: The k-th position to find the largest element :return: The k-th largest element :raises ValueError: If the input list is empty :raises IndexError: If k is out of range if not lst: raise ValueError(\\"The input list is empty\\") if k < 1 or k > len(lst): raise IndexError(\\"k is out of range\\") return heapq.nlargest(k, lst)[-1]"},{"question":"Write a program that takes a list of integers and a target integer as input, and outputs all unique pairs of integers from the list that sum up to the target value. The output should be a list of tuples, each containing a pair of integers that add up to the target. Ensure that each pair is unique and that the order of the pairs in the output list corresponds to the order in which they appear in the input list. You should write self-contained code starting with: ``` def find_pairs(nums, target): ```","solution":"def find_pairs(nums, target): Returns a list of unique pairs of integers from nums that add up to the target integer. seen = set() pairs = set() for number in nums: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return list(pairs)"},{"question":"In this problem, you are tasked with creating a function that visualizes the average monthly temperatures over a year using the Matplotlib library in Python. You need to implement a function named `plot_monthly_temperatures`. This function will accept two parameters: - `months`: A list of strings containing the names of the months in a year. - `temperatures`: A list of integers or floats representing the average monthly temperatures corresponding to each month given in the `months` list. Your goal is to plot a bar chart using Matplotlib, ensuring the following requirements are met: 1. The title of the plot should be \\"Average Monthly Temperatures\\". 2. The x-axis should be labeled as \\"Month\\". 3. The y-axis should be labeled as \\"Temperature (°C)\\". 4. Each bar should be colored green. 5. The y-axis range should be set automatically to fit the data, but the x-axis should display all month names correctly. 6. A grid should be visible only on the y-axis. 7. Display the plot using `plt.show()`. The function signature should be: ```python def plot_monthly_temperatures(months: list[str], temperatures: list[float]) -> None: ``` You must import and use the following Matplotlib functions in your implementation: - `matplotlib.pyplot.bar` - `matplotlib.pyplot.grid` - `matplotlib.pyplot.show` Here is an example of how the `plot_monthly_temperatures` function should be used: ```python months = [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\'] temperatures = [5.0, 6.3, 10.0, 13.5, 18.0, 21.5, 24.0, 24.5, 20.0, 15.0, 10.5, 6.0] plot_monthly_temperatures(months, temperatures) ``` Ensure your function works correctly with different input lists of the same length. Do not perform any input validation; you can assume the input is well-formed.","solution":"import matplotlib.pyplot as plt def plot_monthly_temperatures(months, temperatures): Plots the average monthly temperatures using Matplotlib. Args: - months (list of str): List containing the names of the months. - temperatures (list of float): List containing the average temperatures for each month. plt.bar(months, temperatures, color=\'green\') plt.title(\\"Average Monthly Temperatures\\") plt.xlabel(\\"Month\\") plt.ylabel(\\"Temperature (°C)\\") plt.grid(axis=\'y\') plt.show()"},{"question":"You are provided with a list of integers, and you need to find the maximum sum of a contiguous subarray within this list. Implement a function called `max_subarray_sum(arr)` that computes this using Kadane’s algorithm. Your function should: 1. Take a list of integers `arr` as input. 2. Initialize two variables, `max_current` and `max_global`. Set both to the first element of the array. 3. Iterate through each element of the array starting from the second element. 4. Update `max_current` to be the maximum of the current element itself and the sum of `max_current` and the current element. 5. If `max_current` is greater than `max_global`, update `max_global` to be `max_current`. 6. Return the value of `max_global`, which represents the largest sum of the contiguous subarray. Assume the input list `arr` has at least one element and contains both positive and negative integers. Python’s built-in `max` function is essential for this task.","solution":"def max_subarray_sum(arr): Find the maximum sum of a contiguous subarray using Kadane’s algorithm. Parameters: arr (list of int): A list of integers. Returns: int: The maximum sum of a contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are asked to write a function that manages a collection of employees\' data stored in a JSON file. The function should be able to search for employees by their ID, add new employees if they do not already exist, and update the JSON file accordingly. Use the `json` module to handle the JSON operations. The input JSON file, named `employees.json`, contains a list of dictionaries, each representing an employee with the following keys: - \\"id\\" (integer): The employee\'s ID. - \\"name\\" (string): The employee\'s name. - \\"department\\" (string): The department the employee works in. Here are the specific steps your function should perform: 1. Read the JSON file into a Python list of dictionaries. 2. Continuously prompt the user to enter an employee ID. 3. Check if the entered ID exists in the list of dictionaries. 4. If the ID is found, print the corresponding employee\'s details. 5. If the ID is not found, print a message indicating that the employee was not found and prompt the user to decide whether to add a new employee. 6. If the user chooses to add a new employee, prompt for the employee\'s name and department, then append it to the list of employees. 7. Save the updated list of employees back to the JSON file. Write a function named `manage_employees()` that implements this logic. Function Signature: ```python def manage_employees() -> None: pass ``` You need to ensure the function performs the mentioned operations using appropriate methods to handle reading from and writing to the JSON file.","solution":"import json def manage_employees() -> None: try: # Read the existing employees data from the JSON file with open(\'employees.json\', \'r\') as file: employees = json.load(file) except FileNotFoundError: # If the file does not exist, start with an empty list employees = [] while True: # Prompt the user for an employee ID employee_id = input(\\"Enter employee ID (or \'exit\' to quit): \\") if employee_id.lower() == \'exit\': break try: employee_id = int(employee_id) except ValueError: print(\\"Invalid ID format. Please enter a valid integer.\\") continue # Check if the employee exists employee = next((emp for emp in employees if emp[\'id\'] == employee_id), None) if employee: # If employee exists, print details print(f\\"Employee found: {employee}\\") else: # If employee does not exist print(\\"Employee not found!\\") add_employee = input(\\"Would you like to add a new employee? (yes/no): \\").strip().lower() if add_employee == \'yes\': name = input(\\"Enter the employee\'s name: \\").strip() department = input(\\"Enter the employee\'s department: \\").strip() new_employee = { \\"id\\": employee_id, \\"name\\": name, \\"department\\": department } employees.append(new_employee) print(\\"New employee added.\\") # Save the updated list back to the JSON file with open(\'employees.json\', \'w\') as file: json.dump(employees, file, indent=4)"},{"question":"Implement an algorithm that visualizes a 3D surface plot representing a mathematical function. The function should generate a mesh grid, compute the corresponding function values, and create a 3D plot. This teaches how to use NumPy for mathematical computation, Matplotlib for 3D visualization, and some basic 3D plotting features. The function should output with: ``` matplotlib.figure.Figure: The 3D plot illustrating the surface of the mathematical function. ``` You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D def plot_3d_surface(func, x_range=(-5, 5), y_range=(-5, 5), num_points=100): Generate and plot a 3D surface plot for the given mathematical function. Parameters: func (callable): A function that takes two NumPy arrays (X, Y) and computes Z. x_range (tuple): The range of x-axis values (min, max). y_range (tuple): The range of y-axis values (min, max). num_points (int): The number of points to compute in each dimension. Returns: matplotlib.figure.Figure: The 3D plot illustrating the surface of the mathematical function. # Generate mesh grid x = np.linspace(x_range[0], x_range[1], num_points) y = np.linspace(y_range[0], y_range[1], num_points) X, Y = np.meshgrid(x, y) # Compute Z values Z = func(X, Y) # Create a 3D figure fig = plt.figure() ax = fig.add_subplot(111, projection=\'3d\') # Plot the surface ax.plot_surface(X, Y, Z, cmap=\'viridis\') # Set labels ax.set_xlabel(\'X axis\') ax.set_ylabel(\'Y axis\') ax.set_zlabel(\'Z axis\') # Show the plot plt.tight_layout() plt.show() return fig # Example usage: if __name__ == \\"__main__\\": def example_func(X, Y): return np.sin(np.sqrt(X**2 + Y**2)) plot_3d_surface(example_func) ```","solution":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D def plot_3d_surface(func, x_range=(-5, 5), y_range=(-5, 5), num_points=100): Generate and plot a 3D surface plot for the given mathematical function. Parameters: func (callable): A function that takes two NumPy arrays (X, Y) and computes Z. x_range (tuple): The range of x-axis values (min, max). y_range (tuple): The range of y-axis values (min, max). num_points (int): The number of points to compute in each dimension. Returns: matplotlib.figure.Figure: The 3D plot illustrating the surface of the mathematical function. # Generate mesh grid x = np.linspace(x_range[0], x_range[1], num_points) y = np.linspace(y_range[0], y_range[1], num_points) X, Y = np.meshgrid(x, y) # Compute Z values Z = func(X, Y) # Create a 3D figure fig = plt.figure() ax = fig.add_subplot(111, projection=\'3d\') # Plot the surface ax.plot_surface(X, Y, Z, cmap=\'viridis\') # Set labels ax.set_xlabel(\'X axis\') ax.set_ylabel(\'Y axis\') ax.set_zlabel(\'Z axis\') # Show the plot plt.tight_layout() plt.show() return fig # Example usage: if __name__ == \\"__main__\\": def example_func(X, Y): return np.sin(np.sqrt(X**2 + Y**2)) plot_3d_surface(example_func)"},{"question":"**Context:** You are given a list of English words, and asked to find pairs of words that are anagrams of each other. An anagram pair consists of two words made from the same characters in different orders. Your goal is to create a function that identifies and groups all anagram pairs in the list. **Objective:** Write a Python function named `find_anagram_pairs` which takes in one parameter: 1. `words` (a list of strings) - This is the list of words among which you need to find anagram pairs. Your task is to: 1. Identify all pairs of words in the list that are anagrams of each other. 2. Return a list of tuples, where each tuple contains a pair of anagram words. **Function Signature:** ```python def find_anagram_pairs(words: List[str]) -> List[Tuple[str, str]]: pass ``` **Input:** - `words`: A list of strings with each string having a length of up to 100 characters. The list length will not exceed 1000 words. **Output:** - A list of tuples, where each tuple contains a pair of anagram words. **Example:** ```python input_list = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goo\\", \\"log\\", \\"gle\\"] output = find_anagram_pairs(input_list) ``` Expected Output: ```python [(\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), (\\"silent\\", \\"enlist\\")] ``` **Note:** - The order of pairs in the output does not matter. - Anagram pairs should not include duplicate tuples (e.g., both (\\"listen\\", \\"silent\\") and (\\"silent\\", \\"listen\\") are not required; one of them is enough). - Each word in the input list can be part of multiple anagram pairs.","solution":"from typing import List, Tuple def find_anagram_pairs(words: List[str]) -> List[Tuple[str, str]]: from collections import defaultdict # Dictionary to hold sorted word as key and list of words as values anagram_map = defaultdict(list) # Sort each word and store it in the map for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) # List to hold the anagram pairs result = [] for anagram_group in anagram_map.values(): if len(anagram_group) > 1: # For each combination of words in the group for i in range(len(anagram_group)): for j in range(i + 1, len(anagram_group)): result.append((anagram_group[i], anagram_group[j])) return result"},{"question":"You are required to develop a function `filter_top_students(records, passing_score)` that filters out the top students from a list of student records based on a given minimum passing score. Each student record comprises a student\'s name and their score in a subject. The function should: 1. Accept a list of student records (each record is a tuple containing a student\'s name and their score) and an integer `passing_score`. 2. Create a new list containing only the students who have scored equal to or higher than the `passing_score`. 3. Sort this new list in descending order of their scores. In case of a tie in scores, sort those students alphabetically by their names. 4. Write the sorted list into a text file named \'top_students.txt\'. The output format for each line in the file should be: `name: score`. An example: ```python records = [ (\\"John Doe\\", 85), (\\"Jane Doe\\", 92), (\\"Emily Davis\\", 78), (\\"Michael Brown\\", 92), (\\"Anne Clark\\", 65) ] passing_score = 80 filter_top_students(records, passing_score) ``` This should produce a file \'top_students.txt\' with the following content: ``` Jane Doe: 92 Michael Brown: 92 John Doe: 85 ``` # Constraints: - Each student\'s name is a string consisting of letters and possibly spaces. - Each student\'s score is an integer between 0 and 100. - The `passing_score` is an integer between 0 and 100. - The input list `records` can contain between 1 and 1000 student records. Implement the `filter_top_students(records, passing_score)` function to achieve the above functionality.","solution":"def filter_top_students(records, passing_score): Filters out the top students from a list of student records based on a given minimum passing score, sorts them in descending order of their scores, and writes the sorted list to a text file. Parameters: records (list of tuple): List of student records where each record is a tuple (name, score) passing_score (int): Minimum score to pass Returns: None # Filter students who passed passed_students = [record for record in records if record[1] >= passing_score] # Sort students first by score in descending order, then by name in ascending order sorted_students = sorted(passed_students, key=lambda x: (-x[1], x[0])) # Write to file with open(\\"top_students.txt\\", \\"w\\") as file: for name, score in sorted_students: file.write(f\\"{name}: {score}n\\")"},{"question":"Write a function that takes in a list of user logs, each containing a user\'s ID and their action timestamp, and returns a list of tuples representing each user ID and the total number of actions performed by that user. Use dictionaries and collections to manage and aggregate the log data. The function should output: list: A list of tuples where each tuple contains a user ID and the corresponding total number of actions performed by that user. You should write self-contained code starting with: ```python import collections def count_user_actions(user_logs): ``` The `user_logs` parameter will be a list of tuples: - `user_logs` (list of tuples): Each tuple contains a user ID (string) and an action timestamp (string in \'YYYY-MM-DD HH:MM:SS\' format). Example Usage: ```python logs = [ (\'user1\', \'2023-10-01 08:30:00\'), (\'user2\', \'2023-10-01 08:35:00\'), (\'user1\', \'2023-10-01 08:40:00\'), (\'user3\', \'2023-10-01 08:50:00\'), (\'user2\', \'2023-10-01 08:55:00\') ] print(count_user_actions(logs)) ``` Expected Output: ```python [(\'user1\', 2), (\'user2\', 2), (\'user3\', 1)] ```","solution":"import collections def count_user_actions(user_logs): Aggregates the total count of actions performed by each user. Parameters: user_logs (list of tuples): Each tuple contains a user ID (string) and an action timestamp (string). Returns: list: A list of tuples where each tuple contains a user ID and the corresponding total number of actions performed by that user. action_count = collections.defaultdict(int) for user_id, action_time in user_logs: action_count[user_id] += 1 return list(action_count.items())"},{"question":"You are given a data file named `temperature_readings.csv` which contains temperature readings from various cities taken over multiple dates. The file has columns `City`, `Date`, and `Temperature`. Your task is to write a function named `average_temperature_by_city_and_month` that reads the CSV file using the `pandas` library, processes the data to calculate the average monthly temperature for each city, and returns a `DataFrame` where the index is the city names and the columns are the months (formatted as \'YYYY-MM\'). The steps for processing are as follows: 1. Read the CSV file into a `DataFrame`. 2. Convert the \'Date\' column to a datetime object. 3. Create a new column \'YearMonth\' that combines the year and month from the \'Date\' column. 4. Group the data by \'City\' and \'YearMonth\'. 5. Calculate the average temperature for each group. 6. Pivot the table such that the index is the city names and the columns are the \'YearMonth\' values. 7. Return the processed `DataFrame`. Function Signature: ```python import pandas as pd def average_temperature_by_city_and_month(file_path: str) -> pd.DataFrame: # Your code here pass ``` **Example:** Assuming the CSV file contains the following rows: ```csv City,Date,Temperature Austin,2021-09-01,85.3 Austin,2021-09-15,88.1 Austin,2021-10-01,78.4 Dallas,2021-09-05,90.5 Dallas,2021-10-02,75.2 ``` The function `average_temperature_by_city_and_month(\'temperature_readings.csv\')` should return a DataFrame that looks like: ``` YearMonth 2021-09 2021-10 City Austin 86.7 78.4 Dallas 90.5 75.2 ```","solution":"import pandas as pd def average_temperature_by_city_and_month(file_path: str) -> pd.DataFrame: # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Convert the \'Date\' column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Create a new column \'YearMonth\' that combines the year and month from the \'Date\' column df[\'YearMonth\'] = df[\'Date\'].dt.to_period(\'M\') # Group the data by \'City\' and \'YearMonth\', then calculate the average temperature grouped = df.groupby([\'City\', \'YearMonth\'])[\'Temperature\'].mean().reset_index() # Pivot the table to have \'City\' as index and \'YearMonth\' as columns pivot_table = grouped.pivot(index=\'City\', columns=\'YearMonth\', values=\'Temperature\') # Convert the period index of the columns to string format \'YYYY-MM\' pivot_table.columns = pivot_table.columns.astype(str) return pivot_table"},{"question":"You are required to write a Python function `merge_and_sort_dicts` that combines and sorts a list of dictionaries based on a given key. This function will merge the dictionaries into a single dictionary while ensuring that the values from dictionaries with the same keys are concatenated into a list, then sorted alphabetically/numerically. The function will take the following parameters: - `dicts`: List of dictionaries to be merged. - `sort_key`: The key name that will be used to sort the values in the merged dictionary. The function should return a dictionary where: - The keys are the unique keys from all dictionaries in the input list. - The values are lists of values from the original dictionaries, sorted according to the values of `sort_key`. For example, if you have the following input: ```python dicts = [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Alice\\", \\"age\\": 35}, {\\"name\\": \\"Charlie\\", \\"age\\": 25} ] ``` and the `sort_key` is `\\"name\\"`, the function should merge and sort the dictionaries into: ```python { \\"name\\": [\\"Alice\\", \\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"age\\": [30, 35, 25, 25] } ``` Here’s what you need to do: 1. Define the function `merge_and_sort_dicts`. 2. Merge the dictionaries such that values of identical keys are concatenated into lists. 3. Sort the values based on the `sort_key`. 4. Return the resulting merged and sorted dictionary. Write your implementation of the function in Python.","solution":"def merge_and_sort_dicts(dicts, sort_key): Merges and sorts a list of dictionaries based on a given key. Parameters: - dicts: List of dictionaries to be merged. - sort_key: The key name that will be used to sort the values in the merged dictionary. Returns: - A dictionary where keys are the unique keys from all dictionaries in the input list, and values are lists of values from the original dictionaries, sorted according to the values of `sort_key`. # Initialize the merged dictionary merged_dict = {} # Merge dictionaries while concatenating values for same keys for dictionary in dicts: for key, value in dictionary.items(): if key in merged_dict: merged_dict[key].append(value) else: merged_dict[key] = [value] # Sort the merged dictionary based on the sort_key values if sort_key in merged_dict: sort_order = merged_dict[sort_key] for key in merged_dict: merged_dict[key] = [value for _, value in sorted(zip(sort_order, merged_dict[key]))] return merged_dict"},{"question":"# Analyzing Stock Prices with NumPy NumPy is a fundamental package for scientific computing with Python, often utilized in data analysis and manipulation tasks. In this exercise, you will use NumPy to analyze and compare stock prices over a week, demonstrating how to perform vectorized operations on arrays. # Function Specification 1. **Function Name:** `compare_stock_prices` 2. **Input Parameters:** - `prices_A` (list of floats): A list of stock prices (closing prices) for company A over five consecutive days. - `prices_B` (list of floats): A list of stock prices (closing prices) for company B over the same five consecutive days. 3. **Output:** - Return a dictionary with two keys: - `\'difference\'`: A list representing the day-wise difference in stock prices between company A and company B (prices_A - prices_B). - `\'higher_days\'`: An integer representing the number of days where the stock price of company A was higher than that of company B. # Steps: 1. Convert the input lists to NumPy arrays. 2. Calculate the day-wise differences in stock prices between company A and company B. 3. Determine the number of days when company A\'s stock price was higher than company B\'s. # Example: ```python prices_A = [150.0, 152.5, 153.0, 151.0, 154.0] prices_B = [149.0, 151.0, 153.5, 150.0, 155.0] result = compare_stock_prices(prices_A, prices_B) print(result) # Expected output: {\'difference\': [1.0, 1.5, -0.5, 1.0, -1.0], \'higher_days\': 3} ``` # **Requirements:** - Use the NumPy library, specifically `numpy.array` and vectorized operations.","solution":"import numpy as np def compare_stock_prices(prices_A, prices_B): Compares the stock prices of two companies over a five-day period. Parameters: - prices_A (list of floats): Stock prices for company A. - prices_B (list of floats): Stock prices for company B. Returns: - Dictionary with keys \'difference\' and \'higher_days\'. \'difference\' is a list of differences between company A and B day-wise. \'higher_days\' is the number of days company A\'s stock was higher than company B\'s. # Convert lists to numpy arrays np_prices_A = np.array(prices_A) np_prices_B = np.array(prices_B) # Calculate day-wise differences diff = np_prices_A - np_prices_B # Calculate the number of days company A\'s stock prices were higher than company B\'s higher_days = np.sum(np_prices_A > np_prices_B) # Return the results in a dictionary return { \'difference\': diff.tolist(), \'higher_days\': int(higher_days) }"},{"question":"Write a function called `analyze_temperature_data` that takes a JSON file as input, which contains temperature readings of a city recorded over a year. The function should process the data to provide insights, such as the average, highest, and lowest temperatures for each month. Here\'s what the function is expected to perform: 1. Load the temperature data from the JSON file into a dictionary. 2. Parse the temperature readings which are stored under the \'temperatures\' key. 3. For each month, calculate the average temperature, the highest temperature, and the lowest temperature. 4. Return a nested dictionary where each key is a month and the value is another dictionary containing the \'average\', \'highest\', and \'lowest\' temperatures for that month. Requirements: - The function should be named `analyze_temperature_data`. - The function should accept one parameter: - `file_path`: a string representing the path to the JSON file. - The function should return a dictionary with the following structure: ```python { \'January\': {\'average\': avg_temp, \'highest\': high_temp, \'lowest\': low_temp}, \'February\': {\'average\': avg_temp, \'highest\': high_temp, \'lowest\': low_temp}, ... } ``` Example JSON structure: ```json { \\"temperatures\\": { \\"January\\": [30, 35, 28, 40, 45, 32], \\"February\\": [32, 30, 28, 45, 50, 35], ... } } ``` Example: ```python temperature_insights = analyze_temperature_data(\'city_temperatures.json\') ``` This would return a dictionary with the average, highest, and lowest temperatures for each month based on the data in \'city_temperatures.json\'.","solution":"import json def analyze_temperature_data(file_path): Analyzes temperature data from a JSON file and returns insights for each month. Args: file_path (str): Path to the JSON file containing temperature data. Returns: dict: A dictionary with average, highest, and lowest temperatures for each month. with open(file_path, \'r\') as f: data = json.load(f) temperature_data = data[\'temperatures\'] insights = {} for month, temperatures in temperature_data.items(): avg_temp = sum(temperatures) / len(temperatures) high_temp = max(temperatures) low_temp = min(temperatures) insights[month] = { \'average\': avg_temp, \'highest\': high_temp, \'lowest\': low_temp } return insights"},{"question":"You are given a string of lowercase English letters, and you need to find the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. Write a function `longest_unique_substr(s)` that: - Takes a single argument `s`, a string of lowercase English letters. - Returns an integer representing the length of the longest substring without repeating characters. Use a sliding window approach to solve this problem efficiently. Here is the function signature: ```python def longest_unique_substr(s): # Your code here ``` Example usage: ```python s = \\"abcabcbb\\" length = longest_unique_substr(s) print(\\"Length of the longest substring without repeating characters:\\", length) ``` Output: ``` Length of the longest substring without repeating characters: 3 ``` Explanation: The answer is \\"abc\\", with the length of 3. Example usage: ```python s = \\"bbbbb\\" length = longest_unique_substr(s) print(\\"Length of the longest substring without repeating characters:\\", length) ``` Output: ``` Length of the longest substring without repeating characters: 1 ``` Explanation: The answer is \\"b\\", with the length of 1. Example usage: ```python s = \\"pwwkew\\" length = longest_unique_substr(s) print(\\"Length of the longest substring without repeating characters:\\", length) ``` Output: ``` Length of the longest substring without repeating characters: 3 ``` Explanation: The answer is \\"wke\\", with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substr(s): Returns the length of the longest substring without repeating characters. Uses a sliding window approach. n = len(s) if n == 0: return 0 max_length = 0 left = 0 char_map = {} for right in range(n): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are required to create a Python function named `find_optimal_knn_k` that determines the optimal value of `k` for a k-Nearest Neighbors classifier based on accuracy. The function should use the scikit-learn library to conduct this evaluation. The function signature is as follows: ```python def find_optimal_knn_k(X_train, y_train, X_test, y_test, k_values): Determine the optimal value of k for a k-Nearest Neighbors classifier based on accuracy. Parameters: X_train (array-like): Training data. y_train (array-like): Training target values. X_test (array-like): Test data. y_test (array-like): Test target values. k_values (list of int): List of k values to evaluate. Returns: optimal_k (int): The value of k with the highest accuracy on the test set. accuracy_scores (dict): Dictionary with k values as keys and corresponding accuracy scores as values. # Your implementation here ``` # Requirements: - Utilize the k-Nearest Neighbors (KNN) algorithm from scikit-learn. - For each value of `k` in `k_values`, train a KNN model using `X_train` and `y_train`, and evaluate its accuracy on `X_test` and `y_test`. - Identify the `k` value that results in the highest accuracy on the test set. - Return the optimal `k` and a dictionary where keys are k values and values are the corresponding accuracy scores. # Libraries to be used: - `sklearn.neighbors.KNeighborsClassifier` - `sklearn.metrics.accuracy_score` # Data: - `X_train`: An array-like object containing the training input data. - `y_train`: An array-like object containing the training target values. - `X_test`: An array-like object containing the test input data. - `y_test`: An array-like object containing the test target values. - `k_values`: A list of integers representing the k values to evaluate for the KNN model. # Example Usage: ```python import numpy as np from sklearn.model_selection import train_test_split from sklearn.datasets import load_iris # Load dataset data = load_iris() X, y = data.data, data.target # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # List of k values to evaluate k_values = [1, 3, 5, 7, 9] optimal_k, accuracy_scores = find_optimal_knn_k(X_train, y_train, X_test, y_test, k_values) print(f\\"Optimal k: {optimal_k}\\") print(f\\"Accuracy scores: {accuracy_scores}\\") ```","solution":"from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score def find_optimal_knn_k(X_train, y_train, X_test, y_test, k_values): Determine the optimal value of k for a k-Nearest Neighbors classifier based on accuracy. Parameters: X_train (array-like): Training data. y_train (array-like): Training target values. X_test (array-like): Test data. y_test (array-like): Test target values. k_values (list of int): List of k values to evaluate. Returns: optimal_k (int): The value of k with the highest accuracy on the test set. accuracy_scores (dict): Dictionary with k values as keys and corresponding accuracy scores as values. accuracy_scores = {} for k in k_values: knn = KNeighborsClassifier(n_neighbors=k) knn.fit(X_train, y_train) y_pred = knn.predict(X_test) accuracy_scores[k] = accuracy_score(y_test, y_pred) optimal_k = max(accuracy_scores, key=accuracy_scores.get) return optimal_k, accuracy_scores"},{"question":"Implement a function `shortest_common_supersequence` that finds the shortest supersequence that contains two input strings `str1` and `str2` as subsequences. A supersequence is a string that contains both `str1` and `str2` as subsequences. The length of this shortest supersequence should be returned. The function signature is as follows: ```python def shortest_common_supersequence(str1, str2): Finds the length of the shortest common supersequence of two strings. Parameters: str1 (str): First input string. str2 (str): Second input string. Returns: int: Length of the shortest supersequence containing both str1 and str2 as subsequences. # Your implementation here ``` # Input - `str1` and `str2` are two strings with lengths up to 1000. # Output - An integer representing the length of the shortest supersequence that contains both `str1` and `str2` as subsequences. # Example Here\'s how the function should work: ```python str1 = \\"abac\\" str2 = \\"cab\\" # Expected output: 5 print(shortest_common_supersequence(str1, str2)) # Output: 5 ``` # Additional Information - The function should use dynamic programming to efficiently find the length of the shortest common supersequence. - Handle edge cases such as empty strings appropriately.","solution":"def shortest_common_supersequence(str1, str2): Finds the length of the shortest common supersequence of two strings. Parameters: str1 (str): First input string. str2 (str): Second input string. Returns: int: Length of the shortest supersequence containing both str1 and str2 as subsequences. m, n = len(str1), len(str2) dp = [[0] * (n+1) for _ in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i-1] == str2[j-1]: dp[i][j] = 1 + dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]) return dp[m][n]"},{"question":"Create a class that models a simple bank account with basic functionalities: deposit, withdraw, and check the balance. Additionally, implement a transaction history feature that keeps track of all operations performed on the account. Functionality: - Allows deposits and updates the balance. - Allows withdrawals as long as they do not exceed the available balance, and updates the balance. - Provides the current account balance. - Maintains a transaction history including the type of operation, amount, and timestamp of each transaction. Ensure: - The class should be named `BankAccount`. - The transaction history should be stored in a pandas DataFrame with columns \\"Date\\", \\"Type\\", and \\"Amount\\". Example usage: ``` account = BankAccount(\'John Doe\', 1000) account.deposit(500) account.withdraw(200) print(account.get_balance()) # Expected Output: 1300 print(account.get_transaction_history()) # Outputs a DataFrame with the history of transactions ``` You should write self-contained code starting with: ``` import pandas as pd from datetime import datetime class BankAccount: def __init__(self, owner, balance=0): ```","solution":"import pandas as pd from datetime import datetime class BankAccount: def __init__(self, owner, balance=0): self.owner = owner self.balance = balance self.transaction_history = pd.DataFrame(columns=[\\"Date\\", \\"Type\\", \\"Amount\\"]) def deposit(self, amount): if amount > 0: self.balance += amount self._add_transaction(\\"Deposit\\", amount) else: raise ValueError(\\"Deposit amount must be positive.\\") def withdraw(self, amount): if amount > 0: if amount <= self.balance: self.balance -= amount self._add_transaction(\\"Withdrawal\\", amount) else: raise ValueError(\\"Withdrawal amount exceeds available balance.\\") else: raise ValueError(\\"Withdrawal amount must be positive.\\") def get_balance(self): return self.balance def get_transaction_history(self): return self.transaction_history def _add_transaction(self, type, amount): date = datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") new_transaction = pd.DataFrame({\\"Date\\": [date], \\"Type\\": [type], \\"Amount\\": [amount]}) self.transaction_history = pd.concat([self.transaction_history, new_transaction], ignore_index=True)"},{"question":"Your task is to write a function named `find_path` that determines if there is a path from the top-left corner to the bottom-right corner of a 2D grid. The grid is represented as a list of lists where 0s represent walkable cells, and 1s represent obstacles that cannot be walked through. The function should use a depth-first search (DFS) algorithm to find if such a path exists. Function Requirements: - **Function Name**: `find_path` - **Parameters**: - `grid` (List[List[int]]): A binary 2D grid of integers. - **Returns**: A boolean value, `True` if a path from the top-left to bottom-right exists, otherwise `False`. Constraints: 1. You can move one step at a time in the four cardinal directions (up, down, left, right). 2. You cannot move diagonally. 3. Moving off the grid boundaries is not allowed. 4. The grid will always have at least one cell. 5. The starting point (top-left) and ending point (bottom-right) will always be walkable cells (0). # Example Usage: ```python grid = [ [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0] ] print(find_path(grid)) # Output: True grid = [ [0, 1, 0], [1, 0, 1], [0, 1, 0] ] print(find_path(grid)) # Output: False ``` # Note: - You can assume that no cells in the grid contain negative values. - Do not use any global variables; all necessary computations should be within the function.","solution":"def find_path(grid): Determines if there is a path from the top-left to the bottom-right in a 2D grid. Uses Depth-First Search to find if such a path exists. Parameters: grid (List[List[int]]): A binary 2D grid where 0 represents walkable cells and 1 represents obstacles. Returns: bool: True if a path exists, otherwise False. def dfs(x, y): # If we\'re out of bounds or hitting an obstacle, return False if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 1: return False # If we\'re at the bottom-right corner, we\'ve found a path if x == len(grid) - 1 and y == len(grid[0]) - 1: return True # Mark the cell as visited (corrupt the grid temporarily to save memory) grid[x][y] = 1 # Explore neighboring cells: right, down, left, up if (dfs(x + 1, y) or dfs(x, y + 1) or dfs(x - 1, y) or dfs(x, y - 1)): return True return False return dfs(0, 0)"},{"question":"Write a function that reads a JSON file which contains nested lists and dictionaries, flattens the structure such that all keys at every nesting level are concatenated with an underscore, and stores the flattened data into a new JSON file. The function should handle exceptions for: FileNotFoundError, if the JSON file path specified does not exist; JSONDecodeError, if the file is not a valid JSON; and TypeError, if the data is not a dictionary. The function should output: ``` str: Path where the flattened JSON file was saved. ``` You should write self-contained code starting with: ``` import json def flatten_json(json_file_path, output_json_path=\'./flattened_data.json\'): ```","solution":"import json from collections.abc import MutableMapping def flatten(dictionary, parent_key=\'\', sep=\'_\'): items = [] for k, v in dictionary.items(): new_key = f\'{parent_key}{sep}{k}\' if parent_key else k if isinstance(v, MutableMapping): items.extend(flatten(v, new_key, sep).items()) elif isinstance(v, list): for idx, item in enumerate(v): items.extend(flatten({f\'{new_key}_{idx}\': item}).items()) else: items.append((new_key, v)) return dict(items) def flatten_json(json_file_path, output_json_path=\'./flattened_data.json\'): try: with open(json_file_path, \'r\') as file: data = json.load(file) if not isinstance(data, dict): raise TypeError(\\"The data is not a dictionary.\\") flattened_data = flatten(data) with open(output_json_path, \'w\') as out_file: json.dump(flattened_data, out_file, indent=4) return output_json_path except FileNotFoundError: return \\"File not found.\\" except json.JSONDecodeError: return \\"Invalid JSON file.\\" except TypeError as e: return str(e)"},{"question":"Create a function that takes a list of dictionaries, each containing details of a book (title, author, year published) and processes it to return a summary DataFrame. The function should generate and return a Pandas DataFrame with columns \'Title\', \'Author\', and \'Published Decade\', where \'Published Decade\' groups the year published into decades (e.g., 1995 -> \'1990s\'). The function should start with: ``` import pandas as pd def process_books(books): ```","solution":"import pandas as pd def process_books(books): Process a list of book dictionaries and return a summary DataFrame. Args: books (list of dict): A list of dictionaries where each dictionary contains \'title\', \'author\', and \'year_published\' keys. Returns: pandas.DataFrame: A DataFrame containing \'Title\', \'Author\', and \'Published Decade\'. processed_books = [] for book in books: title = book[\'title\'] author = book[\'author\'] year = book[\'year_published\'] decade = (year // 10) * 10 published_decade = f\\"{decade}s\\" processed_books.append({ \'Title\': title, \'Author\': author, \'Published Decade\': published_decade }) return pd.DataFrame(processed_books)"},{"question":"Write a function that takes a list of student grades as input and returns the average grade of the class, after dropping the highest and lowest grades. If there are fewer than 3 grades in the list, the function should return 0. The function should output a float representing the average grade. You should write self-contained code starting with: ``` def calculate_average_grade(grades: list[int]) -> float: ```","solution":"def calculate_average_grade(grades: list[int]) -> float: Returns the average grade of the class after dropping the highest and lowest grades. If there are fewer than 3 grades, returns 0. if len(grades) < 3: return 0.0 sorted_grades = sorted(grades) trimmed_grades = sorted_grades[1:-1] # remove the lowest and highest grade average_grade = sum(trimmed_grades) / len(trimmed_grades) return float(average_grade)"},{"question":"You are required to implement a function named `rotate_matrix` that rotates a given NxN 2D matrix 90 degrees clockwise in place. Assume the matrix contains integer values. Function Signature: ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` # Input: - A square matrix `matrix` represented as a list of lists, where each sublist is a row of the matrix. `matrix` contains exactly N sublists, each containing N integers. # Output: - The function should modify the matrix in place, rotating it 90 degrees clockwise. The function does not need to return anything. # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # After rotation, matrix should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints: 1. The input matrix will always be square (NxN). 2. The input matrix will contain only integers. 3. The input matrix will have at least 1 and at most 100 rows/columns. Note: You must perform the rotation in place without using extra space for another matrix (in-place rotation).","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates an NxN matrix 90 degrees clockwise in place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are working on a logging system for a software application, where each log entry consists of a timestamp and a log level (INFO, WARNING, ERROR). Your task is to implement a function `latest_logs_by_level` that retrieves the latest entry for each log level. The function signature should be: ```python def latest_logs_by_level(log_entries): ``` **Function Inputs:** - `log_entries`: A list of tuples where each tuple represents a log entry. Each tuple contains two elements: 1. A string representing the timestamp of the log entry in the format \\"YYYY-MM-DD HH:MM:SS\\". 2. A string representing the log level, which can be \\"INFO\\", \\"WARNING\\", or \\"ERROR\\". **Function Output:** - The function should return a dictionary where the keys are the log levels (\\"INFO\\", \\"WARNING\\", \\"ERROR\\") and the values are the latest log entry for each level, based on the timestamp. **Procedure:** 1. Parse the timestamps of the log entries to find the latest entry for each log level. 2. Create a dictionary to store the latest log entry for each of the log levels. 3. Iterate through the given `log_entries`, updating the dictionary with the latest log entry for each log level. **Example:** ```python log_entries = [ (\\"2023-07-21 10:30:00\\", \\"INFO\\"), (\\"2023-07-21 10:45:00\\", \\"ERROR\\"), (\\"2023-07-21 11:00:00\\", \\"INFO\\"), (\\"2023-07-21 11:15:00\\", \\"WARNING\\"), (\\"2023-07-21 12:00:00\\", \\"ERROR\\") ] print(latest_logs_by_level(log_entries)) # Expected output: # { # \\"INFO\\": (\\"2023-07-21 11:00:00\\", \\"INFO\\"), # \\"WARNING\\": (\\"2023-07-21 11:15:00\\", \\"WARNING\\"), # \\"ERROR\\": (\\"2023-07-21 12:00:00\\", \\"ERROR\\"), # } ```","solution":"def latest_logs_by_level(log_entries): Retrieves the latest log entry for each log level. :param log_entries: List of tuples, where each tuple consists of a timestamp and a log level. :return: Dictionary with log levels as keys and their latest log entry as values. latest_logs = {} for timestamp, level in log_entries: if level not in latest_logs or timestamp > latest_logs[level][0]: latest_logs[level] = (timestamp, level) return latest_logs"},{"question":"You are given a JSON file that contains transaction information for an e-commerce platform. Each transaction in the file includes details such as the transaction id, user id, product id, quantity, and price. Your task is to parse the JSON file and calculate the total revenue generated from each product. Write a function `calculate_revenue(json_filepath)` which takes the following parameter: - `json_filepath`: A string representing the path to the JSON file. The function should return a dictionary where: - The keys are the product ids. - The values are the total revenue generated from each product, rounded to 2 decimal places. The function should: 1. Read the JSON file. 2. Parse the JSON data to extract transaction information. 3. Calculate the total revenue for each product by multiplying the quantity by the price for each transaction and aggregating these values. 4. Use the built-in `json` module for reading and parsing the JSON file. Example JSON file content: ```json [ {\\"transaction_id\\": \\"T1\\", \\"user_id\\": \\"U1\\", \\"product_id\\": \\"P1\\", \\"quantity\\": 2, \\"price\\": 30.00}, {\\"transaction_id\\": \\"T2\\", \\"user_id\\": \\"U2\\", \\"product_id\\": \\"P2\\", \\"quantity\\": 1, \\"price\\": 20.00}, {\\"transaction_id\\": \\"T3\\", \\"user_id\\": \\"U1\\", \\"product_id\\": \\"P1\\", \\"quantity\\": 1, \\"price\\": 30.00} ] ``` Expected output for the above example: ```python { \\"P1\\": 90.00, \\"P2\\": 20.00 } ```","solution":"import json def calculate_revenue(json_filepath): Reads a JSON file, parses transaction information and calculates the total revenue for each product. Parameters: - json_filepath (str): The path to the JSON file. Returns: - dict: A dictionary with product ids as keys and the total revenue for each product as values. with open(json_filepath, \'r\') as file: data = json.load(file) revenue = {} for transaction in data: product_id = transaction[\\"product_id\\"] quantity = transaction[\\"quantity\\"] price = transaction[\\"price\\"] total_price = quantity * price if product_id in revenue: revenue[product_id] += total_price else: revenue[product_id] = total_price # Round the revenues to 2 decimal places for product_id in revenue: revenue[product_id] = round(revenue[product_id], 2) return revenue"},{"question":"In this problem, you will implement a basic text-based calculator that performs arithmetic operations based on user input. This exercise helps to practice handling user input, control flow, and basic arithmetic operations in Python. Your task is to write a function called `calculator` that continuously reads user input to perform arithmetic operations until the user types \'quit\'. The operations supported are addition, subtraction, multiplication, and division. Specifically, you will need to: 1. Read input from the user in the format: `<number1> <operator> <number2>`. 2. Perform the corresponding arithmetic operation based on the operator provided (\'+\', \'-\', \'*\', \'/\'). 3. Print the result of the operation. 4. Continue reading input until the user types \'quit\'. Function Signature: ```python def calculator(): # your code here ``` Ensure that your solution includes: - Reading input from the user using the `input()` function. - Handling the operators \'+\', \'-\', \'*\', and \'/\'. - Implementing a loop that terminates when the user inputs \'quit\'. - Exception handling for division by zero and invalid input formats. # Example of use: ``` Enter operation: 5 + 3 8 Enter operation: 10 * 2 20 Enter operation: 15 / 3 5.0 Enter operation: 20 - 4 16 Enter operation: quit Goodbye! ``` # Important Notes: - Handle division by zero by printing a user-friendly message such as \\"Cannot divide by zero\\". - Print an error message for any invalid input and prompt the user to enter the operation again. - Use a while loop to keep reading input until \'quit\' is entered.","solution":"def calculator(): while True: try: user_input = input(\\"Enter operation: \\") if user_input.lower() == \'quit\': print(\\"Goodbye!\\") break number1, operator, number2 = user_input.split() number1 = float(number1) number2 = float(number2) if operator == \'+\': result = number1 + number2 elif operator == \'-\': result = number1 - number2 elif operator == \'*\': result = number1 * number2 elif operator == \'/\': if number2 == 0: print(\\"Cannot divide by zero\\") continue result = number1 / number2 else: print(\\"Invalid operator\\") continue print(result) except ValueError: print(\\"Invalid input format, please use <number1> <operator> <number2>\\")"},{"question":"You need to implement a custom iterator class that iterates over a dictionary but only returns the values of the dictionary. Additionally, it should have a method to reset the iterator to the beginning. The iterator should support the usual iterator protocol methods (`__iter__()` and `__next__()`). Specifically, you need to: 1. Define a class `ValueIterator` that takes a dictionary as an input during initialization. 2. Implement the `__iter__` and `__next__` methods to make the class usable as an iterator. 3. Implement a method `reset()` that resets the iterator to the start. The newly defined `ValueIterator` class should allow users to loop through dictionary values using a `for` loop or the `next()` function, and reset the iteration when needed. **Class Details:** - **`__init__(self, dictionary)`**: Initializes the iterator with the given dictionary. - **`__iter__(self)`**: Returns the iterator object itself. - **`__next__(self)`**: Returns the next value from the dictionary values or raises `StopIteration` if the end is reached. - **`reset(self)`**: Resets the iterator to the beginning of the dictionary values. **Example Usage:** ```python # Sample dictionary data = {\'a\': 1, \'b\': 2, \'c\': 3} # Creating an instance of ValueIterator value_iter = ValueIterator(data) # Looping through the values for value in value_iter: print(value) # Outputs: 1 2 3 # Resetting the iterator value_iter.reset() # Using the iterator again after reset print(next(value_iter)) # Outputs: 1 print(next(value_iter)) # Outputs: 2 ``` **Requirements:** 1. Implement the `ValueIterator` class with the specified methods. 2. The iterator should properly handle the dictionary values iteration and allow resetting.","solution":"class ValueIterator: def __init__(self, dictionary): self.dictionary = dictionary self.values = list(dictionary.values()) self.index = 0 def __iter__(self): self.index = 0 return self def __next__(self): if self.index < len(self.values): value = self.values[self.index] self.index += 1 return value else: raise StopIteration def reset(self): self.index = 0"},{"question":"You are given a JSON file named `\\"data.json\\"` that contains nested structures of user information. Your task is to create a function called `find_average_age()` that reads and processes this JSON file to compute and return the average age of a specific user group. The user group should be filtered based on a provided `country` and whether they have an `active` status. **Function Signature:** ```python def find_average_age(filepath: str, country: str, active: bool) -> float: ``` **Instructions:** 1. The function `find_average_age(filepath: str, country: str, active: bool) -> float` takes in three arguments: - `filepath` (str): The file path to the JSON file (which you can assume to be `\\"data.json\\"`). - `country` (str): The country to filter the users by. - `active` (bool): The active status to filter the users by. 2. The function should: - Open and read the JSON file. - Parse the JSON data which has the following format: ```json [ {\\"name\\": \\"John Doe\\", \\"age\\": 30, \\"country\\": \\"USA\\", \\"active\\": true}, {\\"name\\": \\"Jane Smith\\", \\"age\\": 25, \\"country\\": \\"USA\\", \\"active\\": false}, ... ] ``` - Filter the users based on the provided `country` and `active` status. - Extract the ages of the filtered users. - Compute the average age of the filtered users. If no users match the criteria, return 0.0. 3. Return the computed average age as a floating-point number. Example usage of the function: ```python average_age = find_average_age(\\"data.json\\", \\"USA\\", True) print(average_age) # Output will be the average age of active users from the USA ``` Ensure your function uses appropriate file handling and JSON parsing techniques to achieve the specified functionality.","solution":"import json def find_average_age(filepath: str, country: str, active: bool) -> float: Reads a JSON file containing user information and computes the average age of users filtered by the specified country and active status. Args: filepath (str): The file path to the JSON file. country (str): The country to filter the users by. active (bool): The active status to filter the users by. Returns: float: The average age of the filtered users. Returns 0.0 if no users match the criteria. with open(filepath, \'r\') as file: data = json.load(file) filtered_users = [user for user in data if user[\'country\'] == country and user[\'active\'] == active] if not filtered_users: return 0.0 total_age = sum(user[\'age\'] for user in filtered_users) average_age = total_age / len(filtered_users) return average_age"},{"question":"You are tasked with developing a small feature for a mapping application. Users need to be able to find the shortest path in a city with intersections and one-way streets from a given starting intersection to a destination. Your task is to implement a function `shortest_path` that takes a 2D list `city_map`, representing the one-way streets between intersections, and two integers, `start` and `destination`, representing the starting and ending intersections, respectively. Each element in `city_map` is a list of three integers `[u, v, w]`, where `u` is the starting intersection, `v` is the ending intersection, and `w` is the weight or distance of the street between them. You should return the length of the shortest path from `start` to `destination` or `-1` if no such path exists. **Function Signature**: ```python def shortest_path(city_map: List[List[int]], start: int, destination: int) -> int: ... ``` # Requirements 1. Assume the intersections are numbered consecutively from `0` to `n-1`, where `n` is the number of unique intersections. 2. Use Dijkstra\'s algorithm to find the shortest path. # Example Given the following input: ```python city_map = [ [0, 1, 2], [0, 2, 4], [1, 2, 1], [1, 3, 7], [2, 3, 3] ] start = 0 destination = 3 ``` Calling `shortest_path(city_map, start, destination)` should return `6` because the shortest path from intersection `0` to intersection `3` is `0 -> 1 -> 2 -> 3` with a total distance of `2 + 1 + 3 = 6`. # Hints 1. Use a priority queue (min-heap) to efficiently get the next intersection with the smallest known distance. 2. Keep track of the shortest known distance to each intersection and update it as you discover shorter paths.","solution":"from typing import List, Tuple import heapq def shortest_path(city_map: List[List[int]], start: int, destination: int) -> int: Returns the length of the shortest path from start to destination or -1 if no path exists. Uses Dijkstra\'s algorithm. # Build the adjacency list graph = {} for u, v, w in city_map: if u not in graph: graph[u] = [] graph[u].append((v, w)) # Use a min-heap to store the (distance, node) min_heap = [(0, start)] # Keep track of the minimum distance to each node distances = {} while min_heap: current_distance, current_node = heapq.heappop(min_heap) # If we have already visited this node with a shorter distance, skip processing if current_node in distances: continue # Record the shortest distance to this node distances[current_node] = current_distance # If we have reached the destination, return the distance if current_node == destination: return current_distance # Check all adjacent nodes if current_node in graph: for neighbor, weight in graph[current_node]: if neighbor not in distances: heapq.heappush(min_heap, (current_distance + weight, neighbor)) # If the destination was never reached, return -1 return -1"},{"question":"You are given a list of integers. Your task is to write a function named `average_of_top_k` that calculates the average of the top `k` highest integers in the list. The function should handle edge cases, such as when the list is empty or when `k` is greater than the number of elements in the list. If there are fewer than `k` elements in the list, the function should return the average of all the elements. Function Signature ```python def average_of_top_k(numbers: list[int], k: int) -> float: ``` Requirements 1. Use built-in Python functions and methods. 2. Do not use any external libraries. 3. Handle edge cases appropriately. Example Given the list of integers: ``` [4, 1, 7, 3, 8, 5] ``` and `k = 3` The top 3 highest integers are: `[8, 7, 5]` The average of these integers is: ``` (8 + 7 + 5) / 3 = 20 / 3 = 6.67 ``` The function should return: `6.67` Additional Test Cases **Test Case 1:** ``` numbers = [1, 2, 3, 4, 5] k = 10 ``` There are fewer than `k` elements in the list, so the average of all elements is: ``` (1 + 2 + 3 + 4 + 5) / 5 = 15 / 5 = 3.0 ``` The function should return: `3.0` **Test Case 2:** ``` numbers = [] k = 3 ``` The list is empty, so the function should return `0.0` **Test Case 3:** ``` numbers = [10] k = 1 ``` The list has one element, so the average of the top 1 highest integer is: ``` 10 ``` The function should return: `10.0`","solution":"def average_of_top_k(numbers: list[int], k: int) -> float: Function to calculate the average of the top k highest integers in the list. If there are fewer than k elements in the list, the function returns the average of all elements. If the list is empty, the function returns 0.0. if not numbers: return 0.0 # Sort the numbers in descending order sorted_numbers = sorted(numbers, reverse=True) # Select the top k elements (if k is greater than the length of the list, select all elements) top_k_numbers = sorted_numbers[:k] # Calculate and return the average of these elements return sum(top_k_numbers) / len(top_k_numbers)"},{"question":"Write a function `find_pair_with_sum` that finds two numbers in a sorted list that add up to a specified target sum. The function should return a tuple containing the indices of the two numbers. If no such pair exists, the function should return `(-1, -1)`. The function should be implemented efficiently with a time complexity of O(n). Here is the function signature: ```python def find_pair_with_sum(arr, target): Find the indices of two numbers in a sorted list that add up to a target sum. Parameters ---------- arr : list A sorted list of integers. target : int The target sum. Returns ------- indices : tuple A tuple containing the indices of the two numbers that add up to the target sum. If no such pair exists, return (-1, -1). ``` **Requirements:** 1. The list `arr` is sorted in ascending order. 2. Use the two-pointer technique to find the pair of numbers efficiently. 3. Return a tuple of zero-based indices of the two numbers that add up to the `target`. 4. If no pair with the given sum exists, return `(-1, -1)`. **Example:** ```python arr = [1, 2, 3, 4, 5, 6, 7] target = 9 indices = find_pair_with_sum(arr, target) print(indices) # Expected output: (1, 6), because arr[1] + arr[6] == 9 ```","solution":"def find_pair_with_sum(arr, target): Find the indices of two numbers in a sorted list that add up to a target sum. Parameters ---------- arr : list A sorted list of integers. target : int The target sum. Returns ------- indices : tuple A tuple containing the indices of the two numbers that add up to the target sum. If no such pair exists, return (-1, -1). left = 0 right = len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return (left, right) elif current_sum < target: left += 1 else: right -= 1 return (-1, -1)"},{"question":"--- Sorting algorithms are fundamental in computer science and software engineering. In this problem, you are tasked with implementing one of the simplest yet efficient sorting techniques for specific scenarios: **Insertion Sort**. This problem will help you understand the mechanics of the algorithm and its application in sorting arrays. **Objective:** Write a function named `insertion_sort` that sorts an array of integers using the insertion sort algorithm. You should not use any built-in sorting functions provided by the programming language. The function should accept one parameter: 1. `arr`: A list of integers to be sorted. The function should return a new list containing the sorted integers. **Example Usage:** ```python sorted_array = insertion_sort([34, 7, 23, 32, 5, 62]) print(sorted_array) # Expected output: [5, 7, 23, 32, 34, 62] ``` **Requirements:** - Focus on implementing the insertion sort logic manually. - The input array should be unsorted. - The output array must contain the numbers in ascending order. **Description of Insertion Sort Algorithm:** - It iterates through the list and grows a sorted zone. - At each iteration, it removes an element from the input data and finds the location it belongs within the sorted zone and inserts it there. - It repeats until no input elements remain. The insertion sort algorithm can be described as: ``` for i = 1 to len(arr): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j = j - 1 arr[j + 1] = key ``` Implement this described sorting mechanism and ensure that your function adheres to the constraints and is efficient for small data sets typically expected with insertion sort.","solution":"def insertion_sort(arr): Sorts an array of integers using the insertion sort algorithm. :param arr: List of integers to be sorted. :return: A new list containing the sorted integers in ascending order. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"You are asked to implement a function named `find_anagrams` that determines if two given strings are anagrams. Two strings are anagrams if one string can be formed by rearranging the letters of the other, using all the original letters exactly once. The function should be case-insensitive and ignore non-alphabetical characters. Your function should accept two parameters: 1. `str1`: A string containing the first word or phrase. 2. `str2`: A string containing the second word or phrase. The function should: 1. Normalize both strings by converting them to lower case and removing non-alphabetical characters. 2. Count the frequency of each character in both normalized strings. 3. Compare the frequency distributions of both strings to determine if they are anagrams. The function should return `True` if the strings are anagrams, and `False` otherwise. **Function Signature:** ```python def find_anagrams(str1, str2): # your code here ``` **Example Usage:** ```python str1 = \\"Listen\\" str2 = \\"Silent\\" result = find_anagrams(str1, str2) print(result) ``` **Expected Output:** ``` True ``` **Additional Example:** ```python str1 = \\"Hello, World!\\" str2 = \\"oWlr! llHo, ed\\" result = find_anagrams(str1, str2) print(result) ``` **Expected Output:** ``` True ``` **Note:** - Your implementation should handle strings with special characters, numbers, and varied casing. - Consider using Python\'s `collections.Counter` for counting character frequencies efficiently.","solution":"import re from collections import Counter def find_anagrams(str1, str2): Determines if two given strings are anagrams, ignoring case and non-alphabetical characters. # Normalize the strings by converting to lower case and removing non-alphabetical characters normalized_str1 = re.sub(r\'[^a-zA-Z]\', \'\', str1).lower() normalized_str2 = re.sub(r\'[^a-zA-Z]\', \'\', str2).lower() # Count the frequency of each character in both normalized strings counter1 = Counter(normalized_str1) counter2 = Counter(normalized_str2) # Compare the frequency distributions of both strings to determine if they are anagrams return counter1 == counter2"},{"question":"You are working with a social media analytics platform that stores user posts in a table named `posts` in a SQLite database. Each record in the `posts` table contains the information about a specific post including the `username`, `post_id`, `content`, `timestamp`, and `likes`. Your task is to analyze the posts to determine which users are the most influential. Write a function named `find_top_influencers(database_path, n)` that performs the following steps: 1. Connect to the SQLite database located at `database_path`. 2. Retrieve all posts from the `posts` table, grouping them by `username`. 3. Calculate the total number of likes for each user. 4. Identify the top `n` users based on the total number of likes. 5. Output a list of `n` tuples where each tuple contains the `username` and their corresponding total number of likes, sorted in descending order by the number of likes. If multiple users have the same number of likes, sort them alphabetically by `username`. Use the `sqlite3` library to achieve the above steps. Function Signature: ```python def find_top_influencers(database_path: str, n: int) -> list: pass ```","solution":"import sqlite3 def find_top_influencers(database_path, n): Connects to the SQLite database, retrieves posts, calculates total likes for each user, and returns the top n users based on total likes. Parameters: - database_path (str): Path to the SQLite database. - n (int): Number of top influencers to retrieve. Returns: - list of tuples: Each tuple contains (username, total_likes), sorted in descending order of likes and alphabetically by username. conn = sqlite3.connect(database_path) cursor = conn.cursor() # Query to sum the likes for each user query = SELECT username, SUM(likes) as total_likes FROM posts GROUP BY username ORDER BY total_likes DESC, username ASC LIMIT ? cursor.execute(query, (n,)) result = cursor.fetchall() conn.close() return result"},{"question":"Implement a function that finds the shortest path in a graph using Dijkstra\'s algorithm. The graph is represented as an adjacency matrix where `graph[i][j]` gives the weight of the edge between nodes `i` and `j` (a weight of 0 indicates no direct edge between the nodes). The function should return the shortest path from a given start node to a given end node as well as the total weight of this path. Your function should be named `dijkstra_shortest_path` and it should adhere to the following requirements: 1. Accept the following parameters: - `graph`: A 2D list representing the adjacency matrix of the graph. - `start_node`: An integer representing the starting node for the path. - `end_node`: An integer representing the end node for the path. 2. Initialize a list to keep track of the shortest distance from the start node to each other node. Also, maintain a list to keep track of the previous node for each node in the path to reconstruct the shortest path. 3. Use a priority queue to select the node with the smallest tentative distance. 4. For the selected node, update the distances to its neighboring nodes. 5. Continue the process until the shortest path to the end node is found. 6. Reconstruct the shortest path from the start node to the end node using the previous nodes list. 7. Return the shortest path and the total weight of this path. Here is a template of the `dijkstra_shortest_path` function: ```python import heapq def dijkstra_shortest_path(graph, start_node, end_node): num_nodes = len(graph) distances = [float(\'inf\')] * num_nodes previous_nodes = [None] * num_nodes distances[start_node] = 0 priority_queue = [(0, start_node)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in enumerate(graph[current_node]): if weight > 0: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) path = [] node = end_node while node is not None: path.append(node) node = previous_nodes[node] path.reverse() if distances[end_node] == float(\'inf\'): return [], float(\'inf\') return path, distances[end_node] ``` Ensure that your solution correctly implements this function using the provided requirements. Test your function with a sample graph.","solution":"import heapq def dijkstra_shortest_path(graph, start_node, end_node): num_nodes = len(graph) distances = [float(\'inf\')] * num_nodes previous_nodes = [None] * num_nodes distances[start_node] = 0 priority_queue = [(0, start_node)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in enumerate(graph[current_node]): if weight > 0: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) path = [] node = end_node while node is not None: path.append(node) node = previous_nodes[node] path.reverse() if distances[end_node] == float(\'inf\'): return [], float(\'inf\') return path, distances[end_node]"},{"question":"You are required to write a function that normalizes a given 2D NumPy array of numerical values such that all values lie between 0 and 1. The normalization should be done by dividing each element by the maximum value in the array. The function you need to write should be named `normalize_array`, and it should use the NumPy library\'s `numpy.max` and `numpy.divide` functions. The function signature is as follows: ```python def normalize_array(array): Normalizes the given 2D array such that all values lie between 0 and 1. Parameters: ---------- array : numpy.ndarray A 2D array of numerical values. Returns: ------- normalized : numpy.ndarray A 2D array of the same shape as the input array, containing normalized values between 0 and 1. ``` The normalization should be performed by dividing each element in the array by the maximum value present in the array. **Input Constraints:** 1. `array` is a 2D NumPy array. 2. The elements of `array` are real numbers. **Output:** - The function should return the normalized 2D NumPy array. **Example:** ```python import numpy as np array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) normalized = normalize_array(array) print(\\"Normalized Array:n\\", normalized) ``` Your task is to implement the `normalize_array` function.","solution":"import numpy as np def normalize_array(array): Normalizes the given 2D array such that all values lie between 0 and 1. Parameters: ---------- array : numpy.ndarray A 2D array of numerical values. Returns: ------- normalized : numpy.ndarray A 2D array of the same shape as the input array, containing normalized values between 0 and 1. max_value = np.max(array) normalized = np.divide(array, max_value) return normalized"},{"question":"In this exercise, you are required to write a function named `fetch_and_print_data(url)` that performs HTTP GET requests to fetch data from a web server, and prints the response time along with the status code of the response. Here\'s the task in detail: 1. You will use the `requests` library to perform an HTTP GET request to the specified `url`. 2. You need to measure the response time in milliseconds. 3. You will print two pieces of information: - The response time in milliseconds. - The HTTP status code of the response. **Function Signature**: ```python def fetch_and_print_data(url): pass ``` # Requirements: - Use the `requests.get` method to send the HTTP GET request. - Measure the response time in milliseconds. You can use the `elapsed` attribute of the response object. - Print the response time and status code in the format: `\\"Response time: {response_time} ms, Status code: {status_code}\\"`. The objective of this exercise is to practice sending HTTP requests and handling the response data, including the response time and status code. # Example: Assume you want to fetch data from the following URL: ```python url = \\"https://example.com/api/data\\" fetch_and_print_data(url) ``` Expected output format: ``` Response time: 123 ms, Status code: 200 ```","solution":"import requests def fetch_and_print_data(url): Performs an HTTP GET request to the specified URL, measures the response time in milliseconds, and prints the response time and status code. response = requests.get(url) response_time_ms = response.elapsed.total_seconds() * 1000 status_code = response.status_code print(f\\"Response time: {response_time_ms:.2f} ms, Status code: {status_code}\\")"},{"question":"You are required to create a Python function that processes employee data and generates a report summarizing their work hours. Each employee works on different projects, and their work hours are tracked accordingly. Your task is to implement the function `generateWorkSummary(records)`, where: - `records` is a list of dictionaries, each representing a work record for an employee. Each dictionary has the following keys: - `employee_id` (an integer): Unique identifier for the employee. - `project` (a string): Name of the project the work hours are associated with. - `hours` (a float): Number of hours worked on the project. The function should return a summary (as a dictionary) with the following structure: - The keys are employee IDs. - The values are dictionaries containing: - A `total_hours` key indicating the sum of all hours worked by the employee. - A `projects` key indicating another dictionary where each key is a project name and the value is the total hours worked on that project. Example: ```python records = [ {\\"employee_id\\": 1, \\"project\\": \\"A\\", \\"hours\\": 5.0}, {\\"employee_id\\": 1, \\"project\\": \\"B\\", \\"hours\\": 3.0}, {\\"employee_id\\": 2, \\"project\\": \\"A\\", \\"hours\\": 7.0}, {\\"employee_id\\": 1, \\"project\\": \\"A\\", \\"hours\\": 2.0}, {\\"employee_id\\": 2, \\"project\\": \\"B\\", \\"hours\\": 1.0} ] result = generateWorkSummary(records) ``` Output: ```python { 1: { \\"total_hours\\": 10.0, \\"projects\\": { \\"A\\": 7.0, \\"B\\": 3.0 } }, 2: { \\"total_hours\\": 8.0, \\"projects\\": { \\"A\\": 7.0, \\"B\\": 1.0 } } } ``` Ensure careful handling of the summarization logic to properly aggregate the work hours by employee and project. Write the `generateWorkSummary(records)` function according to these instructions.","solution":"def generateWorkSummary(records): summary = {} for record in records: employee_id = record[\'employee_id\'] project = record[\'project\'] hours = record[\'hours\'] if employee_id not in summary: summary[employee_id] = {\'total_hours\': 0.0, \'projects\': {}} summary[employee_id][\'total_hours\'] += hours if project not in summary[employee_id][\'projects\']: summary[employee_id][\'projects\'][project] = 0.0 summary[employee_id][\'projects\'][project] += hours return summary"},{"question":"You are required to implement a function named `find_lowest_cost_path` which computes the minimum cost to traverse from the top-left corner to the bottom-right corner of a grid. The grid contains non-negative integers representing the cost of entering each cell. Movement is allowed only to the right or downward. # Task Details - The input grid `cost_grid` is a 2D list where `cost_grid[i][j]` represents the cost of entering the cell at row `i` and column `j`. - Implement a function to compute the minimum cost path from the top-left corner to the bottom-right corner. Your function should perform the following steps: 1. Use dynamic programming to build a cost matrix where each cell contains the minimum cost to reach that cell from the top-left corner. 2. The entry at position `(0, 0)` should be the initial value of `cost_grid[0][0]`. 3. Calculate the cost for each cell in the first row and first column, since they have only one path from the top-left. 4. For other cells, calculate the minimum cost based on the cell above and the cell to the left. 5. Return the value in the bottom-right cell of the cost matrix as the result. # Function Signature ```python def find_lowest_cost_path(cost_grid): # Your code here pass ``` # Inputs - `cost_grid` (list of list of int): A 2D list of non-negative integers representing the cost grid. # Outputs - `min_cost` (int): The minimum cost to traverse from the top-left to the bottom-right corner of the grid. # Example ```python cost_grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] min_cost = find_lowest_cost_path(cost_grid) print(\\"Minimum Cost:\\", min_cost) # Output: 7 ``` In this example, the minimum cost path is `1 → 1 → 1 → 1 → 1 → 2`, yielding a total cost of 7.","solution":"def find_lowest_cost_path(cost_grid): Computes the minimum cost to traverse from the top-left corner to the bottom-right corner of the grid. Parameters: - cost_grid: list of list of int, the cost grid where cost_grid[i][j] represents the cost of entering the cell at row i and column j. Returns: - int, the minimum cost to traverse from the top-left to the bottom-right corner. if not cost_grid or not cost_grid[0]: return 0 rows = len(cost_grid) cols = len(cost_grid[0]) # Initialize the cost matrix dp = [[0] * cols for _ in range(rows)] dp[0][0] = cost_grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + cost_grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + cost_grid[i][0] # Fill the rest of the dp matrix for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost_grid[i][j] return dp[-1][-1]"},{"question":"You have been provided with a partially implemented function called `transform_and_save_df`. Your task is to complete this function in Python using the `pandas` and `io` libraries. This function is responsible for taking a DataFrame, applying specific transformations, and saving the transformed DataFrame as a CSV file to a `BytesIO` object, which should then be returned. Here are the specific requirements for the function: 1. **Function Name**: `transform_and_save_df` 2. **Parameters**: - `df` (pandas.DataFrame): The original DataFrame. - `column_transform` (dict): A dictionary where the keys are column names and the values are functions to apply to each column. 3. **Functionality**: - Apply the transformations specified in `column_transform` to the corresponding columns of `df`. - Save the transformed DataFrame as a CSV file in a `BytesIO` object using `df.to_csv`. - Return the `BytesIO` object containing the byte representation of the CSV file. 4. **Library Requirements**: - `io.BytesIO`: To handle the in-memory bytes buffer. - `pandas`: To handle the DataFrame operations. Below is a sample input and expected output: **Example**: ```python # Example usage of the function: import pandas as pd data = {\'A\': [1, 2, 3, 4], \'B\': [5, 6, 7, 8]} df = pd.DataFrame(data) transformations = {\'A\': lambda x: x*10, \'B\': lambda x: x+100} output = transform_and_save_df(df, transformations) # Type of output should be <class \'_io.BytesIO\'> ``` Your implementation should be efficient and comply with the required libraries for handling data transformation and I/O. Ensure that the transformations are correctly applied to the DataFrame and that the CSV output is properly formatted. Don\'t forget to import the necessary libraries at the start of your function.","solution":"import pandas as pd import io def transform_and_save_df(df, column_transform): Transforms specified columns of the DataFrame using provided functions and saves the result to a BytesIO object as CSV. Parameters: df (pandas.DataFrame): The original DataFrame. column_transform (dict): Dictionary where keys are column names and values are functions to apply to columns. Returns: BytesIO: The BytesIO object containing the CSV representation of the transformed DataFrame. for column, transform_func in column_transform.items(): if column in df: df[column] = df[column].apply(transform_func) output = io.BytesIO() df.to_csv(output, index=False) output.seek(0) # Resetting the cursor to the start of the stream return output"},{"question":"Create a function that accepts a list of integers and sorts them using the bubble sort algorithm. Additionally, the function should count and return the number of swaps made to sort the list. The function should output: tuple: A tuple containing: - list: The sorted list. - int: The number of swaps performed during the sorting process. You should write self-contained code starting with: ``` def bubble_sort_with_count(lst): ```","solution":"def bubble_sort_with_count(lst): Sorts a list of integers using the bubble sort algorithm. Parameters: lst (list): A list of integers to be sorted. Returns: tuple: A tuple containing the sorted list and the number of swaps made. n = len(lst) swap_count = 0 # Bubble Sort for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: # Swap lst[j], lst[j+1] = lst[j+1], lst[j] swap_count += 1 return lst, swap_count"},{"question":"You are developing a library management system and need to implement a feature to help categorize books based on their attributes using Python. The system must group books into different categories and subcategories based on the provided attributes and generate a nested dictionary representing the categorization. **Function Specification:** - **Function Name:** `categorize_books` - **Parameters:** - `book_list` (list): A list of dictionaries, where each dictionary contains information about a book. Each dictionary has the keys: \'title\', \'author\', \'genre\', and \'year\'. - **Returns:** A nested dictionary, where the first level of keys are genres. The second level of keys is divided further by year of publication, and the final value is a list of book titles that belong to that genre and year. **The Task:** 1. Implement the function such that it organizes books into a nested dictionary structure. 2. The genre is the primary level of the dictionary. 3. Each genre contains another dictionary where the keys are years, and the values are lists of book titles published in that year. 4. If there are multiple books in the same genre and year, all the book titles should be included in the list for that year. **Example Usage:** ```python books = [ {\'title\': \'Book1\', \'author\': \'Author1\', \'genre\': \'Fiction\', \'year\': 2020}, {\'title\': \'Book2\', \'author\': \'Author2\', \'genre\': \'Fiction\', \'year\': 2020}, {\'title\': \'Book3\', \'author\': \'Author3\', \'genre\': \'Non-Fiction\', \'year\': 2019}, {\'title\': \'Book4\', \'author\': \'Author4\', \'genre\': \'Fiction\', \'year\': 2021}, {\'title\': \'Book5\', \'author\': \'Author5\', \'genre\': \'Non-Fiction\', \'year\': 2019}, ] result = categorize_books(books) print(result) ``` **Expected Output:** ```python { \'Fiction\': { 2020: [\'Book1\', \'Book2\'], 2021: [\'Book4\'] }, \'Non-Fiction\': { 2019: [\'Book3\', \'Book5\'] } } ``` In this task, you should ensure the function accurately categorizes the books according to the given attributes and structures the data in the specified nested dictionary format.","solution":"def categorize_books(book_list): Categorize books based on genre, year, and title. :param book_list: List of dictionaries, where each dictionary contains information about a book with keys: \'title\', \'author\', \'genre\', and \'year\'. :return: Nested dictionary with genre as the first level key, year as the second level key, and a list of book titles as the values. categorized_books = {} for book in book_list: genre = book[\'genre\'] year = book[\'year\'] title = book[\'title\'] if genre not in categorized_books: categorized_books[genre] = {} if year not in categorized_books[genre]: categorized_books[genre][year] = [] categorized_books[genre][year].append(title) return categorized_books"},{"question":"You are asked to design a Python function that processes a list of dictionaries and aggregates the results based on a specific key. The function should sum up values associated with the same key. # Objectives: 1. **Function Name**: `aggregate_by_key` 2. **Inputs**: - `data`: A list of dictionaries where each dictionary has the same set of keys. The values are integers or floats. - `key`: A string representing the key to be aggregated. 3. **Output**: - A dictionary where each unique value of the specified key is a key in the output dictionary and the corresponding value is the sum of all values associated with that key from the input list. 4. **Specifications**: - If the specified key does not exist in any of the dictionaries, the function should return an empty dictionary. - If the input list is empty, the function should also return an empty dictionary. - Handle cases where values associated with the specified key are non-numeric by ignoring those dictionaries. # Example Usage: ```python data = [ {\\"category\\": \\"A\\", \\"amount\\": 10}, {\\"category\\": \\"B\\", \\"amount\\": 20}, {\\"category\\": \\"A\\", \\"amount\\": 7.5}, {\\"category\\": \\"B\\", \\"amount\\": 5}, {\\"category\\": \\"C\\", \\"amount\\": 12}, ] result = aggregate_by_key(data, \\"category\\") # Expected output: {\'A\': 17.5, \'B\': 25, \'C\': 12} ``` Implement the function `aggregate_by_key` to meet these requirements.","solution":"def aggregate_by_key(data, key): Aggregates values by a specified key in a list of dictionaries. Parameters: - data: list of dictionaries - key: the key string to aggregate by Returns: - A dictionary with unique values of the specified key as keys and the sums of corresponding values as values. if not data or key not in data[0]: return {} result = {} for entry in data: if key in entry: key_value = entry[key] if key_value not in result: result[key_value] = 0 if isinstance(entry.get(\'amount\'), (int, float)): result[key_value] += entry[\'amount\'] return result"},{"question":"You are required to implement a function in Python that determines the minimum number of operations needed to convert one string into another using dynamic programming. The allowed operations are insert a character, delete a character, or replace a character. Implement the function `min_edit_distance(s1, s2)` as described below: # Parameters - `s1`: A string representing the first input. - `s2`: A string representing the second input. # Returns - An integer representing the minimum number of operations required to convert `s1` into `s2`. # Requirements - Use dynamic programming to solve the problem efficiently. - Ensure that the function is clearly defined and returns the correct minimum edit distance. # Hints - Create a 2D array `dp` where `dp[i][j]` represents the edit distance between the first `i` characters of `s1` and the first `j` characters of `s2`. - Initialize the array with `dp[0][j] = j` and `dp[i][0] = i`. - Iterate over the array and fill it using the recurrence relations: 1. If `s1[i-1] == s2[j-1]`, then `dp[i][j] = dp[i-1][j-1]`. 2. Otherwise, `dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])`. # Example Usage ```python # Examples s1 = \\"intention\\" s2 = \\"execution\\" print(min_edit_distance(s1, s2)) # Output: 5 s1 = \\"kitten\\" s2 = \\"sitting\\" print(min_edit_distance(s1, s2)) # Output: 3 ```","solution":"def min_edit_distance(s1, s2): Returns the minimum number of operations required to convert s1 into s2. Parameters: - s1: A string representing the first input. - s2: A string representing the second input. Returns: - An integer representing the minimum number of operations required to convert s1 into s2. m = len(s1) n = len(s2) # Create a 2D dp array with dimensions (m+1) x (n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the first row and first column of the table for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp array using the given recurrence relations for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j - 1], # Replace character dp[i - 1][j], # Delete character dp[i][j - 1]) # Insert character # The answer is in dp[m][n] return dp[m][n]"},{"question":"You are required to create a function named `count_words_in_files` that reads multiple text files from a given directory, counts the frequency of each word across all files, and writes the result to a new text file named `word_count.txt`. The directory path will be provided as an input parameter to the function. Your task: 1. Read all `.txt` files from the given directory. 2. Split the text into words and count the frequency of each word, ignoring case and stripping punctuation. 3. Write the word counts to a new file named `word_count.txt`. The file should have each word and its count on a new line, in the format `word: count`. Make sure to use the Python `os` module for directory operations and handle any possible exceptions or invalid data gracefully. Function Signature: ```python def count_words_in_files(directory: str): pass ``` Example: Assume the directory contains the following files and their contents: - `file1.txt`: ``` Hello world! Hello everyone. ``` - `file2.txt`: ``` Goodbye world. Farewell everyone. ``` The `word_count.txt` file should look like: ``` hello: 2 world: 2 everyone: 2 goodbye: 1 farewell: 1 ```","solution":"import os import string from collections import defaultdict def count_words_in_files(directory: str): word_count = defaultdict(int) for filename in os.listdir(directory): if filename.endswith(\\".txt\\"): filepath = os.path.join(directory, filename) with open(filepath, \'r\', encoding=\\"utf-8\\") as file: text = file.read().lower() translator = str.maketrans(\'\', \'\', string.punctuation) words = text.translate(translator).split() for word in words: word_count[word] += 1 with open(\'word_count.txt\', \'w\', encoding=\\"utf-8\\") as output_file: for word, count in sorted(word_count.items()): output_file.write(f\\"{word}: {count}n\\")"},{"question":"Write a function `swap_odd_even_bits(num)` that takes in a positive integer `num` and returns an integer with its odd and even bits swapped. The bits at odd positions should be swapped with the adjacent bits at even positions. For instance, bit 0 should be swapped with bit 1, bit 2 should be swapped with bit 3, and so on. # Instructions 1. Use bitwise operations to mask odd and even bits and then shift these masked bits. 2. Combine the shifted bits to form the final swapped integer. # Considerations - The function should handle edge cases like `num` being 0. - Ensure the function operates efficiently for large integers. Function Signature: ```python def swap_odd_even_bits(num: int) -> int: ``` Example ```python num = 23 # Binary: 10111 result = swap_odd_even_bits(num) print(result) # Output should be: 43, which is 101011 in binary ``` # Hint - You can use bitwise AND to isolate the bits at even and odd positions. - Bitwise OR can be used to combine the shifted results.","solution":"def swap_odd_even_bits(num): This function takes a positive integer and returns an integer with its odd and even bits swapped. # Get all even bits of num even_bits = num & 0xAAAAAAAA # Get all odd bits of num odd_bits = num & 0x55555555 # Right shift even bits even_bits >>= 1 # Left shift odd bits odd_bits <<= 1 # Combine even and odd bits return even_bits | odd_bits"},{"question":"Given a list of students and their scores over different subjects in JSON format, you are required to create a function named `generate_student_report` that aggregates the scores and provides a summary for each student. The function should do the following: 1. Parse the JSON data to extract student information. 2. Calculate the total score for each student across all subjects. 3. Determine the average score for each student. 4. Create a pandas DataFrame with columns: `student_name`, `total_score`, and `average_score`. 5. Sort the DataFrame by `total_score` in descending order. 6. Return the DataFrame. Use the `pandas` library for this task. Here is a breakdown of the function requirements: ```python def generate_student_report(json_data): Aggregates student scores from JSON data and provides a summary report. Parameters: json_data (str): JSON formatted string containing students and their scores. Returns: pd.DataFrame: DataFrame containing student report. pass # Write your implementation here ``` # Example Usage: ```python import pandas as pd import json json_data = { \\"students\\": [ {\\"name\\": \\"Alice\\", \\"scores\\": {\\"Math\\": 80, \\"English\\": 75, \\"Science\\": 85}}, {\\"name\\": \\"Bob\\", \\"scores\\": {\\"Math\\": 90, \\"English\\": 85, \\"Science\\": 80}}, {\\"name\\": \\"Charlie\\", \\"scores\\": {\\"Math\\": 70, \\"English\\": 65, \\"Science\\": 60}} ] } df = generate_student_report(json_data) print(df) ``` Expected Output: ``` student_name total_score average_score 0 Bob 255 85.000000 1 Alice 240 80.000000 2 Charlie 195 65.000000 ``` # Constraints: - Ensure you handle the JSON parsing and data extraction correctly. - Use pandas functionality to perform DataFrame operations. - Proper calculation of total and average scores. # Additional Notes: - This problem will help you practice JSON parsing, data aggregation, and DataFrame manipulation using the `pandas` library.","solution":"import pandas as pd import json def generate_student_report(json_data): Aggregates student scores from JSON data and provides a summary report. Parameters: json_data (str): JSON formatted string containing students and their scores. Returns: pd.DataFrame: DataFrame containing student report. # Parse the JSON data data = json.loads(json_data) # Prepare lists to construct a DataFrame student_names = [] total_scores = [] average_scores = [] # Iterate over each student data for student in data[\'students\']: name = student[\'name\'] scores = student[\'scores\'] total_score = sum(scores.values()) average_score = total_score / len(scores) student_names.append(name) total_scores.append(total_score) average_scores.append(average_score) # Create the DataFrame df = pd.DataFrame({ \'student_name\': student_names, \'total_score\': total_scores, \'average_score\': average_scores }) # Sort the DataFrame by total score in descending order df.sort_values(by=\'total_score\', ascending=False, inplace=True) # Reset index for a clean DataFrame df.reset_index(drop=True, inplace=True) return df"},{"question":"You are required to create a function that reads a CSV file containing information about products and their respective ratings, then generates and saves a bar chart that visualizes the average rating of each product category. The function should also display the bar chart. You are to use the `pandas` and `matplotlib.pyplot` libraries to achieve this. Specifically, utilize the `read_csv`, `groupby`, `mean`, `plot`, and `show` functions from these libraries. # Function Requirements: 1. Define a function named `generate_and_save_category_ratings_chart` that accepts two parameters: - `file_path`: A string representing the path to the CSV file containing the product information. - `output_path`: A string representing the directory path where the resulting bar chart image will be saved. 2. The CSV file comprises the following columns: - `ProductID`: A unique identifier for each product. - `Category`: A string representing the product category. - `Rating`: A float representing the rating of the product. 3. Within the function: - Read the CSV file into a pandas DataFrame. - Group the DataFrame by the `Category` column and calculate the mean rating for each category. - Create a bar chart where each bar represents the average rating of a product category. -Assign appropriate labels to the axes and the chart title. - Save the bar chart in the specified directory as \'category_ratings_chart.png\'. - Display the bar chart on the screen. # Example CSV Content: ``` ProductID,Category,Rating 1,Electronics,4.5 2,Clothing,3.8 3,Electronics,4.2 4,Furniture,4.0 5,Clothing,4.1 ``` # Example Usage: ```python generate_and_save_category_ratings_chart(\'/path/to/products.csv\', \'/path/to/save/directory\') ``` # Constraints: - The CSV file should exist and be accessible at the provided file path. - `output_path` should be a valid directory path.","solution":"import pandas as pd import matplotlib.pyplot as plt import os def generate_and_save_category_ratings_chart(file_path, output_path): Generates and saves a bar chart visualizing the average rating of each product category. Parameters: - file_path (str): The path to the CSV file containing the product information. - output_path (str): The directory path where the resulting bar chart image will be saved. # Read the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Group the DataFrame by the Category column and calculate the mean rating for each category category_mean_ratings = df.groupby(\'Category\')[\'Rating\'].mean() # Create a bar chart plt.figure(figsize=(10, 6)) category_mean_ratings.plot(kind=\'bar\', color=\'skyblue\') plt.xlabel(\'Product Category\') plt.ylabel(\'Average Rating\') plt.title(\'Average Rating of Each Product Category\') plt.xticks(rotation=45) # Save the bar chart as \'category_ratings_chart.png\' in the specified directory chart_path = os.path.join(output_path, \'category_ratings_chart.png\') plt.savefig(chart_path) # Display the bar chart plt.show()"},{"question":"You are tasked with writing a function `find_redundant_directed_edge(edges)` that identifies a redundant edge in a directed graph represented by a list of edges. A redundant edge is one that can be removed so that the graph remains a Directed Acyclic Graph (DAG). If multiple redundant edges exist, return the edge that occurs last in the list. Each edge is defined as a tuple `(u, v)` representing a directed edge from node `u` to node `v`. **Function Signature:** ```python def find_redundant_directed_edge(edges: List[Tuple[int, int]]) -> Tuple[int, int]: ``` **Input:** - `edges`: A list of tuples, where each tuple represents a directed edge in the graph. **Output:** - A tuple representing the redundant edge. **Constraints:** - The number of nodes in the graph is at most 1000. - The given edges form a graph that initially contains a single cycle and each node has at most one incoming edge. # Additional Notes: 1. Use Depth-First Search (DFS) to detect cycles and identify the redundant edge. 2. Ensure that the returned edge is the one that appears last in the input list in case of multiple options. Here is an example of how the function should operate: ```python # Example usage: edges = [(1, 2), (2, 3), (3, 4), (4, 1), (2, 5)] redundant_edge = find_redundant_directed_edge(edges) print(redundant_edge) # Expected output: (4, 1) ```","solution":"def find_redundant_directed_edge(edges): Finds the redundant edge in a directed graph that can be removed so that the graph remains a Directed Acyclic Graph (DAG). If multiple redundant edges exist, returns the edge that occurs last in the list. parent = {} def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: parent[root_u] = root_v cycle_edge = (-1, -1) for u, v in edges: parent[u] = u parent[v] = v for u, v in edges: if find(u) == find(v): cycle_edge = (u, v) else: union(u, v) return cycle_edge"},{"question":"You are developing a task management system that allows users to create tasks, mark them as completed, and retrieve a summary. Each task has a description, a priority level, and a completion status. Your task is to implement the class `TaskManager` that performs the following: 1. **Initialization:** The `TaskManager` should start with an empty task list. 2. **Add Task:** The method `add_task(description: str, priority: int) -> None` should add a new task with the given description and priority level. The task should be added with a completion status set to `False`. 3. **Complete Task:** The method `complete_task(description: str) -> bool` should mark a task as completed based on its description. If the task is found and marked as completed, the method should return `True`. If the task is not found, the method should return `False`. 4. **Get Summary:** The method `get_summary() -> List[Tuple[str, int, bool]]` should return a list of all tasks, each represented as a tuple containing the description, priority, and completion status. **Class Signature:** ```python class TaskManager: def __init__(self): pass def add_task(self, description: str, priority: int) -> None: pass def complete_task(self, description: str) -> bool: pass def get_summary(self) -> List[Tuple[str, int, bool]]: pass ``` # Example ```python tm = TaskManager() tm.add_task(\\"Finish report\\", 1) tm.add_task(\\"Email client\\", 2) print(tm.get_summary()) # Output: # [(\\"Finish report\\", 1, False), (\\"Email client\\", 2, False)] print(tm.complete_task(\\"Email client\\")) # Output: # True print(tm.get_summary()) # Output: # [(\\"Finish report\\", 1, False), (\\"Email client\\", 2, True)] print(tm.complete_task(\\"Go jogging\\")) # Output: # False ``` # Requirements - Ensure that the `complete_task` method checks for the task\'s description accurately. - Tasks should be stored in the order they are added and the summary should reflect this order.","solution":"from typing import List, Tuple class TaskManager: def __init__(self): self.tasks = [] def add_task(self, description: str, priority: int) -> None: self.tasks.append((description, priority, False)) def complete_task(self, description: str) -> bool: for i, (desc, priority, completed) in enumerate(self.tasks): if desc == description: self.tasks[i] = (desc, priority, True) return True return False def get_summary(self) -> List[Tuple[str, int, bool]]: return self.tasks"},{"question":"You are required to create a function named `rotate_matrix` that rotates a given 2D square matrix (NxN) 90 degrees clockwise. The function should take a 2D numpy array as input and return a new 2D numpy array representing the rotated matrix. **Function Signature:** ```python def rotate_matrix(matrix: np.ndarray) -> np.ndarray: ``` **Input:** - `matrix` (numpy.ndarray): A 2D numpy array of shape `(N, N)` representing the square matrix to be rotated. **Output:** - `numpy.ndarray`: A 2D numpy array of shape `(N, N)` representing the rotated matrix. The function should not use any built-in numpy functions that perform rotation directly. The rotation should be achieved through array manipulation. **Example:** ```python import numpy as np matrix = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) result = rotate_matrix(matrix) print(result) # Outputs: # array([ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ]) ```","solution":"import numpy as np def rotate_matrix(matrix: np.ndarray) -> np.ndarray: Rotates a given NxN 2D square matrix 90 degrees clockwise. :param matrix: A 2D numpy array of shape (N, N). :return: A new 2D numpy array of shape (N, N) rotated 90 degrees clockwise. N = matrix.shape[0] rotated = np.zeros((N, N), dtype=matrix.dtype) for i in range(N): for j in range(N): rotated[j, N-1-i] = matrix[i, j] return rotated"},{"question":"You are tasked with creating a function in Python to generate unique coupon codes and distribute them proportionately among a given set of users. Each coupon code should be a unique alphanumeric string of a specified length. # Function Name: - `distribute_coupons` # Function Description: The function should generate a specified number of unique coupon codes. It should then distribute these coupon codes among users such that each user receives a proportion of the total coupons based on the input list of proportions. # Parameters: 1. **num_coupons (int)**: The total number of unique coupon codes to generate. 2. **code_length (int)**: The length of each unique coupon code. 3. **user_proportions (List[float])**: A list of proportions (non-negative floats) indicating how to distribute the coupons among the users. The sum of the proportions will always be 1. # Requirements: - Use Python’s `random` module to generate unique alphanumeric coupon codes. - Ensure each generated coupon code is unique. - Distribute the coupon codes to users accurately based on the proportions provided. - Return a list of lists where each inner list corresponds to the coupon codes given to a user. # Detailed Steps: 1. Generate `num_coupons` unique alphanumeric strings, each of length `code_length`. 2. Calculate the number of coupons to be distributed to each user based on the proportions provided. 3. Distribute the generated coupon codes according to the calculated proportions. 4. Return the distributed coupon codes in a list of lists. # Example Usage: ```python def main(): user_proportions = [0.5, 0.3, 0.2] result = distribute_coupons(10, 8, user_proportions) print(result) main() ``` Expected Output (Your actual coupon codes will vary): ``` [[\'a1B2c3D4\', \'E5f6g7H8\', \'i9J0k1L2\', \'M3n4O5P6\', \'Q7r8S9T0\'], [\'u1V2w3X4\', \'Y5Z6a7b8\', \'C9d0e1F2\'], [\'G3h4I5j6\', \'K7l8M9N0\']] ```","solution":"import random import string from typing import List def generate_coupon_code(code_length: int) -> str: Generates a unique alphanumeric coupon code of the given length. characters = string.ascii_letters + string.digits return \'\'.join(random.choice(characters) for _ in range(code_length)) def distribute_coupons(num_coupons: int, code_length: int, user_proportions: List[float]) -> List[List[str]]: Generates unique coupon codes and distributes them among users based on given proportions. Parameters: - num_coupons (int): The total number of unique coupon codes to generate. - code_length (int): The length of each unique coupon code. - user_proportions (List[float]): List of proportions indicating how to distribute the coupons. Returns: - List[List[str]]: A list of lists where each inner list contains the coupon codes given to a user. # Generate unique coupon codes coupons = set() while len(coupons) < num_coupons: coupons.add(generate_coupon_code(code_length)) coupons = list(coupons) # Distribute coupons based on proportions distributed_coupons = [] start_index = 0 for proportion in user_proportions: num_user_coupons = int(num_coupons * proportion) end_index = start_index + num_user_coupons distributed_coupons.append(coupons[start_index:end_index]) start_index = end_index return distributed_coupons"},{"question":"In this task, you are required to write a Python function that calculates the nth term of a specific number sequence. The sequence is defined by a recursive relation that involves summing the digits of previous terms. # Task Write a function `compute_term(n: int) -> int` that takes one parameter: - `n`: the position in the sequence (1-indexed), an integer greater than or equal to 1. The sequence is defined as follows: 1. The 1st term is 1. 2. For any term at position ( i ) (where ( i geq 2 )), the value is obtained by summing the digits of the term at position ( i-1 ). # Calculation Details 1. The term at position 1 is given as: [ text{term(1)} = 1 ] 2. For ( i geq 2 ): [ text{term}(i) = sum(text{digits of term}(i-1)) ] # Examples ```python compute_term(1) -> 1 compute_term(2) -> 1 compute_term(3) -> 1 compute_term(10) -> 1 ``` **Explanation**: - The sequence starts with 1. - Each subsequent term is the sum of the digits of the previous term, which keeps producing 1 since the sum of the digits of 1 is 1. Additional examples: ```python compute_term(15) -> 1 compute_term(20) -> 1 ``` # Constraints - You may consider ( n ) to be a positive integer, i.e., ( n geq 1 ). Write efficient code to handle the recursive logic for calculating the nth term.","solution":"def compute_term(n): Computes the nth term of the sequence where each term is the sum of the digits of the previous term, starting from the first term which is 1. :param n: The position in the sequence (1-indexed) :return: The nth term # Base case for the first term if n == 1: return 1 # Initial term term = 1 # Calculate term iteratively for efficiency for _ in range(2, n + 1): digit_sum = sum(int(digit) for digit in str(term)) term = digit_sum return term"},{"question":"You are working on the backend of a social media platform and your task is to implement a feature that detects trending hashtags. You need to create a function that scans a stream of user posts and identifies the top `N` trending hashtags for each day. Each post contains a timestamp and a list of hashtags used in that post. The top trending hashtags are determined by their frequency of use in the posts of that day. # Function Signature ```python def find_trending_hashtags(posts: List[Dict[str, Union[str, List[str]]]], date_format: str, top_n: int) -> Dict[str, List[str]]: ``` # Parameters: 1. `posts (List[Dict[str, Union[str, List[str]]]])`: A list of dictionaries where each dictionary represents a post with the keys: - `timestamp` (str): The timestamp of the post. - `hashtags` (List[str]): A list of hashtags used in the post. 2. `date_format (str)`: A string representing the format of the timestamp (e.g., \'%Y-%m-%d %H:%M:%S\'). 3. `top_n (int)`: The number of top trending hashtags to return for each day. # Output: - Returns a dictionary where the keys are unique dates and the values are lists of the top `N` trending hashtags for each date. # Requirements: - Use the `datetime.datetime.strptime` for parsing timestamps. - In case of a tie in hashtag frequency, sort the hashtags alphabetically and take the first `N` based on that sorting. # Example: ```python posts = [ {\\"timestamp\\": \\"2023-01-01 10:00:00\\", \\"hashtags\\": [\\"#fun\\", \\"#sunny\\"]}, {\\"timestamp\\": \\"2023-01-01 11:00:00\\", \\"hashtags\\": [\\"#fun\\", \\"#holiday\\"]}, {\\"timestamp\\": \\"2023-01-02 09:00:00\\", \\"hashtags\\": [\\"#chill\\", \\"#fun\\"]}, {\\"timestamp\\": \\"2023-01-02 10:00:00\\", \\"hashtags\\": [\\"#chill\\", \\"#fun\\", \\"#sunny\\"]} ] date_format = \\"%Y-%m-%d %H:%M:%S\\" top_n = 2 result = find_trending_hashtags(posts, date_format, top_n) print(result) # Example output: {\\"2023-01-01\\": [\\"#fun\\", \\"#holiday\\"], \\"2023-01-02\\": [\\"#chill\\", \\"#fun\\"]} ```","solution":"from typing import List, Dict, Union from collections import defaultdict, Counter from datetime import datetime def find_trending_hashtags(posts: List[Dict[str, Union[str, List[str]]]], date_format: str, top_n: int) -> Dict[str, List[str]]: # Dictionary to hold hashtags by date hashtags_by_date = defaultdict(list) # Process each post for post in posts: # Parse the timestamp timestamp = datetime.strptime(post[\\"timestamp\\"], date_format) date_str = timestamp.strftime(\\"%Y-%m-%d\\") # Add hashtags to the corresponding date entry hashtags_by_date[date_str].extend(post[\\"hashtags\\"]) # Result dictionary to hold top N hashtags by date trending_hashtags_by_date = {} # Find top N hashtags for each date for date, hashtags in hashtags_by_date.items(): # Count the frequency of each hashtag hashtag_counts = Counter(hashtags) # Get the top N hashtags sorted by frequency and then alphabetically top_hashtags = sorted(hashtag_counts.keys(), key=lambda tag: (-hashtag_counts[tag], tag))[:top_n] trending_hashtags_by_date[date] = top_hashtags return trending_hashtags_by_date"},{"question":"You are asked to write a function that processes orders in an e-commerce system. The system tracks available stock for each product and updates it as new orders come in. Your function, named `process_order`, will accept an order represented by a dictionary and a product catalog represented by another dictionary. The function should update the catalog based on the ordered quantities and return a boolean value indicating whether the entire order could be fulfilled. If any item in the order cannot be fulfilled due to insufficient stock, the function should not make any changes to the catalog and should return `False`. **Function Signature:** ```python def process_order(order: dict, catalog: dict) -> bool: # Your code here ``` **Parameters:** - `order` (dict): A dictionary where keys are product names and values are the quantities that are being ordered. - `catalog` (dict): A dictionary where keys are product names and values are the available stock for those products. # Constraints: - All product names in `order` are guaranteed to exist in `catalog`. - Quantities in both dictionaries are non-negative integers. # Instructions: 1. Implement the `process_order` function following the behavior described. 2. Ensure your function correctly updates the `catalog` if the order can be fulfilled fully. 3. If the order cannot be fulfilled due to insufficient stock, the function must leave the `catalog` unchanged and return `False`. # Example: ```python # Example input: order = { \'apple\': 5, \'banana\': 2 } catalog = { \'apple\': 10, \'banana\': 3, \'orange\': 5 } # Expected output: True # catalog after function execution: # { # \'apple\': 5, # \'banana\': 1, # \'orange\': 5 # } # Example input: order = { \'apple\': 11, \'banana\': 2 } catalog = { \'apple\': 10, \'banana\': 3, \'orange\': 5 } # Expected output: False # catalog after function execution remains unchanged: # { # \'apple\': 10, # \'banana\': 3, # \'orange\': 5 # } ``` ```python def process_order(order: dict, catalog: dict) -> bool: # Your code here ```","solution":"def process_order(order: dict, catalog: dict) -> bool: # Check if the entire order can be fulfilled for item, quantity in order.items(): if catalog.get(item, 0) < quantity: return False # Update the catalog since the order can be fully fulfilled for item, quantity in order.items(): catalog[item] -= quantity return True"},{"question":"You are required to create a function that takes a list of integers and returns the list sorted in \'wave\' form. In a wave array, elements are arranged such that every second element is greater than its adjacent elements. The resulting array should ensure that for even-indexed ( i ) (i.e., 0, 2, 4, ...), ( arr[i] geq arr[i+1] ) and for odd-indexed ( i ) (i.e., 1, 3, 5, ...), ( arr[i] leq arr[i+1] ). Your task is to implement a function called `wave_sort` that takes a list of integers and rearranges them into \'wave\' form. Assume the input list will have at least one element. **Example:** ```python Input: [3, 6, 5, 10, 7, 20] Output: [6, 3, 10, 5, 20, 7] ``` **Function Signature:** ```python def wave_sort(arr: list) -> list: ``` **Implementation Steps:** 1. Sort the input list. 2. Swap adjacent elements in pairs. 3. Return the rearranged list.","solution":"def wave_sort(arr: list) -> list: Rearranges the list into \'wave\' form such that arr[0] >= arr[1] <= arr[2] >= arr[3]... # Step 1: Sort the input list arr.sort() # Step 2: Swap adjacent elements in pairs for i in range(0, len(arr) - 1, 2): arr[i], arr[i + 1] = arr[i + 1], arr[i] # Step 3: Return the rearranged list return arr"},{"question":"**Problem Context:** You are given a list of integers representing the stock prices of a company over a series of days. Your task is to determine the maximum profit that can be achieved by buying and selling the stock once. You are only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock). You should avoid any negative profits. Write a function `max_profit(prices: List[int]) -> int` that takes a list of integers `prices` as its input and returns an integer representing the maximum profit achievable. If no profit can be made, return 0. **Function Definition:** ```python def max_profit(prices: List[int]) -> int: pass ``` **Example Input and Output:** Input: ```python prices = [7, 1, 5, 3, 6, 4] ``` Output: ```python 5 ``` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input: ```python prices = [7, 6, 4, 3, 1] ``` Output: ```python 0 ``` Explanation: In this case, no transaction is done, i.e., max profit = 0. **Constraints:** - The length of the list `prices` is between 0 and 10^5. - Each element in `prices` is between 0 and 10^4.","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In the context of string manipulation and text analysis, you are tasked with writing a function named `top_k_words`. The goal of this function is to process an input text, count the frequency of each word, and return the top k most common words in descending order of their frequencies. # Requirements: 1. **Function Signature:** ```python def top_k_words(text: str, k: int) -> List[Tuple[str, int]]: ``` - `text`: A string containing the input text. - `k`: An integer specifying the number of top words to return. 2. **Data Processing:** - Convert the entire text to lowercase. - Remove punctuation using `str.translate` and `str.maketrans`. - Split the text into words using `str.split`. - Use a dictionary to count the frequency of each word. 3. **Output:** - Return a list of tuples containing the top k words and their frequencies, sorted in descending order of frequencies. If two words have the same frequency, they should be sorted alphabetically. # Constraints: - If the input text is empty, return an empty list. - The input text will contain only alphabetic characters and punctuation. - The value of k will be a positive integer and will not exceed the number of unique words in the text. - You must use the specified function signature and required string methods. # Example: ```python text = \\"Hello, hello, hello! How low? Low low low...\\" k = 2 result = top_k_words(text, k) # Expected output: [(\'low\', 4), (\'hello\', 3)] ```","solution":"from typing import List, Tuple import string def top_k_words(text: str, k: int) -> List[Tuple[str, int]]: Returns the top k most common words in the input text in descending order of their frequencies. # Convert text to lowercase text = text.lower() # Remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Split text into words words = text.split() # Count word frequencies word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Sort words by frequency and alphabetically sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) # Return top k words return sorted_words[:k]"},{"question":"Generate a pandas DataFrame with two datetime columns (\'Start_Date\' and \'End_Date\'), and an integer column (\'Value\'). The \'Start_Date\' column should include dates between January 1, 2021, and January 10, 2021, inclusive, while the \'End_Date\' column should be set to a date one day after the corresponding \'Start_Date\'. The \'Value\' column should contain sequential integers starting from 1. Write a function that groups the DataFrame by the day of the \'Start_Date\' column, calculates the sum of \'Value\' for each day, and returns this aggregated result as a new DataFrame with \'Date\' and \'Total_Value\' columns. The function should output with: pd.DataFrame: A DataFrame with two columns, \'Date\' and \'Total_Value\', showing the sum of \'Value\' for each day. You should write self-contained code starting with: ``` import pandas as pd from datetime import timedelta, datetime def task_func(): ```","solution":"import pandas as pd from datetime import timedelta, datetime def create_dataframe(): start_dates = pd.date_range(start=\'2021-01-01\', end=\'2021-01-10\') end_dates = start_dates + pd.Timedelta(days=1) values = range(1, len(start_dates) + 1) df = pd.DataFrame({ \'Start_Date\': start_dates, \'End_Date\': end_dates, \'Value\': values }) return df def aggregate_values(df): df[\'Date\'] = df[\'Start_Date\'].dt.date aggregated_df = df.groupby(\'Date\')[\'Value\'].sum().reset_index() aggregated_df.columns = [\'Date\', \'Total_Value\'] return aggregated_df def task_func(): df = create_dataframe() result = aggregate_values(df) return result"},{"question":"You are provided with a list of strings representing names. Your task is to write a function that organizes these names in a hierarchy based on their lengths. Each level of the hierarchy should contain names of the same length. Names within the same level should be sorted alphabetically. **Function Name**: `hierarchy_of_names` **Objective**: Write a function `hierarchy_of_names` which takes a list of names and returns a dictionary where the keys are the lengths of names and the values are lists containing names of that length, sorted alphabetically. **Inputs**: - `names`: A list of strings representing the names. **Output**: - A dictionary with the keys being integers representing name lengths and the values being lists of names sorted alphabetically. **Requirements**: - Names within each list in the dictionary must be sorted alphabetically. - The dictionary keys must be the unique lengths of the names given in the input list. **Detailed Description**: 1. Initialize an empty dictionary to store the name hierarchy. 2. Iterate through the list of names. 3. For each name, determine its length and add it to the appropriate list in the dictionary. 4. If the length key is not present in the dictionary, create a new entry. 5. Sort the lists within the dictionary alphabetically after populating them. 6. Return the dictionary. Example Usage: ```python input_names = [\\"Alice\\", \\"Bob\\", \\"Clara\\", \\"David\\", \\"Eva\\", \\"Frank\\", \\"Grace\\", \\"Heidi\\"] output_hierarchy = hierarchy_of_names(input_names) print(output_hierarchy) # Expected Output: # { # 3: [\'Bob\', \'Eva\'], # 5: [\'Alice\', \'David\', \'Frank\', \'Grace\', \'Heidi\'], # 5: [\'Clara\'] # } ```","solution":"def hierarchy_of_names(names): Organize the names based on their lengths. Args: names (list of str): List of names to be organized. Returns: dict of {int: list of str}: A dictionary where keys are name lengths and values are lists of names with that length, sorted alphabetically. hierarchy = {} for name in names: length = len(name) if length not in hierarchy: hierarchy[length] = [] hierarchy[length].append(name) for length in hierarchy: hierarchy[length].sort() return hierarchy"},{"question":"You are required to implement a function named `calculate_eigenvalues_sum` which computes the sum of the eigenvalues of a provided square matrix. This task requires you to leverage the `numpy` library for matrix manipulations and eigenvalue calculations. The function `calculate_eigenvalues_sum` should: 1. Accept a single parameter `matrix`, which is a two-dimensional square `numpy` array (i.e., the number of rows and columns are equal). 2. Calculate the eigenvalues of this matrix using `numpy.linalg.eigvals`. 3. Return the sum of these eigenvalues. # Function Signature ```python import numpy as np def calculate_eigenvalues_sum(matrix): # Function definition here ``` # Example ```python matrix = np.array([ [4, -2], [1, 1] ]) result = calculate_eigenvalues_sum(matrix) print(result) # Output should be the sum of the eigenvalues of the matrix ``` # Guidelines - Make sure to validate that the input `matrix` is square; if it is not, the function should raise a `ValueError` with the message \\"Input must be a square matrix.\\" - Use `numpy.linalg.eigvals` to find the eigenvalues of the matrix. - Ensure the function returns a float or complex number representing the sum of the eigenvalues. # Additional Example ```python matrix = np.array([ [2, 1, 0], [1, 2, 1], [0, 1, 2] ]) result = calculate_eigenvalues_sum(matrix) print(result) # Output: 6.0, since the sum of the eigenvalues (3, 2, 1) is 6. ```","solution":"import numpy as np def calculate_eigenvalues_sum(matrix): Computes the sum of the eigenvalues of a provided square matrix. Parameters: matrix (np.ndarray): A two-dimensional square numpy array. Returns: float: The sum of the eigenvalues of the matrix. Raises: ValueError: If the input matrix is not square. if matrix.shape[0] != matrix.shape[1]: raise ValueError(\\"Input must be a square matrix.\\") eigenvalues = np.linalg.eigvals(matrix) return np.sum(eigenvalues)"},{"question":"Implement a function that reads a list of integers from a text file, sorts these integers, and writes the sorted list to a new text file. Additionally, ensure that appropriate directories are created if they do not exist, and handle exceptions for missing files or non-integer values in the file. The function should output with: str: The path to the new text file with sorted integers. You should write self-contained code starting with: ``` import os def sort_integers(input_txt_path, output_txt_path): ```","solution":"import os def sort_integers(input_txt_path, output_txt_path): Reads a list of integers from input_txt_path, sorts them, and writes the sorted list to output_txt_path. Ensures directories are created if they do not exist. Args: - input_txt_path: str, path to the input text file containing integers. - output_txt_path: str, path to the output text file to store sorted integers. Returns: - str: The path to the new text file with sorted integers. if not os.path.exists(input_txt_path): raise FileNotFoundError(f\\"The input file \'{input_txt_path}\' does not exist.\\") # Read the content from input file try: with open(input_txt_path, \'r\') as file: contents = file.read() integers_list = [int(x) for x in contents.split()] except ValueError: raise ValueError(\\"The input file contains non-integer values.\\") # Sort the integers sorted_integers = sorted(integers_list) # Ensure the output directory exists os.makedirs(os.path.dirname(output_txt_path), exist_ok=True) # Write the sorted integers to the output file with open(output_txt_path, \'w\') as file: file.write(\' \'.join(map(str, sorted_integers))) return output_txt_path"},{"question":"You need to create a function in Python that generates the Fibonacci sequence up to the `n`-th term, where `n` is provided by the user. Additionally, you must implement the function such that it runs efficiently, using memoization to store previously computed terms to avoid redundant calculations. The Fibonacci sequence is defined as follows: - Fibonacci(0) = 0 - Fibonacci(1) = 1 - Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) for all n > 1 Your task is to implement the function `generate_fibonacci(n)` using a dictionary for memoization. **Function Signature:** ```python def generate_fibonacci(n): pass ``` **Inputs:** - `n` : Integer representing the number of terms to generate. **Returns:** - List of integers representing the Fibonacci sequence up to the `n`-th term (inclusive). **Example:** ```python print(generate_fibonacci(10)) # Output should be [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] ``` You are required to explicitly use a dictionary to store previously computed terms of the Fibonacci sequence within your implementation.","solution":"def generate_fibonacci(n): memo = {} def fibonacci(n): if n in memo: return memo[n] if n == 0: memo[n] = 0 elif n == 1: memo[n] = 1 else: memo[n] = fibonacci(n-1) + fibonacci(n-2) return memo[n] fibonacci_sequence = [fibonacci(i) for i in range(n+1)] return fibonacci_sequence"},{"question":"You are asked to create a Python function that calculates the sum of all prime numbers up to a given integer `n`. This exercise is designed to test your understanding of prime numbers, loops, and basic algorithmic optimizations. Write a function `sum_of_primes(n)` that calculates the sum of all prime numbers less than or equal to `n`. The function should: 1. Accept a single parameter: - `n`: An integer greater than 1, up to which prime numbers will be summed. 2. Check all numbers from 2 up to `n` to determine if they are prime. 3. Sum all the prime numbers found within the range. 4. Return the sum of these prime numbers. Here is how the function will be used: ```python def main(): result = sum_of_primes(10) print(result) # Should output 17, since 2, 3, 5, and 7 are prime numbers <= 10 result = sum_of_primes(30) print(result) # Should output 129, since the primes <= 30 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 if __name__ == \\"__main__\\": main() ``` **Function Signature:** ```python def sum_of_primes(n): ``` **Example:** ```python def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_of_primes(n): sum_primes = 0 for num in range(2, n + 1): if is_prime(num): sum_primes += num return sum_primes def main(): result = sum_of_primes(10) print(result) # Should output 17, since 2, 3, 5, and 7 are prime numbers <= 10 result = sum_of_primes(30) print(result) # Should output 129, since the primes <= 30 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 if __name__ == \\"__main__\\": main() ```","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_of_primes(n): sum_primes = 0 for num in range(2, n + 1): if is_prime(num): sum_primes += num return sum_primes"},{"question":"You are required to write a function that simulates the simple behavior of a temperature sensor. This function will return a simulated temperature reading as a floating-point number with one decimal place between a specified range, inclusive. Specifically, you need to implement a function named `get_temperature()`. This function should: 1. Use the built-in `uniform` function from the `random` module to generate the temperature reading. 2. Accept two parameters `min_temp` and `max_temp`, which represent the range within which the temperature reading should fall. 3. Return the temperature reading rounded to one decimal place. Here is the function signature you should use: ```python def get_temperature(min_temp, max_temp): # Your code here ``` **Examples:** ```python print(get_temperature(10.0, 20.0)) # Output could be any floating-point number between 10.0 and 20.0, e.g., 15.3 print(get_temperature(-5.0, 5.0)) # Output could be any floating-point number between -5.0 and 5.0, e.g., -2.1 ``` **Requirements:** - You must use the `uniform` function from the `random` module to generate the temperature reading.","solution":"import random def get_temperature(min_temp, max_temp): Returns a simulated temperature reading as a floating-point number with one decimal place between min_temp and max_temp, inclusive. temperature = random.uniform(min_temp, max_temp) return round(temperature, 1)"},{"question":"Write a function `generate_combinations(characters: str, length: int) -> list` that generates all possible combinations of a given length using the characters from the input string. The combinations should be returned in lexicographical order. **Specifications:** 1. **Input:** - `characters (str)`: A string of unique characters. - `length (int)`: The length of each combination to be generated. 2. **Output:** - A list of strings, where each string is a combination of the specified length generated from the `characters`. 3. **Steps:** - Ensure the input string contains unique characters. - Utilize Python\'s itertools library to generate the combinations. - Return the combinations sorted in lexicographical order. **Requirements:** - Make sure to handle cases where `length` is greater than the number of characters in the input string by returning an empty list. - Ensure that the output list is sorted in lexicographical order. **Example:** ```python generate_combinations(\'abc\', 2) ``` should return: ``` [\'ab\', \'ac\', \'bc\'] ``` Another example: ```python generate_combinations(\'xyz\', 3) ``` should return: ``` [\'xyz\'] ``` If the length is greater than the number of characters: ```python generate_combinations(\'pq\', 3) ``` should return an empty list: ``` [] ```","solution":"from itertools import combinations def generate_combinations(characters: str, length: int) -> list: Generates all possible combinations of the given length using the characters from the input string. Parameters: characters (str): A string of unique characters. length (int): The length of each combination to be generated. Returns: list: A list of strings, where each string is a combination of the specified length generated from the characters. if length > len(characters): return [] comb = combinations(characters, length) return sorted(\'\'.join(c) for c in comb)"},{"question":"# Problem: Palindrome Partitioning You are asked to implement a function that determines the minimum number of cuts needed to partition a given string such that each substring is a palindrome. A palindrome is a string that reads the same backward as forward. # Function Specification Create a function named `min_palindrome_cuts` with the following specifications: - **Inputs**: - `s`: a string representing the input word to be partitioned - **Output**: - The function returns an integer representing the minimum number of cuts needed for the entire string to be split into palindromic substrings. # Details 1. If the entire string `s` is already a palindrome, the function should return `0`. 2. Otherwise, the function should compute the minimum number of cuts required to partition the string into palindromic substrings. # Examples Example 1: - **Input**: `s = \\"aab\\"` - **Output**: `1` - **Explanation**: The palindrome partitioning (\\"aa\\", \\"b\\") involves 1 cut. Example 2: - **Input**: `s = \\"racecar\\"` - **Output**: `0` - **Explanation**: The input string is already a palindrome, so no cuts are needed. Example 3: - **Input**: `s = \\"banana\\"` - **Output**: `1` - **Explanation**: The palindrome partitioning (\\"b\\", \\"anana\\") involves 1 cut. # Requirements To solve the problem, you can utilize: - Dynamic programming to keep track of minimum cuts needed. - A helper function to check if a substring is a palindrome. Ensure optimal performance to handle larger strings efficiently. Implement the function `min_palindrome_cuts(s)` to satisfy the above scenarios.","solution":"def min_palindrome_cuts(s): Determines the minimum number of cuts needed to partition a string such that each substring is a palindrome. n = len(s) if n <= 1: return 0 # Create a DP table to check if substring s[i:j+1] is a palindrome is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True # Every single letter is a palindrome for length in range(2, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if j == i + 1: # two-letter case is_palindrome[i][j] = True else: is_palindrome[i][j] = is_palindrome[i + 1][j - 1] # Array to store the minimum cuts needed for the substring s[0:i+1] cuts = [0] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 else: cuts[i] = min(cuts[j] + 1 for j in range(i) if is_palindrome[j + 1][i]) return cuts[-1]"},{"question":"You are provided a dataset containing information about students enrolling in various courses. Each student is represented by a dictionary containing their name, a list of courses they are taking, and their grades in those courses. Your task is to create a function that calculates and returns the highest average grade for the courses taken by any student. **Function Name:** `highest_average_grade` **Parameters:** - `students` (list of dicts): A list of dictionaries where each dictionary contains: - `name` (string): The name of the student. - `courses` (list of strings): The list of courses the student is taking. - `grades` (list of floats): The grades of the student in the corresponding courses. **Returns:** - A string representing the name of the student with the highest average grade. **Constraints:** - Each student has at least one course and one grade. - Each student\'s list of courses and grades has the same length. **Instructions:** - Calculate the average grade for each student. - Return the name of the student with the highest average grade. If there are multiple students with the same highest average grade, return any one of them. **Example:** ```python students = [ { \'name\': \'Alice\', \'courses\': [\'Math\', \'Science\', \'History\'], \'grades\': [90.5, 85.0, 88.0] }, { \'name\': \'Bob\', \'courses\': [\'Math\', \'Science\'], \'grades\': [95.0, 87.5] }, { \'name\': \'Charlie\', \'courses\': [\'Math\', \'Science\', \'History\', \'Art\'], \'grades\': [70.0, 76.5, 80.0, 85.0] } ] # The function call highest_average_grade(students) should return: # \'Bob\' ```","solution":"def highest_average_grade(students): Returns the name of the student with the highest average grade. :param students: List of dictionaries, where each dictionary contains: \'name\': string - Name of the student, \'courses\': list of strings - Courses the student is taking, \'grades\': list of floats - Grades of the student in the corresponding courses. :return: String - Name of the student with the highest average grade. highest_avg_grade = -1 top_student = \\"\\" for student in students: avg_grade = sum(student[\'grades\']) / len(student[\'grades\']) if avg_grade > highest_avg_grade: highest_avg_grade = avg_grade top_student = student[\'name\'] return top_student"},{"question":"Design a function that will take in a string representing a filepath to a text file, read through the file, and summarize the contents by providing the total word count and the count of each unique word, ignoring case. The function should output a dictionary where the keys represent unique words (in lowercase) and the values represent their respective counts. The function should also handle the following exceptions: FileNotFoundError if the file does not exist, and ValueError if the file contains non-text content. You should write self-contained code starting with: ``` def summarize_file(filepath): ```","solution":"import os def summarize_file(filepath): Summarizes the contents of the text file at the given filepath. Returns a dictionary where the keys are unique words (in lowercase) and the values are their respective counts. Raises: FileNotFoundError: If the file does not exist. ValueError: If the file contains non-text content. if not os.path.exists(filepath): raise FileNotFoundError(f\\"The file \'{filepath}\' does not exist.\\") word_count = {} try: with open(filepath, \'r\', encoding=\'utf-8\') as file: for line in file: words = line.strip().split() for word in words: word = word.lower() if word in word_count: word_count[word] += 1 else: word_count[word] = 1 except UnicodeDecodeError: raise ValueError(\\"The file contains non-text content.\\") return word_count"},{"question":"You are required to create a program that uses the `tkinter` library in Python to design a simple GUI with two buttons and a label. The purpose of this GUI is to increment or decrement a counter displayed on the label when the corresponding button is pressed. **Function Specification:** - **Function Name**: `create_counter_app` - **Parameters**: None Use the following functions and methods of the `tkinter` library: - `tkinter.Tk()` – Creates the main application window. - `tkinter.Label(master, text)` – Creates a label widget. - `tkinter.Button(master, text, command)` – Creates a button widget. - `widget.pack()` – Packs the widget into the window. - `widget.config(text)` – Changes the text of the widget. The GUI should include: - A label that displays the current value of the counter, starting at 0. - An \\"Increment\\" button to increase the counter by 1. - A \\"Decrement\\" button to decrease the counter by 1. **Instructions:** 1. Initialize the main application window using `tkinter.Tk()`. 2. Create the label widget and initialize it with the text “0”. 3. Create an \\"Increment\\" button that binds to a function updating the label text by incrementing the counter. 4. Create a \\"Decrement\\" button that binds to a function updating the label text by decrementing the counter. 5. Pack all widgets into the window and run the main loop. ```python import tkinter as tk def create_counter_app(): counter = 0 def update_label(): label.config(text=str(counter)) def increment(): nonlocal counter counter += 1 update_label() def decrement(): nonlocal counter counter -= 1 update_label() root = tk.Tk() root.title(\\"Counter App\\") label = tk.Label(root, text=\\"0\\") label.pack() increment_button = tk.Button(root, text=\\"Increment\\", command=increment) increment_button.pack() decrement_button = tk.Button(root, text=\\"Decrement\\", command=decrement) decrement_button.pack() root.mainloop() # Un-comment the following line to test the function: # create_counter_app() ```","solution":"import tkinter as tk def create_counter_app(): counter = 0 def update_label(): label.config(text=str(counter)) def increment(): nonlocal counter counter += 1 update_label() def decrement(): nonlocal counter counter -= 1 update_label() root = tk.Tk() root.title(\\"Counter App\\") label = tk.Label(root, text=\\"0\\") label.pack() increment_button = tk.Button(root, text=\\"Increment\\", command=increment) increment_button.pack() decrement_button = tk.Button(root, text=\\"Decrement\\", command=decrement) decrement_button.pack() root.mainloop() # Un-comment the following line to test the function: # create_counter_app()"},{"question":"You are provided with a pandas DataFrame that contains sales data of an online store. The data includes columns such as \\"Order ID\\", \\"Product\\", \\"Quantity Ordered\\", \\"Price Each\\", and \\"Order Date\\" among others. The goal is to create a function that generates sales statistics for a given product over a specified time period. Your task is to write a function named `product_sales_statistics` that takes the following parameters: - `product` (str): The name of the product to analyze. - `start_date` (str): The start date of the time period in the format \'YYYY-MM-DD\'. - `end_date` (str): The end date of the time period in the format \'YYYY-MM-DD\'. The function should: 1. Load data from a CSV file named \'sales_data.csv\'. 2. Convert the \\"Order Date\\" column to a pandas datetime object using `pandas.to_datetime`. 3. Filter the DataFrame for the given product. 4. Filter the DataFrame to include only rows where the \\"Order Date\\" is between the specified start and end dates. 5. Calculate the total quantity sold, total revenue, and the average price per unit for the specified product over the given time period. 6. Return a dictionary containing the calculated statistics. Below are the details for the input and output: **Input:** - `product` (str): Name of the product (example values: \'USB-C Charging Cable\', \'Bose SoundSport Headphones\', \'Google Phone\'). - `start_date` (str): Start date of the period (format: \'YYYY-MM-DD\'). - `end_date` (str): End date of the period (format: \'YYYY-MM-DD\'). **Output:** - A dictionary containing the total quantity sold, total revenue, and average price per unit. # Example Usage: ```python statistics = product_sales_statistics(\'USB-C Charging Cable\', \'2021-01-01\', \'2021-03-31\') print(statistics) ``` # Example Output: ```python { \'total_quantity_sold\': 150, \'total_revenue\': 2250.0, \'average_price_per_unit\': 15.0 } ``` # Constraints: - Assume the CSV file is in the correct format and only valid product names will be provided as input. - The function should handle cases where no sales data is available for the specified product and time period gracefully, returning zeros for all statistics in such cases. ```python import pandas as pd def product_sales_statistics(product, start_date, end_date): df = pd.read_csv(\'sales_data.csv\') df[\'Order Date\'] = pd.to_datetime(df[\'Order Date\']) mask = (df[\'Order Date\'] >= start_date) & (df[\'Order Date\'] <= end_date) product_df = df[mask & (df[\'Product\'] == product)] total_quantity_sold = product_df[\'Quantity Ordered\'].sum() total_revenue = (product_df[\'Quantity Ordered\'] * product_df[\'Price Each\']).sum() avg_price_per_unit = product_df[\'Price Each\'].mean() if not product_df.empty else 0 return { \'total_quantity_sold\': total_quantity_sold, \'total_revenue\': total_revenue, \'average_price_per_unit\': avg_price_per_unit } ```","solution":"import pandas as pd def product_sales_statistics(product, start_date, end_date): # Load data from CSV file df = pd.read_csv(\'sales_data.csv\') # Convert \'Order Date\' column to datetime df[\'Order Date\'] = pd.to_datetime(df[\'Order Date\']) # Filter data for the given time period and product mask = (df[\'Order Date\'] >= start_date) & (df[\'Order Date\'] <= end_date) & (df[\'Product\'] == product) filtered_df = df[mask] # Calculate the total quantity sold total_quantity_sold = filtered_df[\'Quantity Ordered\'].sum() # Calculate the total revenue total_revenue = (filtered_df[\'Quantity Ordered\'] * filtered_df[\'Price Each\']).sum() # Calculate the average price per unit avg_price_per_unit = total_revenue / total_quantity_sold if total_quantity_sold > 0 else 0 return { \'total_quantity_sold\': total_quantity_sold, \'total_revenue\': total_revenue, \'average_price_per_unit\': avg_price_per_unit }"},{"question":"Write a function that generates a bar chart to visualize the distribution of a randomly generated dataset. The function should generate a specified number of random data points from a normal distribution with given mean and standard deviation, bin the data using a specified number of bins, and display the histogram with labeled axes and a title. The function should output with: None You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def plot_histogram(mean=0, std_dev=1, num_points=1000, num_bins=30): ```","solution":"import numpy as np import matplotlib.pyplot as plt def plot_histogram(mean=0, std_dev=1, num_points=1000, num_bins=30): Generates a bar chart to visualize the distribution of a randomly generated dataset. Parameters: - mean: The mean of the normal distribution. - std_dev: The standard deviation of the normal distribution. - num_points: The number of random data points to generate. - num_bins: The number of bins to use in the histogram. Returns: - None # Generate random data points from a normal distribution data = np.random.normal(mean, std_dev, num_points) # Create histogram plt.hist(data, bins=num_bins, edgecolor=\'black\') # Label axes and title plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Randomly Generated Data\') # Display the plot plt.show()"},{"question":"In the context of data manipulation and string processing, one common task is to transform a given string based on specific rules. This problem requires you to implement a function that encodes a string such that each letter is replaced by the letter following it in the alphabet, while non-letter characters remain unchanged. Furthermore, wrapping around the alphabet should be handled, i.e., \'z\' should be replaced with \'a\' and \'Z\' with \'A\'. **Task:** Write a function `encode_string` that takes a single input string `s`. Your function should: 1. Iterate over each character in the string. 2. If the character is a lowercase letter (\'a\' to \'z\'), replace it with the next letter in the alphabet. Wrap around if the letter is \'z\'. 3. If the character is an uppercase letter (\'A\' to \'Z\'), replace it with the next letter in the alphabet. Wrap around if the letter is \'Z\'. 4. If the character is not a letter, leave it unchanged. 5. Return the encoded string. **Function signature:** ```python def encode_string(s: str) -> str: ``` **Example:** ```python s = \\"Hello, World! zZ\\" print(encode_string(s)) # Expected output: \\"Ifmmp, Xpsme! aA\\" ``` **Constraints:** - The input string `s` can contain any ASCII characters. - Only letters should be shifted, keeping other characters the same. The problem is designed to make you practice string manipulation and handling cases with wrapping around alphabetically.","solution":"def encode_string(s: str) -> str: Encodes the string by shifting each letter to the next one in the alphabet. Non-letter characters remain unchanged. Wraps around at \'z\' to \'a\' and \'Z\' to \'A\'. encoded_string = [] for char in s: if \'a\' <= char <= \'z\': if char == \'z\': encoded_char = \'a\' else: encoded_char = chr(ord(char) + 1) elif \'A\' <= char <= \'Z\': if char == \'Z\': encoded_char = \'A\' else: encoded_char = chr(ord(char) + 1) else: encoded_char = char encoded_string.append(encoded_char) return \'\'.join(encoded_string)"},{"question":"You are assigned to implement a function called `calculate_bonus` that processes employee data to determine their yearly bonus based on their performance and work experience. The function should read the data from a given CSV file and then compute the bonus for each employee according to the specified performance rating scale and experience tiers. # Function Signature ```python def calculate_bonus(filename: str) -> pd.DataFrame: ``` # Parameters - `filename` (str): The name of the CSV file containing employee data (including the `.csv` extension). # Returns - `pd.DataFrame`: A pandas DataFrame containing the original employee data along with an additional `Bonus` column. # Details 1. **Reading the CSV File**: Use `pd.read_csv` to read the employee data into a DataFrame. The CSV file contains the following columns: `EmployeeID`, `Name`, `Department`, `Experience` (in years), and `PerformanceRating`. 2. **Performance Ratings**: The performance rating is a numerical score ranging from 1 to 5. Define a dictionary named `PERFORMANCE_BONUS` that maps performance ratings to bonus percentages of the base salary as follows: - 5 -> 20% - 4 -> 15% - 3 -> 10% - 2 -> 5% - 1 -> 0% 3. **Experience Tiers**: Define another dictionary called `EXPERIENCE_BONUS` that maps experience tiers to additional bonus percentages of the base salary: - Experience >= 10 years -> 10% - 5 <= Experience < 10 years -> 5% - Experience < 5 years -> 0% 4. **Calculating Bonuses**: - Compute the base bonus for each employee based on their performance rating using the `PERFORMANCE_BONUS` dictionary. - Compute the additional bonus based on their experience using the `EXPERIENCE_BONUS` dictionary. - Sum the base bonus and additional bonus to get the total bonus for each employee. 5. **Adding the Bonus Column**: - Add a new column called `Bonus` to the DataFrame containing the total calculated bonus for each employee. # Example Execution ```python df = calculate_bonus(\'employee_data.csv\') print(df.head()) ```","solution":"import pandas as pd def calculate_bonus(filename: str) -> pd.DataFrame: # Define the bonus percentages for performance ratings PERFORMANCE_BONUS = { 5: 20, 4: 15, 3: 10, 2: 5, 1: 0 } # Define the bonus percentages for experience tiers EXPERIENCE_BONUS = { \'>=10\': 10, \'5-9\': 5, \'<5\': 0 } # Read the CSV file into a DataFrame df = pd.read_csv(filename) # Calculate the base bonus from performance rating df[\'BasePerformanceBonus\'] = df[\'PerformanceRating\'].map(PERFORMANCE_BONUS) # Calculate the additional bonus based on experience def calculate_experience_bonus(experience): if experience >= 10: return EXPERIENCE_BONUS[\'>=10\'] elif experience >= 5: return EXPERIENCE_BONUS[\'5-9\'] else: return EXPERIENCE_BONUS[\'<5\'] df[\'AdditionalExperienceBonus\'] = df[\'Experience\'].apply(calculate_experience_bonus) # Calculate the total bonus df[\'Bonus\'] = df[\'BasePerformanceBonus\'] + df[\'AdditionalExperienceBonus\'] # Drop the intermediate columns df.drop(columns=[\'BasePerformanceBonus\', \'AdditionalExperienceBonus\'], inplace=True) return df"},{"question":"You are required to write a function `max_intersection` that finds the maximum intersection between two sets while iterating through a list of tuples of sets. Specifically, create a function named `max_intersection` that takes in one parameter: 1. `sets_list` (list of tuples of sets): A list where each element is a tuple containing two sets (set1, set2). The function should return the size of the maximum intersection found between all pairs of sets in the list. # Example: ```python sets_list = [ ({1, 2, 3}, {2, 3, 4}), ({\'a\', \'b\', \'c\'}, {\'c\', \'d\', \'e\'}), ({\'apple\', \'banana\'}, {\'banana\', \'orange\'}), ] result = max_intersection(sets_list) print(result) # Expected output: 2 ``` # Explanation: - In the first pair, the intersection of `{1, 2, 3}` and `{2, 3, 4}` is `{2, 3}`, which has size 2. - In the second pair, the intersection of `{\'a\', \'b\', \'c\'}` and `{\'c\', \'d\', \'e\'}` is `{\'c\'}`, which has size 1. - In the third pair, the intersection of `{\'apple\', \'banana\'}` and `{\'banana\', \'orange\'}` is `{\'banana\'}`, which has size 1. - The maximum intersection size among these is 2. # Constraints: - `sets_list` can contain up to 1,000 tuples. - Each set in the tuple can contain up to 1,000 elements. - Sets may contain integers or strings, but not both in the same set.","solution":"def max_intersection(sets_list): Finds the maximum intersection size between pairs of sets in the list. Parameters: sets_list (list of tuples of sets): A list where each element is a tuple containing two sets (set1, set2). Returns: int: The maximum intersection size found between the pairs of sets. max_size = 0 for set1, set2 in sets_list: intersection_size = len(set1 & set2) if intersection_size > max_size: max_size = intersection_size return max_size"},{"question":"You are tasked with writing a function named `find_balanced_substring` that takes a single argument: `s`. The function should find and return the length of the longest substring that contains an equal number of the characters \'a\' and \'b\'. # Input: 1. `s` (str): A string consisting of the characters \'a\' and \'b\'. # Output: - Returns an integer representing the length of the longest balanced substring containing an equal number of \'a\' and \'b\'. # Function Signature: ```python def find_balanced_substring(s: str) -> int: ``` # Example: - If the input is `find_balanced_substring(\\"aabbab\\")`, the function should return `6` because the entire string is balanced with three \'a\'s and three \'b\'s. - If the input is `find_balanced_substring(\\"ababab\\")`, the function should return `6` because the entire string is balanced. - If the input is `find_balanced_substring(\\"aabbaa\\")`, the function should return `4` because the longest balanced substring is \\"aabb\\". # Notes: - The substring should contain an equal number of \'a\' and \'b\' and they can appear in any order within the substring. - Consider edge cases where the input string might be empty or contain only one type of character.","solution":"def find_balanced_substring(s: str) -> int: max_length = 0 balance_count = 0 balance_index_map = {0: -1} for i, char in enumerate(s): if char == \'a\': balance_count += 1 elif char == \'b\': balance_count -= 1 if balance_count in balance_index_map: max_length = max(max_length, i - balance_index_map[balance_count]) else: balance_index_map[balance_count] = i return max_length"},{"question":"Define a function that takes a list of strings representing dates in \\"dd-mm-yyyy\\" format and returns a list of the same dates sorted in chronological order. Your function should correctly handle edge cases such as leap years and varying month lengths. You should write self-contained code starting with: ``` def sort_dates(date_list): ```","solution":"def sort_dates(date_list): Returns a list of dates sorted in chronological order. Parameters: date_list (list): A list of strings representing dates in \\"dd-mm-yyyy\\" format. Returns: list: A list of strings representing dates sorted in chronological order. return sorted(date_list, key=lambda date: (date.split(\\"-\\")[2], date.split(\\"-\\")[1], date.split(\\"-\\")[0]))"},{"question":"--- Write a function named `find_word_ladder` that generates the shortest sequence of words (word ladder) from a given start word to an end word. A word ladder is defined such that: 1. Each word in the ladder changes exactly one character from the previous word. 2. Each intermediate word must be a valid word from a given list of words. 3. The ladder should include both the start and end words. The function should take three arguments: - `start` (str): the starting word. - `end` (str): the end word. - `word_list` (list of str): the list of valid words. The function should return the shortest word ladder as a list of words. If no such ladder exists, return an empty list. Example: ```python def find_word_ladder(start, end, word_list): # Function implementation here start = \\"hit\\" end = \\"cog\\" word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] print(find_word_ladder(start, end, word_list)) # Should output: [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] print(find_word_ladder(start, end, word_list)) # Should output: [] ``` Your implementation should be efficient and should handle reasonably large inputs of words.","solution":"from collections import deque def find_word_ladder(start, end, word_list): Finds the shortest sequence of words (word ladder) from start to end. Args: - start (str): The starting word. - end (str): The ending word. - word_list (list of str): The list of valid words. Returns: - list: The shortest word ladder as a list of words, or an empty list if no such ladder exists. if end not in word_list or not start or not end or not word_list: return [] word_list = set(word_list) queue = deque([(start, [start])]) while queue: current_word, path = queue.popleft() if current_word == end: return path for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i + 1:] if next_word in word_list and next_word != current_word: word_list.remove(next_word) queue.append((next_word, path + [next_word])) return []"},{"question":"In this problem, you need to implement a function named `min_spanning_tree` that finds the minimum spanning tree (MST) of a given graph using Prim\'s Algorithm. The graph is represented as an adjacency list with weighted edges. # Function Definition ```python def min_spanning_tree(graph): Find the minimum spanning tree of a graph using Prim\'s Algorithm. :param graph: A dictionary representing the adjacency list of the graph. The keys are the nodes and the values are lists of tuples, where each tuple is (neighbor, weight). :return: A list of edges representing the minimum spanning tree. pass ``` # Constraints and Notes: 1. You must use a priority queue, managed with the `heapq` library, to select the next edge with the smallest weight. 2. The graph is connected and undirected. 3. The function should return a list of edges that comprise the MST. Each edge is represented as a tuple `(u, v, weight)`. 4. Ensure that the algorithm efficiently keeps track of the nodes included in the MST to avoid cycles and redundant calculations. 5. Track and print the total weight of the MST. # Example Usage ```python graph = { \'A\': [(\'B\', 2), (\'C\', 3)], \'B\': [(\'A\', 2), (\'C\', 1), (\'D\', 4)], \'C\': [(\'A\', 3), (\'B\', 1), (\'D\', 5)], \'D\': [(\'B\', 4), (\'C\', 5)] } mst_edges = min_spanning_tree(graph) print(mst_edges) # Possible Output: # [(\'A\', \'B\', 2), (\'B\', \'C\', 1), (\'B\', \'D\', 4)] ```","solution":"import heapq def min_spanning_tree(graph): Find the minimum spanning tree of a graph using Prim\'s Algorithm. :param graph: A dictionary representing the adjacency list of the graph. The keys are the nodes and the values are lists of tuples, where each tuple is (neighbor, weight). :return: A list of edges representing the minimum spanning tree. start_node = next(iter(graph)) visited = set() min_heap = [(0, start_node, None)] # (cost, to_node, from_node) mst_edges = [] total_cost = 0 while min_heap: cost, to_node, from_node = heapq.heappop(min_heap) if to_node in visited: continue visited.add(to_node) if from_node is not None: mst_edges.append((from_node, to_node, cost)) total_cost += cost for neighbor, weight in graph[to_node]: if neighbor not in visited: heapq.heappush(min_heap, (weight, neighbor, to_node)) print(f\\"Total Weight of MST: {total_cost}\\") return mst_edges"},{"question":"**In this task, you are required to implement a function `analyze_stock_data` to evaluate the relationship between stock closing prices and trading volumes over time using the Pandas library. The function will contain the following steps: 1. Define the function with the signature `analyze_stock_data(stock_data, moving_avg_days=5, plot=True)`, where: - `stock_data` (pd.DataFrame): DataFrame with columns \'date\', \'close\', and \'volume\' representing the stock’s daily closing prices and trading volumes. - `moving_avg_days` (int, optional): the number of days over which the moving average is calculated. Default is 5. - `plot` (bool, optional): whether to generate line plots for the stock\'s closing prices and trading volumes. Default is True. 2. Ensure the \'date\' column in `stock_data` is of the datetime type and the DataFrame is sorted by date. 3. Add a column `moving_avg` to `stock_data` representing the moving average of closing prices over the previous `moving_avg_days`. 4. Print the first and last dates in the DataFrame, the mean and standard deviation of \'close\' prices, and the mean and standard deviation of \'volume\'. 5. Identify and print the date on which the highest \'volume\' was recorded. 6. If `plot` is set to True, produce dual-line plots to display the \'close\' prices and the \'volume\' over time. Additionally, plot the \'moving_avg\' line alongside the \'close\' prices. Example usage: ```python import pandas as pd # Sample DataFrame data = { \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'], \'close\': [150, 152, 148, 149, 151], \'volume\': [1000, 1100, 900, 1050, 1025] } stock_data = pd.DataFrame(data) analyze_stock_data(stock_data) ``` Implement the function `analyze_stock_data` to follow the above specifications.**","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_stock_data(stock_data, moving_avg_days=5, plot=True): Evaluates the relationship between stock closing prices and trading volumes overtime. Parameters: - stock_data (pd.DataFrame): DataFrame with columns \'date\', \'close\', and \'volume\'. - moving_avg_days (int): The number of days over which the moving average is calculated. - plot (bool): Whether to generate line plots for the stock\'s closing prices and trading volumes. Returns: - None # Ensure the \'date\' column is of datetime type stock_data[\'date\'] = pd.to_datetime(stock_data[\'date\']) # Sort the DataFrame by date stock_data = stock_data.sort_values(by=\'date\').reset_index(drop=True) # Calculate the moving average of closing prices stock_data[\'moving_avg\'] = stock_data[\'close\'].rolling(window=moving_avg_days).mean() # Print the first and last date print(f\\"First date: {stock_data[\'date\'].iloc[0]}\\") print(f\\"Last date: {stock_data[\'date\'].iloc[-1]}\\") # Print the mean and standard deviation of \'close\' prices print(f\\"Mean \'close\' price: {stock_data[\'close\'].mean()}\\") print(f\\"Standard Deviation of \'close\' price: {stock_data[\'close\'].std()}\\") # Print the mean and standard deviation of \'volume\' print(f\\"Mean \'volume\': {stock_data[\'volume\'].mean()}\\") print(f\\"Standard Deviation of \'volume\': {stock_data[\'volume\'].std()}\\") # Identify and print the date on which the highest \'volume\' was recorded highest_volume_date = stock_data.loc[stock_data[\'volume\'].idxmax(), \'date\'] print(f\\"Date with highest volume: {highest_volume_date}\\") # Generate line plots if plot is True if plot: plt.figure(figsize=(14, 7)) # Plotting \'close\' prices and \'volume\' plt.subplot(2, 1, 1) plt.plot(stock_data[\'date\'], stock_data[\'close\'], label=\'Close Price\', color=\'blue\') plt.plot(stock_data[\'date\'], stock_data[\'moving_avg\'], label=f\'{moving_avg_days}-Day Moving Avg\', color=\'orange\') plt.legend(loc=\'best\') plt.title(\'Stock Close Prices and Moving Average\') plt.subplot(2, 1, 2) plt.plot(stock_data[\'date\'], stock_data[\'volume\'], label=\'Volume\', color=\'green\') plt.legend(loc=\'best\') plt.title(\'Stock Trading Volume\') plt.tight_layout() plt.show()"},{"question":"You are tasked with writing a function called `group_by_first_letter` that takes in a list of strings and groups them by their starting letter. The function should return a dictionary where the keys are the starting letters, and the values are lists of strings that start with the respective letter. Function Signature ```python def group_by_first_letter(words): # your code here ``` Parameters - `words` (list of str): A list of strings to be grouped by their starting letter. Returns - A dictionary with starting letters as keys and lists of strings as values. Example ```python >>> group_by_first_letter([\\"apple\\", \\"apricot\\", \\"banana\\", \\"blueberry\\", \\"cherry\\", \\"avocado\\"]) {\'a\': [\'apple\', \'apricot\', \'avocado\'], \'b\': [\'banana\', \'blueberry\'], \'c\': [\'cherry\']} >>> group_by_first_letter([]) {} ``` Requirements - Iterate through the list of strings and categorize them based on their first letter. - Handle both uppercase and lowercase letters by treating them equivalently. - The output should use lowercase keys regardless of the initial letter case of the strings in the input list.","solution":"def group_by_first_letter(words): Groups a list of strings by their starting letter. Parameters: words (list of str): A list of strings to be grouped by their starting letter. Returns: dict: A dictionary with starting letters as keys and lists of strings as values. grouped = {} for word in words: if word: first_letter = word[0].lower() if first_letter in grouped: grouped[first_letter].append(word) else: grouped[first_letter] = [word] return grouped"},{"question":"# Context: You are provided with a list of sales data representing the number of units sold for a particular product each day. Your task is to analyze the sales data and create a function to identify the day with the highest sales. # Objective: Write a function `day_with_highest_sales(sales_data)` that takes in a list of integers representing the daily sales and returns the index of the day with the highest sales. If there are multiple days with the highest sales, return the first occurrence. # Function Specification: 1. **Function Name**: `day_with_highest_sales` 2. **Parameters**: - `sales_data`: A list of integers, where each integer represents the number of units sold on a particular day. # Requirements: - The function should iterate through the `sales_data` list to find the maximum sales value. - It should return the index of the first occurrence of the highest sales value in the list. # Example Usage: ```python # Example sales data sales_data = [120, 200, 150, 175, 200, 180] # Function call to find the day with the highest sales day = day_with_highest_sales(sales_data) print(day) # Output: 1 (index of the first occurrence of 200) ``` # Additional Notes: - Assume the list `sales_data` is not empty and contains at least one integer. - The function should handle any list length and integer values.","solution":"def day_with_highest_sales(sales_data): Returns the index of the day with the highest sales. In case of multiple days with the highest sales, returns the first occurrence. :param sales_data: List[int] - A list of integers representing daily sales :return: int - The index of the day with the highest sales if not sales_data: return -1 # Indicating that the list is empty max_sales = max(sales_data) return sales_data.index(max_sales)"},{"question":"Create a function named `filter_prime_numbers` that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. # Function Requirements: 1. **Function Name**: `filter_prime_numbers(numbers)` 2. **Inputs**: - A list of integers `numbers`. 3. **Outputs**: - A list of integers containing only the prime numbers from the input list. # Constraints: - A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers, i.e., it has only two distinct positive divisors: 1 and itself. - The numbers in the input list are non-negative integers. # Example Usage: ```python primes = filter_prime_numbers([10, 15, 3, 7, 11, 28, 29]) print(\\"Prime Numbers:\\", primes) # Output: # Prime Numbers: [3, 7, 11, 29] ``` By successfully completing this function, you will demonstrate your ability to implement basic number theory and filtering techniques in Python.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # all other even numbers are not primes for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_prime_numbers(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"You need to implement a function `find_max_product_of_triplets(lst)` that computes the maximum product of any three distinct numbers from a list of integers. This is useful in various algorithmic problems where you want to maximize the product formed by selecting three numbers from the list. The function should sort the list of integers first and then consider two possible maximum products: 1. The product of the three largest numbers. 2. The product of the two smallest numbers and the largest number (this handles the case where the two smallest numbers are negative and their product is positive). The function should return the higher of the two computed products. Specifically, you need to: 1. Sort the list. 2. Compute the product of the three largest numbers. 3. Compute the product of the two smallest numbers and the largest number. 4. Return the maximum of the two computed products. Here is the function signature you need to implement: ```python def find_max_product_of_triplets(lst): lst.sort() max_product_1 = lst[-1] * lst[-2] * lst[-3] max_product_2 = lst[0] * lst[1] * lst[-1] return max(max_product_1, max_product_2) ``` **Requirements:** - You must sort the list using the `sort()` method. - You must compute both possible products and return the maximum of the two. - You can assume the input list contains at least three integers.","solution":"def find_max_product_of_triplets(lst): Returns the maximum product of any three distinct numbers from the list `lst`. # Sorting the list first lst.sort() # Computing the product of the three largest numbers max_product_1 = lst[-1] * lst[-2] * lst[-3] # Computing the product of the two smallest numbers and the largest number max_product_2 = lst[0] * lst[1] * lst[-1] # Returning the maximum of the two computed products return max(max_product_1, max_product_2)"},{"question":"You are required to write a Python function named `calculate_reading_time` that estimates the time it would take to read a given text. This problem will help you practice using string manipulation and basic math operations. Here\'s what your function should do: 1. Calculate the total number of words in the provided text. 2. Assume the average reading speed is 200 words per minute. 3. Calculate the reading time in minutes and return it as an integer value. Function Signature: ```python def calculate_reading_time(text: str) -> int: # Your code here ``` **Example:** ```python text = \\"This is a sample text to test the reading time calculation.\\" reading_time = calculate_reading_time(text) print(reading_time) # Expected Output: 1 ``` # Requirements: - Split the text by spaces to count the number of words. - Use an average reading speed of 200 words per minute. - Return the reading time as an integer value. If the reading time is a fraction, round up to the next whole number.","solution":"import math def calculate_reading_time(text: str) -> int: Calculates the reading time in minutes for the given text assuming a reading speed of 200 words per minute. Parameters: text (str): The text to calculate the reading time for. Returns: int: The reading time in minutes. words = text.split() total_words = len(words) words_per_minute = 200 reading_time = math.ceil(total_words / words_per_minute) return reading_time"},{"question":"# Problem Statement You are tasked with designing a function that processes sales transaction data to calculate total sales and average transaction value for a given store, filtered by a specified date range and optionally by product category. The data is stored in a CSV file which contains transaction details including date, store ID, product category, and transaction amount. # Data The CSV file contains the following columns: - `Date`: The date of the transaction in the format `YYYY-MM-DD`. - `Store ID`: An identifier for the store. - `Product Category`: The category of the product sold. - `Transaction Amount`: The amount of the transaction. # Function Specification Create a function named `process_sales_data`. This function should: 1. Load the transaction data from the CSV file into a Pandas DataFrame. 2. Filter the data based on the given store ID, date range, and optionally by product category. 3. Calculate the total sales and average transaction value for the specified filters. 4. Return the results as a dictionary with keys `total_sales` and `average_transaction`. # Function Signature ```python def process_sales_data(file_path: str, store_id: int, start_date: str, end_date: str, product_category: str = None) -> dict: Processes sales data and calculates total sales and average transaction value within a specified date range and store. Args: file_path (str): File path of the CSV file containing transaction data. store_id (int): The ID of the store to filter by. start_date (str): The start date of the range to filter by (inclusive) in `YYYY-MM-DD` format. end_date (str): The end date of the range to filter by (inclusive) in `YYYY-MM-DD` format. product_category (str, optional): The product category to filter by. Defaults to None. Returns: dict: A dictionary containing \'total_sales\' and \'average_transaction\' values. pass ``` # Definitions - `file_path`: A string representing the file path to the CSV file containing sales transaction data. - `store_id`: An integer representing the store ID of the store to filter by. - `start_date`: A string in `YYYY-MM-DD` format representing the start date of the date range to filter by. - `end_date`: A string in `YYYY-MM-DD` format representing the end date of the date range to filter by. - `product_category`: An optional string representing the product category to filter by. If not provided, no product category filter should be applied. # Example Usage ```python result = process_sales_data(\'transactions.csv\', 101, \'2023-01-01\', \'2023-01-31\', \'Electronics\') ``` This should return a dictionary with the total sales and average transaction value for store ID 101, within the date range January 1, 2023 to January 31, 2023, and for the product category \'Electronics\'. **Hint**: Use `pandas.read_csv` to load the CSV data into a DataFrame. Utilize `pandas` filtering capabilities to filter the DataFrame based on the provided criteria and calculate the required statistics.","solution":"import pandas as pd def process_sales_data(file_path: str, store_id: int, start_date: str, end_date: str, product_category: str = None) -> dict: Processes sales data and calculates total sales and average transaction value within a specified date range and store. Args: file_path (str): File path of the CSV file containing transaction data. store_id (int): The ID of the store to filter by. start_date (str): The start date of the range to filter by (inclusive) in `YYYY-MM-DD` format. end_date (str): The end date of the range to filter by (inclusive) in `YYYY-MM-DD` format. product_category (str, optional): The product category to filter by. Defaults to None. Returns: dict: A dictionary containing \'total_sales\' and \'average_transaction\' values. # Load CSV data into a DataFrame df = pd.read_csv(file_path) # Convert \'Date\' column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter by store ID df = df[df[\'Store ID\'] == store_id] # Filter by date range df = df[(df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date)] # Filter by product category if provided if product_category: df = df[df[\'Product Category\'] == product_category] # Calculate total sales total_sales = df[\'Transaction Amount\'].sum() # Calculate average transaction value average_transaction = df[\'Transaction Amount\'].mean() if not df.empty else 0.0 return { \'total_sales\': total_sales, \'average_transaction\': average_transaction }"},{"question":"Create a function named `merge_and_sort_strings` that merges two lists of strings, removes any duplicates, and returns the result as a single sorted list of strings. The function should ensure that the strings are compared in a case-insensitive manner during the whole process. The function signature is: ```python def merge_and_sort_strings(list1: List[str], list2: List[str]) -> List[str]: ``` - `list1`: The first list of strings. - `list2`: The second list of strings. The function should perform the following tasks: 1. Merge `list1` and `list2` into a single list. 2. Remove any duplicate strings from the merged list, ensuring the comparison is case-insensitive. 3. Sort the final list of unique strings in a case-insensitive manner. 4. Return the sorted list. Example input lists: ```python list1 = [\\"banana\\", \\"Apple\\", \\"orange\\"] list2 = [\\"apple\\", \\"Grape\\", \\"Banana\\", \\"kiwi\\"] ``` Expected output list: ```python [\\"apple\\", \\"banana\\", \\"Grape\\", \\"kiwi\\", \\"orange\\"] ``` Note: Usage of data structures and string manipulation functions available in Python\'s standard library is encouraged.","solution":"from typing import List def merge_and_sort_strings(list1: List[str], list2: List[str]) -> List[str]: Merges two lists of strings, removes duplicates, and sorts the final list in a case-insensitive manner. Parameters: list1 (List[str]): The first list of strings. list2 (List[str]): The second list of strings. Returns: List[str]: The sorted list of unique strings. # Combine both lists combined_list = list1 + list2 # Create a set to remove duplicates, comparing strings in a case-insensitive manner unique_strings = set(map(str.lower, combined_list)) # Sort the strings in a case-insensitive manner and return as a list sorted_list = sorted(unique_strings, key=str.lower) return sorted_list"},{"question":"You are given an array of integers `nums` and an integer `k`. Your task is to write a program that returns the `k^th` largest element in the array. Note that it is the `k^th` largest element in the sorted order, not the `k^th` distinct element. You must use a min-heap to solve this problem efficiently. **Function Signature:** ```python def findKthLargest(nums: List[int], k: int) -> int: pass ``` **Input:** - `nums`: A list of integers. - `k`: An integer representing the position of the largest element to find. **Output:** - An integer representing the `k^th` largest element in the array. **Constraints:** - (1 leq k leq text{length of } nums leq 10^4) - (-10^4 leq text{nums[i]} leq 10^4) **Example:** ```python nums = [3, 2, 1, 5, 6, 4] k = 2 result = findKthLargest(nums, k) print(result) # Output: 5 nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 result = findKthLargest(nums, k) print(result) # Output: 4 ``` **Explanation:** The `findKthLargest` function should return the `k^th` largest element in the array `nums`. Utilizing a min-heap will help you achieve an efficient solution.","solution":"import heapq from typing import List def findKthLargest(nums: List[int], k: int) -> int: Finds the k^th largest element in the given list using a min-heap. # Initiate a min-heap with the first k elements of nums heap = nums[:k] heapq.heapify(heap) # Iterate over the remaining elements for num in nums[k:]: if num > heap[0]: heapq.heappushpop(heap, num) # The root of the min-heap is the k^th largest element return heap[0]"},{"question":"You need to create a function that simulates the stock prices and determines the maximum profit one can achieve by buying and selling a stock only once. The function should take a list of prices, where each element represents the stock price for a specific day. The function you need to write is `max_profit(prices)`, where: - `prices`: A list of integers representing the stock prices on different days. This function should perform the following steps: 1. Iterate through the list of prices. 2. Determine the minimum price observed so far. 3. Calculate the potential profit for each price by subtracting the current price from the minimum price observed. 4. Keep track of the maximum profit encountered during the iteration. The function should return the maximum profit that can be achieved. If no profit is possible, return 0. **Example:** ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 ``` **Requirements:** - The function should handle an empty list and return 0. - The time complexity should be O(n), where n is the length of the prices list. - The space complexity should be O(1). ```python def max_profit(prices): if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit # Example usage: prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 ```","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are required to write a function that takes in time-series data and calculates rolling window statistics. This is a common technique used in data analysis for smoothing out short-term fluctuations and highlighting longer-term trends or cycles. **Function Name**: `calculate_rolling_statistics` **Function Role**: The function `calculate_rolling_statistics` takes as input a pandas DataFrame and processes it to return three arrays corresponding to the rolling mean, rolling median, and rolling standard deviation within the specified window size. The DataFrame provided to the function is expected to have at least one column named `values`, which contains the time-series data. You should use the rolling window feature of pandas to compute these statistics. **Parameters**: - `data_df` (pd.DataFrame): The input DataFrame with at least one column `values`. - `window_size` (int): The size of the rolling window. **Output Arrays**: 1. `rolling_mean`: The rolling mean values of the time-series data. 2. `rolling_median`: The rolling median values of the time-series data. 3. `rolling_std`: The rolling standard deviation values of the time-series data. **Example Input DataFrame**: ```plaintext values 0 10 1 20 2 15 3 25 4 30 ``` **Assume window_size = 3**: **Expected Outputs**: - `rolling_mean`: array of rolling mean values. - `rolling_median`: array of rolling median values. - `rolling_std`: array of rolling standard deviation values. **Complete Function Specification**: ```python import pandas as pd import numpy as np def calculate_rolling_statistics(data_df, window_size): This function takes a pandas DataFrame and a window size, then computes the rolling mean, rolling median, and rolling standard deviation for the \'values\' column. Parameters: data_df (pd.DataFrame): The input DataFrame with at least one column \'values\'. window_size (int): The size of the rolling window. Returns: rolling_mean (numpy.ndarray): The rolling mean values. rolling_median (numpy.ndarray): The rolling median values. rolling_std (numpy.ndarray): The rolling standard deviation values. rolling_mean = data_df[\'values\'].rolling(window=window_size).mean().to_numpy() rolling_median = data_df[\'values\'].rolling(window=window_size).median().to_numpy() rolling_std = data_df[\'values\'].rolling(window=window_size).std().to_numpy() return rolling_mean, rolling_median, rolling_std ```","solution":"import pandas as pd import numpy as np def calculate_rolling_statistics(data_df, window_size): This function takes a pandas DataFrame and a window size, then computes the rolling mean, rolling median, and rolling standard deviation for the \'values\' column. Parameters: data_df (pd.DataFrame): The input DataFrame with at least one column \'values\'. window_size (int): The size of the rolling window. Returns: rolling_mean (numpy.ndarray): The rolling mean values. rolling_median (numpy.ndarray): The rolling median values. rolling_std (numpy.ndarray): The rolling standard deviation values. rolling_mean = data_df[\'values\'].rolling(window=window_size).mean().to_numpy() rolling_median = data_df[\'values\'].rolling(window=window_size).median().to_numpy() rolling_std = data_df[\'values\'].rolling(window=window_size).std().to_numpy() return rolling_mean, rolling_median, rolling_std"},{"question":"In this problem, you will write a function called `merge_dicts` that takes a list of dictionaries and merges them into a single dictionary. If there are duplicate keys, the values should be merged into a list, maintaining the order they appeared in. The function definition is as follows: ```python def merge_dicts(dict_list: list): Merges a list of dictionaries into a single dictionary. Collates values into lists for duplicate keys. Parameters: dict_list (list): A list of dictionaries to be merged. Returns: dict: A single dictionary with all the keys from the input dictionaries. For duplicate keys, the values appear as lists in the same order as they appeared in dict_list. ``` # Input: - `dict_list` (list): A list of dictionaries. # Output: - A single dictionary with merged key-value pairs. For duplicate keys, the values will be merged into a list. # Example: ```python dict_list = [ {\\"a\\": 1, \\"b\\": 2}, {\\"b\\": 3, \\"c\\": 4}, {\\"a\\": 5, \\"d\\": 6} ] result = merge_dicts(dict_list) print(result) ``` Expected Output: ```python { \\"a\\": [1, 5], \\"b\\": [2, 3], \\"c\\": [4], \\"d\\": [6] } ``` Your task is to implement the function `merge_dicts` as described.","solution":"def merge_dicts(dict_list): Merges a list of dictionaries into a single dictionary. Collates values into lists for duplicate keys. Parameters: dict_list (list): A list of dictionaries to be merged. Returns: dict: A single dictionary with all the keys from the input dictionaries. For duplicate keys, the values appear as lists in the same order as they appeared in dict_list. merged_dict = {} for d in dict_list: for key, value in d.items(): if key in merged_dict: if isinstance(merged_dict[key], list): merged_dict[key].append(value) else: merged_dict[key] = [merged_dict[key], value] else: merged_dict[key] = value # Ensure all values are lists for key in merged_dict: if not isinstance(merged_dict[key], list): merged_dict[key] = [merged_dict[key]] return merged_dict"},{"question":"You are required to write a Python function `find_missing_numbers` that finds the missing integers in an unsorted list. The function should identify all the missing integers within the range defined by the minimum and maximum integers in the list. # Function Signature ```python def find_missing_numbers(nums: list) -> list: ``` # Parameters - `nums` (list): A list of integers that may contain duplicates and is not sorted. # Returns - `list`: A sorted list of missing integers within the range `[min(nums), max(nums)]`. # Requirements - The function should handle cases where the input list is empty by returning an empty list. - Use Python\'s built-in functions and data structures for efficient computation. # Example ```python nums = [3, 7, 1, 9, 4] # The minimum number is 1, and the maximum is 9. # The complete range is [1, 9]. # The numbers 2, 5, 6, and 8 are missing. print(find_missing_numbers(nums)) # Output: [2, 5, 6, 8] another_list = [15, 22, 26, 19] # The minimum number is 15, and the maximum is 26. # The complete range is [15, 26]. # The numbers 16, 17, 18, 20, 21, 23, 24, and 25 are missing. print(find_missing_numbers(another_list)) # Output: [16, 17, 18, 20, 21, 23, 24, 25] ```","solution":"def find_missing_numbers(nums: list) -> list: Identifies all the missing integers within the range defined by the minimum and maximum integers in the list. Parameters: nums (list): A list of integers that may contain duplicates and is not sorted. Returns: list: A sorted list of missing integers within the range [min(nums), max(nums)]. if not nums: # If the list is empty, return an empty list return [] min_num = min(nums) max_num = max(nums) full_range_set = set(range(min_num, max_num + 1)) nums_set = set(nums) missing_numbers = sorted(full_range_set - nums_set) return missing_numbers"},{"question":"# Palindrome Partitioning with Dynamic Programming In this problem, you are asked to implement a Python function `min_palindrome_partitions` that calculates the minimum number of cuts needed to partition a given string such that every substring is a palindrome. The problem strengthens your understanding of dynamic programming in string manipulation and partitioning. # Function Signature ```python def min_palindrome_partitions(s: str) -> int: pass ``` # Input 1. `s` (String): A non-empty string consisting of lowercase English letters. # Output An integer representing the minimum number of cuts needed to partition the string into substrings, each of which is a palindrome. # Libraries to Use - No external libraries are needed. # Special Requirements 1. Use dynamic programming to efficiently solve the problem. 2. Create a helper function to check if a substring is a palindrome in O(1) time. 3. The solution should showcase proficiency in dynamic programming and handling of substrings. # Example ```python s = \\"aab\\" min_palindrome_partitions(s) ``` Example Output ``` 1 ``` _Explanation:_ The string \\"aab\\" can be partitioned into \\"aa\\" and \\"b\\" with one cut. Both \\"aa\\" and \\"b\\" are palindromes. # Problem Constraints - The length of the input string (`s`) will be at least 1 and at most 1000. # Instructions 1. Use dynamic programming to precompute a matrix `is_palindrome` where `is_palindrome[i][j]` is `True` if the substring `s[i:j+1]` is a palindrome. 2. Use the precomputed `is_palindrome` matrix to create a `cuts` array where `cuts[i]` represents the minimum number of cuts needed for the substring `s[0:i+1]`. 3. Calculate the minimum cuts in a manner that utilizes the `is_palindrome` matrix for efficient checking. 4. Ensure the function returns the minimum number of cuts required.","solution":"def min_palindrome_partitions(s: str) -> int: Returns the minimum number of cuts needed to partition the string such that every substring is a palindrome. n = len(s) # Create a 2D array to check if a substring is palindrome is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True # Every single character is a palindrome for length in range(2, n + 1): # Substring lengths from 2 to n for start in range(n - length + 1): end = start + length - 1 if length == 2: is_palindrome[start][end] = (s[start] == s[end]) else: is_palindrome[start][end] = (s[start] == s[end] and is_palindrome[start + 1][end - 1]) # Create an array to store the minimum cuts cuts = [0] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 else: min_cuts = float(\\"inf\\") for j in range(i): if is_palindrome[j + 1][i] and cuts[j] + 1 < min_cuts: min_cuts = cuts[j] + 1 cuts[i] = min_cuts return cuts[n - 1]"},{"question":"Implement a function that takes a list of dictionaries and aggregates the values by a specified key. If multiple dictionaries have the same key value, their numeric values should be summed, and non-numeric values should be concatenated into a list. Assume all dictionaries have the same structure. The function should return: list of dicts: A list of dictionaries with aggregated values. You should write self-contained code starting with: ``` def aggregate_dicts(dicts, aggregate_key): ``` Example: ``` input = [ {\\"id\\": 1, \\"value\\": 10, \\"name\\": \\"Alice\\"}, {\\"id\\": 2, \\"value\\": 20, \\"name\\": \\"Bob\\"}, {\\"id\\": 1, \\"value\\": 5, \\"name\\": \\"Alice\\"}, {\\"id\\": 3, \\"value\\": 8, \\"name\\": \\"Charlie\\"}, {\\"id\\": 2, \\"value\\": 7, \\"name\\": \\"Bob\\"} ] output = [ {\\"id\\": 1, \\"value\\": 15, \\"name\\": [\\"Alice\\", \\"Alice\\"]}, {\\"id\\": 2, \\"value\\": 27, \\"name\\": [\\"Bob\\", \\"Bob\\"]}, {\\"id\\": 3, \\"value\\": 8, \\"name\\": [\\"Charlie\\"]} ] ```","solution":"def aggregate_dicts(dicts, aggregate_key): Aggregates the values of a list of dictionaries by the specified key. Parameters: dicts (list): A list of dictionaries with the same structure. aggregate_key (str): The key used for aggregation. Returns: list of dicts: A list of dictionaries with aggregated values. aggregated = {} for d in dicts: key = d[aggregate_key] if key not in aggregated: aggregated[key] = {aggregate_key: key} for k, v in d.items(): if k != aggregate_key: if isinstance(v, (int, float)): aggregated[key][k] = v else: aggregated[key][k] = [v] else: for k, v in d.items(): if k != aggregate_key: if isinstance(v, (int, float)): aggregated[key][k] += v else: aggregated[key][k].append(v) return list(aggregated.values())"},{"question":"Design an Algorithm to Simulate the Game of Life # Introduction The Game of Life is a cellular automaton devised by the mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, with no further input required. The universe of the Game of Life is an infinite, two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, alive or dead, or populated or unpopulated. Every cell interacts with its eight neighbors, which are the cells that are directly horizontally, vertically, or diagonally adjacent. # Rules At each step in time, the following transitions occur: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. # Task You are required to implement a function `game_of_life(board)` to simulate the Game of Life. The function takes a 2D list (list of lists) representing the initial state of the board, where 1 represents a live cell and 0 represents a dead cell. The function modifies the board in-place to represent the next state of the game. Parameters: - `board`: List[List[int]] - 2D list representing the initial state of the game board. Returns: - None **Rules to follow in the implementation**: 1. You must update the board in-place, which means do not create a new board for the next state. 2. You may not receive or return any values; just modify the input `board`. # Example ```python def game_of_life(board): rows = len(board) cols = len(board[0]) # Create a copy of the original board copy_board = [[board[row][col] for col in range(cols)] for row in range(rows)] # Directions representing the 8 neighbors directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for row in range(rows): for col in range(cols): live_neighbors = 0 for direction in directions: r = row + direction[0] c = col + direction[1] if (0 <= r < rows) and (0 <= c < cols) and (copy_board[r][c] == 1): live_neighbors += 1 if copy_board[row][col] == 1: # Live cell if live_neighbors < 2 or live_neighbors > 3: board[row][col] = 0 else: # Dead cell if live_neighbors == 3: board[row][col] = 1 # Example usage: initial_board = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] game_of_life(initial_board) # After one iteration, the board will be updated to: # [ # [0, 0, 0], # [1, 0, 1], # [0, 1, 1], # [0, 1, 0] # ] print(initial_board) ``` # Explanation In the example, the initial board is represented by a 2D list. The function simulates one iteration of the Game of Life and updates the board in place. The print statement at the end will show the new state of the board after running the `game_of_life` function, according to Conway\'s rules described above.","solution":"def game_of_life(board): Simulates one iteration of the Game of Life, updating the board in place. :param board: List[List[int]] - 2D list representing the initial state of the game board. rows = len(board) cols = len(board[0]) # Create a copy of the original board copy_board = [[board[row][col] for col in range(cols)] for row in range(rows)] # Directions representing the 8 neighbors directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for row in range(rows): for col in range(cols): live_neighbors = 0 for direction in directions: r = row + direction[0] c = col + direction[1] if (0 <= r < rows) and (0 <= c < cols) and (copy_board[r][c] == 1): live_neighbors += 1 if copy_board[row][col] == 1: # Live cell if live_neighbors < 2 or live_neighbors > 3: board[row][col] = 0 else: # Dead cell if live_neighbors == 3: board[row][col] = 1"},{"question":"You are required to write a Python function named `transform_data` that receives a list of dictionaries and performs several data transformations. Specifically, the function should normalize the values associated with a specified key, compute the cumulative sum based on another key, and filter out dictionaries where a certain key\'s value falls below a specified threshold. **Function Signature:** ```python def transform_data(data: List[Dict[str, Any]], normalize_key: str, cumsum_key: str, filter_key: str, threshold: float) -> List[Dict[str, Any]]: ``` **Input:** - `data`: A list of dictionaries, where each dictionary contains key-value pairs of data. - `normalize_key`: A string representing the key whose values need to be normalized. - `cumsum_key`: A string representing the key whose cumulative sum needs to be computed. - `filter_key`: A string representing the key based on which the data needs to be filtered. - `threshold`: A floating-point number representing the threshold value for filtering. **Output:** - A list of dictionaries, with the following transformations applied: - Normalization: Normalize the values of `normalize_key` such that they range between 0 and 1. - Cumulative Sum: Compute the cumulative sum of values under `cumsum_key`. - Filtering: Remove any dictionaries where the value associated with `filter_key` is below `threshold`. **Requirements:** - Ensure that the normalized values for `normalize_key` lie within the range [0, 1]. - The cumulative sum for `cumsum_key` should be computed incrementally across the list. - Filtering should be done before applying normalization and cumulative sum operations. - Assume the input list of dictionaries is non-empty and contains valid data. **Example Usage:** ```python data = [ {\\"id\\": 1, \\"value\\": 10, \\"score\\": 5, \\"amount\\": 100}, {\\"id\\": 2, \\"value\\": 20, \\"score\\": 6, \\"amount\\": 200}, {\\"id\\": 3, \\"value\\": 30, \\"score\\": 4, \\"amount\\": 300}, {\\"id\\": 4, \\"value\\": 40, \\"score\\": 8, \\"amount\\": 400} ] result = transform_data(data, \\"value\\", \\"amount\\", \\"score\\", 5) print(result) # Example output: # [ # {\\"id\\": 1, \\"value\\": 0.0, \\"score\\": 5, \\"amount\\": 100}, # {\\"id\\": 2, \\"value\\": 0.333, \\"score\\": 6, \\"amount\\": 300}, # {\\"id\\": 4, \\"value\\": 1.0, \\"score\\": 8, \\"amount\\": 700} # ] ``` Implement the function `transform_data` to achieve the specified transformations on the given dataset.","solution":"from typing import List, Dict, Any def transform_data(data: List[Dict[str, Any]], normalize_key: str, cumsum_key: str, filter_key: str, threshold: float) -> List[Dict[str, Any]]: # Step 1: Filter the data filtered_data = [d for d in data if d[filter_key] >= threshold] # Step 2: Normalize the values of normalize_key normalize_values = [d[normalize_key] for d in filtered_data] min_val = min(normalize_values) max_val = max(normalize_values) value_range = max_val - min_val if value_range == 0: normalized_data = [{**d, normalize_key: 0.0} for d in filtered_data] else: normalized_data = [{**d, normalize_key: (d[normalize_key] - min_val) / value_range} for d in filtered_data] # Step 3: Compute the cumulative sum of cumsum_key cumulative_sum = 0 for d in normalized_data: cumulative_sum += d[cumsum_key] d[cumsum_key] = cumulative_sum return normalized_data"},{"question":"Design a function `find_common_elements` that takes two lists of integers and returns a list containing all the elements that are common to both lists, without duplicates, and sorted in ascending order. Function Signature: ```python def find_common_elements(list1: List[int], list2: List[int]) -> List[int]: ``` Parameters: 1. `list1` (List[int]): The first list of integers. 2. `list2` (List[int]): The second list of integers. Return: - Returns a list of integers that are present in both `list1` and `list2`, sorted in ascending order. Tasks: 1. Identify the common elements between the two lists. 2. Remove any duplicate elements from the result. 3. Sort the result in ascending order. Example Usage: ```python list1 = [4, 5, 6, 7, 8] list2 = [5, 6, 7, 8, 9, 10] result = find_common_elements(list1, list2) print(result) # Output: [5, 6, 7, 8] ```","solution":"def find_common_elements(list1, list2): Return a list containing all the elements that are common to both list1 and list2, without duplicates, and sorted in ascending order. # Convert lists to sets and find intersection common_set = set(list1) & set(list2) # Convert the set back to a sorted list common_list = sorted(list(common_set)) return common_list"},{"question":"You are developing a utility function `normalize_price` that takes a price value in various formats and converts it to a standardized decimal format. The function should handle different price formats including integers, floats, and strings with or without currency symbols. The function should: 1. Accept a single parameter `price` which can be of type `int`, `float`, or `str`. 2. If `price` is an integer or float, return it directly as a float rounded to two decimal places. 3. If `price` is a string, remove any leading currency symbols (\'\' or \'€\') and any commas in the number. 4. Convert the stripped string to a float and round it to two decimal places. 5. If the `price` value is missing, None, or an unrecognized format, return None. Here is the function signature: ```python def normalize_price(price: Union[int, float, str]) -> Optional[float]: # Your code here ``` # Example Usage: ```python print(normalize_price(123)) # Output: 123.00 print(normalize_price(123.456)) # Output: 123.46 print(normalize_price(\\"1,234.56\\")) # Output: 1234.56 print(normalize_price(\\"€1,234.56\\")) # Output: 1234.56 print(normalize_price(\\"abcd\\")) # Output: None print(normalize_price(None)) # Output: None ``` Use the following libraries to accomplish the task: - `re`","solution":"import re from typing import Union, Optional def normalize_price(price: Union[int, float, str]) -> Optional[float]: if isinstance(price, (int, float)): return round(float(price), 2) elif isinstance(price, str): # Remove currency symbols and commas price = re.sub(r\'[^d.]\', \'\', price) try: return round(float(price), 2) except ValueError: return None return None"},{"question":"Create a function named `compare_vehicle_efficiency` that generates a line plot illustrating the fuel efficiency (in miles per gallon, MPG) of three different car models over a span of years. The line plot should include appropriate titles, labels, and a legend. Save the plot as a PNG file with the filename provided. The input to the function is: - `CarModels` (dictionary): A dictionary where keys are car model names (strings) and values are dictionaries. Each inner dictionary has keys as years (integers) and values as fuel efficiencies (floats) for the corresponding year. - `Title` (string): The title of the plot. - `Filename` (string): The name of the file where the plot should be saved (in PNG format). Use the `matplotlib.pyplot` library to create the plot and control the aesthetics. Function Signature: ```python def compare_vehicle_efficiency(CarModels: dict, Title: str, Filename: str) -> None: ``` Example: ```python CarModels = { \'Model A\': {2010: 25.0, 2011: 26.0, 2012: 27.5, 2013: 28.0, 2014: 29.0}, \'Model B\': {2010: 22.0, 2011: 23.2, 2012: 24.0, 2013: 25.0, 2014: 26.5}, \'Model C\': {2010: 30.0, 2011: 31.5, 2012: 32.0, 2013: 33.0, 2014: 34.0} } Title = \'Fuel Efficiency Over Years\' Filename = \'vehicle_efficiency.png\' compare_vehicle_efficiency(CarModels, Title, Filename) ``` Expected Output: A PNG file named `vehicle_efficiency.png` saved to the working directory, displaying a line plot with years on the x-axis and fuel efficiency (MPG) on the y-axis. Each car model should be represented with a distinct line, and a legend should indicate which line corresponds to which car model. The plot should also have an appropriate title and axis labels.","solution":"import matplotlib.pyplot as plt def compare_vehicle_efficiency(CarModels, Title, Filename): Generates a line plot illustrating the fuel efficiency (in MPG) of different car models over years. The plot is saved as a PNG file with the provided filename. Params: CarModels (dict): Car model names as keys, and values are dictionaries with years as keys and efficiencies as values. Title (str): Title of the plot. Filename (str): Name of the file to save the plot (PNG format). Returns: None plt.figure() for model, data in CarModels.items(): years = sorted(data.keys()) efficiencies = [data[year] for year in years] plt.plot(years, efficiencies, label=model) plt.title(Title) plt.xlabel(\'Year\') plt.ylabel(\'Fuel Efficiency (MPG)\') plt.legend() plt.grid(True) plt.savefig(Filename) plt.close()"},{"question":"You are tasked with creating a function that returns the largest product of any three numbers from a given list of integers. The function should be named `largest_product_of_three` and should take a single argument: - `numbers` (List[int]): A list of integers, which may contain both positive and negative integers as well as duplicates. Requirements: - The function should return an integer representing the largest product of any three numbers from the list. - You are not allowed to sort the entire list, but you can extract the necessary elements using other methods. - Maintain an optimal time and space complexity. To help with your implementation, here’s a sample input and expected output: ```python def largest_product_of_three(numbers: List[int]) -> int: # Your code here # Example usage: print(largest_product_of_three([1, 10, 2, 6, 5, 3])) # Output should be 300 (10 * 6 * 5) print(largest_product_of_three([-10, -10, 5, 2])) # Output should be 500 (-10 * -10 * 5) ``` The task is to complete the function `largest_product_of_three` to ensure that it returns the correct largest product for any provided list of integers.","solution":"from typing import List def largest_product_of_three(numbers: List[int]) -> int: if len(numbers) < 3: raise ValueError(\\"The input list must contain at least three integers.\\") # Initialize minimum and maximum elements max1 = max2 = max3 = float(\'-inf\') min1 = min2 = float(\'inf\') # Traverse the list only once for number in numbers: # Update the three largest values if number > max1: max3 = max2 max2 = max1 max1 = number elif number > max2: max3 = max2 max2 = number elif number > max3: max3 = number # Update the two smallest values if number < min1: min2 = min1 min1 = number elif number < min2: min2 = number # The maximum product of three numbers can be of form: # 1. The product of the three largest numbers. # 2. The product of the largest number and the two smallest numbers (could be negative). return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"You are tasked with implementing a recommendation system for a small e-commerce website. The system should suggest products to users based on their purchase history. The goal is to write a function named `recommend_products` that performs the following operations: 1. **Convert the input list `purchases` into a Pandas DataFrame.** 2. **Create a co-purchase matrix, where each element `(i, j)` represents the number of times product `i` and product `j` were purchased together.** 3. **For each user in the `target_users` list, recommend the top N products that they have not purchased yet but are frequently co-purchased with the products they have previously purchased.** 4. **If a user has not purchased any products yet, recommend the top N globally most purchased products.** Given: - `purchases`: A list of tuples where each tuple consists of a user ID and a product ID representing a purchase made by the user (e.g., [(user1, productA), (user1, productB), (user2, productA), ...]). - `target_users`: A list of user IDs for whom you need to generate product recommendations. - `N`: The number of product recommendations to be generated for each user. Your function should return a dictionary where each key is a user ID from `target_users` and the value is a list of recommended product IDs. **Function Signature:** ```python import pandas as pd def recommend_products(purchases, target_users, N): pass ``` # Example ```python purchases = [ (1, \'A\'), (1, \'B\'), (2, \'A\'), (2, \'C\'), (3, \'B\'), (3, \'D\'), (4, \'A\'), (4, \'B\'), (4, \'C\'), (5, \'A\'), (5, \'C\') ] target_users = [1, 2, 6] N = 2 result = recommend_products(purchases, target_users, N) print(result) # Expected Output (example considering co-purchases): # { # 1: [\'C\', \'D\'], # 2: [\'B\', \'D\'], # 6: [\'A\', \'B\'] # } ``` # Constraints - Use Pandas for DataFrame operations. - Assume that the product IDs and user IDs are integers or strings that can be directly compared. - Handle cases where users in `target_users` may not have any purchases. - The recommendations should be based on the frequency of co-purchase; in case of a tie, sort the products by product ID.","solution":"import pandas as pd def recommend_products(purchases, target_users, N): # Convert the purchases list into a Pandas DataFrame. df = pd.DataFrame(purchases, columns=[\'user_id\', \'product_id\']) # Create the co-purchase matrix. # Step 1: Create a DataFrame where each row represents a user and the products they purchased. user_product_matrix = df.pivot_table(index=\'user_id\', columns=\'product_id\', aggfunc=\'size\', fill_value=0) # Step 2: Create the co-purchase matrix. co_purchase_matrix = user_product_matrix.T.dot(user_product_matrix) # Remove the diagonal values where a product is co-purchased with itself. for product in co_purchase_matrix.columns: co_purchase_matrix.loc[product, product] = 0 # Sum the total purchases of each product to use in case a user has no previous purchases. product_popularity = df[\'product_id\'].value_counts().sort_index() recommendations = {} for user in target_users: if user not in user_product_matrix.index: # If user has no purchases, recommend the top N globally popular products. recommendations[user] = list(product_popularity.nlargest(N).index) else: # Get the products the user has purchased. purchased_products = user_product_matrix.loc[user] purchased_products = purchased_products[purchased_products > 0].index.tolist() # Calculate co-purchase scores for the products the user has not yet purchased. user_product_scores = co_purchase_matrix[purchased_products].sum(axis=1).sort_values(ascending=False) # Remove the products already purchased by the user from the recommendations. user_product_scores = user_product_scores.drop(purchased_products) # Recommend the top N products. recommendations[user] = list(user_product_scores.head(N).index) return recommendations"},{"question":"You are given a list of transactions for an online store. Each transaction is represented by a dictionary containing the following keys: `id`, `customer_name`, `total_amount`, and `status`. The `status` key can have the values \\"completed\\", \\"pending\\", or \\"failed\\". Your task is to implement a function named `filter_and_sort_transactions` that filters out all transactions with a `status` of \\"failed\\" or \\"pending\\" and then sorts the remaining transactions based on the `total_amount` in descending order. The function should take a list of transaction dictionaries as input and return a new list of filtered and sorted transactions. Your code skeleton looks like this: ```python def filter_and_sort_transactions(transactions): Filters out failed and pending transactions, then sorts the remaining transactions by total_amount in descending order. # Implement your code here ``` **Input:** - `transactions`: A list of dictionaries where each dictionary represents a transaction. (e.g., `[{\'id\': 1, \'customer_name\': \'Alice\', \'total_amount\': 100.5, \'status\': \'completed\'}, ...]`) **Output:** - A list of filtered and sorted transaction dictionaries based on the conditions specified. **Example:** ```python transactions = [ {\'id\': 1, \'customer_name\': \'Alice\', \'total_amount\': 100.5, \'status\': \'completed\'}, {\'id\': 2, \'customer_name\': \'Bob\', \'total_amount\': 200.0, \'status\': \'pending\'}, {\'id\': 3, \'customer_name\': \'Charlie\', \'total_amount\': 150.75, \'status\': \'completed\'}, {\'id\': 4, \'customer_name\': \'Diana\', \'total_amount\': 50.0, \'status\': \'failed\'}, {\'id\': 5, \'customer_name\': \'Eve\', \'total_amount\': 120.0, \'status\': \'completed\'} ] print(filter_and_sort_transactions(transactions)) # Output: [ # {\'id\': 3, \'customer_name\': \'Charlie\', \'total_amount\': 150.75, \'status\': \'completed\'}, # {\'id\': 5, \'customer_name\': \'Eve\', \'total_amount\': 120.0, \'status\': \'completed\'}, # {\'id\': 1, \'customer_name\': \'Alice\', \'total_amount\': 100.5, \'status\': \'completed\'} # ] ```","solution":"def filter_and_sort_transactions(transactions): Filters out failed and pending transactions, then sorts the remaining transactions by total_amount in descending order. # Filter out transactions with status \'failed\' or \'pending\' filtered_transactions = [ transaction for transaction in transactions if transaction[\'status\'] == \'completed\' ] # Sort the remaining transactions by total_amount in descending order sorted_transactions = sorted(filtered_transactions, key=lambda x: x[\'total_amount\'], reverse=True) return sorted_transactions"},{"question":"You are required to implement a function `fibonacci_divisible` that returns the first number in the Fibonacci sequence that is divisible by a given integer `n`. The Fibonacci sequence is defined as follows: ``` F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n >= 2 ``` Your task is to find the first Fibonacci number that is divisible by `n` and return it. Function Signature: ```python def fibonacci_divisible(n: int) -> int: ``` Requirements: - Start from the beginning of the Fibonacci sequence (including 0 and 1). - Iterate through the sequence to find the first number that is divisible by `n`. - Return this number once found. Constraints: - `n` will be a positive integer between 1 and 1000, inclusive. Examples: ```python assert fibonacci_divisible(2) == 0 # 0 is divisible by any value of n assert fibonacci_divisible(3) == 3 # F(4) = 3, and 3 is divisible by 3 assert fibonacci_divisible(5) == 5 # F(5) = 5, and 5 is divisible by 5 assert fibonacci_divisible(1) == 0 # 0 is divisible by 1 ``` Note: These assert statements should hold true when the function is correctly implemented.","solution":"def fibonacci_divisible(n: int) -> int: Return the first Fibonacci number that is divisible by n. a, b = 0, 1 if n == 1: return 0 # 0 is divisible by 1 while True: if a % n == 0: return a a, b = b, a + b"},{"question":"You are tasked with writing a function that computes the total number of prime factors of a given integer. A prime factor is a prime number that divides another number exactly, without leaving a remainder. Given an integer `n`, you need to write a function called `count_prime_factors(n)` that calculates the number of distinct prime factors of `n`. **Function Signature:** ```python def count_prime_factors(n: int) -> int: pass ``` **Function Requirements:** 1. The function should take in one parameter: - `n` (int): A positive integer for which we need to find the number of prime factors. 2. The function should return an integer which represents the total number of distinct prime factors of the given number. **Example Usage:** ```python print(count_prime_factors(28)) # Expected output: 2 (Prime factors of 28 are 2 and 7) print(count_prime_factors(30)) # Expected output: 3 (Prime factors of 30 are 2, 3, and 5) ``` **Constraints:** - `n` is guaranteed to be a positive integer greater than 1. - You can assume the input will be within the range that can be handled by standard Python integer operations. **Hints:** 1. Consider using a simple method to check if a number is prime. 2. Iterate over potential dividers starting from the smallest prime (2) and check if they divide `n` without a remainder. Ensure not to count the same prime factor multiple times. Good luck!","solution":"def count_prime_factors(n: int) -> int: Returns the number of distinct prime factors of the given integer n. if n <= 1: return 0 prime_factors = set() divisor = 2 while n > 1: if n % divisor == 0: prime_factors.add(divisor) while n % divisor == 0: n //= divisor divisor += 1 return len(prime_factors)"},{"question":"You are working on a utility to process lists of products along with their prices, stored in a text file named \\"products.txt\\". Each line in the text file contains a product name, its category, and its price, separated by a comma. The task is to create a function that categorizes the products, calculates the average price for each category, and then plots these averages using the `matplotlib` library. Your task is to implement a function `plot_average_prices_by_category()` which should read the data from the file, compute the average price for each category, and then plot this information in a bar chart using the `matplotlib` library. Specific requirements: 1. Read the \\"products.txt\\" file and extract the product names, their categories, and prices. 2. Calculate the average price for each category. 3. Use `matplotlib.pyplot.bar` to create a bar chart showing the average price per category. 4. Set the y-axis label to \\"Average Price\\". 5. Set the x-axis label to \\"Category\\". 6. Set the title of the plot to \\"Average Prices by Category\\". 7. Display the plot using `matplotlib.pyplot.show`. Sample partial content of \\"products.txt\\": ``` ProductA,Electronics,299.99 ProductB,Groceries,15.50 ProductC,Electronics,399.99 ProductD,Furniture,120.00 ... ``` **Function Signature:** ```python def plot_average_prices_by_category(): # Your implementation here ``` **","solution":"import matplotlib.pyplot as plt import collections def plot_average_prices_by_category(): # Read the data from the file with open(\'products.txt\', \'r\') as file: lines = file.readlines() category_prices = collections.defaultdict(list) # Process each line for line in lines: # Split each line into product name, category, and price parts = line.strip().split(\',\') if len(parts) == 3: product_name, category, price = parts price = float(price) category_prices[category].append(price) # Calculate average prices for each category avg_prices = {} for category, prices in category_prices.items(): avg_prices[category] = sum(prices) / len(prices) # Plotting using matplotlib categories = list(avg_prices.keys()) averages = list(avg_prices.values()) plt.bar(categories, averages) plt.ylabel(\'Average Price\') plt.xlabel(\'Category\') plt.title(\'Average Prices by Category\') plt.show()"},{"question":"In this problem, you are asked to implement the function `is_bipartite(graph)` which determines if a given graph is bipartite. A graph is bipartite if its vertices can be divided into two disjoint and independent sets `U` and `V` such that every edge connects a vertex in `U` to one in `V`. **Detailed Instructions**: - The graph will be represented using an adjacency list, where `graph` is an instance of a class that contains a dictionary `graph.graph` where keys are nodes and values are lists of nodes to which the key node is connected. - Use Breadth-First Search (BFS) for graph traversal and to verify if the graph is bipartite. - The function should return `True` if the graph is bipartite, and `False` otherwise. **Function Signature**: ```python def is_bipartite(graph): pass ``` **Input**: - `graph`: An instance of a class having an attribute `graph.graph`, which is a dictionary where keys are nodes and values are lists of nodes representing the edges. **Output**: - Returns a boolean value `True` if the graph is bipartite, otherwise `False`. **Example**: ```python class Graph: def __init__(self): self.graph = {} def add_edge(self, u, v): if u not in self.graph: self.graph[u] = [] if v not in self.graph: self.graph[v] = [] self.graph[u].append(v) self.graph[v].append(u) graph = Graph() graph.add_edge(0, 1) graph.add_edge(0, 3) graph.add_edge(1, 2) graph.add_edge(2, 3) result = is_bipartite(graph) print(result) # Output should be True graph.add_edge(2, 0) result = is_bipartite(graph) print(result) # Output should be False ``` Make sure to consider edge cases such as: - Graph with no edges. - Graph with a single node.","solution":"def is_bipartite(graph): Determine if the given graph is bipartite. :param graph: An instance of a class with a graph.graph dictionary. The keys are nodes and the values are lists of adjacent nodes. :return: True if the graph is bipartite, False otherwise. color = {} for start_node in graph.graph: if start_node not in color: queue = [start_node] color[start_node] = 0 while queue: node = queue.pop(0) for neighbor in graph.graph[node]: if neighbor not in color: queue.append(neighbor) color[neighbor] = 1 - color[node] elif color[neighbor] == color[node]: return False return True"},{"question":"You are required to write a function named `border_fill` that generates a square matrix of a given size and fills its border with a specific value while keeping the inner elements as zeros. This problem will help you learn how to utilize the numpy library, specifically the `numpy.zeros` and array slicing techniques. The function should adhere to the following specifications: 1. The matrix is initialized with zeros. 2. The function fills the border of the matrix with a given value. 3. The border includes the first and last rows, and the first and last columns of the matrix. # Function Signature: ```python def border_fill(size: int, value: int) -> np.ndarray: ``` # Input: - A single integer `size`, representing the dimensions of the square matrix (both the number of rows and columns). - A single integer `value` representing the value to fill the border elements. # Output: - A 2D numpy array (matrix) of dimensions `size x size`, where the elements are filled as per the rules mentioned above. # Examples: 1. `border_fill(4, 7)` should return: ``` array([ [7, 7, 7, 7], [7, 0, 0, 7], [7, 0, 0, 7], [7, 7, 7, 7] ]) ``` 2. `border_fill(5, 9)` should return: ``` array([ [9, 9, 9, 9, 9], [9, 0, 0, 0, 9], [9, 0, 0, 0, 9], [9, 0, 0, 0, 9], [9, 9, 9, 9, 9] ]) ``` # Constraints: - The input size will always be a positive integer greater than 1.","solution":"import numpy as np def border_fill(size: int, value: int) -> np.ndarray: Creates a size x size matrix with the given value as the border and 0s in the inner part. :param size: The size of the square matrix. :param value: The value to fill the border elements. :return: A numpy array representing the filled matrix. # Initialize a size x size matrix with zeros matrix = np.zeros((size, size), dtype=int) # Fill the borders with the specified value matrix[0, :] = value # Top border matrix[-1, :] = value # Bottom border matrix[:, 0] = value # Left border matrix[:, -1] = value # Right border return matrix"},{"question":"As a software engineer at a logistics company, you need to optimize the process of managing warehouse inventory levels. One of the tasks involves analyzing a list of product entries that include restocks and sales, and calculating the current inventory levels for each product. You are provided with a list of transactions, where each transaction is represented by a tuple containing the product name, transaction type (\'restock\' or \'sale\'), and the corresponding quantity. Your goal is to write a Python function that processes this list and returns a dictionary with the current inventory levels for each product. **Task**: Write a Python function named `calculate_inventory` that takes a list of tuples representing product transactions and returns a dictionary with the current inventory levels for each product. **Function Signature**: ```python def calculate_inventory(transactions: List[Tuple[str, str, int]]) -> Dict[str, int]: Calculate the current inventory levels for each product based on the transactions list. Args: transactions: A list of tuples, where each tuple contains: - a string representing the product name, - a string indicating the transaction type (\'restock\' or \'sale\'), - an integer representing the quantity of the transaction. Returns: A dictionary where the keys are product names and the values are their current inventory levels. ``` **Constraints**: 1. Products can have multiple restock and sale entries. 2. Ensure that inventory levels do not drop below zero. Any sale attempt that would result in a negative inventory level should be ignored (i.e., the sale should not be processed). 3. The list of transactions may contain records for multiple products. **Example**: ```python transactions_list = [ (\\"apple\\", \\"restock\\", 50), (\\"apple\\", \\"sale\\", 10), (\\"banana\\", \\"restock\\", 30), (\\"apple\\", \\"sale\\", 5), (\\"banana\\", \\"sale\\", 40), # ignored, as it exceeds current stock (\\"banana\\", \\"restock\\", 20), (\\"apple\\", \\"sale\\", 100), # ignored, as it exceeds current stock (\\"orange\\", \\"restock\\", 10) ] inventory = calculate_inventory(transactions_list) print(inventory) # Output: {\'apple\': 35, \'banana\': 50, \'orange\': 10} ``` This example processes the transactions for apples, bananas, and oranges, considering valid sales and ignoring invalid ones, to provide the current inventory levels.","solution":"from typing import List, Tuple, Dict def calculate_inventory(transactions: List[Tuple[str, str, int]]) -> Dict[str, int]: Calculate the current inventory levels for each product based on the transactions list. Args: transactions: A list of tuples, where each tuple contains: - a string representing the product name, - a string indicating the transaction type (\'restock\' or \'sale\'), - an integer representing the quantity of the transaction. Returns: A dictionary where the keys are product names and the values are their current inventory levels. inventory = {} for product, trans_type, quantity in transactions: if product not in inventory: inventory[product] = 0 if trans_type == \'restock\': inventory[product] += quantity elif trans_type == \'sale\': if inventory[product] - quantity >= 0: inventory[product] -= quantity return inventory"},{"question":"You need to implement a function `find_optimal_clusters` that identifies the optimal number of clusters for a given dataset using the Elbow Method with k-means clustering. The aim is to find the k value (number of clusters) at which the within-cluster variance starts diminishing at a slower rate. Your function should adhere to the following specifications: 1. **Function Name**: `find_optimal_clusters` 2. **Parameters**: - `data`: A NumPy array of shape `(n_samples, n_features)` representing the dataset. - `k_range`: A list of integers representing the range of k values to evaluate. 3. **Behavior**: - Iterate over the given range of k values. - For each k, fit the `KMeans` model from `sklearn.cluster` and calculate the within-cluster sum of squares (WCSS). - Plot a graph of k values against their corresponding WCSS scores. - Determine the optimal k using the Elbow Method. 4. **Output**: - Print and return the optimal k value determined by the Elbow Method. - Display the plot of k values versus WCSS. **Example Usage**: ```python import numpy as np data = np.array([[1, 2], [2, 1], [3, 4], [5, 7], [3, 3], [8, 7], [1, 0], [7, 5], [9, 6], [4, 6]]) k_range = list(range(1, 11)) optimal_k = find_optimal_clusters(data, k_range) print(\\"Optimal number of clusters:\\", optimal_k) ``` **Hint**: Use the `elbow method` to visualize the point where the WCSS starts decreasing more slowly. The `matplotlib.pyplot` library can be used to plot the graph of k values versus WCSS. This problem is designed to help you understand the process of identifying the optimal number of clusters for k-means clustering and visualize the results using the Elbow Method. Implement the function to adhere to the specified behavior and produce the required outputs.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def find_optimal_clusters(data, k_range): Identifies the optimal number of clusters for a given dataset using the Elbow Method with k-means clustering. Parameters: data (np.array): Numpy array of shape (n_samples, n_features) representing the dataset. k_range (list): List of integers representing the range of k values to evaluate. Returns: int: Optimal k value determined by the Elbow Method. wcss = [] for k in k_range: kmeans = KMeans(n_clusters=k, random_state=42) kmeans.fit(data) wcss.append(kmeans.inertia_) plt.figure(figsize=(8, 5)) plt.plot(k_range, wcss, \'bo-\') plt.xlabel(\'Number of clusters\') plt.ylabel(\'Within-cluster sum of squares (WCSS)\') plt.title(\'Elbow Method For Optimal k\') plt.show() # Elbow method to find optimal k optimal_k = k_range[0] diff = np.diff(wcss) second_diff = np.diff(diff) optimal_k = k_range[np.argmax(second_diff) + 1] # +1 as np.diff reduces the length by 1 print(\\"Optimal number of clusters:\\", optimal_k) return optimal_k"},{"question":"In many real-world applications, data is often presented in a structured format such as a table with rows and columns. One common operation on such data is to perform transformations based on specific conditions or criteria in the table. In this task, you will write a function that normalizes the numerical columns of a dataset, replacing the values with their z-scores. The z-score for a value in a dataset is defined as the number of standard deviations the value is from the mean of the dataset. More formally, the z-score is calculated as: [ z = frac{(x - mu)}{sigma} ] where ( x ) is the data point, ( mu ) is the mean of the dataset, and ( sigma ) is the standard deviation of the dataset. **Function Specification**: ```python def normalize_columns_with_z_scores(data: np.ndarray) -> np.ndarray: Normalizes the numerical columns of the dataset by replacing the values with their z-scores. Parameters ========== data: np.ndarray N x M matrix where N is the number of rows and M is the number of columns. Returns ======= normalized_data: np.ndarray N x M matrix with normalized numerical columns. ``` **Requirements**: - Use NumPy for array manipulations. - Use `numpy.mean` and `numpy.std` functions to compute the mean and standard deviation respectively. **Details**: 1. For each column in the dataset, compute the mean (( mu )) and the standard deviation (( sigma )). 2. Replace each value in the column with its z-score. 3. Return the modified dataset. **Example**: ```python import numpy as np data = np.array([ [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0] ]) result = normalize_columns_with_z_scores(data) print(result) ``` Expected output: ``` [[-1.22474487 -1.22474487 -1.22474487] [ 0. 0. 0. ] [ 1.22474487 1.22474487 1.22474487]] ```","solution":"import numpy as np def normalize_columns_with_z_scores(data: np.ndarray) -> np.ndarray: Normalizes the numerical columns of the dataset by replacing the values with their z-scores. Parameters ========== data: np.ndarray N x M matrix where N is the number of rows and M is the number of columns. Returns ======= normalized_data: np.ndarray N x M matrix with normalized numerical columns. # Calculate mean and std for each column means = np.mean(data, axis=0) stds = np.std(data, axis=0) # Calculate z-scores z_scores = (data - means) / stds return z_scores"},{"question":"You are required to implement a function that simulates the spread of a virus in a small population over a series of days and visualize the number of infected individuals over time. Specifically, you need to utilize several key functionalities from the `matplotlib.pyplot` library, including `plot`, `title`, and `legend`. Define the function `simulate_virus_spread()` which: 1. Simulates the daily spread of a virus in a population of 100 people. 2. Assumes each infected person has a 10% chance per day of infecting any one susceptible person. 3. Starts with one infected individual on day 0. 4. Continues the simulation until the entire population is infected or a maximum of 50 days have elapsed. 5. Records the number of infected individuals at the end of each day. 6. Plots the number of infected individuals over time. 7. Sets up an appropriate title and legend for the plot. Requirements: 1. Use `matplotlib.pyplot.plot` to create the plot of infected individuals over time. 2. Include a title for the plot using `matplotlib.pyplot.title`. 3. Add a legend to the plot using `matplotlib.pyplot.legend`. Below is a starting point with the function signature and incomplete structure to get you started: ```python import matplotlib.pyplot as plt import numpy as np def simulate_virus_spread(): population_size = 100 infection_probability = 0.1 max_days = 50 days = [] infected_counts = [] infected = [0] * population_size infected[0] = 1 current_infected = 1 day = 0 while current_infected < population_size and day < max_days: new_infected = 0 for person in range(population_size): if infected[person] == 1: for target in range(population_size): if infected[target] == 0 and np.random.rand() < infection_probability: infected[target] = 1 new_infected += 1 day += 1 current_infected += new_infected days.append(day) infected_counts.append(current_infected) plt.plot(days, infected_counts, label=\'Infected Over Time\') plt.title(\'Virus Spread Simulation\') plt.xlabel(\'Days\') plt.ylabel(\'Number of Infected Individuals\') plt.legend() plt.show() simulate_virus_spread() ``` Your task is to complete the function `simulate_virus_spread()` by following the steps and requirements mentioned above.","solution":"import matplotlib.pyplot as plt import numpy as np def simulate_virus_spread(): np.random.seed(42) # For reproducibility in tests population_size = 100 infection_probability = 0.1 max_days = 50 days = [] infected_counts = [] infected = [0] * population_size infected[0] = 1 # Initial infected individual current_infected = 1 day = 0 while current_infected < population_size and day < max_days: new_infected = 0 for person in range(population_size): if infected[person] == 1: for target in range(population_size): if infected[target] == 0 and np.random.rand() < infection_probability: infected[target] = 1 new_infected += 1 day += 1 current_infected += new_infected days.append(day) infected_counts.append(current_infected) plt.plot(days, infected_counts, label=\'Infected Over Time\') plt.title(\'Virus Spread Simulation\') plt.xlabel(\'Days\') plt.ylabel(\'Number of Infected Individuals\') plt.legend() plt.show()"},{"question":"Write a function that takes as input a list of strings, each representing a mathematical expression, and returns a list of boolean values indicating whether each expression is a palindrome when spaces and non-word characters are removed, and case is ignored. A string is considered a palindrome if it reads the same forward and backward. The function should output the results in a list of booleans in the same order as the input. You should write self-contained code starting with: ``` import re def check_palindromes(expressions): ``` # Example **Input:** ```python expressions = [\\"Madam, in Eden, I\'m Adam\\", \\"A man, a plan, a canal, Panama\\", \\"Hello, World!\\", \\"12321\\"] ``` **Output:** ```python [True, True, False, True] ```","solution":"import re def check_palindromes(expressions): Returns a list of booleans indicating whether each expression in expressions is a palindrome when spaces and non-word characters are removed, and case is ignored. Parameters: expressions (list of str): A list of strings containing mathematical expressions. Returns: list of bool: A list of booleans indicating whether each expression is a palindrome. def is_palindrome(expression): cleaned = re.sub(r\'W+\', \'\', expression).lower() return cleaned == cleaned[::-1] return [is_palindrome(expression) for expression in expressions]"},{"question":"You are required to implement a function `find_kth_largest` to find the k-th largest element in an unsorted list of integers. The function should utilize the Quickselect algorithm, which follows a similar approach to Quicksort but only partially sorts the list. Function Signature: ```python def find_kth_largest(nums: List[int], k: int) -> int: Find the k-th largest element in an unsorted list. :param nums: A list of integers. :param k: The k-th position to find (1-based). :return: The k-th largest element in the list. ``` Detailed Steps: 1. Implement the partitioning logic used in Quicksort to partition the list around a pivot element. 2. Utilize the partition function to recursively select the k-th largest element. This is the Quickselect algorithm. 3. Return the k-th largest element once it is found. Example: ```python nums = [3, 2, 1, 5, 6, 4] k = 2 print(find_kth_largest(nums, k)) # Output: 5 nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 print(find_kth_largest(nums, k)) # Output: 4 ``` In the above examples, `nums` represents the list of integers, and `k` is the k-th position to find. The function should return 5 for the first example and 4 for the second, as these are the second and fourth largest elements, respectively.","solution":"def find_kth_largest(nums, k): Find the k-th largest element in an unsorted list. :param nums: A list of integers. :param k: The k-th position to find (1-based). :return: The k-th largest element in the list. def partition(left, right, pivot_index): pivot_value = nums[pivot_index] # Move pivot to the end nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left for i in range(left, right): if nums[i] > pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 nums[right], nums[store_index] = nums[store_index], nums[right] return store_index def quickselect(left, right, k_smallest): if left == right: return nums[left] pivot_index = left + (right - left) // 2 pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quickselect(left, pivot_index - 1, k_smallest) else: return quickselect(pivot_index + 1, right, k_smallest) return quickselect(0, len(nums) - 1, k - 1)"},{"question":"Create a Python function named `manage_inventory` that accepts a list of dictionaries representing items in a store inventory and a list of operations to perform on the inventory. Each dictionary in the inventory contains: - `item_id`: a unique identifier (integer) for the item - `name`: the name (string) of the item - `quantity`: the quantity (integer) of the item available in the store - `price`: the price (float) of the item The function should accept the following arguments: 1. `inventory`: A list of dictionaries representing the initial inventory. 2. `operations`: A list of dictionaries where each dictionary represents an operation to perform on the inventory and has: - `operation`: a string that can either be \\"add\\", \\"remove\\", or \\"update\\". - `item`: a dictionary with relevant item information for the operation. The function should modify the inventory based on the given operations: - \\"add\\": Adds a new item to the inventory. If the `item_id` already exists, update the existing item\'s quantity by adding the new quantity. - \\"remove\\": Removes an item from the inventory by `item_id`. If the `item_id` is not found, ignore the operation. - \\"update\\": Updates an existing item\'s details in the inventory based on the provided `item_id`. If the `item_id` is not found, ignore the operation. After performing all operations, the function should return the updated inventory as a list of dictionaries. Input: 1. `inventory` - A list of dictionaries representing the initial inventory. 2. `operations` - A list of dictionaries where each dictionary represents an operation. Output: - The function should return the updated inventory list after processing all operations. **Note:** - Ensure the inventory remains sorted by the `item_id` in ascending order after performing all operations. Example usage: ```python initial_inventory = [ {\\"item_id\\": 1, \\"name\\": \\"Pen\\", \\"quantity\\": 10, \\"price\\": 1.2}, {\\"item_id\\": 2, \\"name\\": \\"Notebook\\", \\"quantity\\": 5, \\"price\\": 2.5}, {\\"item_id\\": 3, \\"name\\": \\"Eraser\\", \\"quantity\\": 20, \\"price\\": 0.5} ] operations = [ {\\"operation\\": \\"add\\", \\"item\\": {\\"item_id\\": 4, \\"name\\": \\"Pencil\\", \\"quantity\\": 15, \\"price\\": 0.8}}, {\\"operation\\": \\"remove\\", \\"item\\": {\\"item_id\\": 2}}, {\\"operation\\": \\"update\\", \\"item\\": {\\"item_id\\": 1, \\"name\\": \\"Blue Pen\\", \\"quantity\\": 12, \\"price\\": 1.3}} ] manage_inventory(initial_inventory, operations) ``` Expected output: ```python [ {\\"item_id\\": 1, \\"name\\": \\"Blue Pen\\", \\"quantity\\": 12, \\"price\\": 1.3}, {\\"item_id\\": 3, \\"name\\": \\"Eraser\\", \\"quantity\\": 20, \\"price\\": 0.5}, {\\"item_id\\": 4, \\"name\\": \\"Pencil\\", \\"quantity\\": 15, \\"price\\": 0.8} ] ```","solution":"def manage_inventory(inventory, operations): Modifies the inventory based on given operations and returns the updated inventory. Arguments: inventory : list : A list of dictionaries representing the initial inventory. operations : list : A list of dictionaries where each dictionary represents an operation. Returns: list : The updated inventory list. inventory_dict = {item[\'item_id\']: item for item in inventory} for operation in operations: op_type = operation[\'operation\'] item = operation[\'item\'] if op_type == \'add\': if item[\'item_id\'] in inventory_dict: inventory_dict[item[\'item_id\']][\'quantity\'] += item[\'quantity\'] else: inventory_dict[item[\'item_id\']] = item elif op_type == \'remove\': if item[\'item_id\'] in inventory_dict: del inventory_dict[item[\'item_id\']] elif op_type == \'update\': if item[\'item_id\'] in inventory_dict: inventory_dict[item[\'item_id\']] = item updated_inventory = sorted(inventory_dict.values(), key=lambda x: x[\'item_id\']) return updated_inventory"},{"question":"You are asked to implement a Python function that simulates the movement of an object in a 2D grid. The object can move in four possible directions: up, down, left, and right. The function will take an initial position, a sequence of movement commands, and the grid size. It should return the final position of the object after completing all the movements. The function should be named `final_position` and should adhere to the following signature: ```python def final_position(n: int, m: int, start: Tuple[int, int], moves: List[str]) -> Tuple[int, int]: ``` # Function Specifications - `n` (int): The number of rows in the grid. - `m` (int): The number of columns in the grid. - `start` (Tuple[int, int]): The initial position of the object in the grid, represented as a tuple `(row, column)`. - `moves` (List[str]): A list of movement commands, each command being one of \\"up\\", \\"down\\", \\"left\\", or \\"right\\". # Requirements 1. The function should ensure that the object does not move out of the grid boundaries. 2. If a move takes the object outside the grid, it should ignore that move and remain in the current position. 3. The grid is 0-indexed, meaning that the top-left corner is `(0, 0)` and the bottom-right corner is `(n-1, m-1)`. Here is an example usage of the function: ```python # Define the grid size n, m = 5, 5 # Set the initial position start = (2, 2) # Define the sequence of movements moves = [\\"up\\", \\"up\\", \\"left\\", \\"down\\", \\"right\\", \\"down\\", \\"down\\"] # Get the final position print(final_position(n, m, start, moves)) # Output should be (3, 2) # Another example where the object attempts to move out of bounds moves = [\\"up\\", \\"left\\", \\"left\\", \\"left\\"] print(final_position(n, m, start, moves)) # Output should be (2, 0) ```","solution":"from typing import List, Tuple def final_position(n: int, m: int, start: Tuple[int, int], moves: List[str]) -> Tuple[int, int]: row, col = start for move in moves: if move == \\"up\\": if row > 0: row -= 1 elif move == \\"down\\": if row < n - 1: row += 1 elif move == \\"left\\": if col > 0: col -= 1 elif move == \\"right\\": if col < m - 1: col += 1 return (row, col)"},{"question":"You are required to write a function `is_tree_symmetric` that checks whether a given binary tree is symmetric around its center. A binary tree is symmetric if a vertical line passing through its root divides the tree into two mirror images. # Function Signature ```python def is_tree_symmetric(root: Optional[TreeNode]) -> bool: ``` # Parameters - `root`: A `TreeNode` object representing the root of the binary tree. The `TreeNode` class is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Returns - Returns a boolean value indicating whether the tree is symmetric (`True`) or not symmetric (`False`). # Example ```python >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(2) >>> root.left.left = TreeNode(3) >>> root.left.right = TreeNode(4) >>> root.right.left = TreeNode(4) >>> root.right.right = TreeNode(3) >>> is_tree_symmetric(root) True ``` # Additional Information A tree is symmetric if and only if the left subtree is a mirror reflection of the right subtree. The function can recursively compare the left and right subtrees for symmetry. # Constraints - The number of nodes in the binary tree is in the range `[0, 1000]`. - The values of the nodes in the binary tree are in the range `[-100, 100]`. To help you implement this function, consider writing a helper function `is_mirror` which checks whether two trees are mirror images of each other.","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_tree_symmetric(root: Optional[TreeNode]) -> bool: def is_mirror(t1: Optional[TreeNode], t2: Optional[TreeNode]) -> bool: if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root, root)"},{"question":"Create a function that finds and returns the first unique (non-repeated) character in a given string. The function should ignore spaces and punctuation, considering only alphanumeric characters. Note that: - If there are no unique characters, return an empty string. - The function should distinguish between uppercase and lowercase letters. The function should output with: str: A string containing the first unique character or an empty string if none is found. You should write self-contained code starting with: ``` import string def find_first_unique_char(s: str) -> str: ```","solution":"import string def find_first_unique_char(s: str) -> str: Finds and returns the first unique (non-repeated) character in a given string. Only alphanumeric characters are considered, and the search is case-sensitive. If no unique character is found, an empty string is returned. :param s: input string to search :return: first unique character or empty string if none found # Create a dictionary to store the count of each character char_count = {} # Filter out non-alphanumeric characters and keep track of order filtered_chars = [char for char in s if char.isalnum()] # Populate the dictionary with counts for char in filtered_chars: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first unique character for char in filtered_chars: if char_count[char] == 1: return char # Return an empty string if no unique character is found return \\"\\""},{"question":"**Task: Implement a Matrix Rotation Checker Function** Your task is to write a Python function named `isRotatedMatrix` that takes two square matrices as input and determines if one matrix can be obtained by rotating the other matrix by 90 degrees clockwise, either once or multiple times. Here is the function signature: ```python def isRotatedMatrix(mat1, mat2): # your implementation here ``` The function should perform the following steps: 1. Check if the two matrices are of the same size. If not, return `False`. 2. Rotate `mat1` 90 degrees clockwise up to three times, checking in each rotation if it matches `mat2`. 3. If `mat2` matches `mat1` after any number of rotations, return `True`. 4. If `mat2` does not match `mat1` after all rotations, return `False`. **Notes:** - A matrix rotation of 90 degrees clockwise means that the top row of the original matrix becomes the rightmost column of the new matrix, and this pattern continues for all rows. - Assume both matrices will always be square (i.e., the number of rows and columns are equal). **Example:** ```python mat1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] mat2 = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] print(isRotatedMatrix(mat1, mat2)) # Output: True ``` In this example, `mat2` is obtained by rotating `mat1` 90 degrees clockwise. Thus, the function should return `True`. **Constraints:** - Assume the input matrices `mat1` and `mat2` always contain at least one element. - The matrix elements are integers.","solution":"def isRotatedMatrix(mat1, mat2): Returns True if mat2 is a rotated version of mat1 (by 90, 180, or 270 degrees clockwise), otherwise False. n = len(mat1) def rotate_90_clockwise(matrix): return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] for _ in range(4): if mat1 == mat2: return True mat1 = rotate_90_clockwise(mat1) return False"},{"question":"Write a function that takes a list of numerical scores and returns a new list containing the letter grades for each score based on the following grading scale: - 90-100: \'A\' - 80-89: \'B\' - 70-79: \'C\' - 60-69: \'D\' - 0-59: \'F\' Note that: The input list scores can include integers ranging from 0 to 100. The function should output a list of corresponding letter grades. You should write self-contained code starting with: ``` def calculate_grades(scores): ```","solution":"def calculate_grades(scores): Given a list of numerical scores, returns a new list containing the letter grades for each score based on the specified grading scale. letter_grades = [] for score in scores: if 90 <= score <= 100: letter_grades.append(\'A\') elif 80 <= score <= 89: letter_grades.append(\'B\') elif 70 <= score <= 79: letter_grades.append(\'C\') elif 60 <= score <= 69: letter_grades.append(\'D\') else: # 0 <= score <= 59 letter_grades.append(\'F\') return letter_grades"},{"question":"In this problem, you need to create a function `fibonacci_sequence_plot()` using the `matplotlib` library to visualize the Fibonacci sequence. The goal is to calculate the first 20 terms of the Fibonacci sequence and then plot these terms in a bar graph. This problem will help you understand how to work with sequences and create simple bar charts using `matplotlib`. # Detailed Requirements 1. Define a function called `fibonacci_sequence_plot()` that: - Calculates the first 20 terms of the Fibonacci sequence. - Plots these terms in a bar graph. - Sets the title of the plot to \\"Fibonacci Sequence\\". - Labels the x-axis as \\"Term Index\\" and the y-axis as \\"Value\\". - Uses a specific color, such as \'skyblue\', for the bars. # Function Signature ```python def fibonacci_sequence_plot(): pass ``` # Example Output When you call the function `fibonacci_sequence_plot()`, it should display a bar graph with the terms of the Fibonacci sequence as described. You don\'t need to return any value from the function. # Relevant Libraries - `matplotlib.pyplot` Make sure to: - Calculate the Fibonacci sequence terms using a loop or recursion. - Use `matplotlib.pyplot.bar` to create the bar plot.","solution":"import matplotlib.pyplot as plt def fibonacci_sequence_plot(): Calculates the first 20 terms of the Fibonacci sequence and plots them in a bar graph. # Calculate the first 20 terms of the Fibonacci sequence fibonacci = [0, 1] for i in range(2, 20): fibonacci.append(fibonacci[i-1] + fibonacci[i-2]) # Plot the Fibonacci sequence in a bar graph plt.figure(figsize=(10, 5)) plt.bar(range(20), fibonacci, color=\'skyblue\') plt.title(\\"Fibonacci Sequence\\") plt.xlabel(\\"Term Index\\") plt.ylabel(\\"Value\\") plt.show()"},{"question":"*Title: Sum of Non-prime Numbers in a List* **Objective:** Create a function `sum_non_prime_numbers(lst)` that calculates the sum of all non-prime numbers within a given list of integers. **Background:** 1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. 2. A non-prime number is any integer that is either less than 2 or has divisors other than 1 and itself. 3. The sum of an empty list should be considered as 0. **Function Details:** - Name: `sum_non_prime_numbers` - Input: `lst` (list of int) - The list of integers to evaluate. - Output: (int) - The sum of non-prime numbers in the list. **Functionality:** - Iterate through the list, determine if each number is non-prime, and if so, add it to a running total. - Return the final sum of non-prime numbers. **Example Usage:** ```python def sum_non_prime_numbers(lst): # ... function implementation ... print(sum_non_prime_numbers([2, 3, 4, 5, 6, 8, 10])) # Output: 28 (4 + 6 + 8 + 10) print(sum_non_prime_numbers([11, 13, 17, 19])) # Output: 0 (all prime numbers) print(sum_non_prime_numbers([0, 1, 6, 14, 15])) # Output: 36 (0 + 1 + 6 + 14 + 15) ``` **Note:** Assume the following helper function is provided and should be used within your implementation: - `is_prime(number)`: Determines whether the given number is a prime. Returns `True` if the number is prime, `False` otherwise.","solution":"def is_prime(number): Determines if a number is prime. Args: number (int): The number to check for primality. Returns: bool: True if number is prime, False otherwise. if number < 2: return False for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return False return True def sum_non_prime_numbers(lst): Returns the sum of non-prime numbers in the given list. Args: lst (list of int): The list of integers to evaluate. Returns: int: The sum of non-prime numbers in the list. return sum(number for number in lst if not is_prime(number))"},{"question":"Create a function named `factorial_of_primes` that generates the factorial of the first `n` prime numbers and stores them in a list. The function will then return this list. The steps for the function are as follows: 1. Write a helper function `is_prime(num)` that returns `True` if `num` is a prime number, and `False` otherwise. 2. Write a helper function `factorial(num)` that returns the factorial of a given number `num`. 3. Use the helper functions to find the first `n` prime numbers and calculate their factorials. 4. Store the factorials of these prime numbers in a list and return the list. Your task is to implement the main function `factorial_of_primes(n)`, which utilizes the helper functions `is_prime(num)` and `factorial(num)`. The input to the main function is a single integer `n`, representing the number of prime numbers for which the factorial needs to be computed. Ensure your implementation efficiently computes the prime numbers and their respective factorials. For example, `factorial_of_primes(5)` should return the list `[1, 2, 6, 24, 120]` since the first five prime numbers are 2, 3, 5, 7, and 11, and their factorials are 2, 6, 120, 5040, and 39916800 respectively.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def factorial(num): Helper function to compute the factorial of a given number. if num == 0 or num == 1: return 1 result = 1 for i in range(2, num + 1): result *= i return result def factorial_of_primes(n): Computes the factorial of the first n prime numbers and returns them in a list. prime_count = 0 num = 2 prime_factorials = [] while prime_count < n: if is_prime(num): prime_factorials.append(factorial(num)) prime_count += 1 num += 1 return prime_factorials"},{"question":"Implement a function that finds all the strongly connected components (SCCs) of a directed graph using Kosaraju\'s algorithm. Kosaraju\'s algorithm is an efficient method that uses depth-first search (DFS) to identify SCCs in a graph. # Instructions - **Function Name**: `find_sccs` - **Parameters**: - `G`: A dictionary representing the directed graph where keys are nodes and values are lists of neighboring nodes. - **Output**: Return a list of sets, where each set contains the nodes that form a strongly connected component. # Requirements 1. Perform a DFS on the original graph to determine the finish times of the nodes. 2. Create the transpose of the original graph. 3. Perform a DFS on the transposed graph in the order of decreasing finish times to identify SCCs. 4. Use a stack to keep track of the finish times and a set to track visited nodes. ```python def find_sccs(G): def dfs(v, graph, visited, stack=None): visited.add(v) for neighbor in graph[v]: if neighbor not in visited: dfs(neighbor, graph, visited, stack) if stack is not None: stack.append(v) def transpose(graph): transposed = {u: [] for u in graph} for u in graph: for v in graph[u]: transposed[v].append(u) return transposed stack = [] visited = set() for node in G: if node not in visited: dfs(node, G, visited, stack) G_transposed = transpose(G) visited.clear() sccs = [] while stack: node = stack.pop() if node not in visited: component = set() dfs(node, G_transposed, visited, stack=component) sccs.append(component) return sccs ``` # Example Given the graph: ```python G = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'A\', \'D\'], \'D\': [\'E\'], \'E\': [\'F\'], \'F\': [\'D\'] } ``` Calling `find_sccs(G)` should return `[{\'A\', \'B\', \'C\'}, {\'D\', \'E\', \'F\'}]`.","solution":"def find_sccs(G): def dfs(v, graph, visited, stack=None): visited.add(v) for neighbor in graph[v]: if neighbor not in visited: dfs(neighbor, graph, visited, stack) if stack is not None: stack.append(v) def transpose(graph): transposed = {u: [] for u in graph} for u in graph: for v in graph[u]: transposed[v].append(u) return transposed stack = [] visited = set() for node in G: if node not in visited: dfs(node, G, visited, stack) G_transposed = transpose(G) visited.clear() sccs = [] def collect_scc(component_stack, current_scc): while component_stack: current_scc.add(component_stack.pop()) while stack: node = stack.pop() if node not in visited: component_stack = [] dfs(node, G_transposed, visited, stack=component_stack) current_scc = set() collect_scc(component_stack, current_scc) sccs.append(current_scc) return sccs"},{"question":"You need to implement a function called `merge_sorted_arrays` that merges two sorted lists into a single sorted list. This is a fundamental problem often encountered in various sorting algorithms and is particularly useful in the merge sort algorithm, which relies on merging sorted halves of the data. Function Specification **Function Name:** `merge_sorted_arrays` **Inputs:** - `arr1`: A list of integers, sorted in ascending order. - `arr2`: Another list of integers, sorted in ascending order. **Outputs:** - A list of integers in ascending order, containing all elements from `arr1` and `arr2`. Requirements: 1. Do **not** use built-in sort functions (e.g., `sorted()` or `list.sort()`). 2. You may assume that the input lists do not contain duplicate values. Example: ```python def merge_sorted_arrays(arr1, arr2): i, j = 0, 0 merged = [] while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged # Example usage: arr1 = [1, 3, 5] arr2 = [2, 4, 6] result = merge_sorted_arrays(arr1, arr2) print(result) ``` Expected Output for the given example: ``` [1, 2, 3, 4, 5, 6] ``` This problem tests your ability to work with loops, conditional statements, and list operations in Python. It also evaluates your understanding of merge operations commonly used in sorting algorithms.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: The merged sorted array. i, j = 0, 0 merged = [] while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged # Example usage: arr1 = [1, 3, 5] arr2 = [2, 4, 6] result = merge_sorted_arrays(arr1, arr2) print(result)"},{"question":"Implement a function that takes a string as input and checks whether it\'s a palindrome ignoring spaces, punctuation, and case sensitivity. Your function should return a boolean value: True if the input string is a palindrome, and False otherwise. The function should handle: - Removing non-alphanumeric characters. - Ignoring case sensitivity. The function signature should be: ``` def is_palindrome(s: str) -> bool: ```","solution":"import re def is_palindrome(s: str) -> bool: Checks whether the given string is a palindrome, ignoring spaces, punctuation, and case. Args: s (str): The input string to check. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lowercase filtered_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_string == filtered_string[::-1]"},{"question":"# **Analyzing Text Files for Keyword Frequency** In this problem, you will be writing a function to analyze a text file and determine the frequency of a given keyword. The function should read the text file, count how many times the keyword appears (case-insensitive), and return this count. The function signature is as follows: ```python def keyword_frequency(file_path, keyword): ``` # Function Details 1. **Inputs**: - `file_path`: A string representing the path to the text file. - `keyword`: A string representing the keyword to be counted. 2. **Outputs**: - Returns an integer representing the number of times the keyword appears in the text file. # Methodology: 1. Open and read the file specified by `file_path`. 2. Convert the entire content of the file to lowercase to ensure case-insensitive matching. 3. Count the occurrences of the `keyword` in the text file content. 4. Ensure proper handling of special characters and delimiters in the text. # **Requirements**: - The file I/O operations should be handled efficiently. - Basic string manipulation methods like `string.lower()`, `string.split()`, and `string.count()` should be utilized. # Example: ```python file_path = \\"sample.txt\\" keyword = \\"example\\" result = keyword_frequency(file_path, keyword) print(result) # Expected output could be an integer denoting the frequency of the keyword ``` Implement the function `keyword_frequency` to read from the specified file and return the count of the keyword\'s occurrences.","solution":"def keyword_frequency(file_path, keyword): Returns the frequency of the keyword in the text file located at file_path. Parameters: file_path (str): path to the text file keyword (str): keyword to be counted Returns: int: number of times the keyword appears in the file with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read().lower() # Simple way to count the keyword using the count method # This won\'t consider whole words, i.e., \\"example\\" will also match \\"examples\\" # count = content.count(keyword.lower()) # Alternatively, to ensure we count whole words we can use split and check each word words = content.split() keyword_count = 0 for word in words: # Remove punctuation around words before checking keyword match cleaned_word = word.strip(\\".,!?\\"\'()[]{}:;-\\") if cleaned_word == keyword.lower(): keyword_count += 1 return keyword_count"},{"question":"You are asked to write a function that generates a summary report of missing values in a given DataFrame. The report should include the total number of missing values, the percentage of missing values per column, and a bar plot to visualize the missing values distribution across the DataFrame columns. **Function Signature:** ```python def missing_values_report(data: pd.DataFrame) -> None: ``` **Parameters:** - `data` (`pd.DataFrame`): The dataset for which the missing values report is generated. **Returns:** - This function does not return values but prints a summary and plots a bar chart showing the distribution of missing values. **Requirements:** 1. Compute the total number of missing values in the DataFrame. 2. Calculate the percentage of missing values for each column. 3. Print a summary that includes the total number of missing values and the percentage of missing values for each column. 4. Create a bar plot using `matplotlib` to visualize the percentage of missing values for each column. **Additional Context:** Handling missing values is a crucial step in data preprocessing. Understanding the distribution of missing values helps in deciding the strategy for missing value treatment, such as imputation or removal. An example usage of the function should be as follows: ```python import pandas as pd import matplotlib.pyplot as plt # Assume \'df\' is a predefined DataFrame with some missing values missing_values_report(df) ``` In the example usage, the function will print the summary report of missing values and display a bar plot visualizing the percentage of missing values for each column in the DataFrame `df`.","solution":"import pandas as pd import matplotlib.pyplot as plt def missing_values_report(data: pd.DataFrame) -> None: Generates a summary report of missing values in a DataFrame. Parameters: - data (pd.DataFrame): The dataset for which the missing values report is generated. Returns: - None: This function only prints the report and shows the plot. # Total number of missing values total_missing_values = data.isnull().sum().sum() # Percentage of missing values per column missing_percentage = data.isnull().mean() * 100 # Print summary report print(\\"Total Missing Values:\\", total_missing_values) print(\\"nPercentage of Missing Values per Column:\\") print(missing_percentage) # Plot missing values percentage plt.figure(figsize=(10, 6)) missing_percentage.plot(kind=\'bar\') plt.title(\'Percentage of Missing Values per Column\') plt.xlabel(\'Columns\') plt.ylabel(\'Percentage\') plt.xticks(rotation=45) plt.show()"},{"question":"In Python, a common task is to validate and format strings, such as phone numbers. You need to write a function that formats a given phone number string into a standard format: `(XXX) XXX-XXXX`. The input string may contain various delimiters like spaces, dashes, dots, or no delimiters at all. The function signature is: ```python def format_phone_number(phone_number: str) -> str: # your code here ``` # Function Description - `phone_number`: A string representing a phone number, which may include digits mixed with spaces, dashes, dots, or be a continuous string of numbers. # Task Your function should transform the given phone number into the standard format `(XXX) XXX-XXXX`, where `X` represents a digit. # Example Let\'s say `phone_number` is \\"123-456.7890\\". Your function should return: ```python \\"(123) 456-7890\\" ``` # Constraints - The input phone number will always contain exactly 10 digits. - The input may contain non-digit characters such as spaces, dashes, and dots. - Ensure that the output phone number is always in the format `(XXX) XXX-XXXX`. # Additional Notes - You may use Python\'s string handling methods to strip out non-digit characters. - Do not use external libraries; stick to built-in Python functions. ```python # Example implementation def format_phone_number(phone_number: str) -> str: cleaned = \'\'.join(filter(str.isdigit, phone_number)) return f\'({cleaned[0:3]}) {cleaned[3:6]}-{cleaned[6:10]}\' # Test the function print(format_phone_number(\\"123-456.7890\\")) # Output: \\"(123) 456-7890\\" ```","solution":"def format_phone_number(phone_number: str) -> str: Formats a given phone number string into the standard format: (XXX) XXX-XXXX. Parameters: - phone_number: A string representing a phone number, which may include digits mixed with spaces, dashes, dots, or be a continuous string of numbers. Returns: - A formatted phone number string: (XXX) XXX-XXXX. cleaned = \'\'.join(filter(str.isdigit, phone_number)) return f\'({cleaned[0:3]}) {cleaned[3:6]}-{cleaned[6:10]}\'"},{"question":"We are tasked with implementing a function that generates all unique permutations of an input list of integers using the `itertools` module. Each permutation should be in lexicographic (sorted) order. The goal is to write a Python function named `unique_permutations` that takes a list of integers and returns a list of tuples, each containing a unique permutation of the input list. Importantly, the function should return permutations in an organized manner without duplicates. Here\'s a high-level overview of what the function should do: 1. Utilize the `itertools.permutations` function to generate all permutations of the input list. 2. Convert the result to a set to remove any duplicates. 3. Sort the unique permutations in lexicographic order. Function Signature: ```python from typing import List, Tuple import itertools def unique_permutations(nums: List[int]) -> List[Tuple[int, ...]]: ``` # Input: - `nums`: A list of integers where each integer can appear multiple times. # Output: - Returns a list of tuples, each containing a unique permutation of the input list in lexicographic order. # Example: ```python # Example Input nums = [1, 2, 2] # Expected Output # [(1, 2, 2), (2, 1, 2), (2, 2, 1)] print(unique_permutations(nums)) ``` # Constraints: - Use the `itertools` module for generating permutations. - Ensure the result list should be sorted in lexicographic order. # Hint: - Convert the permutations to a set to eliminate duplicates, and then sort the set.","solution":"from typing import List, Tuple import itertools def unique_permutations(nums: List[int]) -> List[Tuple[int, ...]]: Returns all unique permutations of the input list of integers in lexicographic order. Args: nums: A list of integers where each integer can appear multiple times. Returns: A list of tuples, each containing a unique permutation of the input list. # Generate all permutations using itertools.permutations all_perms = itertools.permutations(nums) # Use a set to remove duplicates unique_perms_set = set(all_perms) # Convert the set back to a sorted list unique_perms_list = sorted(unique_perms_set) return unique_perms_list"},{"question":"Create a Python function named `parse_url_info(url: str) -> dict` that parses a given URL and extracts key information elements such as scheme, domain, port, path, query parameters, and fragment. The function should return a dictionary with the keys: `scheme`, `domain`, `port`, `path`, `query_params`, and `fragment`. Utilize the `urllib.parse` library to accomplish this. The function: 1. Takes a single parameter `url`, which is the URL to be parsed. 2. Uses `urllib.parse.urlparse` to parse the URL into its components. 3. Extracts the scheme, domain, port, path, query parameters, and fragment from the parsed URL. 4. Splits the query parameters into a dictionary where each key-value pair represents a parameter and its corresponding value. 5. Returns the extracted information in a dictionary format. Ensure the function handles cases where certain components may be absent (e.g., no query parameters or fragment). **Function Signature:** ```python def parse_url_info(url: str) -> dict: ``` Here\'s an example of what the function should return based on a sample URL. **Example Input:** ```python parse_url_info(\\"https://www.example.com:8080/path/to/resource?user=admin&password=1234#section1\\") ``` **Example Output:** ```python { \'scheme\': \'https\', \'domain\': \'www.example.com\', \'port\': 8080, \'path\': \'/path/to/resource\', \'query_params\': {\'user\': \'admin\', \'password\': \'1234\'}, \'fragment\': \'section1\' } ```","solution":"from urllib.parse import urlparse, parse_qs def parse_url_info(url: str) -> dict: Parses a given URL and extracts key information elements such as scheme, domain, port, path, query parameters, and fragment. :param url: The URL to be parsed. :return: A dictionary with the keys \'scheme\', \'domain\', \'port\', \'path\', \'query_params\', and \'fragment\'. parsed_url = urlparse(url) # Extracting query parameters into a dictionary query_parameters = parse_qs(parsed_url.query) query_params = {k: v[0] for k, v in query_parameters.items()} # Convert list values to a single value return { \'scheme\': parsed_url.scheme, \'domain\': parsed_url.hostname, \'port\': parsed_url.port, \'path\': parsed_url.path, \'query_params\': query_params, \'fragment\': parsed_url.fragment }"},{"question":"Create a function that reads a CSV file containing information about various products in a store. Each row in the CSV contains a unique product ID, the product name, category, quantity in stock, and price. The function should return a DataFrame with the following details: - Total number of unique products - Total quantity of products in stock - Average price of products - A new column indicating if the product is \\"Low stock\\" (< 10) or \\"In stock\\" Visualize the average price per category using a bar plot. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def product_analysis(file_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def product_analysis(file_path): Reads a CSV file containing information about various products in a store and performs analysis. Parameters: file_path (str): The file path to the CSV file. Returns: pd.DataFrame: A DataFrame with the following details: - Total number of unique products - Total quantity of products in stock - Average price of products - A new column indicating if the product is \\"Low stock\\" (< 10) or \\"In stock\\" # Read the CSV file df = pd.read_csv(file_path) # Total number of unique products total_unique_products = df[\'product_id\'].nunique() # Total quantity of products in stock total_quantity = df[\'quantity_in_stock\'].sum() # Average price of products average_price = df[\'price\'].mean() # Add a new column indicating if the product is \\"Low stock\\" (< 10) or \\"In stock\\" df[\'stock_status\'] = df[\'quantity_in_stock\'].apply(lambda x: \\"Low stock\\" if x < 10 else \\"In stock\\") # Visualize the average price per category using a bar plot avg_price_per_category = df.groupby(\'category\')[\'price\'].mean() avg_price_per_category.plot(kind=\'bar\', title=\'Average Price per Category\') plt.xlabel(\'Category\') plt.ylabel(\'Average Price\') plt.show() # Create the result DataFrame result = pd.DataFrame({ \'total_unique_products\': [total_unique_products], \'total_quantity\': [total_quantity], \'average_price\': [average_price] }) return df, result"},{"question":"Write a Python function `generate_word_cloud` that creates a word cloud from a given list of words and their respective frequencies. The word cloud should be a simple text-based representation where words with higher frequencies appear more prominently (i.e., are repeated more times). The function should: 1. Randomly arrange the words in the output text. 2. Cap the maximum number of repetitions of any word at 10 to avoid an overly large word cloud. 3. Ensure that the generated word cloud contains at least one appearance of each word, regardless of its frequency. Details: 1. **Function Name**: `generate_word_cloud` 2. **Parameters**: - `word_freq` (Required): A dictionary where keys are words (strings) and values are their respective frequencies (integers). 3. **Return**: A single string representing the word cloud, with words separated by spaces, arranged randomly. Inside the function: 1. Use the `random.shuffle` method to ensure words are ordered randomly. 2. Limit word repetitions using the capped frequency of 10. 3. Implement logic to guarantee at least one instance of each word appears in the final word cloud. **Example Usage:** ```python word_freq = {\'python\': 12, \'code\': 7, \'assessment\': 2, \'function\': 15} cloud = generate_word_cloud(word_freq) print(cloud) ``` This could output something like: ``` function code python python assessment code python python python function function code python assessment function function code python ``` **Explanation**: - The word \\"python\\" appears at most 10 times (even though its frequency is 12). - The word \\"function\\" appears at most 10 times (even though its frequency is 15). - The word \\"code\\" appears 7 times. - The word \\"assessment\\" appears 2 times. - All words are arranged randomly in the output string.","solution":"import random def generate_word_cloud(word_freq): Generates a simple text-based word cloud. Parameters: word_freq (dict): A dictionary where keys are words and values are their respective frequencies. Returns: str: A single string representing the word cloud, with words separated by spaces, arranged randomly. words = [] for word, freq in word_freq.items(): count = min(freq, 10) words.extend([word] * count) random.shuffle(words) return \' \'.join(words)"},{"question":"You are tasked with optimizing a machine learning algorithm that utilizes a stochastic gradient descent (SGD) optimizer. The current implementation runs multiple epochs and adjusts model parameters but has not yet implemented a learning rate decay strategy, which can enhance model convergence and performance. Your task is to write a function `apply_learning_rate_decay(initial_lr, global_step, decay_steps, decay_rate)`, which calculates the learning rate for each step with an exponential decay applied. # Function Signature ```python def apply_learning_rate_decay(initial_lr, global_step, decay_steps, decay_rate) -> float: ``` # Input - `initial_lr`: A float representing the initial learning rate. - `global_step`: An integer representing the current step number in the training. - `decay_steps`: An integer representing the number of steps after which the learning rate gets decayed. - `decay_rate`: A float representing the decay rate applied to the learning rate. # Output - Returns the adjusted learning rate as a float. # Example ```python initial_lr = 0.1 global_step = 500 decay_steps = 1000 decay_rate = 0.96 adjusted_lr = apply_learning_rate_decay(initial_lr, global_step, decay_steps, decay_rate) print(adjusted_lr) # Output: 0.081872 ``` # Context - The formula for calculating the decayed learning rate is: [ text{adjusted_lr} = text{initial_lr} times left(text{decay_rate}right)^{frac{text{global_step}}{text{decay_steps}}} ] - The learning rate is a crucial hyperparameter in training machine learning models, influencing the rate at which model weights are updated. - Implementing a learning rate decay helps in gradually reducing the learning rate, allowing the algorithm to converge to a minimum more effectively.","solution":"def apply_learning_rate_decay(initial_lr, global_step, decay_steps, decay_rate): Applies exponential decay to the learning rate. Parameters: initial_lr (float): Initial learning rate. global_step (int): Current step number in training. decay_steps (int): Number of steps after which the learning rate is decayed. decay_rate (float): Decay rate applied to the learning rate. Returns: float: Adjusted learning rate after exponential decay. adjusted_lr = initial_lr * (decay_rate ** (global_step / decay_steps)) return adjusted_lr"},{"question":"Write a function called `get_common_elements` that takes two lists and returns a new list that contains only the elements that are present in both of the input lists. The returned list should not contain any duplicates, and the elements in the returned list should be in the order they appear in the first input list. Steps to follow: 1. Define the function `get_common_elements` that takes two parameters: * `list1` (list): The first list of elements. * `list2` (list): The second list of elements. 2. Use a list comprehension or a loop to find the common elements between the two lists. 3. Ensure that the returned list does not have any duplicate elements. 4. Ensure that the returned list maintains the order of the elements as they appear in `list1`. Ensure that: - The function `get_common_elements` will correctly find the common elements between the two input lists without duplicates and in the correct order. - The function is tested with sample data to ensure it works correctly. Here is the function signature you need to implement: ```python def get_common_elements(list1, list2): pass ``` Here\'s an example of how your function should work: ```python list1 = [1, 2, 2, 3, 4, 5] list2 = [3, 4, 4, 6, 7] result = get_common_elements(list1, list2) print(result) # Output should be [3, 4] ``` This example should return a list with the common elements `[3, 4]` without duplicates and in the order they appear in `list1`.","solution":"def get_common_elements(list1, list2): Returns a list of common elements between list1 and list2 without duplicates and in the order they appear in list1. set1 = set(list1) set2 = set(list2) common_elements = list(set1.intersection(set2)) result = [] for item in list1: if item in common_elements and item not in result: result.append(item) return result"},{"question":"You are required to write a function `analyze_stock_trends` that processes stock price data to identify trends and summarize performance over a given period. The function will take as input a Pandas DataFrame containing stock prices and dates, perform various calculations, and return a summarized report. Specifically, the function should calculate the moving average, identify periods of consecutive gains or losses, and compute the net change over the given period. The function signature is: ```python def analyze_stock_trends(df, window, summarize=False): Parameters: - df: DataFrame, with columns [\'date\', \'price\'] - window: integer, window size for moving average - summarize: optional, boolean flag indicating if summary statistics should be returned Returns: - DataFrame with original columns plus \'moving_average\' and \'trend\' - Optionally, a summary DataFrame with total gains, total losses, and net change if `summarize` is True ``` The function needs to follow these steps: 1. Validate that `df` is a Pandas DataFrame with the required columns: \'date\' and \'price\'. 2. Ensure `window` is a positive integer and less than or equal to the length of `df`. 3. Calculate the moving average of the \'price\' column with the specified window size and add it as a new column \'moving_average\'. 4. Identify periods of consecutive gains or losses by comparing the \'price\' to the previous \'price\' and label them as \'up\' or \'down\' in a new column \'trend\'. 5. Optionally compute summary statistics: total gains, total losses, and net change over the period if `summarize` is True. Here is an example to illustrate the input format: ```python import pandas as pd data = { \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'], \'price\': [100, 102, 101, 105, 107] } df = pd.DataFrame(data) # Example function call: result = analyze_stock_trends(df, window=3, summarize=True) ``` **Your task is to** 1. Implement the `analyze_stock_trends` function using appropriate Pandas operations. 2. Validate the input DataFrame and parameters. 3. Calculate the moving average correctly. 4. Identify and label trends accurately. 5. Return the DataFrame with the additional columns and optionally summarizing stock performance.","solution":"import pandas as pd def analyze_stock_trends(df, window, summarize=False): Parameters: - df: DataFrame, with columns [\'date\', \'price\'] - window: integer, window size for moving average - summarize: optional, boolean flag indicating if summary statistics should be returned Returns: - DataFrame with original columns plus \'moving_average\' and \'trend\' - Optionally, a summary DataFrame with total gains, total losses, and net change if `summarize` is True if not isinstance(df, pd.DataFrame): raise ValueError(\\"Input should be a pandas DataFrame\\") if \'date\' not in df.columns or \'price\' not in df.columns: raise ValueError(\\"DataFrame must contain \'date\' and \'price\' columns\\") if not isinstance(window, int) or window <= 0 or window > len(df): raise ValueError(\\"Window must be a positive integer less than or equal to the length of the DataFrame\\") df = df.copy() df[\'moving_average\'] = df[\'price\'].rolling(window=window).mean() df[\'trend\'] = df[\'price\'].diff().apply(lambda x: \'up\' if x > 0 else \'down\' if x < 0 else \'neutral\') if summarize: total_gains = df[df[\'trend\'] == \'up\'][\'price\'].sum() total_losses = df[df[\'trend\'] == \'down\'][\'price\'].sum() net_change = df[\'price\'].iloc[-1] - df[\'price\'].iloc[0] summary_df = pd.DataFrame({ \'total_gains\': [total_gains], \'total_losses\': [total_losses], \'net_change\': [net_change] }) return df, summary_df return df"},{"question":"You are tasked with creating a function called `generate_bar_plot` that will visualize the distribution of different categories in a dataset using the `matplotlib` library. Data and Arguments: 1. **Data**: The data will be a `pandas.DataFrame` with columns `Category` and `Count`. 2. **Color Scheme**: An optional argument `color_scheme` (default to `None`), specifying the colors to be used for different categories in the plot. Function Behavior: 1. **Sorting Data**: Sort the data by `Count` in descending order. 2. **Bar Plot**: Create a bar plot where each category from the `Category` column is displayed on the x-axis and their corresponding counts from the `Count` column on the y-axis. 3. **Optional Colors**: If `color_scheme` is provided, use it to color the bars accordingly. The `color_scheme` should be a list of colors with the same length as the number of categories. 4. **Figure Setup**: Utilize `matplotlib.pyplot.figure` to create the figure. Ensure the figure is properly sized and axes are labeled. 5. **Customization**: Customize the plot\'s title, axis labels, and tick parameters for clear readability. 6. **Title and Display**: Add a main title using `plt.title` and display the figure using `plt.show()`. Requirements: - Implement the function `generate_bar_plot(data: pd.DataFrame, color_scheme: list=None) -> None`. - Ensure proper usage and understanding of `matplotlib.pyplot.figure`. - Handle cases where the `color_scheme` list length does not match the number of categories gracefully. ```python def generate_bar_plot(data, color_scheme=None): Visualizes the distribution of different categories using a bar plot. Args: data (pd.DataFrame): The input data with \'Category\' and \'Count\' columns. color_scheme (list): Optional list of colors for the bars. # Implement the function here ... ```","solution":"import pandas as pd import matplotlib.pyplot as plt def generate_bar_plot(data, color_scheme=None): Visualizes the distribution of different categories using a bar plot. Args: data (pd.DataFrame): The input data with \'Category\' and \'Count\' columns. color_scheme (list): Optional list of colors for the bars. # Sort the data by \'Count\' in descending order data_sorted = data.sort_values(by=\'Count\', ascending=False) # If color_scheme is provided, ensure it has appropriate length if color_scheme and len(color_scheme) == len(data_sorted): colors = color_scheme else: colors = None # Create the figure and plot plt.figure(figsize=(10, 6)) plt.bar(data_sorted[\'Category\'], data_sorted[\'Count\'], color=colors) # Customize the plot plt.xlabel(\'Category\') plt.ylabel(\'Count\') plt.title(\'Distribution of Categories\') plt.xticks(rotation=45, ha=\'right\') # Display the plot plt.tight_layout() plt.show()"},{"question":"In this task, you are required to write a function `thermal_map(temperature_data)`, which generates a thermal map based on the provided 2D array of temperature data. The thermal map should be color-coded with specific colors representing different temperature ranges using the **matplotlib** library. Below is the brief description of the function requirements: 1. The function should take one argument, `temperature_data`, which is a 2D numpy array representing temperature values. 2. Use `plt.imshow` to create a heatmap of the temperature data with the \\"coolwarm\\" colormap. 3. Add a color bar to the heatmap using `plt.colorbar` to provide a reference for the temperature values and set its label to \\"Temperature (°C)\\". 4. Title the heatmap as \\"Thermal Map\\" using `plt.title`. 5. Add x and y labels to the heatmap using `plt.xlabel` and `plt.ylabel`, labeling them as \\"X-axis\\" and \\"Y-axis\\", respectively. 6. Display the plot using `plt.show`. You must use the following functions from the `matplotlib.pyplot` library: - `matplotlib.pyplot.imshow` - `matplotlib.pyplot.colorbar` - `matplotlib.pyplot.title` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.show` # Example Given the input array: ```python temperature_data = np.array([ [22, 23, 21], [24, 26, 22], [20, 21, 23] ]) ``` The function call: ```python thermal_map(temperature_data) ``` should display a heatmap representing the temperature data. # Function Signature ```python import numpy as np import matplotlib.pyplot as plt def thermal_map(temperature_data): # Your code here ```","solution":"import numpy as np import matplotlib.pyplot as plt def thermal_map(temperature_data): Generates a thermal map based on the provided 2D array of temperature data. Parameters: - temperature_data: 2D numpy array representing temperature values. plt.imshow(temperature_data, cmap=\\"coolwarm\\") plt.colorbar(label=\\"Temperature (°C)\\") plt.title(\\"Thermal Map\\") plt.xlabel(\\"X-axis\\") plt.ylabel(\\"Y-axis\\") plt.show()"},{"question":"In this problem, you will implement a function named `generate_spiral` using Python\'s `turtle` library to create a spiral pattern on a canvas. The spiral should expand outward with each loop around a central point, and the distance between loops should increase gradually. The function should also allow for specifying the initial length of the segment, the angle of turn between each segment, and the step by which the segment length increases. The function `generate_spiral(turtle, initial_length, angle, step, segments)` should: 1. Set the turtle\'s speed to a fast setting to allow quick drawing (`turtle.speed(0)`). 2. Set the turtle\'s pen color to \\"black\\". 3. Initialize a variable to track the current length of each segment, starting from `initial_length`. 4. Use a loop to draw a series of line segments that form a spiral shape: - Move the turtle forward by the current length. - Turn the turtle right by the specified `angle`. - Increase the current length by the `step`. 5. Run the loop for the number of `segments` specified. This problem is designed to help you practice using the `turtle` library, particularly focusing on movement and turning with specific parameters and incrementing lengths. **Example:** ```python import turtle def generate_spiral(t, initial_length, angle, step, segments): t.speed(0) t.pencolor(\\"black\\") current_length = initial_length for _ in range(segments): t.forward(current_length) t.right(angle) current_length += step # Assuming the turtle screen and turtle object have been set up screen = turtle.Screen() t = turtle.Turtle() generate_spiral(t, 5, 45, 2, 50) turtle.done() ``` In this example, a spiral starting with a segment length of 5 units, turning 45 degrees between each segment, and increasing each segment\'s length by 2 units is drawn for 50 segments. This creates a visually appealing spiral pattern on the canvas.","solution":"import turtle def generate_spiral(t, initial_length, angle, step, segments): t.speed(0) t.pencolor(\\"black\\") current_length = initial_length for _ in range(segments): t.forward(current_length) t.right(angle) current_length += step # For visual confirmation, uncomment and run these lines in a local environment with turtle graphics support: # screen = turtle.Screen() # t = turtle.Turtle() # generate_spiral(t, 5, 45, 2, 50) # turtle.done()"},{"question":"Implement a Python function `word_search` to solve a word search puzzle. The function should take a 2D grid of characters and a word, and return True if the word can be constructed from characters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. # Requirements: 1. **Inputs:** - A 2D grid `board` of size `m x n`. - A string `word`. 2. **Outputs:** - Return a boolean value, `True` if the word exists in the grid, `False` otherwise. 3. **Constraints:** - 1 ≤ m, n ≤ 200 - 1 ≤ len(word) ≤ 10^3 - The character in the grid and word will consist only of lowercase and uppercase letters. 4. **Traversal Rules:** - You may move to any of the four adjacent cells (up, down, left, right). - You may not use the same cell more than once while constructing the word. # Example: The function signature is: ```python def word_search(board: List[List[str]], word: str) -> bool: pass ``` Examples: ```python board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F’, \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word1 = \\"ABCCED\\" # Output: True word2 = \\"SEE\\" # Output: True word3 = \\"ABCB\\" # Output: False assert word_search(board, word1) == True assert word_search(board, word2) == True assert word_search(board, word3) == False ``` # Hints: - Consider backtracking as an approach for solving the word search. - A depth-first search (DFS) algorithm will help in exploring each possible path. - Use a visited matrix to mark the cells that are part of the current path.","solution":"from typing import List def word_search(board: List[List[str]], word: str) -> bool: rows, cols = len(board), len(board[0]) def dfs(r, c, index): if index == len(word): return True if (r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]): return False # Temporarily mark the cell as visited temp, board[r][c] = board[r][c], \'#\' # Explore all four directions (up, down, left, right) found = (dfs(r+1, c, index+1) or dfs(r-1, c, index+1) or dfs(r, c+1, index+1) or dfs(r, c-1, index+1)) # Unmark the cell board[r][c] = temp return found for i in range(rows): for j in range(cols): if board[i][j] == word[0]: if dfs(i, j, 0): return True return False"},{"question":"You are tasked with writing a Python function, `analyze_tech_stock_data()`, that analyzes a DataFrame of tech stock data using the Pandas library. The DataFrame, `stock_df`, contains various columns, including date, company, opening price, closing price, and volume traded. For this task, you must perform several operations involving data cleaning, transformation, and analysis. Specifically, your function should accomplish the following steps: 1. Convert the `date` column to datetime format. 2. Correct any spelling errors in the `company` column using the provided dictionary `correct_spellings`. Any company name not in the dictionary should remain unchanged. 3. Compute a new column, `price_change`, representing the percent change from the opening price to the closing price using the formula: `((closing_price - opening_price) / opening_price) * 100`. 4. Convert the `volume` column to integer type. 5. Replace any missing values in the `price_change` column with 0. 6. Filter the DataFrame to include only the rows where the `volume` is greater than or equal to the given threshold `min_volume`. 7. Generate summary statistics for each company on the `price_change` column (mean, median, and standard deviation) and store them in a new DataFrame, `summary_df`. 8. Convert the `company` column in `stock_df` into category type. 9. Sort `stock_df` by `date` in ascending order. 10. Return a tuple containing the cleaned `stock_df` DataFrame and the `summary_df` DataFrame. Assume `correct_spellings` is a dictionary where the keys are incorrect spellings and the values are the correct spellings. You are required to use the `pandas.to_datetime`, `pandas.DataFrame.astype`, and `pandas.DataFrame.fillna` functions in your solution. ```python def analyze_tech_stock_data(stock_df, correct_spellings, min_volume): # Your implementation here ```","solution":"import pandas as pd def analyze_tech_stock_data(stock_df, correct_spellings, min_volume): # Step 1: Convert the `date` column to datetime format stock_df[\'date\'] = pd.to_datetime(stock_df[\'date\']) # Step 2: Correct any spelling errors in the `company` column stock_df[\'company\'] = stock_df[\'company\'].apply(lambda x: correct_spellings.get(x, x)) # Step 3: Compute a new column `price_change` stock_df[\'price_change\'] = ((stock_df[\'closing_price\'] - stock_df[\'opening_price\']) / stock_df[\'opening_price\']) * 100 # Step 4: Convert the `volume` column to integer type stock_df[\'volume\'] = stock_df[\'volume\'].astype(int) # Step 5: Replace any missing values in the `price_change` column with 0 stock_df[\'price_change\'] = stock_df[\'price_change\'].fillna(0) # Step 6: Filter the DataFrame based on the `volume` threshold stock_df = stock_df[stock_df[\'volume\'] >= min_volume] # Step 7: Generate summary statistics for each company on the `price_change` column summary_df = stock_df.groupby(\'company\')[\'price_change\'].agg([\'mean\', \'median\', \'std\']).reset_index() # Step 8: Convert the `company` column into category type stock_df[\'company\'] = stock_df[\'company\'].astype(\'category\') # Step 9: Sort the DataFrame by `date` in ascending order stock_df = stock_df.sort_values(by=\'date\', ascending=True) # Step 10: Return the cleaned `stock_df` DataFrame and the `summary_df` DataFrame return stock_df, summary_df"},{"question":"You are tasked with designing a function that identifies the starting indices of each occurrence of a specified pattern within a given text. The function should return a list of these starting indices. This exercise will help you practice working with strings and search algorithms. **Function Signature:** ```python def find_pattern_indices(text, pattern): Identify all starting indices where the pattern occurs within the text. Parameters: text (str): The text in which to search for the pattern. pattern (str): The substring pattern to search for in the text. Returns: list: A list of starting indices where the pattern occurs in the text. pass ``` **Parameters:** - `text` (str): The main text in which the pattern needs to be searched. - `pattern` (str): The substring pattern that needs to be located within the text. **Returns:** - `list`: A list of starting indices (integers) where the pattern starts within the text. **Example:** ```python text = \\"abracadabra\\" pattern = \\"abra\\" output = find_pattern_indices(text, pattern) print(output) ``` Expected Output: ``` [0, 7] ```","solution":"def find_pattern_indices(text, pattern): Identify all starting indices where the pattern occurs within the text. Parameters: text (str): The text in which to search for the pattern. pattern (str): The substring pattern to search for in the text. Returns: list: A list of starting indices where the pattern occurs in the text. if not text or not pattern or len(pattern) > len(text): return [] indices = [] for i in range(len(text) - len(pattern) + 1): if text[i:i+len(pattern)] == pattern: indices.append(i) return indices"},{"question":"Write a function that simulates a random walk in a two-dimensional space and plots the path. Use NumPy to handle the random generation and Matplotlib for plotting the path. The function should allow customization of the number of steps in the walk. Each step should be one unit in one of four random directions (up, down, left, right). Requirements: - The plot should have \'X Position\' as x-label and \'Y Position\' as y-label. - The plot should have a title of \\"2D Random Walk: {steps} Steps\\". - The starting point (0, 0) should be clearly marked. The function should output: tuple: A tuple containing: - numpy.ndarray: The x and y coordinates of the walk\'s path as two separate arrays. - Axes: A matplotlib Axes object for the generated plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walk(steps): ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk(steps): Simulates a random walk in a two-dimensional space and plots the path. Parameters: steps (int): The number of steps in the random walk. Returns: tuple: A tuple containing the x and y coordinates of the walk\'s path as two separate arrays, and the matplotlib Axes object for the plot. # Initialize positions x = np.zeros(steps + 1) y = np.zeros(steps + 1) # Generate steps for i in range(1, steps + 1): direction = np.random.choice([\'up\', \'down\', \'left\', \'right\']) if direction == \'up\': y[i] = y[i-1] + 1 x[i] = x[i-1] elif direction == \'down\': y[i] = y[i-1] - 1 x[i] = x[i-1] elif direction == \'left\': x[i] = x[i-1] - 1 y[i] = y[i-1] elif direction == \'right\': x[i] = x[i-1] + 1 y[i] = y[i-1] # Plot the path fig, ax = plt.subplots() ax.plot(x, y, marker=\'o\') ax.scatter(0, 0, c=\'red\', label=\'Start (0, 0)\', zorder=5) ax.set_title(f\\"2D Random Walk: {steps} Steps\\") ax.set_xlabel(\\"X Position\\") ax.set_ylabel(\\"Y Position\\") ax.legend() plt.show() return (x, y), ax"},{"question":"You are designing a task manager that allows users to manage and prioritize their tasks. Each task has a name, priority level, and estimated time to complete. You are to create a function that helps in sorting tasks based on a combined score of priority and estimated time, with higher priority tasks appearing first, and among tasks with the same priority, those with less estimated time appearing first. **Function name:** `sort_tasks` **Libraries to be used:** - None **Function Description:** The `sort_tasks` function does the following: 1. Accepts a list of dictionaries `tasks`, where each dictionary contains: - `task_name`: string, the name of the task. - `priority`: integer, an integer representing the priority level (higher number indicates higher priority). - `estimated_time`: integer, the estimated time in minutes to complete the task. 2. Sorts the tasks primarily by priority in descending order. 3. Within tasks of the same priority, sorts by estimated time in ascending order. 4. Returns the sorted list of task dictionaries. The function signature should be: ```python def sort_tasks(tasks: List[Dict[str, Any]]) -> List[Dict[str, Any]]: ... ``` Develop this function to ensure it correctly sorts the tasks list based on the described criteria. # **Example:** Given `tasks`: ```python tasks = [ {\\"task_name\\": \\"Task1\\", \\"priority\\": 2, \\"estimated_time\\": 30}, {\\"task_name\\": \\"Task2\\", \\"priority\\": 1, \\"estimated_time\\": 10}, {\\"task_name\\": \\"Task3\\", \\"priority\\": 3, \\"estimated_time\\": 15}, ] ``` The function `sort_tasks(tasks)` should return: ```python [ {\\"task_name\\": \\"Task3\\", \\"priority\\": 3, \\"estimated_time\\": 15}, {\\"task_name\\": \\"Task1\\", \\"priority\\": 2, \\"estimated_time\\": 30}, {\\"task_name\\": \\"Task2\\", \\"priority\\": 1, \\"estimated_time\\": 10}, ] ```","solution":"from typing import List, Dict, Any def sort_tasks(tasks: List[Dict[str, Any]]) -> List[Dict[str, Any]]: Sorts the tasks primarily by priority in descending order, and within the same priority, by estimated time in ascending order. Args: tasks (List[Dict[str, Any]]): A list of task dictionaries. Returns: List[Dict[str, Any]]: A sorted list of task dictionaries. return sorted(tasks, key=lambda x: (-x[\'priority\'], x[\'estimated_time\']))"},{"question":"You are tasked with writing a function to calculate the sum of all prime numbers up to a given number `n`. This function should be efficient in terms of time complexity. The function should also handle the edge cases such as when `n` is less than 2. The function signature should be: ```python def sum_of_primes(n: int) -> int: ``` Parameters: - `n` (int): The upper limit (inclusive) up to which primes should be considered. Returns: - An integer representing the sum of all prime numbers up to `n`. Constraints: - If `n` is less than 2, return 0. - Ensure the function is optimized for larger values of `n` by leveraging an efficient algorithm like the Sieve of Eratosthenes. Example Usage: ```python result = sum_of_primes(10) print(result) # Output: 17 (since 2, 3, 5, and 7 are primes less than or equal to 10) ``` **Note**: This function should not print anything but should return the sum of prime numbers up to `n` correctly based on the given parameters and constraints.","solution":"def sum_of_primes(n: int) -> int: Returns the sum of all prime numbers up to and including n. if n < 2: return 0 # Sieve of Eratosthenes to find all primes less than or equal to n sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False # Sum all prime numbers using the sieve return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"You are required to write a function named `find_unique_words(text)` that identifies and returns a list of unique words from a given input text, sorted in alphabetical order. The function should ignore case, meaning that \\"Apple\\" and \\"apple\\" should be considered the same word, and it should also ignore punctuation. - The function takes a single input `text` which is a string containing one or more sentences. - The function processes the text to remove punctuation and normalize the case. - It then splits the text into individual words and identifies unique words. - The function should return a list of unique words, sorted in alphabetical order. Function Signature: ```python def find_unique_words(text: str) -> List[str]: # your code here ``` **Constraints:** - Words are separated by spaces. - Text input can contain punctuation marks such as periods, commas, question marks, exclamation points, etc. **Example:** ```python print(find_unique_words(\\"Hello, World! Hello again.\\")) # Output: [\'again\', \'hello\', \'world\'] ``` ```python print(find_unique_words(\\"Python is great, and Python is fun!\\")) # Output: [\'and\', \'fun\', \'great\', \'is\', \'python\'] ```","solution":"from typing import List import re def find_unique_words(text: str) -> List[str]: Identifies unique words from the given text, ignoring case and punctuation, and returns a list of unique words sorted in alphabetical order. Parameters: text (str): Input text containing one or more sentences. Returns: List[str]: List of unique words sorted in alphabetical order. # Removing punctuation and converting text to lower case text_cleaned = re.sub(r\'[^ws]\', \'\', text).lower() # Splitting text into words words = text_cleaned.split() # Using set to find unique words unique_words = set(words) # Sorting unique words alphabetically sorted_unique_words = sorted(unique_words) return sorted_unique_words"},{"question":"**Inventory Management System** In this task, you are required to implement a simple inventory management system. # Function Signature ```python class Inventory: def __init__(self): pass def add_item(self, item_name: str, quantity: int) -> None: pass def remove_item(self, item_name: str, quantity: int) -> bool: pass def get_inventory(self) -> dict: pass ``` # Class Methods - `__init__()`: Initializes the inventory with an empty dictionary. - `add_item(item_name: str, quantity: int) -> None`: Adds the specified quantity of the item to the inventory. If the item already exists, increase its quantity. - `remove_item(item_name: str, quantity: int) -> bool`: Removes the specified quantity of the item from the inventory. If the item does not exist or the quantity to remove is greater than what is available, return `False`. Otherwise, decrease the quantity and return `True`. - `get_inventory() -> dict`: Returns the current state of the inventory as a dictionary with item names as keys and their quantities as values. # Requirements 1. Ensure the item names are case-insensitive (i.e., \\"apple\\" and \\"Apple\\" should be considered the same item). 2. Do not add any item with a quantity less than or equal to zero. 3. When removing items with a quantity less than or equal to zero, treat it as if the item was not in the inventory. 4. If an item quantity drops to zero after removal, remove the item from the inventory completely. **Example:** ```python # Create an inventory object inv = Inventory() # Add items to the inventory inv.add_item(\\"apple\\", 10) inv.add_item(\\"Apple\\", 5) # \\"apple\\" and \\"Apple\\" are considered the same item # Get current inventory print(inv.get_inventory()) # Output: {\\"apple\\": 15} # Remove items from the inventory print(inv.remove_item(\\"apple\\", 5)) # Output: True print(inv.get_inventory()) # Output: {\\"apple\\": 10} print(inv.remove_item(\\"Apple\\", 11)) # Output: False (not enough quantity) print(inv.get_inventory()) # Output: {\\"apple\\": 10} ``` Implement this class and its methods to manage an inventory with the aforementioned constraints and capabilities.","solution":"class Inventory: def __init__(self): self.inventory = {} def add_item(self, item_name: str, quantity: int) -> None: Adds the specified quantity of the item to the inventory. If the item already exists, increase its quantity. :param item_name: Name of the item to add. :param quantity: Quantity of the item to add. if quantity <= 0: return item_name_lower = item_name.lower() if item_name_lower in self.inventory: self.inventory[item_name_lower] += quantity else: self.inventory[item_name_lower] = quantity def remove_item(self, item_name: str, quantity: int) -> bool: Removes the specified quantity of the item from the inventory. If the item does not exist or the quantity to remove is greater than what is available, return False. Otherwise, decrease the quantity and return True. :param item_name: Name of the item to remove. :param quantity: Quantity of the item to remove. :return: True if the item was removed successfully, False otherwise. if quantity <= 0: return False item_name_lower = item_name.lower() if item_name_lower in self.inventory: if self.inventory[item_name_lower] >= quantity: self.inventory[item_name_lower] -= quantity if self.inventory[item_name_lower] == 0: del self.inventory[item_name_lower] return True else: return False else: return False def get_inventory(self) -> dict: Returns the current state of the inventory as a dictionary with item names as keys and their quantities as values. :return: Dictionary representing the inventory. return self.inventory"},{"question":"You are tasked with implementing a function to identify all unique combinations of candidates where the candidate numbers sum to a target integer. Each candidate number may be used multiple times in the combination. This scenario requires generating combinations from a given list of integers while ensuring the sum constraint is met. Your function should be named `combination_sum`, and it should take the following inputs: - `candidates` (List[int]): A list of unique integers representing different candidate numbers. - `target` (int): An integer representing the target sum. Your task is to find all unique combinations in `candidates` where the candidate numbers sum to the target. The same repeated number may be chosen from `candidates` an unlimited number of times. The combinations should be returned as a list of lists, and they can be returned in any order. # Function Signature ```python def combination_sum(candidates: List[int], target: int) -> List[List[int]]: pass ``` # Example ```python candidates = [2, 3, 6, 7] target = 7 print(combination_sum(candidates, target)) # Output: [[2, 2, 3], [7]] ``` # Constraints - All elements in `candidates` are unique. - The candidates list will have a length in the range `[1, 30]`. - The candidate numbers will be in the range `[1, 200]`. - The target will be a positive integer in the range `[1, 500]`. Your solution should use a backtracking approach to explore all possible combinations.","solution":"from typing import List def combination_sum(candidates: List[int], target: int) -> List[List[int]]: def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(candidates)): backtrack(i, target - candidates[i], path + [candidates[i]]) result = [] candidates.sort() # Optional: for optimization backtrack(0, target, []) return result"},{"question":"**Given a text file containing a list of domain names, your task is to write a function that analyzes the domains and returns the top-level domain (TLD) frequencies. Write a function `tld_frequencies` that takes the file path as an input, reads the domain names, and returns a dictionary with TLDs as keys and their corresponding counts as values. Assume each domain name is on a separate line and a domain can have multiple subdomains (e.g., `sub.example.com`). Constraints: - Ignore invalid domain names that do not conform to standard domain naming conventions. - Handle both lowercase and uppercase domain names by converting them to lowercase. - Only consider the TLD from each domain name. Example: If the input file contains: ``` example.com sub.example.com test.org another-test.org example.COM invalid_domain ``` Your function should return: ```python { \'com\': 2, \'org\': 2 } ``` Here is some boilerplate code for reference: ```python import re from collections import defaultdict def tld_frequencies(file_path): Analyze domain names and return the frequencies of top-level domains. Parameters: file_path (str): Path to the file containing domain names. Returns: dict: Dictionary with TLDs as keys and their counts as values. tld_count = defaultdict(int) tld_pattern = re.compile(r\'.[a-zA-Z]{2,}\') with open(file_path, \'r\') as file: for line in file: domain = line.strip().lower() match = tld_pattern.search(domain) if match: tld = match.group(0)[1:] tld_count[tld] += 1 return dict(tld_count) # Example usage: # file_path = \'domains.txt\' # print(tld_frequencies(file_path)) ```","solution":"import re from collections import defaultdict def tld_frequencies(file_path): Analyze domain names and return the frequencies of top-level domains. Parameters: file_path (str): Path to the file containing domain names. Returns: dict: Dictionary with TLDs as keys and their counts as values. tld_count = defaultdict(int) tld_pattern = re.compile(r\'.[a-zA-Z]{2,}\') with open(file_path, \'r\') as file: for line in file: domain = line.strip().lower() match = tld_pattern.search(domain) if match: tld = match.group(0)[1:] tld_count[tld] += 1 return dict(tld_count)"},{"question":"You are asked to create a Python function that generates a list of prime numbers up to a specified limit using the sieve of Eratosthenes algorithm. This task will test your understanding of algorithm implementation and efficiency considerations in Python. Function Specification: - Function Name: `sieve_of_eratosthenes` - Parameters: - `n` (int): The upper limit for generating prime numbers (inclusive). Instructions: 1. Initialize a boolean list `is_prime` of size `n+1` with all entries set to `True`. The indices of this list represent the numbers, and the boolean values represent whether the number is considered prime or not. 2. Set `is_prime[0]` and `is_prime[1]` to `False`, as 0 and 1 are not prime numbers. 3. Starting from the first prime number (2), iterate through the list and mark the multiples of each prime number as `False`. 4. Use a loop starting from 2 to the square root of `n` (inclusive) to ensure efficiency. 5. Filter the prime numbers from the list using a list comprehension and return the resulting list. Example: ```python def sieve_of_eratosthenes(n): is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n + 1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]] # Example usage print(sieve_of_eratosthenes(30)) ``` This function call will return a list of prime numbers up to 30: `[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]`.","solution":"def sieve_of_eratosthenes(n): Generates a list of prime numbers up to a specified limit using the sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit for generating prime numbers (inclusive). Returns: list: A list of prime numbers up to the specified limit. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]]"},{"question":"You are asked to write a Python function called `sort_dict_by_value()`. This function takes a single argument, `input_dict`, which is a dictionary where the keys are strings and the values are integers. The goal of the function is to return a new dictionary where the key-value pairs are sorted in ascending order based on their values. If two or more keys have the same value, they should be sorted in alphabetical order based on their keys. You should use the `sorted()` function for sorting, which takes a key parameter to specify a custom sort order. You should also use a dictionary comprehension to construct the new dictionary from the sorted items. For example, if the `input_dict` is: ```python { \\"apple\\": 4, \\"banana\\": 2, \\"orange\\": 3, \\"grape\\": 2 } ``` The function `sort_dict_by_value(input_dict)` should return: ```python { \\"banana\\": 2, \\"grape\\": 2, \\"orange\\": 3, \\"apple\\": 4 } ``` Implement the function `sort_dict_by_value(input_dict)` to perform the described functionality. Example: ```python input_dict = { \\"apple\\": 5, \\"banana\\": 3, \\"kiwi\\": 1, \\"mango\\": 3 } sorted_dict = sort_dict_by_value(input_dict) ``` After calling `sort_dict_by_value(input_dict)`, the `sorted_dict` should be: ```python { \\"kiwi\\": 1, \\"banana\\": 3, \\"mango\\": 3, \\"apple\\": 5 } ```","solution":"def sort_dict_by_value(input_dict): Returns a new dictionary sorted by values in ascending order. If multiple keys have the same value, sorts those keys alphabetically. sorted_items = sorted(input_dict.items(), key=lambda item: (item[1], item[0])) sorted_dict = {k: v for k, v in sorted_items} return sorted_dict"},{"question":"In network programming, efficiently parsing and interpreting server responses is crucial. Modern web services commonly return data in JSON format, which may contain nested structures and varying data types. Python\'s standard library provides tools to handle JSON data, and custom classes can be used to manage and interpret this data effectively. Your task is to write a function `extract_user_info(json_data)` that takes a JSON string (`json_data`) representing user information as input. The JSON structure includes details about multiple users, and your function should return a list of dictionaries, with each dictionary containing essential information about a user. The JSON structure is as follows: - An object with a key `\\"users\\"` that maps to a list of user objects. - Each user object contains: - `id` (integer): The user\'s ID - `name` (string): The user\'s name - `email` (string): The user\'s email address - `address` (object): An object with keys `street`, `city`, `zipcode` - `phone` (string): The user\'s phone number The function `extract_user_info` should parse the JSON string and return a list of dictionaries, where each dictionary contains the following keys: `id`, `name`, `email`, `address` (formatted as `\\"street, city, zipcode\\"`), and `phone`. Here is the detailed signature of the function you need to implement: ```python import json def extract_user_info(json_data): pass ``` Ensure that you utilize the `json` module to parse the incoming JSON data and correctly format the user\'s address information. Example input: ```python json_data = \'\'\' { \\"users\\": [ { \\"id\\": 1, \\"name\\": \\"Alice Smith\\", \\"email\\": \\"alice@example.com\\", \\"address\\": { \\"street\\": \\"123 Apple St\\", \\"city\\": \\"Wonderland\\", \\"zipcode\\": \\"12345\\" }, \\"phone\\": \\"123-456-7890\\" }, { \\"id\\": 2, \\"name\\": \\"Bob Johnson\\", \\"email\\": \\"bob@example.com\\", \\"address\\": { \\"street\\": \\"456 Orange Ave\\", \\"city\\": \\"Fruitland\\", \\"zipcode\\": \\"67890\\" }, \\"phone\\": \\"987-654-3210\\" } ] } \'\'\' ``` Expected output for the example input: ```python [ { \\"id\\": 1, \\"name\\": \\"Alice Smith\\", \\"email\\": \\"alice@example.com\\", \\"address\\": \\"123 Apple St, Wonderland, 12345\\", \\"phone\\": \\"123-456-7890\\" }, { \\"id\\": 2, \\"name\\": \\"Bob Johnson\\", \\"email\\": \\"bob@example.com\\", \\"address\\": \\"456 Orange Ave, Fruitland, 67890\\", \\"phone\\": \\"987-654-3210\\" } ] ```","solution":"import json def extract_user_info(json_data): Parses the given JSON string representing user information and returns a list of dictionaries, each containing essential information about a user. data = json.loads(json_data) users_info = [] for user in data[\'users\']: user_dict = { \'id\': user[\'id\'], \'name\': user[\'name\'], \'email\': user[\'email\'], \'address\': f\\"{user[\'address\'][\'street\']}, {user[\'address\'][\'city\']}, {user[\'address\'][\'zipcode\']}\\", \'phone\': user[\'phone\'] } users_info.append(user_dict) return users_info"},{"question":"You are responsible for writing a function that takes a list of integers and returns a new list where each element is the sum of itself and all previous elements in the original list. This operation is commonly known as calculating the \\"prefix sum\\" of the list. Your task is to write a function called `prefix_sum(lst)` which computes and returns the prefix sum list. Ensure your solution efficiently handles the list operations. Here are the specific requirements: 1. **Function Signature**: `def prefix_sum(lst: List[int]) -> List[int]:` 2. **Input**: - `lst`: A list of integers. 3. **Output**: - A list of integers where each element at index `i` is the sum of all elements from index `0` to index `i` (inclusive) in the original list. # Example: ```python # Example Usage print(prefix_sum([1, 2, 3, 4])) # Output: [1, 3, 6, 10] print(prefix_sum([-1, 0, 1, 2])) # Output: [-1, -1, 0, 2] ``` Note: Avoid using any built-in functions that directly compute the prefix sum to ensure you write the logic yourself.","solution":"from typing import List def prefix_sum(lst: List[int]) -> List[int]: Computes the prefix sum of a list of integers. :param lst: List of integers :return: List of integers representing the prefix sum result = [] current_sum = 0 for num in lst: current_sum += num result.append(current_sum) return result"},{"question":"You are tasked with creating a function to simulate a basic weather monitoring tool that reports temperature and humidity levels at regular intervals using the `random` and `time` libraries. The goal is to generate random values for temperature and humidity and display them every specified number of seconds. You are required to write a function named `monitor_weather` that takes an integer argument, `interval`, representing the number of seconds to monitor and report the weather data. Your function should continuously generate and display random temperature (in Celsius) and humidity (in percentage) values during each interval. Here\'s a step-by-step approach on how the function should work: 1. Use an infinite loop to continuously monitor and report the weather data. 2. Within the loop, generate a random temperature value between -10 and 40 degrees Celsius. 3. Generate a random humidity value between 0% and 100%. 4. Print the generated temperature and humidity values. 5. Use `time.sleep(interval)` to pause the loop for the specified interval. **Note**: You must use the `time.sleep()` function to implement the interval-based monitoring. ```python import random import time def monitor_weather(interval): pass ``` Complete the `monitor_weather` function as described.","solution":"import random import time def monitor_weather(interval): Continuously reports random temperature (in Celsius) and humidity (in percentage) values every \'interval\' seconds. Parameters: interval (int): Interval in seconds at which to report weather data. while True: temperature = random.uniform(-10, 40) humidity = random.uniform(0, 100) print(f\\"Temperature: {temperature:.2f} °C, Humidity: {humidity:.2f}%\\") time.sleep(interval)"},{"question":"You are required to write a function `evaluate_matrix` that evaluates the elements of a given 2D matrix `A` and replaces its elements according to specific conditions. The function will: 1. Accept parameter: a 2D NumPy array `A`. 2. Iterate through each element `A[i, j]` of the array. 3. Replace `A[i, j]` with: - `1` if `A[i, j]` is greater than 0. - `-1` if `A[i, j]` is less than 0. - `0` if `A[i, j]` is exactly 0. 4. Return the modified matrix `A`. The function should efficiently handle the element-wise operations on the matrix. Here is the function signature: ```python import numpy as np def evaluate_matrix(A: np.ndarray) -> np.ndarray: # Implement your solution here following the above steps pass ``` # Example **Input:** ```python A = np.array([[ 3, -1, 2], [ 0, 4, -5], [-7, 8, 0]]) ``` **Output:** ```python array([[ 1, -1, 1], [ 0, 1, -1], [-1, 1, 0]]) ``` The objective is to replace each matrix element based on the conditions provided, and return the updated matrix.","solution":"import numpy as np def evaluate_matrix(A: np.ndarray) -> np.ndarray: Evaluates the elements of matrix A and replaces them with: - 1 if the element is greater than 0 - -1 if the element is less than 0 - 0 if the element is exactly 0 Parameters: A (np.ndarray): 2D numpy array to be evaluated Returns: np.ndarray: The modified 2D numpy array result = np.where(A > 0, 1, np.where(A < 0, -1, 0)) return result"},{"question":"Create a function that takes a list of integers as input and returns a dictionary where the keys are the unique integers from the list and the values are the counts of their occurrences. The function should perform two main tasks: 1. Iterate through the list and count the occurrences of each integer. 2. Create a dictionary with unique integers as keys and their counts as values. The function should return the dictionary with the counts. You should write self-contained code starting with: ``` def count_occurrences(int_list): ```","solution":"def count_occurrences(int_list): Takes a list of integers and returns a dictionary with unique integers as keys and their counts as values. count_dict = {} for num in int_list: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"In this task, you need to develop a function named `extract_emails(file_path: str) -> List[str]` that reads a text file and extracts all valid email addresses. The emails can be scattered throughout the text and may appear in different formats, mixed with other text. You should use regular expressions to identify and extract these email addresses. The function is expected to read the content of the file at the provided `file_path`, identify all valid email addresses using a regular expression, and return them as a list of strings. An email address is considered valid if it follows the pattern: `local-part@domain`, where the `local-part` can contain uppercase and lowercase letters, digits, dots, hyphens, and underscores, and the `domain` contains uppercase and lowercase letters, digits, and dots but must have at least one dot separating the domain name and the Top-Level Domain (TLD). **Function Signature**: ```python from typing import List def extract_emails(file_path: str) -> List[str]: pass ``` **Instructions**: 1. Open and read the file located at `file_path`. 2. Use a regular expression to find all occurrences of valid email addresses in the file content. 3. Return a list of extracted email addresses. If no valid email addresses are found, return an empty list. **Example**: ```python file_path = \\"sample.txt\\" emails = extract_emails(file_path) print(emails) # Expected output could be [\\"example@example.com\\", \\"user.name@domain.co\\", etc.] ``` *Note*: Ensure the file `sample.txt` contains text with valid email addresses randomly distributed to test your function.","solution":"import re from typing import List def extract_emails(file_path: str) -> List[str]: Extracts all valid email addresses from the file at the given file path. :param file_path: Path to the text file. :return: A list of valid email addresses. with open(file_path, \'r\') as file: content = file.read() email_pattern = re.compile(r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\') emails = email_pattern.findall(content) return emails"},{"question":"You are required to write a Python function `schedule_activities` that takes a list of activities with their start and end times and returns the maximum number of non-overlapping activities that can be scheduled. This is a variation of the Activity Selection problem, which is a popular greedy algorithm problem. Function Definition ```python def schedule_activities(activities): Schedule maximum number of non-overlapping activities. Parameters ---------- activities : list of tuples Each tuple contains two integers representing the start and end time of an activity (start_time, end_time). Returns ------- int Maximum number of non-overlapping activities that can be scheduled. ``` Parameters - `activities (list of tuples)`: Each tuple contains two integers representing the start and end time of an activity `(start_time, end_time)`. Returns - `int`: Maximum number of non-overlapping activities that can be scheduled from the given list. Your implementation should follow these steps: 1. Sort the list of activities based on their end times. 2. Initialize a counter for the maximum number of activities and a variable to keep track of the end time of the last selected activity. 3. Iterate through the sorted list and select activities that start after or when the last selected activity ends, updating the counter and the end time of the last selected activity accordingly. Implement this function and ensure it handles edge cases effectively, such as an empty list of activities. # Example Usage ```python activities = [(1, 3), (2, 5), (4, 6), (6, 8), (5, 7)] print(schedule_activities(activities)) # Output: 3 ``` In this example, the maximum number of non-overlapping activities that can be scheduled is 3: [(1, 3), (4, 6), (6, 8)].","solution":"def schedule_activities(activities): Schedule the maximum number of non-overlapping activities. Parameters ---------- activities : list of tuples Each tuple contains two integers representing the start and end time of an activity (start_time, end_time). Returns ------- int Maximum number of non-overlapping activities that can be scheduled. # Sort the activities based on their ending times sorted_activities = sorted(activities, key=lambda x: x[1]) # Initialize count of maximum activities max_activities = 0 last_end_time = 0 for start, end in sorted_activities: if start >= last_end_time: max_activities += 1 last_end_time = end return max_activities"},{"question":"In a GPS navigation system, one of the common tasks is to find the shortest path between two points on a map. Given a list of routes between various points, we want to implement a function to calculate the shortest path between two specified points using Dijkstra\'s algorithm. Create a function called `shortest_path_dijkstra` that takes a dictionary representing the map, a starting point, and an ending point, and returns the shortest path distance between the start and end points. If there is no path from start to end, return `float(\'inf\')`. The map will be represented by a dictionary where the keys are the names of the points and the values are lists of tuples. Each tuple has two elements: the first element is a point that is directly reachable from the key point, and the second element is the distance to that point. Your implementation should efficiently use Dijkstra’s algorithm to compute the shortest path. **Function Signature:** ```python def shortest_path_dijkstra(map_data: dict, start: str, end: str) -> float: pass ``` **Parameters:** - `map_data` (dict): A dictionary where keys are the names of the points and values are lists of tuples. Each tuple consists of a neighboring point\'s name and the distance to that neighbor. - `start` (str): The starting point for the path. - `end` (str): The ending point for the path that we want to reach. **Returns:** - The shortest path distance (float) from the `start` point to the `end` point. If no path exists, return `float(\'inf\')`. **Requirements:** - Implement Dijkstra\'s algorithm to find the shortest path. - Handle the special case where start and end are the same by returning 0. - If the start or end point is not present in the map, handle these cases gracefully. **Example Usage:** ```python map_data = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } print(shortest_path_dijkstra(map_data, \'A\', \'D\')) # Should print: 4 print(shortest_path_dijkstra(map_data, \'A\', \'A\')) # Should print: 0 print(shortest_path_dijkstra(map_data, \'A\', \'E\')) # Should print: float(\'inf\') ```","solution":"import heapq def shortest_path_dijkstra(map_data: dict, start: str, end: str) -> float: if start not in map_data or end not in map_data: return float(\'inf\') if start == end: return 0 # Initialize distances and priority queue distances = {point: float(\'inf\') for point in map_data} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_point = heapq.heappop(priority_queue) if current_point == end: return current_distance if current_distance > distances[current_point]: continue for neighbor, weight in map_data[current_point]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return float(\'inf\')"},{"question":"You are responsible for developing a Python program to simulate a cache system with an LRU (Least Recently Used) eviction policy. Your task is to create a class `LRUCache` that supports the following methods: - `__init__(self, capacity: int)`: Initialize the cache with a positive integer capacity. - `get(self, key: int) -> int`: Return the value of the key if the key exists in the cache; otherwise, return -1. - `put(self, key: int, value: int) -> None`: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If adding the key-value pair causes the number of keys to exceed the capacity, evict the least recently used key. The LRUCache class should utilize an underlying data structure that allows for efficient O(1) operations for both getting a value and putting a new value. **Instructions:** - Implement the `LRUCache` class using any appropriate data structures (i.e., `OrderedDict` from the `collections` module in Python). - Ensure that both `get` and `put` methods work in constant time, O(1). - Write comprehensive code with proper class and function definitions. **Example Usage:** ```python # Initialize a cache with a capacity of 2 cache = LRUCache(2) # Add item (1, 1) to the cache cache.put(1, 1) # Add item (2, 2) to the cache cache.put(2, 2) # Retrieve item with key 1 (expected value is 1) print(cache.get(1)) # returns 1 # Add item (3, 3), which evicts the least recently used item with key 2 cache.put(3, 3) # Attempt to retrieve item with key 2 (expected value is -1 because it was evicted) print(cache.get(2)) # returns -1 # Add item (4, 4), which evicts the least recently used item with key 1 cache.put(4, 4) # Retrieve item with key 1 (expected value is -1 because it was evicted) print(cache.get(1)) # returns -1 # Retrieve item with key 3 (expected value is 3) print(cache.get(3)) # returns 3 # Retrieve item with key 4 (expected value is 4) print(cache.get(4)) # returns 4 ``` To summarize, define the class as follows: ```python class LRUCache: def __init__(self, capacity: int): # Your code here def get(self, key: int) -> int: # Your code here def put(self, key: int, value: int) -> None: # Your code here ```","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key, last=True) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key, last=True) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"In this exercise, you are required to use the Pandas library to work with tabular data and perform specific data manipulation tasks. Your task is to write a Python function named `analyze_sales_data()` that does the following: 1. Reads a CSV file named `sales_data.csv` into a DataFrame using the `pandas.read_csv` function. The CSV file contains at least the following columns: `Date`, `Product`, `Quantity`, `Price`. 2. Adds a new column named `Total_Sales` which is calculated as `Quantity * Price`. 3. Groups the data by `Product` and computes the sum of `Total_Sales` for each product. 4. Sorts the results in descending order of `Total_Sales`. 5. Returns the top 5 products based on their total sales as a new DataFrame. Ensure to import the necessary library: Pandas. Here\'s a template to get you started: ```python import pandas as pd def analyze_sales_data(): # Your code here pass ``` Your implementation should correctly read the data, perform the required calculations and data manipulations, and return the appropriate results in a sorted DataFrame.","solution":"import pandas as pd def analyze_sales_data(): # Read the CSV file df = pd.read_csv(\'sales_data.csv\') # Add Total_Sales column df[\'Total_Sales\'] = df[\'Quantity\'] * df[\'Price\'] # Group by Product and compute sum of Total_Sales grouped_df = df.groupby(\'Product\')[\'Total_Sales\'].sum().reset_index() # Sort the results in descending order of Total_Sales sorted_df = grouped_df.sort_values(by=\'Total_Sales\', ascending=False) # Return the top 5 products return sorted_df.head(5)"},{"question":"In data structures, a binary search tree (BST) is a useful data structure for organizing data in a way that allows for efficient insertion, deletion, and lookup operations. Your task is to implement a function `find_closest_value_in_bst(tree, target)` that finds the value in the BST that is closest to a given target value. The tree is represented using a class `BST` which has attributes `value`, `left`, and `right`. # Function Signature: ```python def find_closest_value_in_bst(tree: \'BST\', target: float) -> int: ``` # Parameters: - `tree` (BST): The root node of the binary search tree. - `target` (float): The target value to find the closest value to. # Returns: - `closest` (int): The value in the BST that is closest to the target value. # Instructions: 1. Implement the function `find_closest_value_in_bst` using the provided signature. 2. You are allowed to use a helper function if necessary, which has to be defined inside the main function. 3. Traverse the tree iteratively or recursively to find the closest value to the target. 4. The `BST` class will already be defined for you and contains the attributes `value`, `left`, and `right`. # Example: ```python class BST: def __init__(self, value): self.value = value self.left = None self.right = None # Example call to find_closest_value_in_bst function # Creating a sample BST: # 10 # / # 5 15 # / # 2 5 22 # / # 1 tree = BST(10) tree.left = BST(5) tree.right = BST(15) tree.left.left = BST(2) tree.left.right = BST(5) tree.right.right = BST(22) tree.left.left.left = BST(1) target = 12 closest_value = find_closest_value_in_bst(tree, target) print(f\\"Closest Value to {target}: {closest_value}\\") ``` # Additional Information: - If there are two values equally close to the target, return the smaller value. - The defined BST will only contain integer values. - The provided BST class structure cannot be changed; however, you can add functions as necessary.","solution":"class BST: def __init__(self, value): self.value = value self.left = None self.right = None def find_closest_value_in_bst(tree: \'BST\', target: float) -> int: def find_closest(node, target, closest): if node is None: return closest if abs(target - closest) > abs(target - node.value): closest = node.value if target < node.value: return find_closest(node.left, target, closest) elif target > node.value: return find_closest(node.right, target, closest) else: return closest return find_closest(tree, target, tree.value)"},{"question":"You are required to implement a function called `repeat_printer` that will print a given message a specified number of times, with a delay between each print. Specifically, the function should: 1. Print \\"Starting printing...\\" at the beginning. 2. Print the `message` a total of `count` times, with each print followed by a delay of `interval` seconds. 3. Print \\"Finished printing!\\" after the last message is printed. The function signature is as follows: ```python def repeat_printer(message: str, count: int, interval: float): ``` - `message`: A string representing the message to be printed. - `count`: An integer specifying how many times the message should be printed. - `interval`: A floating-point number representing the delay in seconds between each message. Use the `time.sleep` function from the `time` library for implementing the delay. # Example ```python # Example usage of the function repeat_printer(\\"Hello world!\\", 3, 2) # Expected output: # Starting printing... # Hello world! # (2 second pause) # Hello world! # (2 second pause) # Hello world! # Finished printing! ```","solution":"import time def repeat_printer(message: str, count: int, interval: float): Prints a given message a specified number of times, with a delay between each print. Parameters: message (str): The message to be printed. count (int): The number of times the message should be printed. interval (float): The delay in seconds between each print. print(\\"Starting printing...\\") for _ in range(count): print(message) time.sleep(interval) print(\\"Finished printing!\\")"},{"question":"You are tasked with writing a Python function named `next_palindrome()` that finds the smallest palindrome larger than a given integer. A palindrome is a number that reads the same forward and backward. This function should take a single integer parameter `num` and perform the following tasks: 1. Increment the given number by 1. 2. Check if the incremented number is a palindrome. 3. If it is not, repeat step 1 and 2 until a palindrome is found. 4. Return the next palindrome. **Function Signature** ```python def next_palindrome(num: int) -> int: ``` **Example Usage** ```python # Example 1 print(next_palindrome(123)) # Should return 131 # Example 2 print(next_palindrome(808)) # Should return 818 ``` **Constraints** - The input integer will be in the range 0 to 99999999. - The function must handle values efficiently even for the upper limit of the input range.","solution":"def next_palindrome(num: int) -> int: This function finds the smallest palindrome that is larger than the given integer `num`. def is_palindrome(n: int) -> bool: Helper function to check if a given integer `n` is a palindrome. return str(n) == str(n)[::-1] num += 1 while not is_palindrome(num): num += 1 return num"},{"question":"You are tasked with creating a utility that reads a matrix of integers from a text file and processes it to find the sum of all elements in the matrix. The matrix in the text file is represented such that each row of the matrix is on a new line, and each integer element in a row is separated by whitespace. Your goal is to implement a function called `sumMatrix` that accepts the file name as a parameter, reads the matrix from the file, and returns the sum of all elements in the matrix. Requirements: 1. Read the file line by line. 2. Parse each line to extract the integers. 3. Sum all extracted integers to find the total sum of the matrix. Function Signature: ```python def sumMatrix(filename): # Your implementation here ``` Parameters: - `filename`: string representing the name of the file containing the matrix data. Example File Content: ```plaintext 1 2 3 4 5 6 7 8 9 ``` In this example, the file contains a matrix: ``` 1 2 3 4 5 6 7 8 9 ``` Example Usage: ```python # Assuming the above content is in \'matrix.txt\' total_sum = sumMatrix(\'matrix.txt\') print(total_sum) ``` Expected Output: ``` 45 ``` This code should correctly open the file `matrix.txt`, read the matrix, calculate the sum of all numbers (1+2+3+4+5+6+7+8+9), and the function should return 45.","solution":"def sumMatrix(filename): Reads a matrix from a file and returns the sum of all its elements. :param filename: The name of the file containing the matrix. :return: The sum of all elements in the matrix. total_sum = 0 with open(filename, \'r\') as file: for line in file: numbers = map(int, line.split()) total_sum += sum(numbers) return total_sum"},{"question":"Write a function `csv_to_json` that converts a CSV file into a JSON object. The function should take two arguments: 1. `csv_file`: A string representing the path to the CSV file. 2. `json_file`: A string representing the path where the JSON object should be saved. The CSV file will have the following characteristics: - The first row contains the headers. - Each subsequent row contains data corresponding to the headers. Your function should read the CSV file, convert its contents into a JSON formatted string, and then write this string to the specified JSON file. The JSON structure should be an array of objects, where each object represents a row in the CSV file, and the keys are the headers. You are required to use the `csv.DictReader` method to read the CSV file and the `json.dump` method from the `json` library to write the JSON object to a file. Example usage: ```python # Consider a CSV file \'data.csv\' with the contents: # name,age,city # Alice,30,New York # Bob,25,Los Angeles # Eve,35,Chicago csv_to_json(\'data.csv\', \'data.json\') # The contents of \'data.json\' should be: # [ # {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, # {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, # {\\"name\\": \\"Eve\\", \\"age\\": 35, \\"city\\": \\"Chicago\\"} # ] ```","solution":"import csv import json def csv_to_json(csv_file, json_file): Converts a CSV file to a JSON file. Args: csv_file (str): The path to the CSV file. json_file (str): The path where the JSON object should be saved. with open(csv_file, mode=\'r\', newline=\'\') as infile: reader = csv.DictReader(infile) data = list(reader) with open(json_file, mode=\'w\') as outfile: json.dump(data, outfile, indent=4)"},{"question":"Create a function that takes a list of integers and an integer n, then selects the n largest unique integers from the list and returns them as a new list, sorted in descending order. If the list has fewer than n unique integers, return all unique integers sorted in descending order. The function should output: List: A list of the n largest unique integers in descending order. You should write self-contained code starting with: ``` def n_largest_unique(nums, n): ```","solution":"def n_largest_unique(nums, n): Takes a list of integers and an integer n, and returns the n largest unique integers from the list sorted in descending order. If the list has fewer than n unique integers, returns all unique integers sorted in descending order. unique_nums = list(set(nums)) # Get unique integers unique_nums.sort(reverse=True) # Sort in descending order return unique_nums[:n]"},{"question":"You are designing an inventory management system for a small retail store. The system should track various products and their quantities. The core functionality involves updating the inventory based on sales transactions. When a product is sold, you need to update its quantity in the inventory and display the current inventory status. For this assignment, you will write a Python function named `processSale()` that does the following: 1. Accepts the product name and the quantity sold. 2. Updates the inventory by subtracting the sold quantity from the current stock. 3. Prints a warning message if the product is out of stock or if the quantity sold exceeds the current stock. 4. Displays the updated inventory after processing the sale. To achieve this, you are given the following: - `inventory`: a dictionary where the keys are product names and the values are their respective quantities. Your task is to complete the `processSale()` function as described. ```python def processSale(product_name, quantity_sold): global inventory if product_name in inventory: if inventory[product_name] >= quantity_sold: inventory[product_name] -= quantity_sold if inventory[product_name] == 0: print(f\\"Warning: {product_name} is now out of stock.\\") else: print(f\\"Warning: Unable to process sale. Only {inventory[product_name]} units of {product_name} in stock.\\") else: print(f\\"Warning: {product_name} does not exist in the inventory.\\") displayInventory() def displayInventory(): global inventory print(\\"Current inventory status:\\") for product, quantity in inventory.items(): print(f\\"{product}: {quantity} units\\") # Example inventory to test the function inventory = { \\"apple\\": 30, \\"banana\\": 15, \\"mango\\": 5 } # You can test the function with the following statements # processSale(\\"apple\\", 5) # processSale(\\"banana\\", 20) # processSale(\\"mango\\", 5) # processSale(\\"kiwi\\", 3) ``` In this task: - Ensure that the `inventory` dictionary is updated correctly. - The `displayInventory()` function should reflect real-time changes in the inventory. - Appropriately handle scenarios where the product is out of stock or does not exist in the inventory.","solution":"# Inventory dictionary to track products and their quantities inventory = { \\"apple\\": 30, \\"banana\\": 15, \\"mango\\": 5 } def processSale(product_name, quantity_sold): global inventory if product_name in inventory: if inventory[product_name] >= quantity_sold: inventory[product_name] -= quantity_sold if inventory[product_name] == 0: print(f\\"Warning: {product_name} is now out of stock.\\") else: print(f\\"Warning: Unable to process sale. Only {inventory[product_name]} units of {product_name} in stock.\\") else: print(f\\"Warning: {product_name} does not exist in the inventory.\\") displayInventory() def displayInventory(): global inventory print(\\"Current inventory status:\\") for product, quantity in inventory.items(): print(f\\"{product}: {quantity} units\\")"},{"question":"In this problem, you are required to create a class that manages a collection of strings and provides various utility methods to manipulate and analyze these strings. The class should be named `StringCollection` and should support adding, removing, and searching for strings, as well as retrieving all strings that meet specific criteria. Specifically, you need to: 1. **Define the `StringCollection` class with the following methods:** - `add_string(s: str)`: Adds a string `s` to the collection. - `remove_string(s: str)`: Removes the string `s` from the collection if it exists. - `find_string(s: str) -> bool`: Returns `True` if the string `s` is in the collection, otherwise returns `False`. - `prefix_search(prefix: str) -> List[str]`: Returns a list of all strings in the collection that start with the given `prefix`. 2. **Implement the `StringCollection` class such that:** - The collection is stored as an attribute within the class. - Strings in the collection are unique (i.e., no duplicates are allowed). - All methods operate in a time-efficient manner. # Example Usage: ```python collection = StringCollection() collection.add_string(\\"apple\\") collection.add_string(\\"banana\\") collection.add_string(\\"apricot\\") collection.add_string(\\"berry\\") print(collection.find_string(\\"apple\\")) # Output: True print(collection.find_string(\\"orange\\")) # Output: False print(collection.prefix_search(\\"ap\\")) # Output: [\\"apple\\", \\"apricot\\"] print(collection.prefix_search(\\"b\\")) # Output: [\\"banana\\", \\"berry\\"] collection.remove_string(\\"banana\\") print(collection.find_string(\\"banana\\")) # Output: False print(collection.prefix_search(\\"b\\")) # Output: [\\"berry\\"] ``` # Constraints: - The strings only contain lowercase letters (`a`-`z`). - The methods should handle the typical operations in an efficient manner, considering edge cases like removing a string that does not exist, searching for strings in an empty collection, and searching with an empty prefix. # Notes: - Ensure that strings are stored in a way that facilitates fast retrieval and manipulation. - Consider using appropriate data structures to maintain efficiency in add, remove, and search operations.","solution":"class StringCollection: def __init__(self): self.strings = set() def add_string(self, s: str): Adds a string `s` to the collection. self.strings.add(s) def remove_string(self, s: str): Removes the string `s` from the collection if it exists. self.strings.discard(s) def find_string(self, s: str) -> bool: Returns True if the string `s` is in the collection, otherwise returns False. return s in self.strings def prefix_search(self, prefix: str) -> list: Returns a list of all strings in the collection that start with the given `prefix`. return [string for string in self.strings if string.startswith(prefix)]"},{"question":"You are tasked with writing a function to compute the intersection of two sets, returning a list of items that appear in both. The function, named `find_intersection`, should accept two lists of strings as arguments. You must use the `set` data structure to efficiently compute the intersection. **Function Signature:** ```python def find_intersection(list1: list[str], list2: list[str]) -> list[str]: pass ``` **Inputs:** - `list1` (list[str]): A list of strings. - `list2` (list[str]): Another list of strings. **Outputs:** - `list[str]`: A list of strings that are present in both input lists. The order of elements in the output list does not matter. **Example:** ```python list1 = [\\"apple\\", \\"banana\\", \\"cherry\\"] list2 = [\\"banana\\", \\"cherry\\", \\"date\\"] print(find_intersection(list1, list2)) # Output: [\'banana\', \'cherry\'] ``` **Notes:** - Ensure the function handles lists of different lengths. - If there are no common elements, the function should return an empty list. - Duplicate strings within a single input list should only appear once in the intersection if they are found in the other list. For example, if `list1 = [\\"apple\\", \\"apple\\", \\"banana\\"]` and `list2 = [\\"apple\\", \\"cherry\\"]`, the output should be `[\\"apple\\"]`.","solution":"def find_intersection(list1: list[str], list2: list[str]) -> list[str]: Returns a list of strings that appear in both input lists. Args: list1 (list[str]): The first list of strings. list2 (list[str]): The second list of strings. Returns: list[str]: A list containing the intersection of the two lists. set1 = set(list1) set2 = set(list2) intersection = list(set1 & set2) return intersection"},{"question":"Write a function that performs topological sorting on a directed acyclic graph (DAG). The graph is represented as an adjacency list, where each node points to a list of nodes it directs to. The topological sort should yield an ordering of the nodes such that for every directed edge `u -> v`, node `u` appears before node `v`. Your task is to implement the following function: ```python def topological_sort(graph): Performs a topological sort on a directed acyclic graph (DAG). Parameters: - graph (dict): adjacency list representing the graph where graph[u] is a list of nodes that node u has a directed edge to. Returns: - list: a list of nodes representing the topological order. pass ``` Input - `graph`: A dictionary where each key is a node, and the value is a list of nodes that have directed edges from the key node. Output - A list containing nodes in topological order if the graph is a DAG. In case the graph is not a DAG (contains cycles), return an empty list. # Example ```python graph = { 0: [1, 2], 1: [3], 2: [3], 3: [4], 4: [] } print(topological_sort(graph)) # Output: [0, 2, 1, 3, 4] or [0, 1, 2, 3, 4] ``` # Constraints 1. The graph will have at most 1000 nodes. 2. It is guaranteed that the graph does not contain any self-loops. **Hint**: You may use Kahn\'s algorithm for topological sorting. Also, handling cycles can be done via a node visitation state mechanism.","solution":"def topological_sort(graph): Performs a topological sort on a directed acyclic graph (DAG). Parameters: - graph (dict): adjacency list representing the graph where graph[u] is a list of nodes that node u has a directed edge to. Returns: - list: a list of nodes representing the topological order. in_degree = {u: 0 for u in graph} # Initialize in-degree of each node to 0 for u in graph: for v in graph[u]: in_degree[v] += 1 # Compute in-degree of each node zero_in_degree_queue = [u for u in in_degree if in_degree[u] == 0] top_order = [] while zero_in_degree_queue: u = zero_in_degree_queue.pop(0) # Node with no incoming edges top_order.append(u) # Decrease the in-degree of the neighbors for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: zero_in_degree_queue.append(v) # If top_order contains all nodes, then we have a valid topological ordering if len(top_order) == len(graph): return top_order else: # If there are some nodes left, then the graph had a cycle return []"},{"question":"You are asked to write a Python function that evaluates a mathematical expression given in the form of a string and returns the result as a float. Name this function `evaluate_expression(expression)` where `expression` is a string representing the mathematical expression. 1. **Processing the Expression**: - The expression can include integers, floating-point numbers, and the operators: `+`, `-`, `*`, `/`, and parentheses `(`, `)`. - The expression can have spaces which should be ignored. - Assume that the expression is well-formed and does not need additional validation. 2. **Evaluating the Expression**: - Use Python’s `eval` function to evaluate the mathematical expression. - Handle any exceptions and return a message \'Invalid Expression\' if an error occurs during evaluation. 3. **Returning the Result**: - If the expression evaluates successfully, return the result as a float. Example usage: ```python evaluate_expression(\\"3 + 5 * 2\\") # Output: 13.0 evaluate_expression(\\"(2.5 + 3.1) / 2\\") # Output: 2.8 evaluate_expression(\\"10 / (5 - 5)\\") # Output: \'Invalid Expression\' ``` **Function Signature**: ```python def evaluate_expression(expression: str) -> float or str: pass ```","solution":"def evaluate_expression(expression: str) -> float or str: Evaluates a mathematical expression given in the form of a string and returns the result as a float. If an error occurs during evaluation, returns \'Invalid Expression\'. :param expression: str, mathematical expression :return: float or str, result of evaluation or \'Invalid Expression\' # Remove any spaces in the expression expression = expression.replace(\\" \\", \\"\\") try: # Evaluate the expression result = eval(expression) return float(result) except Exception: return \'Invalid Expression\'"},{"question":"You need to create a function that determines the intersection of two given lists of integers. Specifically, your task is to write a function `find_intersection` that returns a sorted list of unique integers that appear in both input lists. Function Definition ```python def find_intersection(list1, list2): Find the intersection of two lists and return a sorted list of unique elements. Parameters: - list1 : List[int] The first input list of integers. - list2 : List[int] The second input list of integers. Returns: - result: List[int] A sorted list of unique integers that are present in both input lists. ``` Requirements 1. **Inputs:** Two lists of integers, `list1` and `list2`. 2. **Output:** A sorted list of unique integers that are present in both `list1` and `list2` Example 1. Given: ```python list1 = [4, 9, 5] list2 = [9, 4, 9, 8, 4] ``` The function should return: ```python [4, 9] ``` 2. Given: ```python list1 = [1, 2, 2, 1] list2 = [2, 2] ``` The function should return: ```python [2] ``` The function should effectively handle lists with duplicate values and ensure that the result is a sorted list of unique elements present in both input lists.","solution":"def find_intersection(list1, list2): Find the intersection of two lists and return a sorted list of unique elements. Parameters: - list1 : List[int] The first input list of integers. - list2 : List[int] The second input list of integers. Returns: - result: List[int] A sorted list of unique integers that are present in both input lists. # Use set intersection to find common elements intersection = set(list1) & set(list2) # Convert to sorted list and return return sorted(list(intersection))"},{"question":"Create a function `sort_by_occurrences_and_value(arr)` which takes a list of integers `arr` and returns a new list sorted by the frequency of occurrences of each number in descending order. If two numbers have the same frequency, they should be sorted by their numerical value in ascending order. The function should follow these steps: 1. Use the `collections.Counter` to count the frequency of each integer in `arr`. 2. Sort the list of integers using a custom sort key defined by a lambda function that sorts based on: - The negative frequency (to ensure descending order of occurrences). - The integer value itself (to ensure ascending order of values for ties in frequency). 3. Return the sorted list. **Function Signature:** `def sort_by_occurrences_and_value(arr: List[int]) -> List[int]:` **Example:** ```python arr = [2, 3, 1, 2, 4, 3, 2] print(sort_by_occurrences_and_value(arr)) # Output: [2, 2, 2, 3, 3, 1, 4] arr = [5, 5, 4, 6, 6, 6, 5, 4, 4, 4, 7] print(sort_by_occurrences_and_value(arr)) # Output: [4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7] ```","solution":"from collections import Counter from typing import List def sort_by_occurrences_and_value(arr: List[int]) -> List[int]: Sorts the list by the frequency of occurrences of each number in descending order. If two numbers have the same frequency, they are sorted by their numerical value in ascending order. # Count the frequency of each number in the list frequency = Counter(arr) # Sort the list with a custom sort key: # - primary key: negative frequency (for descending order) # - secondary key: number itself (for ascending order) sorted_arr = sorted(arr, key=lambda x: (-frequency[x], x)) return sorted_arr"},{"question":"You are tasked with writing a Python function that simulates a basic banking system where users can create accounts, deposit money, and withdraw money. Each user should be identified by a unique account number, and each account should store the user\'s name and current balance. **Function Specifications:** - You should define the `BankAccount` class with the following methods: - `__init__(self, account_number: int, user_name: str)`: Initializes the account with a unique account number, the user\'s name, and an initial balance of 0. - `deposit(self, amount: float)`: Increases the account balance by the deposit amount if the amount is positive. - `withdraw(self, amount: float)`: Decreases the account balance by the withdrawal amount if the amount is positive and there are sufficient funds in the account. - `get_balance(self) -> float`: Returns the current balance of the account. **Example Usage:** ```python account1 = BankAccount(123456, \\"Alice\\") account2 = BankAccount(789012, \\"Bob\\") account1.deposit(100.0) account1.withdraw(30.0) account2.deposit(200.0) print(account1.get_balance()) # Output: 70.0 print(account2.get_balance()) # Output: 200.0 ``` Please ensure the class maintains proper encapsulation and handles errors appropriately, such as attempting to withdraw more money than available.","solution":"class BankAccount: def __init__(self, account_number: int, user_name: str): Initializes the account with a unique account number, the user\'s name, and an initial balance of 0. self.account_number = account_number self.user_name = user_name self.balance = 0.0 def deposit(self, amount: float): Increases the account balance by the deposit amount if the amount is positive. if amount > 0: self.balance += amount else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount: float): Decreases the account balance by the withdrawal amount if the amount is positive and there are sufficient funds in the account. if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount def get_balance(self) -> float: Returns the current balance of the account. return self.balance"},{"question":"Your task is to write a Python function called `final_position` that calculates the final position of a point after a series of movements in a 2D plane. Each movement is represented by a command in a string format, and all movements start from the origin point (0, 0). The function should accept a list of commands, where each command is a string in the format `direction distance`. - `direction`: A string that can be \\"UP\\", \\"DOWN\\", \\"LEFT\\", or \\"RIGHT\\" indicating the direction of movement. - `distance`: An integer representing the distance to move in the specified direction. The function should return a tuple representing the final coordinates (x, y) of the point after executing all commands in the order they were given. Here are the movement rules: - \\"UP\\" increases the y-coordinate by the given distance. - \\"DOWN\\" decreases the y-coordinate by the given distance. - \\"LEFT\\" decreases the x-coordinate by the given distance. - \\"RIGHT\\" increases the x-coordinate by the given distance. # Example For example, if the input list of commands is `[\\"UP 5\\", \\"DOWN 3\\", \\"LEFT 2\\", \\"RIGHT 1\\"]`, the calculation would be: - Starting at (0, 0) - Move up 5 units -> (0, 5) - Move down 3 units -> (0, 2) - Move left 2 units -> (-2, 2) - Move right 1 unit -> (-1, 2) The final position should be (-1, 2). Function Signature ```python def final_position(commands: list) -> tuple: ``` **Input** - `commands`: A list of strings where each string follows the format \\"direction distance\\". **Output** - A tuple of two integers representing the final coordinates (x, y) after executing all commands.","solution":"def final_position(commands): Calculates the final position on a 2D plane after executing a list of movement commands. Args: commands (list): A list of strings where each string follows the format \\"direction distance\\". Returns: tuple: The final coordinates (x, y) after executing all commands. x, y = 0, 0 for command in commands: direction, distance = command.split() distance = int(distance) if direction == \\"UP\\": y += distance elif direction == \\"DOWN\\": y -= distance elif direction == \\"LEFT\\": x -= distance elif direction == \\"RIGHT\\": x += distance return (x, y)"},{"question":"You need to create a function `find_highest_average_temp` that reads a CSV file containing weather data and calculates the city with the highest average temperature. The CSV file, named `weather_data.csv`, will be in the same directory as your script. The CSV file will contain the following columns: - **City**: Name of the city. - **Temperature**: Recorded temperature for the city in degrees Fahrenheit. Each row in the file represents a separate temperature reading for the city. Your function should: 1. Read the contents of the CSV file. 2. Parse the data to calculate the average temperature for each city. 3. Identify the city with the highest average temperature. 4. Return the name of that city. **Assumptions**: - The CSV file will have a header row. - Each city will have at least one temperature reading. **Example**: Assume that `weather_data.csv` contains the following data: ``` City,Temperature New York,78 Los Angeles,85 Chicago,72 New York,82 Los Angeles,88 Chicago,74 ``` In this example, Los Angeles has the highest average temperature, so the function will return `\\"Los Angeles\\"`. **Function Definition**: ```python def find_highest_average_temp(): pass ``` **Requirements**: - Use the `csv` module to read the CSV file. - Calculate the average temperature for each city. - Identify and return the city with the highest average temperature.","solution":"import csv from collections import defaultdict def find_highest_average_temp(): city_temps = defaultdict(list) # Open and read the CSV file with open(\'weather_data.csv\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: city = row[\'City\'] temp = float(row[\'Temperature\']) city_temps[city].append(temp) # Calculate the average temperature for each city max_avg_temp = float(\'-inf\') hottest_city = None for city, temps in city_temps.items(): avg_temp = sum(temps) / len(temps) if avg_temp > max_avg_temp: max_avg_temp = avg_temp hottest_city = city return hottest_city"},{"question":"You are tasked with creating a function `draw_pie_chart()` that visualizes data distribution using a pie chart. The function will take a list of categories and their corresponding values as input, and display a pie chart using the `matplotlib` library. Additionally, the pie chart should include percentage labels and explode the largest category to highlight it. The function must: 1. Take two inputs: a list of category labels and a corresponding list of values. 2. Ensure the pie chart has percentage labels formatted to one decimal place. 3. Explode the slice with the highest value. 4. Include a title for the chart. Use the following `matplotlib.pyplot` functions to complete the task: - `pyplot.pie` - `pyplot.title` - `pyplot.show` Here\'s the scaffold of the function you need to complete: ```python import matplotlib.pyplot as plt def draw_pie_chart(labels, sizes): # Verify inputs if len(labels) != len(sizes): raise ValueError(\\"The length of labels and sizes must be the same\\") # Determine the index of the largest category max_index = sizes.index(max(sizes)) # Create explode list with all zeros except the max index explode = [0] * len(sizes) explode[max_index] = 0.1 # Explode the largest slice # Plot pie chart plt.pie(sizes, explode=explode, labels=labels, autopct=\'%1.1f%%\', startangle=140) # Set title plt.title(\'Category Distribution\') # Display the plot plt.show() # Example usage labels = [\'Category A\', \'Category B\', \'Category C\', \'Category D\'] sizes = [15, 30, 45, 10] draw_pie_chart(labels, sizes) ``` The `draw_pie_chart()` function will take the `labels` and `sizes` lists as input, verify that both lists have the same length, determine the index of the largest category, explode the slice with the highest value, and display a pie chart with percentage labels and a title. Use the example provided to test your implementation.","solution":"import matplotlib.pyplot as plt def draw_pie_chart(labels, sizes): # Verify inputs if len(labels) != len(sizes): raise ValueError(\\"The length of labels and sizes must be the same\\") # Determine the index of the largest category max_index = sizes.index(max(sizes)) # Create explode list with all zeros except the max index explode = [0] * len(sizes) explode[max_index] = 0.1 # Explode the largest slice # Plot pie chart plt.pie(sizes, explode=explode, labels=labels, autopct=\'%1.1f%%\', startangle=140) # Set title plt.title(\'Category Distribution\') # Display the plot plt.show() # Example usage labels = [\'Category A\', \'Category B\', \'Category C\', \'Category D\'] sizes = [15, 30, 45, 10] draw_pie_chart(labels, sizes)"},{"question":"You are given a report generation script that processes sales data and generates a detailed report of monthly sales. The script reads the sales data from a CSV file and performs various operations such as filtering, aggregation, and formatting the data for the report. Your task is to write a function `calculate_total_sales` that calculates the total sales for a given month. This function should: 1. Use the Pandas library for data manipulation. 2. Ensure the function handles cases where the input data might contain missing values. 3. Filter the data for the specified month and sum up the sales amounts. Function Signature: ```python import pandas as pd def calculate_total_sales(sales_data, year, month): Calculates the total sales for a specified month. Args: sales_data : pd.DataFrame The sales data with columns [\'date\', \'amount\'] where \'date\' is in \'YYYY-MM-DD\' format. year : int The year for which the sales total is to be calculated. month : int The month (1-12) for which the sales total is to be calculated. Returns: float The total sales amount for the specified month. ``` # Example: Assume we have the following sales data as a Pandas DataFrame: ```python import pandas as pd from io import StringIO # Example sales data in CSV format csv_data = StringIO( date,amount 2023-01-15,100.50 2023-01-28,200.75 2023-02-14,150.20 2023-02-21,175.80 2023-01-07,95.00 ) # Reading sales data into a DataFrame sales_data = pd.read_csv(csv_data, parse_dates=[\'date\']) ``` Usage: ```python total_sales = calculate_total_sales(sales_data, 2023, 1) print(f\'Total Sales for January 2023: {total_sales}\') # Should print 396.25 ``` # Requirements: - Utilize `pandas` to filter and aggregate the sales data. - Ensure missing values in \'amount\' column are treated as zero. - Properly handle the date filtering using \'year\' and \'month\' parameters. - Return the total sales amount as a float.","solution":"import pandas as pd def calculate_total_sales(sales_data, year, month): Calculates the total sales for a specified month. Args: sales_data : pd.DataFrame The sales data with columns [\'date\', \'amount\'] where \'date\' is in \'YYYY-MM-DD\' format. year : int The year for which the sales total is to be calculated. month : int The month (1-12) for which the sales total is to be calculated. Returns: float The total sales amount for the specified month. # Ensure \'amount\' column has no missing values, replace NaNs with 0 sales_data[\'amount\'] = sales_data[\'amount\'].fillna(0) # Filter data by the specified year and month filtered_data = sales_data[ (sales_data[\'date\'].dt.year == year) & (sales_data[\'date\'].dt.month == month) ] # Sum up the \'amount\' column for the filtered data total_sales = filtered_data[\'amount\'].sum() return total_sales"},{"question":"Write a function named `generate_password` that creates a random password based on the specified criteria. The function should take an integer `length` as input and return a string that is the generated password. The generated password must meet the following conditions: 1. It must include at least one lowercase letter. 2. It must include at least one uppercase letter. 3. It must include at least one digit. 4. It must include at least one special character (`!`, `@`, `#`, ``, `%`, `^`, `&`, `*`, `(`, `)`, `_`, `+`). 5. The remaining characters can be any combination of letters, digits, or special characters. 6. The total length of the password should be equal to the `length` parameter passed to the function. Your task is to implement the function `generate_password(length)` which takes in an integer representing the desired password length and generates a random password that fulfills the above requirements. Here is the function signature: ```python import random import string def generate_password(length: int) -> str: ``` Example usage: ```python print(generate_password(12)) # Sample Output: \\"aD3jf8*Lp&Q\\" print(generate_password(8)) # Sample Output: \\"a1B#cD2@\\" ``` Ensure that your solution strictly adheres to the functionality outlined in the problem description and uses Python\'s `random` and `string` modules for randomness and character sets.","solution":"import random import string def generate_password(length: int) -> str: if length < 4: raise ValueError(\\"Password length must be at least 4 characters to include all required types.\\") all_characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + \\"!@#%^&*()_+\\" password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(\\"!@#%^&*()_+\\") ] password += random.choices(all_characters, k=length-4) random.shuffle(password) return \'\'.join(password)"},{"question":"Write a function called `most_common_word` that takes in two parameters: 1. `text`: A string representing a block of text. 2. `banned_words`: A list of strings representing words that should be excluded from consideration. The function should perform the following steps: 1. Tokenize the text into words, ignoring case and punctuation. 2. Convert all words to lowercase. 3. Exclude all the words present in the `banned_words` list from the tokenized words. 4. Determine and return the most frequently occurring word among the remaining words. If there\'s a tie, return any one of the most frequent words. You can assume that the text will contain at least one word that is not in the `banned_words` list. # Example usage: ```python text = \\"Hello world! The world is full of wonderful things, and the world is our oyster.\\" banned_words = [\\"the\\", \\"is\\", \\"and\\"] most_common = most_common_word(text, banned_words) print(most_common) # Output could be \\"world\\" ``` # Constraints: - You may use built-in Python libraries such as `re` for regular expressions to help with the tokenization process. - The function should handle large inputs efficiently.","solution":"import re from collections import Counter def most_common_word(text, banned_words): Returns the most common non-banned word in the given text. Parameters: text (str): The block of text to analyze. banned_words (list): The list of banned words to exclude. Returns: str: The most frequently occurring non-banned word. # Normalize the input text to lower case and remove punctuation using regex. words = re.findall(r\'bw+b\', text.lower()) # Create a set of banned words for efficient lookup. banned_set = set(banned_words) # Filter out the banned words filtered_words = [word for word in words if word not in banned_set] # Find the most common word most_common_word, _ = Counter(filtered_words).most_common(1)[0] return most_common_word"},{"question":"Simulate a particle swarm optimization (PSO) algorithm to find the minimum of a given mathematical function. The function randomly generates an initial population (swarm) of particles within a given search space and iteratively updates their positions and velocities based on their own experience and the experience of their neighbors. Implement the PSO algorithm using the following steps: 1. Initialize the positions and velocities of the particles randomly within the search space. 2. Evaluate the fitness of each particle by calculating the value of the function at each particle\'s position. 3. Update each particle\'s velocity and position based on its personal best position and the global best position found by any particle in the swarm. 4. Repeat the process for a specified number of iterations or until convergence. Note: - Ensure that the velocity update considers both cognitive (personal best) and social (global best) components. - Ensure that the positions are updated correctly based on the new velocities and are kept within the search space boundaries. The function should output: - The position of the particle that provides the minimum value of the function. - The minimum value of the function at that position. You should write self-contained code starting with: ``` import numpy as np import random def task_func(func, bounds, num_particles=30, iterations=1000, inertia=0.5, cognitive_constant=1.5, social_constant=1.5): ```","solution":"import numpy as np import random def task_func(func, bounds, num_particles=30, iterations=1000, inertia=0.5, cognitive_constant=1.5, social_constant=1.5): dimensions = len(bounds) particles_pos = np.random.rand(num_particles, dimensions) for i in range(dimensions): particles_pos[:, i] = bounds[i][0] + particles_pos[:, i] * (bounds[i][1] - bounds[i][0]) particles_vel = np.random.rand(num_particles, dimensions) personal_best_pos = np.copy(particles_pos) personal_best_val = np.array([func(p) for p in particles_pos]) global_best_pos = personal_best_pos[np.argmin(personal_best_val)] global_best_val = np.min(personal_best_val) for _ in range(iterations): r_p = np.random.rand(num_particles, dimensions) r_g = np.random.rand(num_particles, dimensions) for i in range(num_particles): particles_vel[i] = (inertia * particles_vel[i] + cognitive_constant * r_p[i] * (personal_best_pos[i] - particles_pos[i]) + social_constant * r_g[i] * (global_best_pos - particles_pos[i])) particles_pos[i] += particles_vel[i] particles_pos[i] = np.clip(particles_pos[i], [b[0] for b in bounds], [b[1] for b in bounds]) current_val = func(particles_pos[i]) if current_val < personal_best_val[i]: personal_best_val[i] = current_val personal_best_pos[i] = particles_pos[i] global_best_pos = personal_best_pos[np.argmin(personal_best_val)] global_best_val = np.min(personal_best_val) return global_best_pos, global_best_val"},{"question":"Consider a situation where you\'re given a list of integers representing the heights of bar graphs in a histogram. Each bar has a width of 1. You need to find the largest rectangular area that can be formed within the histogram. You are to implement a Python function called `largest_rectangle_area(heights)` that returns the area of the largest rectangle. Function Signature ```python from typing import List def largest_rectangle_area(heights: List[int]) -> int: pass ``` Input - `heights: List[int]`: A list of integers representing the heights of the bars in the histogram (1 ≤ length of `heights` ≤ 1000, 0 ≤ height of each bar ≤ 10000). Output - Returns an integer representing the area of the largest rectangle that can be formed within the histogram. Examples ```python assert largest_rectangle_area([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_area([2, 4]) == 4 assert largest_rectangle_area([1, 1, 1, 1, 1]) == 5 assert largest_rectangle_area([4, 2, 0, 3, 2, 5]) == 6 ``` # Explanation 1. For the input `[2, 1, 5, 6, 2, 3]`, the largest rectangle has an area of 10 (formed by the bars of height 5 and 6). 2. For the input `[2, 4]`, the largest rectangle has an area of 4 (formed by the single bar of height 4). 3. For the input `[1, 1, 1, 1, 1]`, the largest rectangle covers all bars, resulting in an area of 5. 4. For the input `[4, 2, 0, 3, 2, 5]`, the largest rectangle is formed by bars of height 3 and 2, resulting in an area of 6. # Constraints - The solution must be efficient enough to handle the given constraints smoothly. Consider using a stack-based approach for optimal complexity.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: stack = [] # stack to keep the indices of the histogram bars max_area = 0 # variable to store the maximum area index = 0 # current index while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the shortest bar area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from the stack and calculate the area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In this task, you are required to simulate a simple banking transaction system. The goal is to create a class `BankAccount` that will keep track of an account balance and allow deposits, withdrawals, and balance inquiries. You also need to handle overdraft attempts gracefully. You will write a class `BankAccount` with the following methods: 1. `__init__(self, initial_balance)`: Initialize the account with an initial balance. 2. `deposit(self, amount)`: Add the specified amount to the account balance. 3. `withdraw(self, amount)`: Subtract the specified amount from the account balance. If there are insufficient funds, prevent the withdrawal and print an appropriate message. 4. `get_balance(self)`: Return the current balance of the account. **Class Definition:** ```python class BankAccount: def __init__(self, initial_balance): Initialize the account with an initial balance. def deposit(self, amount): Add the specified amount to the account balance. def withdraw(self, amount): Subtract the specified amount from the account balance. If insufficient funds, print an appropriate message. def get_balance(self): Return the current balance of the account. ``` **Constructor and Method Descriptions:** - `__init__(self, initial_balance: float)`: Initializes the `BankAccount` with a specified initial balance. - `deposit(self, amount: float)`: Adds the specified amount to the current balance. The amount must be positive. - `withdraw(self, amount: float)`: Subtracts the specified amount from the current balance. If the balance is insufficient to cover the withdrawal, print \\"Insufficient funds\\" and make no changes to the balance. - `get_balance(self)`: Returns the current balance of the account. **Example Usage:** ```python # Create a bank account with an initial balance of 100 account = BankAccount(100) # Deposit 50 account.deposit(50) # Withdraw 30 account.withdraw(30) # Attempt to withdraw 150 (greater than current balance) account.withdraw(150) # Should print \\"Insufficient funds\\" # Get the current balance balance = account.get_balance() # Should return 120 ``` **Tasks:** 1. Define the `BankAccount` class with the specified methods. 2. Implement the constructor to initialize the account balance. 3. Ensure the `deposit` and `withdraw` methods handle transactions appropriately, including checks for positive amounts and sufficient balance. 4. Implement the `get_balance` method to return the current account balance.","solution":"class BankAccount: def __init__(self, initial_balance): Initialize the account with an initial balance. self.balance = initial_balance def deposit(self, amount): Add the specified amount to the account balance. The amount must be positive. if amount > 0: self.balance += amount else: print(\\"Deposit amount must be positive\\") def withdraw(self, amount): Subtract the specified amount from the account balance. If insufficient funds, print an appropriate message. if amount > 0: if self.balance >= amount: self.balance -= amount else: print(\\"Insufficient funds\\") else: print(\\"Withdrawal amount must be positive\\") def get_balance(self): Return the current balance of the account. return self.balance"},{"question":"Write a function that reads a JSON file into a pandas DataFrame and fills any missing or NaN values in non-numeric columns with the string \'missing\'. Additionally, for numeric columns, replace the missing values with the median of their respective columns. Return the processed DataFrame and a summary dictionary containing the column names and counts of filled missing values for each column. The function should output with: tuple: A tuple containing the processed pandas DataFrame and a dictionary mapping column names to the count of filled missing values. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def task_func(json_file_path): ```","solution":"import pandas as pd import numpy as np def task_func(json_file_path): Reads a JSON file into a pandas DataFrame, fills missing or NaN values, and returns the processed DataFrame along with a summary dictionary. Parameters: json_file_path (str): The path to the JSON file. Returns: tuple: A tuple containing the processed pandas DataFrame and a dictionary mapping column names to the count of filled missing values. # Read JSON file into DataFrame df = pd.read_json(json_file_path) # Dictionary to store counts of filled missing values for each column summary_dict = {} for column in df.columns: num_missing_before = df[column].isna().sum() # Count of missing values before if df[column].dtype == np.number: # For numeric columns, fill missing values with the median median_value = df[column].median() df[column].fillna(median_value, inplace=True) else: # For non-numeric columns, fill missing values with \'missing\' df[column].fillna(\'missing\', inplace=True) num_missing_after = df[column].isna().sum() # Count of missing values after summary_dict[column] = num_missing_before - num_missing_after # Number of filled values return df, summary_dict"},{"question":"You have been tasked with writing a function to recommend books based on a user\'s reading history. The function will analyze a dataset of book ratings to identify the highest-rated books that the user has not yet read. You will implement a function named `recommend_books` that performs the following tasks: 1. Loads a dataset containing user-book ratings from a CSV file. 2. Identifies books that the user has not read. 3. Recommends the top N highest-rated books from the unread books list. Use the following format for the CSV file: ``` user_id,book_id,rating 1,1,5 1,2,4 2,1,4 2,3,5 3,2,5 ... ``` **Function Signature:** ```python def recommend_books(user_id: int, n: int, file_path: str) -> List[int]: ``` **Input:** - `user_id`: int - the identifier of the user for whom to recommend books. - `n`: int - the number of top-rated books to recommend. - `file_path`: str - the file path to the CSV file containing the user-book ratings. **Output:** - Returns a list of `n` book IDs that are the highest-rated among the books the user has not read yet. **Requirements:** - Use `pandas` to handle CSV data. - Use `pandas.DataFrame` to calculate average ratings per book. - Ensure the function retrieves and sorts books efficiently. Example: ```python recommend_books(1, 3, \'book_ratings.csv\') ``` **Note:** - If the user has read all the books or if there are fewer than `n` unread books, return all remaining unread books sorted by highest rating.","solution":"import pandas as pd from typing import List def recommend_books(user_id: int, n: int, file_path: str) -> List[int]: # Load dataset from CSV file df = pd.read_csv(file_path) # Extract books that the user has not read user_rated_books = df[df[\'user_id\'] == user_id][\'book_id\'].unique() all_books = df[\'book_id\'].unique() unread_books = [book for book in all_books if book not in user_rated_books] # Calculate average rating for each book avg_ratings = df.groupby(\'book_id\')[\'rating\'].mean().reset_index() # Filter the average ratings to only include unread books unread_books_ratings = avg_ratings[avg_ratings[\'book_id\'].isin(unread_books)] # Sort the books by average rating in descending order sorted_unread_books = unread_books_ratings.sort_values(by=\'rating\', ascending=False) # Get the top N highest-rated books top_books = sorted_unread_books.head(n) # Return the list of book IDs return top_books[\'book_id\'].tolist()"},{"question":"You are tasked with analyzing a permutation of an array of integers. Given an array of integers containing unique elements, its permutation is achieved by performing a series of swaps. Your objective is to find the minimum number of swaps required to sort the array in ascending order. **Objective:** Write a function named `minimumSwaps` that: 1. Takes an array of unique integers as its input. 2. Returns the minimum number of adjacent swaps required to sort the array. **Input and Output:** - The input is an array of unique integers. - The output is an integer representing the minimum number of swaps. Below is an example of how your function should behave: ```python def minimumSwaps(arr): # Your implementation here # Example usage arr = [4, 3, 1, 2] result = minimumSwaps(arr) print(result) # Output: 3 ``` Explanation: The optimal sequence of swaps to sort the array `[4, 3, 1, 2]` is: 1. Swap indices 0 and 2 -> `[1, 3, 4, 2]` 2. Swap indices 1 and 3 -> `[1, 2, 4, 3]` 3. Swap indices 2 and 3 -> `[1, 2, 3, 4]` Therefore, the function returns `3` because 3 swaps are required to sort the array. Make sure to comply with the following constraints: - The input array will have a length of at most `10^5`. - The elements of the array will be unique and within the range from `1` to `10^5`.","solution":"def minimumSwaps(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arr_pos = [(val, idx) for idx, val in enumerate(arr)] arr_pos.sort() visited = {i: False for i in range(n)} swaps = 0 for i in range(n): if visited[i] or arr_pos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps # Example usage arr = [4, 3, 1, 2] result = minimumSwaps(arr) print(result) # Output: 3"},{"question":"You are tasked with implementing a function called `extract_unique_integers` that processes a given list of integers to extract all unique integers and return them as a sorted list. The function should ensure that the integers in the returned list are in ascending order and that each integer appears exactly once. Your function should take in a single list of integers and return a new list that contains only the unique integers, sorted in ascending order. Implement the `extract_unique_integers` function with the following requirements: - The function should take a single parameter, a list of integers. - The function should return a list of unique integers sorted in ascending order. - The input list may contain duplicate integers, but the output list should not contain any duplicates. - The sorting should be done in non-decreasing order. Example: ```python input_list = [4, 1, 3, 2, 3, 4, 5, 1] output_list = extract_unique_integers(input_list) print(output_list) # Output: [1, 2, 3, 4, 5] ```","solution":"def extract_unique_integers(int_list): Extracts unique integers from the input list and returns them sorted in ascending order. Args: int_list (list): A list of integers, potentially with duplicates. Returns: list: A list of unique integers sorted in ascending order. return sorted(set(int_list))"},{"question":"**Context:** In Python, the `collections` module provides alternative data structures to Python’s general-purpose built-in containers like dict, list, set, and tuple. One such data structure is `Counter`, which is a dictionary subclass designed to count hashable objects. It is especially useful for tallying items in an iterable or for counting the items in an entire dataset. **Task:** Write a Python function named `find_most_common_element` that accepts a list of integers and uses the `Counter` class from the `collections` module to determine and return the most common element in the list. If multiple elements have the same highest frequency, return any one of them. In case the list is empty, the function should return `None`. **Function Signature:** ```python def find_most_common_element(lst): pass ``` **Requirements:** 1. Utilize the `Counter` class from the `collections` module to count the frequency of each element in the list. 2. Find and return the most common element. 3. Handle the scenario where the input list is empty by returning `None`. **Example:** ```python find_most_common_element([1, 2, 3, 2, 4, 2, 3, 5, 1, 3]) # Output: 2 or 3 (as both are equally common in the list) find_most_common_element([5, 5, 5, 1, 1, 2, 2, 2, 3, 4]) # Output: 5 (as it appears most frequently) find_most_common_element([]) # Output: None (as the list is empty) ```","solution":"from collections import Counter def find_most_common_element(lst): Returns the most common element in the list. If the list is empty, returns None. if not lst: return None counter = Counter(lst) most_common_element, _ = counter.most_common(1)[0] return most_common_element"},{"question":"In this problem, you will implement a function called `validate_palindrome` that checks if a given string can be rearranged to form a palindrome. **Function Name:** `validate_palindrome` **Function Signature:** ```python def validate_palindrome(s: str) -> bool: ``` **Parameters:** - `s` (`str`): The input string that needs to be checked. **Returns:** - `bool`: Returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. **Requirements:** 1. The function should be case-insensitive, meaning it treats uppercase and lowercase letters as the same. 2. Ignore non-alphanumeric characters. 3. Utilize appropriate data structures, such as a dictionary or `Counter`, to efficiently count character occurrences. 4. Determine if the string can be rearranged into a palindrome based on the character counts. **Example:** ```python print(validate_palindrome(\\"A man, a plan, a canal, Panama\\")) # Output: True print(validate_palindrome(\\"racecar\\")) # Output: True print(validate_palindrome(\\"hello\\")) # Output: False ``` **Explanation:** - In the first example, ignoring spaces and punctuation, and treating all letters as lowercase, the string can be rearranged to form \\"amanaplanacanalpanama\\", which is a palindrome. - In the second example, \\"racecar\\" is already a palindrome. - In the third example, \\"hello\\" cannot be rearranged to form a palindrome.","solution":"from collections import Counter import re def validate_palindrome(s: str) -> bool: Check if the given string can be rearranged to form a palindrome. # Sanitize input: remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the frequency of each character char_count = Counter(cleaned_str) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one odd character count return odd_count <= 1"},{"question":"In this task, you are required to implement a function `group_anagrams` that takes a list of strings and groups anagrams together. Two words are anagrams if they contain the same characters but in different orders. The function should return a list of lists, where each sublist contains words that are anagrams of each other. To achieve this, use a dictionary to map sorted versions of the words to lists of anagrams. The function should be case-insensitive, meaning \\"Listen\\" and \\"silent\\" should be detected as anagrams despite different casing. # Example: ```plaintext Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` # Function Signature: ```python def group_anagrams(words: List[str]) -> List[List[str]]: ``` # Input: - `words`: A list of strings containing the words to be grouped. # Output: - A list of lists, where each sublist contains words that are anagrams of each other. # Implementation Details: 1. Convert all words to lower case to ensure case-insensitivity. 2. Use a dictionary to map sorted strings to lists of anagrams. 3. Iterate through the words, sort each word, and add it to the corresponding list in the dictionary. 4. Finally, return the values of the dictionary as a list of lists. # Example: ```python words = [\\"Listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goleog\\"] result = group_anagrams(words) print(result) ``` Expected Output: ```plaintext [[\\"Listen\\", \\"silent\\", \\"enlist\\"], [\\"google\\", \\"goleog\\"]] ```","solution":"from typing import List def group_anagrams(words: List[str]) -> List[List[str]]: Groups anagrams from the provided list of words. :param words: List of strings containing the words to be grouped. :return: A list of lists, where each sublist contains words that are anagrams of each other. from collections import defaultdict anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word.lower())) anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"You are tasked with writing a function named `filter_and_sort_data` that processes a list of dictionaries representing product data, filtering out the products below a certain price threshold and then sorting the remaining products by multiple criteria. Each dictionary contains the following keys: `name`, `price`, and `rating`. Your function should have the following signature: ```python def filter_and_sort_data(products: List[Dict[str, Union[str, float]]], min_price: float, sort_by: List[str]) -> List[Dict[str, Union[str, float]]]: ``` **Parameters:** - `products`: A list of dictionaries, where each dictionary contains keys `name` (string), `price` (float), and `rating` (float). - `min_price`: A float representing the minimum price threshold; products with a price lower than this value should be filtered out. - `sort_by`: A list of strings representing the keys by which the filtered products should be sorted, in descending order of priority (e.g., `[\\"rating\\", \\"price\\"]` means sort first by `rating`, then by `price`). **Returns:** - A list of dictionaries containing the filtered and sorted product data. Your implementation should: 1. Filter the products to include only those with a `price` greater than or equal to `min_price`. 2. Sort the filtered products by the specified keys in the `sort_by` list. Utilize the `sorted` function with a custom sorting key. 3. Ensure that sorting is stable, preserving the relative order of products with equal key values. **Hint:** Use the `operator.itemgetter` function to create sorting keys dynamically based on the `sort_by` list. # Example: ```python products = [ {\\"name\\": \\"Product A\\", \\"price\\": 29.99, \\"rating\\": 4.5}, {\\"name\\": \\"Product B\\", \\"price\\": 19.99, \\"rating\\": 3.9}, {\\"name\\": \\"Product C\\", \\"price\\": 49.99, \\"rating\\": 4.8}, {\\"name\\": \\"Product D\\", \\"price\\": 24.99, \\"rating\\": 4.0} ] min_price = 25.00 sort_by = [\\"rating\\", \\"price\\"] filtered_and_sorted_data = filter_and_sort_data(products, min_price, sort_by) ``` **Output:** ```python [ {\\"name\\": \\"Product C\\", \\"price\\": 49.99, \\"rating\\": 4.8}, {\\"name\\": \\"Product A\\", \\"price\\": 29.99, \\"rating\\": 4.5} ] ```","solution":"from typing import List, Dict, Union from operator import itemgetter def filter_and_sort_data(products: List[Dict[str, Union[str, float]]], min_price: float, sort_by: List[str]) -> List[Dict[str, Union[str, float]]]: Filters and sorts the product data based on price and specified sorting criteria. Parameters: - products: A list of dictionaries, where each dictionary contains keys `name` (string), `price` (float), and `rating` (float). - min_price: A float representing the minimum price threshold. - sort_by: A list of strings representing the keys by which the filtered products should be sorted. Returns: - A list of dictionaries containing the filtered and sorted product data. # Filter products filtered_products = [product for product in products if product[\'price\'] >= min_price] # Sort products sorted_products = sorted(filtered_products, key=itemgetter(*sort_by)) return sorted_products"},{"question":"Write a function that reads a CSV file containing data about store sales and visualizes the data in the form of a bar chart using the Matplotlib library. The CSV file has the columns \'Store\', \'Sales\' and each row corresponds to the sales data for a specific store. The objective is to analyze the sales data and display a bar chart where each store is represented as a bar, and the height of the bar corresponds to the sales figure for that store. Additionally, the highest sales value should be highlighted in red while the rest should be in blue. The chart should also include a title, xlabel, and ylabel for better readability. You are required to use the following APIs from Matplotlib: `matplotlib.pyplot.bar`, `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, and `matplotlib.pyplot.title`. Your function should be named `plot_sales_data` and have the following signature: ```python def plot_sales_data(file_path: str): ``` **Parameters**: - `file_path` (str): The file path to the CSV file containing the sales data. **Output**: - A bar chart representing the sales data for each store. **Instructions**: 1. Read the CSV file and extract the \'Store\' and \'Sales\' columns. 2. Initialize a bar chart with the store names on the x-axis and the sales values on the y-axis. 3. Set the color of the bar with the highest sales value to red and the remaining bars to blue. 4. Add labels for x-axis, y-axis, and a title to the chart. Here\'s a suggested structure for your code: 1. Import relevant libraries including `csv` and `matplotlib.pyplot`. 2. Read the CSV file and store the data in appropriate lists. 3. Create a bar chart using `pyplot.bar()` with the store names and their respective sales values. 4. Use a conditional to check and color the highest sales value in red. 5. Add an x-axis label, y-axis label, and a title to the chart using `pyplot.xlabel()`, `pyplot.ylabel()`, and `pyplot.title()` respectively. 6. Finally, display the plot using `pyplot.show()`. ```python import csv import matplotlib.pyplot as plt def plot_sales_data(file_path: str): stores = [] sales = [] with open(file_path, \'r\') as file: reader = csv.DictReader(file) for row in reader: stores.append(row[\'Store\']) sales.append(float(row[\'Sales\'])) max_sales = max(sales) colors = [\'red\' if sale == max_sales else \'blue\' for sale in sales] plt.bar(stores, sales, color=colors) plt.xlabel(\'Stores\') plt.ylabel(\'Sales\') plt.title(\'Store Sales Data\') plt.show() ```","solution":"import csv import matplotlib.pyplot as plt def plot_sales_data(file_path: str): Reads sales data from a CSV file and plots it as a bar chart. :param file_path: The file path to the CSV file containing the sales data. stores, sales = [], [] # Reading CSV file with open(file_path, \'r\') as file: reader = csv.DictReader(file) for row in reader: stores.append(row[\'Store\']) sales.append(float(row[\'Sales\'])) # Finding the highest sales value max_sales = max(sales) # Setting colors for the bars colors = [\'red\' if sale == max_sales else \'blue\' for sale in sales] # Plotting the bar chart plt.bar(stores, sales, color=colors) plt.xlabel(\'Stores\') plt.ylabel(\'Sales\') plt.title(\'Store Sales Data\') plt.show()"},{"question":"You are working on developing a flight scheduling system for an airline. You need to write a function `schedule_flights` that schedules flights based on given flight data and available planes. Each plane can only fly one route per day. The system should ensure that no plane is double-booked and flights are sorted by departure times. Specifications: - **Function Name:** `schedule_flights` - **Parameters:** - `flights` (list of dict): A list where each dictionary contains: - `flight_id` (str): The identifier of the flight. - `departure_time` (str): The departure time of the flight in \\"YYYY-MM-DD HH:MM\\" format. - `arrival_time` (str): The arrival time of the flight in \\"YYYY-MM-DD HH:MM\\" format. - `planes` (list of str): A list of plane identifiers available for scheduling. - **Returns:** A list of dictionaries where each dictionary contains: - `plane_id` (str): The plane assigned to the flight. - `flight_id` (str): The identifier of the flight. - `departure_time` (str): The departure time of the flight in \\"YYYY-MM-DD HH:MM\\" format. - `arrival_time` (str): The arrival time of the flight in \\"YYYY-MM-DD HH:MM\\" format. Important Notes: 1. Each plane can only be assigned to one flight per day. 2. Schedule the flights in ascending order of departure times. 3. Return an empty list if there are more flights than available planes for any given day. Here is a sample usage of your function: ```python flights = [ {\\"flight_id\\": \\"AA101\\", \\"departure_time\\": \\"2023-10-01 08:00\\", \\"arrival_time\\": \\"2023-10-01 10:00\\"}, {\\"flight_id\\": \\"BB202\\", \\"departure_time\\": \\"2023-10-01 09:00\\", \\"arrival_time\\": \\"2023-10-01 11:00\\"}, {\\"flight_id\\": \\"CC303\\", \\"departure_time\\": \\"2023-10-01 11:00\\", \\"arrival_time\\": \\"2023-10-01 13:00\\"} ] planes = [\\"P1\\", \\"P2\\"] scheduled_flights = schedule_flights(flights, planes) print(scheduled_flights) ``` The function would output a list of scheduled flights with assigned planes in the correct format.","solution":"from datetime import datetime def schedule_flights(flights, planes): def get_date(datetime_str): return datetime_str.split(\' \')[0] flights_sorted = sorted(flights, key=lambda x: x[\\"departure_time\\"]) # Group flights by date flights_by_date = {} for flight in flights_sorted: date = get_date(flight[\\"departure_time\\"]) if date not in flights_by_date: flights_by_date[date] = [] flights_by_date[date].append(flight) scheduled_flights = [] for date, daily_flights in flights_by_date.items(): if len(daily_flights) > len(planes): return [] for i, flight in enumerate(daily_flights): assigned_plane = planes[i] schedule = { \\"plane_id\\": assigned_plane, \\"flight_id\\": flight[\\"flight_id\\"], \\"departure_time\\": flight[\\"departure_time\\"], \\"arrival_time\\": flight[\\"arrival_time\\"] } scheduled_flights.append(schedule) return scheduled_flights"},{"question":"In this problem, you are tasked with creating a function that constructs a K-means clustering model and visualizes its outcome on a given dataset. You will utilize the provided code snippet to initialize the clusters, assign data points to the nearest cluster, and update the cluster centroids iteratively. You need to write a function named `plot_k_means` that takes the following parameters: - `X`: A matrix of input features (numpy array). - `k`: The number of clusters (integer). - `max_iters`: The maximum number of iterations for the K-means algorithm (integer, default value is 300). Your function should: 1. Implement the `initialize_centroids` function that randomly initializes the cluster centroids. 2. Implement the `assign_clusters` function that assigns each data point to the nearest centroid. 3. Implement the `update_centroids` function that recalculates centroids as the mean of all points assigned to that cluster. 4. Iterate the assignment and updating steps until convergence or until the maximum iterations are reached. 5. Plot the resulting clusters and their centroids using `matplotlib.pyplot.scatter` and `matplotlib.pyplot.show`. **Constraints**: - Use functions from the `matplotlib.pyplot` library to plot data points and centroids.","solution":"import numpy as np import matplotlib.pyplot as plt def initialize_centroids(X, k): Randomly initialize the centroids by selecting k unique points from the dataset. indices = np.random.choice(X.shape[0], size=k, replace=False) return X[indices] def assign_clusters(X, centroids): Assign each data point to the nearest centroid. distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) return np.argmin(distances, axis=1) def update_centroids(X, labels, k): Update the centroids as the mean of all points assigned to each cluster. new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)]) return new_centroids def plot_k_means(X, k, max_iters=300): Implement the K-means clustering algorithm and plot the resulting clusters and centroids. centroids = initialize_centroids(X, k) for _ in range(max_iters): old_centroids = centroids labels = assign_clusters(X, centroids) centroids = update_centroids(X, labels, k) if np.all(centroids == old_centroids): break # Plot the resulting clusters for i in range(k): plt.scatter(X[labels == i, 0], X[labels == i, 1], label=f\\"Cluster {i+1}\\") plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c=\'red\', marker=\'X\', label=\'Centroids\') plt.legend() plt.show()"},{"question":"The task is to implement a function `count_islands(grid: List[List[int]]) -> int` which counts the number of islands in a 2D grid. An island is a group of `1`s (representing land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water (`0`s). **Details to Consider:** 1. The grid is represented as a list of lists, where each element is either a `0` (representing water) or a `1` (representing land). 2. Two `1`s are considered part of the same island if they are connected horizontally or vertically. Diagonal connections don\'t count. 3. The grid may be non-square, meaning the height and width can be different. 4. You can modify the input grid. **Function Signature:** ```python from typing import List def count_islands(grid: List[List[int]]) -> int: pass ``` **Parameters:** - `grid`: A list of lists of integers where each element is `0` or `1`. **Returns:** - An integer representing the number of islands in the grid. **Example Usage:** ```python from typing import List def count_islands(grid: List[List[int]]) -> int: if not grid: return 0 def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # mark as visited dfs(i+1, j) dfs(i-1, j) dfs(i, j+1) dfs(i, j-1) island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count # Example grid grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] island_count = count_islands(grid) print(island_count) # Output: 3 ```","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: if not grid: return 0 def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # mark as visited dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates it for simple arithmetic operations (+, -, *, /) while preserving the order of operations. The function should return the evaluated result as an integer or a float. Use stack-based evaluation for the expression to handle operator precedence. The function should output: float or int: The evaluated result of the mathematical expression. You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): Evaluates a string expression containing simple arithmetic operations (+, -, *, /) while preserving the order of operations. Args: expression (str): String containing mathematical expression. Returns: float or int: The evaluated result of the expression. def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left / right) operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"# Resource Allocation Optimization In operations research or management, efficiently allocating limited resources to various tasks can significantly maximize productivity. In this scenario, you are given a set of resources and a set of tasks that require specific quantities of these resources. You need to determine the maximum number of tasks that can be fully completed with the available resources. You are required to implement the function `max_tasks_completed` which finds the optimal allocation. Function Signature ```python def max_tasks_completed(resources: dict, tasks: list) -> int: pass ``` # Inputs 1. **resources** (dict): A dictionary where the keys are resource names (strings) and the values are the quantities of each resource (integers) available. 2. **tasks** (list of dicts): A list of dictionaries, where each dictionary represents a task\'s resource requirements. The keys are resource names (strings), and the values are the quantities of each resource (integers) required for that task. # Output Returns an integer representing the maximum number of tasks that can be fully completed with the available resources. # Important Notes - No partial task completion is allowed; a task is either fully completed or not at all. - Ensure that the function efficiently handles the removal of resources as tasks are allocated. Example ```python resources = { \'wood\': 100, \'metal\': 50, \'plastic\': 200 } tasks = [ {\'wood\': 20, \'metal\': 10, \'plastic\': 30}, {\'wood\': 40, \'metal\': 20, \'plastic\': 60}, {\'wood\': 30, \'metal\': 15, \'plastic\': 50}, {\'wood\': 50, \'metal\': 30, \'plastic\': 70} ] print(max_tasks_completed(resources, tasks)) ``` The function call should compute the maximum number of tasks that can be fully completed given the resource constraints.","solution":"def max_tasks_completed(resources: dict, tasks: list) -> int: Determine the maximum number of tasks that can be fully completed with the available resources. :param resources: dict, available quantities of each resource :param tasks: list of dicts, resource requirements for each task :return: int, maximum number of fully completed tasks completed_tasks = 0 for task in tasks: # Check if all resources required for the task are available can_complete = True for resource, quantity in task.items(): if resources.get(resource, 0) < quantity: can_complete = False break if can_complete: # Deduct the resources used by the task for resource, quantity in task.items(): resources[resource] -= quantity completed_tasks += 1 return completed_tasks"},{"question":"You are given a dataset `df` represented as a pandas DataFrame. The dataset includes a mixture of numerical and categorical features. Your task is to create a pipeline that preprocesses the data and fits a Random Forest classifier. Specifically, you need to: - Encode the categorical features using one-hot encoding. - Scale the numerical features using StandardScaler. - Fit a Random Forest classifier to the preprocessed data. Write a function `train_random_forest(df, target_column)` that preprocesses the features and fits a Random Forest model to predict the target variable. The function should return the trained model. Use the following libraries from scikit-learn: 1. `sklearn.compose.ColumnTransformer` 2. `sklearn.preprocessing.OneHotEncoder`, `StandardScaler` 3. `sklearn.ensemble.RandomForestClassifier` 4. `sklearn.pipeline.Pipeline` Here\'s a description of the function\'s requirements: 1. Identify the numerical and categorical columns in the DataFrame. 2. Create a preprocessing pipeline that preprocesses the numerical columns using `StandardScaler` and the categorical columns using `OneHotEncoder`. 3. Fit a `RandomForestClassifier` to the preprocessed data. 4. Return the trained model. ```python import pandas as pd from sklearn.compose import ColumnTransformer from sklearn.preprocessing import OneHotEncoder, StandardScaler from sklearn.ensemble import RandomForestClassifier from sklearn.pipeline import Pipeline def train_random_forest(df, target_column): # Separate features and target variable X = df.drop(columns=[target_column]) y = df[target_column] # Identify numerical and categorical columns numerical_cols = X.select_dtypes(include=[\'int64\', \'float64\']).columns categorical_cols = X.select_dtypes(include=[\'object\']).columns # Preprocessing for numerical data numerical_transformer = StandardScaler() # Preprocessing for categorical data categorical_transformer = OneHotEncoder(handle_unknown=\'ignore\') # Bundle preprocessing for numerical and categorical data preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_cols), (\'cat\', categorical_transformer, categorical_cols)]) # Define the Random Forest classifier model model = RandomForestClassifier() # Create and fit the pipeline clf = Pipeline(steps=[(\'preprocessor\', preprocessor), (\'classifier\', model)]) clf.fit(X, y) return clf ```","solution":"import pandas as pd from sklearn.compose import ColumnTransformer from sklearn.preprocessing import OneHotEncoder, StandardScaler from sklearn.ensemble import RandomForestClassifier from sklearn.pipeline import Pipeline def train_random_forest(df, target_column): Preprocesses the features and fits a Random Forest model to predict the target variable. Parameters: df (pd.DataFrame): The input dataset including features and target variable. target_column (str): The name of the target column. Returns: clf (sklearn.pipeline.Pipeline): The trained model pipeline. # Separate features and target variable X = df.drop(columns=[target_column]) y = df[target_column] # Identify numerical and categorical columns numerical_cols = X.select_dtypes(include=[\'int64\', \'float64\']).columns categorical_cols = X.select_dtypes(include=[\'object\']).columns # Preprocessing for numerical data numerical_transformer = StandardScaler() # Preprocessing for categorical data categorical_transformer = OneHotEncoder(handle_unknown=\'ignore\') # Bundle preprocessing for numerical and categorical data preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_cols), (\'cat\', categorical_transformer, categorical_cols)]) # Define the Random Forest classifier model model = RandomForestClassifier() # Create and fit the pipeline clf = Pipeline(steps=[(\'preprocessor\', preprocessor), (\'classifier\', model)]) clf.fit(X, y) return clf"},{"question":"** Write a function `letter_frequency_counter` that takes a string as its input and returns a dictionary with the frequency of each letter in the string. The function should ignore case and only count alphabetical characters (a-z, A-Z). Here is a detailed breakdown of what you need to do: 1. Create a function `letter_frequency_counter(text)` that: - Takes a single parameter `text`, which is the input string. - Initializes an empty dictionary to store letter frequencies. - Iterates over each character in the input string. - Converts the character to lowercase using `lower()`. - Checks if the character is an alphabetical character using `isalpha()`. - If the character is alphabetical, updates its count in the dictionary. - Returns the dictionary with letter frequencies. Example of a function call: ```python result = letter_frequency_counter(\\"Hello World!\\") print(result) ``` Expected output: ```python {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` In this example, the function counts \'h\', \'e\', \'l\', \'o\', \'w\', \'r\', and \'d\' from the phrase \\"Hello World!\\" while ignoring non-alphabetical characters and case differences. **","solution":"def letter_frequency_counter(text): Returns a dictionary with the frequency of each letter in the given text. Ignores case and non-alphabetical characters. frequency_dict = {} for char in text.lower(): if char.isalpha(): if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"The task is to develop a function that processes a text file containing book information and organizes it into a structured format. Each line in the file represents one book, and includes an ISBN number, book title, author name, and publication year separated by semicolons. The entries might have inconsistent formatting and missing data. The function should read the data from the file, handle any missing entries by filling them in with the string \\"Unknown\\", sort the books by their publication year in ascending order, and return a list of dictionaries where each dictionary represents a book with keys: \'ISBN\', \'Title\', \'Author\', and \'Year\'. The function should be named `process_books` and take a single input argument which is the filename. Utilize the built-in Python functions for file handling and sorting. The primary goal is to ensure that book data is cleaned, structured, and sorted for further analysis or display. Here is the function signature: ```python def process_books(filename): Processes book information from a text file. Reads data from the text file, fills in missing entries with \'Unknown\', sorts books by year, and returns a list of dictionaries. Args: filename: str, the path to the text file containing book information Returns: books: A list of dictionaries, each representing a book with the following keys: \'ISBN\': The ISBN number of the book (str) \'Title\': The title of the book (str) \'Author\': The name of the author (str) \'Year\': The publication year of the book (str) ``` Note: Ensure to handle file reading properly and consider edge cases such as missing fields and inconsistent formatting.","solution":"def process_books(filename): Processes book information from a text file. Reads data from the text file, fills in missing entries with \'Unknown\', sorts books by year, and returns a list of dictionaries. Args: filename: str, the path to the text file containing book information. Returns: books: A list of dictionaries, each representing a book with the following keys: \'ISBN\': The ISBN number of the book (str) \'Title\': The title of the book (str) \'Author\': The name of the author (str) \'Year\': The publication year of the book (str) books = [] with open(filename, \'r\') as file: for line in file: parts = line.strip().split(\';\') book_info = { \'ISBN\': parts[0] if len(parts) > 0 and parts[0] else \'Unknown\', \'Title\': parts[1] if len(parts) > 1 and parts[1] else \'Unknown\', \'Author\': parts[2] if len(parts) > 2 and parts[2] else \'Unknown\', \'Year\': parts[3] if len(parts) > 3 and parts[3] else \'Unknown\' } books.append(book_info) # Sort books by the \'Year\' key books.sort(key=lambda x: x[\'Year\']) return books"},{"question":"You are asked to write a function that checks if a given string is a valid representation of a decimal number, considering only the integer and fractional parts. This can be useful in input validation systems where the program must differentiate between numeric strings and non-numeric strings. **Function Specification:** - **Function Name:** `isValidDecimal` - **Input:** A single string `s` which may contain decimal digits and at most one decimal point. - **Output:** A boolean value `True` if the string is a valid decimal number, and `False` otherwise. **Requirements:** A string is considered a valid decimal number if: 1. It contains only digits and at most one decimal point. 2. The decimal point, if present, is not the first or the last character of the string. 3. The string should not contain any other characters except digits and one decimal point. **Example:** ```python def isValidDecimal(s): # Your implementation here # Sample Usage print(isValidDecimal(\\"123\\")) # Output: True print(isValidDecimal(\\"123.456\\")) # Output: True print(isValidDecimal(\\".456\\")) # Output: False print(isValidDecimal(\\"123.\\")) # Output: False print(isValidDecimal(\\"123.45.6\\")) # Output: False print(isValidDecimal(\\"abc123\\")) # Output: False print(isValidDecimal(\\"123a.45\\")) # Output: False ``` **Explanation:** For \\"123\\", it only contains digits, thus it\'s a valid decimal number. For \\"123.456\\", it only contains digits and one decimal point, thus it\'s a valid decimal number. For \\".456\\", the decimal point is at the beginning, thus it\'s not a valid decimal number. For \\"123.\\", the decimal point is at the end, thus it\'s not a valid decimal number. For \\"123.45.6\\", it contains more than one decimal point, thus it\'s not a valid decimal number. For \\"abc123\\", it contains non-digit characters, thus it\'s not a valid decimal number. For \\"123a.45\\", it contains non-digit characters, thus it\'s not a valid decimal number.","solution":"def isValidDecimal(s): Check if the string s is a valid representation of a decimal number. if not s: # Empty string is not a valid decimal number return False if s[0] == \'.\' or s[-1] == \'.\': # Check if the decimal point is at the beginning or end return False if s.count(\'.\') > 1: # Check for more than one decimal point return False for char in s: if not (char.isdigit() or char == \'.\'): return False return True"},{"question":"Create a function that simulates the growth of a population of rabbits over a year, given an initial population size. Assume that each month, each rabbit produces one offspring, and that half of the rabbits die due to natural causes. Use the \'pandas\' library to create a DataFrame to track the population size each month and \'matplotlib\' to plot the population growth. The function should output: DataFrame: A pandas DataFrame containing the population size for each month. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def population_growth(initial_population): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def population_growth(initial_population): # Initialize the dictionary to hold the population size for each month population_data = {\'Month\': [], \'Population\': []} current_population = initial_population # Iterate over 12 months for month in range(1, 13): # Record the month and population population_data[\'Month\'].append(month) population_data[\'Population\'].append(current_population) # Each rabbit produces one offspring (population doubles) current_population *= 2 # Half of the population dies due to natural causes current_population //= 2 # Create a DataFrame from the recorded data df = pd.DataFrame(population_data) # Plotting the population growth plt.figure(figsize=(10, 6)) plt.plot(df[\'Month\'], df[\'Population\'], marker=\'o\') plt.title(\'Rabbit Population Growth Over One Year\') plt.xlabel(\'Month\') plt.ylabel(\'Population\') plt.grid(True) plt.show() return df"},{"question":"Write a function named `find_unique_elements` that accepts two lists as input and returns a list containing elements that are unique to each of the lists. The function should adhere to the following specifications: 1. The function should take two lists of integers as inputs. 2. The function should return a list containing integers that are present in one list but not in the other. 3. The returned list should be sorted in ascending order. 4. You should not use any built-in Python functions other than those for basic operations (e.g., no use of `set` operations). Here\'s an example: ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] Output: [1, 2, 3, 6, 7, 8] Explanation: - Elements 1, 2, 3 are present only in list1. - Elements 6, 7, 8 are present only in list2. - Elements 4, 5 are common to both lists, hence not included in the output. ``` To solve this problem, follow these steps: - Initialize an empty list to store unique elements. - Iterate through the first list and check if each element is not present in the second list; if so, add it to the unique elements list. - Repeat the above step for the second list but checking against the first list. - Sort the unique elements list in ascending order before returning it. Implement the function ensuring the code is efficient and covers edge cases like empty lists and duplicate elements within a single list.","solution":"def find_unique_elements(list1, list2): Returns a list of elements that are unique to each of the input lists, sorted in ascending order. Parameters: list1 (List[int]): The first list of integers. list2 (List[int]): The second list of integers. Returns: List[int]: A sorted list containing unique integers. unique_elements = [] # Check elements in list1 and not in list2 for element in list1: if element not in list2: unique_elements.append(element) # Check elements in list2 and not in list1 for element in list2: if element not in list1: unique_elements.append(element) unique_elements.sort() return unique_elements"},{"question":"Read a series of log entries from a string and return a dictionary of error counts. Each log entry will contain a timestamp, log level, and a message. Your task is to extract entries with log level \\"ERROR\\" and count the occurrences of each unique error message. The function should output with: Dictionary: {error_message: count} You should write self-contained code starting with: ``` import re from collections import defaultdict def task_func(log_string): ```","solution":"import re from collections import defaultdict def task_func(log_string): Reads a series of log entries from a string and returns a dictionary of error counts. error_pattern = re.compile(r\\"ERRORs+-s+(.*)\\") error_counts = defaultdict(int) for line in log_string.splitlines(): match = error_pattern.search(line) if match: error_message = match.group(1).strip() error_counts[error_message] += 1 return dict(error_counts)"},{"question":"** Create a function that identifies and removes duplicate characters from a string while maintaining the order of the remaining characters. The function should be efficient and handle both uppercase and lowercase letters. Given a string `input_str`, implement the `remove_duplicates` function that: 1. Accepts: - A single parameter `input_str` which is the input string. 2. Uses a set to track characters that have already been seen and ensures that the first occurrence of each character is retained while subsequent duplicates are removed. # Requirements - Maintain the order of characters as they first appear in the input. - Handle both uppercase and lowercase letters as distinct characters. # Function Signature ```python def remove_duplicates(input_str: str) -> str: pass ``` # Example ```python input_str = \\"programming\\" # Calling the remove_duplicates function result = remove_duplicates(input_str) print(result) ``` # Expected Output The output should be a string with all duplicate characters removed while preserving the order of the first occurrences: ``` \\"progamin\\" ``` # Additional Example ```python input_str = \\"abracadabra\\" # Calling the remove_duplicates function result = remove_duplicates(input_str) print(result) ``` # Expected Output The output should be: ``` \\"abrcd\\" ``` **","solution":"def remove_duplicates(input_str: str) -> str: Removes duplicate characters from the input string while maintaining the order of first occurrences. Args: input_str (str): The input string from which to remove duplicate characters. Returns: str: A string with duplicate characters removed. seen = set() result = [] for char in input_str: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are tasked with designing a function that simulates a simple stock market simulation game where a player can buy and sell stocks. The function you need to write is `simulate_stock_market()`. This function will use Python\'s `random` module to simulate the fluctuations in stock prices and interact with the user via input prompts to buy or sell stocks. Here are the detailed steps to implement the function: 1. **Initialize Game Parameters**: - `player_money`: Set to 1000 (the player starts with 1000 coins). - `stock_price`: Randomly initialize the stock price between 20 and 50 coins. - `owned_stocks`: Initialize to 0 (the player starts without any stocks). 2. **Simulate Stock Price Fluctuations**: - In each round, the stock price changes by a random value between -5 and 5. - Ensure that the stock price does not drop below 1 coin. 3. **Simulate Market Interaction**: - Print the current stock price and player\'s status (money and owned stocks). - Provide the options to either \\"buy\\" or \\"sell\\" stocks, or \\"wait\\" for the next round. - Handle the player\'s choice accordingly: - When buying, prompt the player for the number of stocks to buy. - When selling, prompt the player for the number of stocks to sell. - When waiting, proceed to the next round without transactions. Here is the code structure to follow: ```python import random def simulate_stock_market(): player_money = 1000 stock_price = random.randint(20, 50) owned_stocks = 0 def print_status(): print(f\\"Current stock price: {stock_price} coins\\") print(f\\"Player money: {player_money} coins\\") print(f\\"Owned stocks: {owned_stocks}\\") while True: print_status() action = input(\\"Do you want to buy, sell, or wait? (buy/sell/wait): \\").lower() if action == \\"buy\\": quantity = int(input(\\"How many stocks do you want to buy?: \\")) cost = quantity * stock_price if cost <= player_money: player_money -= cost owned_stocks += quantity print(f\\"Bought {quantity} stocks.\\") else: print(\\"Not enough money to buy that many stocks.\\") elif action == \\"sell\\": quantity = int(input(\\"How many stocks do you want to sell?: \\")) if quantity <= owned_stocks: owned_stocks -= quantity player_money += quantity * stock_price print(f\\"Sold {quantity} stocks.\\") else: print(\\"You don\'t have that many stocks to sell.\\") stock_price += random.randint(-5, 5) stock_price = max(stock_price, 1) print(\\"nNext round...n\\") simulate_stock_market() ``` **Requirements**: - Your solution should use the `random.randint` function from Python\'s `random` library. - Implement the main logic inside `simulate_stock_market()`. - Ensure proper handling of invalid inputs (e.g., trying to buy more stocks than affordable).","solution":"import random def simulate_stock_market(): player_money = 1000 stock_price = random.randint(20, 50) owned_stocks = 0 def print_status(): print(f\\"Current stock price: {stock_price} coins\\") print(f\\"Player money: {player_money} coins\\") print(f\\"Owned stocks: {owned_stocks}\\") while True: print_status() action = input(\\"Do you want to buy, sell, or wait? (buy/sell/wait/end): \\").lower() if action == \\"buy\\": quantity = int(input(\\"How many stocks do you want to buy?: \\")) cost = quantity * stock_price if cost <= player_money: player_money -= cost owned_stocks += quantity print(f\\"Bought {quantity} stocks.\\") else: print(\\"Not enough money to buy that many stocks.\\") elif action == \\"sell\\": quantity = int(input(\\"How many stocks do you want to sell?: \\")) if quantity <= owned_stocks: owned_stocks -= quantity player_money += quantity * stock_price print(f\\"Sold {quantity} stocks.\\") else: print(\\"You don\'t have that many stocks to sell.\\") elif action == \\"wait\\": print(\\"Waiting for the next round.\\") elif action == \\"end\\": print(\\"Ending the simulation.\\") break stock_price += random.randint(-5, 5) stock_price = max(stock_price, 1) print(\\"nNext round...n\\") # To prevent running simulate_stock_market on import in the test environment, # comment the line below when running tests. # simulate_stock_market()"},{"question":"You need to implement a function `merge_sorted_linked_lists()` that merges two sorted linked lists into one sorted linked list. The linked lists are represented as the following structures: A linked list node is represented by a dictionary with the following keys: - `\'val\'`: integer value at the node. - `\'next\'`: the next node in the linked list or `None` if it is the last node. Your task is to merge two given sorted linked lists into one sorted linked list and return the head of the merged list. Here\'s an example depicting the structure of linked lists: ```python # Linked list 1: 1 -> 3 -> 5 list1 = { \'val\': 1, \'next\': { \'val\': 3, \'next\': { \'val\': 5, \'next\': None } } } # Linked list 2: 2 -> 4 -> 6 list2 = { \'val\': 2, \'next\': { \'val\': 4, \'next\': { \'val\': 6, \'next\': None } } } ``` The function should merge them into a single sorted linked list: ```python # Merged linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 merged_list = { \'val\': 1, \'next\': { \'val\': 2, \'next\': { \'val\': 3, \'next\': { \'val\': 4, \'next\': { \'val\': 5, \'next\': { \'val\': 6, \'next\': None } } } } } } ``` # Function Signature ```python def merge_sorted_linked_lists(list1: dict, list2: dict) -> dict: ``` # Input - `list1`: A dictionary representing the head of the first sorted linked list. - `list2`: A dictionary representing the head of the second sorted linked list. # Output - Returns a dictionary representing the head of the merged sorted linked list.","solution":"def merge_sorted_linked_lists(list1: dict, list2: dict) -> dict: dummy = {\'val\': 0, \'next\': None} current = dummy while list1 and list2: if list1[\'val\'] <= list2[\'val\']: current[\'next\'] = list1 list1 = list1[\'next\'] else: current[\'next\'] = list2 list2 = list2[\'next\'] current = current[\'next\'] if list1: current[\'next\'] = list1 else: current[\'next\'] = list2 return dummy[\'next\']"},{"question":"You are tasked with creating a function that simulates a simple ticket purchasing system. The function will take an integer `num_tickets` representing the total number of tickets available for a concert, and a list of integers `requests` where each integer represents the ticket request from a customer in the order they arrive. The function `buy_tickets` should process each customer in order and attempt to fulfill their ticket request. If the request can be fully met, reduce the number of tickets available accordingly and print \\"Request fulfilled\\". If the request cannot be met because there are not enough tickets left, print \\"Not enough tickets\\". After processing all requests, the function should print the number of tickets remaining. Function Signature: ```python def buy_tickets(num_tickets: int, requests: list) -> None: pass ``` **Example:** For `num_tickets = 10` and `requests = [3, 4, 1, 5, 2]`, the function should output: ``` Request fulfilled Request fulfilled Request fulfilled Not enough tickets Request fulfilled Tickets remaining: 0 ``` **Explanation:** - The first request is for 3 tickets. There are 10 tickets available, so the request is fulfilled. Tickets remaining = 10 - 3 = 7. - The second request is for 4 tickets. There are 7 tickets available, so the request is fulfilled. Tickets remaining = 7 - 4 = 3. - The third request is for 1 ticket. There are 3 tickets available, so the request is fulfilled. Tickets remaining = 3 - 1 = 2. - The fourth request is for 5 tickets. There are only 2 tickets left, so the request cannot be fulfilled. - The fifth request is for 2 tickets. There are exactly 2 tickets left, so the request is fulfilled. Tickets remaining = 2 - 2 = 0. Finally, the function prints the number of tickets remaining, which is 0.","solution":"def buy_tickets(num_tickets: int, requests: list) -> None: Processes each ticket request and prints whether it can be fulfilled or not. After processing all requests, prints the number of tickets remaining. for request in requests: if request <= num_tickets: num_tickets -= request print(\\"Request fulfilled\\") else: print(\\"Not enough tickets\\") print(f\\"Tickets remaining: {num_tickets}\\")"},{"question":"Create a function that takes a list of numbers and an integer `k`, then returns the k-th largest unique number in the list. If there are fewer than k unique numbers, the function should return None. The function should be defined as follows: ```python def kth_largest_unique(nums: list, k: int) -> int: ``` **Example Usage:** ```python assert kth_largest_unique([4, 2, 9, 5, 4, 9, 10, 5, 8], 3) == 8 assert kth_largest_unique([5, 4, 1, 1, 3], 2) == 4 assert kth_largest_unique([3, 1, 2], 4) is None ```","solution":"def kth_largest_unique(nums: list, k: int) -> int: Returns the k-th largest unique number in the list nums. If there are fewer than k unique numbers, return None. unique_nums = list(set(nums)) unique_nums.sort(reverse=True) if len(unique_nums) >= k: return unique_nums[k-1] else: return None"},{"question":"Write a Python function called `analyze_transactions` that processes a list of bank transactions and outputs a summary of the account\'s status. Each transaction is represented as a dictionary with two keys: `amount` and `type`. The `amount` key holds a float representing the transaction amount, and the `type` key holds a string that is either \'credit\' or \'debit\'. The function should return a dictionary with the following keys: 1. `total_credit`: The sum of all credit transactions. 2. `total_debit`: The sum of all debit transactions. 3. `net_balance`: The net balance after applying all transactions (total credits - total debits). 4. `average_credit`: The average amount of credit transactions. 5. `average_debit`: The average amount of debit transactions. 6. `highest_credit`: The highest credit transaction amount. 7. `highest_debit`: The highest debit transaction amount. 8. `transaction_count`: The total number of transactions. # Example Usage ```python transactions = [ {\\"amount\\": 100.0, \\"type\\": \\"credit\\"}, {\\"amount\\": 50.0, \\"type\\": \\"debit\\"}, {\\"amount\\": 200.0, \\"type\\": \\"credit\\"}, {\\"amount\\": 70.0, \\"type\\": \\"debit\\"}, ] summary = analyze_transactions(transactions) print(summary) ``` # Expected Output ```python { \'total_credit\': 300.0, \'total_debit\': 120.0, \'net_balance\': 180.0, \'average_credit\': 150.0, \'average_debit\': 60.0, \'highest_credit\': 200.0, \'highest_debit\': 70.0, \'transaction_count\': 4 } ``` # Requirements - Handle cases where there may be no credit or no debit transactions. - Ensure the function works efficiently even with a large number of transactions.","solution":"def analyze_transactions(transactions): Analyze bank transactions and provide a summary of the account\'s status. Parameters: transactions (list): A list of transactions where each transaction is a dictionary with \'amount\' and \'type\' keys. Returns: dict: A dictionary with the summary of the account\'s status. total_credit = 0 total_debit = 0 credits = [] debits = [] for transaction in transactions: amount = transaction[\'amount\'] if transaction[\'type\'] == \'credit\': total_credit += amount credits.append(amount) elif transaction[\'type\'] == \'debit\': total_debit += amount debits.append(amount) net_balance = total_credit - total_debit average_credit = total_credit / len(credits) if credits else 0.0 average_debit = total_debit / len(debits) if debits else 0.0 highest_credit = max(credits) if credits else 0.0 highest_debit = max(debits) if debits else 0.0 transaction_count = len(transactions) summary = { \'total_credit\': total_credit, \'total_debit\': total_debit, \'net_balance\': net_balance, \'average_credit\': average_credit, \'average_debit\': average_debit, \'highest_credit\': highest_credit, \'highest_debit\': highest_debit, \'transaction_count\': transaction_count } return summary"},{"question":"Write a function called `calculate_grade` that calculates and returns the final letter grade for students based on their scores in three assessments: `midterm`, `final`, and `project`. The function should prompt the user to enter the grades for each assessment and then compute the final grade based on the following weighted average: - Midterm: 30% - Final: 40% - Project: 30% The final letter grade should be assigned based on the following scale: - A: 90 - 100 - B: 80 - 89 - C: 70 - 79 - D: 60 - 69 - F: below 60 The function must perform the following tasks: 1. Prompt the user to enter scores for `midterm`, `final`, and `project`. 2. Calculate the weighted average of these scores. 3. Determine the letter grade corresponding to the calculated average. 4. Return the calculated letter grade. **Function Signature:** ```python def calculate_grade(): # The body of the function goes here ``` **Example Usage:** ``` When the function `calculate_grade()` is called, it will: 1. Prompt the user to enter scores for midterm, final, and project, one at a time. 2. Calculate the weighted average using the respective weights. 3. Determine and return the final letter grade based on the weighted average. Example Scenario: Suppose the user inputs the following scores: - Midterm: 85 - Final: 90 - Project: 80 The function would calculate the weighted average as follows: Weighted Average = 85 * 0.30 + 90 * 0.40 + 80 * 0.30 = 25.5 + 36 + 24 = 85.5 Based on the average score of 85.5, the final letter grade would be \'B\'. The function would then return \'B\'. ```","solution":"def calculate_grade(): Prompts the user to enter the grades for midterm, final, and project, calculates the final weighted average, and returns the corresponding letter grade. midterm = float(input(\\"Enter the midterm grade: \\")) final = float(input(\\"Enter the final exam grade: \\")) project = float(input(\\"Enter the project grade: \\")) weighted_average = (midterm * 0.30) + (final * 0.40) + (project * 0.30) if 90 <= weighted_average <= 100: return \'A\' elif 80 <= weighted_average < 90: return \'B\' elif 70 <= weighted_average < 80: return \'C\' elif 60 <= weighted_average < 70: return \'D\' else: return \'F\'"},{"question":"Given a list of integers, you need to implement a Python function `find_largest_sum_subarray` that finds the contiguous subarray within the list which has the largest sum and returns the sum as well as the start and end indices of this subarray. If there are multiple subarrays with the same largest sum, return the subarray which occurs first. For this task, you will use Kadane’s algorithm, which provides an efficient way to find the maximum sum of a contiguous subarray in linear time. **Function Signature:** ```python def find_largest_sum_subarray(arr: list) -> tuple: ... ``` **Example:** ```python input_list = [-2, 1, -3, 4, -1, 2, 1, -5, 4] output = find_largest_sum_subarray(input_list) print(output) # Output should be: (6, 3, 6) where 6 is the largest sum, 3 is the start index and 6 is the end index. ``` **Constraints:** - The input list will have at least one element and at most 10^5 elements. - The elements in the list will be integers ranging between -10^5 and 10^5. **Note:** - The function should handle edge cases, such as lists with all negative numbers or all positive numbers. - Ensure that the indices provided are 0-based.","solution":"def find_largest_sum_subarray(arr): Find the contiguous subarray within a one-dimensional numerical array which has the largest sum. Parameters: arr (list): List of integers Returns: tuple: (Largest sum, start index of subarray, end index of subarray) max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if arr[i] > current_sum + arr[i]: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"You are given a string `s` containing words separated by spaces and an integer `k`. Your task is to implement a function named `truncate_string` that performs the following operations: 1. Split the string `s` into an array of words. 2. Truncate the array to only contain the first `k` words. 3. Join the truncated array back into a single string, with words separated by spaces. The function should return the resulting truncated string. ```python def truncate_string(s, k): Truncate the input string to the first k words. Parameters: - s: string, the input string containing words separated by spaces. - k: int, the number of words to include in the truncated string. Returns: - result: string, the truncated string containing only the first k words. # Your implementation here pass ``` For example, given the input string `s = \\"The quick brown fox jumps over the lazy dog\\"` and `k = 4`, the function should return `\\"The quick brown fox\\"`. Ensure you handle edge cases where `k` is greater than the number of words in `s` or `k` is zero.","solution":"def truncate_string(s, k): Truncate the input string to the first k words. Parameters: - s: string, the input string containing words separated by spaces. - k: int, the number of words to include in the truncated string. Returns: - result: string, the truncated string containing only the first k words. # Split the string into words words = s.split() # Truncate only up to the first k words truncated_words = words[:k] # Join the words back into a single string result = \\" \\".join(truncated_words) return result"},{"question":"Generate a dictionary from two lists, one representing keys and the other representing values. The first list should contain the names of 5 countries, and the second list should contain their corresponding populations. Sort the dictionary by population in ascending order and print the sorted dictionary. The function doesn\'t take any parameters and doesn\'t return any value. You should write self-contained code starting with: ``` def task_func(): ```","solution":"def task_func(): countries = [\'China\', \'India\', \'United States\', \'Indonesia\', \'Pakistan\'] populations = [1444216107, 1393409038, 332915073, 276361783, 225199937] # Create dictionary from the two lists country_population_dict = dict(zip(countries, populations)) # Sort the dictionary by population in ascending order sorted_country_population_dict = dict(sorted(country_population_dict.items(), key=lambda item: item[1])) # Print the sorted dictionary print(sorted_country_population_dict)"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers in the original list. Additionally, the function should compute the sum of the prime numbers and return it alongside the list of primes. Your solution should demonstrate an understanding of basic algorithms and efficiency considerations when handling large lists of numbers. The function should output: Tuple[List[int], int]: A tuple containing a list of prime numbers and their sum. You should write self-contained code starting with: ``` def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes_and_sum(nums): primes = [num for num in nums if is_prime(num)] prime_sum = sum(primes) return primes, prime_sum ```","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes_and_sum(nums): primes = [num for num in nums if is_prime(num)] prime_sum = sum(primes) return primes, prime_sum"},{"question":"You are tasked to write a Python function that takes a 2D list representing a matrix and a value `k`. The function\'s goal is to rotate the matrix `k` times to the right. Each rotation involves shifting every element of the matrix one step to the right, with the last element of each row wrapping around to become the first element of the next row. **Function Signature:** ```python def rotate_matrix_right(matrix: List[List[int]], k: int) -> List[List[int]]: pass ``` **Input:** - `matrix`: A 2D list of integers representing the matrix. Example: ```python [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` - `k`: An integer representing the number of times to rotate the matrix to the right. **Output:** - A 2D list representing the matrix after `k` rotations. **Requirements:** - Ensure the function handles cases where the number of rotations `k` is larger than the number of elements in the matrix. - Optimize the algorithm to avoid unnecessary computations for large `k`. Here is the task breakdown: 1. Flatten the 2D matrix into a 1D list to simplify manipulation. 2. Compute the effective number of rotations needed. 3. Rotate the 1D list to the right. 4. Convert the rotated 1D list back to a 2D matrix and return it.","solution":"from typing import List def rotate_matrix_right(matrix: List[List[int]], k: int) -> List[List[int]]: Rotates the given matrix \'k\' times to the right. if not matrix or not matrix[0]: return matrix # Flatten the matrix rows, cols = len(matrix), len(matrix[0]) total_elements = rows * cols flat_matrix = [matrix[i // cols][i % cols] for i in range(total_elements)] # Calculate the effective rotations needed k = k % total_elements # Rotate the flattened matrix to the right flat_matrix = flat_matrix[-k:] + flat_matrix[:-k] # Convert it back to a 2D list (matrix) rotated_matrix = [[flat_matrix[i * cols + j] for j in range(cols)] for i in range(rows)] return rotated_matrix"},{"question":"Implement a function to simulate a simple banking transaction system. You need to create a class `BankAccount` that supports the following operations: 1. `deposit(amount)`: Adds the specified amount to the account balance. 2. `withdraw(amount)`: Deducts the specified amount from the account balance, provided there are sufficient funds. 3. `get_balance()`: Returns the current account balance. 4. `transfer(amount, target_account)`: Transfers the specified amount from this account to the `target_account`, provided there are sufficient funds. # Requirements - Implement the `BankAccount` class with the methods described. - Ensure that withdrawing or transferring more money than available in the account should not change the balance. - You must also maintain a log of all transactions performed on the account. Each transaction should be saved as a dictionary with the keys: `\\"type\\"` (either \\"deposit\\", \\"withdraw\\", or \\"transfer\\"), `\\"amount\\"`, and if applicable `\\"target\\"` (indicating the account to which money was transferred). # Example ```python >>> my_account = BankAccount() >>> my_account.deposit(100) >>> my_account.get_balance() 100 >>> my_account.withdraw(30) >>> my_account.get_balance() 70 >>> another_account = BankAccount() >>> my_account.transfer(50, another_account) >>> my_account.get_balance() 20 >>> another_account.get_balance() 50 >>> my_account.withdraw(100) # Insufficient funds, so balance remains the same >>> my_account.get_balance() 20 >>> my_account.get_transaction_log() [{\'type\': \'deposit\', \'amount\': 100}, {\'type\': \'withdraw\', \'amount\': 30}, {\'type\': \'transfer\', \'amount\': 50, \'target\': another_account}] ``` # Constraints - The `deposit`, `withdraw`, and `transfer` methods should handle non-negative amounts only. - The class should raise a `ValueError` if any invalid amount (negative or zero) is provided to these methods. # Implementation Implement the class as described: ```python class BankAccount: def __init__(self): self.balance = 0 self.transaction_log = [] def deposit(self, amount): if amount <= 0: raise ValueError(\\"Amount must be positive\\") self.balance += amount self.transaction_log.append({\\"type\\": \\"deposit\\", \\"amount\\": amount}) def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Amount must be positive\\") if amount > self.balance: return self.balance -= amount self.transaction_log.append({\\"type\\": \\"withdraw\\", \\"amount\\": amount}) def get_balance(self): return self.balance def transfer(self, amount, target_account): if amount <= 0: raise ValueError(\\"Amount must be positive\\") if amount > self.balance: return self.balance -= amount target_account.deposit(amount) self.transaction_log.append({\\"type\\": \\"transfer\\", \\"amount\\": amount, \\"target\\": target_account}) def get_transaction_log(self): return self.transaction_log ``` Ensure that you adhere to the method signatures and functionality as described.","solution":"class BankAccount: def __init__(self): self.balance = 0 self.transaction_log = [] def deposit(self, amount): if amount <= 0: raise ValueError(\\"Amount must be positive\\") self.balance += amount self.transaction_log.append({\\"type\\": \\"deposit\\", \\"amount\\": amount}) def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Amount must be positive\\") if amount > self.balance: return self.balance -= amount self.transaction_log.append({\\"type\\": \\"withdraw\\", \\"amount\\": amount}) def get_balance(self): return self.balance def transfer(self, amount, target_account): if amount <= 0: raise ValueError(\\"Amount must be positive\\") if amount > self.balance: return self.balance -= amount target_account.deposit(amount) self.transaction_log.append({\\"type\\": \\"transfer\\", \\"amount\\": amount, \\"target\\": target_account}) def get_transaction_log(self): return self.transaction_log"},{"question":"You are required to implement a function for an online bookstore inventory management system. This function will handle the addition of new books and update the quantity of existing books based on a provided inventory list. The function needs to use the `json` and `datetime` libraries. The function should perform the following tasks: 1. Retrieve the current book inventory from a file named `inventory.json`. 2. For each book in the input list, check if it already exists in the inventory based on the ISBN number. 3. If the book already exists, update the quantity on hand and the last restocked date. 4. If the book does not exist, add it to the inventory with the current date as the restocked date. 5. Save the updated inventory back to `inventory.json`. 6. Record the timestamp of the update operation in a file named `update_log.txt`. Implement the `update_inventory()` function with the following specifications: ```python def update_inventory(new_books): This function updates the bookstore inventory with a list of new books. Each book in the input list is checked against the existing inventory. If it exists, its quantity and last restocked date are updated. If not, it is added to the inventory. The updated inventory is saved to `inventory.json` and the update timestamp is recorded in `update_log.txt`. :param new_books: List of dictionaries, each representing a book with keys \\"isbn\\", \\"title\\", \\"author\\", \\"quantity\\". ``` The `new_books` list is a list of dictionaries where each dictionary represents a book with the following keys: - \\"isbn\\" (str): The ISBN number of the book. - \\"title\\" (str): The title of the book. - \\"author\\" (str): The author of the book. - \\"quantity\\" (int): The number of copies being added to the inventory.","solution":"import json from datetime import datetime def update_inventory(new_books): This function updates the bookstore inventory with a list of new books. Each book in the input list is checked against the existing inventory. If it exists, its quantity and last restocked date are updated. If not, it is added to the inventory. The updated inventory is saved to `inventory.json` and the update timestamp is recorded in `update_log.txt`. :param new_books: List of dictionaries, each representing a book with keys \\"isbn\\", \\"title\\", \\"author\\", \\"quantity\\". def load_inventory(): try: with open(\'inventory.json\', \'r\') as file: return json.load(file) except FileNotFoundError: return [] def save_inventory(inventory): with open(\'inventory.json\', \'w\') as file: json.dump(inventory, file, indent=4) def log_update(): with open(\'update_log.txt\', \'a\') as file: file.write(f\\"Inventory updated on: {datetime.now().isoformat()}n\\") inventory = load_inventory() inventory_dict = {book[\'isbn\']: book for book in inventory} current_date = datetime.now().isoformat() for new_book in new_books: isbn = new_book[\'isbn\'] if isbn in inventory_dict: existing_book = inventory_dict[isbn] existing_book[\'quantity\'] += new_book[\'quantity\'] existing_book[\'last_restocked\'] = current_date else: new_book[\'last_restocked\'] = current_date inventory.append(new_book) save_inventory(inventory) log_update()"},{"question":"You are tasked with developing a function named `duplicate_finder(lst)` which takes a list of integers and returns a dictionary. The dictionary should count the frequency of each element that appears more than once in the list. To accomplish this, you may utilize Python\'s `collections` module which provides a convenient `Counter` class for counting hashable objects. The function should follow these steps: 1. Use `collections.Counter` to count the frequency of each element in the list. 2. Filter out elements that appear only once to create a dictionary of duplicate elements and their respective counts. Ensure your function handles edge cases, such as an empty list or a list with no duplicates. **Function Signature:** ```python from typing import List, Dict def duplicate_finder(lst: List[int]) -> Dict[int, int]: Finds and counts duplicate elements in the input list. Args: lst (List[int]): The list of integers to be checked. Returns: Dict[int, int]: A dictionary with elements as keys and their frequency as values for elements that appear more than once. ``` **Example Usage:** ```python # Given the input list: input_list = [1, 2, 2, 3, 4, 4, 4, 5] # Function call: duplicate_dict = duplicate_finder(input_list) # Output: # {2: 2, 4: 3} ```","solution":"from typing import List, Dict from collections import Counter def duplicate_finder(lst: List[int]) -> Dict[int, int]: Finds and counts duplicate elements in the input list. Args: lst (List[int]): The list of integers to be checked. Returns: Dict[int, int]: A dictionary with elements as keys and their frequency as values for elements that appear more than once. counter = Counter(lst) return {key: count for key, count in counter.items() if count > 1}"},{"question":"Implement a function `calculate_l2_reg_loss_and_gradient` that computes the L2 regularization loss and its gradient for a provided set of weights. L2 regularization, also known as Ridge Regularization, is often used to prevent overfitting in machine learning models by penalizing large weights. Function Signature: ```python def calculate_l2_reg_loss_and_gradient(W, reg): Computes the L2 regularization loss and its gradient. Parameters: W : numpy.ndarray The weights of the model of shape (num_features, num_classes). reg : float The regularization strength. Returns: l2_loss : float The computed L2 regularization loss. dW : numpy.ndarray The gradient of the L2 loss with respect to the weights W of shape (num_features, num_classes). ``` Problem Context: 1. **Inputs:** - `W` is a 2D numpy array of shape `(num_features, num_classes)` representing the weights of the model. - `reg` is a float representing the regularization strength. 2. **Outputs:** - `l2_loss` is a float: the L2 regularization loss computed for the given weights. - `dW` is a 2D numpy array: the gradient of the L2 loss with respect to the weights `W`. 3. **L2 Regularization Calculation Steps:** - Calculate the L2 regularization loss using the formula: `l2_loss = 0.5 * reg * np.sum(W * W)` - Compute the gradient using the formula: `dW = reg * W` 4. **Use numpy functions** such as `numpy.sum` to perform these operations.","solution":"import numpy as np def calculate_l2_reg_loss_and_gradient(W, reg): Computes the L2 regularization loss and its gradient. Parameters: W : numpy.ndarray The weights of the model of shape (num_features, num_classes). reg : float The regularization strength. Returns: l2_loss : float The computed L2 regularization loss. dW : numpy.ndarray The gradient of the L2 loss with respect to the weights W of shape (num_features, num_classes). # Calculate the L2 regularization loss l2_loss = 0.5 * reg * np.sum(W ** 2) # Calculate the gradient of the L2 loss dW = reg * W return l2_loss, dW"},{"question":"This function processes a list of dictionaries, filtering out dictionaries that do not contain a specified key or if the value associated with that key is an empty string. It then sums up the values corresponding to another specified numerical key within the filtered dictionaries. The function should handle the following: - KeyError: If the specified keys are not present in any dictionary. - TypeError: If the value associated with the sum key is not a number. The function should output: - int or float: The sum of the values corresponding to the specified numerical key from the filtered dictionaries. You should write self-contained code starting with: ``` def process_and_sum(dict_list, filter_key, sum_key): ```","solution":"def process_and_sum(dict_list, filter_key, sum_key): Processes a list of dictionaries, filtering out dictionaries that do not contain \'filter_key\' or if the associated value is an empty string. Sums up the values corresponding to \'sum_key\' within the filtered dictionaries. Parameters: dict_list (list): List of dictionaries to process. filter_key (str): Key to filter by. sum_key (str): Key whose values are to be summed. Returns: int or float: Sum of the values associated with \'sum_key\' from the filtered dictionaries. Raises: KeyError: If \'sum_key\' is not present in any dictionary. TypeError: If the value associated with \'sum_key\' is not a number. # Filter dictionaries filtered_dicts = [d for d in dict_list if filter_key in d and d[filter_key] != \\"\\"] # Initialize sum total_sum = 0 # Sum values for d in filtered_dicts: if sum_key not in d: raise KeyError(f\\"The key \'{sum_key}\' is not present in some dictionaries.\\") if not isinstance(d[sum_key], (int, float)): raise TypeError(f\\"The value for key \'{sum_key}\' should be a number.\\") total_sum += d[sum_key] return total_sum"},{"question":"You are required to design a function in Python that simulates a countdown timer. The function should employ a simple loop and the standard `time.sleep` method to create the countdown effect. **Function Name**: `countdown_timer` **Function Purpose**: The function should take an integer input `n`, which represents the starting number of seconds for the countdown. It should then count down from `n` to 0, printing each second\'s value in the terminal and pausing for one second between each count using `time.sleep(1)`. **Library API Requirement**: Ensure to use `time.sleep(1)` as mandated for the implementation. **Instructions**: 1. Import the `time` module at the beginning of your script. 2. Create a loop that iterates from `n` to 0. 3. In each iteration of the loop: - Print the current number. - Implement a delay of one second using `time.sleep(1)`. 4. When the countdown reaches 0, print \\"Time\'s up!\\". Your function should not return any value. The main purpose is to visualize the countdown in the terminal. **Example**: If `n` is 5, the function should output: ``` 5 4 3 2 1 0 Time\'s up! ```","solution":"import time def countdown_timer(n): Simulates a countdown timer starting from n seconds. Each second is printed to the terminal with a one-second delay. for i in range(n, -1, -1): print(i) time.sleep(1) print(\\"Time\'s up!\\")"},{"question":"This problem requires you to create a function `find_meeting_slots(calendar1, daily_bounds1, calendar2, daily_bounds2, meeting_duration)` that takes in two calendars (each representing booked time slots for two different people), their daily bounds (the earliest and latest times they are available), and a meeting duration. The goal is to return a list of potential meeting slots that fit the availability of both people. Follow these steps: 1. Merge the two calendars into one list of time slots. 2. Add the daily bounds to the list of time slots. 3. Sort and merge overlapping or contiguous time slots. 4. Find gaps between the merged time slots that are greater than or equal to the meeting duration. Ensure the following: - Time slots are formatted as strings in `\\"HH:MM\\"` format. - The output list should be in the same `\\"HH:MM\\"` format. - Respect daily bounds and only return slots during these bounds. Implement the `find_meeting_slots(calendar1, daily_bounds1, calendar2, daily_bounds2, meeting_duration)` function that achieves the described behavior. # Function Signature ```python def find_meeting_slots(calendar1, daily_bounds1, calendar2, daily_bounds2, meeting_duration): pass ``` # Example ```python calendar1 = [(\\"09:00\\", \\"10:30\\"), (\\"12:00\\", \\"13:00\\"), (\\"16:00\\", \\"18:00\\")] daily_bounds1 = (\\"09:00\\", \\"20:00\\") calendar2 = [(\\"10:00\\", \\"11:30\\"), (\\"12:30\\", \\"14:30\\"), (\\"14:30\\", \\"15:00\\"), (\\"16:00\\", \\"17:00\\")] daily_bounds2 = (\\"10:00\\", \\"18:30\\") meeting_duration = 30 find_meeting_slots(calendar1, daily_bounds1, calendar2, daily_bounds2, meeting_duration) ``` Output: ```python [(\'11:30\', \'12:00\'), (\'15:00\', \'16:00\'), (\'18:00\', \'18:30\')] ``` Explanation: The function finds available slots between the merged calendars within the given daily bounds that are at least 30 minutes long. The example outputs the available time slots that meet the criteria. # Required Libraries - You may use `datetime` for handling time calculations.","solution":"from datetime import datetime, timedelta def convert_to_minutes(time_str): Converts \'HH:MM\' time format to minutes past midnight. h, m = map(int, time_str.split(\':\')) return h * 60 + m def convert_to_time_str(minutes): Converts minutes past midnight to \'HH:MM\' time format. h, m = divmod(minutes, 60) return f\\"{h:02}:{m:02}\\" def merge_time_ranges(time_ranges): Merges overlapping and contiguous time ranges. time_ranges.sort() merged_ranges = [] for start, end in time_ranges: if not merged_ranges or merged_ranges[-1][1] < start: merged_ranges.append([start, end]) else: merged_ranges[-1][1] = max(merged_ranges[-1][1], end) return merged_ranges def find_meeting_slots(calendar1, daily_bounds1, calendar2, daily_bounds2, meeting_duration): daily_start = max(convert_to_minutes(daily_bounds1[0]), convert_to_minutes(daily_bounds2[0])) daily_end = min(convert_to_minutes(daily_bounds1[1]), convert_to_minutes(daily_bounds2[1])) combined_calendar = [ (convert_to_minutes(start), convert_to_minutes(end)) for start, end in calendar1 + calendar2 ] combined_calendar.append((daily_start, daily_start)) combined_calendar.append((daily_end, daily_end)) combined_calendar = merge_time_ranges(combined_calendar) available_slots = [] for i in range(1, len(combined_calendar)): start = combined_calendar[i-1][1] end = combined_calendar[i][0] if end - start >= meeting_duration: available_slots.append((convert_to_time_str(start), convert_to_time_str(end))) return available_slots"},{"question":"You are tasked with writing a Python function that reads data from a text file representing a log of user activities on a website. The data will be filtered based on the specified date and type of activity. This task will provide hands-on experience with manipulating text files, extracting data, and filtering it based on specific conditions. Function Definition **Function Name:** `load_and_process_log_data` **Parameters:** - `file_path (str)`: path to the log file to analyze. - `date (str)`: specific date to filter by in \\"YYYY-MM-DD\\" format, or \\"all\\" to apply no date filter. - `activity_type (str)`: type of activity to filter by, or \\"all\\" to apply no activity filter. **Returns:** - `filtered_data (list of dict)`: A list of dictionaries containing log data entries filtered by the specified date and activity type. Instructions: 1. Open the text file and read line by line. 2. Each log entry will be in the format: `\\"[YYYY-MM-DD HH:MM:SS] - <username> - <activity_type>\\"`. 3. Extract the date, time, username, and activity type from each log entry. 4. Filter the log entries by the specified date (if it is not \\"all\\"). 5. Filter the log entries by the specified activity type (if it is not \\"all\\"). Example Content of Log File: ``` [2023-10-01 14:23:45] - john_doe - login [2023-10-01 14:24:17] - jane_smith - view_page [2023-10-02 08:05:12] - john_doe - logout ``` Example: ```python file_path = \'user_activity_log.txt\' filtered_data = load_and_process_log_data(file_path, \'2023-10-01\', \'login\') print(filtered_data) # Output: [{\'date\': \'2023-10-01\', \'time\': \'14:23:45\', \'username\': \'john_doe\', \'activity_type\': \'login\'}] ``` Library Api Requirements: - None (you must use basic Python file handling and string manipulation techniques). --- Formulate the question, keeping the format consistent with the provided sample questions.","solution":"def load_and_process_log_data(file_path, date, activity_type): Processes and filters a log file based on date and activity type. Parameters: file_path (str): Path to the log file. date (str): Date to filter by in \\"YYYY-MM-DD\\" format, or \\"all\\" for no filter. activity_type (str): Activity type to filter by, or \\"all\\" for no filter. Returns: list of dict: List of filtered log entries as dictionaries. filtered_data = [] with open(file_path, \'r\') as file: for line in file: line = line.strip() if line: parts = line.split(\' - \') if len(parts) == 3: datetime_part = parts[0].strip(\'[]\') log_date, log_time = datetime_part.split(\' \') username = parts[1] log_activity_type = parts[2] if (date == \'all\' or log_date == date) and (activity_type == \'all\' or log_activity_type == activity_type): filtered_data.append({ \'date\': log_date, \'time\': log_time, \'username\': username, \'activity_type\': log_activity_type }) return filtered_data"},{"question":"You are given a directory named `./Temperature_Data/` containing multiple `.csv` files. Each `.csv` file includes data entries per line, where each line represents temperature readings at different times of a day and from various sensors. Each file name follows the pattern `temp_YYYYMMDD.csv` representing the date the data was recorded. Your task is to create a function `daily_max_temperatures()` that performs the following operations: 1. Change the current working directory to `./Temperature_Data/`. 2. For each `.csv` file in this directory: - Read the data and parse it by splitting each line on commas. - Identify the maximum temperature recorded in the entire day. - Store the date (extracted from the filename) and the maximum temperature in a new list called `max_temps`. 3. After processing all files, save the `max_temps` list to a CSV file named `daily_max_temperatures.csv` with the columns \\"Date,Max_Temperature\\". Use Python\'s `csv` module to assist with reading and writing CSV files in your solution.","solution":"import os import csv def daily_max_temperatures(): current_dir = os.getcwd() try: os.chdir(\'./Temperature_Data/\') max_temps = [] for filename in os.listdir(): if filename.endswith(\\".csv\\"): with open(filename, \'r\') as csvfile: data = csv.reader(csvfile) max_temp = float(\'-inf\') for row in data: temperatures = list(map(float, row)) daily_max_temp = max(temperatures) if daily_max_temp > max_temp: max_temp = daily_max_temp date = filename.split(\'_\')[1].split(\'.\')[0] max_temps.append([date, max_temp]) max_temps.sort() # Sort by date with open(\'../daily_max_temperatures.csv\', \'w\', newline=\'\') as outfile: writer = csv.writer(outfile) writer.writerow([\'Date\', \'Max_Temperature\']) writer.writerows(max_temps) finally: os.chdir(current_dir)"},{"question":"Design a function that takes a list of integers and an integer `n` as input and returns a list of integers from the input list that are divisible by `n`. The function should first validate the input list to ensure all elements are integers. If any element is not an integer, it should return \\"Error: Invalid input list.\\" If `n` is zero, it should return \\"Error: Division by zero is not allowed.\\" The returned list should include elements in the same order they appear in the input list. You should write self-contained code starting with: ``` def filter_divisibles(input_list, n): ```","solution":"def filter_divisibles(input_list, n): Returns a list of integers from the input list that are divisible by n. If any element in the input list is not an integer, it returns \\"Error: Invalid input list.\\" If n is zero, it returns \\"Error: Division by zero is not allowed.\\" if not all(isinstance(i, int) for i in input_list): return \\"Error: Invalid input list.\\" if n == 0: return \\"Error: Division by zero is not allowed.\\" return [i for i in input_list if i % n == 0]"},{"question":"# Problem You need to create a function that calculates the inverse of a given 2x2 matrix. Matrix inversion is a common operation in linear algebra, and for a 2x2 matrix, it can be computed manually using the formula: For a matrix `A`: ``` A = [a, b] [c, d] ``` The inverse, `A_inv`, is given by: ``` A_inv = 1 / (ad - bc) * [ d, -b] [-c, a] ``` where `ad - bc` is the determinant of the matrix `A` and must not be zero (as a nonzero determinant ensures that the matrix is invertible). # Function Specification Write a function called `inverse_matrix` that takes in a 2x2 numpy array `matrix` and returns: 1. The inverse of the matrix as a numpy array, if the matrix is invertible. 2. An appropriate message indicating that the matrix is not invertible if the determinant is zero. # Requirements - Ensure that your function handles numpy arrays correctly. - Do not use any libraries other than numpy for this task. - The calculations should use manual formula without using any inbuilt matrix inversion functions. # Example Suppose we have the following 2x2 numpy array: ```python import numpy as np matrix = np.array([[1, 2], [3, 4]]) ``` Calculating the inverse would result in the following: ```python inv_matrix = inverse_matrix(matrix) ``` The output should be approximately: ```python >>> inv_matrix array([[-2. , 1. ], [ 1.5, -0.5]]) ``` If the input matrix is: ```python matrix = np.array([[1, 2], [2, 4]]) ``` Since the determinant is zero for this matrix, the output should be: ```python >>> inv_matrix \\"The matrix is not invertible.\\" ``` # Constraints - The input matrix will always be a 2x2 numpy array. - You may assume entries in the matrix are real numbers. Write your function `inverse_matrix` according to the above specifications.","solution":"import numpy as np def inverse_matrix(matrix): Returns the inverse of a 2x2 matrix if invertible, otherwise an appropriate message. # Extracting elements from the matrix a, b, c, d = matrix[0, 0], matrix[0, 1], matrix[1, 0], matrix[1, 1] # Calculating the determinant determinant = a * d - b * c if determinant == 0: return \\"The matrix is not invertible.\\" # Calculating the inverse using the formula inverse = (1 / determinant) * np.array([[d, -b], [-c, a]]) return inverse"},{"question":"You are tasked with creating a function named `find_common_elements` that will identify common elements from multiple lists of integers. Each list is sorted in ascending order. The function should return a list of integers that are present in all the input lists. **Task:** 1. Implement a function `find_common_elements(lists)`. 2. The function should accept a list of lists as an argument. 3. Use efficient algorithms to find common elements considering that each list is already sorted. **Requirements:** - The function should return a list of integers that are present in all the provided lists. - The solution should be optimized for performance, leveraging the sorted order of input lists. **Example:** ```python lists = [[1, 2, 3, 4, 5], [1, 2, 5, 7, 9], [1, 3, 4, 5, 8]] common_elements = find_common_elements(lists) print(common_elements) ``` The function should return: ```python [1, 5] ``` In this example, `1` and `5` are present in all three lists.","solution":"def find_common_elements(lists): Returns a list of common elements found in all the input lists. Each input list is assumed to be sorted in ascending order. if not lists or any(not lst for lst in lists): return [] # Start with the elements of the first list common_elements = lists[0] for lst in lists[1:]: common_elements = list(filter(lambda x: x in lst, common_elements)) if not common_elements: break return common_elements"},{"question":"You are given a collection of habits and the days on which they were performed over several weeks. Your task is to write a function that identifies the habit with the highest frequency being performed on the specified weekday. The function will be provided with a dictionary where the keys are habit names and the values are lists of strings representing the days (e.g., \\"Mon\\", \\"Tue\\", etc.) the habit was performed on. Additionally, the function will receive a string specifying the weekday for analysis. The function should be named `most_frequent_habit` and follow this specification: ```python def most_frequent_habit(habits, weekday): Identify the habit most frequently performed on a given weekday. @param habits: Dictionary where keys are habit names and values are lists of days the habit was performed. @param weekday: String indicating the weekday to analyze (e.g., \\"Mon\\", \\"Tue\\", etc.). @return: A string of the habit name with the highest frequency on the specified weekday. ``` The parameters and return type of the function are as follows: - `habits`: A dictionary where the keys are strings representing habit names and the values are lists of strings representing the days the habit was performed. - `weekday`: A string indicating the day of the week to analyze (e.g., \\"Mon\\", \\"Tue\\", etc.). - The function should return a string of the habit name that has the highest count for the specified weekday. If no habits were performed on that day, return an empty string. If there\'s a tie, return any one of the most frequent habits.","solution":"def most_frequent_habit(habits, weekday): Identify the habit most frequently performed on a given weekday. @param habits: Dictionary where keys are habit names and values are lists of days the habit was performed. @param weekday: String indicating the weekday to analyze (e.g., \\"Mon\\", \\"Tue\\", etc.). @return: A string of the habit name with the highest frequency on the specified weekday. max_count = 0 result_habit = \\"\\" for habit, days in habits.items(): count = days.count(weekday) if count > max_count: max_count = count result_habit = habit return result_habit"},{"question":"You need to create a function named `generate_fibonacci_file` that generates a CSV file containing the first n Fibonacci numbers. This function will make use of Python\'s built-in CSV library to create and write to the CSV file. Specifically, the function should: 1. Generate the first `n` numbers in the Fibonacci sequence. 2. Create a CSV file with two columns: \\"Index\\" and \\"Fibonacci Number\\". 3. Populate each row of the CSV file with sequential index values starting from 1, and their corresponding Fibonacci numbers. 4. Save the CSV file with a specified filename provided as an argument to the function. Your `generate_fibonacci_file` function should take the following parameters: - `n`: An integer representing the number of Fibonacci numbers to generate. - `filename`: A string representing the name of the file (including the .csv extension) where the data will be saved. Use the Python library `csv` (imported as `import csv`) to accomplish this task. Assumptions: - The Fibonacci sequence starts with 0 and 1. - The function should handle edge cases where `n` is 0 or a negative number by creating an empty CSV file with only the headers. Below is the complete function signature: ```python def generate_fibonacci_file(n: int, filename: str) -> None: ```","solution":"import csv def generate_fibonacci_file(n: int, filename: str) -> None: Generates a CSV file with the first n Fibonacci numbers. Parameters: - n (int): The number of Fibonacci numbers to generate. - filename (str): The name of the file (including the .csv extension) where the data will be saved. # Generate the first n Fibonacci numbers fibonacci_numbers = [] a, b = 0, 1 for i in range(n): fibonacci_numbers.append(a) a, b = b, a + b # Write to CSV file with open(filename, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) # Write headers writer.writerow([\\"Index\\", \\"Fibonacci Number\\"]) # Write the Fibonacci numbers for index, number in enumerate(fibonacci_numbers, start=1): writer.writerow([index, number])"},{"question":"Write a function that simulates a basic calculator which accepts a string containing a mathematical expression and returns the result of the calculation. The function should support addition, subtraction, multiplication, and division. Ensure that the function can handle whitespaces in the input string and returns a float if the result is not an integer. You should write self-contained code starting with: ``` def calculate(expression): ``` For example: ``` calculate(\\"3 + 5\\") -> 8 calculate(\\"10 - 2 * 3\\") -> 4 calculate(\\"100 / 25 + 6\\") -> 10.0 calculate(\\"2+ 2 -3 * 2/ 1\\") -> -2.0 ```","solution":"def calculate(expression): Simulates a basic calculator which accepts a string containing a mathematical expression and returns the result of the calculation. Supports addition, subtraction, multiplication, and division. Handles whitespaces. # Strip whitespaces from the expression expression = expression.replace(\\" \\", \\"\\") # Perform the calculation try: result = eval(expression) except Exception as e: raise ValueError(\\"Invalid expression\\") return float(result) if isinstance(result, float) or \'.\' in str(result) else int(result)"},{"question":"** You are tasked with implementing a function that validates and formats an international phone number. The goal is to write a Python function named `format_phone_number` that takes a single string parameter representing a phone number (which can include spaces, dashes, or parentheses) and performs the following tasks: 1. Validate the phone number to ensure it contains only digits and valid punctuation (spaces, dashes, parentheses). 2. Remove all spaces, dashes, and parentheses from the phone number string. 3. Verify that the resulting phone number contains exactly 10 digits. If the phone number is valid, format it in the standard form `(XXX) XXX-XXXX`. If it is invalid, raise a `ValueError` with the message \\"Invalid phone number\\". Here is the structure of your function: ```python def format_phone_number(phone_number): phone_number: str: The phone number to be validated and formatted. Returns: str: The formatted phone number if valid. Raises: ValueError: If the phone number is invalid. # code to validate, format, and return the phone number or raise an error pass ``` # Example Usage: ```python try: print(format_phone_number(\\"123-456-7890\\")) # Output: (123) 456-7890 print(format_phone_number(\\"(123) 456 7890\\")) # Output: (123) 456-7890 print(format_phone_number(\\"123 456 7890\\")) # Output: (123) 456-7890 print(format_phone_number(\\"1234567890\\")) # Output: (123) 456-7890 print(format_phone_number(\\"123-45-67890\\")) # Should raise ValueError except ValueError as e: print(e) # Output: Invalid phone number ``` # Requirements: 1. Remove all non-digit characters except for spaces, dashes, and parentheses. 2. Verify the stripped phone number contains exactly 10 digits. 3. Format the valid phone number in the form `(XXX) XXX-XXXX`. 4. Raise a `ValueError` with the message \\"Invalid phone number\\" for invalid phone numbers.","solution":"def format_phone_number(phone_number): phone_number: str : The phone number to be validated and formatted. Returns: str : The formatted phone number if valid. Raises: ValueError : If the phone number is invalid. # Remove all spaces, dashes, and parentheses cleaned_number = \'\'.join(filter(str.isdigit, phone_number)) # Check if the resulting number has exactly 10 digits if len(cleaned_number) != 10: raise ValueError(\\"Invalid phone number\\") # Format the cleaned number in the form (XXX) XXX-XXXX formatted_number = f\'({cleaned_number[:3]}) {cleaned_number[3:6]}-{cleaned_number[6:]}\' return formatted_number"},{"question":"You are tasked with implementing a function `validate_parentheses_sequence` that checks if a given sequence of parentheses is valid. The sequence is valid if the parentheses are properly closed and nested. **Function Signature** ```python def validate_parentheses_sequence(s): Validates if the sequence of parentheses is properly closed and nested. Args: s (str): A string containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: bool: True if the sequence is valid, False otherwise # Your implementation goes here ``` **Inputs** 1. `s` (str): A string consisting of the characters `(`, `)`, `{`, `}`, `[`, and `]`. **Outputs** The function should return: 1. `bool`: A boolean value `True` if the sequence is valid, and `False` otherwise. **Instructions** - You must use a stack data structure to solve this problem. - The basic idea is to traverse the given string and push the opening brackets onto the stack. When a closing bracket is encountered, check if it matches the top of the stack. Sample Input: ```python s = \\"()[]{}\\" ``` Sample Output: ```python output = True ``` Sample Input: ```python s = \\"(]\\" ``` Sample Output: ```python output = False ``` Sample Input: ```python s = \\"([)]\\" ``` Sample Output: ```python output = False ``` Sample Input: ```python s = \\"{[]}\\" ``` Sample Output: ```python output = True ``` **Notes** - An empty string is considered valid. - Ensure that your solution efficiently handles edge cases where the input string length is large.","solution":"def validate_parentheses_sequence(s): Validates if the sequence of parentheses is properly closed and nested. Args: s (str): A string containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: bool: True if the sequence is valid, False otherwise stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False else: return False return stack == []"},{"question":"Create a function `simulate_traffic_light(cycles)` that simulates the behavior of a traffic light, cycling through the states \\"Red\\", \\"Green\\", and \\"Yellow\\". Each state should persist for a defined duration: Red for 4 seconds, Green for 3 seconds, and Yellow for 2 seconds. The cycle should repeat for the number of `cycles` specified. To achieve this, use a loop to cycle through the states the required number of times and update the console output to show the current state of the traffic light. **Requirements:** - The function must be named `simulate_traffic_light`. - The function should take an integer parameter `cycles`, representing the number of times the traffic light should go through the sequence of states. - The console output should display the current state of the traffic light. - There should be a 1-second delay between the changes in the state display. Example usage: ```python simulate_traffic_light(2) ``` This call should simulate the following sequence: ``` Red (wait 4 seconds) Green (wait 3 seconds) Yellow (wait 2 seconds) Red (wait 4 seconds) Green (wait 3 seconds) Yellow (wait 2 seconds) ```","solution":"import time def simulate_traffic_light(cycles): Simulates the traffic light behavior for a given number of cycles. Parameters: cycles (int): The number of times the traffic light should go through the sequence of states. traffic_light_states = { \\"Red\\": 4, \\"Green\\": 3, \\"Yellow\\": 2 } for _ in range(cycles): for state, duration in traffic_light_states.items(): print(state) time.sleep(duration)"},{"question":"Write a function named `sequenceProduct(sequenceList)` that takes a list of non-negative integers, `sequenceList`, as input and returns the product of all the elements in the subsequence of the input list which has the largest sum. If there are multiple subsequences with the same maximum sum, return the product of the elements in the first such subsequence found (starting from the left). If the input list is empty, return 1. To compute the subsequence with the largest sum, you must use a straightforward iteration approach. You are required to handle the following: - If the input list is empty, your function should return 1. - Make sure to consider subsequences that may not be contiguous. Here is the structure of the function you need to implement: ```python def sequenceProduct(sequenceList): # Your code here ``` **Constraints:** 1. The input list, `sequenceList`, contains non-negative integers only. 2. You are required to use an iterative approach to find the subsequence with the largest sum and then compute the product of its elements. **Examples:** 1. Input: `[1, 2, 3, 4]` Output: `24` (The subsequence is `[1, 2, 3, 4]`, sum is `10`, product is `24`) 2. Input: `[1, 2, 3, 0, 5]` Output: `30` (The subsequence is `[1, 2, 3, 5]`, sum is `11`, product is `30`) 3. Input: `[4, 1, 2, 1]` Output: `8` (The subsequence is `[4, 1, 2, 1]`, sum is `8`, product is `8`) 4. Input: `[]` Output: `1`","solution":"def sequenceProduct(sequenceList): if not sequenceList: return 1 max_sum = 0 max_sum_subsequence = [] # Getting all possible non-contiguous subsequences for i in range(1, 1 << len(sequenceList)): subsequence = [sequenceList[j] for j in range(len(sequenceList)) if i & (1 << j)] subsequence_sum = sum(subsequence) if subsequence_sum > max_sum: max_sum = subsequence_sum max_sum_subsequence = subsequence # Calculating the product of the elements in the max sum subsequence product = 1 for num in max_sum_subsequence: product *= num return product"},{"question":"You are required to write a Python function `generate_character_frequency()` that takes a string as input and returns a dictionary where the keys are the unique characters in the string and the values are the corresponding counts of occurrences of those characters. Your function should be case-sensitive and should count all characters, including spaces and punctuation marks. The following steps outline the details and functionality expected of your function: 1. Initialize an empty dictionary to store character frequencies. 2. Iterate through each character in the input string. 3. For each character, update its count in the dictionary. 4. Return the dictionary with the character frequencies. Make sure to consider edge cases such as an empty string input. **Function Signature:** ```python def generate_character_frequency(input_string: str) -> dict: ... ``` **Examples:** ```python input_string = \\"Hello, World!\\" output = generate_character_frequency(input_string) # Output: {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \',\': 1, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1, \'!\': 1} input_string = \\"\\" output = generate_character_frequency(input_string) # Output: {} ```","solution":"def generate_character_frequency(input_string: str) -> dict: Returns a dictionary with the frequency count of each character in the input string. char_freq = {} for char in input_string: if char in char_freq: char_freq[char] += 1 else: char_freq[char] = 1 return char_freq"},{"question":"Read a list of strings from a given input file and for each string, determine if it\'s a palindrome. Write the results to an output file where each line corresponds to the input string followed by \\": Yes\\" if it is a palindrome, and \\": No\\" if it is not. A string is considered a palindrome if it reads the same forwards and backwards, ignoring case and non-alphanumeric characters. The function should output with: int: The total number of strings processed. You should write self-contained code starting with: ``` import re def is_palindrome(s): s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() return s == s[::-1] def task_func(input_file, output_file): ```","solution":"import re def is_palindrome(s): s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() return s == s[::-1] def task_func(input_file, output_file): with open(input_file, \'r\') as infile, open(output_file, \'w\') as outfile: lines = infile.readlines() total_strings = len(lines) for line in lines: stripped_line = line.strip() result = is_palindrome(stripped_line) outfile.write(f\\"{stripped_line}: {\'Yes\' if result else \'No\'}n\\") return total_strings"},{"question":"You are required to write a Python function called `calculate_discounted_prices` that calculates discounted prices for a list of products and outputs the resulting prices in a specified format. The function should conform to the following constraints: 1. The function should accept four parameters: - `products` (list): A list of product tuples. Each tuple contains the product name as a string and its price as a float. - `discounts` (list): A list of discount percentages corresponding to each product as floats. - `threshold` (float): A price threshold above which a discount can be applied. - `output_format` (str): Determines the format of the output. Can be \'json\' or \'pretty\'. 2. The function should: - Validate that the lengths of `products` and `discounts` are equal. - Apply the corresponding discount to each product if its price is above the threshold. - Format the output based on the given `output_format`. 3. If the `output_format` is \'json\', the function should return the results as a JSON string. 4. If the `output_format` is \'pretty\', the function should print each product and its discounted price in a readable format. # Example of Expected Function Signature: ```python import json def calculate_discounted_prices(products, discounts, threshold, output_format): # your code here ``` # Example Input: ```python products = [(\\"laptop\\", 1500.0), (\\"smartphone\\", 900.0), (\\"tablet\\", 300.0)] discounts = [10.0, 5.0, 15.0] threshold = 500.0 output_format = \\"pretty\\" ``` # Example Output: For `output_format` equal to \'pretty\': ``` Product: laptop, Original Price: 1500.0, Discounted Price: 1350.0 Product: smartphone, Original Price: 900.0, Discounted Price: 855.0 Product: tablet, Original Price: 300.0, Discounted Price: 300.0 ``` For `output_format` equal to \'json\': ```json [ {\\"product\\": \\"laptop\\", \\"original_price\\": 1500.0, \\"discounted_price\\": 1350.0}, {\\"product\\": \\"smartphone\\", \\"original_price\\": 900.0, \\"discounted_price\\": 855.0}, {\\"product\\": \\"tablet\\", \\"original_price\\": 300.0, \\"discounted_price\\": 300.0} ] ```","solution":"import json def calculate_discounted_prices(products, discounts, threshold, output_format): Calculates the discounted prices for a list of products and returns the results in either JSON format or pretty-printed format. Args: - products (list): A list of product tuples. Each tuple contains the product name as a string and its price as a float. - discounts (list): A list of discount percentages corresponding to each product as floats. - threshold (float): A price threshold above which a discount can be applied. - output_format (str): Determines the format of the output. Can be \'json\' or \'pretty\'. Returns: - str: JSON string if output_format is \'json\'. - None: Prints pretty format if output_format is \'pretty\'. if len(products) != len(discounts): raise ValueError(\\"The lengths of products and discounts lists must be equal.\\") result = [] for (product, price), discount in zip(products, discounts): if price > threshold: discounted_price = price - (price * (discount / 100)) else: discounted_price = price result.append({ \\"product\\": product, \\"original_price\\": price, \\"discounted_price\\": discounted_price }) if output_format == \\"json\\": return json.dumps(result, indent=4) elif output_format == \\"pretty\\": for item in result: print(f\\"Product: {item[\'product\']}, Original Price: {item[\'original_price\']}, Discounted Price: {item[\'discounted_price\']}\\") return None else: raise ValueError(\\"Invalid output format. It must be \'json\' or \'pretty\'.\\")"},{"question":"You are required to write a Python function named `find_longest_substring` that takes a string as input and returns the longest substring without any repeating characters. If there are multiple substrings with the same length, return the one that appears first. Here are the inputs you should consider for the function: - `s` (str): the input string. The function should: 1. Traverse the string to identify all possible substrings without repeating characters. 2. Track the longest substring found among them. 3. Return the longest substring that has no repeated characters. Examples: ```python find_longest_substring(\\"abrkaabcdefghijjxxx\\") # Should return \\"abcdefghij\\" find_longest_substring(\\"bbbbb\\") # Should return \\"b\\" find_longest_substring(\\"pwwkew\\") # Should return \\"wke\\" ``` **Note:** The returned substring should be the first occurrence of the longest substring without repeated characters, in case of a tie.","solution":"def find_longest_substring(s): Returns the longest substring without repeating characters. If there are multiple substrings with the same length, returns the one that appears first. n = len(s) if n == 0: return \\"\\" # Keep track of the start of the current substring and the longest substring found start = 0 max_len = 0 max_substr = \\"\\" char_index = {} for end in range(n): if s[end] in char_index: # Move the start pointer to the right of the last occurrence of the repeated character start = max(start, char_index[s[end]] + 1) # Update the last occurrence of the current character char_index[s[end]] = end # Update the max substring if we found a longer one current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:end+1] return max_substr"},{"question":"You are tasked with creating a function `compress_sequence(seq: List[int]) -> List[Tuple[int, int]]` that takes a list of integers and returns a list of tuples where each tuple represents a number from the input list and its consecutive occurrence count. This function will help in compressing a sequence of integers by grouping identical consecutive elements together with their respective counts. **Requirements:** - The function should iterate through the input list and identify sequences of consecutive numbers. - For each sequence of identical numbers, create a tuple containing the number and the count of its consecutive occurrences. - Return a list of these tuples, preserving the order of their first appearance in the input list. **Function Signature:** ```python def compress_sequence(seq: List[int]) -> List[Tuple[int, int]]: pass ``` **Example Usage:** ```python print(compress_sequence([1, 1, 2, 2, 2, 3])) # Expected output: [(1, 2), (2, 3), (3, 1)] print(compress_sequence([4, 4, 4, 4, 4, 5, 5, 6])) # Expected output: [(4, 5), (5, 2), (6, 1)] ``` Your task is to implement the `compress_sequence` function as described.","solution":"from typing import List, Tuple def compress_sequence(seq: List[int]) -> List[Tuple[int, int]]: Compress a sequence of integers by grouping identical consecutive elements with their respective counts. Parameters: seq (List[int]): A list of integers to be compressed. Returns: List[Tuple[int, int]]: A list of tuples where each tuple contains an integer and its consecutive occurrence count. if not seq: return [] compressed = [] current_num = seq[0] count = 1 for num in seq[1:]: if num == current_num: count += 1 else: compressed.append((current_num, count)) current_num = num count = 1 # Add the last group compressed.append((current_num, count)) return compressed"},{"question":"Create a function that simulates a simple harmonic oscillator and plots the position vs. time graph using matplotlib. The oscillator follows the equation ( x(t) = A cos(omega t + phi) ), where ( A ) is the amplitude, ( omega ) is the angular frequency, and ( phi ) is the phase. The function should take in the amplitude, frequency (in Hz), phase (in radians), a time range, and the number of points for the simulation. The function should return the time values and the corresponding positions. The function should output: numpy.ndarray: The time values. numpy.ndarray: The position values. Write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def harmonic_oscillator(amplitude: float, frequency: float, phase: float, start_time: float, end_time: float, num_points: int) -> (np.ndarray, np.ndarray): ```","solution":"import numpy as np import matplotlib.pyplot as plt def harmonic_oscillator(amplitude: float, frequency: float, phase: float, start_time: float, end_time: float, num_points: int) -> (np.ndarray, np.ndarray): Simulates a simple harmonic oscillator and plots the position vs. time graph. Parameters: - amplitude: Amplitude (A) of the oscillation. - frequency: Frequency (in Hz) of the oscillation. - phase: Phase (in radians) of the oscillation. - start_time: The start of the time range for the simulation. - end_time: The end of the time range for the simulation. - num_points: Number of points for the simulation. Returns: - t_values: Time values as a numpy array. - x_values: Position values as a numpy array. t_values = np.linspace(start_time, end_time, num_points) angular_frequency = 2 * np.pi * frequency x_values = amplitude * np.cos(angular_frequency * t_values + phase) plt.plot(t_values, x_values) plt.xlabel(\'Time (s)\') plt.ylabel(\'Position (m)\') plt.title(\'Simple Harmonic Oscillator\') plt.grid(True) plt.show() return t_values, x_values"},{"question":"You are required to implement a function `find_top_n_words()` that identifies the most frequent words in a given text and returns them in the order of their frequency, from highest to lowest. The function should ignore punctuation and treat words with different capitalizations as the same word (case insensitive). 1. Remove punctuation from the text. 2. Convert all words to lower case. 3. Count the frequency of each word. 4. Return the top `n` most frequent words in the text. The function should take two arguments: - A string `text`, representing the input text. - An integer `n`, determining the number of top frequent words to return. The function should return a list of the top `n` words sorted in descending order of their frequency. If there are ties, they should be broken by the lexicographical order of the words. Below is the signature for the function you need to implement: ```python from collections import Counter import re def find_top_n_words(text, n): Finds the top `n` most frequent words in the given text. Parameters: text (str): The input text. n (int): The number of top frequent words to return. Returns: list: A list of the top `n` most frequent words, sorted by frequency and then lexicographically in case of ties. # Your code here ``` For example, given the input: ```python text = \\"Hello world! It\'s a beautiful world. Hello to you...\\" n = 3 ``` The function should return: ```python [\'hello\', \'world\', \'a\'] ```","solution":"import re from collections import Counter def find_top_n_words(text, n): Finds the top `n` most frequent words in the given text. Parameters: text (str): The input text. n (int): The number of top frequent words to return. Returns: list: A list of the top `n` most frequent words, sorted by frequency and then lexicographically in case of ties. # Remove punctuation and convert text to lower case text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Sort the words by frequency and then lexicographically sorted_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Return the top `n` words return [word for word, count in sorted_words[:n]]"},{"question":"You are required to write a function that parses a JSON file containing information about various products and returns a dictionary that categorizes these products by their type. The function should be named `categorize_products_from_json` and you should use the `json` module from the Python Standard Library. Here is the function signature: ```python def categorize_products_from_json(file_path): pass ``` # Requirements: 1. Open and read the JSON file using the `open` function and load its contents using the `json.load` function. 2. Assume that the JSON file contains an array of product objects, and each product object contains at least the following structure: ```json { \\"name\\": \\"Product1\\", \\"type\\": \\"TypeA\\", \\"price\\": 100 } ``` 3. Iterate through the array of products. 4. Create a dictionary where the keys are the product types and the values are lists of products belonging to that type. 5. Return the categorized dictionary. # Constraints: - `file_path` (str): The path to the JSON file containing product data. # Example: If the JSON file at `products.json` contains: ```json [ {\\"name\\": \\"Product1\\", \\"type\\": \\"TypeA\\", \\"price\\": 100}, {\\"name\\": \\"Product2\\", \\"type\\": \\"TypeB\\", \\"price\\": 150}, {\\"name\\": \\"Product3\\", \\"type\\": \\"TypeA\\", \\"price\\": 200}, {\\"name\\": \\"Product4\\", \\"type\\": \\"TypeC\\", \\"price\\": 300} ] ``` Calling: ```python categorize_products_from_json(\'products.json\') ``` should return: ```python { \\"TypeA\\": [ {\\"name\\": \\"Product1\\", \\"type\\": \\"TypeA\\", \\"price\\": 100}, {\\"name\\": \\"Product3\\", \\"type\\": \\"TypeA\\", \\"price\\": 200} ], \\"TypeB\\": [ {\\"name\\": \\"Product2\\", \\"type\\": \\"TypeB\\", \\"price\\": 150} ], \\"TypeC\\": [ {\\"name\\": \\"Product4\\", \\"type\\": \\"TypeC\\", \\"price\\": 300} ] } ``` Make sure to use the `json.load` function to read the JSON file as specified in the requirement.","solution":"import json def categorize_products_from_json(file_path): Categorizes products by their type from a JSON file. Args: - file_path (str): The path to the JSON file containing product data. Returns: - dict: A dictionary with the product types as keys and lists of products as values. with open(file_path, \'r\') as file: products = json.load(file) categorized_products = {} for product in products: product_type = product[\'type\'] if product_type not in categorized_products: categorized_products[product_type] = [] categorized_products[product_type].append(product) return categorized_products"},{"question":"You are given a JSON file named `sales_data.json` containing sales records for a retail store. The data in the JSON file has the structure where each record includes the following fields: `date`, `item`, `quantity`, and `price_per_unit`. Your task is to write a function named `plot_sales_trend` that performs the following steps: 1. Reads the JSON file `sales_data.json` using the `pandas` library. 2. Checks for any missing values in the dataset. 3. Calculates the total sales amount for each day. The sales amount for a given record is defined as `quantity` multiplied by `price_per_unit`. 4. Groups the total sales amount per day. 5. Plots the daily sales trend using a line graph. **Constraints:** - The JSON file `sales_data.json` will reside in a folder named `Data`. - The `pandas` library should be used to read the JSON file. - Use the `matplotlib.pyplot` library to plot the data. The function `plot_sales_trend` should not return anything; it should only display the plot. Here is a sample structure of the `sales_data.json` file: ```json [ {\\"date\\": \\"2023-01-01\\", \\"item\\": \\"Item_A\\", \\"quantity\\": 10, \\"price_per_unit\\": 5.0}, {\\"date\\": \\"2023-01-01\\", \\"item\\": \\"Item_B\\", \\"quantity\\": 5, \\"price_per_unit\\": 20.0}, {\\"date\\": \\"2023-01-02\\", \\"item\\": \\"Item_A\\", \\"quantity\\": 3, \\"price_per_unit\\": 5.0}, {\\"date\\": \\"2023-01-02\\", \\"item\\": \\"Item_C\\", \\"quantity\\": 2, \\"price_per_unit\\": 50.0} ] ``` **Function Signature:** ```python def plot_sales_trend() -> None: pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales_trend() -> None: # Read the JSON file sales_data = pd.read_json(\'Data/sales_data.json\') # Check for missing values if sales_data.isnull().values.any(): raise ValueError(\\"There are missing values in the dataset\\") # Calculate total sales amount for each record sales_data[\'total_sale\'] = sales_data[\'quantity\'] * sales_data[\'price_per_unit\'] # Group by date and sum the total sales daily_sales = sales_data.groupby(\'date\')[\'total_sale\'].sum().reset_index() # Plot the daily sales trend plt.figure(figsize=(10, 6)) plt.plot(daily_sales[\'date\'], daily_sales[\'total_sale\'], marker=\'o\') plt.title(\'Daily Sales Trend\') plt.xlabel(\'Date\') plt.ylabel(\'Total Sales\') plt.grid(True) plt.show()"},{"question":"Create a function that takes two dictionaries and returns a new dictionary containing only the keys that are present in both input dictionaries. The values corresponding to these keys should be a list containing the values from both dictionaries in their respective order. If a key is present in only one dictionary, it should not be included in the resulting dictionary. The function should output with: dict: A new dictionary containing the intersected keys and their values as lists. You should write self-contained code starting with: ``` def intersect_dicts(dict1, dict2): ``` Example: ``` dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 3, \'c\': 4, \'d\': 5} intersect_dicts(dict1, dict2) # Output: {\'b\': [2, 3], \'c\': [3, 4]} ```","solution":"def intersect_dicts(dict1, dict2): Returns a dictionary containing only the keys that are present in both input dictionaries. The values are lists containing values from both dictionaries in their respective order. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary with intersected keys and their values as lists. intersected_keys = dict1.keys() & dict2.keys() return {key: [dict1[key], dict2[key]] for key in intersected_keys}"},{"question":"# Deserialize and Manipulate Bank Account Data In this task, you are required to implement a function that takes a serialized string representing bank account transaction logs and extracts important details for financial analysis. Each record in the log contains a timestamp, an account number, and a transaction amount. Records are separated by new lines, and each field within a record is separated by a comma. The function will compute the total balance for each unique account. The function to be implemented is `compute_balances`, which takes one input: 1. `data`: A string containing multiple lines where each line represents a transaction log. The function should: - Parse the input string to extract the transaction details. - Maintain a dictionary where each key is an account number and the value is the total balance for that account. - Return the dictionary containing account numbers as keys and their corresponding balances as values. # Function Signature ```python def compute_balances(data): pass ``` # Detailed Example Given the following transaction log in the `data` input: ``` 2023-01-01T12:00:00,12345,100.00 2023-01-01T13:00:00,12345,-50.00 2023-01-01T14:00:00,67890,200.00 2023-01-02T12:00:00,12345,300.00 2023-01-03T08:00:00,67890,-100.00 ``` The function should analyze the transactions and compute the final balance for each account. The expected output for the provided example would be: ```python { \'12345\': 350.00, # Account 12345: 100.00 - 50.00 + 300.00 \'67890\': 100.00 # Account 67890: 200.00 - 100.00 } ``` # Example Usage ```python data = 2023-01-01T12:00:00,12345,100.00 2023-01-01T13:00:00,12345,-50.00 2023-01-01T14:00:00,67890,200.00 2023-01-02T12:00:00,12345,300.00 2023-01-03T08:00:00,67890,-100.00 balances = compute_balances(data) print(balances) # Output: {\'12345\': 350.0, \'67890\': 100.0} ```","solution":"def compute_balances(data): Computes the total balance for each unique account based on transaction logs. Args: data (str): A string containing multiple lines where each line represents a transaction log. Returns: dict: A dictionary with account numbers as keys and their corresponding balances as values. transactions = data.split(\'n\') account_balances = {} for transaction in transactions: if transaction.strip() == \'\': # Skip empty lines continue timestamp, account, amount = transaction.split(\',\') account = account.strip() amount = float(amount.strip()) if account in account_balances: account_balances[account] += amount else: account_balances[account] = amount return account_balances"},{"question":"In this task, you are required to implement a function that plots the Receiver Operating Characteristic (ROC) curve using the `matplotlib` and `sklearn` libraries. The function should accept the true binary labels and the predicted scores, compute the ROC curve, and plot it. You will use the `matplotlib.pyplot` functions to customize the plot. Your task is to write a function named `plot_roc_curve` that takes the following parameters: 1. `y_test` (list or array-like): The actual binary labels of the test data. 2. `y_scores` (list or array-like): The predicted scores from your model. 3. `title` (str, optional): The title of the plot. Default is `\'ROC Curve\'`. The function should: 1. Compute the false positive rate (FPR) and true positive rate (TPR) using the given `y_test` and `y_scores`. 2. Use `matplotlib` to plot the ROC curve. 3. Set the x-label as \\"False Positive Rate\\" and y-label as \\"True Positive Rate\\". 4. Include a title for the plot using `matplotlib.pyplot.title` with the given `title` parameter or the default. 5. Show the plot. Below is a code snippet to help you get started: ```python def plot_roc_curve(y_test, y_scores, title=\'ROC Curve\'): import matplotlib.pyplot as plt from sklearn.metrics import roc_curve # Compute the ROC curve fpr, tpr, _ = roc_curve(y_test, y_scores) # Plot the ROC curve plt.figure() plt.plot(fpr, tpr, color=\'blue\', lw=2, label=\'ROC curve\') plt.plot([0, 1], [0, 1], color=\'red\', linestyle=\'--\', lw=2, label=\'Chance\') plt.xlim([0.0, 1.0]) plt.ylim([0.0, 1.05]) plt.xlabel(\'False Positive Rate\', fontsize=12, fontweight=\'bold\') plt.ylabel(\'True Positive Rate\', fontsize=12, fontweight=\'bold\') plt.title(title, fontsize=14, fontweight=\'bold\') plt.legend(loc=\\"lower right\\") plt.show() ```","solution":"def plot_roc_curve(y_test, y_scores, title=\'ROC Curve\'): import matplotlib.pyplot as plt from sklearn.metrics import roc_curve # Compute the ROC curve fpr, tpr, _ = roc_curve(y_test, y_scores) # Plot the ROC curve plt.figure() plt.plot(fpr, tpr, color=\'blue\', lw=2, label=\'ROC curve\') plt.plot([0, 1], [0, 1], color=\'red\', linestyle=\'--\', lw=2, label=\'Chance\') plt.xlim([0.0, 1.0]) plt.ylim([0.0, 1.05]) plt.xlabel(\'False Positive Rate\', fontsize=12, fontweight=\'bold\') plt.ylabel(\'True Positive Rate\', fontsize=12, fontweight=\'bold\') plt.title(title, fontsize=14, fontweight=\'bold\') plt.legend(loc=\\"lower right\\") plt.show()"},{"question":"You are tasked with creating an inventory management system for a small business. The business sells a variety of products, each with a unique identifier, name, category, quantity in stock, and price per unit. You need to implement a function named `update_inventory` that allows the business to update the stock quantity for a given product in the inventory. The function will take a list of dictionaries representing the current inventory and a dictionary containing the product details to be updated. The product details dictionary will include the product\'s unique identifier and the new stock quantity. If the product exists in the inventory, the function should update its quantity; if it does not exist, the function should add the product to the inventory. Your implementation should achieve the following: 1. Iterate through the inventory to find the product by its unique identifier. 2. If the product is found, update its quantity with the new value. 3. If the product is not found, add the new product details to the inventory. 4. Return the updated inventory. Here is the function signature you should implement: ```python def update_inventory(inventory, product_details): pass ``` Example: ```python inventory = [ {\\"id\\": \\"001\\", \\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"quantity\\": 10, \\"price\\": 900}, {\\"id\\": \\"002\\", \\"name\\": \\"Chair\\", \\"category\\": \\"Furniture\\", \\"quantity\\": 5, \\"price\\": 120} ] product_details = {\\"id\\": \\"001\\", \\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"quantity\\": 15, \\"price\\": 900} updated_inventory = update_inventory(inventory, product_details) print(updated_inventory) ``` Expected Output: ```python [ {\\"id\\": \\"001\\", \\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"quantity\\": 15, \\"price\\": 900}, {\\"id\\": \\"002\\", \\"name\\": \\"Chair\\", \\"category\\": \\"Furniture\\", \\"quantity\\": 5, \\"price\\": 120} ] ```","solution":"def update_inventory(inventory, product_details): Update the stock quantity for a given product in the inventory or add a new product if it does not exist. Parameters: inventory (list of dict): The current inventory represented as a list of dictionaries. product_details (dict): The product details containing the unique identifier and new stock quantity, and optionally name, category, and price. Returns: list of dict: The updated inventory. product_found = False for item in inventory: if item[\'id\'] == product_details[\'id\']: # Update the quantity item[\'quantity\'] = product_details[\'quantity\'] # Update other fields if they exist in product_details and are not None for key in [\'name\', \'category\', \'price\']: if key in product_details and product_details[key] is not None: item[key] = product_details[key] product_found = True break if not product_found: # Add the new product to the inventory inventory.append(product_details) return inventory"},{"question":"You are asked to create a function that receives a list of non-negative integers and returns a new list with the squares of these integers, but in ascending order. Your function should handle any invalid input gracefully by printing an appropriate error message and exiting the program. To achieve this, consider validating the input to ensure that the list only contains non-negative integers. Additionally, use the `sys.exit` function from the `sys` module to exit the program when necessary. Function Signature ```python def sorted_squares(arr: list) -> list: pass ``` Requirements 1. If `arr` contains any element that is not a non-negative integer, the function should print an error message and exit the program. The error message should indicate that all elements must be non-negative integers. 2. The function should compute the squares of all non-negative integers in the list. 3. The resultant list of squared values should be sorted in ascending order. Examples 1. `sorted_squares([3, 1, 4, 2])` should return `[1, 4, 9, 16]` 2. `sorted_squares([-1, 2, 3])` should print: ``` Error: All elements must be non-negative integers. ```","solution":"import sys def sorted_squares(arr): Returns a list with the squares of the non-negative integers from the input list, sorted in ascending order. If any element in the input list is not a non-negative integer, prints an error message and exits the program. if not all(isinstance(x, int) and x >= 0 for x in arr): print(\\"Error: All elements must be non-negative integers.\\") sys.exit(1) squared_sorted_arr = sorted(x ** 2 for x in arr) return squared_sorted_arr"},{"question":"You are to design a function `sequential_search(arr, target)` using Python that performs a sequential search on an array to find the index of a target element. The function should return the first index of the target element if it is found, and `-1` if the element is not present in the array. **Function Prototype:** ```python def sequential_search(arr, target): Perform a sequential search on the array to find the target element. Arguments: arr -- list of elements to search through target -- element to be searched for in the array Returns: index -- the index of the target element in the array, or -1 if the target is not found ``` # Instructions: 1. **Initialize:** Start iterating from the first element of the array. 2. **Check Each Element:** Compare each element in the array with the target element. 3. **Return Index:** If the target element is found, return its index immediately. 4. **Return -1:** If the end of the array is reached without finding the target, return `-1`. # Example: Given: ```python arr = [2, 3, 5, 7, 11, 13, 17] target = 7 ``` The function `sequential_search(arr, target)` should return: ```python 3 # Because 7 is present at index 3 in the array. ``` # Hints: 1. Use a for loop to iterate through the elements of the array. 2. Use the `enumerate` function to get both the element and its index simultaneously. # Note: This problem aims to practice the implementation of a basic search algorithm and to understand how to iterate through and compare elements in an array.","solution":"def sequential_search(arr, target): Perform a sequential search on the array to find the target element. Arguments: arr -- list of elements to search through target -- element to be searched for in the array Returns: index -- the index of the target element in the array, or -1 if the target is not found for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"You\'re given the challenge of working with data visualization and regression analysis using the `matplotlib` and `numpy` libraries. Your task is to write a function named `plot_linear_regression` that will: 1. Take a set of x and y data points. 2. Plot these points. 3. Fit a linear regression line to this data. 4. Overlay the regression line on the same plot. Requirements: 1. **Function Name:** `plot_linear_regression` 2. **Parameters:** - `x_points` (list or numpy array): A list or array of x-coordinates of the data points. - `y_points` (list or numpy array): A list or array of y-coordinates of the data points. 3. **Return:** None. The function should display a 2D plot with the data points and the regression line. **Context:** Linear regression finds the best-fitting straight line through the points in the scatter plot. Often, this means minimizing the sum of the squared residuals (the differences between the observed and predicted values). - Calculate the slope ( m ) and intercept ( b ) of the line using standard formulas for linear regression. - Plot the scatter points (x_points, y_points) onto the plot. - Plot the regression line defined by ( y = mx + b ). Implement this as a function and generate the plot displaying both the data points and the linear regression line.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_linear_regression(x_points, y_points): Plots a set of data points and overlays the linear regression line. Parameters: x_points (list or numpy array): x-coordinates of the data points. y_points (list or numpy array): y-coordinates of the data points. # Ensure input is in numpy array format x_points = np.array(x_points) y_points = np.array(y_points) # Calculate the coefficients of the linear regression line n = len(x_points) m = (n * np.sum(x_points * y_points) - np.sum(x_points) * np.sum(y_points)) / (n * np.sum(x_points ** 2) - np.sum(x_points) ** 2) b = (np.sum(y_points) - m * np.sum(x_points)) / n # Prepare the data for plotting the regression line y_regression = m * x_points + b # Create the plot plt.scatter(x_points, y_points, color=\'blue\', label=\'Data Points\') plt.plot(x_points, y_regression, color=\'red\', label=\'Regression Line\') plt.xlabel(\'X-axis\') plt.ylabel(\'Y-axis\') plt.title(\'Linear Regression\') plt.legend() plt.show()"},{"question":"** Write a function called `detect_cycle` that detects if there is a cycle in a directed graph. A cycle in a directed graph means that there is a way to start at some node and follow a sequence of edges that eventually loops back to the starting node. The graph will be represented as an adjacency list, where each key is a node, and its value is a list of nodes that it points to. Your function should return a boolean indicating whether or not there is a cycle in the graph. **Function Specification:** ```python def detect_cycle(graph): Detects if there is a cycle in a directed graph. Parameters: graph - dict, adjacency list representing the graph. Returns: boolean, True if there is a cycle in the graph, False otherwise. ``` **Example:** ```python graph = { \'A\': [\'B\'], \'B\': [\'C\', \'D\'], \'C\': [\'E\'], \'D\': [\'E\'], \'E\': [\'A\'] } print(detect_cycle(graph)) # Output: True graph = { \'A\': [\'B\'], \'B\': [\'C\', \'D\'], \'C\': [\'E\'], \'D\': [\'E\'], \'E\': [] } print(detect_cycle(graph)) # Output: False ``` **Requirements:** - Implement a depth-first search (DFS) algorithm to detect cycles in the graph. - Maintain a visited set to track nodes that have been fully explored. - Use a recursion stack to track the nodes currently in the DFS path. Complete the function so that it accurately detects cycles in a directed graph given by its adjacency list and returns a boolean result. **","solution":"def detect_cycle(graph): Detects if there is a cycle in a directed graph. Parameters: graph - dict, adjacency list representing the graph. Returns: boolean, True if there is a cycle in the graph, False otherwise. def dfs(node, visited, rec_stack): # Mark the current node as visited and add to recursion stack visited.add(node) rec_stack.add(node) # Recur for all vertices adjacent to this vertex for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited, rec_stack): return True elif neighbor in rec_stack: return True # Remove the vertex from recursion stack rec_stack.remove(node) return False visited = set() rec_stack = set() # Call the recursive helper function to detect cycle in different DFS trees for node in graph.keys(): if node not in visited: if dfs(node, visited, rec_stack): return True return False"},{"question":"You are required to create a function called `createBinaryTree` that takes a list of integers representing the nodes of a binary tree in level-order traversal. The function should build the binary tree and print the pre-order traversal of the built tree. Here are the specific details: - **Parameters:** - `nodes`: A list of integers where each element represents a node value in level-order traversal. - **Functionality:** 1. **Tree Construction:** - Construct the binary tree using the given level-order list. Use `None` to represent missing nodes. 2. **Pre-order Traversal:** - Perform a pre-order traversal (root, left, right) of the binary tree. - Print the node values encountered during the pre-order traversal. - **Constraints:** - Use a class `TreeNode` to represent each node in the binary tree. - Assume that the input list will always produce a valid binary tree. Here is a partially completed function for reference: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def createBinaryTree(nodes): if not nodes: return None from collections import deque root = TreeNode(nodes[0]) queue = deque([root]) i = 1 while queue and i < len(nodes): current = queue.popleft() if nodes[i] is not None: current.left = TreeNode(nodes[i]) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] is not None: current.right = TreeNode(nodes[i]) queue.append(current.right) i += 1 def preOrderTraversal(node): if not node: return print(node.val, end=\' \') preOrderTraversal(node.left) preOrderTraversal(node.right) preOrderTraversal(root) ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def createBinaryTree(nodes): if not nodes: return None from collections import deque root = TreeNode(nodes[0]) queue = deque([root]) i = 1 while queue and i < len(nodes): current = queue.popleft() if nodes[i] is not None: current.left = TreeNode(nodes[i]) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] is not None: current.right = TreeNode(nodes[i]) queue.append(current.right) i += 1 def preOrderTraversal(node): if not node: return print(node.val, end=\' \') preOrderTraversal(node.left) preOrderTraversal(node.right) preOrderTraversal(root)"},{"question":"You need to write a Python function named `generate_fibonacci_sequence` that takes an integer `n` and returns the first `n` numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the previous two. Here is the signature of the function you need to implement: ```python def generate_fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence. ``` **Example:** If the input is: ```python n = 5 ``` The output should be: ```python [0, 1, 1, 2, 3] ``` If the input is: ```python n = 10 ``` The output should be: ```python [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ```","solution":"def generate_fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence. Args: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) return fib_sequence"},{"question":"You are asked to implement a function `find_longest_string_of_duplicates(s)`, which will find and return the longest contiguous substring in a given string `s` where all characters are identical. If there are multiple substrings of the same maximum length, return the first one that appears. # Function Behavior: 1. The function takes a single argument `s`, which is a string consisting of only lowercase letters. 2. The function should scan through the string and find the contiguous substring where all characters are the same and which has the maximum length. 3. If multiple substrings have the same maximum length, return the first one encountered. 4. If the string is empty, return an empty string. # Constraints: - You may not use regular expressions or any external libraries for string manipulation. - Assume the length of the string `s` does not exceed 10^5. # Function Signature: ```python def find_longest_string_of_duplicates(s: str) -> str: pass ``` # Example: ```python # Example 1: Simple case print(find_longest_string_of_duplicates(\\"aabbccddddeee\\")) # Output: \\"dddd\\" # Example 2: Multiple equal length substrings print(find_longest_string_of_duplicates(\\"aaabbbccc\\")) # Output: \\"aaa\\" # Example 3: No duplicates print(find_longest_string_of_duplicates(\\"abcdef\\")) # Output: \\"a\\" # Example 4: Empty string print(find_longest_string_of_duplicates(\\"\\")) # Output: \\"\\" # Example 5: Entirely same characters print(find_longest_string_of_duplicates(\\"gggggg\\")) # Output: \\"gggggg\\" ```","solution":"def find_longest_string_of_duplicates(s: str) -> str: if not s: # handle empty string case return \\"\\" max_length = 1 current_length = 1 max_substring = s[0] current_substring = s[0] for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 current_substring += s[i] else: if current_length > max_length: max_length = current_length max_substring = current_substring current_length = 1 current_substring = s[i] if current_length > max_length: max_substring = current_substring return max_substring"},{"question":"We are developing a system that evaluates the performance of machine learning models on different datasets. As part of the evaluation, we need to calculate several statistical metrics and visualize the distribution of the model\'s predictions. Your task is to write a function `evaluate_model` that will compute the mean, median, and standard deviation of the model\'s predictions and generate a histogram of these predictions. **Function Requirements:** - **Function Name**: `evaluate_model` - **Parameters**: 1. `predictions`: A list of float values representing the model\'s predictions. 2. `title`: A string that will be used as the title for the histogram plot. - **Return**: A dictionary containing the computed mean, median, and standard deviation of the predictions. - **Libraries**: You must use `matplotlib.pyplot.hist` and `numpy`. **Instructions**: 1. Calculate the mean, median, and standard deviation of the `predictions` list. 2. Generate a histogram of the predictions using `matplotlib.pyplot.hist`. 3. Add the provided `title` to the histogram plot. 4. Save the plot as a PNG file named `histogram.png`. 5. Return a dictionary with keys `\'mean\'`, `\'median\'`, and `\'std_dev\'`, containing the respective computed values. **Example**: ```python def evaluate_model(predictions, title): # Your implementation here ``` Here\'s an example of how the function might be called: ```python # Example predictions predictions = [3.5, 2.1, 4.6, 3.3, 5.0, 4.4, 1.2, 3.7, 2.8, 2.5] # Evaluating the model results = evaluate_model(predictions, \\"Model Predictions Distribution\\") print(results) # Example Output: {\'mean\': 3.31, \'median\': 3.4, \'std_dev\': 1.19} ``` This function will help visualize the distribution of the model\'s predictions and provide key statistical insights at a glance.","solution":"import numpy as np import matplotlib.pyplot as plt def evaluate_model(predictions, title): Computes the mean, median, and standard deviation of the predictions, generates a histogram of the predictions with the provided title, and saves it as \'histogram.png\'. Parameters: predictions (list of float): The model\'s predictions. title (str): The title for the histogram plot. Returns: dict: A dictionary containing \'mean\', \'median\', and \'std_dev\' of the predictions. # Calculate statistics mean = np.mean(predictions) median = np.median(predictions) std_dev = np.std(predictions) # Generate histogram plt.figure() plt.hist(predictions, bins=10, alpha=0.75, color=\'blue\', edgecolor=\'black\') plt.title(title) plt.xlabel(\'Prediction Values\') plt.ylabel(\'Frequency\') plt.grid(True) plt.savefig(\'histogram.png\') plt.close() # Return statistics return { \'mean\': mean, \'median\': median, \'std_dev\': std_dev }"},{"question":"You are asked to write a Python function `find_largest_word` that takes a single argument `sentence`, a string containing a sentence, and returns the largest word in the sentence. If there are multiple words with the same maximum length, return the first such word encountered. The function should handle the following: 1. Ignore any non-alphabetical characters in the input string. 2. Assume that words are separated by spaces only. 3. Handle empty input strings by returning an empty string. # Function Signature: ```python def find_largest_word(sentence: str) -> str: pass ``` # Example Usage: ```python sentence = \\"The quick brown fox jumps over the lazy dog!\\" result = find_largest_word(sentence) print(result) # Output: \\"quick\\" ``` ```python sentence = \\"Hello, world!!!\\" result = find_largest_word(sentence) print(result) # Output: \\"Hello\\" ``` # Constraints: - Only use standard Python libraries. - Treat letters in different cases (e.g., \'A\' and \'a\') as equivalent when determining word lengths.","solution":"import re def find_largest_word(sentence: str) -> str: Returns the largest word in the given sentence ignoring non-alphabetical characters. If there are multiple words with the same maximum length, the first such word encountered is returned. # Remove non-alphabetical characters and split the sentence into words words = re.findall(r\'b[a-zA-Z]+b\', sentence) # Find the largest word largest_word = \'\' for word in words: if len(word) > len(largest_word): largest_word = word return largest_word"},{"question":"Write a function `find_duplicates` that identifies all the duplicate elements in a list of integers and returns them in a sorted list. The function should use Python\'s standard libraries and should be efficient in terms of both time and space complexity. Specifically, you should follow these steps: 1. Use a dictionary to keep a count of each element in the list. 2. Iterate over the dictionary to collect elements that have a count greater than one. 3. Sort the collected duplicate elements before returning them. Function signature: ```python def find_duplicates(input_list: List[int]) -> List[int]: ... ``` **Parameters:** - `input_list`: A list of integers which may contain duplicates. **Returns:** - A sorted list of integers which are duplicates in `input_list`. Each duplicate should appear only once in the result list, regardless of how many times it appears in the original list. For example: ```python find_duplicates([4, 5, 6, 7, 4, 9, 6, 1, 4]) # Should return [4, 6] ```","solution":"from typing import List def find_duplicates(input_list: List[int]) -> List[int]: Identifies all the duplicate elements in a list of integers and returns them in a sorted list. Parameters: input_list (List[int]): A list of integers which may contain duplicates. Returns: List[int]: A sorted list of integers which are duplicates in input_list. Each duplicate appears only once. element_count = {} for element in input_list: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 duplicates = [element for element, count in element_count.items() if count > 1] return sorted(duplicates)"},{"question":"You are given a list of dictionaries where each dictionary represents a product in an inventory system. Each dictionary contains the following keys: `product_id`, `name`, `quantity`, and `price`. Write a Python function named `consolidate_inventory` that takes two such lists of dictionaries and merges them into a single list. If a product appears in both lists by its `product_id`, update the product\'s quantity by adding the values together and keep the larger price between the two products. If a product only appears in one list, it should be included in the merged list as is. Here is the desired signature for your function: ```python def consolidate_inventory(list1: List[Dict[str, Union[str, int, float]]], list2: List[Dict[str, Union[str, int, float]]]) -> List[Dict[str, Union[str, int, float]]]: ``` **Example:** Suppose you are given the following lists: ```python list1 = [ {\'product_id\': \'101\', \'name\': \'Apple\', \'quantity\': 50, \'price\': 0.5}, {\'product_id\': \'102\', \'name\': \'Banana\', \'quantity\': 30, \'price\': 0.2}, ] list2 = [ {\'product_id\': \'101\', \'name\': \'Apple\', \'quantity\': 20, \'price\': 0.55}, {\'product_id\': \'103\', \'name\': \'Orange\', \'quantity\': 40, \'price\': 0.3}, ] ``` When `consolidate_inventory(list1, list2)` is called, it should return: ```python [ {\'product_id\': \'101\', \'name\': \'Apple\', \'quantity\': 70, \'price\': 0.55}, {\'product_id\': \'102\', \'name\': \'Banana\', \'quantity\': 30, \'price\': 0.2}, {\'product_id\': \'103\', \'name\': \'Orange\', \'quantity\': 40, \'price\': 0.3}, ] ```","solution":"def consolidate_inventory(list1, list2): Merges two inventory lists into a single list, updating quantities and prices as needed. inventory = {} # Process first list for item in list1: inventory[item[\'product_id\']] = item # Process second list for item in list2: if item[\'product_id\'] in inventory: # Update quantity and keep the larger price inventory[item[\'product_id\']][\'quantity\'] += item[\'quantity\'] inventory[item[\'product_id\']][\'price\'] = max(inventory[item[\'product_id\']][\'price\'], item[\'price\']) else: inventory[item[\'product_id\']] = item # Convert dictionary back to list return list(inventory.values())"},{"question":"You need to implement a function to compute the cross-entropy loss for a neural network\'s output layer. The cross-entropy loss is commonly used in classification problems where the task is to assign an input to one of several classes. Your function, `compute_cross_entropy_loss`, should take two inputs: 1. `Y_hat`: A numpy array containing the predicted probabilities for each class. It has shape (num_classes, m), where `num_classes` is the number of classes and `m` is the number of examples. 2. `Y`: A numpy array containing the true labels. It has shape (num_classes, m), where `num_classes` is the number of classes and `m` is the number of examples. The true labels are represented as a one-hot encoded matrix, where each column corresponds to an example and contains a single `1` at the index of the true class and `0`s elsewhere. Your function should return: - `loss`: A scalar representing the cross-entropy loss, computed as the negative log-likelihood of the true labels given the predicted probabilities. To complete this task, you need to follow these steps: 1. Compute the negative log-likelihood using the formula for cross-entropy loss: [ text{loss} = - frac{1}{m} sum_{i=1}^{m} sum_{j=1}^{num_classes} Y_{j,i} log(Y_hat_{j,i}) ] 2. Use `numpy.log()` to compute the natural logarithm. 3. Use `numpy.sum()` for summing the terms in the loss computation. Implement the function `compute_cross_entropy_loss(Y_hat, Y)` that follows these steps correctly.","solution":"import numpy as np def compute_cross_entropy_loss(Y_hat, Y): Computes the cross-entropy loss given predictions and true labels. Parameters: - Y_hat (numpy.ndarray): Predicted probabilities, shape (num_classes, m) - Y (numpy.ndarray): True labels as one-hot encoded, shape (num_classes, m) Returns: - loss (float): Cross-entropy loss m = Y.shape[1] loss = -np.sum(Y * np.log(Y_hat)) / m return loss"},{"question":"You are given a list of dictionaries, each representing an employee with fields \\"id\\", \\"name\\", \\"age\\", and \\"salary\\". Your task is to write a function that takes this list and returns a new list of dictionaries sorted by their \\"salary\\" in ascending order. If two employees have the same salary, sort them alphabetically by their \\"name\\". **Function Requirements:** 1. **Function Name:** `sortEmployees` 2. **Input:** A list of dictionaries where each dictionary contains the keys: \'id\', \'name\', \'age\', and \'salary\'. - Example: ```python [ {\\"id\\": 1, \\"name\\": \\"John\\", \\"age\\": 28, \\"salary\\": 5000}, {\\"id\\": 2, \\"name\\": \\"Alice\\", \\"age\\": 24, \\"salary\\": 5000}, {\\"id\\": 3, \\"name\\": \\"Bob\\", \\"age\\": 22, \\"salary\\": 4000}, ] ``` 3. **Output:** A list of dictionaries sorted first by \\"salary\\" in ascending order, then by \\"name\\" alphabetically. **Instructions:** 1. Define a function named `sortEmployees` which takes one parameter: the list of employee dictionaries. 2. Use the `sorted` function with a custom sorting key to sort primarily by \\"salary\\" and secondarily by \\"name\\". 3. The function should return the sorted list of dictionaries. **Constraints:** - The list can contain up to 1000 dictionaries. - Each dictionary will have the structure: {\\"id\\": int, \\"name\\": str, \\"age\\": int, \\"salary\\": int}. - The \\"salary\\" and \\"age\\" values will be non-negative integers. - The \\"id\\" values will be unique. **Example:** ```python employees = [ {\\"id\\": 1, \\"name\\": \\"John\\", \\"age\\": 28, \\"salary\\": 5000}, {\\"id\\": 2, \\"name\\": \\"Alice\\", \\"age\\": 24, \\"salary\\": 5000}, {\\"id\\": 3, \\"name\\": \\"Bob\\", \\"age\\": 22, \\"salary\\": 4000}, ] sorted_employees = sortEmployees(employees) print(sorted_employees) # Output: # [ # {\\"id\\": 3, \\"name\\": \\"Bob\\", \\"age\\": 22, \\"salary\\": 4000}, # {\\"id\\": 2, \\"name\\": \\"Alice\\", \\"age\\": 24, \\"salary\\": 5000}, # {\\"id\\": 1, \\"name\\": \\"John\\", \\"age\\": 28, \\"salary\\": 5000} # ] ```","solution":"def sortEmployees(employees): Sort the list of employee dictionaries first by salary in ascending order, then by name alphabetically if salaries are identical. Parameters: employees (list): A list of dictionaries where each dictionary contains fields: \'id\', \'name\', \'age\', \'salary\' Returns: list: A sorted list of dictionaries based on the specified criteria. # Sorting the employees using \'salary\' as the primary key and \'name\' as the secondary key return sorted(employees, key=lambda x: (x[\'salary\'], x[\'name\']))"},{"question":"Load in a dictionary where the keys are student names and the values are lists of their respective scores across multiple subjects. Write a function that accepts such a dictionary and returns a new dictionary with the student names as keys and their average scores as the values. Handle possible errors gracefully, such as if a student\'s scores are not in list format or are not numeric. The function should output: dict: A dictionary with student names as keys and their average scores as values. Your code should start with: ``` def calculate_average_scores(student_scores): ```","solution":"def calculate_average_scores(student_scores): Calculates the average scores for each student. Parameters: student_scores (dict): A dictionary where keys are student names and values are lists of their respective scores across multiple subjects. Returns: dict: A dictionary with student names as keys and their average scores as values. average_scores = {} for student, scores in student_scores.items(): if not isinstance(scores, list): print(f\\"Error: Scores for {student} are not in list format.\\") average_scores[student] = None continue numeric_scores = [score for score in scores if isinstance(score, (int, float))] if not numeric_scores: print(f\\"Error: No valid numeric scores found for {student}.\\") average_scores[student] = None else: average_scores[student] = sum(numeric_scores) / len(numeric_scores) return average_scores"},{"question":"**Objective:** Your task is to create a function named `word_frequency_in_sentences` that processes a list of sentences, and returns a dictionary representing the frequency of each word in the entire list. This function will showcase your ability to handle text data and calculate word frequencies. **Function Signature:** ```python def word_frequency_in_sentences(sentences: list) -> dict: Calculate the frequency of each word in a list of sentences. Parameters: sentences (list): A list of strings, each representing a sentence. Returns: dict: A dictionary where keys are words and values are the counts of each word. ``` **Detailed Instructions:** 1. **Initialize an empty dictionary**: Create an empty dictionary to store the word frequencies. 2. **Process each sentence**: Loop through each sentence in the input list `sentences`. 3. **Tokenize the sentence**: Split each sentence into words using the `split()` method. 4. **Count word frequencies**: For each word in the sentence, update the count in the dictionary. 5. **Normalize words**: Convert words to lowercase to ensure that words are case-insensitive. 6. **Return the frequency dictionary**: At the end, return the dictionary containing word frequencies. **Example:** ```python sentences = [\\"This is a test sentence\\", \\"This test is only a test\\"] print(word_frequency_in_sentences(sentences)) ``` **Expected Output:** ```python {\'this\': 2, \'is\': 2, \'a\': 2, \'test\': 3, \'sentence\': 1, \'only\': 1} ``` This problem tests your ability to handle textual data, perform basic string manipulation, and use dictionaries to track and count occurrences of words, ensuring a comprehensive understanding of text processing and frequency analysis.","solution":"def word_frequency_in_sentences(sentences: list) -> dict: Calculate the frequency of each word in a list of sentences. Parameters: sentences (list): A list of strings, each representing a sentence. Returns: dict: A dictionary where keys are words and values are the counts of each word. frequency_dict = {} for sentence in sentences: words = sentence.split() for word in words: word = word.lower() if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 return frequency_dict"},{"question":"In this problem, we will focus on using Pandas and Matplotlib for data manipulation and visualization. You are tasked with writing a function named `clean_and_visualize` that performs the following steps using Pandas DataFrames and Matplotlib for visualization: 1. **Create a DataFrame**: - Create a DataFrame with the following data: ```plaintext Name: [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eva\', \'Frank\'] Age: [24, 47, 35, 23, 32, 41] Score: [72, 95, 67, 88, 45, 85] ``` 2. **Filter Data**: - Filter the DataFrame to include only rows where the `Score` is greater than or equal to 70. 3. **Add a New Column**: - Add a new column called `Passed` that contains a boolean value indicating whether the `Score` is 70 or higher. 4. **Sort the Data**: - Sort the DataFrame by `Age` in ascending order. 5. **Visualize the Data**: - Create a bar plot for the `Age` of individuals who passed. - Use `matplotlib.pyplot.bar` to visualize the `Name` against their respective `Age`. Here is the signature of the function you need to implement: ```python def clean_and_visualize(): pass ``` The function should implement the steps outlined above and produce the corresponding bar plot.","solution":"import pandas as pd import matplotlib.pyplot as plt def clean_and_visualize(): # Step 1: Create a DataFrame data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eva\', \'Frank\'], \'Age\': [24, 47, 35, 23, 32, 41], \'Score\': [72, 95, 67, 88, 45, 85], } df = pd.DataFrame(data) # Step 2: Filter Data df_filtered = df[df[\'Score\'] >= 70] # Step 3: Add a New Column df_filtered[\'Passed\'] = df_filtered[\'Score\'] >= 70 # Step 4: Sort the Data df_sorted = df_filtered.sort_values(by=\'Age\') # Step 5: Visualize the Data plt.figure(figsize=(10, 6)) plt.bar(df_sorted[\'Name\'], df_sorted[\'Age\'], color=\'blue\') plt.xlabel(\'Name\') plt.ylabel(\'Age\') plt.title(\'Age of Individuals Who Passed\') plt.show() return df_sorted"},{"question":"You are tasked with writing a function to find the k most frequent elements in an array. The function should make use of the `collections` module in Python, specifically the `Counter` class, to count the frequency of each element. **Function Name: `top_k_frequent`** **Parameters:** - `nums` (list of integers): The input list of integers. - `k` (integer): The number of top frequent elements to return. **Returns:** - A list of the `k` most frequent elements in decreasing order of their frequency. If two elements have the same frequency, the order does not matter. **Functionality:** 1. Use the `Counter` class from the `collections` module to count the frequency of each element in `nums`. 2. Find the `k` elements with the highest frequencies. 3. Return these `k` elements in a list. **Example:** ```python print(top_k_frequent([1,1,1,2,2,3], 2)) # Should return [1, 2] ``` Ensure you import the `collections` module and use the `Counter` class as described in the [Library Api Doc] section. [Library Api Doc]: https://docs.python.org/3/library/collections.html#collections.Counter","solution":"from collections import Counter def top_k_frequent(nums, k): Returns the k most frequent elements in the nums list. Args: nums (list of int): The list of integers. k (int): The number of top frequent elements to return. Returns: list of int: The k most frequent elements in decreasing order of their frequency. count = Counter(nums) return [item for item, _ in count.most_common(k)]"},{"question":"You are required to write a Python function `words_starting_with` that extracts words from a given text that start with a specific letter and returns them in a list. The words should be extracted in the order they appear in the text. # Function Signature ```python def words_starting_with(text, letter): pass ``` # Parameters 1. **text (str)**: A string containing the input text from which words need to be extracted. 2. **letter (str)**: The letter which should be the starting character of the words to be extracted. # Operation 1. The function should process the input text and identify all unique words that start with the specified letter. 2. Treat uppercase and lowercase versions of the letter as the same. 3. Words are separated by any whitespace character. 4. Ignore punctuation attached to words. 5. Return the list of words in the order they appear in the text without duplicates. # Returns - **(list of str)**: A list containing the words that start with the specified letter, in the order they occur in the input text. # Example ```python text = \\"A quick brown fox jumps over a lazy dog. an amazing animal.\\" letter = \\"a\\" print(words_starting_with(text, letter)) ``` Output should be: ```python [\'A\', \'a\', \'amazing\', \'animal\'] ``` Each word in the list should be unique and follow the order of occurrence in the text.","solution":"import re def words_starting_with(text, letter): Extracts words from a given text that start with a specific letter and returns them in a list. Parameters: text (str): The input text from which words need to be extracted. letter (str): The letter which should be the starting character of the words to be extracted. Returns: list: A list of unique words that start with the specified letter, in the order they occur in the text. words = re.findall(r\'b\' + re.escape(letter) + r\'w*\', text, flags=re.IGNORECASE) seen = set() result = [] for word in words: lower_word = word.lower() if lower_word not in seen: seen.add(lower_word) result.append(word) return result"},{"question":"You need to create a function named `merge_and_sort_lists` that merges two lists of integers and returns a single sorted list without duplicates. The function should ensure that duplicate elements present in the input lists appear only once in the resulting list. Implement the function using Python\'s built-in data structures. The function should follow these steps: 1. Accept two lists of integers as inputs. 2. Merge the two lists into a single list. 3. Remove any duplicate integers from the merged list. 4. Sort the resulting list in ascending order. 5. Return the sorted list without duplicates. **Function Signature** ```python def merge_and_sort_lists(list1, list2): pass ``` **Example** ```python list1 = [3, 1, 4, 2] list2 = [4, 5, 3, 6] result = merge_and_sort_lists(list1, list2) print(result) # Output: [1, 2, 3, 4, 5, 6] ``` **Requirements** 1. The function must handle the merging, deduplication, and sorting processes internally. 2. The function should work efficiently for lists containing up to 10,000 elements. 3. Do not use any external libraries apart from the standard Python library.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists of integers, removes duplicates, and returns a sorted list. # Merge the lists and convert to a set to remove duplicates merged_set = set(list1 + list2) # Convert the set back to a list and sort it sorted_list = sorted(merged_set) return sorted_list"},{"question":"You are tasked with writing a function named `normalize_numbers` that takes a single string argument `text`. This string may contain numbers written in various formats (e.g., integers, decimal numbers, and numbers with commas as thousand separators). Your function should identify these numbers and normalize them by converting them to a standard format: integers should remain as integers, and decimals should retain their precision but remove any comma separations. To accomplish this task, you must use the `re` library\'s `findall` and `sub` functions. The `findall` function will help you identify all number patterns in the text, and the `sub` function will enable you to replace the identified patterns with their normalized forms. Here is a step-by-step outline of the problem: 1. Use `re.compile` to create a regular expression pattern to find numbers in various formats (e.g., integers, decimal numbers, numbers with comma separators). 2. Use `re.sub` to replace these numbers with their normalized forms. The function signature should be: ```python def normalize_numbers(text: str) -> str: ``` # Example ```python text = \\"The event saw 2,000 participants, and it raised 1,234.56 for charity.\\" result = normalize_numbers(text) # result should be \\"The event saw 2000 participants, and it raised 1234.56 for charity.\\" ``` # Library Requirements - `re.findall` - `re.sub`","solution":"import re def normalize_numbers(text: str) -> str: Identifies numbers in various formats in the given text and normalizes them. Integers remain integers, and decimal numbers retain precision but remove comma separations. Parameters: text (str): The input text containing numbers in various formats. Returns: str: The text with normalized numbers. # Regular expression pattern to find numbers with optional thousand separators and decimal points number_pattern = re.compile(r\'bd{1,3}(?:,d{3})*(?:.d+)?|bd+.d+\') def normalize(match): # Remove commas from the matched number string return match.group(0).replace(\',\', \'\') # Substitute matches with their normalized forms normalized_text = re.sub(number_pattern, normalize, text) return normalized_text"},{"question":"You are tasked with developing a text processing application. Your goal is to create a function `replace_words_in_sentence` that replaces certain words in a given sentence with their corresponding replacements based on a provided dictionary. The function should maintain all punctuation and capitalization. Write the function `replace_words_in_sentence(sentence: str, replacements: dict) -> str`. This function should: 1. Split the sentence into words and punctuation marks. 2. Replace the words found in `replacements` dictionary keys with their corresponding values. 3. Maintain the original punctuation and capitalization. 4. Reconstruct the sentence with the replaced words and return it. # Example Usage ```python sentence = \\"Hello, world! The quick brown fox jumps over the lazy dog.\\" replacements = {\\"Hello\\": \\"Hi\\", \\"world\\": \\"Earth\\", \\"quick\\": \\"fast\\"} new_sentence = replace_words_in_sentence(sentence, replacements) print(new_sentence) ``` **Expected Output**: ``` Hi, Earth! The fast brown fox jumps over the lazy dog. ``` # Note - Ensure that the function correctly handles punctuation and preserves the original case of the sentence. - Only replace the words specified in the replacements dictionary; leave other words unchanged. - You may use the `re` (regular expression) library for word splitting if needed, but it\'s not mandatory.","solution":"import re def replace_words_in_sentence(sentence: str, replacements: dict) -> str: Replaces words in a sentence based on a provided dictionary and maintains punctuation and capitalization. Args: sentence (str): The sentence to process. replacements (dict): A dictionary of words to replace with their corresponding values. Returns: str: The sentence with the words replaced. def replace(match): word = match.group(0) return replacements.get(word, word) pattern = r\'bw+b\' # Matches words return re.sub(pattern, replace, sentence)"},{"question":"You are tasked with writing a function to simulate simple matrix operations. The goal is to gain familiarity with NumPy\'s array manipulation capabilities. Your task is to write a function named `matrix_operations()` which, given two matrices `A` and `B`, performs the following operations: 1. Element-wise addition of the two matrices. 2. Element-wise multiplication of the two matrices. 3. Matrix multiplication of the two matrices. The function should return a tuple containing the results of these operations: the first element being the result of the addition, the second element being the result of the element-wise multiplication, and the third element being the result of the matrix multiplication. # Function Signature ```python def matrix_operations(A, B): # Your implementation here ``` # Parameters - `A` (np.array): A 2D NumPy array representing the first matrix. - `B` (np.array): A 2D NumPy array representing the second matrix. It must have the same shape as `A` for the element-wise operations, and the same number of columns as the number of rows in `A` for the matrix multiplication. # Returns - A tuple `(C, D, E)`, where: - `C` (np.array): The result of the element-wise addition of `A` and `B`. - `D` (np.array): The result of the element-wise multiplication of `A` and `B`. - `E` (np.array): The result of the matrix multiplication of `A` and `B`. # Constraints - You can assume that the input matrices `A` and `B` are valid 2D NumPy arrays with compatible dimensions for the respective operations. - You must use NumPy functions to carry out the operations. # Example ```python >>> import numpy as np >>> A = np.array([[1, 2], [3, 4]]) >>> B = np.array([[5, 6], [7, 8]]) >>> matrix_operations(A, B) (array([[ 6, 8], [10, 12]]), array([[ 5, 12], [21, 32]]), array([[19, 22], [43, 50]])) ``` In this example: - The result of element-wise addition is `[[6, 8], [10, 12]]`. - The result of element-wise multiplication is `[[5, 12], [21, 32]]`. - The result of matrix multiplication is `[[19, 22], [43, 50]]`. # Specific Libraries You must use the following NumPy functionalities: - `numpy.add` - `numpy.multiply` - `numpy.matmul`","solution":"import numpy as np def matrix_operations(A, B): Perform matrix operations: element-wise addition, element-wise multiplication, and matrix multiplication on two matrices. :param A: np.array, 2D numpy array :param B: np.array, 2D numpy array :return: tuple of np.array, (element-wise addition, element-wise multiplication, matrix multiplication) # Element-wise addition C = np.add(A, B) # Element-wise multiplication D = np.multiply(A, B) # Matrix multiplication E = np.matmul(A, B) return (C, D, E)"},{"question":"You are required to write a function `analyze_string_contents()` that takes a single string containing a mix of uppercase letters, lowercase letters, digits, and special characters. The function should perform the following tasks: 1. Print the original string. 2. Create a dictionary that counts the occurrences of each character type: uppercase letters, lowercase letters, digits, and special characters. 3. Print the dictionary with the counts of each character type. 4. Create and print a new string where all the uppercase letters and lowercase letters are swapped (i.e., uppercase to lowercase and vice versa). 5. Find and print the most frequent character in the original string along with its count. If there are multiple characters with the same highest frequency, print any one of them. The function signature should be: ```python def analyze_string_contents(input_string: str): # Your code here ``` **Example output:** ``` Original string: aA1!BbCc@2 Character counts: {\'uppercase\': 3, \'lowercase\': 3, \'digits\': 2, \'special\': 2} Swapped case string: Aa1!bBcC@2 Most frequent character and its count: (\'a\', 1) ```","solution":"def analyze_string_contents(input_string: str): Analyzes a given string to count character types, swap cases, and find the most frequent character. Parameters: input_string (str): The string to analyze. Returns: None print(\\"Original string:\\") print(input_string) # Initialize the counts dictionary counts = { \'uppercase\': 0, \'lowercase\': 0, \'digits\': 0, \'special\': 0 } # Count occurrences of each character type for char in input_string: if char.isupper(): counts[\'uppercase\'] += 1 elif char.islower(): counts[\'lowercase\'] += 1 elif char.isdigit(): counts[\'digits\'] += 1 else: counts[\'special\'] += 1 print(\\"nCharacter counts:\\") print(counts) # Create the swapped case string swapped_case_string = input_string.swapcase() print(\\"nSwapped case string:\\") print(swapped_case_string) # Find the most frequent character and its count from collections import Counter char_count = Counter(input_string) most_frequent_char = char_count.most_common(1)[0] print(\\"nMost frequent character and its count:\\") print(most_frequent_char)"},{"question":"You are building a library management system, and one of the functionalities required is to keep track of the available copies of each book. Your task is to create a function that can update and return the current count of available copies of a book when a book is either borrowed or returned. **Function Name**: `update_available_copies` **Parameters**: - `current_copies` (int): The current number of available copies of the book. - `transaction` (str): The type of transaction, either `\'borrow\'` or `\'return\'`. **Returns**: - An integer representing the updated count of available copies. **Instructions**: 1. If the `transaction` value is `\'borrow\'`, decrement the `current_copies` by 1. 2. If the `transaction` value is `\'return\'`, increment the `current_copies` by 1. 3. Ensure that the number of available copies does not go below 0. 4. Return the updated count of available copies after performing the transaction.","solution":"def update_available_copies(current_copies, transaction): Updates and returns the current count of available copies of a book. Parameters: - current_copies (int): The current number of available copies of the book. - transaction (str): The type of transaction, either \'borrow\' or \'return\'. Returns: - int: The updated count of available copies of the book. if transaction == \'borrow\': if current_copies > 0: current_copies -= 1 elif transaction == \'return\': current_copies += 1 return current_copies"},{"question":"You are managing a warehouse inventory system where you need to optimize the product storage. Each product is characterized by its name, category, and quantity. Your task is to write a function `optimize_inventory` that takes a list of product dictionaries and returns a new list where the products are grouped by category in ascending order of category names and, within each category, products are sorted by their quantity in descending order. [Data Structure] - `products` (list): A list of dictionaries, each containing the following keys: - `name` (str): The name of the product. - `category` (str): The category to which the product belongs. - `quantity` (int): The quantity of the product available. [Output] - The function should return a sorted list of products as described above. **Function Details:** - **Function Name:** `optimize_inventory` - **Parameters:** - `products`: A list of dictionaries, each representing a product with `name`, `category`, and `quantity` keys. **Requirements:** - Group products by `category` in ascending order. - Within each category, sort products by `quantity` in descending order. ```python def optimize_inventory(products): Groups and sorts the warehouse products by category and quantity. Parameters: products (list): List of dictionaries where each dictionary contains: - name (str): The name of the product. - category (str): The category of the product. - quantity (int): The quantity of the product. Returns: list: A sorted list of products grouped by category with quantities in descending order. pass ```","solution":"def optimize_inventory(products): Groups and sorts the warehouse products by category and quantity. Parameters: products (list): List of dictionaries where each dictionary contains: - name (str): The name of the product. - category (str): The category of the product. - quantity (int): The quantity of the product. Returns: list: A sorted list of products grouped by category with quantities in descending order. # Sort products by category ascending and then by quantity descending sorted_products = sorted(products, key=lambda x: (x[\'category\'], -x[\'quantity\'])) return sorted_products"},{"question":"You are given a Python function `find_median_sorted_arrays` that is supposed to find the median of two sorted arrays. However, the function is currently incomplete, and you need to implement the missing parts. Here is the incomplete code: ```python def find_median_sorted_arrays(nums1, nums2): # Combine the two arrays nums = nums1 + nums2 # Sort the combined array nums.sort() # TO DO: Calculate the median if len(nums) % 2 == 1: # If the length of the array is odd, return the middle element median = nums[len(nums) // 2] else: # If the length of the array is even, return the average of the two middle elements mid1 = len(nums) // 2 mid2 = mid1 - 1 median = (nums[mid1] + nums[mid2]) / 2 return median ``` # Task: 1. Complete the function `find_median_sorted_arrays(nums1, nums2)` to correctly calculate the median of the combined sorted array. # Requirements: - The input arrays `nums1` and `nums2` are sorted, but they can have different lengths. - The function should handle edge cases, such as when either of the input arrays is empty. - Do not use any built-in functions for finding the median other than basic arithmetic operations and list indexing. - The time complexity of your solution should be O(log(min(n, m))), where `n` is the length of `nums1` and `m` is the length of `nums2`. # Example of usage: Example 1: ```python nums1 = [1, 3] nums2 = [2] print(find_median_sorted_arrays(nums1, nums2)) # Output should be 2.0 ``` Example 2: ```python nums1 = [1, 2] nums2 = [3, 4] print(find_median_sorted_arrays(nums1, nums2)) # Output should be 2.5 ``` # Hint: Consider using a binary search approach to achieve the required time complexity. Divide and conquer to find the correct partition in the combined array. Match the condition such that elements on the left side of the partition are less than or equal to elements on the right side.","solution":"def find_median_sorted_arrays(nums1, nums2): def get_partition_indices(nums1, nums2, n, m): low, high = 0, n while low <= high: partition1 = (low + high) // 2 partition2 = (n + m + 1) // 2 - partition1 maxLeft1 = float(\'-inf\') if partition1 == 0 else nums1[partition1 - 1] minRight1 = float(\'inf\') if partition1 == n else nums1[partition1] maxLeft2 = float(\'-inf\') if partition2 == 0 else nums2[partition2 - 1] minRight2 = float(\'inf\') if partition2 == m else nums2[partition2] if maxLeft1 <= minRight2 and maxLeft2 <= minRight1: if (n + m) % 2 == 0: return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2 else: return max(maxLeft1, maxLeft2) elif maxLeft1 > minRight2: high = partition1 - 1 else: low = partition1 + 1 if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 n, m = len(nums1), len(nums2) return get_partition_indices(nums1, nums2, n, m)"},{"question":"Design a function `rollDiceAndSum(n)` that simulates rolling a 6-sided dice `n` times and returns the sum of the outcomes. The function should print each roll result in the format \'Roll #<roll_number>: <outcome>\', where <roll_number> is the current roll number and <outcome> is the result of the dice roll. Use Python\'s `random.randint` function to generate the outcomes of the dice rolls. The function should also check if `n` is a positive integer; if not, it should raise a `ValueError` with the message \\"Number of rolls must be a positive integer\\". # Function Signature ```python def rollDiceAndSum(n: int) -> int: ``` # Example Usage ```python result = rollDiceAndSum(5) ``` # Example Output ``` Roll #1: 4 Roll #2: 2 Roll #3: 6 Roll #4: 3 Roll #5: 1 ``` (Note: The actual roll outcomes will be different as they are randomly generated.) The function should return the sum of the roll outcomes. In the example above, the return value would be 16 (4+2+6+3+1).","solution":"import random def rollDiceAndSum(n: int) -> int: Simulates rolling a 6-sided dice n times and returns the sum of the outcomes. Prints each roll result in the format \'Roll #<roll_number>: <outcome>\'. Raises a ValueError if n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Number of rolls must be a positive integer\\") total_sum = 0 for roll_number in range(1, n+1): outcome = random.randint(1, 6) print(f\\"Roll #{roll_number}: {outcome}\\") total_sum += outcome return total_sum"},{"question":"You are asked to write a Python function named `interpolate_with_spline` that takes three arguments: 1. `x`: A NumPy array of `float` values representing the x-coordinates of the data points. 2. `y`: A NumPy array of `float` values representing the y-coordinates of the data points. 3. `degree`: An integer that represents the degree of the spline interpolation. The `interpolate_with_spline` function should interpolate the provided data points using a B-spline of the specified degree and then plot the original data points along with the interpolated curve. Use the `scipy.interpolate` and `matplotlib` libraries to perform the interpolation and generate the plots. The function should: - Plot the original data points as blue circles. - Plot the interpolated spline curve in red. - Add a legend to distinguish between the original data points and the spline interpolation. - Display the plot with appropriate labels and title. To achieve this, make use of the following Python libraries: - `scipy.interpolate.BSpline`: To perform the B-spline interpolation. - `matplotlib.pyplot`: To create and display the plots. - `numpy`: To manage array operations. Here is the template you need to complete: ```python def interpolate_with_spline(x, y, degree): Interpolates the given data points using a B-spline of the given degree and plots the result. Args: x (np.ndarray): 1D array of x-coordinates of the data points. y (np.ndarray): 1D array of y-coordinates of the data points. degree (int): Degree of the B-spline to use for interpolation. Returns: None import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import make_interp_spline # Generate a spline of the given degree that fits the data points spline = make_interp_spline(x, y, k=degree) # Define a fine grid of x-values for plotting the spline x_fine = np.linspace(min(x), max(x), 500) # Evaluate the spline on the fine grid y_fine = spline(x_fine) # Create the plot plt.figure(figsize=(10, 6)) # Plot original data points plt.plot(x, y, \'bo\', label=\'Data points\') # Plot the spline interpolation plt.plot(x_fine, y_fine, \'r-\', label=f\'Spline of degree {degree}\') # Add labels and title plt.xlabel(\'x\') plt.ylabel(\'y\') plt.title(\'B-Spline Interpolation\') # Add legend plt.legend() # Show the plot plt.show() ``` # Example ```python import numpy as np # Define the data points x = np.array([0, 1, 2, 3, 4, 5]) y = np.array([0, 0.5, 2, 1.5, 3.5, 3]) # Interpolate with a cubic spline degree = 3 interpolate_with_spline(x, y, degree) ``` This example should create a plot of the original data points as blue circles and the interpolated cubic spline curve in red.","solution":"def interpolate_with_spline(x, y, degree): Interpolates the given data points using a B-spline of the given degree and plots the result. Args: x (np.ndarray): 1D array of x-coordinates of the data points. y (np.ndarray): 1D array of y-coordinates of the data points. degree (int): Degree of the B-spline to use for interpolation. Returns: None import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import make_interp_spline # Generate a spline of the given degree that fits the data points spline = make_interp_spline(x, y, k=degree) # Define a fine grid of x-values for plotting the spline x_fine = np.linspace(min(x), max(x), 500) # Evaluate the spline on the fine grid y_fine = spline(x_fine) # Create the plot plt.figure(figsize=(10, 6)) # Plot original data points plt.plot(x, y, \'bo\', label=\'Data points\') # Plot the spline interpolation plt.plot(x_fine, y_fine, \'r-\', label=f\'Spline of degree {degree}\') # Add labels and title plt.xlabel(\'x\') plt.ylabel(\'y\') plt.title(\'B-Spline Interpolation\') # Add legend plt.legend() # Show the plot plt.show()"},{"question":"In this problem, we will implement a function to determine the number of islands in a given 2D grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. A grid cell can contain one of two values: - `1` representing land - `0` representing water You are tasked with writing a function `num_islands(grid)` that returns the number of islands. The function signature is as follows: ```python def num_islands(grid): ... ``` # Function Details: 1. **Parameters**: - `grid (List[List[int]])`: A 2D list of integers representing the grid. 2. **Output**: - The function should return an integer indicating the number of islands. # Example: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] num_islands(grid) ``` Expected output: ``` 3 ``` In this example, there are 3 distinct islands in the grid. # Requirements: - Implement the function `num_islands` using Depth-First Search (DFS) or Breadth-First Search (BFS). - Ensure the function correctly traverses and marks visited cells to avoid counting them multiple times. # Hint: Consider the grid a graph where each cell is a node and there is an edge between nodes if they are horizontally or vertically adjacent. Traversing the grid in such a way allows you to find connected components (islands).","solution":"def num_islands(grid): def dfs(grid, r, c): stack = [(r, c)] while stack: r, c = stack.pop() if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c] == 1: grid[r][c] = \'#\' stack.append((r - 1, c)) stack.append((r + 1, c)) stack.append((r, c - 1)) stack.append((r, c + 1)) if not grid: return 0 count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == 1: count += 1 dfs(grid, r, c) return count"},{"question":"You are given a task to determine if a given string, which contains only characters `\'0\'` and `\'1\'`, can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. For example: - The string `\\"0011\\"` can be rearranged to form the palindrome `\\"0110\\"`. - The string `\\"0001\\"` cannot be rearranged to form a palindrome. # Function Specification - **Function Name**: `can_form_palindrome` - **Arguments**: - `s` (str): A string containing only characters `\'0\'` and `\'1\'`. - **Returns**: - `bool`: `True` if the characters in the string can be rearranged to form a palindrome, `False` otherwise. # Example Given an input string: ```python s = \\"0011\\" ``` Calling `can_form_palindrome(s)` should return: ```python True ``` Given another input string: ```python s = \\"0001\\" ``` Calling `can_form_palindrome(s)` should return: ```python False ``` # Requirements - The solution should efficiently determine if a palindrome can be formed. - Consider using a dictionary or collections.Counter for counting the frequency of each character. # Hint A string can be rearranged to form a palindrome if at most one character has an odd frequency count.","solution":"def can_form_palindrome(s): Determines if the characters in the string can be rearranged to form a palindrome. Parameters: s (str): A string containing only characters \'0\' and \'1\'. Returns: bool: True if the characters can be rearranged to form a palindrome, False otherwise. from collections import Counter # count the frequency of each character count = Counter(s) # count the number of characters with an odd frequency odd_count = sum(1 for freq in count.values() if freq % 2 == 1) # a string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"You are tasked with writing a function named `filter_and_sort_students` that filters and sorts a list of student dictionaries. Each dictionary in the list contains the student\'s `name`, `grade`, and `age`. Your function should meet the following requirements: 1. Only include students with a grade greater than or equal to 75. 2. Sort the filtered students first by their grade in descending order and then by their name in ascending order if grades are equal. 3. Return the sorted list of student dictionaries. Here\'s the signature of the function you need to implement: ```python def filter_and_sort_students(students): :param students: List[Dict[str, Union[str, int]]] - List of student dictionaries with keys \'name\' (str), \'grade\' (int), and \'age\' (int). :return: List[Dict[str, Union[str, int]]] - Sorted and filtered list of student dictionaries. pass ``` # Example Input: ```python students = [ {\'name\': \'Alice\', \'grade\': 82, \'age\': 20}, {\'name\': \'Bob\', \'grade\': 73, \'age\': 22}, {\'name\': \'Carol\', \'grade\': 85, \'age\': 21}, {\'name\': \'Dave\', \'grade\': 90, \'age\': 23}, {\'name\': \'Eva\', \'grade\': 82, \'age\': 21} ] ``` Output: ```python [ {\'name\': \'Dave\', \'grade\': 90, \'age\': 23}, {\'name\': \'Carol\', \'grade\': 85, \'age\': 21}, {\'name\': \'Alice\', \'grade\': 82, \'age\': 20}, {\'name\': \'Eva\', \'grade\': 82, \'age\': 21} ] ```","solution":"def filter_and_sort_students(students): Filters students with grades >= 75 and sorts them by grade in descending order and by name in ascending order if grades are equal. :param students: List[Dict[str, Union[str, int]]] - List of student dictionaries with keys \'name\' (str), \'grade\' (int), and \'age\' (int). :return: List[Dict[str, Union[str, int]]] - Sorted and filtered list of student dictionaries. # Filter students with grades >= 75 filtered_students = [student for student in students if student[\'grade\'] >= 75] # Sort students first by grade in descending order and then by name in ascending order sorted_students = sorted(filtered_students, key=lambda x: (-x[\'grade\'], x[\'name\'])) return sorted_students"},{"question":"# Problem: Most Frequent Even Number You are required to create a function named `most_frequent_even` that finds the most frequent even number in a given list of integers. If there are multiple even numbers with the same highest frequency, return the smallest one. If there are no even numbers in the list, return `-1`. # Function Signature ```python def most_frequent_even(nums: List[int]) -> int: ``` # Parameters - `nums` (List[int]): A list of integers. # Returns - `int`: The most frequent even number. If there is a tie, the smallest even number among those with the highest frequency. If there are no even numbers, return `-1`. # Example ```python nums = [1, 3, 2, 2, 4, 4, 4, 6, 8] print(most_frequent_even(nums)) # Expected output: 4 nums = [1, 3, 5, 7] print(most_frequent_even(nums)) # Expected output: -1 nums = [1, 2, 4, 6, 4, 2] print(most_frequent_even(nums)) # Expected output: 2 ``` **Constraints**: - The list `nums` may contain up to 100,000 elements. - Each element in `nums` can be any integer within the range of -10^6 to 10^6.","solution":"from collections import Counter from typing import List def most_frequent_even(nums: List[int]) -> int: even_numbers = [num for num in nums if num % 2 == 0] if not even_numbers: return -1 freq_counter = Counter(even_numbers) most_frequent = -1 highest_freq = 0 for num in freq_counter: if freq_counter[num] > highest_freq or (freq_counter[num] == highest_freq and num < most_frequent): most_frequent = num highest_freq = freq_counter[num] return most_frequent"},{"question":"Implement a function `longest_valid_parentheses(s: str) -> int` that takes a string consisting of only the characters \'(\' and \')\' and returns the length of the longest valid (well-formed) parentheses substring. A well-formed parentheses substring is defined in the following way: 1. An empty string is valid. 2. If `A` is a valid string, then `(A)` is also a valid string. 3. If `A` and `B` are valid strings, then `AB` is also valid. For example, the input string `s = \\"(()(\\"` has two well-formed substrings: `\\"()\\"` and the nested `\\"()\\"` within `\\"(()(\\"`, and the maximum length is 2. Another example, `s = \\")()())\\"` should return 4, as the longest well-formed parentheses substring is `()()`. The function should efficiently handle large input strings by making a single pass through the string to determine the longest valid parentheses substring. Consider using a stack data structure or two-pointer technique to achieve this. Provide the implementation of the function `longest_valid_parentheses` based on the given specifications.","solution":"def longest_valid_parentheses(s: str) -> int: Finds the length of the longest valid (well-formed) parentheses substring. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_len = max(max_len, i - stack[-1]) return max_len"},{"question":"In this problem, you are required to write a Python function `find_longest_substring(s: str) -> str` that finds and returns the longest substring of a given string `s` that does not contain any repeating characters. If there are multiple substrings of the same maximum length, return the one that appears first. To solve this problem, you should use the sliding window technique. The function should follow these steps: 1. **Initialize Pointers and a Set**: Use two pointers to represent the current window and a set to store characters within the window. 2. **Expand and Contract Window**: Expand the window by moving the end pointer to the right. If you encounter a repeating character, contract the window by moving the start pointer to the right until the repeating character is removed from the window. 3. **Update Result**: Keep track of the longest substring encountered so far and update the result whenever a longer substring is found. # Function Signature ```python def find_longest_substring(s: str) -> str: pass ``` # Input - `s`: A string containing alphanumeric characters and possibly other printable characters. # Output - Returns the longest substring without repeating characters. # Example ```python s = \\"abcabcbb\\" assert find_longest_substring(s) == \\"abc\\" s = \\"bbbbb\\" assert find_longest_substring(s) == \\"b\\" s = \\"pwwkew\\" assert find_longest_substring(s) == \\"wke\\" s = \\"dvdf\\" assert find_longest_substring(s) == \\"vdf\\" ``` # Constraints - Handle edge cases such as an empty string or a string with all identical characters. - The input string will have a length between 0 and 10^4. # Notes - You must use a sliding window technique for the solution. - Optimize for both time and space complexity.","solution":"def find_longest_substring(s: str) -> str: Finds the longest substring without repeating characters. start, end, max_length, max_start = 0, 0, 0, 0 characters = set() while end < len(s): if s[end] not in characters: characters.add(s[end]) end += 1 if end - start > max_length: max_length = end - start max_start = start else: characters.remove(s[start]) start += 1 return s[max_start:max_start + max_length]"},{"question":"You are given a list of `n` integers representing the availability status of `n` servers in a datacenter, where each integer is either `0` (server is down) or `1` (server is up). Your task is to implement the function `max_consecutive_running_servers(data)`, which should return the maximum number of consecutive `1`s in the list, representing the longest streak of running servers. Here are some challenges to consider: 1. You need to handle the situation where there are no running servers (all elements are `0`). 2. The function should be efficient even for large input sizes. **Function Signature:** ```python def max_consecutive_running_servers(data): pass ``` **Example:** ```python data = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1] print(max_consecutive_running_servers(data)) ``` Expected Output: ``` 4 ``` #","solution":"def max_consecutive_running_servers(data): Returns the maximum number of consecutive 1s in the list. max_count = 0 current_count = 0 for status in data: if status == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"In this task, you\'ll be implementing a data normalization function using the NumPy library. The goal is to standardize a given array such that its elements have a mean of 0 and a standard deviation of 1. The function should be named `normalize_array`, and it should accept a single parameter: 1. `input_array`: A NumPy array of any shape. The function should return a new NumPy array where: - Every element in the input array has been adjusted to have a mean of 0. - The standard deviation of the adjusted elements is 1. Here’s how your function should handle the computation: - Subtract the mean of the original array from each element. - Divide the result by the standard deviation of the original array. You can assume that the input array will have a non-zero standard deviation. Do not use any other libraries apart from NumPy. Ensure to use the following NumPy library components: - `numpy.mean` - `numpy.std` - Array arithmetic operations. Here is an example of how your function will be used: ```python import numpy as np # Example usage: input_array = np.array([1, 2, 3, 4, 5]) normalized_array = normalize_array(input_array) print(normalized_array) ``` Consider the following when writing your function: - The output array should have the same shape as the input array. - The operation must be scalable for arrays of any shape and size.","solution":"import numpy as np def normalize_array(input_array): Normalize the input numpy array to have mean of 0 and standard deviation of 1. Parameters: - input_array: A NumPy array of any shape. Returns: - A normalized NumPy array with the same shape as input_array. mean = np.mean(input_array) std_dev = np.std(input_array) normalized_array = (input_array - mean) / std_dev return normalized_array"},{"question":"You are developing a scheduling application for a ride-sharing service. The goal is to match drivers with passengers efficiently. Each driver has a certain distance they can travel to pick up a passenger, and each passenger has a specified location. Write a function named `match_drivers_passengers` that takes three parameters: - `drivers`: A list of tuples where each tuple contains two integers. The first integer is the driver\'s location, and the second integer is the maximum distance the driver is willing to travel to pick up a passenger. - `passengers`: A list of integers where each integer represents the location of a passenger. - `driver_count`: An integer representing the maximum number of drivers to be assigned to passengers. Your function should: 1. Attempt to match each passenger with the closest available driver who can pick them up, without exceeding the driver\'s maximum travel distance. 2. Ensure that no driver is matched with more passengers than their specified maximum travel distance allows. 3. Return a dictionary where the keys are the drivers\' locations and the values are lists of passengers\' locations that the driver will pick up. If multiple drivers can pick up the same passenger, the function should choose the driver who is closest to the passenger. If a passenger cannot be matched with any driver, they should be ignored. **Example Usage:** ```python drivers = [(10, 5), (20, 10), (30, 3)] passengers = [15, 25, 10, 30, 12] driver_count = 2 matches = match_drivers_passengers(drivers, passengers, driver_count) print(matches) ``` **Expected Output:** ```python { 10: [10, 12, 15], # Driver at location 10 can pick up passengers at 10, 12, 15 within max distance 5 20: [25, 30] # Driver at location 20 can pick up passengers at 25, 30 within max distance 10 } ``` Note: - The `driver_count` limits the total number of drivers that can be utilized, but not the number of passengers. - A passenger can only be matched to one driver. If no match is possible within the given constraints, they should not appear in the output dictionary.","solution":"def match_drivers_passengers(drivers, passengers, driver_count): result = {} matched_drivers = 0 # Sort drivers and passengers by their location drivers_sorted = sorted(drivers, key=lambda x: x[0]) passengers_sorted = sorted(passengers) # Dictionary to keep track of each passenger\'s match status passenger_matched = {passenger: False for passenger in passengers_sorted} for driver_location, max_distance in drivers_sorted: if matched_drivers >= driver_count: break matched_passengers = [] for passenger in passengers_sorted: if passenger_matched[passenger]: continue if abs(driver_location - passenger) <= max_distance: matched_passengers.append(passenger) passenger_matched[passenger] = True if matched_passengers: result[driver_location] = matched_passengers matched_drivers += 1 return result"},{"question":"You are required to develop a function that analyzes a directory of text files containing student grades. Each text file represents a different course and contains the student ID and their respective grade in the course. Your function needs to parse these files, process the grades for each student, and compute an average grade across all courses for each student. Write a function `calculate_average_grades(directory_path)` where: - `directory_path` is the path to the directory containing text files with grades information. Each text file in the directory follows this format: ``` student_id,grade 1001,A 1002,B+ 1003,C ... ``` The grades should be converted to the following numerical values for average calculation: - A = 4.0 - A- = 3.7 - B+ = 3.3 - B = 3.0 - B- = 2.7 - C+ = 2.3 - C = 2.0 - C- = 1.7 - D+ = 1.3 - D = 1.0 - F = 0.0 The function should: 1. Read all text files in the specified directory. 2. Parse each file to extract student IDs and their respective grades. 3. Calculate the average grade across all courses for each student. 4. Return a dictionary where the keys are student IDs and the values are their respective average grades. Assume that each student ID is unique across all courses, and every text file has the same format. The function should handle any reasonable number of text files and students gracefully.","solution":"import os def grade_to_points(grade): Convert a letter grade to its grade point equivalent. grade_points = { \'A\': 4.0, \'A-\': 3.7, \'B+\': 3.3, \'B\': 3.0, \'B-\': 2.7, \'C+\': 2.3, \'C\': 2.0, \'C-\': 1.7, \'D+\': 1.3, \'D\': 1.0, \'F\': 0.0 } return grade_points.get(grade, 0.0) def calculate_average_grades(directory_path): Calculate and return the average grades for each student across all courses. student_grades = {} for filename in os.listdir(directory_path): if filename.endswith(\'.txt\'): with open(os.path.join(directory_path, filename), \'r\') as file: for line in file: student_id, grade = line.strip().split(\',\') grade_point = grade_to_points(grade) if student_id in student_grades: student_grades[student_id].append(grade_point) else: student_grades[student_id] = [grade_point] average_grades = {} for student_id, grades in student_grades.items(): average_grades[student_id] = sum(grades) / len(grades) return average_grades"},{"question":"Suppose you are working on a software system that handles user login sessions. To ensure the security and efficiency of your system, you need to implement a mechanism to manage the active user sessions. Each user session is associated with a unique session ID generated using a specific algorithm. Your task is to write a function to generate unique session IDs and another function to validate if a session ID has been generated by your system. The session ID should meet the following criteria: 1. It should be a string containing exactly 10 characters. 2. Each character should be a digit (0-9) or an uppercase English letter (A-Z). 3. The first character should always be a letter. 4. The remaining characters can be either digits or letters. Implement the following functions: # `generate_session_id()` This function generates a new unique session ID that meets the above criteria. # `is_valid_session_id(session_id)` This function checks if a given session ID is valid as per the defined rules. **Function Signatures:** ```python def generate_session_id(): # Your implementation here def is_valid_session_id(session_id): # Your implementation here ``` **Parameters:** - `session_id` (str): A string representing the session ID to be validated. **Returns:** - `generate_session_id` -> (str): Returns a newly generated unique session ID. - `is_valid_session_id` -> (bool): Returns `True` if `session_id` is valid, `False` otherwise. **Instructions:** - To generate a session ID, use Python\'s `random` library. - Ensure the session ID is a string of 10 characters where the first character is an uppercase letter and the other characters can be either digits or uppercase letters. - To check the validity of a session ID, ensure it meets all the mentioned criteria. **Example Usage:** ```python >>> session_id = generate_session_id() >>> print(session_id) # e.g., \'A1B2C3D4E5\' >>> print(is_valid_session_id(session_id)) # Output: True >>> print(is_valid_session_id(\'1234567890\')) # Output: False >>> print(is_valid_session_id(\'A123456789\')) # Output: True >>> print(is_valid_session_id(\'a123456789\')) # Output: False (first character should be uppercase) ```","solution":"import random import string def generate_session_id(): Generates a new unique session ID that meets the specified criteria. first_char = random.choice(string.ascii_uppercase) other_chars = \'\'.join(random.choices(string.ascii_uppercase + string.digits, k=9)) return first_char + other_chars def is_valid_session_id(session_id): Checks if a given session ID is valid as per the defined rules. if len(session_id) != 10: return False if not session_id[0].isalpha() or not session_id[0].isupper(): return False for char in session_id[1:]: if not (char.isdigit() or char.isupper()): return False return True"},{"question":"You are tasked with creating a Python function `fetch_user_data(user_id, api_root)` that will retrieve user data from a remote API endpoint. The function should return the user data in a parsed JSON format if retrieved successfully, or `None` if an error occurs during the process. The function must: 1. Use the `requests` library for making HTTP GET requests to the specified URL. 2. Construct the URL by concatenating `api_root` with the endpoint `\'/users/\'` followed by the `user_id`. 3. Send the appropriate headers with the request, including `Content-Type` as `application/json`. 4. Parse the response to JSON format. 5. Check if the key `\'data\'` is present in the JSON response. 6. If present, return the value corresponding to the `\'data\'` key. 7. If any errors occur or the key `\'data\'` is not present in the response, print `\'Failed to fetch user data\'` and return `None`. **Function signature:** ```python def fetch_user_data(user_id: str, api_root: str) -> dict: ``` **Constraints:** - You must use the `requests.get` function from the `requests` library for the GET request. - You should handle all exceptions and errors gracefully by printing the specified message and returning `None`.","solution":"import requests def fetch_user_data(user_id: str, api_root: str) -> dict: Retrieves user data from a remote API endpoint. Args: user_id (str): The ID of the user to fetch data for. api_root (str): The root URL of the API. Returns: dict: The user data if successful, otherwise None. url = f\\"{api_root}/users/{user_id}\\" headers = {\'Content-Type\': \'application/json\'} try: response = requests.get(url, headers=headers) response.raise_for_status() json_response = response.json() if \'data\' in json_response: return json_response[\'data\'] print(\'Failed to fetch user data\') return None except (requests.exceptions.HTTPError, requests.exceptions.ConnectionError, requests.exceptions.Timeout, requests.exceptions.RequestException, ValueError) as e: print(\'Failed to fetch user data\') return None"},{"question":"You are asked to implement a function that analyzes disk usage on your system using the `shutil` library. The goal is to write a function named `disk_usage_percentage` that returns the percentage of disk space currently being used on the system. To accomplish this, you will specifically use the function `shutil.disk_usage()` from the `shutil` library, which provides statistics about the disk usage of a given path. The `shutil` library is a Python library for high-level file operations, and `shutil.disk_usage()` can give you the total, used, and free space on the disk. # Function Requirement - **Function Name**: `disk_usage_percentage` - **Input**: None - **Output**: Returns a float representing the percentage of disk space currently being used on the system. - **Library to Use**: `shutil` # Example ```python # Example usage: usage_percentage = disk_usage_percentage() print(usage_percentage) # Output could be something like: 45.3 ``` # Additional Notes - Ensure you have the `shutil` library available, which is part of the Python Standard Library and does not require separate installation. - You can assume that you are analyzing the root directory `\'/\'` for Unix-like systems or `\'C:\'` for Windows systems. - The function should calculate the percentage as `(used space / total space) * 100` and return it. # Implementation Hint Use `shutil.disk_usage(\'/\')` or `shutil.disk_usage(\'C:\')` to get the disk usage statistics, which returns a tuple with the `total`, `used`, and `free` space in bytes. Use this information to calculate the percentage of used space.","solution":"import shutil import platform def disk_usage_percentage(): Returns the percentage of disk space currently being used on the system. path = \'/\' if platform.system() != \'Windows\' else \'C:\' total, used, free = shutil.disk_usage(path) usage_percentage = (used / total) * 100 return usage_percentage"},{"question":"You are tasked with creating a simple function to manipulate a list of integers. The function should identify the longest contiguous subarray that contains an equal number of even and odd integers. Given an array of integers (both positive and negative), the function should return the starting and ending indices (0-based) of the longest contiguous subarray with an equal number of even and odd integers. If there are multiple such subarrays with the same maximum length, return the subarray that appears first. If no such subarray exists, return [-1, -1]. **Function Requirements:** 1. The function should be named `find_longest_even_odd_subarray`. 2. The function should accept one argument `nums`, which is a list of integers. 3. The function should return a list of two integers, representing the starting and ending indices of the longest contiguous subarray. # Example ```python def find_longest_even_odd_subarray(nums): # Your code here print(find_longest_even_odd_subarray([1, 2, 3, 4, 5, 6])) # Output: [0, 5] print(find_longest_even_odd_subarray([1, 2, 3, 5, 6, 7, 2])) # Output: [1, 6] print(find_longest_even_odd_subarray([1, 1, 1, 1, 1, 1])) # Output: [-1, -1] ``` # Explanation In the first example, the entire array `[1, 2, 3, 4, 5, 6]` is the longest contiguous subarray with equal numbers of even and odd integers. In the second example, the subarray `[2, 3, 5, 6, 7, 2]` is the longest contiguous subarray with equal numbers of even and odd integers. In the third example, no subarray exists with an equal number of even and odd integers, so the function returns `[-1, -1]`.","solution":"def find_longest_even_odd_subarray(nums): max_len = 0 start_index = -1 end_index = -1 prefix_sums = {0: -1} current_sum = 0 for i, num in enumerate(nums): if num % 2 == 0: current_sum += 1 else: current_sum -= 1 if current_sum in prefix_sums: length = i - prefix_sums[current_sum] if length > max_len: max_len = length start_index = prefix_sums[current_sum] + 1 end_index = i else: prefix_sums[current_sum] = i return [start_index, end_index] if max_len > 0 else [-1, -1]"},{"question":"Develop a function named `merge_sorted_arrays` that accepts two sorted lists and merges them into a single sorted list. The final merged list should be sorted in non-decreasing order. Avoid using any built-in Python sort functions; instead, perform the merge operation in a manner similar to the merge step of the \'merge sort\' algorithm. You must adhere to the following function signature: ```python def merge_sorted_arrays(arr1: list, arr2: list) -> list: pass ``` # Example: Given: ```python arr1 = [1, 3, 5] arr2 = [2, 4, 6] ``` Output: ```python [1, 2, 3, 4, 5, 6] ``` Given: ```python arr1 = [0, 10, 20] arr2 = [15, 25] ``` Output: ```python [0, 10, 15, 20, 25] ```","solution":"def merge_sorted_arrays(arr1: list, arr2: list) -> list: Merges two sorted lists into one sorted list. :param arr1: A sorted list of elements. :param arr2: Another sorted list of elements. :return: A merged sorted list containing all elements from arr1 and arr2. merged_array = [] i, j = 0, 0 # Iterate through both arrays while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function that reads a CSV file provided as a string into a pandas DataFrame, normalizes the numerical columns using Min-Max scaling, and then saves the normalized DataFrame to a new CSV file. The function should output: str: The name of the newly created CSV file. You should write self-contained code starting with: ``` import pandas as pd from sklearn.preprocessing import MinMaxScaler def normalize_csv(input_csv_str, output_csv_file): ```","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler def normalize_csv(input_csv_str, output_csv_file): Reads a CSV file from a string, normalizes its numerical columns using Min-Max scaling, and saves the normalized DataFrame to a new CSV file. Parameters: input_csv_str (str): The CSV data as a string. output_csv_file (str): The name of the output CSV file where the normalized data will be saved. Returns: str: The name of the output CSV file. # Read the CSV data from the provided string from io import StringIO data = pd.read_csv(StringIO(input_csv_str)) # Apply Min-Max scaling to the numerical columns scaler = MinMaxScaler() numerical_cols = data.select_dtypes(include=[\'number\']).columns data[numerical_cols] = scaler.fit_transform(data[numerical_cols]) # Save the normalized DataFrame to a new CSV file data.to_csv(output_csv_file, index=False) return output_csv_file"},{"question":"You are required to create a function that detects prime numbers within a given range and returns these primes in a specific format. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. The function will return the primes that lie strictly between two given integers (exclusive). Your task is to write a Python function named `find_primes` which takes two integers `start` and `end` and returns a list of prime numbers that are between `start` and `end`. The prime numbers should be listed in ascending order. The function signature is as follows: ```python def find_primes(start: int, end: int) -> list: # Your implementation goes here ``` # Constraints: - The `start` and `end` values will always be greater than or equal to 0. - The maximum value for `end` won\'t exceed 10,000. - The function should handle cases where no primes are found by returning an empty list. # Example: ```python print(find_primes(10, 30)) # Output: [11, 13, 17, 19, 23, 29] print(find_primes(20, 22)) # Output: [] print(find_primes(1, 10)) # Output: [2, 3, 5, 7] print(find_primes(5, 5)) # Output: [] ``` # Note: - Ensure the function is efficient and handles the upper constraint effectively. - Consider edge cases such as when `start` and `end` are the same or when `start` is greater than `end`.","solution":"def find_primes(start: int, end: int) -> list: Returns a list of prime numbers that are strictly between \'start\' and \'end\'. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [] for num in range(start + 1, end): if is_prime(num): primes.append(num) return primes"},{"question":"Write a function to calculate the sum of the diagonal elements in a square matrix. The function should raise an error if the input is not a square matrix. The function should output: int: The sum of the diagonal elements. You should write self-contained code starting with: ``` def diagonal_sum(matrix: list[list[int]]) -> int: ```","solution":"def diagonal_sum(matrix: list[list[int]]) -> int: Returns the sum of the diagonal elements in a square matrix. Raises an error if the input is not a square matrix. if not matrix or any(len(row) != len(matrix) for row in matrix): raise ValueError(\\"Input matrix must be square.\\") n = len(matrix) total_sum = sum(matrix[i][i] for i in range(n)) return total_sum"},{"question":"You are tasked with designing a function `calculate_delivery_time` which determines the total delivery time based on the distance between two points and several influencing factors. The function must account for random traffic delays using the `random` library. Here is the specific functionality you need to implement: - **Function Name**: `calculate_delivery_time` - **Parameters**: 1. `distance` (float): The distance between the pickup and delivery location in kilometers. 2. `speed` (float): The average speed of the delivery vehicle in kilometers per hour. 3. `stops` (integer): The number of stops the delivery vehicle has to make. 4. `load_time` (float): The time in minutes that it takes to load/unload at each stop. - **Return**: The function should return the total delivery time in hours as a float, which includes the travel time, the stopping time, and a random traffic delay. The total delivery time is calculated using the following steps: 1. Calculate the travel time: `travel_time = distance / speed` 2. Calculate the total stopping time in hours: `stopping_time = (stops * load_time) / 60` 3. Generate a random traffic delay using `random.uniform(0.0, 1.0)`, which simulates hours of delay. The final formula to determine the total delivery time is: ```python total_delivery_time = travel_time + stopping_time + random.uniform(0.0, 1.0) ``` **Constraints:** - 0.1 <= distance <= 1000.0 - 1.0 <= speed <= 120.0 - 0 <= stops <= 50 - 0.0 <= load_time <= 240.0 Implement the `calculate_delivery_time` function with the above requirements. # Example: ```python >>> calculate_delivery_time(100.0, 60.0, 2, 15.0) 2.75 (approximately, actual result will vary due to random delay) ```","solution":"import random def calculate_delivery_time(distance, speed, stops, load_time): Calculate the total delivery time based on distance, speed, stops, and load/unload time per stop. Parameters: - distance (float): The distance between the pickup and delivery location in kilometers. - speed (float): The average speed of the delivery vehicle in kilometers per hour. - stops (int): The number of stops the delivery vehicle has to make. - load_time (float): The time in minutes that it takes to load/unload at each stop. Returns: - float: The total delivery time in hours. # Calculate the travel time in hours travel_time = distance / speed # Calculate the total stopping time in hours stopping_time = (stops * load_time) / 60 # Generate a random traffic delay in hours traffic_delay = random.uniform(0.0, 1.0) # Calculate the total delivery time total_delivery_time = travel_time + stopping_time + traffic_delay return total_delivery_time"},{"question":"Write a function that generates random data for linear regression, fits a linear regression model to the data, and evaluates the model using Mean Squared Error (MSE). The function should return the coefficients of the linear regression model and the MSE of the model. You should write self-contained code starting with: ``` import numpy as np from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error def task_func(samples=100, features=10, noise=0.1, random_state=0): # Your code here ``` In this function: 1. Generate random data for `samples` and `features` with added random noise. 2. Split the data into training and testing sets. 3. Fit a linear regression model using the training data. 4. Predict the target values using the testing set. 5. Evaluate the model by computing the MSE using the predictions and the actual target values. 6. Return a tuple containing the coefficients of the linear regression model and the MSE score.","solution":"import numpy as np from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error def task_func(samples=100, features=10, noise=0.1, random_state=0): Generates random data for linear regression, fits a linear regression model to the data, and evaluates the model using Mean Squared Error (MSE). Parameters: samples (int): Number of data samples to generate features (int): Number of features for each sample noise (float): Level of noise to add to the target variable random_state (int): Random state for reproducibility Returns: tuple: A tuple containing the coefficients of the linear regression model and the MSE score. np.random.seed(random_state) # Generate random data X = np.random.randn(samples, features) true_coef = np.random.randn(features) y = X @ true_coef + noise * np.random.randn(samples) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_state) # Fit a linear regression model model = LinearRegression() model.fit(X_train, y_train) # Predict the target values using the testing set y_pred = model.predict(X_test) # Evaluate the model using MSE mse = mean_squared_error(y_test, y_pred) # Return the coefficients of the model and the MSE score return (model.coef_, mse)"},{"question":"You are tasked with creating a function called `group_students` that categorizes students into groups based on their grades. The function should accept a list of tuples, where each tuple contains a student\'s name and their grade as a percentage. Your function should then group these students into four categories: \\"Failing\\" (below 60%), \\"Average\\" (60% to 69%), \\"Good\\" (70% to 79%), and \\"Excellent\\" (80% and above). Each group should be stored as a list of names under corresponding keys in a dictionary. The function should return this dictionary with the appropriate groupings. If a category has no students, it should still be present in the dictionary with an empty list. Function Signature: ```python def group_students(students: list) -> dict: # Implementation here ``` Constraints: - The input list will always have tuples in the format `(str, float)` where the string is the student\'s name and the float is their grade percentage. - Ensure the keys in the output dictionary are exactly \\"Failing\\", \\"Average\\", \\"Good\\", and \\"Excellent\\". - The output dictionary should have lists sorted in alphabetical order of the students\' names within each grade category. Example: ```python students = [(\\"John Doe\\", 85), (\\"Jane Smith\\", 59), (\\"Alice Jones\\", 72), (\\"Bob Brown\\", 65)] print(group_students(students)) # Output: { # \\"Failing\\": [\\"Jane Smith\\"], # \\"Average\\": [\\"Bob Brown\\"], # \\"Good\\": [\\"Alice Jones\\"], # \\"Excellent\\": [\\"John Doe\\"] # } ```","solution":"def group_students(students: list) -> dict: Categorizes students into groups based on their grades. Args: students (list): A list of tuples where each tuple contains a student\'s name (str) and their grade (float). Returns: dict: A dictionary with keys \\"Failing\\", \\"Average\\", \\"Good\\", and \\"Excellent\\". Each key maps to a list of student names in that category, sorted alphabetically. categories = { \\"Failing\\": [], \\"Average\\": [], \\"Good\\": [], \\"Excellent\\": [] } for name, grade in students: if grade < 60: categories[\\"Failing\\"].append(name) elif 60 <= grade <= 69: categories[\\"Average\\"].append(name) elif 70 <= grade <= 79: categories[\\"Good\\"].append(name) else: categories[\\"Excellent\\"].append(name) for key in categories: categories[key].sort() return categories"},{"question":"Given a CSV file containing data on students\' names and their scores in three subjects: Mathematics, Physics, and Chemistry, write a function to calculate the average score for each student and append it as a new column to the CSV file. The function should output the file path of the updated CSV file. You should write self-contained code starting with: ``` import csv def calculate_average_score(input_csv_path, output_csv_path): with open(input_csv_path, newline=\'\') as input_file: reader = csv.DictReader(input_file) fieldnames = reader.fieldnames + [\'AverageScore\'] rows = [] for row in reader: average_score = (float(row[\'Mathematics\']) + float(row[\'Physics\']) + float(row[\'Chemistry\'])) / 3 row[\'AverageScore\'] = round(average_score, 2) rows.append(row) with open(output_csv_path, \'w\', newline=\'\') as output_file: writer = csv.DictWriter(output_file, fieldnames=fieldnames) writer.writeheader() writer.writerows(rows) return output_csv_path ```","solution":"import csv def calculate_average_score(input_csv_path, output_csv_path): Calculate the average score for each student and append it as a new column to the CSV file. Args: input_csv_path: str - Path to the input CSV file. output_csv_path: str - Path to the output CSV file which will contain the average scores. Returns: str - The file path of the updated CSV file. with open(input_csv_path, newline=\'\') as input_file: reader = csv.DictReader(input_file) fieldnames = reader.fieldnames + [\'AverageScore\'] rows = [] for row in reader: average_score = (float(row[\'Mathematics\']) + float(row[\'Physics\']) + float(row[\'Chemistry\'])) / 3 row[\'AverageScore\'] = round(average_score, 2) rows.append(row) with open(output_csv_path, \'w\', newline=\'\') as output_file: writer = csv.DictWriter(output_file, fieldnames=fieldnames) writer.writeheader() writer.writerows(rows) return output_csv_path"},{"question":"You are asked to implement a function for managing and monitoring an elevator system in a building with multiple floors. The function must simulate the movement of the elevator between floors based on a series of requests. The function to create is named `simulate_elevator`. This function will: 1. Accept two parameters: * `num_floors`: An integer indicating the number of floors in the building (numbered from 1 to `num_floors`). * `requests`: A list of tuples where each tuple represents an elevator request. Each tuple has the format `(pickup_floor, destination_floor)`. 2. Simulate the movement of the elevator starting at the ground floor (floor 1). The elevator should: - Move to the pickup floor. - Transport the passenger to the destination floor. - Continue this process for each request in the order they are given. 3. Create a log of the elevator movements, starting with `\\"Start at floor 1\\"` and appending messages for each movement such as `\\"Move to floor X\\"` and `\\"Pickup at floor X\\"`, `\\"Dropoff at floor Y\\"`. 4. Return the log of elevator movements as a list of strings. # Example Usage ```python num_floors = 5 requests = [(3, 1), (1, 4), (2, 5)] log = simulate_elevator(num_floors, requests) print(log) ``` # Example Output ```plaintext [\'Start at floor 1\', \'Move to floor 3\', \'Pickup at floor 3\', \'Move to floor 1\', \'Dropoff at floor 1\', \'Move to floor 1\', \'Pickup at floor 1\', \'Move to floor 4\', \'Dropoff at floor 4\', \'Move to floor 2\', \'Pickup at floor 2\', \'Move to floor 5\', \'Dropoff at floor 5\'] ``` # Function Signature ```python def simulate_elevator(num_floors, requests): pass ```","solution":"def simulate_elevator(num_floors, requests): Simulates the movement of an elevator for the given requests and returns the log of movements. Parameters: num_floors (int): Number of floors in the building. requests (list of tuple): Each tuple represents an elevator request with (pickup_floor, destination_floor). Returns: list of str: Log of elevator movements. log = [\\"Start at floor 1\\"] current_floor = 1 for pickup_floor, destination_floor in requests: if current_floor != pickup_floor: log.append(f\\"Move to floor {pickup_floor}\\") log.append(f\\"Pickup at floor {pickup_floor}\\") current_floor = pickup_floor if current_floor != destination_floor: log.append(f\\"Move to floor {destination_floor}\\") log.append(f\\"Dropoff at floor {destination_floor}\\") current_floor = destination_floor return log"},{"question":"**Context:** You are working as a software developer for a ride-sharing company. The company needs a script to manage ride bookings. Each booking should record the passenger\'s name, pickup location, destination, and fare amount. This data needs to be stored persistently in a file called `bookings.json`. **Requirements:** A function, `add_booking`, needs to be written which takes four parameters: `passenger_name`, `pickup_location`, `destination`, and `fare_amount`. This function should: 1. Generate a unique booking ID as a string consisting of 6 alphanumeric characters. 2. Open the file `bookings.json`. If the file does not exist, it should create it and start with an empty list. 3. Append a dictionary containing the booking details to the list of booking records. 4. Save this list back to the `bookings.json` file. 5. Print the details of the newly created booking. **Function Signature:** ```python def add_booking(passenger_name: str, pickup_location: str, destination: str, fare_amount: float) -> None: pass ``` **Input Details:** - `passenger_name` (str): The name of the passenger. - `pickup_location` (str): The pickup location for the ride. - `destination` (str): The destination for the ride. - `fare_amount` (float): The fare amount for the ride. **Expected Output:** - Prints the details of the newly created booking including the `booking_id`. **Relevant Libraries:** You are required to use: - `random.choices` for generating the random booking ID. - `string` for specifying the characters to be used in the booking ID. - `json.dump` and `json.load` for reading and writing JSON files.","solution":"import json import random import string import os def generate_booking_id(): Generates a unique booking ID with 6 alphanumeric characters. return \'\'.join(random.choices(string.ascii_letters + string.digits, k=6)) def add_booking(passenger_name: str, pickup_location: str, destination: str, fare_amount: float) -> None: Adds a booking to the bookings.json file and prints the booking details. booking = { \'booking_id\': generate_booking_id(), \'passenger_name\': passenger_name, \'pickup_location\': pickup_location, \'destination\': destination, \'fare_amount\': fare_amount } if os.path.exists(\'bookings.json\'): with open(\'bookings.json\', \'r\') as file: bookings = json.load(file) else: bookings = [] bookings.append(booking) with open(\'bookings.json\', \'w\') as file: json.dump(bookings, file, indent=4) print(f\\"New Booking: {booking}\\")"},{"question":"You are tasked with creating a function named `analyze_numbers` that analyzes a list of integers to find important statistics. Your function should perform the following operations: 1. **Filter Out Odd Numbers**: Create a new list that contains only the even numbers from the original list. 2. **Calculate the Mean** of the even numbers. If there are no even numbers, the mean should be 0. 3. **Find the Median** of the even numbers. If there are no even numbers, the median should be 0. The median is the middle value in a sorted list. If the sorted list length is even, it is the average of the two middle numbers. 4. **Identify the Mode(s)** of all the original numbers. The mode is the number(s) that appear most frequently. If all numbers appear with the same frequency, all numbers are considered modes. Your function should output a dictionary with the following keys: - \\"mean\\": the mean of the even numbers (float) - \\"median\\": the median of the even numbers (float) - \\"modes\\": a list of the mode(s) of the original numbers (integer list) Function Signature: ```python def analyze_numbers(numbers: List[int]) -> dict: pass ``` Example: ```python print(analyze_numbers([1, 2, 2, 3, 4, 4, 5])) # Output: {\'mean\': 3.0, \'median\': 3.0, \'modes\': [2, 4]} print(analyze_numbers([7, 8, 9, 10])) # Output: {\'mean\': 9.0, \'median\': 9.0, \'modes\': [7, 8, 9, 10]} print(analyze_numbers([1, 3, 5, 7])) # Output: {\'mean\': 0.0, \'median\': 0.0, \'modes\': [1, 3, 5, 7]} ``` Note: - You may assume that the input list contains at least one integer. - Use Python\'s built-in functions and standard libraries where applicable for efficient computation.","solution":"from typing import List import statistics def analyze_numbers(numbers: List[int]) -> dict: # Step 1: Filter out odd numbers even_numbers = [num for num in numbers if num % 2 == 0] # Step 2: Calculate the mean of even numbers if even_numbers: mean = sum(even_numbers) / len(even_numbers) else: mean = 0.0 # Step 3: Find the median of even numbers if even_numbers: median = statistics.median(even_numbers) else: median = 0.0 # Step 4: Identify the modes of the original numbers if numbers: freq_dict = {} for num in numbers: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 max_freq = max(freq_dict.values()) modes = [num for num, freq in freq_dict.items() if freq == max_freq] else: modes = [] return { \\"mean\\": mean, \\"median\\": median, \\"modes\\": modes }"},{"question":"You are required to write a function called `count_words` which takes a single parameter, `text`, a string representing a paragraph of text. This function should calculate and return the frequency of each word in the given text. To achieve this, you will need to utilize basic string operations and the `collections.Counter` class from Python\'s `collections` module: - Use `str.split` to split the text into individual words. - Use `str.lower` to convert all words to lowercase to ensure case-insensitive counting. - Use `str.strip` to remove any punctuation from the start and end of the words. - Use `collections.Counter` to count the frequency of each word. Here\'s a step-by-step description of what your function should do: 1. Split the given text into words using the `split` method. 2. Convert each word to lowercase and strip punctuation from the start and end. 3. Use the `Counter` class to count the frequency of each word. 4. Return the result as a dictionary where the keys are the words and the values are their respective counts. # Example For example, if the input text is `\\"Hello, hello world! World.\\"`, your function should return `{\'hello\': 2, \'world\': 2}`. # Constraints - The input text will be non-empty and contain only alphabetical characters, spaces, and basic punctuation (e.g., .,!?). # Function Signature ```python def count_words(text: str) -> dict: pass ``` # Note Read the documentation for `str.split`, `str.lower`, `str.strip`, and `collections.Counter` provided to fully understand the required usage of these functions.","solution":"from collections import Counter import string def count_words(text: str) -> dict: Count the frequency of each word in the given text. Args: text (str): A string representing a paragraph of text. Returns: dict: A dictionary where keys are words and values are their respective counts. # Split the text into words words = text.split() # Convert each word to lowercase and strip punctuation from start and end cleaned_words = [word.lower().strip(string.punctuation) for word in words] # Use Counter to count the frequency of each word word_counts = Counter(cleaned_words) return dict(word_counts)"},{"question":"Create a function `monitor_resource_usage` that tracks the resource usage of a process over time and stores the results in a CSV file. Specifically, the function should periodically record the CPU and memory usage of the process. This can be useful for profiling long-running applications to understand their resource demands. You will need to use the `psutil` library to gather resource usage metrics and the `csv` module to write the data to a CSV file. The function signature should be: ```python def monitor_resource_usage(pid, interval, output_file=\'resource_usage.csv\'): pass ``` where: - `pid` is an integer representing the process ID of the target process. - `interval` is a float representing the time interval (in seconds) between each measurement. - `output_file` is an optional string parameter that specifies the path to the CSV file for writing the resource usage data. The function should work as follows: 1. Open the specified CSV file and write the column headers: `timestamp`, `cpu_usage`, `memory_usage`. 2. Enter a loop that runs indefinitely, where in each iteration: - The current timestamp should be recorded. - Use `psutil` to fetch the current CPU and memory usage of the process specified by `pid`. - Append these values as a new row in the CSV file. - Sleep for the specified `interval` before the next iteration. You may include error handling for cases where the process ID does not exist or permission to access the process is denied. **Example usage:** ```python monitor_resource_usage(12345, 1.0) ```","solution":"import psutil import csv import time from datetime import datetime def monitor_resource_usage(pid, interval, output_file=\'resource_usage.csv\'): Tracks the resource usage of a process over time and stores the results in a CSV file. Args: pid (int): Process ID of the target process. interval (float): Time interval (in seconds) between each measurement. output_file (str): Path to the CSV file for writing the resource usage data. # Open the CSV file and write the column headers with open(output_file, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'timestamp\', \'cpu_usage\', \'memory_usage\']) while True: try: # Get the process process = psutil.Process(pid) # Get the current timestamp timestamp = datetime.now().isoformat() # Get the CPU and memory usage of the process cpu_usage = process.cpu_percent(interval=None) # Non-blocking call memory_info = process.memory_info() memory_usage = memory_info.rss # Resident Set Size (bytes) # Write the data to the CSV file writer.writerow([timestamp, cpu_usage, memory_usage]) # Flush the file to ensure data is written to disk file.flush() except psutil.NoSuchProcess: print(f\\"Process with PID {pid} does not exist.\\") break except psutil.AccessDenied: print(f\\"Permission denied to access process with PID {pid}.\\") break except Exception as e: print(f\\"An error occurred: {e}\\") break # Sleep for the specified interval time.sleep(interval)"},{"question":"Implement a `calculate_statistics` function that analyzes a list of dictionaries representing transactions at a store to generate key summary statistics. Each dictionary contains `amount` (the transaction amount as a float), `date` (the date of the transaction as a string in the format YYYY-MM-DD), and `category` (the product category as a string). Your `calculate_statistics` function should: 1. Calculate the total amount of all transactions. 2. Calculate the average transaction amount. 3. Determine the date with the highest total transaction amount. 4. Count the number of transactions for each category. Your function should return a dictionary with the following key-value pairs: - `total_amount`: The total amount of all transactions. - `average_amount`: The average transaction amount. - `top_date`: The date with the highest total transaction amount. - `category_counts`: A dictionary where the keys are the categories and the values are the counts of transactions in each category. Here is the function signature: ```python def calculate_statistics(transactions: list) -> dict: pass ``` # Example Usage: ```python transactions = [ {\\"amount\\": 100.0, \\"date\\": \\"2021-01-01\\", \\"category\\": \\"Electronics\\"}, {\\"amount\\": 200.0, \\"date\\": \\"2021-01-01\\", \\"category\\": \\"Clothing\\"}, {\\"amount\\": 50.0, \\"date\\": \\"2021-01-02\\", \\"category\\": \\"Electronics\\"}, {\\"amount\\": 400.0, \\"date\\": \\"2021-01-02\\", \\"category\\": \\"Food\\"}, {\\"amount\\": 150.0, \\"date\\": \\"2021-01-03\\", \\"category\\": \\"Clothing\\"} ] result = calculate_statistics(transactions) print(result) ``` # Example Output: ```python { \\"total_amount\\": 900.0, \\"average_amount\\": 180.0, \\"top_date\\": \\"2021-01-02\\", \\"category_counts\\": { \\"Electronics\\": 2, \\"Clothing\\": 2, \\"Food\\": 1 } } ``` # Hints: - Use a dictionary to keep track of the total transaction amounts per date. - Use a loop to iterate through the list of transactions and update your tally for each statistic accordingly. - Be mindful of floating-point precision when calculating the average amount. - Use the `max` function with a suitable key argument to find the date with the highest total transaction amount.","solution":"def calculate_statistics(transactions: list) -> dict: total_amount = 0.0 category_counts = {} date_totals = {} for transaction in transactions: amount = transaction[\\"amount\\"] date = transaction[\\"date\\"] category = transaction[\\"category\\"] total_amount += amount if category in category_counts: category_counts[category] += 1 else: category_counts[category] = 1 if date in date_totals: date_totals[date] += amount else: date_totals[date] = amount average_amount = total_amount / len(transactions) if transactions else 0.0 top_date = max(date_totals, key=date_totals.get) if date_totals else None return { \\"total_amount\\": total_amount, \\"average_amount\\": average_amount, \\"top_date\\": top_date, \\"category_counts\\": category_counts }"},{"question":"You are required to write a Python function called `generate_even_number_list(n)` that generates a list of the first `n` even numbers. This function should perform the following tasks: 1. Generate a list `even_numbers` containing the first `n` even numbers starting from 0. 2. Print the generated list `even_numbers`. 3. Save the list `even_numbers` to a file named `even_numbers.txt`, with each number on a new line. # Requirements: - You must use list comprehensions to generate the list of even numbers. - Use a `with` statement to handle file operations safely. - The function should handle any potential errors that might occur during file operations, such as permission issues. **Example:** Suppose `n = 5`, the call to `generate_even_number_list(n)` should produce the following output in the console: ``` [0, 2, 4, 6, 8] ``` And the file `even_numbers.txt` should contain: ``` 0 2 4 6 8 ``` # Additional Information: - Ensure that the function works correctly for any non-negative integer `n`. - Handle cases where `n` is 0 by generating an empty list and an empty file.","solution":"def generate_even_number_list(n): Generates a list of the first `n` even numbers starting from 0, prints the list, and writes each number to a new line in a file named `even_numbers.txt`. # Generate the list of the first `n` even numbers even_numbers = [i * 2 for i in range(n)] # Print the list print(even_numbers) # Write the list to a file try: with open(\'even_numbers.txt\', \'w\') as file: for number in even_numbers: file.write(f\\"{number}n\\") except IOError as e: print(f\\"File operation failed: {e}\\")"},{"question":"You are required to write a function `format_date` that converts a date string from `MM/DD/YYYY` format to `YYYY-MM-DD` format. The function will take a single argument: `date_str`, which is a string representing a date in `MM/DD/YYYY` format. The function should return a string representing the same date in `YYYY-MM-DD` format. The code should fit the function signature: `def format_date(date_str: str) -> str`. Here is how the function should behave: ```python date_str = \'12/25/2021\' print(format_date(date_str)) ``` Expected output: ``` 2021-12-25 ```","solution":"def format_date(date_str: str) -> str: Converts a date string from MM/DD/YYYY format to YYYY-MM-DD format. :param date_str: A string representing a date in MM/DD/YYYY format. :return: A string representing the date in YYYY-MM-DD format. # Split the input date string by \'/\' month, day, year = date_str.split(\'/\') # Combine the year, month, and day in YYYY-MM-DD format formatted_date = f\\"{year}-{month.zfill(2)}-{day.zfill(2)}\\" return formatted_date"},{"question":"You are tasked with writing a function `parse_and_sum` that processes a list of JSON strings representing transaction records. This function will extract specific information from each record, perform calculations, and output the results to a text file. This exercise will help you practice JSON parsing and file handling in Python. **Function Signature**: ```python def parse_and_sum(transactions: list, output_file: str) -> None: ``` **Parameters**: - `transactions` (list): A list of JSON strings where each JSON string represents a transaction record (e.g., `[\'{\\"id\\": 1, \\"amount\\": 100.0, \\"type\\": \\"credit\\"}\', \'{\\"id\\": 2, \\"amount\\": 50.0, \\"type\\": \\"debit\\"}\']`). - `output_file` (str): The name of the text file where the summarized results will be written. **Requirements**: 1. Open the output file in write mode (`\'w\'`). 2. Initialize two variables to track the total credit and total debit amounts. 3. For each transaction record in the list: - Parse the JSON string into a Python dictionary using the `json.loads` function. - Extract the `amount` and `type` fields from each dictionary. - Depending on the `type` field, update the respective total (either `total_credit` or `total_debit`). 4. Write the summarized results to the text file in the following format: ``` Total Credit: <total_credit> Total Debit: <total_debit> Net Amount: <net_amount> ``` where: - `<total_credit>` is the sum of all credit transactions. - `<total_debit>` is the sum of all debit transactions. - `<net_amount>` is the difference between `total_credit` and `total_debit`. 5. Close the text file. **Constraints**: - Do not account for malformed JSON strings; assume all JSON strings in the list are well-formed. - Ensure that your function performs the necessary JSON parsing and file handling using the designated Python libraries. Here\'s the function signature and example usage: ```python def parse_and_sum(transactions: list, output_file: str) -> None: import json total_credit = 0.0 total_debit = 0.0 with open(output_file, \'w\') as f: for transaction in transactions: record = json.loads(transaction) amount = record[\'amount\'] if record[\'type\'] == \'credit\': total_credit += amount elif record[\'type\'] == \'debit\': total_debit += amount net_amount = total_credit - total_debit f.write(f\\"Total Credit: {total_credit}n\\") f.write(f\\"Total Debit: {total_debit}n\\") f.write(f\\"Net Amount: {net_amount}n\\") ```","solution":"def parse_and_sum(transactions: list, output_file: str) -> None: import json total_credit = 0.0 total_debit = 0.0 with open(output_file, \'w\') as f: for transaction in transactions: record = json.loads(transaction) amount = record[\'amount\'] if record[\'type\'] == \'credit\': total_credit += amount elif record[\'type\'] == \'debit\': total_debit += amount net_amount = total_credit - total_debit f.write(f\\"Total Credit: {total_credit}n\\") f.write(f\\"Total Debit: {total_debit}n\\") f.write(f\\"Net Amount: {net_amount}n\\")"},{"question":"You are tasked with creating a function `definite_integral_sin_cos(a, b)` that computes the definite integral of the function ( f(x) = sin(x) cdot cos(x) ) from ( a ) to ( b ). The definite integral is given by: [ int_{a}^{b} sin(x) cos(x) , dx = frac{1}{2} left[sin^2(x)right]_a^b ] To solve the problem, you need to use Python\'s library functions to compute the integral analytically. **Function Signature:** ```python def definite_integral_sin_cos(a: float, b: float) -> float: pass ``` **Input:** - `a` (float): A floating point number representing the lower limit of integration. - `b` (float): A floating point number representing the upper limit of integration. **Output:** - The function should return a float that is the value of the definite integral of ( sin(x) cdot cos(x) ) from ( a ) to ( b ). **Constraints:** - You may assume `a` and `b` are valid floating point numbers where ( a leq b ). **Requirements:** - Do not use numerical integration methods (e.g., `scipy.integrate.quad`). Use the analytical method as provided.","solution":"import math def definite_integral_sin_cos(a: float, b: float) -> float: Computes the definite integral of sin(x) * cos(x) from a to b. The integral can be evaluated as (1/2) * [sin^2(x)] from a to b. integral_a = (1/2) * math.sin(a)**2 integral_b = (1/2) * math.sin(b)**2 return integral_b - integral_a"},{"question":"You are tasked with developing a simple text-based inventory management system for a store. Each item in the inventory has a unique identifier, a name, a quantity, and a price. The inventory needs to be persistently stored and retrieved from a file using Python\'s `json` library. Implement the functions `save_inventory(inventory, filename)` and `load_inventory(filename)`. 1. The `save_inventory(inventory, filename)` function should: - Serialize the given `inventory` dictionary to a JSON string using the `json.dump` function. - Save the JSON string to a file with the specified `filename`. 2. The `load_inventory(filename)` function should: - Read the JSON string from a file with the specified `filename`. - Deserialize the JSON string back into a Python dictionary using the `json.load` function. - Return the dictionary. The functions should handle errors gracefully, such as when the file cannot be read or written. Assume that `inventory` is a dictionary where the key is the item identifier (a string), and the value is another dictionary with `name`, `quantity`, and `price` as keys. Here\'s the function definitions: ```python def save_inventory(inventory, filename): pass def load_inventory(filename): pass ``` # Requirements: - Use the `json.dump` and `json.load` functions from Python\'s standard library. - Ensure that the functions handle exceptions related to file operations, such as when the file path is invalid or unwritable. # Example Usage: ```python inventory = { \'item1\': {\'name\': \'apple\', \'quantity\': 10, \'price\': 0.5}, \'item2\': {\'name\': \'banana\', \'quantity\': 5, \'price\': 0.3}, } file_name = \'inventory.json\' save_inventory(inventory, file_name) loaded_inventory = load_inventory(file_name) ``` In this example, the `save_inventory` function should serialize the `inventory` dictionary and store it in a file named `inventory.json`. The `load_inventory` function should read the `inventory` data from `inventory.json` and return it as a dictionary.","solution":"import json def save_inventory(inventory, filename): Save the inventory to a file in JSON format. Parameters: inventory (dict): The inventory dictionary to save. filename (str): The path to the file to write the JSON data to. Returns: None try: with open(filename, \'w\') as file: json.dump(inventory, file) except (IOError, TypeError) as e: print(f\\"An error occurred while writing to the file: {e}\\") def load_inventory(filename): Load the inventory from a file in JSON format. Parameters: filename (str): The path to the file to read the JSON data from. Returns: dict: The inventory dictionary. try: with open(filename, \'r\') as file: return json.load(file) except (IOError, json.JSONDecodeError) as e: print(f\\"An error occurred while reading from the file: {e}\\") return {}"},{"question":"You are developing a file processing utility that reads a CSV (Comma-Separated Values) file and processes the data. Your task is to write a Python function that performs the following operations: 1. Reads a CSV file containing user data with the columns: `id`, `name`, `age`, and `email`. 2. Filters out rows where the `age` is not between 20 and 30 (inclusive). 3. Converts the `age` column to a numeric type, ensuring it contains only integer values. 4. Ensures the `email` column contains valid email addresses. 5. Writes the cleaned data to a new CSV file. The function you need to write is: ```python def clean_user_data(input_file, output_file): ``` Here is a detailed explanation of the parameters: - `input_file`: Path to the input CSV file containing raw user data. - `output_file`: Path to the output CSV file where cleaned data will be written. Your function should implement the following steps: 1. Read the input CSV file using `pandas.read_csv`. 2. Filter rows by age: - Convert the `age` column to integers using error handling to ensure non-integer entries are removed. - Filter out rows where `age` is outside the 20 to 30 (inclusive) range. 3. Validate the `email` column using a simple regular expression to ensure it matches the pattern \\"username@domain\\". 4. Use `pandas.DataFrame.to_csv` to write the cleaned DataFrame to the output CSV file. **Example Usage**: ```python import pandas as pd import re def clean_user_data(input_file, output_file): df = pd.read_csv(input_file) # Convert age to integer, drop rows with invalid data df[\'age\'] = pd.to_numeric(df[\'age\'], errors=\'coerce\') df = df.dropna(subset=[\'age\']) df[\'age\'] = df[\'age\'].astype(int) # Filter rows where age is not between 20 and 30 (inclusive) df = df[(df[\'age\'] >= 20) & (df[\'age\'] <= 30)] # Validate email addresses email_pattern = re.compile(r\'^[^@]+@[^@]+.[^@]+\') df = df[df[\'email\'].apply(lambda x: bool(email_pattern.match(x)))] # Write the cleaned data to the output file df.to_csv(output_file, index=False) # Example call of the function clean_user_data(\'raw_user_data.csv\', \'cleaned_user_data.csv\') ``` Ensure that your function performs all necessary steps and handles any potential data integrity issues efficiently.","solution":"import pandas as pd import re def clean_user_data(input_file, output_file): Reads a CSV file, cleans the data according to specified rules, and writes the cleaned data to a new CSV file. Parameters: - input_file (str): Path to the input CSV file containing raw user data. - output_file (str): Path to the output CSV file where cleaned data will be written. df = pd.read_csv(input_file) # Convert age to integer, drop rows with invalid data df[\'age\'] = pd.to_numeric(df[\'age\'], errors=\'coerce\') df = df.dropna(subset=[\'age\']) df[\'age\'] = df[\'age\'].astype(int) # Filter rows where age is not between 20 and 30 (inclusive) df = df[(df[\'age\'] >= 20) & (df[\'age\'] <= 30)] # Validate email addresses email_pattern = re.compile(r\'^[^@]+@[^@]+.[^@]+\') df = df[df[\'email\'].apply(lambda x: bool(email_pattern.match(x)))] # Write the cleaned data to the output file df.to_csv(output_file, index=False)"},{"question":"You are tasked with developing a shopping cart simulation for an online retail platform. The simulation involves managing a cart with items and their corresponding prices, applying discounts, and computing the total bill. Implement the following functions to manage the shopping cart: 1. `add_item(cart, item, price)`: Adds an item to the cart with the specified price. 2. `remove_item(cart, item)`: Removes an item from the cart. If the item is not found, return without making any changes. 3. `apply_discount(cart, discount)`: Applies a discount on all items in the cart. The discount is provided as a percentage (e.g., a 10% discount would reduce the price of each item by 10%). 4. `calculate_total(cart)`: Calculates and returns the total price of all items in the cart after discounts are applied. Define these functions to modify the cart and calculate the total price as necessary. The cart should be represented as a dictionary where the keys are item names and the values are the original prices of the items. Example: ```python cart = {} add_item(cart, \\"book\\", 12.99) add_item(cart, \\"pen\\", 1.49) remove_item(cart, \\"pencil\\") apply_discount(cart, 10) total = calculate_total(cart) print(total) # Output should reflect the total price with discount applied ``` Function definitions: ```python def add_item(cart, item, price): # Your implementation here pass def remove_item(cart, item): # Your implementation here pass def apply_discount(cart, discount): # Your implementation here pass def calculate_total(cart): # Your implementation here pass ``` Parameters: - `cart` (dict): The shopping cart containing item names and their prices. - `item` (str): The name of the item to add or remove. - `price` (float): The price of the item to add. - `discount` (float): The discount percentage to apply to all items. Returns: - `calculate_total` should return the total price (float) of all items in the cart after discounts.","solution":"def add_item(cart, item, price): Adds an item to the cart with the specified price. cart[item] = price def remove_item(cart, item): Removes an item from the cart. If the item is not found, return without making any changes. if item in cart: del cart[item] def apply_discount(cart, discount): Applies a discount on all items in the cart. The discount is provided as a percentage for item in cart: cart[item] = cart[item] * (1 - discount / 100) def calculate_total(cart): Calculates and returns the total price of all items in the cart after discounts are applied. return sum(cart.values())"},{"question":"Write a function that simulates a card game between two players. Each player draws a card from a standard 52-card deck, and the player with the higher card wins the round. The function should simulate a specified number of rounds and return the total number of rounds won by each player. In case of a tie, no player wins that round. The function should output: dict: A dictionary with the keys \'Player 1 Wins\' and \'Player 2 Wins\' representing the total wins for each player. Use the following ranks for cards (from lowest to highest): 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A. Assume that suits do not matter in this game. You should write self-contained code starting with: ``` import random def card_game(rounds, seed=None): ```","solution":"import random def card_game(rounds, seed=None): Simulates a card game between two players for a specified number of rounds. Parameters: - rounds (int): The number of rounds to simulate - seed (int, optional): A seed for the random number generator (for reproducibility) Returns: - dict: A dictionary with the keys \'Player 1 Wins\' and \'Player 2 Wins\' representing the total wins for each player. if seed is not None: random.seed(seed) card_ranks = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} deck = list(card_ranks.keys()) * 4 results = {\'Player 1 Wins\': 0, \'Player 2 Wins\': 0} for _ in range(rounds): card1 = random.choice(deck) card2 = random.choice(deck) if card_ranks[card1] > card_ranks[card2]: results[\'Player 1 Wins\'] += 1 elif card_ranks[card1] < card_ranks[card2]: results[\'Player 2 Wins\'] += 1 return results"},{"question":"You are tasked with implementing a function to generate random alphanumeric codes. The code should be used for promotional discounts on an e-commerce platform. Each promotional code must be unique and have a specific format. Specifically: 1. The code should be 10 characters long. 2. It should consist of uppercase letters (A-Z) and digits (0-9). 3. Each code should start with either the letter \\"A\\" or \\"B\\". Create a function named `generate_promo_code` which returns the generated promotional code as a string. You must make use of the `choice` and `randint` methods from Python\'s `random` module to achieve this functionality. **Requirements:** - Use `random.choice` to randomly select characters and ensure the first character is either \\"A\\" or \\"B\\". - Use `random.choices` to generate the remaining characters from uppercase letters and digits. Here is the signature of the function you need to implement: ```python from random import choice, choices def generate_promo_code() -> str: pass ``` **Function Constraints:** - The code must be exactly 10 characters in length. - The first character must be \\"A\\" or \\"B\\". - The rest of the characters can be any uppercase letter or digit.","solution":"from random import choice, choices def generate_promo_code() -> str: Generates a unique promotional code with the following constraints: - The code is 10 characters long. - It starts with either \'A\' or \'B\'. - The remaining 9 characters are randomly selected from uppercase letters (A-Z) and digits (0-9). start_char = choice([\'A\', \'B\']) remaining_chars = choices(\'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\', k=9) promo_code = start_char + \'\'.join(remaining_chars) return promo_code"},{"question":"In the field of data structures, efficient manipulation and management of collections of elements is paramount. This problem involves implementing a function to perform a specific series of operations on a list of integers. You are required to implement the function `process_list(nums: List[int], operations: List[Tuple[str, int]]) -> List[int]` that takes a list of integers and a list of operations as inputs, and returns the modified list of integers after applying all the operations. **Function Requirements:** 1. The input `operations` is a list of tuples, where each tuple consists of an operation represented by a string and an integer. 2. The possible operations are: - `\\"insert\\"`: Inserts the integer at the end of the list. - `\\"delete\\"`: Deletes the first occurrence of the integer from the list. If the integer is not found, the list remains unchanged. - `\\"append\\"`: Appends the integer to the end of the list. - `\\"remove\\"`: Removes all occurrences of the integer from the list. # Example Usage: ```python nums = [1, 2, 3, 4, 2, 5] operations = [(\\"insert\\", 6), (\\"delete\\", 2), (\\"append\\", 7), (\\"remove\\", 4)] process_list(nums, operations) ``` # Expected Output: ``` [1, 3, 2, 5, 6, 7] ``` **Notes:** - The function should handle the operations in the order they are provided. - The function should maintain the order of elements in the list unless specified otherwise by the operations.","solution":"from typing import List, Tuple def process_list(nums: List[int], operations: List[Tuple[str, int]]) -> List[int]: Modify the list of integers based on a series of operations. Args: nums : List[int] - Initial list of integers. operations : List[Tuple[str, int]] - List of operations to be performed. Returns: List[int] - Modified list after all operations. for operation, value in operations: if operation == \\"insert\\": nums.append(value) elif operation == \\"delete\\": if value in nums: nums.remove(value) elif operation == \\"append\\": nums.append(value) elif operation == \\"remove\\": nums = [x for x in nums if x != value] return nums"},{"question":"Given a positive integer `n`, a perfect number is defined as a number that is equal to the sum of its proper divisors (excluding the number itself). For instance, 28 is a perfect number because its proper divisors are 1, 2, 4, 7, and 14, and their sum is 28. Write a Python function named `is_perfect` that determines if a given integer ( n ) is a perfect number. The function should have the following signature: ```python def is_perfect(n: int) -> bool: ``` **Input**: - ( n ): A positive integer to check whether it is a perfect number. **Output**: - Return `True` if ( n ) is a perfect number. Otherwise, return `False`. **Instructions**: - Compute the proper divisors of ( n ) and their sum. - Do not use any external libraries or built-in functions for generating divisors other than basic operators and loops. - Optimize the divisor calculation to avoid unnecessary iterations. Example: ```python print(is_perfect(6)) # Should return True (1+2+3 = 6) print(is_perfect(28)) # Should return True (1+2+4+7+14 = 28) print(is_perfect(12)) # Should return False (1+2+3+4+6 != 12) ```","solution":"def is_perfect(n: int) -> bool: if n < 2: return False divisors_sum = 1 # we start with 1 as it is a proper divisor of every integer > 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n"},{"question":"You are tasked with developing a function named `bookInventory` that manages a collection of books in a library. The function will allow adding new books, updating the quantity of existing books, and querying the availability of specific books. The function should follow this signature: ```python class BookInventory: def __init__(self): pass def addBook(self, title: str, author: str, quantity: int) -> None: pass def updateQuantity(self, title: str, quantity: int) -> None: pass def isAvailable(self, title: str) -> bool: pass ``` Methods: - `addBook(title: str, author: str, quantity: int) -> None`: Adds a new book to the inventory with the given title, author, and quantity. If the book already exists, it should update the quantity. - `updateQuantity(title: str, quantity: int) -> None`: Updates the quantity of the specified book. If the book does not exist, it should do nothing. - `isAvailable(title: str) -> bool`: Checks if the specified book is available (i.e., the quantity is greater than zero). Example Usage: ```python library = BookInventory() library.addBook(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 5) library.addBook(\\"1984\\", \\"George Orwell\\", 3) library.updateQuantity(\\"1984\\", 10) print(library.isAvailable(\\"1984\\")) # Should return True print(library.isAvailable(\\"The Great Gatsby\\")) # Should return False ``` This example demonstrates adding two books to the inventory, updating the quantity of one, and checking the availability of books in the library.","solution":"class BookInventory: def __init__(self): self.inventory = {} def addBook(self, title: str, author: str, quantity: int) -> None: if title in self.inventory: self.inventory[title][\'quantity\'] += quantity else: self.inventory[title] = {\'author\': author, \'quantity\': quantity} def updateQuantity(self, title: str, quantity: int) -> None: if title in self.inventory: self.inventory[title][\'quantity\'] = quantity def isAvailable(self, title: str) -> bool: return title in self.inventory and self.inventory[title][\'quantity\'] > 0"},{"question":"You are given a dataset containing the sales of a store in different years. Write a function named `plot_yearly_sales` that takes in a dictionary `sales_data` where keys are years (integers) and values are sales amounts (floats). Your task is to plot a bar graph to visualize the sales data over the years using the `matplotlib` library in Python. Ensure to label the x-axis as \\"Years\\", the y-axis as \\"Sales in USD\\", and title the graph as \\"Yearly Sales Data\\". You are required to use the following `matplotlib.pyplot` methods in your implementation: `xlabel`, `ylabel`, `title`, and `show`. # Function Signature: ```python def plot_yearly_sales(sales_data: dict): pass ``` # Input: - `sales_data`: A dictionary where each key is a year (int) and each value is the sales amount in that year (float). # Output: - A bar graph displayed using `matplotlib` library, showing sales distribution over the years. # Example: ```python sales_data = { 2015: 15000.0, 2016: 17500.5, 2017: 16000.75, 2018: 18000.25, 2019: 21000.0, } plot_yearly_sales(sales_data) ``` # Requirements: 1. Use `matplotlib.pyplot.xlabel` to label the x-axis. 2. Use `matplotlib.pyplot.ylabel` to label the y-axis. 3. Use `matplotlib.pyplot.title` to add the title to the graph. 4. Use `matplotlib.pyplot.show` to display the graph. Ensure that your code is well-documented and follows best practices for readability and maintainability.","solution":"import matplotlib.pyplot as plt def plot_yearly_sales(sales_data: dict): Plots a bar graph from the sales data, where keys are years and values are sales amounts. Parameters: sales_data (dict): Dictionary with years as keys and sales amounts as values. years = list(sales_data.keys()) sales = list(sales_data.values()) plt.bar(years, sales, color=\'blue\') plt.xlabel(\'Years\') plt.ylabel(\'Sales in USD\') plt.title(\'Yearly Sales Data\') plt.show()"},{"question":"You are required to implement a function called `calculate_house_price` that estimates the price of a house based on multiple linear regression. The function should take in an array of features describing the house and a set of model parameters. Specifically, this function should compute the total price using the provided weights and biases for each feature. The function `calculate_house_price` should have the following signature: ```python def calculate_house_price(features: np.ndarray, weights: np.ndarray, bias: float) -> float: Estimates the price of a house using the provided regression weights and bias. Parameters: features : np.ndarray An array of shape (n,) containing the features of the house. weights : np.ndarray An array of shape (n,) containing the weights for each feature. bias : float The regression model bias/intercept term. Returns: float The estimated price of the house. ``` # Input 1. `features` - A NumPy array of shape `(n,)` containing the features of the house (e.g., size in square feet, number of bedrooms, age of the house, etc.). 2. `weights` - A NumPy array of shape `(n,)` containing the weights associated with each feature. 3. `bias` - A scalar representing the bias or intercept term. # Output - The function should return a float value representing the estimated price of the house. # Requirements - Use `numpy` for all necessary mathematical operations. - Ensure to handle input arrays efficiently and leverage vectorized operations for performance. # Example ```python import numpy as np # Example features, weights, and bias features = np.array([1500, 3, 10]) # Size (sqft), number of bedrooms, age (years) weights = np.array([200, 10000, -500]) # Weight for each feature bias = 50000 # Call to the function price = calculate_house_price(features, weights, bias) print(price) # Output will be the estimated house price ``` # Constraints - Ensure that the function handles NumPy arrays correctly and performs efficient computations.","solution":"import numpy as np def calculate_house_price(features: np.ndarray, weights: np.ndarray, bias: float) -> float: Estimates the price of a house using the provided regression weights and bias. Parameters: features : np.ndarray An array of shape (n,) containing the features of the house. weights : np.ndarray An array of shape (n,) containing the weights for each feature. bias : float The regression model bias/intercept term. Returns: float The estimated price of the house. # Calculate the dot product of features and weights and add the bias return np.dot(features, weights) + bias"},{"question":"In this problem, you are asked to implement a Python function named `process_employee_data` that processes employee data stored in a JSON file. The JSON file consists of multiple employee records, where each record contains the following fields: `employee_id`, `name`, `age`, `department`, and `salary`. Your goal is to perform the following tasks within the function: 1. Read the JSON file and convert it into a list of dictionaries. 2. Extract the `employee_id` and `department` fields from each record and store them in separate lists `ids` and `depts`. 3. Create a dictionary `avg_salary_by_dept` that calculates the average salary for each department. 4. Create a list `names_under_30` containing the `name` of employees who are under 30 years old. 5. Return the results as a tuple containing the `ids` list, the `avg_salary_by_dept` dictionary, and the `names_under_30` list. # Function Signature: ```python def process_employee_data(filename: str) -> (list, dict, list): # Your code here ``` # Example: Given a JSON file named \\"employees.json\\" with the following contents: ```json [ {\\"employee_id\\": 1, \\"name\\": \\"Alice\\", \\"age\\": 25, \\"department\\": \\"HR\\", \\"salary\\": 50000}, {\\"employee_id\\": 2, \\"name\\": \\"Bob\\", \\"age\\": 35, \\"department\\": \\"Engineering\\", \\"salary\\": 75000}, {\\"employee_id\\": 3, \\"name\\": \\"Charlie\\", \\"age\\": 28, \\"department\\": \\"Engineering\\", \\"salary\\": 70000}, {\\"employee_id\\": 4, \\"name\\": \\"David\\", \\"age\\": 42, \\"department\\": \\"HR\\", \\"salary\\": 60000} ] ``` Expected return values would be: - The `ids` list: ```python [1, 2, 3, 4] ``` - The `avg_salary_by_dept` dictionary: ```python {\'HR\': 55000.0, \'Engineering\': 72500.0} ``` - The `names_under_30` list: ```python [\'Alice\', \'Charlie\'] ``` **Note**: You may use the `json` module in Python to load and process the JSON file content.","solution":"import json def process_employee_data(filename: str) -> (list, dict, list): with open(filename, \'r\') as file: data = json.load(file) ids = [record[\'employee_id\'] for record in data] depts = [record[\'department\'] for record in data] from collections import defaultdict dept_salary_sum = defaultdict(int) dept_salary_count = defaultdict(int) for record in data: dept_salary_sum[record[\'department\']] += record[\'salary\'] dept_salary_count[record[\'department\']] += 1 avg_salary_by_dept = {dept: dept_salary_sum[dept] / dept_salary_count[dept] for dept in dept_salary_sum} names_under_30 = [record[\'name\'] for record in data if record[\'age\'] < 30] return ids, avg_salary_by_dept, names_under_30"},{"question":"Given a string `s`, your task is to determine the length of the longest substring without repeating characters. Your function should be efficient and use the sliding window technique along with a hash set to keep track of characters. Requirements: - The function should be named `longest_unique_substring`. - The function should take one argument: - `s`: A string consisting of ASCII characters. - The function should return an integer representing the length of the longest substring with all unique characters. Example: ```python def longest_unique_substring(s): char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length # Test case s = \\"abcabcbb\\" output = longest_unique_substring(s) print(output) # Expected output: 3, because the longest substring with unique characters is \\"abc\\" ```","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You\'ve been tasked with creating a function that simulates the growth of a population of bacteria. The population doubles every specified number of hours, and you will visualize this growth using the `matplotlib` library. You need to follow these steps: 1. Define the function `plot_bacterial_growth(initial_population, growth_interval_hours, total_hours)`. 2. Generate a list of time points from 0 to `total_hours` inclusive, at intervals of the `growth_interval_hours`. 3. Compute the population size at each time point, assuming it doubles each `growth_interval_hours`. 4. Plot the time points versus the corresponding population sizes using `matplotlib.pyplot.plot`. 5. Set the title of the plot using `matplotlib.pyplot.title`. 6. Label the x-axis as \\"Time (hours)\\" using `matplotlib.pyplot.xlabel`. 7. Label the y-axis as \\"Population\\" using `matplotlib.pyplot.ylabel`. 8. Display the plot using `matplotlib.pyplot.show`. Function Signature: ```python def plot_bacterial_growth(initial_population, growth_interval_hours, total_hours): pass ``` # Constraints: - `initial_population` is a positive integer representing the starting population of bacteria. - `growth_interval_hours` is a positive integer representing the interval (in hours) at which the population doubles. - `total_hours` is a positive integer representing the total duration (in hours) over which the population growth should be observed. # Example: ```python plot_bacterial_growth(100, 2, 12) ``` This will plot a graph showing how a population of 100 bacteria, growing at a rate of doubling every 2 hours, evolves over a period of 12 hours. Make sure your implementation effectively uses the following `matplotlib.pyplot` functions: - `matplotlib.pyplot.plot` - `matplotlib.pyplot.title` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel`","solution":"import matplotlib.pyplot as plt def plot_bacterial_growth(initial_population, growth_interval_hours, total_hours): Plots the growth of a bacteria population over time using matplotlib. Parameters: initial_population (int): The starting population of bacteria. growth_interval_hours (int): The number of hours after which the population doubles. total_hours (int): The total duration over which the population is observed. # Step 2: Generate the list of time points from 0 to total_hours at intervals of growth_interval_hours time_points = list(range(0, total_hours + 1, growth_interval_hours)) # Step 3: Compute the population size at each time point populations = [initial_population * (2 ** (t // growth_interval_hours)) for t in time_points] # Step 4: Plot the time points versus the corresponding population sizes plt.plot(time_points, populations) # Step 5: Set the title of the plot plt.title(\'Bacterial Growth Over Time\') # Step 6: Label the x-axis plt.xlabel(\'Time (hours)\') # Step 7: Label the y-axis plt.ylabel(\'Population\') # Step 8: Display the plot plt.show()"},{"question":"Your task is to implement a function called `unique_paths_with_obstacles` that calculates the number of unique paths from the top-left corner to the bottom-right corner of a grid, where some cells contain obstacles. This problem will help you understand dynamic programming techniques, particularly how to handle grid-based problems with constraints. # Instructions: - You need to create a function `unique_paths_with_obstacles(grid)` that performs the following tasks: - Takes a 2D list `grid` as input, where `grid[i][j]` is `1` if there is an obstacle in the cell `(i, j)` and `0` otherwise. - Calculates the number of unique paths from the top-left corner `(0, 0)` to the bottom-right corner `(m-1, n-1)`, avoiding obstacles. - Returns the number of unique paths. # Function Signature: ```python def unique_paths_with_obstacles(grid): Calculate the number of unique paths in a grid with obstacles. Parameters: grid (List[List[int]]): The input grid with obstacles. Returns: int: The number of unique paths from the top-left to bottom-right corner. ``` # Example Usage: ```python # Define a sample grid with obstacles grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] # Calculate the number of unique paths num_paths = unique_paths_with_obstacles(grid) print(\\"Number of Unique Paths:\\", num_paths) # Output: 2 ``` # Requirements: 1. The function should be optimized to handle large grids efficiently, taking into account the presence of obstacles. 2. Use dynamic programming to build up the solution by iterating through the grid and updating the number of paths to each cell based on its neighbors. 3. If the starting cell `(0, 0)` or destination cell `(m-1, n-1)` contains an obstacle, the function should return `0` as no path is possible. 4. Avoid modifying the input grid directly; use a separate data structure if necessary to store the number of paths. # Notes: - Consider edge cases such as minimal grid sizes and grids fully blocked by obstacles. - The function `unique_paths_with_obstacles` should be the only function you implement, encapsulating all necessary behavior.RELATED","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths in a grid with obstacles. Parameters: grid (List[List[int]]): The input grid with obstacles. Returns: int: The number of unique paths from the top-left to bottom-right corner. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Example usage grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] num_paths = unique_paths_with_obstacles(grid) print(\\"Number of Unique Paths:\\", num_paths) # Output: 2"},{"question":"# You are given a list of integers, `lst`, and an integer `k`. Your task is to implement a function `find_kth_largest` that finds the `k`-th largest element in the list. The function should return the `k`-th largest element if `k` is valid, otherwise it should return `None`. The function should follow these steps: 1. Check if `k` is within the valid range (1 to length of the list). 2. If valid, sort the list in descending order. 3. Return the element at the `k-1` index position of the sorted list. 4. If `k` is not valid, return `None`. **Function Signature:** ```python def find_kth_largest(lst: list, k: int) -> int: ``` **Requirements:** - You must use Python\'s built-in sorting functions. - You must handle edge cases where `k` is out of range. # Example: ```python # Sample input lst = [3, 2, 1, 5, 6, 4] k = 2 # Running the function result = find_kth_largest(lst, k) # Expected output: 5 ``` Using this information, implement the `find_kth_largest` function as described.","solution":"def find_kth_largest(lst, k): Returns the k-th largest element in the list. If k is out of range, returns None. if k < 1 or k > len(lst): return None sorted_lst = sorted(lst, reverse=True) return sorted_lst[k-1]"},{"question":"Context: You are given a string that represents a mathematical expression. The expression consists of integers, addition (`+`), and multiplication (`*`). There are no parentheses or spaces in the string. Your task is to evaluate this mathematical expression following the standard precedence rules (i.e., multiplication before addition). Task: Write a function `evaluate_expression(expr: str) -> int` that takes in a string `expr` representing a mathematical expression and returns the evaluated result as an integer. - The expression string contains only integers, `+`, and `*` operators. - The function must follow the standard operator precedence (i.e., multiplication before addition). Example: ```python assert evaluate_expression(\\"3+2*2\\") == 7 assert evaluate_expression(\\"2*3+5\\") == 11 assert evaluate_expression(\\"6+4*3+2\\") == 20 assert evaluate_expression(\\"10*10+10\\") == 110 ``` Requirements: - Design your function to handle any valid input expression composed of integers, `+`, and `*`. - Ensure the function respects the precedence rules for operators. - Avoid using `eval` to directly evaluate the expression.","solution":"def evaluate_expression(expr: str) -> int: Evaluates a mathematical expression string with + and * operators. Parameters: expr (str): The input mathematical expression. Returns: int: The result of evaluating the expression. # Split the expression into terms based on \'+\' terms = expr.split(\'+\') # Evaluate each term, which may contain \'*\' term_results = [] for term in terms: # Split the term into factors based on \'*\' factors = term.split(\'*\') # Convert each factor to an integer and compute the product product = 1 for factor in factors: product *= int(factor) term_results.append(product) # Sum all term results result = sum(term_results) return result"},{"question":"# Rotate Matrix in Place Matrix rotation is a common operation in computer science and image processing. Given an NxN matrix, rotate the matrix 90 degrees clockwise in place. For this challenge, you will create a function called `rotate_matrix` to perform the rotation. # Task Write a function `rotate_matrix(matrix)` that: 1. Accepts a 2-dimensional list `matrix` where each element is a list of integers. 2. Rotates the matrix 90 degrees clockwise in place. 3. Returns the rotated matrix. # Guidelines - Do not use any extra space for another matrix. - The matrix will always be square (NxN). - You may assume that the given matrix contains only integers. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Example: Given the following 3x3 matrix: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = rotate_matrix(matrix) print(rotated_matrix) ``` The function should return the rotated matrix: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Given the following 4x4 matrix: ```python matrix = [ [ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] rotated_matrix = rotate_matrix(matrix) print(rotated_matrix) ``` The function should return the rotated matrix: ```python [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` # References - Matrix Manipulation and Rotation in Algorithms and Data Structures - Guidelines for in-place matrix transformations","solution":"def rotate_matrix(matrix): Rotates an NxN matrix 90 degrees clockwise in place. n = len(matrix) # First transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"You are given a list of integers representing the heights of students in a class. Your task is to implement a Python function `calculate_height_differences` that takes this list as input and returns a list of integers representing the absolute differences between the maximum height and each student\'s height. **Function Signature:** ```python def calculate_height_differences(heights: list) -> list: pass ``` # Example ```python _input = [150, 160, 155, 165] output = calculate_height_differences(_input) print(output) ``` **Expected Output:** ``` [15, 5, 10, 0] ``` # Explanation The maximum height in the given list is 165. The function should compute the absolute differences between this maximum value and each individual height in the list, thus the output for the provided example would be `[15, 5, 10, 0]`. # Constraints - The input list will contain at least one element. - All elements in the list will be positive integers. # Additional Notes - The function should handle lists containing multiple elements correctly. - Ensure that the order of elements in the output list corresponds to the order in the input list.","solution":"def calculate_height_differences(heights: list) -> list: Takes a list of integers representing the heights of students in a class and returns a list of integers representing the absolute differences between the maximum height and each student\'s height. :param heights: List of student heights :return: List of absolute differences between maximum height and each height max_height = max(heights) differences = [max_height - height for height in heights] return differences"},{"question":"The goal is to create a function named `schedule_meeting` which takes three integer inputs: `start_hour`, `meeting_duration`, and `break_duration`. This function should return a list of tuples representing possible meeting starting times within a 24-hour period. To determine the possible meeting times, follow these steps: 1. For a 24-hour period (from 0 to 23), calculate the possible starting hours. 2. Ensure that each meeting\'s start time allows for the full meeting duration before the start of the next meeting or the end of the 24-hour period. 3. Take into account the break duration between consecutive meetings. 4. Return a list of tuples where each tuple contains the starting and ending hour of a possible meeting. Function Signature ```python def schedule_meeting(start_hour: int, meeting_duration: int, break_duration: int) -> List[Tuple[int, int]]: ``` Example ```python >>> schedule_meeting(9, 2, 1) [(9, 11), (12, 14), (15, 17), (18, 20), (21, 23)] >>> schedule_meeting(0, 3, 2) [(0, 3), (5, 8), (10, 13), (15, 18), (20, 23)] ``` # Instructions - Consider a 24-hour clock starting from hour 0 to 23. - Ensure meetings do not overlap and enough break time is provided between consecutive meetings. - If a meeting\'s start time plus duration exceeds 24 hours, it should not be included in the list of possible starting times. - Assume valid integer inputs for hours, meeting duration, and break duration (no need to handle invalid or negative values).","solution":"from typing import List, Tuple def schedule_meeting(start_hour: int, meeting_duration: int, break_duration: int) -> List[Tuple[int, int]]: Generates a list of tuples representing possible meeting times within a 24-hour period. Each tuple contains the starting and ending hour of a possible meeting. :param start_hour: The starting hour for the first meeting. :param meeting_duration: The duration of each meeting. :param break_duration: The break duration between consecutive meetings. :return: List of tuples representing possible meeting start and end times within a 24-hour period. possible_meetings = [] hour = start_hour while hour + meeting_duration <= 24: end_hour = hour + meeting_duration possible_meetings.append((hour, end_hour)) hour += meeting_duration + break_duration return possible_meetings"},{"question":"Write a Python function named `find_largest_palindrome` that takes an integer parameter `n` and returns the largest palindrome number that can be obtained by multiplying two integers that each have `n` digits. A palindrome number is a number that reads the same forward and backward. For example, `9009` is a palindrome number. The function should return the largest palindrome product of two n-digit numbers, and if no such palindrome exists, return `None`. **Parameters:** - `n` (int): The number of digits of the integers to be multiplied. **Returns:** - `int` or `None`: The largest palindrome product of two n-digit numbers, or `None` if no palindrome exists. **Example:** ```python # Example usage result = find_largest_palindrome(2) print(result) # Example output: 9009 ``` **Constraints**: - Ensure that the function handles values of `n` as large as 3 or 4 efficiently.","solution":"def find_largest_palindrome(n): Finds the largest palindrome made from the product of two n-digit numbers. Parameters: n (int): The number of digits of the integers to be multiplied. Returns: int or None: The largest palindrome product of two n-digit numbers, or None if no palindrome exists. if n <= 0: return None max_value = 10**n - 1 min_value = 10**(n - 1) max_palindrome = None for i in range(max_value, min_value - 1, -1): for j in range(i, min_value - 1, -1): product = i * j if str(product) == str(product)[::-1]: # Check if product is a palindrome if max_palindrome is None or product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"You are required to write a Python function called `char_frequency_encoder` that takes a single string parameter and returns its character frequency encoding as a compressed string. **Context:** Character frequency encoding is a method of compressing a string by counting the consecutive occurrences of each character. If a character only appears once consecutively, it is represented by the character itself. If a character appears multiple times consecutively, it is represented by the character followed by the number of times it appears. **Steps to Achieve This:** 1. Initialize an empty string to store the encoded result. 2. Iterate over the input string and count the number of consecutive occurrences of each character. 3. Append the character and its count (if greater than 1) to the encoded result. 4. Return the final encoded string. **Function Signature:** ```python def char_frequency_encoder(s: str) -> str: # Your code goes here ``` **Example:** ```python >>> s = \\"aaabbcccdda\\" >>> encoded_string = char_frequency_encoder(s) >>> print(\\"Encoded String:\\", encoded_string) Encoded String: \\"a3b2c3d2a1\\" >>> s = \\"xyz\\" >>> encoded_string = char_frequency_encoder(s) >>> print(\\"Encoded String:\\", encoded_string) Encoded String: \\"xyz\\" ``` **Requirements:** - Ensure the function handles both upper and lower case letters. - Ensure the function accommodates edge cases, such as empty strings or strings with a single character. - The function should run efficiently for strings of varying lengths.","solution":"def char_frequency_encoder(s: str) -> str: Encodes the input string using character frequency encoding. Args: s (str): The input string to encode. Returns: str: The encoded string. if not s: return \\"\\" encoded_string = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_string += s[i - 1] + (str(count) if count > 1 else \\"\\") count = 1 # Append the last character and its count encoded_string += s[-1] + (str(count) if count > 1 else \\"\\") return encoded_string"},{"question":"**Objective:** You are required to write a function `calculate_statistics()` that reads a dataset from a CSV file titled `\'sports_data.csv\'`. The CSV file contains information related to various sports events, including features like event names, athlete names, scores, and countries. Your function should fetch the data, clean it by handling missing values, and compute basic statistics for each numeric feature. The function should return the results in a structured format as a dictionary containing the following statistics for each numeric feature: 1. Mean 2. Median 3. Standard Deviation 4. Minimum Value 5. Maximum Value **Function Signature:** ```python def calculate_statistics() -> Dict[str, Dict[str, float]]: ``` **Tasks:** 1. Use the `pandas` library to read the CSV file (`\'sports_data.csv\'`). Ensure that missing values are represented by `NaN`. 2. Identify the numeric features in the dataset. 3. Compute and store the following statistics for each numeric feature: - Mean - Median - Standard Deviation - Minimum Value - Maximum Value 4. Return a dictionary where the keys are the feature names and the values are dictionaries containing the computed statistics with keys `\'mean\'`, `\'median\'`, `\'std_dev\'`, `\'min\'`, and `\'max\'`. **Input/Output:** *Input*: None (the function reads from the file directly). *Output*: A dictionary `statistics` where each key is a feature name and the value is another dictionary containing the computed statistics for that feature. ```python from typing import Dict import pandas as pd def calculate_statistics() -> Dict[str, Dict[str, float]]: # Your implementation here ``` **Required Libraries**: - `pandas.read_csv` - `pandas.DataFrame.describe` - `numpy.nan` (for missing values handling)","solution":"from typing import Dict import pandas as pd def calculate_statistics() -> Dict[str, Dict[str, float]]: # Read the dataset df = pd.read_csv(\'sports_data.csv\') # Handle missing values by dropping rows with missing values df_cleaned = df.dropna() # Identify numeric features numeric_features = df_cleaned.select_dtypes(include=[\'number\']) # Calculate the statistics statistics = {} for feature in numeric_features.columns: statistics[feature] = { \'mean\': df_cleaned[feature].mean(), \'median\': df_cleaned[feature].median(), \'std_dev\': df_cleaned[feature].std(), \'min\': df_cleaned[feature].min(), \'max\': df_cleaned[feature].max() } return statistics"},{"question":"Create a function that accepts a list of strings and returns a dictionary where: - The keys are the first letters of the strings. - The values are lists of strings from the input list that start with the corresponding key letter, maintaining their original order. The function should be case-insensitive, meaning \'a\' and \'A\' should be treated as the same key. The input list may contain duplicate strings, which should be included in the output as well. The function signature should be: ``` def categorize_strings(strings_list): ``` Example: ``` Input: [\'Apple\', \'banana\', \'apricot\', \'Blueberry\', \'cherry\', \'Avocado\', \'Cabbage\'] Output: {\'a\': [\'Apple\', \'apricot\', \'Avocado\'], \'b\': [\'banana\', \'Blueberry\'], \'c\': [\'cherry\', \'Cabbage\']} ```","solution":"def categorize_strings(strings_list): Categorizes strings based on their first letter, case-insensitively. Args: - strings_list: List of strings Returns: - Dict where keys are first letters and values are lists of strings starting with that letter. categorized_dict = {} for string in strings_list: # Get the first letter and make it lower case first_letter = string[0].lower() if first_letter not in categorized_dict: categorized_dict[first_letter] = [] categorized_dict[first_letter].append(string) return categorized_dict"},{"question":"In this problem, you are required to write a function `fetch_weather_data(city_name, date_list)` that retrieves weather data from an external API. Specifically, the function should interact with the OpenWeatherMap API to fetch weather information for the specified city on the given dates. The function should return the weather data in JSON format. You will use the `requests` library, particularly the `requests.get` function, to send HTTP GET requests to the API endpoint `https://api.openweathermap.org/data/2.5/onecall/timemachine`, passing the required parameters. # Function Signature ```python def fetch_weather_data(city_name: str, date_list: Union[str, List[str]]) -> Union[Dict, List[Dict]]: ``` # Parameters - `city_name`: A string representing the name of the city. - `date_list`: A string or a list of strings representing the dates in \'YYYY-MM-DD\' format. # Returns - A dictionary or list of dictionaries containing the weather information. # Example ```python >>> fetch_weather_data(\'London\', \'2021-06-21\') {\'current\': {\'temp\': 288.55, \'weather\': [{\'description\': \'clear sky\'}], ...}, ...} >>> fetch_weather_data(\'London\', [\'2021-06-21\', \'2021-06-22\']) [{\'current\': {\'temp\': 288.55, \'weather\': [{\'description\': \'clear sky\'}], ...}, ...}, ...] ``` To achieve this, consider the following steps: 1. Determine the latitude and longitude of the city by making an initial API request to the OpenWeatherMap Geocoding API. 2. Convert each date in `date_list` into a UNIX timestamp. 3. Construct the URL for the GET request for each date. 4. Use the `requests.get` method to send the GET requests. 5. Parse and return the JSON responses. **Make sure to handle the input such that if `date_list` is a single string, it should be converted to a list containing that single string before proceeding with generating timestamps and constructing the query parameters.** **Note**: You will need an API key from OpenWeatherMap to access their API.","solution":"import requests from datetime import datetime from typing import Union, List, Dict API_KEY = \'your_api_key_here\' def fetch_weather_data(city_name: str, date_list: Union[str, List[str]]) -> Union[Dict, List[Dict]]: Fetches weather data for the specified city and dates. Parameters: city_name: A string representing the name of the city. date_list: A string or a list of strings representing the dates in \'YYYY-MM-DD\' format. Returns: A dictionary or list of dictionaries containing the weather information. if isinstance(date_list, str): date_list = [date_list] # Step 1: Get latitude and longitude for the city geocode_url = \\"http://api.openweathermap.org/geo/1.0/direct\\" geocode_params = { \'q\': city_name, \'limit\': 1, \'appid\': API_KEY } response = requests.get(geocode_url, params=geocode_params) response.raise_for_status() city_data = response.json() if not city_data: raise ValueError(f\\"City \'{city_name}\' not found.\\") lat, lon = city_data[0][\'lat\'], city_data[0][\'lon\'] weather_data_list = [] for date_str in date_list: # Step 2: Convert date to UNIX timestamp date_obj = datetime.strptime(date_str, \'%Y-%m-%d\') timestamp = int(date_obj.timestamp()) # Step 3: Construct the URL for the weather data weather_url = \\"https://api.openweathermap.org/data/2.5/onecall/timemachine\\" weather_params = { \'lat\': lat, \'lon\': lon, \'dt\': timestamp, \'appid\': API_KEY } # Step 4: Send GET request to fetch weather data response = requests.get(weather_url, params=weather_params) response.raise_for_status() weather_data = response.json() weather_data_list.append(weather_data) # Return a single dictionary if only one date was requested if len(date_list) == 1: return weather_data_list[0] return weather_data_list"},{"question":"Create a function named `array_divisors` that takes a list of integers called `numbers` as input and returns a dictionary. The keys in the dictionary should be each unique element from the input list, and the value for each key should be a list of all integers from the input list that are divisible by that key. The function should follow this signature: ```python def array_divisors(numbers): Constructs a dictionary with each unique element in the input list as keys and lists of numbers divisible by that element as values. Args: numbers (list): A list of integers. Returns: dict: A dictionary where each key is a unique element from the input list, and each value is a list of integers from the input list that are divisible by the key. ``` For example: ```python array_divisors([2, 3, 4, 6, 8, 9]) # Could return {2: [2, 4, 6, 8], 3: [3, 6, 9], 4: [4, 8], 6: [6], 8: [8], 9: [9]} array_divisors([5, 10, 15, 20, 25]) # Could return {5: [5, 10, 15, 20, 25], 10: [10, 20], 15: [15], 20: [20], 25: [25]} ```","solution":"def array_divisors(numbers): Constructs a dictionary with each unique element in the input list as keys and lists of numbers divisible by that element as values. Args: numbers (list): A list of integers. Returns: dict: A dictionary where each key is a unique element from the input list, and each value is a list of integers from the input list that are divisible by the key. divisors_dict = {} unique_numbers = set(numbers) for num in unique_numbers: divisors_dict[num] = [i for i in numbers if i % num == 0] return divisors_dict"},{"question":"In this problem, you are tasked with writing a function that determines whether a given positive integer has alternating odd and even digits. This exercise will help you understand fundamental control flow in Python and string manipulation. # Function Signature ```python def has_alternating_digits(number): # Your code here ``` # Input: 1. `number`: A positive integer. # Output: Return `True` if the digits of the number alternate between odd and even. Otherwise, return `False`. # Example: ```python result1 = has_alternating_digits(1234) result2 = has_alternating_digits(2845) result3 = has_alternating_digits(13579) result4 = has_alternating_digits(2468) result5 = has_alternating_digits(41352) ``` Expected Output: ```python result1 -> True # 1 (odd), 2 (even), 3 (odd), 4 (even) result2 -> True # 2 (even), 8 (even) - fails, hence False result3 -> False # All digits are odd result4 -> False # All digits are even result5 -> True # 4 (even), 1 (odd), 3 (odd) - fails, hence False ``` In this problem, you should convert the number to its string representation and then check each pair of consecutive digits to ensure they follow the required pattern of alternating odd and even.","solution":"def has_alternating_digits(number): Determines if the given number has alternating odd and even digits. Args: number (int): A positive integer. Returns: bool: True if the digits of the number alternate between odd and even, else False. number_str = str(number) for i in range(len(number_str) - 1): current_digit = int(number_str[i]) next_digit = int(number_str[i + 1]) # Check if both digits are either odd or even if (current_digit % 2 == next_digit % 2): return False return True"},{"question":"You have been provided with a series of logs recorded by a web server. Each log entry contains a timestamp in ISO 8601 format and the response time for handling a request. Your task is to write a function `analyze_response_time` that reads the log data from a given text file, parses the timestamps into a datetime format, and computes the average response time for each day of the week. Function signature: ```python def analyze_response_time(logfile: str) -> Dict[str, float]: ``` Parameters: - `logfile`: A string representing the filename or path of the text file containing the web server logs. Each line in the file represents a single log entry formatted as follows: \\"timestamp,response_time\\" Returns: - A dictionary where the keys are the days of the week (e.g., \\"Monday\\", \\"Tuesday\\", ...) and the values are the average response times for those days. Ensure the following: 1. The timestamp is parsed into a datetime object. 2. The average response time for each day of the week is calculated correctly. 3. The resulting dictionary is returned with the days of the week as keys in title case and average response times as floating point numbers. For example: ```python log_data = 2023-01-01T12:00:00Z,0.23 2023-01-02T14:30:00Z,0.45 2023-01-02T15:45:00Z,0.67 2023-01-03T09:10:00Z,0.34 with open(\'web_server_logs.txt\', \'w\') as f: f.write(log_data.strip()) average_response_times = analyze_response_time(\'web_server_logs.txt\') ``` This should return a dictionary with the average response times for each day of the week, for instance: ```python { \\"Sunday\\": 0.23, \\"Monday\\": 0.56, \\"Tuesday\\": 0.34 } ```","solution":"from datetime import datetime from collections import defaultdict from typing import Dict def analyze_response_time(logfile: str) -> Dict[str, float]: Analyzes the response time from log file and returns the average response time for each day of the week. Args: logfile: str: The path to the log file Returns: Dict[str, float]: Dictionary where keys are the days of the week and values are average response times day_response_times = defaultdict(list) with open(logfile, \'r\') as file: for line in file: timestamp_str, response_time_str = line.strip().split(\',\') timestamp = datetime.fromisoformat(timestamp_str.replace(\\"Z\\", \\"+00:00\\")) response_time = float(response_time_str) day_name = timestamp.strftime(\\"%A\\") day_response_times[day_name].append(response_time) average_response_times = {} for day, times in day_response_times.items(): average_response_times[day] = sum(times) / len(times) return average_response_times"},{"question":"You are asked to write a function `find_k_most_frequent_words(text: str, k: int) -> List[str]` that returns the `k` most frequent words in a given string `text`. If there are multiple words with the same frequency, the words should be sorted in lexicographical order. Words are defined as sequences of characters separated by spaces or punctuation marks. The output list should contain the words in decreasing order of their frequency. Use the `collections.Counter` for counting word frequencies and `heapq` for efficiently finding the top `k` elements. Here is an example of what the function call should look like and its expected output: ```python from collections import Counter import heapq def find_k_most_frequent_words(text: str, k: int) -> List[str]: # Your implementation here. pass # Example usage: text = \\"the day is sunny the the the sunny is is\\" k = 3 result = find_k_most_frequent_words(text, k) # Expected output: [\'the\', \'is\', \'sunny\'] ``` **Requirements**: - Ensure the function can handle text with various punctuation marks. - If multiple words have the same frequency, return them in lexicographical order. - Utilize `collections.Counter` for counting word frequencies. - Utilize `heapq` for finding the `k` most frequent elements.","solution":"from collections import Counter import heapq import re from typing import List def find_k_most_frequent_words(text: str, k: int) -> List[str]: # Define a regular expression to extract words. words = re.findall(r\'bw+b\', text.lower()) # Use Counter to count the frequencies of each word. frequency = Counter(words) # Use heapq to find the k most frequent words. # If two words have the same frequency, sort them lexicographically. most_frequent = heapq.nlargest(k, frequency.items(), key=lambda item: (item[1], -ord(item[0][0]))) # Extract and sort to ensure lexicographical order if frequencies are the same. result = [item[0] for item in sorted(most_frequent, key=lambda item: (-item[1], item[0]))] return result"},{"question":"Write a function that analyzes a text file containing a large number of strings. The function should read the text file and identify the string that appears the most frequently. In case of a tie (i.e., multiple strings appear at the highest frequency), the function should return the lexicographically smallest string among them. The function should accept: - file_path: Path to the input text file. The function should output: - A single string representing the most frequently appearing string or the lexicographically smallest string among those with the highest frequency. You should write self-contained code starting with: ``` def most_frequent_string(file_path: str) -> str: ```","solution":"def most_frequent_string(file_path: str) -> str: from collections import Counter with open(file_path, \'r\') as file: strings = file.read().split() frequency_count = Counter(strings) max_count = max(frequency_count.values()) most_frequent_strings = [string for string, count in frequency_count.items() if count == max_count] return min(most_frequent_strings)"},{"question":"In this problem, you need to implement a function called `translate_morse` that translates a given string into its corresponding Morse code. Morse code is a method of encoding text with dots (.) and dashes (-). Each letter corresponds to a unique sequence of dots and dashes. For example, the Morse code for \\"A\\" is \\".-\\" and for \\"B\\" is \\"-...\\". The function should adhere to the following requirements: 1. Implement the function `translate_morse(message)` that takes a string `message` as input. 2. The function should translate each letter in the `message` to its corresponding Morse code using the provided dictionary below. 3. Ignore punctuation and spaces in the input string. 4. Convert the input string to uppercase before translation, as the Morse code dictionary only contains uppercase letters. 5. Join the Morse codes for each letter with a single space. # Morse Code Dictionary ```python MORSE_CODE_DICT = { \'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\', \'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\', \'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\', \'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\', \'Y\': \'-.--\', \'Z\': \'--..\', \'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\', \'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\', \'0\': \'-----\' } ``` # Example: ```python def translate_morse(message): Translate the message to Morse code. MORSE_CODE_DICT = {} message = message.upper() encoded_message = \' \'.join(MORSE_CODE_DICT[char] for char in message if char in MORSE_CODE_DICT) return encoded_message # Examples assert translate_morse(\\"HELLO WORLD\\") == \\".... . .-.. .-.. --- .-- --- .-. .-.. -..\\" assert translate_morse(\\"SOS\\") == \\"... --- ...\\" assert translate_morse(\\"Python 3.9\\") == \\".--. -.-- - .... --- -. ...-- ----.\\" ``` # Tasks: 1. Implement the `translate_morse` function by using the provided dictionary for Morse code translations. 2. Ensure that punctuation and spaces are ignored in the input string. 3. Test the function with various examples provided. # Constraints: - The input string may contain letters, numbers, punctuation, and spaces. - Only letters and numbers should be translated to Morse code.","solution":"def translate_morse(message): Translate the message to Morse code. MORSE_CODE_DICT = {} message = message.upper() encoded_message = \' \'.join(MORSE_CODE_DICT[char] for char in message if char in MORSE_CODE_DICT) return encoded_message"},{"question":"In this problem, you are required to implement a function named `largest_contiguous_sum`. This function takes a single parameter `nums`, which is a list of integers. The task of this function is to find the largest sum of any contiguous subarray within the given list. Your implementation should be efficient and run in linear time, utilizing a well-known algorithmic approach called Kadane\'s Algorithm. Kadane\'s Algorithm involves iterating through the array while keeping track of the current maximum subarray sum ending at the current element and the overall maximum sum encountered so far. This is done by maintaining two variables: one for the local maximum sum (`current_sum`) which is reset when the sum turns negative, and another for the global maximum sum (`max_sum`). **Function Signature:** ```python def largest_contiguous_sum(nums: list[int]) -> int: ``` Your task is to implement the `largest_contiguous_sum` function according to the specifications described. Here\'s a simple example to clarify the expected output of your function: **Example:** ```python # Example input nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # Example output print(largest_contiguous_sum(nums)) # Output: 6 ``` In the above example, the largest contiguous subarray sum is `4 + (-1) + 2 + 1 = 6`.","solution":"def largest_contiguous_sum(nums: list[int]) -> int: Returns the largest sum of any contiguous subarray within the given list. Uses Kadane\'s Algorithm. if not nums: return 0 max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a Python function named `rotate_matrix` that performs an in-place rotation of a given `n x n` matrix by 90 degrees clockwise. The matrix will be provided as a list of lists, where each inner list represents a row of the matrix. Do not use any additional memory to create a new matrix; the rotation must be done within the original matrix. Your function should accept the following parameters: - `matrix`: a list of lists representing the `n x n` matrix of integers. # Requirements: 1. **Matrix Rotation**: Perform the rotation by updating the given `matrix` in place. Do not return a new matrix. 2. **In-place Operation**: The function should mutate the original `matrix` and not utilize extra space for another matrix. 3. **Handle Edge Cases**: Consider edge cases, such as a matrix with a single element or an empty matrix. # Example Calls: ```python # Example call 1 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Expected output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] # Example call 2 matrix = [ [1] ] rotate_matrix(matrix) print(matrix) # Expected output: # [ # [1] # ] ``` # Constraints: - The input matrix will always be a square matrix (`n x n`). - You may assume the matrix contains only integers.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix by 90 degrees clockwise in place. Parameters: matrix : list of list of int The n x n matrix to be rotated. n = len(matrix) # Transposing the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reversing each row to get the final rotated matrix for i in range(n): matrix[i].reverse()"},{"question":"You are tasked with implementing a function that numerically integrates a provided mathematical function over a specified range using the trapezoidal rule. The trapezoidal rule approximates the integral by dividing the area under the curve into trapezoids rather than rectangles. **Function Name:** `trapezoidal_integrate` **Inputs:** 1. `func` (function): A function that takes a single float argument and returns a float. 2. `a` (float): The lower bound of the integration interval. 3. `b` (float): The upper bound of the integration interval. 4. `n` (int): The number of trapezoids to use for the approximation. **Output:** - A float representing the approximate integral of the function `func` from `a` to `b`. **Requirements:** - The function should be named `trapezoidal_integrate`. - Use the trapezoidal rule to approximate the integral. - Split the interval ([a, b]) into `n` equal segments. - Compute the area of each trapezoid and sum them up to get the total integral. **Example:** ```python >>> def linear_func(x): ... return 2 * x + 1 >>> trapezoidal_integrate(linear_func, 0, 10, 100) 110.0 ``` **Hint:** - The width of each trapezoid is `(b - a) / n`. - The sum of the areas of the trapezoids is given by the formula: [ text{Integral} approx frac{(b - a)}{2n} left( f(a) + 2 sum_{i=1}^{n-1} fleft(a + i cdot hright) + f(b) right) ] where ( h = frac{(b - a)}{n} ).","solution":"def trapezoidal_integrate(func, a, b, n): Approximate the integral of `func` from `a` to `b` using the trapezoidal rule with `n` trapezoids. Parameters: func (function): A function that takes a single float argument and returns a float. a (float): The lower bound of the integration interval. b (float): The upper bound of the integration interval. n (int): The number of trapezoids to use for the approximation. Returns: float: The approximate integral of the function `func` from `a` to `b`. h = (b - a) / n integral = 0.5 * (func(a) + func(b)) for i in range(1, n): integral += func(a + i * h) integral *= h return integral"},{"question":"You are tasked with creating a function named `station_stats` that computes and displays statistics on the most popular stations and trips using a pandas DataFrame. The function should perform the following steps: 1. Find and print the most commonly used start station. 2. Find and print the most commonly used end station. 3. Find and print the most frequent combination of start station and end station trip. 4. Print the time taken to perform these calculations. You should use `time.time()` for measuring the computation time. Here\'s a starting template for your function: ```python import pandas as pd import time def station_stats(df): Displays statistics on the most popular stations and trip combinations. print(\'nCalculating The Most Popular Stations and Trip Combinations...n\') start_time = time.time() # TO DO: display the most commonly used start station common_start_station = df[\'Start Station\'].mode()[0] print(\'The most common start station: \', common_start_station) # TO DO: display the most commonly used end station common_end_station = df[\'End Station\'].mode()[0] print(\'The most common end station: \', common_end_station) # TO DO: display the most frequent combination of start station and end station trip df[\'trip\'] = df[\'Start Station\'] + \\" to \\" + df[\'End Station\'] common_trip = df[\'trip\'].mode()[0] print(\'The most common trip: \', common_trip) print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\' * 40) ``` # Input A pandas DataFrame `df` which has the following columns: - \'Start Station\': Strings representing the starting stations. - \'End Station\': Strings representing the ending stations. # Output The function should print: 1. The most common start station 2. The most common end station 3. The most common trip (start station to end station) 4. The time taken to perform these calculations # Example Input ```python data = {\'Start Station\': [\'A\', \'B\', \'A\', \'C\'], \'End Station\': [\'B\', \'C\', \'B\', \'A\']} df = pd.DataFrame(data) ``` # Example Output ``` Calculating The Most Popular Stations and Trip Combinations... The most common start station: A The most common end station: B The most common trip: A to B This took 0.001 seconds. ---------------------------------------- ``` Make sure to handle cases with ties in the mode values gracefully.","solution":"import pandas as pd import time def station_stats(df): Displays statistics on the most popular stations and trip combinations. print(\'nCalculating The Most Popular Stations and Trip Combinations...n\') start_time = time.time() # display the most commonly used start station common_start_station = df[\'Start Station\'].mode()[0] print(\'The most common start station: \', common_start_station) # display the most commonly used end station common_end_station = df[\'End Station\'].mode()[0] print(\'The most common end station: \', common_end_station) # display the most frequent combination of start station and end station trip df[\'trip\'] = df[\'Start Station\'] + \\" to \\" + df[\'End Station\'] common_trip = df[\'trip\'].mode()[0] print(\'The most common trip: \', common_trip) print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\' * 40)"},{"question":"You are tasked with writing a function that rearranges the characters in a string such that no two adjacent characters are the same. If such an arrangement is not possible, return an empty string. Implement the function to handle uppercase and lowercase letters as distinct characters, and consider the possibility of multiple valid rearrangements. **Function Signature:** ```python def rearrange_string(s): Rearrange the input string s such that no two adjacent characters are the same. Parameters: s (str): The input string. Returns: str: A rearranged string with no two adjacent characters being the same, or an empty string if impossible. ``` **Example Usage:** 1. If the input is `\'aab\'`, the function should return `\'aba\'`. 2. If the input is `\'aaab\'`, the function should return an empty string `\'\'`. 3. If the input is `\'abc\'`, the function should return `\'abc\'` (since the input string already satisfies the condition). 4. If the input is `\'aaabbc\'`, the function could return `\'abacab\'` or any valid permutation where no two adjacent characters are the same. **Requirements:** - Consider using heapq or a similar data structure to efficiently manage and retrieve the most frequent characters. - Ensure the function handles edge cases, such as empty strings or strings with one distinct character.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the input string s such that no two adjacent characters are the same. Parameters: s (str): The input string. Returns: str: A rearranged string with no two adjacent characters being the same, or an empty string if impossible. if not s: return \\"\\" # Count the frequency of each character char_count = Counter(s) # Use a max-heap to store characters by their frequencies max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" # If result length doesn\'t match input length, it\'s invalid return result_str"},{"question":"You are tasked with creating a basic command-line program that mimics a simple library system. The program should allow users to add books, view the list of books, and borrow books. You need to implement a class named `Library` with the following methods: 1. `add_book(self, book_title)`: This method should add a book to the library. The book should be stored in an internal list. 2. `borrow_book(self, book_title)`: This method should mark a book as borrowed if it exists in the library and hasn\'t been borrowed yet. If the book is already borrowed or doesn\'t exist, it should return an appropriate message. 3. `view_books(self)`: This method should return a list of strings, where each string represents a book in the library along with its borrowed status. Provide the implementation of the `Library` class with its methods and ensure that the program handles user inputs. Below is a basic structure of how your program should look: ```python class Library: def __init__(self): self.books = {} def add_book(self, book_title): # Your implementation here def borrow_book(self, book_title): # Your implementation here def view_books(self): # Your implementation here def main(): library = Library() while True: print(\\"Library System:\\") print(\\"1. Add Book\\") print(\\"2. Borrow Book\\") print(\\"3. View Books\\") print(\\"4. Exit\\") choice = input(\\"Enter your choice: \\") if choice == \'1\': book_title = input(\\"Enter the book title: \\") library.add_book(book_title) print(f\\"Book \'{book_title}\' added to the library.\\") elif choice == \'2\': book_title = input(\\"Enter the book title to borrow: \\") message = library.borrow_book(book_title) print(message) elif choice == \'3\': books = library.view_books() for book in books: print(book) elif choice == \'4\': print(\\"Exiting the library system.\\") break else: print(\\"Invalid choice! Please enter a valid option.\\") if __name__ == \'__main__\': main() ``` **Requirements:** 1. Implement the `add_book(self, book_title)` method to add books to the library. Ensure that a book can be added only once. 2. Implement the `borrow_book(self, book_title)` method to enable borrowing books. Ensure the method checks if the book is available and not already borrowed. 3. Implement the `view_books(self)` method to return the list of books with their borrowed status. Each book\'s status should indicate whether it is available or borrowed. **Example:** 1. If the user adds a book titled \\"Python Programming\\", it should be added to the library. 2. If the user tries to borrow the book \\"Python Programming\\", the system should indicate that the book is borrowed. 3. If the user tries to borrow the book \\"Python Programming\\" again, the system should indicate that the book is already borrowed. 4. If the user views books, the list should show \\"Python Programming - borrowed\\".","solution":"class Library: def __init__(self): self.books = {} def add_book(self, book_title): Adds a book to the library if it is not already present. if book_title not in self.books: self.books[book_title] = False # False indicates the book is not borrowed else: print(\\"Book already exists in the library.\\") def borrow_book(self, book_title): Marks a book as borrowed if it exists and is not already borrowed. if book_title in self.books: if not self.books[book_title]: self.books[book_title] = True return f\\"You have borrowed \'{book_title}\'.\\" else: return f\\"The book \'{book_title}\' is already borrowed.\\" else: return f\\"The book \'{book_title}\' does not exist in the library.\\" def view_books(self): Returns a list of strings representing book titles and their borrowed status. book_list = [] for title, is_borrowed in self.books.items(): status = \\"borrowed\\" if is_borrowed else \\"available\\" book_list.append(f\\"{title} - {status}\\") return book_list"},{"question":"You have been given a list of strings that represent various courses, and each string contains the course code and the course name separated by a colon. Your task is to write a function `organize_courses` that takes a list of such course strings as input and returns a dictionary where the keys are the course codes and the values are the corresponding course names. Here is the expected signature for your function: ```python def organize_courses(courses: list) -> dict: # Your code here ``` Example: Given the list `[\\"CS101:Introduction to Computer Science\\", \\"MATH202:Calculus II\\", \\"ENG105:Freshman English\\", \\"CS102:Data Structures\\"]`, the function would return: ```python { \\"CS101\\": \\"Introduction to Computer Science\\", \\"MATH202\\": \\"Calculus II\\", \\"ENG105\\": \\"Freshman English\\", \\"CS102\\": \\"Data Structures\\" } ``` Requirements: - Split each string at the colon to separate the course code from the course name. - Populate the dictionary with the course codes as keys and the course names as values. - Handle any leading or trailing spaces in the course code or name appropriately by stripping them. - Assume that the input list contains valid course strings.","solution":"def organize_courses(courses: list) -> dict: Organizes a list of course strings into a dictionary with course codes as keys and course names as values. Args: courses (list): A list of strings where each string contains a course code and a course name separated by a colon. Returns: dict: A dictionary with course codes as keys and the corresponding course names as values. course_dict = {} for course in courses: course_code, course_name = course.split(\':\') course_dict[course_code.strip()] = course_name.strip() return course_dict"},{"question":"Your task is to design a function and integrate it into a given Python program that processes a list of numbers to identify prime numbers and their positions. Here is what you need to do: 1. Implement the function `findPrimes()`. This function should take a list of integers as its input and return a list of tuples. Each tuple should contain a prime number from the input list and its corresponding index. 2. Integrate your `findPrimes` function within the main program so that it processes a predefined list of integers, finds the prime numbers along with their indices, and prints the result in a specified format. Here\'s the template for your solution: ```python def isPrime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def findPrimes(numbers): # Your implementation here pass def main(): print(\'nWelcome to a prime number processor!n\') print(\'This program takes a predefined list of integers,\') print(\'identifies the prime numbers and their positions in the list,n\') print(\'and prints this information out in the specified format.n\') numbers = [11, 15, 18, 22, 29, 31, 6, 7, 37, 40, 41] prime_positions = findPrimes(numbers) print(\'Prime numbers and their positions:\') for prime, index in prime_positions: print(f\'Prime number {prime} found at index {index}\') if __name__ == \\"__main__\\": main() ``` **Implementation Requirements:** - The `findPrimes` function should use the provided `isPrime` helper function to check the primality of each number. - The function should return a list of tuples where each tuple contains a prime number and its index in the input list. **Output and Testing Instructions:** - Run the main program, and ensure that the output lists all prime numbers from the predefined list along with their indices. - Verify that the resulting output matches the format: \\"Prime number {prime} found at index {index}\\".","solution":"def isPrime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def findPrimes(numbers): result = [] for index, number in enumerate(numbers): if isPrime(number): result.append((number, index)) return result def main(): print(\'nWelcome to a prime number processor!n\') print(\'This program takes a predefined list of integers,\') print(\'identifies the prime numbers and their positions in the list,n\') print(\'and prints this information out in the specified format.n\') numbers = [11, 15, 18, 22, 29, 31, 6, 7, 37, 40, 41] prime_positions = findPrimes(numbers) print(\'Prime numbers and their positions:\') for prime, index in prime_positions: print(f\'Prime number {prime} found at index {index}\') if __name__ == \\"__main__\\": main()"},{"question":"** You are required to implement a basic neural network classifier using PyTorch to distinguish between two classes in a dataset. Visualize the accuracy and loss over training epochs using Matplotlib to understand the performance of your model. Follow the steps below to complete the task: 1. **Data Preparation**: - Generate a synthetic binary classification dataset with 1000 samples and 20 features using `sklearn.datasets.make_classification`. - Split the dataset into training and validation sets using `sklearn.model_selection.train_test_split`. 2. **Model Definition**: - Define a simple feedforward neural network with one hidden layer in PyTorch. - Use the ReLU activation function for the hidden layer and sigmoid for the output layer. 3. **Training Process**: - Set up the loss function (binary cross-entropy) and optimizer (SGD) in PyTorch. - Train the network for a specified number of epochs, and on each epoch, compute and store the training and validation loss and accuracy. 4. **Visualization**: - Plot the training and validation loss over epochs. - Plot the training and validation accuracy over epochs. - Use Matplotlib\'s `show` function to display the plots. Your task is to create a function called `binary_classifier_with_visualization` that follows these steps. The function should accept three parameters: `learning_rate`, `training_epochs`, and `batch_size`, and should display plots of loss and accuracy at the end of the training process. **Function Signature**: ```python def binary_classifier_with_visualization(learning_rate: float, training_epochs: int, batch_size: int) -> None: pass ``` **Requirements**: - Use `sklearn.datasets.make_classification` for data generation. - Use `sklearn.model_selection.train_test_split` for data splitting. - Use PyTorch for model definition, training, and evaluation. - Use Matplotlib for plotting results (`matplotlib.pyplot.show`). **","solution":"import torch import torch.nn as nn import torch.optim as optim import torch.utils.data as data from sklearn.datasets import make_classification from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler import matplotlib.pyplot as plt import numpy as np def binary_classifier_with_visualization(learning_rate: float, training_epochs: int, batch_size: int) -> None: # Generate synthetic binary classification dataset X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42) # Standardize the dataset scaler = StandardScaler() X = scaler.fit_transform(X) # Convert data to PyTorch tensors X = torch.tensor(X.astype(np.float32)) y = torch.tensor(y.astype(np.float32)).view(-1, 1) # Split the dataset into training and validation sets X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42) # Define PyTorch Dataset and DataLoader train_dataset = data.TensorDataset(X_train, y_train) val_dataset = data.TensorDataset(X_val, y_val) train_loader = data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True) val_loader = data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False) # Define the neural network model class Net(nn.Module): def __init__(self): super(Net, self).__init__() self.hidden = nn.Linear(20, 10) self.output = nn.Linear(10, 1) self.relu = nn.ReLU() self.sigmoid = nn.Sigmoid() def forward(self, x): x = self.relu(self.hidden(x)) x = self.sigmoid(self.output(x)) return x model = Net() # Define loss function and optimizer criterion = nn.BCELoss() optimizer = optim.SGD(model.parameters(), lr=learning_rate) # Training and validation process train_losses = [] val_losses = [] train_accuracies = [] val_accuracies = [] for epoch in range(training_epochs): # Training loop model.train() running_loss = 0.0 correct = 0 total = 0 for inputs, labels in train_loader: # Zero the parameter gradients optimizer.zero_grad() # Forward pass outputs = model(inputs) loss = criterion(outputs, labels) loss.backward() optimizer.step() # Track training loss and accuracy running_loss += loss.item() * inputs.size(0) predicted = (outputs > 0.5).float() total += labels.size(0) correct += (predicted == labels).sum().item() train_loss = running_loss / len(train_loader.dataset) train_accuracy = correct / total train_losses.append(train_loss) train_accuracies.append(train_accuracy) # Validation loop model.eval() running_loss = 0.0 correct = 0 total = 0 with torch.no_grad(): for inputs, labels in val_loader: outputs = model(inputs) loss = criterion(outputs, labels) # Track validation loss and accuracy running_loss += loss.item() * inputs.size(0) predicted = (outputs > 0.5).float() total += labels.size(0) correct += (predicted == labels).sum().item() val_loss = running_loss / len(val_loader.dataset) val_accuracy = correct / total val_losses.append(val_loss) val_accuracies.append(val_accuracy) print(f\'Epoch {epoch+1}/{training_epochs},\' f\' Train Loss: {train_loss:.4f}, Train Accuracy: {train_accuracy:.4f},\' f\' Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}\') # Plotting losses plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(train_losses, label=\'Training Loss\') plt.plot(val_losses, label=\'Validation Loss\') plt.title(\'Loss over epochs\') plt.xlabel(\'Epoch\') plt.ylabel(\'Loss\') plt.legend() # Plotting accuracies plt.subplot(1, 2, 2) plt.plot(train_accuracies, label=\'Training Accuracy\') plt.plot(val_accuracies, label=\'Validation Accuracy\') plt.title(\'Accuracy over epochs\') plt.xlabel(\'Epoch\') plt.ylabel(\'Accuracy\') plt.legend() plt.show()"},{"question":"You are tasked with performing data analysis on a collection of e-commerce transactions to identify the top selling products. You have a dataset containing transaction records, where each record consists of the following fields: transaction ID, transaction date, product ID, and quantity sold. Your goal is to write a Python function that identifies the top N selling products within a specified date range. Using the pandas library, read the transaction data from a CSV file and aggregate the quantity sold for each product within the given date range. Then, generate a list of the top N products based on the total quantity sold. You are required to write a function named `get_top_selling_products` that takes the following parameters: - `csv_file_path` (str): The file path of the CSV file containing the transaction records. - `start_date` (datetime.datetime): The starting date of the period. - `end_date` (datetime.datetime): The ending date of the period. - `top_n` (int): The number of top-selling products to return. The CSV file has the following structure: ``` transaction_id,transaction_date,product_id,quantity 1,2021-01-01,101,2 2,2021-01-01,102,1 3,2021-01-02,101,3 4,2021-01-03,103,2 ... ``` Your function should: 1. Read the transaction data from the CSV file. 2. Filter the records to include only those within the specified date range. 3. Aggregate the quantities sold for each product. 4. Identify the top N products based on the total quantity sold. 5. Return a list of tuples where each tuple contains a product ID and the corresponding total quantity sold, sorted in descending order. Ensure proper usage of the `datetime.datetime` and `pandas.read_csv` APIs as required. Below is the structure of the function: ```python import datetime import pandas as pd def get_top_selling_products(csv_file_path, start_date, end_date, top_n): # Your implementation here pass ```","solution":"import datetime import pandas as pd def get_top_selling_products(csv_file_path, start_date, end_date, top_n): # Read the CSV file df = pd.read_csv(csv_file_path, parse_dates=[\'transaction_date\']) # Filter the records to include only those within the specified date range mask = (df[\'transaction_date\'] >= start_date) & (df[\'transaction_date\'] <= end_date) df_filtered = df.loc[mask] # Aggregate the quantities sold for each product product_sales = df_filtered.groupby(\'product_id\')[\'quantity\'].sum().reset_index() # Sort products based on the total quantity sold in descending order top_selling_products = product_sales.sort_values(by=\'quantity\', ascending=False).head(top_n) # Return list of tuples with product ID and total quantity sold return list(top_selling_products.itertuples(index=False, name=None))"},{"question":"You are tasked with creating a function that computes the minimum steps required to reduce a given positive integer to 1. The allowed operations are: 1. If the number is divisible by 3, you may divide it by 3. 2. If the number is divisible by 2, you may divide it by 2. 3. Subtract 1 from the number. **Function Name:** `min_steps_to_one` **Parameters:** - `n` (int): A positive integer. Your function should: 1. Use dynamic programming to find the minimum number of steps required. 2. Create a list to store the minimum steps for each integer from 1 to `n`. 3. Iterate from 2 to `n`, determining the minimum steps for each number based on the previous computations. Return the computed minimum steps for the input number `n`. # [Example] Input: `n = 10` Output: `3` Explanation: - Start with `10` - Step 1: Subtract 1 to get `9` - Step 2: Divide by 3 to get `3` - Step 3: Divide by 3 to get `1` Therefore, the minimum steps required are `3`.","solution":"def min_steps_to_one(n): Compute the minimum steps required to reduce a given positive integer n to 1. Parameters: n (int): A positive integer. Returns: int: The minimum number of steps required to reduce the integer to 1. if n == 1: return 0 # Create a list to store the minimum steps for each integer from 1 to n dp = [0] * (n + 1) for i in range(2, n + 1): # Initialize the minimum steps to 1 more than the steps needed for i-1 dp[i] = dp[i - 1] + 1 # If i is divisible by 2, consider the steps needed for i // 2 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # If i is divisible by 3, consider the steps needed for i // 3 if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"**Write a function named `generate_employee_report` that takes a list of dictionaries representing employees and returns a summary report as a dictionary. Each employee dictionary contains the keys `name` (str), `department` (str), and `salary` (int). The summary report should include the total number of employees, the average salary, and a breakdown of employees by department. Parameters: - `employees` (list): A list of dictionaries, each representing an employee with `name`, `department`, and `salary`. The returned dictionary report should be structured as follows: ```python { \\"total_employees\\": int, # Total number of employees \\"average_salary\\": float, # Average salary of employees \\"departments\\": { # Breakdown of employees by department \\"department_name_1\\": number_of_employees, \\"department_name_2\\": number_of_employees, ... } } ``` **Example Usage:** ```python employees = [ {\\"name\\": \\"Alice\\", \\"department\\": \\"Engineering\\", \\"salary\\": 90000}, {\\"name\\": \\"Bob\\", \\"department\\": \\"HR\\", \\"salary\\": 60000}, {\\"name\\": \\"Charlie\\", \\"department\\": \\"Engineering\\", \\"salary\\": 85000}, {\\"name\\": \\"Dana\\", \\"department\\": \\"Marketing\\", \\"salary\\": 70000} ] summary_report = generate_employee_report(employees) print(summary_report) ``` **Expected Output:** ```python { \\"total_employees\\": 4, \\"average_salary\\": 76250.0, \\"departments\\": { \\"Engineering\\": 2, \\"HR\\": 1, \\"Marketing\\": 1 } } ``` **Constraints:** 1. No two employees will have the same name. 2. All salaries will be positive integers. 3. The function should handle an empty employee list by returning appropriate values (e.g., 0 for `total_employees`, 0.0 for `average_salary`, and an empty dictionary for `departments`).**","solution":"def generate_employee_report(employees): Generates a summary report from a list of employee dictionaries. Args: employees (list): A list of dictionaries, each representing an employee with \'name\', \'department\', and \'salary\'. Returns: dict: A summary report containing total number of employees, average salary, and breakdown of employees by department. total_employees = len(employees) if total_employees == 0: return { \\"total_employees\\": 0, \\"average_salary\\": 0.0, \\"departments\\": {} } total_salary = sum(employee[\\"salary\\"] for employee in employees) average_salary = total_salary / total_employees departments = {} for employee in employees: department = employee[\\"department\\"] if department not in departments: departments[department] = 0 departments[department] += 1 return { \\"total_employees\\": total_employees, \\"average_salary\\": average_salary, \\"departments\\": departments }"},{"question":"You are asked to implement a function that simulates a simple banking system transaction process. The function will handle deposits and withdrawals, maintaining a record of the current balance. You must ensure that each withdrawal does not exceed the available balance and that the user is informed appropriately if a withdrawal cannot be processed due to insufficient funds. The function will also print a summary of the transactions performed. Your function, `bank_transactions`, should take two parameters: - `initial_balance` (a float): The starting balance of the account. - `transactions` (a list of tuples): A list where each tuple represents a transaction. Each tuple contains a string (`\\"deposit\\"` or `\\"withdraw\\"`) and a float (the amount to be processed). The function should: 1. Initialize the current balance with the `initial_balance`. 2. Process each transaction in the `transactions` list in order: - For a deposit, add the amount to the current balance. - For a withdrawal, check if the withdrawal amount is less than or equal to the current balance: - If yes, subtract the amount from the current balance. - If no, print \\"Insufficient funds for withdrawal of amount\\". 3. Print a summary of the transactions processed, including the total deposits, total withdrawals, and the final balance. **Requirements:** - Ensure appropriate precision when printing monetary amounts (two decimal places). - Print the summary in an organized manner. Implement the function `bank_transactions(initial_balance, transactions)` accordingly. Example Call: ```python transactions = [ (\\"deposit\\", 50.0), (\\"withdraw\\", 30.0), (\\"withdraw\\", 100.0), (\\"deposit\\", 20.0) ] bank_transactions(100.0, transactions) ``` **Expected Output:** ``` Transaction Summary: Total Deposits: 70.00 Total Withdrawals: 30.00 Final Balance: 140.00 Insufficient funds for withdrawal of 100.00 ```","solution":"def bank_transactions(initial_balance, transactions): Simulates a simple banking system transaction process. Parameters: initial_balance (float): The starting balance of the account. transactions (list of tuples): A list of transactions where each tuple contains a transaction type (\'deposit\' or \'withdraw\') and an amount (float). Returns: None current_balance = initial_balance total_deposits = 0.0 total_withdrawals = 0.0 for transaction in transactions: transaction_type, amount = transaction if transaction_type == \\"deposit\\": current_balance += amount total_deposits += amount elif transaction_type == \\"withdraw\\": if amount <= current_balance: current_balance -= amount total_withdrawals += amount else: print(f\\"Insufficient funds for withdrawal of {amount:.2f}\\") print(\\"Transaction Summary:\\") print(f\\"Total Deposits: {total_deposits:.2f}\\") print(f\\"Total Withdrawals: {total_withdrawals:.2f}\\") print(f\\"Final Balance: {current_balance:.2f}\\")"},{"question":"In this problem, we will explore polynomial feature expansion and its effect on a regression model\'s performance. Polynomial features allow us to fit more complex, non-linear relationships by raising the features to a specified degree. The `PolynomialFeatures` class from the `sklearn.preprocessing` module can be used for this purpose. You are given a dataset with features `X` and target values `y`. Your task is to write a function `polynomial_feature_expansion` that: 1. Expands the features to a specified polynomial degree. 2. Trains a linear regression model on the expanded features. 3. Evaluates the model performance using Mean Squared Error (MSE). Function signature: ```python def polynomial_feature_expansion(X: np.ndarray, y: np.ndarray, degree: int) -> float: pass ``` You can use the following helper function to compute the Mean Squared Error: ```python from sklearn.metrics import mean_squared_error def compute_mse(model, X, y): predictions = model.predict(X) return mean_squared_error(y, predictions) ``` The function should: - Use `PolynomialFeatures` to transform `X` to the specified polynomial degree. - Train a `LinearRegression` model on the transformed features. - Return the MSE of the model on the training data. Note: You may assume that `X` and `y` are correctly preprocessed and do not contain null values or require scaling. Example usage: ```python X = np.array([[1], [2], [3], [4], [5]]) y = np.array([1.2, 1.9, 3.2, 3.8, 5.1]) degree = 2 print(polynomial_feature_expansion(X, y, degree)) # Output: (a float representing the MSE) ```","solution":"import numpy as np from sklearn.preprocessing import PolynomialFeatures from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def compute_mse(model, X, y): predictions = model.predict(X) return mean_squared_error(y, predictions) def polynomial_feature_expansion(X: np.ndarray, y: np.ndarray, degree: int) -> float: # Step 1: Expand the features to the specified polynomial degree poly = PolynomialFeatures(degree) X_poly = poly.fit_transform(X) # Step 2: Train a Linear Regression model on the expanded features model = LinearRegression() model.fit(X_poly, y) # Step 3: Evaluate the model using Mean Squared Error (MSE) mse = compute_mse(model, X_poly, y) return mse"},{"question":"You are tasked with creating a simple ticket reservation system for a theater using the `collections` library in Python. This system will keep track of available and reserved seats. Write a function `reserve_seat(theater: dict, row: str, seat: int) -> str` that attempts to reserve a specific seat in a given row of the theater. 1. **Function Signature:** ```python def reserve_seat(theater: dict, row: str, seat: int) -> str: ``` 2. **Parameters:** - `theater` (dict): A dictionary representing the seating arrangement in the theater. The keys are strings representing the row names, and the values are lists of integers where 0 represents an available seat and 1 represents a reserved seat. - `row` (str): The row in which you want to reserve a seat. - `seat` (int): The specific seat number in the row to reserve. 3. **Behavior:** - If the specified row does not exist in the theater dictionary, return the string: `\\"Row not found\\"`. - If the specified seat number is out of range for the given row, return the string: `\\"Seat number out of range\\"`. - If the seat is already reserved (value is `1`), return the string: `\\"Seat already reserved\\"`. - If the seat is available (value is `0`), reserve it by setting the value to `1` and return the string: `\\"Seat reserved successfully\\"`. **Example:** ```python theater = { \'A\': [0, 0, 1, 0], \'B\': [1, 0, 0, 0], \'C\': [0, 1, 0, 1] } # Reserving a seat result = reserve_seat(theater, \'A\', 1) print(result) # Output: \\"Seat reserved successfully\\" result = reserve_seat(theater, \'A\', 2) print(result) # Output: \\"Seat already reserved\\" result = reserve_seat(theater, \'D\', 3) print(result) # Output: \\"Row not found\\" result = reserve_seat(theater, \'A\', 5) print(result) # Output: \\"Seat number out of range\\" ```","solution":"def reserve_seat(theater: dict, row: str, seat: int) -> str: Attempts to reserve a specific seat in a given row of the theater. Args: theater (dict): A dictionary representing the seating arrangement in the theater. row (str): The row in which you want to reserve a seat. seat (int): The specific seat number in the row to reserve. Returns: str: The result of the reservation attempt. if row not in theater: return \\"Row not found\\" if seat < 0 or seat >= len(theater[row]): return \\"Seat number out of range\\" if theater[row][seat] == 1: return \\"Seat already reserved\\" theater[row][seat] = 1 return \\"Seat reserved successfully\\""},{"question":"You are given a list of dictionaries where each dictionary represents a book in a library catalog. Each dictionary has the following keys: \\"Title\\", \\"Author\\", \\"Genre\\", and \\"Year\\". Your task is to write a function named `library_catalog_statistics` that computes and prints the following statistics: 1. The total number of books in the catalog. 2. The number of unique authors. 3. The most common genre. 4. The range of publication years (e.g., \\"2000 - 2021\\"). Additionally, the function should measure and print the time taken to compute these statistics in seconds. Implement the `library_catalog_statistics(catalog)` function with the following specifications: - It takes one argument `catalog`, which is a list of dictionaries containing the library catalog data. - It prints the total number of books, number of unique authors, most common genre, range of publication years, and the time taken to compute these statistics. **Example Input:** ```python catalog = [ {\\"Title\\": \\"Book1\\", \\"Author\\": \\"Author1\\", \\"Genre\\": \\"Fiction\\", \\"Year\\": 2010}, {\\"Title\\": \\"Book2\\", \\"Author\\": \\"Author2\\", \\"Genre\\": \\"Science\\", \\"Year\\": 2015}, {\\"Title\\": \\"Book3\\", \\"Author\\": \\"Author1\\", \\"Genre\\": \\"Fiction\\", \\"Year\\": 2018}, {\\"Title\\": \\"Book4\\", \\"Author\\": \\"Author3\\", \\"Genre\\": \\"Science\\", \\"Year\\": 2020}, {\\"Title\\": \\"Book5\\", \\"Author\\": \\"Author4\\", \\"Genre\\": \\"History\\", \\"Year\\": 2012}, ] ``` **Function Signature:** ```python def library_catalog_statistics(catalog): # your code here ``` **Example Output:** ``` Calculating Library Catalog Statistics... Total number of books: 5 Number of unique authors: 4 Most common genre: Fiction Year range: 2010 - 2020 This took 0.000456 seconds. ---------------------------------------- ```","solution":"import time from collections import Counter def library_catalog_statistics(catalog): This function prints various statistics of the library catalog. Parameters: catalog (list of dict): A list of dictionaries, each representing a book. Statistics printed include: - The total number of books. - The number of unique authors. - The most common genre. - The range of publication years. It also prints the time taken to compute the statistics. start_time = time.time() print(\\"Calculating Library Catalog Statistics...n\\") total_books = len(catalog) unique_authors = len(set(book[\'Author\'] for book in catalog)) genres = [book[\'Genre\'] for book in catalog] most_common_genre = Counter(genres).most_common(1)[0][0] if genres else None years = [book[\'Year\'] for book in catalog] year_range = f\\"{min(years)} - {max(years)}\\" if years else \\"N/A\\" end_time = time.time() elapsed_time = end_time - start_time print(f\\"Total number of books: {total_books}\\") print(f\\"Number of unique authors: {unique_authors}\\") print(f\\"Most common genre: {most_common_genre}\\") print(f\\"Year range: {year_range}n\\") print(f\\"This took {elapsed_time:.6f} seconds.\\") print(\\"----------------------------------------\\")"},{"question":"You are tasked with implementing a function that evaluates the fitness of a solution using a well-known benchmark function in the domain of continuous optimization, specifically the Rastrigin function. This function is known for its numerous local minima, making it a challenging function for optimization algorithms to navigate. The Rastrigin function is defined as: [ f(x) = 10n + sum_{i=1}^{n} left[ x_i^2 - 10 cdot cos(2 pi x_i) right] ] **Function Signature:** ```python def rastrigin_function(x: list) -> float: ``` **Parameters:** - `x`: A list of values (float type) that represents the decision variables. **Return:** - The computed value of the Rastrigin function as a float. **Requirements:** - Use the `math` library for calculations, specifically the functions `math.cos` and `math.pi`. - Ensure that your implementation efficiently handles the input to compute the function value. Here is the `math` library documentation for the required functions: - `math.cos(x)`: Returns the cosine of ( x ) (measured in radians). - `math.pi`: The mathematical constant ( pi ) (approximately 3.14159). **Example:** ```python x = [1.0, 2.0, -1.5] print(rastrigin_function(x)) # Expected output will vary depending on the calculation ``` Implement the `rastrigin_function` following the guidelines provided.","solution":"import math def rastrigin_function(x: list) -> float: Evaluate the Rastrigin function for a given list of decision variables. Parameters: x (list of float): List of decision variables. Returns: float: The calculated value of the Rastrigin function. n = len(x) return 10 * n + sum([xi**2 - 10 * math.cos(2 * math.pi * xi) for xi in x])"},{"question":"You are given a list of student names and their respective scores in three different subjects: Mathematics, Science, and English. Your task is to create a function that calculates the average score for each student and determines the grade based on the average score. The grading system is as follows: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 The function should output a dictionary with student names as keys and a tuple as values. Each tuple should contain the average score and corresponding grade. Implement a function named `calculate_grades(students_scores)` that takes in a list of dictionaries `students_scores`. Each dictionary contains the following keys: - `name`: The name of the student. - `Mathematics`: The score in Mathematics. - `Science`: The score in Science. - `English`: The score in English. The function should: 1. Iterate over the list of student scores. 2. Calculate the average score for each student. 3. Determine the grade based on the average score. 4. Return a dictionary with each student\'s name as the key and a tuple of their average score and grade as the value. Here is a sample input: ```python students_scores = [ {\\"name\\": \\"John Doe\\", \\"Mathematics\\": 85, \\"Science\\": 90, \\"English\\": 78}, {\\"name\\": \\"Jane Smith\\", \\"Mathematics\\": 92, \\"Science\\": 88, \\"English\\": 95}, {\\"name\\": \\"Emily Davis\\", \\"Mathematics\\": 58, \\"Science\\": 60, \\"English\\": 52} ] ``` And the expected output: ```python { \\"John Doe\\": (84.33, \'B\'), \\"Jane Smith\\": (91.67, \'A\'), \\"Emily Davis\\": (56.67, \'F\') } ``` Make sure to handle any potential edge cases, such as missing scores, by assuming a score of `0` for any missing subject. Also, ensure that the average scores are rounded to 2 decimal places. Include all necessary imports in your solution.","solution":"def calculate_grades(students_scores): def get_grade(average_score): if 90 <= average_score <= 100: return \'A\' elif 80 <= average_score < 90: return \'B\' elif 70 <= average_score < 80: return \'C\' elif 60 <= average_score < 70: return \'D\' else: return \'F\' students_grades = {} for student in students_scores: name = student[\\"name\\"] math_score = student.get(\\"Mathematics\\", 0) science_score = student.get(\\"Science\\", 0) english_score = student.get(\\"English\\", 0) average_score = (math_score + science_score + english_score) / 3 average_score = round(average_score, 2) grade = get_grade(average_score) students_grades[name] = (average_score, grade) return students_grades"},{"question":"You are required to write a Python function named `string_pattern_match` that utilizes the `re` (regular expression) library to perform specific operations on a given list of strings. This function aims to search for strings matching a certain pattern and return their positions in the list. Your task is to implement the following function: ```python def string_pattern_match(pattern, string_list): Finds the positions of strings in a list that match a given regular expression pattern. Parameters: pattern (str): The regular expression pattern to search for in the strings. string_list (list): The list of strings to be searched through. Returns: list: A list of indices representing the positions of the matching strings in the original list. pass ``` **Instructions:** 1. Import the `re` library, which provides support for regular expressions in Python. 2. Compile the provided `pattern` using `re.compile` to create a regex object. 3. Initialize an empty list to store the indices of strings that match the pattern. 4. Iterate through `string_list`, using the compiled regex object\'s `search` method to determine if a string matches the pattern. 5. If a string matches, append its index to the list of matching indices. 6. Return the list of indices at the end of the function. Here is an example of how the function can be used: ```python result = string_pattern_match(r\'^d{3}-d{2}-d{4}\', [\'123-45-6789\', \'987-65-4321\', \'123-456-7890\']) print(result) # Output: [0, 1] ``` In this example, the pattern `r\'^d{3}-d{2}-d{4}\'` matches strings in the format of a Social Security Number (SSN), and the function will return the indices of the strings in the list that match this pattern.","solution":"import re def string_pattern_match(pattern, string_list): Finds the positions of strings in a list that match a given regular expression pattern. Parameters: pattern (str): The regular expression pattern to search for in the strings. string_list (list): The list of strings to be searched through. Returns: list: A list of indices representing the positions of the matching strings in the original list. regex = re.compile(pattern) matching_indices = [] for index, string in enumerate(string_list): if regex.search(string): matching_indices.append(index) return matching_indices"},{"question":"Consider implementing a function `sort_by_frequency` to reorder the elements of a list based on the frequency of each element, followed by their appearance order when frequencies match. **Function Signature:** ```python def sort_by_frequency(elements): Sort elements by frequency and appearance order. Args: elements(List[int]): a list of integers. Returns: List[int]: a list of integers sorted by frequency, then by appearance order. ``` **Parameters:** - `elements` (List[int]): A list of integers to be sorted. **Instructions:** 1. Count the frequency of each element in the list. 2. Sort the elements by their frequency in descending order. 3. If two elements have the same frequency, maintain their original order of appearance. 4. Return the sorted list. **Example:** ```python elements = [4, 5, 6, 5, 4, 3] print(sort_by_frequency(elements)) # Output: [4, 4, 5, 5, 6, 3] elements = [1, 2, 2, 3, 3, 3] print(sort_by_frequency(elements)) # Output: [3, 3, 3, 2, 2, 1] ``` **Explanation:** In the first example, both 4 and 5 appear twice, so they are placed first in the order they appeared. The remaining numbers 6 and 3 appear once. In the second example, 3 appears three times, followed by 2 appearing twice, and finally 1 appearing once.","solution":"from collections import Counter def sort_by_frequency(elements): Sort elements by frequency and appearance order. Args: elements (List[int]): a list of integers. Returns: List[int]: a list of integers sorted by frequency, then by appearance order. frequency = Counter(elements) sorted_elements = sorted(elements, key=lambda x: (-frequency[x], elements.index(x))) return sorted_elements"},{"question":"Create a function that reads a CSV file into a Pandas DataFrame and calculates the correlation matrix for the numerical columns. The function should take the file path as input and allow the user to select the method of correlation computation (\'pearson\', \'kendall\', \'spearman\'). If no method is specified, use \'pearson\' by default. The function should raise a FileNotFoundError if the file path is invalid and a ValueError if the method is not one of the three supported methods. The function should output a Pandas DataFrame containing the correlation matrix. You should write self-contained code starting with: ``` import pandas as pd def compute_correlation(file_path: str, method: str = \'pearson\'): ```","solution":"import pandas as pd import os def compute_correlation(file_path: str, method: str = \'pearson\'): Reads a CSV file into a Pandas DataFrame and calculates the correlation matrix for the numerical columns. Parameters: file_path (str): The path to the CSV file. method (str): The method of correlation computation (\'pearson\', \'kendall\', \'spearman\'). Default is \'pearson\'. Returns: pd.DataFrame: The correlation matrix of the numerical columns. Raises: FileNotFoundError: If the file path is invalid. ValueError: If the method is not one of the three supported methods. # Check if the file exists if not os.path.exists(file_path): raise FileNotFoundError(f\\"No such file: \'{file_path}\'\\") # Check if the method is supported if method not in [\'pearson\', \'kendall\', \'spearman\']: raise ValueError(f\\"Invalid method \'{method}\'. Use \'pearson\', \'kendall\', or \'spearman\'.\\") # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Calculate the correlation matrix correlation_matrix = df.corr(method=method) return correlation_matrix"},{"question":"Write a function named `generate_ticket_serial` which takes a single argument `n` representing the number of serial numbers to generate. Each serial number should be a unique alphanumeric string of length 8, consisting of uppercase letters and digits. The function should utilize the `random` package for generating parts of the serial number to ensure randomness. In the implementation of the function: 1. Use `string.ascii_uppercase` to get the uppercase letters and `string.digits` to get the numeric digits. 2. Use `random.choice` to pick random characters from these lists. 3. Ensure that each generated serial number is unique. The function should return the list of generated serial numbers. Here is an example of how the function should be used: ```python serial_numbers = generate_ticket_serial(5) print(\\"Generated serial numbers:\\", serial_numbers) ``` **Library API Requirements**: The function **must use** the `random` module to ensure randomness in the serial numbers. **Handling Input and Output**: You can assume valid input will be provided (i.e., a positive integer for `n`). Ensure that the list of serial numbers is of length `n` and all entries are unique.","solution":"import random import string def generate_ticket_serial(n): Generate a list of `n` unique alphanumeric serial numbers. Each serial number is an 8-character long string consisting of uppercase letters and digits. Parameters: n (int): Number of serial numbers to generate. Returns: list: A list of unique serial numbers. characters = string.ascii_uppercase + string.digits serial_numbers = set() while len(serial_numbers) < n: serial_number = \'\'.join(random.choice(characters) for _ in range(8)) serial_numbers.add(serial_number) return list(serial_numbers)"},{"question":"You are tasked with creating a function called `generate_matrix` which generates a square matrix (2D list) of size `n x n`, where the cells of the matrix are filled with integers in a spiral order starting from 1 up to `n*n`. # Context: The function should: 1. Initialize an `n x n` matrix with zeroes. 2. Fill the matrix cells with consecutive integers in spiral order, starting from the top-left corner and moving to the right initially. # Function Signature: ```python def generate_matrix(n: int) -> List[List[int]]: pass ``` # Parameters: - `n`: An integer representing the dimensions of the matrix (both rows and columns). # Example: Given the input `n = 3`, the function should return the following matrix: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` If `n = 4`, the result should be: ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` # Assumptions: - The value of `n` will be a positive integer. Develop the function `generate_matrix` to generate this spiral-ordered matrix given `n`.","solution":"from typing import List def generate_matrix(n: int) -> List[List[int]]: matrix = [[0] * n for _ in range(n)] num = 1 top, left = 0, 0 bottom, right = n - 1, n - 1 while top <= bottom and left <= right: # Fill top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Fill bottom row if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Fill left column if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are tasked with creating a function that normalizes a given set of timestamps to start from zero. This new set of timestamps should represent the relative time from the start in seconds. Given the following function signature: ```python def normalize_timestamps(timestamps): pass ``` The function `normalize_timestamps` should take: - `timestamps`: A list of timestamps in string format `[\'YYYY-MM-DDTHH:MM:SS\']`. You will use the `datetime` module to handle the timestamps. The function should then return a list of normalized timestamps in seconds from the start. Here are the steps you need to follow: 1. Convert the timestamps from string format to `datetime` objects. 2. Determine the start time (the earliest timestamp). 3. Calculate the difference in seconds between each timestamp and the start time. 4. Return the list of these differences as the new normalized timestamps. Example: ```python timestamps = [\'2023-01-01T00:00:00\', \'2023-01-01T00:00:10\', \'2023-01-01T00:01:00\'] normalize_timestamps(timestamps) ``` The function should return: ```python [0, 10, 60] ```","solution":"from datetime import datetime def normalize_timestamps(timestamps): Normalizes a list of timestamps to seconds from the start timestamp. Args: timestamps (list of str): List of timestamp strings in the format \'YYYY-MM-DDTHH:MM:SS\'. Returns: list of int: List of normalized timestamps in seconds from the start. # Convert the timestamps from string format to datetime objects datetime_objects = [datetime.fromisoformat(ts) for ts in timestamps] # Determine the start time (the earliest timestamp) start_time = min(datetime_objects) # Calculate the difference in seconds between each timestamp and the start time normalized_seconds = [(ts - start_time).total_seconds() for ts in datetime_objects] # Convert differences to integers normalized_seconds = [int(seconds) for seconds in normalized_seconds] return normalized_seconds"},{"question":"Implement a function `find_best_student` that processes a list of students\' names and their corresponding scores. The function should identify the student with the highest average score across all subjects. In case of a tie, return the student who appears first alphabetically. The function should: 1. Accept a list of dictionaries, where each dictionary contains a student\'s name and a list of their scores in various subjects. 2. Calculate the average score for each student. 3. Determine the student with the highest average score. 4. In case of a tie, choose the student whose name comes first lexicographically. The function signature should be: ```python def find_best_student(students): ``` **Inputs:** - `students`: A list of dictionaries, where each dictionary contains: - `name`: A string representing the student\'s name. - `scores`: A list of integers or floats representing the student\'s scores. An example input might look like this: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [88, 90, 92]}, {\\"name\\": \\"Bob\\", \\"scores\\": [90, 92, 85]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [80, 85, 88]} ] ``` **Output:** - The function should return a string representing the name of the student with the highest average score. If there is a tie, return the student who appears first alphabetically. **Examples:** ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [88, 90, 92]}, {\\"name\\": \\"Bob\\", \\"scores\\": [90, 92, 85]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [80, 85, 88]} ] print(find_best_student(students)) # Output: Alice students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [90, 92, 85]}, {\\"name\\": \\"Bob\\", \\"scores\\": [90, 92, 85]} ] print(find_best_student(students)) # Output: Alice ```","solution":"def find_best_student(students): Identifies the student with the highest average score. In case of a tie, returns the student who appears first alphabetically. :param students: List of dictionaries with each containing: \'name\': A string representing the student\'s name. \'scores\': A list of integers or floats representing the student\'s scores. :return: The name of the student with the highest average score. In case of a tie, the name that comes first lexicographically. # Initialize variables to keep track of the best student best_student = None highest_average = float(\'-inf\') for student in students: # Calculate average score average_score = sum(student[\'scores\']) / len(student[\'scores\']) # Check if this student has a higher average or comes first lexicographically in case of a tie if (average_score > highest_average or (average_score == highest_average and student[\'name\'] < best_student)): highest_average = average_score best_student = student[\'name\'] return best_student"},{"question":"Using `numpy` and `pandas`, create a function that: 1. Generates a random 2-dimensional array of integers with the shape (5, 3). 2. Converts the array into a DataFrame. 3. Finds the column-wise maximum values and returns them as a dictionary. The function should output: ``` { \'Column_1\': max_value_column_1, \'Column_2\': max_value_column_2, \'Column_3\': max_value_column_3, } You should write self-contained code starting with: ``` import numpy as np import pandas as pd def find_column_max(): # Step 1: Generate random 2D array random_array = np.random.randint(1, 101, (5, 3)) # Step 2: Convert array to DataFrame df = pd.DataFrame(random_array, columns=[\'Column_1\', \'Column_2\', \'Column_3\']) # Step 3: Find column-wise maximum values max_values = df.max().to_dict() return max_values ```","solution":"import numpy as np import pandas as pd def find_column_max(): # Step 1: Generate random 2D array random_array = np.random.randint(1, 101, (5, 3)) # Step 2: Convert array to DataFrame df = pd.DataFrame(random_array, columns=[\'Column_1\', \'Column_2\', \'Column_3\']) # Step 3: Find column-wise maximum values max_values = df.max().to_dict() return max_values"},{"question":"You are required to write a function that processes a text file containing information about students and their grades, and organizes this data by students. Each student has a unique ID and may have multiple subjects associated with them. Your goal is to extract this data and store it in a dictionary where the keys are student IDs, and the values are dictionaries themselves mapping subject names to grades. Create a function named `get_grades_by_student` that achieves the following: - Reads a text file named `GRADES_DATA`, where each line contains three fields separated by a comma: `student_id`, `subject`, and `grade`. - Processes only entries where the `grade` is a valid float between 0.0 and 4.0 (inclusive). Any invalid lines should be skipped without breaking the process. - Uses `collections.defaultdict` to handle missing dictionary entries conveniently. - Returns a dictionary with student IDs as keys and dictionaries as values. The inner dictionaries map subjects to their respective grades. **Inputs:** - `GRADES_DATA`: Name of the text file containing grades data. **Output:** - A dictionary with student IDs as keys and dictionaries mapping subject names to grades as values. Example content of the `GRADES_DATA` file: ``` 12345,Mathematics,3.5 12345,Science,4.0 67890,Mathematics,2.8 12345,History,3.2 67890,Science,invalid 13579,Mathematics,3.1 ``` **Example output:** ```python { \'12345\': {\'Mathematics\': 3.5, \'Science\': 4.0, \'History\': 3.2}, \'67890\': {\'Mathematics\': 2.8}, \'13579\': {\'Mathematics\': 3.1} } ``` ```python from collections import defaultdict GRADES_DATA = \'grades.txt\' def get_grades_by_student(): Extracts all grades from a text file and stores them in a dict where keys are student IDs, and values are dictionaries mapping subjects to their grades. student_grades = defaultdict(dict) with open(GRADES_DATA, \'r\') as file: for line in file: try: student_id, subject, grade = line.strip().split(\',\') grade = float(grade) if 0.0 <= grade <= 4.0: student_grades[student_id][subject] = grade except ValueError: # Skip lines with invalid grades or malformed data continue return student_grades ```","solution":"from collections import defaultdict GRADES_DATA = \'grades.txt\' def get_grades_by_student(filename=GRADES_DATA): Extracts all grades from a text file and stores them in a dict where keys are student IDs, and values are dictionaries mapping subjects to their grades. student_grades = defaultdict(dict) with open(filename, \'r\') as file: for line in file: try: student_id, subject, grade = line.strip().split(\',\') grade = float(grade) if 0.0 <= grade <= 4.0: student_grades[student_id][subject] = grade except ValueError: # Skip lines with invalid grades or malformed data continue return student_grades"},{"question":"You are tasked with creating a function named `arrange_stones` that determines if it is possible to rearrange the stones in a list in such a way that no two adjacent stones have the same color. Each stone is represented by an integer which denotes its color. If the stones can be rearranged to satisfy the condition, return any valid rearrangement as a list. Otherwise, return an empty list. To solve this problem efficiently, you may consider using the `Counter` from the `collections` module to count the frequencies of each color and the `heapq` package for a max-heap to keep track of the most frequent colors. Function Signature ```python def arrange_stones(stones: list) -> list: ``` - `stones`: A list of integers where each integer represents the color of a stone. Example: ```python print(arrange_stones([1, 1, 1, 2, 2, 3])) ``` output: ``` [1, 2, 1, 3, 1, 2] ``` or any other valid arrangement where no two adjacent elements are the same. # Constraints: - The length of `stones` list will be between 1 and (1 times 10^5). - Each element of `stones` will be an integer between 1 and (1 times 10^5). Use the following techniques effectively: - `Counter` to count the frequency of each color. - `heapq` for managing the max-heap to ensure the next most frequent stone is placed appropriately.","solution":"from collections import Counter import heapq def arrange_stones(stones): if not stones: return [] stone_counter = Counter(stones) max_heap = [(-count, color) for color, count in stone_counter.items()] heapq.heapify(max_heap) result = [] prev_count, prev_color = 0, None while max_heap: count, color = heapq.heappop(max_heap) result.append(color) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_color)) count += 1 # decrement count prev_count, prev_color = count, color if len(result) != len(stones): return [] return result"},{"question":"Create a function that takes a DataFrame and a list of column names, and returns a new DataFrame where only the specified columns are included and the remaining columns are dropped. The function should raise a ValueError if any of the specified columns do not exist in the DataFrame. The function should output: pd.DataFrame: A DataFrame containing only the specified columns. You should write self-contained code starting with: ``` import pandas as pd def filter_columns(df: pd.DataFrame, columns: list) -> pd.DataFrame: ```","solution":"import pandas as pd def filter_columns(df: pd.DataFrame, columns: list) -> pd.DataFrame: Returns a new DataFrame containing only the specified columns. Raises a ValueError if any of the specified columns do not exist in the DataFrame. Parameters: df (pd.DataFrame): The input DataFrame. columns (list): The list of column names to include in the output DataFrame. Returns: pd.DataFrame: A DataFrame containing only the specified columns. missing_columns = [col for col in columns if col not in df.columns] if missing_columns: raise ValueError(f\\"The following columns are not in the DataFrame: {missing_columns}\\") return df[columns]"},{"question":"Create a function that takes a file path as input and reads a CSV file containing a product inventory. The file should have columns named \'product_id\', \'product_name\', \'quantity\', and \'price\'. The function performs the following operations: - Check if the file exists. If it does not, raise a FileNotFoundError. - Validate that the file contains the necessary columns. If any column is missing, raise a ValueError. - Calculate the total value of inventory for each product (quantity multiplied by price). - Identify products with a quantity less than a specified threshold and return a list of these products. The function should return: 1. A DataFrame with an additional column \'total_value\' indicating the overall value of each product. 2. A list of product names with quantities below the given threshold. The function should raise exceptions for: - FileNotFoundError: If the file does not exist. - ValueError: If any of the required columns are missing. You should write self-contained code starting with: ``` import pandas as pd import os def process_inventory(file_path, threshold): ```","solution":"import pandas as pd import os def process_inventory(file_path, threshold): Process the product inventory from a CSV file. Parameters: - file_path (str): The path to the CSV file. - threshold (int): The threshold for identifying low-stock products. Returns: - pd.DataFrame: DataFrame with an additional \'total_value\' column. - list: List of product names with quantities below the threshold. Raises: - FileNotFoundError: If the file does not exist. - ValueError: If any of the required columns are missing. # Check if the file exists if not os.path.exists(file_path): raise FileNotFoundError(f\\"File not found: {file_path}\\") # Read the CSV file df = pd.read_csv(file_path) # Validate the required columns required_columns = [\'product_id\', \'product_name\', \'quantity\', \'price\'] for column in required_columns: if column not in df.columns: raise ValueError(f\\"Missing required column: {column}\\") # Calculate the total value of inventory for each product df[\'total_value\'] = df[\'quantity\'] * df[\'price\'] # Identify products with quantity below the threshold low_stock_products = df[df[\'quantity\'] < threshold][\'product_name\'].tolist() return df, low_stock_products"},{"question":"# Student Grade Analysis You are tasked with writing a function named `calculate_grade_statistics` that will process student scores and write the statistical analysis to a CSV file using the `csv.DictWriter` class from the Python CSV library. The function should focus on basic statistical analysis of the scores. Requirements 1. The function `calculate_grade_statistics` should take the following parameters: - `input_file` (a string): The name of the input CSV file containing student names and their respective scores. - `output_file` (a string): The name of the output CSV file where the statistical analysis will be written. 2. The input CSV file should have the following structure: - `name` (a string): The name of the student. - `score` (an integer): The score obtained by the student. 3. The function should perform the following statistical analysis: - Average score - Highest score - Lowest score - Number of students 4. The function should then write the results to the output CSV file, which should include the following columns: - `average_score` (a float): The average score of all the students. - `highest_score` (an integer): The highest score among all the students. - `lowest_score` (an integer): The lowest score among all the students. - `student_count` (an integer): The total number of students. # Sample Function Call ```python input_file = \\"student_scores.csv\\" output_file = \\"grade_statistics.csv\\" calculate_grade_statistics(input_file, output_file) ``` # Sample CSV Content **student_scores.csv**: ```csv name,score Alice,85 Bob,78 Charlie,92 David,67 Eve,88 ``` **grade_statistics.csv (output)**: ```csv average_score,highest_score,lowest_score,student_count 82.0,92,67,5 ``` Constraints: - Assume the input CSV file is properly formatted and contains valid data. - Ensure proper encoding (`utf-8`) and handle the `newline=\'\'` parameter appropriately to avoid extra blank lines in the CSV file on different platforms.","solution":"import csv def calculate_grade_statistics(input_file, output_file): Calculate statistical analysis from student scores in the input CSV file and write the results to the output CSV file. :param input_file: path to the input CSV containing student names and scores. :param output_file: path to the output CSV to write the statistics. names = [] scores = [] # Read the input CSV file with open(input_file, mode=\'r\', encoding=\'utf-8\', newline=\'\') as infile: reader = csv.DictReader(infile) for row in reader: names.append(row[\'name\']) scores.append(int(row[\'score\'])) # Calculate the statistics average_score = sum(scores) / len(scores) highest_score = max(scores) lowest_score = min(scores) student_count = len(scores) # Prepare data to write into output CSV file results = [ { \'average_score\': average_score, \'highest_score\': highest_score, \'lowest_score\': lowest_score, \'student_count\': student_count } ] # Write the results to the output CSV file with open(output_file, mode=\'w\', encoding=\'utf-8\', newline=\'\') as outfile: fieldnames = [\'average_score\', \'highest_score\', \'lowest_score\', \'student_count\'] writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() writer.writerows(results)"},{"question":"Write a function that accepts a string containing a mathematical expression involving positive integers and the operators +, -, *, and /. The function should parse this expression, evaluate it, and return the result as a float. Assume the input expression is always valid. The function should output the result of the evaluated expression. You should write self-contained code starting with: ``` def evaluate_expression(expression: str) -> float: ```","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression involving positive integers and the operators +, -, *, and /, returning the result as a float. Args: - expression (str): A valid mathematical expression. Returns: - float: The result of the evaluation. # We can use the Python eval function to safely evaluate the expression. return eval(expression)"},{"question":"You are developing a basic file synchronization tool that ensures two directories have identical contents. The synchronization should handle updating existing files, adding new files, and removing files that no longer exist in the source directory from the destination directory. **Objective:** Write a function `synchronize_directories(src_dir, dst_dir)` that synchronizes the contents of the source directory (`src_dir`) with the destination directory (`dst_dir`). The function should make sure that both directories have the same files with identical contents. **Function Signature:** ```python def synchronize_directories(src_dir, dst_dir): \'\'\' Parameters: src_dir (str): Path to the source directory. dst_dir (str): Path to the destination directory. Returns: None \'\'\' ``` **Instructions:** 1. If a file exists in `src_dir` but not in `dst_dir`, copy it to `dst_dir`. 2. If a file exists in both directories but has different contents, update the file in `dst_dir` with the contents from `src_dir`. 3. If a file exists in `dst_dir` but not in `src_dir`, remove it from `dst_dir`. 4. Ensure that the function handles subdirectories as well, maintaining the directory structure. 5. You may use `os`, `shutil`, and `filecmp` modules to perform file operations. **Example:** ```python import os import shutil import filecmp # Assuming the following directory structure and contents # src_dir/ # ├── file1.txt # ├── file2.txt # ├── subdir/ # │ └── file3.txt # dst_dir/ # ├── file1.txt # ├── file4.txt src_dir = \'path/to/src_dir\' dst_dir = \'path/to/dst_dir\' synchronize_directories(src_dir, dst_dir) # After running the function, the destination directory should have the following structure # dst_dir/ # ├── file1.txt # ├── file2.txt # ├── subdir/ # │ └── file3.txt ``` **Notes:** - Handle errors gracefully, such as permissions issues or non-existent directories. - Make sure to maintain the attributes (e.g., modification times) of the files during copying.","solution":"import os import shutil import filecmp def synchronize_directories(src_dir, dst_dir): \'\'\' Synchronizes the contents of the source directory (src_dir) with the destination directory (dst_dir). \'\'\' if not os.path.isdir(src_dir) or not os.path.isdir(dst_dir): raise ValueError(\\"Both source and destination must be valid directories.\\") # Synchronize all items from the source directory to the destination directory for src_dirpath, src_dirnames, src_filenames in os.walk(src_dir): relative_path = os.path.relpath(src_dirpath, src_dir) dst_dirpath = os.path.join(dst_dir, relative_path) if not os.path.exists(dst_dirpath): os.makedirs(dst_dirpath) # Copy or update files for src_filename in src_filenames: src_filepath = os.path.join(src_dirpath, src_filename) dst_filepath = os.path.join(dst_dirpath, src_filename) if os.path.exists(dst_filepath): if not filecmp.cmp(src_filepath, dst_filepath, shallow=False): shutil.copy2(src_filepath, dst_filepath) else: shutil.copy2(src_filepath, dst_filepath) # Remove files and directories that should not be in the destination directory for dst_dirpath, dst_dirnames, dst_filenames in os.walk(dst_dir): relative_path = os.path.relpath(dst_dirpath, dst_dir) src_dirpath = os.path.join(src_dir, relative_path) for dst_filename in dst_filenames: src_filepath = os.path.join(src_dirpath, dst_filename) dst_filepath = os.path.join(dst_dirpath, dst_filename) if not os.path.exists(src_filepath): os.remove(dst_filepath) for dirname in dst_dirnames: src_dir_subpath = os.path.join(src_dirpath, dirname) dst_dir_subpath = os.path.join(dst_dirpath, dirname) if not os.path.exists(src_dir_subpath): shutil.rmtree(dst_dir_subpath)"},{"question":"You are required to implement a function that performs matrix multiplication on two given 2D arrays. Matrix multiplication is a fundamental operation in various domains including computer graphics, machine learning, and scientific computing. Using specific libraries and functions, implement the function `matrix_multiplication` to multiply two matrices. Requirements: 1. Your function should be named `matrix_multiplication`. 2. It should take two inputs: - `matrix_a`, which is a 2D NumPy array. - `matrix_b`, which is a 2D NumPy array. 3. Use the following library functions in your implementation: - `numpy.dot`: To compute the dot product of the two matrices. - `numpy.shape`: To get the dimensions of the input arrays. Function Definition: ```python def matrix_multiplication(matrix_a, matrix_b): # Function implementation goes here ``` The function should return a new 2D NumPy array that represents the product of the two input matrices. Example: ```python import numpy as np matrix_a = np.array([[1, 2], [3, 4]], dtype=float) matrix_b = np.array([[5, 6], [7, 8]], dtype=float) result = matrix_multiplication(matrix_a, matrix_b) print(result) ``` Output: ```plaintext [[19. 22.] [43. 50.]] ``` This example demonstrates the application of the `matrix_multiplication` function to multiply two 2x2 matrices. The resulting matrix contains the computed product of the input matrices.","solution":"import numpy as np def matrix_multiplication(matrix_a, matrix_b): Performs matrix multiplication on two 2D NumPy arrays. :param matrix_a: 2D NumPy array :param matrix_b: 2D NumPy array :return: Product of matrix_a and matrix_b as a 2D NumPy array return np.dot(matrix_a, matrix_b)"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. The function should be efficient and only use basic Python libraries. You should write self-contained code starting with: ``` def task_func(int_list): ```","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def task_func(int_list): Returns a list of prime numbers from the given list of integers. return [num for num in int_list if is_prime(num)]"},{"question":"Load a JSON file into a dictionary, filter entries based on a condition applied to a specified key, calculate the average value for another key in the filtered entries, and output a new JSON file with the filtered entries. The input JSON file is specified by its filename, and the output JSON file should have a specified filename. If the input file does not exist, the function should raise a FileNotFoundError. This process helps in extracting and analyzing specific subsets of JSON data. The function should output the following: dict: A dictionary with the filtered entries. float: The average value of the specified key in the filtered entries. You should write self-contained code starting with: ``` import json import os def task_func(input_filename, output_filename, filter_key, filter_value, avg_value_key): ```","solution":"import json import os def task_func(input_filename, output_filename, filter_key, filter_value, avg_value_key): Loads a JSON file, filters entries based on a condition, calculates the average of a specified key for filtered entries, and outputs a new JSON file with the filtered entries. Args: input_filename (str): Path to the input JSON file. output_filename (str): Path to the output JSON file. filter_key (str): The key to filter the entries by. filter_value (Any): The value that the specified filter key should match. avg_value_key (str): The key to calculate the average value for the filtered entries. Returns: dict: A dictionary with the filtered entries. float: The average value of the specified key in the filtered entries. Raises: FileNotFoundError: If the input file does not exist. KeyError: If the key to filter or the key to average does not exist. ValueError: If there are no filtered entries to average. if not os.path.exists(input_filename): raise FileNotFoundError(f\\"The file {input_filename} does not exist.\\") # Load the JSON file with open(input_filename, \'r\') as f: data = json.load(f) # Filter the entries filtered_entries = [entry for entry in data if entry.get(filter_key) == filter_value] if not filtered_entries: raise ValueError(\\"No entries match the filter criteria.\\") # Calculate the average value avg_values = [entry[avg_value_key] for entry in filtered_entries if avg_value_key in entry] if not avg_values: raise ValueError(f\\"No entries contain the key \'{avg_value_key}\' to calculate the average.\\") average_value = sum(avg_values) / len(avg_values) # Output the filtered entries to a new JSON file with open(output_filename, \'w\') as f: json.dump(filtered_entries, f, indent=4) return filtered_entries, average_value"},{"question":"You are required to write a function that simulates a basic tic-tac-toe game for two players. The function will take two lists of moves made by each player and determine the winner or if the game is a draw. Assume the board is a 3x3 grid and players take turns starting with Player 1 (X) followed by Player 2 (O). Your task is to implement the function `tic_tac_toe_winner` which performs the following: 1. Initializes a 3x3 board. 2. Updates the board based on the moves made by each player. 3. Checks for a winner after each move. 4. Returns the result of the game as \'X\' if Player 1 wins, \'O\' if Player 2 wins, or \'Draw\' if there is no winner. You are provided: - Two lists `player1_moves` and `player2_moves` where each element is a tuple representing the coordinates (row, column) on the board. Here is the signature of the function you need to implement: ```python def tic_tac_toe_winner(player1_moves, player2_moves): # Your implementation here # Example usage: # player1_moves = [(0, 0), (1, 1), (2, 2)] # player2_moves = [(0, 1), (0, 2), (1, 0)] # tic_tac_toe_winner(player1_moves, player2_moves) should return \'X\' ``` Ensure your implementation correctly checks all possible winning conditions after each move.","solution":"def tic_tac_toe_winner(player1_moves, player2_moves): def check_winner(board, player): # Check rows for row in board: if all(cell == player for cell in row): return True # Check columns for col in range(3): if all(board[row][col] == player for row in range(3)): return True # Check diagonals if all(board[i][i] == player for i in range(3)): return True if all(board[i][2 - i] == player for i in range(3)): return True return False board = [[\'\' for _ in range(3)] for _ in range(3)] turn = 0 for p1_move, p2_move in zip(player1_moves, player2_moves): board[p1_move[0]][p1_move[1]] = \'X\' if check_winner(board, \'X\'): return \'X\' board[p2_move[0]][p2_move[1]] = \'O\' if check_winner(board, \'O\'): return \'O\' turn += 1 if len(player1_moves) > turn: p1_move = player1_moves[turn] board[p1_move[0]][p1_move[1]] = \'X\' if check_winner(board, \'X\'): return \'X\' return \'Draw\'"},{"question":"In this problem, you will implement a function called `find_paths` that finds all possible paths between two nodes in a directed acyclic graph (DAG). You\'ve been provided the function skeleton `find_paths(graph, start, end)` which you should fill in such that it: 1. Uses a depth-first search (DFS) algorithm to explore all possible paths. 2. Accepts a dictionary `graph` representing the adjacency list of the graph, where the keys are the node identifiers (strings) and the values are lists of nodes to which they are connected. 3. Takes two additional arguments: `start` and `end`, which are the starting and ending nodes of the paths to be found. 4. Returns a list of lists, with each inner list representing a unique path from `start` to `end`. Here\'s an example of what the function should do: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'D\'], \'D\': [] } find_paths(graph, \'A\', \'D\') ``` Given the above graph, the function should output: ``` [ [\'A\', \'B\', \'D\'], [\'A\', \'B\', \'C\', \'D\'], [\'A\', \'C\', \'D\'] ] ``` You can assume: - The graph is a dictionary where each key is a node and the value is a list of nodes representing directed edges. - The graph is a Directed Acyclic Graph (DAG), therefore there will be no cycles. - Node identifiers are unique strings. - The `start` and `end` node will always be present in the graph. Implement `find_paths` to traverse the graph and find all unique paths from the specified start node to the specified end node.","solution":"def find_paths(graph, start, end): Finds all possible paths from start to end in a DAG. Args: graph (dict): A dictionary representing the adjacency list of the graph. start (str): The starting node identifier. end (str): The ending node identifier. Returns: list of lists: A list where each inner list is a unique path from start to end. def dfs(current, path): path.append(current) if current == end: paths.append(list(path)) else: for neighbor in graph.get(current, []): dfs(neighbor, path) path.pop() paths = [] dfs(start, []) return paths"},{"question":"You are tasked with implementing a function named `find_path` which determines if there is a path between two nodes in a given undirected graph. The graph is represented in the form of an adjacency list. You will use Depth First Search (DFS) to explore the graph. The `find_path` function should perform the following operations: 1. Accept an adjacency list representing the undirected graph. 2. Accept two nodes, `start` and `end`, as input. 3. Determine whether there exists a path from `start` node to `end` node. 4. Return `True` if a path exists, otherwise return `False`. **Your task:** Using Python and any standard library functions necessary, implement this `find_path` function. The function signature is as follows: ```python def find_path(graph, start, end): pass ``` Where: - `graph` is a dictionary where keys represent nodes, and values are lists representing the nodes directly connected to the key node. - `start` is the initial node from where the search begins. - `end` is the target node to find the path to. Additionally, implement a helper function `dfs` to perform the Depth First Search. **Example:** ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'], } print(find_path(graph, \'A\', \'F\')) # Output: True print(find_path(graph, \'A\', \'G\')) # Output: False ```","solution":"def dfs(graph, current_node, end, visited): if current_node == end: return True visited.add(current_node) for neighbor in graph.get(current_node, []): if neighbor not in visited: if dfs(graph, neighbor, end, visited): return True return False def find_path(graph, start, end): visited = set() return dfs(graph, start, end, visited)"},{"question":"**Evaluate Expression in Reverse Polish Notation** In this problem, you need to evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). Reverse Polish Notation is a mathematical notation in which every operator follows all of its operands. You are required to write a function named `evalRPN(tokens: List[str]) -> int` to evaluate the given expression and return the result. # Constraints: 1. The input list `tokens` will contain between 1 and 10^4 elements. 2. Each element in the list `tokens` is either an integer or one of the four operators \'+\', \'-\', \'*\', \'/\'. 3. The division between two integers should truncate towards zero. 4. The input list `tokens` is guaranteed to be a valid RPN expression. # Input: - `tokens`: A list of strings. # Output: - An integer representing the evaluated result of the RPN expression. # Example: Input: ```python tokens = [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] ``` Output: ```python 9 ``` Explanation: The expression [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] is equivalent to `((2 + 1) * 3) = 9`. Additional Example: Input: ```python tokens = [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] ``` Output: ```python 6 ``` Explanation: The expression [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] is equivalent to `(4 + (13 / 5)) = 6`. # Note: - Each operator may take only two arguments. - The division should truncate towards zero, which means dividing negative integers should round towards zero. Implementation: Your function should efficiently process the tokens list and correctly apply the operations according to the RPN rules. Consider using a stack to manage the intermediate results during the evaluation.","solution":"from typing import List def evalRPN(tokens: List[str]) -> int: stack = [] for token in tokens: if token in \'+-*/\': b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # Perform integer division and truncate towards zero stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"Write a function named `simulate_network_latency` that simulates network latency by running a download task in parallel with a processing task using the `asyncio` library in Python. The goal is to get hands-on experience with asynchronous programming to improve performance when dealing with I/O-bound tasks. Your function, `simulate_network_latency`, must do the following: 1. Print the start time using `time.ctime()`. 2. Define an `async` function `download_data` that simulates downloading data by: - Printing a message that it started downloading data with the current time. - Using `asyncio.sleep` to simulate download time (3 seconds). - Printing a message that download is complete with the current time. 3. Define an `async` function `process_data` that simulates processing data by: - Printing a message that it started processing data with the current time. - Using `asyncio.sleep` to simulate processing time (2 seconds). - Printing a message that processing is complete with the current time. 4. Use `asyncio.gather` to run `download_data` and `process_data` concurrently. 5. Ensure the main asyncio event loop waits for both tasks to complete. 6. Print that all tasks are done along with the current time using `time.ctime()`. Here is some starter code that you should use: ```python import time import asyncio async def download_data(): print(f\\"Started downloading data at {time.ctime()}\\") await asyncio.sleep(3) print(f\\"Download complete at {time.ctime()}\\") async def process_data(): print(f\\"Started processing data at {time.ctime()}\\") await asyncio.sleep(2) print(f\\"Processing complete at {time.ctime()}\\") async def simulate_network_latency(): print(f\\"Started network simulation at {time.ctime()}\\") await asyncio.gather(download_data(), process_data()) print(f\\"All tasks done at {time.ctime()}\\") # To run the async function asyncio.run(simulate_network_latency()) ```","solution":"import time import asyncio async def download_data(): print(f\\"Started downloading data at {time.ctime()}\\") await asyncio.sleep(3) print(f\\"Download complete at {time.ctime()}\\") async def process_data(): print(f\\"Started processing data at {time.ctime()}\\") await asyncio.sleep(2) print(f\\"Processing complete at {time.ctime()}\\") async def simulate_network_latency(): print(f\\"Started network simulation at {time.ctime()}\\") await asyncio.gather(download_data(), process_data()) print(f\\"All tasks done at {time.ctime()}\\") # To run the async function asyncio.run(simulate_network_latency())"},{"question":"You are tasked with implementing a function `connect_same_level_nodes(root) -> None` to connect nodes on the same level in a binary tree. Each node should have an additional pointer `next` that points to the node on its right on the same level. If there\'s no node on the right, `next` should be `None`. Definitions: 1. **TreeNode**: A simple Node class defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None self.next = None ``` Input: - `root`: A `TreeNode` object representing the root of the binary tree. Output: - This function does not return anything. It modifies the `next` pointers of the nodes in the tree in-place. Example: ```python # Define nodes of the binary tree root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.right = TreeNode(6) # After calling connect_same_level_nodes(root), the tree should have `next` pointers connected as follows: # root.next = None # root.left.next = root.right # root.right.next = None # root.left.left.next = root.left.right # root.left.right.next = root.right.right # root.right.right.next = None ``` Constraints: - The `connect_same_level_nodes` function must be implemented using a BFS (breadth-first search) approach. - The use of a queue data structure to facilitate the level-order traversal is required. - Each node\'s value can be any valid integer. Your task is to complete the function `connect_same_level_nodes(root)`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None self.next = None def connect_same_level_nodes(root): if not root: return queue = [root] while queue: next_queue = [] for i in range(len(queue)): node = queue[i] if i + 1 < len(queue): node.next = queue[i + 1] if node.left: next_queue.append(node.left) if node.right: next_queue.append(node.right) queue = next_queue"},{"question":"You are required to create a function called `even_digit_product` that takes an integer `n` as input and returns the product of its even digits. If there are no even digits in the number, the function should return -1. The function should ignore any non-even digits and only multiply the even digits found in the integer. Function Specifications: - Function Name: `even_digit_product` - Parameters: - `n` (type: `int`): An integer value. Details: - The function should determine which digits of `n` are even. - If the integer contains even digits, calculate the product of these digits. - If there are no even digits, return -1. Steps: - Convert the integer `n` to its absolute value to handle potential negative inputs. - Iterate through each digit of the integer. - Check if the digit is even. - If the digit is even, multiply it into a running product. - If no even digits are found, return -1. Example Invocation: ```python print(even_digit_product(4821)) ``` Expected Output: ``` 64 ``` Explanation: - In the number `4821`, the even digits are 4, 8, and 2. - The product of these even digits is 4 * 8 * 2 = 64.","solution":"def even_digit_product(n): Returns the product of even digits in the integer n. Returns -1 if there are no even digits. Parameters: n (int): An integer value. Returns: int: Product of even digits or -1 if no even digits are found. n = abs(n) # Ignore the sign of the number product = 1 has_even_digit = False for digit in str(n): digit = int(digit) if digit % 2 == 0: product *= digit has_even_digit = True return product if has_even_digit else -1"},{"question":"Your task is to create a function named `convert_to_json` that accepts a Python dictionary, serializes it to a JSON string using the `json` library, and returns the resulting JSON string. This problem will help you understand how to work with JSON serialization in Python, which is commonly used for data interchange. The function should follow these steps: 1. Accept a single dictionary input. 2. Use the `json.dumps` function to convert the dictionary to a JSON string. 3. Return the JSON string. The detailed Python library documentation for `json.dumps` is as follows: ``` Python Library Documentation: json.dumps json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) Serialize obj to a JSON formatted str using this conversion table. ``` **Function Signature:** ```python def convert_to_json(input_dict: dict) -> str: pass ``` **Example:** ```python input_dict = {\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"} json_result = convert_to_json(input_dict) print(json_result) # Output: \'{\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}\' ```","solution":"import json def convert_to_json(input_dict: dict) -> str: Accepts a dictionary and serializes it to a JSON string. Args: input_dict (dict): The dictionary to be converted to JSON string. Returns: str: The resulting JSON string. return json.dumps(input_dict)"},{"question":"Create a function that takes a list of integers and a target value as input, then finds all unique combinations of integers in the list that add up to the target value. Each number in the list may only be used once in each combination. The function should return a list of lists, with each inner list representing a unique combination. Assume all input integers are positive and the result should not include duplicate combinations. The function should output with: List[List[int]]: A list of lists containing unique combinations that sum up to the target value. You should write self-contained code starting with: ``` from typing import List def find_combinations(nums: List[int], target: int) -> List[List[int]]: ```","solution":"from typing import List def find_combinations(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): # Skip duplicates if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, target - nums[i], path + [nums[i]]) nums.sort() result = [] backtrack(0, target, []) return result"},{"question":"Create a function named `find_longest_chain` that takes a list of words and finds the longest chain of words such that each word is formed by adding exactly one letter to the previous word in the chain, and that each shorter word in the chain is a valid word in the list. **Function Signature:** ```python def find_longest_chain(words: List[str]) -> List[str]: ``` **Parameters:** - `words` (List[str]): A list of words consisting of lowercase letters. **Returns:** - `List[str]`: The longest chain of words found. If there are multiple chains of the same maximum length, return any one of them. **Example:** ```python find_longest_chain([\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"]) ``` **Expected Output:** ```python [\\"a\\", \\"ba\\", \\"bda\\", \\"bdca\\"] ``` **Notes:** 1. Each word in the list must be formed by adding exactly one letter to the previous word. 2. The function should be efficient to handle lists up to 1000 words. 3. The words in the returned chain should follow the order as they appear in the chain, not necessarily the order in the input list.","solution":"def find_longest_chain(words): Finds the longest chain of words such that each word is formed by adding exactly one letter to the previous word in the chain, and that each shorter word in the chain is a valid word in the list. Parameters: words (List[str]): A list of words consisting of lowercase letters. Returns: List[str]: The longest chain of words found. If there are multiple chains of the same maximum length, return any one of them. words_set = set(words) memo = {} def longest_chain(word): if word in memo: return memo[word] max_chain = [word] for i in range(len(word)): new_word = word[:i] + word[i+1:] if new_word in words_set: current_chain = longest_chain(new_word) + [word] if len(current_chain) > len(max_chain): max_chain = current_chain memo[word] = max_chain return max_chain result = [] for word in words: current_chain = longest_chain(word) if len(current_chain) > len(result): result = current_chain return result"},{"question":"You are required to create a function using Python that processes a list of integers and returns a new list containing only the elements that are prime numbers. A prime number is defined as being greater than 1 and having no divisors other than 1 and itself. Function Signature ```python def filter_prime_numbers(numbers: List[int]) -> List[int]: ``` Parameters - `numbers` (List[int]): A list of integers to be processed. Returns - `List[int]`: A list containing only the prime numbers from the input list. Requirements 1. The implementation should include a helper function `is_prime(n: int) -> bool` to determine if a number `n` is prime. 2. Optimize the `is_prime` function to have a time complexity of O(√n) for checking each number\'s primality. 3. If the input list is empty, return an empty list. Example ```python from typing import List def is_prime(n: int) -> bool: if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_prime_numbers(numbers: List[int]) -> List[int]: return [num for num in numbers if is_prime(num)] # Example usage print(filter_prime_numbers([10, 15, 3, 7, 9, 11])) # Output: [3, 7, 11] print(filter_prime_numbers([4, 6, 8, 9, 10])) # Output: [] ```","solution":"from typing import List def is_prime(n: int) -> bool: Determine if a number is prime. A number is considered prime if it is greater than 1 and has no divisors other than 1 and itself. Args: n (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_prime_numbers(numbers: List[int]) -> List[int]: Filter the list to only include prime numbers. Args: numbers (List[int]): The list of integers to filter. Returns: List[int]: A list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"**Problem Title: Stock Price Fluctuation Tracker** Design a class `StockPriceTracker` to manage real-time stock price updates and queries. You need to implement functionality for recording stock price updates, fetching the current stock price, and retrieving the maximum and minimum stock prices during the day. **Class Definition:** ```python class StockPriceTracker: def __init__(self): Initializes the StockPriceTracker object. def update(self, timestamp: int, price: int) -> None: Records the price at the specified timestamp. :param timestamp: An integer representing when the price was recorded. :param price: An integer representing the stock price at the given timestamp. def current(self) -> int: Returns the latest recorded stock price. :return: An integer representing the current stock price. def maximum(self) -> int: Returns the highest stock price recorded so far. :return: An integer representing the maximum stock price. def minimum(self) -> int: Returns the lowest stock price recorded so far. :return: An integer representing the minimum stock price. ``` **Methods and Specifications:** 1. `update(self, timestamp: int, price: int) -> None`: Records the stock price at the given timestamp. If the same timestamp is updated multiple times, the latest price should overwrite the previous price. 2. `current(self) -> int`: Returns the latest stock price. The current stock price is the price at the latest timestamp. 3. `maximum(self) -> int`: Returns the maximum stock price recorded so far. 4. `minimum(self) -> int`: Returns the minimum stock price recorded so far. **Example Usage:** ```python tracker = StockPriceTracker() tracker.update(1, 100) tracker.update(2, 90) tracker.update(3, 120) tracker.update(2, 95) print(tracker.current()) # Output: 120 print(tracker.maximum()) # Output: 120 print(tracker.minimum()) # Output: 95 ``` **Constraints:** - All timestamps will be positive integers. - All prices will be positive integers. - All update, current, maximum, and minimum operations will be called at most `10^5` times each.","solution":"class StockPriceTracker: def __init__(self): self.timestamp_to_price = {} self.min_price = float(\'inf\') self.max_price = float(\'-inf\') self.latest_timestamp = float(\'-inf\') self.latest_price = None def update(self, timestamp: int, price: int) -> None: if timestamp in self.timestamp_to_price: old_price = self.timestamp_to_price[timestamp] if old_price == self.min_price or old_price == self.max_price: del self.timestamp_to_price[timestamp] self.timestamp_to_price[timestamp] = price if timestamp >= self.latest_timestamp: self.latest_timestamp = timestamp self.latest_price = price if price > self.max_price: self.max_price = price if price < self.min_price: self.min_price = price self.min_price = min(self.timestamp_to_price.values()) self.max_price = max(self.timestamp_to_price.values()) def current(self) -> int: return self.latest_price def maximum(self) -> int: return self.max_price def minimum(self) -> int: return self.min_price"},{"question":"You are required to implement a function `interleave_arrays(arr1, arr2)` that takes two lists of integers and returns a new list that interweaves the elements of the input lists. If the lists are of unequal length, the remaining elements of the longer list should be appended to the end. # Specifications: 1. **Function Name:** `interleave_arrays` 2. **Input:** - `arr1` (a list of integers): The first list to be interleaved. - `arr2` (a list of integers): The second list to be interleaved. 3. **Output:** - A list of integers: The interleaved result of the two input lists. # Details: - The function should start with the first element of the first list (`arr1`), followed by the first element of the second list (`arr2`), then the second element of the first list, and so on. - If one list is longer than the other, append the remaining elements of the longer list to the result. # Example: ```python result = interleave_arrays([1, 3, 5], [2, 4, 6, 7, 8]) print(result) # Output should be [1, 2, 3, 4, 5, 6, 7, 8] result = interleave_arrays([10, 20], [30, 40, 50]) print(result) # Output should be [10, 30, 20, 40, 50] ``` The solution should handle arrays of unequal lengths gracefully by appending the remaining elements of the longer list to the result.","solution":"def interleave_arrays(arr1, arr2): Interleaves elements of two lists and returns the resulting list. If lists are of unequal lengths, appends remaining elements of the longer list. result = [] len1, len2 = len(arr1), len(arr2) min_len = min(len1, len2) for i in range(min_len): result.append(arr1[i]) result.append(arr2[i]) if len1 > len2: result.extend(arr1[min_len:]) elif len2 > len1: result.extend(arr2[min_len:]) return result"},{"question":"Write a function to simulate transactions at a grocery store for a given number of customers. Each transaction should include \'TransactionID\', \'CustomerID\', and \'AmountSpent\'. Store these transactions in an SQLite database and calculate the total amount spent by each customer and the overall average transaction amount. Finally, return a DataFrame containing all transactions. The function should output with: - A pandas DataFrame containing the transaction records. - A dictionary with the total amount spent by each customer. - The overall average transaction amount. You should write self-contained code starting with: ``` import sqlite3 import pandas as pd import random def simulate_transactions(n_customers=50, n_transactions=200): ```","solution":"import sqlite3 import pandas as pd import random def simulate_transactions(n_customers=50, n_transactions=200): # Create a SQLite database in memory conn = sqlite3.connect(\':memory:\') cursor = conn.cursor() # Create the transactions table cursor.execute(\'\'\' CREATE TABLE transactions ( TransactionID INTEGER PRIMARY KEY, CustomerID INTEGER, AmountSpent REAL ) \'\'\') # Generate random transactions transactions = [] for i in range(n_transactions): transaction_id = i + 1 customer_id = random.randint(1, n_customers) amount_spent = round(random.uniform(5.0, 100.0), 2) # Spending between 5.00 and 100.00 transactions.append((transaction_id, customer_id, amount_spent)) # Insert transactions into the database cursor.executemany(\'INSERT INTO transactions VALUES (?, ?, ?)\', transactions) conn.commit() # Query all transactions cursor.execute(\'SELECT * FROM transactions\') rows = cursor.fetchall() # Convert to DataFrame df = pd.DataFrame(rows, columns=[\'TransactionID\', \'CustomerID\', \'AmountSpent\']) # Calculate total amount spent by each customer total_amounts = df.groupby(\'CustomerID\')[\'AmountSpent\'].sum().to_dict() # Calculate overall average transaction amount avg_transaction_amount = df[\'AmountSpent\'].mean() # Close the database connection conn.close() return df, total_amounts, avg_transaction_amount"},{"question":"```python import pandas as pd import numpy as np from sklearn.decomposition import PCA from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score def my_function(dataset, n_components, test_size=0.2, random_state=None): Apply PCA to reduce the dimensionality of the features in the dataset, then train a RandomForestClassifier on the transformed data, and evaluate its accuracy. Args: - dataset (pd.DataFrame): The input data with features and target column. - n_components (int): Number of components to keep for PCA. - test_size (float): Fraction of the data to be used for testing. - random_state (int, optional): Random state for reproducibility. Returns: - float: Accuracy of the classifier on the test set. # Raise an exception if the dataset is empty if dataset.empty: raise ValueError(\\"The input dataset is empty.\\") # Separate features and target X = dataset.drop(\'target\', axis=1) y = dataset[\'target\'] # Apply PCA to the features pca = PCA(n_components=n_components, random_state=random_state) X_pca = pca.fit_transform(X) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=test_size, random_state=random_state) # Train RandomForestClassifier clf = RandomForestClassifier(random_state=random_state) clf.fit(X_train, y_train) # Make predictions and evaluate accuracy y_pred = clf.predict(X_test) accuracy = accuracy_score(y_test, y_pred) return accuracy ```","solution":"import pandas as pd import numpy as np from sklearn.decomposition import PCA from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score def my_function(dataset, n_components, test_size=0.2, random_state=None): Apply PCA to reduce the dimensionality of the features in the dataset, then train a RandomForestClassifier on the transformed data, and evaluate its accuracy. Args: - dataset (pd.DataFrame): The input data with features and target column. - n_components (int): Number of components to keep for PCA. - test_size (float): Fraction of the data to be used for testing. - random_state (int, optional): Random state for reproducibility. Returns: - float: Accuracy of the classifier on the test set. # Raise an exception if the dataset is empty if dataset.empty: raise ValueError(\\"The input dataset is empty.\\") # Separate features and target X = dataset.drop(\'target\', axis=1) y = dataset[\'target\'] # Apply PCA to the features pca = PCA(n_components=n_components, random_state=random_state) X_pca = pca.fit_transform(X) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=test_size, random_state=random_state) # Train RandomForestClassifier clf = RandomForestClassifier(random_state=random_state) clf.fit(X_train, y_train) # Make predictions and evaluate accuracy y_pred = clf.predict(X_test) accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"Generate a list of random integers, remove all duplicates, sort the list in ascending order, and return both the original list and the modified list without duplicates. This function demonstrates the use of random number generation, list manipulation, and sorting. The function should output: - tuple: A tuple containing: - list: The original list with random integers. - list: The modified list sorted in ascending order without duplicates. You should write self-contained code starting with: ``` import random def task_func(length: int, lower_bound: int, upper_bound: int, seed: int = None): ```","solution":"import random def task_func(length: int, lower_bound: int, upper_bound: int, seed: int = None): Generates a list of random integers, removes all duplicates, sorts the list in ascending order, and returns both the original list and the modified list without duplicates. Parameters: length (int): The number of random integers to generate. lower_bound (int): The lower bound of the random integers. upper_bound (int): The upper bound of the random integers. seed (int or None): The random seed for reproducibility. Default is None. Returns: tuple: A tuple containing: - list: The original list with random integers. - list: The modified list sorted in ascending order without duplicates. if seed is not None: random.seed(seed) original_list = [random.randint(lower_bound, upper_bound) for _ in range(length)] modified_list = sorted(set(original_list)) return original_list, modified_list"},{"question":"You are given a dataset that tracks daily sales numbers across different regions for a retail company. Your task is to create a function `plot_sales_trends(df, region, metric)` to analyze and visualize sales trends for a specific region over time using Matplotlib. The dataset `df` contains the following columns: - `REGION`: The region name. - A column name specified by `metric`: Contains datetime information regarding the sales dates. - `sales_amount`: The sales amount for the respective date in the specified region. The function `plot_sales_trends` should plot the total, average, and median sales amounts for each day and show an overall trend line. The time interval for the x-axis is represented by the `metric` parameter, which can take values \\"date\\" or \\"month\\". - \\"date\\": Group by days. - \\"month\\": Group by months. **Function Signature:** ```python def plot_sales_trends(df, region, metric): pass ``` **Requirements:** - Convert the datetime information using the `pandas.to_datetime` function. - Use Matplotlib to create the plots, including plotting total sales as a bar chart and average and median sales as line charts. - The x-axis should represent the time intervals specified by `metric`. - Overlay a trend line that represents the overall sales trend using a rolling average if necessary. **Example Usage:** ```python import pandas as pd # Please refer to the data file structure in the problem description. data = { \'REGION\': [\'North\', \'North\', \'North\', \'South\', \'South\'], \'sales_date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\'], \'sales_amount\': [100, 200, 150, 80, 90] } df = pd.DataFrame(data) plot_sales_trends(df, \'North\', \'date\') ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales_trends(df, region, metric): Plots sales trends for a specific region over time. Parameters: - df: pandas DataFrame containing the sales data. - region: the region to filter by. - metric: time interval metric, \\"date\\" or \\"month\\". # Filter data for the specified region region_df = df[df[\'REGION\'] == region] # Convert sales_date to datetime region_df[\'sales_date\'] = pd.to_datetime(region_df[\'sales_date\']) # Set the appropriate time group based on the metric if metric == \'date\': region_df[\'time_period\'] = region_df[\'sales_date\'].dt.date elif metric == \'month\': region_df[\'time_period\'] = region_df[\'sales_date\'].dt.to_period(\'M\').dt.to_timestamp() else: raise ValueError(\\"Metric must be \'date\' or \'month\'\\") # Group data by time_period grouped = region_df.groupby(\'time_period\')[\'sales_amount\'] # Calculate total, average, and median sales amounts total_sales = grouped.sum() average_sales = grouped.mean() median_sales = grouped.median() # Plotting plt.figure(figsize=(14, 7)) # Plot total sales as a bar chart plt.bar(total_sales.index, total_sales, label=\'Total Sales\', color=\'skyblue\', alpha=0.6, width=0.6) # Plot average and median sales as line charts plt.plot(average_sales.index, average_sales, label=\'Average Sales\', color=\'green\', marker=\'o\') plt.plot(median_sales.index, median_sales, label=\'Median Sales\', color=\'orange\', marker=\'x\') # Plot overall trend line (rolling average) trend = total_sales.rolling(window=2, min_periods=1).mean() plt.plot(trend.index, trend, label=\'Trend Line (2-point rolling average)\', color=\'red\', linestyle=\'--\') # Formatting the plot plt.xlabel(\'Time Period\') plt.ylabel(\'Sales Amount\') plt.title(f\'Sales Trends for {region.capitalize()} Region\') plt.legend() plt.grid(True) plt.tight_layout() # Show plot plt.show()"},{"question":"Design a function that computes the Euclidean distance between two points in `n`-dimensional space. The Euclidean distance between two points (mathbf{p} = (p_1, p_2, ldots, p_n)) and (mathbf{q} = (q_1, q_2, ldots, q_n)) is defined as: [ d(mathbf{p}, mathbf{q}) = sqrt{sum_{i=1}^{n} (q_i - p_i)^2} ] Your task is to write a function named `euclidean_distance`, which takes the following parameters: - `point1` (List[float]): Coordinates of the first point. - `point2` (List[float]): Coordinates of the second point. The function should return the Euclidean distance as a float. You may assume that both points have the same number of dimensions and the lists `point1` and `point2` are non-empty. **Function Signature:** ```python def euclidean_distance(point1, point2): # your code here ``` **Examples:** ```python point1 = [1, 2, 3] point2 = [4, 5, 6] print(euclidean_distance(point1, point2)) # Expected output: 5.196152422706632 point1 = [7, -4] point2 = [-3, 4] print(euclidean_distance(point1, point2)) # Expected output: 12.806248474865697 ```","solution":"import math from typing import List def euclidean_distance(point1: List[float], point2: List[float]) -> float: Computes the Euclidean distance between two points in n-dimensional space. Parameters: - point1 (List[float]): Coordinates of the first point. - point2 (List[float]): Coordinates of the second point. Returns: - float: The Euclidean distance between the two points. if len(point1) != len(point2): raise ValueError(\\"Both points must have the same number of dimensions\\") sum_of_squares = sum((q - p) ** 2 for p, q in zip(point1, point2)) return math.sqrt(sum_of_squares)"},{"question":"You are provided with a list of dictionaries representing student data. Each dictionary contains the student\'s name and their scores in multiple subjects. Write a function named `calculate_class_averages` that takes in this list and computes the average score for each subject across all students. The function should: 1. Use the `pandas.DataFrame` class to handle and manipulate tabular data. 2. Calculate the average score for each subject. 3. Return a dictionary where the keys are the subject names and the values are the average scores. Here’s the function signature: ```python def calculate_class_averages(students_data): Calculate the average score for each subject across all students. Parameters: students_data : list of dict A list of dictionaries where each dictionary represents a student\'s scores. Returns: dict : A dictionary with subject names as keys and average scores as values. ``` Example usage: ```python students_data = [ {\\"name\\": \\"Alice\\", \\"math\\": 90, \\"science\\": 80, \\"english\\": 85}, {\\"name\\": \\"Bob\\", \\"math\\": 70, \\"science\\": 75, \\"english\\": 65}, {\\"name\\": \\"Charlie\\", \\"math\\": 50, \\"science\\": 60, \\"english\\": 70} ] # Call the function to calculate class averages averages = calculate_class_averages(students_data) print(averages) ``` Expected output: ```python {\'math\': 70.0, \'science\': 71.66666666666667, \'english\': 73.33333333333333} ```","solution":"import pandas as pd def calculate_class_averages(students_data): Calculate the average score for each subject across all students. Parameters: students_data : list of dict A list of dictionaries where each dictionary represents a student\'s scores. Returns: dict : A dictionary with subject names as keys and average scores as values. if not students_data: return {} df = pd.DataFrame(students_data) subjects = df.columns.difference([\'name\']) averages = df[subjects].mean().to_dict() return averages"},{"question":"You are working on implementing a file system simulation in Python. The file system should support basic directory and file creation, as well as listing the contents of directories. Write a class named `FileSystem` that includes the following methods: 1. `mkdir(path: str) -> None`: Create a new directory at the specified path. If intermediate directories do not exist, create them as well. 2. `touch(path: str) -> None`: Create a new file at the specified path, including any intermediate directories if they do not exist. 3. `ls(path: str) -> List[str]`: List the contents of the directory at the specified path. Return the list of directory and file names, sorted lexicographically. # Constraints: - The paths provided will always be valid and start with a \'/\' (root directory). - No need to handle deletion of files or directories. - You can assume that all file names are unique within their directories. # Example ```python fs = FileSystem() fs.mkdir(\'/a/b/c\') fs.touch(\'/a/b/c/d.txt\') fs.touch(\'/a/b/x.txt\') assert fs.ls(\'/a/b\') == [\'c\', \'x.txt\'] assert fs.ls(\'/a/b/c\') == [\'d.txt\'] # Creating files and directories if they do not exist fs.touch(\'/a/e/f.txt\') assert fs.ls(\'/a/e\') == [\'f.txt\'] assert fs.ls(\'/\') == [\'a\'] # Nested directory structure creation fs.mkdir(\'/a/b/d/e/f\') assert fs.ls(\'/a/b/d/e\') == [\'f\'] fs.touch(\'/a/b/d/e/f/g.txt\') assert fs.ls(\'/a/b/d/e/f\') == [\'g.txt\'] ``` **Hint**: Consider using a nested dictionary structure to represent the file system hierarchy.","solution":"class FileSystem: def __init__(self): self.root = {} def mkdir(self, path: str) -> None: dirs = path.split(\'/\')[1:] current = self.root for directory in dirs: if directory not in current: current[directory] = {} current = current[directory] def touch(self, path: str) -> None: *dirs, file_name = path.split(\'/\')[1:] current = self.root for directory in dirs: if directory not in current: current[directory] = {} current = current[directory] current[file_name] = None def ls(self, path: str) -> list: if path == \'/\': current = self.root else: dirs = path.split(\'/\')[1:] current = self.root for directory in dirs: current = current[directory] return sorted(current.keys())"},{"question":"You have been tasked with creating a Python function to simulate and track the performance of a basic stock trading strategy. This exercise aims to help you utilize programming constructs such as loops, conditionals, and data structures. **Function Name:** `stock_trading_simulator` **Function Role:** The function will simulate daily stock price changes and track the performance of a simple trading strategy. Specifically: 1. Simulate the change in stock price over a specified number of days. 2. Implement a basic trading strategy where you buy stock if the price drops below a certain threshold and sell if it rises above a different threshold. 3. Keep track of the total profit/loss generated by following this strategy. **Requirements:** - You should use list data structures to maintain the stock prices and transactions. - Use the `random` library to generate random daily price changes. **Steps to Follow:** 1. Initialize a list to store daily stock prices, starting with an initial price. 2. Generate daily price changes using `random.uniform` to simulate realistic price fluctuations. 3. Implement the trading strategy based on pre-defined buy/sell thresholds. 4. Track the total profit or loss incurred by following the strategy. **Function Signature:** ```python def stock_trading_simulator(initial_price: float, days: int, buy_threshold: float, sell_threshold: float) -> float: ``` **Parameters:** - `initial_price` (float): The starting price of the stock. - `days` (int): The number of days to simulate the stock price changes. - `buy_threshold` (float): The price drop percentage at which to buy the stock (e.g., 0.05 for a 5% drop). - `sell_threshold` (float): The price rise percentage at which to sell the stock (e.g., 0.10 for a 10% rise). **Output:** - The function will return the total profit or loss from the simulated trading strategy.","solution":"import random def stock_trading_simulator(initial_price: float, days: int, buy_threshold: float, sell_threshold: float) -> float: Simulates a stock trading strategy based on daily price changes. Parameters: initial_price (float): The starting price of the stock. days (int): The number of days to simulate the stock price changes. buy_threshold (float): The price drop percentage at which to buy the stock (e.g., 0.05 for a 5% drop). sell_threshold (float): The price rise percentage at which to sell the stock (e.g., 0.10 for a 10% rise). Returns: float: Total profit or loss generated from the trading strategy. stock_prices = [initial_price] holdings = 0 cash = 0.0 for day in range(days): # Simulate daily price change daily_change_percent = random.uniform(-0.02, 0.02) # Simulate daily change between -2% and +2% new_price = stock_prices[-1] * (1 + daily_change_percent) stock_prices.append(new_price) # Trading strategy if holdings == 0 and new_price <= initial_price * (1 - buy_threshold): # Buy one unit of stock holdings = 1 cash -= new_price elif holdings == 1 and new_price >= initial_price * (1 + sell_threshold): # Sell one unit of stock holdings = 0 cash += new_price # Closing holdings if holdings == 1: cash += stock_prices[-1] # Sell remaining stock at last price return cash"},{"question":"You have been assigned to write a function that normalizes the columns of a given 2D matrix (NumPy array) so that each column has a mean of 0 and a standard deviation of 1. This is a common preprocessing step in many machine learning algorithms to ensure that each feature contributes equally to the model. Your function should be named `normalize_columns` and should take one parameter: - `X`: A 2D NumPy array, where each row represents a data sample, and each column represents a feature. The function should return a new 2D NumPy array where each column of the input array `X` has been normalized. Example: If the input matrix `X` is: ``` [[1, 2], [4, 5], [7, 8]] ``` The mean of each column is: `[4, 5]` The standard deviation of each column is: `[2.44949, 2.44949]` The output should be: ``` [[-1.22474, -1.22474], [ 0, 0], [ 1.22474, 1.22474]] ``` # Implementation Constraints - You must use the `numpy.mean` and `numpy.std` functions to compute the mean and standard deviation respectively. # Function Signature ```python def normalize_columns(X: np.ndarray) -> np.ndarray: ``` # Additional Context - The `numpy.mean` function calculates the mean along a specified axis. - The `numpy.std` function calculates the standard deviation along a specified axis. - To normalize each column, subtract the column\'s mean and divide by its standard deviation. # Library Documentation: - `numpy.mean = mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)` - Parameters: - `a`: array_like (Array containing numbers whose mean is desired). - `axis`: None or int or tuple of ints, optional (Axis or axes along which the means are computed). - `dtype`: data-type, optional (Type to use in computing the mean). - `out`: ndarray, optional (Alternative output array in which to place the result). - `keepdims`: bool, optional (If True, the axes which are reduced are left in the result as dimensions with size one). - `where`: array_like of bool, optional (Elements to include in the mean). - Returns: mean (ndarray, see dtype parameter above). - `numpy.std = std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)` - Parameters: - `a`: array_like (Array containing numbers whose standard deviation is desired). - `axis`: None or int or tuple of ints, optional (Axis or axes along which the standard deviations are computed). - `dtype`: data-type, optional (Type to use in computing the standard deviation). - `out`: ndarray, optional (Alternative output array in which to place the result). - `ddof`: int, optional (Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N is the number of elements). - `keepdims`: bool, optional (If True, the axes which are reduced are left in the result as dimensions with size one). - `where`: array_like of bool, optional (Elements to include in the std). - Returns: standard deviation (ndarray, see dtype parameter above). Implement the `normalize_columns` function as described above.","solution":"import numpy as np def normalize_columns(X: np.ndarray) -> np.ndarray: Normalize the columns of a given 2D NumPy array so that each column has a mean of 0 and a standard deviation of 1. Parameters: X (np.ndarray): A 2D NumPy array where each row represents a data sample and each column represents a feature. Returns: np.ndarray: A new 2D NumPy array where each column has been normalized. column_means = np.mean(X, axis=0) column_stds = np.std(X, axis=0) # Avoid division by zero in case of zero standard deviation column_stds[column_stds == 0] = 1 return (X - column_means) / column_stds"},{"question":"Create a function that takes a string containing a mathematical expression and evaluates it. The expression may include addition, subtraction, multiplication, and division operations. The function should return the result of the evaluation, or an error message if the expression is invalid. Note: - The expression will be a string comprising digits, operators (\'+\', \'-\', \'*\', \'/\'), and parentheses. - Ensure the function handles operator precedence and parentheses correctly. - The function should return an error message if the input expression is invalid (e.g., unbalanced parentheses, invalid characters). - Division by zero should return an error message. For example, the function should behave as follows: - evaluate_expression(\\"3 + 5 * 2\\") returns 13 - evaluate_expression(\\"10 / (5 - 5)\\") returns \\"Error: Division by zero\\" - evaluate_expression(\\"2 + (3 - 1))\\") returns \\"Error: Invalid expression\\" You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): Evaluates the given mathematical expression string. Args: expression (str): A string containing a mathematical expression. Returns: int/float/str: The result of the evaluation or an error message if the expression is invalid. try: # Check for matching parentheses if expression.count(\'(\') != expression.count(\')\'): return \\"Error: Invalid expression\\" # Try to evaluate the expression. result = eval(expression, {}, {}) return result except ZeroDivisionError: return \\"Error: Division by zero\\" except (SyntaxError, NameError): return \\"Error: Invalid expression\\""},{"question":"You are required to implement a function that rotates a given square matrix 90 degrees clockwise. This exercise will help you understand how to manipulate and transform 2D arrays, which is a fundamental skill in various programming scenarios, including graphics and game development. # Function Requirements: 1. Name the function `rotate_matrix`. 2. The function should accept one parameter: - `matrix`: a list of lists representing a square matrix (i.e., the number of rows is equal to the number of columns). # Detailed Steps: 1. Create an empty matrix of the same dimensions as the input matrix. 2. For each element in the input matrix, assign its value to the appropriate position in the new matrix such that the matrix is rotated 90 degrees clockwise. 3. Return the rotated matrix. # Example Function Call: ```python rotated = rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) print(rotated) ``` # Expected Output: The rotated matrix should be: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints: - Assume the input matrix will always be a non-empty square matrix. - Do not use any in-built functions for matrix rotation (e.g., no `zip` or complex slicing). Below you can find an example implementation of the required function: ```python def rotate_matrix(matrix): n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated # Example function usage: rotated = rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) print(rotated) ```","solution":"def rotate_matrix(matrix): Rotates the given square matrix 90 degrees clockwise. Args: matrix (list of list of int): The square matrix to rotate. Returns: list of list of int: The rotated matrix. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated # Example function usage: # rotated = rotate_matrix([ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ]) # print(rotated)"},{"question":"Write a Python function `rotate_matrix` that takes a square matrix (a list of lists) as input and rotates it 90 degrees clockwise. The function should modify the matrix in-place and return `None`. The main challenge of this question is to demonstrate your understanding of matrix manipulation and element indexing. Here are the steps you need to follow: 1. Transpose the matrix - meaning convert all rows to columns and vice versa. 2. Reverse each row (turn the first element of each row into the last element of that row, and so on). Here is an example to illustrate the transformation: Input: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output after running `rotate_matrix(matrix)`: ``` matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Your task is to implement the function `rotate_matrix(matrix)` that achieves this transformation. Note: - You must rotate the matrix in-place. Do not use extra space for another matrix. - Assume that the input matrix is always a square matrix with at least one element.","solution":"def rotate_matrix(matrix): Rotate the input square matrix 90 degrees clockwise in-place. Args: matrix (list of lists): Input square matrix Returns: None n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() # Example usage: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"},{"question":"You are tasked with developing a Python function `generate_report_card()` that reads and displays a list of student records from a JSON file named `student_records.txt` located within an `Academic` directory in the current working directory. Each student record in the list is a dictionary containing the following keys: `Name`, `Grades` (a dictionary of subject: grade pairs), and `Attendance` (a percentage). The function should: 1. Print the entire list of student records. 2. Calculate the average grade for each student and include this information in the output. 3. Print the names of students with attendance below 75%. The problem is educational in nature and aims to familiarize you with three specific Python libraries: `json`, `statistics`, and `pathlib.Path`. Use the following APIs in your code: 1. `json.loads`: To parse the JSON data from the file. 2. `statistics.mean`: To calculate the average grade for each student. 3. `pathlib.Path`: To handle file paths and file operations. Your task is to write the function `generate_report_card` using these three libraries to achieve the desired functionality. ```python def generate_report_card(): # Your implementation here ```","solution":"import json from statistics import mean from pathlib import Path def generate_report_card(): # Locate the file file_path = Path(\'Academic/student_records.txt\') # Read the JSON data from the file with open(file_path, \'r\') as file: student_records = json.loads(file.read()) # Print all student records print(\\"Student Records:\\") for record in student_records: print(record) print(\\"nAverage Grades:\\") # Calculate and display the average grade for each student for record in student_records: grades = list(record[\'Grades\'].values()) avg_grade = mean(grades) print(f\\"Name: {record[\'Name\']}, Average Grade: {avg_grade:.2f}\\") print(\\"nStudents with less than 75% Attendance:\\") # Print the names of students with attendance below 75% for record in student_records: if record[\'Attendance\'] < 75: print(record[\'Name\'])"},{"question":"You are required to write a function named `calculate_areacode_totals` which calculates the total number of phone numbers for each area code from a given list of phone numbers. Your function should be built using the `collections` library in Python. Here are the function specifications: # Function Signature ```python def calculate_areacode_totals(phone_numbers: List[str]) -> Dict[str, int]: ``` # Parameters - `phone_numbers` (List[str]): A list containing phone numbers in the format `\\"{area code} {phone number}\\"`. # Returns - `Dict[str, int]`: A dictionary where keys are area codes and values are the total number of phone numbers for each area code. # Constraints 1. The area code and phone number in each entry are separated by a single space. 2. Each phone number will have a valid integer area code and a valid integer phone number. # Example Usage ```python >>> calculate_areacode_totals([\\"123 4567890\\", \\"123 1234567\\", \\"456 9876543\\", \\"123 9876543\\"]) {\'123\': 3, \'456\': 1} >>> calculate_areacode_totals([\\"789 1234567\\", \\"789 7654321\\", \\"101 1111111\\"]) {\'789\': 2, \'101\': 1} ``` # Required Libraries - `collections` Ensure your implementation follows the above specifications precisely.","solution":"from collections import defaultdict from typing import List, Dict def calculate_areacode_totals(phone_numbers: List[str]) -> Dict[str, int]: area_code_totals = defaultdict(int) for phone_number in phone_numbers: area_code, _ = phone_number.split(\\" \\", 1) area_code_totals[area_code] += 1 return dict(area_code_totals)"},{"question":"You are required to write a Python function that reads a JSON file containing multiple records of employee details and returns a dictionary summarizing the number of employees in each department. Your task is to implement a function called `employee_summary`, which: 1. Loads data from a JSON file containing employee records. 2. Extracts the department information from each employee record. 3. Counts the number of employees in each department. 4. Returns the summary as a dictionary where keys are department names and values are the number of employees in each department. Please use the `json` library for handling JSON data. # Function Signature ```python def employee_summary(file_path: str) -> dict: pass ``` # Parameters - `file_path` (str): The path to the JSON file to be read. Each record in the JSON file contains at least the following fields: `name`, `department`, `position`, `salary`. # Returns - `dict`: A dictionary summarizing the number of employees in each department. # Example Usage ```python # Assuming the JSON file `employees.json` contains: # [ # {\\"name\\": \\"John Doe\\", \\"department\\": \\"Engineering\\", \\"position\\": \\"Software Engineer\\", \\"salary\\": 100000}, # {\\"name\\": \\"Jane Smith\\", \\"department\\": \\"Marketing\\", \\"position\\": \\"Marketing Manager\\", \\"salary\\": 80000}, # {\\"name\\": \\"Mike Brown\\", \\"department\\": \\"Engineering\\", \\"position\\": \\"DevOps Engineer\\", \\"salary\\": 90000} # ] summary = employee_summary(\'employees.json\') print(summary) # Output: {\'Engineering\': 2, \'Marketing\': 1} ``` # Constraints - Assume the JSON file is properly formatted as a list of dictionaries and each dictionary represents one employee record. - Assume that the file_path provided is valid and the file exists.","solution":"import json def employee_summary(file_path: str) -> dict: Reads the JSON file containing employee records and returns a dictionary summarizing the number of employees in each department. Parameters: file_path (str): The path to the JSON file to be read. Returns: dict: A dictionary summarizing the number of employees in each department. with open(file_path, \'r\') as file: employees = json.load(file) summary = {} for employee in employees: department = employee.get(\'department\') if department in summary: summary[department] += 1 else: summary[department] = 1 return summary"},{"question":"You are required to analyze a given text file containing statistical data and perform a basic data analysis. The text file contains records of adults\' heights and weights, with each line of the file containing a pair of values: height (in inches) and weight (in pounds), separated by a space. **Objective:** Write a function `calculate_statistics()` that does the following: 1. Reads the text file and parses the height and weight values. 2. Calculates the mean, median, and standard deviation for both height and weight. 3. Creates a Pandas DataFrame to store these statistical measures in a tabular form. **Function Signature:** ```python def calculate_statistics(file_path: str) -> pd.DataFrame: ``` **Requirements:** - Use the `mean`, `median`, and `std` functions from the `numpy` library to compute the required statistics. - Use the `read_csv` function from the `pandas` library to read and parse the text file. - The resulting DataFrame should have the following columns: \\"Measure\\", \\"Height\\", and \\"Weight\\". **Input:** - A string `file_path` representing the path to the text file containing the height and weight data. **Output:** - A Pandas DataFrame containing the calculated statistics for height and weight. **Example:** If the text file \\"data.txt\\" contains the following content: ``` 70 150 68 145 72 160 65 135 ``` Suppose the output DataFrame looks like this (values are calculated based on the provided data): | Measure | Height | Weight | |---------------|--------|--------| | Mean | 68.75 | 147.5 | | Median | 69.0 | 147.5 | | Standard_Deviation | 2.99 | 10.41 | Note: Ensure the DataFrame columns \\"Measure\\", \\"Height\\", and \\"Weight\\" are correctly aligned and the values are rounded to two decimal places, if necessary.","solution":"import pandas as pd import numpy as np def calculate_statistics(file_path: str) -> pd.DataFrame: # Read the data from the file data = pd.read_csv(file_path, sep=\' \', header=None, names=[\'Height\', \'Weight\']) # Calculate statistics height_mean = np.mean(data[\'Height\']) weight_mean = np.mean(data[\'Weight\']) height_median = np.median(data[\'Height\']) weight_median = np.median(data[\'Weight\']) height_std = np.std(data[\'Height\'], ddof=1) weight_std = np.std(data[\'Weight\'], ddof=1) # Create a DataFrame to store the results statistics = pd.DataFrame({ \'Measure\': [\'Mean\', \'Median\', \'Standard_Deviation\'], \'Height\': [height_mean, height_median, height_std], \'Weight\': [weight_mean, weight_median, weight_std] }) # Round the results to 2 decimal places statistics = statistics.round(2) return statistics"},{"question":"**Problem Statement:** You are tasked with writing a function `calculate_change` that determines the minimum number of banknotes and coins needed to make a given amount of money. The function should take an amount in dollars and cents and return a dictionary detailing the count of each denomination required. The denominations should include 100 bill, 50 bill, 20 bill, 10 bill, 5 bill, 1 bill, 25¢ coin, 10¢ coin, 5¢ coin, and 1¢ coin. **Function Signature:** ```python def calculate_change(amount): ``` Where: - `amount`: A float representing the total amount of money in dollars and cents. The output should be a dictionary where the keys are the denomination names, and the values are the counts of each denomination needed to make up the given amount. **Guidelines:** 1. Start with the highest denomination and work your way down to the smallest. 2. Use integer division and modulus operations to determine the number of each denomination. 3. Ensure the output dictionary contains keys for all denominations, even if the count is zero. **Example usage:** ```python amount = 126.73 result = calculate_change(amount) print(result) # Expected Output: # { # \\"100 bill\\": 1, # \\"50 bill\\": 0, # \\"20 bill\\": 1, # \\"10 bill\\": 0, # \\"5 bill\\": 1, # \\"1 bill\\": 1, # \\"25¢ coin\\": 2, # \\"10¢ coin\\": 2, # \\"5¢ coin\\": 0, # \\"1¢ coin\\": 3 # } ``` In your implementation: 1. Convert all dollar amounts to cents to avoid floating-point arithmetic issues. 2. Once all denominations are determined, convert them back to the appropriate money format in the output dictionary.","solution":"def calculate_change(amount): Determines the minimum number of banknotes and coins to give a specified amount. Parameters: amount (float): The total amount in dollars and cents. Returns: dict: A dictionary with the count of each denomination needed. # Convert amount to cents to avoid floating point issues cents = int(round(amount * 100)) # Define denominations in cents denominations = { \\"100 bill\\": 10000, \\"50 bill\\": 5000, \\"20 bill\\": 2000, \\"10 bill\\": 1000, \\"5 bill\\": 500, \\"1 bill\\": 100, \\"25¢ coin\\": 25, \\"10¢ coin\\": 10, \\"5¢ coin\\": 5, \\"1¢ coin\\": 1 } change = {} # Calculate the number of each denomination needed for name, value in denominations.items(): count = cents // value cents %= value change[name] = count return change"},{"question":"You are asked to write a function that reads a configuration file in INI format, processes its sections and key-value pairs, and returns a summary of the configuration. The function, `parse_ini_config`, will perform the following tasks: 1. **Read the INI file**: The function will read the content of an INI file specified by the input argument `file_path`. 2. **Parse the Sections and Key-Value Pairs**: The function will parse the sections and key-value pairs in the INI file. 3. **Generate a Summary**: The function will generate and return a summary dictionary of the configuration. This dictionary should include: - A list of all sections present in the configuration. - A count of key-value pairs in each section. You may use the `configparser` library to handle the parsing of the INI file. **Function Signature:** ```python def parse_ini_config(file_path: str) -> dict: pass ``` **Example INI File Structure:** ``` [General] appname = MyApp version = 1.0 [Database] host = localhost port = 5432 [Logging] level = DEBUG file = /var/log/myapp.log ``` **Expected Output**: Given the example INI file above, the function should return the following dictionary: ```json { \\"sections\\": [\\"General\\", \\"Database\\", \\"Logging\\"], \\"summary\\": { \\"General\\": 2, \\"Database\\": 2, \\"Logging\\": 2 } } ``` **Constraints**: 1. Ensure the function handles potential errors gracefully, such as file not found or parsing errors. 2. The function should work with INI files that may contain comments or empty lines. **Additional Notes**: - Utilize the `read` or `read_file` method of `ConfigParser` class in the `configparser` library to read the file. - Ensure that the summary dictionary output is formatted as shown in the example.","solution":"import configparser import os def parse_ini_config(file_path: str) -> dict: Reads an INI configuration file, processes its sections and key-value pairs, and returns a summary. Parameters: - file_path (str): The path to the INI file. Returns: - dict: A summary dictionary with sections and key-value counts. # Check if the file exists if not os.path.isfile(file_path): raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") config = configparser.ConfigParser() # Try reading the file try: config.read(file_path) except configparser.ParsingError as e: raise ValueError(f\\"Error parsing the file {file_path}: {e}\\") summary = { \\"sections\\": [], \\"summary\\": {} } for section in config.sections(): summary[\\"sections\\"].append(section) summary[\\"summary\\"][section] = len(config.items(section)) return summary"},{"question":"Create a function that organizes a list of book titles and their respective authors. The function should accept a list of tuples, each containing the title and author. It should return a dictionary where the keys are authors and the values are lists of titles written by those authors, sorted alphabetically. You should write self-contained code starting with: ``` def organize_books(book_list): ```","solution":"def organize_books(book_list): Takes a list of tuples containing book titles and authors, and returns a dictionary with authors as keys and a list of their book titles (sorted alphabetically) as values. :param book_list: List[Tuple[str, str]] - A list of tuples where each tuple contains a book title and author name :return: Dict[str, List[str]] - A dictionary with authors as keys and a list of their book titles sorted alphabetically as values book_dict = {} for title, author in book_list: if author not in book_dict: book_dict[author] = [] book_dict[author].append(title) for author in book_dict: book_dict[author].sort() return book_dict"},{"question":"You are required to implement a Python function `smallest_window_sorting(arr)` that determines the smallest window (subarray) that needs to be sorted in order for the entire array to be sorted in non-descending order. If the array is already sorted, the function should return an empty list. The function will take the following parameter: - `arr`: A list of integers. The function should perform the following steps: 1. Identify the first element from the left that is out of order (i.e., greater than the next element). 2. Identify the first element from the right that is out of order (i.e., smaller than the previous element). 3. Define the smallest window `[left, right]` such that when this subarray is sorted, the entire array will be sorted. 4. Return the smallest window as a list `[left, right]`. If the array is already sorted, return an empty list. Example: ```python print(smallest_window_sorting([1, 3, 2, 4, 5])) # Output: [1, 2] print(smallest_window_sorting([1, 2, 3, 4, 5])) # Output: [] print(smallest_window_sorting([1, 5, 4, 3, 2, 6])) # Output: [1, 4] ``` Hints: - Consider edge cases such as an already sorted array or an array of length 1. - Utilize appropriate sorting or traversal techniques to achieve the desired complexity.","solution":"def smallest_window_sorting(arr): Returns the smallest subarray (window) that needs to be sorted in order for the entire array to be sorted in non-descending order. If the array is already sorted, returns an empty list. n = len(arr) if n <= 1: return [] left, right = 0, n - 1 # Find the first element from the left that is out of order while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: # The array is sorted return [] # Find the first element from the right that is out of order while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # To ensure that sorting the subarray from left to right will sort the entire array subarray_min = min(arr[left:right + 1]) subarray_max = max(arr[left:right + 1]) # Extend the left index to include any elements greater than subarray_min while left > 0 and arr[left - 1] > subarray_min: left -= 1 # Extend the right index to include any elements less than subarray_max while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return [left, right]"},{"question":"You are tasked with creating a function that simulates the behavior of a simplified digital clock. The function will count down from a given number of seconds and print the time remaining in the format \\"MM:SS\\" every second until it reaches zero. Define a function named `countdown_timer` that takes one argument: `total_seconds`, which is the number of seconds to count down from. Use the `time` library to pause the program for one second between each decrement. Function Signature: ```python def countdown_timer(total_seconds): pass ``` Use the following `time` library function to achieve the desired countdown: - `time.sleep` You can test your function with the following input: ```python total_seconds = 10 ``` The expected output should display: ``` 00:10 00:09 00:08 00:07 00:06 00:05 00:04 00:03 00:02 00:01 00:00 ``` Ensure that your function formats the time with leading zeros as shown in the sample output.","solution":"import time def countdown_timer(total_seconds): Counts down from the given number of seconds and prints the time remaining in the format MM:SS every second until it reaches zero. Arguments: total_seconds : int : Number of seconds to count down from while total_seconds >= 0: minutes, seconds = divmod(total_seconds, 60) print(f\\"{minutes:02}:{seconds:02}\\") time.sleep(1) total_seconds -= 1"},{"question":"You are given a list of integers and an integer `k`. Your task is to write a function named `findKLargestElements` that returns the `k` largest unique elements from the given list in descending order. You must use the `heapq` module to facilitate the finding of the largest elements efficiently. **Function Signature:** ```python def findKLargestElements(nums: List[int], k: int) -> List[int]: pass ``` **Input:** - `nums` (List[int]): A list of integers. - `k` (int): An integer representing the number of largest unique elements to return. **Output:** - A list of the `k` largest unique elements in descending order. **Examples:** ```python # Example 1 nums = [3, 2, 1, 5, 6, 4] k = 2 assert findKLargestElements(nums, k) == [6, 5] # Example 2 nums = [1, 1, 1, 2, 2, 3] k = 2 assert findKLargestElements(nums, k) == [3, 2] # Example 3 nums = [10, 9, 8, 7, 6, 5] k = 3 assert findKLargestElements(nums, k) == [10, 9, 8] ``` **Constraints:** - The input list `nums` will have at most 10,000 integers. - Each integer in `nums` will be in the range from -10^4 to 10^4. - `k` will be a positive integer and at most the number of unique elements in `nums`. Implement the function `findKLargestElements` to solve the problem using the `heapq` module and the standard Python library.","solution":"import heapq from typing import List def findKLargestElements(nums: List[int], k: int) -> List[int]: Returns the k largest unique elements from the list nums in descending order. # Remove duplicates and convert to list unique_nums = list(set(nums)) # If k is greater than or equal to number of unique elements, return the sorted unique elements if k >= len(unique_nums): return sorted(unique_nums, reverse=True) # Use a min-heap to keep track of the k largest elements largest_elements = heapq.nlargest(k, unique_nums) # Return them sorted in descending order return sorted(largest_elements, reverse=True)"},{"question":"Create a DataFrame simulating weather data, perform data cleaning operations to handle missing values, filter the data based on specific criteria, and plot the filtered data. The function should output with: Axes: A plot of the filtered weather data. You should write self-contained code starting with: ``` import pandas as pd import numpy as np import matplotlib.pyplot as plt def weather_analysis(start_date, periods, freq): ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def weather_analysis(start_date, periods, freq): Simulate weather data, perform cleaning operations, filter data based on specific criteria, and plot the filtered data. # Generate date range dates = pd.date_range(start=start_date, periods=periods, freq=freq) # Simulate weather data with some missing values np.random.seed(0) temperature = np.random.normal(loc=20, scale=5, size=periods) rainfall = np.random.normal(loc=5, scale=2, size=periods) weather_data = pd.DataFrame({\'Date\': dates, \'Temperature\': temperature, \'Rainfall\': rainfall}) weather_data.loc[::10, \'Temperature\'] = np.nan # Introduce NaNs in \'Temperature\' weather_data.loc[::15, \'Rainfall\'] = np.nan # Introduce NaNs in \'Rainfall\' # Handle missing values, fill them with the mean of the column weather_data[\'Temperature\'].fillna(weather_data[\'Temperature\'].mean(), inplace=True) weather_data[\'Rainfall\'].fillna(weather_data[\'Rainfall\'].mean(), inplace=True) # Filter data: e.g., Temperature > 25 and Rainfall < 7 filtered_data = weather_data[(weather_data[\'Temperature\'] > 25) & (weather_data[\'Rainfall\'] < 7)] # Plot filtered data fig, ax = plt.subplots() ax.plot(filtered_data[\'Date\'], filtered_data[\'Temperature\'], label=\'Temperature\') ax.plot(filtered_data[\'Date\'], filtered_data[\'Rainfall\'], label=\'Rainfall\') ax.set_xlabel(\'Date\') ax.set_ylabel(\'Values\') ax.set_title(\'Filtered Weather Data\') ax.legend() # Return the Axes for further inspection or testing return ax"},{"question":"In this problem, you are required to implement a function `moving_average` that calculates the moving average of a given list of numbers. The function will take as input a list of floats `data` representing the dataset and an integer `k` representing the window size for the moving average. The goal of this problem is to understand how to compute the moving average using a sliding window approach. **Function Signature:** ```python def moving_average(data: List[float], k: int) -> List[float]: ``` **Parameters:** - `data` (List[float]): A list of floats representing the dataset. - `k` (int): An integer representing the window size for the moving average. **Returns:** - List[float]: A list of floats representing the moving average values. **Requirements:** 1. Compute the moving average using a sliding window of size `k`. 2. Return a list of the moving average values. **Notes:** - If the window size `k` is greater than the length of the data list, return an empty list. - You can assume that the list `data` contains at least one element and `k` is a positive integer. **Example:** Given the following dataset `data` and window size `k`: ```python data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0] k = 3 ``` Calling `moving_average(data, k)` should return: ```python [2.0, 3.0, 4.0, 5.0] ``` Explanation: The moving averages are calculated as: - (1.0 + 2.0 + 3.0) / 3 = 2.0 - (2.0 + 3.0 + 4.0) / 3 = 3.0 - (3.0 + 4.0 + 5.0) / 3 = 4.0 - (4.0 + 5.0 + 6.0) / 3 = 5.0 Hence, the result is `[2.0, 3.0, 4.0, 5.0]`.","solution":"from typing import List def moving_average(data: List[float], k: int) -> List[float]: Calculate the moving average of a given list of numbers. :param data: List of floats representing the dataset. :param k: Integer window size for the moving average. :return: List of floats representing the moving average values. if k > len(data): return [] result = [] for i in range(len(data) - k + 1): window = data[i:i + k] window_average = sum(window) / k result.append(window_average) return result"},{"question":"In this problem, you are required to implement a function called `find_hamiltonian_paths(graph, start)` that finds all Hamiltonian paths starting from a given node in a directed graph. A Hamiltonian path is a path in a graph that visits each vertex exactly once. Your task is to write the `find_hamiltonian_paths(graph, start)` function which: 1. Takes an adjacency list `graph` representing the directed graph. The adjacency list is a dictionary where keys are vertex identifiers, and values are lists of adjacent vertices. 2. Takes an integer `start` representing the starting vertex. 3. Returns a list of lists, where each sublist corresponds to a Hamiltonian path starting from the `start` vertex. If no Hamiltonian path exists, return an empty list. You may assume all vertices in the graph are connected, and each vertex is identified by a unique integer. Optimal use of functions and data structures (like DFS and backtracking) is encouraged to manage computation efficiently. # Function Signature ```python def find_hamiltonian_paths(graph: dict, start: int) -> list: ``` # Example ```python graph = { 0: [1, 2, 3], 1: [0, 2, 3], 2: [0, 1, 3], 3: [0, 1, 2] } start = 0 output = find_hamiltonian_paths(graph, start) # Should return several lists, each representing a Hamiltonian path, e.g.: # [ # [0, 1, 2, 3], # [0, 1, 3, 2], # [0, 2, 1, 3], # [0, 2, 3, 1], # [0, 3, 1, 2], # [0, 3, 2, 1] # ] graph = { 0: [1, 2], 1: [2, 3], 2: [3], 3: [] } start = 0 output = find_hamiltonian_paths(graph, start) # Should return one list: # [ # [0, 1, 2, 3] # ] ``` # Constraints - All vertices in graph `graph` are unique and connected. - `graph` should have between 1 and 10 vertices. - Each list in the returned result should represent a unique path.","solution":"def find_hamiltonian_paths(graph, start): def dfs(current, visited): if len(visited) == len(graph): return [visited[:]] paths = [] for neighbor in graph[current]: if neighbor not in visited: visited.append(neighbor) paths.extend(dfs(neighbor, visited)) visited.pop() return paths return dfs(start, [start])"},{"question":"You are tasked with creating a function that calculates the root mean square error (RMSE) and the gradients for a simple linear regression model using numpy. This function should compute the RMSE cost and the gradients of the cost with respect to the model parameters. The linear regression model can be defined as follows: [ hat{y} = X^T cdot beta + beta_0 ] The cost function for linear regression with multiple training examples (mean squared error) is defined as: [ J(beta, beta_0) = frac{1}{n} sum_{i=1}^n (hat{y}^{(i)} - y^{(i)})^2 ] Here, ( X ) is the data matrix, ( beta ) is the parameter vector, ( beta_0 ) is the scalar intercept, ( y ) is the vector of true values, and ( hat{y} ) is the prediction from the model. **Requirements:** 1. Implement the `compute_gradients` function as described above. 2. The `compute_gradients` function should make use of `numpy.mean` for computing the mean value. 3. The `predict_linear` function, which computes the prediction ( hat{y} ), is assumed to be given and should be used within `compute_gradients`. **Function Signature:** ```python def compute_gradients(X, y, beta, beta_0): Arguments: X: data of size (d, n) y: true label vector of size (1, n) beta: parameters, a numpy array of size (d, 1) beta_0: offset, a scalar Returns: cost: root mean square error for linear regression dbeta: gradient of the cost with respect to beta dbeta_0: gradient of the cost with respect to beta_0 ```","solution":"import numpy as np def compute_gradients(X, y, beta, beta_0): Arguments: X: data of size (d, n) y: true label vector of size (1, n) beta: parameters, a numpy array of size (d, 1) beta_0: offset, a scalar Returns: cost: root mean square error for linear regression dbeta: gradient of the cost with respect to beta dbeta_0: gradient of the cost with respect to beta_0 n = y.shape[1] predictions = np.dot(beta.T, X) + beta_0 errors = predictions - y # RMSE cost cost = np.sqrt(np.mean(errors**2)) # gradients dbeta = (2/n) * np.dot(X, errors.T) dbeta_0 = (2/n) * np.sum(errors) return cost, dbeta, dbeta_0"},{"question":"You are required to create a function that simulates a simple traffic signal system and evaluates the state of an intersection. The function should take a list of events and return the final state of the traffic lights at the intersection. The intersection has traffic lights for North-South and East-West roads, each with three possible states: \'Red\', \'Yellow\', and \'Green\'. Function Signature ```python def traffic_simulation(events): pass ``` Requirements 1. **Traffic Light Initialization**: Both North-South and East-West traffic lights start at \'Red\'. 2. **Event Processing**: The function should process each event in sequence. Events can be: - `\'NS_Green\'`: North-South light turns Green, East-West turns Red. - `\'NS_Yellow\'`: North-South light turns Yellow, East-West turns Red. - `\'NS_Red\'`: North-South light turns Red. - `\'EW_Green\'`: East-West light turns Green, North-South turns Red. - `\'EW_Yellow\'`: East-West light turns Yellow, North-South turns Red. - `\'EW_Red\'`: East-West light turns Red. 3. **Priority Rules**: - If a North-South light is Green or Yellow, the next event causing East-West to turn Green or Yellow should first turn East-West light Red. - Similarly, if an East-West light is Green or Yellow, the next event causing North-South to turn Green or Yellow should first turn North-South light Red. Input: - `events` (list of str): A list of events to be processed. Output: - Dict: A dictionary representing the final state of the intersection with keys `NS` and `EW` for North-South and East-West traffic lights respectively, and values representing their states (\'Red\', \'Yellow\', \'Green\'). # Example ```python events = [\'NS_Green\', \'NS_Yellow\', \'NS_Red\', \'EW_Green\', \'EW_Yellow\', \'EW_Red\'] result = traffic_simulation(events) print(result) # Output should be {\'NS\': \'Red\', \'EW\': \'Red\'} ``` Additional Notes - The traffic lights should always follow a valid sequence. For example, a light should never switch directly from \'Red\' to \'Yellow\' or \'Green\' to \'Yellow\' without going to \'Red\' in between if necessary. - Handle invalid sequences gracefully by ignoring events that violate the priority rules.","solution":"def traffic_simulation(events): Simulates a simple traffic signal system at an intersection. Args: events (list of str): A list of events to be processed. Returns: dict: A dictionary representing the final state of the intersection. # Initial state state = { \'NS\': \'Red\', \'EW\': \'Red\', } for event in events: if event == \'NS_Green\': state[\'NS\'] = \'Green\' state[\'EW\'] = \'Red\' elif event == \'NS_Yellow\': state[\'NS\'] = \'Yellow\' state[\'EW\'] = \'Red\' elif event == \'NS_Red\': state[\'NS\'] = \'Red\' elif event == \'EW_Green\': state[\'EW\'] = \'Green\' state[\'NS\'] = \'Red\' elif event == \'EW_Yellow\': state[\'EW\'] = \'Yellow\' state[\'NS\'] = \'Red\' elif event == \'EW_Red\': state[\'EW\'] = \'Red\' return state"},{"question":"Create a function in Python that takes a list of integers and returns a new list with the same integers, but sorted in ascending order, without using any built-in sorting functions (such as `sorted()` or `.sort()`). The function should implement a sorting algorithm of your choice (e.g., bubble sort, selection sort). Provide code along with comments explaining the sorting algorithm used. ``` def custom_sort(arr): Sort an array of integers in ascending order using bubble sort. Args: arr (list): List of integers to be sorted. Returns: List[int]: A new list with the integers in ascending order. n = len(arr) # Traverse through all elements in the array for i in range(n): # Last i elements are already in the correct position for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Example usage: print(custom_sort([64, 34, 25, 12, 22, 11, 90])) ```","solution":"def custom_sort(arr): Sort an array of integers in ascending order using bubble sort. Args: arr (list): List of integers to be sorted. Returns: List[int]: A new list with the integers in ascending order. n = len(arr) sorted_arr = arr[:] # Create a copy of the array to avoid mutating the input # Traverse through all elements in the array for i in range(n): # Last i elements are already in the correct position for j in range(0, n-i-1): # Swap if the element found is greater than the next element if sorted_arr[j] > sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr # Example usage: custom_sort([64, 34, 25, 12, 22, 11, 90])"},{"question":"Implement a function that takes a list of integers and returns the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, return any one of them. The function should return the subarray (as a list) and the sum of the subarray. The function should raise the exception for: TypeError: If the input is not a list of integers. The function should output with: tuple: (list, int): A tuple containing the subarray with the largest sum and the sum itself. You should write self-contained code starting with: ``` def task_func(nums): ```","solution":"def task_func(nums): Returns the subarray with the maximum sum and the sum itself from the input list of integers. Parameters: nums (list): A list of integers. Returns: tuple: A tuple containing the subarray with the largest sum and the sum itself. Raises: TypeError: If the input is not a list of integers. if not isinstance(nums, list) or not all(isinstance(i, int) for i in nums): raise TypeError(\\"Input must be a list of integers.\\") max_sum = float(\'-inf\') current_sum = 0 start_index = end_index = 0 temp_start = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start end_index = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return (nums[start_index:end_index + 1], max_sum)"},{"question":"A university is planning to automate their course scheduling system to optimize room allocation and course times while avoiding conflicts. The goal is to ensure that no student is scheduled to be in two places at once. Each course has a list of student IDs representing the students enrolled in that course, along with an array of possible time slots during which the course can be held. The time slots are represented as tuples of (start_time, end_time), both integers. You are tasked with writing a function `optimize_course_schedule(courses)` that allocates each course to a time slot such that no student is enrolled in two courses at the same time, and each course is assigned exactly one time slot. # Input - `courses`: A dictionary where keys are course IDs and values are dictionaries with two keys: - `students`: A list of integers representing student IDs enrolled in the course. - `time_slots`: A list of tuples representing possible time slots for the course. # Output - Return a dictionary mapping each course ID to the chosen time slot tuple. If it\'s not possible to schedule all courses without conflicts, return `None`. **Example:** ```python courses = { 101: {\'students\': [1, 2, 3], \'time_slots\': [(9, 10), (10, 11)]}, 102: {\'students\': [2, 4], \'time_slots\': [(10, 11), (11, 12)]}, 103: {\'students\': [1, 3, 5], \'time_slots\': [(9, 10), (11, 12)]}, } print(optimize_course_schedule(courses)) # Output should be a valid time slots allocation or `None` if impossible ```","solution":"def optimize_course_schedule(courses): from itertools import product course_ids = list(courses.keys()) student_courses = {student_id: [] for course in courses.values() for student_id in course[\'students\']} for course_id, course_data in courses.items(): for student_id in course_data[\'students\']: student_courses[student_id].append(course_id) def is_valid_schedule(schedule): for student_id, enrolled_courses in student_courses.items(): scheduled_times = [schedule[course_id] for course_id in enrolled_courses if course_id in schedule] for i in range(len(scheduled_times)): for j in range(i + 1, len(scheduled_times)): if scheduled_times[i][0] < scheduled_times[j][1] and scheduled_times[i][1] > scheduled_times[j][0]: return False return True for combination in product(*(courses[course_id][\'time_slots\'] for course_id in course_ids)): schedule = dict(zip(course_ids, combination)) if is_valid_schedule(schedule): return schedule return None"},{"question":"In this problem, you need to create a Python function `count_valid_parentheses_combinations` that determines the number of valid parentheses combinations for a given number of pairs. A valid combination means that each opening parenthesis has a corresponding closing parenthesis and the parentheses are properly nested. Your task is to generate all valid combinations and return the total count. # Function Signature ```python def count_valid_parentheses_combinations(n: int) -> int: pass ``` # Parameters - `n (int)`: An integer representing the number of pairs of parentheses. # Returns - `int`: The total number of valid parentheses combinations. # Example ```python n = 3 count = count_valid_parentheses_combinations(n) print(count) # Output should be 5 ``` # Constraints - You can assume that `n` will be a non-negative integer. - The function should handle cases where `n = 0` gracefully, returning `1` (since there\'s one valid combination: the empty string). # Explanation For `n = 3`, the valid combinations are: - \\"((()))\\" - \\"(()())\\" - \\"(())()\\" - \\"()(())\\" - \\"()()()\\" Thus, the function should return `5` for `n = 3`.","solution":"def count_valid_parentheses_combinations(n: int) -> int: Given n pairs of parentheses, returns the count of valid combinations. if n == 0: return 1 # Using dynamic programming to count valid parentheses combinations dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): for j in range(i): dp[i] += dp[j] * dp[i-j-1] return dp[n]"},{"question":"Create a function named `read_first_last_lines()` that performs the following tasks: 1. Accepts a file path as an argument. 2. Opens the file and reads its contents. 3. Prints out the first line and the last line of the file. # Constraints: - You must handle cases where the file may be empty or contain only a single line. - The function should handle errors gracefully, such as when the file does not exist or there are permissions issues. # Function Signature: ```python def read_first_last_lines(file_path: str) -> None: pass ``` # Example: Suppose the file located at `sample.txt` contains the following lines: ``` Hello, world! This is a sample file. Welcome to the coding assessment! ``` When the function is called with this file path, the output should be: ``` First line: Hello, world! Last line: Welcome to the coding assessment! ``` If the file contains only one line: ``` Hello, world! ``` The output should be: ``` First line: Hello, world! Last line: Hello, world! ``` If the file is empty, the output should be: ``` The file is empty. ``` # Libraries to Use: - `os.path.exists` Your implementation should handle edge cases such as file not found and empty file, providing informative messages for each scenario.","solution":"def read_first_last_lines(file_path: str) -> None: import os if not os.path.exists(file_path): print(\\"The file does not exist.\\") return try: with open(file_path, \'r\') as file: lines = file.readlines() if len(lines) == 0: print(\\"The file is empty.\\") elif len(lines) == 1: print(f\\"First line: {lines[0].strip()}\\") print(f\\"Last line: {lines[0].strip()}\\") else: print(f\\"First line: {lines[0].strip()}\\") print(f\\"Last line: {lines[-1].strip()}\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Your task is to write a function named `alternate_merge()` that processes two input lists and merges them by alternately taking elements from each list. If one input list is longer than the other, append the remaining elements from the longer list to the end of the merged list. Here are the specific steps for the task: 1. **Input Lists**: The function will take two input lists, `list1` and `list2`. 2. **Merge Alternately**: Merge the two lists by alternately taking elements from each list. 3. **Handle Remaining Elements**: If the lengths of the lists differ, append the remaining elements from the longer list to the merged list. 4. **Return the Merged List**: Return the merged list as the result. **Function Signature:** ```python def alternate_merge(list1: list, list2: list) -> list: pass ``` # Input - `list1`: A list of elements. (e.g., `[1, 3, 5]`) - `list2`: A list of elements. (e.g., `[2, 4, 6, 8, 10]`) # Output - A list representing the alternately merged elements of `list1` and `list2`. # Example ```python # Example 1 list1 = [1, 3, 5] list2 = [2, 4, 6, 8, 10] merged_list = alternate_merge(list1, list2) print(merged_list) # Output should be: [1, 2, 3, 4, 5, 6, 8, 10] # Example 2 list1 = [\'a\', \'b\', \'c\'] list2 = [\'1\', \'2\'] merged_list = alternate_merge(list1, list2) print(merged_list) # Output should be: [\'a\', \'1\', \'b\', \'2\', \'c\'] ``` # Notes - The input lists can contain elements of any data type. - In case both lists are empty, return an empty list.","solution":"def alternate_merge(list1: list, list2: list) -> list: merged = [] len1, len2 = len(list1), len(list2) min_len = min(len1, len2) # Alternately add elements from both lists for i in range(min_len): merged.append(list1[i]) merged.append(list2[i]) # If list1 is longer, add the remaining elements if len1 > len2: merged.extend(list1[min_len:]) # If list2 is longer, add the remaining elements elif len2 > len1: merged.extend(list2[min_len:]) return merged"},{"question":"You are required to write a function that simulates a game of \\"Snake\\" on a 2D grid and returns the final length of the snake after a series of moves. In the game, the snake starts with an initial length of 1 and can grow by eating food placed on the grid. # Function Signature ```python def snake_game(grid, moves): pass ``` # Parameters - `grid` (list of lists): A 2D grid represented as a list of lists with the following elements: - \'S\': The initial position of the snake. - \'F\': A food item. - \'E\': An empty cell. - `moves` (list of str): A list of moves made by the snake. Each move is represented as one of the following: - \'U\': Move up. - \'D\': Move down. - \'L\': Move left. - \'R\': Move right. # Constraints - Each move will be a valid one-step move in the grid (the snake will not move out of the grid). - The grid dimensions will be at most 20x20. - The initial snake length is 1 and it can grow by eating food. - The snake can only grow by eating food (\'F\'). Each food item increases the snake\'s length by 1. # Objective Simulate the movement of the snake on the grid and determine the final length of the snake after all moves are completed. The snake consumes a food item if it moves onto a cell containing \'F\', and the food item is removed from the grid afterward. # Example ```python grid = [ [\'E\', \'S\', \'E\'], [\'E\', \'F\', \'E\'], [\'E\', \'E\', \'E\'] ] moves = [\'R\', \'D\', \'L\'] print(snake_game(grid, moves)) # Should output 2 as the snake eats one food item and grows in length from 1 to 2 ``` # Notes - Ensure the snake\'s movement is tracked correctly within the grid. - Consider edge cases such as no food on the grid or moves that don\'t reach any food.","solution":"def snake_game(grid, moves): Simulates a snake game on a 2D grid and returns the final length of the snake. Parameters: - grid (list of lists): A 2D grid with \'S\' for the snake\'s initial position, \'F\' for food, and \'E\' for empty cells. - moves (list of str): A list of moves made by the snake, where \'U\' is up, \'D\' is down, \'L\' is left, and \'R\' is right. Returns: - int: The final length of the snake after all the moves. # Find the initial position of the snake for i, row in enumerate(grid): for j, cell in enumerate(row): if cell == \'S\': snake_pos = (i, j) break # Define movement directions direction_map = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } snake_length = 1 for move in moves: next_pos = (snake_pos[0] + direction_map[move][0], snake_pos[1] + direction_map[move][1]) # Check if the snake eats food if grid[next_pos[0]][next_pos[1]] == \'F\': snake_length += 1 # Update the snake\'s position snake_pos = next_pos return snake_length"},{"question":"Design a function that takes an integer array as input and reorders it such that all even numbers come before all odd numbers while preserving the relative order of the even and odd numbers. The function should output: List[int]: The reordered array with all even numbers at the beginning followed by all odd numbers. You should write self-contained code starting with: ``` def reorder_even_odd(arr): ```","solution":"def reorder_even_odd(arr): Reorders the array such that all even numbers come before all odd numbers, while preserving the relative order of both even and odd numbers. Parameters: arr (List[int]): The input integer array. Returns: List[int]: The reordered array with all even numbers first followed by all odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"You are to write a function named `check_prime_and_log()`, which will perform the following tasks: 1. Prompt the user to input an integer, `n`, to check if it is a prime number. 2. Check if the input integer is a prime number. 3. Print a message to the console indicating whether the number is prime or not. 4. Use the `logging` library to log an error message if the user inputs a non-integer value. 5. Use the `logging` library to log an informational message whether the input number is prime or not. You will need to use the `logging.error` and `logging.info` functions as described in the Library API documentation: - `logging.error`: Logs an error message. - `logging.info`: Logs an informational message. Here’s the Python Library Documentation for the logging API: ```python logging.error = error(msg, *args, **kwargs) Log a message with severity \'ERROR\' on the root logger. If the logger has no handlers, call basicConfig() to add a console handler with a pre-defined format. logging.info = info(msg, *args, **kwargs) Log a message with severity \'INFO\' on the root logger. If the logger has no handlers, call basicConfig() to add a console handler with a pre-defined format. ``` # Constraints: - Ensure the `logging` library is configured to output messages to the console. - If the user input is not an integer, log the error message `\\"Invalid input: Please enter an integer.\\"`. - If the input integer is less than 2, consider it as not a prime number. - For valid integer input, log an informational message `\\"The number {n} is prime\\"` or `\\"The number {n} is not prime\\"` based on the result. Write your function inside a Jupyter notebook so it can directly run and display the logs.","solution":"import logging # Configure logging logging.basicConfig(level=logging.INFO) def check_prime_and_log(): try: n = int(input(\\"Enter an integer: \\")) except ValueError: logging.error(\\"Invalid input: Please enter an integer.\\") print(\\"Invalid input: Please enter an integer.\\") return if n < 2: prime = False else: prime = True for i in range(2, int(n ** 0.5) + 1): if n % i == 0: prime = False break if prime: logging.info(f\\"The number {n} is prime\\") print(f\\"The number {n} is prime\\") else: logging.info(f\\"The number {n} is not prime\\") print(f\\"The number {n} is not prime\\")"},{"question":"In this problem, you need to create a function called `word_count` that takes a string of text and returns a dictionary with the frequency count of each word in the text. The comparison of words should be case-insensitive, meaning \'Apple\' and \'apple\' should be considered the same word. Additionally, the function should ignore punctuation and special characters, considering only alphanumeric characters and spaces. # Function Signature ```python def word_count(text: str) -> dict: # Returns a frequency dictionary of words in the text ``` # Requirements - Convert the entire text to lowercase to ensure the word-counting is case-insensitive. - Remove any punctuation and special characters to only consider alphanumeric characters and spaces. - Split the processed text into individual words based on spaces. - Create and return a dictionary where the keys are words and the values are their respective frequency counts in the text. # Example ```python text = \\"Hello world! This is a test. Hello, hello, HELLO...\\" print(word_count(text)) # Expected output: {\'hello\': 4, \'world\': 1, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1} ``` # Additional Note - You can use Python\'s `str.translate` method with a translation table to remove punctuation. - Consider using the `collections.Counter` class to simplify the implementation of the frequency dictionary.","solution":"import string from collections import Counter def word_count(text: str) -> dict: Returns a frequency dictionary of words in the text. # Convert the text to lowercase text = text.lower() # Remove punctuation and special characters translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Split the text into words words = text.split() # Count the frequency of each word word_freq = Counter(words) return dict(word_freq)"},{"question":"You are given transcript data containing multiple lines of dialogue with each line containing the name of the speaker followed by their spoken words. Your task is to implement a function `convert_transcript_to_JSON(filename)` that: 1. Verifies if a file given by `filename` exists in the current directory. 2. Reads the file line by line. 3. For each non-empty line, splits it into speaker and dialogue parts. 4. Constructs a nested JSON object where each speaker is a key and their associated value is a list of all dialogue lines attributed to them. 5. Writes the generated JSON object to a new file with the same name, but with the suffix `_transcript.json`. 6. If the file does not exist, the function should output an appropriate message and exit. The format of each line in the input file is as follows: - Each line contains the speaker\'s name, followed by a colon (`:`), and then their dialogue. - Example: `\\"Alice: Hello, how are you today?\\"`. The output JSON file should have the structure below: ```json { \\"Speaker1\\": [ \\"Dialogue line 1.\\", \\"Dialogue line 2.\\" ], \\"Speaker2\\": [ \\"Dialogue line 1.\\", \\"Dialogue line 2.\\" ], ... } ``` Here is an example illustrating the transformation: - Input lines: ``` Alice: Hello, how are you today? Bob: I\'m good, thanks for asking. Alice: Glad to hear that. ``` - Output JSON: ```json { \\"Alice\\": [ \\"Hello, how are you today?\\", \\"Glad to hear that.\\" ], \\"Bob\\": [ \\"I\'m good, thanks for asking.\\" ] } ``` You must use the `Path` class from `pathlib` to handle file operations, the `json` module to construct the JSON object, and `sys.exit` from the `sys` module to exit the script when the specified file does not exist.","solution":"import json from pathlib import Path import sys def convert_transcript_to_JSON(filename): path = Path(filename) if not path.is_file(): print(\\"File does not exist\\") sys.exit(1) transcript_data = {} with path.open(\'r\') as file: for line in file: if line.strip(): speaker, dialogue = line.split(\':\', 1) speaker = speaker.strip() dialogue = dialogue.strip() if speaker not in transcript_data: transcript_data[speaker] = [] transcript_data[speaker].append(dialogue) output_filename = path.stem + \'_transcript.json\' with path.with_name(output_filename).open(\'w\') as outfile: json.dump(transcript_data, outfile, indent=4) return output_filename"},{"question":"In this problem, you are tasked with creating a function named `merge_sorted_linked_lists` that merges two given singly linked lists which are sorted in non-decreasing order, into a single sorted linked list. Here\'s the detailed specification: 1. **Function Name**: `merge_sorted_linked_lists` 2. **Function Input**: - Two singly linked lists, where each node contains a single integer value sorted in non-decreasing order. The structure of the linked list node is defined as follows: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` 3. **Function Output**: - A single singly linked list which contains all the nodes from the two input linked lists, sorted in non-decreasing order. 4. **Requirements**: - You must preserve the original linked list nodes and not create new nodes for the merged list. - The merged linked list should also be sorted in non-decreasing order. The primary objective of this problem is to test your understanding of handling linked lists and merging two sorted lists into one using efficient algorithms. # Examples ```python # Helper function to create a linked list from a list of values: def create_linked_list(values): if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert a linked list to a list of values: def linked_list_to_list(head): result = [] current = head while current: result.append(current.val) current = current.next return result # Example usage: list1 = create_linked_list([1, 2, 4]) list2 = create_linked_list([1, 3, 4]) merged_list = merge_sorted_linked_lists(list1, list2) result = linked_list_to_list(merged_list) ``` The `result` should be: ```python [1, 1, 2, 3, 4, 4] ``` # Constraints - The input linked lists will each contain between 0 and 1000 nodes. - Each node’s integer value will be between `-10^4` and `10^4`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sorted_linked_lists(l1, l2): Merge two sorted linked lists into one sorted linked list. Parameters: l1 (ListNode): First sorted linked list. l2 (ListNode): Second sorted linked list. Returns: ListNode: Merged sorted linked list. dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If any elements left in either l1 or l2, append them if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"You are required to write a function `string_permutation_check(str1, str2)` in Python that determines if two input strings are permutations of each other. The function should return `True` if the strings are permutations, and `False` otherwise. **Requirements:** - The check should be case-sensitive (\'A\' and \'a\' are different). - Ignore spaces when determining if strings are permutations. - The function should perform the check efficiently, ideally with minimal time complexity. **Example:** ```python str1 = \\"Listen\\" str2 = \\"Silent\\" output = string_permutation_check(str1, str2) print(output) ``` **Expected Output:** ``` False ``` ```python str1 = \\"The eyes\\" str2 = \\"They see\\" output = string_permutation_check(str1, str2) print(output) ``` **Expected Output:** ``` True ```","solution":"def string_permutation_check(str1, str2): Determines if two strings are permutations of each other, ignoring spaces and considering case-sensitivity. Args: str1 (str): First string to check. str2 (str): Second string to check. Returns: bool: True if the strings are permutations of each other, False otherwise. from collections import Counter # Remove spaces from both strings. str1 = str1.replace(\\" \\", \\"\\") str2 = str2.replace(\\" \\", \\"\\") # Use Counter to count occurrences of each character and compare the two counts return Counter(str1) == Counter(str2)"},{"question":"Write a function to perform k-means clustering on a given dataset with two features. The function should output a DataFrame with the original dataset and an additional column for the assigned cluster label for each point, and another DataFrame showing the coordinates of the cluster centroids. The dataset used should be generated randomly, with each feature following a normal distribution. Use k-means clustering from `sklearn` with a specified number of clusters `n_clusters`. The function should output: tuple: pandas.DataFrame: A DataFrame containing the original features and the cluster label for each data point. pandas.DataFrame: A DataFrame containing the cluster centroids with feature coordinates. You should write self-contained code starting with: ``` import pandas as pd import numpy as np from sklearn.cluster import KMeans def task_func(n_samples=100, n_clusters=3): ```","solution":"import pandas as pd import numpy as np from sklearn.cluster import KMeans def task_func(n_samples=100, n_clusters=3): Perform k-means clustering on a randomly generated dataset with two features. Parameters: n_samples (int): Number of samples to generate. n_clusters (int): Number of clusters for k-means. Returns: tuple: pandas.DataFrame: DataFrame containing the original features and the cluster label for each data point. pandas.DataFrame: DataFrame containing the cluster centroids with feature coordinates. # Generate dataset np.random.seed(0) feature1 = np.random.normal(loc=0.0, scale=1.0, size=n_samples) feature2 = np.random.normal(loc=0.0, scale=1.0, size=n_samples) data = pd.DataFrame({ \'Feature1\': feature1, \'Feature2\': feature2 }) # Perform k-means clustering kmeans = KMeans(n_clusters=n_clusters, random_state=0) data[\'Cluster\'] = kmeans.fit_predict(data[[\'Feature1\', \'Feature2\']]) # Create dataframe for cluster centroids centroids = pd.DataFrame(kmeans.cluster_centers_, columns=[\'Feature1\', \'Feature2\']) return data, centroids"},{"question":"You are working on a scheduling application that manages meeting times and durations. Your task is to create a function `find_available_slots` that identifies all time slots available for new meetings. This function will take two arguments: `existing_meetings` which is a list of tuples representing the start and end times of already scheduled meetings, and `day_start_end` which is a tuple representing the start and end time of the working day. The times are represented in 24-hour format as strings (e.g., \\"09:00\\", \\"17:30\\"). Your function should return a list of tuples, where each tuple contains the start and end times of an available slot. # Function Requirements: - Your function `find_available_slots(existing_meetings, day_start_end)` must: - Accept the `existing_meetings` list of tuples (e.g., `[(\\"09:00\\", \\"10:30\\"), (\\"12:00\\", \\"13:00\\")])`. - Accept the `day_start_end` tuple representing the entire working day (e.g., `(\\"09:00\\", \\"17:00\\")`). - Return a list of tuples representing the available time slots for new meetings (e.g., `[(\\"10:30\\", \\"12:00\\"), (\\"13:00\\", \\"17:00\\")]`). # Constraints: - All time strings will be in the format \\"HH:MM\\". - There will be no overlap in `existing_meetings`. - The `existing_meetings` list may be empty, indicating that the entire day is available. - The `day_start_end` tuple will always have its start time earlier than its end time. ```python from datetime import datetime def find_available_slots(existing_meetings, day_start_end): # Convert strings to datetime objects for easier comparison and manipulation def to_minutes_since_midnight(time_str): time_obj = datetime.strptime(time_str, \'%H:%M\') return time_obj.hour * 60 + time_obj.minute def to_time_str(minutes): return \'{:02}:{:02}\'.format(minutes // 60, minutes % 60) # Get the start and end time of the working day in minutes since midnight day_start = to_minutes_since_midnight(day_start_end[0]) day_end = to_minutes_since_midnight(day_start_end[1]) # Initialize available slots available_slots = [] # Add an artificial boundary for easier iteration meetings = [(day_start, day_start)] + [(to_minutes_since_midnight(start), to_minutes_since_midnight(end)) for start, end in existing_meetings] + [(day_end, day_end)] # Find gaps between meetings for i in range(1, len(meetings)): gap_start = meetings[i-1][1] gap_end = meetings[i][0] if gap_start < gap_end: available_slots.append((to_time_str(gap_start), to_time_str(gap_end))) return available_slots # Example of calling the function: print(find_available_slots([(\\"09:00\\", \\"10:30\\"), (\\"12:00\\", \\"13:00\\")], (\\"09:00\\", \\"17:00\\"))) # Output: [(\'10:30\', \'12:00\'), (\'13:00\', \'17:00\')] ``` # Aim and Expectations: - Understand and manipulate time strings in \\"HH:MM\\" format. - Use Python\'s datetime module for conversions and calculations. - Recognize and handle gaps between scheduled meetings. - Ensure that the function correctly identifies all available slots within the working day.","solution":"from datetime import datetime def find_available_slots(existing_meetings, day_start_end): # Convert strings to datetime objects for easier comparison and manipulation def to_minutes_since_midnight(time_str): time_obj = datetime.strptime(time_str, \'%H:%M\') return time_obj.hour * 60 + time_obj.minute def to_time_str(minutes): return \'{:02}:{:02}\'.format(minutes // 60, minutes % 60) # Get the start and end time of the working day in minutes since midnight day_start = to_minutes_since_midnight(day_start_end[0]) day_end = to_minutes_since_midnight(day_start_end[1]) # Initialize available slots available_slots = [] # Add an artificial boundary for easier iteration meetings = [(day_start, day_start)] + [(to_minutes_since_midnight(start), to_minutes_since_midnight(end)) for start, end in existing_meetings] + [(day_end, day_end)] # Find gaps between meetings for i in range(1, len(meetings)): gap_start = meetings[i-1][1] gap_end = meetings[i][0] if gap_start < gap_end: available_slots.append((to_time_str(gap_start), to_time_str(gap_end))) return available_slots"},{"question":"In the field of data structures, efficiently managing intervals is a common problem, often encountered in applications ranging from computational geometry to scheduling tasks. You are tasked with implementing a data structure that supports adding an interval, merging overlapping intervals, and querying the list of merged intervals. Your task is to implement a class named `IntervalManager` that supports the following methods: 1. `add_interval(start: int, end: int)`: Adds an interval [start, end) to the list of intervals. Intervals include `start` and exclude `end`. 2. `get_intervals() -> List[Tuple[int, int]]`: Returns a list of non-overlapping intervals merged from the added intervals in ascending order of the start values. Method signatures: ```python class IntervalManager: def __init__(self): Initialize the data structure. def add_interval(self, start: int, end: int): Add a new interval [start, end). Parameters: ---------- start : int The start of the interval. end : int The end of the interval (exclusive). def get_intervals(self) -> List[Tuple[int, int]]: Get the list of merged, non-overlapping intervals. Returns: ------- List[Tuple[int, int]] A sorted list of merged, non-overlapping intervals. ``` Requirements: 1. Ensure that the intervals are merged correctly. 2. The merged intervals should be returned sorted by their start values. 3. You can assume that the start value of an interval is always less than the end value. Example: ```python interval_manager = IntervalManager() interval_manager.add_interval(1, 5) interval_manager.add_interval(10, 15) interval_manager.add_interval(5, 10) # This should print [(1, 15)] as all intervals overlap into a single interval. print(interval_manager.get_intervals()) ```","solution":"class IntervalManager: def __init__(self): Initialize the data structure. self.intervals = [] def add_interval(self, start: int, end: int): Add a new interval [start, end). Parameters: ---------- start : int The start of the interval. end : int The end of the interval (exclusive). self.intervals.append((start, end)) def get_intervals(self): Get the list of merged, non-overlapping intervals. Returns: ------- List[Tuple[int, int]] A sorted list of merged, non-overlapping intervals. # First, sort the intervals by their start value self.intervals.sort() merged_intervals = [] for interval in self.intervals: if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], interval[1])) return merged_intervals"},{"question":"You are provided with a text file containing data related to the completion times of various participants in a marathon. Each line in the file corresponds to one participant and consists of their name and completion time in the format \\"Name, HH:MM:SS\\". Your task is to calculate the average completion time from the data in the file and identify the participant with the fastest time. Write a function named `analyze_marathon_data` that accepts the path of the text file as an argument and performs the following steps: 1. Read the text file line by line. 2. Parse each line to extract the participant\'s name and completion time. 3. Convert the completion time from the \\"HH:MM:SS\\" format to total seconds. 4. Calculate the average completion time in seconds. 5. Identify the participant with the fastest completion time and their time in \\"HH:MM:SS\\" format. 6. Print the average completion time in \\"HH:MM:SS\\" format. 7. Return a tuple containing the name of the participant with the fastest time and their completion time in \\"HH:MM:SS\\" format. Example Usage: ```python analyze_marathon_data(\'path_to_text_file.txt\') ``` Note: - Use the `datetime` module for handling and manipulating time data. - Assume that the file is correctly formatted and each line is non-empty.","solution":"import datetime def analyze_marathon_data(file_path): total_time_seconds = 0 fastest_time_seconds = float(\'inf\') fastest_participant = \\"\\" participant_count = 0 with open(file_path, \'r\') as file: for line in file: participant_count += 1 name, time_str = line.strip().split(\\", \\") time_obj = datetime.datetime.strptime(time_str, \\"%H:%M:%S\\") time_seconds = time_obj.hour * 3600 + time_obj.minute * 60 + time_obj.second total_time_seconds += time_seconds if time_seconds < fastest_time_seconds: fastest_time_seconds = time_seconds fastest_participant = name average_time_seconds = total_time_seconds // participant_count average_time = str(datetime.timedelta(seconds=average_time_seconds)) fastest_time = str(datetime.timedelta(seconds=fastest_time_seconds)) print(f\\"Average completion time: {average_time}\\") return (fastest_participant, fastest_time)"},{"question":"You are required to write a function named `analyze_stock_prices` that processes and analyzes historical stock price data to generate different statistical metrics and visualizations. Specifically, the function should meet the following criteria: 1. **Arguments**: - `prices`: a pandas DataFrame with columns \'Date\' and \'Closing Price\' representing the historical prices of a stock. - `window_sizes`: a list of integers specifying the window sizes (in days) for calculating moving averages. - `display_plots`: a boolean indicating whether the plots should be displayed. 2. **Functionality**: - Compute the daily returns of the stock. - For each window size in `window_sizes`, calculate the moving average of the closing prices. - Plot the following (if `display_plots` is `True`): - A line plot of \'Closing Price\' over time: - The x-axis should represent the dates. - The y-axis should represent the closing prices. - The title should indicate \\"Stock Prices\\". - A line plot of daily returns over time: - The x-axis should represent the dates. - The y-axis should represent the daily returns. - The title should indicate \\"Daily Returns\\". - A line plot for each window size showing the moving average over time on the same plot as the \'Closing Price\': - Different window sizes should be represented by different colors and labeled appropriately in the legend. - The title should indicate \\"Moving Averages\\". 3. **Returns**: - A dictionary containing the following keys: - \'daily_returns\': a pandas Series of daily returns. - \'moving_averages\': a dictionary where the keys are window sizes and the values are pandas Series of moving averages. - \'average_return\': the mean of the daily returns. - \'volatility\': the standard deviation of the daily returns. **Note**: For your implementation, use the following library functions: - `pandas.Series.rolling` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.legend` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` - `matplotlib.pyplot.show`","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_stock_prices(prices, window_sizes, display_plots): Analyzes historical stock price data to generate statistical metrics and visualizations. Args: - prices: pandas DataFrame with columns \'Date\' and \'Closing Price\'. - window_sizes: list of integers specifying the window sizes (in days) for calculating moving averages. - display_plots: boolean indicating whether the plots should be displayed. Returns: - A dictionary containing \'daily_returns\', \'moving_averages\', \'average_return\', \'volatility\'. # Calculate daily returns prices[\'Date\'] = pd.to_datetime(prices[\'Date\']) prices = prices.set_index(\'Date\') daily_returns = prices[\'Closing Price\'].pct_change().dropna() # Calculate moving averages moving_averages = {} for window in window_sizes: moving_averages[window] = prices[\'Closing Price\'].rolling(window=window).mean() if display_plots: # Plot closing price over time plt.figure(figsize=(10, 6)) plt.plot(prices.index, prices[\'Closing Price\'], label=\'Closing Price\') plt.xlabel(\'Date\') plt.ylabel(\'Closing Price\') plt.title(\'Stock Prices\') plt.legend() plt.show() # Plot daily returns over time plt.figure(figsize=(10, 6)) plt.plot(daily_returns.index, daily_returns, label=\'Daily Returns\') plt.xlabel(\'Date\') plt.ylabel(\'Daily Returns\') plt.title(\'Daily Returns\') plt.legend() plt.show() # Plot moving averages over time plt.figure(figsize=(10, 6)) plt.plot(prices.index, prices[\'Closing Price\'], label=\'Closing Price\', color=\'black\') for window, ma in moving_averages.items(): plt.plot(ma.index, ma, label=f\'{window}-Day MA\') plt.xlabel(\'Date\') plt.ylabel(\'Price\') plt.title(\'Moving Averages\') plt.legend() plt.show() # Calculate average return and volatility average_return = daily_returns.mean() volatility = daily_returns.std() return { \'daily_returns\': daily_returns, \'moving_averages\': moving_averages, \'average_return\': average_return, \'volatility\': volatility }"},{"question":"Create a matrix of dimensions `n x m`, where each element is the sum of its row and column indices. Write a function that generates this matrix and another function that computes the transpose of the generated matrix. The function should output: ``` list: A list of lists representing the transposed matrix. ``` You should write self-contained code starting with: ``` def create_matrix(n, m): ``` ``` def transpose_matrix(matrix): ```","solution":"def create_matrix(n, m): Creates an n x m matrix where each element is the sum of its row and column indices. Parameters: n (int): number of rows m (int): number of columns Returns: list: A list of lists representing the matrix. return [[i + j for j in range(m)] for i in range(n)] def transpose_matrix(matrix): Computes the transpose of a given matrix. Parameters: matrix (list of lists): The input matrix to transpose Returns: list: A list of lists representing the transposed matrix. if not matrix or not matrix[0]: return [] return [list(row) for row in zip(*matrix)]"},{"question":"You are tasked with writing a Python function that determines if a string can be rearranged to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. This task will help you understand how to manipulate strings and use data structures like dictionaries to keep track of character frequencies. # Function Specification - **Function Name:** `can_form_palindrome` - **Input:** A single string `s` consisting only of lowercase alphabetic characters (1 <= len(s) <= 10^5) - **Output:** A boolean value `True` if the string can be rearranged to form a palindrome, and `False` otherwise. # Example ```python print(can_form_palindrome(\\"carrace\\")) # Output: True print(can_form_palindrome(\\"hello\\")) # Output: False print(can_form_palindrome(\\"level\\")) # Output: True ``` # Constraints 1. An empty string or a single character string should be considered as a valid palindrome. 2. Your solution should have a linear time complexity with respect to the length of the string. # Hint: - A string can be rearranged to form a palindrome if at most one character has an odd frequency count. # Note: Ensure to handle the edge cases such as very short strings and strings where all characters are the same.","solution":"def can_form_palindrome(s): Determines if the string `s` can be rearranged to form a palindrome. :param s: A single string `s` consisting only of lowercase alphabetic characters :return: True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter char_count = Counter(s) # Count how many characters have odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # At most one character can have an odd frequency for the string to be rearranged into a palindrome return odd_count <= 1"},{"question":"You are required to create a function named `extract_even_indices(matrix, file_path)` that performs the following operations: 1. **Inputs:** - `matrix` (list of lists): A 2D list (matrix) of integers. - `file_path` (str): The file path where the extracted numbers should be saved. 2. **Operations:** - Extract all numbers located at even indices (both row and column indices are even) from the matrix. - For example, in the matrix: ``` [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] ``` The extracted numbers are `[1, 3, 9, 11]` because they are located at indices (0,0), (0,2), (2,0), and (2,2), respectively. - Save the extracted numbers to the file provided by `file_path`. Each number should be written on a new line. 3. **Output:** - The function does not return a value but writes the extracted numbers to the specified file path. 4. **Constraints:** - Assume the dimensions of the matrix are such that there will always be elements at even indices. - The file should be opened in write mode and written to once with the extracted numbers. Here is the function signature for clarity: ```python def extract_even_indices(matrix: list, file_path: str): # Your code here ```","solution":"def extract_even_indices(matrix: list, file_path: str): Extracts numbers from the matrix located at even indices and writes them to a file. Parameters: - matrix (list of lists): A 2D list of integers. - file_path (str): The file path where the extracted numbers should be saved. Returns: None extracted_numbers = [] for i in range(0, len(matrix), 2): for j in range(0, len(matrix[i]), 2): extracted_numbers.append(matrix[i][j]) with open(file_path, \'w\') as file: for number in extracted_numbers: file.write(f\\"{number}n\\")"},{"question":"You need to write a Python function called `filter_and_sort_movies` that processes a list of movies, filtering out movies that don\'t meet a minimum rating threshold and then sorting the remaining movies by their ratings in descending order. Each movie should be represented as a dictionary containing the keys `\'title\'` and `\'rating\'`. Your function should: 1. Take two parameters: - `movies`: a list of dictionaries where each dictionary represents a movie with keys `\'title\'` (a string) and `\'rating\'` (a float). - `min_rating`: a float representing the minimum rating threshold. 2. Return a list of dictionaries representing movies that have a rating greater than or equal to `min_rating`, sorted by rating in descending order. Example: ```python movies = [ {\\"title\\": \\"Movie A\\", \\"rating\\": 8.5}, {\\"title\\": \\"Movie B\\", \\"rating\\": 6.0}, {\\"title\\": \\"Movie C\\", \\"rating\\": 9.0}, {\\"title\\": \\"Movie D\\", \\"rating\\": 7.5} ] min_rating = 7.0 filtered_sorted_movies = filter_and_sort_movies(movies, min_rating) # Expected: # [ # {\\"title\\": \\"Movie C\\", \\"rating\\": 9.0}, # {\\"title\\": \\"Movie A\\", \\"rating\\": 8.5}, # {\\"title\\": \\"Movie D\\", \\"rating\\": 7.5} # ] ``` You are required to use the following Python standard libraries and their corresponding functions: - `sorted` for sorting the list. - List comprehensions for filtering the movies. # Function Signature ```python def filter_and_sort_movies(movies, min_rating): pass ```","solution":"def filter_and_sort_movies(movies, min_rating): Filters movies based on a minimum rating threshold and sorts them by rating in descending order. Parameters: - movies: List of dictionaries where each dictionary contains \'title\' (string) and \'rating\' (float). - min_rating: A float representing the minimum rating threshold. Returns: - List of dictionaries representing movies that have a rating greater than or equal to min_rating, sorted by rating in descending order. # Filter the movies based on the min_rating filtered_movies = [movie for movie in movies if movie[\'rating\'] >= min_rating] # Sort the filtered movies by rating in descending order sorted_filtered_movies = sorted(filtered_movies, key=lambda x: x[\'rating\'], reverse=True) return sorted_filtered_movies"},{"question":"You are required to implement a function that evaluates the connectivity of an undirected graph. Given an undirected graph represented by a dictionary where keys are nodes and values are lists of adjacent nodes, your task is to determine if the graph is connected. A graph is said to be connected if there is a path between every pair of vertices. For this exercise, implement a function `is_graph_connected` which takes a dictionary `graph` as its argument and returns `True` if the graph is connected and `False` otherwise. Requirements: - Use depth-first search (DFS) or breadth-first search (BFS) algorithm to traverse the graph. - Ensure your function works for any number of nodes and edges. Function signature: ```python def is_graph_connected(graph: dict) -> bool: pass ``` # Example Given the graph data: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\'], \'C\': [\'A\', \'D\'], \'D\': [\'B\', \'C\', \'E\'], \'E\': [\'D\'] } ``` Calling: ```python is_graph_connected(graph) ``` This should return `True` as there is a path between every pair of vertices in the graph.","solution":"def is_graph_connected(graph: dict) -> bool: if not graph: return True # Implementing Depth-First Search (DFS) def dfs(node, visited): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited) visited = set() start_node = next(iter(graph)) dfs(start_node, visited) return len(visited) == len(graph)"},{"question":"Create a function to simulate a simple version of the game \\"Hangman\\". The function should take two arguments: a string representing the word to be guessed and a list of strings representing the player\'s guesses. The function should return the final state of the guessed word, with correctly guessed letters revealed and the remaining letters as underscores. The number of incorrect guesses should also be returned. The function should start with: ``` def hangman(word, guesses): ``` and output a tuple: ``` (str, int): The current guessed state of the word and the number of incorrect guesses. ```","solution":"def hangman(word, guesses): Simulates a simple version of the game Hangman. Parameters: word (str): The word to be guessed. guesses (list of str): The player\'s guesses. Returns: tuple: The current guessed state of the word and the number of incorrect guesses. guessed_state = [\'_\'] * len(word) incorrect_guesses = 0 for guess in guesses: if guess in word: for i, char in enumerate(word): if char == guess: guessed_state[i] = guess else: incorrect_guesses += 1 return \'\'.join(guessed_state), incorrect_guesses"},{"question":"# Problem: Implementing a Limited Size Cache with Least Recently Used (LRU) Eviction In this exercise, you are required to implement a cache mechanism that limits its size and evicts the least recently used item when full. This will involve implementing a class in Python to manage the cache operations efficiently. # Context: You are to create a class `LRUCache` that supports the following operations: - `get(key)`: Retrieve the value associated with the key if it exists in the cache, otherwise return `-1`. - `put(key, value)`: Insert a new key-value pair into the cache. If the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item. # Requirements: 1. Implement the class `LRUCache` with the mentioned functionalities. 2. Use the `collections.OrderedDict` to maintain the order of insertion which helps in managing the eviction of least recently used items efficiently. # Functional Goals: 1. The `get` method should return the value associated with the key if it exists, otherwise return `-1`. 2. The `put` method should add or update the key-value pair in the cache, and if the cache is full, it should remove the least recently used item. # Specific Directions: - Ensure that both operations (`get` and `put`) run in O(1) time complexity. - The use of `OrderedDict` is encouraged to manage the order of items intuitively. # Class Signature: ```python class LRUCache: def __init__(self, capacity: int): # your code here def get(self, key: int) -> int: # your code here def put(self, key: int, value: int) -> None: # your code here ``` # Example: ```python cache = LRUCache(2) # capacity of 2 cache.put(1, 1) cache.put(2, 2) print(cache.get(1)) # returns 1 cache.put(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` Expected output: ``` 1 -1 -1 3 4 ``` # Constraints: - The number of operations will be in the range of `[1, 3000]`. - The capacity will be in the range of `[1, 1000]`. - The key and value will both be integers.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key in self.cache: self.cache.move_to_end(key) # Mark as recently used return self.cache[key] return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) # Move to end as it will be recently used self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # Remove least recently used item"},{"question":"You are given the task to implement a rank-based pagination system for a list of user scores. The ranking should be determined by the user\'s scores, where a higher score receives a higher rank, and users with the same score should share the same rank. Specifically, you need to create a function named `paginate_ranked_users` that takes a list of user scores, a page number, and the number of users per page, and returns the corresponding page of ranked users. # Function Signature ```python def paginate_ranked_users(scores: List[int], page_number: int, users_per_page: int) -> List[Dict[str, int]]: Paginates the user scores into ranked pages. Parameters: - scores: List[int] List of user scores. - page_number: int The page number to retrieve. - users_per_page: int Number of users per page. Returns: - List[Dict[str, int]] A list of dictionaries containing \'rank\' and \'score\' keys for the users on the requested page. ``` # Constraints 1. The list of scores is non-empty and consists of non-negative integers. 2. The page_number is a positive integer (starting from 1). 3. The users_per_page is a positive integer. # Example Usage ```python # Example list of user scores scores = [100, 200, 200, 150, 180, 180, 120] # Retrieve the first page with 3 users per page page = paginate_ranked_users(scores, 1, 3) print(page) # Output: # [{\'rank\': 1, \'score\': 200}, # {\'rank\': 1, \'score\': 200}, # {\'rank\': 3, \'score\': 180}] ``` In this example, the ranks and scores are determined in descending order. The first page contains the top 3 scores and their corresponding ranks: - The highest score is 200, and there are two users with this score, both sharing rank 1. - The next highest score is 180, and there are also two users with this score, both sharing rank 3 (since the previous rank was 1, the rank after two users with rank 1 is 3).","solution":"from typing import List, Dict def paginate_ranked_users(scores: List[int], page_number: int, users_per_page: int) -> List[Dict[str, int]]: Paginates the user scores into ranked pages. Parameters: - scores: List[int] List of user scores. - page_number: int The page number to retrieve. - users_per_page: int Number of users per page. Returns: - List[Dict[str, int]] A list of dictionaries containing \'rank\' and \'score\' keys for the users on the requested page. # Sort the scores in descending order sorted_scores = sorted(scores, reverse=True) # Determine ranks ranks = [] current_rank = 1 for i, score in enumerate(sorted_scores): if i == 0: ranks.append(current_rank) else: if score == sorted_scores[i - 1]: ranks.append(current_rank) else: current_rank = i + 1 ranks.append(current_rank) # Create list of dictionaries with rank and score ranked_users = [{\\"rank\\": rank, \\"score\\": score} for rank, score in zip(ranks, sorted_scores)] # Calculate start and end indices for pagination start_index = (page_number - 1) * users_per_page end_index = start_index + users_per_page # Return the requested page return ranked_users[start_index:end_index]"},{"question":"In this problem, you are asked to write a function to determine if two given strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequencies, regardless of the order. You should implement a function called `areAnagrams` that takes two strings and returns a boolean value indicating whether the two strings are anagrams. **Function Signature:** ```python def areAnagrams(str1, str2): :param str1: str - The first string :param str2: str - The second string :return: bool - True if the strings are anagrams, False otherwise ``` # Input: - `str1`: A string consisting of alphabetic characters. - `str2`: A string consisting of alphabetic characters. # Output: - A boolean value: `True` if `str1` and `str2` are anagrams, `False` otherwise. # Constraints: - Both `str1` and `str2` will be non-empty strings. - The lengths of `str1` and `str2` will be at most 100,000 characters. # Requirements: You **must use** the `collections.Counter` class from the Python `collections` module to count the occurrences of each character in the strings. # Example: ```python str1 = \\"listen\\" str2 = \\"silent\\" result = areAnagrams(str1, str2) print(result) # Output: True ``` ```python str1 = \\"hello\\" str2 = \\"helloo\\" result = areAnagrams(str1, str2) print(result) # Output: False ``` # Explanation: In the first example, the string \\"listen\\" can be rearranged to form \\"silent\\", and vice versa, making them anagrams. In the second example, the string \\"hello\\" cannot be rearranged to form \\"helloo\\" since they have different lengths, making them not anagrams.","solution":"from collections import Counter def areAnagrams(str1, str2): Determines if two strings are anagrams of each other. :param str1: str - The first string :param str2: str - The second string :return: bool - True if the strings are anagrams, False otherwise return Counter(str1) == Counter(str2)"},{"question":"Create a function that calculates and plots the moving average and the exponential moving average of a given list of numeric values. The function should take an additional parameter to specify the window size for the moving average calculation. The x-axis should be labeled \\"Time\\" and the y-axis as \\"Values\\". The title should be \\"Moving Average and Exponential Moving Average\\". Plot both the moving average and exponential moving average on the same graph, with different colors and legend labels. Save the plot to a specified file path. The function should output with: str: The path to the saved plot. Returns None if the data is empty or not numeric. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt import pandas as pd def plot_moving_averages(data, window_size, plot_path): ```","solution":"import numpy as np import matplotlib.pyplot as plt import pandas as pd def plot_moving_averages(data, window_size, plot_path): Calculates and plots the moving average and exponential moving average of given data. Parameters: - data (list or np.ndarray): List of numeric values. - window_size (int): Window size for the moving average. - plot_path (str): File path where the plot will be saved. Returns: - str: The path to the saved plot. Returns None if the data is empty or not numeric. if not isinstance(data, (list, np.ndarray)) or not all(isinstance(i, (int, float)) for i in data): return None if len(data) == 0: return None data_series = pd.Series(data) moving_average = data_series.rolling(window=window_size).mean() exp_moving_average = data_series.ewm(span=window_size, adjust=False).mean() plt.figure(figsize=(10, 6)) plt.plot(data_series, label=\'Original Data\') plt.plot(moving_average, label=\'Moving Average\', color=\'orange\') plt.plot(exp_moving_average, label=\'Exponential Moving Average\', color=\'green\') plt.xlabel(\'Time\') plt.ylabel(\'Values\') plt.title(\'Moving Average and Exponential Moving Average\') plt.legend(loc=\'best\') plt.grid(True) plt.savefig(plot_path) plt.close() return plot_path"},{"question":"You are required to write a Python function named `log_transform_and_scale` which uses the `numpy` and `pandas` libraries to perform the following tasks: 1. Load a dataset from a specified CSV file into a pandas DataFrame. 2. Apply a natural logarithm transformation to all numeric columns in the DataFrame. 3. Scale all numeric columns to have a mean of 0 and a standard deviation of 1. 4. Return the processed DataFrame. Function Signature ```python def log_transform_and_scale(csv_file_path: str) -> pd.DataFrame: pass ``` Parameters - `csv_file_path` (str): The path to the CSV file. Example Assume you have a CSV file named \'data.csv\'. ```python df = log_transform_and_scale(\'data.csv\') print(df.head()) ``` Expected Libraries - `numpy.log`: This function will be used to apply the natural logarithm transformation. - `pandas.read_csv`: This function will be used to read the CSV file into a DataFrame. - `pandas.DataFrame.mean`: This method will be used to calculate the mean of columns. - `pandas.DataFrame.std`: This method will be used to calculate the standard deviation of columns.","solution":"import pandas as pd import numpy as np def log_transform_and_scale(csv_file_path: str) -> pd.DataFrame: # Load dataset from CSV file into a DataFrame df = pd.read_csv(csv_file_path) # Apply natural logarithm transformation to all numeric columns numeric_cols = df.select_dtypes(include=[np.number]).columns df[numeric_cols] = df[numeric_cols].apply(np.log) # Scale all numeric columns to have a mean of 0 and a standard deviation of 1 df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std() return df"},{"question":"In this problem, you will write a function that simulates rolling two dice and calculates the probability of rolling a specific sum. **Function Details:** - Name: `probability_of_sum` - Input: An integer `desired_sum` which represents the sum you want to achieve by rolling two dice. The sum ranges from 2 to 12. - Output: The function should print the probability of rolling the `desired_sum` as a percentage rounded to two decimal places. **Requirements:** - Use the `random.randint` function to simulate rolling the dice. Each die roll generates an integer between 1 and 6 (inclusive). - Conduct a large number of trials (e.g., 10,000) to ensure an accurate estimate of the probability. - Return the probability as a float value and also print it in a readable format. **Guidelines:** - You can make use of control flow structures such as loops and conditional statements. - This problem helps you practice random simulations, loops, and basic probability calculations. ```python import random def probability_of_sum(desired_sum): if desired_sum < 2 or desired_sum > 12: return \\"Invalid sum. Please enter a sum between 2 and 12.\\" trial_count = 10000 successful_trials = 0 for _ in range(trial_count): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == desired_sum: successful_trials += 1 probability = (successful_trials / trial_count) * 100 print(f\\"The probability of rolling a {desired_sum} is {probability:.2f}%\\") return probability # Example of how the function is expected to be used: # desired_sum = 7 # probability = probability_of_sum(desired_sum) ```","solution":"import random def probability_of_sum(desired_sum): if desired_sum < 2 or desired_sum > 12: raise ValueError(\\"Invalid sum. Please enter a sum between 2 and 12.\\") trial_count = 10000 successful_trials = 0 for _ in range(trial_count): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == desired_sum: successful_trials += 1 probability = (successful_trials / trial_count) * 100 print(f\\"The probability of rolling a {desired_sum} is {probability:.2f}%\\") return round(probability, 2) # Example of how the function is expected to be used: # desired_sum = 7 # probability = probability_of_sum(desired_sum)"},{"question":"In this task, you are to create a function named `flatten_nested_list()` which takes a nested list of arbitrary depth and flattens it into a single list. A nested list is a list that can contain other lists, which in turn can contain more lists, and so on. The goal is to provide a recursive approach to handle the flattening process. **Requirements:** - The `flatten_nested_list()` function should accept a single argument: - `nested_list`: a list that can contain other lists, with arbitrary levels of nesting. - The function should return a single list that contains all the elements from the nested lists, in the same order they appear. - The function must handle lists containing mixed data types (e.g., integers, strings, other lists). - Utilize recursion to navigate through the nested lists and extract the items. **Examples:** ```python flatten_nested_list([1, [2, 3, [4, 5]], 6]) # should return [1, 2, 3, 4, 5, 6] flatten_nested_list([[1, 2, [3]], 4, 5, [6, [7, 8]]]) # should return [1, 2, 3, 4, 5, 6, 7, 8] flatten_nested_list([[\\"a\\", [\\"b\\", \\"c\\"]], \\"d\\"]) # should return [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] ``` **Function Signature:** ```python def flatten_nested_list(nested_list: list) -> list: pass ```","solution":"def flatten_nested_list(nested_list): Flattens a nested list of arbitrary depth into a single list. :param nested_list: List that may contain other lists of arbitrary depth :return: A single flattened list flattened_list = [] def flatten(lst): for item in lst: if isinstance(item, list): flatten(item) else: flattened_list.append(item) flatten(nested_list) return flattened_list"},{"question":"In this problem, you are tasked with managing a small database of books using Python classes and file operations. The goal is to build a library system that allows users to add, view, and search books in the library, where the record of books will be stored in a text file. # Requirements: 1. Create a `Book` class with the following attributes: - `title` (string, required) - `author` (string, required) - `year` (integer, optional, defaults to None) - `isbn` (string, optional, defaults to None) 2. Create a `Library` class that manages a collection of books. It should support the following functionalities: - `add_book(book: Book)`: Adds a book to the library and saves the information into a text file named `library.txt`. Each book should be saved in a new line with fields separated by a comma. - `view_books() -> List[Book]`: Reads the `library.txt` file and returns a list of `Book` objects. - `search_books(title: Optional[str] = None, author: Optional[str] = None) -> List[Book]`: Searches for books by title or author (or both). Returns a list of books that match the search criteria. 3. Ensure that the text file `library.txt` is created if it does not exist. # Function Signature: ```python class Book: def __init__(self, title: str, author: str, year: Optional[int] = None, isbn: Optional[str] = None): pass class Library: def __init__(self): pass def add_book(self, book: Book): pass def view_books(self) -> List[Book]: pass def search_books(self, title: Optional[str] = None, author: Optional[str] = None) -> List[Book]: pass ``` # Constraints: - The `add_book` method must append the book information to the `library.txt` file without overriding the existing content. - The `view_books` method must read all books from the `library.txt` file and return them as a list of `Book` objects. - The `search_books` method should handle partial matches and be case-insensitive. # Example: ```python library = Library() book1 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960, \\"1234567890\\") book2 = Book(\\"1984\\", \\"George Orwell\\", 1949, \\"1234567891\\") library.add_book(book1) library.add_book(book2) print(library.view_books()) # Output: [<Book object representing \\"To Kill a Mockingbird\\">, <Book object representing \\"1984\\">] print(library.search_books(title=\\"1984\\")) # Output: [<Book object representing \\"1984\\">] print(library.search_books(author=\\"Harper Lee\\")) # Output: [<Book object representing \\"To Kill a Mockingbird\\">] ``` Use file handling techniques with proper exception management to ensure file operations are safely performed.","solution":"from typing import List, Optional import os class Book: def __init__(self, title: str, author: str, year: Optional[int] = None, isbn: Optional[str] = None): self.title = title self.author = author self.year = year self.isbn = isbn def __str__(self): return f\\"{self.title}, {self.author}, {self.year if self.year else \'\'}, {self.isbn if self.isbn else \'\'}\\" @classmethod def from_string(cls, book_string: str): parts = book_string.strip().split(\\", \\") title = parts[0] author = parts[1] year = int(parts[2]) if parts[2] else None isbn = parts[3] if len(parts) > 3 else None return cls(title, author, year, isbn) class Library: def __init__(self, filename: str = \\"library.txt\\"): self.filename = filename self._ensure_file_exists() def _ensure_file_exists(self): if not os.path.exists(self.filename): with open(self.filename, \'w\') as file: pass def add_book(self, book: Book): with open(self.filename, \'a\') as file: file.write(f\\"{book}n\\") def view_books(self) -> List[Book]: books = [] with open(self.filename, \'r\') as file: for line in file: if line.strip(): # Skip empty lines books.append(Book.from_string(line)) return books def search_books(self, title: Optional[str] = None, author: Optional[str] = None) -> List[Book]: books = self.view_books() results = [] title = title.lower() if title else None author = author.lower() if author else None for book in books: matches = True if title and title not in book.title.lower(): matches = False if author and author not in book.author.lower(): matches = False if matches: results.append(book) return results"},{"question":"Create a function that simulates the customer traffic of a retail store over a week. The function should generate a Pandas DataFrame where each row represents a day of the week, with columns \'Day\', \'Opening Hours\', and \'Customers\'. The \'Day\' column should contain the days of the week from Monday to Sunday, the \'Opening Hours\' column should contain the number of hours the store is open each day which varies randomly between 8 and 12 hours, and the \'Customers\' column should contain the number of customers visiting the store each day, generated from a normal distribution with a mean of 150 and a standard deviation of 30. Once the DataFrame is created, plot a line graph showing the number of customers visiting the store each day. Note: 1. The \'Day\' column should contain the string names of the days Monday to Sunday. 2. The \'Opening Hours\' column should have values picked randomly between 8 and 12. 3. The \'Customers\' column values should be generated from a normal distribution with a mean of 150 and a standard deviation of 30. 4. The line graph should have \'Day\' on the x-axis and \'Customers\' on the y-axis, with a title \\"Daily Customer Traffic\\". You should write self-contained code starting with: ``` import pandas as pd import numpy as np import matplotlib.pyplot as plt def simulate_customer_traffic(seed=0): ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def simulate_customer_traffic(seed=0): np.random.seed(seed) days = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'] opening_hours = np.random.randint(8, 13, size=7) customers = np.random.normal(150, 30, size=7).astype(int) data = { \'Day\': days, \'Opening Hours\': opening_hours, \'Customers\': customers } df = pd.DataFrame(data) return df def plot_customer_traffic(df): plt.figure(figsize=(10, 6)) plt.plot(df[\'Day\'], df[\'Customers\'], marker=\'o\') plt.title(\'Daily Customer Traffic\') plt.xlabel(\'Day\') plt.ylabel(\'Customers\') plt.grid(True) plt.show()"},{"question":"Create a function that takes a string as input and returns the list of all substrings that are palindromes. The function should handle the varying lengths of substrings and return a set of unique palindromic substrings. The function should start with: ``` def find_palindromic_substrings(s: str): Find all unique palindromic substrings in the given string. Parameters: s (str): The input string. Returns: set: A set containing all unique palindromic substrings. palindromic_substrings = set() def is_palindrome(subs): return subs == subs[::-1] n = len(s) for length in range(1, n + 1): for start in range(n - length + 1): substring = s[start:start + length] if is_palindrome(substring): palindromic_substrings.add(substring) return palindromic_substrings # Example usage: # find_palindromic_substrings(\\"ababa\\") # Output: {\'a\', \'aba\', \'bab\', \'b\', \'ababa\'} ```","solution":"def find_palindromic_substrings(s: str): Find all unique palindromic substrings in the given string. Parameters: s (str): The input string. Returns: set: A set containing all unique palindromic substrings. palindromic_substrings = set() def is_palindrome(subs): return subs == subs[::-1] n = len(s) for length in range(1, n + 1): for start in range(n - length + 1): substring = s[start:start + length] if is_palindrome(substring): palindromic_substrings.add(substring) return palindromic_substrings # Example usage: # find_palindromic_substrings(\\"ababa\\") # Output: {\'a\', \'aba\', \'bab\', \'b\', \'ababa\'}"},{"question":"You are provided with a CSV file named `weather_data.csv` that contains weather information collected over a month. The CSV file has columns: `Date`, `Temperature`, `Humidity`, and `Rainfall`. Write a function named `summarize_weather` to calculate the summary statistics of temperature and rainfall, determine the number of rainy days, and visualize the temperature trends over the month. The function should perform the following steps: 1. **Read the CSV file**: Load the `weather_data.csv` file into a Pandas DataFrame. 2. **Calculate summary statistics**: Compute the mean, median, and standard deviation for `Temperature` and `Rainfall`. 3. **Count the number of rainy days**: A day is considered rainy if the `Rainfall` value is greater than 0. 4. **Plot the temperature trends**: Create a line plot for `Temperature` over `Date`. Be sure to format the x-axis to show the date properly. 5. **Save the plot**: Save the plot as a PNG file named \\"temperature_trends.png\\". Function signature: ```python def summarize_weather(file_path: str) -> None: # Your code here ``` **Requirements:** - Use the Pandas library to handle CSV data. - Use the `matplotlib` or `seaborn` library to create the line plot. - The x-axis of the plot should have properly formatted date labels. - Save the plot as \'temperature_trends.png\'. **Example:** ```python # Sample usage of the function summarize_weather(\\"weather_data.csv\\") ``` After calling the function, the following should be achieved: 1. The printed summary statistics of `Temperature` and `Rainfall`. 2. The printed number of rainy days. 3. A saved line plot named \'temperature_trends.png\' showing the temperature trends over the month.","solution":"import pandas as pd import matplotlib.pyplot as plt def summarize_weather(file_path: str) -> None: # Read the CSV file into a Pandas DataFrame df = pd.read_csv(file_path) # Calculate summary statistics for Temperature and Rainfall temperature_stats = { \'mean\': df[\'Temperature\'].mean(), \'median\': df[\'Temperature\'].median(), \'std\': df[\'Temperature\'].std() } rainfall_stats = { \'mean\': df[\'Rainfall\'].mean(), \'median\': df[\'Rainfall\'].median(), \'std\': df[\'Rainfall\'].std() } # Print the summary statistics print(\\"Temperature Statistics:\\") print(f\\"Mean: {temperature_stats[\'mean\']}\\") print(f\\"Median: {temperature_stats[\'median\']}\\") print(f\\"Standard Deviation: {temperature_stats[\'std\']}\\") print(\\"nRainfall Statistics:\\") print(f\\"Mean: {rainfall_stats[\'mean\']}\\") print(f\\"Median: {rainfall_stats[\'median\']}\\") print(f\\"Standard Deviation: {rainfall_stats[\'std\']}\\") # Count the number of rainy days rainy_days = len(df[df[\'Rainfall\'] > 0]) print(f\\"nNumber of rainy days: {rainy_days}\\") # Convert the \'Date\' column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Plot the temperature trends over the month plt.figure(figsize=(10, 6)) plt.plot(df[\'Date\'], df[\'Temperature\'], marker=\'o\', linestyle=\'-\') plt.title(\'Temperature Trends Over the Month\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature\') plt.xticks(rotation=45) plt.grid(True) # Save the plot as \'temperature_trends.png\' plt.savefig(\'temperature_trends.png\') plt.close()"},{"question":"You are given a list of cities with roads connecting them. Each road has a certain distance. Your task is to implement a function called `find_shortest_path` that finds the shortest path between two cities using Dijkstra\'s algorithm. The function should handle the following parameters: - `cities`: An integer representing the number of cities (labeled from 0 to `cities-1`). - `roads`: A list of tuples, where each tuple contains three values: `(city1, city2, distance)`, representing a road between `city1` and `city2` with a certain `distance`. - `start`: An integer representing the starting city for the path. - `end`: An integer representing the destination city. The function should return a tuple containing two values: 1. A list of integers representing the sequence of cities in the shortest path from `start` to `end`. 2. An integer representing the total distance of the shortest path. You can use the `heapq` library for the priority queue implementation required by Dijkstra\'s algorithm. ```python import heapq def find_shortest_path(cities, roads, start, end): graph = {i: [] for i in range(cities)} for city1, city2, distance in roads: graph[city1].append((distance, city2)) graph[city2].append((distance, city1)) priority_queue = [(0, start, [])] distances = {i: float(\'inf\') for i in range(cities)} distances[start] = 0 while priority_queue: current_distance, current_city, path = heapq.heappop(priority_queue) if current_city == end: return path + [end], current_distance for distance, neighbor in graph[current_city]: new_distance = current_distance + distance if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(priority_queue, (new_distance, neighbor, path + [current_city])) return [], float(\'inf\') # Example usage: cities = 5 roads = [(0, 1, 2), (0, 2, 4), (1, 2, 1), (1, 3, 7), (2, 4, 3), (3, 4, 1)] start = 0 end = 4 print(find_shortest_path(cities, roads, start, end)) # Output: ([0, 1, 2, 4], 6) ```","solution":"import heapq def find_shortest_path(cities, roads, start, end): graph = {i: [] for i in range(cities)} for city1, city2, distance in roads: graph[city1].append((distance, city2)) graph[city2].append((distance, city1)) priority_queue = [(0, start, [])] distances = {i: float(\'inf\') for i in range(cities)} distances[start] = 0 while priority_queue: current_distance, current_city, path = heapq.heappop(priority_queue) if current_city == end: return path + [end], current_distance for distance, neighbor in graph[current_city]: new_distance = current_distance + distance if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(priority_queue, (new_distance, neighbor, path + [current_city])) return [], float(\'inf\')"},{"question":"You are asked to implement a function that processes a list of transactions and calculates the balance of each account involved. Each transaction is represented as a dictionary with the keys \'sender\', \'receiver\', and \'amount\'. The function should return a dictionary where the keys are account identifiers and the values are the corresponding balances. **Function Specification:** - **Function Name:** `calculate_balances` - **Parameters:** 1. `transactions` (List[Dict[str, any]]): A list of transactions. Each transaction dictionary has: - \'sender\' (str): The account ID of the sender. - \'receiver\' (str): The account ID of the receiver. - \'amount\' (float): The amount of money being transferred. - **Returns:** `balances` (Dict[str, float]): A dictionary where keys are account IDs and values are the account balances. **Additional Requirements:** 1. If an account ID appears only as a sender or only as a receiver, initialize its balance from the first transaction it appears in. 2. The initial balance for any account not explicitly mentioned in transactions is considered to be zero. **Example Usage:** ```python transactions = [ {\'sender\': \'A\', \'receiver\': \'B\', \'amount\': 100.0}, {\'sender\': \'B\', \'receiver\': \'C\', \'amount\': 50.0}, {\'sender\': \'A\', \'receiver\': \'C\', \'amount\': 30.0}, ] balances = calculate_balances(transactions) print(balances) # This will print: # {\'A\': -130.0, \'B\': 50.0, \'C\': 80.0} ```","solution":"def calculate_balances(transactions): Processes a list of transactions and calculates the balance of each account involved. Args: transactions (List[Dict[str, any]]): A list of transactions. Returns: Dict[str, float]: A dictionary where keys are account IDs and values are the account balances. balances = {} for transaction in transactions: sender = transaction[\'sender\'] receiver = transaction[\'receiver\'] amount = transaction[\'amount\'] # Update sender\'s balance if sender not in balances: balances[sender] = 0.0 balances[sender] -= amount # Update receiver\'s balance if receiver not in balances: balances[receiver] = 0.0 balances[receiver] += amount return balances"},{"question":"You are required to create a function named `flatten_dictionary` which takes a dictionary with nested dictionaries and returns a new dictionary with no nesting. The keys of the new dictionary should represent the path to each value in the original dictionary, separated by dots. **Function Signature:** ```python def flatten_dictionary(d: dict) -> dict: ``` **Parameters:** - `d` (dict): The input dictionary potentially containing nested dictionaries. **Returns:** - `dict`: A new dictionary with flattened structure where nested dictionary keys are represented in a dot-separated string format. **Detailed Instructions:** 1. Iterate through the key-value pairs of the input dictionary. 2. For each key-value pair, if the value is a dictionary, recursively process the nested dictionary. 3. Concatenate the keys at each level with a dot to form the keys in the new dictionary. 4. If a prefix for nested dictionary keys exists, ensure it is included correctly in the flattened key. An example of the desired functionality: ```python # Original nested dictionary { \\"key1\\": { \\"keyA\\": \\"valueA\\", \\"keyB\\": \\"valueB\\" }, \\"key2\\": { \\"keyC\\": { \\"keyD\\": \\"valueD\\" } }, \\"key3\\": \\"value3\\" } # Flattened dictionary { \\"key1.keyA\\": \\"valueA\\", \\"key1.keyB\\": \\"valueB\\", \\"key2.keyC.keyD\\": \\"valueD\\", \\"key3\\": \\"value3\\" } ``` **Example Usage:** ```python input_dict = { \\"key1\\": { \\"keyA\\": \\"valueA\\", \\"keyB\\": \\"valueB\\" }, \\"key2\\": { \\"keyC\\": { \\"keyD\\": \\"valueD\\" } }, \\"key3\\": \\"value3\\" } print(flatten_dictionary(input_dict)) # Output should be # { # \\"key1.keyA\\": \\"valueA\\", # \\"key1.keyB\\": \\"valueB\\", # \\"key2.keyC.keyD\\": \\"valueD\\", # \\"key3\\": \\"value3\\" # } ```","solution":"def flatten_dictionary(d, parent_key=\'\', separator=\'.\'): Flattens a nested dictionary. Args: - d (dict): The dictionary to flatten. - parent_key (str): The base key to prepend to all keys. - separator (str): The separator to use between keys. Returns: - dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, separator=separator).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are given a time series dataset that contains daily sales data for multiple stores over several years. Each row contains the store ID, date, and sales amount. Your objective is to implement a function `preprocess_and_split_timeseries` that performs the following tasks: 1. Load the dataset from a CSV file with columns: `store_id`, `date`, `sales`. The path to the CSV file will be provided as an argument to the function. 2. Convert the `date` column to datetime format and ensure the data is sorted by `store_id` and `date`. 3. Normalize the sales data for each store using Min-Max Scaling. 4. Create a new feature `day_of_week` that represents the day of the week for each sales entry (0 for Monday, 6 for Sunday). 5. Split the dataset into training and testing sets (80% training, 20% testing) ensuring each store\'s data is split independently. Function Signature: ```python def preprocess_and_split_timeseries(file_path: str) -> Tuple[pd.DataFrame, pd.DataFrame]: ``` Your output should include: 1. The first few rows of the normalized training data. 2. The value ranges for the normalized sales amounts. 3. The number of records in the training and testing sets.","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler from typing import Tuple def preprocess_and_split_timeseries(file_path: str) -> Tuple[pd.DataFrame, pd.DataFrame]: # Load the dataset df = pd.read_csv(file_path) # Convert date column to datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Sort by store_id and date df = df.sort_values(by=[\'store_id\', \'date\']) # Create day_of_week feature df[\'day_of_week\'] = df[\'date\'].dt.dayofweek # Normalize sales data for each store df[\'normalized_sales\'] = df.groupby(\'store_id\')[\'sales\'].transform(lambda x: (x - x.min()) / (x.max() - x.min())) # Split into training (80%) and testing (20%) sets for each store train_list = [] test_list = [] for store_id, group in df.groupby(\'store_id\'): split_index = int(len(group) * 0.8) train_list.append(group.iloc[:split_index]) test_list.append(group.iloc[split_index:]) train_df = pd.concat(train_list) test_df = pd.concat(test_list) return train_df, test_df # Example usage (with an assumed file_path): # train_df, test_df = preprocess_and_split_timeseries(\'sales_data.csv\') # Showing the first few rows of the training data: # print(train_df.head()) # Value ranges for normalized sales: # print(f\\"Normalized sales - Min: {train_df[\'normalized_sales\'].min()}, Max: {train_df[\'normalized_sales\'].max()}\\") # Number of records in training and testing sets: # print(f\\"Training records: {len(train_df)}, Testing records: {len(test_df)}\\")"},{"question":"In this problem, you are required to implement a function `generate_transpose(matrix: List[List[int]]) -> List[List[int]]` that generates the transpose of a given 2D matrix. The transpose of a matrix is obtained by swapping the rows and columns of the matrix. # Function Details: - **Function Name**: `generate_transpose` - **Arguments**: - `matrix` (List[List[int]]): a 2D list of integers representing the original matrix. - **Returns**: A 2D list of integers representing the transpose of the input matrix. # Instructions: 1. Read the dimensions of the input matrix. 2. Create a new matrix with the number of rows equal to the number of columns of the original matrix and vice versa. 3. Populate the new matrix such that element at position (i, j) in the original matrix becomes element (j, i) in the new matrix. # Example ```python # Example usage original_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] transposed_matrix = generate_transpose(original_matrix) print(transposed_matrix) # Expected Output: # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] # Another example original_matrix = [ [1, 2], [3, 4], [5, 6] ] transposed_matrix = generate_transpose(original_matrix) print(transposed_matrix) # Expected Output: # [ # [1, 3, 5], # [2, 4, 6] # ] ``` Implement the function `generate_transpose` in Python following the details mentioned above.","solution":"from typing import List def generate_transpose(matrix: List[List[int]]) -> List[List[int]]: Generates the transpose of a given 2D matrix. Args: matrix (List[List[int]]): a 2D list of integers representing the original matrix. Returns: List[List[int]]: The transpose of the input matrix. if not matrix or not matrix[0]: return [] rows = len(matrix) cols = len(matrix[0]) transpose = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): transpose[j][i] = matrix[i][j] return transpose"},{"question":"You are tasked with implementing a function to find the closest pair of points in a 2D plane using the Divide and Conquer algorithm. The goal of this problem is to demonstrate an understanding of advanced algorithmic techniques and efficient computation for large datasets. You are given: - `points`: A list of tuples representing the coordinates of points in a 2D plane (e.g., [(x1, y1), (x2, y2), ... ]). Complete the function `closest_pair_of_points` following the below steps: 1. Implement a helper function to compute the Euclidean distance between two points. 2. Sort the list of points based on their x-coordinates. 3. Divide the set of points into two halves. 4. Recursively find the closest pairs of points in the left and right halves. 5. Find the closest pair of points such that one point lies in the left half and the other in the right half. 6. Combine the results to find the overall closest pair of points. **Function Signature:** ```python def closest_pair_of_points(points): pass ``` **Helper Function:** ```python def euclidean_distance(point1, point2): return ((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)**0.5 ``` **Example:** ```python points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)] result = closest_pair_of_points(points) print(result) # Output could be ((2, 3), (3, 4)) with the distance between them ``` This function should return a tuple containing the closest pair of points and the distance between them.","solution":"import math def euclidean_distance(point1, point2): Computes the Euclidean distance between two 2D points. return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def closest_pair_of_points(points): Returns the closest pair of points and the distance between them. Using Divide and Conquer approach. def closest_pair_util(px, py): n = len(px) if n <= 3: return brute_force_closest_pair(px) mid = n // 2 midpoint = px[mid] Qx = px[:mid] Rx = px[mid:] midpoint_x = px[mid][0] q_py = [] r_py = [] for point in py: # Split the points by their y-coordinates if point[0] <= midpoint_x: q_py.append(point) else: r_py.append(point) # Recursively find the smallest distances in the left and right halves (p1, q1, dist1) = closest_pair_util(Qx, q_py) (p2, q2, dist2) = closest_pair_util(Rx, r_py) # Find the minimal distance pair if dist1 <= dist2: d = dist1 min_pair = (p1, q1) else: d = dist2 min_pair = (p2, q2) # Find the closest split pairs (split_p1, split_q1, split_d) = closest_split_pair(px, py, d, min_pair) if d <= split_d: return min_pair[0], min_pair[1], d else: return split_p1, split_q1, split_d def brute_force_closest_pair(points): min_dist = float(\'inf\') closest_pair = (None, None) for i in range(len(points)): for j in range(i+1, len(points)): dist = euclidean_distance(points[i], points[j]) if dist < min_dist: min_dist = dist closest_pair = (points[i], points[j]) return closest_pair[0], closest_pair[1], min_dist def closest_split_pair(px, py, delta, best_pair): n = len(px) mid_x = px[n // 2][0] s_y = [pt for pt in py if mid_x - delta <= pt[0] <= mid_x + delta] min_dist = delta best_pair_curr = best_pair for i in range(len(s_y)): for j in range(i+1, min(i + 7, len(s_y))): p, q = s_y[i], s_y[j] dist = euclidean_distance(p, q) if dist < min_dist: min_dist = dist best_pair_curr = (p, q) return best_pair_curr[0], best_pair_curr[1], min_dist if len(points) < 2: return None, None, float(\'inf\') px = sorted(points, key=lambda x: x[0]) py = sorted(points, key=lambda x: x[1]) p1, p2, min_distance = closest_pair_util(px, py) return p1, p2, min_distance"},{"question":"In this problem, you are required to write a Python function named `group_by_prefix` that groups a list of words based on their shared prefixes. This type of problem provides practice with string manipulation and dictionary usage in Python. **Function Description**: - **Name**: `group_by_prefix` - **Parameters**: - `words` (list of str): A list of words (non-empty strings) to be grouped by their prefixes. - `prefix_length` (int): The length of the prefix to use for grouping. - **Returns**: - `dict`: A dictionary where each key is a prefix of the given length, and the corresponding value is a list of words from the input list that share that prefix. **Tasks**: 1. Initialize an empty dictionary to store the groups. 2. Iterate through each word in the input list. 3. For each word, determine its prefix of the specified length. 4. If the prefix is already a key in the dictionary, append the word to the corresponding list. 5. If the prefix is not a key, create a new key-value pair in the dictionary with the prefix and the word as its first element in the list. 6. Return the dictionary containing the grouped words. **Constraints**: - Assume all words in the input list are non-empty and consist of lowercase alphabetic characters only. - The `prefix_length` will be at least 1 and at most equal to the length of the shortest word in the list. Here\'s the function signature: ```python def group_by_prefix(words, prefix_length): # your code here ```","solution":"def group_by_prefix(words, prefix_length): Groups a list of words based on their shared prefixes of specified length. Parameters: words (list of str): A list of words (non-empty strings) to be grouped by their prefixes. prefix_length (int): The length of the prefix to use for grouping. Returns: dict: A dictionary where each key is a prefix of the given length, and the corresponding value is a list of words from the input list that share that prefix. grouped_words = {} for word in words: prefix = word[:prefix_length] if prefix in grouped_words: grouped_words[prefix].append(word) else: grouped_words[prefix] = [word] return grouped_words"},{"question":"You are tasked with generating a unique identifier for each user in a system. Each user is represented by their first name, last name, and birth date. The unique identifier should be a combination of the first letter of the first name, the first letter of the last name, and the last four digits of their birth year. For this task, you will write a function named `generate_user_id` that takes a list of dictionaries, where each dictionary contains the keys `first_name`, `last_name`, and `birth_date`. The `birth_date` will be given in the format `YYYY-MM-DD`. The function will return a new list of dictionaries, where each dictionary contains the user\'s details along with their generated `user_id`. Function Signature ```python def generate_user_id(users: list) -> list: Generate a unique user identifier for each user in the list. :param users: List of dictionaries with keys \'first_name\', \'last_name\', \'birth_date\'. :return: A new list of dictionaries with an additional \'user_id\' key. ``` Requirements 1. Iterate through the list of user dictionaries. 2. Extract the first letter of the first name and the last name. 3. Extract the last four digits of the birth year. 4. Combine them to form the unique user ID. 5. Add the `user_id` to each user\'s dictionary. 6. Return the updated list of dictionaries. Example Input ```python users = [ {\'first_name\': \'John\', \'last_name\': \'Doe\', \'birth_date\': \'1985-05-23\'}, {\'first_name\': \'Jane\', \'last_name\': \'Smith\', \'birth_date\': \'1990-09-17\'} ] ``` Example Output The function should return: ```python [ {\'first_name\': \'John\', \'last_name\': \'Doe\', \'birth_date\': \'1985-05-23\', \'user_id\': \'JD1985\'}, {\'first_name\': \'Jane\', \'last_name\': \'Smith\', \'birth_date\': \'1990-09-17\', \'user_id\': \'JS1990\'} ] ```","solution":"def generate_user_id(users: list) -> list: Generate a unique user identifier for each user in the list. :param users: List of dictionaries with keys \'first_name\', \'last_name\', \'birth_date\'. :return: A new list of dictionaries with an additional \'user_id\' key. for user in users: first_letter = user[\'first_name\'][0].upper() last_letter = user[\'last_name\'][0].upper() birth_year = user[\'birth_date\'][:4] user_id = f\\"{first_letter}{last_letter}{birth_year}\\" user[\'user_id\'] = user_id return users"},{"question":"You are asked to develop a function that analyzes the performance of different algorithms over multiple datasets. Your task is to create a function that computes the average execution time for each algorithm across all datasets, benchmarks the algorithms\' performance, and visualizes the results using a bar chart with `matplotlib` in Python. Instructions 1. Write a function named `benchmark_algorithms` that accepts the following parameters: - `algorithms`: A dictionary where each key is a string representing the algorithm\'s name, and the value is a function that implements the algorithm. - `datasets`: A list of pandas DataFrames where each DataFrame represents a dataset to be used for benchmarking. 2. Perform the following tasks within the function: - For each algorithm, compute the average execution time over all given datasets. - Create a bar chart displaying the average execution time for each algorithm, using the `matplotlib` library. 3. To measure the execution time of an algorithm on a dataset, use the `time` library\'s `time()` function to record the start and end times, and compute the difference. Example Usage: ```python import pandas as pd import time import matplotlib.pyplot as plt # Example algorithms def algo1(df): return df.mean() def algo2(df): return df.sum() # Example datasets data1 = pd.DataFrame({\'a\': [1, 2, 3, 4], \'b\': [5, 6, 7, 8]}) data2 = pd.DataFrame({\'a\': [4, 3, 2, 1], \'b\': [8, 7, 6, 5]}) algorithms = {\'Algorithm 1\': algo1, \'Algorithm 2\': algo2} datasets = [data1, data2] benchmark_algorithms(algorithms, datasets) ``` Example Function Implementation: ```python def benchmark_algorithms(algorithms, datasets): import time import matplotlib.pyplot as plt results = {} for algo_name, algo_func in algorithms.items(): total_time = 0 for df in datasets: start_time = time.time() algo_func(df) end_time = time.time() total_time += end_time - start_time avg_time = total_time / len(datasets) results[algo_name] = avg_time # Plotting the results names = list(results.keys()) times = list(results.values()) plt.figure(figsize=(10, 5)) plt.bar(names, times, color=\'skyblue\') plt.xlabel(\'Algorithms\') plt.ylabel(\'Average Execution Time (seconds)\') plt.title(\'Algorithm Performance Benchmark\') plt.show() ``` In this example, `benchmark_algorithms` will compute the average execution time for each algorithm across all provided datasets and visualize the results in a bar chart.","solution":"def benchmark_algorithms(algorithms, datasets): Computes the average execution time of each algorithm over the provided datasets and plots the results. Parameters: algorithms (dict): A dictionary where keys are algorithm names and values are algorithm functions. datasets (list): A list of pandas DataFrames on which the algorithms are to be benchmarked. Returns: dict: A dictionary mapping algorithm names to their average execution time. import time import matplotlib.pyplot as plt import pandas as pd results = {} for algo_name, algo_func in algorithms.items(): total_time = 0 for df in datasets: start_time = time.time() algo_func(df) end_time = time.time() total_time += end_time - start_time avg_time = total_time / len(datasets) results[algo_name] = avg_time # Plotting the results names = list(results.keys()) times = list(results.values()) plt.figure(figsize=(10, 5)) plt.bar(names, times, color=\'skyblue\') plt.xlabel(\'Algorithms\') plt.ylabel(\'Average Execution Time (seconds)\') plt.title(\'Algorithm Performance Benchmark\') plt.show() return results"},{"question":"You are assigned to create a function that identifies and lists the top N items from a given dataset based on their frequency of occurrence. This function should take a DataFrame containing transactions and compute the top N most frequent items across all transactions. The resultant DataFrame should contain the items and their corresponding frequency count, sorted in descending order of frequency. Function Definition - Name: `top_n_frequent` - Parameters: - `df_transactions` (pd.DataFrame): A DataFrame where each row represents a transaction and each transaction contains a list of items (strings). - `n` (int): The number of top frequent items to return. - Returns: - A DataFrame with two columns - \'Item\' and \'Frequency\', sorted by \'Frequency\' in descending order and containing only the top N items. Requirements - You must use the `collections.Counter` class to count item frequencies. - Ensure that the resultant DataFrame has exactly two columns: \'Item\' and \'Frequency\'. ```python def top_n_frequent(df_transactions, n): Identify the top N most frequent items from the given DataFrame of transactions. Parameters: df_transactions (pd.DataFrame): DataFrame containing transactions represented by lists of items. n (int): Number of top frequent items to return. Returns: pd.DataFrame: DataFrame with the top N frequent items and their frequencies. pass ``` Example Suppose `df_transactions` is as follows: | Transaction | Items | |-------------|----------------------| | 1 | [\'apple\', \'banana\'] | | 2 | [\'apple\', \'orange\'] | | 3 | [\'banana\', \'orange\', \'apple\'] | | 4 | [\'banana\', \'apple\'] | And `n` is 2. The function call `top_n_frequent(df_transactions, n)` should return: | Item | Frequency | |--------|-----------| | apple | 4 | | banana | 3 | Requirements 1. Import any necessary libraries. 2. Implement the `top_n_frequent` function. 3. Ensure the correctness of the function by verifying it against the provided example.","solution":"import pandas as pd from collections import Counter def top_n_frequent(df_transactions, n): Identify the top N most frequent items from the given DataFrame of transactions. Parameters: df_transactions (pd.DataFrame): DataFrame containing transactions represented by lists of items. n (int): Number of top frequent items to return. Returns: pd.DataFrame: DataFrame with the top N frequent items and their frequencies. # Flatten the list of items all_items = [item for sublist in df_transactions[\'Items\'] for item in sublist] # Count the frequency of each item item_counts = Counter(all_items) # Get the top N items top_items = item_counts.most_common(n) # Create the results dataframe result_df = pd.DataFrame(top_items, columns=[\'Item\', \'Frequency\']) return result_df"},{"question":"Write a function `find_nearest_store(user_lat, user_long, stores)` which takes three arguments: the user\'s latitude (`user_lat`), the user\'s longitude (`user_long`), and a list of stores (`stores`). Each store in the list is represented as a dictionary with keys `name`, `latitude`, and `longitude`. The function should compute the distance between the user and each store using the Haversine formula and return the name of the nearest store. If the stores list is empty, return `None`. The Haversine formula for calculating the distance between two points on the Earth given their latitudes and longitudes is: ```python import math def haversine(lat1, lon1, lat2, lon2): R = 6371 # Earth radius in kilometers d_lat = math.radians(lat2 - lat1) d_lon = math.radians(lon2 - lon1) a = math.sin(d_lat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(d_lon / 2) ** 2 c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)) distance = R * c return distance ``` Function requirements: - Function Name: `find_nearest_store` - Parameters: - `user_lat` (float): Latitude of the user. - `user_long` (float): Longitude of the user. - `stores` (list): A list of dictionaries where each dictionary represents a store with keys `name` (str), `latitude` (float), and `longitude` (float). - Returns: The name (str) of the nearest store, or `None` if the list of stores is empty. Example: ```python user_lat = 50.4501 user_long = 30.5234 stores = [ {\\"name\\": \\"Store A\\", \\"latitude\\": 50.4547, \\"longitude\\": 30.5238}, {\\"name\\": \\"Store B\\", \\"latitude\\": 50.4455, \\"longitude\\": 30.5191}, {\\"name\\": \\"Store C\\", \\"latitude\\": 50.4400, \\"longitude\\": 30.5104} ] print(find_nearest_store(user_lat, user_long, stores)) # Output: \\"Store A\\" ``` Complete the `find_nearest_store` function that solves this task.","solution":"import math def haversine(lat1, lon1, lat2, lon2): R = 6371 # Earth radius in kilometers d_lat = math.radians(lat2 - lat1) d_lon = math.radians(lon2 - lon1) a = math.sin(d_lat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(d_lon / 2) ** 2 c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)) distance = R * c return distance def find_nearest_store(user_lat, user_long, stores): if not stores: return None closest_store = None min_distance = float(\'inf\') for store in stores: distance = haversine(user_lat, user_long, store[\'latitude\'], store[\'longitude\']) if distance < min_distance: min_distance = distance closest_store = store[\'name\'] return closest_store"},{"question":"Write a function that takes a URL pointing to a CSV file, reads the CSV file into a pandas DataFrame, filters the DataFrame to only include rows where the values in a specified column are greater than a given threshold, and saves the filtered DataFrame to a new CSV file. The function should output the path to the saved CSV file. You should write self-contained code starting with: ``` import pandas as pd def filter_csv(url, column_name, threshold, output_path): ```","solution":"import pandas as pd def filter_csv(url, column_name, threshold, output_path): Reads a CSV file from the given URL, filters rows based on the specified column and threshold, and saves the filtered DataFrame to a new CSV file. Parameters: - url: str, the URL to the CSV file - column_name: str, the name of the column to apply the threshold filter on - threshold: numeric, the value to filter the column - output_path: str, the path to save the filtered CSV file Returns: - str, the path to the saved CSV file # Read CSV from URL df = pd.read_csv(url) # Filter DataFrame based on the threshold for the specified column filtered_df = df[df[column_name] > threshold] # Save filtered DataFrame to a new CSV file filtered_df.to_csv(output_path, index=False) return output_path"},{"question":"In this problem, you are required to write a function named `normalize_vector` that takes a 2-dimensional vector and returns its normalized form. Normalizing a vector means adjusting its length to 1 (making it a unit vector) but keeping its direction the same. The function should use basic arithmetic operations and the Pythagorean theorem to achieve this. Here are the details of the function `normalize_vector`: - **Function Name**: `normalize_vector` - **Parameters**: - `x` (float): The x-component of the vector. - `y` (float): The y-component of the vector. - **Returns**: A tuple `(nx, ny)` representing the normalized vector components. The normalization process is carried out as follows: - Compute the magnitude (length) of the vector using the Pythagorean theorem: `magnitude = (x**2 + y**2) ** 0.5` - Normalize the vector components: - `nx = x / magnitude` - `ny = y / magnitude` **Constraints**: - If the magnitude of the vector is 0, return `(0, 0)` as we cannot normalize a zero-length vector. **Example**: ```python normalize_vector(3, 4) # Output: (0.6, 0.8) normalize_vector(0, 0) # Output: (0, 0) ``` This problem aims to teach vector normalization, a fundamental concept in geometry and vector algebra, by utilizing arithmetic operations and the Pythagorean theorem to transform vector lengths.","solution":"def normalize_vector(x, y): Normalizes a 2D vector (x, y) to have a magnitude of 1 while maintaining its direction. Parameters: x (float): The x-component of the vector. y (float): The y-component of the vector. Returns: tuple: A tuple (nx, ny) representing the normalized vector components. magnitude = (x**2 + y**2) ** 0.5 if magnitude == 0: return (0, 0) return (x / magnitude, y / magnitude)"},{"question":"Create a function that generates a list of dictionaries representing students\' grades in a variety of subjects. Each dictionary should include the student\'s name, and their grades for Math, Science, English, and History. Calculate and return the average grade for each student, as well as the average grade for each subject across all students. You should write self-contained code starting with: ``` def generate_student_grades(num_students): ```","solution":"import random def generate_student_grades(num_students): Generate a list of dictionaries representing students\' grades in a variety of subjects. Each dictionary includes the student\'s name, and their grades for Math, Science, English, and History. Calculate and return the average grade for each student, as well as the average grade for each subject across all students. Parameters: - num_students: Number of students Returns: - grades: List of dictionaries with each student\'s grades - student_averages: List of average grades per student - subject_averages: Dictionary with average grades per subject names = [f\\"Student{i+1}\\" for i in range(num_students)] subjects = [\\"Math\\", \\"Science\\", \\"English\\", \\"History\\"] grades = [] for name in names: student_grades = { \\"name\\": name, \\"Math\\": random.randint(0, 100), \\"Science\\": random.randint(0, 100), \\"English\\": random.randint(0, 100), \\"History\\": random.randint(0, 100) } grades.append(student_grades) student_averages = [] for student in grades: avg = (student[\\"Math\\"] + student[\\"Science\\"] + student[\\"English\\"] + student[\\"History\\"]) / len(subjects) student_averages.append({\\"name\\": student[\\"name\\"], \\"average\\": avg}) subject_totals = {subject: 0 for subject in subjects} for student in grades: for subject in subjects: subject_totals[subject] += student[subject] subject_averages = {subject: subject_totals[subject] / num_students for subject in subjects} return grades, student_averages, subject_averages"},{"question":"You are required to implement a function to solve the classic \\"Travelling Salesman Problem\\" (TSP) using a brute-force approach. The TSP aims to find the shortest possible route that visits each city exactly once and returns to the origin city. Write a function named `travelling_salesman` that takes one parameter: 1. `distance_matrix`: a 2D list where `distance_matrix[i][j]` represents the distance between city `i` and city `j`. Your function should: - Generate all possible permutations of the cities. - Calculate the total distance for each permutation. - Identify the permutation with the minimum total distance. - Return this minimum total distance. You need to use the `itertools.permutations` function to generate all permutations of the cities. **Example Input:** ```python distance_matrix = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] ``` **Example Output:** ```python 80 ``` **Note:** - The input distance_matrix is symmetric, i.e., `distance_matrix[i][j]` is the same as `distance_matrix[j][i]`. - The main diagonal of the distance matrix will always contain zeros, as the distance from a city to itself is zero.","solution":"import itertools def travelling_salesman(distance_matrix): Solve the Travelling Salesman Problem using a brute-force approach. Parameters: distance_matrix (list of lists): a 2D list where distance_matrix[i][j] represents the distance between city i and city j. Returns: int: Minimum total distance of visiting each city exactly once and returning to the origin city. num_cities = len(distance_matrix) cities = range(num_cities) min_distance = float(\'inf\') for permutation in itertools.permutations(cities): # Calculate the total distance for the current permutation current_distance = 0 for i in range(num_cities - 1): current_distance += distance_matrix[permutation[i]][permutation[i + 1]] # Add distance from last city back to the origin city current_distance += distance_matrix[permutation[-1]][permutation[0]] # Update the minimum distance if the current distance is lower if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"Your task is to create a Python function named `filter_and_sort` that processes a list of dictionaries representing books. Each dictionary contains three keys: \\"title\\", \\"author\\", and \\"year\\". The function should filter out books published before the year 2000 and then sort the remaining books alphabetically by their title. Here are the steps your function needs to follow: 1. Filter out all books published before the year 2000. 2. Sort the remaining books alphabetically by their \\"title\\". 3. Return the sorted list of books. **Example**: ```python books = [ {\\"title\\": \\"The Road\\", \\"author\\": \\"Cormac McCarthy\\", \\"year\\": 2006}, {\\"title\\": \\"Harry Potter and the Sorcerer\'s Stone\\", \\"author\\": \\"J.K. Rowling\\", \\"year\\": 1997}, {\\"title\\": \\"The Da Vinci Code\\", \\"author\\": \\"Dan Brown\\", \\"year\\": 2003}, {\\"title\\": \\"Life of Pi\\", \\"author\\": \\"Yann Martel\\", \\"year\\": 2001}, ] filtered_sorted_books = filter_and_sort(books) ``` **Expected Output**: ```python [ {\\"title\\": \\"Life of Pi\\", \\"author\\": \\"Yann Martel\\", \\"year\\": 2001}, {\\"title\\": \\"The Da Vinci Code\\", \\"author\\": \\"Dan Brown\\", \\"year\\": 2003}, {\\"title\\": \\"The Road\\", \\"author\\": \\"Cormac McCarthy\\", \\"year\\": 2006}, ] ``` **Note**: - Ensure that the function handles an empty list input appropriately, returning an empty list in such cases. - You may assume that the input list of dictionaries is well-formed and contains valid information. Here is the signature of the function you need to implement: ```python def filter_and_sort(books): pass ```","solution":"def filter_and_sort(books): Filters out books published before the year 2000 and sorts the remaining books alphabetically by their title. Parameters: books (list): A list of dictionaries, where each dictionary contains \'title\', \'author\', and \'year\' keys representing a book. Returns: list: A sorted list of dictionaries representing books published from the year 2000 onwards. # Filter books published from the year 2000 onwards filtered_books = [book for book in books if book[\'year\'] >= 2000] # Sort books alphabetically by title sorted_books = sorted(filtered_books, key=lambda book: book[\'title\']) return sorted_books"},{"question":"In this problem, you are required to implement a function `validate_equation(equation)` that checks whether a given string representing a mathematical equation is a valid equation. An equation is valid if both left-hand side (LHS) and right-hand side (RHS) are valid arithmetic expressions, and they evaluate to the same numerical value. The equation will only contain integers, the operators `+`, `-`, `*`, `/` (integer division), and the equal sign `=`. Additionally, no spaces will be present in the equation. **Function Signature:** ```python def validate_equation(equation: str) -> bool: Validates whether a given string is a valid mathematical equation. Parameters: equation (str): The equation to validate Returns: bool: True if the equation is valid, False otherwise ``` **Instructions:** 1. Split the input string into LHS and RHS using the equal sign `=`. 2. Ensure that both LHS and RHS are non-empty strings. 3. Evaluate both LHS and RHS using Python\'s `eval` function. Make sure to handle potential exceptions that may occur during evaluation (e.g., syntax errors or division by zero). 4. Compare the evaluated results of LHS and RHS. If they are equal, the equation is valid. 5. Return `True` if the equation is valid and `False` otherwise.","solution":"def validate_equation(equation: str) -> bool: Validates whether a given string is a valid mathematical equation. Parameters: equation (str): The equation to validate Returns: bool: True if the equation is valid, False otherwise try: lhs, rhs = equation.split(\\"=\\") if lhs == \\"\\" or rhs == \\"\\": return False lhs_value = eval(lhs) rhs_value = eval(rhs) return lhs_value == rhs_value except: return False"},{"question":"You are tasked with implementing a function to perform K-means clustering on a set of 2-dimensional data points. The function should iteratively update the assignments of points to clusters and the centroids of clusters until convergence. After convergence, the function should print the coordinates of the centroids at specific intervals during the iterations, based on the number of changes in the assignments between successive iterations. Function to implement: `k_means_with_logging` Parameters: - `data_points` (numpy array): A matrix where each row represents the coordinates of one data point. - `initial_centroids` (numpy array): A matrix where each row represents the initial coordinates of a centroid. - `num_clusters` (int): The number of clusters to form. - `max_iter` (int): The maximum number of iterations to run K-means. The function should print the iteration number and the coordinates of the centroids at the following intervals: 1. Each iteration for the first 10 iterations. 2. Every 5 iterations for the next 40 iterations (up to iteration 50). 3. Every 20 iterations for the next 150 iterations (up to iteration 200). 4. Every 50 iterations for iterations beyond 200. Use the following helper functions within your implementation. They are already defined: 1. `assign_to_clusters(data_points, centroids)`: Returns a vector of cluster assignments for each data point given the current centroids. 2. `compute_centroids(data_points, assignments, num_clusters)`: Computes the new centroids given the data points and their cluster assignments. 3. `has_converged(old_centroids, new_centroids)`: Checks if the centroids have converged, i.e., if the new centroids are the same as the old centroids. Ensure to handle the case where the maximum number of iterations is reached by returning the final centroids and printing the iterations properly. Output: - The function should return the final centroids after completing the iterations. ```python def k_means_with_logging(data_points, initial_centroids, num_clusters, max_iter): # Your implementation here pass ```","solution":"import numpy as np def assign_to_clusters(data_points, centroids): distances = np.linalg.norm(data_points[:, np.newaxis] - centroids, axis=2) return np.argmin(distances, axis=1) def compute_centroids(data_points, assignments, num_clusters): centroids = np.zeros((num_clusters, data_points.shape[1])) for k in range(num_clusters): cluster_points = data_points[assignments == k] if len(cluster_points) > 0: centroids[k] = cluster_points.mean(axis=0) return centroids def has_converged(old_centroids, new_centroids): return np.all(old_centroids == new_centroids) def k_means_with_logging(data_points, initial_centroids, num_clusters, max_iter): centroids = initial_centroids for iteration in range(1, max_iter + 1): assignments = assign_to_clusters(data_points, centroids) new_centroids = compute_centroids(data_points, assignments, num_clusters) centroids_changed = not has_converged(centroids, new_centroids) centroids = new_centroids if iteration <= 10 or (iteration <= 50 and iteration % 5 == 0) or (iteration <= 200 and iteration % 20 == 0) or (iteration > 200 and iteration % 50 == 0): print(f\\"Iteration {iteration}: Centroids: {centroids}\\") if not centroids_changed: break return centroids"},{"question":"You are given a dataset containing information about different movies, including ratings from users. Your task is to analyze this dataset using Python and create summary statistics and visualizations. The data is in a CSV file with columns \\"Movie Title\\", \\"Genre\\", \\"User Rating\\", and \\"Year Released\\". Write a function named `analyze_movie_ratings()` that performs the following steps: 1. Reads the data from a CSV file named \\"movie_ratings.csv\\" into a pandas DataFrame. 2. Calculates and prints the average rating for each genre. 3. Identifies and prints the title of the highest-rated movie for each genre. 4. Creates a bar plot showing the number of movies released each year, labeled with \\"Year Released\\" on the x-axis and \\"Number of Movies\\" on the y-axis. 5. Adds appropriate labels, a title, and a legend to the plot. 6. Saves the plot to a file named \\"movie_release_trends.png\\" and returns the pyplot Axes object. You must use the following functions and classes from the corresponding libraries: - `pandas.read_csv` to read the CSV file into a DataFrame. - `pandas.DataFrame.groupby` to group data by a specific column. - `pandas.DataFrame.mean` to calculate the average rating. - `pandas.DataFrame.idxmax` to find the index of the maximum value. - `matplotlib.pyplot.bar` to create the bar plot. - `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, `matplotlib.pyplot.title` to add labels and a title to the plot. - `matplotlib.pyplot.savefig` to save the plot to a file. Ensure your function precisely follows the specifications and adheres to the provided library documentation.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_movie_ratings(): # Step 1: Read the data from a CSV file named \\"movie_ratings.csv\\" into a pandas DataFrame df = pd.read_csv(\\"movie_ratings.csv\\") # Step 2: Calculate and print the average rating for each genre genre_avg_ratings = df.groupby(\\"Genre\\")[\\"User Rating\\"].mean() print(\\"Average Rating for each Genre:\\") print(genre_avg_ratings) # Step 3: Identify and print the title of the highest-rated movie for each genre print(\\"nHighest Rated Movie for each Genre:\\") for genre in df[\\"Genre\\"].unique(): highest_rating_movie = df[df[\\"Genre\\"] == genre].loc[df[df[\\"Genre\\"] == genre][\\"User Rating\\"].idxmax()][\\"Movie Title\\"] print(f\\"{genre}: {highest_rating_movie}\\") # Step 4: Create a bar plot showing the number of movies released each year movies_per_year = df[\\"Year Released\\"].value_counts().sort_index() fig, ax = plt.subplots() ax.bar(movies_per_year.index, movies_per_year.values) # Step 5: Add appropriate labels, a title, and a legend to the plot ax.set_xlabel(\\"Year Released\\") ax.set_ylabel(\\"Number of Movies\\") ax.set_title(\\"Number of Movies Released Each Year\\") # Step 6: Save the plot to a file named \\"movie_release_trends.png\\" and return the pyplot Axes object plt.savefig(\\"movie_release_trends.png\\") return ax"},{"question":"You have been asked to create a function that manages a player\'s inventory in an adventure game. The function should allow adding, removing, and checking items in the inventory, while also ensuring that the inventory does not exceed a given capacity. Specifically, you need to write a class called `Inventory` that includes the following methods: 1. Class signature: ```python class Inventory: ``` 2. Methods: - `__init__(self, capacity: int)`: Initializes the inventory with a given capacity. - `add_item(self, item: str) -> bool`: Adds an item to the inventory if there is space. Returns `True` if successful, else `False`. - `remove_item(self, item: str) -> bool`: Removes an item from the inventory if it exists. Returns `True` if successful, else `False`. - `check_item(self, item: str) -> bool`: Checks if an item is in the inventory. Returns `True` if it exists, else `False`. - `get_inventory(self) -> list`: Returns a list of all items currently in the inventory. # Example Usage - Using the defined class methods, manage the player\'s inventory by adding, removing, and checking items. ```python inv = Inventory(3) print(inv.add_item(\\"sword\\")) # Output: True print(inv.add_item(\\"shield\\")) # Output: True print(inv.add_item(\\"potion\\")) # Output: True print(inv.add_item(\\"helmet\\")) # Output: False, inventory is full print(inv.get_inventory()) # Output: [\'sword\', \'shield\', \'potion\'] print(inv.remove_item(\\"shield\\")) # Output: True print(inv.get_inventory()) # Output: [\'sword\', \'potion\'] print(inv.check_item(\\"sword\\")) # Output: True print(inv.check_item(\\"shield\\")) # Output: False ``` # Constraints: - The inventory has a maximum capacity given at initialization. - Items in the inventory are unique; adding an item already present should have no effect. - Removing an item not in the inventory should have no effect. Implement this class by appropriately handling the inventory capacity and ensuring the requested operations conform to the given constraints.","solution":"class Inventory: def __init__(self, capacity: int): Initializes the inventory with a given capacity. :param capacity: The maximum number of items the inventory can hold. self.capacity = capacity self.items = [] def add_item(self, item: str) -> bool: Adds an item to the inventory if there is space and the item is not already present. :param item: The item to add to the inventory. :return: True if successfully added, otherwise False. if len(self.items) < self.capacity and item not in self.items: self.items.append(item) return True return False def remove_item(self, item: str) -> bool: Removes an item from the inventory if it exists. :param item: The item to remove from the inventory. :return: True if successfully removed, otherwise False. if item in self.items: self.items.remove(item) return True return False def check_item(self, item: str) -> bool: Checks if an item is in the inventory. :param item: The item to check. :return: True if the item is in the inventory, otherwise False. return item in self.items def get_inventory(self) -> list: Returns a list of all items currently in the inventory. :return: A list of items in the inventory. return self.items"},{"question":"You have been tasked with cleaning a dataset to make it suitable for analysis. One of the common data-cleaning tasks is to handle missing values in a way that doesn\'t distort the analysis. Your task is to define a function `fill_missing_values` that takes a pandas DataFrame and a strategy for filling missing values, and returns a cleaned DataFrame. The function should: 1. Raise a `RuntimeError` if the strategy is not provided or if it is invalid. 2. Accept a dictionary with column names as keys and their respective fill strategies as values. The strategies can be: - \'mean\': Fill missing values with the mean of the column. - \'median\': Fill missing values with the median of the column. - \'mode\': Fill missing values with the most frequent value of the column. - \'constant\': Fill missing values with a constant value provided in the dictionary for that column. 3. If \'constant\' strategy is used, the dictionary should include the constant value to use. **Function Signature:** ```python def fill_missing_values(df: pd.DataFrame, strategy: dict) -> pd.DataFrame: # Your code goes here pass ``` **Example Usage:** ```python import pandas as pd import numpy as np data = { \'age\': [25, np.nan, 27, np.nan, 29], \'income\': [50000, 52000, np.nan, 58000, 60000], \'city\': [\'New York\', \'Los Angeles\', \'New York\', np.nan, \'Chicago\'] } df = pd.DataFrame(data) strategy = { \'age\': \'mean\', \'income\': \'median\', \'city\': \'mode\', } new_df = fill_missing_values(df, strategy) print(new_df) ``` In this example, `new_df` should contain all missing values filled according to the specified strategy: 1. \'age\' and \'income\' columns should have their missing values filled with the mean and median respectively. 2. \'city\' column should have its missing values filled with the mode (most frequent value).","solution":"import pandas as pd def fill_missing_values(df: pd.DataFrame, strategy: dict) -> pd.DataFrame: Fill missing values in the DataFrame according to the provided strategy. Parameters: df (pd.DataFrame): A pandas DataFrame with missing values. strategy (dict): A dictionary where keys are column names and values are strategies {\'mean\', \'median\', \'mode\', \'constant\'}. If using \'constant\', specify the value to use in the same dictionary. Returns: pd.DataFrame: The DataFrame with filled missing values. if not strategy: raise RuntimeError(\\"A valid strategy must be provided\\") for column, strat in strategy.items(): if strat == \'mean\': df[column].fillna(df[column].mean(), inplace=True) elif strat == \'median\': df[column].fillna(df[column].median(), inplace=True) elif strat == \'mode\': df[column].fillna(df[column].mode()[0], inplace=True) elif \'constant\' in strat: value = strat[\'constant\'] df[column].fillna(value, inplace=True) else: raise RuntimeError(f\\"\'{strat}\' is not a valid strategy\\") return df"},{"question":"You are asked to implement a text-based game using Python. The goal of this exercise is to familiarize yourself with file handling and basic game loop mechanics. Your task is to write a program called `guess_the_word()` that works as follows: 1. The program reads a list of words from a file named `words.txt`, where each line contains one word. 2. A random word is selected from the list as the word to be guessed. 3. The player gets six attempts to guess the letters in the word. 4. After each guess, the program displays the word showing correctly guessed letters and underscores for unguessed letters. 5. The program also displays the number of remaining attempts. 6. If the player correctly guesses all letters before using up all attempts, they win. If they fail to guess the word within six attempts, they lose. Ensure that your code is well-organized, handles file operations properly, and follows Python\'s best practices.","solution":"import random def guess_the_word(): # Read words from file with open(\'words.txt\', \'r\') as file: words = file.read().splitlines() # Select a random word word_to_guess = random.choice(words) guessed_word = [\'_\' for _ in word_to_guess] attempts_remaining = 6 guessed_letters = set() print(\\"Welcome to Guess the Word game!\\") print(\\"You have 6 attempts to guess the word.\\") while attempts_remaining > 0 and \'_\' in guessed_word: print(f\\"Word: {\' \'.join(guessed_word)}\\") print(f\\"Attempts remaining: {attempts_remaining}\\") print(f\\"Guessed letters: {\', \'.join(sorted(guessed_letters))}\\") guess = input(\\"Enter a letter: \\").lower() if guess in guessed_letters: print(\\"You\'ve already guessed that letter. Try again.\\") continue guessed_letters.add(guess) if guess in word_to_guess: for index, letter in enumerate(word_to_guess): if letter == guess: guessed_word[index] = guess print(\\"Good guess!\\") else: attempts_remaining -= 1 print(\\"Incorrect guess.\\") if \'_\' not in guessed_word: print(f\\"Congratulations! You guessed the word: {word_to_guess}\\") return print(f\\"Game over! The word was: {word_to_guess}\\")"},{"question":"You are required to write a function `find_word_frequencies` that reads and processes a text file named `input.txt`. The function should count the frequency of each word in the file and write the results to a new file named `output.txt`. Specifications: - Ignore case when counting word frequencies (i.e., \\"Word\\" and \\"word\\" should be considered the same). - Exclude punctuation from the words (e.g., \\"hello,\\" and \\"hello\\" should be considered the same word). - Each line in the `output.txt` file should contain a word and its frequency, separated by a space. - The words should be sorted by frequency in descending order. If multiple words have the same frequency, they should be sorted alphabetically. Function Signature: ```python def find_word_frequencies(): pass ``` Your task is to write Python code to achieve the above functionality efficiently. Make sure to handle large text files properly. You may use Python\'s `collections` module for counting and `re` module for regular expressions to manage punctuation.","solution":"import re from collections import Counter def find_word_frequencies(): Reads a file named \'input.txt\', counts the frequency of each word (case insensitive, ignoring punctuation), and writes the results to \'output.txt\' sorted by frequency in descending order and alphabetically for ties. # Read the input file with open(\'input.txt\', \'r\') as file: text = file.read() # Normalize case and remove punctuation text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) # Split into words words = text.split() # Count the word frequencies word_counts = Counter(words) # Sort the words by frequency and alphabetically for ties sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Write the result to the output file with open(\'output.txt\', \'w\') as file: for word, freq in sorted_word_counts: file.write(f\'{word} {freq}n\')"},{"question":"Write a function `rebuild_nested_dict(keys: List[str], final_value: Any) -> Dict:` that takes a list of keys and a final value, and reconstructs a nested dictionary from these keys such that each key in the list is a level in the dictionary and the final value is the innermost value. The order of keys in the list represents the depth of the nesting. Function Signature ```python def rebuild_nested_dict(keys: List[str], final_value: Any) -> Dict: ``` # Requirements: 1. The function should create a nested dictionary where each key from the list `keys` is a level in the dictionary. 2. The final value should be the value associated with the innermost key. 3. Handle cases where the list of keys is empty and return the final value directly. # Example: ```python keys = [\\"a\\", \\"b\\", \\"c\\"] final_value = 42 rebuild_nested_dict(keys, final_value) ``` Output: ```python { \\"a\\": { \\"b\\": { \\"c\\": 42 } } } ``` # Additional Example: If `keys` list is `[\\"x\\", \\"y\\"]` and `final_value` is `\\"value\\"`, the function would return: ```python { \\"x\\": { \\"y\\": \\"value\\" } } ``` If `keys` list is empty, the function would return: ```python 42 ```","solution":"from typing import List, Any, Dict def rebuild_nested_dict(keys: List[str], final_value: Any) -> Dict: if not keys: return final_value nested_dict = current = {} for key in keys[:-1]: current[key] = {} current = current[key] current[keys[-1]] = final_value return nested_dict"},{"question":"You are required to write a function `process_person_data(person_data)` that processes a dictionary of input values representing personal information. The dictionary `person_data` includes the following key-value pairs (the actual dictionary might not contain all keys): - `\'name\'`: A string representing the person\'s name. The name must be non-empty. - `\'age\'`: A string representing the person\'s age in years. - `\'email\'`: A string representing the person\'s email address. The function should perform the following validation checks: 1. **Type Check**: Ensure that all values are strings. If any value is not a string, set a key `\'error\'` in the `person_data` dictionary with the value `\'error with parameter types\'` and return the dictionary. 2. **Value Check**: - For the `\'name\'` value: - Ensure the name is not an empty string. - For the `\'age\'` value: - Convert the string to an integer. The age must be between 0 and 120, inclusive. - For the `\'email\'` value: - Ensure the email string has a valid email format (i.e., contains \\"@\\" and \\".\\"). If any value checks fail, set a key `\'error\'` in the `person_data` dictionary with the value `\'error with values\'` and return the dictionary. Additionally, if all validations pass, add a key `\'processed\'` with the value `True` to the `person_data` dictionary. Write the function adhering to the description and taking into account the validation requirements.","solution":"import re def process_person_data(person_data): Processes the person data dictionary with validation checks. Args: person_data (dict): Dictionary containing person data with keys \'name\', \'age\', and \'email\'. Returns: dict: Updated dictionary with validation results. # Type Check for key, value in person_data.items(): if not isinstance(value, str): person_data[\'error\'] = \'error with parameter types\' return person_data # Value Check # Check \'name\' if \'name\' in person_data: if not person_data[\'name\']: person_data[\'error\'] = \'error with values\' return person_data # Check \'age\' if \'age\' in person_data: try: age = int(person_data[\'age\']) if age < 0 or age > 120: person_data[\'error\'] = \'error with values\' return person_data except ValueError: person_data[\'error\'] = \'error with values\' return person_data # Check \'email\' if \'email\' in person_data: email_pattern = r\\"[^@]+@[^@]+.[^@]+\\" if not re.match(email_pattern, person_data[\'email\']): person_data[\'error\'] = \'error with values\' return person_data person_data[\'processed\'] = True return person_data"},{"question":"**Problem Statement:** You are tasked with writing a function called `calculate_word_frequencies` that takes a string as input and returns a dictionary containing the frequency of each word in the string. The function should ignore case (i.e., treat \'Word\' and \'word\' as the same) and must only consider alphanumeric characters (ignore punctuation). # Details: 1. **Function Name**: `calculate_word_frequencies` 2. **Input**: A single parameter, `text` (a string containing words which may include punctuation). 3. **Output**: A dictionary where the keys are words in lowercase and the values are the counts of each word. # Requirements: - **Normalize words to lowercase**: Ensure that word counting is case-insensitive by converting all words to lowercase. - **Ignore Punctuation**: Only consider alphanumeric characters. Words should be separated by whitespace. # Examples: - `calculate_word_frequencies(\\"Hello world! Hello... World\\")` should return `{ \\"hello\\": 2, \\"world\\": 2 }` - `calculate_word_frequencies(\\"This is a test. This is only a test.\\")` should return `{ \\"this\\": 2, \\"is\\": 2, \\"a\\": 2, \\"test\\": 2, \\"only\\": 1 }` - `calculate_word_frequencies(\\"Programming in Python, Python programming.\\")` should return `{ \\"programming\\": 2, \\"in\\": 1, \\"python\\": 2 }` - `calculate_word_frequencies(\\"\\")` should return `{}` (an empty dictionary) Make sure to thoroughly test your function with various inputs to ensure it performs accurately.","solution":"import re from collections import defaultdict def calculate_word_frequencies(text): Calculate the frequency of each word in the text. Words are compared in a case-insensitive manner and punctuation is ignored. :param str text: Input string containing the text to be analyzed. :return: Dictionary with words as keys and their frequency as values. :rtype: dict # Normalize to lowercase and remove punctuation using regular expressions text = re.sub(r\'[^ws]\', \'\', text.lower()) # Split the text into words words = text.split() # Count the frequency of each word frequencies = defaultdict(int) for word in words: frequencies[word] += 1 return dict(frequencies)"},{"question":"We will work with a string transformation problem, specifically focusing on reversing vowels in a given string. Task You need to write a function named `reverse_vowels(s)` that takes a string `s` as input and returns a new string with the vowels in `s` reversed. Only the vowels should be reversed while the positions of the consonants and other characters must remain the same. Vowels in both uppercase and lowercase are included (`a, e, i, o, u, A, E, I, O, U`). Function Signature ```python def reverse_vowels(s): # your code here ``` # Example ```python # Example usage: result = reverse_vowels(\\"hello\\") print(result) # Output should be \\"holle\\" result = reverse_vowels(\\"leetcode\\") print(result) # Output should be \\"leotcede\\" ``` # Constraints - The input string `s` will have a length between 1 and 100,000. - The string can contain English letters (both uppercase and lowercase) and punctuation. # Notes - Carefully manage the positions of vowels and other characters in the string. - Consider using two-pointer technique to reverse vowels efficiently.","solution":"def reverse_vowels(s): Reverses the vowels in the given string s while keeping the positions of consonants and other characters the same. vowels = set(\\"aeiouAEIOU\\") s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 elif s_list[right] not in vowels: right -= 1 else: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return \\"\\".join(s_list)"},{"question":"In this problem, you need to write a function named `find_matrix_trace` that takes a square matrix (2D list) as input and returns the trace of the matrix. The trace of a matrix is defined as the sum of the elements on the main diagonal (from the top left to the bottom right). The function should follow these steps: 1. Verify that the input is a square matrix (number of rows equals the number of columns). 2. If the matrix is not square, raise a ValueError with a message indicating the matrix must be square. 3. Calculate the sum of the elements on the main diagonal. 4. Return this sum as the trace of the matrix. Here is the signature for your function: ```python def find_matrix_trace(matrix: List[List[int]]) -> int: # your implementation here ``` Examples: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] trace = find_matrix_trace(matrix) print(trace) # Output: 15 (1 + 5 + 9) matrix = [ [10, 20], [30, 40] ] trace = find_matrix_trace(matrix) print(trace) # Output: 50 (10 + 40) ```","solution":"from typing import List def find_matrix_trace(matrix: List[List[int]]) -> int: Returns the trace of a square matrix. The trace is defined as the sum of the elements on the main diagonal (from the top left to the bottom right). # Check if the matrix is square num_rows = len(matrix) for row in matrix: if len(row) != num_rows: raise ValueError(\\"The matrix must be square.\\") # Calculate the trace trace = 0 for i in range(num_rows): trace += matrix[i][i] return trace"},{"question":"You are given a list of meeting time intervals, consisting of start and end times [start, end). Your task is to find the minimum number of meeting rooms required to accommodate all meetings without overlapping. Write a function `min_meeting_rooms(intervals)` that determines the minimum number of conference rooms needed. The function should return an integer representing the number of rooms required. **Function Signature:** ```python def min_meeting_rooms(intervals): pass ``` **Parameters:** - `intervals (List[List[int]])`: A list of intervals where intervals[i] = [start_i, end_i] (1 <= start_i < end_i <= 10^9). **Returns:** - `rooms (int)`: The minimum number of conference rooms required. **Constraints:** 1. The length of the input list will be in the range `[1, 10^4]`. **Example:** ```python # Example usage intervals = [[0, 30], [5, 10], [15, 20]] rooms_needed = min_meeting_rooms(intervals) print(f\\"Minimum number of rooms required: {rooms_needed}\\") # Output: 2 ``` **Notes:** - You may assume that the intervals do not contain any invalid values. - The intervals may be given in any order. **Explanation:** In the example, the meetings [0, 30], [5, 10], and [15, 20] overlap in such a way that at least two rooms are required to accommodate them.","solution":"import heapq def min_meeting_rooms(intervals): Determines the minimum number of conference rooms required to accommodate all the meetings without overlapping. Parameters: intervals (List[List[int]]): A list of intervals where intervals[i] = [start_i, end_i] Returns: rooms (int): The minimum number of conference rooms required. if not intervals: return 0 # Sort the intervals by start time intervals.sort(key=lambda x: x[0]) # Use a min-heap to keep track of the end times of the meetings heap = [] # Add the end time of the first meeting heapq.heappush(heap, intervals[0][1]) for i in range(1, len(intervals)): # If the current meeting starts after the earliest ended meeting, reuse that room if intervals[i][0] >= heap[0]: heapq.heappop(heap) # Whether we reused a room or added a new room, we push the current meeting\'s end time heapq.heappush(heap, intervals[i][1]) # The size of the heap is the number of rooms required return len(heap)"},{"question":"You have been asked to create a function to simulate the voting process for an election with multiple candidates. Each voter may cast a vote for one candidate. Your goal is to count the votes and determine the winner of the election. You need to implement a function named `count_votes` that takes a list of votes as its argument. Each vote is represented as a string where the string is the name of the candidate. For example, if you call `count_votes([\'Alice\', \'Bob\', \'Alice\', \'Eve\', \'Bob\', \'Alice\'])`, it means you have 6 votes where \'Alice\' received 3 votes, \'Bob\' received 2 votes, and \'Eve\' received 1 vote. Your function should: 1. Use the `collections.Counter` class to count the number of votes each candidate received. 2. Determine the candidate with the highest number of votes. 3. Print the name of the winning candidate and the number of votes they received, formatted as below. Ensure to adhere to the following structure for your function\'s output: ``` WINNER: candidate_name with votes_count votes ``` If there is a tie (more than one candidate with the highest number of votes), you should print all candidates with the highest number of votes, each on a new line. For a tie, use the following format for your function\'s output: ``` WINNER: candidate_name1 with votes_count votes WINNER: candidate_name2 with votes_count votes ... ``` Implement the `count_votes` function to meet the above specifications.","solution":"from collections import Counter def count_votes(votes): Counts the votes for each candidate and determines the winning candidate(s). Parameters: votes (list): A list of strings where each string is a candidate\'s name. Output: Prints the winning candidate(s) and their vote count. # Count the votes for each candidate vote_count = Counter(votes) if not vote_count: print(\\"No votes cast.\\") return # Determine the maximum number of votes received max_votes = max(vote_count.values()) # Determine the candidate(s) with the highest votes winners = [candidate for candidate, count in vote_count.items() if count == max_votes] # Print the winners for winner in winners: print(f\\"WINNER: {winner} with {max_votes} votes\\")"},{"question":"You are given a list of transactions representing sales data for a store. Each transaction is a dictionary with keys `item`, `price`, and `quantity`. Your task is to create a function `calculate_sales_summary(transactions)` that returns a summary of total sales per item. The sales summary should be represented as a dictionary where each key is an item and the value is the total revenue generated from that item. Revenue for an item is calculated by multiplying its `price` by its `quantity` for each transaction involving that item. Function Signature: ```python def calculate_sales_summary(transactions: List[Dict[str, Union[str, float, int]]]) -> Dict[str, float]: ``` # Example: ```python transactions = [ {\\"item\\": \\"apple\\", \\"price\\": 0.5, \\"quantity\\": 10}, {\\"item\\": \\"banana\\", \\"price\\": 0.3, \\"quantity\\": 5}, {\\"item\\": \\"apple\\", \\"price\\": 0.5, \\"quantity\\": 20}, {\\"item\\": \\"banana\\", \\"price\\": 0.3, \\"quantity\\": 10}, {\\"item\\": \\"orange\\", \\"price\\": 0.8, \\"quantity\\": 15} ] print(calculate_sales_summary(transactions)) ``` Expected output: ```python { \\"apple\\": 15.0, \\"banana\\": 4.5, \\"orange\\": 12.0 } ``` # Instructions: 1. Iterate through the list of transactions to accumulate sales data. 2. Make sure to handle multiple transactions for the same item. 3. Return a dictionary as described above, where the key is the item name and the value is the total revenue from that item.","solution":"from typing import List, Dict, Union def calculate_sales_summary(transactions: List[Dict[str, Union[str, float, int]]]) -> Dict[str, float]: summary = {} for transaction in transactions: item = transaction[\\"item\\"] price = transaction[\\"price\\"] quantity = transaction[\\"quantity\\"] revenue = price * quantity if item in summary: summary[item] += revenue else: summary[item] = revenue return summary"},{"question":"You are tasked with implementing a function named `validate_and_classify_ip_addresses`. This function will take a list of strings which are supposed to be IP addresses and classify them as either IPv4, IPv6, or invalid. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (e.g., \\"192.168.0.1\\"). An IPv6 address consists of eight groups of four hexadecimal digits, each group separated by colons (e.g., \\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\\"). Both IPv4 and IPv6 addresses should not have leading zeros in each component. # Specifications: 1. **Function Name**: `validate_and_classify_ip_addresses` 2. **Parameters**: - `ip_addresses`: A list of strings, where each string is an IP address to be validated and classified. 3. **Output**: - The function should return a dictionary with three keys: `\\"IPv4\\"`, `\\"IPv6\\"`, and `\\"Invalid\\"`. Each key should map to a list of IP addresses that fall into that category. # Requirements: - Use regular expressions or appropriate string manipulation techniques to validate and classify the IP addresses. - Ensure that the function correctly identifies and classifies each type of IP address and handles edge cases such as leading zeros or incorrect format. # Example: Suppose you call: ```python ip_addresses = [\\"192.168.0.1\\", \\"192.168.0.01\\", \\"1200::AB00:1234::2552:7777:1313\\", \\"1200:0000:AB00:1234:0000:2552:7777:1313\\"] result = validate_and_classify_ip_addresses(ip_addresses) ``` The output should be: ```python { \\"IPv4\\": [\\"192.168.0.1\\"], \\"IPv6\\": [\\"1200:0000:AB00:1234:0000:2552:7777:1313\\"], \\"Invalid\\": [\\"192.168.0.01\\", \\"1200::AB00:1234::2552:7777:1313\\"] } ``` Your task is to implement the `validate_and_classify_ip_addresses` function to meet the above specifications.","solution":"import re def validate_and_classify_ip_addresses(ip_addresses): Validates and classifies a list of IP addresses into IPv4, IPv6, or Invalid categories. :param ip_addresses: List of string IP addresses :return: Dictionary with keys \\"IPv4\\", \\"IPv6\\", and \\"Invalid\\" def is_valid_ipv4(ip): ipv4_pattern = r\'^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}\' return re.match(ipv4_pattern, ip) is not None def is_valid_ipv6(ip): ipv6_pattern = r\'^([0-9a-fA-F]{1,4})(:([0-9a-fA-F]{1,4})){7}\' return re.match(ipv6_pattern, ip) is not None result = { \\"IPv4\\": [], \\"IPv6\\": [], \\"Invalid\\": [] } for ip in ip_addresses: if is_valid_ipv4(ip): result[\\"IPv4\\"].append(ip) elif is_valid_ipv6(ip): result[\\"IPv6\\"].append(ip) else: result[\\"Invalid\\"].append(ip) return result"},{"question":"You are required to write a function called `drawHistogram` that generates a histogram based on the given data and sets the title of the plot. The input parameters of the function are: - `data`: A list of numerical values for which the histogram is to be generated. - `title`: A string representing the title of the histogram. Your task is to use `matplotlib.pyplot` to create the histogram and set the title appropriately. Ensure you incorporate the following functions from `matplotlib.pyplot`: - `hist` to create the histogram. - `title` to set the title of the histogram. - `show` to display the plot. # Function Signature ```python def drawHistogram(data, title): pass ``` # Example ```python data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5] title = \\"Sample Histogram\\" drawHistogram(data, title) ``` This should display a histogram representing the distribution of values in the `data` list, with the title \\"Sample Histogram\\" displayed on top of the plot. # Requirements - Make sure to use `matplotlib.pyplot.hist` to create the histogram. - Make sure to use `matplotlib.pyplot.title` to set the title of the histogram. - Make sure to use `matplotlib.pyplot.show` to display the generated plot.","solution":"import matplotlib.pyplot as plt def drawHistogram(data, title): Generates a histogram based on the given data and sets the title of the plot. Parameters: data (list): A list of numerical values to generate the histogram. title (str): A string representing the title of the histogram. plt.hist(data) plt.title(title) plt.show()"},{"question":"Merging two sorted lists is a common problem that requires combining two sorted sequences into a single sorted sequence. This problem assumes the input lists are sorted in non-decreasing order and the output list should also be in non-decreasing order. In this problem, you are required to implement a function that takes two lists of integers, both sorted in non-decreasing order, and returns a single list that contains all the elements from both input lists, also sorted in non-decreasing order. **Function Signature:** ```python def merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: pass ``` **Input:** - `list1`: A list of integers sorted in non-decreasing order. - `list2`: Another list of integers sorted in non-decreasing order. **Output:** - A list of integers that contains all the elements from `list1` and `list2`, sorted in non-decreasing order. **Requirements:** - The solution should not use any built-in sorting functions. - The function should run in O(n + m) time complexity, where n and m are the lengths of `list1` and `list2` respectively. **Example:** ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] result = merge_sorted_lists(list1, list2) print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ``` ```python list1 = [0, 10, 20] list2 = [15, 25, 35] result = merge_sorted_lists(list1, list2) print(result) # Output: [0, 10, 15, 20, 25, 35] ``` By completing this task, you\'ll learn how to efficiently merge two sequences while maintaining their sorted order, a fundamental skill often used in algorithm design and analysis.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Parameters: list1 (List[int]): First sorted list list2 (List[int]): Second sorted list Returns: List[int]: Merged sorted list merged_list = [] i, j = 0, 0 n, m = len(list1), len(list2) while i < n and j < m: if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < n: merged_list.append(list1[i]) i += 1 while j < m: merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are to implement a function to simulate a simplified version of a \\"stock price prediction\\" model and visualize its performance over time. The function you need to implement is named `simulate_stock_prices`. # Function Signature ```python def simulate_stock_prices(starting_price, mean_return, volatility, days, trials, display_container): pass ``` # Parameters - `starting_price` (float): The initial stock price. - `mean_return` (float): The expected mean return of the stock per day (as a percentage). - `volatility` (float): The stock price volatility (as a percentage). - `days` (int): The number of days to simulate. - `trials` (int): The number of trials / alternate futures to simulate. - `display_container`: A container for displaying the plot, this should be an object with a `pyplot` method, similar to what is used in Jupyter notebooks (`display_container.pyplot(figure)`). # Requirements 1. For each trial, simulate the stock price over the specified number of days. Use the provided function `generate_stock_path(starting_price, mean_return, volatility, days)` to simulate stock price movements. 2. Plot the stock price for each trial on the same graph. 3. The x-axis should represent the number of days. 4. The y-axis should represent the stock price. 5. Add a title and legend to the plot. 6. Use `matplotlib` for the visualization. # Provided Code Snippet ```python import numpy as np import matplotlib.pyplot as plt def generate_stock_path(starting_price, mean_return, volatility, days): prices = [starting_price] for day in range(1, days + 1): price = prices[-1] * np.exp(np.random.normal(mean_return, volatility)) prices.append(price) return prices def simulate_stock_prices(starting_price, mean_return, volatility, days, trials, display_container): fig, ax = plt.subplots() for _ in range(trials): prices = generate_stock_path(starting_price, mean_return, volatility, days) ax.plot(prices) ax.set_title(\'Simulated Stock Prices Over Time\') ax.set_xlabel(\'Days\') ax.set_ylabel(\'Price\') ax.legend([f\'Trial {i+1}\' for i in range(trials)], loc=\'upper left\') display_container.pyplot(fig) ```","solution":"import numpy as np import matplotlib.pyplot as plt def generate_stock_path(starting_price, mean_return, volatility, days): prices = [starting_price] for day in range(1, days + 1): price = prices[-1] * np.exp(np.random.normal(mean_return / 100, volatility / 100)) prices.append(price) return prices def simulate_stock_prices(starting_price, mean_return, volatility, days, trials, display_container): fig, ax = plt.subplots() for _ in range(trials): prices = generate_stock_path(starting_price, mean_return, volatility, days) ax.plot(prices) ax.set_title(\'Simulated Stock Prices Over Time\') ax.set_xlabel(\'Days\') ax.set_ylabel(\'Price\') ax.legend([f\'Trial {i+1}\' for i in range(trials)], loc=\'upper left\') display_container.pyplot(fig)"},{"question":"You are tasked with completing a function that calculates the factorial of a given positive integer `n` using an iterative approach. The factorial of a non-negative integer `n` is defined as the product of all positive integers less than or equal to `n`. Write the function `iterative_factorial` that takes an integer `n` as input and returns its factorial. Here\'s the function signature: ```python def iterative_factorial(n): # Your code here ``` **Parameters:** - `n` (int): A non-negative integer for which you need to find the factorial. **Returns:** - The factorial of the input integer `n`. **Requirements:** - Implement the solution using an iterative loop (e.g., `for` loop or `while` loop). - Do not use recursion. - Assume `n` will always be a non-negative integer. Example call and expected result of the function: ```python print(iterative_factorial(5)) # Output should be 120 print(iterative_factorial(0)) # Output should be 1 ```","solution":"def iterative_factorial(n): Computes the factorial of a non-negative integer n using an iterative approach. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"You need to develop a function `moving_average` that calculates the moving average of a given sequence of numbers. The moving average is calculated by taking the average of the current element and the `window_size`-1 preceding elements. This function will leverage specific NumPy functionalities for its operations. Follow the detailed guidelines below to implement the function correctly: 1. **Function Name**: `moving_average` 2. **Parameters**: - `data`: A 1-D NumPy array containing the sequence of numbers. - `window_size`: An integer specifying the number of elements to consider for calculating the moving average. It must be greater than 0 and less than or equal to the length of `data`. 3. **Return**: - A 1-D NumPy array containing the moving averages of the input data. # Use the following required NumPy functions: - `numpy.cumsum`: Returns the cumulative sum of the elements along a given axis. - `numpy.concatenate`: Joins two or more arrays along an existing axis. # Step-by-Step Guide: 1. Validate the `window_size` and the input `data` to ensure they meet the required conditions. 2. Compute the cumulative sum of the input data using `numpy.cumsum`. 3. Calculate the moving averages using the cumulative sums appropriately. 4. Ensure the result array is computed such that it has the same length as the input `data`. # Example: Assume you are given a sequence of numbers and a window size, the function should return an array of moving averages. Input: ```python data = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) window_size = 3 ``` Output: ```python array([1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) ``` Implement the `moving_average` function as described.","solution":"import numpy as np def moving_average(data, window_size): Calculates the moving average of a given 1-D NumPy array with the specified window size. Parameters: data (numpy.ndarray): 1-D array of numbers. window_size (int): The number of elements to consider for moving average calculation. Returns: numpy.ndarray: 1-D array containing the moving averages. if not isinstance(data, np.ndarray) or data.ndim != 1: raise ValueError(\\"data should be a 1-D numpy array.\\") if not isinstance(window_size, int) or window_size <= 0 or window_size > len(data): raise ValueError(\\"window_size should be a positive integer and <= length of data.\\") cumsum = np.cumsum(data, dtype=float) cumsum = np.concatenate(([0], cumsum)) moving_averages = (cumsum[window_size:] - cumsum[:-window_size]) / window_size # Handle the initial elements where the window is partially out of data bounds head_cumsum = np.cumsum(data[:window_size-1]) initial_moving_averages = head_cumsum / np.arange(1, window_size) result = np.concatenate((initial_moving_averages, moving_averages)) return result"},{"question":"You are asked to create a function in Python that converts an integer to its equivalent representation in Roman numerals. Roman numerals are represented by combinations of the following symbols: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` # Function Specifications: - **Function Name:** `intToRoman` - **Parameter:** - `num` (int): An integer between 1 and 3999 inclusive. # Return: - The function should return a string that represents `num` in Roman numerals. # Algorithm: 1. Define a list of tuples that map integer values to their corresponding Roman numeral symbols. 2. Iterate over the list of tuples and construct the Roman numeral representation by repeatedly adding symbols when possible. 3. Append the resulting symbols to a string and return it. # Example Usage: ```python print(intToRoman(58)) # Output: \\"LVIII\\" print(intToRoman(1994)) # Output: \\"MCMXCIV\\" ``` # Additional Notes: - Ensure the algorithm efficiently handles all numbers within the specified range. - Consider edge cases like the smallest number (1) and the largest number (3999). # Example Solution: ```python def intToRoman(num): val = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] roman_numeral = \'\' for (i, roman) in val: while num >= i: roman_numeral += roman num -= i return roman_numeral # Test cases print(intToRoman(58)) # Output: \\"LVIII\\" print(intToRoman(1994)) # Output: \\"MCMXCIV\\" ```","solution":"def intToRoman(num): Converts an integer to its equivalent Roman numeral representation. :param num: Integer between 1 and 3999 inclusive. :return: String representing the Roman numeral. val = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] roman_numeral = \'\' for (i, roman) in val: while num >= i: roman_numeral += roman num -= i return roman_numeral"},{"question":"Create a function that checks if two strings are anagrams of each other. The function should be case-insensitive and ignore spaces and punctuation. Return `True` if they are anagrams and `False` otherwise. The function should output as follows: bool: `True` if the strings are anagrams, `False` otherwise. You should write self-contained code starting with: ``` import re def are_anagrams(str1, str2): ```","solution":"import re def are_anagrams(str1, str2): Check if two strings are anagrams of each other (case-insensitive, ignoring spaces and punctuation). Args: str1 (string): first string. str2 (string): second string. Returns: bool: True if the strings are anagrams, False otherwise. # Remove non-alphanumeric characters and convert to lowercase str1_clean = re.sub(r\'[^a-zA-Z0-9]\', \'\', str1).lower() str2_clean = re.sub(r\'[^a-zA-Z0-9]\', \'\', str2).lower() # Sort the characters and compare return sorted(str1_clean) == sorted(str2_clean)"},{"question":"One common task in data processing is to validate and extract information from text-based data. In this problem, you will write a function to validate and extract key pieces from email addresses. # Problem Description You need to implement a function named `extract_email_info` that takes a single string input and performs the following operations: - Validates if the input string is a valid email address. - If valid, extracts the username and domain from the email. The rules for a valid email address are: - It contains exactly one \'@\' symbol. - The part before \'@\' (username) contains only alphanumeric characters and underscores (_). - The part after \'@\' (domain) contains only alphanumeric characters and exactly one period (.) separating the domain and the TLD (Top-Level Domain). The `extract_email_info` function should: - Return a dictionary with the following keys: - **\'username\'**: The username part of the email if valid, otherwise `None`. - **\'domain\'**: The domain part of the email if valid, otherwise `None`. - **\'is_valid\'**: A boolean indicating whether the email is valid or not. # Example ```python email = \\"user_name@example.com\\" result = extract_email_info(email) print(result) # Expected output: # { # \'username\': \'user_name\', # \'domain\': \'example.com\', # \'is_valid\': True # } ``` # Additional Example ```python email = \\"invalid-email@com\\" result = extract_email_info(email) print(result) # Expected output: # { # \'username\': None, # \'domain\': None, # \'is_valid\': False # } ``` # Your Task Implement the `extract_email_info` function based on the description. Use regular expressions to help validate and extract parts of the email address.","solution":"import re def extract_email_info(email): Validates if the input string is a valid email address and extracts the username and domain. Parameters: email (str): The email address to validate and extract information from. Returns: dict: A dictionary with keys \'username\', \'domain\', and \'is_valid\'. email_pattern = re.compile( r\\"^(?P<username>[A-Za-z0-9_]+)@(?P<domain>[A-Za-z0-9]+.[A-Za-z0-9]+)\\" ) match = email_pattern.match(email) if match: return { \'username\': match.group(\'username\'), \'domain\': match.group(\'domain\'), \'is_valid\': True } return { \'username\': None, \'domain\': None, \'is_valid\': False }"},{"question":"Implement a function named `find_kth_largest(arr, k)` that takes as input a list of integers `arr` and an integer `k`. The function should return the k-th largest element in the list. Note that the k-th largest element is the element that ranks k-th in order, starting from the largest. To solve this problem, you can use any algorithm or data structure, such as sorting the array or using a heap. However, ensure that your implementation is efficient and scales well with larger input sizes. **Function Signature:** ```python def find_kth_largest(arr: list[int], k: int) -> int: ... ``` **Constraints:** 1. Assume `1 ≤ k ≤ len(arr)`. 2. The integers in `arr` can be positive, negative, or zero. 3. You do not need to handle input validation. **Example:** ```python print(find_kth_largest([3, 2, 1, 5, 6, 4], 2)) # 5 print(find_kth_largest([1, 1, 1, 1, 1, 1], 1)) # 1 print(find_kth_largest([9, 3, 2, 4, 8], 3)) # 4 ``` Your task is to implement the function `find_kth_largest` that efficiently finds the k-th largest element from the list `arr`.","solution":"import heapq def find_kth_largest(arr, k): Returns the k-th largest element in the list arr. Parameters: arr (list of int): List of integers k (int): The rank of the element to find Returns: int: The k-th largest element return heapq.nlargest(k, arr)[-1]"},{"question":"In the context of file system simulation, tree structures are often used to represent directories and files, with directories being nodes that can have children and files being leaf nodes. Your task is to implement a function `calculate_storage` which takes a directory tree as input and returns the total storage consumed by all the files in the tree. Each file or directory is represented as a dictionary where directories have a type \\"dir\\" and contain a list of children, while files have a type \\"file\\" and a size attribute indicating their storage size in bytes. The function should recursively traverse the tree, sum up the sizes of all files, and return the total storage. Function signature: ```python def calculate_storage(directories: dict) -> int: ... ``` **Input:** - The input is a dictionary representing the root directory of the file system tree. - A directory is represented by a dictionary with two keys: - `\\"type\\"` (with value `\\"dir\\"`) - `\\"children\\"` (a list of directories/files it contains) - A file is represented by a dictionary with two keys: - `\\"type\\"` (with value `\\"file\\"`) - `\\"size\\"` (an integer value representing the size of the file in bytes) **Output:** - Return the total storage size consumed by all files in the tree as an integer. **Example Usage:** ```python directories = { \\"type\\": \\"dir\\", \\"children\\": [ { \\"type\\": \\"file\\", \\"size\\": 1200 }, { \\"type\\": \\"dir\\", \\"children\\": [ { \\"type\\": \\"file\\", \\"size\\": 300 }, { \\"type\\": \\"dir\\", \\"children\\": [ { \\"type\\": \\"file\\", \\"size\\": 150 } ] } ] } ] } print(calculate_storage(directories)) # Output: 1650 ```","solution":"def calculate_storage(directories: dict) -> int: Calculate the total storage consumed by all files in the directory tree. Arguments: directories -- A dictionary representing the root directory of the file system tree. Returns: An integer representing the total storage size consumed by all files in the tree. if directories[\\"type\\"] == \\"file\\": return directories[\\"size\\"] elif directories[\\"type\\"] == \\"dir\\": total_size = 0 for child in directories[\\"children\\"]: total_size += calculate_storage(child) return total_size"},{"question":"You are tasked with implementing a function named `SnackDispenser` which simulates a finite state machine (FSM) representing a snack vending machine. The FSM should model the states and transitions based on the coins inserted by the user and determine the snack vending decision. The machine only accepts nickels (5 cents), dimes (10 cents), and quarters (25 cents). The possible states of the FSM are the various total amounts of money inserted, ranging from 0.00 to 1.00 in increments of 5 cents. The machine dispenses a snack when exactly 1.00 has been inserted. If more than 1.00 is inserted, the machine should return the excess amount of money to the user and dispense the snack. **Here is the description of the implementation**: - Create a class `SnackDispenser` with an `__init__` method to initialize the current state (total money inserted). - Implement a method `insert_coin(self, coin: str) -> str` that takes a string representing the coin inserted (`\\"nickel\\"`, `\\"dime\\"`, or `\\"quarter\\"`) and updates the state accordingly. If the coin is not valid, it should return `\\"Invalid coin\\"`. - If the total money inserted reaches exactly 1.00, the method should return `\\"Snack dispensed\\"`. - If the total exceeds 1.00, calculate the excess amount, reset the state to the initial state (0.00), and return the string `\\"Snack dispensed with change {excess}\\"` where `{excess}` is the excess amount formatted to two decimal places. - Implement a method `reset(self)` to reset the state to the initial state (0.00). **Function Signature**: ```python class SnackDispenser: def __init__(self): self.total = 0.0 def insert_coin(self, coin: str) -> str: pass def reset(self): pass ``` **Constraints**: 1. The coin values are `\\"nickel\\"` (0.05), `\\"dime\\"` (0.10), and `\\"quarter\\"` (0.25). 2. The method should handle floating-point arithmetic to two decimal places accurately. 3. The valid states range from 0.00 to 1.00 in increments of 0.05. **Example Usage**: ```python vending_machine = SnackDispenser() print(vending_machine.insert_coin(\\"nickel\\")) # \\"Current total: 0.05\\" print(vending_machine.insert_coin(\\"quarter\\")) # \\"Current total: 0.30\\" print(vending_machine.insert_coin(\\"quarter\\")) # \\"Current total: 0.55\\" print(vending_machine.insert_coin(\\"dime\\")) # \\"Current total: 0.65\\" print(vending_machine.insert_coin(\\"quarter\\")) # \\"Current total: 0.90\\" print(vending_machine.insert_coin(\\"quarter\\")) # \\"Snack dispensed with change 0.15\\" print(vending_machine.insert_coin(\\"dime\\")) # \\"Current total: 0.10\\" vending_machine.reset() print(vending_machine.insert_coin(\\"nickel\\")) # \\"Current total: 0.05\\" ```","solution":"class SnackDispenser: def __init__(self): self.total = 0.0 def insert_coin(self, coin: str): coin_values = { \\"nickel\\": 0.05, \\"dime\\": 0.10, \\"quarter\\": 0.25 } if coin not in coin_values: return \\"Invalid coin\\" self.total += coin_values[coin] if self.total == 1.00: self.total = 0.0 return \\"Snack dispensed\\" elif self.total > 1.00: excess = self.total - 1.00 self.total = 0.0 return f\\"Snack dispensed with change {excess:.2f}\\" else: return f\\"Current total: {self.total:.2f}\\" def reset(self): self.total = 0.0"},{"question":"Your task is to write a Python function named `filterOddEven` that processes a list of integers and returns a tuple containing two lists: one with odd numbers and one with even numbers. Specifically, you need to: 1. Separate the numbers into odd and even based on their values. 2. Maintain the original order of appearance for both odd and even numbers. 3. Return a tuple where the first element is the list of odd numbers and the second element is the list of even numbers. Function Signature ```python def filterOddEven(numbers: List[int]) -> Tuple[List[int], List[int]]: ``` Constraints - The input `numbers` is a list of integers that can contain both positive and negative values. Example Input: ```python numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` Output: ```python ([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) ``` ```python numbers = [-15, -22, 13, 4, 0, 5, 21, -8, -19, 10] ``` Output: ```python ([-15, 13, 5, 21, -19], [-22, 4, 0, -8, 10]) ``` Steps 1. Initialize two empty lists to hold odd and even numbers. 2. Iterate through the input list `numbers`. 3. For each number, check if it is odd or even, and append it to the respective list. 4. Return a tuple containing the two lists.","solution":"from typing import List, Tuple def filterOddEven(numbers: List[int]) -> Tuple[List[int], List[int]]: Separates the input list into odd and even numbers while maintaining their order and returns a tuple with odd numbers list first and even numbers list second. odds = [] evens = [] for num in numbers: if num % 2 == 0: evens.append(num) else: odds.append(num) return (odds, evens)"},{"question":"We are going to implement a function `matrix_chain_order` to determine the optimal order of matrix multiplications. Given a sequence of matrices, the function should compute the most efficient way to multiply these matrices together. The function should return the minimum number of scalar multiplications required. **Function Signature:** ```python def matrix_chain_order(p): ... | Your code goes here ``` **Inputs:** 1. `p`: A list of integers representing the chain of matrices such that the dimensions of the `i-th` matrix are `p[i-1] x p[i]`. **Outputs:** 1. `m`: The minimum number of scalar multiplications needed to multiply the chain of matrices. **Constraints:** - The length of `p` should be at least 2 and no more than 100. - Each element in `p` should be a positive integer (1 <= `p[i]` <= 10^4). - You must use dynamic programming to solve this problem. **Example:** ```python p = [1, 2, 3, 4] print(matrix_chain_order(p)) # Expected output: 18 ``` **Explanation:** Given matrices of dimensions: - `A` (1x2) - `B` (2x3) - `C` (3x4) The optimal order of multiplications is `((A * B) * C)` which requires 18 scalar multiplications.","solution":"def matrix_chain_order(p): Returns the minimum number of scalar multiplications needed to multiply the chain of matrices. Parameters: p (list): A list of integers representing the chain of matrices such that the dimensions of the i-th matrix are p[i-1] x p[i]. Returns: int: The minimum number of scalar multiplications needed. n = len(p) - 1 # number of matrices m = [[0 for _ in range(n)] for _ in range(n)] for l in range(2, n + 1): # l is the chain length for i in range(n - l + 1): j = i + l - 1 m[i][j] = float(\'inf\') for k in range(i, j): q = m[i][k] + m[k+1][j] + p[i]*p[k+1]*p[j+1] if q < m[i][j]: m[i][j] = q return m[0][n-1]"},{"question":"In this problem, your task is to implement a simple simulation of a priority queue using Python\'s built-in `heapq` module. A priority queue is a special type of queue in which each element is associated with a priority, and elements are served based on their priority. You are required to create a class `PriorityQueue` that supports the following operations: 1. `push(item, priority)`: Insert an item into the priority queue with the specified priority. Lower priority numbers are served before higher priority numbers. 2. `pop()`: Remove and return the item with the lowest priority. If the priority queue is empty, return `None`. 3. `peek()`: Return the item with the lowest priority without removing it from the queue. If the priority queue is empty, return `None`. 4. `is_empty()`: Return `True` if the priority queue is empty, otherwise `False`. Your implementation should internally use a min-heap to store the elements. Here\'s the class definition to get you started: ```python import heapq class PriorityQueue: def __init__(self): self.heap = [] def push(self, item, priority): # Code to insert (priority, item) into self.heap pass def pop(self): # Code to pop the item with the lowest priority pass def peek(self): # Code to return the item with the lowest priority without removing it pass def is_empty(self): # Code to check if the heap is empty pass ``` **Example Usage:** ```python pq = PriorityQueue() pq.push(\'task1\', 3) pq.push(\'task2\', 1) pq.push(\'task3\', 2) print(pq.peek()) # Output: \'task2\' print(pq.pop()) # Output: \'task2\' print(pq.pop()) # Output: \'task3\' print(pq.is_empty()) # Output: False print(pq.pop()) # Output: \'task1\' print(pq.is_empty()) # Output: True ``` Implement the `PriorityQueue` class with the specified methods.","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] def push(self, item, priority): heapq.heappush(self.heap, (priority, item)) def pop(self): if self.is_empty(): return None return heapq.heappop(self.heap)[1] def peek(self): if self.is_empty(): return None return self.heap[0][1] def is_empty(self): return len(self.heap) == 0"},{"question":"Write a Python function named `normalize_matrix` that takes a 2D NumPy array `matrix` as an input. The function should normalize the matrix such that the minimum value in the matrix becomes 0 and the maximum value becomes 1. Normalization should be linear, according to the following formula: [ text{normalized_value}(i, j) = frac{matrix(i, j) - min(matrix)}{max(matrix) - min(matrix)} ] The function should return the normalized matrix. **Function Signature:** ```python def normalize_matrix(matrix: np.ndarray) -> np.ndarray: ``` # Example ```python import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) result = normalize_matrix(matrix) print(result) # Expected Output: # array([[0. , 0.125, 0.25 ], # [0.375, 0.5 , 0.625], # [0.75 , 0.875, 1. ]]) ``` # Constraints 1. The input matrix must be a 2D NumPy array. 2. The matrix should contain at least one element. # Guidelines Ensure that your implementation efficiently handles the normalization using NumPy functionalities.","solution":"import numpy as np def normalize_matrix(matrix: np.ndarray) -> np.ndarray: Normalize the matrix such that the minimum value becomes 0 and the maximum value becomes 1, with a linear transformation. Args: - matrix (np.ndarray): A 2D numpy array to be normalized. Returns: - np.ndarray: The normalized 2D array. min_val = np.min(matrix) max_val = np.max(matrix) # Avoid division by zero in case all values in the matrix are the same if min_val == max_val: return np.zeros_like(matrix) normalized_matrix = (matrix - min_val) / (max_val - min_val) return normalized_matrix"},{"question":"You are tasked with writing a function named `merge_dicts` in Python. The purpose of this function is to merge two dictionaries. If there are any common keys between the two dictionaries, the values should be combined into a list containing all values for that key, from both dictionaries. If a key is only present in one dictionary, its value should be unchanged in the merged result. **Function Signature:** ```python def merge_dicts(dict1: dict, dict2: dict) -> dict: ``` **Parameters:** - `dict1` (dict): The first dictionary. The keys are strings, and the values can be of any type. - `dict2` (dict): The second dictionary. The keys are strings, and the values can be of any type. **Returns:** - `dict`: A new dictionary with all keys from both input dictionaries. If a key exists in both dictionaries, the value should be a list containing all values for that key, otherwise, the value remains standalone. **Example:** ```python dict1 = {\'a\': 1, \'b\': 2} dict2 = {\'b\': 3, \'c\': 4} merge_dicts(dict1, dict2) ``` Output: ```python {\'a\': 1, \'b\': [2, 3], \'c\': 4} ``` **Constraints:** - Do not assume input dictionaries are always of the same size. - The function should handle cases where values are of different types seamlessly. **Requirements:** - Use built-in Python dictionary methods and ensure the function is efficient. - Ensure that the function handles edge cases, such as empty dictionaries or dictionary values of different types.","solution":"def merge_dicts(dict1: dict, dict2: dict) -> dict: Merges two dictionaries. If there are any common keys between the two dictionaries, the values are combined into a list. If a key is only present in one dictionary, its value remains unchanged in the merged result. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary with all keys from both input dictionaries. If a key exists in both dictionaries, the value is a list containing all values for that key. merged_dict = {} # Gather keys from both dictionaries all_keys = set(dict1.keys()).union(set(dict2.keys())) # Iterate over all unique keys for key in all_keys: if key in dict1 and key in dict2: # If key is in both dictionaries, combine values into a list merged_dict[key] = [dict1[key], dict2[key]] elif key in dict1: # If key is only in dict1 merged_dict[key] = dict1[key] else: # If key is only in dict2 merged_dict[key] = dict2[key] return merged_dict"},{"question":"Problem: Bookstore Inventory Management You are tasked with writing a function `update_inventory` for a bookstore\'s inventory management system. The function\'s purpose is to update the inventory levels of books based on a series of transactions, including purchases and sales. Each transaction will either add to or subtract from the stock of books. The function takes two parameters: - `current_inventory`: a dictionary where the keys are book titles (strings) and the values are their respective quantities in stock (integers). - `transactions`: a list of tuples, where each tuple contains a book title (string) and a change in stock (integer). A positive integer indicates books being added to the inventory (purchases), and a negative integer indicates books being subtracted (sales). The function should update the `current_inventory` dictionary in place following these rules: 1. If a book title from the transaction does not exist in `current_inventory`, assume its initial stock is 0 before applying the change. 2. After applying all transactions, any book with a non-positive stock (i.e., less than or equal to 0) should be removed from the `current_inventory`. Your function should not return anything; instead, it should modify the `current_inventory` dictionary directly. # Example: ```python current_inventory = { \\"The Great Gatsby\\": 5, \\"1984\\": 8, \\"To Kill a Mockingbird\\": 10 } transactions = [ (\\"The Great Gatsby\\", -3), (\\"1984\\", 2), (\\"The Catcher in the Rye\\", 4), (\\"To Kill a Mockingbird\\", -11), (\\"The Hobbit\\", 6) ] update_inventory(current_inventory, transactions) print(current_inventory) # Expected output: # { # \\"The Great Gatsby\\": 2, # \\"1984\\": 10, # \\"The Catcher in the Rye\\": 4, # \\"The Hobbit\\": 6 # } ``` Your goal is to implement `update_inventory`.","solution":"def update_inventory(current_inventory, transactions): Updates the current inventory of books based on the list of transactions. Parameters: - current_inventory: Dictionary with book titles as keys and quantities as values. - transactions: List of tuples with book title and change in stock. The function updates the current_inventory dictionary in place. for title, change in transactions: if title in current_inventory: current_inventory[title] += change else: current_inventory[title] = change # If the updated quantity is less than or equal to 0, remove the book from inventory if current_inventory[title] <= 0: del current_inventory[title]"},{"question":"You are tasked with implementing a function that computes the longest uninterrupted sequence of a specific character in a given string. The function should return both the length of this sequence and the starting index of this sequence within the string. If there are multiple sequences of the same maximum length, return the starting index of the first one. **Constraints:** - You are not allowed to use any explicit loops (`for`, `while`). - The implementation should efficiently handle strings of significant length. **Function Signature:** ```python def longest_char_sequence(s: str, char: str) -> (int, int): ``` **Inputs:** - `s` (str): The input string. - `char` (str): The character of interest for which the longest sequence is to be found. It is guaranteed that this will be a single character. **Outputs:** - A tuple `(int, int)` representing the length of the longest sequence and the starting index of this sequence. **Example:** ```python longest_char_sequence(\\"aabbbccccdde\\", \\"c\\") # Expected output: # (4, 5) ``` **Hint:** Consider using higher-order functions from the `itertools` module to simplify sequence processing.","solution":"import itertools def longest_char_sequence(s: str, char: str) -> (int, int): Computes the longest uninterrupted sequence of a specific character in a given string. :param s: The input string. :param char: The character of interest. :return: A tuple with the length of the longest sequence and the starting index. # Use itertools.groupby to find sequences of the same character groups = [(k, list(g)) for k, g in itertools.groupby(enumerate(s), key=lambda x: x[1])] # Find the longest sequence of the specified character max_length = 0 max_index = -1 for k, g in groups: if k == char: length = len(g) if length > max_length: max_length = length max_index = g[0][0] return (max_length, max_index)"},{"question":"**Context:** You are given a problem where you need to implement a function that calculates the total number of unique words in a list of sentences. The function should be case-insensitive, meaning \\"Apple\\" and \\"apple\\" should be considered the same word. Additionally, you should ignore punctuation marks (e.g.,!?,.;). The goal of this problem is to practice string manipulation and comprehension in Python. **Function Name:** `count_unique_words` **Arguments:** 1. `sentences`: A list of strings, where each string represents a sentence. The sentences may contain words separated by spaces and might include punctuation marks. **Output:** - An integer representing the total number of unique words across all sentences. **Requirements:** - Ignore case: Treat \\"Word\\" and \\"word\\" as the same. - Ignore punctuation marks: Remove punctuation before counting words. **Examples:** 1. `count_unique_words([\\"Hello, world!\\", \\"Hello world.\\"])` - **Explanation:** The sentences contain the words \\"hello\\" and \\"world\\" (ignoring case and punctuation). There are 2 unique words. - **Output:** `2` 2. `count_unique_words([\\"Apples are tasty!\\", \\"apples; are TASTY.\\"])` - **Explanation:** The sentences contain the words \\"apples\\", \\"are\\", and \\"tasty\\" (ignoring case and punctuation). There are 3 unique words. - **Output:** `3` 3. `count_unique_words([\\"Coding is fun.\\", \\"Coding!\\"])` - **Explanation:** The sentences contain the words \\"coding\\", \\"is\\", and \\"fun\\" (ignoring case and punctuation). There are 3 unique words. - **Output:** `3` 4. `count_unique_words([\\"This is a Test.\\", \\"This IS a test\\"])` - **Explanation:** The sentences contain the words \\"this\\", \\"is\\", \\"a\\", and \\"test\\" (ignoring case and punctuation). There are 4 unique words. - **Output:** `4`","solution":"import string def count_unique_words(sentences): Returns the number of unique words in a list of sentences, case-insensitive and ignoring punctuation. words_set = set() for sentence in sentences: translation_table = str.maketrans(\'\', \'\', string.punctuation) clean_sentence = sentence.translate(translation_table).lower() words = clean_sentence.split() words_set.update(words) return len(words_set)"},{"question":"In an inventory management system for a small store, you need to track items and their availability. Each item is represented by a dictionary containing `name`, `price`, and `quantity`, and the inventory is a list of such item dictionaries. Write a function named `update_inventory()` that accepts the inventory list and a list of transactions. Each transaction is a dictionary with the following keys: `item_name` representing the name of the item, and `quantity_change` indicating how the quantity of the item should be adjusted (positive for restocking, negative for sales). Your task is to update the inventory quantities based on the transactions and ensure the `quantity` of any item does not go below zero. Here are the detailed requirements: 1. The function `update_inventory()` should modify the inventory in place and return `None`. 2. Each transaction should be applied sequentially in the order provided. 3. If a transaction would result in an item having a negative quantity, set the quantity to zero instead. 4. If a transaction refers to an item that does not exist in the inventory, ignore that transaction. **Example Usage:** ```python inventory = [ {\'name\': \'apple\', \'price\': 0.5, \'quantity\': 30}, {\'name\': \'banana\', \'price\': 0.2, \'quantity\': 50}, {\'name\': \'orange\', \'price\': 0.8, \'quantity\': 20} ] transactions = [ {\'item_name\': \'apple\', \'quantity_change\': -10}, {\'item_name\': \'banana\', \'quantity_change\': 15}, {\'item_name\': \'orange\', \'quantity_change\': -25}, # This will reduce quantity of \'orange\' to 0 {\'item_name\': \'pineapple\', \'quantity_change\': 5} # This transaction is ignored ] update_inventory(inventory, transactions) print(inventory) # Expected output: # [ # {\'name\': \'apple\', \'price\': 0.5, \'quantity\': 20}, # {\'name\': \'banana\', \'price\': 0.2, \'quantity\': 65}, # {\'name\': \'orange\', \'price\': 0.8, \'quantity\': 0} # ] ``` **Notes:** - The inventory list should be modified directly by the function; no need to return a new list. - Ensure to handle edge cases where the `quantity_change` might be larger than the available quantity.","solution":"def update_inventory(inventory, transactions): Updates the inventory list of items based on the given transactions. Parameters: inventory (list): List of item dictionaries with \'name\', \'price\', and \'quantity\' keys. transactions (list): List of transaction dictionaries with \'item_name\' and \'quantity_change\' keys. item_dict = {item[\'name\']: item for item in inventory} for transaction in transactions: item_name = transaction.get(\'item_name\') quantity_change = transaction.get(\'quantity_change\') if item_name in item_dict: item = item_dict[item_name] new_quantity = item[\'quantity\'] + quantity_change item[\'quantity\'] = max(new_quantity, 0)"},{"question":"In this programming task, you will create a function to analyze temperature variations over a given period. Create a function called `temperature_analysis(df, start_date, end_date, threshold)` that takes the following parameters: - `df` (DataFrame): A DataFrame containing temperature data with columns `[\'date\', \'temperature\']`. The `date` column consists of timestamps, and the `temperature` column consists of daily average temperatures. - `start_date` (str): The start date in the format \'YYYY-MM-DD\'. - `end_date` (str): The end date in the format \'YYYY-MM-DD\'. - `threshold` (float): A temperature threshold value. The function should perform the following tasks: 1. Filter the DataFrame to include only the rows where the `date` is between `start_date` and `end_date`. 2. Calculate the average temperature over this period. 3. Identify sub-periods where the temperature is consistently above the `threshold`, considering a \\"consistent period\\" as consecutive days where each day’s temperature is greater than or equal to the threshold. 4. Create and populate a DataFrame with the following columns: `[\'start_date\', \'end_date\', \'avg_temp\', \'days_above_threshold\']`. - `start_date`: The starting date of each consistent sub-period. - `end_date`: The ending date of each consistent sub-period. - `avg_temp`: The average temperature over each consistent sub-period. - `days_above_threshold`: The number of days in each consistent sub-period where the temperature was above the threshold. Return the final DataFrame. **Note:** Use the `pandas` library for handling date-time and DataFrame operations. ```python import pandas as pd def temperature_analysis(df, start_date, end_date, threshold): # Ensure the date column is in datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Filter the DataFrame for the date range date_filter = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) df_filtered = df[date_filter] # Calculate the average temperature over the date range overall_avg_temp = df_filtered[\'temperature\'].mean() # Initialize variables to store consistent temperature periods results = [] start_temp_period = None current_temp_period = [] for i, row in df_filtered.iterrows(): if row[\'temperature\'] >= threshold: if start_temp_period is None: start_temp_period = row[\'date\'] current_temp_period.append(row[\'temperature\']) else: if current_temp_period: end_temp_period = row[\'date\'] - pd.Timedelta(days=1) avg_temp = sum(current_temp_period) / len(current_temp_period) results.append({ \'start_date\': start_temp_period, \'end_date\': end_temp_period, \'avg_temp\': avg_temp, \'days_above_threshold\': len(current_temp_period) }) start_temp_period = None current_temp_period = [] # Check if the final period is still open if current_temp_period: end_temp_period = df_filtered.iloc[-1][\'date\'] avg_temp = sum(current_temp_period) / len(current_temp_period) results.append({ \'start_date\': start_temp_period, \'end_date\': end_temp_period, \'avg_temp\': avg_temp, \'days_above_threshold\': len(current_temp_period) }) # Create the resulting DataFrame df_result = pd.DataFrame(results, columns=[\'start_date\', \'end_date\', \'avg_temp\', \'days_above_threshold\']) return df_result ```","solution":"import pandas as pd def temperature_analysis(df, start_date, end_date, threshold): # Ensure the date column is in datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Filter the DataFrame for the date range date_filter = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) df_filtered = df[date_filter] # Initialize variables to store consistent temperature periods results = [] start_temp_period = None current_temp_period = [] for i, row in df_filtered.iterrows(): if row[\'temperature\'] >= threshold: if start_temp_period is None: start_temp_period = row[\'date\'] current_temp_period.append(row[\'temperature\']) else: if current_temp_period: end_temp_period = df_filtered.iloc[i-1][\'date\'] avg_temp = sum(current_temp_period) / len(current_temp_period) results.append({ \'start_date\': start_temp_period, \'end_date\': end_temp_period, \'avg_temp\': avg_temp, \'days_above_threshold\': len(current_temp_period) }) start_temp_period = None current_temp_period = [] # Check if the final period is still open if current_temp_period: end_temp_period = df_filtered.iloc[-1][\'date\'] avg_temp = sum(current_temp_period) / len(current_temp_period) results.append({ \'start_date\': start_temp_period, \'end_date\': end_temp_period, \'avg_temp\': avg_temp, \'days_above_threshold\': len(current_temp_period) }) # Create the resulting DataFrame df_result = pd.DataFrame(results, columns=[\'start_date\', \'end_date\', \'avg_temp\', \'days_above_threshold\']) return df_result"},{"question":"Implement a function to create a histogram of frequencies of the words from an input text. The function should read the content from a given file path, preprocess the text by removing punctuation and converting it to lower case, and then count the occurrences of each word. Use the `collections` module to generate the frequency distribution. Finally, plot the histogram using the `matplotlib` library. The function should output nothing and the bar chart should display the histogram. You should write self-contained code starting with: ``` import string import collections import matplotlib.pyplot as plt def plot_word_frequency(file_path): ```","solution":"import string import collections import matplotlib.pyplot as plt def plot_word_frequency(file_path): Reads a text file, preprocesses the text by removing punctuation and converting to lower case, counts word frequencies, and plots a histogram. with open(file_path, \'r\') as file: text = file.read() # Remove punctuation and convert to lower case text = text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() # Split the text into words words = text.split() # Count the frequency of each word word_count = collections.Counter(words) # Plot the histogram plt.figure(figsize=(10, 5)) plt.bar(word_count.keys(), word_count.values(), color=\'skyblue\') plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(\'Word Frequency Histogram\') plt.xticks(rotation=90) plt.tight_layout() plt.show()"},{"question":"This function generates Fibonacci sequence up to a given number `n`. The sequence starts with 0, 1 and each subsequent number is the sum of the previous two numbers. The function should handle edge cases where `n` is less than or equal to 0 by returning an empty list. This sequence generation can be useful in various algorithmic contexts such as dynamic programming and recursions. The function should output: list: A list of Fibonacci numbers up to `n`. You should write self-contained code starting with: ``` def generate_fibonacci(n: int) -> list: ```","solution":"def generate_fibonacci(n: int) -> list: Generates Fibonacci sequence up to a given number `n`. Parameters: n (int): The number of Fibonacci numbers to generate Returns: list: A list of Fibonacci numbers up to `n` if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"You are required to write a Python function named `calculate_top_students` that processes a list of student records and determines the top student(s) based on their average scores. Each student record is a dictionary containing the student\'s name and a list of their scores in various subjects. The function should: 1. Accept a list of student records, where each record includes a `name` field (a string) and a `scores` field (a list of integers). 2. Calculate the average score for each student. 3. Identify the highest average score. 4. Return a list of names of the student(s) with the highest average score. If multiple students have the highest average, they should all be included in this list. If the list of student records is empty, the function should return an empty list. Here is the function signature: ```python def calculate_top_students(students): # Implement the required functionality here. pass ``` You can assume the input will be well-formed and every student will have at least one score. # Example ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [90, 92, 85]}, {\\"name\\": \\"Bob\\", \\"scores\\": [85, 88, 91]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [88, 92, 90]} ] result = calculate_top_students(students) print(result) # Expected output: [\\"Charlie\\"] ``` In this example, Charlie has the highest average score of 90 (calculated as (88+92+90)/3), so the function returns `[\\"Charlie\\"]`.","solution":"def calculate_top_students(students): Determines the top student(s) based on their average scores. Parameters: students (list): A list of dictionary records, each containing a \'name\' (string) and \'scores\' (list of integers). Returns: list: A list of names of the student(s) with the highest average score. if not students: return [] max_avg = float(\'-inf\') top_students = [] for student in students: avg_score = sum(student[\'scores\']) / len(student[\'scores\']) if avg_score > max_avg: max_avg = avg_score top_students = [student[\'name\']] elif avg_score == max_avg: top_students.append(student[\'name\']) return top_students"},{"question":"You are tasked with implementing the function `moving_average` which calculates the moving average of a 1-D array of numbers given a specific window size. The function should utilize the `numpy` library. **Function Signature:** ```python def moving_average(arr, window_size): pass ``` **Inputs:** 1. `arr` (1-D array): A numpy array of numbers. 2. `window_size` (int): An integer representing the size of the window over which to compute the moving average. **Outputs:** - A 1-D numpy array representing the moving average of the original array. The length of the resulting array should be `len(arr) - window_size + 1`. **Objective:** 1. Validate the input window size to ensure it is a positive integer and less than or equal to the length of the array. 2. Use numpy\'s convolution function to compute the moving average efficiently. 3. Ensure that the function handles edge cases such as an empty array or invalid window size gracefully. **Constraints:** - Do not use any external libraries besides numpy. - Ensure that the function runs efficiently, making best use of numpy\'s vectorized operations. Here is an example to help clarify the expected output: **Example:** ```python import numpy as np arr = np.array([1, 2, 3, 4, 5, 6, 7]) window_size = 3 avg = moving_average(arr, window_size) print(avg) # Output should be a numpy array: [2. 3. 4. 5. 6.] ```","solution":"import numpy as np def moving_average(arr, window_size): Computes the moving average of a 1-D numpy array given a specific window size. Parameters: arr (1-D array): A numpy array of numbers. window_size (int): An integer representing the size of the window over which to compute the moving average. Returns: 1-D numpy array: The moving average of the original array. The length of the resulting array is len(arr) - window_size + 1. if not isinstance(window_size, int) or window_size <= 0: raise ValueError(\\"The window size must be a positive integer.\\") if window_size > len(arr): raise ValueError(\\"The window size must be less than or equal to the length of the array.\\") cumsum = np.cumsum(arr) cumsum = np.insert(cumsum, 0, 0) moving_avg = (cumsum[window_size:] - cumsum[:-window_size]) / window_size return moving_avg"},{"question":"You are tasked with implementing a function that finds the shortest path in a maze represented by a 2D grid. The goal of this function is to use the Breadth-First Search (BFS) algorithm to determine the minimum number of steps required to get from a start position to an end position. The maze grid contains only \'0\'s and \'1\'s, where \'0\' represents a walkable path and \'1\' represents an obstacle. Here is a breakdown of the problem: 1. You will be given a 2D grid `maze` with \'0\'s and \'1\'s. 2. You will also be given the start position `(sr, sc)` and the end position `(er, ec)`. 3. Implement the BFS algorithm to find the shortest path from the start to the end. 4. Return the minimum number of steps required to reach the end, or -1 if no path exists. **Function Signature:** ```python def shortestPath(maze: List[List[int]], sr: int, sc: int, er: int, ec: int) -> int: pass ``` - **Input:** - `maze` (List[List[int]]): 2D grid representing the maze. - `sr` (int): Start row index. - `sc` (int): Start column index. - `er` (int): End row index. - `ec` (int): End column index. - **Output:** - (int): Minimum number of steps to reach the end position or -1 if no path exists. **Constraints:** - The grid size is at most `100x100`. - Both the start and end positions will be \'0\' and valid within the grid. **Example:** Given the following maze grid and positions: ```python maze = [ [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] sr, sc = 0, 0 er, ec = 4, 4 ``` The function should return `8`, as the shortest path from the start (0,0) to the end (4,4) is 8 steps long. Ensure you correctly implement BFS to explore the shortest path and handle any edge cases where no path is available.","solution":"from typing import List, Tuple from collections import deque def shortestPath(maze: List[List[int]], sr: int, sc: int, er: int, ec: int) -> int: def is_valid(x: int, y: int) -> bool: return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sr, sc, 0)]) # (row, column, distance) visited = set((sr, sc)) while queue: x, y, dist = queue.popleft() if x == er and y == ec: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are assigned to create a program that simulates a simple banking system. The program will allow users to perform three basic operations: deposit money, withdraw money, and check their balance. You should implement a class `BankAccount` with the following specifications: 1. The class should have an `__init__` method that initializes the account with a specified initial balance. 2. Implement a method `deposit(amount)` which takes the amount to be deposited as an argument and increases the balance by that amount. Ensure that the deposited amount is positive. 3. Implement a method `withdraw(amount)` which takes the amount to be withdrawn as an argument and decreases the balance by that amount. Ensure that the withdrawal amount is positive and does not exceed the current balance. If the requested withdrawal amount is more than the current balance, do not change the balance and print an appropriate message. 4. Implement a method `check_balance()` which returns the current balance of the account. The user\'s interaction with this simulated bank account should be done using an interface function named `bank_operations` that continuously prompts the user to choose one of the three operations until they decide to exit the program. The function should: 1. Prompt the user for their name using the `input` function. 2. Ask the user for an initial balance to create a new `BankAccount` instance. 3. Show a menu with the options: \\"deposit\\", \\"withdraw\\", \\"check balance\\", and \\"exit\\". 4. Perform the requested operation and give feedback to the user: - For \\"deposit\\", ask the user for the amount to deposit and call the `deposit` method. - For \\"withdraw\\", ask the user for the amount to withdraw and call the `withdraw` method. - For \\"check balance\\", call the `check_balance` method and display the current balance. - For \\"exit\\", terminate the loop and end the program. Ensure all user inputs are validated to be appropriate (positive numbers for deposit/withdraw operations). Example interaction: ``` Welcome to the bank! What\'s your name? John Enter initial balance: 100 Menu: 1. Deposit 2. Withdraw 3. Check balance 4. Exit Choose an option (1-4): 1 Enter the amount to deposit: 50 Deposit successful. Your new balance is 150. Menu: 1. Deposit 2. Withdraw 3. Check balance 4. Exit Choose an option (1-4): 2 Enter the amount to withdraw: 200 Insufficient funds. You cannot withdraw more than your current balance. Menu: 1. Deposit 2. Withdraw 3. Check balance 4. Exit Choose an option (1-4): 3 Your current balance is 150. Menu: 1. Deposit 2. Withdraw 3. Check balance 4. Exit Choose an option (1-4): 4 Goodbye, John! ```","solution":"class BankAccount: def __init__(self, initial_balance): self.balance = initial_balance def deposit(self, amount): if amount > 0: self.balance += amount return self.balance else: raise ValueError(\\"Amount must be a positive number\\") def withdraw(self, amount): if amount > 0: if amount <= self.balance: self.balance -= amount return self.balance else: raise ValueError(\\"Insufficient funds\\") else: raise ValueError(\\"Amount must be a positive number\\") def check_balance(self): return self.balance"},{"question":"Write a function to parse a list of log entries and extract specific information pertaining to error messages. Each log entry is a dictionary with attributes like `timestamp`, `log_level`, and `message`. The function should then filter out only the entries with the `log_level` of \'ERROR\', count the occurrence of each unique error message, and return the results in a dictionary. The output dictionary should have the unique error messages as keys and their counts as values. You should write self-contained code starting with: ``` def parse_log_entries(log_entries: list) -> dict: ```","solution":"def parse_log_entries(log_entries: list) -> dict: Parses log entries to extract error messages and count their occurrences. Args: log_entries (list): A list of log entry dictionaries. Returns: dict: A dictionary with unique error messages as keys and their counts as values. error_count = {} for entry in log_entries: if entry[\'log_level\'] == \'ERROR\': message = entry[\'message\'] if message in error_count: error_count[message] += 1 else: error_count[message] = 1 return error_count"},{"question":"You are required to write a function `find_max_profit_days` that calculates the best day to buy and the best day to sell for maximum profit given a list of stock prices. The function should return the indices of the `buy` and `sell` days (0-based index). Here are the specifications for the function: 1. **Function Name**: `find_max_profit_days` 2. **Parameters**: - `prices`: a list of integers representing the stock prices on each day. 3. **Output**: The function should return a tuple containing two integers: the index of the best day to buy and the index of the best day to sell to maximize profit. # Example ```python # Given stock prices: prices = [20, 18, 14, 17, 21, 15, 22, 25, 10, 15] print(find_max_profit_days(prices)) # Expected Output: # (2, 7) ``` # Requirements: - The function should run in O(n) time complexity. - If there is no profit to be made (i.e., prices only decrease), the function should return (0, 0) or the first day as both the buy and sell day. - Use appropriate algorithms and data structures to achieve optimal performance.","solution":"def find_max_profit_days(prices): if not prices or len(prices) < 2: return (0, 0) min_price_index = 0 max_profit = 0 buy_day = 0 sell_day = 0 for i in range(1, len(prices)): current_profit = prices[i] - prices[min_price_index] if current_profit > max_profit: max_profit = current_profit buy_day = min_price_index sell_day = i if prices[i] < prices[min_price_index]: min_price_index = i return (buy_day, sell_day)"},{"question":"You are required to write a function named `merge_sorted_files` in Python that reads data from two existing text files named `sorted_file1.txt` and `sorted_file2.txt`, both containing sorted numbers, one per line. The function should merge these numbers into a single sorted list and write the result into a new file named `merged_output.txt`. Here are the requirements for the function: - Read the contents of `sorted_file1.txt` and `sorted_file2.txt` and store the numbers in two separate lists. - Merge the two lists into a single sorted list. - Write the merged list of numbers into `merged_output.txt`, one number per line. Assume that the two input files `sorted_file1.txt` and `sorted_file2.txt` exist and contain valid numeric data. **Function signature:** ```python def merge_sorted_files() -> None: ``` # Example: Assume the contents of `sorted_file1.txt` are: ``` 1 3 5 7 ``` Assume the contents of `sorted_file2.txt` are: ``` 2 4 6 8 ``` Then, after calling `merge_sorted_files()`, the contents of `merged_output.txt` should be: ``` 1 2 3 4 5 6 7 8 ``` # Note: - You may use Python\'s built-in `open` function for file handling. - The merging process should maintain the sorted order of the numbers.","solution":"def merge_sorted_files() -> None: Merges the contents of \'sorted_file1.txt\' and \'sorted_file2.txt\', which contain sorted numbers, into a single sorted list and writes the result to \'merged_output.txt\'. with open(\'sorted_file1.txt\', \'r\') as file1, open(\'sorted_file2.txt\', \'r\') as file2: # Read numbers from each file and convert them to a list of integers numbers1 = [int(line.strip()) for line in file1] numbers2 = [int(line.strip()) for line in file2] # Merge the two sorted lists merged_numbers = sorted(numbers1 + numbers2) # Write the merged list to the output file with open(\'merged_output.txt\', \'w\') as output_file: for number in merged_numbers: output_file.write(f\\"{number}n\\")"},{"question":"You are tasked with implementing a function that combines multiple dictionaries into a single dictionary. The function should take any number of dictionaries and merge them into one. If the same key appears in more than one dictionary, the value from the dictionary that appears last should be used. # Function Signature ```python def merge_dictionaries(*dicts): Merge multiple dictionaries into a single dictionary. Parameters: dicts : one or more dictionaries Dictionaries to merge. Returns: dict A single dictionary containing all the key-value pairs from the input dictionaries. ``` # Specific Tasks 1. Iterate through the input dictionaries and combine their key-value pairs. 2. If a key appears in more than one dictionary, the value from the latter dictionary should overwrite the previous one. 3. The function should be flexible enough to handle any number of dictionaries. # Example Given the inputs: - `dict1 = {\'a\': 1, \'b\': 2}` - `dict2 = {\'b\': 3, \'c\': 4}` - `Expected Output: {\'a\': 1, \'b\': 3, \'c\': 4}` Given the inputs: - `dict1 = {\'x\': 5}` - `dict2 = {\'y\': 10}` - `dict3 = {\'z\': 15, \'x\': 20}` - `Expected Output: {\'x\': 20, \'y\': 10, \'z\': 15}` Ensure your implementation combines the dictionaries correctly and efficiently. The order of overwriting should ensure that later dictionary values take precedence over earlier ones.","solution":"def merge_dictionaries(*dicts): Merge multiple dictionaries into a single dictionary. Parameters: *dicts : one or more dictionaries Dictionaries to merge. Returns: dict A single dictionary containing all the key-value pairs from the input dictionaries. merged_dict = {} for d in dicts: merged_dict.update(d) return merged_dict"},{"question":"You are given a dataset containing information about students\' grades for multiple subjects in a class. Your task is to write a function named `plot_student_grades` that takes three parameters: a dictionary of grades, a list of students, and an optional list of subjects. The function should generate a bar plot of the students\' grades, where each student\'s grades for different subjects are represented by a grouped bar chart. 1. **grades (dict):** A dictionary where keys are student names and values are lists containing grades for each subject. 2. **students (list):** A list of student names. 3. **subjects (list, optional):** An optional list specifying the subjects. Default subjects should be used if not provided. Your function should follow these steps: - Determine the number of students from the given list. - Ensure that the number of grades for each student matches the number of subjects. - If there are no subjects provided, default to `[\'Math\', \'Science\', \'English\', \'History\', \'Art\']`. - Generate a grouped bar chart using `matplotlib` to represent the grades for each student across the subjects. - Display the plot using `matplotlib.pyplot.show`. **Function Prototype:** ```python import matplotlib.pyplot as plt import numpy as np def plot_student_grades(grades, students, subjects=None): # Your code here ``` **Constraints:** - Use the `matplotlib` library to handle plotting. - Ensure that the function can handle cases where subjects are not provided. - Use the `matplotlib.pyplot.show` function to display the plot. **Example Usage:** ```python grades = { \'John\': [88, 92, 85, 90, 76], \'Mary\': [92, 89, 96, 85, 84], \'Paul\': [85, 87, 90, 87, 78], \'Lisa\': [79, 85, 88, 92, 80], \'Tom\': [95, 99, 94, 87, 91] } students = [\'John\', \'Mary\', \'Paul\', \'Lisa\', \'Tom\'] plot_student_grades(grades, students) ``` This should produce a grouped bar chart with each student\'s grades across the subjects.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_student_grades(grades, students, subjects=None): Generates a grouped bar chart of student grades by subject. Args: grades (dict): Dictionary with student names as keys and lists of grades as values. students (list): List of student names. subjects (list, optional): List of subjects. Defaults to [\'Math\', \'Science\', \'English\', \'History\', \'Art\']. # Default subjects default_subjects = [\'Math\', \'Science\', \'English\', \'History\', \'Art\'] if subjects is None: subjects = default_subjects # Number of students and subjects num_students = len(students) num_subjects = len(subjects) # Ensure each student has grades for the correct number of subjects for student in students: if len(grades[student]) != num_subjects: raise ValueError(f\\"Number of grades for {student} does not match number of subjects.\\") # Creating plot bar_width = 0.15 indices = np.arange(num_subjects) fig, ax = plt.subplots() for idx, student in enumerate(students): plt.bar(indices + idx * bar_width, grades[student], bar_width, label=student) plt.xlabel(\'Subjects\') plt.ylabel(\'Grades\') plt.title(\'Student Grades by Subject\') plt.xticks(indices + bar_width * (num_students - 1) / 2, subjects) plt.legend() plt.show()"},{"question":"You need to develop a function that processes a sequence of stock prices to identify the maximum profit that can be achieved from a single buy and a single sell of the given stock. The prices are given as a list of integers, where each value represents the stock price at a particular time. The primary goal is to identify the best day to buy and the best day to sell for maximum profit. To achieve this, you need to implement an optimal solution with O(n) time complexity. The function, `max_profit`, should iterate through the stock prices while keeping track of the minimum price encountered so far and calculating the potential profit at each step. The maximum of these potential profits will be the answer. Function Signature: ```python def max_profit(prices): pass ``` # Input Parameters: - `prices`: A list of integers representing the stock prices at different times. # Output: - An integer representing the maximum profit from a single buy and sell transaction. If no profit is possible, return 0. # Example: ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 (Buy on day 2 at price 1 and sell on day 5 at price 6) prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 (No profit possible as prices keep decreasing) ``` # Constraints: - The list of prices will have at least two prices. - All prices are non-negative integers.","solution":"def max_profit(prices): if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"You are tasked with writing a function named `find_optimal_route` that calculates the shortest path between two locations in a city represented as a grid. The city grid is described in a CSV file where each cell may be either walkable or blocked. This CSV file contains rows and columns where the value \'1\' represents a walkable cell and \'0\' represents a blocked cell. Your function should: 1. Read the CSV file to construct the city grid. 2. Use the coordinates of the start and end locations which will be provided as tuples. 3. Implement an algorithm to find the shortest path from the start to the end location using only walkable cells (\'1\'s). 4. Output the path as a list of tuples representing the coordinates of each step in the path, or an empty list if no path exists. # Requirements: - Assume the grid has dimensions M x N where M is the number of rows and N is the number of columns. - You can move in four directions: up, down, left, and right. - The start and end coordinates are always within grid bounds and correspond to walkable cells. - Use Breadth-First Search (BFS) to find the shortest path. # Example: For a CSV file `city_grid.csv` with content: ``` 1,0,1,1 1,1,1,0 0,1,0,1 1,1,1,1 ``` Start location: (0, 0) End location: (3, 3) Your function should return: ```python [(0, 0), (1, 0), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3)] ``` If no path exists, it should return: ```python [] ``` # Function Signature: ```python def find_optimal_route(filename: str, start: tuple, end: tuple) -> list: pass ```","solution":"import csv from collections import deque def find_optimal_route(filename: str, start: tuple, end: tuple) -> list: Calculates the shortest path from start to end in the city grid. def read_grid_from_csv(filename): grid = [] with open(filename, \'r\') as file: reader = csv.reader(file) for row in reader: grid.append(list(map(int, row))) return grid def is_valid_move(grid, x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1 def bfs(grid, start, end): queue = deque([(start, [start])]) visited = set() visited.add(start) while queue: (x, y), path = queue.popleft() if (x, y) == end: return path for move_x, move_y in [(-1, 0), (1, 0), (0, -1), (0, 1)]: next_x, next_y = x + move_x, y + move_y if is_valid_move(grid, next_x, next_y) and (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append(((next_x, next_y), path + [(next_x, next_y)])) return [] # Construct the grid grid = read_grid_from_csv(filename) return bfs(grid, start, end)"},{"question":"You need to create a function `get_prime_factors(n)` that returns a list of all prime factors of a given integer `n`. Prime factors are the prime numbers that divide `n` exactly. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. **Constraints:** 1. `n` will be a positive integer greater than 1. 2. The factors in the returned list should be unique and sorted in ascending order. **Requirements:** - Implement the function without using any external libraries for prime number generation. - The logic should efficiently handle values of `n` up to 100,000. **Function Signature:** ```python def get_prime_factors(n: int) -> list: pass ``` **Example:** ```python print(get_prime_factors(28)) # Output: [2, 7] print(get_prime_factors(84)) # Output: [2, 3, 7] print(get_prime_factors(97)) # Output: [97] # 97 is a prime number itself print(get_prime_factors(100)) # Output: [2, 5] ``` This problem is designed to help you practice identifying prime numbers and factorizing integers using basic loops and conditional statements.","solution":"def get_prime_factors(n): Returns a list of all unique prime factors of the given integer n. # A list to store the prime factors prime_factors = [] # Check for the number of twos that divide n if n % 2 == 0: prime_factors.append(2) while n % 2 == 0: n //= 2 # Check for other prime factors from 3 upwards i = 3 while i * i <= n: if n % i == 0: prime_factors.append(i) while n % i == 0: n //= i i += 2 # If n is a prime number greater than 2 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"You are tasked with writing a Python function called `email_parser` that extracts and formats email addresses from a given string. The function should leverage the `re` (regular expressions) library to find all email addresses within the input text and then return a list of these email addresses in lowercase and sorted in ascending order. The function `email_parser` should take the following parameter: - `text` (str): A string that may contain one or more email addresses. The function should: 1. Use a regular expression to find all email addresses in the input text. Email addresses are assumed to have the format `[username]@[domain]` (where `[username]` can include letters, digits, underscores, and periods, and `[domain]` can include letters, digits, and periods). 2. Convert all found email addresses to lowercase. 3. Return a list of unique email addresses in ascending order. Specific Instructions: - Use the `re` library to find email addresses. - Ensure no duplicate email addresses in the output. - The returned list should be sorted in ascending order. Here\'s the signature of the function you need to implement: ```python def email_parser(text): ```","solution":"import re def email_parser(text): Extracts and formats email addresses from the given text. Parameters: text (str): A string that may contain one or more email addresses. Returns: list: A list of unique email addresses in lowercase and sorted in ascending order. # Regular expression to find email addresses email_regex = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' # Finding all email addresses email_addresses = re.findall(email_regex, text) # Converting all email addresses to lowercase and removing duplicates unique_emails = list(set(email.lower() for email in email_addresses)) # Sorting the email addresses in ascending order unique_emails.sort() return unique_emails"},{"question":"In the context of managing large-scale datasets, it is often necessary to perform efficient data aggregation and summarization. This can involve grouping data by specific attributes and applying various aggregation functions to generate insightful summaries. In this problem, you will write a function to handle such tasks on a dataset representing daily sales transactions. You are provided with the following Python code snippet that you will need to complete: ```python import pandas as pd def load_and_aggregate_sales(input_file): Function to load the sales data from a CSV file and perform aggregation. Input: - input_file: path to the input file (CSV format with columns: \'Date\', \'Store\', \'Item\', \'Sales\'). Output: - aggregated_df: pandas DataFrame with total sales quantity for each combination of \'Store\' and \'Item\'. # Load the data into a pandas DataFrame sales_df = pd.read_csv(input_file) # Perform grouping by \'Store\' and \'Item\' and compute the total sales quantity for each group aggregated_df = sales_df.groupby([\'Store\', \'Item\'])[\'Sales\'].sum().reset_index() return aggregated_df ``` Your task is to complete the `load_and_aggregate_sales` function. The function should take the path to an input CSV file, load the data into a pandas DataFrame, and aggregate the sales data by `Store` and `Item`. The aggregation should compute the total sales quantity for each combination of `Store` and `Item`. Here are the detailed steps you need to follow: 1. Load the sales data from the input CSV file into a pandas DataFrame. 2. Group the DataFrame by the columns `Store` and `Item`. 3. Compute the total sales quantity for each group using the `sum` function. 4. Reset the index of the resulting DataFrame to make `Store` and `Item` columns instead of indices. 5. Return the aggregated DataFrame.","solution":"import pandas as pd def load_and_aggregate_sales(input_file): Function to load the sales data from a CSV file and perform aggregation. Input: - input_file: path to the input file (CSV format with columns: \'Date\', \'Store\', \'Item\', \'Sales\'). Output: - aggregated_df: pandas DataFrame with total sales quantity for each combination of \'Store\' and \'Item\'. # Load the data into a pandas DataFrame sales_df = pd.read_csv(input_file) # Perform grouping by \'Store\' and \'Item\' and compute the total sales quantity for each group aggregated_df = sales_df.groupby([\'Store\', \'Item\'])[\'Sales\'].sum().reset_index() return aggregated_df"},{"question":"Given a string containing a combination of letters and digits, write a function that reorganizes the string such that no two adjacent characters are the same. If it\'s not possible to reorganize the string in such a way, return an empty string. The function should be case-insensitive and retain the case of the original characters in the output. The function should output: - rearranged_str (str): A reorganized version of the input string where no two adjacent characters are the same, or an empty string if such rearrangement isn\'t possible. You should write self-contained code starting with: ``` def reorganize_string(s): ``` # Example ``` Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" ```","solution":"from collections import Counter import heapq def reorganize_string(s): # Count the frequency of each character char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 # Decrement the count prev_char = char result = \'\'.join(result) if len(result) != len(s): return \\"\\" return result"},{"question":"You are tasked with writing a Python function that simulates a simple book borrowing system for a small library. The function should allow users to borrow and return books, as well as check the availability of specific books. Function Definition: ```python class Library: def __init__(self, books): Initializes the library with a dictionary of books and their respective quantities. :param books: Dictionary where keys are book titles (strings) and values are quantities (integers). def borrow_book(self, book): Borrow a book from the library. :param book: The title of the book to borrow (string). :return: String message indicating success or failure. def return_book(self, book): Return a book to the library. :param book: The title of the book to return (string). :return: String message indicating success or failure. def check_availability(self, book): Check if a specific book is available in the library. :param book: The title of the book to check (string). :return: Boolean value indicating if the book is available. ``` Your Task: 1. Implement the class `Library` with the following methods: - `borrow_book`: This method should: - Check if the book is available (quantity > 0). - Decrement the quantity of the book by 1 if it\'s available. - Return a success message if the book was borrowed successfully, or a failure message if it was not available. - `return_book`: This method should: - Increment the quantity of the book by 1. - Return a message indicating the book was returned successfully. - `check_availability`: This method should: - Return `True` if the book is available (quantity > 0), otherwise `False`. Additional Requirements: - Ensure that the methods handle edge cases such as borrowing a book that is not in the library\'s inventory. - Maintain a consistent and user-friendly message format for successes and failures. # Example Usage: Here are some examples to illustrate the usage of the class you will implement: ```python library = Library({\\"The Great Gatsby\\": 3, \\"1984\\": 2, \\"To Kill a Mockingbird\\": 1}) # Borrowing books print(library.borrow_book(\\"1984\\")) # Example output: \\"1984 borrowed successfully.\\" print(library.borrow_book(\\"The Great Gatsby\\")) # Example output: \\"The Great Gatsby borrowed successfully.\\" print(library.borrow_book(\\"The Great Gatsby\\")) # Example output: \\"The Great Gatsby borrowed successfully.\\" print(library.borrow_book(\\"The Great Gatsby\\")) # Example output: \\"The Great Gatsby is not available.\\" # Returning books print(library.return_book(\\"1984\\")) # Example output: \\"1984 returned successfully.\\" print(library.return_book(\\"The Great Gatsby\\")) # Example output: \\"The Great Gatsby returned successfully.\\" # Checking availability print(library.check_availability(\\"1984\\")) # Example output: True print(library.check_availability(\\"To Kill a Mockingbird\\")) # Example output: True print(library.check_availability(\\"Moby Dick\\")) # Example output: False ```","solution":"class Library: def __init__(self, books): Initializes the library with a dictionary of books and their respective quantities. :param books: Dictionary where keys are book titles (strings) and values are quantities (integers). self.books = books def borrow_book(self, book): Borrow a book from the library. :param book: The title of the book to borrow (string). :return: String message indicating success or failure. if book in self.books and self.books[book] > 0: self.books[book] -= 1 return f\\"{book} borrowed successfully.\\" return f\\"{book} is not available.\\" def return_book(self, book): Return a book to the library. :param book: The title of the book to return (string). :return: String message indicating success or failure. if book in self.books: self.books[book] += 1 else: self.books[book] = 1 return f\\"{book} returned successfully.\\" def check_availability(self, book): Check if a specific book is available in the library. :param book: The title of the book to check (string). :return: Boolean value indicating if the book is available. return self.books.get(book, 0) > 0"},{"question":"In this problem, you are required to implement a function called `invert_dict` which takes a dictionary and produces an inverted dictionary. In an inverted dictionary, the keys become values and the values become keys. It is guaranteed that the original dictionary will have unique values, so there will be no clashes in the inverted dictionary. **Function Signature:** ```python def invert_dict(d: dict) -> dict: ``` **Parameters:** - `d` (dict): A dictionary with unique values. **Returns:** - `dict`: A dictionary that has inverted the keys and values of the input dictionary. **Example:** ```python data = {\'a\': 1, \'b\': 2, \'c\': 3} result = invert_dict(data) print(result) # Output: {1: \'a\', 2: \'b\', 3: \'c\'} ``` **Additional Example:** ```python data = {\'x\': 42, \'y\': 99, \'z\': 100} result = invert_dict(data) print(result) # Output: {42: \'x\', 99: \'y\', 100: \'z\'} ```","solution":"def invert_dict(d: dict) -> dict: Takes a dictionary and returns an inverted dictionary where keys become values and values become keys. Parameters: d (dict): A dictionary with unique values. Returns: dict: An inverted dictionary. return {v: k for k, v in d.items()}"},{"question":"You are given a dataset containing the daily stock prices of multiple companies over a period of time. Your task is to write a function called `calculate_return` that calculates the daily return for a specified stock and appends it as a new column to the dataset. The daily return for a stock is calculated as: [ text{Daily Return} = frac{text{Price}_text{current_day} - text{Price}_text{previous_day}}{text{Price}_text{previous_day}} ] Add a new column to the dataset with the calculated daily return for the specified stock. The first entry in the daily return column should be `NaN` since there is no previous day to compare. # Function Signature ```python def calculate_return(stock: str, data: pd.DataFrame) -> pd.DataFrame: ``` # Parameters - `stock` (str): The name of the stock column for which the daily return needs to be calculated. - `data` (pd.DataFrame): The dataset containing the stock prices as a pandas DataFrame. # Returns - `pd.DataFrame`: The modified DataFrame with the new column containing the daily returns. # Example Usage Given: ```python import pandas as pd data = pd.DataFrame({ \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\'], \'StockA\': [100, 105, 102, 108], \'StockB\': [50, 51, 53, 52], \'StockC\': [200, 198, 202, 205] }) ``` Calling the function: ```python modified_data = calculate_return(\'StockA\', data) ``` The `data` DataFrame should be modified to: ```python Date StockA StockB StockC StockA_Return 0 2023-01-01 100 50 200 NaN 1 2023-01-02 105 51 198 0.050000 2 2023-01-03 102 53 202 -0.028571 3 2023-01-04 108 52 205 0.058824 ``` # Notes - Ensure the new column name follows the pattern `\'{stock}_Return\'`. - Handle cases where the stock column values might contain NaNs by ensuring the return calculation skips such rows or fills previous NaN values accordingly.","solution":"import pandas as pd def calculate_return(stock: str, data: pd.DataFrame) -> pd.DataFrame: Calculates the daily return for the specified stock and appends it as a new column to the DataFrame. The new column is named \'{stock}_Return\'. Parameters: - stock (str): The name of the stock column for which the daily return needs to be calculated. - data (pd.DataFrame): The dataset containing the stock prices as a pandas DataFrame. Returns: - pd.DataFrame: The modified DataFrame with the new column containing the daily returns. # Ensure the stock column exists in the DataFrame if stock not in data.columns: raise ValueError(f\\"Column \'{stock}\' not found in DataFrame\\") # Calculate the daily return for the specified stock data[f\'{stock}_Return\'] = (data[stock] - data[stock].shift(1)) / data[stock].shift(1) return data"},{"question":"You are required to develop a function `encryptDecryptString(s, key, mode)` that will either encrypt or decrypt a given string using a simple Caesar cipher technique. The function should shift each character in the string by a certain number of places in the alphabet. The direction of the shift depends on whether we are encrypting or decrypting the string. Here\'s the breakdown: 1. The `s` parameter is the input string to be either encrypted or decrypted. 2. The `key` parameter is an integer that determines how many positions to shift each character. 3. The `mode` parameter is a string that can be either \\"encrypt\\" or \\"decrypt\\". - If `mode` is \\"encrypt\\", shift characters forward by `key` positions. - If `mode` is \\"decrypt\\", shift characters backward by `key` positions. 4. When shifting: - Maintain the case of the original characters. - Only shift alphabetic characters (both uppercase and lowercase); other characters should remain unchanged. Function signature: ```python def encryptDecryptString(s, key, mode): ``` Example: ```python print(encryptDecryptString(\\"Hello, World!\\", 3, \\"encrypt\\")) # Outputs: \\"Khoor, Zruog!\\" print(encryptDecryptString(\\"Khoor, Zruog!\\", 3, \\"decrypt\\")) # Outputs: \\"Hello, World!\\" print(encryptDecryptString(\\"Python3.8\\", 5, \\"encrypt\\")) # Outputs: \\"Udymts3.8\\" print(encryptDecryptString(\\"Udymts3.8\\", 5, \\"decrypt\\")) # Outputs: \\"Python3.8\\" ``` Constraints: - The input string `s` is non-empty and contains printable ASCII characters. - The `key` is a non-negative integer. - The `mode` is either \\"encrypt\\" or \\"decrypt\\" (case-sensitive).","solution":"def encryptDecryptString(s, key, mode): def shift_char(c, shift_amount): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift_amount) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift_amount) % 26 + ord(\'A\')) else: return c if mode == \\"encrypt\\": shift_amount = key elif mode == \\"decrypt\\": shift_amount = -key else: raise ValueError(\\"mode must be either \'encrypt\' or \'decrypt\'\\") return \'\'.join(shift_char(c, shift_amount) for c in s)"},{"question":"You need to create a function `connect_components` that takes as input a list of tuples representing an undirected graph and returns a new list of tuples such that the original graph becomes a single connected component by adding the minimum number of edges. Each tuple in the input list represents an edge in the graph. The graph edges are unidirectional, meaning (a, b) is the same as (b, a). **Function Signature:** ```python def connect_components(edges: list) -> list: ``` **Constraints:** - The input `edges` will be a list of tuples with two integers each, for example, `[(0, 1), (1, 2), (3, 4)]`. - The graph will be undirected, i.e., (a, b) = (b, a). There will be no duplicate edges in the input. - Return a list of tuples, where each tuple represents an edge. The returned edges should include the minimum additional edges to make the input graph connected. - You may use any graph-related libraries available in Python. **Example:** ```python edges = [(0, 1), (1, 2), (3, 4)] result = connect_components(edges) print(result) ``` Expected Output: ``` [ (0, 1), (1, 2), (3, 4), (2, 3) ] ```","solution":"def connect_components(edges): from collections import defaultdict def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Initialize disjoint set union-find structure nodes = set() for edge in edges: nodes.add(edge[0]) nodes.add(edge[1]) parent = {node: node for node in nodes} rank = {node: 0 for node in nodes} for edge in edges: x = find_parent(parent, edge[0]) y = find_parent(parent, edge[1]) if x != y: union(parent, rank, x, y) # Find all connected components components = defaultdict(list) for node in nodes: parent_node = find_parent(parent, node) components[parent_node].append(node) # List of additional edges to add to make the graph connected additional_edges = [] component_roots = list(components.keys()) for i in range(1, len(component_roots)): additional_edges.append((components[component_roots[i-1]][0], components[component_roots[i]][0])) # Return original edges plus the additional edges return edges + additional_edges"},{"question":"You need to write a function `find_odd_squares(nums: List[int]) -> List[int]` that takes a list of integers and returns a list of the squares of the odd numbers from the original list, sorted in ascending order. This function should: 1. Use list comprehension to filter out even numbers. 2. Square each remaining odd number. 3. Sort the resulting list of squared odd numbers in ascending order. 4. Handle an empty list by returning an empty list. Example input and output: ```python find_odd_squares([1, 2, 3, 4, 5]) # should return [1, 9, 25] find_odd_squares([10, 13, 1, 17]) # should return [1, 169, 289] find_odd_squares([2, 4, 6]) # should return [] find_odd_squares([]) # should return [] ``` **Note: Ensure to use list comprehension and the built-in sort function for this task.**","solution":"from typing import List def find_odd_squares(nums: List[int]) -> List[int]: Returns a list of the squares of the odd numbers from the input list, sorted in ascending order. return sorted([num * num for num in nums if num % 2 != 0])"},{"question":"Create a function `find_unique_numbers` that takes a list of integers `nums` and returns a list of numbers that appear exactly once in the given list, in the order they first appeared. You may use the `collections.OrderedDict` to maintain the order of first occurrence. ```python def find_unique_numbers(nums): # Your implementation here pass ``` **Function signature:** ```python def find_unique_numbers(nums: list) -> list: ``` **Example:** ```python nums = [4, 5, 6, 7, 4, 5, 8, 9, 8] ``` - The function call `find_unique_numbers(nums)` should return: ```python [6, 7, 9] ``` **Requirements:** 1. The function should maintain the order of first appearance for unique numbers. 2. You must use `collections.OrderedDict` to help maintain the order. 3. The function should handle an empty list by returning an empty list.","solution":"from collections import OrderedDict def find_unique_numbers(nums): Returns a list of numbers that appear exactly once in the given list, maintaining their order of first appearance. Parameters: nums (list): List of integers. Returns: list: List of unique integers in order of their first appearance. count = OrderedDict() # Count the occurrences of each number for num in nums: if num in count: count[num] += 1 else: count[num] = 1 # Filter numbers that appear exactly once return [num for num, cnt in count.items() if cnt == 1]"},{"question":"You are asked to write a function `rotate_matrix` that takes a square matrix (a two-dimensional list) and rotates it 90 degrees clockwise. The function should modify the matrix in place without using any additional space for another matrix. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # After the function call, the matrix should look like this: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints - The matrix is guaranteed to be square (i.e., the number of rows is equal to the number of columns). - Each element of the matrix is an integer. You should not use any additional space for another matrix; the rotation should be done in place.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) # Perform layer by layer rotation for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first # Save the top element top = matrix[first][i] # Move left element to top matrix[first][i] = matrix[last - offset][first] # Move bottom element to left matrix[last - offset][first] = matrix[last][last - offset] # Move right element to bottom matrix[last][last - offset] = matrix[i][last] # Assign top element to right matrix[i][last] = top"},{"question":"You are given a list of words and a list of characters. Your task is to write a function named `max_constructed_words` that takes two arguments: - `words`: A list of strings containing words. - `chars`: A string containing a set of characters, where each character can only be used once for constructing the words. The function should return the total length of all words that can be constructed using the characters from `chars`. A word can be constructed if each character in the word exists in `chars` and the total occurrences of each character used do not exceed the available quantity in `chars`. Your implementation should: 1. Initialize a variable to store the total length of all constructible words. 2. Traverse through each word in the `words` list. 3. For each word, verify if it can be constructed using the characters from `chars`. 4. Add the length of the word to the total length if it is constructible. 5. Return the total length of all constructible words. Ensure that your function handles cases where characters in `chars` are insufficient to construct a word in `words`. For simplicity, you can assume that all inputs are lowercase. The required function signature is: ```python def max_constructed_words(words, chars): pass ``` **Example usage:** ```python words = [\\"cat\\", \\"bt\\", \\"hat\\", \\"tree\\"] chars = \\"atach\\" print(max_constructed_words(words, chars)) # Output: 6 ``` **Explanation:** - The word \\"cat\\" can be constructed from chars with length 3. - The word \\"hat\\" can be constructed from chars with length 3. - The word \\"bt\\" and \\"tree\\" cannot be constructed as there are insufficient characters in `chars`. Total length = 3 + 3 = 6.","solution":"def max_constructed_words(words, chars): Returns the total length of all words that can be constructed using the given characters. :param words: List of words to be checked :param chars: String of characters available for constructing words :return: Total length of constructible words from collections import Counter chars_count = Counter(chars) total_len = 0 for word in words: word_count = Counter(word) can_construct = True for char, count in word_count.items(): if chars_count[char] < count: can_construct = False break if can_construct: total_len += len(word) return total_len"},{"question":"You are tasked with creating a function called `flatten_dict()` that takes a nested dictionary and flattens it into a single-depth dictionary. The function should use dot notations to represent the keys of nested dictionaries. The function will accept the following parameter: - `nested_dict`: A dictionary where each key can map to either a value or another dictionary. The function should return a new dictionary with a single level. For keys at deeper levels in the input dictionary, their names should be concatenated using dot notation. # Function Signature ```python def flatten_dict(nested_dict): pass ``` # Examples ```python # Flatten a nested dictionary nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3, \'f\': 4 } } } # The output should be: # {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4} print(flatten_dict(nested_dict)) nested_dict = { \'x\': 10, \'y\': { \'z\': { \'w\': 20 } }, \'m\': 30 } # The output should be: # {\'x\': 10, \'y.z.w\': 20, \'m\': 30} print(flatten_dict(nested_dict)) ``` The function should properly handle nested dictionaries and concatenate keys using dot notation as specified.","solution":"def flatten_dict(nested_dict, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary using dot notation. Parameters: nested_dict (dict): The dictionary to be flattened. parent_key (str): The base key to use for recursion. sep (str): The separator to use between key levels. Returns: dict: A flattened dictionary. items = [] for k, v in nested_dict.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"In data analysis, it is often required to fill missing values in a dataset based on certain criteria or algorithms. Implementing an efficient algorithm to fill these missing values can significantly enhance the quality of the data. You are required to write a Python function that uses linear interpolation to estimate and fill the missing values in a list of numerical data. **Objective:** Write a function named `fill_missing_values` that fills in the missing values in a list using linear interpolation. **Function Signature:** ```python def fill_missing_values(data): Fill in the missing values in a list using linear interpolation. Parameters: data (list of float): A list of numerical data where some values may be None (representing missing values). Returns: list of float: The list with missing values filled using linear interpolation. ``` **Parameters Description:** - `data`: A list of numerical data which may contain `None` as missing values. **Returns:** A list of floats where missing values have been filled using linear interpolation. **Requirements:** - Use linear interpolation to estimate the missing values. - If there are leading or trailing `None` values, they should remain as `None`. **Example:** ```python data = [1.0, None, 3.0, None, None, 6.0, 7.0] filled_data = fill_missing_values(data) print(filled_data) # Output should be [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0] ``` Note: Handle the cases where the list starts or ends with `None` by keeping those `None` values unchanged in the returned list.","solution":"def fill_missing_values(data): Fill in the missing values in a list using linear interpolation. Parameters: data (list of float): A list of numerical data where some values may be None (representing missing values). Returns: list of float: The list with missing values filled using linear interpolation. if not data: return [] result = data[:] n = len(data) for i in range(n): if result[i] is None: # Find the nearest left non-None value left_index = i - 1 while left_index >= 0 and result[left_index] is None: left_index -= 1 # Find the nearest right non-None value right_index = i + 1 while right_index < n and result[right_index] is None: right_index += 1 # If both sides are found, interpolate if left_index >= 0 and right_index < n: left_value = result[left_index] right_value = result[right_index] interval_length = right_index - left_index result[i] = left_value + (right_value - left_value) * (i - left_index) / interval_length return result"},{"question":"# Context You are working to create a function that analyzes and summarizes user activity on a website. The task is to process a list of user actions, where each action is represented by a tuple containing the user ID and the action they performed. Your goal is to generate a summary that shows the number of times each unique action was performed by each user. # Task Write a function named `summarize_user_actions` that takes one parameter: 1. `actions`: a list of tuples, where each tuple contains a string (user ID) and a string (action). The function should: 1. Process the list of actions to count the occurrences of each unique action for each user. 2. Return a dictionary where the keys are user IDs and the values are dictionaries. The inner dictionaries should have action names as keys and the counts of those actions as values. # Function Signature ```python def summarize_user_actions(actions: list) -> dict: ``` # Example Suppose the `actions` list is as follows: ```python actions = [ (\'user1\', \'login\'), (\'user2\', \'logout\'), (\'user1\', \'view\'), (\'user1\', \'login\'), (\'user3\', \'login\'), (\'user2\', \'view\') ] ``` Calling `summarize_user_actions(actions)` should return: ```python { \'user1\': {\'login\': 2, \'view\': 1}, \'user2\': {\'logout\': 1, \'view\': 1}, \'user3\': {\'login\': 1} } ``` # Requirements - Use standard library functions and data structures to implement the solution. - Ensure your function handles edge cases, such as an empty actions list, correctly. - The order of keys in the dictionaries can be arbitrary as dictionaries in Python 3.7+ maintain insertion order by default. # Notes - Make sure to handle cases where users perform a wide variety of actions. - Consider how the function behaves with very large lists of actions to ensure efficiency.","solution":"def summarize_user_actions(actions: list) -> dict: user_summary = {} # Dictionary to hold the summary of actions per user for user_id, action in actions: if user_id not in user_summary: user_summary[user_id] = {} if action not in user_summary[user_id]: user_summary[user_id][action] = 0 user_summary[user_id][action] += 1 return user_summary"},{"question":"You are required to implement a function named `find_critical_nodes` that identifies the critical nodes in a connected, undirected graph. Critical nodes are vertices whose removal would increase the number of connected components of the graph. # Function Specification **Function Name**: `find_critical_nodes` **Inputs**: - `n`: An integer representing the number of nodes in the graph. - `edges`: A list of tuples, where each tuple `(u, v)` represents an undirected edge between node `u` and node `v`. **Outputs**: - Returns a list of integers representing the critical nodes in ascending order. # Example Usage ```python # Example Input n = 5 edges = [(0, 1), (0, 2), (1, 2), (1, 3), (3, 4)] # Function Call critical_nodes = find_critical_nodes(n, edges) print(critical_nodes) # Output: [1, 3] ``` # Constraints - The graph is connected, meaning there is a path between any pair of vertices. - The number of nodes `n` will be between 2 and 100. - The number of edges will be between 1 and `n*(n-1)/2`. # Hints - You might find Depth First Search (DFS) useful for this problem. - Tarjan\'s algorithm for finding articulation points could be a good approach to solve this problem.","solution":"def find_critical_nodes(n, edges): from collections import defaultdict def dfs(node, parent, discovery, low, visited, adj, timer, articulation): visited[node] = True discovery[node] = low[node] = timer[0] timer[0] += 1 child_count = 0 for neighbor in adj[node]: if not visited[neighbor]: dfs(neighbor, node, discovery, low, visited, adj, timer, articulation) low[node] = min(low[node], low[neighbor]) if low[neighbor] >= discovery[node] and parent is not None: articulation.add(node) child_count += 1 elif neighbor != parent: low[node] = min(low[node], discovery[neighbor]) if parent is None and child_count > 1: articulation.add(node) adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) discovery = [-1] * n low = [-1] * n visited = [False] * n timer = [0] articulation_points = set() for i in range(n): if not visited[i]: dfs(i, None, discovery, low, visited, adj, timer, articulation_points) return sorted(articulation_points) # Example usage n = 5 edges = [(0, 1), (0, 2), (1, 2), (1, 3), (3, 4)] print(find_critical_nodes(n, edges)) # Output: [1, 3]"},{"question":"You are tasked with writing a function that simulates rolling two six-sided dice and calculating the probability of rolling a certain target sum. This exercise will help you get comfortable with probability concepts and simulation techniques. The goal is to create a function named `roll_dice_simulation` that takes two arguments: an integer `target_sum` representing the desired outcome of the dice rolls, and an integer `num_rolls` representing the number of simulation trials. Your function should: 1. Simulate rolling two six-sided dice `num_rolls` times. 2. Count the number of times the sum of the dice equals `target_sum`. 3. Return the probability of rolling the `target_sum` as a float. To accomplish this, you\'ll use the `random` module to simulate dice rolls. # Example: ```python import random def roll_dice_simulation(target_sum, num_rolls): count = 0 for _ in range(num_rolls): roll1 = random.randint(1, 6) roll2 = random.randint(1, 6) if roll1 + roll2 == target_sum: count += 1 return count / num_rolls # Test case target_sum = 7 num_rolls = 10000 result = roll_dice_simulation(target_sum, num_rolls) print(result) ``` In this example, the function simulates rolling two dice 10,000 times and calculates how often the sum is 7. It then returns the probability of rolling a sum of 7. # Requirements: - Use the `random.randint` function to simulate the dice rolls. - Your function should be named `roll_dice_simulation`.","solution":"import random def roll_dice_simulation(target_sum, num_rolls): Simulates rolling two six-sided dice a specified number of times and calculates the probability of the sum of the dice being equal to a target sum. :param target_sum: int - The desired sum of the dice rolls. :param num_rolls: int - The number of times to roll the dice. :return: float - The probability of rolling the target sum. count = 0 for _ in range(num_rolls): roll1 = random.randint(1, 6) roll2 = random.randint(1, 6) if roll1 + roll2 == target_sum: count += 1 return count / num_rolls"},{"question":"You are tasked with developing a function to classify emails into spam or not spam based on their content. For this task, you will use the `pandas` and `scikit-learn` libraries to handle and process the data and to create and evaluate a classification model. You are provided with a CSV file `emails.csv` which contains two columns: `text` and `spam`. The `text` column contains the content of the email, and the `spam` column contains a binary value indicating whether the email is spam (`1`) or not (`0`). Your task is to write a function `classify_emails(file_path, test_size)`. The function should: 1. Read the data from the CSV file located at `file_path`. 2. Process the text data using TF-IDF vectorization. 3. Split the data into training and testing sets based on the `test_size` parameter. 4. Train a logistic regression model using the training data. 5. Calculate the classification accuracy, confusion matrix, and classification report (precision, recall, f1-score) of the model with respect to the testing data. 6. Print the accuracy, confusion matrix, and classification report. 7. Return the list of predictions on the test data as a NumPy array. **Example:** ```python predictions = classify_emails(\'emails.csv\', 0.3) ``` Make sure to use `pandas.read_csv` for reading the data, `sklearn.feature_extraction.text.TfidfVectorizer` for text vectorization, `sklearn.model_selection.train_test_split` for splitting the data, `sklearn.linear_model.LogisticRegression` for training the model, and `sklearn.metrics` for evaluating the model.","solution":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, confusion_matrix, classification_report import numpy as np def classify_emails(file_path, test_size=0.3): # Read the data data = pd.read_csv(file_path) # Process the text data vectorizer = TfidfVectorizer() X = vectorizer.fit_transform(data[\'text\']) y = data[\'spam\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42) # Train the logistic regression model model = LogisticRegression() model.fit(X_train, y_train) # Make predictions predictions = model.predict(X_test) # Calculate accuracy, confusion matrix, and classification report accuracy = accuracy_score(y_test, predictions) conf_matrix = confusion_matrix(y_test, predictions) class_report = classification_report(y_test, predictions) # Print results print(f\\"Accuracy: {accuracy}\\") print(f\\"Confusion Matrix:n{conf_matrix}\\") print(f\\"Classification Report:n{class_report}\\") return predictions"},{"question":"Create a function that takes a list of integers as input and returns a new list with each element squared and sorted in non-decreasing order. This function demonstrates working with lists, iterating through elements, and understanding basic sorting algorithms. The function should output: list: A list of integers where each element is squared and sorted in non-decreasing order. You should write self-contained code starting with: ``` def square_and_sort(input_list): ```","solution":"def square_and_sort(input_list): Returns a new list with each element squared and sorted in non-decreasing order. squared_list = [x**2 for x in input_list] squared_list.sort() return squared_list"},{"question":"Write a Python function that reads a text file, counts the occurrences of each word, and then returns the top 5 most frequent words along with their counts. The function should ignore case and punctuation. Here is the function signature to start with: ``` import re from collections import Counter def get_top_words(file_path): ```","solution":"import re from collections import Counter def get_top_words(file_path): Returns the top 5 most frequent words and their counts from a text file, ignoring case and punctuation. :param file_path: Path to the text file. :return: List of tuples where each tuple contains a word and its count. with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read().lower() # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Count the occurrences of each word word_counts = Counter(words) # Get the top 5 most frequent words top_words = word_counts.most_common(5) return top_words"},{"question":"In this task, you will implement a function to parse and evaluate simple mathematical expressions from a string format. The expressions will involve only non-negative integers and the four basic arithmetic operators (`+`, `-`, `*`, and `/`). The operations should respect the standard operator precedence. Your task is to write a function `evaluate_expression(expression: str) -> float` that: 1. Parses the input string `expression` and evaluates it to return the correct numerical result. 2. Handles nested parentheses to modify the precedence as needed. 3. Handles division by zero by raising a `ZeroDivisionError`. Your function should: - Properly parse and evaluate expressions with any combination of the four operators. - Respect operator precedence (`*` and `/` before `+` and `-`) unless parentheses override this. You may assume that: - The input string `expression` is a valid mathematical expression. - The expression can contain multiple spaces that should be ignored. *Example*: ```python expression = \\"3 + 5 * (2 - 8)\\" result = evaluate_expression(expression) # Output: -27.0 ``` *Input*: - A string `expression` containing a valid mathematical expression. *Output*: - A float representing the evaluated result of the expression. *Example usage*: ```python expression1 = \\"10 + 2 * 6\\" print(evaluate_expression(expression1)) # Output: 22.0 expression2 = \\"100 * 2 + 12\\" print(evaluate_expression(expression2)) # Output: 212.0 expression3 = \\"100 * ( 2 + 12 ) / 14\\" print(evaluate_expression(expression3)) # Output: 100.0 expression4 = \\"3 / 0\\" try: print(evaluate_expression(expression4)) # Should raise ZeroDivisionError except ZeroDivisionError: print(\\"Caught division by zero error\\") ```","solution":"import re def evaluate_expression(expression: str) -> float: def parse_expression(expr): tokens = re.findall(r\'d+.?d*|[+*/()-]\', expr) def next_token(): return tokens.pop(0) if tokens else None def parse_factor(): token = next_token() if token == \'(\': result = parse_expression() next_token() # Discard \')\' return result else: return float(token) def parse_term(): result = parse_factor() while tokens and tokens[0] in \'*/\': op = next_token() if op == \'*\': result *= parse_factor() elif op == \'/\': divisor = parse_factor() if divisor == 0: raise ZeroDivisionError(\\"division by zero\\") result /= divisor return result def parse_expression(): result = parse_term() while tokens and tokens[0] in \'+-\': op = next_token() if op == \'+\': result += parse_term() elif op == \'-\': result -= parse_term() return result return parse_expression() expression = expression.replace(\' \', \'\') return parse_expression(expression)"},{"question":"You are building a basic inventory management system for a small store. Each product in the inventory has a unique identifier, a name, a quantity, and a price. You are required to create a class `Product` and a class `Inventory`. The `Inventory` class should manage a collection of `Product` instances. You need to implement the following functionalities: 1. Adding a new product to the inventory. 2. Removing a product from the inventory by its unique identifier. 3. Retrieving the total value of all products in the inventory (quantity multiplied by price for each product). 4. Listing all products in the inventory with their details. # Requirements: - Create a class `Product` with the following attributes: - `product_id` (int): The unique identifier for the product. - `name` (str): The name of the product. - `quantity` (int): The quantity of the product in stock. - `price` (float): The price of the product. - Create a class `Inventory` with the following methods: - `add_product(product)` - Adds a `Product` instance to the inventory. - `remove_product(product_id)` - Removes a product from the inventory by its unique identifier. - `total_inventory_value()` - Returns the total value of all products in the inventory. - `list_products()` - Prints out all products in the inventory with their details. - Ensure appropriate handling of edge cases such as trying to remove a product that doesn\'t exist. # Example Usage: ```python class Product: def __init__(self, product_id, name, quantity, price): self.product_id = product_id self.name = name self.quantity = quantity self.price = price class Inventory: def __init__(self): self.products = [] def add_product(self, product): self.products.append(product) def remove_product(self, product_id): self.products = [product for product in self.products if product.product_id != product_id] def total_inventory_value(self): return sum(product.quantity * product.price for product in self.products) def list_products(self): for product in self.products: print(f\\"ID: {product.product_id}, Name: {product.name}, Quantity: {product.quantity}, Price: {product.price}\\") # Example usage inventory = Inventory() # Adding products inventory.add_product(Product(1, \\"Apple\\", 50, 0.5)) inventory.add_product(Product(2, \\"Banana\\", 100, 0.25)) # Listing products inventory.list_products() # Removing a product inventory.remove_product(1) # Total inventory value print(f\\"Total inventory value: {inventory.total_inventory_value():.2f}\\") ``` Upon execution, this code should manage the inventory by adding, removing, listing products, and calculating the total value of the inventory.","solution":"class Product: def __init__(self, product_id, name, quantity, price): self.product_id = product_id self.name = name self.quantity = quantity self.price = price class Inventory: def __init__(self): self.products = [] def add_product(self, product): self.products.append(product) def remove_product(self, product_id): self.products = [product for product in self.products if product.product_id != product_id] def total_inventory_value(self): return sum(product.quantity * product.price for product in self.products) def list_products(self): for product in self.products: print(f\\"ID: {product.product_id}, Name: {product.name}, Quantity: {product.quantity}, Price: {product.price}\\")"},{"question":"**Objective:** Create a function `maze_solver(maze, start, end)` that solves a maze represented as a 2D list. The function will receive: 1. `maze`: A 2D list where each element can be either 0 (representing a wall) or 1 (representing a path). 2. `start`: A tuple of (x, y) coordinates indicating the starting position within the maze. 3. `end`: A tuple of (x, y) coordinates indicating the ending position within the maze. The function should return a list of (x, y) coordinates representing the path from the `start` position to the `end` position. If no path exists, return an empty list. Use a Depth-First Search (DFS) approach to find the path. **Requirements:** 1. Implement `maze_solver` with the signature `maze_solver(maze, start, end)`. 2. The function should explore possible paths recursively and backtrack when a dead-end is reached. 3. Ensure that the path is valid by staying within the boundaries of the maze and only moving to cells with the value 1. **Example:** For the given maze: ``` maze = [ [1, 0, 1, 1, 1], [1, 1, 0, 0, 1], [0, 1, 0, 1, 1], [0, 1, 1, 1, 0], [1, 0, 0, 1, 1] ] start = (0, 0) end = (4, 4) ``` Calling `maze_solver(maze, start, end)` should return a valid path such as `[(0, 0), (1, 0), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (4, 3), (4, 4)]`. **Hint:** Use a helper function to handle the recursion and backtracking. Consider movements in four directions (up, down, left, right) from any given cell. **Skeleton Code:** ```python def maze_solver(maze, start, end): def dfs(maze, cur, end, path, visited): if cur == end: return path x, y = cur # Define the possible movements: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dir_x, dir_y in directions: next_x, next_y = x + dir_x, y + dir_y if 0 <= next_x < len(maze) and 0 <= next_y < len(maze[0]) and maze[next_x][next_y] == 1 and (next_x, next_y) not in visited: visited.add((next_x, next_y)) result = dfs(maze, (next_x, next_y), end, path + [(next_x, next_y)], visited) if result: # If we found a valid path, return it return result # Otherwise backtrack visited.remove((next_x, next_y)) return [] visited = set() visited.add(start) return dfs(maze, start, end, [start], visited) # Example usage maze = [ [1, 0, 1, 1, 1], [1, 1, 0, 0, 1], [0, 1, 0, 1, 1], [0, 1, 1, 1, 0], [1, 0, 0, 1, 1] ] start = (0, 0) end = (4, 4) print(maze_solver(maze, start, end)) ``` Implement the `maze_solver` function to find the path through the maze as described.","solution":"def maze_solver(maze, start, end): def dfs(maze, cur, end, path, visited): if cur == end: return path x, y = cur # Define the possible movements: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dir_x, dir_y in directions: next_x, next_y = x + dir_x, y + dir_y if 0 <= next_x < len(maze) and 0 <= next_y < len(maze[0]) and maze[next_x][next_y] == 1 and (next_x, next_y) not in visited: visited.add((next_x, next_y)) result = dfs(maze, (next_x, next_y), end, path + [(next_x, next_y)], visited) if result: # If we found a valid path, return it return result # Otherwise backtrack visited.remove((next_x, next_y)) return [] visited = set() visited.add(start) return dfs(maze, start, end, [start], visited)"},{"question":"You are tasked with writing a Python function, `generate_ticket_id(order_id)`, that takes an order ID as input and generates a unique ticket ID for an event booking system. The ticket ID should be created by reversing the order ID, appending the current date in `YYYYMMDD` format, and finally adding a random 4-digit number. # Task Requirements: 1. Implement the function `generate_ticket_id(order_id)`. 2. Use the `datetime` module to get the current date in `YYYYMMDD` format. 3. Use the `random` module to generate a random 4-digit number. 4. Concatenate the reversed order ID, current date, and random 4-digit number to form the ticket ID. 5. The function should return the generated ticket ID as a string. # Function Signature: ```python def generate_ticket_id(order_id: str) -> str: pass ``` # Example: If the order ID is `12345` and today\'s date is `20231023`, and the random 4-digit number generated is `6789`, the function should return: ``` 54321202310236789 ``` # Notes: - Ensure the generated ticket ID is unique by incorporating the current date and a random number. - Handle potential edge cases where the order ID might be of varying lengths. - Ensure the function is robust and can handle unexpected inputs gracefully.","solution":"import datetime import random def generate_ticket_id(order_id): Generates a unique ticket ID based on the order ID. The resulting ticket ID is a concatenation of the reversed order ID, the current date in YYYYMMDD format, and a random 4-digit number. if not isinstance(order_id, str): raise ValueError(\\"Order ID must be a string\\") reversed_order_id = order_id[::-1] current_date = datetime.datetime.now().strftime(\\"%Y%m%d\\") random_number = f\\"{random.randint(1000, 9999)}\\" ticket_id = f\\"{reversed_order_id}{current_date}{random_number}\\" return ticket_id"},{"question":"In this task, you\'ll implement a function that utilizes dynamic programming to compute the minimum edit distance (Levenshtein distance) between two strings. The edit distance represents the number of insertions, deletions, or substitutions required to transform one string into another. **Function Specification:** - **Function Name:** `min_edit_distance` - **Parameters:** - `str1`: The first input string. Example: `\\"kitten\\"` - `str2`: The second input string. Example: `\\"sitting\\"` - **Returns:** Integer representing the minimum edit distance between the two strings. **Steps:** 1. **Matrix Initialization:** - Create a matrix `dp` of size `(len(str1) + 1) x (len(str2) + 1)` initialized with zeros. - The value at `dp[i][j]` will represent the edit distance between `str1[:i]` and `str2[:j]`. 2. **Base Cases:** - Fill the first row with the column indices, i.e., `dp[i][0] = i` for all `i`, since transforming any string to an empty string requires `i` deletions. - Fill the first column with the row indices, i.e., `dp[0][j] = j` for all `j`, since transforming an empty string to any string requires `j` insertions. 3. **Matrix Filling:** - Iterate through the matrix and fill it based on the following conditions: - If the characters from `str1` and `str2` match at the current indices, the cost is the same as the value from the diagonal left-up cell: `dp[i][j] = dp[i-1][j-1]`. - If the characters do not match, consider the minimum cost from three possibilities: insertion, deletion, or substitution. Hence, `dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + 1)`. 4. **Result:** - The value at `dp[-1][-1]` will represent the minimum edit distance between `str1` and `str2`. Example Usage: ```python str1 = \\"kitten\\" str2 = \\"sitting\\" print(min_edit_distance(str1, str2)) # Output: 3 ```","solution":"def min_edit_distance(str1, str2): Returns the minimum edit distance (Levenshtein distance) between two strings. m, n = len(str1), len(str2) # Initialize the matrix with zeros and respective base case values dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i-1][j] + 1, # Deletion dp[i][j-1] + 1, # Insertion dp[i-1][j-1] + 1) # Substitution return dp[m][n]"},{"question":"Implement a function named `unique_frequencies` that receives a list of integers and determines whether all the integer frequencies in the list are unique. The function should return `True` if all frequencies are unique, and `False` otherwise. The function should be efficient in terms of time and space complexity, and handle both positive and negative integers. Parameters: - `nums` (List[int]): A list of integers which may contain duplicates. Constraints: - The function should use a dictionary to count the frequencies of each integer. - Ensure that the solution has at most O(n) time complexity, where n is the length of the list. Example: ```python # Example usage of the function print(unique_frequencies([1, 2, 2, 1, 1, 3])) # Output: True print(unique_frequencies([1, 2])) # Output: False print(unique_frequencies([-1, -2, -2, -1, -1]))# Output: True ```","solution":"def unique_frequencies(nums): Determine if all frequencies of integers in the list are unique. Parameters: nums (List[int]): A list of integers. Returns: bool: True if frequencies are unique, False otherwise. from collections import Counter if not nums: return True # Count the frequency of each number num_count = Counter(nums) # Get the frequencies as a list frequencies = list(num_count.values()) # Use a set to check if frequencies are unique return len(frequencies) == len(set(frequencies))"},{"question":"You have been asked to write a Python function named `removeDuplicates` that removes duplicate values from a list while maintaining the original order of elements. The function should return a new list without duplicates, keeping the first occurrence of each element in the given list. The function `removeDuplicates` should accept one argument: 1. `input_list` (a list): This parameter represents the input list from which duplicates need to be removed. It is important that the function retains the initial order of elements as they appear in the input list. Here is the signature of the `removeDuplicates` function you need to implement: ```python def removeDuplicates(input_list: list) -> list: # Implementation here ```","solution":"def removeDuplicates(input_list: list) -> list: Remove duplicates from the list while maintaining the original order. Parameters: input_list (list): The input list from which duplicates need to be removed. Returns: list: A new list without duplicates, keeping the order of first occurrences. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Design a function `parse_log` that processes a server log file, extracts specific information, and summarizes it. The log file consists of multiple lines, each adhering to the following format: `[timestamp] [log_level] [message]`, where: - `timestamp` represents the date and time in the format `yyyy-mm-dd HH:MM:SS`. - `log_level` represents the severity of the log, such as `INFO`, `WARNING`, or `ERROR`. - `message` contains the description of the log event. Your task is to: 1. Parse the log file, and count the number of log entries for each log level. 2. Collect and return the timestamps of the latest log entry of each level. # Specifications: - The function should take a single argument `logfile` which is the path to the log file. - The function should return a dictionary with two keys: `count` and `latest_timestamp`. - The value for `count` should be another dictionary where keys are log levels (`INFO`, `WARNING`, `ERROR`) and values are the respective counts of log entries. - The value for `latest_timestamp` should be another dictionary where keys are log levels (`INFO`, `WARNING`, `ERROR`) and values are the latest timestamp for the respective log level. # Function Signature: ```python def parse_log(logfile: str) -> dict: pass ``` # Example: Given a log file with the following content: ``` 2023-01-01 10:00:00 INFO Server started 2023-01-01 12:00:00 WARNING Disk space low 2023-01-01 13:00:00 INFO User login 2023-01-01 15:00:00 ERROR Unhandled exception 2023-01-01 16:00:00 INFO Server stopped ``` Calling `parse_log(\\"log.txt\\")` should return: ```python { \\"count\\": { \\"INFO\\": 3, \\"WARNING\\": 1, \\"ERROR\\": 1 }, \\"latest_timestamp\\": { \\"INFO\\": \\"2023-01-01 16:00:00\\", \\"WARNING\\": \\"2023-01-01 12:00:00\\", \\"ERROR\\": \\"2023-01-01 15:00:00\\" } } ``` Your implementation should be efficient and correctly handle the format specified, providing accurate counts and latest timestamps for each log level.","solution":"def parse_log(logfile: str) -> dict: Processes a server log file, extracts specific information, and summarizes it. Args: - logfile (str): Path to the log file. Returns: - dict: A dictionary containing count of log levels and latest timestamp for each log level. log_counts = {\\"INFO\\": 0, \\"WARNING\\": 0, \\"ERROR\\": 0} latest_timestamps = {\\"INFO\\": \\"\\", \\"WARNING\\": \\"\\", \\"ERROR\\": \\"\\"} with open(logfile, \'r\') as f: for line in f: parts = line.strip().split(\' \', 2) timestamp = parts[0] + \' \' + parts[1] log_level = parts[2].split()[0] if log_level in log_counts: log_counts[log_level] += 1 if timestamp > latest_timestamps[log_level]: latest_timestamps[log_level] = timestamp return { \\"count\\": log_counts, \\"latest_timestamp\\": latest_timestamps }"},{"question":"You are required to write a function `evaluate_KNN_performance` to perform experiments on a K-Nearest Neighbors (KNN) classifier using Scikit-Learn. The function should follow the following specs: Function Signature: ```python def evaluate_KNN_performance(X_train, X_test, y_train, y_test, verbose=False): ``` Parameters: - `X_train`: array-like of shape (n_samples, n_features) - Training data. - `X_test`: array-like of shape (n_samples, n_features) - Testing data. - `y_train`: array-like of shape (n_samples,) - Training class labels. - `y_test`: array-like of shape (n_samples,) - Testing class labels. - `verbose`: bool, default=False - Whether to print a single line summary or a full report to the console. Returns: - The function does not return any value but prints either a brief summary or a detailed classification report based on the verbosity. Functionality: 1. **Train the KNN Classifier**: Train a K-Nearest Neighbors (KNN) classifier using the training data with `n_neighbors` set to 5. 2. **Evaluation**: Evaluate the accuracy of the classifier on the testing data and get the value of `n_neighbors` used. 3. **Timing**: Measure the time taken to train and test the classifier. 4. **Verbose Reporting**: - If `verbose` is `False`: Print a single line summarizing the accuracy, `n_neighbors` parameter, and time elapsed. - If `verbose` is `True`: Print a detailed classification report. Libraries: - You must use the following libraries: - `time` for measuring execution time. - `sklearn.metrics.classification_report` for printing the detailed classification report. - `sklearn.neighbors.KNeighborsClassifier` for the K-Nearest Neighbors classifier. # Example Usage: ```python from sklearn.model_selection import train_test_split from sklearn.datasets import load_iris # Load dataset data = load_iris() X, y = data.data, data.target # Split dataset into train and test X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Evaluate KNN performance evaluate_KNN_performance(X_train, X_test, y_train, y_test, verbose=True) ``` # Requirements: - The function must adhere to the structure and specifications above. - You are required to use `time.time` and `sklearn.metrics.classification_report` as specified in the problem. - Your solution should aim to be efficient and clear.","solution":"import time from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import classification_report, accuracy_score def evaluate_KNN_performance(X_train, X_test, y_train, y_test, verbose=False): Evaluates the performance of a K-Nearest Neighbors (KNN) classifier. Parameters: - X_train: Training data - X_test: Testing data - y_train: Training class labels - y_test: Testing class labels - verbose: If True, prints detailed report. If False, prints summary. # Initialize the KNN classifier with n_neighbors=5 knn = KNeighborsClassifier(n_neighbors=5) # Measure the start time start_time = time.time() # Train the KNN classifier knn.fit(X_train, y_train) # Predict the labels for the test set y_pred = knn.predict(X_test) # Measure the end time end_time = time.time() # Calculate the accuracy accuracy = accuracy_score(y_test, y_pred) # Calculate the time taken elapsed_time = end_time - start_time # Print results based on verbosity if verbose: print(f\\"Detailed classification report:n\\") print(classification_report(y_test, y_pred)) else: print(f\\"Accuracy: {accuracy:.2f}, n_neighbors: 5, Time elapsed: {elapsed_time:.2f} seconds\\")"},{"question":"You are tasked with writing a function that reads in a text file containing a list of integers (one integer per line), calculates the moving average of the integers over a specified window size, and writes the resulting moving averages to a new text file. The moving average for a position `i` in the list is defined as the average of `window` number of elements up to and including position `i`. The function `calculate_moving_average(input_filename, output_filename, window)` should: 1. Read integers from the input text file. 2. Calculate the moving average for each integer position using the specified window size. 3. Write the resulting moving averages to the output text file, with each moving average on a new line. The function parameters are: - `input_filename`: a string representing the path to the input text file containing the list of integers. - `output_filename`: a string representing the path to the output text file where the moving averages should be written. - `window`: an integer specifying the number of elements to include in the moving average calculation. **Example Usage:** ```python calculate_moving_average(\'input.txt\', \'output.txt\', 3) ```","solution":"def calculate_moving_average(input_filename, output_filename, window): def compute_moving_average(nums, window): averages = [] for i in range(len(nums)): start_index = max(0, i - window + 1) window_elements = nums[start_index:i + 1] window_sum = sum(window_elements) window_count = len(window_elements) averages.append(window_sum / window_count) return averages with open(input_filename, \'r\') as infile: numbers = [int(line.strip()) for line in infile.readlines()] moving_averages = compute_moving_average(numbers, window) with open(output_filename, \'w\') as outfile: for ma in moving_averages: outfile.write(f\\"{ma}n\\")"},{"question":"You are tasked with writing a Python function that takes a string containing a mathematical expression and evaluates it. The expression will contain integers, the operators `+`, `-`, `*`, `/`, and parentheses `(` and `)`. Your function should handle operator precedence and parentheses correctly. Implement this using the shunting yard algorithm for converting the expression to Reverse Polish Notation (RPN) and then evaluate the RPN. Your function should be named `evaluate_expression`. **Function Signature:** ```python def evaluate_expression(expression: str) -> float: ``` **Parameters:** - `expression`: A string containing a mathematical expression with integers and the operators `+`, `-`, `*`, `/`, and parentheses `(` and `)`. **Returns:** - A float representing the evaluated result of the expression. **Examples:** ```python evaluate_expression(\\"3 + 5 * 2\\") # Output: 13.0 evaluate_expression(\\"(1 + 2) * 4\\") # Output: 12.0 evaluate_expression(\\"10 + (6 / 2) - 3\\") # Output: 10.0 ``` **Note:** - The division operator `/` should perform float division. - You can assume the input expression is valid and does not contain any spaces surrounding the operators or parentheses.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression using the Shunting Yard algorithm to convert to Reverse Polish Notation (RPN) and then evaluates the RPN. def shunting_yard(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit() or (expression[i] == \'-\' and (i == 0 or expression[i-1] in \'()+-*/\')): num = expression[i] i += 1 while i < len(expression) and (expression[i].isdigit() or expression[i] == \'.\'): num += expression[i] i += 1 output.append(num) continue elif expression[i] in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[expression[i]]): output.append(operators.pop()) operators.append(expression[i]) elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() i += 1 while operators: output.append(operators.pop()) return output def evaluate_rpn(rpn): stack = [] for token in rpn: if token not in \'+-*/\': stack.append(float(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a / b) return stack[0] rpn = shunting_yard(expression) return evaluate_rpn(rpn)"},{"question":"You are required to implement a function `identify_duplicate_transactions(transactions: List[Dict[str, Union[str, int]]]) -> List[Dict[str, Union[str, int]]]` that receives a list of transactions and identifies transactions that are likely duplicates. Each transaction is represented as a dictionary with the following keys: `id`, `timestamp`, `amount`, `merchant`, and `card_number`. To identify duplicate transactions, follow these rules: 1. Transactions are considered duplicates if they have the same `amount` and occur within 60 seconds of each other, from the same `card_number`. 2. The output should be a list containing dictionaries with the same structure as the input list, but only the transactions that have duplicates. Here\'s an example of the input and the expected output: **Input:** ```python transactions = [ {\\"id\\": \\"1\\", \\"timestamp\\": 1609459200, \\"amount\\": 50, \\"merchant\\": \\"A\\", \\"card_number\\": \\"1234\\"}, {\\"id\\": \\"2\\", \\"timestamp\\": 1609459260, \\"amount\\": 50, \\"merchant\\": \\"B\\", \\"card_number\\": \\"1234\\"}, {\\"id\\": \\"3\\", \\"timestamp\\": 1609459320, \\"amount\\": 50, \\"merchant\\": \\"A\\", \\"card_number\\": \\"5678\\"}, {\\"id\\": \\"4\\", \\"timestamp\\": 1609459380, \\"amount\\": 100, \\"merchant\\": \\"A\\", \\"card_number\\": \\"1234\\"}, {\\"id\\": \\"5\\", \\"timestamp\\": 1609459440, \\"amount\\": 100, \\"merchant\\": \\"B\\", \\"card_number\\": \\"1234\\"}, ] ``` **Output:** ```python [ {\\"id\\": \\"1\\", \\"timestamp\\": 1609459200, \\"amount\\": 50, \\"merchant\\": \\"A\\", \\"card_number\\": \\"1234\\"}, {\\"id\\": \\"2\\", \\"timestamp\\": 1609459260, \\"amount\\": 50, \\"merchant\\": \\"B\\", \\"card_number\\": \\"1234\\"}, {\\"id\\": \\"4\\", \\"timestamp\\": 1609459380, \\"amount\\": 100, \\"merchant\\": \\"A\\", \\"card_number\\": \\"1234\\"}, {\\"id\\": \\"5\\", \\"timestamp\\": 1609459440, \\"amount\\": 100, \\"merchant\\": \\"B\\", \\"card_number\\": \\"1234\\"}, ] ``` In the example above, transactions with `id` \\"1\\" and \\"2\\" are duplicates due to having the same amount and occurring within 60 seconds, under the same card number. Similarly, transactions \\"4\\" and \\"5\\" are duplicates. Function Signature: ```python def identify_duplicate_transactions(transactions: List[Dict[str, Union[str, int]]]) -> List[Dict[str, Union[str, int]]]: pass ``` Constraints: - `transactions` will contain at most 10,000 elements. - Each transaction dictionary will contain the necessary keys with correct data types. - The `timestamp` values are in Unix epoch format.","solution":"from typing import List, Dict, Union def identify_duplicate_transactions(transactions: List[Dict[str, Union[str, int]]]) -> List[Dict[str, Union[str, int]]]: # Sort the transactions by timestamp transactions.sort(key=lambda x: x[\'timestamp\']) # A dictionary to hold card_number -> list of (timestamp, amount, index in transactions list) card_to_transactions = {} # Resulting list of duplicates duplicates = [] for i, transaction in enumerate(transactions): card_number = transaction[\'card_number\'] if card_number not in card_to_transactions: card_to_transactions[card_number] = [] current_list = card_to_transactions[card_number] amount = transaction[\'amount\'] timestamp = transaction[\'timestamp\'] # Check existing transactions for duplicates for previous_transaction in current_list: prev_timestamp, prev_amount, prev_index = previous_transaction if prev_amount == amount and (timestamp - prev_timestamp) <= 60: duplicates.append(transactions[prev_index]) duplicates.append(transaction) # Add current transaction to the list for the card current_list.append((timestamp, amount, i)) # Remove duplicates if any duplicates = list({trans[\'id\']: trans for trans in duplicates}.values()) return duplicates"},{"question":"Implement a function to perform k-means clustering on a given DataFrame, return the cluster centers, and predict the cluster labels for the original data points. The function should output with: centers (ndarray): The coordinates of the cluster centers. labels (ndarray): The cluster labels for each point in the original data. You should write self-contained code starting with: ``` import pandas as pd from sklearn.cluster import KMeans def task_func(df, n_clusters): ```","solution":"import pandas as pd from sklearn.cluster import KMeans def task_func(df, n_clusters): Performs k-means clustering on the given DataFrame and returns the cluster centers and labels. Parameters: df (pd.DataFrame): The input data for clustering. n_clusters (int): The number of clusters to form. Returns: centers (ndarray): The coordinates of the cluster centers. labels (ndarray): The cluster labels for each point in the original data. kmeans = KMeans(n_clusters=n_clusters) kmeans.fit(df) centers = kmeans.cluster_centers_ labels = kmeans.labels_ return centers, labels"},{"question":"Implement a function that takes a string containing a mathematical expression (with only non-negative integers and the operators +, -, *, and /) and returns the calculated result as an integer. The function should correctly handle operator precedence and parentheses. You are not allowed to use the `eval()` function or similar Python built-in functions for evaluation. The function signature should be: ``` def calculate_expression(expression: str) -> int: ``` The function should: - Parse the given expression. - Handle operator precedence (+, -, *, /). - Process parentheses correctly. - Return the correct integer result. Example: ``` expression = \\"3 + 5 * (2 - 8)\\" result = calculate_expression(expression) # Output: -25 ```","solution":"def calculate_expression(expression: str) -> int: def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(int(left / right)) # integer division def evaluate(expression): i = 0 values = [] operators = [] while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_op(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_op(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_op(operators, values) return values[-1] return evaluate(expression)"},{"question":"In this exercise, your task is to implement a linear regression function using the `LinearRegression` class from the `sklearn.linear_model` module. You will also use the `mean_squared_error` and `r2_score` functions from the `sklearn.metrics` module to evaluate your model\'s performance. # Function Name - `linear_regression_model` # Function Description This function should perform the following tasks: 1. Train a Linear Regression model using the provided training data (`X_train`, `y_train`). 2. Make predictions on the testing data (`X_test`). 3. Compute and return the mean squared error and R^2 score of the predictions. 4. Return the predicted values and the performance metrics. # Parameters - `X_train`: numpy array or pandas DataFrame, the training features. - `y_train`: numpy array or pandas Series, the training targets. - `X_test`: numpy array or pandas DataFrame, the testing features. - `y_test`: numpy array or pandas Series, the testing targets. # Return - `y_pred`: numpy array, the predicted values for the testing data. - `mse`: float, the mean squared error of the predictions. - `r2`: float, the R^2 score of the predictions. # Libraries - `sklearn.linear_model.LinearRegression` - `sklearn.metrics.mean_squared_error` - `sklearn.metrics.r2_score` # Example Usage ```python # Example usage (not part of the function): X_train, X_test, y_train, y_test = ... # your dataset split here y_pred, mse, r2 = linear_regression_model(X_train, y_train, X_test, y_test) ``` Implement the `linear_regression_model` function as described above. You can refer to the documentation of `sklearn.linear_model.LinearRegression`, `sklearn.metrics.mean_squared_error`, and `sklearn.metrics.r2_score` for details on their usage.","solution":"from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score def linear_regression_model(X_train, y_train, X_test, y_test): Trains a Linear Regression model and evaluates it using mean squared error and R^2 score. Parameters: - X_train: Training features - y_train: Training targets - X_test: Testing features - y_test: Testing targets Returns: - y_pred: Predicted values for the testing data - mse: Mean squared error of the predictions - r2: R^2 score of the predictions # Initialize the Linear Regression model model = LinearRegression() # Train the model model.fit(X_train, y_train) # Make predictions on the test data y_pred = model.predict(X_test) # Calculate the mean squared error and R^2 score mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) return y_pred, mse, r2"},{"question":"You are developing a software simulation of a simple 2D game board where players can place and move tokens. The board is represented as a grid of cells, each identified by its coordinates (row, column). Tokens can only be moved horizontally or vertically to adjacent cells, not diagonally. Your task is to implement a function that, given the current positions of multiple tokens and a sequence of moves, updates and returns the final positions of the tokens on the board. Each move is defined by the token index and a direction (`\'up\'`, `\'down\'`, `\'left\'`, or `\'right\'`). If a move would place a token outside the boundaries of the board, it should be ignored (i.e., the token remains in its current position). You are provided with: - The dimensions of the board (number of rows and columns). - A list of tuples representing the initial positions of the tokens, where each tuple contains two integers (row, column). - A list of moves, where each move is represented by a tuple containing an integer (token index) and a string (direction). Your task is to implement the function `move_tokens` which follows the description above. The function signature is as follows: ```python def move_tokens(board_dimensions, initial_positions, moves): - board_dimensions: a tuple of two integers (rows, columns) representing the dimensions of the board. - initial_positions: a list of tuples [(r1, c1), (r2, c2), ...] representing the initial positions of the tokens. - moves: a list of tuples [(index1, direction1), (index2, direction2), ...] where - indexN is an integer representing the index of the token in initial_positions. - directionN is a string representing the direction of the move (\'up\', \'down\', \'left\', \'right\'). Returns: a list of tuples representing the final positions of the tokens after all valid moves have been applied. pass ``` Ensure that the function correctly updates the positions of the tokens according to the given moves and the rules of the game board.","solution":"def move_tokens(board_dimensions, initial_positions, moves): - board_dimensions: a tuple of two integers (rows, columns) representing the dimensions of the board. - initial_positions: a list of tuples [(r1, c1), (r2, c2), ...] representing the initial positions of the tokens. - moves: a list of tuples [(index1, direction1), (index2, direction2), ...] where - indexN is an integer representing the index of the token in initial_positions. - directionN is a string representing the direction of the move (\'up\', \'down\', \'left\', \'right\'). Returns: a list of tuples representing the final positions of the tokens after all valid moves have been applied. rows, columns = board_dimensions positions = list(initial_positions) # Create a modifiable copy of initial positions for index, direction in moves: if index < 0 or index >= len(positions): continue # Ignore invalid token index row, col = positions[index] if direction == \'up\': if row > 0: positions[index] = (row - 1, col) elif direction == \'down\': if row < rows - 1: positions[index] = (row + 1, col) elif direction == \'left\': if col > 0: positions[index] = (row, col - 1) elif direction == \'right\': if col < columns - 1: positions[index] = (row, col + 1) return positions"},{"question":"You are given an array of positive integers representing daily temperatures. Your task is to implement a function that determines the number of days until a warmer temperature for each day in the array. If there is no future day with a warmer temperature, store a zero for that day. Use the `collections.deque` data structure to facilitate your solution. Implement the function `daily_temperatures(T)`, which calculates the results for the input array. ```python def daily_temperatures(T): pass ``` Input: - `T`: A list of integers where each integer represents the temperature on a given day. Output: - A list of integers where each integer represents the number of days until a warmer temperature for that day. If there is no such day, store `0` instead. **Note:** - You are required to use `collections.deque` to help maintain the indices of the temperatures. Example: ```python T = [73, 74, 75, 71, 69, 72, 76, 73] daily_temperatures(T) # Output: [1, 1, 4, 2, 1, 1, 0, 0] ```","solution":"from collections import deque def daily_temperatures(T): Returns a list of days until a warmer temperature for each day in the input list T. if not T: return [] n = len(T) result = [0] * n stack = deque() for i in range(n): while stack and T[i] > T[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"You are given a list of dictionaries, where each dictionary represents a student and contains their \'name\' and \'grades\'. Write a function named `calculate_averages` that takes this list of dictionaries and returns a dictionary where each key is a student\'s name and the corresponding value is their average grade rounded to two decimal places. Consider the following points: - Each student\'s grades are stored in a list under the \'grades\' key. - If a student has no grades, the average should be considered as 0. Example input: ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [85, 90, 78]}, {\\"name\\": \\"Bob\\", \\"grades\\": [80, 70, 60, 90]}, {\\"name\\": \\"Charlie\\", \\"grades\\": []} ] ``` Expected output: ```python { \\"Alice\\": 84.33, \\"Bob\\": 75.0, \\"Charlie\\": 0 } ``` The function signature should be: ```python def calculate_averages(students): ```","solution":"def calculate_averages(students): Returns a dictionary where each key is a student\'s name and the value is their average grade rounded to two decimal places. averages = {} for student in students: name = student[\'name\'] grades = student[\'grades\'] avg = round(sum(grades) / len(grades), 2) if grades else 0 averages[name] = avg return averages"},{"question":"Given two strings s and t, write a function to determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. The function should: - Return a boolean value indicating whether the two strings are isomorphic. - Raise a ValueError if the inputs are not of the same length. You should write self-contained code starting with: ``` def is_isomorphic(s: str, t: str): ```","solution":"def is_isomorphic(s: str, t: str) -> bool: Determine if two strings s and t are isomorphic. Args: s (str): First string. t (str): Second string. Returns: bool: True if the strings are isomorphic, False otherwise. Raises: ValueError: If the input strings are not of the same length. if len(s) != len(t): raise ValueError(\\"The input strings must have the same length.\\") map_s_to_t = {} map_t_to_s = {} for char_s, char_t in zip(s, t): if char_s not in map_s_to_t and char_t not in map_t_to_s: map_s_to_t[char_s] = char_t map_t_to_s[char_t] = char_s elif map_s_to_t.get(char_s) != char_t or map_t_to_s.get(char_t) != char_s: return False return True"},{"question":"You are tasked with writing a function named `find_shortest_path` that takes a dictionary representing a graph, a starting node, and an ending node. This function will find the shortest path between the start and end nodes using the Breadth-First Search (BFS) algorithm. The graph is represented as an adjacency list where each key is a node, and its value is a list of adjacent nodes (i.e., the nodes it is directly connected to). **Function Signature** ```python def find_shortest_path(graph: dict, start: str, end: str) -> list: pass ``` # Parameters: 1. **graph (dict)**: A dictionary where keys are nodes and values are lists of adjacent nodes. The nodes are represented as strings. 2. **start (str)**: The starting node for the path search. 3. **end (str)**: The ending node for the path search. # Return: - Returns a list of nodes representing the shortest path from `start` to `end`. If no path exists, return an empty list. # Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start = \'A\' end = \'F\' result = find_shortest_path(graph, start, end) print(result) # Output might be [\'A\', \'C\', \'F\'] or [\'A\', \'B\', \'E\', \'F\'] depending on neighboring nodes\' order. ``` # Note: - Ensure that the BFS algorithm efficiently finds the shortest path. - If there are multiple shortest paths, returning any one of them is acceptable.","solution":"from collections import deque def find_shortest_path(graph: dict, start: str, end: str) -> list: Finds the shortest path in a graph using the Breadth-First Search (BFS) algorithm. Parameters: graph (dict): A dictionary representing the graph as an adjacency list. start (str): The starting node. end (str): The ending node. Returns: list: The list of nodes representing the shortest path from start to end. Returns an empty list if no path exists. if start not in graph or end not in graph: return [] queue = deque([(start, [start])]) visited = set() while queue: current_node, path = queue.popleft() if current_node == end: return path visited.add(current_node) for neighbor in graph[current_node]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return []"},{"question":"You are required to write a Python function named `find_longest_sequence` that analyzes a list of integers and identifies the longest sequence of consecutive numbers. This function should handle the following tasks: 1. The function should take one parameter: - `num_list`: a list of integers. 2. The function should identify sequences of consecutive numbers in the list. 3. The function should return the longest sequence of consecutive numbers as a list. If there is a tie (i.e., multiple sequences of the same length), return the first one that appears in the list. 4. If the input list is empty, the function should return an empty list. **Constraints**: - The integers in the list may not be sorted. **Function Signature**: ```python def find_longest_sequence(num_list: List[int]) -> List[int]: pass ``` **Example**: ```python find_longest_sequence([1, 9, 3, 10, 4, 20, 2]) # Returns: [1, 2, 3, 4] find_longest_sequence([5, 2, 99, 3, 4, 1, 100]) # Returns: [1, 2, 3, 4, 5] find_longest_sequence([10, 5, 6, 3, 2, 1]) # Returns: [1, 2, 3] find_longest_sequence([]) # Returns: [] ```","solution":"from typing import List def find_longest_sequence(num_list: List[int]) -> List[int]: if not num_list: return [] num_set = set(num_list) longest_sequence = [] for num in num_set: if num - 1 not in num_set: # start of a new sequence current_num = num current_sequence = [] while current_num in num_set: current_sequence.append(current_num) current_num += 1 if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence return longest_sequence"},{"question":"Write a function that takes a pandas DataFrame with numerical columns and a list of column names. Replace any NaN values in the specified columns with the column\'s mean value. Return the updated DataFrame. The function should output: pd.DataFrame: The updated DataFrame with NaN values replaced by the mean values of the specified columns. You should write self-contained code starting with: ``` import pandas as pd def task_func(df, columns): ```","solution":"import pandas as pd def task_func(df, columns): Replace any NaN values in the specified columns with the column\'s mean value. Parameters: df (pd.DataFrame): A DataFrame with numerical columns. columns (list): List of column names to replace NaN values in. Returns: pd.DataFrame: The updated DataFrame with NaN values replaced by the mean values of the specified columns. for column in columns: if column in df.columns: mean_value = df[column].mean() df[column].fillna(mean_value, inplace=True) return df"},{"question":"Design a function named `generate_sales_summary` that processes a list of tuples containing sales data. Each tuple consists of a product name (string) and the amount sold (integer). Your function should perform the following operations: 1. Group the sales data by product names. 2. Calculate the total amount sold for each product. 3. Sort the products by their total sales in descending order. 4. Return a list of tuples where each tuple contains a product name and its total sales amount. **Function Signature:** ```python def generate_sales_summary(sales_data: List[Tuple[str, int]]) -> List[Tuple[str, int]]: ``` **Example Usage:** ```python sales = [ (\'apple\', 10), (\'banana\', 5), (\'apple\', 20), (\'banana\', 15), (\'orange\', 7) ] result = generate_sales_summary(sales) # Expected output: [(\'apple\', 30), (\'banana\', 20), (\'orange\', 7)] ```","solution":"from typing import List, Tuple from collections import defaultdict def generate_sales_summary(sales_data: List[Tuple[str, int]]) -> List[Tuple[str, int]]: Processes the sales data to summarize total amounts sold per product and sorts them in descending order of sales. Args: sales_data (List[Tuple[str, int]]): List of tuples where each tuple contains product name and amount sold. Returns: List[Tuple[str, int]]: List of tuples where each tuple contains product name and total sales amount, sorted by sales in descending order. sales_summary = defaultdict(int) # Group sales data by product and calculate total amount sold for product, amount in sales_data: sales_summary[product] += amount # Convert the dictionary to a list of tuples and sort by total sales in descending order sorted_sales = sorted(sales_summary.items(), key=lambda x: x[1], reverse=True) return sorted_sales"},{"question":"You are tasked with writing a function `replace_words_in_file(file_path, replacements)` that replaces specified words in a file based on provided replacement mappings. The function will take two parameters: `file_path`, the path to the file to be modified, and `replacements`, a dictionary where the keys are strings representing words to be replaced and the values are strings representing the replacement words. **Function Signature:** ```python def replace_words_in_file(file_path: str, replacements: dict) -> None: ``` # Detailed Steps: 1. Read the contents of the file. 2. Replace all occurrences of each key in the `replacements` dictionary with their corresponding value in the file\'s content. 3. Write the modified content back to the same file. # Constraints: - Assume the file contains text data (not binary). - The `file_path` parameter is a valid path to an existing file. - The `replacements` dictionary contains unique keys and values. # Example: ```python # Example file content before replacement: \\"Hello, world! Welcome to the coding test.\\" file_path = \'example.txt\' replacements = {\'Hello\': \'Hi\', \'world\': \'Earth\', \'coding\': \'programming\'} replace_words_in_file(file_path, replacements) # Expected file content after replacement: \\"Hi, Earth! Welcome to the programming test.\\" ``` # Input: - `file_path`: a string representing the path to the file. - `replacements`: a dictionary where keys are words to be replaced, and values are words to replace them with. # Output: - The function does not return a value. # Requirements: - Ensure that the function handles large files efficiently. - Preserve the original structure of the file except for the replaced words. - Perform the replacements in a case-sensitive manner. - If a word to be replaced is part of another word, it should still be replaced (e.g., replacing \\"cat\\" with \\"dog\\" changes \\"catalog\\" to \\"dogalog\\").","solution":"def replace_words_in_file(file_path: str, replacements: dict) -> None: Replaces specified words in a file based on given replacement mappings. :param file_path: Path to the file to be modified. :param replacements: Dictionary where keys are words to be replaced and values are the new words. with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read() for old_word, new_word in replacements.items(): content = content.replace(old_word, new_word) with open(file_path, \'w\', encoding=\'utf-8\') as file: file.write(content)"},{"question":"In this problem, you are required to write a function that calculates the average rating of a list of products from an e-commerce website. Each product has multiple reviews, each review includes a rating from 1 to 5 stars. **Function Specification**: - **Function Name**: `calculate_average_rating` - **Input**: One parameter named `products`, which is a list of dictionaries. Each dictionary contains: - `product_id` (integer): Unique identifier for the product. - `reviews` (list of integers): List of ratings for the product ranging from 1 to 5. - **Output**: The function should return a dictionary where the keys are the product IDs and the values are the average ratings (as floating-point numbers) for each product. **Instructions**: 1. Iterate through the list of products. 2. For each product, calculate the average rating based on its reviews. 3. Store the product ID and its calculated average rating in the output dictionary. 4. If a product has no reviews, the average rating should be considered as 0.0. **Requirements**: - Ensure that the average rating is a floating-point number rounded to two decimal places. - Handle edge cases such as an empty list of products or products with no reviews. **Example Usage**: ```python products = [ {\\"product_id\\": 1, \\"reviews\\": [5, 4, 3, 5, 4]}, {\\"product_id\\": 2, \\"reviews\\": [2, 3]}, {\\"product_id\\": 3, \\"reviews\\": []} ] average_ratings = calculate_average_rating(products) # average_ratings should be {1: 4.20, 2: 2.50, 3: 0.00} ```","solution":"def calculate_average_rating(products): Calculate the average rating for each product in the list. :param products: List of dictionaries, each containing a product_id and a list of reviews. :return: Dictionary with product IDs as keys and average ratings as values. average_ratings = {} for product in products: product_id = product.get(\\"product_id\\") reviews = product.get(\\"reviews\\", []) if reviews: average_rating = round(sum(reviews) / len(reviews), 2) else: average_rating = 0.0 average_ratings[product_id] = average_rating return average_ratings"},{"question":"In this problem, you are tasked with creating a function called `generate_html_report` in Python that takes in a dictionary of student names and their respective scores, and generates a simple HTML report. The report should list each student\'s name and score in a table format. Additionally, the report should include the average score of all students at the bottom of the table. Here\'s the detailed specification for the `generate_html_report` function: - **Function Name**: `generate_html_report` - **Parameters**: - `student_scores`: a dictionary where the key is the student\'s name (string) and the value is the student\'s score (integer). - **Tasks**: 1. Create a string `html_report` that contains the basic structure of an HTML document, including `<html>`, `<head>`, `<title>`, `<body>`, and `<table>` tags. 2. Inside the `<body>`, create a table where each row corresponds to a student and their score. 3. Calculate the average score of all students and include a row at the bottom of the table that displays the average score. 4. Ensure that the table is properly formatted with appropriate HTML tags for rows (`<tr>`) and table data cells (`<td>`). 5. Return the `html_report` string. # Example Usage ```python student_scores = { \'Alice\': 90, \'Bob\': 75, \'Charlie\': 85, \'Diana\': 80 } html_report = generate_html_report(student_scores) print(html_report) ``` # Expected Output ```html <html> <head> <title>Student Scores</title> </head> <body> <table border=\\"1\\"> <tr><th>Student</th><th>Score</th></tr> <tr><td>Alice</td><td>90</td></tr> <tr><td>Bob</td><td>75</td></tr> <tr><td>Charlie</td><td>85</td></tr> <tr><td>Diana</td><td>80</td></tr> <tr><td>Average</td><td>82.5</td></tr> </table> </body> </html> ```","solution":"def generate_html_report(student_scores): Generates an HTML report of student names and scores. Parameters: student_scores (dict): A dictionary containing student names as keys and their scores as values. Returns: str: An HTML report in the form of a string. html_report = \\"<html>n<head>n<title>Student Scores</title>n</head>n<body>n\\" html_report += \'<table border=\\"1\\">n\' html_report += \'<tr><th>Student</th><th>Score</th></tr>n\' sum_scores = 0 for student, score in student_scores.items(): html_report += f\'<tr><td>{student}</td><td>{score}</td></tr>n\' sum_scores += score average_score = sum_scores / len(student_scores) if student_scores else 0 html_report += f\'<tr><td>Average</td><td>{average_score:.1f}</td></tr>n\' html_report += \'</table>n</body>n</html>\' return html_report"},{"question":"Create a function `merge_sorted_lists`, which takes two arguments, `list1` and `list2`, both of which are lists of integers sorted in non-decreasing order. The function should merge these lists into one sorted list in non-decreasing order and return it. You are required to utilize the `heapq` library in Python to achieve the desired functionality. Specifically, use the `heapq.merge` function to merge the given sorted lists. **Function Signature:** ```python def merge_sorted_lists(list1: list[int], list2: list[int]) -> list[int]: ``` **Parameters:** - `list1` (list of int): The first sorted list of integers. - `list2` (list of int): The second sorted list of integers. **Returns:** - list of int: A single merged and sorted list of integers. **Examples:** ```python merge_sorted_lists([1, 3, 5], [2, 4, 6]) # Output: [1, 2, 3, 4, 5, 6] merge_sorted_lists([0, 2, 3], [1, 4, 5]) # Output: [0, 1, 2, 3, 4, 5] merge_sorted_lists([10, 15], [5, 20, 25]) # Output: [5, 10, 15, 20, 25] ``` **Note:** 1. Ensure to use the `heapq` library\'s `merge` function for combining the lists. 2. The input lists may contain zero or more integers. 3. If one or both of the input lists are empty, return the combined non-empty list or an empty list if both are empty. 4. The function should handle lists of varying lengths efficiently.","solution":"import heapq def merge_sorted_lists(list1: list[int], list2: list[int]) -> list[int]: Merges two sorted lists into a single sorted list using the heapq.merge function. Parameters: list1 (list of int): The first sorted list of integers. list2 (list of int): The second sorted list of integers. Returns: list of int: A single merged and sorted list of integers. return list(heapq.merge(list1, list2))"},{"question":"In this problem, you are tasked with creating a function that processes financial transactions and adjusts the account balances using Python dictionaries. You will need to implement a function called `update_balances` that updates the accounts based on the given list of transactions and returns the final states of the accounts. # Function Specification: - **Function Name:** `update_balances` - **Parameters:** - `accounts` (dict): A dictionary where the keys are account names (strings) and the values are the initial balances (floats). - `transactions` (list of tuples): A list of tuples, where each tuple represents a transaction. Each tuple will contain the account name (string) and the transaction amount (float). - **Returns:** A dictionary representing the updated account balances. # Requirements: 1. **Update Balances:** - For each transaction in the `transactions` list, update the corresponding account balance in the `accounts` dictionary. - If the account does not exist in the dictionary, add it with an initial balance of 0 and then apply the transaction. 2. **Example:** ```python accounts = { \'Alice\': 100.0, \'Bob\': 50.0, \'Charlie\': 75.0 } transactions = [ (\'Alice\', -25.0), (\'Bob\', 20.0), (\'Alice\', 30.0), (\'David\', 10.0) ] result = update_balances(accounts, transactions) print(result) # Expected output: {\'Alice\': 105.0, \'Bob\': 70.0, \'Charlie\': 75.0, \'David\': 10.0} ``` 3. **Implementation:** ```python def update_balances(accounts, transactions): for account, amount in transactions: if account not in accounts: accounts[account] = 0.0 accounts[account] += amount return accounts ``` Use this function to update the balances based on the provided list of transactions and verify that the function returns the correct final account balances. Make sure the function handles the creation of new accounts when necessary and correctly adjusts the balances based on the transaction amounts.","solution":"def update_balances(accounts, transactions): for account, amount in transactions: if account not in accounts: accounts[account] = 0.0 accounts[account] += amount return accounts"},{"question":"Write a function that takes a path to a CSV file and a column name, and returns a list of unique values from that column, sorted in ascending order. The CSV file may have any number of rows, but each row includes the same columns. The function should output: ``` list: A sorted list of unique values from the specified column in the CSV file. ``` You should write self-contained code starting with: ``` import csv def extract_unique_sorted_values(csv_file_path: str, column_name: str) -> list: ```","solution":"import csv def extract_unique_sorted_values(csv_file_path: str, column_name: str) -> list: Returns a sorted list of unique values from the specified column in the CSV file. Args: csv_file_path (str): Path to the CSV file. column_name (str): Name of the column to extract unique values from. Returns: list: Sorted list of unique values from the specified column. unique_values = set() with open(csv_file_path, newline=\'\', encoding=\'utf-8\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: unique_values.add(row[column_name]) sorted_unique_values = sorted(unique_values) return sorted_unique_values"},{"question":"You are tasked with writing a function `rotate_image_90_clockwise` that rotates a given NxN matrix representing an image by 90 degrees in the clockwise direction. This is a common operation in image processing and graphics transformation. The function should complete the rotation in-place, modifying the original matrix without using extra space for another matrix. **Function Signature:** ```python def rotate_image_90_clockwise(matrix: List[List[int]]) -> None: ``` **Requirements:** 1. The function will take a single argument: - `matrix` (List[List[int]]): A 2D list representing an NxN matrix. 2. The function should not return anything; instead, it will modify the input matrix in-place. 3. You should rotate the elements of the matrix by 90 degrees in the clockwise direction. **Example Usage:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_image_90_clockwise(matrix) print(matrix) # This should output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` **Learning Objective:** This problem helps to deepen your understanding of matrix manipulation and in-place operations, both fundamental concepts in computer science with wide-ranging applications, including computer graphics and image processing.","solution":"from typing import List def rotate_image_90_clockwise(matrix: List[List[int]]) -> None: Rotates the given NxN matrix by 90 degrees in the clockwise direction in-place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"This function generates a list of random passwords. Each password has a length of 12 characters, containing at least one uppercase letter, one lowercase letter, one digit, and one special character from the set {\'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\', \'(\', \')\'}. The function should raise the exception for: ValueError: If a password does not meet all the criteria mentioned above. The function should output: List: A list containing 10 unique passwords that meet the specified conditions. You should write self-contained code starting with: ``` import string import random def generate_passwords(): ```","solution":"import string import random def generate_passwords(): passwords = set() characters = string.ascii_letters + string.digits + \'!@#%^&*()\' while len(passwords) < 10: password = \'\'.join(random.choice(characters) for _ in range(12)) if (any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password) and any(c in \'!@#%^&*()\' for c in password)): passwords.add(password) return list(passwords)"},{"question":"Design a Python function `calculate_palindrome_index` to determine the index of the character to remove from a string to make it a palindrome. If the string is already a palindrome or can\'t be turned into one by removing just one character, return -1. This problem focuses on string manipulation and helps assess your ability to work with indexing and loops. # Requirements: 1. The function `calculate_palindrome_index` should accept a single argument: - `s`: A string containing the input to be analyzed. 2. The function should follow these steps: - If the input string `s` is already a palindrome, return -1. - If removing one character from the string will make it a palindrome, return the index of that character. - If no single character removal will result in a palindrome, return -1. 3. A palindrome is a string that reads the same forward and backward (e.g., \\"radar\\", \\"level\\"). 4. Consider performance by avoiding unnecessary recomputation and using efficient checks for palindrome properties. # Example: ```python # Example usage print(calculate_palindrome_index(\\"abca\\")) # Output should be 1, since removing \'b\' makes \\"aca\\" a palindrome print(calculate_palindrome_index(\\"radar\\")) # Output should be -1, since \\"radar\\" is already a palindrome print(calculate_palindrome_index(\\"abc\\")) # Output should be -1, since no single character removal makes it a palindrome ``` # Note: - Assume that the input string will contain only lowercase letters and will not be empty. - The function should focus on the logic to identify the correct index of character removal (if applicable). - Focus on implementing efficient checks for whether a string (or a part of it) is a palindrome.","solution":"def calculate_palindrome_index(s): Determine the index of the character to remove to make the string a palindrome. If the string is already a palindrome or can\'t be turned into one by removing just one character, return -1. def is_palindrome(sub): return sub == sub[::-1] if is_palindrome(s): return -1 n = len(s) for i in range(n): if s[i] != s[n - 1 - i]: # Check if either removing s[i] or s[n-1-i] results in a palindrome if is_palindrome(s[:i] + s[i+1:]): return i if is_palindrome(s[:n-1-i] + s[n-i:]): return n - 1 - i return -1 return -1"},{"question":"# Problem Statement: You are tasked with creating a function called `balancedParentheses()` that takes a single string parameter `expr` consisting of parentheses `(` and `)`. The goal of this function is to determine if the parentheses in the given string are balanced. The function should return `True` if the parentheses are balanced, and `False` otherwise. Balanced parentheses mean that each opening parenthesis has a corresponding closing parenthesis and the pairs are correctly nested. # Function Specification: ```python def balancedParentheses(expr): # your implementation here ``` # Examples: 1. **Input:** `\\"(())\\"` **Output:** `True` 2. **Input:** `\\"(()\\"` **Output:** `False` 3. **Input:** `\\"()()\\"` **Output:** `True` 4. **Input:** `\\"(()))\\"` **Output:** `False` # Input Constraints: - The input string `expr` will contain only the characters `(` and `)`. - The length of `expr` will be between 1 and 1000. # Implementation Details: 1. Initialize an empty stack. 2. Iterate through each character in the string. 3. If the current character is an opening parenthesis `(`, push it onto the stack. 4. If the current character is a closing parenthesis `)`, check if the stack is empty: - If the stack is empty, return `False`. - If the stack is not empty, pop the top element from the stack. 5. After processing all characters, if the stack is empty, return `True` (indicating balanced parentheses), otherwise return `False`. Example implementation: ```python def balancedParentheses(expr): stack = [] for char in expr: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack ```","solution":"def balancedParentheses(expr): stack = [] for char in expr: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"You are managing a global call center company where agents work in shifts. Each agent\'s shift is defined by the start time and end time in 24-hour format. You want to create a system to keep track of the number of agents working at any given time during the day. Write a Python function `active_agents(times)` that takes in a list of tuples representing the start and end times of each agent\'s shift and returns a list where the ith element represents the number of agents active at hour i (from 0 to 23). **Function Signature:** ```python def active_agents(times: list) -> list: # your code here ``` **Parameters:** 1. `times` (list of tuples): A list where each tuple contains two integers `(start, end)` representing the start time and end time of an agent\'s shift. **Requirements:** - The function should return a list of length 24 representing the number of agents working in each corresponding hour. - If a shift starts at `x` and ends at `y`, the agent is considered to be working in all hours from `x` to `y-1` inclusive. **Example:** ```python times = [(1, 5), (3, 7), (10, 15)] print(active_agents(times)) # Output: [0, 1, 1, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] ``` In this example: - From hours 1 to 4 (inclusive), one agent is working. - From hours 3 to 6 (inclusive), two agents are working (due to overlap). - From hours 10 to 14 (inclusive), one agent is working again.","solution":"def active_agents(times): Returns a list where the ith element represents the number of agents active at hour i (from 0 to 23). Parameters: - times: list of tuples representing the start and end times of each agent\'s shift. Example: times = [(1, 5), (3, 7), (10, 15)] print(active_agents(times)) # Output: [0, 1, 1, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] hrs = [0] * 24 for start, end in times: for hour in range(start, end): hrs[hour] += 1 return hrs"},{"question":"This function calculates the Levenshtein distance between two strings, which measures the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other. The function takes two strings as input and returns an integer representing the Levenshtein distance. The function should output with: int: The Levenshtein distance between the two input strings. You should write self-contained code starting with: ``` def levenshtein_distance(str1, str2): ```","solution":"def levenshtein_distance(str1, str2): Calculates the Levenshtein distance between two strings. Args: str1 (str): The first string. str2 (str): The second string. Returns: int: The Levenshtein distance between the two strings. m, n = len(str1), len(str2) # If one of the strings is empty if m == 0: return n if n == 0: return m # Initialize the matrix dp = [[0] * (n + 1) for _ in range(m + 1)] # Base case initialization for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: cost = 0 else: cost = 1 dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + cost) # Substitution return dp[m][n]"},{"question":"You are required to write a function called `word_count_analysis` that reads a text file and performs a word count analysis. This function will use the `collections` library to handle the counting process. The function should perform the following tasks: 1. Print a header message indicating the start of the word count analysis. 2. Take one argument: the filename of the text file to read. 3. Read the entire content of the file. 4. Convert all words to lowercase for a case-insensitive count. 5. Count the occurrence of each unique word in the file using `collections.Counter`. 6. Print the ten most common words along with their counts in descending order. **Function Specification** ```python def word_count_analysis(filename: str) -> None: Analyze the word count of a text file and print the ten most common words. Parameters: filename (str): The name of the text file to analyze. Returns: None # Example usage: word_count_analysis(\'sample_text.txt\') ```","solution":"import collections def word_count_analysis(filename: str) -> None: Analyze the word count of a text file and print the ten most common words. Parameters: filename (str): The name of the text file to analyze. Returns: None print(\\"Starting word count analysis...\\") with open(filename, \'r\', encoding=\'utf-8\') as file: content = file.read().lower() words = content.split() word_counter = collections.Counter(words) most_common_words = word_counter.most_common(10) print(\\"The ten most common words and their counts are:\\") for word, count in most_common_words: print(f\\"{word}: {count}\\")"},{"question":"You are given a linked list with `n` nodes where each node contains an integer value. The linked list may have cycles, meaning some nodes might point back to the previous nodes, forming a loop. Your task is to implement a function `detect_cycle_start()` that returns the starting node of the cycle if there is one, otherwise it returns `None`. You need to efficiently detect the cycle using Floyd’s Tortoise and Hare algorithm and return the node where the cycle begins. Function Signature: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle_start(head: ListNode) -> ListNode: # your code here ``` **Input:** - `head`: Head node of the linked list. **Output:** - The node where the cycle begins if a cycle exists, otherwise `None` **Example:** ```python # Creating a linked list: 3 -> 2 -> 0 -> -4 (cycle starts back at 2) node1 = ListNode(3) node2 = ListNode(2) node3 = ListNode(0) node4 = ListNode(-4) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 # cycle here print(detect_cycle_start(node1)) # Output: node2 (ListNode with value 2) ``` **Constraints:** - The number of nodes in the list is in the range [0, 10^4]. - The value of each node in the linked list is between -10^5 and 10^5. **Notes:** - You should first use the two-pointer method (one moving twice as fast as the other) to determine if a cycle is present. - If a cycle is detected, use the starting point algorithm where you reset one pointer to the head and move both pointers one step at a time until they meet again. The meeting point is the start of the cycle. - Aim for O(n) time complexity and O(1) space complexity.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle_start(head: ListNode) -> ListNode: if not head or not head.next: return None slow = fast = head # Detect if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If there is no cycle if not fast or not fast.next: return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"You are required to implement a function called `parse_log(log: str) -> dict`. This function should take a log of key-value pairs represented as a single string and return a dictionary with the key-value pairs parsed from the string. Each key-value pair in the log is separated by a semi-colon (`;`), and each key is separated from its associated value by a colon (`:`). The order of the key-value pairs in the dictionary should match the order in which they appear in the log string. Take note of the following additional constraints: - Keys are guaranteed to be unique within each log string. - The log string does not contain any leading or trailing whitespace but may contain extra spaces around keys or values. # Requirements: 1. Parse the given log string to extract key-value pairs. 2. Remove any leading or trailing whitespaces from the keys and values. 3. Return a dictionary with the cleaned and parsed key-value pairs. # Example: ```python assert parse_log(\\"key1: value1; key2: value2; key3: value3\\") == {\'key1\': \'value1\', \'key2\': \'value2\', \'key3\': \'value3\'} assert parse_log(\\" key1 : value1 ;key2: value2 ;key3: value3 \\") == {\'key1\': \'value1\', \'key2\': \'value2\', \'key3\': \'value3\'} ```","solution":"def parse_log(log: str) -> dict: Parses a log string of key-value pairs and returns a dictionary. Args: log (str): The log string consisting of key-value pairs. Returns: dict: A dictionary with parsed key-value pairs. result = {} log_items = log.split(\';\') for item in log_items: if item.strip(): key, value = item.split(\':\', 1) result[key.strip()] = value.strip() return result"},{"question":"You are asked to create a function named `analyze_weather_data` that processes weather data from a JSON file and performs specific operations. The data is structured such that each entry contains at least the fields \\"temperature\\", \\"humidity\\", and \\"windspeed\\". Your task is to implement the function following these steps: 1. **Load the JSON File:** Use the `pandas.read_json` function to read the JSON file from a given filename. 2. **Standardize Column Names:** Ensure the columns are labeled as `[\\"temperature\\", \\"humidity\\", \\"windspeed\\"]`. 3. **Handle Missing Values:** Fill any missing values in the DataFrame with the mean value of the corresponding column. Ensure the filled values maintain the same data type. 4. **Summarize Statistics:** Create a summary DataFrame that includes mean, median, and standard deviation for each column. 5. **Plot Histogram:** Plot a histogram for each feature. Assume you have a function `plot_histograms` that accepts the DataFrame and plots histograms for each column. 6. **Return Output:** Return the tuple of (1) the processed DataFrame where missing values are filled and (2) the summary statistics DataFrame. Here is an example format of the JSON data: ```json [ {\\"temperature\\": 22.5, \\"humidity\\": 0.56, \\"windspeed\\": 5.4}, {\\"temperature\\": 21.0, \\"humidity\\": 0.60}, ... ] ``` Your function signature should look like this: ```python def analyze_weather_data(filename: str) -> Tuple[pd.DataFrame, pd.DataFrame]: pass ``` **Requirements:** - Utilize the pandas library to handle data manipulation. - Ensure all operations strictly follow the steps outlined. - Assume the existence of the `plot_histograms` function (you don\'t need to implement it).","solution":"import pandas as pd def plot_histograms(df: pd.DataFrame): Dummy function for plotting histograms. This should be replaced with an actual implementation when used. pass def analyze_weather_data(filename: str) -> tuple: Process the weather data from a JSON file and perform operations: 1. Load JSON data 2. Standardize column names 3. Handle missing values 4. Summarize statistics 5. Plot histograms Args: filename (str): The path to the JSON file containing the weather data. Returns: tuple: A tuple containing the processed DataFrame and the summary statistics DataFrame. # Load the JSON file df = pd.read_json(filename) # Standardize column names df.columns = [\\"temperature\\", \\"humidity\\", \\"windspeed\\"] # Handle missing values by filling them with the mean value of each column df[\'temperature\'].fillna(df[\'temperature\'].mean(), inplace=True) df[\'humidity\'].fillna(df[\'humidity\'].mean(), inplace=True) df[\'windspeed\'].fillna(df[\'windspeed\'].mean(), inplace=True) # Summarize statistics summary_df = df.describe().loc[[\'mean\', \'50%\', \'std\']].rename(index={\'50%\': \'median\'}) # Plot histograms plot_histograms(df) return df, summary_df"},{"question":"# Binary Tree Inversion Inverting a binary tree means swapping the left and right children of each node in the tree. This operation is sometimes referred to as \\"mirroring\\" the tree. In this problem, you are required to implement a function that inverts a given binary tree. You are provided with a class `TreeNode` representing the nodes of the binary tree. Each node contains an integer value and pointers to its left and right children. You need to write a function `invert_tree(root)` that takes the root of a binary tree, inverts the tree, and returns the root of the inverted tree. Here\'s the `TreeNode` class definition for reference: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Function Signature** ```python def invert_tree(root: TreeNode) -> TreeNode: Invert a binary tree. Parameters: root (TreeNode): The root node of the binary tree. Returns: TreeNode: The root node of the inverted binary tree. pass ``` **Constraints** - The number of nodes in the tree is in the range [1, 1000]. - -100 <= TreeNode.val <= 100 # Example ```python # Example binary tree: # 4 # / # 2 7 # / / # 1 3 6 9 root = TreeNode(4) root.left = TreeNode(2) root.right = TreeNode(7) root.left.left = TreeNode(1) root.left.right = TreeNode(3) root.right.left = TreeNode(6) root.right.right = TreeNode(9) # Inverted binary tree: # 4 # / # 7 2 # / / # 9 6 3 1 inverted_root = invert_tree(root) # Output: TreeNode with the structure described above. ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root: TreeNode) -> TreeNode: Invert a binary tree. Parameters: root (TreeNode): The root node of the binary tree. Returns: TreeNode: The root node of the inverted binary tree. if not root: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively invert the children subtrees invert_tree(root.left) invert_tree(root.right) return root"},{"question":"In the context of graph theory, a graph traversal algorithm is used to visit all the nodes in a graph. In this problem, you will implement the Depth First Search (DFS) algorithm recursively for an undirected graph. Write a function named `depth_first_search` that takes a graph represented as an adjacency list and a starting node, and returns a list of nodes in the order they were visited. The adjacency list is a dictionary where the keys are node identifiers and the values are lists of adjacent nodes. Requirements: - Implement the DFS algorithm recursively. - Handle the input graph as an undirected graph. - Ensure the traversal starts from the given starting node. - Use a set to keep track of visited nodes to prevent revisiting. Function Signature: ```python def depth_first_search(graph: Dict[int, List[int]], start: int) -> List[int]: ``` Example: ```python graph = { 1: [2, 3], 2: [1, 4, 5], 3: [1], 4: [2], 5: [2] } start_node = 1 print(depth_first_search(graph, start_node)) # Example Output: [1, 2, 4, 5, 3] ``` Note: - The exact order of traversal might vary depending on implementation details, especially for nodes with multiple neighbors. Any valid DFS traversal order is acceptable as long as it adheres to DFS principles.","solution":"def depth_first_search(graph, start): Perform a depth-first search recursively on an undirected graph from a starting node. :param graph: a dictionary representing the adjacency list of the graph. :param start: the starting node for DFS traversal. :return: a list of nodes in the order they were visited. visited = set() result = [] def dfs(node): if node not in visited: visited.add(node) result.append(node) for neighbour in graph.get(node, []): dfs(neighbour) dfs(start) return result"},{"question":"Develop a program that implements a simple calculator supporting addition, subtraction, multiplication, and division. The calculator should be able to read an expression from the user, evaluate it, and print the result. The program should handle basic arithmetic errors such as division by zero and invalid input. Your function should start with: ``` def simple_calculator(): ```","solution":"def simple_calculator(): A simple calculator that supports addition, subtraction, multiplication, and division. Uses input() to get a mathematical expression from the user and prints the result. Handles division by zero and invalid input errors. try: expression = input(\\"Enter an expression: \\") # Evaluate the expression result = eval(expression) print(result) except ZeroDivisionError: print(\\"Error: Division by zero is not allowed.\\") except Exception as e: print(f\\"Error: Invalid input ({str(e)}).\\")"},{"question":"You need to create a function that simulates a basic version of the \\"Match-3\\" game. In this game, the board is represented by a 2D grid filled with different types of gems represented by letters (e.g., \'A\', \'B\', \'C\', etc.). The objective is to find and remove any horizontal or vertical match of three or more same gems. When a match is found, the gems are removed, and the gems above them fall down to take their place, and empty spaces at the top are filled with new random gems. The specific steps to achieve this are as follows: 1. Identify and remove all horizontal and vertical matches of three or more gems. 2. Drop gems from above to fill the removed spaces. 3. Fill the empty spaces at the top with new random gems. You are required to use the Python `random.choice` method to generate new gems. Create a function `match3_game(board: List[List[str]]) -> List[List[str]]` that takes in a list of lists representing the initial game board and returns the new state of the board after processing all matches, falling gems, and filling empty spaces. **Function Signature:** ```python def match3_game(board: List[List[str]]) -> List[List[str]]: # your implementation here ``` **Constraints:** - You can assume the board is always a square (NxN) grid. - Use the `random.choice` method to fill empty spaces with new gems. - Gems are represented by letters and can be any of \'A\', \'B\', \'C\', \'D\', etc. - The board can only have horizontal or vertical matches, no diagonal matches. **Example Input:** ```python board = [ [\'A\', \'A\', \'A\', \'B\'], [\'B\', \'A\', \'A\', \'A\'], [\'C\', \'B\', \'A\', \'C\'], [\'C\', \'C\', \'C\', \'B\'] ] ``` **Example Output:** ```python print(match3_game(board)) # Should print a new 4x4 game board with matches removed, gems fallen, and empty spaces filled with new random gems. ```","solution":"from typing import List import random def match3_game(board: List[List[str]]) -> List[List[str]]: def find_matches(board): matched = set() rows, cols = len(board), len(board[0]) for r in range(rows): for c in range(cols): # check horizontal match (row) if c < cols-2 and board[r][c] == board[r][c+1] == board[r][c+2]: matched |= {(r, c), (r, c+1), (r, c+2)} k = c + 3 while k < cols and board[r][k] == board[r][c]: matched.add((r, k)) k += 1 # check vertical match (column) if r < rows-2 and board[r][c] == board[r+1][c] == board[r+2][c]: matched |= {(r, c), (r+1, c), (r+2, c)} k = r + 3 while k < rows and board[k][c] == board[r][c]: matched.add((k, c)) k += 1 return matched def drop_gems(board, matched): rows, cols = len(board), len(board[0]) # Remove matched gems for r, c in matched: board[r][c] = None # Drop gems for c in range(cols): empty_space = rows - 1 for r in range(rows - 1, -1, -1): if board[r][c] is not None: board[empty_space][c] = board[r][c] empty_space -= 1 for r in range(empty_space + 1): board[r][c] = None def fill_empty_spaces(board): rows, cols = len(board), len(board[0]) gem_choices = [\'A\', \'B\', \'C\', \'D\'] for r in range(rows): for c in range(cols): if board[r][c] is None: board[r][c] = random.choice(gem_choices) while True: matched = find_matches(board) if not matched: break drop_gems(board, matched) fill_empty_spaces(board) return board"},{"question":"In this problem, you are required to implement a function `generate_ascii_histogram` that reads a text file, analyzes the frequency of each ASCII character (0-127), and prints a histogram, where the height of each bar represents the frequency of the corresponding ASCII character. - The function should take one argument: - `file_path` (str): the path to the text file to be analyzed. The histogram should be printed to the console in a format where each line contains the ASCII character (or its representation if it\'s not printable), followed by a colon, a space, and a number of asterisks equal to the frequency of that character in the file. Use the `collections.Counter` class from the `collections` module to keep track of character frequencies. Ensure that the histogram only displays for characters with non-zero frequency. # Function Signature ```python def generate_ascii_histogram(file_path: str) -> None: pass ``` # Example Assume the file at `/tmp/example.txt` contains the text: ``` Hello, ASCII! ``` Example: ```python generate_ascii_histogram(\'/tmp/example.txt\') ``` Output: ``` : 1 !: 1 ,: 1 A: 1 C: 1 H: 1 I: 1 S: 1 e: 1 l: 2 o: 1 ``` # Constraints - Assume `file_path` will always be a valid path to a readable text file. - Only ASCII characters (values from 0 to 127) should be considered. - Non-printable characters (e.g., newline, carriage return) should be represented by their hexadecimal code prefixed with `\'x\'` (e.g., `\'x0a\'` for newline). The primary goal of this task is to familiarize yourself with file reading, string manipulation, and character frequency analysis.","solution":"import collections def generate_ascii_histogram(file_path: str) -> None: Reads a text file, analyzes the frequency of each ASCII character (0-127), and prints a histogram, where the height of each bar represents the frequency of the corresponding ASCII character. with open(file_path, \'r\', encoding=\'ascii\', errors=\'ignore\') as file: text = file.read() # Filter out non-ASCII characters ascii_text = [c for c in text if ord(c) < 128] # Count frequencies of each character counter = collections.Counter(ascii_text) for char, freq in sorted(counter.items()): if 32 <= ord(char) <= 126: # Printable ASCII characters print(f\\"{char}: {\'*\' * freq}\\") else: # Non-printable characters, represented by their hexadecimal code print(f\\"x{ord(char):02x}: {\'*\' * freq}\\")"},{"question":"Write a function to generate a 3D surface plot of a given function over a specified range. For this example, use the function f(x, y) = exp(-sqrt(x^2 + y^2)). The function should return the generated 3D surface plot. The title of the plot should be \\"3D Surface Plot of exp(-sqrt(x^2 + y^2))\\". The x-axis should be labeled \\"X-axis\\", the y-axis should be labeled \\"Y-axis\\", and the z-axis should be labeled \\"Z-axis\\". The function should output: - matplotlib.figure.Figure: The Figure object representing the 3D surface plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D def generate_surface_plot(x_range, y_range, resolution=100): ```","solution":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D def generate_surface_plot(x_range, y_range, resolution=100): Generates a 3D surface plot of the function f(x, y) = exp(-sqrt(x^2 + y^2)) over the specified range. Parameters: - x_range: Tuple of (x_min, x_max) specifying the range for the x-axis. - y_range: Tuple of (y_min, y_max) specifying the range for the y-axis. - resolution: Integer specifying the number of points along each axis. Returns: - fig: The matplotlib Figure object representing the 3D surface plot. x = np.linspace(x_range[0], x_range[1], resolution) y = np.linspace(y_range[0], y_range[1], resolution) x, y = np.meshgrid(x, y) z = np.exp(-np.sqrt(x**2 + y**2)) fig = plt.figure() ax = fig.add_subplot(111, projection=\'3d\') surf = ax.plot_surface(x, y, z, cmap=\'viridis\') ax.set_title(\\"3D Surface Plot of exp(-sqrt(x^2 + y^2))\\") ax.set_xlabel(\\"X-axis\\") ax.set_ylabel(\\"Y-axis\\") ax.set_zlabel(\\"Z-axis\\") plt.close(fig) return fig"},{"question":"**Task**: Write a function `matrix_vector_product(A, v)` that takes in the following parameters: 1. `A` (numpy array): A 2D numpy array (a matrix) with dimensions (m, n). 2. `v` (numpy array): A 1D numpy array (a vector) with length n. The function should compute the product of the matrix `A` and the vector `v` and return the resulting vector. **Steps**: 1. Verify that the number of columns in matrix `A` is equal to the length of vector `v`. 2. Initialize an array `result` of zeros with size (m,) using `numpy.zeros`. 3. For each row `i` in `A`, compute the dot product of the `i-th` row of `A` and the vector `v`. Store this value in the `i-th` position of `result`. 4. Return `result`. **Requirements**: - You must use `numpy.zeros` to initialize the `result` array. - Ensure the input dimensions are compatible for matrix-vector multiplication. **Example**: ```python import numpy as np A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) v = np.array([1, 0, 1]) result = matrix_vector_product(A, v) print(result) # Output: [ 4 10 16] ``` **Test Case**: ```python import numpy as np # Define the matrix A and vector v A = np.array([[2, 4], [3, 1], [0, -1]]) v = np.array([1, 2]) # Expected output: [10 5 -2] print(matrix_vector_product(A, v)) ```","solution":"import numpy as np def matrix_vector_product(A, v): Compute the product of matrix A and vector v. Parameters: A (numpy array): A 2D numpy array with dimensions (m, n). v (numpy array): A 1D numpy array with length n. Returns: numpy array: A 1D numpy array with length m, which is the result of A * v. # Verify the dimensions are compatible if A.shape[1] != v.shape[0]: raise ValueError(\\"The number of columns in A must be equal to the length of v\\") # Initialize the result array result = np.zeros(A.shape[0]) # Compute the dot product for each row of A and the vector v for i in range(A.shape[0]): result[i] = np.dot(A[i], v) return result"},{"question":"You are implementing an e-commerce system and need to build a function that handles inventory management. Write a Python function named `update_inventory` that updates the stock of products based on recent transactions. Your function should: - Accept two dictionaries as inputs: 1. `current_inventory`: A dictionary where keys are product IDs (strings) and values are the current stock quantity (integers). 2. `transactions`: A dictionary where keys are product IDs and values are lists of integers representing quantities ordered (negative for sales, positive for restocks). - For each product ID found in the `transactions` dictionary, update the stock quantity in `current_inventory` according to the transaction quantities. - If a product ID exists in `transactions` but not in `current_inventory`, add it to `current_inventory` with the initial quantity set to the sum of its transactions. - Return the updated `current_inventory` dictionary. Function Signature: ```python def update_inventory(current_inventory: dict, transactions: dict) -> dict: \'\'\' Introduction: Update the inventory based on recent transactions, including sales and restocks. Arguments: current_inventory -- dictionary with product IDs as keys and current stock quantities as values. transactions -- dictionary with product IDs as keys and lists of transaction quantities as values. Returns: updated_inventory -- updated dictionary with product IDs as keys and updated stock quantities as values. \'\'\' pass ``` Example: ```python current_inventory = { \'A001\': 50, \'B002\': 30, \'C003\': 20, } transactions = { \'A001\': [-5, -3], # Sold 5 and 3 units of A001 \'B002\': [10], # Restocked 10 units of B002 \'D004\': [7] # New product D004 with an initial stock of 7 units } updated_inventory = update_inventory(current_inventory, transactions) print(updated_inventory) # Output: # { # \'A001\': 42, # 50 - 5 - 3 = 42 # \'B002\': 40, # 30 + 10 = 40 # \'C003\': 20, # unchanged # \'D004\': 7 # new product with stock 7 # } ``` Note: - Consider edge cases such as transactions for products that are new to the inventory. - Ensure that the function can handle an empty initial inventory or transactions.","solution":"def update_inventory(current_inventory: dict, transactions: dict) -> dict: Update the inventory based on recent transactions, including sales and restocks. Arguments: current_inventory -- dictionary with product IDs as keys and current stock quantities as values. transactions -- dictionary with product IDs as keys and lists of transaction quantities as values. Returns: updated_inventory -- updated dictionary with product IDs as keys and updated stock quantities as values. for product_id, trans in transactions.items(): if product_id in current_inventory: current_inventory[product_id] += sum(trans) else: current_inventory[product_id] = sum(trans) return current_inventory"},{"question":"In this exercise, you are tasked with creating a function to manage an inventory system by reading and updating a JSON file. This will help you learn how to work with JSON files and practice reading and writing data in Python. You need to write a function named `update_inventory` that takes in three parameters: 1. `file_path`: A string representing the path to the JSON file containing the inventory data. 2. `product_id`: A string representing the unique identifier of the product. 3. `change`: An integer representing the quantity change (positive for adding stock, negative for removing stock). The function should perform the following tasks: 1. Read the JSON file specified by `file_path`. 2. If the JSON file does not exist, create an empty inventory with an empty dictionary. 3. Check if the `product_id` exists in the inventory. If it does, update the quantity by adding the `change` value to the current quantity. 4. If the `product_id` does not exist, add the `product_id` to the inventory with the quantity set to `change`. 5. Ensure that the quantity for any product does not fall below zero. If it does, set the quantity to zero instead. 6. Save the updated inventory back to the JSON file. 7. Handle any exceptions that may occur during file operations and ensure the JSON file is properly read and written. Here are the requirements for the function name and its parameters: ```python def update_inventory(file_path, product_id, change): pass ``` To help you with reading and writing JSON files, here is a utility function to read a JSON file: ```python import json def read_json(file_path): try: with open(file_path, \'r\') as file: return json.load(file) except FileNotFoundError: return {} def write_json(file_path, data): with open(file_path, \'w\') as file: json.dump(data, file, indent=4) ``` Ensure to import the necessary library: `json`.","solution":"import json def read_json(file_path): try: with open(file_path, \'r\') as file: return json.load(file) except FileNotFoundError: return {} def write_json(file_path, data): with open(file_path, \'w\') as file: json.dump(data, file, indent=4) def update_inventory(file_path, product_id, change): # Read the current inventory inventory = read_json(file_path) # Update the product quantity if product_id in inventory: inventory[product_id] += change if inventory[product_id] < 0: inventory[product_id] = 0 else: inventory[product_id] = max(0, change) # Write the updated inventory back to the file write_json(file_path, inventory)"},{"question":"You are tasked with implementing a function to evaluate a polynomial using Horner\'s method. A polynomial ( P(x) ) can be represented as ( P(x) = a_n cdot x^n + a_{n-1} cdot x^{n-1} + cdots + a_1 cdot x + a_0 ). Given the polynomial coefficients and a value for ( x ), your function should compute the value of the polynomial at the given ( x ) efficiently using Horner\'s method. # Function Specification The function `evaluate_polynomial(coefficients, x)` should take in: - `coefficients`: A list of coefficients `[a_n, a_{n-1}, ..., a_1, a_0]` where ( a_n ) is the coefficient of the highest degree term. - `x`: The value at which the polynomial is to be evaluated. The function should return the computed value of the polynomial at ( x ). # Constraints - The length of `coefficients` will be at least 1 and at most 1000. - The input ( x ) will be a float within the range ([-10^5, 10^5]). # Example ```python coefficients = [1, 0, -2, 3] # Represents the polynomial P(x) = x^3 - 2x + 3 x = 2 result = evaluate_polynomial(coefficients, x) print(result) # should return 5 since P(2) = 1*(2^3) + 0*(2^2) - 2*(2^1) + 3*(2^0) = 8 - 4 + 3 = 7 ``` # Function Signature ```python def evaluate_polynomial(coefficients, x): # Your implementation here pass ```","solution":"def evaluate_polynomial(coefficients, x): Evaluates a polynomial at a given point x using Horner\'s method. Parameters: coefficients (list): coefficients of the polynomial [a_n, a_{n-1}, ..., a_1, a_0] x (float): the value at which the polynomial is to be evaluated Returns: float: the value of the polynomial at x result = 0 for coeff in coefficients: result = result * x + coeff return result"},{"question":"Create a function named `find_largest_rectangle` that takes a single argument: `histogram` (a list of integers where each integer represents the height of a bar in a histogram). The objective of this function is to return the area of the largest rectangle that can be formed within the given histogram. Each bar in the histogram has a width of 1 unit. The function must efficiently compute the maximum area of a rectangle within the histogram using the heights of the bars and their positions. # Function Signature ```python def find_largest_rectangle(histogram: list) -> int: # Your code here ``` # Constraints: - ( 1 leq text{len(histogram)} leq 10^5 ) - ( 0 leq text{histogram[i]} leq 10^4 ) # Example: ```python find_largest_rectangle([2, 1, 5, 6, 2, 3]) ``` **Output:** ```plaintext 10 ``` In this example, the area of the largest rectangle is 10, which is formed by the bars of heights 5 and 6.","solution":"def find_largest_rectangle(histogram): Returns the area of the largest rectangle that can be formed within the given histogram. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[index] >= histogram[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = ( histogram[top_of_stack] * (index if not stack else index - stack[-1] - 1) ) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = histogram[top_of_stack] * ( index if not stack else index - stack[-1] - 1 ) max_area = max(max_area, area) return max_area"},{"question":"You are tasked with creating a function named `find_closest_pair` which finds the pair of integers in the given list whose sum is closest to zero. The provided list contains at least two integers. The function should perform the following steps: 1. Sort the list of integers in non-decreasing order. 2. Use a two-pointer approach to find the closest pair: - Initialize two pointers, one at the beginning (`left`) and one at the end (`right`) of the sorted list. - Move the pointers towards each other to find the pair whose sum is the closest to zero. 3. If multiple pairs have the same sum close to zero, any of them can be returned. The function should return a tuple containing the two integers whose sum is closest to zero. **Function Signature**: ```python def find_closest_pair(nums: List[int]) -> Tuple[int, int]: pass ``` **Example**: ```python nums = [-1, 2, 1, -4, 3, 6] pair = find_closest_pair(nums) print(pair) # Output could be (-1, 1) or another closest pair ``` **Note**: Ensure that your function handles both positive and negative integers correctly and operates efficiently on large lists. # Additional Explanation: - The sorting step helps in efficiently finding the closest sum using the two-pointer technique. - By iterating with two pointers from opposite ends and adjusting them based on the sum, we can minimize the number of comparisons required.","solution":"from typing import List, Tuple def find_closest_pair(nums: List[int]) -> Tuple[int, int]: Finds the pair of integers in the list whose sum is closest to zero. Args: nums: List[int] - A list of at least two integers. Returns: Tuple[int, int] - The pair of integers whose sum is closest to zero. nums.sort() left, right = 0, len(nums) - 1 closest_pair = (nums[left], nums[right]) closest_sum = abs(nums[left] + nums[right]) while left < right: current_sum = nums[left] + nums[right] if abs(current_sum) < closest_sum: closest_sum = abs(current_sum) closest_pair = (nums[left], nums[right]) # If sum is less than zero, move the left pointer to the right if current_sum < 0: left += 1 # If sum is greater than zero, move the right pointer to the left elif current_sum > 0: right -= 1 else: # Found the pair whose sum is exactly zero break return closest_pair"},{"question":"You are required to write a function in Python that formats a given name with the proper title case and handles common prefixes correctly using the `string` library. The function will be named `format_name`. **Function Name:** `format_name` **Function Input:** - `full_name`: A string representing the full name of a person that might include prefixes like \'Dr.\', \'Mr.\', \'Mrs.\', \'Ms.\', followed by their first and last name. The input name may not be properly capitalized. **Function Output:** - The function should return the formatted name in the title case, ensuring that prefixes remain correctly capitalized. To achieve this, use the `string.capwords` function to capitalize the first letter of each word, and handle the prefixes separately to maintain their proper title case format. Here is the pseudocode outline of what your function should do: 1. Split the input string into words. 2. Iterate through the words, correctly capitalizing the ones that are not prefixes. 3. Join the formatted words back into a single string. 4. Return the formatted full name. **Example:** Given the following input: ```python name = \\"mr. john doe\\" ``` Calling `format_name(name)` should return: ``` \\"Mr. John Doe\\" ``` Given another input: ```python name = \\"dr. jane smith\\" ``` Calling `format_name(dr. jane smith)` should return: ``` \\"Dr. Jane Smith\\" ``` **Notes:** - Ensure that the function handles both standard capitalization and the specific prefixes properly. - Consider other potential prefixes that could be included in future enhancements. Your task is to write the function `format_name` implementing this logic.","solution":"import string def format_name(full_name): Returns the formatted name in title case, ensuring that common prefixes are correctly capitalized. prefixes = [\'Dr.\', \'Mr.\', \'Mrs.\', \'Ms.\'] words = full_name.lower().split() formatted_words = [] for word in words: if word.lower() in [prefix.lower() for prefix in prefixes]: formatted_words.append(next(prefix for prefix in prefixes if prefix.lower() == word.lower())) else: formatted_words.append(string.capwords(word)) return \' \'.join(formatted_words)"},{"question":"Largest Non-Intersecting Subset of Intervals You are given a series of intervals, each represented as a tuple of start and end times. Your goal is to find the largest subset of non-overlapping intervals. Two intervals overlap if they share any common time point. Implement the function `max_non_overlapping_intervals(intervals)` that returns the maximum number of non-overlapping intervals that can be included in the subset. You are required to use key functionalities of sorting and iteration in Python. # Function Signature ```python def max_non_overlapping_intervals(intervals): Find the largest subset of non-overlapping intervals. Parameters ---------- intervals : List[Tuple[int, int]] List of intervals where each interval is a tuple (start, end). Returns ------- int The maximum number of non-overlapping intervals. pass ``` # Instructions 1. **Input Data**: - `intervals` is a list of tuples, where each tuple represents an interval with a start and end time. 2. **Sorting**: - Sort the intervals based on their end times. 3. **Selection**: - Iterate through the sorted intervals and select the interval if it does not overlap with the previous selected interval. # Example Given the following intervals: ```python intervals = [(1, 3), (2, 4), (3, 5), (7, 8)] ``` The function call: ```python count = max_non_overlapping_intervals(intervals) print(count) # Output should be 3, as the non-overlapping intervals (1, 3), (3, 5), and (7, 8) can be selected. ``` # Constraints - All interval times are positive integers. - The start time of each interval is strictly less than its end time. # Libraries - Only standard Python libraries (e.g., itertools, collections) may be used.","solution":"def max_non_overlapping_intervals(intervals): Find the largest subset of non-overlapping intervals. Parameters ---------- intervals : List[Tuple[int, int]] List of intervals where each interval is a tuple (start, end). Returns ------- int The maximum number of non-overlapping intervals. if not intervals: return 0 # Sort intervals based on their end times intervals.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping intervals count = 0 # Initialize the end time of the last included interval end_time = float(\'-inf\') for interval in intervals: if interval[0] >= end_time: # If the start time of the current interval is >= the end time of the last included interval end_time = interval[1] count += 1 return count"},{"question":"You are asked to create a Python function that receives a list of integers and returns a new list where each element is replaced by the product of all the elements in the original list except the one at that position. The function should be named `product_except_self` and it should take a single parameter `nums`, which is the list of integers. You should accomplish this in O(n) time complexity without using division. Here is the exact signature of the function you need to implement: ```python def product_except_self(nums): ``` **Example:** ```python input: [1, 2, 3, 4] output: [24, 12, 8, 6] ``` Explanation: - For the element at index 0: The product of all elements except 1 is 2 * 3 * 4 = 24. - For the element at index 1: The product of all elements except 2 is 1 * 3 * 4 = 12. - For the element at index 2: The product of all elements except 3 is 1 * 2 * 4 = 8. - For the element at index 3: The product of all elements except 4 is 1 * 2 * 3 = 6. **Constraints:** - You should not use the division operation to solve this problem. - The algorithm should run in O(n) time complexity. - The space complexity should be O(n) due to the output list, but you can use O(1) extra space if you exclude the space for the output list. **Steps to implement the function:** 1. Create an empty list `output` of the same length as `nums`. 2. Calculate the products of all the elements to the left of each element and store it in `output`. 3. Calculate the products of all the elements to the right of each element and multiply it with the corresponding element in the `output` list. Implement this function and test it with different lists of integers to ensure it works correctly across various test cases.","solution":"def product_except_self(nums): Returns a list where each element is replaced by the product of all the elements in the original list except the one at that position, without using division. length = len(nums) if length == 0: return [] # Initialize the output array with 1s output = [1] * length # Calculate left product for each element left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate right product for each element and multiply with left product right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"You are given a log file that records user activities on a website. Each line in the log file contains a timestamp, a user ID, and an action (login, post, comment, logout). Your task is to create a function named `analyze_user_activity` that analyzes the log data and returns a summary DataFrame. The function should process the log file and generate a DataFrame with the following columns: 1. `user_id`: The unique identifier of the user. 2. `total_logins`: The total number of login actions performed by the user. 3. `total_posts`: The total number of post actions performed by the user. 4. `total_comments`: The total number of comment actions performed by the user. 5. `total_logouts`: The total number of logout actions performed by the user. 6. `session_duration`: The total duration of all sessions combined for the user (in seconds). A session starts with a login and ends with the next logout. **Assumptions**: - The log file is in CSV format with columns: \'timestamp\', \'user_id\', \'action\'. - The timestamp is in ISO 8601 format. - Actions are always recorded in the following order: login, post/comment (0 or more), logout. The function `analyze_user_activity` takes one argument: - `logfile`: The path to the log CSV file. Below is the skeleton of the function you need to complete: ```python import pandas as pd def analyze_user_activity(logfile): Analyzes user activity from a log file. Parameters: logfile (str): The path to the log CSV file Returns: pd.DataFrame: The summary of user activities # Your code here return summary_df ```","solution":"import pandas as pd def analyze_user_activity(logfile): Analyzes user activity from a log file. Parameters: logfile (str): The path to the log CSV file Returns: pd.DataFrame: The summary of user activities log_data = pd.read_csv(logfile) log_data[\'timestamp\'] = pd.to_datetime(log_data[\'timestamp\']) user_summary = {} for user_id, actions in log_data.groupby(\'user_id\'): user_info = { \'total_logins\': 0, \'total_posts\': 0, \'total_comments\': 0, \'total_logouts\': 0, \'session_duration\': 0 } session_start = None for _, row in actions.iterrows(): action = row[\'action\'] timestamp = row[\'timestamp\'] if action == \'login\': user_info[\'total_logins\'] += 1 session_start = timestamp elif action == \'post\': user_info[\'total_posts\'] += 1 elif action == \'comment\': user_info[\'total_comments\'] += 1 elif action == \'logout\': user_info[\'total_logouts\'] += 1 if session_start is not None: session_duration = (timestamp - session_start).total_seconds() user_info[\'session_duration\'] += session_duration session_start = None user_summary[user_id] = user_info summary_df = pd.DataFrame.from_dict(user_summary, orient=\'index\').reset_index().rename(columns={\'index\': \'user_id\'}) return summary_df"},{"question":"Write a function that parses a log file and counts the number of occurrences of each IP address. The log file consists of multiple lines, each line containing an IP address followed by some activity information. The function should output a dictionary where the keys are IP addresses and the values are the counts of occurrences of those IP addresses. Ensure that the input file is well-formatted, and if any line does not match the expected format, the function should raise a ValueError. The function should raise exceptions for: - FileNotFoundError: If the log file cannot be found. - ValueError: If a line in the file does not contain a valid IP or appears to be malformed. The function should be self-contained and start with: ``` import os import re def parse_log_file(log_file_path): ```","solution":"import os import re def parse_log_file(log_file_path): Parses a log file and counts the occurrences of each IP address. Arguments: log_file_path : str : The path to the log file Returns: dict : A dictionary where the keys are IP addresses and the values are the counts of occurrences Raises: FileNotFoundError : If the log file cannot be found ValueError : If a line in the file does not contain a valid IP or appears to be malformed if not os.path.exists(log_file_path): raise FileNotFoundError(f\\"The log file {log_file_path} cannot be found.\\") ip_pattern = re.compile(r\'^d{1,3}(?:.d{1,3}){3}\') ip_count = {} with open(log_file_path, \'r\') as file: for line_num, line in enumerate(file, start=1): line = line.strip() match = ip_pattern.match(line) if not match: raise ValueError(f\\"Malformed line at {line_num}: {line}\\") ip_address = match.group() if ip_address in ip_count: ip_count[ip_address] += 1 else: ip_count[ip_address] = 1 return ip_count"},{"question":"You are tasked to write a function that determines the largest product of any three integers in a list of integers. This problem tests your ability to correctly identify and calculate maximum/minimum values in a list. Write a function named `largest_product_of_three` with the following signature: ```python def largest_product_of_three(nums): Finds the largest product of any three integers. Parameters ---------- nums : list of ints A list of integers. Returns ------- int The largest product of any three integers. pass ``` # Requirements and Steps: 1. Ensure the input list `nums` has at least three integers; return `None` if it does not. 2. Sort the list `nums` in ascending order. 3. Calculate the product of the three largest numbers in this sorted list. 4. Also calculate the product of the two smallest numbers and the largest number (considering the presence of negative numbers that can produce a larger product). 5. Return the maximum value obtained from the two products calculated. # Example Usage: ```python nums = [-10, -10, 1, 3, 2] result = largest_product_of_three(nums) print(result) # Output should be 300 since (-10 * -10 * 3) is the largest product ``` # Additional Example: ```python nums = [1, 2, 3, 4, 5] result = largest_product_of_three(nums) print(result) # Output should be 60 since (3 * 4 * 5) is the largest product ``` Your implementation should handle both positive and negative integers in the list, ensuring it returns the maximum possible product.","solution":"def largest_product_of_three(nums): Finds the largest product of any three integers. Parameters ---------- nums : list of ints A list of integers. Returns ------- int The largest product of any three integers. if len(nums) < 3: return None nums.sort() max_product_end = nums[-1] * nums[-2] * nums[-3] max_product_start = nums[0] * nums[1] * nums[-1] return max(max_product_end, max_product_start)"},{"question":"You are tasked with creating a function `remove_duplicates_from_string` that processes a given string to remove all duplicate characters while preserving the order of first occurrences. This function will: 1. Accept a string as input. 2. Iterate through the string, checking each character to see if it has already appeared earlier in the string. 3. If the character is new (i.e., not a duplicate), append it to the result string. 4. Return the resulting string which contains only the first occurrence of each character from the input string while preserving their order. # Signature ```python def remove_duplicates_from_string(input_string: str) -> str: ... ``` # Constraints and Requirements 1. The function must maintain the relative order of characters as they first appear in the input string. 2. The function should be case-sensitive, meaning \'A\' and \'a\' are different characters. 3. Ensure no external libraries are used to manipulate the string. # Example ```python output = remove_duplicates_from_string(\\"abracadabra\\") print(output) # Expected output: \\"abrcd\\" output = remove_duplicates_from_string(\\"Hello, World!\\") print(output) # Expected output: \\"Helo, Wrd!\\" ``` This problem will help you understand string manipulation, iteration, and maintaining the order of elements while removing duplicates in Python.","solution":"def remove_duplicates_from_string(input_string: str) -> str: Removes all duplicate characters in the input_string while preserving the order of first occurrences. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result) # Example usage: # output = remove_duplicates_from_string(\\"abracadabra\\") # print(output) # Expected output: \\"abrcd\\""},{"question":"Create a function called `generate_circle_map` that generates a boolean circle map based on the given parameters using the Python Imaging Library (PIL). The resulting image should have a filled circle centered at specified coordinates with a given radius. The circle will be drawn on a black background. Parameters: - `size`: A tuple `(width, height)` representing the dimensions of the output image. - `center`: A tuple `(x, y)` indicating the x and y coordinates of the circle center. - `radius`: An integer representing the radius of the circle. Requirements: - Use `PIL.Image.new` to initialize a new image. - Use `PIL.ImageDraw.Draw` to draw the filled circle. - Ensure the circle is drawn within the bounds of the image dimensions. Detailed Steps: 1. Extract the `width` and `height` from the `size` tuple. 2. Initialize a new image with mode \\"1\\" (1-bit pixels, black and white) and the given size. 3. Create an `ImageDraw.Draw` object for the new image. 4. Calculate the bounding box of the circle based on the given center and radius. 5. Draw the filled circle using the `ellipse` method of `ImageDraw.Draw`. 6. The circle should be filled as True (white), and the background should remain False (black). Returns: - `circle_map`: A PIL.Image object representing the circle map. Example: ```python from PIL import Image, ImageDraw size = (200, 200) center = (100, 100) radius = 50 result_image = generate_circle_map(size, center, radius) result_image.show() ```","solution":"from PIL import Image, ImageDraw def generate_circle_map(size, center, radius): Generates a boolean circle map given image size, circle center, and radius. Parameters: - size (tuple): (width, height) of the image - center (tuple): (x, y) coordinates of the circle center - radius (int): radius of the circle Returns: - Image: PIL Image object with the circle map width, height = size image = Image.new(\'1\', (width, height), 0) # Black background draw = ImageDraw.Draw(image) left_up_point = (center[0] - radius, center[1] - radius) right_down_point = (center[0] + radius, center[1] + radius) draw.ellipse([left_up_point, right_down_point], fill=1) # Draw a filled circle (white) return image"},{"question":"You are required to implement a function called `generate_maze`, which will generate a maze using the Depth-First Search (DFS) algorithm. The maze will be represented as a 2D grid of size `rows x cols` where each cell is initially a wall (`\'#\'`). The function should create a maze in which there is a path connecting the top-left corner (0, 0) to the bottom-right corner (rows-1, cols-1). The function should be defined as follows: ```python def generate_maze(rows, cols): ``` # Function Inputs: - `rows`: An integer representing the number of rows in the maze (minimum value is 5). - `cols`: An integer representing the number of columns in the maze (minimum value is 5). # Function Outputs: - The function should return a 2D list of strings representing the maze. The strings in the list should be either `\'#\'` for a wall or `\'.\'` for an open path. # Details: 1. Start with a grid filled with `\'#\'`. 2. Implement the Depth-First Search (DFS) algorithm to carve out paths in the grid: - Choose a starting cell and mark it as part of the maze. - Randomly choose one of the unvisited neighboring cells that are two steps away. - Connect the current cell to this neighboring cell by removing the wall between them, and move to the chosen cell. - Repeat the process until there are no more unvisited neighboring cells. - Backtrack to the previous cell and continue the process until all cells have been visited. 3. Ensure that the top-left corner (0, 0) and the bottom-right corner (rows-1, cols-1) are part of the path. # Example Usage: ```python maze = generate_maze(7, 7) for row in maze: print(\'\'.join(row)) ``` This will print a 7x7 maze with `\'.\'` as paths and `\'#\'` as walls, ensuring there\'s a valid path from the top-left to the bottom-right corner.","solution":"import random def generate_maze(rows, cols): if rows < 5 or cols < 5: raise ValueError(\\"Minimum value for rows and columns is 5\\") # Initialize the grid with walls maze = [[\'#\' for _ in range(cols)] for _ in range(rows)] # Directions for moving in the maze directions = [(0, 2), (2, 0), (0, -2), (-2, 0)] def is_valid_move(x, y): return 0 <= x < rows and 0 <= y < cols and maze[x][y] == \'#\' def carve_path(x, y): maze[x][y] = \'.\' random.shuffle(directions) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny): if 0 <= nx < rows and 0 <= ny < cols: maze[x + dx // 2][y + dy // 2] = \'.\' carve_path(nx, ny) # Start the carving from the top-left corner carve_path(0, 0) # Ensure the entrance and exit are open maze[0][0] = \'.\' maze[rows - 1][cols - 1] = \'.\' return maze"},{"question":"You need to write a function to calculate the moving average of an array of numbers. The moving average is a common technique used to smooth out data series by calculating the average of different overlapping subarrays of a specified length. Given an array `arr` and an integer `k`, which represents the length of the subarrays, your task is to implement a function `moving_average` that computes the moving average for each subarray of length `k` in the given array. The moving average for a subarray of length `k` is simply the sum of the subarray elements divided by `k`. The function should return a list of the moving averages. **Function Signature:** ```python def moving_average(arr: List[float], k: int) -> List[float]: ``` **Requirements:** - The input array `arr` will always have at least `k` elements. - You must not use any external libraries for this task. **Example:** ```python >>> moving_average([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0] >>> moving_average([10, 20, 30, 40, 50], 2) [15.0, 25.0, 35.0, 45.0] >>> moving_average([1, 1, 1, 1, 1], 1) [1.0, 1.0, 1.0, 1.0, 1.0] ```","solution":"from typing import List def moving_average(arr: List[float], k: int) -> List[float]: Calculate the moving average of an array of numbers. Parameters: arr (List[float]): The input array of numbers. k (int): The length of the subarrays for which to calculate the moving average. Returns: List[float]: A list of moving averages for each subarray of length `k`. result = [] for i in range(len(arr) - k + 1): subarray = arr[i:i + k] average = sum(subarray) / k result.append(average) return result"},{"question":"Develop a function that reads a CSV file and calculates the average value of a specified column. The function should handle cases where the column may contain missing or non-numeric values gracefully. The function will return the computed average or None if the column does not contain any valid numeric values. The function should have the following signature: ``` def calculate_column_average(filename, column_name): ``` Provide an example usage of your function with proper handling of invalid data, and output the average. Example: Given a CSV file `data.csv` with the following content: ``` Name,Age,Salary John,28,50000 Jane,,60000 Doe,35,not available Anna,30,55000 ``` ``` calculate_column_average(\'data.csv\', \'Age\') should return 31.0 calculate_column_average(\'data.csv\', \'Salary\') should return 55000.0 ```","solution":"import csv def calculate_column_average(filename, column_name): Reads a CSV file and calculates the average value of a specified column. Handles missing or non-numeric values gracefully. Parameters: filename (str): The path to the CSV file. column_name (str): The name of the column to calculate the average for. Returns: float: The average value of the specified column, or None if there are no valid numeric values. total = 0 count = 0 with open(filename, mode=\'r\') as csvfile: csvreader = csv.DictReader(csvfile) for row in csvreader: value = row.get(column_name, None) if value is not None: try: num_value = float(value) total += num_value count += 1 except ValueError: continue if count == 0: return None return total / count"},{"question":"You are tasked to write a Python function named `group_strings_by_sorted_characters` that will group a list of strings by their sorted character sequences. Two strings `s1` and `s2` belong to the same group if one can be transformed into the other by rearranging its characters. The function should: 1. Accept a list of strings and return a list of lists, wherein each sublist contains strings that belong to the same group. 2. Each group in the output list should be sorted alphabetically in ascending order. ***Function Signature:*** ```python def group_strings_by_sorted_characters(strings: list) -> list: ``` ***Input:*** - A list of strings (0 ≤ len(strings) ≤ 5000, 1 ≤ len(each string) ≤ 100). ***Output:*** - A list of lists, where each list contains strings that are anagrams of each other, sorted alphabetically. ***Example Use:*** ```python input_strings = [\\"bat\\", \\"tab\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] print(group_strings_by_sorted_characters(input_strings)) ``` ***Expected Output:*** ```python [[\'bat\', \'bat\', \'tab\'], [\'ate\', \'eat\', \'tea\'], [\'nat\', \'tan\']] ``` # Requirements - Group the strings by comparing their sorted characters to identify anagrams. - The output groups themselves can be in any order, but the strings within each group must be sorted alphabetically. - The implementation must handle different cases and return the correct groups irrespective of input order and content. Note: You may use any helper functions or libraries to aid in sorting and grouping the strings appropriately.","solution":"from collections import defaultdict def group_strings_by_sorted_characters(strings): Groups strings by their sorted character sequences. Parameters: strings (list): A list of strings. Returns: list: A list of lists where each sublist contains anagrams sorted alphabetically. anagram_map = defaultdict(list) for string in strings: # Sort the string to generate a key sorted_string = \'\'.join(sorted(string)) # Append the original string to the list in the map anagram_map[sorted_string].append(string) # Sort each group alphabetically grouped_anagrams = [sorted(group) for group in anagram_map.values()] return grouped_anagrams"},{"question":"Implement a function that reads a JSON file containing an array of user objects, filters out users based on a specified minimum age, and saves the filtered list to a new JSON file while counting the number of users meeting the criteria. This function takes an input JSON file path, an output JSON file path, and a minimum age as parameters. The function should raise the exception for: FileNotFoundError: If the input JSON file does not exist. IOError: If the output directory is not writable. The function should output with: int: The count of users who meet the age criteria and were saved to the output file. You should write self-contained code starting with: ``` import json import os from pathlib import Path def filter_users_by_age(input_json, output_json, min_age): ```","solution":"import json import os from pathlib import Path def filter_users_by_age(input_json, output_json, min_age): Filters users from the input JSON file based on a specified minimum age and writes the filtered list to an output JSON file. Parameters: input_json (str): The path to the input JSON file. output_json (str): The path to the output JSON file. min_age (int): The minimum age to filter users by. Returns: int: The count of users who meet the age criteria and were saved to the output file. Raises: FileNotFoundError: If the input JSON file does not exist. IOError: If the output directory is not writable. # Check if the input file exists if not Path(input_json).exists(): raise FileNotFoundError(f\\"The file {input_json} does not exist.\\") # Check if the output directory is writable output_dir = Path(output_json).parent if not os.access(output_dir, os.W_OK): raise IOError(f\\"The directory {output_dir} is not writable.\\") # Read the input JSON file with open(input_json, \'r\') as infile: try: users = json.load(infile) except json.JSONDecodeError: raise ValueError(\\"Invalid JSON format in the input file.\\") # Filter users by the specified minimum age filtered_users = [user for user in users if user.get(\'age\', 0) >= min_age] # Write the filtered users to the output JSON file with open(output_json, \'w\') as outfile: json.dump(filtered_users, outfile, indent=4) # Return the number of users who meet the age criteria return len(filtered_users)"},{"question":"You are required to implement a function that normalizes a given list of numerical values based on Min-Max scaling. The Min-Max normalization scales the values of the list to a range of [0,1] such that the minimum value of the list translates to 0 and the maximum value translates to 1. The formula for Min-Max scaling is: [ X_{new} = frac{X - X_{min}}{X_{max} - X_{min}} ] where ( X ) is the original value, ( X_{min} ) is the minimum value of the list, and ( X_{max} ) is the maximum value of the list. You are required to: 1. Write a function named `min_max_normalize` that performs Min-Max normalization on a given list of numerical values. 2. The function should accept one parameter: - `values`: A list of numerical values that need to be normalized. 3. The function should return a new list containing the normalized values. **Function Signature:** ```python def min_max_normalize(values: List[float]) -> List[float]: pass ``` **Example:** ```python values = [10, 20, 30, 40, 50] result = min_max_normalize(values) print(result) ``` Expected Output: ```plaintext [0.0, 0.25, 0.5, 0.75, 1.0] ```","solution":"from typing import List def min_max_normalize(values: List[float]) -> List[float]: if not values: return [] min_value = min(values) max_value = max(values) if min_value == max_value: # All values are the same return [0.0] * len(values) normalized_values = [(x - min_value) / (max_value - min_value) for x in values] return normalized_values"},{"question":"You have been provided a dataset containing historical weather data. The data contains the date, temperature, humidity, and wind speed recorded for each day. Your task is to write a function called `analyze_weather` that reads the dataset, calculates the monthly averages of temperature, humidity, and wind speed, and then visualizes these averages using line plots. The x-axis of the plots should represent the months, while the y-axes should represent the respective averages. Here is a description of the columns in the dataset: - \\"Date\\": The date of the record in the format \\"YYYY-MM-DD\\". - \\"Temperature\\": The temperature in degrees Celsius. - \\"Humidity\\": The humidity percentage. - \\"Wind Speed\\": The wind speed in km/h. Your function should produce three line plots: 1. A line plot showing the monthly average temperature. 2. A line plot showing the monthly average humidity. 3. A line plot showing the monthly average wind speed. You are required to use the `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` functions to label the axes of the plots appropriately and the `matplotlib.pyplot.title` function to add titles to each plot. Function Signature: ```python def analyze_weather(path: str) -> None: ``` # Constraints: - You must use the Pandas library to read the dataset and perform the necessary calculations. - You must use the Matplotlib library to create the plots. - Ensure that the x-axis labels are formatted appropriately to represent the months. - Ensure the legends are clearly marked for the plots. # Example: Assuming the dataset `weather_data.csv` looks like this: ``` Date,Temperature,Humidity,Wind Speed 2022-01-01,5,75,14 2022-01-02,7,73,13 ... ``` The function call `analyze_weather(\'weather_data.csv\')` should generate the corresponding plots.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_weather(path: str) -> None: # Read the dataset df = pd.read_csv(path) # Convert the \'Date\' column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Extract month and year for grouping df[\'Month\'] = df[\'Date\'].dt.to_period(\'M\') # Calculate monthly averages monthly_averages = df.groupby(\'Month\').mean() # Plot monthly average temperature plt.figure(figsize=(10, 5)) plt.plot(monthly_averages.index.astype(str), monthly_averages[\'Temperature\'], marker=\'o\', label=\'Temperature\') plt.xlabel(\'Month\') plt.ylabel(\'Average Temperature (°C)\') plt.title(\'Monthly Average Temperature\') plt.legend() plt.grid(True) plt.show() # Plot monthly average humidity plt.figure(figsize=(10, 5)) plt.plot(monthly_averages.index.astype(str), monthly_averages[\'Humidity\'], marker=\'o\', color=\'green\', label=\'Humidity\') plt.xlabel(\'Month\') plt.ylabel(\'Average Humidity (%)\') plt.title(\'Monthly Average Humidity\') plt.legend() plt.grid(True) plt.show() # Plot monthly average wind speed plt.figure(figsize=(10, 5)) plt.plot(monthly_averages.index.astype(str), monthly_averages[\'Wind Speed\'], marker=\'o\', color=\'red\', label=\'Wind Speed\') plt.xlabel(\'Month\') plt.ylabel(\'Average Wind Speed (km/h)\') plt.title(\'Monthly Average Wind Speed\') plt.legend() plt.grid(True) plt.show() # Sample usage (commented out to avoid execution error without actual file) # analyze_weather(\'weather_data.csv\')"},{"question":"You have been assigned a task to implement a function that generates and manipulates a list of integers based on certain rules. The goal is to create a new list consisting of different transformations of an original list. The manipulation involves selecting specific ranges, reversing, sorting, and removing duplicates. You are required to write a function named `manipulate_list` with the following specifications: 1. **Function Signature**: ```python def manipulate_list(nums: list, start: int, end: int) -> list: ``` 2. **Parameters**: - `nums` (list): A list of integers. - `start` (int): The starting index of the range (inclusive). - `end` (int): The ending index of the range (exclusive). 3. **Returns**: - A list `result` which contains the transformed list based on the following rules: 4. **Instructions**: - Extract the sublist `sublist` from `nums` using the range defined by `start` and `end`. - Reverse the `sublist`. - Sort the original list `nums` in ascending order. - Remove duplicates from the sorted `nums`. - Concatenate the reversed `sublist` to the end of the manipulated `nums`. - Return the final combined list as `result`. Example: ```python nums = [4, 3, 2, 7, 8, 2, 3, 1] start = 1 end = 5 ``` **Output**: ```python [1, 2, 3, 4, 7, 8, 7, 2, 3] ``` Explanation: - Extracted sublist is `[3, 2, 7, 8]`. - Reversed sublist is `[8, 7, 2, 3]`. - Sorted list `nums` is `[1, 2, 3, 4, 7, 8]` without duplicates. - Concatenated final list is `[1, 2, 3, 4, 7, 8, 8, 7, 2, 3]`.","solution":"def manipulate_list(nums: list, start: int, end: int) -> list: # Extract sublist from nums sublist = nums[start:end] # Reverse the sublist reversed_sublist = sublist[::-1] # Sort the original list nums and remove duplicates sorted_unique_nums = sorted(set(nums)) # Concatenate the reversed sublist to the end of the sorted unique nums result = sorted_unique_nums + reversed_sublist return result"},{"question":"You are given a string containing only the characters \'(\' and \')\'. Your task is to determine the length of the longest valid (well-formed) parentheses substring. A well-formed parentheses substring is defined as one where every opening parenthesis has a corresponding closing parenthesis in the correct order. You should write a function `longest_valid_parentheses` to solve this problem. **Function Signature:** ```python def longest_valid_parentheses(s: str) -> int: ``` **Input:** - A string `s` consisting of characters `\'(\'` and `\')\'`. **Output:** - An integer representing the length of the longest valid parentheses substring. **Constraints:** - The length of the string `0 <= len(s) <= 3 * 10^4`. # Example: ```python >>> longest_valid_parentheses(\\"(()\\") 2 >>> longest_valid_parentheses(\\")()())\\") 4 >>> longest_valid_parentheses(\\"\\") 0 >>> longest_valid_parentheses(\\"()(()\\") 2 ``` # Hint: To solve this problem, you can use a variety of approaches such as: 1. Dynamic Programming 2. Using a stack to keep track of the positions of parentheses 3. Two-pass scan with left-right counters to ensure balance from both ends of the string.","solution":"def longest_valid_parentheses(s: str) -> int: max_length = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Write a function named `subset_sum_combinations` that accomplishes the following: 1. Takes two arguments: - `numbers`: a list of integers. - `target_sum`: an integer representing the target sum. 2. Returns a list of all unique combinations of numbers from the given list that add up to the target sum. 3. Each number in the input list can only be used once in the combination. 4. The order of numbers in each combination does not matter. However, the list of combinations should be sorted in ascending order. 5. Ensure robust error handling for the following scenarios: - The `numbers` argument is not a list of integers. - The `target_sum` is not an integer. **Notes:** - You should not use the built-in `itertools` module. - You can assume the input list does not contain duplicate numbers. # Example Function Call ```python subset_sum_combinations([2, 3, 5, 7, 8], 10) ``` # Example Output ```python [[2, 3, 5], [2, 8], [3, 7]] ``` # [Library Api Requirements] You may use any standard Python libraries except `itertools`.","solution":"def subset_sum_combinations(numbers, target_sum): def find_combinations(start, target, path, results): if target == 0: results.append(path) return for i in range(start, len(numbers)): if numbers[i] > target: break find_combinations(i + 1, target - numbers[i], path + [numbers[i]], results) if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers): raise ValueError(\\"The \'numbers\' argument must be a list of integers.\\") if not isinstance(target_sum, int): raise ValueError(\\"The \'target_sum\' argument must be an integer.\\") numbers.sort() results = [] find_combinations(0, target_sum, [], results) return results"},{"question":"You are required to design a function that takes a string representing a mathematical expression in infix notation and evaluates it. The function should handle the four basic arithmetic operations: addition, subtraction, multiplication, and division. The input expression will not contain any parentheses and will have non-negative integers. **Function name**: `evaluate_expression` **Parameters**: - `expression (str)`: A string representing a mathematical expression in infix notation. **Returns**: - An integer which is the result of evaluating the expression. **Instructions**: 1. **Tokenize the input**: Split the input string into tokens (numbers and operators). Spaces can be used as delimiters. 2. **Operators precedence**: Handle operator precedence where multiplication and division have higher precedence than addition and subtraction. 3. **Evaluate the expression**: Process the tokens to evaluate the expression and return the result. **Example**: ```python result = evaluate_expression(\\"3 + 5 * 2\\") print(result) # Output: 13 result = evaluate_expression(\\"10 + 2 * 6\\") print(result) # Output: 22 result = evaluate_expression(\\"100 * 2 + 12\\") print(result) # Output: 212 result = evaluate_expression(\\"100 * ( 2 + 12 ) / 14\\") print(result) # Output: 100 ``` Note: Since there are no parentheses in the expressions you need to handle, you can assume that the expression would be fully processed strictly based on operator precedence and associativity rules.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression in infix notation without parentheses. Supports addition, subtraction, multiplication, and division. Args: expression (str): A string representing a mathematical expression. Returns: int: The result of evaluating the expression. import re # Tokenize the expression tokens = re.findall(r\'d+|+|-|*|/\', expression) # Operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left // right) values = [] operators = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): values.append(int(tokens[i])) else: while (operators and precedence[operators[-1]] >= precedence[tokens[i]]): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are asked to implement a Python function that computes the sum of distances to the closest zero for each element in a given list `nums`. The function should return a list of the same size where each element represents the minimum distance to the nearest zero in the original list `nums`. The function you need to implement should have the following signature: ```python def min_distance_to_zero(nums): ``` Function Specifications: - **Input**: - `nums`: A list of integers. - **Output**: - A list of integers where each element at index `i` represents the minimum distance from `nums[i]` to the nearest zero in the list `nums`. Task: 1. Traverse the list from left to right to compute the distance to the nearest zero on the left. 2. Traverse the list from right to left to compute the distance to the nearest zero on the right. 3. Combine the results from both traversals to get the minimum distance for each element. Example: ```python nums = [1, 0, 2, 3, 0, 4, 5] min_distances = min_distance_to_zero(nums) print(min_distances) # Output: [1, 0, 1, 1, 0, 1, 2] ``` Your task is to implement the `min_distance_to_zero` function following the given requirements and utilizing an efficient algorithm to compute the minimum distances.","solution":"def min_distance_to_zero(nums): # Initialize the result list with a large number n = len(nums) distances = [float(\'inf\')] * n # Traverse from left to right last_zero_position = -1 for i in range(n): if nums[i] == 0: last_zero_position = i if last_zero_position != -1: distances[i] = i - last_zero_position # Traverse from right to left last_zero_position = -1 for i in range(n - 1, -1, -1): if nums[i] == 0: last_zero_position = i if last_zero_position != -1: distances[i] = min(distances[i], last_zero_position - i) return distances"},{"question":"You are required to write a function named `count_unique_characters_in_substrings` that finds the total number of unique characters in all possible substrings of a given string. The function should return the count of unique characters for each substring length. The function signature should be: ```python def count_unique_characters_in_substrings(s): ``` Where: - `s` is a string consisting of lowercase alphabets. The function should: 1. Iterate through all possible substrings of the input string `s`. 2. For each substring, determine the number of unique characters it contains. 3. Return a dictionary where keys are substring lengths and values are the total number of unique characters for substrings of that length. **Example:** ```python s = \\"abc\\" ``` **Output:** ```python {1: 3, 2: 4, 3: 3} ``` Explanation: - For length 1: substrings are \\"a\\", \\"b\\", \\"c\\" (unique counts = 1+1+1=3) - For length 2: substrings are \\"ab\\", \\"bc\\" (unique counts = 2+2=4) - For length 3: substrings are \\"abc\\" (unique counts = 3) **Hints:** - Use nested loops to generate all substrings. - Use a set to determine the unique characters in each substring.","solution":"def count_unique_characters_in_substrings(s): Finds total number of unique characters in all possible substrings of given string s. Returns a dictionary where keys are substring lengths and values are total count of unique characters for substrings of that length. from collections import defaultdict substring_lengths = defaultdict(int) n = len(s) for i in range(n): for j in range(i+1, n+1): substring = s[i:j] unique_characters = len(set(substring)) substring_lengths[len(substring)] += unique_characters return dict(substring_lengths)"},{"question":"You are tasked with creating the function `calculate_pairwise_euclidean`, which takes a pandas DataFrame containing numerical columns and returns a DataFrame of the pairwise Euclidean distances between rows. The function should: - Compute the Euclidean distances between each pair of rows in the DataFrame. - Return a new DataFrame where the entry at position (i, j) contains the Euclidean distance between row i and row j of the original DataFrame. - Ensure that the diagonal entries (i.e., distance between a row and itself) are zero. - Use appropriate vectorized computations to optimize performance. **Function Signature:** ```python def calculate_pairwise_euclidean(df: pd.DataFrame) -> pd.DataFrame: ``` **Example Usage:** ```python import pandas as pd import numpy as np # Sample DataFrame data = { \'x\': [1, 2, 3], \'y\': [4, 5, 6], \'z\': [7, 8, 9] } df = pd.DataFrame(data) # Call function to calculate pairwise euclidean distances distances = calculate_pairwise_euclidean(df) print(distances) ``` This should produce a DataFrame similar to the following, showing the pairwise Euclidean distances between rows: ``` 0 1 2 0 0.000000 1.732051 3.464102 1 1.732051 0.000000 1.732051 2 3.464102 1.732051 0.000000 ```","solution":"import pandas as pd import numpy as np def calculate_pairwise_euclidean(df: pd.DataFrame) -> pd.DataFrame: Returns a DataFrame of the pairwise Euclidean distances between rows in the input DataFrame. Parameters: df (pd.DataFrame): Input DataFrame containing numerical columns. Returns: pd.DataFrame: DataFrame containing pairwise Euclidean distances. # Get the numpy array representation of the DataFrame arr = df.values # Calculate pairwise distances using broadcasting dists = np.sqrt(((arr[:, np.newaxis] - arr[np.newaxis, :]) ** 2).sum(axis=2)) # Convert the distances matrix to a DataFrame distances_df = pd.DataFrame(dists, index=df.index, columns=df.index) return distances_df"},{"question":"In a social media application, it is common to sort user posts based on the number of likes and comments. Sometimes, we want to highlight specific posts by giving them higher priority in the sorting. You are required to write a function named `sort_posts` that accepts a list of dictionaries where each dictionary represents a post with keys `id`, `likes`, `comments`, and `priority`. The function should return the list of posts sorted primarily by their `priority` value (higher values come first), then by the combined count of likes and comments (higher values come first). **Function Signature:** ```python def sort_posts(posts: List[Dict[str, int]]) -> List[Dict[str, int]]: pass ``` **Arguments:** - `posts` (List[Dict[str, int]]): A list of dictionaries, where each dictionary has the following keys: - `id` (int): The unique identifier of the post. - `likes` (int): The number of likes the post has received. - `comments` (int): The number of comments the post has received. - `priority` (int): The priority value of the post. **Returns:** - A sorted list of dictionaries (List[Dict[str, int]]) according to the defined sorting rules. **Constraints:** - Each post has a unique `id`. - The number of posts `N` can be between 1 and 1000. - The values for `likes`, `comments`, and `priority` are non-negative integers. **Example:** ```python posts = [ {\'id\': 1, \'likes\': 100, \'comments\': 50, \'priority\': 2}, {\'id\': 2, \'likes\': 150, \'comments\': 60, \'priority\': 1}, {\'id\': 3, \'likes\': 100, \'comments\': 80, \'priority\': 2}, {\'id\': 4, \'likes\': 200, \'comments\': 40, \'priority\': 3} ] sorted_posts = sort_posts(posts) ``` **Expected Output:** ```python [ {\'id\': 4, \'likes\': 200, \'comments\': 40, \'priority\': 3}, {\'id\': 3, \'likes\': 100, \'comments\': 80, \'priority\': 2}, {\'id\': 1, \'likes\': 100, \'comments\': 50, \'priority\': 2}, {\'id\': 2, \'likes\': 150, \'comments\': 60, \'priority\': 1} ] ``` In this example, the posts are sorted first by `priority`, and for posts with the same priority, they are sorted by the combined total of `likes` and `comments`.","solution":"from typing import List, Dict def sort_posts(posts: List[Dict[str, int]]) -> List[Dict[str, int]]: Sorts the posts primarily by their priority (higher values first), then by the sum of likes and comments (higher values first). return sorted(posts, key=lambda x: (x[\'priority\'], x[\'likes\'] + x[\'comments\']), reverse=True)"},{"question":"You are tasked with building a linear regression model to predict housing prices based on a set of features using the `sklearn.linear_model` library. Your goal is to: 1. Load the provided housing dataset. 2. Split the dataset into training and testing sets. 3. Train a linear regression model on the training data. 4. Evaluate the model\'s performance on the testing data. 5. Plot the predicted vs actual housing prices. The function you need to implement is `perform_linear_regression`. This function should load the data, process it, train the model, and plot the results. **Function Signature:** ```python def perform_linear_regression(): pass ``` **Function Requirements:** 1. Import the necessary libraries, including `pandas`, `numpy`, `sklearn`, and `matplotlib`. 2. Load the housing dataset using `pandas.read_csv` (ensure the dataset has relevant columns like square footage, number of bedrooms, etc. as features, and a column for the price). 3. Split the data into features (`X`) and target (`y`), where `y` is the housing prices column. 4. Use `train_test_split` (from `sklearn.model_selection`) to split the dataset into training and testing sets, with `80%` for training and `20%` for testing. 5. Create a `LinearRegression` model, train it on the training data, and predict housing prices on the testing data. 6. Calculate and print the model performance metrics such as Mean Squared Error (MSE) and R-squared value. 7. Create a scatter plot comparing the predicted housing prices vs actual housing prices on the test set. **Dependencies:** - `pandas` - `numpy` - `sklearn.linear_model.LinearRegression` - `sklearn.model_selection.train_test_split` - `sklearn.metrics.mean_squared_error`, `r2_score` - `matplotlib` **Additional Notes:** - Ensure to handle any missing data by either filling or dropping it before training the model. - You can use a dummy dataset if an actual dataset is not provided, ensuring it contains relevant columns for housing price prediction.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score import matplotlib.pyplot as plt def perform_linear_regression(): # Load the dataset # Assuming the dataset is named \'housing.csv\' and located in the current directory # Example columns: [\'sqft_living\', \'bedrooms\', \'bathrooms\', \'price\'] data = pd.read_csv(\'housing.csv\') # Handle any missing data data = data.dropna() # Split the data into features (X) and target (y) X = data.drop(\'price\', axis=1) y = data[\'price\'] # Split the dataset into training and testing sets, with 80% for training and 20% for testing X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create a Linear Regression model model = LinearRegression() # Train the model on the training data model.fit(X_train, y_train) # Predict housing prices on the testing data y_pred = model.predict(X_test) # Calculate and print the model performance metrics mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) print(f\'Mean Squared Error: {mse}\') print(f\'R-squared Value: {r2}\') # Plot the predicted vs actual housing prices plt.scatter(y_test, y_pred, alpha=0.5) plt.xlabel(\'Actual Prices\') plt.ylabel(\'Predicted Prices\') plt.title(\'Actual vs Predicted Housing Prices\') plt.show()"},{"question":"You need to implement a function that will generate a stacked bar plot showing the sales data of different products over several years. The function should take sales data as input and create a visualization that highlights the sales trends for each product over time. Your task is to implement the following function: ```python import pandas as pd import matplotlib.pyplot as plt def plot_stacked_sales(sales_data: pd.DataFrame, title: str): # Your implementation here ``` # Input Parameters: - `sales_data` (pd.DataFrame): A DataFrame where each column represents the sales of a different product, and each row corresponds to a year. - `title` (str): The title of the plot. # Functionality: - Create a stacked bar plot showing the yearly sales for each product. - Use different colors to represent each product. - Add a legend to distinguish between products. - Assign appropriate title and labels to the plot. - Ensure that the years are appropriately labeled along the x-axis, and sales figures are along the y-axis. # Example Usage: ```python data = pd.DataFrame({ \'Year\': [2018, 2019, 2020, 2021], \'Product_A\': [20, 34, 30, 35], \'Product_B\': [25, 32, 34, 20], \'Product_C\': [30, 35, 40, 45] }) plot_stacked_sales(data.set_index(\'Year\'), \'Annual Sales Data\') ``` # Additional Notes: - Use `matplotlib.pyplot` for plotting. - You can assume that the input data is correctly formatted and preprocessed. - Ensure the plot is readable and well-labeled, facilitating an intuitive understanding of sales trends.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_stacked_sales(sales_data: pd.DataFrame, title: str): Create a stacked bar plot showing the sales data of different products over several years. Parameters: sales_data (pd.DataFrame): DataFrame where each column represents the sales of a different product, and each row corresponds to a year. title (str): The title of the plot. # Plot ax = sales_data.plot(kind=\'bar\', stacked=True, figsize=(10, 7), colormap=\'viridis\') # Title and labels ax.set_title(title, fontsize=15) ax.set_xlabel(\'Year\', fontsize=12) ax.set_ylabel(\'Sales\', fontsize=12) # Customization plt.xticks(rotation=45, ha=\'right\') plt.legend(title=\'Products\', title_fontsize=\'13\', loc=\'upper left\') plt.tight_layout() # Show plot plt.show()"},{"question":"You are tasked with writing a Python function called `convert_morse_code` that converts a given string into Morse code and then decodes it back to the original string. To assist with this, you should use a predefined dictionary that maps letters and digits to their corresponding Morse code representations. **Function Signature:** ```python def convert_morse_code(input_string: str) -> str: ``` **Parameters:** - `input_string` (str): The input string consisting of letters and digits. **Returns:** - str: The original string after encoding and decoding using Morse code. **Instructions:** 1. Define a dictionary that maps each character (a-z, A-Z, 0-9) to its Morse code representation. 2. Implement an encoding step that converts each character of the `input_string` to Morse code using the dictionary. 3. In the encoded Morse code, separate individual Morse code letters with a space and words with a slash (\'/\'). 4. Implement a decoding step that converts the Morse code back to the original string. 5. Return the decoded string which should match the `input_string`. **Morse Code Dictionary:** ```python morse_code_dict = {} ``` **Example:** ```python input_string = \\"HELLO WORLD\\" output_string = convert_morse_code(input_string) ``` The `output_string` should be \\"HELLO WORLD\\" since the encoding and then decoding process should return the original string. **Constraints:** - The input string will only contain uppercase letters, digits, and spaces. - The input string will always be in a valid format without any special characters other than spaces.","solution":"def convert_morse_code(input_string: str) -> str: morse_code_dict = {} # Reverse morse_code_dict to use it for decoding morse_to_char_dict = {value: key for key, value in morse_code_dict.items()} # Function to encode a string to morse code def encode_to_morse(s): encoded_chars = [] for char in s: if char == \' \': encoded_chars.append(\'/\') else: encoded_chars.append(morse_code_dict[char]) return \' \'.join(encoded_chars) # Function to decode morse code to string def decode_from_morse(morse): decoded_chars = [] morse_words = morse.split(\' / \') for morse_word in morse_words: morse_chars = morse_word.split() decoded_word = \'\'.join(morse_to_char_dict[morse_char] for morse_char in morse_chars) decoded_chars.append(decoded_word) return \' \'.join(decoded_chars) # Step 1: Encode the input_string to Morse code morse_code = encode_to_morse(input_string) # Step 2: Decode the Morse code back to the original string decoded_string = decode_from_morse(morse_code) return decoded_string"},{"question":"**Deep Copy Nested Dictionary Merging** In Python, dictionaries are essential structures often used for various tasks. A common problem arises when you need to deeply merge nested dictionaries, combining their contents while retaining the full hierarchy. Your task is to write a function called `deep_merge_dicts` that: 1. Merges two given dictionaries recursively. 2. If a key exists in both dictionaries and its value is a dictionary in both, merge those dictionaries. Otherwise, the value from the second dictionary should overwrite the value from the first dictionary. Make sure that the merge does not affect the input dictionaries and returns a new deeply merged dictionary. **Function Signature:** ```python def deep_merge_dicts(dict1: Dict, dict2: Dict) -> Dict: ``` **Parameters:** - `dict1`: First dictionary to merge. - `dict2`: Second dictionary to merge. **Returns:** - A new dictionary with the contents of `dict1` and `dict2` merged deeply. **Example:** ```python dict1 = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } } } dict2 = { \'b\': { \'d\': { \'f\': 4 }, \'g\': 5 }, \'h\': 6 } deep_merge_dicts(dict1, dict2) # Expected output # { # \'a\': 1, # \'b\': { # \'c\': 2, # \'d\': { # \'e\': 3, # \'f\': 4 # }, # \'g\': 5 # }, # \'h\': 6 # } ``` **Note:** You may use helper functions if needed to maintain the readability and structure of your code.","solution":"from typing import Dict def deep_merge_dicts(dict1: Dict, dict2: Dict) -> Dict: Recursively merge two dictionaries and return a new merged dictionary. If a key exists in both dictionaries and its value is a dictionary in both, merge those dictionaries; otherwise, the value from the second dictionary should overwrite the value from the first dictionary. merged = dict1.copy() for key, value in dict2.items(): if key in merged and isinstance(merged[key], dict) and isinstance(value, dict): merged[key] = deep_merge_dicts(merged[key], value) else: merged[key] = value return merged"},{"question":"Your task is to develop a function that performs k-means clustering on a dataset and returns the cluster assignments for each data point. You are required to use **scikit-learn** to implement this. Specifically, you will design a function named `perform_kmeans` which takes a pandas DataFrame, the number of clusters (k), and random state as input, and returns a pandas Series containing the cluster assignments. Here are the requirements for the function: 1. **Function Signature**: ```python def perform_kmeans(df: pd.DataFrame, k: int, random_state: int = 42) -> pd.Series: ``` 2. **Steps to Follow**: - **Normalization**: Normalize the dataset so that each feature contributes equally to the distance calculation. - **K-Means Algorithm**: Use the KMeans class from scikit-learn to perform the clustering. 3. **Libraries to Use**: - `sklearn.preprocessing.StandardScaler` for normalizing features. - `sklearn.cluster.KMeans` for the k-means clustering algorithm. 4. **Assumptions**: - The input DataFrame `df` contains only numerical features. - You can assume the DataFrame has no missing values. 5. **Return**: - A pandas Series where each element corresponds to the cluster assignment of the respective data point in the input DataFrame. #","solution":"import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans def perform_kmeans(df: pd.DataFrame, k: int, random_state: int = 42) -> pd.Series: Perform k-means clustering on the input DataFrame and return a Series of cluster assignments. Parameters: - df: pd.DataFrame, the input data with numerical features. - k: int, the number of clusters. - random_state: int, random state for reproducibility. Returns: - pd.Series, cluster assignments for each data point. # Normalize the dataset scaler = StandardScaler() df_normalized = scaler.fit_transform(df) # Perform KMeans clustering kmeans = KMeans(n_clusters=k, random_state=random_state) kmeans.fit(df_normalized) # Return cluster assignments return pd.Series(kmeans.labels_)"},{"question":"You are required to implement a function `evaluate_sudoku(board)` that evaluates whether a given 9x9 Sudoku board is valid. A valid Sudoku board (not necessarily solved) means that each row, each column, and each of the nine 3x3 subgrids contains no duplicate digits from 1 to 9. The board will contain partially filled numbers and empty spaces represented by the character `\'.\'`. Here\'s a step-by-step breakdown: - The input `board` is a 2D list where each element is either a digit or the character `\'.\'`. This represents the Sudoku board. - Iterate through each row to ensure there are no duplicate digits (excluding `\'.\'`). - Iterate through each column to ensure there are no duplicate digits. - Iterate through each 3x3 subgrid to ensure there are no duplicate digits. **Requirements:** - Implement three helper functions: - `check_row(board, row_index)` that checks for duplicate digits in the specified row. - `check_column(board, col_index)` that checks for duplicate digits in the specified column. - `check_subgrid(board, start_row, start_col)` that checks for duplicate digits in the specified 3x3 subgrid. - You may use Python sets to handle the uniqueness checks efficiently. - The function should return `True` if the Sudoku board is valid, and `False` otherwise. **Function Signature:** ```python def evaluate_sudoku(board): # your code here ``` **Example:** ```python boardprint(evaluate_sudoku(board)) # Output: True or False ```","solution":"def check_row(board, row_index): seen = set() for num in board[row_index]: if num != \'.\' and num in seen: return False seen.add(num) return True def check_column(board, col_index): seen = set() for row in board: if row[col_index] != \'.\' and row[col_index] in seen: return False seen.add(row[col_index]) return True def check_subgrid(board, start_row, start_col): seen = set() for i in range(3): for j in range(3): num = board[start_row + i][start_col + j] if num != \'.\' and num in seen: return False seen.add(num) return True def evaluate_sudoku(board): for i in range(9): if not check_row(board, i): return False if not check_column(board, i): return False for i in range(0, 9, 3): for j in range(0, 9, 3): if not check_subgrid(board, i, j): return False return True"},{"question":"Given a dataset, implement a function to perform K-Means clustering on the data. The function should accept the number of clusters to form and the dataset, and return the centroids of the clusters and the cluster labels for each data point. Additionally, the function should plot the clusters and their centroids on a scatter plot if the dataset is 2-dimensional. The function should output: tuple: A tuple containing: centroids (numpy.ndarray): Coordinates of the cluster centroids. labels (numpy.ndarray): The cluster labels for each data point. You should write self-contained code starting with: ``` import numpy as np import pandas as pd from sklearn.cluster import KMeans import matplotlib.pyplot as plt def kmeans_clustering(data, n_clusters, random_seed=None): # Insert your code here ```","solution":"import numpy as np import pandas as pd from sklearn.cluster import KMeans import matplotlib.pyplot as plt def kmeans_clustering(data, n_clusters, random_seed=None): Perform K-Means clustering on the dataset. Parameters: data (numpy.ndarray or pandas.DataFrame): The dataset to cluster. n_clusters (int): The number of clusters to form. random_seed (int, optional): Seed for the random number generator. Returns: tuple: centroids (numpy.ndarray): Coordinates of the cluster centroids. labels (numpy.ndarray): The cluster labels for each data point. # Ensure data is in numpy array format if isinstance(data, pd.DataFrame): data = data.values # Perform K-Means clustering kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed) labels = kmeans.fit_predict(data) centroids = kmeans.cluster_centers_ # Plot clusters if data is 2-dimensional if data.shape[1] == 2: plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=\'viridis\') plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c=\'red\', marker=\'X\') plt.title(\'K-Means Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show() return centroids, labels"},{"question":"--- Design a function named `generate_transaction_report` that processes a log of bank transactions, generating a summary report of the total amount credited and debited for each account. The function should accept a list of dictionaries where each dictionary represents a transaction with details such as account ID, transaction type (\'credit\' or \'debit\'), and amount. The function should return a dictionary where keys are account IDs, and values are dictionaries with keys \'total_credit\' and \'total_debit\' and their corresponding total amounts. This problem will help you learn how to: 1. Iterate through lists and dictionaries. 2. Perform arithmetic operations and accumulate totals. 3. Structure complex nested dictionary entries. **Function Signature:** ```python def generate_transaction_report(transactions: List[Dict[str, Union[str, int]]]) -> Dict[str, Dict[str, int]]: pass ``` **Parameters:** - `transactions` (List[Dict[str, Union[str, int]]]): A list of transaction dictionaries. Each dictionary contains: - `account_id` (str): The account identifier. - `type` (str): Type of the transaction, either \'credit\' or \'debit\'. - `amount` (int): The amount of the transaction. **Returns:** - `Dict[str, Dict[str, int]]`: A dictionary where keys are account IDs and values are dictionaries containing: - \'total_credit\' (int): Total credited amount. - \'total_debit\' (int): Total debited amount. **Example:** ```python transactions = [ {\\"account_id\\": \\"ACC123\\", \\"type\\": \\"credit\\", \\"amount\\": 1000}, {\\"account_id\\": \\"ACC456\\", \\"type\\": \\"debit\\", \\"amount\\": 200}, {\\"account_id\\": \\"ACC123\\", \\"type\\": \\"debit\\", \\"amount\\": 500}, {\\"account_id\\": \\"ACC456\\", \\"type\\": \\"credit\\", \\"amount\\": 1500}, {\\"account_id\\": \\"ACC123\\", \\"type\\": \\"credit\\", \\"amount\\": 800} ] report = generate_transaction_report(transactions) print(report) # Expected Output: # { # \\"ACC123\\": {\\"total_credit\\": 1800, \\"total_debit\\": 500}, # \\"ACC456\\": {\\"total_credit\\": 1500, \\"total_debit\\": 200} # } ``` **Requirements:** 1. Use a dictionary to keep track of each account\'s totals. 2. Ensure the final summary report correctly aggregates credits and debits for each account. ---","solution":"from typing import List, Dict, Union def generate_transaction_report(transactions: List[Dict[str, Union[str, int]]]) -> Dict[str, Dict[str, int]]: report = {} for transaction in transactions: account_id = transaction[\'account_id\'] trans_type = transaction[\'type\'] amount = transaction[\'amount\'] if account_id not in report: report[account_id] = {\'total_credit\': 0, \'total_debit\': 0} if trans_type == \'credit\': report[account_id][\'total_credit\'] += amount elif trans_type == \'debit\': report[account_id][\'total_debit\'] += amount return report"},{"question":"Write a function that reads a text file, counts the frequency of each word in the file, and returns the top N most frequent words along with their frequencies. The function should also handle punctuation and be case insensitive. If two words have the same frequency, they should be ordered alphabetically. The function should output: List[Tuple[str, int]]: A list of tuples, each containing a word and its frequency, sorted by frequency in descending order. If frequencies are equal, words should be sorted alphabetically. You should write self-contained code starting with: ``` import re from collections import Counter from typing import List, Tuple def task_func(file_path: str, top_n: int) -> List[Tuple[str, int]]: ```","solution":"import re from collections import Counter from typing import List, Tuple def task_func(file_path: str, top_n: int) -> List[Tuple[str, int]]: Reads a text file, counts the frequency of each word, and returns the top N most frequent words. Args: - file_path (str): Path to the text file. - top_n (int): The number of top frequent words to return. Returns: - List[Tuple[str, int]]: A list of tuples, each containing a word and its frequency, sorted by frequency in descending order and then alphabetically for words with the same frequency. with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Use regex to split the text into words and ignore case words = re.findall(r\'bw+b\', text.lower()) # Count the frequency of each word word_count = Counter(words) # Sort the word count by frequency (desc) and alphabetically for same frequency sorted_word_count = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Return the top N most frequent words return sorted_word_count[:top_n]"},{"question":"Write a Python function named `find_palindromic_substrings` that takes a string and returns all unique palindromic substrings. A palindromic substring is defined as a substring which reads the same backward as forward. **Function Requirements:** 1. **Parameters:** - `s` (str): The input string. 2. **Process:** - Iterate through each character in the string while treating each character as a center of a palindrome. - Expand around each center to find all possible palindromic substrings. - Use both even and odd length expansions to catch all palindromes. - Store these palindromes in a set to ensure all entries are unique. 3. **Returns:** - Return the set of unique palindromic substrings. **Example:** ```python find_palindromic_substrings(\\"abaaa\\") ``` **Output:** ```python {\'a\', \'aba\', \'aa\', \'baab\'} ```","solution":"def find_palindromic_substrings(s): Returns a set of all unique palindromic substrings of the input string s. def expand_around_center(left, right): Utility function to expand around the center and collect palindromes. while left >= 0 and right < len(s) and s[left] == s[right]: palindromes.add(s[left:right + 1]) left -= 1 right += 1 palindromes = set() for i in range(len(s)): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return palindromes"},{"question":"You are given two strings, `s1` and `s2`, and you need to determine if `s1` is a anagram of `s2`. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Write a function that evaluates whether the two input strings are anagrams by utilizing a hashmap (or dictionary in Python). **Function Specification:** - **Function Name:** `are_anagrams` - **Parameters:** - `s1`: A string representing the first word or phrase. - `s2`: A string representing the second word or phrase. - **Returns:** A boolean value (`True` if `s1` and `s2` are anagrams, `False` otherwise). **Requirements:** - Use a dictionary to count occurrences of each character in both strings. - Consider only alphanumeric characters, and ignore cases (i.e., \'A\' and \'a\' should be treated as the same character). **Explanation of Example:** Suppose we have the following strings: ``` s1 = \\"Listen\\" s2 = \\"Silent\\" ``` The function should return `True` because \\"Listen\\" and \\"Silent\\" contain the same characters with the same frequency: - \'L\' and \'l\' (converted to lower case) both appear once. - \'i\' appears once in both. - \'s\' appears once in both. - \'t\' appears once in both. - \'e\' appears once in both. - \'n\' appears once in both. **Example Usage:** ```python def are_anagrams(s1, s2): s1 = \'\'.join([c.lower() for c in s1 if c.isalnum()]) s2 = \'\'.join([c.lower() for c in s2 if c.isalnum()]) if len(s1) != len(s2): return False char_count = {} for char in s1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s2: if char in char_count: char_count[char] -= 1 if char_count[char] < 0: return False else: return False return True # Example usage s1 = \\"Listen\\" s2 = \\"Silent\\" print(are_anagrams(s1, s2)) # Output: True ``` **Note:** - Make sure to handle edge cases such as empty strings and strings with special characters.","solution":"def are_anagrams(s1, s2): Determines if two strings are anagrams of each other. :param s1: First string :param s2: Second string :return: True if s1 and s2 are anagrams, False otherwise # Keep only alphanumeric characters and convert to lowercase s1 = \'\'.join([c.lower() for c in s1 if c.isalnum()]) s2 = \'\'.join([c.lower() for c in s2 if c.isalnum()]) if len(s1) != len(s2): return False char_count = {} for char in s1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s2: if char in char_count: char_count[char] -= 1 if char_count[char] < 0: return False else: return False return True"},{"question":"You are tasked with implementing a function that simulates a parking garage system. The parking garage has a finite number of spots available, and cars can either enter or leave the garage. Your task is to create a function that will handle the entry and exit of cars and update the number of available spots accordingly. The function will be called `manage_garage` and it should take two parameters: 1. `action` (str): A string that can either be \\"enter\\" or \\"exit\\". 2. `spots` (int): The current number of available spots in the garage. The function should print a message indicating the action taken and the updated number of spots. If a car tries to enter when there are no spots available, the function should print a message indicating that the garage is full and return the same number of available spots. Similarly, if a car tries to exit when the garage is empty, the function should print that the garage is empty and return the same number of available spots. **Function Signature**: ```python def manage_garage(action: str, spots: int) -> int: ... ``` **Parameters**: - `action` (str): The action to be performed (\\"enter\\" or \\"exit\\"). - `spots` (int): The current number of spots available in the garage. **Returns**: - int: The updated number of available spots after performing the action. **Example**: ```python current_spots = 3 current_spots = manage_garage(\\"enter\\", current_spots) # Output should be: \\"A car entered the garage. Spots left: 2\\" # Returns: 2 current_spots = manage_garage(\\"exit\\", current_spots) # Output should be: \\"A car exited the garage. Spots left: 3\\" # Returns: 3 current_spots = manage_garage(\\"enter\\", 0) # Output should be: \\"The garage is full. No spots available.\\" # Returns: 0 current_spots = manage_garage(\\"exit\\", 0) # Output should be: \\"The garage is empty. No cars to exit.\\" # Returns: 0 ``` **Requirements**: - Print appropriate messages for each action. - Return the updated number of spots based on the action taken. - Handle edge cases where the garage is full or empty.","solution":"def manage_garage(action: str, spots: int) -> int: Manages entry and exit of cars in a parking garage. Parameters: action (str): The action to be performed (\\"enter\\" or \\"exit\\"). spots (int): The current number of spots available in the garage. Returns: int: The updated number of available spots after performing the action. if action == \\"enter\\": if spots > 0: spots -= 1 print(f\\"A car entered the garage. Spots left: {spots}\\") else: print(\\"The garage is full. No spots available.\\") elif action == \\"exit\\": if spots < 100: # Assuming the garage has a total of 100 spots. spots += 1 print(f\\"A car exited the garage. Spots left: {spots}\\") else: print(\\"The garage is empty. No cars to exit.\\") return spots"},{"question":"You are required to write a function that merges two dictionaries recursively. The function should take two dictionaries as input and merge them into one dictionary. If there are overlapping keys and both keys point to dictionaries, it should recursively merge them. Otherwise, the value in the second dictionary should overwrite the value in the first dictionary. The function should conform to the following specifications: 1. Name: `merge_dictionaries` 2. Arguments: - `dict1`: a dictionary. - `dict2`: a dictionary that should be merged into `dict1`. The function should return a dictionary that is the result of merging `dict1` and `dict2`. **Function signature:** ```python def merge_dictionaries(dict1, dict2): pass ``` **Example Usage:** ```python dict1 = { \'a\': 1, \'b\': { \'c\': 2, \'d\': 3 }, \'e\': 4 } dict2 = { \'b\': { \'c\': 5, \'f\': 6 }, \'g\': 7 } result = merge_dictionaries(dict1, dict2) print(result) ``` **Expected Output:** ```python { \'a\': 1, \'b\': { \'c\': 5, \'d\': 3, \'f\': 6 }, \'e\': 4, \'g\': 7 } ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries recursively. Values from dict2 overwrite those in dict1 when there\'s a conflict. Args: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary which will be merged into the first dictionary. Returns: dict: The merged dictionary result. merged_dict = dict1.copy() # Start with a copy of dict1 for key, value in dict2.items(): if key in merged_dict and isinstance(value, dict) and isinstance(merged_dict[key], dict): merged_dict[key] = merge_dictionaries(merged_dict[key], value) else: merged_dict[key] = value return merged_dict"},{"question":"Create a function called `statistics_summary()` that takes a list of numerical values and returns a dictionary containing various statistical measures of the dataset. Specifically, your function should calculate and include the following statistics: 1. Mean 2. Median 3. Standard Deviation 4. Minimum Value 5. Maximum Value 6. Range (Maximum Value - Minimum Value) 7. Sum 8. Count (number of elements in the list) You may not use any external libraries such as `numpy` or `statistics` for the calculations. Instead, implement the calculations manually using basic Python constructs. Input: - A list of numerical values, e.g., `[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]`. Output: - A dictionary containing the calculated statistical measures with the following keys: `mean`, `median`, `std_dev`, `min`, `max`, `range`, `sum`, and `count`. Example: ```python input_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] statistics_summary(input_list) ``` Expected Output: ``` { \'mean\': 55.0, \'median\': 55.0, \'std_dev\': 28.722813232690143, \'min\': 10, \'max\': 100, \'range\': 90, \'sum\': 550, \'count\': 10 } ``` Implement the function `statistics_summary()` to achieve this.","solution":"def statistics_summary(values): Calculate various statistical measures for a list of numerical values. :param values: List of numerical values :return: Dictionary with statistical measures n = len(values) if n == 0: raise ValueError(\\"The input list cannot be empty!\\") sorted_values = sorted(values) total_sum = sum(values) mean = total_sum / n # Median computation if n % 2 == 0: median = (sorted_values[n // 2 - 1] + sorted_values[n // 2]) / 2 else: median = sorted_values[n // 2] min_value = sorted_values[0] max_value = sorted_values[-1] value_range = max_value - min_value # Variance and Standard Deviation computation variance = sum((x - mean) ** 2 for x in values) / n std_dev = variance ** 0.5 # Return the statistical summary as a dictionary return { \'mean\': mean, \'median\': median, \'std_dev\': std_dev, \'min\': min_value, \'max\': max_value, \'range\': value_range, \'sum\': total_sum, \'count\': n }"},{"question":"**Title: Calculating and Plotting Fibonacci Sequence Using Matplotlib** **Objective**: Learn to implement the Fibonacci sequence and visualize it using `matplotlib.pyplot` for plotting in Python. **Problem Statement**: Write a function called `plot_fibonacci()` that generates the first 10 terms of the Fibonacci sequence and plots these values using the Matplotlib library. **Requirements**: 1. Use the `matplotlib.pyplot.plot` function to create the plot. 2. Use the `matplotlib.pyplot.show` function to display the plot. The function should perform the following steps: - Calculate the first 10 numbers in the Fibonacci sequence and store them in a list `fib`. - Generate a list `x` containing integer values from 1 to 10 (positions of Fibonacci numbers). - Use the `plot()` function from the `matplotlib.pyplot` module to create a line plot. - Plot `x` versus `fib`. - Use a suitable marker (e.g., \'o\') for each point on the line. - Show the plot using the `show()` function from the `matplotlib.pyplot` module. **Function Signature**: ```python def plot_fibonacci(): pass ``` **Example**: When you run the `plot_fibonacci()` function, it should display a plot where: - The x-axis represents the positions (1 through 10). - The y-axis represents the Fibonacci numbers at these positions. **Additional Instructions**: - Import required functions from the Matplotlib library. - Add labels and title to the plot for better clarity. - Ensure the plot is visually appealing and correctly formatted. **Parameters and Returns**: - The `plot_fibonacci()` function does not take any parameters and does not return any values.","solution":"import matplotlib.pyplot as plt def plot_fibonacci(): Generates the first 10 terms of the Fibonacci sequence and plots these values using Matplotlib. fib = [0, 1] for i in range(2, 10): fib.append(fib[-1] + fib[-2]) x = list(range(1, 11)) plt.plot(x, fib, marker=\'o\', linestyle=\'-\', color=\'b\') plt.title(\'Fibonacci Sequence\') plt.xlabel(\'Position\') plt.ylabel(\'Fibonacci Number\') plt.grid(True) plt.show()"},{"question":"You are required to write a function `find_largest_rectangle(histogram: list) -> int`. This function takes in a single argument: - `histogram`: a list of non-negative integers representing the heights of bars in a histogram. The function should return the area of the largest rectangle that can be formed within the bounds of the histogram. The rectangle must be formed by the contiguous bars of the histogram. **Function Signature:** ```python def find_largest_rectangle(histogram: list) -> int: ``` **Example:** ```python histogram = [2, 1, 5, 6, 2, 3] largest_rectangle_area = find_largest_rectangle(histogram) print(largest_rectangle_area) # Output should be: 10 # Explanation: The largest rectangle can be formed using the bars with heights [5, 6], which gives an area of 5 * 2 = 10. ``` **Additional Details:** 1. The histogram list is guaranteed to contain at least one element. 2. The largest rectangle could span multiple bars with varying heights, so the algorithm needs to efficiently compute potential areas. Consider using a stack-based approach to solve this problem efficiently.","solution":"def find_largest_rectangle(histogram: list) -> int: Find the area of the largest rectangle in the histogram. :param histogram: List[int] - list of non-negative integers representing the heights of the bars in the histogram. :return: int - the area of the largest rectangle in the histogram. stack = [] # stack to store indices max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with histogram[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"The function should output with: ```python def min_coins(amount: int, coins: list) -> int: ``` int: The minimum number of coins needed to make up the given amount. If it\'s not possible to make up the amount with the given denominations, return -1.","solution":"def min_coins(amount: int, coins: list) -> int: Returns the minimum number of coins needed to make up the given amount. If it\'s not possible to make up the amount with the given denominations, return -1. # Using dynamic programming to solve the problem. # Initialize dp array with a large number (amount + 1 is used here). dp = [amount + 1] * (amount + 1) dp[0] = 0 # base case for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Create a Python function named `find_common_substrings` that identifies all common substrings of a specified length in two given strings. The result should be a list of unique common substrings. To solve this problem, follow these steps: 1. Extract all substrings of the specified length from both input strings. 2. Identify the substrings that appear in both strings. 3. Return a sorted list of unique common substrings. The function signature should be: ```python def find_common_substrings(str1: str, str2: str, length: int) -> list[str]: ``` **Input:** - `str1` (str): The first string. - `str2` (str): The second string. - `length` (int): The length of the substrings to find. **Output:** - A list of unique common substrings of the specified length, sorted in lexicographical order. **Constraints:** - The length of the input strings, `str1` and `str2`, will not exceed 1000 characters. - The length of the substrings will be a positive integer, less than or equal to the length of both `str1` and `str2`. **Examples:** - `find_common_substrings(\\"abcdef\\", \\"defabc\\", 3)` should return `[\\"abc\\", \\"def\\"]`. - `find_common_substrings(\\"abcdef\\", \\"ghijkl\\", 2)` should return `[]`. - `find_common_substrings(\\"abcxyz\\", \\"xyzabc\\", 3)` should return `[\\"abc\\", \\"xyz\\"]`. Ensure your function handles edge cases, such as when there are no common substrings or when the length of the substring is larger than the input strings.","solution":"def find_common_substrings(str1: str, str2: str, length: int) -> list[str]: Identifies all common substrings of a specified length in two given strings. Args: str1 (str): The first string. str2 (str): The second string. length (int): The length of the substrings to find. Returns: list[str]: A sorted list of unique common substrings. if length > len(str1) or length > len(str2): return [] # Extract all possible substrings of the specified length from both strings substrings1 = {str1[i:i+length] for i in range(len(str1) - length + 1)} substrings2 = {str2[i:i+length] for i in range(len(str2) - length + 1)} # Find common substrings common_substrings = substrings1.intersection(substrings2) # Return the sorted list of common substrings return sorted(common_substrings)"},{"question":"You are given a list of strings representing file paths, where each file path describes a file in a filesystem. The filesystem is represented as a tree structure with directories containing files or other directories. Each directory and file is separated by a forward slash (\'/\') in the file paths. Your task is to write a function called `group_files_by_directory` that will group these file paths by their respective directories. # Requirements 1. The function should be named `group_files_by_directory`. 2. The function should have one parameter: - `file_paths`: A list of strings, where each string is a file path. 3. The function should return a dictionary where: - The keys are the directory paths. - The values are lists of file paths that belong to that directory. # Example Given the following list of file paths: ```python file_paths = [ \\"root/dir1/file1.txt\\", \\"root/dir1/file2.txt\\", \\"root/dir2/file1.txt\\", \\"root/dir2/dir3/file3.txt\\", \\"root/dir2/dir3/file4.txt\\" ] ``` Calling `group_files_by_directory(file_paths)` should return: ```python { \\"root/dir1\\": [\\"root/dir1/file1.txt\\", \\"root/dir1/file2.txt\\"], \\"root/dir2\\": [\\"root/dir2/file1.txt\\"], \\"root/dir2/dir3\\": [\\"root/dir2/dir3/file3.txt\\", \\"root/dir2/dir3/file4.txt\\"] } ```","solution":"def group_files_by_directory(file_paths): Groups file paths by their respective directories. Args: file_paths (list of str): A list of file paths. Returns: dict: A dictionary where the keys are directory paths and the values are lists of file paths that belong to that directory. directory_dict = {} for path in file_paths: # Split the path to get directory and file names parts = path.split(\'/\') # The directory is everything except the last part (which is the file name) directory = \'/\'.join(parts[:-1]) if directory not in directory_dict: directory_dict[directory] = [] directory_dict[directory].append(path) return directory_dict"},{"question":"**You have been tasked with implementing a Python function to determine the longest sequence of consecutive 1s in a binary string. The function should examine the input string, which consists solely of \'0\'s and \'1\'s, and return the length of the longest sequence of consecutive 1s. Write a function named `longest_consecutive_ones` that takes a single string argument `binary_str` representing the binary string. The function should return an integer representing the length of the longest contiguous subsequence of 1s. Here are the specific requirements: 1. The function must use string manipulation techniques to identify sequences of 1s. 2. It should consider edge cases such as an empty string or a string with only \'0\'s. **Function Signature:** ```python def longest_consecutive_ones(binary_str: str) -> int: pass ``` **Examples:** ```python # Example 1 print(longest_consecutive_ones(\\"1101110101\\")) # Expected output: 3 # Example 2 print(longest_consecutive_ones(\\"0000\\")) # Expected output: 0 # Example 3 print(longest_consecutive_ones(\\"1111\\")) # Expected output: 4 # Example 4 print(longest_consecutive_ones(\\"\\")) # Expected output: 0 # Example 5 print(longest_consecutive_ones(\\"1000010001\\")) # Expected output: 1 ``` **Constraints:** - The input string consists of only \'0\'s and \'1\'s. - The solution should handle inputs of varied lengths efficiently. - Ensure robustness for cases with no 1s. --- **","solution":"def longest_consecutive_ones(binary_str: str) -> int: Returns the length of the longest contiguous subsequence of 1s in the given binary string. max_length = 0 current_length = 0 for char in binary_str: if char == \'1\': current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 0 if current_length > max_length: max_length = current_length return max_length"}]'),D={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:C,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},R={class:"card-container"},P={key:0,class:"empty-state"},N=["disabled"],z={key:0},Y={key:1};function O(a,e,l,p,r,s){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",R,[(n(!0),i(b,null,w(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",Y,"Loading...")):(n(),i("span",z,"See more"))],8,N)):u("",!0)])}const L=h(D,[["render",O],["__scopeId","data-v-ea846176"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/36.md","filePath":"chatai/36.md"}'),j={name:"chatai/36.md"},B=Object.assign(j,{setup(a){return(e,l)=>(n(),i("div",null,[x(L)]))}});export{U as __pageData,B as default};
