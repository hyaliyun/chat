import{_ as d,o as n,c as r,a as t,m as f,t as h,C as p,M as _,U as b,f as l,F as v,p as y,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},R={class:"review-title"},W={class:"review-content"};function F(i,e,u,m,s,a){return n(),r("div",k,[t("div",T,[t("div",R,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),f(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",W,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),f(h(u.poem.solution),1)])])])}const N=d(q,[["render",F],["__scopeId","data-v-9e0d5ac1"]]),A=JSON.parse(`[{"question":"Write a function to solve the N-Queens problem in Python. The N-Queens problem is a classic combinatorial problem where the goal is to place N queens on an N×N chessboard such that no two queens threaten each other. Thus, a queen can only be placed on a cell that is not in the same row, the same column, or the same diagonal as any other queen. You should return all distinct solutions to the N-Queens puzzle the board is represented as a 2D list where ‘Q’ represents a queen and ‘.’ represents an empty space.","solution":"def solveNQueens(n): def is_safe(board, row, col): # Check if no other queens are in the same column for i in range(row): if board[i][col] == 'Q': return False # Check upper left diagonal i, j = row-1, col-1 while i >= 0 and j >= 0: if board[i][j] == 'Q': return False i -= 1 j -= 1 # Check upper right diagonal i, j = row-1, col+1 while i >= 0 and j < n: if board[i][j] == 'Q': return False i -= 1 j += 1 return True def solve(board, row, solutions): if row == n: solutions.append([''.join(r) for r in board]) return for col in range(n): if is_safe(board, row, col): board[row][col] = 'Q' solve(board, row+1, solutions) board[row][col] = '.' solutions = [] board = [['.' for _ in range(n)] for _ in range(n)] solve(board, 0, solutions) return solutions"},{"question":"Write a function to convert a decimal number to its binary equivalent using recursion. The function should handle both positive and negative integers and should not use loops. The function should also handle floating-point numbers but should only consider the integer part of the number for conversion.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary equivalent using recursion. This function handles both positive and negative integers, and for floating-point numbers, only the integer part is considered. # Handling the base case for zero if n == 0: return \\"0\\" # This inner function will handle the actual conversion using recursion def convert_to_binary(num): if num == 0: return \\"\\" else: return convert_to_binary(num // 2) + str(num % 2) # Handling negative numbers if n < 0: return '-' + convert_to_binary(abs(int(n))) else: return convert_to_binary(int(n))"},{"question":"Write a function to find the given value \`v\` in a 2D matrix \`A\` of size \`n x m\`. If \`v\` is found, return its position \`(i, j)\`, where \`i\` and \`j\` are the row and column indices of \`v\`. If \`v\` is not found, return \`(-1, -1)\`. The function should have a time complexity of \`O(n * m)\`.","solution":"def find_value_in_matrix(A, v): Finds the value \`v\` in the 2D matrix \`A\`. If found, returns the position (i, j). Otherwise, returns (-1, -1). :param A: List[List[int]] - 2D matrix of size n x m :param v: int - value to find in the matrix :return: Tuple[int, int] - position of value in the matrix or (-1, -1) if not found n = len(A) for i in range(n): m = len(A[i]) for j in range(m): if A[i][j] == v: return (i, j) return (-1, -1)"},{"question":"Write a function to reverse a singly linked list using the iterative method in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list using the iterative method. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to compute the maximum value in an array using recursion.","solution":"def find_max_recursive(arr): Finds the maximum value in an array using recursion. Parameters: arr (list): A list of numbers. Returns: int/float: The maximum value in the array. # Base case: if the array is empty, return negative infinity if len(arr) == 0: return float('-inf') # If the array has only one element, return that element if len(arr) == 1: return arr[0] # Recursive step: return the maximum between the first element # and the maximum of the rest of the array return max(arr[0], find_max_recursive(arr[1:]))"},{"question":"Write a function to find the maximum value in an integer array. The function should return the maximum value found. If the array is empty, the function should return \`None\`. Additionally, you should handle any potential exceptions that may arise if the array contains non-integer elements.","solution":"def find_max(arr): Returns the maximum value in an array of integers. If the array is empty, returns None. Handles exceptions if the array contains non-integer elements. if not arr: return None try: max_value = arr[0] for num in arr[1:]: if not isinstance(num, int): raise ValueError(\\"Array contains non-integer elements\\") if num > max_value: max_value = num return max_value except (ValueError, TypeError): return None"},{"question":"Write a function to check if a list contains a specific value.","solution":"def contains(lst, value): Checks if the list \`lst\` contains the \`value\`. Parameters: lst (list): The list in which to check for the value. value (any): The value to check for in the list. Returns: bool: True if the value is found in the list, False otherwise. return value in lst"},{"question":"Write a function to compute the sum of the squares of the first n natural numbers. I need the function to be implemented in Python.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. :param n: The number of terms. :type n: int :return: Sum of the squares of the first n natural numbers. :rtype: int return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Write a function to reverse the elements of an array in-place. The function should have a time complexity of O(n), where n is the number of elements in the array.","solution":"def reverse_array(arr): Reverses the elements of the array in-place. Parameters: arr (list): The list to be reversed. Returns: list: The reversed list (in-place modification, so same reference). left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function to implement the Floyd-Warshall algorithm that finds the shortest path between all pairs of vertices in a given weighted graph. The graph is represented as an array of arrays, where each inner array represents the weights of the edges. Infinity is used to represent the absence of a direct path between two vertices. If a direct path to the vertex does not exist, the weight for that edge is set to infinity. The function should return the two-dimensional array with the shortest distances between all pairs of vertices. If a path does not exist between zwei vertices, the corresponding entry in the output array should be infinity.","solution":"def floyd_warshall(graph): Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a weighted graph. Parameters: graph (list of lists): A 2D list where graph[i][j] represents the weight of the edge from vertex i to vertex j. 'float('inf')' is used to represent the absence of a direct path between two vertices. Returns: list of lists: A 2D list where the element at [i][j] represents the shortest distance from vertex i to vertex j. # Number of vertices in the graph n = len(graph) # Initializing the distance array dist = [[float('inf')] * n for _ in range(n)] # Copy the input graph to the distance array for i in range(n): for j in range(n): dist[i][j] = graph[i][j] # Distance from a vertex to itself is always 0 for i in range(n): dist[i][i] = 0 # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] + dist[k][j] < dist[i][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist"},{"question":"Write a function to extract all email addresses from a given string. An email address is defined as a sequence of characters that contains '@' and '.', and is located between word boundaries. Here's an example input string where we need to extract email addresses.","solution":"import re def extract_emails(text): Extracts all email addresses from the given text. An email address is defined as a sequence of characters that contains '@' and '.', and is located between word boundaries. Parameters: text (str): A string containing potential email addresses. Returns: list: A list of extracted email addresses. # Regex pattern to match email addresses email_pattern = r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b' emails = re.findall(email_pattern, text) return emails"},{"question":"Write a function to find the smallest positive integer that is evenly divisible by all numbers from 1 to n. This integer is known as the least common multiple (LCM). For example, the smallest number divisible by all numbers from 1 to 10 is 2520.","solution":"import math def smallest_multiple(n): Returns the smallest positive integer that is evenly divisible by all numbers from 1 to n. def lcm(a, b): return a * b // math.gcd(a, b) smallest_mult = 1 for i in range(1, n + 1): smallest_mult = lcm(smallest_mult, i) return smallest_mult"},{"question":"Write a function to find the smallest number in a linked list and return it. Assume the linked list is not empty.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_smallest_number(head): Finds the smallest number in a linked list. :param head: ListNode, the head of the linked list :return: int, the smallest number in the linked list if head is None: raise ValueError(\\"The linked list is empty\\") current = head smallest = current.value while current is not None: if current.value < smallest: smallest = current.value current = current.next return smallest"},{"question":"Write a function to calculate the sum of all even and odd numbers within a given range (inclusive). Return a tuple containing the sum of even numbers and the sum of odd numbers respectively.","solution":"def sum_even_odd(start, end): Returns a tuple with the sum of even and odd numbers within a given range (inclusive). Parameters: start (int): Start of the range (inclusive). end (int): End of the range (inclusive). Returns: tuple: A tuple containing the sum of even numbers and the sum of odd numbers respectively. sum_even = 0 sum_odd = 0 for num in range(start, end + 1): if num % 2 == 0: sum_even += num else: sum_odd += num return (sum_even, sum_odd)"},{"question":"Write a function to calculate the area and circumference of a circle given its radius.","solution":"import math def circle_metrics(radius): Calculates and returns the area and circumference of a circle given its radius. :param radius: The radius of the circle. :return: A tuple containing the area and circumference of the circle. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") area = math.pi * radius ** 2 circumference = 2 * math.pi * radius return (area, circumference)"},{"question":"Write a function to implement the Floyd-Warshall algorithm, which finds the shortest paths between all pairs of vertices in a weighted graph. The function should take a 2D list representing the adjacency matrix of the graph, where the value at matrix[i][j] is the weight of the edge between vertex i and vertex j. The function should return a 2D list containing the shortest paths between all pairs of vertices.","solution":"def floyd_warshall(adj_matrix): Implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a weighted graph. Parameters: adj_matrix : list of list of int A 2D list representing the adjacency matrix of the graph, where the value at adj_matrix[i][j] is the weight of the edge between vertex i and vertex j. Returns: list of list of int A 2D list representing the shortest paths between all pairs of vertices. # Number of vertices n = len(adj_matrix) # Initialize the shortest paths matrix with the initial adjacency matrix dist = [row[:] for row in adj_matrix] # Apply Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist"},{"question":"Write a function to replace the last two characters of a string with '99'. However, if the string is shorter than two characters, return the original string.","solution":"def replace_last_two_with_99(s): Replaces the last two characters of a string with '99'. If the string is shorter than two characters, returns the original string. if len(s) < 2: return s return s[:-2] + '99'"},{"question":"Write a function to detect if a binary tree is a subtree of another binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_subtree(root, subRoot): Determines if subRoot is a subtree of root. Args: root (TreeNode): The root of the main binary tree. subRoot (TreeNode): The root of the subtree. Returns: bool: True if subRoot is a subtree of root, False otherwise. if not subRoot: return True if not root: return False if is_same_tree(root, subRoot): return True return is_subtree(root.left, subRoot) or is_subtree(root.right, subRoot) def is_same_tree(s, t): Determines if two binary trees are the same. Args: s (TreeNode): The root of the first binary tree. t (TreeNode): The root of the second binary tree. Returns: bool: True if both trees are the same, False otherwise. if not s and not t: return True if not s or not t: return False return s.val == t.val and is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right)"},{"question":"Write a function to check if a number is prime in Python. I'd like to understand the logic behind the implementation as well.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # Any other even number is not prime max_divisor = int(n**0.5) + 1 # Only check up to the square root of n for d in range(3, max_divisor, 2): # Skip even numbers if n % d == 0: return False return True"},{"question":"Write a function to determine if two binary trees are structurally identical or not. You are not allowed to use recursion. Instead, you need to use a non-recursive approach, possibly utilizing stack, queue, or any other data structure.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def are_structurally_identical(root1, root2): Determines if two binary trees are structurally identical. if not root1 and not root2: return True if not root1 or not root2: return False stack1 = [root1] stack2 = [root2] while stack1 and stack2: node1 = stack1.pop() node2 = stack2.pop() if not node1 and not node2: continue if not node1 or not node2: return False if node1.val != node2.val: return False stack1.append(node1.right) stack1.append(node1.left) stack2.append(node2.right) stack2.append(node2.left) return not stack1 and not stack2"},{"question":"Write a function to find the second largest element in an array. If the array is empty, it should return \`None\`. If there is only one unique element in the array, it should also return \`None\` because there is no second largest element.","solution":"def find_second_largest(arr): Returns the second largest element in the array. If the array is empty or has only one unique element, it returns None. if not arr or len(set(arr)) < 2: return None unique_elements = list(set(arr)) unique_elements.sort(reverse=True) return unique_elements[1]"},{"question":"Write a function to calculate the maximum sum of a continuous subarray within a given one-dimensional array of integers. This is known as Kadane's Algorithm.","solution":"def max_subarray_sum(arr): Uses Kadane's Algorithm to find the maximum sum of a continuous subarray. Args: - arr: List of integers Returns: - The maximum sum of a continuous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the sum of the digits of a number. If the number is less than 10, return the number itself. Otherwise, return the sum of its digits. If the number is negative, treat it as its absolute value.","solution":"def sum_of_digits(number): Returns the sum of the digits of the number. If the number is less than 10, return the number itself. If the number is negative, treat it as its absolute value. number = abs(number) if number < 10: return number else: digit_sum = 0 while number > 0: digit_sum += number % 10 number //= 10 return digit_sum"},{"question":"Write a function to calculate the nth Fibonacci number using recursion in Python. The nth Fibonacci number is defined as the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Your function should handle edge cases and ensure efficiency for large values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to reverse the order of words in a string without reversing the order of characters in each word. For example, given the input string \\"Hello world from Alibaba\\", the function should return \\"Alibaba from world Hello\\".","solution":"def reverse_words_order(s): Reverses the order of words in a string without reversing the order of characters in each word. Parameters: s (str): The input string. Returns: str: A new string with the words reversed in order. words = s.split() # split the string into words reversed_words = words[::-1] # reverse the list of words return ' '.join(reversed_words) # join the reversed list of words into a string"},{"question":"Write a function to determine the number of unique integers in an array after removing duplicates. You can use any language you prefer.","solution":"def count_unique_integers(arr): Returns the number of unique integers in an array after removing duplicates. return len(set(arr))"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should handle the special case where the factorial of 0 is 1. Additionally, the function should handle large numbers by returning a BigInteger to prevent overflow.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using recursion. The function handles the special case where the factorial of 0 is 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the most frequent element in a list of numbers. If there are multiple elements with the same highest frequency, return the smallest one. If the list is empty, return \`None\`.","solution":"from collections import Counter def most_frequent_element(nums): Returns the most frequent element in the list. If there are multiple elements with the same highest frequency, returns the smallest one. If the list is empty, returns None. if not nums: return None counter = Counter(nums) max_freq = max(counter.values()) most_frequent = [num for num, freq in counter.items() if freq == max_freq] return min(most_frequent)"},{"question":"Write a function to find the maximum subarray sum in an array. The subarray should have elements from an index in the range 0 to k (0 ≤ k ≤ n-1). Additionally, create a function to reverse the array, considering values at indices from 0 to n-1 with a bias parameter b, where b ranges from 0 to 1, representing a constant amount added to the values at the end while reversing.","solution":"def max_subarray_sum(arr, k): Finds the maximum sum of a subarray from index 0 to k. Parameters: arr (List[int]): The input array. k (int): The maximum index of the subarray (inclusive). Returns: int: The maximum sum of the subarray from index 0 to k. max_ending_here = 0 max_so_far = float('-inf') for i in range(k + 1): max_ending_here += arr[i] if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far def reverse_array_with_bias(arr, b): Reverses the array and adds a bias b to values at each index while reversing. Parameters: arr (List[int]): The input array. b (float): The bias to be added after reversing the array. Returns: List[int]: The reversed array with bias added to values. n = len(arr) reversed_arr = arr[::-1] biased_reversed_arr = [reversed_arr[i] + b for i in range(n)] return biased_reversed_arr"},{"question":"Write a function to find the maximum element in a stack data structure.","solution":"class MaxStack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, value): self.stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def pop(self): if not self.stack: return None value = self.stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() return value def max(self): if not self.max_stack: return None return self.max_stack[-1]"},{"question":"Write a function to implement a Depth-First Search (DFS) on a graph represented as an adjacency list. You can assume that the graph does not contain any weights on the edges.","solution":"def dfs(graph, start): Perform Depth-First Search on a graph represented as an adjacency list. :param graph: Dict, adjacency list representation of the graph :param start: Starting node for DFS :return: List of nodes visited in DFS order visited = set() result = [] def dfs_helper(node): if node not in visited: visited.add(node) result.append(node) for neighbor in graph.get(node, []): dfs_helper(neighbor) dfs_helper(start) return result"},{"question":"Write a function to remove all vowels from a given string, maintaining the order of the remaining characters. For example, if the input string is \\"hello world\\", the output should be \\"hll wrld\\".","solution":"def remove_vowels(s): Removes all vowels from the given string and returns the result. Args: s (str): The input string. Returns: str: The string without vowels. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"Write a function to count the number of unique characters in a given string. The function should return the count of distinct characters, ignoring case sensitivity. For example, the string \\"HelloWorld\\" should return 7, as there are 7 unique characters ('H', 'e', 'l', 'o', 'W', 'r', 'd') when case is ignored.","solution":"def count_unique_characters(s): Returns the count of unique characters in a given string, ignoring case sensitivity. s = s.lower() # Convert the string to lowercase to ignore case sensitivity unique_chars = set(s) # Use a set to extract unique characters return len(unique_chars)"},{"question":"Write a function to multiply two numbers without using the '*' operator in Python. How can we do this using bit manipulation?","solution":"def multiply(a, b): Multiplies two integers a and b using bitwise operations. def add(x, y): # Iterate till there is no carry while y != 0: # carry now contains common set bits carry = x & y # Sum of bits where at least one of the bits is not set x = x ^ y # Shift carry by one so that adding it to x gives the required sum y = carry << 1 return x # Determine the sign of the result sign = -1 if (a < 0) ^ (b < 0) else 1 a, b = abs(a), abs(b) result = 0 # Perform bitwise multiplication while b > 0: # If the least significant bit of b is set if b & 1: result = add(result, a) a <<= 1 # shift a to the left by 1 b >>= 1 # shift b to the right by 1 return sign * result"},{"question":"Write a function to find the minimum cost to connect all points. The function takes a list of points, where each point is represented as a tuple (x, y), and returns the minimum cost to connect all points. You can only connect points that are within a specified radius. The cost to connect two points is the Manhattan distance between them.","solution":"import heapq def manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) def min_cost_connect_points(points): if not points: return 0 n = len(points) connected = [False] * n min_heap = [(0, 0)] # (cost, point_index) total_cost = 0 while min_heap: cost, i = heapq.heappop(min_heap) if connected[i]: continue total_cost += cost connected[i] = True for j in range(n): if not connected[j]: heapq.heappush(min_heap, (manhattan_distance(points[i], points[j]), j)) return total_cost"},{"question":"Write a function to find the maximum sum from an array of integers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the given array 'arr'. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to solve a Sudoku puzzle. The Sudoku puzzle is represented as a 2D list where 0 represents an empty cell.","solution":"def is_valid(board, row, col, num): # Check if num is valid at board[row][col] for i in range(9): if board[row][i] == num or board[i][col] == num: return False box_row_start = (row // 3) * 3 box_col_start = (col // 3) * 3 for i in range(3): for j in range(3): if board[box_row_start + i][box_col_start + j] == num: return False return True def solve_sudoku(board): empty = find_empty_position(board) if not empty: return True # Puzzle Solved row, col = empty for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_position(board): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None"},{"question":"Write a function to detect a cycle in a given linked list. If a cycle is detected, return the node where the cycle begins. If there is no cycle, return null. The function should use Floyd's Cycle-Finding Algorithm (tortoise and hare).","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): Detects if a cycle exists in the linked list and returns the node where the cycle begins. If no cycle exists, returns None. Uses Floyd's Tortoise and Hare algorithm. if not head or not head.next: return None slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to find the smallest prime number greater than a given integer \`n\`. Your function should take an integer \`n\` as input and return the smallest prime number greater than \`n\`. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False max_divisor = int(num ** 0.5) + 1 for d in range(3, max_divisor, 2): if num % d == 0: return False return True def smallest_prime_greater_than(n): Find the smallest prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Write a function to find the intersection of two arrays, and return the result as a vector. The function should avoid duplicates in the output and the elements in the result should be sorted. For two given arrays \`A\` and \`B\`, write a function \`vector<int> intersect(vector<int>& A, vector<int>& B)\` that returns the intersection of these two arrays.","solution":"def intersect(A, B): Returns the sorted intersection of A and B without duplicates. # Convert lists to sets to remove duplicates and find intersection set_A = set(A) set_B = set(B) # Find the intersection of the two sets intersection = set_A.intersection(set_B) # Convert the intersection to a sorted list result = sorted(list(intersection)) return result"},{"question":"Write a function to compute the nth Fibonacci number using recursion. The function should also ensure that the calculation is efficient by memoizing the results of previous calculations. Explain the concept and provide the code.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to calculate the sum of numbers in a list up to a certain index.","solution":"def sum_up_to_index(numbers, index): Calculates the sum of numbers in a list up to a certain index. :param numbers: List of numbers :param index: Index up to which the numbers should be summed :return: Sum of numbers up to the given index if index < 0 or index >= len(numbers): raise ValueError(\\"Index out of bounds\\") return sum(numbers[:index+1])"},{"question":"Write a function to generate a random quote. The function should accept two parameters: a list of authors and a list of quote texts. The function should randomly select an author and a quote from the provided lists and return a formatted string like this: \\"The great beauty of solitude is that one may speak to oneself.\\" - Albert Camus","solution":"import random def generate_random_quote(authors, quotes): Randomly selects an author and a quote from the provided lists and returns a formatted string. :param authors: List of authors :param quotes: List of quote texts :return: Formatted string with quote and author if not authors or not quotes: raise ValueError(\\"Authors and quotes lists must not be empty\\") author = random.choice(authors) quote = random.choice(quotes) return f'\\"{quote}\\" - {author}'"},{"question":"Write a function to extract the 'tp' (timestamp) from a given SRT (SubRip Subtitle) text.","solution":"import re def extract_timestamps(srt_text): Extracts all timestamps from a given SRT (SubRip Subtitle) text. Args: srt_text (str): SRT file content as a string. Returns: list: A list of timestamps (start and end) found in the SRT text. # Regular expression to match SRT timestamps timestamp_pattern = re.compile(r'(d{2}:d{2}:d{2},d{3}) --> (d{2}:d{2}:d{2},d{3})') # Extract all matches timestamps = timestamp_pattern.findall(srt_text) return timestamps"},{"question":"Write a function to find the minimum length of a subarray that must be sorted to make the whole array sorted.","solution":"def find_unsorted_subarray(nums): Finds the minimum length of a subarray that must be sorted to make the whole array sorted. :param nums: List of integers representing the array :return: Minimum length of the subarray that needs to be sorted n = len(nums) start, end = 0, -1 max_num, min_num = float('-inf'), float('inf') for i in range(n): if nums[i] < max_num: end = i else: max_num = nums[i] for i in range(n-1, -1, -1): if nums[i] > min_num: start = i else: min_num = nums[i] return end - start + 1 if end != -1 else 0"},{"question":"Write a function to generate a random sequence of characters consisting of lowercase English letters. The function should take an integer \`n\` and return a string of length \`n\`.","solution":"import random import string def generate_random_sequence(n): Generates a random sequence of lowercase English letters with length n. Args: - n (int): The length of the sequence to generate. Returns: - str: A random sequence of length n. return ''.join(random.choices(string.ascii_lowercase, k=n))"},{"question":"Write a function to calculate the sum of all numbers in an array excluding the first and last elements of the array if they are even. If the array has less than three elements, return the sum of the existing elements.","solution":"def sum_excluding_ends_if_even(arr): Returns the sum of all numbers in the array excluding the first and last elements if they are even. If the array has less than three elements, returns the sum of the existing elements. if len(arr) < 3: return sum(arr) if arr[0] % 2 == 0: arr = arr[1:] if arr[-1] % 2 == 0: arr = arr[:-1] return sum(arr)"},{"question":"Write a function to implement a stack with push, pop, and max operations. The max operation should return the maximum value in the stack in O(1) time complexity.","solution":"class MaxStack: def __init__(self): Initialize two stacks, one to hold the actual stack values and another to keep track of the max values. self.stack = [] self.max_stack = [] def push(self, value): Push value onto the stack and update max_stack to reflect the new maximum if applicable. self.stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def pop(self): Pop value from the stack and update max_stack if necessary. if not self.stack: return None # Or raise an exception value = self.stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() return value def max(self): Return the maximum value in the stack in O(1) time complexity. if not self.max_stack: return None # Or raise an exception return self.max_stack[-1]"},{"question":"Write a function to check for balanced parentheses in a string. The function should return \`true\` if the parentheses are balanced, and \`false\` otherwise. Balanced parentheses mean that every opening parenthesis has a corresponding closing parenthesis in the correct order.","solution":"def is_balanced_parentheses(s): Checks if the given string has balanced parentheses. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Write a function to determine the point of intersection between two lines given by their coordinates. Each line is defined by a point and a direction vector. The function should return the intersection point.","solution":"def line_intersection(p1, d1, p2, d2): Determine the point of intersection between two lines given by their coordinates. Each line is defined by a point and a direction vector: - Line 1: passes through point p1 and has direction vector d1 - Line 2: passes through point p2 and has direction vector d2 The function returns the intersection point as a tuple (x, y). Parameters: p1 (tuple): A tuple (x1, y1) representing a point on the first line. d1 (tuple): A tuple (dx1, dy1) representing the direction vector of the first line. p2 (tuple): A tuple (x2, y2) representing a point on the second line. d2 (tuple): A tuple (dx2, dy2) representing the direction vector of the second line. Returns: tuple or None: The intersection point (x, y) if the lines intersect, otherwise None. x1, y1 = p1 dx1, dy1 = d1 x2, y2 = p2 dx2, dy2 = d2 # Calculate determinants det = dx1 * dy2 - dy1 * dx2 if det == 0: # Lines are parallel, no intersection return None t = ((x2 - x1) * dy2 - (y2 - y1) * dx2) / det intersection_x = x1 + t * dx1 intersection_y = y1 + t * dy1 return (intersection_x, intersection_y)"},{"question":"Write a function to sum all the numbers in a list using Python. The list may contain both integers and floating-point numbers. The function should return the sum as a floating-point number.","solution":"def sum_list(numbers): Returns the sum of all numbers in the list. :param numbers: List of numbers (ints and/or floats) :return: Sum of the numbers as a float return float(sum(numbers))"},{"question":"Write a function to remove duplicates from a sorted array in place and return the new length of the array.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in place and returns the new length of the array. Parameters: nums (List[int]): A sorted list of integers. Returns: int: The new length of the array after removing duplicates. if not nums: return 0 # Pointer for the new length new_length = 1 for i in range(1, len(nums)): if nums[i] != nums[i-1]: nums[new_length] = nums[i] new_length += 1 return new_length"},{"question":"Write a function to find the maximum sum of a continuous subsequence in an array of integers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a continuous subsequence in an array of integers. Uses Kadane's algorithm for an efficient solution. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the first repeated character in a string. The function should return the character that has the first repeated occurrence. If no character is repeated, the function should return a specific message.","solution":"def first_repeated_character(s): Returns the first repeated character in the string s. If no character is repeated, returns 'No character is repeated'. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"No character is repeated\\""},{"question":"Write a function to calculate the sum of all prime numbers less than a given number n. The function should be designed to handle large n efficiently. The function should be designed to handle large n efficiently and should be optimized to minimize both time and space complexity.","solution":"def sum_of_primes_below(n): Calculate the sum of all prime numbers less than n. Parameters: n (int): the upper limit to calculate the sum of primes below Returns: int: the sum of all primes below n if n <= 2: return 0 is_prime = [True] * n is_prime[0] = is_prime[1] = False p = 2 while p * p < n: if is_prime[p]: for i in range(p * p, n, p): is_prime[i] = False p += 1 return sum(i for i, prime in enumerate(is_prime) if prime)"},{"question":"Write a function to determine if a access token is expired. A function int isTokenExpired(int currentTimestamp, long tokenTimestamp, int tokenDuration) that returns 1 if the token is expired and 0 otherwise. The current timestamp is provided in seconds, and the token timestamp is the timestamp when the token was generated. The token duration is the number of seconds for which the token is valid.","solution":"def isTokenExpired(currentTimestamp, tokenTimestamp, tokenDuration): Returns 1 if the token is expired and 0 otherwise. :param currentTimestamp: The current timestamp in seconds. :param tokenTimestamp: The timestamp when the token was generated in seconds. :param tokenDuration: The number of seconds for which the token is valid. :return: 1 if the token is expired, 0 otherwise. if currentTimestamp > tokenTimestamp + tokenDuration: return 1 return 0"},{"question":"Write a function to count the number of bits that are set to 1 in the binary representation of a given integer \`n\`. The function should be named \`countSetBits\` and should take an integer \`n\` as its parameter.","solution":"def countSetBits(n): Returns the number of bits that are set to 1 in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Write a function to calculate the maximum sum of a path from the root to any leaf node in a binary tree. The path sum is defined as the sum of the values of the nodes along the path.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_path_sum(root): Calculate the maximum sum of a path from the root to any leaf node in a binary tree. :param root: TreeNode, the root of the binary tree :return: int, the maximum sum of the path if not root: return 0 left_sum = max_path_sum(root.left) right_sum = max_path_sum(root.right) return root.value + max(left_sum, right_sum)"},{"question":"Write a function to find all the unique subsets of a given set of elements. The function should not return duplicates, even if the input contains repeated elements. Additionally, the subsets should not include the empty set.","solution":"def unique_subsets(nums): Given a list of numbers, returns all unique subsets (excluding the empty set). :param nums: List[int] :return: List[List[int]] nums.sort() # Sort the array to handle duplicates res = [] def backtrack(start, path): if path: res.append(path[:]) for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue path.append(nums[i]) backtrack(i + 1, path) path.pop() backtrack(0, []) return res"},{"question":"Write a function to calculate the nth Fibonacci number using iteration.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: return \\"Input must be a positive integer.\\" elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to reverse a string in Python while keeping the punctuation and spacing intact. For example, given the input \\"Hello, world!\\", the function should return \\"!dlrow ,olleH\\".","solution":"def reverse_string(s): Reverses the string while keeping the punctuation and spacing intact. return s[::-1]"},{"question":"Write a function to calculate the minimum number of operations required to transform one word into another. You can perform the following operations: insert, delete, or replace a character.","solution":"def min_distance(word1, word2): Calculate the minimum number of operations required to transform word1 into word2. Operations allowed: insertion, deletion, replacement of characters. len1, len2 = len(word1), len(word2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] # Initialize dp table for i in range(len1 + 1): dp[i][0] = i for j in range(len2 + 1): dp[0][j] = j # Compute minimum number of operations for i in range(1, len1 + 1): for j in range(1, len2 + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 return dp[len1][len2]"},{"question":"Write a function to find the second largest number in an array. If the array has less than two unique numbers, return \`None\`. If the array is empty, return \`None\`.","solution":"def second_largest(arr): Returns the second largest unique number in the array. If the array has less than two unique numbers, returns None. If the array is empty, returns None. if not arr or len(arr) < 2: return None unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"Write a function to calculate the number of ways to choose k items from a set of n items without regard to the order of selection. This is known as the binomial coefficient, often represented as C(n, k) or \\"n choose k\\".","solution":"def binomial_coefficient(n, k): Calculate the binomial coefficient C(n, k) which represents the number of ways to choose k items from n items without regard to the order. Uses a dynamic programming approach to calculate the coefficient. Parameters: n (int): Total number of items. k (int): Number of items to choose. Returns: int: The binomial coefficient C(n, k). if k > n: return 0 if k == 0 or k == n: return 1 # Dynamic programming table initialization C = [[0 for _ in range(k+1)] for _ in range(n+1)] # Calculate binomial coefficient in bottom-up manner for i in range(n+1): for j in range(min(i, k)+1): # Base cases if j == 0 or j == i: C[i][j] = 1 else: # Calculate value using previously calculated values C[i][j] = C[i-1][j-1] + C[i-1][j] return C[n][k]"},{"question":"Write a function to convert a string to a URL-encoded format. A URL-encoded format means converting spaces to plus signs (+) and reserved characters to their hexadecimal representation. How can this be achieved in Python?","solution":"import urllib.parse def url_encode(string): Converts a string to a URL-encoded format. Spaces are replaced with plus signs (+), and reserved characters are converted to their hexadecimal representation. return urllib.parse.quote_plus(string)"},{"question":"Write a function to calculate the depth of a binary tree in Python. The function should take the root of the binary tree as input and return the maximum depth from the root to any leaf node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to find the longest palindromic substring in a given string s. Examples: \`longest_palindrome(\\"babad\\")\` should return \`\\"bab\\"\` or \`\\"aba\\"\`, and \`longest_palindrome(\\"cbbd\\")\` should return \`\\"bb\\"\`. Discuss the algorithmic approach and then provide the Python code.","solution":"def longest_palindrome(s): Finds the longest palindromic substring in the given string \`s\`. Args: s (str): The input string. Returns: str: The longest palindromic substring. if not s or len(s) == 1: return s start, end = 0, 0 for i in range(len(s)): len1 = expand_around_center(s, i, i) # Odd length palindromes len2 = expand_around_center(s, i, i + 1) # Even length palindromes max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return s[start:end + 1] def expand_around_center(s, left, right): Helper function to expand around the center and find the length of the palindrome. Args: s (str): The input string. left (int): The starting left index. right (int): The starting right index. Returns: int: The length of the longest palindrome centered at the given indices. while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1"},{"question":"Write a function to generate all permutations of a given string, considering duplicates. How can I handle duplicates while ensuring that no duplicate permutations are generated?","solution":"from itertools import permutations def unique_permutations(s): Returns a list of unique permutations of the given string. perm_set = set(permutations(s)) unique_perm_list = [''.join(p) for p in perm_set] return unique_perm_list"},{"question":"Write a function to generate a Fibonacci sequence up to a given number \`n\`. The sequence should be generated iteratively rather than recursively to optimize performance and avoid stack overflow issues with large \`n\`. Your function should return the sequence as a list.","solution":"def generate_fibonacci_sequence(n): Generates a Fibonacci sequence up to the given number \`n\`. The sequence is generated iteratively. Args: n (int): The number up to which the Fibonacci sequence is to be generated. Returns: list: The Fibonacci sequence up to \`n\`. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to reverse a linked list. The linked list is represented as a sequence of node objects, where each node has a value and a reference to the next node in the sequence.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the linked list and returns the new head of the list. :param head: ListNode | The head of the linked list :return: ListNode | The new head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to determine whether a given string is a palindrome chess board in Python. A palindrome chess board is defined as a string that reads the same backward as forward when split into substrings of equal length. For example, \\"abba\\" is a palindrome chess board, but \\"abcba\\" is not.","solution":"def is_palindrome_chess_board(s): Determine whether a given string is a palindrome chess board. Args: - s (str): The input string. Returns: - bool: \`True\` if the string is a palindrome chess board, \`False\` otherwise. n = len(s) if n % 2 != 0: return False mid = n // 2 return s[:mid] == s[mid:][::-1]"},{"question":"Write a function to print all even numbers in a given list, separated by commas.","solution":"def print_even_numbers(numbers): Returns a string of all even numbers in the given list, separated by commas. :param numbers: List of integers :return: String of even numbers separated by commas even_numbers = [str(num) for num in numbers if num % 2 == 0] return ', '.join(even_numbers)"},{"question":"Write a function to extract the list of users from a web page using Python and BeautifulSoup. The web page is structured in HTML and includes user details such as their names and emails. The function should return a list of dictionaries, where each dictionary represents a user with keys 'name' and 'email'.","solution":"from bs4 import BeautifulSoup def extract_users(html_content): Extracts the list of users from a web page content. Args: html_content (str): A string containing the HTML content of the web page. Returns: list: A list of dictionaries, each containing 'name' and 'email' of the users. soup = BeautifulSoup(html_content, 'html.parser') users = [] user_elements = soup.find_all('div', class_='user') for user_element in user_elements: name = user_element.find('span', class_='name').text email = user_element.find('span', class_='email').text users.append({'name': name, 'email': email}) return users"},{"question":"Write a function to find the missing number in an array of first n natural numbers.","solution":"def find_missing_number(arr, n): Returns the missing number in an array of first n natural numbers. :param arr: List of integers from 1 to n with one number missing :param n: The maximum number in the series (inclusive) :return: The missing number expected_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(expected_sum - actual_sum)"},{"question":"Write a function to reverse the characters of a string in Python. For example, if the string is \\"hello\\", the function should return \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to detect cycles in a directed graph using DFS and return the starting node of the cycle if found, otherwise return null.","solution":"def detect_cycle(graph): Function to detect cycles in a directed graph using DFS. Parameters: graph (dict): Adjacency list representation of the graph where keys are node labels and values are lists of neighbors. Returns: int/None: The starting node of the cycle if found, otherwise None. def dfs(node): if node in visiting: return node if node in visited: return None visiting.add(node) for neighbor in graph.get(node, []): cycle_start = dfs(neighbor) if cycle_start is not None: return cycle_start visiting.remove(node) visited.add(node) return None visiting = set() visited = set() for node in graph: cycle_start = dfs(node) if cycle_start is not None: return cycle_start return None"},{"question":"Write a function to calculate the area of a circle given its radius. If the radius is negative, the function should return -1, indicating an invalid input.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. If the radius is negative, returns -1 indicating an invalid input. if radius < 0: return -1 return math.pi * radius ** 2"},{"question":"Write a function to reverse a singly linked list. You should not use any extra space. You can only use O(1) extra space.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverseLinkedList(head): Reverses the given singly linked list and returns the new head. Args: head (ListNode): The head of the singly linked list. Returns: ListNode: The new head of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to return the number of islands in a binary grid (a grid consisting of those 0s and 1s). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.","solution":"def num_islands(grid): Returns the number of islands in a binary grid. Parameters: grid (List[List[int]]): A 2D binary grid where 1 represents land and 0 represents water. Returns: int: The number of islands. if not grid: return 0 def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # mark as visited # recursively visit all adjacent cells dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: # found an unvisited island count += 1 dfs(i, j) return count"},{"question":"Write a function to determine if a given array of integers is sorted in ascending order. The function should return true if the array is sorted, and false if it is not. The array may contain duplicate values.","solution":"def is_sorted(arr): Determines if the array is sorted in ascending order. Args: arr (list of int): The array of integers to be checked. Returns: bool: True if the array is sorted, False otherwise. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a function to find the two unique numbers in a list of integers where every other number appears twice. The function should return these two unique numbers.","solution":"def find_unique_numbers(nums): Returns the two unique numbers in a list where every other number appears twice. xor_result = 0 for num in nums: xor_result ^= num # Get the rightmost set bit in xor_result (a bit which is 1) set_bit = xor_result & -xor_result unique1, unique2 = 0, 0 for num in nums: if num & set_bit: unique1 ^= num else: unique2 ^= num return (unique1, unique2)"},{"question":"Write a function to calculate the number of unique IP addresses from a given list of IP addresses, where you need to filter out any IP addresses that are invalid. An invalid IP address consists of at least one segment that contains characters other than digits or segments with more than three digits.","solution":"import re def is_valid_ip(ip): Validates if the given IP address is valid. segments = ip.split(\\".\\") if len(segments) != 4: return False for segment in segments: if not segment.isdigit() or not (0 <= int(segment) <= 255) or len(segment) > 3: return False return True def unique_valid_ips(ip_list): Returns the count of unique valid IP addresses from the given list. valid_ips = {ip for ip in ip_list if is_valid_ip(ip)} return len(valid_ips)"},{"question":"Write a function to compute the minimum cost to make two strings equal by performing insertions and deletions.","solution":"def min_cost_to_make_equal(s1, s2): Computes the minimum cost to make two strings equal by performing insertions and deletions. The cost model assumes each insertion and deletion has the same cost. Arguments: s1, s2: Input strings Returns: The minimum number of insertions and deletions to make the strings equal. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] bottom up for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore last character and recur for remaining string elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character are different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1]) # Insert return dp[m][n]"},{"question":"Write a function to compute the Euclidean distance between two points in a 2D space. The input is a list of two tuples, where each tuple contains the x and y coordinates of a point.","solution":"import math def euclidean_distance(points): Compute the Euclidean distance between two points in a 2D space. :param points: List of two tuples, each containing the x and y coordinates of a point. :return: Euclidean distance between the two points. (x1, y1), (x2, y2) = points return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"Write a function to print all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start * start, n + 1, start): sieve[i] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Write a function to vectorize a matrix (list of lists) in Python. The function should take a 2D list of integers as input and return a 1D list containing all the elements of the matrix in row-major order.","solution":"def vectorize_matrix(matrix): Flattens a 2D list (matrix) into a 1D list in row-major order. :param matrix: List[List[int]] - A 2D list of integers. :return: List[int] - A 1D list containing all the elements of the matrix. return [element for row in matrix for element in row]"},{"question":"Write a function to extract all the numbers from a given string. The function should return a list of integers found in the string.","solution":"import re def extract_numbers_from_string(s): Extracts all integers from the given string and returns them as a list. Parameters: s (str): The input string. Returns: List[int]: A list of integers found in the string. return list(map(int, re.findall(r'd+', s)))"},{"question":"Write a function to create an ordered dictionary of even-valued integers in a list using Python. The function should return a dictionary where the keys are the index positions of the integers and the values are the integers themselves. Only include integers in the dictionary that are even.","solution":"from collections import OrderedDict def create_ordered_dict_of_evens(int_list): Create an ordered dictionary of even-valued integers from a list. The keys are the index positions and the values are the even integers. :param int_list: list of integers :return: ordered dictionary with even integers ordered_dict = OrderedDict() for index, value in enumerate(int_list): if value % 2 == 0: ordered_dict[index] = value return ordered_dict"},{"question":"Write a function to convert a binary string into a decimal number. The function should take a string \`bin_str\` as input and return the decimal representation as an integer.","solution":"def binary_to_decimal(bin_str): Converts a given binary string into a decimal number. Parameters: bin_str (str): A string representing a binary number. Returns: int: The decimal representation of the binary number. return int(bin_str, 2)"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers which has at least one number. The function should handle arrays of both positive and negative integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within a one-dimensional array of numbers. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the sum of elements in an integer array passing through two indices in the array.","solution":"def sum_between_indices(array, start_idx, end_idx): Returns the sum of elements in the array between start_idx and end_idx inclusive. if start_idx < 0 or end_idx >= len(array) or start_idx > end_idx: raise ValueError(\\"Invalid indices\\") return sum(array[start_idx:end_idx + 1])"},{"question":"Write a function to check if a given string is a valid editor log. An editor log is defined as a string that represents a sequence of operations performed on a text editor. Each operation is either an 'A' (append) or a 'D' (delete) followed by an integer. The function should return true if the editor log is valid, and false otherwise. An editor log is considered valid if it contains at least one 'A' operation followed by an integer, and it ends with a 'D' operation followed by an integer. No other sequence of characters should occur between 'A' and 'D' operations in the log.","solution":"import re def is_valid_editor_log(log): Checks if the given string is a valid editor log. An editor log is considered valid if it contains at least one 'A' operation followed by an integer, and it ends with a 'D' operation followed by an integer. No other sequence of characters should occur between 'A' and 'D' operations in the log. pattern = re.compile(r'^(Ad+Dd+)+') return bool(pattern.match(log))"},{"question":"Write a function to find the maximum number of non-overlapping events that can be attended given an array of events, where each event is represented as a tuple (start time, end time). The events can be scheduled if they do not overlap with each other.","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be attended. :param events: List of tuples [(start, end), ...] :return: Integer maximum number of non-overlapping events. # Sort events by their end time events.sort(key=lambda event: event[1]) max_events = 0 last_end_time = float('-inf') for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped (i.e., the subarray can start at the end and wrap around to the beginning of the array).","solution":"def maxSubarraySumCircular(nums): def kadane(arr): Helper function to perform the Kadane's algorithm that finds the maximum sum of a subarray in a given array. current_max = overall_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) overall_max = max(overall_max, current_max) return overall_max # Use Kadane's algorithm to find the max sum subarray for the non-circular case max_normal = kadane(nums) # If all numbers are negative, we've already found the maximum subarray sum, # wrapping wouldn't help if max_normal < 0: return max_normal # Calculate the total sum of the array total_sum = sum(nums) # Invert the elements of the array to find the min sum subarray using Kadane's algorithm inverted_sum = kadane([-num for num in nums]) # The maximum circular subarray sum is the total sum minus the minimum sum of the subarray max_circular = total_sum + inverted_sum # Return the maximum of normal and circular subarray sums return max(max_normal, max_circular)"},{"question":"Write a function to sum the squares of the first n natural numbers using a loop in Python. Here, n is a positive integer. Ensure to define the function and provide a piece of code to test its correctness with different values of n.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. if n < 1: raise ValueError(\\"n should be a positive integer.\\") total = 0 for i in range(1, n + 1): total += i ** 2 return total"},{"question":"Write a function to calculate the factorial of a given number \`n\`. The function should handle both positive and negative integers, and it should return the factorial as an integer. If \`n\` is negative, the function should return \`-1\` to indicate an invalid input. Note that the factorial of 0 is 1.","solution":"def factorial(n): Returns the factorial of a given number n. If n is negative, returns -1. if n < 0: return -1 elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to implement an integer division between two numbers \`a\` and \`b\` without using the division, multiplication, or modulus operators. You should return the quotient.","solution":"def integer_division(a, b): Returns the quotient from the division of a by b without using division, multiplication, or modulus operators. if b == 0: raise ValueError(\\"Cannot divide by zero\\") neg = (a < 0) != (b < 0) # Determine if the result should be negative a, b = abs(a), abs(b) quotient = 0 # Subtract b from a until a becomes less than b while a >= b: a -= b quotient += 1 return -quotient if neg else quotient"},{"question":"Write a function to find all unique triplets in the array which gives the sum of zero.","solution":"def three_sum(nums): Returns all unique triplets in the array which gives the sum of zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: result.append((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Write a function to return the maximum profit that can be generated from buying and selling the stock on different days. The function should take in the stock prices on different days and return the maximum profit that can be generated. You can assume that you can only hold at most one share of the stock at a time and that you must sell the stock before you buy it again.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from the given stock prices. You can only hold at most one share of the stock at a time and you must sell the stock before you can buy it again. :param prices: List of integers representing the stock prices on different days. :return: Integer representing the maximum profit. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function to reverse a singly linked list in Python. The function should take the head of the linked list as input and return the head of the reversed linked list. Additionally, write a helper function to print the linked list both before and after reversing to verify the correctness of the reverse function.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. Parameters: head (ListNode): The head of the singly linked list. Returns: ListNode: The head of the reversed singly linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev def print_linked_list(head): Prints the linked list. Parameters: head (ListNode): The head of the singly linked list. current = head result = [] while current: result.append(current.value) current = current.next print(\\" -> \\".join(map(str, result)))"},{"question":"Write a function to find the minimum element in a given array using linear search.","solution":"def find_min_element(arr): Returns the minimum element in the given array using linear search. if not arr: raise ValueError(\\"Array cannot be empty.\\") min_element = arr[0] for element in arr: if element < min_element: min_element = element return min_element"},{"question":"Write a function to insert an element into a sorted list. The function should adhere to the rules of a sorted list, meaning that after the insertion, all elements to the left of the inserted element should be less than or equal to the inserted element, and all elements to the right should be greater than or equal to the inserted element.","solution":"def insert_into_sorted_list(sorted_list, element): Inserts an element into the correct position of a sorted list to maintain the sorted order. # Initialize the position to insert position = 0 # Find the correct position for the new element for i in range(len(sorted_list)): if sorted_list[i] >= element: position = i break else: position = i + 1 # Insert element into the sorted list sorted_list.insert(position, element) return sorted_list"},{"question":"Write a function to find the two numbers with the maximum product in a given list of integers.","solution":"def max_product(nums): Finds the two numbers in the list that have the maximum product and returns the product. if len(nums) < 2: raise ValueError(\\"The input list must have at least two elements.\\") # Initialize the two largest and two smallest values max1 = max2 = float('-inf') min1 = min2 = float('inf') # Traverse the list to find the required four values for num in nums: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a function to find the maximum sum of any contiguous subarray of a given array of integers. This function should have a time complexity of O(n).","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum sum of any contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to determine if a given string is a scrambled version of another word. A scrambled version means that the letters of the first word can be rearranged to form the second word, regardless of the order of the letters.","solution":"def is_scrambled_version(str1, str2): Determines if str1 is a scrambled version of str2. # If the lengths of the strings are different, they cannot be scrambled versions if len(str1) != len(str2): return False # Sorted strings should be the same if they are scrambled versions return sorted(str1) == sorted(str2)"},{"question":"Write a function to find all the prime numbers in a given range. A prime number is a number that is greater than 1 and has no divisors other than 1 and itself.","solution":"def find_primes_in_range(start, end): Returns a list of all prime numbers in the given range [start, end). if start > end: return [] def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True primes = [num for num in range(start, end) if is_prime(num)] return primes"},{"question":"Write a function to parse a string into words, considering punctuation as part of the word. The function should return a list of words including punctuation.","solution":"def parse_string(s): Parses a string into words, considering punctuation as part of the word. return s.split()"},{"question":"Write a function to generate the Fibonacci series up to \`n\` terms. The function should return the series as a list. If \`n\` is less than or equal to 0, the function should return an empty list.","solution":"def fibonacci_series(n): Generate the Fibonacci series up to n terms. Parameters: n (int): The number of terms in the Fibonacci series. Returns: list: The Fibonacci series up to n terms. if n <= 0: return [] series = [0, 1] while len(series) < n: series.append(series[-1] + series[-2]) return series[:n]"},{"question":"Write a function to reverse a string in Python and then call this function to reverse a given string \\"hello world\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # Reverse the given string \\"hello world\\" reversed_string = reverse_string(\\"hello world\\") print(reversed_string) # This should print \\"dlrow olleh\\""},{"question":"Write a function to determine the minimum number of parentheses to be removed to make the string valid. A string of parentheses is considered valid if every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are properly nested.","solution":"def min_remove_to_make_valid(s): Returns the minimum number of parentheses to be removed to make the string valid. open_stack = [] remove_indices = set() # First pass to find indices of unbalanced parentheses for i, char in enumerate(s): if char == '(': open_stack.append(i) elif char == ')': if open_stack: open_stack.pop() else: remove_indices.add(i) # Add any remaining open parentheses indices to remove_indices remove_indices = remove_indices.union(set(open_stack)) # The number of parentheses to remove is the size of remove_indices return len(remove_indices)"},{"question":"Write a function to determine the maximum profit that can be made by buying and selling a stock on any number of days (buying at one price and selling at a higher price in the future). You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). The function should return the maximum profit possible.","solution":"def max_profit(prices): Determines the maximum profit that can be made by buying and selling a stock. :param prices: List[int] - List of stock prices where each element is the price on a given day. :return: int - The maximum profit possible if not prices: return 0 max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Write a function to calculate the nth Fibonacci number. The Fibonacci sequence is a series of numbers where a number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the Fibonacci sequence starts as 0, 1, 1, 2, 3, 5, 8, 13, and so on. Write a function \`fibonacci(n)\` that returns the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to find the convex hull of a set of points in a 2D plane. The convex hull is the smallest convex polygon that contains all the points. You can use algorithms like the Graham scan or the QuickHull algorithm. Here, we'll use the Graham scan algorithm.","solution":"def convex_hull(points): Returns the points that make up the convex hull of a set of points in 2D. Uses the Graham scan algorithm. # Helper function to find the orientation of ordered triplet (p, q, r) # The function returns the following values: # 0 -> p, q and r are collinear # 1 -> Clockwise # 2 -> Counterclockwise def orientation(p, q, r): val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 elif val > 0: return 1 else: return 2 # Find the bottom-most point (or choose the left-most point in case of tie) start = min(points, key=lambda p: (p[1], p[0])) points.remove(start) # Sort the points based on polar angle with the start points = sorted(points, key=lambda p: (-(start[1]-p[1])/((start[0]-p[0])**2 + (start[1]-p[1])**2)**0.5, start[0] - p[0])) # Initialize the convex hull with the start point hull = [start] for p in points: while len(hull) > 1 and orientation(hull[-2], hull[-1], p) != 2: hull.pop() hull.append(p) return hull"},{"question":"Write a function to check if a binary tree is a binary search tree (BST). In a BST, each node has a key, a left child, and a right child. For a node x, all nodes in its left subtree have keys less than x's key, all nodes in its right subtree have keys greater than x's key, and x has no more than two children.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def is_bst_util(node, left, right): # Base case: empty trees are BST by definition if node is None: return True # Invalid BST if outside valid range if node.val <= left or node.val >= right: return False # Recursively check subtrees with updated ranges return (is_bst_util(node.left, left, node.val) and is_bst_util(node.right, node.val, right)) def is_bst(root): # Define the valid range for root node return is_bst_util(root, float('-inf'), float('inf'))"},{"question":"Write a function to find the maximum length of a contiguous subarray that contains only 1s after replacing at most k flips (0s to 1s).","solution":"def longest_ones(arr, k): Finds the maximum length of a contiguous subarray containing only 1s after replacing at most k 0s to 1s. :param arr: List[int] - The input array :param k: int - The number of 0s that can be flipped to 1s :return: int - The maximum length of the subarray left, right = 0, 0 max_length = 0 zero_count = 0 while right < len(arr): if arr[right] == 0: zero_count += 1 while zero_count > k: if arr[left] == 0: zero_count -= 1 left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Write a function to calculate the factorial of a number using recursion. Here is a code snippet where I tried to implement it but it has errors. Can you help me fix it？","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers. This is known as the \\"Maximum Subarray Problem\\".","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within a one-dimensional array of numbers. :param nums: List of integers :return: Integer representing the maximum subarray sum if not nums: return 0 max_so_far = nums[0] max_ending_here = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to reverse a given list in-place without using any built-in functions or slicing. To minimize the space complexity, aim for a solution that reverses the list using swapping operations.","solution":"def reverse_list_in_place(lst): Reverses the given list in-place using swapping operations. Parameters: lst (list): The list to be reversed. Returns: None. The list is reversed in-place. left, right = 0, len(lst) - 1 while left < right: # Swap the elements at left and right indices lst[left], lst[right] = lst[right], lst[left] # Move towards middle left += 1 right -= 1"},{"question":"Write a function to determine the number of unique paths in an \`m x n\` grid from the top-left corner to the bottom-right corner, given that you can only move right or down at each step.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left to the bottom-right corner of an m x n grid, moving only right or down. # Create a 2D list to store the number of paths to each cell dp = [[1] * n for _ in range(m)] # Start from cell (1, 1) and fill in the number of paths to each cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner cell contains the total number of unique paths return dp[m-1][n-1]"},{"question":"Write a function to find the minimum number of jumps needed to reach the last index of an array. You can jump from index i to i+nums[i] where nums is the array, and you always start at the first index.","solution":"def jump(nums): Function to find the minimum number of jumps to reach the last index. :param nums: List[int] :return: int if len(nums) <= 1: return 0 jumps = 0 current_end = 0 furthest = 0 for i in range(len(nums) - 1): furthest = max(furthest, i + nums[i]) if i == current_end: jumps += 1 current_end = furthest if current_end >= len(nums) - 1: break return jumps"},{"question":"Write a function to find the sum of all even Fibonacci numbers up to a given number n.","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers up to a given number n. a, b = 0, 1 even_sum = 0 while a <= n: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"Write a function to generate a sequence of Fibonacci numbers up to a given limit. The function should also include an optional parameter to specify the number of terms in the sequence. If this parameter is not provided, the function should return the sequence until the limit is reached.","solution":"def fibonacci(limit, num_terms=None): Generate a sequence of Fibonacci numbers up to a given limit. An optional \`num_terms\` parameter can specify the number of terms in the sequence. If \`num_terms\` is not provided, the sequence is generated until the limit is reached. sequence = [] a, b = 0, 1 while num_terms is None or len(sequence) < num_terms: if a > limit: break sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to check if all elements in a list are greater than a given number.","solution":"def all_elements_greater_than(lst, num): Returns True if all elements in lst are greater than num, False otherwise. return all(element > num for element in lst)"},{"question":"Write a function to reverse the characters of a given string. In Python, make sure to include comments to explain each part of your function. Additionally, write a simple test function that checks the correctness of the reverse function using several test cases.","solution":"def reverse_string(s): Reverses the characters in a given string s. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. # Use slicing to reverse the string return s[::-1]"},{"question":"Write a function to find the 'n'th Fibonacci number using recursion. The function should be optimized using memoization to avoid redundant calculations.","solution":"def fib(n, memo=None): Returns the 'n'th Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fib(n-1, memo) + fib(n-2, memo) return memo[n]"},{"question":"Write a function to generate all possible subsets of a given set of numbers. Return the subsets in any order.","solution":"def subsets(nums): Generates all possible subsets of a given set of numbers. :param nums: List of numbers :return: List of lists, where each list is a subset. result = [] subset = [] def backtrack(start): result.append(subset[:]) for i in range(start, len(nums)): subset.append(nums[i]) backtrack(i + 1) subset.pop() backtrack(0) return result"},{"question":"Write a function to check if a string containing only '(' and ')' is balanced. A string is considered balanced if every opening parenthesis '(' has a corresponding closing parenthesis ')'. The function should return \`True\` if the string is balanced, and \`False\` otherwise.","solution":"def is_balanced(s): Returns True if the string is balanced, else False. A string is balanced if every opening parenthesis '(' has a corresponding closing parenthesis ')'. stack = [] for char in s: if char == '(': stack.append('(') elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Write a function to calculate the factorial of a given integer using a stack data structure. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. Factorial of n (n!) = n * (n-1) * (n-2) * ... * 1. To implement this using a stack, push all integers from n down to 1 onto the stack, and then popping them off and multiplying together.","solution":"def factorial_using_stack(n): Returns the factorial of a non-negative integer n using a stack data structure. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") # Create an empty stack stack = [] # Push all integers from n down to 1 onto the stack for i in range(n, 0, -1): stack.append(i) # Pop all integers from the stack and multiply together result = 1 while stack: result *= stack.pop() return result"},{"question":"Write a function to convert a given decimal number to its binary representation in a string format. The function should return a string where '1's represent the binary digits and '0's represent the binary zeros.","solution":"def decimal_to_binary(n): Converts a given decimal number to its binary representation as a string. Args: n (int): The decimal number to convert. Returns: str: The binary representation of the input number as a string. return bin(n)[2:]"},{"question":"Write a function to calculate the power of a number using recursion. The function should handle both positive and negative exponents, and return the result as a floating-point number.","solution":"def power(base, exponent): Calculates the power of a number using recursion. Handles both positive and negative exponents. Parameters: base (float): The base number. exponent (int): The exponent, can be negative. Returns: float: The result of base raised to the power of exponent. if exponent == 0: return 1.0 elif exponent < 0: return 1 / power(base, -exponent) elif exponent > 0: return base * power(base, exponent - 1)"},{"question":"Write a function to find the maximum product of two distinct elements in an array of integers. Given an array of integers \`arr\`, return the maximum product of any two different numbers in the array.","solution":"def max_product(arr): Returns the maximum product of two distinct elements in the array. :param arr: List of integers :return: Maximum product of two distinct elements if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") # Sort the array in ascending order arr.sort() # The maximum product can be from the largest two positive numbers or # from the largest two negative numbers (since two negatives make a positive). return max(arr[0] * arr[1], arr[-1] * arr[-2])"},{"question":"Write a function to find the maximum sum of a subarray of a given array. This problem is commonly known as the Kadane's algorithm. Consider an array of integers that can include both positive and negative numbers. The function should return the maximum sum of any contiguous subarray within this array.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the array 'arr'. Implements Kadane's algorithm. if not arr: return 0 max_current = arr[0] max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to solve the N-Queens puzzle using backtracking. The N-Queens puzzle is the problem of placing N queens on an N×N chessboard such that no two queens threaten each other. Ensure that the solution is efficient and handles edge cases appropriately.","solution":"def solve_n_queens(n): def create_board(state): board = [] for row in state: board.append(\\"\\".join(\\"Q\\" if i == row else \\".\\" for i in range(n))) return board def is_valid_state(state): current_queen_row, current_queen_col = len(state) - 1, state[-1] for row, col in enumerate(state[:-1]): diff = abs(current_queen_col - col) if diff == 0 or diff == current_queen_row - row: return False return True def search(state): if len(state) == n: solutions.append(create_board(state)) return for col in range(n): state.append(col) if is_valid_state(state): search(state) state.pop() solutions = [] search([]) return solutions"},{"question":"Write a function to find the maximum sum of a circular subarray in a given array.","solution":"def max_subarray_sum_circular(arr): Finds the maximum sum of a circular subarray. def kadane(nums): max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global max_kadane = kadane(arr) # Circular: wrap-around case max_wrap = sum(arr) + kadane([-x for x in arr]) # To handle all-negative values, max_wrap should not be zero if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a function to sort a linked list in ascending order. You should not use any built-in sorting functions. Explain your approach and any trade-offs you might consider when writing such a function.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort(head): if not head or not head.next: return head # Split the list into two halves slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None left = merge_sort(head) right = merge_sort(mid) return merge_two_sorted_lists(left, right) def merge_two_sorted_lists(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next if l1: tail.next = l1 if l2: tail.next = l2 return dummy.next def sort_linked_list(head): return merge_sort(head)"},{"question":"Write a function to calculate the factorial of a given number. The function should be named \`calculate_factorial\` and it should take one parameter, \`number\`. The function should return the factorial of the number. If the number is 0, the function should return 1, as 0! = 1. If the number is negative, the function should return \`None\`, as factorials for negative numbers are not defined.","solution":"def calculate_factorial(number): Returns the factorial of a given number. If the number is 0, returns 1. If the number is negative, returns None. if number < 0: return None elif number == 0: return 1 else: factorial = 1 for i in range(1, number + 1): factorial *= i return factorial"},{"question":"Write a function to calculate the number of distinct binary trees that can be formed with \`n\` nodes such that every non-leaf node has exactly two children. This is a classic problem known as Catalan Numbers. Provide a Python implementation that calculates the nth Catalan number efficiently.","solution":"def catalan_number(n): Returns the nth Catalan number. if n == 0 or n == 1: return 1 catalan = [0] * (n + 1) catalan[0], catalan[1] = 1, 1 for i in range(2, n + 1): catalan[i] = 0 for j in range(i): catalan[i] += catalan[j] * catalan[i - j - 1] return catalan[n]"},{"question":"Write a function to reverse a string in Python. You should use a for loop to accomplish this task. Additionally, use string concatenation to build the reversed string.","solution":"def reverse_string(s): Reverses the input string s using a for loop and string concatenation. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to find the maximum element in an array of integers. Also, provide a piece of code to demonstrate how to use this function with an example array.","solution":"def find_max(arr): Returns the maximum element in an array of integers. Parameters: arr (list): List of integers. Returns: int: Maximum integer in the list. if not arr: raise ValueError(\\"Array cannot be empty\\") max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val # Example Usage example_array = [3, 1, 4, 1, 5, 9, 2, 6, 5] max_element = find_max(example_array) print(f\\"The maximum element in the array is: {max_element}\\")"},{"question":"Write a function to find the nth largest number in a given list.","solution":"def nth_largest_number(numbers, n): Returns the nth largest number in the given list of numbers. :param numbers: List[int] - list of integers :param n: int - the position of the largest number to find, where 1 means the largest :return: int - the nth largest number in the list if n <= 0 or n > len(numbers): raise ValueError(\\"n must be a positive integer within the range of the list length.\\") # Sort the list in descending order sorted_numbers = sorted(numbers, reverse=True) # Return the nth largest number (n-1 because of zero-based indexing) return sorted_numbers[n - 1]"},{"question":"Write a function to perform linear search on a list of integers. Linear search is a simple search algorithm that checks every element of the list until it finds the target or exhausting the list. If the target is found, return the index of the target; otherwise, return -1.","solution":"def linear_search(lst, target): Performs a linear search on a list of integers. Args: lst (list): List of integers target (int): The target integer to search for Returns: int: The index of the target if found, otherwise -1 for index, value in enumerate(lst): if value == target: return index return -1"},{"question":"Write a function to compute the nth Fibonacci number using iteration instead of recursion. The function should be efficient and able to handle large values of n without causing a stack overflow error. In this function, both the 0th and 1st Fibonacci numbers should be considered as 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. The 0th and 1st Fibonacci numbers are considered 1. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0 or n == 1: return 1 a, b = 1, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to return all the odd numbers from an array of integers.","solution":"def odd_numbers(arr): Returns all the odd numbers from an array of integers. Parameters: arr (list): A list of integers Returns: list: A list of odd integers return [num for num in arr if num % 2 != 0]"},{"question":"Write a function to find all pairs of numbers in a given array such that the sum of each pair is equal to the target.","solution":"def find_pairs_with_sum(arr, target): Find all pairs of numbers in the array that sum up to the given target. Parameters: arr (list): List of integers. target (int): The target sum. Returns: list: List of tuples, each containing a pair of numbers that add up to the target. pairs = [] visited = set() for num in arr: complement = target - num if complement in visited: pairs.append((complement, num)) visited.add(num) return pairs"},{"question":"Write a function to check if a given number is a perfect square. The function should return True if the number is a perfect square, and False otherwise. For example, 16 is a perfect square because its square root is 4, and 9 is also a perfect square because its square root is 3. However, 14 is not a perfect square because there is no integer that, when squared, equals 14.","solution":"import math def is_perfect_square(num): Returns True if num is a perfect square, False otherwise. if num < 0: return False sqrt_num = int(math.sqrt(num)) return sqrt_num * sqrt_num == num"},{"question":"Write a function to find the middle element of an array.","solution":"def find_middle_element(arr): Returns the middle element of the array. If the array length is even, returns the lower middle element. if not arr: return None # or raise an error if preferred mid_index = (len(arr) - 1) // 2 return arr[mid_index]"},{"question":"Write a function to determine if a binary string has alternating bits. That is, no two adjacent bits in the string are the same. For example, the string \\"1010\\" has alternating bits, but \\"1101\\" does not.","solution":"def has_alternating_bits(binary_string): Determines if a binary string has alternating bits. Parameters: binary_string (string): A string containing binary digits ('0' and '1'). Returns: bool: True if the binary string has alternating bits, False otherwise. for i in range(1, len(binary_string)): if binary_string[i] == binary_string[i - 1]: return False return True"},{"question":"Write a function to find the minimum and maximum elements in a 2D list of numbers. The function should return both the elements and their indices within the list.","solution":"def find_min_max_2d(matrix): Finds the minimum and maximum elements in a 2D list. Parameters: matrix (list of list of int/float): 2D list where each sublist represents a row of the matrix Returns: tuple: containing minimum value, its indices (row, column), maximum value, its indices (row, column) if not matrix or not matrix[0]: return None, None, None, None # Return None for indices if the matrix is empty min_val = float('inf') max_val = float('-inf') min_index = (-1, -1) max_index = (-1, -1) for i, row in enumerate(matrix): for j, val in enumerate(row): if val < min_val: min_val = val min_index = (i, j) if val > max_val: max_val = val max_index = (i, j) return min_val, min_index, max_val, max_index"},{"question":"Write a function to calculate the sum of the largest and smallest numbers in a given list.","solution":"def sum_largest_and_smallest(numbers): Returns the sum of the largest and smallest numbers in the given list. if not numbers: raise ValueError(\\"The list cannot be empty.\\") largest = max(numbers) smallest = min(numbers) return largest + smallest"},{"question":"Write a function to convert a given Roman numeral to an integer. In this version, the function should also handle cases where the input numeral string starts with the letter \\"X\\" repeated multiple times at the beginning, and then the rest of the numeral follows. The function should return an integer value corresponding to the Roman numeral.","solution":"def roman_to_int(s): Convert Roman numeral string to integer. Handles cases with leading \\"X\\" repeated multiple times. roman_values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Write a function to return the maximum value in a list of integers. If the list is empty, the function should return the smallest possible integer value. If the list contains non-integer values, the function should raise a TypeError.","solution":"def find_max_value(int_list): Returns the maximum value in a list of integers. If the list is empty, returns the smallest possible integer value. If the list contains non-integer values, raises a TypeError. if not all(isinstance(i, int) for i in int_list): raise TypeError(\\"List must contain only integers\\") if not int_list: return float('-inf') return max(int_list)"},{"question":"Write a function to calculate the maximum profit from the selling and buying of a stock given its daily prices. You can only complete at most one transaction (buying before selling). The function should also return the total number of transaction, income from each transaction, and day(s) on which the transaction took place.","solution":"def max_profit(prices): if not prices: return 0, 0, 0, -1, -1 min_price = float('inf') max_profit = 0 buy_day = 0 sell_day = 0 for i in range(len(prices)): if prices[i] < min_price: min_price = prices[i] buy_day = i elif prices[i] - min_price > max_profit: max_profit = prices[i] - min_price sell_day = i if max_profit == 0: return 0, 0, 0, -1, -1 transactions=1 income=max_profit return transactions, income, buy_day, sell_day"},{"question":"Write a function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers (both positive and negative).","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray within the given list of numbers. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function to convert a given integer to its hexadecimal representation without using the built-in function \`Integer.toHexString(int)\`. How should I approach this problem?","solution":"def int_to_hex(num): Converts an integer to its hexadecimal representation. if num == 0: return \\"0\\" hex_chars = \\"0123456789abcdef\\" hex_str = \\"\\" # Handle negative number by converting it to two's complement if num < 0: num += 2 ** 32 while num > 0: hex_str = hex_chars[num % 16] + hex_str num //= 16 return hex_str"},{"question":"Write a function to multiply two integers without using the \`*\` operator, and without using any arithmetic operations that directly compute the product (like \`+\`, \`-\`, \`<<\`, \`>>\`, etc.). You can only use bitwise and logical operations.","solution":"def multiply(a, b): Multiplies two integers using only bitwise and logical operations. # This function uses the \\"Russian Peasant\\" multiplication algorithm negative_result = (a < 0) ^ (b < 0) # XOR to check if the result should be negative a, b = abs(a), abs(b) result = 0 while b > 0: if b & 1: # Check if the least significant bit is 1 result += a a <<= 1 # Left shift a by 1 (equivalent to multiply a by 2) b >>= 1 # Right shift b by 1 (divide b by 2) return -result if negative_result else result"},{"question":"Write a function to check if a given string \`s\` contains a repeating substring pattern. The function should return \`true\` if the string contains a repeating substring pattern and \`false\` otherwise. A repeating substring pattern is one where a part of the string can be repeated multiple times to form the entire string.","solution":"def has_repeating_substring_pattern(s): Check if a given string contains a repeating substring pattern. :param s: Input string :return: True if the string contains a repeating substring pattern, False otherwise n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: if s[:i] * (n // i) == s: return True return False"},{"question":"Write a function to perform a binary search on a sorted array to find the index of a target value. If the target value is found, return its index. If not, return -1. The array does not contain duplicate elements.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find the index of a target value. Parameters: arr (List[int]): A sorted list of integers without duplicate elements. target (int): The integer value to search for. Returns: int: The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to sort an array of integers using a selection sort algorithm. The function should take an array of integers as input and return the array sorted in ascending order. Make sure to handle the case where the array might be empty or contain only one element.","solution":"def selection_sort(arr): Sorts an array of integers using the selection sort algorithm. Parameters: arr (list): A list of integers. Returns: list: A new list with the elements sorted in ascending order. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a function to scan an array and return a list of all the numbers that appear more than once. In Python.","solution":"def find_duplicates(arr): Returns a list of numbers that appear more than once in the input array. from collections import Counter counter = Counter(arr) return [num for num, count in counter.items() if count > 1]"},{"question":"Write a function to calculate the number of days in a given year. The function should take into account leap years and the transition from the Julian calendar to the Gregorian calendar, which occurred in 1582 with the adoption of the Gregorian calendar in most countries in 1582. The Gregorian calendar skips two的日子 in leap years to correct for the drift of the Julian calendar.","solution":"def is_leap_year(year): Helper function to determine if a year is a leap year. Supports both Julian and Gregorian calendar system. if year <= 1582: # Julian calendar leap year rule return year % 4 == 0 else: # Gregorian calendar leap year rule return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) def days_in_year(year): Calculate the number of days in a given year considering both Julian and Gregorian calendar rules. if year == 1582: return 355 # In 1582, 10 days were skipped hence there were 355 days. elif is_leap_year(year): return 366 else: return 365"},{"question":"Write a function to compute the nth Fibonacci number using recursion. The function should be efficient enough to handle large values of n without causing a stack overflow.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. # Base cases if n == 0: return 0 if n == 1: return 1 # Check if result is already computed if n in memo: return memo[n] # Compute the Fibonacci number and store it in the memo memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to find the maximum sum of a subarray that is non-empty and continuous. For example, given the array: [-2,1,-3,4,-1,2,1,-5,4], the maximum sum is 6 ([4,-1,2,1]).","solution":"def max_subarray_sum(arr): Returns the maximum sum of a non-empty, continuous subarray. Kadane's algorithm is used to solve this problem in O(n) time complexity. Parameters: arr (list): List of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 # edge case: if the input array is empty max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to multiply two matrices. The function should handle matrices of different sizes as long as the number of columns in the first matrix equals the number of rows in the second matrix. The function should return the resultant matrix or an error message if the matrices cannot be multiplied.","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices if the number of columns in the first matrix equals the number of rows in the second matrix. Parameters: matrix1 (list of list of ints/floats): The first matrix. matrix2 (list of list of ints/floats): The second matrix. Returns: list of list of ints/floats: The resultant matrix after multiplication. str: Error message if matrices cannot be multiplied. rows_matrix1 = len(matrix1) cols_matrix1 = len(matrix1[0]) rows_matrix2 = len(matrix2) cols_matrix2 = len(matrix2[0]) if cols_matrix1 != rows_matrix2: return \\"Error: Matrices cannot be multiplied due to incompatible dimensions.\\" # Initialize the resultant matrix with zeros result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] # Perform matrix multiplication for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Write a function to calculate the sum of all integers in a given range [a, b] that are divisible by both 3 and 5. Create a test function to validate your solution with given test cases.","solution":"def sum_divisible_by_3_and_5(a, b): Returns the sum of all integers in the range [a, b] that are divisible by both 3 and 5. return sum(x for x in range(a, b + 1) if x % 15 == 0)"},{"question":"Write a function to find the sum of all nodes in a binary tree. How can this be achieved using both recursive and iterative approaches in Python?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_nodes_recursive(root): Returns the sum of all nodes in the binary tree using recursive approach. if root is None: return 0 return root.value + sum_of_nodes_recursive(root.left) + sum_of_nodes_recursive(root.right) def sum_of_nodes_iterative(root): Returns the sum of all nodes in the binary tree using iterative approach. if root is None: return 0 total_sum = 0 stack = [root] while stack: node = stack.pop() if node: total_sum += node.value stack.append(node.left) stack.append(node.right) return total_sum"},{"question":"Write a function to check if the digits of a given integer can be rearranged to form a palindrome. A palindrome is a number that reads the same backward as forward.","solution":"def can_form_palindrome(n): Check if the digits of a given integer can be rearranged to form a palindrome. :param n: integer :return: True if the digits can be rearranged to form a palindrome, False otherwise from collections import Counter digit_counts = Counter(str(abs(n))) # Use absolute value to handle negative numbers odd_count = 0 for count in digit_counts.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth number. The function should return the nth number in the Fibonacci sequence.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to reverse the words in a string but keep the words intact.","solution":"def reverse_words_in_string(s): Reverses the words in a string but keeps the words intact. Parameters: s (str): The input string Returns: str: The string with words reversed but words intact words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to measure the time it takes for an element in an array to swap places with another element in the array. The function should accept two parameters: an array of integers and a tuple of two integers representing the indices of the elements to be swapped.","solution":"import time def measure_swap_time(array, indices): Measure the time it takes to swap two elements in an array. Parameters: array (list): The list of integers. indices (tuple): A tuple containing the two indices of elements to be swapped. Returns: float: The time it took to swap the elements in seconds. index1, index2 = indices if index1 < 0 or index2 < 0 or index1 >= len(array) or index2 >= len(array): raise ValueError(\\"Indices are out of bounds of the array.\\") start_time = time.time() array[index1], array[index2] = array[index2], array[index1] end_time = time.time() return end_time - start_time"},{"question":"Write a function to find the second smallest node in a Binary Search Tree (BST). The function should return the value of the second smallest node. If the BST has less than two nodes, the function should return \`None\`.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_second_smallest(root): Find the second smallest value in a BST. :param root: TreeNode, the root of the BST :return: value of the second smallest node, or None if BST has less than 2 nodes if not root or (not root.left and not root.right): return None def inorder_traversal(node): if node is None: return [] return inorder_traversal(node.left) + [node.value] + inorder_traversal(node.right) in_order_values = inorder_traversal(root) return in_order_values[1] if len(in_order_values) >= 2 else None"},{"question":"Write a function to count the summary of all nodes in a binary tree ascending order. The summary is obtained by traversing the tree using any traversal method and then sorting the nodes in ascending order. Finally, return the sum of all the nodes in the sorted list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_nodes_in_ascending_order(root): Returns the sum of all node values in the binary tree in ascending order. def in_order_traversal(node): if node is None: return [] return in_order_traversal(node.left) + [node.val] + in_order_traversal(node.right) # Traverse the tree and get the node values node_values = in_order_traversal(root) # Return the sum of the values return sum(node_values)"},{"question":"Write a function to reverse an array in place without using any additional memory. How can you accomplish this using a loop?","solution":"def reverse_array_in_place(arr): Reverses the given array in place using a loop. The function modifies the input list and returns None. left = 0 right = len(arr) - 1 while left < right: # Swap elements arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function to find the intersection of two sets of numbers using Python. The function should take two sets as input and return a set containing the common elements between the two sets.","solution":"def intersection_set(set1, set2): Returns the intersection of two sets. Parameters: set1 (set): The first set of numbers. set2 (set): The second set of numbers. Returns: set: The intersection of the two sets. return set1.intersection(set2)"},{"question":"Write a function to calculate the factorial of a given number using recursion. The function should handle both positive and zero input values. For negative input, the function should return None. The final result should be the factorial of the absolute value of the input number.","solution":"def factorial(n): Returns the factorial of the absolute value of n using recursion. If n is negative, return None. if n < 0: return None elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to find the minimum path sum in a 2D array.","solution":"def min_path_sum(grid): Finds the minimum path sum in a 2D grid from top-left to bottom-right where only moves to the right or down are allowed. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first row for col in range(1, cols): dp[0][col] = dp[0][col - 1] + grid[0][col] # Initialize the first column for row in range(1, rows): dp[row][0] = dp[row - 1][0] + grid[row][0] # Fill in the rest of the dp table for row in range(1, rows): for col in range(1, cols): dp[row][col] = min(dp[row - 1][col], dp[row][col - 1]) + grid[row][col] return dp[-1][-1]"},{"question":"Write a function to sort an array of numbers using the selection sort algorithm. The function should take an array of numbers as input and sort it in ascending order. Additionally, the function should return the number of swaps made during the sorting process.","solution":"def selection_sort(arr): Sorts an array in ascending order using the selection sort algorithm. Returns the number of swaps made during the sorting process. Parameters: arr (list): a list of numbers to be sorted Returns: tuple: sorted array and the count of swaps n = len(arr) swap_count = 0 for i in range(n): min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j if min_index != i: arr[i], arr[min_index] = arr[min_index], arr[i] swap_count += 1 return arr, swap_count"},{"question":"Write a function to return the minimum number of operations required to convert a given string into a palindrome by only removing characters. The function should also return the minimum number of operations required to convert the given string into a palindrome by only adding characters.","solution":"def min_operations_to_palindrome_remove(s): Returns the minimum number of operations required to convert the given string into a palindrome by only removing characters. def lps(seq): n = len(seq) L = [[0] * n for _ in range(n)] for i in range(n): L[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: L[i][j] = 2 elif seq[i] == seq[j]: L[i][j] = L[i+1][j-1] + 2 else: L[i][j] = max(L[i][j-1], L[i+1][j]) return L[0][n-1] n = len(s) lps_length = lps(s) return n - lps_length def min_operations_to_palindrome_add(s): Returns the minimum number of operations required to convert the given string into a palindrome by only adding characters. n = len(s) rev_s = s[::-1] def lcs(x, y, n): L = [[0] * (n + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif x[i-1] == y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[n][n] lcs_length = lcs(s, rev_s, n) return n - lcs_length"},{"question":"Write a function to split a linked list into two halves. The first half should be as equal as possible to the second half, and the second half should have at least one more node if the list has an odd number of nodes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def split_linked_list(head): Splits the linked list into two halves. If the number of nodes is odd, the second half will have one more node than the first half. Args: head (ListNode): The head of the linked list. Returns: (ListNode, ListNode): The heads of the two halves of the list. if not head or not head.next: return (head, None) # Initialize slow and fast pointers slow = head fast = head prev_slow = None # Move slow by 1 and fast by 2 steps while fast and fast.next: prev_slow = slow slow = slow.next fast = fast.next.next # Split the list first_half = head if prev_slow: prev_slow.next = None second_half = slow return (first_half, second_half)"},{"question":"Write a function to convert a string into a binary representation. Each character in the string should be converted to its corresponding ASCII value, and then that ASCII value should be converted to a binary string. The output should be a list of binary strings representing each character.","solution":"def string_to_binary(s): Converts a string into a list of binary representations of its characters. Args: s (str): The input string to convert. Returns: List[str]: A list of binary strings representing each character in the input string. return [format(ord(char), '08b') for char in s]"},{"question":"Write a function to compute the greatest common divisor (GCD) of two integers using the Euclidean algorithm. Then, use this function to find the GCD of 56 and 98.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers using the Euclidean algorithm. while b != 0: a, b = b, a % b return a # Use the function to find the GCD of 56 and 98 gcd_56_98 = gcd(56, 98) gcd_56_98"},{"question":"Write a function to convert an input string to a title case, ensuring the first letter of each word is capitalized and the rest are in lowercase.","solution":"def to_title_case(input_string): Converts the input string to title case. The first letter of each word is capitalized and the rest are in lowercase. Parameters: - input_string (str): The string to be converted. Returns: - str: The converted title case string. return input_string.title()"},{"question":"Write a function to generate a random integer between 1 and 10 in Python. You can use the \`random\` module to achieve this. Import the \`random\` module and share the code snippet with me.","solution":"import random def generate_random_integer(): Generates a random integer between 1 and 10. return random.randint(1, 10)"},{"question":"Write a function to convert a given number from decimal to binary in Python. You need to ensure that your function handles both positive and negative numbers.","solution":"def decimal_to_binary(n): Converts a given decimal number n to its binary representation. Supports both positive and negative numbers. if n >= 0: return bin(n)[2:] # bin() returns a string prefixed with '0b', so strip it. else: # For negative numbers, compute the two's complement # by obtaining the binary of positive, inverting bits and adding 1 return '-' + bin(abs(n))[2:]"},{"question":"Write a function to implement the breadth-first search (BFS) traversal in a graph. The graph will be represented using an adjacency list.","solution":"from collections import deque def bfs(graph, start): Perform BFS traversal on a graph and return the order of traversal. :param graph: dict, adjacency list representing the graph :param start: Any, starting node for BFS traversal :return: list, order of nodes visited in BFS traversal visited = set() queue = deque([start]) order = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) order.append(node) queue.extend(neighbor for neighbor in graph[node] if neighbor not in visited) return order"},{"question":"Write a function to detect if a given list of integers contains a sequence of three consecutive numbers in ascending order. If such a sequence exists, return true; otherwise, return false. The function should also handle edge cases where the list is empty or has less than three elements.","solution":"def has_consecutive_sequence(lst): Returns True if the list contains a sequence of three consecutive numbers in ascending order. Otherwise, returns False. if len(lst) < 3: return False for i in range(len(lst) - 2): if lst[i] + 1 == lst[i+1] and lst[i+1] + 1 == lst[i+2]: return True return False"},{"question":"Write a function to generate a Fibonacci sequence up to a number n, and then find the sum of all even numbers in the Fibonacci sequence.","solution":"def fibonacci_sequence_up_to_n(n): Generates Fibonacci sequence up to number n (inclusive). :param n: The upper limit of the Fibonacci sequence. :return: A list containing the Fibonacci sequence up to n. fib_sequence = [0, 1] while fib_sequence[-1] + fib_sequence[-2] <= n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence def sum_of_even_fibonacci_numbers(n): Computes the sum of all even numbers in the Fibonacci sequence up to number n. :param n: The upper limit of the Fibonacci sequence. :return: The sum of all even Fibonacci numbers up to n. fib_sequence = fibonacci_sequence_up_to_n(n) even_sum = sum(x for x in fib_sequence if x % 2 == 0) return even_sum"},{"question":"Write a function to find the maximum of two numbers using recursion.","solution":"def max_recursive(a, b): Returns the maximum of two numbers a and b using recursion. if a == b: return a if a > b: return max_recursive(a, b + 1) return max_recursive(a + 1, b)"},{"question":"Write a function to rotate the elements of a given array to the right by \`k\` positions. The function should return the rotated array. If \`k\` is greater than the length of the array, the rotation should wrap around to the beginning of the array.","solution":"def rotate_array(arr, k): Rotates the elements of the given array to the right by k positions. Parameters: arr (list): The array to rotate. k (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr: return [] n = len(arr) k = k % n # handle cases where k >= n return arr[-k:] + arr[:-k]"},{"question":"Write a function to find the intersection of two lists of numbers. The function should return a list containing the elements that are present in both input lists, without any duplicates. The order of the resulting list should be the same as the one in the first input list.","solution":"def intersection(list1, list2): Returns a list containing the intersection of list1 and list2 without duplicates. The order of the resulting list is the same as the one in list1. set2 = set(list2) result = [] seen = set() for item in list1: if item in set2 and item not in seen: result.append(item) seen.add(item) return result"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a given array of n integers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given array. if not arr: return 0 max_current = arr[0] max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the minimum element in a given binary search tree (BST). The function should return the minimum value found in the tree. Assume the tree is non-empty.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_min_in_bst(root): Find the minimum element in the given binary search tree (BST). Assumes that the tree is non-empty. :param TreeNode root: Root node of the BST. :return: Minimum value in the BST. current = root while current.left is not None: current = current.left return current.val"},{"question":"Write a function to determine if a cookie is accepted or not based on the user's preferences and availability of the cookie.","solution":"def is_cookie_accepted(user_preference, cookie_available): Determine if a cookie is accepted or not based on user preferences and cookie availability. Args: user_preferrence: dict. A dictionary with keys as cookie types (str) and values as boolean indicating the preference. cookie_available: str. The type of cookie that is available. Returns: bool. True if the cookie is accepted, otherwise False. return user_preference.get(cookie_available, False)"},{"question":"Write a function to traverse a binary search tree in a specific manner. It should maintain the balance property of the tree after each insertion and deletion. The function should insert and delete nodes while ensuring the tree remains a valid binary search tree.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): Inserts a key into BST and returns the root of the modified tree. if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) else: root.right = insert(root.right, key) return root def find_min(root): Finds the node with the minimum value in a BST. while root.left is not None: root = root.left return root def delete_node(root, key): Deletes a node from BST and returns the root of the modified tree. Ensures the tree remains a valid BST. if root is None: return root if key < root.val: root.left = delete_node(root.left, key) elif key > root.val: root.right = delete_node(root.right, key) else: # Node with only one child or no child if root.left is None: return root.right elif root.right is None: return root.left # Node with two children: Get the inorder successor temp = find_min(root.right) root.val = temp.val root.right = delete_node(root.right, temp.val) return root def in_order_traversal(root): Performs in-order traversal of a BST and returns the list of values. res = [] if root: res = in_order_traversal(root.left) res.append(root.val) res = res + in_order_traversal(root.right) return res"},{"question":"Write a function to find the minimum element in an array without using the built-in min function. The function should be able to handle arrays of any size, including arrays with negative numbers.","solution":"def find_min(arr): Returns the minimum element in the array. Parameters: arr (list): List of integers Returns: int: The minimum integer in the list if not arr: # if the list is empty, return None or raise an exception return None min_element = arr[0] for num in arr[1:]: if num < min_element: min_element = num return min_element"},{"question":"Write a function to determine if a list of strings contains any duplicates.","solution":"def contains_duplicates(strings): Determines if a list of strings contains any duplicates. Args: strings (list): The list of strings to check. Returns: bool: True if there are duplicates, False otherwise. return len(strings) != len(set(strings))"},{"question":"Write a function to detect outliers in a numerical array.","solution":"def detect_outliers(data): Detects outliers in a list of numerical data. An outlier is defined as a data point that lies outside 1.5 times the interquartile range (IQR) above the third quartile or below the first quartile. :param data: list of numerical data :return: list of outlier indices if not data: return [] data_sorted = sorted(data) n = len(data_sorted) q1 = data_sorted[n // 4] q3 = data_sorted[3 * n // 4] iqr = q3 - q1 lower_bound = q1 - 1.5 * iqr upper_bound = q3 + 1.5 * iqr outliers = [index for index, value in enumerate(data) if value < lower_bound or value > upper_bound] return outliers"},{"question":"Write a function to replace characters in a given string which are not alphanumeric or whitespace with a special character \`*\`.","solution":"import re def replace_special_characters(input_string): Replaces characters in the given string which are not alphanumeric or whitespace with '*'. return re.sub(r'[^ws]', '*', input_string)"},{"question":"Write a function to generate a list of all possible combinations of a given string.","solution":"from itertools import combinations def generate_combinations(s): Generate all possible combinations of a given string. Parameters: s (str): The input string. Returns: List[str]: A list of all possible combinations of the string. result = [] for i in range(1, len(s) + 1): result.extend(''.join(comb) for comb in combinations(s, i)) return result"},{"question":"Write a function to reverse an array in-place using only a constant amount of extra space.","solution":"def reverse_array_in_place(arr): Reverses an array in-place using only a constant amount of extra space. Args: arr (list): The list of elements to be reversed. Returns: None: The list is modified in place. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Write a function to populate a linked list with unique integers from 1 to n (inclusive). Then, split the linked list into two lists: one that contains every other element, starting with the head, and the other containing the remaining elements. Return these two lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def create_linked_list_from_range(n): if n <= 0: return None head = ListNode(1) current = head for i in range(2, n + 1): current.next = ListNode(i) current = current.next return head def split_linked_list(head): if not head: return None, None first_list_head = head second_list_head = head.next current1 = first_list_head current2 = second_list_head while current1 and current1.next and current2 and current2.next: current1.next = current2.next current1 = current1.next current2.next = current1.next current2 = current2.next if current1: current1.next = None if current2: current2.next = None return first_list_head, second_list_head def linked_list_to_list(head): result = [] while head: result.append(head.val) head = head.next return result"},{"question":"Write a function to find the sum of a list of numbers. The list can contain both positive and negative integers, and the function should return the total sum of the numbers.","solution":"def sum_of_list(numbers): Returns the sum of a list of numbers. :param numbers: List of integers (both positive and negative). :return: Sum of the numbers in the list. return sum(numbers)"},{"question":"Write a function to merge two sorted lists into one sorted list. The function should take two lists as input and return a new sorted list containing all elements from both input lists. The function should handle any size of input lists and should not use any additional data structures other than the input lists and a single output list to store the merged result.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Parameters: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged sorted list containing all elements from both input lists. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function to convert a given Unix timestamp to a human-readable date and time format. The function should take the Unix timestamp as input and return the date and time in the format \\"Year-Month-Day Hour:Minute:Second\\".","solution":"from datetime import datetime def convert_unix_to_human_readable(unix_timestamp): Converts a given Unix timestamp to a human-readable date and time format. :param unix_timestamp: Unix timestamp to be converted. :type unix_timestamp: int :return: Date and time in the format \\"Year-Month-Day Hour:Minute:Second\\". :rtype: str return datetime.utcfromtimestamp(unix_timestamp).strftime('%Y-%m-%d %H:%M:%S')"},{"question":"Write a function to sort an array of integers using the QuickSort algorithm. Ensure that the function is efficient and can handle large arrays.","solution":"def quicksort(arr): Sort an array of integers using the QuickSort algorithm. Args: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to check if a given array can be split into two parts such that the sum of elements in both parts is equal.","solution":"def can_partition(nums): Determines if the given array can be split into two parts with equal sum. Args: nums: List of integers. Returns: bool: True if the array can be partitioned into two subsets with equal sum, else False. total_sum = sum(nums) # If total_sum is odd, it's not possible to divide it into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to store results of subproblems dp = [False] * (target + 1) dp[0] = True # Base case: A sum of 0 is always possible for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Write a function to check if a given number is a power of two. A number is a power of two if it can be expressed as 2^k where k is a non-negative integer.","solution":"def is_power_of_two(n): This function checks if a given number n is a power of two. Parameters: n (int): The number to check Returns: bool: True if n is a power of two, False otherwise if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to solve a 2D matrix翻转题。题目描述如下：","solution":"def reverse_matrix(matrix): Reverses the given 2D matrix both row-wise and column-wise. reversed_matrix = [] for row in matrix[::-1]: reversed_matrix.append(row[::-1]) return reversed_matrix"},{"question":"Write a function to compute the Sum of Squared Differences (SSD) between two matrices. The function should handle two matrices of the same dimensions and return the SSD as a single number.","solution":"def sum_of_squared_differences(matrix1, matrix2): Computes the Sum of Squared Differences (SSD) between two matrices of the same dimensions. Parameters: matrix1 (list of list of int/float): The first matrix. matrix2 (list of list of int/float): The second matrix. Returns: int/float: The SSD between the two matrices. if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for row1, row2 in zip(matrix1, matrix2)): raise ValueError(\\"Both matrices must have the same dimensions.\\") ssd = 0 for row1, row2 in zip(matrix1, matrix2): for val1, val2 in zip(row1, row2): ssd += (val1 - val2) ** 2 return ssd"},{"question":"Write a function to check if a given array contains any duplicate elements. If duplicates are found, return true, otherwise return false.","solution":"def contains_duplicates(arr): Return True if array contains any duplicate elements, otherwise False. return len(arr) != len(set(arr))"},{"question":"Write a function to find all the elements of a binary tree in a zigzag level order traversal. The zigzag level order traversal should start from the left child and then alternate directions at each level.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): Find all the elements of a binary tree in a zigzag level order traversal. Args: root: TreeNode, the root of the binary tree Returns: List[List[int]], the zigzag level order traversal of the tree if not root: return [] result = [] current_level = deque([root]) left_to_right = True while current_level: level_size = len(current_level) level_nodes = [] for _ in range(level_size): if left_to_right: node = current_level.popleft() if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) else: node = current_level.pop() if node.right: current_level.appendleft(node.right) if node.left: current_level.appendleft(node.left) level_nodes.append(node.val) result.append(level_nodes) left_to_right = not left_to_right return result"},{"question":"Write a function to find the kth largest element in an unsorted array. The function should have a time complexity of O(n). Please provide a solution in C#.","solution":"import random def partition(arr, left, right): pivot_index = random.randint(left, right) pivot = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] > pivot: arr[i], arr[store_index] = arr[store_index], arr[i] store_index += 1 arr[store_index], arr[right] = arr[right], arr[store_index] return store_index def quickselect(arr, left, right, k_smallest): if left == right: return arr[left] pivot_index = partition(arr, left, right) if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return quickselect(arr, left, pivot_index - 1, k_smallest) else: return quickselect(arr, pivot_index + 1, right, k_smallest) def find_kth_largest(nums, k): return quickselect(nums, 0, len(nums) - 1, k - 1)"},{"question":"Write a function to calculate the area of a circle, given its radius. How would you test it with different values?","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Write a function to generate all possible combinations of a 4-dimensional vector of integers into pairs. The pairs should consist of vectors of equal size 2. For example, if the input is a 4-dimensional vector with 4 elements, the output should be a vector of all possible pairs. If the input is a 4-dimensional vector with 2 elements, the output should be a vector of all possible pairs of those elements repeated twice.","solution":"from itertools import combinations def generate_combinations(vector): Generate all possible combinations of a 4-dimensional vector into pairs of vectors of size 2. :param vector: List[int] - The input 4-dimensional vector :return: List[Tuple[int, int]] - A list of tuples, each representing a pair combination # Validate input if len(vector) != 4: raise ValueError(\\"Input vector must have exactly 4 elements.\\") # Generate all possible pairs of the vector all_pairs = list(combinations(vector, 2)) return all_pairs"},{"question":"Write a function to concatenate strings in an array ignoring the empty strings.","solution":"def concatenate_strings(strings): Concatenates the strings in the given list, ignoring empty strings. Args: strings (list of str): The list of strings to concatenate. Returns: str: The concatenated result. return \\"\\".join(filter(None, strings))"},{"question":"Write a function to generate and return a list of all prime numbers between 1 and a specified positive integer \`n\`. The list should be sorted in ascending order. If there are no prime numbers in the given interval, the function should return an empty list.","solution":"def generate_primes(n): Generates and returns a list of all prime numbers between 1 and a specified positive integer n. The list is sorted in ascending order. If there are no prime numbers in the given interval, the function returns an empty list. Parameters: n (int): The upper limit of the interval to check for prime numbers (inclusive). Returns: list: A sorted list of prime numbers up to and including n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for p in range(2, n + 1): if is_prime[p]: primes.append(p) for i in range(p * p, n + 1, p): is_prime[i] = False return primes"},{"question":"Write a function to rotate an n x n 2D matrix by 90 degrees clockwise.","solution":"def rotate_matrix(matrix): Rotates an n x n 2D matrix by 90 degrees clockwise. :param matrix: List[List[int]], the n x n matrix to be rotated :return: None, in-place modification of the matrix n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # Save the top element top = matrix[i][j] # Move left element to top matrix[i][j] = matrix[n - 1 - j][i] # Move bottom element to left matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j] # Move right element to bottom matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i] # Move top element to right matrix[j][n - 1 - i] = top"},{"question":"Write a function to calculate the sum of all prime numbers less than a given limit.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(limit): Returns the sum of all prime numbers less than the given limit. return sum(n for n in range(2, limit) if is_prime(n))"},{"question":"Write a function to check if a given number is a decimal armstrong number.","solution":"def is_decimal_armstrong(number): Returns True if the given number is a decimal armstrong number, False otherwise. A decimal armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits. # Convert number to string to get the list of its digits digits = [int(d) for d in str(number)] # Number of digits num_of_digits = len(digits) # Calculate the sum of each digit raised to the power of number of digits sum_of_powers = sum(d ** num_of_digits for d in digits) # Check if the sum of powers is equal to the original number return number == sum_of_powers"},{"question":"Write a function to find whether a given integer is a power of 2 or not. A power of 2 is an integer that can be written as 2 raised to an integer power (i.e., 2^1, 2^2, 2^3, ...).","solution":"def is_power_of_two(n): Determine if the given integer n is a power of 2. Args: n (int): The integer to check. Returns: bool: True if n is a power of 2, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to count the number of times a word appears in a given text. The function should take the word and the text as inputs and return the count. Make sure the function is case-insensitive.","solution":"def count_word_occurrences(word, text): Returns the count of the number of times 'word' appears in 'text'. The search is case-insensitive. :param word: The word to search for. :param text: The text to search within. :return: The count of occurrences of the word in the text. word = word.lower() text = text.lower() words = text.split() return words.count(word)"},{"question":"Write a function to calculate the number of characters in a string that are odd positions in the alphabet when the string is reversed. How do you handle characters that are not letters?","solution":"def count_odd_position_chars_reversed(s): Calculate the number of characters in a string that are in odd positions of the alphabet when the string is reversed. Characters that are not letters are ignored. Parameters: s (str): The input string. Returns: int: The count of characters in odd positions of the alphabet. odd_positions = set('acegikmoqsuwy') # Letters in odd positions in the alphabet reversed_s = s[::-1] count = sum(1 for char in reversed_s.lower() if char in odd_positions) return count"},{"question":"Write a function to calculate the sum of the first N natural numbers. The function should take an integer \`N\` as input and return the sum. Implement this function using recursion.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers using recursion. Parameters: N (int): The number up to which the sum is to be calculated. Returns: int: The sum of the first N natural numbers. if N <= 0: return 0 return N + sum_of_natural_numbers(N - 1)"},{"question":"Write a function to return the largest sum of non-adjacent elements in a given array.","solution":"def largest_sum_non_adjacent(nums): Returns the largest sum of non-adjacent elements in the given list nums. if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) include = 0 exclude = 0 for num in nums: new_exclude = max(include, exclude) include = exclude + num exclude = new_exclude return max(include, exclude)"},{"question":"Write a function to calculate the sum of all even numbers between two given integers, inclusive. The integers can be in any order. Ensure that the function returns the sum correctly, even if the smaller or larger number is specified first. If the same number is provided as both limits, the function should return 0.","solution":"def sum_of_even_numbers(a, b): Returns the sum of all even numbers between two given integers, inclusive. If both numbers are the same, return 0. if a == b: return 0 start = min(a, b) end = max(a, b) # Find the first even number in the range if start % 2 != 0: start += 1 # Find the last even number in the range if end % 2 != 0: end -= 1 # Sum of even numbers using arithmetic progression formula count = (end - start) // 2 + 1 even_sum = count * (start + end) // 2 return even_sum"},{"question":"Write a function to calculate the Euclidean distance between two points in a 2D space. The function should take two tuples representing the coordinates of the two points and return the distance between them.","solution":"import math def euclidean_distance(point1, point2): Calculate the Euclidean distance between two points in 2D space. Parameters: point1 (tuple): A tuple representing the coordinates (x1, y1) of the first point. point2 (tuple): A tuple representing the coordinates (x2, y2) of the second point. Returns: float: The Euclidean distance between the two points. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)"},{"question":"Write a function to check if a string contains a consecutive sequence of 'a' characters with a length of at least 3.","solution":"def contains_consecutive_a(s): Returns True if the string contains a consecutive sequence of 'a' characters with a length of at least 3, otherwise False. return 'aaa' in s"},{"question":"Write a function to check if a given integer \`n\` is a power of two. A number is considered a power of two if there is exactly one bit set in its binary representation.","solution":"def is_power_of_two(n): Check if a given integer \`n\` is a power of two. A number is a power of two if there is exactly one bit set in its binary representation. :param n: int :return: bool if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to implement the \`startsWith()\` method in Python, which should return \`True\` if a string begins with the specified character or substring, otherwise return \`False\`.","solution":"def starts_with(string, substring): Returns True if the string starts with the specified substring, otherwise returns False. return string.startswith(substring)"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number of terms. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first five terms are 0, 1, 1, 2, and 3. Write a function in Python that takes an integer \`n\` as an argument and returns the first \`n\` terms of the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to rotate a given 2D array (matrix) by 90 degrees clockwise.","solution":"def rotate(matrix): Rotates the given 2D array (matrix) by 90 degrees clockwise. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"Write a function to find the two numbers that add up to a specific target number in an array, and return their indices.","solution":"def two_sum(nums, target): Find two numbers in an array that add up to a specific target and return their indices. :param nums: List[int], List of integers :param target: int, Target sum :return: List[int], Indices of the two numbers num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a function to find the second maximum number in a list. If the list has less than two unique elements, the function should return -1.","solution":"def second_maximum(numbers): Returns the second maximum number in a list. If the list has less than two unique elements, returns -1. unique_numbers = set(numbers) if len(unique_numbers) < 2: return -1 sorted_numbers = sorted(unique_numbers, reverse=True) return sorted_numbers[1]"},{"question":"Write a function to remove duplicates from a list in Python. Output the unique elements in ascending order. Here is the given list: [9, 5, 10, 9, 8, 2, 7, 2]","solution":"def remove_duplicates_and_sort(input_list): Remove duplicates from a list and return the unique elements in ascending order. :param input_list: List of integers with potential duplicates. :return: List of unique integers in ascending order. return sorted(set(input_list)) # Example usage: example_list = [9, 5, 10, 9, 8, 2, 7, 2] output_list = remove_duplicates_and_sort(example_list) # Should be [2, 5, 7, 8, 9, 10]"},{"question":"Write a function to convert a Binary Search Tree (BST) to a Sorted Doubly Linked List.","solution":"class Node: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_to_doubly_linked_list(root): This function will convert a BST into a sorted doubly linked list. Each node's left pointer will point to its predecessor, and its right pointer to its successor in the sorted order. :param root: Node, root of the BST :return: Node, head of the sorted doubly linked list if not root: return None def inorder_traversal(node): nonlocal last, head if not node: return inorder_traversal(node.left) if last: last.right, node.left = node, last else: head = node last = node inorder_traversal(node.right) head, last = None, None inorder_traversal(root) # Making it circular if head and last: head.left, last.right = last, head return head"},{"question":"Write a function to sort an integer array in ascending order. Provide an implementation for both Bubble Sort and Quick Sort algorithms.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def quick_sort(arr): Sorts an array of integers in ascending order using the Quick Sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to merge two sorted linked lists and return the merged list. The merged list should be made by splicing together the nodes of the first two lists.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_two_sorted_lists(l1, l2): Merge two sorted linked lists l1 and l2 and return the merged list. dummy = ListNode() # Dummy node to serve as the start of the merged list tail = dummy # Tail of the merged list while l1 and l2: if l1.value < l2.value: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next if l1: tail.next = l1 if l2: tail.next = l2 return dummy.next"},{"question":"Write a function to reverse a binary number.","solution":"def reverse_binary(num): Returns the integer value of the reverse of the binary representation of num. # Convert the number to binary, remove the '0b' prefix binary_str = bin(num)[2:] # Reverse the binary string reversed_binary_str = binary_str[::-1] # Convert the reversed binary string back to an integer reversed_num = int(reversed_binary_str, 2) return reversed_num"},{"question":"Write a function to reverse a string in Python. The function should return the reversed string. If the input string is empty, the function should return an empty string.","solution":"def reverse_string(s): Returns the reversed string of the provided string 's'. If 's' is an empty string, it returns an empty string. return s[::-1]"},{"question":"Write a function to calculate the sum of numbers from 1 to 100.","solution":"def sum_1_to_100(): Returns the sum of numbers from 1 to 100. return sum(range(1, 101))"},{"question":"Write a function to find the maximum profit that can be made by taking at most two transactions on a given list of stock prices. You can only hold one share at a time (i.e., you cannot hold two shares of the same stock at the same time). You must sell before buying again.","solution":"def max_profit_two_transactions(prices): Find the maximum profit with at most two transactions. :param prices: List of stock prices :return: Maximum profit if not prices: return 0 n = len(prices) # Initialize profit arrays profit = [0] * n # Forward traversal to track max profit until day i with at most one transaction min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit[i] = max(profit[i-1], prices[i] - min_price) # Backward traversal to track max profit from day i to end with second transaction max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) profit[i] = max(profit[i+1], profit[i] + (max_price - prices[i])) return profit[0]"},{"question":"Write a function to convert a decimal number to a Roman numeral. The input will be an integer within the range of 1 to 3999. The function should return the Roman numeral as a string.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. Parameters: num (int): A decimal integer within the range of 1 to 3999. Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to find all negative numbers in a list and return them in a new list.","solution":"def find_negatives(input_list): Returns a list of all negative numbers from the input list. return [num for num in input_list if num < 0]"},{"question":"Write a function to generate a list of Fibonacci numbers up to a given limit. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The function should return the Fibonacci sequence numbers that do not exceed a specified limit.","solution":"def fibonacci_up_to_limit(limit): Generates a list of Fibonacci numbers up to a given limit. Parameters: limit (int): The upper limit for the Fibonacci sequence. Returns: list: A list of Fibonacci numbers up to the given limit. if limit < 0: return [] fib_sequence = [] a, b = 0, 1 while a <= limit: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Write a function to convert polar coordinates to Cartesian coordinates. Given the radius and angle in radians, the function should return the corresponding Cartesian coordinates (x, y).","solution":"import math def polar_to_cartesian(radius, angle_in_radians): Converts polar coordinates (radius, angle in radians) to Cartesian coordinates (x, y). Args: radius (float): The radius (distance from the origin). angle_in_radians (float): The angle in radians. Returns: tuple: A tuple containing the Cartesian coordinates (x, y). x = radius * math.cos(angle_in_radians) y = radius * math.sin(angle_in_radians) return (x, y)"},{"question":"Write a function to replace all spaces in a given string with another specified character.","solution":"def replace_spaces(input_string, replacement_char): Replaces all spaces in the input_string with the specified replacement_char. Parameters: input_string (str): The string in which spaces will be replaced. replacement_char (str): The character that will replace the spaces. Returns: str: The modified string with spaces replaced. if not isinstance(input_string, str) or not isinstance(replacement_char, str): raise ValueError(\\"Both input_string and replacement_char should be strings\\") if len(replacement_char) != 1: raise ValueError(\\"replacement_char should be a single character\\") return input_string.replace(' ', replacement_char)"},{"question":"Write a function to count the number of unique characters in a string and return the count. If the count is more than 26, return -1.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. If the count is more than 26, returns -1. unique_chars = set(s) unique_count = len(unique_chars) return unique_count if unique_count <= 26 else -1"},{"question":"Write a function to determine if a given point is inside a convex hull.","solution":"from scipy.spatial import ConvexHull import numpy as np def is_point_in_convex_hull(point, hull_points): Determines if a given point is inside a convex hull defined by hull_points. Parameters: point (tuple): The point to check, represented as a tuple (x, y). hull_points (list): List of tuples representing the vertices of the convex hull. Returns: bool: True if the point is inside the convex hull, False otherwise. # Create the convex hull hull = ConvexHull(hull_points) # Number of dimensions n_dim = len(point) new_points = np.vstack([hull_points, point]) new_hull = ConvexHull(new_points) if np.array_equal(new_hull.vertices, hull.vertices): return True else: return False"},{"question":"Write a function to find all prime factors of a given number and return them as a vector. The prime factors should be listed from smallest to largest. If the number is less than 2, the function should return an empty vector.","solution":"def prime_factors(n): Returns all prime factors of a given number n in ascending order. If the number is less than 2, returns an empty list. if n < 2: return [] factors = [] divisor = 2 while n >= divisor: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Write a function to return the length of the longest substring in the given string \`s\` that contains no more than \`k\` distinct characters.","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring with no more than k distinct characters. Parameters: s (str): The input string. k (int): The maximum number of distinct characters allowed in the substring. Returns: int: Length of the longest substring with no more than k distinct characters. if k == 0 or not s: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function to find the maximum subarray sum in a one-dimensional array of numbers. The function should return the maximum sum that can be achieved by adding up a contiguous subarray within the given array.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Args: nums (list of int): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to count the top N popular products from a list of product names. The function should return a list of tuples containing the product names and their frequencies, sorted in descending order of frequency. If multiple products have the same frequency, they should remain in the order they first appeared.","solution":"from collections import Counter def top_n_popular_products(products, n): Returns a list of tuples containing the top N product names and their frequencies from the provided list of product names. Parameters: products (list): A list of product names (strings). n (int): The number of top products to return. Returns: list: A list of tuples where each tuple contains a product name and its frequency, sorted in descending order of frequency. product_counter = Counter(products) sorted_products = sorted(product_counter.items(), key=lambda x: (-x[1], products.index(x[0]))) return sorted_products[:n]"},{"question":"Write a function to rearrange an array so that all positive numbers are on one side and all negative numbers are on the other side without maintaining their order. The function should be efficient and minimize the number of swaps.","solution":"def rearrange(arr): Rearrange the array so that all positive numbers are on one side and all negative numbers are on the other side without maintaining their order. The function uses the two-pointer approach to minimize swaps. left = 0 right = len(arr) - 1 while left < right: while left < right and arr[left] < 0: left += 1 while left < right and arr[right] >= 0: right -= 1 if left < right: arr[left], arr[right] = arr[right], arr[left] return arr"},{"question":"Write a function to reverse a string in Python. The function should handle both empty strings and strings of any length, and it should be efficient in terms of both time and space complexity.","solution":"def reverse_string(s): Reverses the input string s. Parameters: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to reverse a linked list in Python. The function should handle cases where the linked list might be empty or only contain one node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: The head node of the linked list :return: The new head node of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to split a linked list into two halves in Python. The function should take the head of the linked list as input and return the head of the second half. If the list has an odd number of elements, the extra element should be in the second half. For example, if the linked list is 1 -> 2 -> 3 -> 4 -> 5, it should be split into two lists: 1 -> 2 -> 3 and 4 -> 5.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def split_linked_list(head): Splits the linked list into two halves. If the number of elements is odd, the extra element goes to the second half. Args: head (ListNode): The head of the linked list. Returns: ListNode: The head of the second half of the linked list. if not head or not head.next: return head slow = fast = head prev = None # Use the slow and fast pointer technique while fast and fast.next: prev = slow slow = slow.next fast = fast.next.next # Cut the list into two halves prev.next = None return slow"},{"question":"Write a function to find the Fibonacci sequence using a recursive approach. How would you do this?","solution":"def fibonacci(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to find the minimum path sum in a grid. Each step you may move to any of the four directions (up, down, left, right).","solution":"def min_path_sum(grid): Find the minimum path sum in a grid. :param grid: List of List of integers :return: Integer representing the minimum path sum from heapq import heappop, heappush rows, cols = len(grid), len(grid[0]) # min_heap stores (current sum, row, col) min_heap = [(grid[0][0], 0, 0)] visited = set() # directions to move in the 4 possible directions directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while min_heap: current_sum, r, c = heappop(min_heap) if (r, c) == (rows - 1, cols - 1): return current_sum if (r, c) in visited: continue visited.add((r, c)) for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited: heappush(min_heap, (current_sum + grid[nr][nc], nr, nc)) return -1 # should never reach here if grid is valid"},{"question":"Write a function to sort an array of non-negative integers in ascending order using the selection sort algorithm.","solution":"def selection_sort(arr): Sort an array of non-negative integers in ascending order using the selection sort algorithm. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a function to check if a binary tree is a full binary tree.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.data = key def is_full_binary_tree(root): Checks if a binary tree is a full binary tree. # if the tree is empty, it is considered a full binary tree if root is None: return True # if leaf node if root.left is None and root.right is None: return True # if both left and right are not None, and # both left and right subtrees are full if root.left is not None and root.right is not None: return (is_full_binary_tree(root.left) and is_full_binary_tree(root.right)) # if we reach here means one of the subtrees is empty and the other is not return False"},{"question":"Write a function to find the intersection of two sets of numbers.","solution":"def intersection(set1, set2): Returns the intersection of two sets. return set1.intersection(set2)"},{"question":"Write a function to clone a linked list recursively.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def clone_linked_list_recursive(node: ListNode) -> ListNode: Clones a linked list recursively. :param node: The head node of the linked list to be cloned. :return: The head node of the cloned linked list. if node is None: return None cloned_node = ListNode(node.value) # Clone the current node cloned_node.next = clone_linked_list_recursive(node.next) # Recursively clone the next nodes return cloned_node"},{"question":"Write a function to convert a Roman numeral to an integer. How can I approach this problem step-by-step?","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: A string representing the Roman numeral. :return: An integer representing the Roman numeral's value. roman_to_int_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Write a function to calculate the nth Fibonacci number in Python. The function should use dynamic programming to optimize the calculations. Dynamic programming is a method for solving complex problems by breaking them down into simpler subproblems and storing the results of these subproblems to avoid redundant calculations.","solution":"def fib(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 # Initialize the array to store Fibonacci values fib_array = [0] * (n + 1) fib_array[1] = 1 # Compute Fibonacci values iteratively for i in range(2, n + 1): fib_array[i] = fib_array[i - 1] + fib_array[i - 2] return fib_array[n]"},{"question":"Write a function to convert a given string to a palindrome by appending the minimum number of characters at the end.","solution":"def convert_to_palindrome(s: str) -> str: Converts the given string \`s\` to a palindrome by appending the minimum number of characters at the end. Parameters: s (str): The input string that needs to be converted into a palindrome. Returns: str: The palindrome string formed by appending the minimum number of characters at the end of the input string. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return \\"\\""},{"question":"Write a function to convert a given integer to a string in a specified radix (base). The radix can be any value from 2 to 36. If the radix is beyond this range, it should return an error message. The function should also handle negative numbers by converting them to their two's complement representation in the specified radix.","solution":"def int_to_str_in_radix(number, radix): Converts a given integer to a string in a specified radix (base). Parameters: number (int): The integer number to be converted. radix (int): The base for the conversion (between 2 and 36 inclusive). Returns: str: The string representation of the number in the specified radix, or error message if the radix is out of range. if not (2 <= radix <= 36): return \\"Error: Radix must be between 2 and 36.\\" if number == 0: return \\"0\\" is_negative = number < 0 number = abs(number) digits = [] while number > 0: digits.append(\\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\"[number % radix]) number //= radix if is_negative: return '-' + ''.join(reversed(digits)) else: return ''.join(reversed(digits))"},{"question":"Write a function to output the numbers from 1 to n, but if the number is a multiple of 3, output 'Fizz', if a multiple of 5, 'Buzz', and if a multiple of both 3 and 5, 'FizzBuzz'. The function should be efficient and simple to understand.","solution":"def fizz_buzz(n): Returns a list of strings representing the numbers from 1 to n with the following rules: - For multiples of 3, \\"Fizz\\". - For multiples of 5, \\"Buzz\\". - For multiples of both 3 and 5, \\"FizzBuzz\\". result = [] for i in range(1, n+1): if i % 15 == 0: result.append('FizzBuzz') elif i % 3 == 0: result.append('Fizz') elif i % 5 == 0: result.append('Buzz') else: result.append(str(i)) return result"},{"question":"Write a function to convert a number from a target base (between 2 and 36) to a string representing its hexadecimal (base 16) equivalent in uppercase.","solution":"def base_to_hex(number: str, base: int) -> str: Converts a number from a given base to its hexadecimal representation in uppercase. :param number: The number to be converted as a string. :param base: The base of the number, between 2 and 36. :return: Hexadecimal representation of the number in uppercase. if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36.\\") # Convert the number from the given base to an integer decimal_number = int(number, base) # Convert the integer to a hexadecimal string and remove the '0x' prefix, then return in uppercase hex_number = hex(decimal_number)[2:].upper() return hex_number"},{"question":"Write a function to return a list where the first element is the string \\"hello\\" and the second element is the number 6.","solution":"def generate_list(): Returns a list where the first element is the string \\"hello\\" and the second element is the number 6. return [\\"hello\\", 6]"},{"question":"Write a function to find the maximum product of pairs in a list of numbers. If the list has an odd number of elements, return the maximum product of any two elements. If the list has no elements, return None. The function should handle exceptions and edge cases, such as empty lists or negative numbers.","solution":"def max_product_of_pairs(numbers): Returns the maximum product of pairs in a list of numbers. If there are no elements in the list, return None. if not numbers or len(numbers) < 2: return None numbers.sort() max_product = max(numbers[0] * numbers[1], numbers[-1] * numbers[-2]) return max_product"},{"question":"Write a function to check if a given number is a power of 4. A number is a power of 4 if there exists an integer x such that 4^x = num. The function should return True if the number is a power of 4, and False otherwise.","solution":"def is_power_of_4(num): Returns True if num is a power of 4, otherwise False. if num <= 0: return False while num % 4 == 0: num //= 4 return num == 1"},{"question":"Write a function to calculate the sum of all numbers in an array that are even and less than 50.","solution":"def sum_even_and_less_than_50(arr): Returns the sum of all even numbers in the array that are less than 50. return sum(num for num in arr if num % 2 == 0 and num < 50)"},{"question":"Write a function to rotate an array to the left by k positions. The function should take three parameters: the array to rotate, the number of positions to rotate, and the length of the array. The function should return the rotated array.","solution":"def rotate_left(arr, k, n): Rotates the array to the left by k positions. Parameters: arr (list): The array to rotate. k (int): The number of positions to rotate. n (int): The length of the array. Returns: list: The rotated array. if n == 0: return arr k = k % n # Handle cases where k is greater than n return arr[k:] + arr[:k]"},{"question":"Write a function to find the missing number in an array of integers that contains numbers from 0 to n with one missing number. For example, if the array is [3, 0, 1, 2], the missing number is 4.","solution":"def find_missing_number(arr): Finds the missing number in an array of integers that contains numbers from 0 to n with one missing number. :param arr: List[int], the input array containing numbers from 0 to n with one number missing :return: int, the missing number n = len(arr) total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a function to find the number of unique islands in a grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Assume all four edges of the grid are surrounded by water. The output is the number of islands. The grid is represented as a 2D list (list of lists) where 1 represents land and 0 represents water.","solution":"def num_islands(grid): Returns the number of unique islands in the given grid. if not grid: return 0 def dfs(i, j): if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # Sink the island dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: count += 1 dfs(i, j) return count"},{"question":"Write a function to find the integer in a list with the smallest absolute value. If there are multiple integers with the same smallest absolute value, return the one that appears first in the list.","solution":"def smallest_absolute_value(nums): Returns the integer with the smallest absolute value in the list. If there are multiple integers with the smallest absolute value, returns the one that appears first. if not nums: return None min_abs_value = float('inf') result = None for num in nums: abs_value = abs(num) if abs_value < min_abs_value: min_abs_value = abs_value result = num return result"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. How would you test this function to ensure its correctness?","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Negative numbers do not have a factorial.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to implement the classic game \\"Tic-Tac-Toe\\". The function should take a list of moves as input. Each move is a tuple containing two elements: the first is the player ('X' or 'O') and the second is the tuple indicating the row and column of the board (0-indexed). The function should print the board after each move and declare the winner if a player has three of their marks in a row, column, or diagonal. If all moves are made and no winner is found, it should declare a draw.","solution":"def print_board(board): for row in board: print(\\" | \\".join(row)) print(\\"-\\" * 5) def check_winner(board, player): # Check rows for row in board: if all([cell == player for cell in row]): return True # Check columns for col in range(3): if all([board[row][col] == player for row in range(3)]): return True # Check diagonals if all([board[i][i] == player for i in range(3)]) or all([board[i][2-i] == player for i in range(3)]): return True return False def tic_tac_toe(moves): board = [[\\" \\" for _ in range(3)] for _ in range(3)] for player, (row, col) in moves: if board[row][col] != \\" \\": print(f\\"Cell ({row},{col}) is already taken. Invalid move.\\") continue board[row][col] = player print_board(board) if check_winner(board, player): print(f\\"Player {player} wins!\\") return print(\\"It's a draw!\\")"},{"question":"Write a function to reverse a string. Then, use this function to reverse a given string and print the reversed string.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # Example usage: # print(reverse_string(\\"hello\\"))"},{"question":"Write a function to strip various characters from a given string. Here is the function definition: \`strip_chars(input_string, chars_to_strip)\`. You need to remove the characters contained in \`chars_to_strip\` from the provided \`input_string\`. It should return the modified string.","solution":"def strip_chars(input_string, chars_to_strip): Removes all characters in chars_to_strip from input_string. :param input_string: The string from which to remove characters. :param chars_to_strip: The string containing characters to be removed. :return: A new string with the characters removed. return ''.join(char for char in input_string if char not in chars_to_strip)"},{"question":"Write a function to convert a given binary string (consisting only of '0's and '1's) to its decimal equivalent. The function should take a single string argument and return an integer.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. Parameters: binary_str (str): A string consisting of '0's and '1's representing a binary number. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Write a function to find the maximum product of two numbers in an array.","solution":"def max_product_of_two_numbers(arr): Returns the maximum product of two numbers in the input list \`arr\`. if len(arr) < 2: raise ValueError(\\"Array must contain at least two numbers\\") # Sort the array to find the two largest and two smallest numbers arr.sort() # Maximum product can be from two largest numbers or two smallest numbers (negative * negative) return max(arr[-1] * arr[-2], arr[0] * arr[1])"},{"question":"Write a function to calculate the factorial of a number with its proof of correctness.","solution":"def factorial(n): Compute the factorial of a non-negative integer n. :param n: non-negative integer :return: factorial of n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the count of numbers in a given array that are greater than a specified threshold.","solution":"def count_numbers_greater_than_threshold(arr, threshold): Returns the count of numbers in the given array that are greater than the specified threshold. return sum(1 for num in arr if num > threshold)"},{"question":"Write a function to remove all duplicates from a list of integers and return the new list. The resulting list should maintain the original order of the integers that appear first in the input list.","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining the order of first appearances. Parameters: lst (list): A list of integers. Returns: list: A list with duplicates removed, maintaining the order of first appearances. seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function to calculate the 10th Fibonacci number in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return \\"Input should be a positive integer\\" elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b # Calculate the 10th Fibonacci number tenth_fibonacci = fibonacci(10)"},{"question":"Write a function to generate the nth Fibonacci number using recursion. What are the potential issues that might arise from this implementation and how can we optimize it?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to find the minimum value in an array of integers, but if the minimum value is not found in the first half of the array, it should return -1. If the array is empty, return \`None\`. If the minimum value is found in the first half of the array, return its position (index) in the array. The function should have a time complexity of O(n).","solution":"def find_min_in_first_half(array): Function to find the minimum value in an array of integers. If the minimum value is not found in the first half of the array, it returns -1. If the array is empty, it returns None. If the minimum value is found in the first half of the array, it returns its index. if not array: return None n = len(array) min_value = min(array) for i in range((n + 1) // 2): # Only look in the first half if array[i] == min_value: return i return -1"},{"question":"Write a function to reverse a singly linked list in Python. The function should take the head of the linked list as input and return the new head of the reversed linked list. You should not modify the values of the nodes, but only the links between them.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list and returns the new head of the list. :param head: ListNode, the head of the singly linked list :return: ListNode, the new head of the reversed singly linked list prev = None current = head while current: next_node = current.next # Save next node current.next = prev # Reverse the link prev = current # Move prev forward current = next_node # Move current forward return prev"},{"question":"Write a function to calculate the total cost of an order based on the quantity of each item and its corresponding price. The order contains a list of items, where each item is represented as a tuple containing the quantity and the price per unit. The function should return the total cost of the order.","solution":"def calculate_total_cost(order): Calculate the total cost of an order. Parameters: order (list of tuples): Each tuple contains quantity (int) and price per unit (float). Returns: float: Total cost of the order. total_cost = 0 for quantity, price_per_unit in order: total_cost += quantity * price_per_unit return total_cost"},{"question":"Write a function to check if a given list of integers is sorted in non-decreasing order. If the list is sorted, return a tuple \`(true, '<last element of the list>')\`. If the list is not sorted, return \`array_not_sorted\`. Here, \`array_not_sorted\` is a predefined value that you can use.","solution":"array_not_sorted = \\"array_not_sorted\\" def is_sorted_non_decreasing(lst): Checks if the given list of integers is sorted in non-decreasing order. Args: lst (list): The list of integers to check. Returns: tuple: (True, '<last element of the list>') if the list is sorted. string: 'array_not_sorted' if the list is not sorted. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return array_not_sorted return (True, lst[-1]) if lst else (True, None)"},{"question":"Write a function to rotate a given positive integer by three places to the right. If the integer is a single digit, it should remain unchanged. For example, for 12345, the result should be 51234.","solution":"def rotate_integer(n): Rotates a given positive integer by three places to the right. If the integer is a single digit, it remains unchanged. s = str(n) if len(s) <= 1: return n # Take the last three characters and move them to the front rotated = s[-3:] + s[:-3] return int(rotated)"},{"question":"Write a function to extract and return the unique integers from a given list, preserving their order of appearance.","solution":"def unique_integers(lst): Extract and return the unique integers from a given list, preserving their order of appearance. Parameters: lst (list): A list of integers Returns: list: A list of unique integers from the input list seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"Write a function to implement the Quick Sort algorithm.","solution":"def quicksort(arr): Implementation of Quick Sort algorithm. Parameters: arr (list): The list of elements to be sorted. Returns: list: A new list that is sorted. if len(arr) <= 1: return arr else: pivot = arr[0] lesser = [x for x in arr[1:] if x <= pivot] greater = [x for x in arr[1:] if x > pivot] return quicksort(lesser) + [pivot] + quicksort(greater)"},{"question":"Write a function to calculate the length of a singly linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def length_of_linked_list(head): Returns the length of the singly linked list. count = 0 current = head while current: count += 1 current = current.next return count"},{"question":"Write a function to return the index of the first occurrence of the minimum value in a given list. If the list is empty, return -1. Assume the list contains at least one element.","solution":"def index_of_minimum(lst): Returns the index of the first occurrence of the minimum value in the list. If the list is empty, returns -1. if not lst: return -1 min_value = min(lst) return lst.index(min_value)"},{"question":"Write a function to delete a given node in a singly linked list.","solution":"# Definition for singly-linked list. class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def delete_node(node): Deletes the given node (except the tail) from the singly linked list. :type node: ListNode :rtype: None # The idea is to copy the value of the next node to the given node and then delete the next node if node is None or node.next is None: raise ValueError(\\"Can't delete the last node or null node with this method.\\") # Copy the value of the next node node.value = node.next.value # Bypass the next node node.next = node.next.next"},{"question":"Write a function to find all the duplicates in an array of positive integers, where each integer is in the range 1 to n (n is the size of the array). The function should not use any extra space and the time complexity should be O(n). The function should return the result as a list of the duplicate elements.","solution":"def find_duplicates(nums): Finds all the duplicates in an array of positive integers, where each integer is in the range 1 to n. Parameters: nums (List[int]): The input list of integers. Returns: List[int]: A list of the duplicate elements. duplicates = [] for i in range(len(nums)): index = abs(nums[i]) - 1 if nums[index] < 0: duplicates.append(abs(nums[i])) else: nums[index] = -nums[index] return duplicates"},{"question":"Write a function to calculate the sum of all leaves in a binary tree. A leaf node is a node with no children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_leaves(root): Calculate the sum of all leaf nodes in a binary tree. :param root: TreeNode - Root node of the binary tree :return: int - Sum of values of all leaf nodes if root is None: return 0 # If both left and right are None, it is a leaf node if root.left is None and root.right is None: return root.value # Otherwise, sum the leaves of the left and right subtrees return sum_of_leaves(root.left) + sum_of_leaves(root.right)"},{"question":"Write a function to convert Arabic numerals to Roman numerals in Python. I think you get the idea of what a Roman numeral is, for example, the number 14 would be 'XIV'. Remember, sometimes you will have to handle big numbers, so make sure your function is capable of converting large numbers.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to determine whether a string \`s\` consists of the consecutive repeating characters. The string can contain lower case and upper case English letters.","solution":"def has_consecutive_repeating_chars(s): Determines whether a string \`s\` consists of consecutive repeating characters. :param s: Input string. :return: True if \`s\` has consecutive repeating characters, False otherwise. if len(s) <= 1: return False for i in range(1, len(s)): if s[i] == s[i-1]: return True return False"},{"question":"Write a function to calculate the factorial of a number recursively. Additionally, handle cases where the input is not an integer or is negative. If the input is not an integer, convert it to an integer. If it is negative, return an error message.","solution":"def factorial(n): Returns the factorial of a positive integer n. If n is not a positive integer, handle cases accordingly. if not isinstance(n, int): try: n = int(n) except ValueError: return \\"Input is not a number and cannot be converted to an integer.\\" if n < 0: return \\"Factorial is not defined for negative numbers.\\" if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the nth Fibonacci number using iterative approach in Python. The function should be efficient and have a time complexity of O(n).","solution":"def iterative_fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for i in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to calculate the sum of numbers in an array, but only for those numbers that are less than or equal to 100 and are prime. How can we implement this in Python using a simple loop and a function to check if a number is prime?","solution":"def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_primes_upto_100(arr): Calculate the sum of numbers in the array that are less than or equal to 100 and are prime. return sum(num for num in arr if num <= 100 and is_prime(num))"},{"question":"Write a function to reverse the digits of a given integer. If the reversed integer overflows, return 0.","solution":"def reverse_integer(x): Reverses the digits of a given integer. If the reversed integer overflows, returns 0. Parameters: x (int): The integer to be reversed. Returns: int: The reversed integer, or 0 if it overflows. sign = -1 if x < 0 else 1 x = abs(x) reversed_x = 0 while x != 0: remainder = x % 10 x = x // 10 # Check for overflow if reversed_x > (2**31 - 1 - remainder) // 10: # 2**31 - 1 for positive overflow return 0 reversed_x = reversed_x * 10 + remainder return sign * reversed_x"},{"question":"Write a function to check if a string contains only alphabetic characters and return \\"Yes\\" if it does, and \\"No\\" if it contains any other characters (like digits or special characters).","solution":"def is_alpha(s): Check if the string contains only alphabetic characters. Parameters: s (str): The input string. Returns: str: \\"Yes\\" if the string contains only alphabetic characters, otherwise \\"No\\". return \\"Yes\\" if s.isalpha() else \\"No\\""},{"question":"Write a function to count the number of palindromic substrings in a given string \`s\`. A palindromic substring is a substring that reads the same backward as forward.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes (single center) expand_around_center(i, i) # Even length palindromes (two centers) expand_around_center(i, i + 1) return count"},{"question":"Write a function to rotate an array of n elements to the right by k steps. The function should return the rotated array. The elements should be shifted cyclically, meaning that the elements that are shifted off the end that are re-introduced at the beginning in reverse order.","solution":"def rotate_array(nums, k): This function rotates an array to the right by k steps. The elements cycled off the end are re-introduced at the beginning in the correct order. Parameters: nums (list): The list of elements to be rotated. k (int): The number of steps to rotate the array. Returns: list: The rotated array. n = len(nums) if n == 0 or k == 0: return nums k %= n # In case k is greater than the length of the array return nums[-k:] + nums[:-k]"},{"question":"Write a function to determine if a given list of numbers can form a valid sequence for a single jump game. In a jump game, a player can jump a certain number of spaces ahead based on the value at their current position. The function should return True if it's possible to reach the last index from the first index, and False otherwise.","solution":"def can_jump(nums): Determines if it is possible to reach the last index from the first index in a jump game. Each element in the array represents the maximum jump length from that position. Parameters: nums (list): A list of non-negative integers representing the jump lengths. Returns: bool: True if you can reach the last index, False otherwise. reachable = 0 for i, jump in enumerate(nums): if i > reachable: return False reachable = max(reachable, i + jump) return reachable >= len(nums) - 1"},{"question":"Write a function to find the total number of distinct ways to choose \`k\` elements from a set of \`n\` elements. This function should be named \`calculate_combinations\` and it should take two parameters: \`n\` (the total number of elements in the set) and \`k\` (the number of elements to choose). Use the combination formula for this calculation: \`C(n, k) = n! / (k! * (n-k)!)\`.","solution":"def calculate_combinations(n, k): Returns the number of distinct ways to choose k elements from a set of n elements. if k > n or k < 0: return 0 # Calculate factorial of a number def factorial(x): if x == 0 or x == 1: return 1 return x * factorial(x - 1) return factorial(n) // (factorial(k) * factorial(n - k))"},{"question":"Write a function to find the sum of the values by traversing a tree from root to leaf and selecting the minimum value encountered on the path. What would be the function signature?","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def min_path_sum(root): def dfs(node, current_min): if node is None: return float('inf') current_min = min(current_min, node.value) if node.left is None and node.right is None: # leaf node return current_min return min(dfs(node.left, current_min), dfs(node.right, current_min)) return dfs(root, float('inf'))"},{"question":"Write a function to simulate a game of Bulls and Cows in Python. The function should take two string inputs of equal length representing the secret number and the guess. Return the number of \\"bulls\\" and \\"cows\\" in a tuple, where a \\"bull\\" is a correct digit in the correct position and a \\"cow\\" is a correct digit in the wrong position.","solution":"def bulls_and_cows(secret, guess): Returns the number of bulls and cows in a game of Bulls and Cows. A \\"bull\\" is a correct digit in the correct position. A \\"cow\\" is a correct digit in the wrong position. Args: secret (str): The secret number as a string. guess (str): The guessed number as a string. Returns: tuple: A tuple with the number of bulls and cows in the format (bulls, cows). bulls = 0 cows = 0 secret_count = {} guess_count = {} # First pass to count bulls and gather remaining digits for cows for s, g in zip(secret, guess): if s == g: bulls += 1 else: secret_count[s] = secret_count.get(s, 0) + 1 guess_count[g] = guess_count.get(g, 0) + 1 # Second pass to count cows for digit in guess_count: if digit in secret_count: cows += min(secret_count[digit], guess_count[digit]) return (bulls, cows)"},{"question":"Write a function to reverse the order of words in a given sentence. For example, if the input is \\"hello world\\", the output should be \\"world hello\\". You should consider preserving the original order of the characters within each word.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The sentence to reverse the order of words in. Returns: str: The sentence with words in reversed order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to identify and return the most frequently occurring word in a string. If there are multiple words with the same highest frequency, return a list of all such words.","solution":"from collections import Counter import re def most_frequent_words(text): Identifies and returns the most frequently occurring word(s) in a string. If there are multiple words with the same highest frequency, return a list of all such words. Parameters: text (str): The input text. Returns: list: A list of the most frequently occurring word(s). # Use regular expression to find all words and convert to lowercase words = re.findall(r'bw+b', text.lower()) if not words: return [] # Count the frequency of each word word_counts = Counter(words) # Find the maximum frequency max_freq = max(word_counts.values()) # Find all words with the maximum frequency most_frequent = [word for word, count in word_counts.items() if count == max_freq] return most_frequent"},{"question":"Write a function to remove duplicates from a list of integers, maintaining the original order. The function should return a new list with all duplicates removed, preserving the order of elements as they first appeared in the input list.","solution":"def remove_duplicates(lst): Removes duplicates from the input list while preserving the original order. Parameters: lst (list): A list of integers which may contain duplicates. Returns: list: A new list with duplicates removed, maintaining original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to compute the Minimum Bounding Box (MBB) for a set of points in 2D or 3D space. The function should take a list of points as input and return the smallest rectangle or parallelepiped that encloses all the points.","solution":"def min_bounding_box(points): Returns the minimum bounding box that encloses the given points in 2D or 3D space. Parameters: points (list): A list of tuples representing points (either 2D or 3D). Returns: tuple: A tuple containing two points representing the minimum and maximum corners of the bounding box. if not points: raise ValueError(\\"The list of points cannot be empty.\\") dim = len(points[0]) if dim not in [2, 3]: raise ValueError(\\"Points must be either 2D or 3D.\\") # Initialize min and max coordinates min_corner = list(points[0]) max_corner = list(points[0]) for point in points: for i in range(dim): min_corner[i] = min(min_corner[i], point[i]) max_corner[i] = max(max_corner[i], point[i]) return (tuple(min_corner), tuple(max_corner))"},{"question":"Write a function to calculate the intersection of two sorted lists. The intersection should be returned as a new sorted list. The function should avoid duplicates in the result and should be efficient in terms of time complexity.","solution":"def intersection_sorted_lists(list1, list2): Returns the intersection of two sorted lists without duplicates. i, j = 0, 0 result = [] while i < len(list1) and j < len(list2): if list1[i] == list2[j]: if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return result"},{"question":"Write a function to find all prime numbers between 1 and \`n\` (inclusive) using the Sieve of Eratosthenes algorithm. The function should return a list of prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers between 1 and n (inclusive) using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Step 1: Create a list of boolean values, initially all set to \`True\` is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers # Step 2: Iterate and mark the multiples of each prime number p = 2 while p * p <= n: if is_prime[p]: for multiple in range(p * p, n + 1, p): is_prime[multiple] = False p += 1 # Step 3: Collect all prime numbers primes = [p for p, prime in enumerate(is_prime) if prime] return primes"},{"question":"Write a function to remove all occurrences of a given value from an array, and return the new length of the array. The order of the elements can be changed, and it doesn't matter what is left beyond the new length. Also, implement this in-place.","solution":"def remove_element(nums, val): Remove all occurrences of val in nums and return the new length of nums. The function modifies nums in-place. Parameters: nums (list): A list of integers. val (int): The value to remove from the list. Returns: int: The new length of the list after all occurrences of val have been removed. k = 0 # Pointer for the place to insert the next non-val element for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"Write a function to find all prime numbers in a given range. The function should return a list of all prime numbers between a start number and an end number, inclusive.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_range(start, end): Returns a list of all prime numbers between start and end, inclusive. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Write a function to calculate the nth Fibonacci number and explain the steps involved.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in Fibonacci sequence. Returns: int: The nth Fibonacci number. Example: fibonacci(5) -> 5, because the sequence is [0, 1, 1, 2, 3, 5] if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to sort an array of integers using a custom comparison function in Python.","solution":"from functools import cmp_to_key def custom_sort(array, compare): Sorts the array of integers using a custom comparison function. Parameters: - array: List of integers to be sorted. - compare: Custom comparison function that takes two integers and returns -1 if the first integer is smaller, 1 if it is greater, or 0 if equal. Returns: A new list of sorted integers. return sorted(array, key=cmp_to_key(compare))"},{"question":"Write a function to generate the fibonacci series. The function should take an integer as an input and return the fibonacci series up to that number.","solution":"def fibonacci_series(n): Generate fibonacci series up to n including n if it is in the series. Parameters: n (int): The maximum value for the fibonacci series. Returns: list: Fibonacci series up to n. if n < 0: return [] series = [] a, b = 0, 1 while a <= n: series.append(a) a, b = b, a + b return series"},{"question":"Write a function to generate Fibonacci numbers in Python.","solution":"def fibonacci(n): Generates Fibonacci numbers up to the nth number. Parameters: n (int): The position in the Fibonacci sequence to generate up to. Returns: list: A list containing Fibonacci numbers up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to count the number of occurrences of a specific element in an array. The function should return the count of the element. If the element is not found, the function should return 0.","solution":"def count_occurrences(arr, element): Returns the number of occurrences of a specific element in an array. Parameters: arr (list): The list in which to count occurrences of the element. element: The element whose occurrences need to be counted. Returns: int: The number of occurrences of the element in the array. return arr.count(element)"},{"question":"Write a function to reverse a string in Python. How can this function be called with a specific input string?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1] # Example of calling the function input_string = \\"hello\\" reversed_string = reverse_string(input_string) print(reversed_string) # Output will be \\"olleh\\""},{"question":"Write a function to check if a given integer is a power of two. You should implement this function in Python. If the number is a power of two, return \`True\`; otherwise, return \`False\`.","solution":"def is_power_of_two(n): Checks if the given integer is a power of two. Args: n (int): The integer to check. Returns: bool: True if n is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to determine the mode of a list of numbers. The mode is the number that appears most frequently in the list.","solution":"from collections import Counter def find_mode(numbers): Returns the mode (most frequent number) of the list of numbers. In case of a tie, the function returns one of the modes. if not numbers: return None number_counts = Counter(numbers) max_count = max(number_counts.values()) modes = [num for num, count in number_counts.items() if count == max_count] # If there is a tie, return one of the modes (first mode by default) return modes[0]"},{"question":"Write a function to find the intersection of two sets. The function should take two sets as input and return a new set containing the intersection of the two input sets.","solution":"def intersection(set1, set2): Returns the intersection of two sets. return set1 & set2"},{"question":"Write a function to find the majority element in an array. A majority element is an element that appears more than ⌊n / 2⌋ times. If there is no majority element, return -1. The solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def find_majority_element(arr): Finds the majority element in an array. A majority element is an element that appears more than n/2 times in the array. If there is no majority element, return -1. Parameters: arr (list): Input list of elements Returns: int: The majority element or -1 if there is no majority element if not arr: return -1 count = 0 candidate = None # Finding the candidate for majority element for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify the candidate if arr.count(candidate) > len(arr) // 2: return candidate else: return -1"},{"question":"Write a function to reverse a string without using any built-in string manipulation methods or additional data structures. You can assume the input string is composed of only ASCII characters.","solution":"def reverse_string(s): Reverses the input string without using any built-in string manipulation methods or additional data structures. Parameters: s (str): The input string to reverse. Returns: str: The reversed string. # Convert the input string to a list of characters s_list = list(s) # Initialize two pointers left, right = 0, len(s_list) - 1 # Swap characters from the two ends of the list until the pointers meet in the middle while left < right: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 # Convert the list of characters back to a string and return return ''.join(s_list)"},{"question":"Write a function to calculate the total number of unique combinations of elements from a given list that can be formed of a specified length. For example, if the list is \`[1, 2, 3]\` and the combination length is \`2\`, then the function should return \`3\` because there are three unique combinations: \`[1, 2]\`, \`[1, 3]\`, and \`[2, 3]\`.","solution":"from itertools import combinations def count_unique_combinations(elements, combination_length): Returns the total number of unique combinations of a specified length from the given list. :param elements: List of elements to form combinations from :param combination_length: Length of each combination :return: Number of unique combinations return len(list(combinations(elements, combination_length)))"},{"question":"Write a function to find the nth Fibonacci number using dynamic programming approach. The function should take an integer \`n\` as input and return the nth Fibonacci number in the sequence.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. Args: n (int): The position in the Fibonacci sequence to return. Returns: int: The nth Fibonacci number. if n <= 0: return \\"Invalid input\\" elif n == 1: return 0 elif n == 2: return 1 fib = [0] * n fib[0] = 0 fib[1] = 1 for i in range(2, n): fib[i] = fib[i-1] + fib[i-2] return fib[-1]"},{"question":"Write a function to build a dictionary where the keys are the characters in a string and the values are the counts of their occurrences in the string. How should I approach this problem?","solution":"def build_char_count(string): Builds a dictionary where the keys are characters in a string and the values are the counts of their occurrences in the string. Parameters: string (str): The input string Returns: dict: A dictionary with character counts char_count = {} for char in string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a function to check if a given integer x is a perfect square.","solution":"def is_perfect_square(x): Returns True if x is a perfect square, else returns False. if x < 0: return False sqrt_x = int(x**0.5) return sqrt_x * sqrt_x == x"},{"question":"Write a function to compute the sum of the first n natural numbers in Python without using a loop.","solution":"def sum_of_first_n(n): Returns the sum of the first n natural numbers. if n < 1: return 0 # Assuming non-positive integers should return 0 return n * (n + 1) // 2"},{"question":"Write a function to find the maximum sum of a subarray in a 2D array using Kadane’s algorithm.","solution":"def max_sum_subarray_2d(matrix): Returns the maximum sum of a subarray in a 2D array using Kadane's algorithm. if not matrix or not matrix[0]: return 0 def kadane(arr): max_sum = float('-inf') current_sum = 0 for x in arr: current_sum = max(x, current_sum + x) max_sum = max(max_sum, current_sum) return max_sum rows = len(matrix) cols = len(matrix[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a function to print the maximum and minimum values from a list of integers.","solution":"def find_min_max(numbers): Returns a tuple containing the minimum and maximum values from the list of integers. if not numbers: raise ValueError(\\"The list is empty\\") min_value = min(numbers) max_value = max(numbers) return (min_value, max_value)"},{"question":"Write a function to count the number of times a string appears in a given text.","solution":"def count_occurrences(text, substring): Returns the number of times the substring appears in the text. Parameters: text (str): The text in which to search for the substring. substring (str): The string to search for within the text. Returns: int: The number of times the substring appears in the text. if not text or not substring: return 0 count = 0 start = 0 while True: start = text.find(substring, start) if start == -1: break count += 1 start += len(substring) return count"},{"question":"Write a function to extract the distinct prime factors of an integer. For instance, for the number 13195, the prime factors are [5, 7, 13, 29].","solution":"def distinct_prime_factors(n): Returns a list of distinct prime factors of the given integer n. i = 2 factors = set() # Use a set to avoid duplicates while i * i <= n: while (n % i) == 0: factors.add(i) n //= i i += 1 if n > 1: factors.add(n) return list(factors)"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers. The function should have a time complexity of O(n) and should use Kadane's algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within a one-dimensional array of numbers using Kadane's algorithm. if not nums: return 0 current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Write a function to evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN).","solution":"def evaluate_rpn(tokens): Evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). :param tokens: List of strings, each string is either an operand or one of the operators +, -, *, / :return: The value of the expression. stack = [] for token in tokens: if token not in \\"+-*/\\": stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == '+': result = a + b elif token == '-': result = a - b elif token == '*': result = a * b elif token == '/': result = int(a / b) # Truncate towards zero as per the problem statement. stack.append(result) return stack[0]"},{"question":"Write a function to find the next smallest number with the same digits as the given number. If such a number exists, return it; otherwise, return -1. You can only use basic arithmetic operations, and you cannot modify the digits in any way other than rearranging them.","solution":"def next_smallest_same_digits(n): Finds the next smallest number with the same digits as the given number. If such a number does not exist, returns -1. digits = list(str(n)) length = len(digits) # Step 1: Find the rightmost digit that is larger than the digit next to it for i in range(length - 2, -1, -1): if digits[i] > digits[i + 1]: break else: return -1 # No such digit found means the digits are in ascending order # Step 2: Find the largest digit to the right of digits[i] that is smaller than digits[i] for j in range(length - 1, i, -1): if digits[j] < digits[i]: break # Step 3: Swap the found digits digits[i], digits[j] = digits[j], digits[i] # Step 4: Reverse the digits after position i to get the smallest permutation digits = digits[:i + 1] + sorted(digits[i + 1:], reverse=True) # Convert list of digits back to integer return int(\\"\\".join(digits))"},{"question":"Write a function to determine if an array has a majority element. A majority element is an element that appears more than n/2 times in an array of size n. Provide a code solution in Python.","solution":"def majority_element(nums): Determine if an array has a majority element. A majority element is an element that appears more than n/2 times in an array of size n. Arguments: nums -- List of integers. Returns: element -- The majority element if present, otherwise None. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 n = len(nums) for num, cnt in count.items(): if cnt > n // 2: return num return None"},{"question":"Write a function to remove all the odd numbers from a given list and return only the even numbers.","solution":"def remove_odds(numbers): Remove all odd numbers from the given list and return only the even numbers. Parameters: numbers (list): The list of numbers to filter. Returns: list: A list containing only the even numbers from the input list. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a function to determine the last word in a string. If the string is empty, return an empty string. If the last word does not end with a period, append a period at the end. If it does, append a question mark. Write a function that handles these cases correctly, even when the input string is a single word.","solution":"def determine_last_word(s): Returns the last word in the string \`s\` with a period appended if it doesn't already have one, or a question mark if it does. If the string is empty, returns an empty string. s = s.strip() if not s: return \\"\\" words = s.split() last_word = words[-1] if last_word.endswith(\\".\\"): last_word += \\"?\\" else: last_word += \\".\\" return last_word"},{"question":"Write a function to find the closest value to a target value in a binary search tree (BST). This function should return the node with the closest value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def closest_value(root, target): Find the closest value to the target value in a binary search tree (BST) closest = root.val node = root while node: # Check if current node's value is closer to target than current closest if abs(node.val - target) < abs(closest - target): closest = node.val # Decide whether to go left or right in the BST if target < node.val: node = node.left else: node = node.right return closest"},{"question":"Write a function to convert a string to a URL-friendly slug. The slug should only contain lowercase letters, digits, and hyphens, and hyphens should not be at the beginning or end of the string.","solution":"import re def string_to_slug(s): Converts a given string to a URL-friendly slug. The slug contains only lowercase letters, digits, and hyphens, and does not begin or end with a hyphen. # Convert to lowercase s = s.lower() # Replace all non-alphanumeric characters with hyphens s = re.sub(r'[^a-z0-9]+', '-', s) # Trim hyphens from the beginning and end s = s.strip('-') return s"},{"question":"Write a function to determine the maximum number of points on a graph that can form a straight line. Given a list of points in the form [(x1, y1), (x2, y2), ..., (xn, yn)], return the maximum number of points that lie on the same straight line.","solution":"from collections import defaultdict from math import gcd def maxPointsOnLine(points): Returns the maximum number of points that lie on the same straight line. Each point is represented as a tuple (x, y). if len(points) < 3: return len(points) def getSlope(p1, p2): dy = p2[1] - p1[1] dx = p2[0] - p1[0] if dx == 0: return ('inf', 0) g = gcd(dy, dx) slope = (dy // g, dx // g) return slope max_points = 0 for i in range(len(points)): slopes = defaultdict(int) same_points = 1 for j in range(i + 1, len(points)): if points[i] == points[j]: same_points += 1 else: slope = getSlope(points[i], points[j]) slopes[slope] += 1 current_max = same_points for count in slopes.values(): current_max = max(current_max, count + same_points) max_points = max(max_points, current_max) return max_points"},{"question":"Write a function to calculate the sum of all even numbers in an array of integers. Write this function in Python. Also, consider the case where the array might be empty or contain no even numbers. In such cases, your function should return 0.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in an array of integers. If the array is empty or contains no even numbers, returns 0. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function to solve the problem of finding the largest divisible subset of an array. The function should take an array of integers as input and return the size of the largest subset where every pair of elements (x, y) in the subset satisfies x % y == 0 or y % x == 0.","solution":"def largest_divisible_subset(nums): if not nums: return 0 nums.sort() dp = [1] * len(nums) max_size = 1 for i in range(1, len(nums)): for j in range(i): if nums[i] % nums[j] == 0: dp[i] = max(dp[i], dp[j] + 1) max_size = max(max_size, dp[i]) return max_size"},{"question":"Write a function to find the length of the longest common subsequence (LCS) between two strings using dynamic programming. The LCS is the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both strings.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings. n, m = len(s1), len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Write a function to generate a random number between two integers (inclusive). The function should not import any libraries besides the ones provided.","solution":"import random def generate_random_number(a, b): Returns a random integer between a and b (inclusive). return random.randint(a, b)"},{"question":"Write a function to calculate the sum of all even numbers between two given numbers. The function should include error handling for invalid inputs.","solution":"def sum_of_evens(start, end): Returns the sum of all even numbers between start and end, inclusive. Raises ValueError if start or end are not integers or if start is greater than end. if not isinstance(start, int) or not isinstance(end, int): raise ValueError(\\"Both start and end must be integers\\") if start > end: raise ValueError(\\"Start must be less than or equal to end\\") return sum(num for num in range(start, end + 1) if num % 2 == 0)"},{"question":"Write a function to reverse a string in Python. Here's a simple string: \`s = \\"Hello, World!\\"\`","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to find the minimum path sum in a grid using dynamic programming. The grid is represented as a 2D list of non-negative integers. The function should return the minimum path sum from the top-left corner to the bottom-right corner.","solution":"def min_path_sum(grid): Returns the minimum path sum in a grid (2D list of non-negative integers). if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) # Initialize the first row for col in range(1, cols): grid[0][col] += grid[0][col - 1] # Initialize the first column for row in range(1, rows): grid[row][0] += grid[row - 1][0] # Fill the rest of the grid with the minimum path sums for row in range(1, rows): for col in range(1, cols): grid[row][col] += min(grid[row - 1][col], grid[row][col - 1]) return grid[rows - 1][cols - 1]"},{"question":"Write a function to find all the prime numbers less than a given number N using the Sieve of Eratosthenes algorithm, and return them in a sorted list.","solution":"def sieve_of_eratosthenes(N): Returns all prime numbers less than the given number N using the Sieve of Eratosthenes algorithm. if N <= 2: return [] primes = [True] * N primes[0], primes[1] = False, False # 0 and 1 are not prime numbers p = 2 while p**2 < N: if primes[p]: for i in range(p**2, N, p): primes[i] = False p += 1 return [p for p in range(N) if primes[p]]"},{"question":"Write a function to reverse a string in Python. If the string is \\"Hello World\\", the function should return \\"dlroW olleH\\".","solution":"def reverse_string(s): Reverses the input string. :param s: Input string to be reversed :return: Reversed string return s[::-1]"},{"question":"Write a function to rearrange the elements of an array in such a way that even-indexed elements are smaller than the odd-indexed elements. The array can contain duplicate elements. However, the function should not use extra space (other than the smallest amount necessary for the operation). Your solution should ideally run in O(NlogN) time.","solution":"def rearrange_even_odd(arr): Rearranges the elements of an array such that even-indexed elements are smaller than odd-indexed elements. arr.sort() for i in range(1, len(arr), 2): if i+1 < len(arr): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped around. This is known as the circular subarray problem.","solution":"def max_subarray_sum_circular(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped around. This is known as the circular subarray problem. def kadane(arr): max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(nums) max_wrap = sum(nums) + kadane([-num for num in nums]) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a function to find the maximum element in an array using recursion. What are the conditions for the base case and recursive case in this problem?","solution":"def find_max(arr, n=None): Returns the maximum element in the array \`arr\` using recursion. Parameters: arr (list): List of numerical elements. n (int): Length of the array to be considered in recursion. Returns: int/float: The maximum element in the array. if n is None: n = len(arr) # Base case: if the array has only one element if n == 1: return arr[0] # Recursive case: compare the last element with the maximum of the rest else: return max(arr[n-1], find_max(arr, n-1))"},{"question":"Write a function to return the sum of the squares of the first n natural numbers. What is the mathematical formula being used in this function and how does it work?","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. The mathematical formula used is: sum = n * (n + 1) * (2n + 1) / 6 return n * (n + 1) * (2 * n + 1) // 6 # Using integer division for efficiency"},{"question":"Write a function to return the title case of a string in Python. Title case means that the first character of each word in the string is capitalized, and the remaining characters are in lowercase.","solution":"def to_title_case(s): Returns the title case of the given string. Parameters: s (str): The string to be converted to title case. Returns: str: The title-cased string. return s.title()"},{"question":"Write a function to convert decimal to binary. The function should take an integer as an input and return its binary representation as a string. The binary representation should be without the '0b' prefix.","solution":"def decimal_to_binary(n): Converts a decimal integer to its binary representation without '0b' prefix. Args: n (int): The decimal integer to convert. Returns: str: The binary representation of the input integer. return bin(n)[2:]"},{"question":"Write a function to calculate the highest product of a contiguous subarray within the given array.","solution":"def max_product_subarray(nums): Returns the highest product of a contiguous subarray within the given array. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function to return the two sum of a given number array with a target sum","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a function to multiply two matrices in Python. The matrices should be in the form of lists of lists (2D lists) where each inner list represents a row of the matrix.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Args: A (list of list of ints/floats): The first matrix. B (list of list of ints/floats): The second matrix. Returns: list of list of ints/floats: The result of the multiplication of A and B. # Number of rows in A rows_A = len(A) # Number of columns in A, and thus the number of rows in B cols_A = len(A[0]) # Number of columns in B cols_B = len(B[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to convert all the characters in a string to uppercase.","solution":"def to_uppercase(s): Converts all the characters in a string to uppercase. return s.upper()"},{"question":"Write a function to calculate the factorial of a given number using recursion. Then, write a function to calculate the sum of the factorial of numbers from 1 to n using memoization. Finally, create a test function to verify the correctness of the implementation.","solution":"def factorial(n, memo={}): Returns the factorial of n using recursion and memoization. if n in memo: return memo[n] if n <= 1: return 1 else: memo[n] = n * factorial(n-1, memo) return memo[n] def sum_of_factorials(n): Returns the sum of the factorials of numbers from 1 to n. memo = {} total = 0 for i in range(1, n+1): total += factorial(i, memo) return total"},{"question":"Write a function to find the longest common prefix between two strings in Python. The function should take two strings as input and return the longest common prefix.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix between two strings. prefix = \\"\\" # Find the minimum length between the two strings to avoid index out of range error min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] == str2[i]: prefix += str1[i] else: break return prefix"},{"question":"Write a function to read text from a file and return the frequency of each word in a dictionary. The function should ignore case sensitivity and consider only alphabetic characters as part of words.","solution":"import re from collections import defaultdict def word_frequencies(file_path): Reads text from a file and returns the frequency of each word in a dictionary. The function ignores case sensitivity and considers only alphabetic characters as part of words. Args: file_path (str): The path to the file to read from. Returns: dict: A dictionary with words as keys and their frequencies as values. frequencies = defaultdict(int) with open(file_path, 'r') as file: for line in file: words = re.findall(r'b[a-zA-Z]+b', line.lower()) for word in words: frequencies[word] += 1 return dict(frequencies)"},{"question":"Write a function to remove all instances of a specified value from an array.","solution":"def remove_element(arr, val): Removes all instances of val from the array arr. Parameters: arr (list): The input list of elements from which to remove instances of val. val: The value to be removed from the list. Returns: list: A new list with all instances of val removed. return [element for element in arr if element != val]"},{"question":"Write a function to calculate the factorial of a given number using recursion. Also, make sure to implement a mechanism for exception handling to manage negative inputs and non-integer inputs.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Handles negative and non-integer inputs. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to find the number of vowels in a given string. In this function, consider 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase) as vowels.","solution":"def count_vowels(s): Returns the number of vowels in the given string s. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels)"},{"question":"Write a function to add two numbers represented as strings. The function should take two strings, \`num1\` and \`num2\`, as input and return their sum as a string.","solution":"def add_strings(num1, num2): Returns the sum of two numbers represented as strings. # Initialize carry and result carry = 0 result = [] # Reverse both numbers to start addition from the least significant digit num1 = num1[::-1] num2 = num2[::-1] # Loop through both strings max_len = max(len(num1), len(num2)) for i in range(max_len): digit1 = int(num1[i]) if i < len(num1) else 0 digit2 = int(num2[i]) if i < len(num2) else 0 # Add digits along with the carry from the previous iteration total = digit1 + digit2 + carry carry = total // 10 result.append(total % 10) # If there is any carry left at the end, add it if carry: result.append(carry) # Reverse the result to get the final sum return ''.join(map(str, result[::-1]))"},{"question":"Write a function to compute the number of distinct pairs in an array where the difference between the two elements is a given value.","solution":"def count_pairs_with_difference(arr, k): Returns the number of distinct pairs (a, b) in the array where the absolute difference between a and b is k. Parameters: - arr: List[int], the list of integers - k: int, the target difference Returns: - int, the number of distinct pairs with the given difference if k < 0: return 0 count = 0 seen = set(arr) pairs = set() for num in arr: if (num + k) in seen and (num, num + k) not in pairs and (num + k, num) not in pairs: pairs.add((num, num + k)) count += 1 if (num - k) in seen and (num - k, num) not in pairs and (num, num - k) not in pairs: pairs.add((num - k, num)) count += 1 return count"},{"question":"Write a function to simulate the execution of a simple reversed Polish notation (RPN) expression calculator. RPN is a mathematical notation in which operators follow their operands. It is also known as postfix notation. For example, to perform the operation \`3 * 4 + 5\`, use \`3 4 * 5 +\`.","solution":"def rpn_calculator(expression): Simulates the execution of a simple reversed Polish notation (RPN) expression calculator. Parameters: expression (str): A string containing the RPN expression. Returns: int: The result of the RPN expression calculation. stack = [] tokens = expression.split() for token in tokens: if token.isdigit() or (token[0] == '-' and token[1:].isdigit()): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(int(a / b)) return stack[0]"},{"question":"Write a function to search for a target value in a rotated sorted array. The array could be rotated by an unknown pivot. Implement a function that checks each element by comparing with the target, which should have a time complexity of O(n).","solution":"def search_rotated_array(arr, target): Searches for the target value in a rotated sorted array. Args: arr (list of int): The rotated sorted array. target (int): The target value to search for. Returns: int: The index of the target value if found, otherwise -1. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Write a function to find the minimum element in an array without using built-in functions like \`min()\`, \`max()\`, etc., and also without using any sorting algorithms like \`sort()\`. Additionally, the function should handle large arrays efficiently.","solution":"def find_minimum(arr): Returns the minimum element in the array. if len(arr) == 0: raise ValueError(\\"Array is empty\\") min_element = arr[0] for element in arr[1:]: if element < min_element: min_element = element return min_element"},{"question":"Write a function to find the minimum path sum in a triangle. The path sum is the sum of all numbers along the path from the top to the base, where you can move to adjacent numbers on the row below.","solution":"def minimum_total(triangle): Find the minimum path sum in a triangle from top to bottom. :param triangle: List of lists representing the triangle :return: Minimum path sum # Start from the second to last row and move upwards for row in range(len(triangle) - 2, -1, -1): for col in range(len(triangle[row])): # Add the minimum of the two possible paths from the current cell triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1]) # The top element now contains the minimum path sum return triangle[0][0]"},{"question":"Write a function to calculate the Fibonacci series up to a given number.","solution":"def fibonacci(n): Returns a list containing the Fibonacci series up to a given number n (inclusive). if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return [0] fib_series = [0, 1] while True: next_fib = fib_series[-1] + fib_series[-2] if next_fib > n: break fib_series.append(next_fib) return fib_series"},{"question":"Write a function to find the maximum number of consecutive 1's in an array of 0's and 1's.","solution":"def find_max_consecutive_ones(nums): Returns the maximum number of consecutive 1's in the array nums. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Write a function to find the longest palindrome in a given string. The longest palindrome substring may contain repeated characters.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in the given string s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right if not s: return \\"\\" start, end = 0, 0 for i in range(len(s)): left1, right1 = expand_around_center(i, i) # Odd length palindromes left2, right2 = expand_around_center(i, i + 1) # Even length palindromes if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end]"},{"question":"Write a function to find the minimum window in a string which will contain all the characters of another string. For example, given s1 = \\"ADOBECODEBANC\\", s2 = \\"ABC\\", return the minimum window in s1 that contains all the characters of s2. If there is no such window in s1, return an empty string.","solution":"def min_window(s1, s2): from collections import Counter, defaultdict if not s1 or not s2: return \\"\\" dict_s2 = Counter(s2) dict_window = defaultdict(int) required = len(dict_s2) formed = 0 left, right = 0, 0 min_len = float('inf') min_window = (0, 0) while right < len(s1): char = s1[right] dict_window[char] += 1 if char in dict_s2 and dict_window[char] == dict_s2[char]: formed += 1 while left <= right and formed == required: char = s1[left] if right - left + 1 < min_len: min_len = right - left + 1 min_window = (left, right) dict_window[char] -= 1 if char in dict_s2 and dict_window[char] < dict_s2[char]: formed -= 1 left += 1 right += 1 l, r = min_window return s1[l:r + 1] if min_len != float('inf') else \\"\\""},{"question":"Write a function to return an integer number from a string.","solution":"def extract_integer_from_string(s): Extracts the first integer number from the given string. Returns None if no integer is found. Parameters: s (str): The input string from which to extract the integer. Returns: int: The extracted integer, or None if no integer is found. import re match = re.search(r'd+', s) return int(match.group()) if match else None"},{"question":"Write a function to sort a linked list in O(n log n) time complexity. One valid solution is to use the merge sort algorithm. Please provide a detailed explanation of the merge sort algorithm for linked lists and a step-by-step implementation of the merge sort algorithm for linked lists in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort_linked_list(head): if not head or not head.next: return head # Step 1: Split the linked list into two halves def split(head): slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None return head, mid # Step 2: Merge two sorted linked lists def merge(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 if l1 else l2 return dummy.next # Step 3: Recursive merge sort left, right = split(head) left = merge_sort_linked_list(left) right = merge_sort_linked_list(right) return merge(left, right)"},{"question":"Write a function to reverse a given string in Python. The function should handle both single words and multiple words, and it should not reverse the spaces.","solution":"def reverse_string(s): Reverse the given string, preserving spaces. Parameters: s (str): the string to be reversed. Returns: str: the reversed string with spaces preserved. # Create a list to hold the characters of the original string chars = list(s) # Create a list to hold only the non-space characters non_space_chars = [c for c in chars if c != ' '] # Reverse the list of non-space characters non_space_chars.reverse() # Iterator over the reversed non-space characters it = iter(non_space_chars) # Replace the characters in the original string with the reversed non-space characters reversed_chars = [next(it) if c != ' ' else ' ' for c in chars] return ''.join(reversed_chars)"},{"question":"Write a function to generate a list of all prime numbers less than a given number \`n\` using the Sieve of Eratosthenes algorithm. The function should be efficient and handle large inputs up to \`n = 10^6\`.","solution":"def sieve_of_eratosthenes(n): Generates a list of all prime numbers less than the given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit (exclusive) for generating prime numbers. Returns: list: A list of all prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"Write a function to check if a given list contains any duplicate numbers. The function should return \`True\` if there are duplicates, and \`False\` otherwise. The solution should be optimized for time complexity.","solution":"def contains_duplicates(nums): Check if a given list contains any duplicate numbers. Args: nums: List of integers. Returns: True if there are duplicates, False otherwise. return len(nums) != len(set(nums))"},{"question":"Write a function to add two integers in Python.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to validate if a given string is a valid date in ISO 8601 format. The valid date formats can be either \\"YYYY-MM-DD\\" or \\"YYYY-MM-DDTHH:MM:SSZ\\" or \\"YYYY-MM-DDTHH:MM:SS+HH:MM\\". The function should return True if the date is valid and False otherwise.","solution":"import re from datetime import datetime def is_valid_iso8601(date_str): Validates if the given string is a valid date in ISO 8601 format. The valid formats are: - YYYY-MM-DD - YYYY-MM-DDTHH:MM:SSZ - YYYY-MM-DDTHH:MM:SS+HH:MM Args: date_str (str): The date string to validate. Returns: bool: True if the date is valid, False otherwise. # Define the regex pattern for ISO 8601 pattern = re.compile( r'^(d{4}-d{2}-d{2})|' r'^(d{4}-d{2}-d{2}Td{2}:d{2}:d{2}Z)|' r'^(d{4}-d{2}-d{2}Td{2}:d{2}:d{2}[+-]d{2}:d{2})' ) # First check if the date string matches the regex pattern if not pattern.match(date_str): return False # Validate YYYY-MM-DD format try: if re.match(r'^d{4}-d{2}-d{2}', date_str): datetime.strptime(date_str, '%Y-%m-%d') elif re.match(r'^d{4}-d{2}-d{2}Td{2}:d{2}:d{2}Z', date_str): datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%SZ') elif re.match(r'^d{4}-d{2}-d{2}Td{2}:d{2}:d{2}[+-]d{2}:d{2}', date_str): datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%S%z') except ValueError: return False return True"},{"question":"Write a function to reverse a linked list in Python. The function should take a single argument, \`head\`, which is the head of the linked list. The linked list is defined by a \`Node\` class with \`value\` and \`next\` attributes. If the list is empty (\`head\` is \`None\`), the function should return \`None\`.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. Args: head (Node): Head of the linked list. Returns: Node: New head of the reversed linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to generate and print a Fibonacci sequence up to a given number of terms. The function should also check if the given number is a Fibonacci number.","solution":"def fibonacci_sequence(terms): Generates a Fibonacci sequence up to the given number of terms and checks if the given number is a Fibonacci number. Args: terms (int): Number of terms up to which the Fibonacci sequence should be generated. Returns: list: A list containing the Fibonacci sequence up to the specified number of terms. bool: A boolean value indicating if the number of terms is a Fibonacci number. sequence = [] a, b = 0, 1 while len(sequence) < terms: sequence.append(a) a, b = b, a + b # Check if the number of terms is a Fibonacci number def is_fibonacci(n): x, y = 0, 1 while y < n: x, y = y, x + y return n == y or n == 0 return sequence, is_fibonacci(terms) result = fibonacci_sequence(10) print(result)"},{"question":"Write a function to determine if a given number is even or odd. The function will receive an integer as input.","solution":"def is_even_or_odd(number): Determines if a given number is even or odd. Args: number (int): The integer to check. Returns: str: \\"even\\" if the number is even, \\"odd\\" if the number is odd. if number % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Write a function to implement a stack using a list in Python. The function should include push, pop, peek, and is_empty methods. Additionally, write a function to test the stack implementation.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Pushes an item onto the stack. self.items.append(item) def pop(self): Removes and returns the top item of the stack. if not self.is_empty(): return self.items.pop() else: raise IndexError(\\"pop from empty stack\\") def peek(self): Returns the top item of the stack without removing it. if not self.is_empty(): return self.items[-1] else: raise IndexError(\\"peek from empty stack\\") def is_empty(self): Checks if the stack is empty. return len(self.items) == 0"},{"question":"Write a function to generate the longest palindrome by removing at most one character from the given string. If the string is already a palindrome, no character should be removed. The function should return the length of the longest palindrome after at most one removal.","solution":"def longest_palindrome_after_removal(s): Returns the length of the longest palindrome that can be obtained by removing at most one character from the given string. def is_palindrome_substring(s, left, right): Helper function to check if substring s[left:right] is a palindrome. while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True n = len(s) if is_palindrome_substring(s, 0, n-1): return n # The string is already a palindrome for i in range(n): if is_palindrome_substring(s, 0, i-1) and is_palindrome_substring(s, i+1, n-1): return n - 1 return n - 1 # If no better solution found, return length after removing one character"},{"question":"Write a function to calculate the sum of all divisors of a number 'n' excluding 'n' itself. If 'n' is a prime number, return the number 1, as the only divisor other than itself is 1.","solution":"def sum_of_divisors_excluding_n(n): Returns the sum of all divisors of 'n' excluding 'n' itself. If 'n' is a prime number, return 1. if n < 2: return 0 # edge case for n < 2 (1 has no divisors other than itself) sum_divisors = 0 for i in range(1, n): if n % i == 0: sum_divisors += i # Check if n is a prime number if sum_divisors == 1: return 1 return sum_divisors"},{"question":"Write a function to find the maximum sum of a subarray within a given array of integers. This subarray should not contain consecutive elements from the original array.","solution":"def max_sum_non_consecutive(arr): Returns the maximum sum of a subarray where no two elements are consecutive. :param arr: List of integers :return: Maximum sum of a subarray with no consecutive elements if not arr: return 0 inclusive = 0 exclusive = 0 for num in arr: new_exclusive = max(exclusive, inclusive) inclusive = exclusive + num exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"Write a function to return a list of words in a string that have at least a specified number of characters.","solution":"def words_with_min_length(s, min_length): Returns a list of words in the string 's' that have at least 'min_length' characters. Parameters: - s (str): The input string. - min_length (int): The minimum length a word must have to be included in the output list. Returns: - List[str]: A list of words with at least 'min_length' characters. words = s.split() return [word for word in words if len(word) >= min_length]"},{"question":"Write a function to return the sum of all positive numbers in an array.","solution":"def sum_of_positives(arr): Returns the sum of all positive numbers in the array. :param arr: List of integers :return: Sum of all positive integers in the list return sum(x for x in arr if x > 0)"},{"question":"Write a function to calculate the factorial of a number using recursion. In Python, implement a function named \`calculate_factorial\`. This function will take a non-negative integer as its argument and return the factorial of that number. The factorial of a number n, denoted n!, is the product of all positive integers less than or equal to n. For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. If the input number is 0, the function should return 1, as 0! is defined as 1.","solution":"def calculate_factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n in (0, 1): return 1 return n * calculate_factorial(n - 1)"},{"question":"Write a function to add two numbers. The function should take two arguments, \`a\` and \`b\`, and return their sum.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to reverse a given integer. If reversing the integer causes it to overflow (i.e., it goes beyond the 32-bit signed integer range [-231, 231 - 1]), return 0.","solution":"def reverse_integer(x): Reverse the digits of the given integer x. If the result overflows 32-bit signed integer range, return 0. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = -1 if x < 0 else 1 x_abs = abs(x) reversed_x = 0 while x_abs != 0: pop = x_abs % 10 x_abs //= 10 # Check for overflow if (reversed_x > INT_MAX // 10) or (reversed_x == INT_MAX // 10 and pop > INT_MAX % 10): return 0 reversed_x = reversed_x * 10 + pop return sign * reversed_x"},{"question":"Write a function to find the shortest path in a grid using the Breadth-First Search (BFS) algorithm. The grid is represented as a 2D array, where 0 represents an open path and 1 represents an obstacle. The function should return the length of the shortest path from the top-left corner to the bottom-right corner. If there is no path, the function should return -1. The grid size can be up to 100x100.","solution":"from collections import deque def shortest_path_bfs(grid): Finds the shortest path in a grid using BFS algorithm. Parameters: grid (list of list of int): 2D list representing the grid. Returns: int: Length of shortest path from top-left to bottom-right corner or -1 if no path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 1)]) # (row, col, distance) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0: grid[nr][nc] = 1 # mark as visited queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a function to find the maximum subarray sum in a given list of integers.","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum in a given list of integers using Kadane's Algorithm. if not nums: return 0 # return 0 for empty list current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to calculate the factorial of a number using either recursion or iteration.","solution":"def factorial(n): Returns the factorial of the given number n. Parameters: n (int): The number to calculate the factorial of. Must be a non-negative integer. Returns: int: The factorial of the number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the sum of all prime numbers within a given range. The function should take two parameters: the start and end of the range (inclusive). Additionally, write a main function to test your prime sum function with specific test cases.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_primes_in_range(start, end): Returns the sum of all prime numbers in the range from start to end (inclusive). prime_sum = 0 for num in range(start, end + 1): if is_prime(num): prime_sum += num return prime_sum"},{"question":"Write a function to calculate the area of a circle given its radius and return the area rounded to 2 decimal places. Assume the radius will always be a positive number.","solution":"import math def circle_area(radius): Calculates the area of a circle given its radius. The result is rounded to 2 decimal places. return round(math.pi * radius ** 2, 2)"},{"question":"Write a function to implement LRU Cache.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity): Initializes the LRU Cache with a given capacity. self.capacity = capacity self.cache = OrderedDict() def get(self, key): Returns the value of the key if present, otherwise returns -1. Moves the accessed key to the end to show that it was recently used. if key not in self.cache: return -1 value = self.cache.pop(key) self.cache[key] = value return value def put(self, key, value): Inserts a key-value pair into the cache. If the cache exceeds its capacity, it removes the least recently used item. Moves the newly added or updated key to the end to show that it was recently used. if key in self.cache: self.cache.pop(key) elif len(self.cache) >= self.capacity: self.cache.popitem(last=False) self.cache[key] = value"},{"question":"Write a function to calculate the factorial of a given number. The function should handle both positive and negative numbers, raising appropriate exceptions for invalid inputs. The factorial of a number is the product of all positive integers less than or equal to that number.","solution":"def factorial(n): Returns the factorial of a given number. Raises ValueError for negative numbers and TypeError for non-integer inputs. if not isinstance(n, int): raise TypeError(\\"The input must be an integer\\") if n < 0: raise ValueError(\\"The factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find all of the odd or even numbers within a provided list and return them sorted in ascending order. However, you need to implement the functionality using an iterative approach, not using any built-in sort function.","solution":"def find_sorted_odd_even(numbers, odd=True): Returns a sorted list of odd or even numbers from the provided list. Parameters: - numbers (list of int): The list of numbers to filter and sort. - odd (bool): If True, finds odd numbers; if False, finds even numbers. Returns: - list of int: A sorted list of the filtered numbers. # Filter odd or even numbers first if odd: filtered_numbers = [num for num in numbers if num % 2 != 0] else: filtered_numbers = [num for num in numbers if num % 2 == 0] # Implementing an iterative bubble sort n = len(filtered_numbers) for i in range(n): for j in range(0, n-i-1): if filtered_numbers[j] > filtered_numbers[j+1]: filtered_numbers[j], filtered_numbers[j+1] = filtered_numbers[j+1], filtered_numbers[j] return filtered_numbers"},{"question":"Write a function to split an array into two parts based on a specified index. The first part should contain elements from the start of the array up to (but not including) the specified index, and the second part should contain the elements from the specified index to the end of the array.","solution":"def split_array(arr, index): Splits the array into two parts based on the specified index. Parameters: arr (list): The list of elements to be split. index (int): The index at which to split the array. Returns: tuple: A tuple containing the two parts of the array. return arr[:index], arr[index:]"},{"question":"Write a function to find the two distinct numbers in an array that appear only once while all other numbers appear twice.","solution":"def find_two_single_numbers(arr): # XOR all the elements to find XOR of two single numbers xor_result = 0 for num in arr: xor_result ^= num # Find a rightmost set bit of xor_result (This will be different for the two unique numbers) rightmost_set_bit = xor_result & -xor_result # Divide the numbers into two groups and XOR separately num1, num2 = 0, 0 for num in arr: if num & rightmost_set_bit: num1 ^= num else: num2 ^= num return num1, num2"},{"question":"Write a function to calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid with r rows and c columns. Each step you can either move down or right.","solution":"def unique_paths(r, c): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid with r rows and c columns. dp = [[1] * c for _ in range(r)] for i in range(1, r): for j in range(1, c): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[r-1][c-1]"},{"question":"Write a function to validate if a given string is a valid parentheses expression. The string consists only of '(', ')', '{', '}', '[' and ']'. The function should return \`True\` if the string is a valid parentheses expression, otherwise return \`False\`.","solution":"def is_valid_parentheses(s): Validates if the given string is a valid parentheses expression. stack = [] matching_parentheses = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses: if stack == [] or stack.pop() != matching_parentheses[char]: return False else: return False return stack == []"},{"question":"Write a function to reverse the letters in each word of a given string without reversing the words.","solution":"def reverse_letters_in_words(input_string): Reverses the letters in each word of a given string without reversing the words. Args: input_string (str): The input string. Returns: str: The modified string with letters in each word reversed. words = input_string.split(' ') reversed_words = [''.join(reversed(word)) for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the sum of all natural numbers from 1 to n. The function should be efficient and should work for any positive integer n. Use recursion to solve the problem.","solution":"def sum_natural_numbers(n): Returns the sum of all natural numbers from 1 to n using recursion. if n == 1: return 1 else: return n + sum_natural_numbers(n - 1)"},{"question":"Write a function to find the minimum number of enclosing rectangles needed to cover a given set of points in a 2D plane. **Note:** Each rectangle's edges are parallel to the axes. The function should take two lists as input, where the first list contains the x-coordinates and the second list contains the y-coordinates of the points. The function should return the minimum number of rectangles required.","solution":"def min_enclosing_rectangles(x_coords, y_coords): Returns the minimum number of enclosing rectangles needed to cover a given set of points in a 2D plane. Each rectangle's edges are parallel to the axes. Parameters: x_coords (list of int): List of x-coordinates of the points. y_coords (list of int): List of y-coordinates of the points. Returns: int: The minimum number of rectangles required. if not x_coords or not y_coords or len(x_coords) != len(y_coords): return 0 x_min, x_max = min(x_coords), max(x_coords) y_min, y_max = min(y_coords), max(y_coords) # One rectangle can always cover all points if there's at least one point. return 1"},{"question":"Write a function to determine whether an array of integers is sorted in either ascending or descending order.","solution":"def is_sorted(arr): Determines whether an array of integers is sorted in either ascending or descending order. :param arr: List[int], an array of integers :return: bool, True if the array is sorted in either ascending or descending order, False otherwise if len(arr) <= 1: return True is_ascending = all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) is_descending = all(arr[i] >= arr[i+1] for i in range(len(arr)-1)) return is_ascending or is_descending"},{"question":"Write a function to traverse a binary tree in a level order and return the result as a list of lists, where each sublist represents a level in the tree. Also, return the total number of nodes in the tree, the maximum depth of the tree, and the maximum width of the tree.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): if not root: return [], 0, 0, 0 result = [] queue = deque([root]) total_nodes = 0 max_depth = 0 max_width = 0 while queue: level_size = len(queue) max_width = max(max_width, level_size) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) total_nodes += 1 if node.left: queue.append(node.left) if node.right: queue.append(node.right) max_depth += 1 result.append(current_level) return result, total_nodes, max_depth, max_width # Example Usage # root = TreeNode(1) # root.left = TreeNode(2) # root.right = TreeNode(3) # root.left.left = TreeNode(4) # root.left.right = TreeNode(5) # root.right.right = TreeNode(6) # tree_result = level_order_traversal(root) # print(tree_result)"},{"question":"Write a function to calculate the number of unique characters in a string, considering both uppercase and lowercase as distinct characters.","solution":"def unique_characters_count(s): Returns the number of unique characters in the string s. Uppercase and lowercase characters are considered distinct. return len(set(s))"},{"question":"Write a function to rotate an array by a given number of positions. The function should take two arguments: the array to be rotated and the number of positions to rotate it. The rotation should be to the right. If the number of positions exceeds the length of the array, the function should handle it gracefully by rotating only the remainder after division by the array's length.","solution":"def rotate_array(arr, positions): Rotates the array to the right by the given number of positions. Parameters: arr (list): The array to be rotated. positions (int): The number of positions to rotate the array. Returns: list: The rotated array. n = len(arr) if n == 0: return arr # Return the array as is if it's empty positions = positions % n # Handle positions greater than array's length return arr[-positions:] + arr[:-positions]"},{"question":"Write a function to sort a list of integers in ascending order using the bubble sort algorithm. Ensure the function is efficient and handles duplicates correctly.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. Parameters: arr (list): A list of integers to sort. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): swapped = False for j in range(n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Write a function to remove all instances of a given string \`substring\` from \`text\`. The function should return the resulting string after all instances have been removed.","solution":"def remove_substring(text, substring): Removes all instances of 'substring' from 'text' and returns the resulting string. Parameters: text (str): The original string. substring (str): The substring to be removed. Returns: str: The string after all instances of 'substring' have been removed. return text.replace(substring, \\"\\")"},{"question":"Write a function to calculate the sum of all numbers in an array that are divisible by a given divisor.","solution":"def sum_divisible_by(arr, divisor): Returns the sum of all numbers in the array that are divisible by the given divisor. :param arr: List of integers :param divisor: Integer divisor :return: Integer sum return sum(num for num in arr if num % divisor == 0)"},{"question":"Write a function to return minimum length subarray which sum equals to target.","solution":"def min_length_subarray_sum(nums, target): Returns the minimum length subarray of \`nums\` which sums to \`target\`. If no such subarray exists, returns 0. left = 0 current_sum = 0 min_length = float('inf') for right in range(len(nums)): current_sum += nums[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float('inf') else 0"},{"question":"Write a function to traverse and modify a tree structure. The tree is represented as a list of parent-child relationships. Each node has a unique identifier, and each parent can have multiple children. The function should traverse the tree and modify the children of each node to match a given template. The template is a dictionary where keys are the identifiers of nodes and values are the identifiers of their new parent nodes. The function should return the modified tree structure as a list of tuples (node_id, parent_id, children).","solution":"def modify_tree(tree, template): Modify the tree structure based on the given template. Args: tree (list of tuples): Initial tree structure represented as (node_id, parent_id, children). template (dict): A dictionary where keys are node identifiers and values are their new parent identifiers. Returns: list of tuples: Modified tree structure represented as (node_id, parent_id, children). # Build lookup for existing nodes node_lookup = {node_id: (parent_id, children) for node_id, parent_id, children in tree} # Apply the template to modify parent-child relationships for node_id, new_parent_id in template.items(): if node_id in node_lookup: _, children = node_lookup[node_id] node_lookup[node_id] = (new_parent_id, children) result = [(node_id, parent_id, children) for node_id, (parent_id, children) in node_lookup.items()] return result"},{"question":"Write a function to detect a Hamiltonian Path in a Graph. A Hamiltonian Path is a path in a graph that visits each vertex exactly once. Your function should take a list of adjacency lists representing a graph and return True if a Hamiltonian Path exists, and False otherwise.","solution":"def hamiltonian_path_exists(graph): Determines if a Hamiltonian Path exists in the given graph. :param graph: list of adjacency lists representing the graph :return: True if there is a Hamiltonian Path, else False def backtrack(current_vertex, visited, path_length): if path_length == len(graph): return True # All vertices are visited for neighbor in graph[current_vertex]: if not visited[neighbor]: visited[neighbor] = True if backtrack(neighbor, visited, path_length + 1): return True visited[neighbor] = False return False for vertex in range(len(graph)): visited = [False] * len(graph) visited[vertex] = True if backtrack(vertex, visited, 1): return True return False"},{"question":"Write a function to traverse a given matrix (2D array) in a spiral order. The function should return the elements of the matrix in a list, maintaining the spiral order starting from the top-left corner and moving in a clockwise direction.","solution":"def spiral_order(matrix): Given a 2D array (matrix), return the elements of the matrix in spiral order starting from the top-left corner and moving in a clockwise direction. result = [] if not matrix: return result top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Write a function to reverse a string in Python. You should reverse the string by characters, not words.","solution":"def reverse_string(s): Returns the reverse of the input string. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to check if a given number is a Fibonacci number using dynamic programming.","solution":"def is_fibonacci_number(n): Checks if the given number is a Fibonacci number. :param n: int, the number to check :return: bool, True if n is a Fibonacci number, False otherwise if n < 0: return False if n == 0 or n == 1: return True # Initialize the first two Fibonacci numbers a, b = 0, 1 while b < n: a, b = b, a + b return b == n"},{"question":"Write a function to copy a binary tree. The function should take the root of the original tree as input and return the root of the copied tree.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def copy_tree(root): Creates a copy of the binary tree. :param TreeNode root: The root of the binary tree to copy. :return TreeNode: The root of the copied binary tree. if not root: return None new_root = TreeNode(root.val) new_root.left = copy_tree(root.left) new_root.right = copy_tree(root.right) return new_root"},{"question":"Write a function to validate if a string contains only letters, digits, and underscores. It should return \`True\` if the string meets the criteria, otherwise \`False\`.","solution":"import re def validate_string(s): Returns True if the string contains only letters, digits, and underscores. Otherwise, returns False. return bool(re.match('^[a-zA-Z0-9_]+', s))"},{"question":"Write a function to print the elements of a singly linked list in reverse order. The function should take the head of the linked list as a parameter and should not use any additional data structures like arrays, vectors, or stacks.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def print_reverse_linked_list(head): Prints the elements of a singly linked list in reverse order. def reverse_print(node): if node is not None: reverse_print(node.next) print(node.val) reverse_print(head)"},{"question":"Write a function to calculate the chess queen's attack moves on a standard 8x8 chessboard. The function should take the current position of the queen as a tuple (row, column) and return a list of tuples representing all the possible attack positions for the queen.","solution":"def queen_attack_positions(position): Calculate all the positions that a queen can attack on a standard 8x8 chessboard. :param position: A tuple (row, column) representing the current position of the queen. :return: A list of tuples representing all possible attack positions for the queen. row, col = position if not (1 <= row <= 8 and 1 <= col <= 8): raise ValueError(\\"Position must be within the bounds of an 8x8 chessboard.\\") attack_positions = [] # Horizontal and Vertical moves for i in range(1, 9): if i != row: attack_positions.append((i, col)) # vertical moves if i != col: attack_positions.append((row, i)) # horizontal moves # Diagonal moves for i in range(1, 9): if i != 0: # Top-right diagonal if row + i <= 8 and col + i <= 8: attack_positions.append((row + i, col + i)) # Top-left diagonal if row + i <= 8 and col - i > 0: attack_positions.append((row + i, col - i)) # Bottom-right diagonal if row - i > 0 and col + i <= 8: attack_positions.append((row - i, col + i)) # Bottom-left diagonal if row - i > 0 and col - i > 0: attack_positions.append((row - i, col - i)) return attack_positions"},{"question":"Write a function to calculate the sum of all positive integers less than a given number n.","solution":"def sum_of_positives_below(n): Returns the sum of all positive integers less than a given number n. :param n: integer :return: sum of all positive integers less than n return sum(range(1, n))"},{"question":"Write a function to find the partition point of a given array \`nums\` and a target value \`target\`. The partition point is defined as the index where all elements to the left of it are less than or equal to the target, and all elements to the right are greater than the target. If no such point exists, return -1.","solution":"def find_partition_point(nums, target): Returns the partition point of the given array nums with respect to target. for i in range(len(nums)): if nums[i] > target: if all(x <= target for x in nums[:i]) and all(x > target for x in nums[i:]): return i return -1"},{"question":"Write a function to sort a list of intervals by their start times and ensure that intervals that overlap are merged. For example, given the intervals [(1, 3), (2, 6), (8, 10), (15, 18)], the function should return [(1, 6), (8, 10), (15, 18)] after merging the overlapping intervals.","solution":"def merge_intervals(intervals): Given a list of intervals [start, end], merge the intervals that overlap and return the list of merged intervals sorted by their start times. Intervals are considered overlapping if the start of one interval is less than or equal to the end of another. Args: intervals (List[Tuple[int, int]]): A list of intervals [start, end]. Returns: List[Tuple[int, int]]: A list of merged intervals sorted by their start times. if not intervals: return [] # First we sort the intervals by their start time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] if current[0] <= last_merged[1]: # check if there is an overlap merged_intervals[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"Write a function to find the largest number in a list without using the built-in \`max()\` function.","solution":"def find_largest_number(lst): Returns the largest number in a list without using the built-in max() function. if not lst: raise ValueError(\\"The list is empty\\") largest = lst[0] for number in lst[1:]: if number > largest: largest = number return largest"},{"question":"Write a function to reverse the order of words in a given sentence. The words in the sentence are separated by spaces. Each word consists of English alphabetic characters. The function should preserve the original case of each letter.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): A sentence with words separated by spaces. Returns: str: A sentence with the order of words reversed. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Write a function to reverse a string in Python. There are multiple ways to do it. Here, please provide a different approach. Use list slicing along with the \`join\` function to reverse the string.","solution":"def reverse_string(s): Reverses the given string using list slicing and the join function. return ''.join(s[::-1])"},{"question":"Write a function to sort an array of strings containing only two types of characters, 'X' and 'O'. The function should sort the array such that all 'O's come first and all 'X's come last, maintaining relative order among 'O's and 'X's. The function should achieve this sorting in O(n) time complexity and O(1) space complexity.","solution":"def sort_XO(arr): Sort the array so that all 'O's come before all 'X's. Maintain the relative order among 'O's and 'X's. # Initialize two pointers left = 0 right = len(arr) - 1 # Iterate until the two pointers meet while left < right: # Move left pointer to the right as long as it points to 'O' while left < right and arr[left] == 'O': left += 1 # Move right pointer to the left as long as it points to 'X' while left < right and arr[right] == 'X': right -= 1 # If left is less than right, swap the elements at left and right if left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function to calculate the total cost of products in an e-commerce scenario. The function should handle multiple products and apply discounts if applicable.","solution":"def calculate_total_cost(products, discount=0): Calculate the total cost of products, applying a discount if provided. Args: products (list): List of tuples where each tuple contains the price and quantity (price, quantity). discount (float): Discount to be applied on the total cost (default is 0). Returns: float: The total cost after applying the discount. total_cost = sum(price * quantity for price, quantity in products) total_cost_after_discount = total_cost * (1 - discount) return total_cost_after_discount"},{"question":"Write a function to find the duplicate number in an array of integers where each integer is between 1 and n (inclusive), and there is only one duplicate number. The function should use O(n) time complexity and O(1) extra space.","solution":"def find_duplicate(nums): Finds the duplicate number in an array of integers where each integer is between 1 and n (inclusive), and there is only one duplicate number. This function uses O(n) time complexity and O(1) extra space. # Using the Tortoise and Hare (Cycle Detection) algorithm slow = nums[0] fast = nums[0] # Phase 1: Finding the intersection point of the two runners. while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Finding the entrance to the cycle. slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Write a function to implement a merge sort algorithm.","solution":"def merge_sort(arr): Sorts an array of numbers using the merge sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. sorted_array = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_array.append(left[left_index]) left_index += 1 else: sorted_array.append(right[right_index]) right_index += 1 sorted_array.extend(left[left_index:]) sorted_array.extend(right[right_index:]) return sorted_array"},{"question":"Write a function to calculate the product of an array of integers using recursion.","solution":"def product_of_array(arr): Returns the product of an array of integers using recursion. if len(arr) == 0: return 1 return arr[0] * product_of_array(arr[1:])"},{"question":"Write a function to reverse a string in Python without using slicing. Additionally, handle cases where the input could be a number or a non-string type.","solution":"def reverse_string(input_value): Reverses a given string without using slicing. If the input is not a string, it converts it to a string first. if not isinstance(input_value, str): input_value = str(input_value) reversed_str = \\"\\" for char in input_value: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to reverse a singly linked list. Implement the function in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a singly linked list. :param head: ListNode, the head of the singly linked list. :return: ListNode, the new head of the reversed singly linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to create a directed acyclic graph (DAG) and topologically sort the nodes of that graph. Implement using Python.","solution":"from collections import defaultdict, deque class Graph: def __init__(self, vertices): self.graph = defaultdict(list) self.V = vertices def add_edge(self, u, v): self.graph[u].append(v) def topological_sort_util(self, v, visited, stack): visited[v] = True for i in self.graph[v]: if not visited[i]: self.topological_sort_util(i, visited, stack) stack.append(v) def topological_sort(self): visited = [False] * self.V stack = [] for i in range(self.V): if not visited[i]: self.topological_sort_util(i, visited, stack) stack.reverse() return stack # Usage: # g = Graph(6) # g.add_edge(5, 2) # g.add_edge(5, 0) # g.add_edge(4, 0) # g.add_edge(4, 1) # g.add_edge(2, 3) # g.add_edge(3, 1) # order = g.topological_sort() # print(order)"},{"question":"Write a function to simulate a vending machine that accepts coins and dispenses drinks. The vending machine should support adding coins, removing coins, and dispensing drinks. The coins accepted are quarters, dimes, and nickels. The drinks available are cola, water, and lemonade. The prices of the drinks are cola: 1.50, water: 1.00, and lemonade: 1.25. The vending machine should also keep track of the total revenue and the number of each drink sold.","solution":"class VendingMachine: def __init__(self): self.coins = {'quarters': 0, 'dimes': 0, 'nickels': 0} self.drinks = {'cola': 1.50, 'water': 1.00, 'lemonade': 1.25} self.revenue = 0.0 self.drinks_sold = {'cola': 0, 'water': 0, 'lemonade': 0} def add_coins(self, quarters=0, dimes=0, nickels=0): self.coins['quarters'] += quarters self.coins['dimes'] += dimes self.coins['nickels'] += nickels def remove_coins(self): total_amount = self.get_total_amount() self.coins = {'quarters': 0, 'dimes': 0, 'nickels': 0} return total_amount def get_total_amount(self): total = (self.coins['quarters'] * 0.25 + self.coins['dimes'] * 0.10 + self.coins['nickels'] * 0.05) return total def dispense_drink(self, drink_name): if drink_name not in self.drinks: raise ValueError(\\"Drink not available\\") total_amount = self.get_total_amount() drink_price = self.drinks[drink_name] if total_amount < drink_price: raise ValueError(\\"Insufficient funds\\") self.revenue += drink_price self.drinks_sold[drink_name] += 1 self.remove_coins() return f\\"Dispensing {drink_name}\\""},{"question":"Write a function to reverse a linked list without creating any new nodes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list. Args: head (ListNode): The head of the linked list to reverse. Returns: ListNode: The new head of the reversed linked list. prev = None current = head while current: next_node = current.next # Store next node current.next = prev # Reverse the link prev = current # Move prev to current node current = next_node # Move to the next node return prev"},{"question":"Write a function to find the total number of even numbers in a given list of integers.","solution":"def count_even_numbers(numbers): Returns the total number of even numbers in the given list of integers. return sum(1 for number in numbers if number % 2 == 0)"},{"question":"Write a function to find the maximum difference between two elements in an array such that the larger element appears after the smaller element.","solution":"def maximum_difference(arr): Finds the maximum difference between two elements in the array such that the larger element appears after the smaller element. Parameters: arr (list): A list of integers. Returns: int: The maximum difference. if not arr or len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a function to determine if a string is a valid email address. The function should consider the standard format of an email address to be a sequence of alphanumeric characters, followed by an '@' symbol, then more alphanumeric characters, a period, and finally 2-4 alphabetic characters.","solution":"import re def is_valid_email(email): Returns True if the email is in a valid format, otherwise False. pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z]{2,4}' return re.match(pattern, email) is not None"},{"question":"Write a function to construct a directed graph from an array of directed edges and then perform a Depth-First Search (DFS) starting from a given source vertex while handling unordered and duplicated edges.","solution":"def construct_graph(edges): Constructs a directed graph from an array of directed edges. Handles unordered and duplicate edges. :param edges: List of tuples representing directed edges :return: Dictionary representation of graph graph = {} for (src, dst) in edges: if src != dst: if src not in graph: graph[src] = set() graph[src].add(dst) return graph def dfs(graph, start, visited=None): Performs a Depth-First Search (DFS) starting from a given source vertex. :param graph: Dictionary representation of graph :param start: Starting vertex for DFS :param visited: Set to keep track of visited nodes :return: List of nodes in the order they were visited if visited is None: visited = set() visited.add(start) order = [start] if start in graph: for neighbor in graph[start]: if neighbor not in visited: order.extend(dfs(graph, neighbor, visited)) return order"},{"question":"Write a function to check if a given number is a power of three. The function should return \`True\` if the number is a power of three, and \`False\` otherwise. A number is a power of three if it can be expressed as (3^k) for some integer (k).","solution":"def is_power_of_three(n): Returns True if the given number n is a power of three, otherwise False. if n <= 0: return False while n % 3 == 0: n /= 3 return n == 1"},{"question":"Write a function to get the nth Fibonacci number in Python. The function should be efficient, even with large values of n. Consider using a technique to optimize the performance of the function. One way to achieve this is by using memoization. Can you provide a Python function that implements this?","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to convert a string of hexadecimal numbers into its decimal equivalent. The input string will only contain lowercase letters and digits. Your function should handle strings of variable lengths and ensure that each character in the string is a valid hexadecimal digit (0-9, a-f).","solution":"def hex_to_decimal(hex_str): Converts a hexadecimal string to its decimal equivalent. Parameters: hex_str (str): The hexadecimal string to be converted. Returns: int: The decimal equivalent of the hexadecimal string. return int(hex_str, 16)"},{"question":"Write a function to determine if two binary strings, \`x\` and \`y\`, are equal. Both strings are guaranteed to be non-empty and consist only of the characters '0' and '1'. The function should return 1 if \`x\` is equal to \`y\`, and 0 otherwise.","solution":"def are_binaries_equal(x, y): Returns 1 if the binary strings x and y are equal, otherwise returns 0. return 1 if x == y else 0"},{"question":"Write a function to find all the shortest paths in a grid where you can only move down or right from the top-left corner (0,0). The grid contains walls (denoted by 1) and open spaces (denoted by 0). The function should return the number of unique shortest paths from the top-left corner to the bottom-right corner. The width and height of the grid are given.","solution":"def unique_shortest_paths(grid): Returns the number of unique shortest paths from the top-left corner to the bottom-right corner of the grid, considering walls (denoted by 1) and open spaces (denoted by 0). Parameters: grid (List[List[int]]): The input grid where 1 represents a wall and 0 represents an open space. Returns: int: The number of unique shortest paths from the top-left to the bottom-right corner. if not grid or grid[0][0] == 1: return 0 m = len(grid) n = len(grid[0]) # Create a DP table to store number of paths to each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 # Fill the DP table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Write a function to rotate an array to the right by k steps. The function should take the array, its size, and the number of steps as inputs and return the rotated array.","solution":"def rotate_right(arr, n, k): Rotates the array to the right by k steps. Parameters: arr (list): The input array. n (int): The size of the array. k (int): The number of steps to rotate the array. Returns: list: The rotated array. k %= n # Handle cases where k is greater than n return arr[-k:] + arr[:-k]"},{"question":"Write a function to calculate the factorial of a number. factorial(n) should calculate n!","solution":"def factorial(n): Returns the factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to compute the sum of the absolute values of a list of integers, where the sign of the sum is determined by the majority of the signs in the list. If the list contains less than half positive numbers and half negative numbers, return a neutral sign (0).","solution":"def sum_of_absolute_with_sign(numbers): Computes the sum of the absolute values of a list of integers, where the sign of the sum is determined by the majority of the signs in the list. If the list contains less than half positive numbers and half negative numbers, return a neutral sign (0). if not numbers: return 0 positive_count = len([num for num in numbers if num > 0]) negative_count = len([num for num in numbers if num < 0]) abs_sum = sum(abs(num) for num in numbers) if positive_count > len(numbers) / 2: return abs_sum elif negative_count > len(numbers) / 2: return -abs_sum else: return 0"},{"question":"Write a function to find the third maximum number in an array that contains both positive and negative integers. If the third maximum does not exist, return the maximum number in the array. The function should run in O(n) time complexity.","solution":"def thirdMax(nums): Returns the third maximum number in the array. If the third maximum does not exist, returns the maximum number in the array. if len(nums) < 3: return max(nums) first = second = third = float('-inf') for num in nums: if num > first: first, second, third = num, first, second elif first > num > second: second, third = num, second elif second > num > third: third = num return third if third != float('-inf') else first"},{"question":"Write a function to create a list of all possible substrings of a given string.","solution":"def generate_substrings(s): Returns a list of all possible substrings of the input string \`s\`. substrings = [] n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings.append(s[i:j]) return substrings"},{"question":"Write a function to find the minimum element in a circularly sorted array.","solution":"def find_min_in_circularly_sorted_array(arr): Finds the minimum element in a circularly sorted array. Parameters: arr (list): The circularly sorted array. Returns: int: The minimum element in the array. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a function to traverse a binary tree in level order. The function should return a list of lists, where each sublist contains the values of nodes at the corresponding depth.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): Returns the level order traversal of a binary tree. Each sublist contains the values of nodes at the corresponding depth. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_nodes) return result"},{"question":"Write a function to calculate the area of a circle in Python. The function should take the radius of the circle as an argument and return the area. Ensure the function handles cases where the radius is not a positive number.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. The function returns None if the radius is not a positive number. if radius <= 0: return None return math.pi * radius ** 2"},{"question":"Write a function to compute the minimum cost to convert a given string to a palindrome by inserting characters at any position. The cost of inserting a character is given by a function \`getInsertCost(char ch)\`. The goal is to minimize this cost.","solution":"def minCostToPalindrome(s, getInsertCost): Returns the minimum cost to convert the given string \`s\` into a palindrome by inserting characters. The cost of inserting a character is given by \`getInsertCost\`. Parameters: s (str): The input string. getInsertCost (func): The function that returns the cost of inserting a given character. Returns: int: The minimum cost to convert \`s\` into a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j] + getInsertCost(s[i]), dp[i][j-1] + getInsertCost(s[j])) return dp[0][n-1]"},{"question":"Write a function to place all zeros in a given 2D array (matrix) to a new position specified by the user.","solution":"def move_zeros(matrix, new_row, new_col): Move all zeros in the given 2D array (matrix) to a new position specified by the user. Args: matrix (list of list of int): The 2D array. new_row (int): The row index where zeros should be moved. new_col (int): The column index where zeros should be moved. Returns: list of list of int: The modified matrix with zeros moved. if not matrix or not matrix[0]: return matrix rows = len(matrix) cols = len(matrix[0]) # Collect the original positions of zeros zero_positions = [(r, c) for r in range(rows) for c in range(cols) if matrix[r][c] == 0] # Remove the zeros from their original positions for r, c in zero_positions: matrix[r][c] = None # Place zeros at the new specified position, ensuring it is within bounds for r, c in zero_positions: if 0 <= new_row < rows and 0 <= new_col < cols: matrix[new_row][new_col] = 0 # Replace all \`None\` with original values if there were no zeros placed. for row in matrix: for i in range(len(row)): if row[i] is None: row[i] = 0 return matrix"},{"question":"Write a function to sort the given array using the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to check if a given number is an Armstrong number or a narcissistic number, meaning it is equal to the sum of its own digits each raised to the power of the number of digits.","solution":"def is_armstrong_number(num): Checks if a given number is an Armstrong number. A number is an Armstrong number if it is equal to the sum of its own digits each raised to the power of the number of digits. Args: num (int): The number to be checked. Returns: bool: True if the number is an Armstrong number, False otherwise. # Convert the number to a string to easily iterate over the digits str_num = str(num) # Calculate the number of digits num_digits = len(str_num) # Calculate the sum of digits each raised to the power of num_digits sum_of_powers = sum(int(digit) ** num_digits for digit in str_num) # Check if the sum of the powers is equal to the original number return sum_of_powers == num"},{"question":"Write a function to find the middle element of a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle_element(head): Returns the middle element of a linked list. :param head: ListNode :return: ListNode (middle element) slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to calculate the factorial of a given number. The function should be designed to handle large numbers efficiently and should include error handling for invalid inputs. What would the code look like in Python?","solution":"def factorial(n): Calculate the factorial of a given number. Parameters: n (int): A non-negative integer Returns: int: The factorial of the given number Raises: ValueError: If n is a negative integer or not an integer if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find the median of a list of integers. If the list contains an odd number of elements, return the middle element. If the list contains an even number of elements, return the average of the two middle elements. Assume the list is sorted and not empty.","solution":"def find_median(numbers): Returns the median of a sorted list of integers. If the list contains an odd number of elements, returns the middle element. If the list contains an even number of elements, returns the average of the two middle elements. n = len(numbers) if n % 2 == 1: return numbers[n // 2] else: mid1 = n // 2 - 1 mid2 = n // 2 return (numbers[mid1] + numbers[mid2]) / 2"},{"question":"Write a function to merge two sorted linked lists into one sorted linked list. The function should take two ListNode objects as input parameters and return a new ListNode object representing the merged linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists into one sorted linked list. Parameters: l1 (ListNode): The head node of the first sorted linked list. l2 (ListNode): The head node of the second sorted linked list. Returns: ListNode: The head node of the merged sorted linked list. dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If there are any remaining nodes in either list, append them if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"Write a function to determine if a string is a hexadecimal representation of a number. Make sure the string is a valid hexadecimal number and that its value is between 100 and 500.","solution":"def is_valid_hexadecimal(s): Determines if a string is a hexadecimal representation of a number between 100 and 500. Parameters: s (str): Input string to check. Returns: bool: True if valid hexadecimal and the value is between 100 and 500, False otherwise. try: value = int(s, 16) return 100 <= value <= 500 except ValueError: return False"},{"question":"Write a function to determine the parity (even or odd) of a number.","solution":"def determine_parity(num): Determines whether a number is even or odd. Parameters: - num: int, the number to check. Returns: - str: \\"even\\" if the number is even, \\"odd\\" if the number is odd. if num % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Write a function to calculate the nth Fibonacci number. The Fibonacci sequence is defined as F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") a, b = 0, 1 for _ in range(n): a, b = b, a + b return a"},{"question":"Write a function to check if the numbers in a given list are sorted in descending order.","solution":"def is_sorted_descending(lst): Returns True if the list is sorted in descending order, otherwise returns False. return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))"},{"question":"Write a function to check if a linked list contains a cycle. If it does, return the node where the cycle starts. If it does not contain a cycle, return \`null\`. The function should use Floyd's Tortoise and Hare algorithm to detect the cycle and find the start of the cycle.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detect_cycle(head): Detects if a cycle exists in a linked list, and returns the node where the cycle starts. Using Floyd's Tortoise and Hare algorithm. Arguments: head -- ListNode: The head of the linked list. Returns: ListNode: The node where the cycle starts, or None if there is no cycle. if not head or not head.next: return None slow = fast = head # First step, determine if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected break else: return None # No cycle found # Second step, find the entry point to the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to find the maximum sum of a subarray within a given array of integers. This problem is commonly known as the \\"Maximum Subarray Problem\\".","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray within a given array of integers. This is implemented using Kadane's Algorithm. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the maximum subarray sum in a given list of integers. The function should return the maximum sum that can be obtained from any contiguous subarray within the input list. Implement the function using Kadane's algorithm, which efficiently finds the maximum subarray sum with a time complexity of O(n).","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum using Kadane's algorithm. Parameters: nums (list): A list of integers. Returns: int: The maximum subarray sum. if not nums: return 0 max_ending_here = nums[0] max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to get the first n Fibonacci numbers.","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to find the maximum profit that can be achieved by buying and selling a stock at most twice. You are given a list of daily stock prices. The function should return the maximum profit possible.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling a stock at most twice. :param prices: List of daily stock prices. :return: Maximum profit. if not prices: return 0 n = len(prices) if n < 2: return 0 # Initialize the profits arrays profit_left = [0] * n profit_right = [0] * n # Calculate maximum profit for one transaction up to each day i min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit_left[i] = max(profit_left[i - 1], prices[i] - min_price) # Calculate maximum profit for one transaction starting each day i max_price = prices[-1] for i in range(n - 2, -1, -1): max_price = max(max_price, prices[i]) profit_right[i] = max(profit_right[i + 1], max_price - prices[i]) # Calculate the maximum profit by doing two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, profit_left[i] + profit_right[i]) return max_profit"},{"question":"Write a function to find the minimum element in a sorted and rotated array. A sorted and rotated array is an array that has been sorted in non-decreasing order and then some part of it was rotated.","solution":"def find_min_in_rotated_sorted_array(arr): Finds the minimum element in a sorted and rotated array. :param arr: List[int] - A sorted and rotated array :return: int - The minimum element in the array if not arr: raise ValueError(\\"Array must not be empty\\") left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a function to count the number of common elements in two lists in Python.","solution":"def count_common_elements(list1, list2): Returns the number of common elements between two lists. set1 = set(list1) set2 = set(list2) common_elements = set1.intersection(set2) return len(common_elements)"},{"question":"Write a function to select and sort an array of integers.","solution":"def sort_array(array): Returns a sorted array of integers. return sorted(array)"},{"question":"Write a function to return the average of a given list.","solution":"def average(numbers): Returns the average of a list of numbers. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a function to return the nth node's value from the end of a singly linked list, where the linked list is not circular, the list has a head pointer, and the list does not have a tail pointer. The nth node is 1-indexed.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def nth_from_end(head: ListNode, n: int) -> int: Return the nth node's value from the end of a singly linked list. # Initialize two pointers first = head second = head # Move the first pointer n steps ahead for _ in range(n): if first is None: raise IndexError(\\"n is greater than the number of nodes in the list\\") first = first.next # Move both pointers until the first one hits the end of the list while first is not None: first = first.next second = second.next # Now the second pointer is at the nth node from the end return second.val"},{"question":"Write a function to replace a given substring in a string with another substring. For example, if the given string is \\"hello, world!\\" and the substring to be replaced is \\"world\\", this function should return \\"hello, earth!\\". You should write both the function and a series of unit tests to ensure the function works correctly.","solution":"def replace_substring(original_str, to_replace, replacement): Replaces a given substring in the original string with another substring. :param original_str: The original string :param to_replace: The substring to be replaced :param replacement: The substring to replace with :return: A new string with the specified substring replaced return original_str.replace(to_replace, replacement)"},{"question":"Write a function to reverse the characters of a given string, and then reverse each individual word in the string. A word is defined as any sequence of characters separated by spaces. For example, the string \\"hello world\\" should be transformed to \\"olleh dlrow\\".","solution":"def reverse_characters_and_words(s): Reverses the characters of a given string and then reverses each individual word in the string. Parameters: s (str): The input string to be transformed. Returns: str: The transformed string with characters and individual words reversed. # Split the string into words words = s.split() # Reverse each word and reverse the order of words reversed_words = [word[::-1] for word in words] reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Write a function to calculate the factorial of a number in Python, handling both positive and negative inputs. If the input is negative, return an appropriate error message.","solution":"def factorial(n): Computes the factorial of a given number n. If n is negative, returns an error message. if n < 0: return \\"Error: Factorial of a negative number does not exist.\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the number of days until the next weekday (Monday to Friday) from a given date. If today is a weekday, return 0. If today is a weekend, return the number of days until the next Monday, considering today is represented by a string in the format \\"YYYY-MM-DD\\".","solution":"import datetime def days_until_next_weekday(date_string): Returns the number of days until the next weekday (Monday to Friday) from a given date. If today (the given date) is a weekday, returns 0. If today is a weekend, returns the number of days until the next Monday. The date_string should be in the format \\"YYYY-MM-DD\\". date = datetime.datetime.strptime(date_string, \\"%Y-%m-%d\\").date() weekday = date.weekday() if weekday < 5: # Weekday (Monday to Friday) return 0 else: # Weekend (Saturday or Sunday) return 7 - weekday"},{"question":"Write a function to calculate the nth prime number. You can assume n is a positive integer and will not exceed 10,000.","solution":"def nth_prime(n): Returns the nth prime number. :param n: The position of the prime number to find. :type n: int :return: The nth prime number. :rtype: int if n == 1: return 2 count, num = 1, 3 # Starting from the first counted prime (2) and the next candidate (3) primes = [2] # A list to store prime numbers while count < n: is_prime = True for prime in primes: if prime * prime > num: break if num % prime == 0: is_prime = False break if is_prime: primes.append(num) count += 1 num += 2 # Only checking odd numbers for primality after 2 return primes[-1]"},{"question":"Write a function to calculate the sum of a list of integers, but the function should double the value of each integer before summing them up.","solution":"def double_sum(integers): Takes a list of integers, doubles each value, and returns the sum. Parameters: integers (list of int): A list of integers. Returns: int: The sum of the doubled values. return sum(i * 2 for i in integers)"},{"question":"Write a function to calculate the Hamming Distance between two integers. The function should compare two numbers and return the number of positions at which the corresponding bits are different.","solution":"def hamming_distance(x, y): Calculate the Hamming Distance between two integers. The Hamming Distance is the number of positions at which the corresponding bits are different. xor_result = x ^ y hamming_dist = bin(xor_result).count('1') return hamming_dist"},{"question":"Write a function to calculate the factorial of a given non-negative integer n. The function should recursively calculate the factorial.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n-1)"},{"question":"Write a function to reverse a linked list in Python. Include the function definition, a brief explanation of the logic used, and a simple test case to demonstrate its functionality.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list and returns the new head node. prev = None current = head while current: next_node = current.next # store the next node current.next = prev # reverse the link prev = current # move prev up current = next_node # move current up return prev # prev is the new head of the reversed list def print_linked_list(head): elements = [] current = head while current: elements.append(current.value) current = current.next return elements # Brief Explanation: # The function \`reverse_linked_list\` takes the head of a linked list and reverses the list using an iterative approach. # It uses three pointers: prev, current, and next_node to keep track of the nodes and reverse the links between them. # prev initializes as None and current as head. It iteratively updates links to reverse the list until current becomes None."},{"question":"Write a function to sort a list of non-negative integers such that the function returns a list where the integers are sorted according to the frequency of their occurrences, and if two integers have the same frequency, they are sorted based on their numerical value in ascending order.","solution":"from collections import Counter def sort_by_frequency(nums): Sorts a list of non-negative integers by the frequency of their occurrence. If two integers have the same frequency, sorts them numerically in ascending order. Args: nums (list): List of non-negative integers. Returns: list: List of integers sorted by frequency and value. if not nums: return nums frequency = Counter(nums) return sorted(nums, key=lambda x: (frequency[x], x))"},{"question":"Write a function to calculate the number of 1 bits in the binary representation of a given positive integer. This function should be efficient and handle large numbers well.","solution":"def count_bits(n): Returns the number of 1 bits in the binary representation of a given positive integer n. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a function to check if two strings are Pangrams or not in Python. A pangram is a sentence containing every letter of the English alphabet at least once.","solution":"def is_pangram(s): Check if the given string \`s\` is a pangram. A pangram is a sentence containing every letter of the English alphabet at least once. Parameters: s (str): The input string to check. Returns: bool: True if the string is a pangram, False otherwise. alphabet = set('abcdefghijklmnopqrstuvwxyz') s = s.lower() return alphabet <= set(s) def are_both_pangrams(s1, s2): Check if both given strings \`s1\` and \`s2\` are pangrams. Parameters: s1 (str): The first input string to check. s2 (str): The second input string to check. Returns: bool: True if both strings are pangrams, False otherwise. return is_pangram(s1) and is_pangram(s2)"},{"question":"Write a function to determine if a string is a valid palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\" or \\"madam\\". The function should ignore spaces, punctuation, and be case-insensitive.","solution":"import re def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces, punctuation, and case. Args: s (str): input string Returns: bool: True if the string is a palindrome, False otherwise # Clean the string by removing all non-alphanumeric characters and converting to lower case cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to find the median in a list of numbers. The list can be of any length and may contain both positive and negative numbers. The function should handle both even and odd lengths of the list. If the list is empty, the function should return \`None\`.","solution":"def find_median(numbers): Returns the median of a list of numbers. If the list is empty, returns None. if not numbers: return None sorted_numbers = sorted(numbers) n = len(sorted_numbers) mid = n // 2 if n % 2 == 1: return sorted_numbers[mid] else: return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2"},{"question":"Write a function to find the nth Fibonacci number using recursion. The function should be named \`fibonacci\` and should take a single integer argument \`n\`. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, and so on. The nth Fibonacci number is the number at position n in this sequence.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to sort an array of numbers using the bubble sort algorithm. Implement the function in Python.","solution":"def bubble_sort(arr): Sorts an array of numbers using the bubble sort algorithm. Parameters: arr (list): List of numbers to sort. Returns: list: Sorted list of numbers. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to find the first non-repeating character in a given string. If no such character exists, return -1.","solution":"def first_non_repeating_char(s): Finds the first non-repeating character in a given string. If no such character exists, return -1. char_count = {} # Count occurrences of each character in the string for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character with count 1 for char in s: if char_count[char] == 1: return char return -1"},{"question":"Write a function to reverse a string using substring extraction in Python.","solution":"def reverse_string(s): Reverses the input string using substring extraction. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to calculate the length of the longest substring without repeating characters in a given string s.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in a given string s. char_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"Write a function to find the deepest node in a given binary tree represented as a dictionary. The tree is structured where each key has the format 'node.X', where X is a unique string identifier, and the value is another dictionary representing the child nodes.","solution":"def find_deepest_node(tree): Find the deepest node in a given binary tree represented as a dictionary. Parameters: tree (dict): A dictionary representing the binary tree. Returns: tuple: The key of the deepest node and its depth (key, depth). # A helper function to recursively traverse the tree and find the deepest node. def traverse(node, depth): nonlocal deepest_node, max_depth if node: if depth > max_depth: max_depth = depth deepest_node = node for child in tree.get(node, {}): traverse(child, depth + 1) # Initialize variables to keep track of the deepest node and depth. deepest_node, max_depth = None, -1 # Start the traversal from the root node. root = list(tree.keys())[0] traverse(root, 0) return deepest_node, max_depth"},{"question":"Write a function to count the number of unique elements in an array of integers.","solution":"def count_unique_elements(arr): Returns the number of unique elements in an array of integers. Parameters: arr (list): A list of integers. Returns: int: The number of unique elements in the array. return len(set(arr))"},{"question":"Write a function to reverse a string in Python. Can you include a simple test case to demonstrate the correctness of the function?","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a function to retrieve the nth smallest element in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest_element(root, k): This function returns the kth smallest element in a binary search tree. def inorder_traversal(node): if node is None: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) inorder = inorder_traversal(root) if k-1 < len(inorder): return inorder[k-1] else: return None"},{"question":"Write a function to calculate the factorial of a given number using recursion in Python. Also, write a function to calculate the factorial using a loop in Python. Compare both functions and discuss their advantages and disadvantages.","solution":"def factorial_recursive(n): Returns the factorial of a given number using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 else: return n * factorial_recursive(n - 1) def factorial_iterative(n): Returns the factorial of a given number using iteration (loop). if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result # Comparison: # - The recursive version is elegant and easy to understand, but it might cause a stack overflow for large values of n due to the maximum recursion depth limit. # - The iterative version avoids the risk of stack overflow and can handle larger values of n, but it may be less intuitive."},{"question":"Write a function to count the number of nodes in a given binary search tree (BST). The function should be named \`countNodes\` and should take a single parameter, \`root\`, which is a pointer to the root of the BST.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def countNodes(root): Given the root of a binary search tree, count the number of nodes in the tree. :param root: TreeNode, root of the BST :return: int, number of nodes in the BST if root is None: return 0 return 1 + countNodes(root.left) + countNodes(root.right)"},{"question":"Write a function to rotate a circular linked list to the right by a given number of steps. The function should return the new head of the rotated list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: if not head or not head.next or k == 0: return head # Compute the length of the list old_tail = head length = 1 while old_tail.next: old_tail = old_tail.next length += 1 # Make the list circular old_tail.next = head # Find the new tail, which is (length - k % length - 1) nodes from the start # The new head is (length - k % length) nodes from the start k = k % length new_tail = head for i in range(length - k - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"Write a function to reverse a string without using any built-in string reversal functions or slicing. You should use a stack data structure to achieve this. Additionally, write a simple test function to verify that your reverse function works correctly.","solution":"def reverse_string(s): Reverses a string using a stack data structure. :param s: Input string to be reversed. :return: Reversed string. stack = [] # Push all characters of string to stack for char in s: stack.append(char) reversed_s = '' # Pop all characters from stack and append to reversed_s while stack: reversed_s += stack.pop() return reversed_s"},{"question":"Write a function to verify if a given list of unique integers contains a quadruplet within its entirety that sums to zero. Ensure that the function performs efficiently and handles all edge cases.","solution":"def four_sum_zero(nums): Given a list of unique integers, this function checks if there is any quadruplet (a, b, c, d) such that a + b + c + d = 0. It returns True if such a quadruplet exists, otherwise False. nums.sort() # Sort the list to help with two-pointer approach n = len(nums) if n < 4: return False # Check all combinations using four nested loops for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == 0: return True elif total < 0: left += 1 else: right -= 1 return False"},{"question":"Write a function to merge two sorted linked lists. The function should take in two sorted linked lists as input and return a new sorted linked list that is the result of merging the two input lists. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): dummy = ListNode(-1) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next"},{"question":"Write a function to find all the indices of a given element in a list.","solution":"def find_indices(lst, element): Returns a list of indices of the given element in the list. Args: lst: A list of elements. element: The element to find indices for. Returns: A list of indices where the element is found in the list. indices = [] for index, ele in enumerate(lst): if ele == element: indices.append(index) return indices"},{"question":"Write a function to remove duplicates from an unsorted linked list. You are not allowed to use a hash set. How would you approach this problem?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates_unsorted(head): Remove duplicates from an unsorted linked list without using a hash set. if head is None: return None current = head while current: runner = current while runner.next: if runner.next.val == current.val: runner.next = runner.next.next else: runner = runner.next current = current.next return head # Helper functions for testing def list_to_linkedlist(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head def linkedlist_to_list(head): lst = [] current = head while current: lst.append(current.val) current = current.next return lst"},{"question":"Write a function to reverse a given list in-place. In-place reversal means that the list should be reversed without using any extra space.","solution":"def reverse_list_in_place(lst): Reverses the given list in-place. Parameters: lst (list): The list to be reversed. Returns: None: The list is reversed in-place modifiying the input list itself. left, right = 0, len(lst) - 1 while left < right: # swap elements lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a function to calculate the sum of all numbers in an array using Python. Here is a simple array: \`[1, 2, 3, 4, 5]\`.","solution":"def sum_of_array(numbers): Returns the sum of all numbers in the array. Args: numbers: list of int or float Returns: int or float return sum(numbers)"},{"question":"Write a function to check if a linked list is a palindrome (reads the same backward as forward). The function should return \`True\` if the linked list is a palindrome, and \`False\` otherwise. The linked list is represented as a series of nodes in a custom struct.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Returns True if the linked list is a palindrome, False otherwise. # Edge case: if the linked list is empty or has only one node if head is None or head.next is None: return True # Find the middle of the linked list slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev = None while slow: next_node = slow.next slow.next = prev prev = slow slow = next_node # Check if the first half matches the reversed second half left = head right = prev while right: # Only need to compare until the end of reversed half if left.val != right.val: return False left = left.next right = right.next return True"},{"question":"Write a function to find the second largest element in an array. If the array has less than 2 unique elements, return -1 as indicating no second largest element exists.","solution":"def second_largest(arr): Returns the second largest element in the array. If there are less than 2 unique elements, return -1. unique_elements = list(set(arr)) if len(unique_elements) < 2: return -1 unique_elements.sort(reverse=True) return unique_elements[1]"},{"question":"Write a function to find the maximum sum of a subarray in a given integer array using Kadane's Algorithm. Kadane's Algorithm is an iterative algorithm to find the maximum sum subarray in linear time, O(n). The algorithm can be stated as follows: Start from the initial position and maintain a local maximum and global maximum. For each element in the array, update the local maximum and global maximum. If the local maximum becomes negative, reset it to zero.","solution":"def max_subarray_sum(arr): Find the maximum sum of a subarray in the given integer array using Kadane's Algorithm. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 local_max = 0 global_max = float('-inf') for num in arr: local_max = max(num, local_max + num) if local_max > global_max: global_max = local_max return global_max"},{"question":"Write a function to perform merge sort on an array of integers. Additionally, implement a recursive function to merge two sorted arrays.","solution":"def merge_sort(arr): Perform merge sort on an array of integers. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merge two sorted arrays into one sorted array. merged = [] left_idx, right_idx = 0, 0 while left_idx < len(left) and right_idx < len(right): if left[left_idx] <= right[right_idx]: merged.append(left[left_idx]) left_idx += 1 else: merged.append(right[right_idx]) right_idx += 1 # If there are remaining elements in left array while left_idx < len(left): merged.append(left[left_idx]) left_idx += 1 # If there are remaining elements in right array while right_idx < len(right): merged.append(right[right_idx]) right_idx += 1 return merged"},{"question":"Write a function to find the first repeated element in an array of integers. If there is no repeated element, return -1. The function should be designed to handle large input sizes efficiently.","solution":"def first_repeated_element(arr): Returns the first repeated element in an array of integers. If there is no repeated element, returns -1. seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Write a function to sort an array using the quicksort algorithm. The function should be optimized for in-place sorting to minimize space complexity. Additionally, include a main function to test the quicksort function with a sample array of integers.","solution":"def quicksort(arr): Sorts the array using the in-place quicksort algorithm. def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quicksort_recursive(low, high): if low < high: pi = partition(low, high) quicksort_recursive(low, pi - 1) quicksort_recursive(pi + 1, high) quicksort_recursive(0, len(arr) - 1) return arr"},{"question":"Write a function to traverse through a binary search tree (BST) and count the number of nodes. You should also calculate the sum of the values of all nodes, the maximum value, and the minimum value. Additionally, the function should return the height of the tree and whether the tree is balanced. For a tree to be balanced, the difference between the height of the left subtree and the right subtree of every node should not be more than one.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def traverse_and_analyze_bst(root): Traverse through the BST and calculate the number of nodes, sum of values, maximum value, minimum value, height and if the tree is balanced. if root is None: return 0, 0, float('-inf'), float('inf'), 0, True left_count, left_sum, left_max, left_min, left_height, left_balanced = traverse_and_analyze_bst(root.left) right_count, right_sum, right_max, right_min, right_height, right_balanced = traverse_and_analyze_bst(root.right) total_nodes = 1 + left_count + right_count total_sum = root.val + left_sum + right_sum max_value = max(root.val, left_max, right_max) min_value = min(root.val, left_min, right_min) height = 1 + max(left_height, right_height) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return total_nodes, total_sum, max_value, min_value, height, balanced"},{"question":"Write a function to determine if two strings are anagrams, meaning they contain the same characters in a different order. For example, the strings \\"listen\\" and \\"silent\\" are anagrams. Your function should return \`true\` if the strings are anagrams and \`false\` otherwise.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. # Early exit if lengths are different if len(str1) != len(str2): return False # Sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a function to compute the greatest common divisor (GCD) of two numbers, a and b, where a and b are positive integers. The function should use recursion to find the GCD. The GCD of two numbers is the largest positive integer that divides both numbers without leaving a remainder.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using recursion. if b == 0: return a else: return gcd(b, a % b)"},{"question":"Write a function to reverse a string without using any built-in string manipulation functions. You should also keep in mind that string in python is immutable. What steps should I take?","solution":"def reverse_string(s): Reverses a given string without using built-in string manipulation functions. :param s: The input string to reverse. :return: The reversed string. reversed_chars = [] for i in range(len(s) - 1, -1, -1): reversed_chars.append(s[i]) return ''.join(reversed_chars)"},{"question":"Write a function to count the number of 1s in the binary representation of a given integer. For example, the binary representation of the integer 11 is '1011', so the function should return 3.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of the integer n. Parameters: n (int): The integer to be converted to binary and counted for 1s. Returns: int: The count of 1s in the binary representation of n. return bin(n).count('1')"},{"question":"Write a function to perform a binary search on a sorted array. If the target is found in the array, return the index of the target. If it is not found, return the index where it would be if it were inserted in order. This is known as the \\"search insertion position.\\"","solution":"def binary_search_insert_position(arr, target): Perform a binary search on a sorted array to find the target. If not found, return the index where it should be inserted. :param arr: List[int] - a list of sorted integers :param target: int - the target integer to find :return: int - the index of target or the index where it would be inserted left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"Write a function to accomplish the following task. Task: Given a string of text, write a function to count the total number of words in the string. Words are defined as sequences of characters separated by whitespace. Assume that each word contains only alphabetic characters. The function should return the total count of words in the string. If the string is empty, the function should return zero.","solution":"def count_words(text): Returns the total number of words in the string. Words are sequences of characters separated by whitespace. if not text.strip(): return 0 words = text.split() return len(words)"},{"question":"Write a function to find the next greater number for each element in an array of integers. The next greater number of an element x in the array is the first greater number to its right. If no such number exists, return -1 for that element. You should modify the input array in-place and use constant extra space.","solution":"def next_greater_elements(nums): Finds the next greater number for each element in an array. Modifies the input list in-place to contain the next greater numbers. Uses constant extra space. n = len(nums) for i in range(n): next_greater = -1 for j in range(i + 1, n): if nums[j] > nums[i]: next_greater = nums[j] break nums[i] = next_greater"},{"question":"Write a function to implement string concatenation.","solution":"def concatenate_strings(str1, str2): Concatenates two strings str1 and str2. return str1 + str2"},{"question":"Write a function to find the second largest number in a list of integers. Ensure your function handles empty lists and lists with identical elements.","solution":"def second_largest(numbers): Returns the second largest number in a list. If there is no second largest number (e.g., list is empty or all elements are the same), return None. if len(numbers) < 2: return None # Create a set of numbers to remove duplicates unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None # Sort the unique numbers in descending order unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a function to identify the largest among three numbers.","solution":"def find_largest(a, b, c): Returns the largest among the three numbers a, b, and c. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Write a function to find the largest prime number less than a given number \`n\`. Your function should be efficient and avoid unnecessary computations.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def largest_prime_less_than(n): Find the largest prime number less than a given number n. for num in range(n - 1, 1, -1): if is_prime(num): return num return None"},{"question":"Write a function to reverse a string in Python, then modify the function to reverse only the words within a string (while keeping the order of the words). For example, if the input is \\"Hello World\\", the output should be \\"olleH dlroW\\".","solution":"def reverse_string_characters(s): Reverses the entire string. return s[::-1] def reverse_words_in_string(s): Reverses the characters of each word in the string while keeping the word order. words = s.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to find the maximum area of a rectangle in a binary matrix where all the elements in the rectangle are 1's. The binary matrix has dimensions n x m.","solution":"def maxRectangle(matrix): Finds the maximum area of a rectangle in a binary matrix where all the elements in the rectangle are 1's. Parameters: matrix (List[List[int]]): A binary matrix of dimensions n x m. Returns: int: The maximum area of a rectangle consisting of all 1's. if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * m for row in matrix: for idx, val in enumerate(row): heights[idx] = heights[idx] + 1 if val == 1 else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): Helper function to find the largest rectangle area in a histogram. Parameters: heights (List[int]): Heights of the histogram. Returns: int: The largest rectangle area in the histogram. stack = [] max_area = 0 heights.append(0) # Append a 0 to pop all elements at the end for i, height in enumerate(heights): while stack and heights[stack[-1]] > height: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function to return the intersection of two arrays. The function should take two lists of integers as inputs and return a list containing the common elements between the two lists.","solution":"def intersection(array1, array2): Returns the intersection of two arrays. Parameters: array1 (list): First list of integers. array2 (list): Second list of integers. Returns: list: List containing the common elements between array1 and array2. return list(set(array1) & set(array2))"},{"question":"Write a function to answer the question: \\"How many times does a given number appear in a sorted array?\\"","solution":"def count_occurrences(sorted_array, number): Returns the number of times a given number appears in a sorted array. :param sorted_array: List[int], a sorted array of integers where we want to count occurrences :param number: int, the number whose occurrences need to be counted :return: int, the count of occurrences of the number in the sorted array from bisect import bisect_left, bisect_right left_index = bisect_left(sorted_array, number) right_index = bisect_right(sorted_array, number) return right_index - left_index"},{"question":"Write a function to calculate the sum of all numbers within a given list of integers. The function should handle both positive and negative numbers.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. Parameters: numbers (list of int): A list of integers. Returns: int: The sum of all integers in the list. return sum(numbers)"},{"question":"Write a function to calculate the factorial of a number. The function should be able to handle large numbers by using the \`BigInteger\` class from Python's \`decimal\` module. Additionally, the function should include an option to get either the single number as an output or an array of steps if the input number is greater than 10.","solution":"from decimal import Decimal def factorial(n, steps=False): Calculate the factorial of a number. If steps=True and n > 10, return an array of the factorial steps. Otherwise, return the factorial of the number. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = Decimal(1) step_results = [] for i in range(1, n + 1): result *= Decimal(i) if steps and n > 10: step_results.append(result) if steps and n > 10: return step_results return result"},{"question":"Write a function to calculate the sum of elements in an array using a for loop.","solution":"def sum_of_array(arr): Returns the sum of all elements in the array. total = 0 for num in arr: total += num return total"},{"question":"Write a function to create a new linked list and insert elements at the beginning of the list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert_at_beginning(self, data): Inserts a new node with the given data at the beginning of the linked list. new_node = Node(data) new_node.next = self.head self.head = new_node def to_list(self): Returns all elements in the linked list as a Python list. elements = [] current = self.head while current: elements.append(current.data) current = current.next return elements"},{"question":"Write a function to print the binary representation of a given decimal number.","solution":"def decimal_to_binary(n): Returns the binary representation of a given decimal number n. if n == 0: return \\"0\\" elif n < 0: return \\"-\\" + decimal_to_binary(-n) binary_str = \\"\\" while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 return binary_str"},{"question":"Write a function to determine the optimal number of workers required to complete a task, given the time it takes to complete the task with a single worker and the number of tasks that must be completed. The function should return the optimal number of workers as an integer.","solution":"def optimal_workers(task_time, num_tasks): Determines the optimal number of workers required to complete a given number of tasks. Parameters: task_time (int): The time it takes for a single worker to complete one task. num_tasks (int): The number of tasks that must be completed. Returns: int: The optimal number of workers required to complete the tasks. if task_time <= 0 or num_tasks <= 0: raise ValueError(\\"Both task_time and num_tasks should be positive integers.\\") # The optimal number of workers is just the number of tasks, as each worker can work on one task simultaneously. return num_tasks"},{"question":"Write a function to find the maximum area of a rectangle in a given 2D array that contains only 1s. The function should return the area of the largest rectangle.","solution":"def maximalRectangle(matrix): Function to calculate the maximal rectangle containing all 1s in a given 2D binary matrix. if not matrix or not matrix[0]: return 0 max_area = 0 heights = [0] * (len(matrix[0]) + 1) for row in matrix: for i in range(len(row)): heights[i] = heights[i] + 1 if row[i] == '1' else 0 stack = [-1] for i in range(len(heights)): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function to find the second most frequent element in a given list. If such an element does not exist, return \`-1\`.","solution":"from collections import Counter def second_most_frequent(lst): Returns the second most frequent element in lst. If no such element exists, returns -1. if not lst: return -1 freq = Counter(lst) if len(freq) < 2: return -1 # Getting a sorted list of tuples (element, frequency) in descending order of frequency sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True) return sorted_freq[1][0]"},{"question":"Write a function to compute the sum of the first n terms of a geometric series where the first term is a and the common ratio is r. The function should be named \`sum_of_geometric_series\` and should take three parameters: \`a\` (the first term) and \`r\` (the common ratio), with an optional parameter \`n\` (default value 10) representing the number of terms to sum.","solution":"def sum_of_geometric_series(a, r, n=10): Computes the sum of the first n terms of a geometric series where the first term is a and the common ratio is r. Parameters: a (float): the first term. r (float): the common ratio. n (int): the number of terms to sum. Default is 10. Returns: float: the sum of the first n terms. if r == 1: return a * n return a * (1 - r ** n) / (1 - r)"},{"question":"Write a function to swap two integers without using any temporary variable in Python.","solution":"def swap(a, b): Swaps two integers without using a temporary variable. Args: a (int): first integer b (int): second integer Returns: tuple: swapped integers (b, a) a, b = b, a return a, b"},{"question":"Write a function to convert a given integer to its binary representation.","solution":"def int_to_binary(n): Converts an integer to its binary representation. if n == 0: return '0' is_negative = n < 0 n = abs(n) binary_rep = '' while n > 0: binary_rep = str(n % 2) + binary_rep n = n // 2 if is_negative: return '-' + binary_rep else: return binary_rep"},{"question":"Write a function to find the most frequent element in a list or array.","solution":"from collections import Counter def most_frequent_element(lst): Returns the most frequent element in the list. If there are multiple elements with the highest frequency, it returns any one of them. if not lst: return None count = Counter(lst) return count.most_common(1)[0][0]"},{"question":"Write a function to calculate the sum of all even numbers in a given list. Here's the function signature: \`def sum_even_numbers(numbers)\`. The function should take a list of integers and return the sum of all even numbers in the list.","solution":"def sum_even_numbers(numbers): Returns the sum of all even numbers in the given list of integers. return sum(number for number in numbers if number % 2 == 0)"},{"question":"Write a function to generate the nth Fibonacci number in Python. I'm looking for a recursive solution, but I also want to understand how to approach optimizing recursive algorithms to avoid high computational complexities, especially as the value of n increases.","solution":"def fibonacci(n, memo={}): This function returns the nth Fibonacci number using a recursive approach with memoization. Memoization helps in optimizing the recursive function to avoid redundant calculations. Args: n (int): The position of the Fibonacci number in the sequence. memo (dict): A dictionary to store previously calculated Fibonacci numbers. Returns: int: The nth Fibonacci number. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to parse through a list of strings and remove any duplicates. The function should return a new list that contains only unique strings from the original list. The order of elements in the new list should be the same as in the original list.","solution":"def remove_duplicates(strings): Takes a list of strings and returns a new list with duplicates removed. The order of elements in the new list is the same as in the original list. Args: strings (list of str): The list of strings to process. Returns: list of str: A new list with duplicates removed. seen = set() unique_strings = [] for string in strings: if string not in seen: unique_strings.append(string) seen.add(string) return unique_strings"},{"question":"Write a function to convert a string from lowercase to uppercase.","solution":"def to_uppercase(s): Converts a given string s from lowercase to uppercase. return s.upper()"},{"question":"Write a function to find the longest consecutive sequence in a binary tree where each node in the sequence is separated by exactly one edge from the previous node. The sequence can start at any node and must be in increasing order.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longest_consecutive(root): Finds the longest consecutive sequence in a binary tree where each node in the sequence is separated by exactly one edge from the previous node and the sequence is in increasing order. def dfs(node, parent_val, length): if not node: return length current_length = length + 1 if node.val == parent_val + 1 else 1 left_length = dfs(node.left, node.val, current_length) right_length = dfs(node.right, node.val, current_length) return max(current_length, left_length, right_length) if not root: return 0 return dfs(root, root.val - 1, 0)"},{"question":"Write a function to find all prime numbers less than a given number n using the Sieve of Eratosthenes algorithm. The function should return a list of all prime numbers less than n. The Sieve of Eratosthenes is an ancient algorithm used to find all prime numbers up to any given limit. It does so by iteratively marking the multiples of each prime number, starting from the first prime number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with a constant difference between them that is equal to that prime. Once a multiple is found, it is marked as a composite number. The iteration continues until the square of the current prime number is greater than the limit.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] # Create a boolean array \\"prime[0..n]\\" and initialize all entries as true. # A value in prime[i] will be false if i is not a prime. prime = [True] * n p = 2 while p * p < n: # If prime[p] is still true, then it is a prime if prime[p]: # Updating all multiples of p to false for i in range(p * p, n, p): prime[i] = False p += 1 # Collect all prime numbers return [p for p in range(2, n) if prime[p]]"},{"question":"Write a function to validate if a given string \`s\` can be segmented into a sequence of words in the dictionary \`wordDict\`.","solution":"def word_break(s, wordDict): Determines if the given string s can be segmented into a sequence of words in wordDict. Parameters: s (str): The string to be segmented. wordDict (list of str): The list of valid words. Returns: bool: True if s can be segmented, False otherwise. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s)+1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"Write a function to convert a string into a list of words. The function should handle cases where the string may contain multiple spaces between words, leading or trailing spaces, and should ignore empty strings.","solution":"def string_to_word_list(input_string): Convert a string into a list of words. Words are separated by any number of spaces, leading or trailing spaces are ignored. return input_string.split() # Example # string_to_word_list(\\" Hello world \\") -> ['Hello', 'world']"},{"question":"Write a function to ensure that a list of integers contains no duplicates. If duplicates are found, return a new list with only unique numbers.","solution":"def remove_duplicates(int_list): Removes duplicates from a list of integers and returns a new list with only unique numbers. :param int_list: List of integers possibly containing duplicates :return: List of integers with duplicates removed return list(set(int_list))"},{"question":"Write a function to merge two sorted arrays into one sorted array. The function should return the merged array and the time complexity of the solution.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Params: arr1: List[int] - First sorted array. arr2: List[int] - Second sorted array. Returns: Tuple[List[int], str] - A tuple containing the merged sorted array and the time complexity of the operation. merged_array = [] i, j = 0, 0 # Traverse both arrays and insert smaller of both elements into result while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Collect remaining elements of arr1 (if any) while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Collect remaining elements of arr2 (if any) while j < len(arr2): merged_array.append(arr2[j]) j += 1 # Time complexity is O(n + m) where n and m are the lengths of arr1 and arr2 return merged_array, \\"O(n + m)\\""},{"question":"Write a function to find the maximum contiguous subarray sum in an array of integers. This function should be efficient and work in O(n) time complexity.","solution":"def max_contiguous_subarray_sum(arr): Find the maximum sum of a contiguous subarray in an array of integers. :param arr: List of integers :return: Maximum contiguous subarray sum max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to convert a binary number to its decimal representation. The function should take a string representation of a binary number as input (e.g., \\"11010\\") and return the decimal number as an integer.","solution":"def binary_to_decimal(binary_str): Convert a binary string to its decimal representation. Args: binary_str (str): A string representation of a binary number. Returns: int: The decimal representation of the binary number. return int(binary_str, 2)"},{"question":"Write a function to generate all possible combinations of two strings, \`s1\` and \`s2\`. Each combination should consist of one character from \`s1\` and one character from \`s2\`. For example, if \`s1 = \\"abc\\"\` and \`s2 = \\"123\\"\`, the function should return \`[\\"a1\\", \\"a2\\", \\"a3\\", \\"b1\\", \\"b2\\", \\"b3\\", \\"c1\\", \\"c2\\", \\"c3\\"]\`.","solution":"def generate_combinations(s1, s2): Returns a list of all possible combinations of one character from s1 and one character from s2. combinations = [] for c1 in s1: for c2 in s2: combinations.append(c1 + c2) return combinations"},{"question":"Write a function to check if a string s is a palindrome (A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, such as \\"A man, a plan, a canal: Panama\\").","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Ignores case, spaces, and non-alphanumeric characters. import re # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is the same forwards and backwards return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to detect if a singly linked list has a cycle. If a cycle exists, return \`true\`; otherwise, return \`false\`. The solution should use Floyd's Tortoise and Hare algorithm, which involves using two pointers moving at different speeds to detect cycles.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects if a linked list has a cycle using Floyd's Tortoise and Hare algorithm. Args: head (ListNode): The head of the singly linked list. Returns: bool: True if a cycle is detected, False otherwise. if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function to find the minimum element in a singly linked list. The function should return the minimum value found, or -1 if the list is empty.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_minimum(head): This function returns the minimum element in a singly linked list. If the list is empty, it returns -1. if head is None: return -1 min_val = head.val current = head while current: if current.val < min_val: min_val = current.val current = current.next return min_val"},{"question":"Write a function to reverse the words in a given string while maintaining the original spacing and punctuation.","solution":"def reverse_words(input_string): Reverses the words in a given string while maintaining the original spacing and punctuation. Parameters: input_string (str): The string whose words are to be reversed. Returns: str: The string with words reversed. # Split the input string by whitespace to get all words and punctuations words = input_string.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed words to form the output string with a single space result = ' '.join(reversed_words) return result"},{"question":"Write a function to calculate the sum of the results of a certain mathematical operation performed on all elements of an array. The operation is to square the number and then subtract two. Finally, the results should be summed up.","solution":"def sum_of_operations(arr): Returns the sum of the results of a specific mathematical operation (square the number and then subtract two) performed on all elements of the input array. :param arr: List of integers :return: Integer sum of all results return sum((x ** 2 - 2) for x in arr)"},{"question":"Write a function to find the element with the minimum absolute difference from a given target in a sorted array. If there are multiple elements with the same minimum difference, return the smallest one. Assume the array is sorted in ascending order and consists of integers.","solution":"def find_min_abs_diff(arr, target): Finds the element with the minimum absolute difference from the target in a sorted array. If there are multiple elements with the same minimum difference, returns the smallest one. :param arr: List[int] - Sorted array of integers :param target: int - Target value :return: int - Element with the minimum absolute difference if not arr: return None min_diff = float('inf') min_element = None for num in arr: diff = abs(num - target) if diff < min_diff or (diff == min_diff and num < min_element): min_diff = diff min_element = num return min_element"},{"question":"Write a function to calculate the find the maximum contiguous subarray sum using Kadane's Algorithm.","solution":"def max_contiguous_subarray_sum(nums): Finds the maximum sum of a contiguous subarray using Kadane's Algorithm. :param nums: List of integers :return: Integer, the maximum sum of the contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to output a given string in reverse order. Your function should have a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string(s): Returns the given string s in reverse order. Time complexity is O(n). return s[::-1]"},{"question":"Write a function to find the largest sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped around. This means the subarray can start from any point and wrap around to the beginning of the array.","solution":"def max_subarray_sum_circular(nums): Finds the largest sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped around. def kadane(arr): max_current = max_global = arr[0] for x in arr[1:]: max_current = max(x, max_current + x) if max_current > max_global: max_global = max_current return max_global max_kadane = kadane(nums) total_sum = sum(nums) max_circular_sum = total_sum + kadane([-num for num in nums]) if max_circular_sum == 0: return max_kadane else: return max(max_kadane, max_circular_sum)"},{"question":"Write a function to find the shortest path between two nodes in a graph represented by an adjacency list. You can assume that the graph has no negative weights and the weights between nodes are positive integers. This problem does not need to consider Dijkstra's algorithm, but you should implement a solution that finds the shortest path between two nodes using any graph traversal algorithm that suits this scenario.","solution":"from collections import deque, defaultdict def bfs_shortest_path(adj_list, start, goal): Finds the shortest path in an unweighted graph using BFS. Parameters: adj_list (dict): The graph represented as an adjacency list. start: The starting node. goal: The goal node. Returns: list: The shortest path from start to goal, inclusive of both nodes. If there is no path, returns an empty list. if start not in adj_list or goal not in adj_list: return [] queue = deque([(start, [start])]) visited = set() while queue: current, path = queue.popleft() if current == goal: return path if current not in visited: visited.add(current) for neighbor in adj_list[current]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return [] # Example Usage # adjacency_list = { # 'A': ['B', 'C'], # 'B': ['A', 'D', 'E'], # 'C': ['A', 'F'], # 'D': ['B'], # 'E': ['B', 'F'], # 'F': ['C', 'E'] # } # print(bfs_shortest_path(adjacency_list, 'A', 'F')) # Output: ['A', 'C', 'F']"},{"question":"Write a function to calculate the maximum profit that can be obtained by buying and selling a stock on different days given an array of stock prices on consecutive consecutive days. Assume you can only buy once and sell once.","solution":"def max_profit(prices): Calculate the maximum profit that can be obtained by buying and selling a stock. :param prices: List[int], an array of stock prices on consecutive days. :return: int, the maximum profit that can be made. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Update the minimum price if the current price is lower than the recorded minimum price if price < min_price: min_price = price # Calculate profit with the current price and update maximum profit if it's higher than the recorded maximum profit elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to convert a decimal number to a binary number list.","solution":"def decimal_to_binary_list(decimal): Converts a decimal number to its binary representation in list form. :param decimal: int, the decimal number to convert. :return: list of int, the binary representation of the number. if decimal == 0: return [0] binary_list = [] while decimal > 0: binary_list.append(decimal % 2) decimal = decimal // 2 binary_list.reverse() return binary_list"},{"question":"Write a function to convert a given positive integer to its equivalent Roman numeral. How can this task be achieved using Python?","solution":"def int_to_roman(num): Convert an integer to its Roman numeral equivalent. :param num: int : a positive integer :return: str : Roman numeral as a string val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I' ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to find the maximum number of unique elements in a list of lists, considering both the main list and all sublists. How should the function handle empty sublists and lists?","solution":"def max_unique_elements(lists): Returns the maximum number of unique elements found across all lists and sublists. unique_elements = set() for sublist in lists: if sublist: # Check if sublist is not empty unique_elements.update(sublist) return len(unique_elements)"},{"question":"Write a function to calculate the nth Fibonacci number using both recursion and iteration. Compare the performance for large values of n.","solution":"import time def fibonacci_recursive(n): Calculates the nth Fibonacci number using recursion. if n <= 1: return n else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) def fibonacci_iterative(n): Calculates the nth Fibonacci number using iteration. if n <= 1: return n a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def performance_comparison(n): Compare the performance of recursive and iterative Fibonacci calculations for large n. start_recursive = time.time() fib_recursive = fibonacci_recursive(n) end_recursive = time.time() start_iterative = time.time() fib_iterative = fibonacci_iterative(n) end_iterative = time.time() return { 'recursive_result': fib_recursive, 'recursive_time': end_recursive - start_recursive, 'iterative_result': fib_iterative, 'iterative_time': end_iterative - start_iterative }"},{"question":"Write a function to remove all non-alphabetic characters from a string and convert it to lowercase. Here's the code I have so far, but it's not working as expected.","solution":"import re def clean_string(input_string): Removes all non-alphabetic characters from a string and converts it to lowercase. Parameters: input_string (str): The string to be cleaned. Returns: str: The cleaned string. # Remove all non-alphabetic characters cleaned_string = re.sub(r'[^a-zA-Z]+', '', input_string) # Convert to lowercase return cleaned_string.lower()"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped. For example, in the array [8, -1, 3, 4], the maximum sum of the subarray is 15 ([3, 4, -1, 8]), because the array is \\"wrapped\\" or circularly shifted.","solution":"def maxSubarraySumCircular(nums): Finds the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped. :param nums: List[int] - List of integers. :return: int - Maximum sum of circular subarray. def kadane(nums): max_sum, current_sum = nums[0], nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_kadane = kadane(nums) max_wrap = sum(nums) + kadane([-num for num in nums]) if max_wrap == 0: return max_kadane else: return max(max_kadane, max_wrap)"},{"question":"Write a function to perform an inorder traversal of a binary tree and return the result as a list. An inorder traversal visits the left subtree, the root, then the right subtree of each node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Performs an inorder traversal of a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[int]: The list containing the values of nodes in inorder traversal. result = [] def traverse(node): if node is not None: traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result"},{"question":"Write a function to calculate the number of ways to split a given integer \`n\` into the sum of \`k\` positive integers. The order of the integers in the sum does not matter. For example, for \`n = 4\` and \`k = 2\`, one way to split is \`1 + 3\` or \`3 + 1\`, but since the order does not matter, these are considered the same.","solution":"from math import comb def number_of_ways(n, k): Returns the number of ways to split n into the sum of k positive integers where order does not matter. # Using the stars and bars theorem, the number of ways to split n into k parts # where n = n1 + n2 + ... + nk and ni > 0 is equivalent to calculating the combinations # C(n - 1, k - 1). This formula comes from transforming the equation to one with non-negative # parts and then applying the combinatorics C(n-1, k-1). if k > n: return 0 return comb(n - 1, k - 1)"},{"question":"Write a function to check if a given list is a palindrome.","solution":"def is_palindrome(lst): Returns True if the given list is a palindrome, otherwise False. A list is considered a palindrome if it reads the same backward as forward. return lst == lst[::-1]"},{"question":"Write a function to determine if a pattern is present in a string.","solution":"def is_pattern_present(string, pattern): Determines if the pattern is present in the given string. Parameters: string (str): The string to search within. pattern (str): The pattern to search for. Returns: bool: True if the pattern is present in the string, False otherwise. return pattern in string"},{"question":"Write a function to implement the sliding window maximum problem in Python.","solution":"from collections import deque def sliding_window_maximum(nums, k): Find the maximum values in each sliding window of size k. Parameters: nums (List[int]): List of integers. k (int): Size of the sliding window. Returns: List[int]: List of maximum values for each sliding window. if not nums or k <= 0: return [] result = [] deq = deque() # deque to store indices of array elements for i in range(len(nums)): # Remove elements not within the sliding window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements that are smaller than the current element from the deque while deq and nums[deq[-1]] < nums[i]: deq.pop() deq.append(i) # Append the current max in the sliding window to the result list # The first element in the deque is the maximum element for the current sliding window if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"Write a function to find the maximum sum within a continuous subarray of a given array of integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a continuous subarray. Args: nums (List[int]): List of integers. Returns: int: The maximum sum of any continuous subarray. if not nums: return 0 # assuming empty array has a max sum of 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to calculate the area of a triangle given the lengths of its three sides. Implement error handling to ensure that the function can handle invalid triangle side lengths.","solution":"def triangle_area(a, b, c): Returns the area of a triangle given its three sides a, b, and c using Heron's formula. It also includes error handling for invalid triangle side lengths. # Check if the given sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: raise ValueError(\\"The given sides do not form a valid triangle\\") # Semi-perimeter s = (a + b + c) / 2 # Area using Heron's formula area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 return area"},{"question":"Write a function to reverse a string. Implement the function using recursion.","solution":"def reverse_string(s): Returns the reverse of the string s using recursion. if len(s) == 0: return s else: return reverse_string(s[1:]) + s[0]"},{"question":"Write a function to calculate the intersection of a list of integer arrays, where each array is sorted in ascending order, and the length of the intersection should be 2. If there is no valid intersection, return -1.","solution":"def intersection_of_arrays(arrays): Returns the intersection of a list of sorted integer arrays of length 2, or -1 if no valid intersection exists. Parameters: arrays (list of list of int): List of lists containing sorted integer arrays. Returns: list of int: Intersection of the arrays or -1 if no valid intersection exists. if not arrays: return -1 # Initialize with the first array's elements if arrays are not empty common_elements = set(arrays[0]) # Find common elements across all arrays for array in arrays[1:]: common_elements.intersection_update(array) # Convert to sorted list common_elements = sorted(list(common_elements)) # Check for invalid intersection if len(common_elements) < 2: return -1 return common_elements if len(common_elements) == 2 else common_elements[:2]"},{"question":"Write a function to detect and remove duplicates from a list of integers, returning the list with duplicates removed and elements in sorted order. How can I achieve this in Python?","solution":"def remove_duplicates_and_sort(input_list): Returns a list of integers with duplicates removed and elements in sorted order. return sorted(set(input_list))"},{"question":"Write a function to reverse a singly linked list in-place. The function should take a pointer to the head of the linked list. The function should not return anything but should reverse the list starting from the head.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a singly linked list in place. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node head = prev return head"},{"question":"Write a function to find the factorial of a number in Python using recursion. Don't use any loops or iterative approaches.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Parameters: n (int): The number to find the factorial of. Must be a non-negative integer. Returns: int: Factorial of the given number n. Raises: ValueError: If n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to count the number of vowel letters in a given string. The function should take a single string as input and return the count of vowel letters it contains. The function should consider both uppercase and lowercase vowels.","solution":"def count_vowels(s): Returns the count of vowel letters in the given string. It considers both uppercase and lowercase vowels. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Write a function to find the sum of all prime numbers less than a given number \`n\`. The function should return the sum as an integer.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def sum_of_primes(n): Returns the sum of all prime numbers less than n. return sum(i for i in range(2, n) if is_prime(i))"},{"question":"Write a function to perform an in-order traversal of a binary tree using a stack. The function should return a list of node values in the order they are visited.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform in-order traversal of a binary tree using a stack. Args: root (TreeNode): root of the binary tree. Returns: List[int]: list of node values in in-order traversal. stack = [] result = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() result.append(current.val) current = current.right return result"},{"question":"Write a function to calculate the sum of all the elements in a given list or array. How would you approach this problem in Python?","solution":"def sum_of_elements(elements): Returns the sum of all the elements in the given list or array. Parameters: elements (list): A list of numerical values to be summed up. Returns: int/float: The sum of all the elements in the list. return sum(elements)"},{"question":"Write a function to return the maximum sum of a contiguous subarray within a one-dimensional array of numbers. The function should run in O(n) time complexity.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Args: nums (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to determine if a given list of integers is sorted in non-decreasing order. The function should return \`True\` if the list is sorted, otherwise \`False\`.","solution":"def is_sorted(lst): Determines if the given list of integers is sorted in non-decreasing order. Parameters: lst (list): The list of integers to be checked. Returns: bool: True if the list is sorted in non-decreasing order, False otherwise. return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1))"},{"question":"Write a function to return the level of maximum average in a binary tree. The function should take the root of the binary tree as input and return an integer representing the level with the maximum average. If the tree is empty, return -1.","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_average_level(root): if not root: return -1 level_sums = defaultdict(int) level_counts = defaultdict(int) queue = deque([(root, 0)]) while queue: node, level = queue.popleft() level_sums[level] += node.val level_counts[level] += 1 if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) max_avg = float('-inf') max_avg_level = -1 for level in level_sums: avg = level_sums[level] / level_counts[level] if avg > max_avg: max_avg = avg max_avg_level = level return max_avg_level"},{"question":"Write a function to calculate the product of two matrices using Python. Given two matrices, 'A' and 'B', return the product of these matrices. Assume that the matrices are well-formed and that the number of columns in the first matrix 'A' is equal to the number of rows in the second matrix 'B'.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the product matrix. Parameters: A (list of list of int/float): First matrix B (list of list of int/float): Second matrix Returns: list of list of int/float: Product of matrices A and B # Get the dimensions of the matrices rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform the matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to find the shortest path between two points in a grid. The grid contains obstacles, represented as 1s, and empty spaces represented as 0s. You can only move up, down, left, or right.","solution":"from collections import deque def shortest_path(grid, start, end): Returns the length of the shortest path between start and end in a grid. :param grid: List of lists representing the grid. 0 represents an empty space, 1 represents an obstacle. :param start: Tuple (x, y) representing the starting coordinates. :param end: Tuple (x, y) representing the ending coordinates. :return: Length of the shortest path, or -1 if no path exists. if not grid or grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up visited = set() queue = deque([(start, 0)]) # ((x, y), distance) visited.add(start) while queue: (x, y), dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return -1"},{"question":"Write a function to reverse a string in Python. The function should take a single string as input and return the reversed string. Additionally, ensure that your function handles Unicode characters and line breaks properly.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to reverse the first k elements of the array. The function should take two parameters - an array and an integer k. The function should return the modified array after reversing the first k elements.","solution":"def reverse_first_k_elements(arr, k): Reverses the first k elements of the array. Parameters: arr (list): The input array. k (int): The number of elements from the beginning to reverse. Returns: list: The array with the first k elements reversed. if not arr or k <= 0: return arr k = min(k, len(arr)) # Handle cases where k is larger than the array length return arr[:k][::-1] + arr[k:]"},{"question":"Write a function to flatten a binary tree into a singly linked list. The function should preserve the tree's pre-order traversal order. The list nodes should be dynamically allocated, and the function should not change the original tree's node values.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def flatten_binary_tree_to_linked_list(root): if not root: return None head = ListNode(root.val) current = head stack = [root] while stack: node = stack.pop() if node.right: stack.append(node.right) if node.left: stack.append(node.left) if stack: current.next = ListNode(stack[-1].val) current = current.next return head"},{"question":"Write a function to return a list of all prime factors of a number. The function should take an integer as input and return a list of prime factors in ascending order.","solution":"def prime_factors(n): Returns a list of all prime factors of a number n in ascending order. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Write a function to check if a given string contains a specific sequence of characters.","solution":"def contains_sequence(string, sequence): Returns True if the given string contains the specified sequence of characters, otherwise False. return sequence in string"},{"question":"Write a function to implement the Bubble Sort algorithm in Python. The function should take a list of integers as input and sort the list in ascending order using the Bubble Sort algorithm. Additionally, implement a helper function to verify the correctness of your Bubble Sort implementation by sorting a sample list and comparing it with Python's built-in sorting function.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the Bubble Sort algorithm. n = len(arr) for i in range(n): # Last i elements are already sorted for j in range(0, n - i - 1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr def is_bubble_sort_correct(sample_list): Verifies the correctness of the bubble_sort function by comparing its output with Python's built-in sorted function. # Sort the list using bubble_sort bubble_sorted_list = bubble_sort(sample_list.copy()) # Sort the list using Python's built-in sorted function built_in_sorted_list = sorted(sample_list) # Compare both sorted lists return bubble_sorted_list == built_in_sorted_list"},{"question":"Write a function to find the maximum sum of a subarray within a given 2D array. This subarray should be contiguous and can span across rows and columns.","solution":"def max_sum_subarray_2d(matrix): Finds the maximum sum of a subarray within a given 2D array. This subarray should be contiguous and can span across rows and columns. if not matrix or not matrix[0]: return 0 def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far rows = len(matrix) cols = len(matrix[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_subarray = max_subarray_sum(temp) max_sum = max(max_sum, max_subarray) return max_sum"},{"question":"Write a function to calculate the nth Catalan number.","solution":"def catalan_number(n): Returns the nth Catalan number. if n == 0: return 1 catalan = [0 for i in range(n+1)] catalan[0] = 1 for i in range(1, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - j - 1] return catalan[n]"},{"question":"Write a function to find the length of the longest substring without repeating characters in a given string \`s\`. The string \`s\` consists of only lowercase English letters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string s. char_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_map and char_map[s[end]] >= start: start = char_map[s[end]] + 1 char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function to remove duplicate characters from a string and return the new string. If the input string is empty, the function should return an empty string. Your function should preserve the order of the first occurrence of each character.","solution":"def remove_duplicates(input_str): Removes duplicate characters from a string while preserving the order of the first occurrence of each character. Parameters: input_str (str): The input string from which to remove duplicates. Returns: str: A new string with duplicates removed. seen = set() result = [] for char in input_str: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to write to a file in Python. The function should accept three parameters: the file path, the data to write, and an optional parameter to append to the file if set to \`True\`. If the file does not exist, it should be created. The function should return \`True\` if the data is successfully written to the file, and \`False\` if an error occurs during the process.","solution":"def write_to_file(file_path, data, append=False): Writes data to a file. Parameters: - file_path (str): The path to the file. - data (str): The data to write to the file. - append (bool): If True, the data will be appended to the file. Default is False. Returns: - bool: True if writing was successful, False if an error occurred. mode = 'a' if append else 'w' try: with open(file_path, mode) as file: file.write(data) return True except (OSError, IOError): return False"},{"question":"Write a function to reverse a given string and print it. The function should handle cases where the input string is \`None\` or empty.","solution":"def reverse_string(s): Reverses the given string s. If s is None or an empty string, return s as is. if s is None or s == \\"\\": return s return s[::-1]"},{"question":"Write a function to calculate the area of a circle. The function should take one parameter, which is the radius of the circle, and return the area. Use the formula \`area = π * radius^2\`. For simplicity, use the value of π as 3.14159.","solution":"def circle_area(radius): Calculate the area of a circle with the given radius. Parameters: radius (float): The radius of the circle. Returns: float: The area of the circle. pi = 3.14159 return pi * (radius ** 2)"},{"question":"Write a function to calculate the area of a butane tank in cubic meters. The dimensions of the tank are given as a tuple \`(radius, height)\`. The radius and height are in meters.","solution":"import math def butane_tank_area(dimensions): Calculate the area of a butane tank in cubic meters given its dimensions. Parameters: dimensions (tuple): A tuple containing two floats, the radius and the height of the tank in meters. Returns: float: The area of the butane tank in cubic meters. radius, height = dimensions area = math.pi * radius**2 * height return area"},{"question":"Write a function to find the maximum product of a subarray with at least one number. The function should take a list of integers as input and return the maximum product possible.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray with at least one number. if not nums: return 0 max_prod = nums[0] min_prod = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Write a function to generate a list of prime numbers less than a given number n using the Sieve of Eratosthenes algorithm. The function should return a list of all primes less than n. The algorithm works by iteratively marking the multiples of each prime number starting from 2 as non-prime. The numbers which remain unmarked at the end of this process are the prime numbers.","solution":"def sieve_of_eratosthenes(n): Generates a list of prime numbers less than the given number n using the Sieve of Eratosthenes algorithm. :param n: int, the upper limit (non-inclusive) :return: list of prime numbers less than n if n < 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function to remove duplicate characters from a given string. The function should return the modified string with no duplicates, preserving the original order of characters.","solution":"def remove_duplicates(input_string): Returns a string with duplicate characters removed, preserving the original order of characters. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to find the next smallest number that uses the same digits of the given number.","solution":"def next_smallest_number_with_same_digits(num): Returns the next smallest number that uses the same digits of the given number. If no such number exists, returns -1. num_list = list(str(num)) length = len(num_list) # Step 1: Find the first decrease from the right. i = length - 2 while i >= 0 and num_list[i] <= num_list[i + 1]: i -= 1 if i == -1: return -1 # Step 2: Find the smallest number to the right of 'i', and greater than num_list[i] j = i + 1 while j < length and num_list[j] < num_list[i]: j += 1 j -= 1 # Step 3: Swap the smallest number found in step 2 with num_list[i] num_list[i], num_list[j] = num_list[j], num_list[i] # Step 4: Reverse the part of the list coming after index 'i' num_list = num_list[:i + 1] + num_list[i + 1:][::-1] next_smallest_num = int(\\"\\".join(num_list)) return next_smallest_num"},{"question":"Write a function to check if an array is sorted in ascending order using Python.","solution":"def is_sorted(arr): Checks if the input array is sorted in ascending order. :param arr: List of elements to check :return: True if the array is sorted in ascending order, False otherwise return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"},{"question":"Write a function to find the sum of natural numbers in Python.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. :param n: The number up to which the sum is calculated. :type n: int :return: The sum of the first n natural numbers :rtype: int if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") return n * (n + 1) // 2"},{"question":"Write a function to calculate the total time required to complete a list of tasks. Each task has a start time and an end time, and you need to find the maximum overlap of tasks at any point in time. If no two tasks overlap, the overlap is considered to be 0. The function should return the maximum overlap of tasks at any point in time.","solution":"def max_task_overlap(tasks): Calculate the maximum overlap of tasks at any point in time. :param tasks: List of tuples [(start_time, end_time), ...] representing tasks :return: Maximum number of overlapping tasks at any time events = [] for start, end in tasks: events.append((start, 'start')) events.append((end, 'end')) events.sort() max_overlap = 0 current_overlap = 0 for time, event in events: if event == 'start': current_overlap += 1 if current_overlap > max_overlap: max_overlap = current_overlap else: current_overlap -= 1 return max_overlap"},{"question":"Write a function to calculate the sum of the elements in an array using the idiomatic Python approach.","solution":"def sum_array(array): Returns the sum of the elements in the array. return sum(array)"},{"question":"Write a function to check if the given string is a valid integer.","solution":"def is_valid_integer(s): Checks if the given string is a valid integer. :param s: string to check :return: True if valid integer, False otherwise try: int(s) return True except ValueError: return False"},{"question":"Write a function to count the number of ones in the binary representation of a given integer. For example, the integer 5 has a binary representation of \`101\`, which contains two ones.","solution":"def count_ones(n): Returns the number of ones in the binary representation of a given integer n. return bin(n).count('1')"},{"question":"Write a function to calculate the area of a trapezoid using Python. The function should take the lengths of the two parallel sides (base1 and base2) and the height (h) as parameters. The area of a trapezoid is calculated using the formula: \`area = (base1 + base2) / 2 * h\`.","solution":"def area_of_trapezoid(base1, base2, h): Calculate the area of a trapezoid. Parameters: base1 (float): Length of the first parallel side. base2 (float): Length of the second parallel side. h (float): Height of the trapezoid. Returns: float: Area of the trapezoid. return (base1 + base2) / 2 * h"},{"question":"Write a function to count the number of set bits (i.e., the number of 1-bits) in an unsigned integer. You should write a function named \`count_bits\` that takes an \`unsigned int\` as its argument and returns the count of set bits in its binary representation.","solution":"def count_bits(n): Returns the number of set bits (1-bits) in the binary representation of the given unsigned integer n. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a function to solve the two sum problem.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. Args: nums: List of integers. target: Target integer. Returns: A tuple containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None # In case there is no solution"},{"question":"Write a function to determine the number of distinct elements in a given list of integers. For example, if the input list is \`[1, 2, 2, 3, 4, 4, 5]\`, the function should return \`5\` because there are five distinct elements: \`1\`, \`2\`, \`3\`, \`4\`, and \`5\`.","solution":"def count_distinct_elements(lst): Returns the number of distinct elements in the input list. Args: lst (list): A list of integers Returns: int: Number of distinct integers in the list return len(set(lst))"},{"question":"Write a function to reverse the words in a string. For example, given the string \\"hello world\\", the function should return \\"world hello\\". How can we do this in Python?","solution":"def reverse_words(sentence): Given a string consisting of words separated by spaces, this function returns a new string with the words in reverse order. Arguments: sentence: A string input containing words separated by spaces. Returns: A string with words in reverse order. words = sentence.split() # Split the sentence into words reversed_words = words[::-1] # Reverse the list of words return ' '.join(reversed_words) # Join the reversed list into a new string"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should be able to handle numbers from 0 to 20. You should also handle the case where the input number is negative by raising an exception.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises a ValueError if n is negative or n is greater than 20. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n > 20: raise ValueError(\\"Input must be less than or equal to 20\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to return the count of unique substrings in a given string.","solution":"def count_unique_substrings(s): Returns the count of unique substrings in the given string s. unique_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Write a function to remove duplicates from an array while preserving the order of the elements. The function should take an array of integers as input and return a new array with all duplicates removed.","solution":"def remove_duplicates(arr): Removes duplicates from the array while preserving the order of elements. :param arr: List of integers :return: New list with duplicates removed seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number \`n\` in a vector. The Fibonacci sequence should start with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to n elements. if n <= 0: return [] elif n == 1: return [0] seq = [0, 1] for i in range(2, n): seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Write a function to check if a given string \`s\` matches the pattern \`aabbcc...\`, where \`a\`, \`b\`, \`c\`, etc. are any characters and each character appears exactly twice consecutively. The length of the string will not exceed 100.","solution":"def is_pattern_aabbcc(s): Checks if the given string s matches the pattern aabbcc..., where each character appears exactly twice consecutively. if len(s) % 2 != 0: return False for i in range(0, len(s), 2): if i + 1 >= len(s) or s[i] != s[i + 1]: return False return True"},{"question":"Write a function to reverse the words in a given string without reversing the characters within the words. For example, if the input string is \\"hello world\\", the output should be \\"world hello\\".","solution":"def reverse_words_in_string(s): Reverses the words in the input string without reversing the characters within the words. :param s: A string with words separated by spaces. :return: A string with the words in reverse order. words = s.split() return ' '.join(reversed(words))"},{"question":"Write a function to find all unique rows in a 2D array. Unique rows are those that are not repeated anywhere else in the array. Implement a solution using Python.","solution":"def unique_rows(matrix): Returns a list of unique rows in a 2D array (matrix). unique_rows = [] row_count = {} for row in matrix: row_tuple = tuple(row) if row_tuple in row_count: row_count[row_tuple] += 1 else: row_count[row_tuple] = 1 for row in matrix: if row_count[tuple(row)] == 1: unique_rows.append(row) return unique_rows"},{"question":"Write a function to generate all unique permutations of a given string which may contain duplicate characters.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the input string \`s\`. unique_perms = set(permutations(s)) return [''.join(p) for p in unique_perms]"},{"question":"Write a function to find the sorted list in Python.","solution":"def sort_list(input_list): Returns a sorted version of the input list. Parameters: input_list (list): A list of elements to be sorted. Returns: list: A new list with elements sorted in ascending order. return sorted(input_list) # Example usage: # sorted_list = sort_list([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) # print(sorted_list) # Output should be: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"},{"question":"Write a function to convert Celsius to Fahrenheit and vice versa. The function should be interactive, taking user input and outputting the converted temperature. Ensure that the function handles both conversion cases and provides clear prompts to the user.","solution":"def convert_temperature(): Converts temperature between Celsius and Fahrenheit based on user input. conversion_type = input(\\"Type 'C to F' to convert Celsius to Fahrenheit, or 'F to C' to convert Fahrenheit to Celsius: \\").strip() if conversion_type.lower() == 'c to f': celsius = float(input(\\"Enter temperature in Celsius: \\").strip()) fahrenheit = (celsius * 9/5) + 32 print(f\\"{celsius} Celsius is {fahrenheit} Fahrenheit.\\") elif conversion_type.lower() == 'f to c': fahrenheit = float(input(\\"Enter temperature in Fahrenheit: \\").strip()) celsius = (fahrenheit - 32) * 5/9 print(f\\"{fahrenheit} Fahrenheit is {celsius} Celsius.\\") else: print(\\"Invalid input, please enter 'C to F' or 'F to C'.\\") # Example usage: # convert_temperature()"},{"question":"Write a function to search for the first occurrence of a specific value in an array of integers. If the value is found, return the index; otherwise, return -1.","solution":"def search_first_occurrence(arr, target): Searches for the first occurrence of the specific value in the array. If found, returns the index. Otherwise, returns -1. :param arr: List[int] - array of integers :param target: int - value to search for :return: int - index of the first occurrence of target, or -1 if not found for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Write a function to calculate the sum of all possible subsets of a given set of numbers.","solution":"import itertools def sum_of_all_subsets(nums): Returns the sum of all possible subsets of the given list of numbers. Parameters: nums (list): A list of integers. Returns: int: The sum of all possible subsets. if not nums: return 0 sum_subsets = 0 total_subsets = (1 << len(nums)) - 1 for subset in itertools.chain.from_iterable(itertools.combinations(nums, r) for r in range(len(nums)+1)): if subset: sum_subsets += sum(subset) return sum_subsets"},{"question":"Write a function to find the sum of all elements in a two-dimensional list (nested list).","solution":"def sum_2d_list(nested_list): Returns the sum of all elements in a two-dimensional list. total_sum = 0 for sublist in nested_list: for element in sublist: total_sum += element return total_sum"},{"question":"Write a function to append a new node to the end of a singly linked list. The function will take three parameters: the head of the linked list, the value of the new node, and the position of the new node. The position can be either at the end of the list or at a specific index.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def append_node(head, value, position=\\"end\\"): Appends a new node with the specified value to the linked list either at the end or at a specific index. Parameters: head (ListNode): Head of the singly linked list. value (Any): Value for the new node. position (str or int): Position to insert the new node. Default is \\"end\\". Returns: ListNode: The head of the linked list. new_node = ListNode(val=value) # If the linked list is empty, return the new node as the head if not head: return new_node # If position is \\"end\\", find the end of the list and append the node if position == \\"end\\": current = head while current.next: current = current.next current.next = new_node else: # Insert at a specific index prev = None current = head index = 0 # Iterate to find the correct position while index < position and current: prev = current current = current.next index += 1 if prev is None: # Insert at the head if position is 0 new_node.next = head return new_node else: new_node.next = current prev.next = new_node return head"},{"question":"Write a function to find the number of pairs in the array that have an absolute difference of \`k\`.","solution":"def count_pairs_with_difference(arr, k): Returns the number of pairs in the array that have an absolute difference of k. Args: - arr: List[int]. List of integers. - k: int. The absolute difference to look for. Returns: - int. The number of pairs with absolute difference k. if k < 0: # Absolute difference can't be negative return 0 seen = set() count = 0 for num in arr: if (num + k) in seen: count += 1 if (num - k) in seen: count += 1 seen.add(num) return count"},{"question":"Write a function to traverse a binary tree in preorder traversal and convert it to a min-heap. In addition, for each node, keep track of the number of nodes in the subtree rooted at that node and return it.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def preorder_traversal(root): if root is None: return [] return [root.val] + preorder_traversal(root.left) + preorder_traversal(root.right) def build_min_heap(arr): from heapq import heapify heapify(arr) return arr def to_heap_tree(root, heap, counter): if not root: return 0 root.val = heap[counter[0]] counter[0] += 1 left_count = to_heap_tree(root.left, heap, counter) right_count = to_heap_tree(root.right, heap, counter) return 1 + left_count + right_count def convert_to_min_heap_and_count_nodes(root): if not root: return 0 preorder = preorder_traversal(root) heap = build_min_heap(preorder) counter = [0] num_nodes = to_heap_tree(root, heap, counter) return num_nodes"},{"question":"Write a function to find the duplicates in an integer array. Your function should return a new array containing all the duplicate elements that appear more than once. The order of the elements in the output array should be the same as their first occurrence in the input array.","solution":"def find_duplicates(arr): Returns a list of duplicates that appear more than once in the given array. The order of elements in the output array is the same as their first occurrence in the input array. seen = set() duplicates = set() result = [] for elem in arr: if elem in seen: if elem not in duplicates: result.append(elem) duplicates.add(elem) else: seen.add(elem) return result"},{"question":"Write a function to find all the prime factors of a given number. The function should return a list of prime factors in ascending order.","solution":"def prime_factors(n): Returns a list of all prime factors of a given number in ascending order. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Write a function to calculate the sum and product of two numbers. The function should return both values as a tuple. If the calculation causes an error, such as division by zero, the function should return None.","solution":"def sum_and_product(a, b): Returns a tuple containing the sum and product of a and b. Returns None if an exception occurs (though in this case there are no operations causing an exception). try: result_sum = a + b result_product = a * b return (result_sum, result_product) except Exception: return None"},{"question":"Write a function to calculate the maximum area of a rectangle given the lengths of its sides. The function should take two parameters, the length and the width of the rectangle, and return the maximum possible area that can be formed with the given length and width.","solution":"def maximum_rectangle_area(length, width): Calculate the maximum area of a rectangle given the length and width. Parameters: - length (float): The length of the rectangle. - width (float): The width of the rectangle. Returns: - float: The maximum possible area of the rectangle. return length * width"},{"question":"Write a function to swap the first and last elements of an array. What should be the time complexity of this function?","solution":"def swap_first_last(arr): Swaps the first and last elements of the given list. Parameters: arr (list): A list of elements where the first and last elements will be swapped. Returns: list: The list with first and last elements swapped. if len(arr) < 2: return arr arr[0], arr[-1] = arr[-1], arr[0] return arr # Time complexity of this function is O(1) since it performs a constant amount of work regardless of the size of the list."},{"question":"Write a function to determine if a string \`S\` contains a valid sequence of parentheses. A valid sequence means every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are properly nested. The function should return \`true\` if the sequence is valid, and \`false\` otherwise.","solution":"def is_valid_parentheses(s): Returns true if the string \`s\` contains a valid sequence of parentheses, and false otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Write a function to reverse a stack using exactly one additional stack. You are not allowed to use any other data structures.","solution":"def reverse_stack(stack): Reverses the stack using exactly one additional stack. Parameters: stack (list): A stack implemented as a list. Returns: list: The reversed stack. if not stack: return stack additional_stack = [] # Transfer all elements from the original stack to the additional stack while stack: additional_stack.append(stack.pop()) return additional_stack"},{"question":"Write a function to append data to a file using FILE pointer. The file should be opened in the append mode. If a file does not exist, it should create a new file.","solution":"def append_to_file(file_path, data): Appends data to a file. If the file does not exist, it creates a new one. Args: file_path (str): The path to the file. data (str): The data to append to the file. with open(file_path, 'a') as file: file.write(data + 'n')"},{"question":"Write a function to create a copy of a given dictionary. In Python, dictionaries are mutable, and creating a shallow copy is done using the \`copy()\` method. However, for this problem, you need to write a function that manually creates a copy of a dictionary by iterating through its keys and elements. Additionally, if the dictionary contains other dictionaries as values, the function should also create copies of those nested dictionaries, ensuring that the original and the copied dictionary are completely independent of each other.","solution":"def copy_dict(dictionary): Creates a deep copy of the given dictionary. Args: dictionary (dict): The dictionary to be copied. Returns: dict: A new dictionary that is a deep copy of the input dictionary. new_dict = {} for key, value in dictionary.items(): if isinstance(value, dict): new_dict[key] = copy_dict(value) else: new_dict[key] = value return new_dict"},{"question":"Write a function to normalize a given string to lowercase. Normalization means converting all the characters in the string to their lowercase equivalent. This function should handle any string input and convert each character to lowercase while preserving the original position of each character in the string.","solution":"def normalize_to_lowercase(input_string): Returns a normalized string where all characters are converted to lowercase. return input_string.lower()"},{"question":"Write a function to calculate the total number of distinct paths from the top-left corner to the bottom-right corner of a grid, where you can only move down or right. The grid might contain obstacles that you cannot step on. How can you solve this problem using dynamic programming?","solution":"def unique_paths_with_obstacles(obstacle_grid): Calculate the total number of distinct paths from the top-left corner to the bottom-right corner of a grid with obstacles. :param obstacle_grid: List[List[int]] A 2D grid where 0 represents an empty cell and 1 represents an obstacle. :return: int The number of unique paths from the top-left corner to the bottom-right corner. if not obstacle_grid or obstacle_grid[0][0] == 1: return 0 m, n = len(obstacle_grid), len(obstacle_grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to reverse a string using a recursive approach. Are there any string immutable properties in Python that we should be aware of as a result?","solution":"def reverse_string_recursive(s): Reverses a string using a recursive approach. if len(s) == 0: return s else: return s[-1] + reverse_string_recursive(s[:-1]) # Example usage # print(reverse_string_recursive(\\"hello\\")) # Output: \\"olleh\\""},{"question":"Write a function to calculate the sum of all numbers in a given list, but only if the number is even and greater than zero. If the number is odd or not greater than zero, it should be skipped. If the list is empty or only contains numbers that meet the criteria, return an empty list. The function should handle the case where the input is not a list or contains non-integer values gracefully.","solution":"def sum_even_positive_numbers(input_list): Returns the sum of all numbers in the given list that are even and greater than zero. If the input is not a list or contains non-integer values, it handles gracefully and returns 0. If the list is empty or only contains numbers that meet the criteria, return an empty list. if not isinstance(input_list, list): return 0 total_sum = 0 for item in input_list: if isinstance(item, int) and item > 0 and item % 2 == 0: total_sum += item return total_sum if total_sum > 0 else []"},{"question":"Write a function to find the unique character in a string that appears only once. If there is no such character, return an underscore ('_').","solution":"def find_unique_character(s): Finds the first unique character in the string that appears only once. If no such character exists, returns an underscore ('_'). Args: s (str): Input string Returns: str: The first unique character or '_' from collections import Counter # Count the frequency of each character in the string counter = Counter(s) # Iterate through the string to find the first unique character for char in s: if counter[char] == 1: return char # No unique character found, return '_' return '_'"},{"question":"Write a function to detect the type of triangle based on the lengths of its sides. The function should return whether the triangle is \\"Equilateral\\", \\"Isosceles\\", \\"Scalene\\", or \\"Invalid\\". An \\"Equilateral\\" triangle has all three sides of the same length, an \\"Isosceles\\" triangle has at least two sides of the same length, and a \\"Scalene\\" triangle has all sides of different lengths. If any side of the triangle is non-positive, it is considered an \\"Invalid\\" triangle.","solution":"def detect_triangle_type(a, b, c): Detect the type of triangle based on the lengths of its sides. Returns 'Equilateral', 'Isosceles', 'Scalene', or 'Invalid'. if a <= 0 or b <= 0 or c <= 0: return \\"Invalid\\" if a + b <= c or a + c <= b or b + c <= a: return \\"Invalid\\" if a == b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"Write a function to determine if a given string contains only valid DNS labels. A DNS label consists of letters (a-z, A-Z), digits (0-9), and hyphens (-), but it cannot start or end with a hyphen. Additionally, a DNS label must be no longer than 63 characters. How can we efficiently solve this problem?","solution":"def is_valid_dns_label(label): Determines if the given string is a valid DNS label. Parameters: label (str): The string to be checked. Returns: bool: True if the string is a valid DNS label, False otherwise. if len(label) > 63: return False if label.startswith('-') or label.endswith('-'): return False for char in label: if not (char.isalnum() or char == '-'): return False return True"},{"question":"Write a function to check if a given string is a palindrome (a word, phrase, number, or other sequence of characters that reads the same forward and backward).","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, otherwise False. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(c.lower() for c in s if c.isalnum()) # Check if cleaned string is the same forwards and backwards return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to reverse a part of a singly linked list between the m-th and n-th nodes. The function should take the head of the linked list, along with the integers m and n. The function should reverse the nodes from the m-th to the n-th position without removing the list elements. Instead, you should move them to the correct positions to simulate the reversal. The function should then return the head of the modified linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_between(head, m, n): if head is None or m == n: return head dummy = ListNode(0) dummy.next = head pre = dummy # Move \`pre\` to one node before the m-th node for _ in range(m - 1): pre = pre.next # Reverse the segment between m and n start = pre.next then = start.next for _ in range(n - m): start.next = then.next then.next = pre.next pre.next = then then = start.next return dummy.next"},{"question":"Write a function to insert an element into a sorted array while keeping it sorted. The function should accept the sorted array, the element to be inserted, and the position at which the element should be inserted. The function should return the new sorted array.","solution":"def insert_into_sorted_array(arr, element, position): Inserts an element into a sorted array at a given position while keeping it sorted. Parameters: arr (list): A sorted list of elements. element: The element to be inserted. position (int): The position at which the element should be inserted. Returns: list: The new sorted array with the element inserted. return arr[:position] + [element] + arr[position:]"},{"question":"Write a function to implement the QuickSort algorithm in Python. The function should take a list as a parameter and sort it in-place using the QuickSort algorithm.","solution":"def quicksort(arr): Sorts a list in place using the QuickSort algorithm. def _quicksort(items, low, high): if low < high: pi = partition(items, low, high) _quicksort(items, low, pi - 1) _quicksort(items, pi + 1, high) def partition(items, low, high): pivot = items[high] i = low - 1 for j in range(low, high): if items[j] <= pivot: i += 1 items[i], items[j] = items[j], items[i] items[i + 1], items[high] = items[high], items[i + 1] return i + 1 _quicksort(arr, 0, len(arr) - 1)"},{"question":"Write a function to calculate the largest number of distinct integers that can be selected from a list of integers such that the sum of the selected integers is less than or equal to a given target value.","solution":"def max_distinct_integers(nums, target): Calculate the largest number of distinct integers that can be selected from a list of integers such that the sum of the selected integers is less than or equal to a given target value. Args: nums (list[int]): List of integers to select from. target (int): The target value that the sum of the selected integers should not exceed. Returns: int: The maximum number of distinct integers that can be selected. # remove duplicates and sort the list distinct_nums = sorted(set(nums)) total = 0 count = 0 for num in distinct_nums: if total + num <= target: total += num count += 1 else: break return count"},{"question":"Write a function to determine if a given number is a perfect square or not. Implement the function \`is_perfect_square(n)\` that takes an integer \`n\` as an input and returns \`True\` if \`n\` is a perfect square of an integer, and \`False\` otherwise. A perfect square is an integer that is the square of an integer.","solution":"import math def is_perfect_square(n): Determines if a given number is a perfect square. Parameters: n (int): The number to check Returns: bool: True if n is a perfect square, False otherwise if n < 0: return False root = math.isqrt(n) return root * root == n"},{"question":"Write a function to reverse the digits of a number. For example, if the input number is 123, the output should be 321. Discuss the solution approach and the potential pitfalls when reversing a number.","solution":"def reverse_digits(n): Reverses the digits of a given integer number. Args: n (int): The input number to reverse. Returns: int: The reversed number. # Handle negative numbers by separating the sign sign = -1 if n < 0 else 1 n = abs(n) # Convert number to string, reverse it, and convert back to integer reversed_number = int(str(n)[::-1]) # Apply the original sign to the reversed number return sign * reversed_number"},{"question":"Write a function to calculate the factorial of a number, if it is negative, return None. If the number is zero, the factorial is 1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns None. if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to convert a given number into its hexadecimal representation. You should not use built-in functions or libraries for the conversion.","solution":"def decimal_to_hexadecimal(n): Converts a given number into its hexadecimal representation. Parameters: n (int): The integer number to convert. Returns: str: The hexadecimal representation of the number. if n == 0: return \\"0\\" hex_digits = \\"0123456789ABCDEF\\" hex_result = \\"\\" is_negative = n < 0 if is_negative: n = -n while n > 0: hex_result = hex_digits[n % 16] + hex_result n //= 16 if is_negative: hex_result = \\"-\\" + hex_result return hex_result"},{"question":"Write a function to reverse a string in Python. You can only use basic string operations and no slicing or built-in reversing functions.","solution":"def reverse_string(s): Returns the reversed version of the input string s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to find the initial negative number in a given list of integers. If there is no negative number, return the string \\"No negative number found\\".","solution":"def find_initial_negative(nums): Returns the first negative number in the given list of integers. If no negative number is found, returns \\"No negative number found\\". for num in nums: if num < 0: return num return \\"No negative number found\\""},{"question":"Write a function to calculate the power of a number to another number using recursion. The function should take two parameters: the base (base_number) and the exponent (exp_number). The function should return the power of base_number raised to exp_number.","solution":"def power(base_number, exp_number): Calculates the power of base_number to exp_number using recursion. if exp_number == 0: return 1 elif exp_number < 0: return 1 / power(base_number, -exp_number) else: return base_number * power(base_number, exp_number - 1)"},{"question":"Write a function to check if a number is a power of 2 using bitwise operations. The function should take an integer as input and return a boolean indicating whether the number is a power of 2.","solution":"def is_power_of_2(n): Returns True if the given integer n is a power of 2, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to calculate the sum of numbers in a list. The function should take a list of integers as input and return the sum of those integers. If the list is empty, the function should return 0.","solution":"def sum_of_list(numbers): Returns the sum of numbers in a list. If the list is empty, returns 0. :param numbers: list of integers :return: sum of integers in the list return sum(numbers)"},{"question":"Write a function to calculate the sum of the first N natural numbers and then call this function from the main function.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first N natural numbers. return n * (n + 1) // 2 def main(n): Calls the sum_of_natural_numbers function and returns its result. return sum_of_natural_numbers(n)"},{"question":"Write a function to sort an array using the Merge Sort algorithm. can you solve this in Python?","solution":"def merge_sort(arr): Sorts an array using the Merge Sort algorithm. Parameters: arr (list): a list of elements to be sorted Returns: list: a new sorted list if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): Merges two sorted arrays into one sorted array. Parameters: left (list): a sorted list of elements right (list): a sorted list of elements Returns: list: a merged and sorted list result = [] i, j = 0, 0 while i < len(left) and j < len(right): if left[i] <= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result"},{"question":"Write a function to reverse a linked list. The function should capture all the knowledge of the linked list reversal process.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the given linked list. :param head: The head node of the linked list :return: The new head node of the reversed linked list previous = None current = head while current is not None: next_node = current.next current.next = previous previous = current current = next_node return previous # Helper function to convert a list to a linked list def create_linked_list(values): if not values: return None head = Node(values[0]) current = head for value in values[1:]: current.next = Node(value) current = current.next return head # Helper function to convert a linked list to a list def linked_list_to_list(head): values = [] current = head while current is not None: values.append(current.value) current = current.next return values"},{"question":"Write a function to find the longest substring that appears at least twice. If no such substring exists, return an empty string. The function should be efficient and handle large strings.","solution":"def longest_repeated_substring(s: str) -> str: n = len(s) if n == 0: return \\"\\" # Helper function to get the suffix array def suffix_array_construction(s): return sorted(range(len(s)), key=lambda i: s[i:]) # Helper function to get the LCP array def lcp_array_construction(s, suffix_arr): n = len(s) rank = [0] * n lcp = [0] * n for i, suffix in enumerate(suffix_arr): rank[suffix] = i h = 0 for i in range(n): if rank[i] > 0: j = suffix_arr[rank[i] - 1] while i + h < n and j + h < n and s[i + h] == s[j + h]: h += 1 lcp[rank[i]] = h if h > 0: h -= 1 return lcp suffix_arr = suffix_array_construction(s) lcp = lcp_array_construction(s, suffix_arr) max_len = 0 start_idx = 0 for i in range(1, n): if lcp[i] > max_len: max_len = lcp[i] start_idx = suffix_arr[i] if max_len == 0: return \\"\\" return s[start_idx: start_idx + max_len]"},{"question":"Write a function to find the shortest palindrome by appending characters at the end. The function should take a single string as input and return the shortest palindrome formed by appending characters at the end.","solution":"def shortest_palindrome(s: str) -> str: Finds the shortest palindrome by appending characters at the end of the given string. def is_palindrome(check_str): return check_str == check_str[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): append_str = s[:i][::-1] return s + append_str return s[::-1] + s # In worst case, append the reversed string except for the first char # Example Usage: # shortest_palindrome(\\"race\\") should return \\"racecar\\" # shortest_palindrome(\\"hello\\") should return \\"hellolleh\\""},{"question":"Write a function to generate the nth Fibonacci number. Assume \\"nth\\" starts at 1. For instance, the 1st Fibonacci number is 1, the 2nd is 1, the 3rd is 2, and so forth.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"The Fibonacci sequence index must be a positive integer.\\") if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Write a function to encode strings using Base64 encoding scheme.","solution":"import base64 def encode_base64(input_string): Encodes the given string using Base64 encoding and returns the encoded string. encoded_bytes = base64.b64encode(input_string.encode('utf-8')) return encoded_bytes.decode('utf-8')"},{"question":"Write a function to reverse a string. The function should take a single string as an input and return the reversed version of that string. If the input string is empty or null, the function should return an empty string.","solution":"def reverse_string(s): Returns the reversed version of the input string. If the input string is empty or null, it returns an empty string. if s is None or s == \\"\\": return \\"\\" return s[::-1]"},{"question":"Write a function to find the maximum subarray sum in an array of integers. This function should not only return the maximum subarray sum but also return the indices of the start and end of this subarray. If there are multiple subarrays with the same maximum sum, return the indices of the first one.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum and the indices of the start and end of this subarray. :param arr: List of integers :return: Tuple containing maximum subarray sum, start index, and end index n = len(arr) if n == 0: return (0, -1, -1) max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, n): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Write a function to calculate the sum of the first \`n\` Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.","solution":"def sum_of_fibonacci(n): Returns the sum of the first \`n\` Fibonacci numbers. if n <= 0: return 0 elif n == 1: return 0 elif n == 2: return 1 fib_nums = [0, 1] for _ in range(2, n): next_fib = fib_nums[-1] + fib_nums[-2] fib_nums.append(next_fib) return sum(fib_nums)"},{"question":"Write a function to extract and return the unique elements from a given list of integers in the order they appear. Ensure that each element appears only once in the returned list.","solution":"def unique_elements(lst): Returns a list of unique elements in the order they appear in the input list. seen = set() unique_lst = [] for element in lst: if element not in seen: seen.add(element) unique_lst.append(element) return unique_lst"},{"question":"Write a function to convert the integer number into its hexadecimal string without the '0x' prefix.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal string representation without the '0x' prefix. if n < 0: raise ValueError(\\"Negative numbers are not allowed\\") return hex(n)[2:]"},{"question":"Write a function to detect the character that appears the most frequently in a given string. If there are multiple characters with the same highest frequency, return all of them in a list. If the string is empty, return an empty list.","solution":"def most_frequent_characters(s): Returns the character(s) that appear the most frequently in the given string. If there are multiple characters with the same highest frequency, returns them in a list. If the string is empty, returns an empty list. if not s: return [] from collections import Counter frequency = Counter(s) max_frequency = max(frequency.values()) return [char for char, count in frequency.items() if count == max_frequency]"},{"question":"Write a function to insert an element at a specified index in a list. The function should handle the edge cases where the index might be out of bounds.","solution":"def insert_at_index(lst, index, element): Inserts an element at a specified index in the list. Args: lst (list): List in which the element needs to be inserted. index (int): Position at which the element should be inserted. element: Element to insert. Returns: list: New list with the element inserted. if index < 0: index = 0 elif index > len(lst): index = len(lst) return lst[:index] + [element] + lst[index:]"},{"question":"Write a function to compute the sum of two numbers represented as strings.","solution":"def add_strings(num1, num2): Returns the sum of two numbers represented as strings. return str(int(num1) + int(num2))"},{"question":"Write a function to check if a given number is a palindrome. A palindrome is a number that reads the same backward as forward. For example, 121 is a palindrome, but 123 is not. Set the initial value of \`palindrome_check\` to 1, assuming the number is a palindrome until proven otherwise.","solution":"def is_palindrome_number(n): Checks if a given number is a palindrome. Args: n (int): The number to check whether it is a palindrome or not. Returns: bool: True if the number is a palindrome, False otherwise. original_number = str(n) reversed_number = original_number[::-1] return original_number == reversed_number"},{"question":"Write a function to check if a string \`t\` is a substring of string \`s\` starting from the position \`startPos\`. If \`t\` is a substring of \`s\`, return the smallest index \`j\` such that \`s[i:j] == t\` for some \`i\`. If \`t\` is not a substring starting from \`startPos\`, return -1.","solution":"def find_substring(s, t, startPos): Checks if the string \`t\` is a substring of string \`s\` starting from the position \`startPos\`. If \`t\` is a substring of \`s\` starting from \`startPos\`, return the smallest index \`j\` such that \`s[i:j] == t\` for some \`i\`. If \`t\` is not a substring starting from \`startPos\`, return -1. len_s = len(s) len_t = len(t) if startPos < 0 or startPos >= len_s: return -1 for i in range(startPos, len_s - len_t + 1): if s[i:i + len_t] == t: return i return -1"},{"question":"Write a function to minimize the cost of traveling to all cities in a country. The country consists of \`n\` cities connected by \`m\` roads. Each road has a weight, representing the cost of traveling between two cities. The function should return the minimum cost to travel to all cities.","solution":"import heapq def minimum_cost_to_travel_all_cities(n, roads): Returns the minimum cost to travel to all cities in a country. The country consists of \`n\` cities connected by \`m\` roads. Each road has a weight. Parameters: n (int): Number of cities roads (List[List[int]]): List of roads where each road is represented as [city1, city2, weight] Returns: int: The minimum cost to travel to all cities or -1 if not possible if n == 0: return 0 graph = {i: [] for i in range(n)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) min_heap = [(0, 0)] # (cost, city) visited = [False] * n total_cost = 0 cities_covered = 0 while min_heap and cities_covered < n: cost, city = heapq.heappop(min_heap) if visited[city]: continue visited[city] = True total_cost += cost cities_covered += 1 for neighbor, weight in graph[city]: if not visited[neighbor]: heapq.heappush(min_heap, (weight, neighbor)) if cities_covered == n: return total_cost else: return -1"},{"question":"Write a function to detect a cycle in the linked list and return the node where the cycle begins. If there is no cycle, return \`None\`. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectCycle(head): Detects the node where the cycle begins in a linked list. Parameters: head (ListNode): The head of the linked list. Returns: ListNode: The node where the cycle begins, or None if there is no cycle. if not head or not head.next: return None slow, fast = head, head # First step: determine if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If no cycle is found if not fast or not fast.next: return None # Second step: find the entry to the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to add two numbers without using the '+' operator and without using any additional bit manipulation techniques like '&' or '^'. You can use only basic arithmetic operations like multiplication and division.","solution":"def add_without_plus(a, b): Adds two integers without using the '+' operator and only using basic arithmetic operations like multiplication and division. Assumption: The inputs are non-negative integers. while b != 0: # Calculate the sum using only arithmetic shift carry = (a & b) << 1 # Find carry bits and shift them to the left a = a ^ b # Sum where there are no carry bits b = carry # Assign carry to b to add in the next iteration return a"},{"question":"Write a function to find the maximum value in an array using recursion. What is the base case and how does the recursive step work?","solution":"def find_max(arr): Returns the maximum value in the array using recursion. # Base case: if the array has only one element, return that element if len(arr) == 1: return arr[0] # Recursive step: compare the first element with the maximum of the rest of the array max_of_rest = find_max(arr[1:]) return arr[0] if arr[0] > max_of_rest else max_of_rest"},{"question":"Write a function to implement the AND function for Boolean values. The function takes two Boolean inputs and returns True if both of the inputs are True, otherwise it returns False.","solution":"def boolean_and(a, b): Returns True if both a and b are True, otherwise returns False. return a and b"},{"question":"Write a function to search for a given integer in a sorted array and return its index. If the integer is not present, return -1. Use a recursive approach to implement this function.","solution":"def binary_search(arr, low, high, target): Recursively searches for the target in the sorted array. if high >= low: mid = (high + low) // 2 # If the element is present at the middle itself if arr[mid] == target: return mid # If the element is smaller than mid, then it can only be present in left subarray elif arr[mid] > target: return binary_search(arr, low, mid - 1, target) # Else the element can only be present in right subarray else: return binary_search(arr, mid + 1, high, target) else: # Element is not present in array return -1 def search_in_sorted_array(arr, target): Wrapper function for binary search in a sorted array. return binary_search(arr, 0, len(arr) - 1, target)"},{"question":"Write a function to print the FizzBuzz sequence up to n.","solution":"def fizzbuzz(n): Prints the FizzBuzz sequence up to n. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to print all the numbers between a given range that are divisible by 3 and 5.","solution":"def find_divisibles(start, end): Returns a list of numbers between start and end (inclusive) that are divisible by 3 and 5. return [number for number in range(start, end + 1) if number % 3 == 0 and number % 5 == 0]"},{"question":"Write a function to find the rightmost index of the first repeating element with its frequency count in Python.","solution":"def rightmost_first_repeating(arr): Returns the rightmost index of the first repeating element with its frequency count in the array. Args: arr: List of elements (could be of any type) Returns: A tuple containing the rightmost index and the frequency count of the first repeating element. If no repeating element is found, returns (-1, 0). element_index = {} first_repeating_element = None for i, element in enumerate(arr): if element in element_index: if first_repeating_element is None: first_repeating_element = element elif i > element_index[first_repeating_element]: first_repeating_element = element element_index[element] = i if first_repeating_element is None: return (-1, 0) else: frequency = arr.count(first_repeating_element) rightmost_index = len(arr) - 1 - arr[::-1].index(first_repeating_element) return (rightmost_index, frequency)"},{"question":"Write a function to calculate the Average Absolute Deviation (AAD) of a given array of numbers. AAD is a measure of variability or dispersion of a data set. It's calculated as the average of the absolute differences between each data point in the series and the mean of all the data points.","solution":"def average_absolute_deviation(numbers): Calculate the Average Absolute Deviation (AAD) of a given array of numbers. Parameters: numbers (list of float/int): List of numbers to calculate the AAD for. Returns: float: The Average Absolute Deviation of the provided numbers. if not numbers: return 0.0 mean_value = sum(numbers) / len(numbers) absolute_deviations = [abs(x - mean_value) for x in numbers] aad = sum(absolute_deviations) / len(numbers) return aad"},{"question":"Write a function to implement a Promise that operates similarly to Promise.all but only returns the first resolved value. If any of the Promises reject, the returned Promise should reject with the reason of the first rejection.","solution":"import asyncio from typing import List, Any async def promise_first_or_reject(promises: List[asyncio.Future]) -> Any: Returns the first resolved value from a list of promises, or rejects with the reason of the first rejection. try: return await asyncio.wait_for(asyncio.ensure_future(first_completed(promises)), None) except asyncio.exceptions.InvalidStateError as e: # This should never be hit since InvalidStateError is not an expected output for waits raise RuntimeError(\\"Unexpected error transitioning promises\\") from e async def first_completed(promises: List[asyncio.Future]): futures = asyncio.as_completed(promises) for future in futures: try: result = await future return result except Exception as e: raise e"},{"question":"Write a function to print all the numbers from 1 to 100 in Python.","solution":"def print_numbers(): Prints all the numbers from 1 to 100. for i in range(1, 101): print(i)"},{"question":"Write a function to generate a list of all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. The function should be efficient and handle large ranges effectively.","solution":"def sieve_of_eratosthenes(limit): Generates a list of all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The upper limit up to which to find prime numbers. Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num in range(2, limit + 1) if sieve[num]]"},{"question":"Write a function to check if a given integer is a palindrome. The function should return true if the integer is a palindrome, otherwise return false.","solution":"def is_palindrome(number): Checks if a given integer is a palindrome. Args: number (int): The integer to check. Returns: bool: True if the integer is a palindrome, False otherwise. str_number = str(number) return str_number == str_number[::-1]"},{"question":"Write a function to reverse a singly linked list. The function should take the head pointer of the linked list as its argument and return the new head pointer of the reversed list. You may not create any new nodes.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. Parameters: head (ListNode): The head of the singly linked list. Returns: ListNode: The new head of the reversed singly linked list. prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move prev to the current node current = next_node # Move to the next node in the list return prev # 'prev' will be the new head of the reversed list"},{"question":"Write a function to convert a string to an integer. The function should handle various edge cases such as leading and trailing spaces, negative numbers, and non-numeric characters. Include proper error handling.","solution":"def string_to_int(s): Converts a string to an integer. Parameters: s (str): Input string containing a number. Returns: int: The integer representation of the string. Returns None if the string cannot be converted. s = s.strip() if not s: return None negative = False if s[0] == '-': negative = True s = s[1:] elif s[0] == '+': s = s[1:] if not s: return None value = 0 for char in s: if char.isdigit(): value = value * 10 + int(char) else: return None if negative: value = -value return value"},{"question":"Write a function to extract the maximum possible sum of a non-empty contiguous subarray from an array of integers.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of a non-empty contiguous subarray from an array of integers. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the minimum element in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_min_bst(root): Finds the minimum element in a binary search tree (BST). :param TreeNode root: The root node of the BST. :return int: The value of the minimum element. if not root: return None current = root while current.left: current = current.left return current.val"},{"question":"Write a function to check if a given integer is a power of two. If it is, return \`True\`; otherwise, return \`False\`. A number is a power of two if there is exactly one bit set in its binary representation.","solution":"def is_power_of_two(n): Check if a given integer is a power of two. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to check if a given list is a palindrome permutation. A palindrome permutation is a string that can be rearranged to form a palindrome. In a palindrome, letters can be repeated arbitrarily, but there must be at most one letter with an odd count. For example, the string \\"tactcoa\\" can be rearranged to form the palindrome \\"tacocat\\". If the input list contains only unique elements, the function should return \\"False\\".","solution":"from collections import Counter def is_palindrome_permutation(lst): Checks if the given list can be rearranged to form a palindrome. Returns False if the input list contains only unique elements. if len(lst) == len(set(lst)): return False counter = Counter(lst) odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function to find the median in a stream of numbers. You should be able to add a number to the stream and find the median of all the numbers currently in the stream.","solution":"import bisect class MedianFinder: def __init__(self): self.nums = [] def add_num(self, num: int) -> None: bisect.insort(self.nums, num) def find_median(self) -> float: n = len(self.nums) if n % 2 == 1: return float(self.nums[n // 2]) else: return (self.nums[n // 2 - 1] + self.nums[n // 2]) / 2.0"},{"question":"Write a function to return the minimum element in an array of integers. The function should take the array as input and return the minimum element found. If the array is empty, the function should return a specific message or value indicating that no elements are present.","solution":"def find_minimum(arr): Returns the minimum element in an array of integers. If the array is empty, returns a specific message. if not arr: return \\"Array is empty\\" return min(arr)"},{"question":"Write a function to calculate the sum of two numbers. Please provide the code in Python.","solution":"def sum_two_numbers(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to rearrange the elements of an array so they are in descending order using recursion.","solution":"def recursive_sort_desc(arr): Recursively sorts an array in descending order. if not arr: return [] # Find the maximum element of the array max_elem = max(arr) arr.remove(max_elem) # Recur for the rest of the array and append the maximum element at the start return [max_elem] + recursive_sort_desc(arr)"},{"question":"Write a function to return K integers which are small enough to enter the integer array as an element from the largest to smallest array.","solution":"def find_k_largest(arr, k): Returns K largest integers from the array in descending order. Parameters: arr (list): List of integers k (int): Number of largest integers to return Returns: list: K largest integers in descending order # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # Return the first K elements return sorted_arr[:k]"},{"question":"Write a function to reverse a string in Python. You should consider both iterative and recursive approaches to solving this problem.","solution":"def reverse_string_iterative(s): Reverse the string using an iterative approach. return s[::-1] def reverse_string_recursive(s): Reverse the string using a recursive approach. if len(s) == 0: return s return s[-1] + reverse_string_recursive(s[:-1])"},{"question":"Write a function to find the sum of all even numbers in a given list using Python. You need to handle possible errors for invalid inputs.","solution":"def sum_of_evens(lst): Returns the sum of all even numbers in a given list. If the input is not a list or contains non-integer elements, it raises a ValueError. :param lst: List of integers :return: Integer sum of all even numbers in the list # Check if the input is a list if not isinstance(lst, list): raise ValueError(\\"Input should be a list\\") # Initialize sum variable total = 0 # Iterate through the list for num in lst: # Check if the element is an integer if not isinstance(num, int): raise ValueError(\\"All elements in the list should be integers\\") # Add to sum if the number is even if num % 2 == 0: total += num return total"},{"question":"Write a function to find all permutations of a given string.","solution":"from itertools import permutations def string_permutations(s): Returns all permutations of a given string. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to calculate the factorial of a number in Python. What should the function do if the input is not a non-negative integer?","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate and return the total amount of rainwater that can be stored in a given array representing the elevation of land in inches. The function should iterate through the array, find the left and right maximum bars up to each point, and then calculate the trapped rainwater.","solution":"def trap_rainwater(heights): Calculate the total amount of rainwater that can be trapped given an array of heights. :param heights: List[int] - an array representing the elevation of land in inches. :return: int - total amount of trapped rainwater. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Write a function to calculate the total amount of money in a piggy bank given the number of quarters, dimes, and nickels.","solution":"def calculate_total(quarters, dimes, nickels): Calculate the total amount of money in dollars given the number of quarters, dimes, and nickels. Parameters: quarters (int): The number of quarters. dimes (int): The number of dimes. nickels (int): The number of nickels. Returns: float: The total amount of money in dollars. total = quarters * 0.25 + dimes * 0.10 + nickels * 0.05 return round(total, 2) # rounding to 2 decimal places for currency format"},{"question":"Write a function to reverse both rows and columns of a 2D array in Python. I'm currently using a simple nested loop to reverse rows, but I want to understand how to use NumPy for this task for better efficiency and readability.","solution":"import numpy as np def reverse_rows_and_columns(arr): Reverses both rows and columns of the input 2D array. :param arr: numpy 2D array to be reversed :return: numpy 2D array with both rows and columns reversed return np.fliplr(np.flipud(arr))"},{"question":"Write a function to identify the longest palindromic substring in a given string. A palindromic substring is a string that reads the same backward and forward, consider case sensitivity here.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in a given string. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindrome odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindrome even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Write a function to calculate the height of a binary tree using a different approach other than DFS (Depth First Search). You should aim to provide a solution with a different complexity or different method to calculate the height of the binary tree.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def height_of_binary_tree(root): Returns the height of a binary tree using BFS (Breadth First Search) approach. if not root: return 0 # Initialize the queue with the root node queue = deque([root]) height = 0 while queue: level_size = len(queue) height += 1 # Process all nodes at the current level for _ in range(level_size): node = queue.popleft() if node.left: queue.append(node.left) if node.right: queue.append(node.right) return height"},{"question":"Write a function to find the minimum number of jumps required to reach the end of the array given that each element in the array represents the maximum length that can be jumped forward from that position.","solution":"def min_jumps(arr): if len(arr) <= 1: return 0 if arr[0] == 0: return float('inf') max_reach = arr[0] step = arr[0] jump = 1 for i in range(1, len(arr)): if i == len(arr) - 1: return jump max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return float('inf') step = max_reach - i return float('inf')"},{"question":"Write a function to reverse a string in Python. You should consider case sensitivity where 'A' is not the same as 'a'. How can you implement this in Python?","solution":"def reverse_string(s): Reverses the input string while maintaining case sensitivity. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to calculate the factorial of a number using recursion. Explain each part of the code.","solution":"def factorial(n): Returns the factorial of n using recursion. :param n: Non-negative integer for which to calculate the factorial :return: Factorial of n # Base case: factorial of 0 or 1 is 1 if n <= 1: return 1 # Recursive case: n * factorial of (n - 1) return n * factorial(n - 1)"},{"question":"Write a function to find the missing number in an array containing N-1 integers where each number from 1 to N appears exactly once except for one integer that is missing. The function should be efficient and work in O(N) time complexity.","solution":"def find_missing_number(arr): Find the missing number in the array containing N-1 integers where the integers are from 1 to N. n = len(arr) + 1 total_sum = n * (n + 1) // 2 sum_of_arr = sum(arr) return total_sum - sum_of_arr"},{"question":"Write a function to find the maximum number in a given array. The function should be implemented in a programming language of your choice. For this example, let's use Python.","solution":"def find_maximum(arr): Returns the maximum number in a given array. if not arr: # handle the empty array return None max_num = arr[0] for num in arr[1:]: if num > max_num: max_num = num return max_num"},{"question":"Write a function to find the sum of all the multiples of 3 or 5 below 1000.","solution":"def sum_of_multiples(below): Returns the sum of all the multiples of 3 or 5 below the specified number. return sum(x for x in range(below) if x % 3 == 0 or x % 5 == 0) # Example use # print(sum_of_multiples(1000)) # Output: 233168"},{"question":"Write a function to find the maximum number in an array of numbers, but only if the array contains at least 3 elements. If the array has less than 3 elements, the function should return -1.","solution":"def find_max_in_array(nums): Returns the maximum number in an array if the array contains at least 3 elements. Otherwise, returns -1. if len(nums) < 3: return -1 return max(nums)"},{"question":"Write a function to find the top N elements from a list in Python. How would you implement this function?","solution":"def top_n_elements(lst, n): Returns the top N elements from the list in descending order. Parameters: lst (list): The list from which top N elements are to be found. n (int): The number of top elements to return. Returns: list: The top N elements from the list in descending order. return sorted(lst, reverse=True)[:n]"},{"question":"Write a function to calculate the membership status based on the points earned in a loyalty program.","solution":"def get_membership_status(points): Returns the membership status based on the points earned in a loyalty program. Parameters: points (int): The number of points earned. Returns: str: The membership status ('Bronze', 'Silver', 'Gold', 'Platinum'). if points < 0: raise ValueError(\\"Points cannot be negative\\") elif points < 1000: return 'Bronze' elif points < 5000: return 'Silver' elif points < 10000: return 'Gold' else: return 'Platinum'"},{"question":"Write a function to find all possible combinations of k numbers such that their sum is n, where only numbers from 1 to 9 can be used and each combination should only use each number at most once.","solution":"def combination_sum3(k, n): Finds all possible combinations of k numbers that add up to n, with each combination using numbers from 1 to 9, and each number being used at most once. def backtrack(start, path, k, n): if k == 0 and n == 0: results.append(path) return if k == 0 or n < 0: return for i in range(start, 10): backtrack(i + 1, path + [i], k - 1, n - i) results = [] backtrack(1, [], k, n) return results"},{"question":"Write a function to find the Fibonacci number at a given position 'n'. The position 'n' is a non-negative integer. The function should return the Fibonacci number at that position.","solution":"def fibonacci(n): Returns the Fibonacci number at the given position n. n must be a non-negative integer. if n < 0: raise ValueError(\\"The position 'n' must be a non-negative integer\\") fib_sequence = [0, 1] if n < 2: return fib_sequence[n] for i in range(2, n + 1): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[n]"},{"question":"Write a function to reverse a linked list. Can you explain the steps involved in reversing a linked list?","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list and returns the new head of the list. Parameters: head (Node): The head node of the linked list to reverse. Returns: Node: The new head node of the reversed linked list. prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move prev to this node current = next_node # Move to the next node return prev # New head of the reversed list"},{"question":"Write a function to find the maximum sum of a subarray within a 2D array using Kadane's algorithm. The function should take a 2D array as input and return the maximum sum.","solution":"def max_sum_subarray_2d(matrix): Returns the maximum sum of a subarray within a 2D array using Kadane's algorithm. def kadane(arr): max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for row in range(rows): temp[row] += matrix[row][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a function to check if a given string contains only digits 1-9.","solution":"def contains_only_1_to_9(s: str) -> bool: Checks if the given string \`s\` contains only the digits 1-9. Parameters: s (str): The string to check. Returns: bool: True if the string contains only the digits 1-9, otherwise False. return all(char in '123456789' for char in s)"},{"question":"Write a function to calculate the sum of all even numbers in a given 2D array of integers.","solution":"def sum_of_even_numbers(matrix): This function takes a 2D array (list of lists) and returns the sum of all even numbers. total = 0 for row in matrix: for number in row: if number % 2 == 0: total += number return total"},{"question":"Write a function to reverse a string, but without using any built-in string reversal functions or slicing. Instead, use a loop to manually reverse the string. You must also handle both uppercase and lowercase letters, as well as spaces.","solution":"def reverse_string(s): Reverses the given string without using built-in reversal functions or slicing. Parameters: s (str): The input string to reverse. Returns: str: The reversed string. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to print the binary representation of a given decimal number in two's complement format.","solution":"def decimal_to_twos_complement(n, bits=8): Returns the binary representation of a given decimal number (n) in two's complement format. Parameters: n (int): Decimal number to be converted bits (int): The bit width of the desired binary representation (default is 8) Returns: str: Binary representation in two's complement format if n < 0: n = (1 << bits) + n format_string = '{:0' + str(bits) + 'b}' return format_string.format(n & ((1 << bits) - 1))"},{"question":"Write a function to compare two lists of numbers and return the common elements in both lists using Python.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Write a function to find the maximum sum of a continuous subarray containing at least one number from a given array of integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a continuous subarray containing at least one number from the given array of integers. :param nums: List[int] - List of integers :return: int - Maximum sum of a continuous subarray if not nums: return 0 max_current = nums[0] max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"Write a function to rotate an array to the right by k steps. The rotation should be in-place, meaning no additional space should be used for another array. The function should handle rotations larger than the array length without causing errors.","solution":"def rotate_array(nums, k): Rotate the array to the right by k steps in-place. :param nums: List of integers to be rotated. :param k: Number of steps to rotate the array by. n = len(nums) k %= n # Ensure that k is less than the length of the array nums[:] = nums[-k:] + nums[:-k]"},{"question":"Write a function to detect a cycle in a linked list. Implement two solution strategies: one using Floyd's Tortoise and Hare algorithm and another using a HashSet. Which solution do you think is generally more efficient and why?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def hasCycleUsingFloyd(head): Detects a cycle in a linked list using Floyd's Tortoise and Hare algorithm. slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next if slow == fast: return True return False def hasCycleUsingHashSet(head): Detects a cycle in a linked list using a HashSet to track visited nodes. visited = set() current = head while current is not None: if current in visited: return True visited.add(current) current = current.next return False # Generally, Floyd's Tortoise and Hare algorithm is more efficient in terms of space # because it uses a constant amount of extra space (O(1)), whereas the HashSet approach # requires O(n) extra space where n is the number of nodes in the linked list."},{"question":"Write a function to solve a problem where you are given a list of integers, and you need to find the minimum number of operations required to make all elements in the list equal. Each operation consists of incrementing any element of the list by 1.","solution":"def min_operations_to_equal_elements(nums): Find the minimum number of operations to make all elements in the list equal. Each operation consists of incrementing any element of the list by 1. :param nums: List[int] - List of integers :return: int - Minimum number of operations required if not nums: return 0 min_value = min(nums) operations = sum(num - min_value for num in nums) return operations"},{"question":"Write a function to determine the length of the shortest palindrome that can be made by appending characters to the end of the given string. For example, if the input string is \\"green\\", the function should return 7 because \\"greenneerg\\" is the shortest palindrome that can be formed by appending characters to \\"green\\".","solution":"def shortest_palindrome_length(s): Returns the length of the shortest palindrome that can be made by appending characters to the end of the given string. def is_palindrome(str): return str == str[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return 2 * len(s) - len(s[i:]) return 2 * len(s) - 1"},{"question":"Write a function to output a doubled version of the input number.","solution":"def double_number(number): Returns the doubled value of the input number. return number * 2"},{"question":"Write a function to solve the \\"Longest Palindromic Substring\\" problem in Python.","solution":"def longest_palindromic_substring(s): This function returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # Create a table to store results of subproblems table = [[False for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromes start = 0 maxLength = 1 for i in range(n): table[i][i] = True # Check for substring of length 2. for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True start = i maxLength = 2 # Check for lengths greater than 2. k is length of substring for k in range(3, n + 1): # Fix the starting index for i in range(n - k + 1): # Get the ending index of substring from starting index i and length k j = i + k - 1 # Checking for sub-string from ith index to jth index if table[i + 1][j - 1] and s[i] == s[j]: table[i][j] = True if k > maxLength: start = i maxLength = k return s[start:start + maxLength]"},{"question":"Write a function to find the largest number in an array using Python.","solution":"def find_largest_number(arr): Returns the largest number in the array. :param arr: List[int] - A list of integers :return: int - The largest number in the array if not arr: raise ValueError(\\"Array is empty\\") largest = arr[0] for num in arr: if num > largest: largest = num return largest"},{"question":"Write a function to calculate the sum of all even Fibonacci numbers below a given number N.","solution":"def sum_even_fibonacci_below(n): Returns the sum of even Fibonacci numbers below a given number n. Parameters: n (int): The threshold number above which Fibonacci numbers are not considered. Returns: int: Sum of even Fibonacci numbers below n. a, b = 0, 1 sum_even = 0 while a < n: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Write a function to compute the factorial of a given non-negative integer using a recursive approach. Ensure that the function handles the base case where the input is 0 or 1. Also, write a function to test the correctness of the factorial function using a series of predefined test cases.","solution":"def factorial(n): Computes the factorial of a given non-negative integer n using a recursive approach. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n in (0, 1): return 1 return n * factorial(n - 1)"},{"question":"Write a function to extract the third character from a string. If the string length is less than 3, return an empty string.","solution":"def get_third_character(s): Returns the third character of the given string. If the string length is less than 3, returns an empty string. if len(s) < 3: return '' return s[2]"},{"question":"Write a function to generate the first n terms of the Fibonacci sequence in Python. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with initial conditions F(0) = 0 and F(1) = 1.","solution":"def generate_fibonacci(n): Generates the first n terms of the Fibonacci sequence. :param n: Number of terms to generate (should be a non-negative integer) :return: List of the first n terms of the Fibonacci sequence if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to reverse the words in a string \`s\` but keep the order of words. For instance, if the input string is \\"Hello World\\", the output should be \\"olleH dlroW\\".","solution":"def reverse_words(s): Reverses the characters in each word of the string s, but keeps the order of words. Parameters: s (str): Input string Returns: str: String with each word reversed but the order of words maintained. return ' '.join([word[::-1] for word in s.split()])"},{"question":"Write a function to generate Fibonacci numbers up to a given limit without using recursion. You can use any programming language you are comfortable with.","solution":"def generate_fibonacci(limit): Generate a list of Fibonacci numbers up to the given limit. :param limit: The upper limit for the Fibonacci sequence generation. :return: List of Fibonacci numbers up to the given limit. fib_sequence = [] a, b = 0, 1 while a <= limit: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Write a function to find the maximum elements in each sub-array of size k in a given array of integers. Your function should take two parameters: the input array \`arr\` and the size of each sub-array \`k\`. Output the first element as the maximum in the first sub-array of size \`k\`, the second one as the maximum in the second, and so on.","solution":"def max_in_subarrays(arr, k): Returns the maximum elements in each sub-array of size k. Parameters: arr (list of int): The input array of integers. k (int): The size of each sub-array. Returns: list of int: The maximum elements in each sub-array of size k. if not arr or k <= 0 or k > len(arr): return [] max_elements = [] for i in range(len(arr) - k + 1): max_elements.append(max(arr[i:i + k])) return max_elements"},{"question":"Write a function to determine whether a given number \\"n\\" is a \\"perfect number\\". A perfect number is a positive integer that is equal to the sum of its proper positive divisors excluding the number itself. For example, using 6 as an example, the function should return True because 1, 2 and 3 are the proper positive divisors of 6 and their sum is 6. For the number 12, the function should return False because the sum of its proper divisors is 1 + 2 + 3 + 4 + 6 = 16 which is not equal to 12.","solution":"def is_perfect_number(n): Determines whether a given number n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper positive divisors, excluding itself. :param n: int - The number to be checked. :return: bool - True if n is a perfect number, False otherwise. if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Write a function to determine the mode of a list of integers. The mode is the number that appears most frequently in the list. If there are multiple numbers with the same highest frequency, return all such numbers in ascending order.","solution":"def find_mode(numbers): Returns the mode(s) of the list of integers. If there are multiple modes, returns them in ascending order. from collections import Counter if not numbers: return [] counts = Counter(numbers) max_frequency = max(counts.values()) modes = [num for num, freq in counts.items() if freq == max_frequency] return sorted(modes)"},{"question":"Write a function to solve the N-Queens problem using backtracking. The function should take an integer \`n\` and return a list of lists, where each inner list represents a row of the chessboard with the queen's position indicated by 1 and empty spaces by 0.","solution":"def solve_n_queens(n): Solves the N-Queens problem and returns a list of lists representing the board. Each inner list represents a row of the board with queens indicated by 1 and empty spaces by 0. :param n: int - the number of queens and the dimensions of the board (n x n) :return: List[List[int]] - a solution to the N-Queens problem def is_safe(board, row, col): # Check this column on upper side for i in range(row): if board[i][col] == 1: return False # Check upper diagonal on left side for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 1: return False # Check upper diagonal on right side for i, j in zip(range(row, -1, -1), range(col, n)): if board[i][j] == 1: return False return True def solve(board, row): if row >= n: return True for i in range(n): if is_safe(board, row, i): board[row][i] = 1 if solve(board, row + 1): return True board[row][i] = 0 # backtrack return False board = [[0 for _ in range(n)] for _ in range(n)] solve(board, 0) return board"},{"question":"Write a function to calculate the total cost of an order in a restaurant. The function should take in a list of tuples, where each tuple contains the item name and its corresponding price. The function should return the total cost of the order.","solution":"def calculate_total_order_cost(order): This function calculates the total cost of an order. The order is a list of tuples where each tuple contains the item name and its corresponding price. Parameters: order (list): A list of tuples. Each tuple contains (item name, price). Returns: float: The total cost of the order. total_cost = sum(price for item, price in order) return total_cost"},{"question":"Write a function to reverse a stack using recursion. The function should be able to handle both empty and non-empty stacks. If the stack is empty, it should return an empty stack. If the stack is non-empty, it should reverse the order of elements so that the last element becomes the first. Ensure that the function maintains the integrity of the stack structure.","solution":"def reverse_stack(stack): Reverses a stack using recursion. Args: stack (list): The stack to be reversed, represented as a list where the end of the list is the top of the stack. Returns: list: The reversed stack. if not stack: return stack def insert_at_bottom(stack, item): if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse(stack): if stack: temp = stack.pop() reverse(stack) insert_at_bottom(stack, temp) reverse(stack) return stack"},{"question":"Write a function to count the occurrences of a substring within a string, treating overlapping occurrences as distinct. For example, if the substring is \\"test\\" and the main string is \\"testtest\\", the function should return 2 because \\"test\\" occurs twice in \\"testtest\\".","solution":"def count_overlapping_substrings(main_string, substring): Returns the count of overlapping occurrences of substring within main_string. count = start = 0 while True: start = main_string.find(substring, start) if start == -1: break count += 1 start += 1 # Increment start to allow for overlapping matches return count"},{"question":"Write a function to find the minimum value in a given list of integers using Python. If the list is empty, the function should return \`None\`.","solution":"def find_minimum(lst): Returns the minimum value in a given list of integers. If the list is empty, return None. if not lst: return None return min(lst)"},{"question":"Write a function to generate a Fibonacci sequence up to the nth number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Generate a Fibonacci sequence up to the nth number. Parameters: n (int): The number of terms in the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"Write a function to reverse the words in a sentence and also reverse each word itself. The function should handle multiple spaces and remove them.","solution":"def reverse_sentence_and_words(sentence): Reverses the words in the sentence and also reverses each word. Handles multiple spaces and removes them. words = sentence.split() reversed_words = [word[::-1] for word in words] reversed_sentence = \\" \\".join(reversed_words[::-1]) return reversed_sentence"},{"question":"Write a function to calculate the factorial of a number. The function should handle edge cases properly.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError if n is a negative integer. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find all elements that appear 'k' times in an array of integers, and return them as a list.","solution":"def find_elements_appear_k_times(nums, k): Returns a list of elements that appear exactly k times in the input list of integers. :param nums: List of integers :param k: Integer :return: List of integers that appear exactly k times from collections import Counter counter = Counter(nums) return [num for num, count in counter.items() if count == k]"},{"question":"Write a function to find the largest palindrome number that can be formed by the product of two numbers within a given range. The range will be provided as two parameters: the starting number and the ending number.","solution":"def is_palindrome(n): Checks if a given number n is a palindrome. return str(n) == str(n)[::-1] def largest_palindrome_product(start, end): Finds the largest palindrome number that can be formed by the product of two numbers within a given range. Parameters: start (int): The starting number of the range. end (int): The ending number of the range. Returns: int: Largest palindrome made from the product of two numbers within the range. max_palindrome = 0 for i in range(start, end + 1): for j in range(i, end + 1): # start from i to avoid redundant checks product = i * j if is_palindrome(product) and product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"Write a function to calculate the summation of all even numbers within a given range, including both endpoints.","solution":"def sum_even_numbers_in_range(start, end): Returns the summation of all even numbers within a given range, including both endpoints. Parameters: start (int): Start of the range. end (int): End of the range. Returns: int: Sum of all even numbers within the range. return sum(i for i in range(start, end + 1) if i % 2 == 0)"},{"question":"Write a function to calculate the cumulative frequency distribution from a list of data points. The frequency distribution should be calculated for a range of bins specified by the user. The function should return a dictionary where the key is the bin and the value is the frequency count. Use numpy to create the bins and compute the histogram counts.","solution":"import numpy as np def cumulative_frequency_distribution(data, bins): Calculates the cumulative frequency distribution for the given data points and bins. Parameters: data (list of int/float): The data points. bins (int): The number of bins to divide the data into. Returns: dict: A dictionary where the key is the bin range and the value is the cumulative frequency count. histogram, bin_edges = np.histogram(data, bins=bins) cumulative_frequency = np.cumsum(histogram) freq_distribution = {} for i in range(len(bin_edges) - 1): bin_range = (bin_edges[i], bin_edges[i + 1]) freq_distribution[bin_range] = cumulative_frequency[i] return freq_distribution"},{"question":"Write a function to determine if a given integer is a power of two. A power of two is an integer that can be expressed as 2 raised to an integer power. For example, 1, 2, 4, 8 are powers of two. Note that 0 and 1 are not considered powers of two in this context.","solution":"def is_power_of_two(n): Determine if a given integer is a power of two. Parameters: n (int): The integer to check. Returns: bool: True if n is a power of two, False otherwise. if n <= 1: return False return n & (n - 1) == 0"},{"question":"Write a function to find the index of an element in a sorted array that is closest to a given target number. If the target number is exactly equal to one of the elements in the array, return the index of that element. If the target is not in the array, return the index of the nearest element.","solution":"def closest_index(arr, target): Returns the index of the element in the sorted array 'arr' that is closest to the given target number. If the target number is exactly equal to one of the elements in the array, return the index of that element. Parameters: - arr: list of sorted integers - target: integer target value Returns: - int: index of the closest element in the array if not arr: raise ValueError(\\"The array should not be empty.\\") left, right = 0, len(arr) - 1 closest_index = -1 # To store the index of the closest element smallest_diff = float('inf') # To store the smallest difference found while left <= right: mid = left + (right - left) // 2 diff = abs(arr[mid] - target) # Update the closest index if current difference is smaller if diff < smallest_diff: smallest_diff = diff closest_index = mid if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return closest_index"},{"question":"Write a function to find the maximum value in an array. If the array is empty, the function should return \`None\`. How can I approach this problem using Python?","solution":"def find_max_in_array(arr): Returns the maximum value in the array. If the array is empty, returns None. if not arr: return None max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Write a function to find the average of a list of numbers in Python. How would you handle possible exceptions such as empty lists or non-numeric values in the list?","solution":"def average(numbers): Returns the average of a list of numbers. Handles empty list and non-numeric values in the list. :param numbers: List of numbers :return: float - average of numbers or raises ValueError for invalid inputs if not numbers: raise ValueError(\\"The list is empty\\") cleaned_numbers = [] for num in numbers: if isinstance(num, (int, float)): cleaned_numbers.append(num) else: raise ValueError(f\\"Non-numeric value found: {num}\\") return sum(cleaned_numbers) / len(cleaned_numbers)"},{"question":"Write a function to check if a given number is a perfect square. If it is, the function should return True; otherwise, it should return False. Additionally, create a function that will check if the given number is a perfect cube. If it is, then it should return True; otherwise, it should return False.","solution":"import math def is_perfect_square(n): Checks if a given number n is a perfect square. Parameters ---------- n : int or float The number to check. Returns ------- bool True if n is a perfect square, False otherwise. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n def is_perfect_cube(n): Checks if a given number n is a perfect cube. Parameters ---------- n : int or float The number to check. Returns ------- bool True if n is a perfect cube, False otherwise. if n < 0: return False cbrt_n = int(round(n ** (1/3.0))) return cbrt_n * cbrt_n * cbrt_n == n"},{"question":"Write a function to reverse an array in-place without using any additional space. Your function should take an array as its input and return the same array but reversed.","solution":"def reverse_array(arr): Reverses the array in-place without using any additional space. Parameters: arr (list): The list to be reversed. Returns: list: The same list object, with elements reversed. left = 0 right = len(arr) - 1 while left < right: # Swap the elements at the left and right indices arr[left], arr[right] = arr[right], arr[left] # Move the pointers towards each other left += 1 right -= 1 return arr"},{"question":"Write a function to calculate the factorial of a number and then find the sum of all digits in the factorial. For example, 5! = 120, and the sum of the digits is 3 (1+2+0).","solution":"def factorial(n): Returns the factorial of a number n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def sum_of_digits_in_factorial(n): Returns the sum of the digits in the factorial of a number n. fac = factorial(n) return sum(int(digit) for digit in str(fac))"},{"question":"Write a function to remove duplicates from an unsorted array of integers using Python, preserving the order of the array. You need to solve this problem without using any extra space, if possible.","solution":"def remove_duplicates(arr): Removes duplicates from an unsorted array while preserving order. seen = set() output = [] for num in arr: if num not in seen: seen.add(num) output.append(num) return output"},{"question":"Write a function to find all the prime factors of a given number. A prime factor is a factor that is a prime number. For example, the prime factors of 60 are 2, 2, 3, and 5. Write a function that takes an integer as input and returns a list of its prime factors, sorted in ascending order.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n in ascending order. factors = [] # Handle even numbers first while n % 2 == 0: factors.append(2) n //= 2 # Handle odd factors factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a function to calculate the sum of two numbers a and b.","solution":"def sum_two_numbers(a, b): Returns the sum of two numbers a and b. return a + b"},{"question":"Write a function to return the number of islands in a 2D grid where the land (1) is connected vertically or horizontally. You may assume all four edges of the grid are surrounded by water (0).","solution":"from typing import List def num_islands(grid: List[List[int]]) -> int: Return the number of islands in a 2D grid where '1' represents land and '0' represents water. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = set() def dfs(r, c): Depth First Search to mark visited land. if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or (r, c) in visited: return visited.add((r, c)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: nr, nc = r + dr, c + dc dfs(nr, nc) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and (r, c) not in visited: island_count += 1 dfs(r, c) return island_count"},{"question":"Write a function to perform division of two numbers and return the result.","solution":"def divide(a, b): Returns the result of dividing a by b. Args: a (int or float): The dividend. b (int or float): The divisor. Raises: ValueError: If b is zero. Returns: float: The result of the division. if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b"},{"question":"Write a function to calculate the sum of an integer list, but this list contains both positive and negative integers. The sum should ignore the negative numbers.","solution":"def sum_positive_numbers(numbers): Returns the sum of only the positive numbers in the list. :param numbers: List of integers (both positive and negative) :return: Sum of positive integers return sum(number for number in numbers if number > 0)"},{"question":"Write a function to determine the length of the longest palindromic subsequence (LPS) in a given string. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.","solution":"def longest_palindromic_subsequence(s): Determines the length of the longest palindromic subsequence in a given string. :param s: Input string :returns: Length of the longest palindromic subsequence n = len(s) # Create a 2D dp array with all elements initialized to 0 dp = [[0] * n for _ in range(n)] # Base case: a single character is always a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Fill the dp array for cl in range(2, n + 1): # cl is the current length of the substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The result is in dp[0][n-1] return dp[0][n-1]"},{"question":"Write a function to calculate the hypotenuse of a right triangle given the lengths of the other two sides. Use the Pythagorean theorem a^2 + b^2 = c^2, where c is the hypotenuse.","solution":"import math def calculate_hypotenuse(a, b): Returns the hypotenuse of a right triangle given sides a and b. return math.sqrt(a**2 + b**2)"},{"question":"Write a function to calculate the sum of all the elements in an array of integers. The function should handle edge cases such as empty arrays and arrays with negative numbers.","solution":"def sum_of_elements(arr): Returns the sum of all the elements in an array of integers. Handles edge cases such as empty arrays and arrays with negative numbers. :param arr: List[int] :return: int return sum(arr)"},{"question":"Write a function to find the N-th Harmonic Number using Python.","solution":"def nth_harmonic_number(n): Returns the N-th Harmonic number. The N-th Harmonic number is defined as the sum of the reciprocals of all integers from 1 to N. if n < 1: raise ValueError(\\"n must be greater than or equal to 1\\") harmonic_number = sum(1.0 / i for i in range(1, n + 1)) return harmonic_number"},{"question":"Write a function to generate all the permutations of a string. Your function should take a string as input and return a list of all possible permutations. For example, if the input string is \\"abc\\", the function should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"from itertools import permutations def generate_permutations(s): Returns all possible permutations of a string. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to determine the maximum subarray sum in a given integer array. You should follow the Kadane's algorithm to achieve this. If the subarray sum is negative or if all elements are negative, return 0.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum in the given array using Kadane's algorithm. If the max subarray sum is negative, or all elements are negative, returns 0. if not arr: return 0 max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far if max_so_far > 0 else 0"},{"question":"Write a function to determine if a given string has all unique characters. The string can contain any of the standard ASCII characters.","solution":"def has_unique_characters(s): Determines if the given string has all unique characters. Args: s (str): The input string to check Returns: bool: True if all characters are unique, False otherwise return len(set(s)) == len(s)"},{"question":"Write a function to reverse a string in Python without using the slicing method (i.e., \`[::-1]\`).","solution":"def reverse_string(s): Returns the reversed string of s. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to return the reverse of a string. For example, \`reverseString(\\"hello\\")\` should return \`\\"olleh\\"\`.","solution":"def reverseString(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to find the longest common subsequence in two strings.","solution":"def longest_common_subsequence(X, Y): Returns the length of the longest common subsequence in two strings X and Y. m = len(X) n = len(Y) # Create a 2D array to store the lengths of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a function to calculate the sum of an arithmetic series.","solution":"def arithmetic_series_sum(a1, an, n): Returns the sum of an arithmetic series. Parameters: a1 (int, float): the first term of the series an (int, float): the last term of the series n (int): the number of terms in the series Returns: int, float: the sum of the arithmetic series return (n * (a1 + an))/2"},{"question":"Write a function to check if a string is a pangram or not.","solution":"def is_pangram(s): Returns True if the string s is a pangram, False otherwise. A pangram is a sentence containing every letter of the alphabet at least once. alphabet = set('abcdefghijklmnopqrstuvwxyz') return alphabet <= set(s.lower())"},{"question":"Write a function to find the minimum element in a given array of integers. The function is called \`min_element\` and takes an array \`arr[]\` as a parameter.","solution":"def min_element(arr): Returns the minimum element in the given array of integers. :param arr: List of integers :return: The minimum integer in the array if len(arr) == 0: raise ValueError(\\"Array must not be empty.\\") min_val = arr[0] for num in arr[1:]: if num < min_val: min_val = num return min_val"},{"question":"Write a function to return the first or last character of a given string. The function should take two parameters: the string \`s\` and a boolean \`take_first\`. If \`take_first\` is \`True\`, the function should return the first character of the string. If \`take_first\` is \`False\`, it should return the last character of the string.","solution":"def get_character(s, take_first): Return the first or last character of the given string \`s\` based on the boolean \`take_first\`. Parameters: s (str): The input string. take_first (bool): If True, return the first character; if False, return the last character. Returns: str: The first or last character of the string. if take_first: return s[0] else: return s[-1]"},{"question":"Write a function to capitalize the first letter of a string in Python.","solution":"def capitalize_first_letter(s): Capitalizes the first letter of a given string. :param s: input string :return: string with the first letter capitalized if not s: return s return s[0].upper() + s[1:]"},{"question":"Write a function to generate the Fibonacci sequence in C# up to a given number n. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the given number n. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to calculate the nth Fibonacci number in Python, considering Python's built-in maximum recursion depth.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: non-negative integer indicating the position in the Fibonacci sequence :return: the nth Fibonacci number if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to insert a single node at a specific position in a singly linked list. The function should take the value of the node and the position as parameters. Position starts from 1 and represents the index in the list. If the position is less than 1 or greater than the length of the list plus one, the function should return an error message. If the position is 1, the function should insert the node at the beginning of the list. If the position is equal to the length of the list plus one, the function should insert the node at the end of the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def insert_node(head, value, position): Insert a node with the given value at the specified position in the singly linked list. Position starts from 1. if position < 1: return \\"Error: Position should be 1 or greater.\\" new_node = ListNode(value) # Special case to insert at the beginning if position == 1: new_node.next = head return new_node current = head index = 1 # Traverse to the node just before the insertion point while current and index < position - 1: current = current.next index += 1 if not current: # Position is beyond the length of the list return \\"Error: Position is beyond the length of the list plus one.\\" # Insert the new node at the correct position new_node.next = current.next current.next = new_node return head"},{"question":"Write a function to find all triplets in an array that sum up to zero.","solution":"def three_sum(nums): Returns a list of triplets in nums that sum up to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Write a function to divide two integers without using the division, multiplication, or modulus operators.","solution":"def divide(dividend, divisor): Divide two integers without using the division, multiplication, or modulus operators. :param dividend: The number to be divided. :param divisor: The number by which division is performed. :return: The quotient of the division. if divisor == 0: raise ValueError(\\"Divisor cannot be zero\\") # Handling the sign of the result negative = (dividend < 0) != (divisor < 0) # Working with absolute values dividend = abs(dividend) divisor = abs(divisor) quotient = 0 # Subtracting the divisor from the dividend until dividend becomes less than divisor while dividend >= divisor: current_divisor = divisor multiple = 1 while dividend >= (current_divisor << 1): current_divisor <<= 1 multiple <<= 1 dividend -= current_divisor quotient += multiple return -quotient if negative else quotient"},{"question":"Write a function to find the nth Fibonacci number in Python. The function should be able to handle large values of n efficiently. To optimize, use memoization.","solution":"def fibonacci(n, memo=None): if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to find the sum of all numbers between 1 and n (inclusive) that are divisible by both 3 and 5.","solution":"def sum_divisible_by_3_and_5(n): Returns the sum of all numbers between 1 and n (inclusive) that are divisible by both 3 and 5. return sum(x for x in range(1, n + 1) if x % 3 == 0 and x % 5 == 0)"},{"question":"Write a function to find the next greater element for each element in an array. The next greater element for a given element x is the first greater element on the right side of x in the array. Elements for which no greater element exist, consider the next greater element as -1. You should implement this using a stack.","solution":"def next_greater_elements(arr): Finds the next greater element for each element in an array. Parameters: arr (list): A list of integers. Returns: list: A list where the index i contains the next greater element of arr[i] or -1 if there is none. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: index = stack.pop() result[index] = arr[i] stack.append(i) return result"},{"question":"Write a function to swap the values of two integers without using temporary variables or arithmetic operations.","solution":"def swap_numbers(a, b): Swaps the values of a and b without using temporary variables or arithmetic operations. # Using bitwise XOR to swap without temporary variables or arithmetic a = a ^ b b = a ^ b a = a ^ b return a, b"},{"question":"Write a function to iterate through an array and output the sum of all even numbers.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function to determine if a given binary tree is a perfect binary tree or not. A perfect binary tree is a binary tree where all internal nodes have exactly two children, and all leaf nodes are at the same level.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root): Determine if a given binary tree is a perfect binary tree or not. def depth(node): d = 0 while node: d += 1 node = node.left return d def is_perfect_root(node, d, level=0): if not node: return True if not node.left and not node.right: return d == level + 1 if not node.left or not node.right: return False return is_perfect_root(node.left, d, level + 1) and is_perfect_root(node.right, d, level + 1) d = depth(root) return is_perfect_root(root, d)"},{"question":"Write a function to identify the first occurring number that appears consecutively in a given integer list. If no such number exists, return -1.","solution":"def first_consecutive_number(nums): Identify the first occurring number that appears consecutively in the given integer list. If no such number exists, return -1. for i in range(len(nums) - 1): if nums[i] == nums[i + 1]: return nums[i] return -1"},{"question":"Write a function to calculate the sum of the first n natural numbers using a for loop in Python.","solution":"def sum_of_first_n_natural_numbers(n): Calculate the sum of the first n natural numbers. :param n: An integer representing the number of first natural numbers to sum. :return: The sum of the first n natural numbers. sum_total = 0 for i in range(1, n + 1): sum_total += i return sum_total"},{"question":"Write a function to find the shortest word in a list of words. How would you approach this problem in Python?","solution":"def find_shortest_word(words): Returns the shortest word in a list of words. If there are multiple words with the same shortest length, return the first one encountered. if not words: return None shortest_word = words[0] for word in words: if len(word) < len(shortest_word): shortest_word = word return shortest_word"},{"question":"Write a function to reverse an integer. The integer might be positive or negative, and reverse should handle the sign correctly.","solution":"def reverse_integer(n): Reverses the digits of the integer n. If n is negative, the sign is retained after reversing. Args: n (int): The integer to reverse. Returns: int: The reversed integer with the sign correctly handled. sign = -1 if n < 0 else 1 reversed_n = int(str(abs(n))[::-1]) return sign * reversed_n"},{"question":"Write a function to reverse a string in Python using recursion without using any built-in functions or methods specific to strings.","solution":"def reverse_string(s): Reverses a string using recursion. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. # Base case: if the string is empty or a single character, return it as is if len(s) <= 1: return s # Recursive case: return the last character + the reverse of everything before it return s[-1] + reverse_string(s[:-1])"},{"question":"Write a function to calculate the product of all elements in a given list except the element at the current index. The function should return a list where each element is the product of all other elements in the list, excluding the element at the corresponding index.","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the list, excluding the element at the corresponding index. length = len(nums) if length == 0: return [] answer = [1] * length left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Write a function to sort an array using the bubble sort algorithm. Additionally, the function should track and return the number of comparisons made during the sorting process. Suppose the array is filled with integers ranging from -100 to 100 only.","solution":"def bubble_sort_with_comparisons(arr): Performs bubble sort on the given array and returns the sorted array along with the number of comparisons made during the sorting process. Args: arr (list): List of integers to sort. Returns: tuple: Sorted list and the number of comparisons made. n = len(arr) comparisons = 0 for i in range(n): for j in range(0, n - i - 1): comparisons += 1 if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr, comparisons"},{"question":"Write a function to return the index of the first occurrence of a given element in a list. If the element is not found, return -1.","solution":"def find_first_occurrence(lst, element): Returns the index of the first occurrence of element in lst. If the element is not found, return -1. try: return lst.index(element) except ValueError: return -1"},{"question":"Write a function to compute the factorial of a number. In your function, consider adding error handling to manage cases where the input is not a positive integer. If the input is a negative number or a non-integer, the function should raise a ValueError with an appropriate error message.","solution":"def factorial(n): Computes the factorial of a positive integer n. Raises ValueError if n is a negative number or a non-integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to serialize a binary tree into a string and deserialize it back to its original binary tree structure.","solution":"import json class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Encodes a tree to a single string using JSON representation. def helper(node): if not node: return None return { 'val': node.val, 'left': helper(node.left), 'right': helper(node.right) } return json.dumps(helper(root)) def deserialize(data): Decodes your encoded data to tree. def helper(node_data): if node_data is None: return None node = TreeNode(node_data['val']) node.left = helper(node_data['left']) node.right = helper(node_data['right']) return node return helper(json.loads(data))"},{"question":"Write a function to check if an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome, while 123 is not. Handle negative numbers by returning False, as negative numbers are not considered palindromes.","solution":"def is_palindrome(n): Check if an integer is a palindrome. :param int n: the integer to check :return: True if n is a palindrome, False otherwise :rtype: bool # Negative numbers are not palindromes if n < 0: return False # Convert the number to a string and compare with its reverse str_n = str(n) return str_n == str_n[::-1]"},{"question":"Write a function to find the smallest integer greater than or equal to the arithmetic mean of a given array of integers. The arithmetic mean of an array is calculated by summing all the integers in the array and then dividing by the total number of integers.","solution":"import math def smallest_integer_ge_mean(arr): Returns the smallest integer greater than or equal to the arithmetic mean of a given array. if not arr: return 0 # Depending on the desired behavior for an empty array mean = sum(arr) / len(arr) return math.ceil(mean)"},{"question":"Write a function to find the intersection of two lists, where each list contains integers. How can you implement this using Python?","solution":"def intersection(lst1, lst2): Returns the intersection of two lists. return list(set(lst1) & set(lst2))"},{"question":"Write a function to convert binary string to decimal number in Python. Please include comments to explain each step of the process.","solution":"def binary_to_decimal(binary_str): Converts a binary string to a decimal number. Args: binary_str (str): A string representing a binary number. Returns: int: The decimal representation of the binary string. decimal_number = 0 binary_length = len(binary_str) # Iterate through the binary string for i in range(binary_length): # Extract the current bit as an integer (0 or 1) bit = int(binary_str[binary_length - i - 1]) # Each bit value is multiplied by 2 raised to the power of its position decimal_number += bit * (2 ** i) return decimal_number"},{"question":"Write a function to implement the-Level Order Traversal/Breadth-First Search (BFS) of a binary tree.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Returns the level order traversal (BFS) of a binary tree. if not root: return [] result = [] queue = deque([root]) while queue: level_length = len(queue) level_nodes = [] for _ in range(level_length): node = queue.popleft() level_nodes.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_nodes) return result"},{"question":"Write a function to solve the dynamic programming problem known as \\"Longest Increasing Subsequence\\" (LIS).","solution":"def longest_increasing_subsequence(nums): Finds the length of the longest increasing subsequence in the list of numbers. :param nums: List[int] - A list of integers. :return: int - The length of the longest increasing subsequence. if not nums: return 0 # Initialize the dp array with 1s dp = [1] * len(nums) # Fill the dp array with the length of LIS that ends with nums[i] for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence return max(dp)"},{"question":"Write a function to calculate the total number of days in a given month, considering whether the input year is a leap year or not.","solution":"def is_leap_year(year): Check if the given year is a leap year. A leap year is divisible by 4, but years divisible by 100 are not leap years unless they are also divisible by 400. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True else: return False def days_in_month(year, month): Return the number of days in the given month of a particular year. Accounts for leap years. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # Days in each month for a common year common_year_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Days in each month for a leap year leap_year_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if is_leap_year(year): return leap_year_days[month - 1] else: return common_year_days[month - 1]"},{"question":"Write a function to convert a binary string to a hexadecimal string in Python. The function should take two parameters: the binary string to be converted and the number of characters in the output hexadecimal string.","solution":"def binary_to_hex(binary_str, num_chars): Converts a binary string to a hexadecimal string of specified length. Parameters: binary_str (str): The binary string to be converted. num_chars (int): Number of characters in the output hexadecimal string. Returns: str: The hexadecimal string representation of the binary string. # Convert binary string to integer integer_value = int(binary_str, 2) # Convert integer to hexadecimal string hex_str = hex(integer_value)[2:] # slicing [2:] to remove '0x' prefix # Ensure the hexadecimal string contains the specified number of characters padded_hex_str = hex_str.zfill(num_chars) return padded_hex_str"},{"question":"Write a function to find the maximum product of two distinct numbers in the list. You can assume there are no negative numbers in the list.","solution":"def max_product_of_two(nums): Returns the maximum product of two distinct numbers in the list. if len(nums) < 2: raise ValueError(\\"The input list must contain at least two numbers.\\") # Sort the list nums.sort() # Find the product of the two largest numbers return nums[-1] * nums[-2]"},{"question":"Write a function to calculate the area of a triangle given the lengths of its three sides. The function should check if the provided sides can form a valid triangle using Heron's formula. If the sides do not form a valid triangle, the function should return -1.","solution":"import math def calculate_triangle_area(a, b, c): Returns the area of a triangle given its three sides a, b, and c using Heron's formula. If the sides do not form a valid triangle, returns -1. # Check if the given sides can form a triangle using triangle inequality theorem if a <= 0 or b <= 0 or c <= 0 or (a + b <= c) or (a + c <= b) or (b + c <= a): return -1 # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a function to find the next greater element for each element in an array. The Next Greater Element of an element x in the array is the first greater element on the left, i.e., to the right of x in the array. For example, the next greater element for 4 in the array [1 3 4 2] is 3. If there is no next greater element for an element, you will assign -1 for that element.","solution":"def next_greater_elements(arr): Finds the next greater element for each element in the array. Parameters: arr (list): A list of integers. Returns: list: A list where each element is replaced by the first greater element to its right, or -1 if no such element exists. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = arr[i] stack.append(i) return result"},{"question":"Write a function to perform a binary search on a sorted list of numbers. The function should return the index of the target number if it exists in the list, and -1 if it does not. The function should be recursive.","solution":"def binary_search_recursive(arr, target, low, high): Perform a binary search on a sorted list of numbers recursively. :param arr: List[int] - A sorted list of numbers :param target: int - The target number to search for :param low: int - The lower index of the current search range :param high: int - The upper index of the current search range :return: int - The index of the target number if found, otherwise -1 if low > high: return -1 mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] > target: return binary_search_recursive(arr, target, low, mid - 1) else: return binary_search_recursive(arr, target, mid + 1, high) def binary_search(arr, target): Wrapper function to call binary_search_recursive with initial parameters. :param arr: List[int] - A sorted list of numbers :param target: int - The target number to search for :return: int - The index of the target number if found, otherwise -1 return binary_search_recursive(arr, target, 0, len(arr) - 1)"},{"question":"Write a function to find the nth element in a Fibonacci sequence.","solution":"def fibonacci(n): Returns the nth element in a Fibonacci sequence. The sequence starts with 0, 1 and each subsequent number is the sum of the two preceding ones. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the minimum value in a list of integers without using the built-in min function.","solution":"def find_minimum(lst): Returns the minimum value in a list of integers. if not lst: return None # or raise an error if empty list is not allowed minimum = lst[0] for num in lst[1:]: if num < minimum: minimum = num return minimum"},{"question":"Write a function to return the union of two sets.","solution":"def union_of_sets(set1, set2): Returns the union of two sets set1 and set2. return set1.union(set2)"},{"question":"Write a function to check if a list of addresses are distinct or not.","solution":"def are_addresses_distinct(addresses): Returns True if all addresses in the list are distinct, otherwise False. :param addresses: List of addresses (strings) :return: Boolean return len(addresses) == len(set(addresses))"},{"question":"Write a function to convert a string to an integer. The function should handle both positive and negative integers. It should also handle leading and trailing whitespaces, and ignore non-numeric characters except for a single '+' or '-' at the beginning of the string.","solution":"def string_to_int(s): Converts a string to an integer, handling leading/trailing whitespaces and a single '+' or '-'. Ignores non-numeric characters except for leading '+' or '-'. # Strip leading and trailing whitespaces s = s.strip() if not s: return 0 # Initialize variables sign = 1 result = 0 start_index = 0 # Check for sign at the beginning of the string if s[0] == '-': sign = -1 start_index = 1 elif s[0] == '+': start_index = 1 # Convert characters to integer for i in range(start_index, len(s)): if not s[i].isdigit(): break result = result * 10 + int(s[i]) return sign * result"},{"question":"Write a function to compute the running total of a list of integers.","solution":"def running_total(numbers): Returns a list where each element is the running total of the input list. total = 0 result = [] for num in numbers: total += num result.append(total) return result"},{"question":"Write a function to find the nth Fibonacci number in Python without using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: Index of the desired Fibonacci number (0-based). :return: nth Fibonacci number. if n < 0: raise ValueError(\\"Index must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to determine the sum of all even numbers in an array. Ensure the function is efficient in terms of time and space complexity.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the input array. Parameters: arr (list): List of integers. Returns: int: Sum of all even numbers in the array. return sum(x for x in arr if x % 2 == 0)"},{"question":"Write a function to calculate the least common multiple (LCM) of two integers using Python. How can this function be implemented in a robust and efficient way?","solution":"import math def lcm(a, b): Returns the least common multiple (LCM) of two integers a and b. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Write a function to calculate the sum of all positive even numbers in a given list. The list will contain integers and may include both positive and negative numbers, as well as zero.","solution":"def sum_positive_even_numbers(lst): Returns the sum of all positive even numbers in the given list. :param lst: List of integers :return: Sum of positive even integers return sum(x for x in lst if x > 0 and x % 2 == 0)"},{"question":"Write a function to generate all permutations of a given string in Python. How can you approach this problem using both backtracking and iterative methods?","solution":"from typing import List def permute_backtracking(s: str) -> List[str]: Generate all permutations of a given string using backtracking. def backtrack(start, end): if start == end: result.append(\\"\\".join(s)) for i in range(start, end): s[start], s[i] = s[i], s[start] backtrack(start + 1, end) s[start], s[i] = s[i], s[start] result = [] s = list(s) backtrack(0, len(s)) return result def permute_iterative(s: str) -> List[str]: Generate all permutations of a given string using itertools. from itertools import permutations return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to find the maximum number of consecutive 1's in a given binary string. For example, given the binary string \\"110100110\\", the function should return 3, as the maximum number of consecutive 1's is three (in the sub-string \\"111\\").","solution":"def max_consecutive_ones(binary_string): Returns the maximum number of consecutive 1's in the given binary string. Parameters: binary_string (str): A string representing a binary number. Returns: int: The maximum number of consecutive 1's in the string. max_ones = 0 current_ones = 0 for char in binary_string: if char == '1': current_ones += 1 if current_ones > max_ones: max_ones = current_ones else: current_ones = 0 return max_ones"},{"question":"Write a function to return a slice of strings, where each string is the capitalized version of the corresponding string in the input slice. You can assume that all input strings will consist only of alphabetic characters.","solution":"def capitalize_strings(input_list): Returns a list of strings where each string is the capitalized version of the corresponding string in the input list. Parameters: input_list (list of str): A list of strings Returns: list of str: A list of capitalized strings return [s.capitalize() for s in input_list]"},{"question":"Write a function to determine whether integers in an array are sorted in ascending order. If so, how would you implement it in Python?","solution":"def is_sorted(arr): Returns True if the array is sorted in ascending order, otherwise False. return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"},{"question":"Write a function to find the shortest path in an unweighted graph using Breadth First Search (BFS). The input is a graph represented as an adjacency list and two integers S and E representing the start and end vertices. You should also handle the case where the end vertex is unreachable from the start vertex.","solution":"from collections import deque def shortest_path_bfs(graph, start, end): Finds the shortest path in an unweighted graph using Breadth First Search (BFS). Parameters: graph (dict): The adjacency list representing the graph. start (int): The start vertex. end (int): The end vertex. Returns: list: The shortest path from start to end vertex, or an empty list if the end vertex is unreachable. if start == end: return [start] # Initialize the BFS queue queue = deque([(start, [start])]) visited = set() visited.add(start) while queue: current_node, path = queue.popleft() for neighbor in graph.get(current_node, []): if neighbor not in visited: if neighbor == end: return path + [neighbor] queue.append((neighbor, path + [neighbor])) visited.add(neighbor) return []"},{"question":"Write a function to find the sum of all the integers from 1 to a given positive integer n.","solution":"def sum_integers(n): Returns the sum of all integers from 1 to n. if n < 1: raise ValueError(\\"Input must be a positive integer.\\") return n * (n + 1) // 2"},{"question":"Write a function to print numbers from 1 to n. How can this function be implemented in Python?","solution":"def print_numbers(n): Prints numbers from 1 to n. for i in range(1, n+1): print(i)"},{"question":"Write a function to reverse a string in Python. You should not use any built-in string reversal functions like \`[::-1]\` or \`reversed()\`. Instead, you should reverse the string by swapping elements from both ends towards the center.","solution":"def reverse_string(s): Reverses the input string by swapping elements from both ends towards the center. s_list = list(s) # Convert the string to a list to make it mutable left, right = 0, len(s) - 1 while left < right: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return ''.join(s_list) # Convert the list back to a string"},{"question":"Write a function to find the missing number from an array of integers from 1 to n, where n is the length of the array. The array is guaranteed to contain every integer from 1 to n except one.","solution":"def find_missing_number(arr): This function finds the missing number in an array of integers from 1 to n. :param arr: List[int], list of integers from 1 to n with one number missing :return: int, the missing number n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a function to find the maximum profit that can be obtained by buying and selling a stock at most once. The function should take a list of integers representing the stock prices on consecutive days and return the maximum profit. If no profit can be made, the function should return 0.","solution":"def max_profit(prices): Returns the maximum profit from a list of stock prices if buying and selling at most once. If no profit can be made, returns 0. Args: - prices (list of int): List of stock prices on consecutive days. Returns: - int: Maximum profit, or 0 if no profit can be made. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a function to find the minimum number of coins needed to make a given amount of money using coins of denominations given in an array. Assume you have an infinite supply of each type of coin. The function should return the minimum number of coins required or -1 if it is not possible to make the given amount.","solution":"def min_coins(coins, amount): Function to find the minimum number of coins needed to make a given amount of money using coins of denominations given in an array. Parameters: coins (List[int]): List of the denominations of the coins available. amount (int): The target amount of money. Returns: int: Minimum number of coins required to make the amount, or -1 if it is not possible. # Create a list to store the minimum coins needed for each amount from 0 to amount dp = [float('inf')] * (amount + 1) # No coins are needed to make amount 0 dp[0] = 0 # Loop through all amounts from 1 to amount for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still inf, it means it's not possible to make the amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to reverse a given string \`str\` in Python, considering only alphanumeric characters and ignoring any punctuation or spaces. For example, if the input string is \\"a@b#cd\\", the function should return \\"dc#b@a\\".","solution":"def reverse_alphanumeric_only(s): Reverses the alphanumeric characters in a string while maintaining the positions of non-alphanumeric characters. Parameters: s (str): The input string. Returns: str: The string with alphanumeric characters reversed and non-alphanumeric characters in their original positions. alnum_chars = [char for char in s if char.isalnum()] reversed_alnum = iter(alnum_chars[::-1]) return \\"\\".join(next(reversed_alnum) if char.isalnum() else char for char in s)"},{"question":"Write a function to parse and extract data from a JSON string using Python's json module. The function should be able to handle nested JSON structures.","solution":"import json def extract_data_from_json(json_string): Parses and extracts data from a JSON string. Parameters: - json_string (str): A JSON-formatted string. Returns: - dict: A dictionary representation of the JSON string. try: data = json.loads(json_string) return data except json.JSONDecodeError: return None"},{"question":"Write a function to count the number of distinct words in a given text.","solution":"def count_distinct_words(text): Returns the number of distinct words in a given text. Words are considered case-insensitive and punctuation is ignored. import re words = re.findall(r'bw+b', text.lower()) distinct_words = set(words) return len(distinct_words)"},{"question":"Write a function to evaluate a postfix expression (also known as Reverse Polish Notation). A postfix expression is one where the operator follows all of its operands. Here is an example: \\"3 4 + 2 *\\" evaluates to 14.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression. Args: expression (str): The postfix expression to be evaluated. Returns: int/float: The result of evaluating the postfix expression. stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): stack.append(int(token)) elif token.replace('.', '', 1).isdigit(): # Handling float values stack.append(float(token)) else: b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(a / b) else: raise ValueError(f\\"Unknown operator: {token}\\") return stack[0]"},{"question":"Write a function to check if a given integer \`n\` is a \\"happy number.\\" A happy number is defined as a number which eventually reaches 1 when replaced by the sum of the square of each digit. If a number is a happy number, return \`True\`. If not, return \`False\`.","solution":"def is_happy_number(n): Returns True if n is a happy number, False otherwise. Calculated by replacing n with the sum of the squares of its digits until n reaches 1 or or forms a cycle. def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"Write a function to filter out all the even numbers from a given list of integers, using only a single list comprehension and the modulo operator (%). The function should return a new list containing only the odd numbers from the original list. For example, if the input is a list \`[1, 2, 3, 4, 5]\`, the function should return \`[1, 3, 5]\`.","solution":"def filter_odd_numbers(numbers): Filters out all the even numbers from a given list of integers. Parameters: numbers (list): List of integers. Returns: list: A list containing only the odd numbers from the input list. return [num for num in numbers if num % 2 != 0]"},{"question":"Write a function to reverse the characters of a string in Python. The function should take a string as input and return a new string with the characters in reverse order. Additionally, the function should handle any special characters and spaces correctly.","solution":"def reverse_string(s): Returns the reverse of the given string, handling special characters and spaces correctly. return s[::-1]"},{"question":"Write a function to two string arrays, and return their intersection as a string array without duplicates.","solution":"def intersect_arrays(arr1, arr2): Returns the intersection of two string arrays without duplicates. # Convert both arrays to sets to remove duplicates and perform intersection set1 = set(arr1) set2 = set(arr2) intersection = set1.intersection(set2) # Return the result as a list return list(intersection)"},{"question":"Write a function to compute the nth Fibonacci number in Python. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to convert a given string to its corresponding integer value in hexadecimal. For example, if the input string is \\"1A3B\\", the function should return the integer 6719.","solution":"def hex_to_int(hex_str): Converts a hexadecimal string to its corresponding integer value. :param hex_str: A string representing a hexadecimal number. :return: Integer value of the hexadecimal string. return int(hex_str, 16)"},{"question":"Write a function to find the maximum subarray sum using Kadane's Algorithm. The function should return the maximum sum, and also the starting and ending indices of the subarray with the maximum sum.","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum using Kadane's algorithm. Args: nums: List of integers Returns: A tuple containing the maximum sum, starting index, and ending index of the subarray with the maximum sum. if not nums: return 0, -1, -1 # In case of an empty array max_sum = current_sum = nums[0] start = end = current_start = 0 for index in range(1, len(nums)): if current_sum < 0: current_sum = nums[index] current_start = index else: current_sum += nums[index] if current_sum > max_sum: max_sum = current_sum start = current_start end = index return max_sum, start, end"},{"question":"Write a function to convert a decimal number to a binary number. Implement the function in Python and explain the code.","solution":"def decimal_to_binary(n): Convert a decimal number to a binary number as a string. Args: n (int): The decimal number to convert. Returns: str: The binary representation of the decimal number. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a function to check if an array is sorted in ascending order. The function should take an array of integers as input and return a boolean value indicating whether the array is sorted in ascending order or not.","solution":"def is_sorted(arr): Returns True if the array is sorted in ascending order, otherwise False. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a function to remove all occurrences of a given value from a linked list and return the new head of the list. The function should not modify the content of the nodes, only change the next pointers to remove the nodes containing the specified value.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_elements(head, val): Remove all elements from a linked list that have the specified value. Args: - head (ListNode): Head node of the linked list - val (int): The value to be removed from the list Returns: - ListNode: New head of the list after removal dummy = ListNode(next=head) current = dummy while current.next is not None: if current.next.val == val: current.next = current.next.next else: current = current.next return dummy.next"},{"question":"Write a function to check if a given list of numbers is sorted in increasing order using languages commonly used in data science.","solution":"def is_sorted(nums): Returns True if nums is sorted in increasing order, otherwise False. :param nums: List of numbers to check :type nums: list :return: Boolean indicating if the list is sorted :rtype: bool if not nums: return True for i in range(len(nums) - 1): if nums[i] > nums[i + 1]: return False return True"},{"question":"Write a function to find the maximum difference between the number of 1s and 0s in all possible subarrays.","solution":"def max_diff_ones_zeros(arr): Finds the maximum difference between the number of 1s and 0s in all possible subarrays. n = len(arr) current_sum = 0 max_diff = float('-inf') min_sum = 0 for num in arr: value = 1 if num == 1 else -1 current_sum += value max_diff = max(max_diff, current_sum - min_sum) min_sum = min(min_sum, current_sum) return max_diff"},{"question":"Write a function to compute the factorial of a number using recursion. Also, handle the case where the input is negative, and return an appropriate error message.","solution":"def factorial(n): Recursively computes the factorial of a non-negative integer n. Returns a string error message if n is negative. if n < 0: return \\"Error: Factorial is not defined for negative numbers.\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to decrement the counter of times.strftime() is called in the strftime() wrapper function. A global variable counter called \`strftime_counter\` should be used, and this variable holds the count of times the strftime function is called. Initially, the counter value should be 0.","solution":"import time # Initialize the global counter strftime_counter = 0 def strftime_wrapper(format, t=None): Wrapper function for time.strftime that increments the global strftime_counter each time it is called. global strftime_counter strftime_counter += 1 if t is None: t = time.localtime() return time.strftime(format, t) def get_counter(): Returns the current value of strftime_counter. global strftime_counter return strftime_counter"},{"question":"Write a function to print all numbers from 1 to N in ascending order without using any loop constructs like for, while, or do-while.","solution":"def print_numbers(N): def recurse(num, N): if num > N: return print(num) recurse(num + 1, N) recurse(1, N)"},{"question":"Write a function to reverse a string efficiently.","solution":"def reverse_string(s): Reverses and returns the input string. return s[::-1]"},{"question":"Write a function to calculate the total number of unique words in a given string.","solution":"def unique_word_count(s): Returns the total number of unique words in the given string s. words = s.split() unique_words = set(words) return len(unique_words)"},{"question":"Write a function to reverse a string in Python. Here's a function signature: \`def reverse_string(input_string):\`. We need to reverse the characters of the string.","solution":"def reverse_string(input_string): Returns the reverse of the input string. return input_string[::-1]"},{"question":"Write a function to reverse a linked list in Python. The linked list is given to you as a sequence of elements where each element points to the next element, and the last element points to \`None\`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next # store next node current.next = prev # reverse current node's pointer prev = current # move prev pointer one step forward current = next_node # move current pointer one step forward return prev # new head of the reversed linked list"},{"question":"Write a function to reverse a string in PythonÖ","solution":"def reverse_string(s): Reverses the given string. return s[::-1]"},{"question":"Write a function to find the second minimum element in a binary search tree. If the second minimum element does not exist, return -1. The binary search tree is stripped down and only contains integer values.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_second_minimum_value(root): Finds the second minimum value in a binary search tree. If there is no second minimum, returns -1. def inorder_traversal(node): if node: inorder_traversal(node.left) if len(min_values) < 2 or min_values[-1] != node.val: min_values.append(node.val) inorder_traversal(node.right) min_values = [] inorder_traversal(root) # Create unique sorted list of values unique_values = sorted(set(min_values)) return unique_values[1] if len(unique_values) > 1 else -1"},{"question":"Write a function to count the number of unique words in a given string. The function should handle the input string by converting it to lowercase to ensure case-insensitivity and split the string into words using space as the delimiter. Then, it should count and return the number of unique words in the string.","solution":"def count_unique_words(s): Returns the count of unique words in the given string. # Convert the string to lowercase s = s.lower() # Split the string into words using space as the delimiter words = s.split() # Use a set to find unique words unique_words = set(words) # Return the count of unique words return len(unique_words)"},{"question":"Write a function to remove duplicates from a list of integers in Python without using any additional data structures like sets or lists.","solution":"def remove_duplicates(nums): Removes duplicates from a list of integers without using any additional data structures. Args: nums: List of integers. Returns: List of integers without duplicates. result = [] for num in nums: if num not in result: result.append(num) return result"},{"question":"Write a function to compute the value of n to the power m, using recursion, handling the base case of exponent zero and negative bases and exponents.","solution":"def power(n, m): Computes the value of n to the power m using recursion. Handles the base case of exponent zero and negative exponents. # Base case: exponent is zero if m == 0: return 1 # If exponent is negative, invert the base and make the exponent positive elif m < 0: return 1 / power(n, -m) # Recursive case: multiply n by the result of n to the power of (m-1) else: return n * power(n, m - 1)"},{"question":"Write a function to implement a depth-first search for a target value in a binary search tree (BST). If the target value is found, return the node containing the target value. If the target value is not found, return \`None\`.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def depth_first_search(root, target): Implements depth-first search to find the target value in a binary search tree. Returns the node containing the target value if found, otherwise returns None. if root is None: return None if root.value == target: return root # Search in the left subtree left_result = depth_first_search(root.left, target) if left_result is not None: return left_result # Search in the right subtree return depth_first_search(root.right, target)"},{"question":"Write a function to calculate the number of one-bits on an unsigned integer.","solution":"def count_one_bits(n): Returns the number of one-bits (Hamming weight) in the binary representation of the given unsigned integer n. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a function to determine if a string is a valid number. A valid number can be a integer, a float, or a number in scientific notation. The function should return \`True\` if the string is a valid number, and \`False\` otherwise.","solution":"import re def is_valid_number(s): Determine if the given string is a valid number. Valid numbers can be integers, floats, or in scientific notation. pattern = re.compile(r'^(+|-)?(d+(.d*)?|.d+)([eE](+|-)?d+)?') return bool(pattern.match(s))"},{"question":"Write a function to find the index of the leftmost minimum in a list. If multiple instances of the minimum value exist, return the index of the first occurrence. If the list is empty, return -1.","solution":"def leftmost_min_index(lst): Returns the index of the leftmost minimum in the list. If list is empty, return -1. Parameters: lst (list): List of numbers Returns: int: Index of the leftmost minimum value or -1 if the list is empty if not lst: return -1 min_value = min(lst) return lst.index(min_value)"},{"question":"Write a function to reverse the words in a string without reversing the characters of the words.","solution":"def reverse_words_in_string(s): Reverse the words in a string without reversing the characters of the words. Parameters: s (str): The input string. Returns: str: The input string with the words reversed. # Split the string into words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed words back into a string return ' '.join(reversed_words)"},{"question":"Write a function to compare two directories and find the files that are missing in one directory compared to the other.","solution":"import os def compare_directories(dir1, dir2): Compare two directories and find files missing in one directory compared to the other. Parameters: - dir1: Path to the first directory - dir2: Path to the second directory Returns: - A tuple of two sets: (missing_in_dir1, missing_in_dir2) where: missing_in_dir1: Set of filenames missing in dir1 compared to dir2 missing_in_dir2: Set of filenames missing in dir2 compared to dir1 files_in_dir1 = set(os.listdir(dir1)) files_in_dir2 = set(os.listdir(dir2)) missing_in_dir1 = files_in_dir2 - files_in_dir1 missing_in_dir2 = files_in_dir1 - files_in_dir2 return missing_in_dir1, missing_in_dir2"},{"question":"Write a function to calculate the sum of all the elements in a list of numbers. Provide a detailed explanation of the function and its parameters.","solution":"def sum_of_elements(numbers): Returns the sum of all the elements in a list of numbers. Parameters: numbers (list): A list of numerical values. Returns: int/float: The sum of all the elements in the list. return sum(numbers)"},{"question":"Write a function to return the number of distinct strings that can be formed using the characters from the given string, considering that the characters are case-sensitive and repetitions are allowed.","solution":"def count_distinct_strings(s): Returns the number of distinct strings that can be formed using the characters from the given string (with repetitions allowed). return len(set(s))"},{"question":"Write a function to find the most frequent integer in an array of integers. If there are multiple integers with the same highest frequency, return the smallest one. If the array is empty, return \`None\`.","solution":"from collections import Counter def most_frequent_integer(arr): Returns the most frequent integer in an array. If there are multiple integers with the same highest frequency, returns the smallest one. If the array is empty, returns None. if not arr: return None count = Counter(arr) max_freq = max(count.values()) # Filter elements with the max frequency and find the smallest one most_frequent = min(key for key, value in count.items() if value == max_freq) return most_frequent"},{"question":"Write a function to calculate the factorial of a given number. The function should use recursion to achieve this. Ensure that the function handles edge cases, such as negative inputs or very large numbers efficiently.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Handles edge cases such as negative inputs. Arguments: n -- Input number to calculate the factorial (should be a non-negative integer) Returns: int -- Factorial of the input number if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to calculate the sum of the first N natural numbers. Here, N is a positive integer. The function should be efficient and use the formula for the sum of the first N natural numbers to minimize computational complexity.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers. N is a positive integer. # Formula for the sum of the first N natural numbers: N * (N + 1) / 2 return N * (N + 1) // 2"},{"question":"Write a function to search a 2D array (in compact 1D representation) for the presence of a target value. Return true if the target is found, otherwise false. For a 2D array of size m x n, you are given the array in a 1D compact representation, where each sub-array (row) is represented in the same way as the 2D array of size n.","solution":"def search_2d_array_in_1d_representation(array, m, n, target): Searches for the target value in a 2D array represented as a 1D array. Args: array: List of integers representing the 2D array in 1D. m: Number of rows in the 2D array. n: Number of columns in the 2D array. target: The value to search for. Returns: True if the target is found, otherwise False. for i in range(m * n): if array[i] == target: return True return False"},{"question":"Write a function to merge two sorted lists and return the merged list as a new sorted list. The function will take two list inputs, both sorted in ascending order. The function should use recursion to implement the merge. The user should be able to pass two sorted lists, and the function should return a single sorted list that contains all the elements from both input lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list using recursion. Args: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged sorted list containing all elements from list1 and list2. if not list1: return list2 if not list2: return list1 if list1[0] < list2[0]: return [list1[0]] + merge_sorted_lists(list1[1:], list2) else: return [list2[0]] + merge_sorted_lists(list1, list2[1:])"},{"question":"Write a function to find the contiguous subarray within an array which has maximum product. For example, for the array\`[2, 3, -2, 4]\`, the contiguous subarray is \`[2, 3]\` which has maximum product \`6\`.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray within an array. :param nums: List[int] - The input array :return: int - The maximum product if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function to check if a given number is even or odd. If the number is even, return \\"Even\\", otherwise return \\"Odd\\".","solution":"def check_even_or_odd(number): Returns \\"Even\\" if the number is even, otherwise returns \\"Odd\\". return \\"Even\\" if number % 2 == 0 else \\"Odd\\""},{"question":"Write a function to create a new binary tree with a root node containing the value 5. Then, implement a method to print the values of the tree using in-order traversal. The in-order traversal should print the values in the following order: left subtree, root node, right subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def create_tree(): Creates a new binary tree with a root node containing the value 5. return TreeNode(5) def in_order_traversal(root): Performs in-order traversal of the binary tree. result = [] def traverse(node): if not node: return traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result # Example tree creation and traversal root = create_tree() root.left = TreeNode(3) root.right = TreeNode(7) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.right.left = TreeNode(6) root.right.right = TreeNode(8) print(in_order_traversal(root)) # This should print: [2, 3, 4, 5, 6, 7, 8]"},{"question":"Write a function to determine the second smallest element in a given list of integers. If the list contains fewer than two unique elements, your function should return \`None\`.","solution":"def second_smallest(lst): Returns the second smallest unique element in the list. If the list contains fewer than two unique elements, return None. unique_elements = sorted(set(lst)) if len(unique_elements) < 2: return None return unique_elements[1]"},{"question":"Write a function to multiply two matrices in Python. Here is a partially implemented function, but it's missing some parts. Can you help me complete it?","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices (2D lists) together and returns the resulting matrix. Assumes matrices are compatible for multiplication. # Number of rows in matrix1 rows_matrix1 = len(matrix1) # Number of columns in matrix1 cols_matrix1 = len(matrix1[0]) # Number of columns in matrix2 cols_matrix2 = len(matrix2[0]) # Prepare the result matrix with zeros result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] # Perform matrix multiplication for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Write a function to find the maximum element in an array of integers. The function should return the maximum element found. If the array is empty, the function should return \`None\`. The function should be named \`find_maximum\`.","solution":"def find_maximum(arr): Returns the maximum element in an array of integers. If the array is empty, returns None. if not arr: return None return max(arr)"},{"question":"Write a function to find the minimum path sum from an arbitrary point to a point on a 2D grid, moving only right and down. The integer m will represent the number of rows, and integer n will represent the number of columns. The function should take a 2D list \`grid\` as an input. The \`grid\` is represented as a matrix where each element represents the cost at that point. The function should return the minimum path sum from the top-left corner to the bottom-right corner of the grid.","solution":"def minPathSum(grid): Returns the minimum path sum from top-left to bottom-right on a 2D grid. Can only move either down or right at any point in time. :param grid: 2D list of integers representing the cost at each point :return: Integer representing the minimum path sum. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first row for j in range(1, n): grid[0][j] += grid[0][j - 1] # Initialize the first column for i in range(1, m): grid[i][0] += grid[i - 1][0] # Fill in the rest of the grid for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]) # The answer is in the bottom-right corner return grid[m - 1][n - 1]"},{"question":"Write a function to multiply two matrices represented as 2D lists. How should I approach this problem?","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B and returns the result as a new matrix. Parameters: A (list of list of int/float): The first matrix. B (list of list of int/float): The second matrix. Returns: list of list of int/float: The resultant matrix after multiplication. Raises: ValueError: If the number of columns in A does not equal the number of rows in B. # Number of rows and columns in A rows_A, cols_A = len(A), len(A[0]) # Number of rows and columns in B rows_B, cols_B = len(B), len(B[0]) # Check if the number of columns in A equals the number of rows in B if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to number of rows in B\\") # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Iterate through rows of A for i in range(rows_A): # Iterate through columns of B for j in range(cols_B): # Compute the dot product of the i-th row of A and j-th column of B for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to print all prime numbers between two given numbers 'a' and 'b'. The function should take two arguments, 'a' and 'b', and print all the prime numbers in the range [a, b].","solution":"def print_primes(a, b): Prints all prime numbers between a and b (inclusive). Parameters: a (int): Start of the range. b (int): End of the range. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True for num in range(a, b + 1): if is_prime(num): print(num)"},{"question":"Write a function to implement the FizzBuzz game in Python. The function should take an integer \`n\` as input and return a list of strings from 1 to \`n\`, but for multiples of 3, the string \\"Fizz\\" should be used instead of the number, for multiples of 5, \\"Buzz\\", and for multiples of both 3 and 5, \\"FizzBuzz\\".","solution":"def fizzbuzz(n): Returns a list of strings representing the FizzBuzz game from 1 to n. For multiples of 3, the string \\"Fizz\\" should be used instead of the number. For multiples of 5, \\"Buzz\\" should be used instead of the number. For multiples of both 3 and 5, \\"FizzBuzz\\" should be used instead of the number. result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to calculate the area of a circle given its radius. The function should be named \`calculate_circle_area\` and take one parameter, the radius of the circle. The area of a circle can be calculated using the formula A = πr^2, where A is the area and r is the radius of the circle. Additionally, the function should handle the case where the radius is negative by returning -1.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. If the radius is negative, returns -1. if radius < 0: return -1 return math.pi * radius**2"},{"question":"Write a function to reverse a string in Python. You should assume the string is stored as a list of characters.","solution":"def reverse_string(s): Reverses a string stored as a list of characters. Args: s (list): The list of characters representing the string to reverse. Returns: list: The list of characters representing the reversed string. return s[::-1]"},{"question":"Write a function to reverse a given string. For example, if the input string is \\"Hello World!\\", the function should return \\"!dlroW olleH\\".","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a function to reverse a string in Python. The function should reverse both letters and words in the string, preserving punctuation and whitespace.","solution":"def reverse_string(s): Reverses the letters and words in the given string, preserving punctuation and whitespace. return s[::-1]"},{"question":"Write a function to generate all possible subsets of a given set of items. This function should be recursive and utilize set operations to generate the subsets. The function should be designed to work efficiently with large sets.","solution":"def generate_subsets(items): Returns all possible subsets of a given set of items using recursion. if not items: return [set()] item = items.pop() subsets_without_item = generate_subsets(items) subsets_with_item = [subset | {item} for subset in subsets_without_item] return subsets_without_item + subsets_with_item"},{"question":"Write a function to check if a given string \`str\` is a palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\" or \\"level\\".","solution":"def is_palindrome(s): Checks if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. return s == s[::-1]"},{"question":"Write a function to determine if a given string is a palindrome (a word, phrase, number, or other sequence of characters which reads the same backward as forward). Your function should be case-sensitive and should not ignore spaces, punctuation, or other non-alphanumeric characters.","solution":"def is_palindrome(s): Determines if the given string s is a palindrome. This function checks if the string reads the same backward as forward. The check is case-sensitive and considers all characters including spaces, punctuation, etc. Args: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Write a function to find the total number of duplicate elements in an array.","solution":"def count_duplicates(arr): Returns the total number of duplicate elements in the array. :param arr: List of elements. :return: Number of duplicate elements in the array. from collections import Counter count = Counter(arr) duplicates = sum(1 for c in count.values() if c > 1) return duplicates"},{"question":"Write a function to reverse a string in Python. You are not allowed to use any built-in string functions or slicing.","solution":"def reverse_string(s): Reverses a given string without using built-in string functions or slicing. reversed_string = '' for char in s: reversed_string = char + reversed_string return reversed_string"},{"question":"Write a function to find the largest palindromic number within a given range of integers. A palindromic number is a number that remains the same when its digits are reversed (e.g., 121, 1221, 12321, etc.).","solution":"def find_largest_palindromic_number(start, end): Returns the largest palindromic number within the range from start to end inclusive. if start > end: return None # Invalid range largest_palindrome = None for num in range(start, end + 1): if str(num) == str(num)[::-1]: # Check if the number is a palindrome if largest_palindrome is None or num > largest_palindrome: largest_palindrome = num return largest_palindrome"},{"question":"Write a function to multiply two matrices in Python. Matrices are 2D lists (lists of lists). The function should check if the two matrices can be multiplied, multiply them if possible, and return the resulting matrix. If the matrices cannot be multiplied, the function should return an error message.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B and returns the resulting matrix. If the matrices cannot be multiplied, returns an error message. # Check if multiplication is possible if len(A[0]) != len(B): return \\"Error: Matrices cannot be multiplied due to incompatible dimensions.\\" # Initialize the result matrix with zeros result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] # Perform matrix multiplication for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to find the element that appears most frequently in a list. If multiple elements have the same highest frequency, return the smallest one.","solution":"def most_frequent_element(lst): Returns the most frequent element in a list. If multiple elements have the same highest frequency, the smallest one is returned. if not lst: return None frequency_dict = {} for element in lst: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 max_frequency = max(frequency_dict.values()) most_frequent_elements = [k for k, v in frequency_dict.items() if v == max_frequency] return min(most_frequent_elements)"},{"question":"Write a function to check if a string has all unique characters. The function should return True if all characters in the string are unique, and False otherwise. Consider the length of the string and the range of possible characters it can include.","solution":"def has_all_unique_chars(s): Returns True if the string s has all unique characters, otherwise False. # A set to store characters we have seen so far seen_chars = set() # Iterating through each character in the string for char in s: if char in seen_chars: return False seen_chars.add(char) return True"},{"question":"Write a function to check if a string contains all unique characters. Can you do it without using additional data structures like lists or dictionaries?","solution":"def has_all_unique_chars(s): Checks if a string contains all unique characters. Parameters: s (str): The input string. Returns: bool: True if the string has all unique characters, False otherwise. # We use the length of the string and a set of characters seen so far # If the length of the string and the length after adding to set are not the same, # then characters are not unique. for i in range(len(s)): if s[i] in s[:i]: return False return True"},{"question":"Write a function to calculate the factorial of a given number using iterative approach, but the catch is that the number is stored in a string. The string can contain up to 200 characters (the largest number whose factorial can be calculated with standard integer types). The function should handle and return a string representing the factorial of the number.","solution":"def factorial_str(num_str): Returns the factorial of the given number represented as a string. The result is also returned as a string. num = int(num_str) result = 1 for i in range(2, num + 1): result *= i return str(result)"},{"question":"Write a function to calculate the power of a number to another number, \`a^b\`. For example, power(2, 5) should return 32 as 2^5 = 32.","solution":"def power(a, b): Returns a raised to the power of b. return a ** b"},{"question":"Write a function to remove duplicates from an array. The function should take an array of integers as input and return a new array with all duplicates removed. The order of the elements in the output array should be the same as their first occurrence in the input array.","solution":"def remove_duplicates(arr): Removes duplicates from an array while maintaining the order of first occurrences. Parameters: arr (list of int): The input array of integers. Returns: list of int: A new array with duplicates removed. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result # Example usage: # arr = [1, 2, 2, 3, 4, 3, 5] # remove_duplicates(arr) -> [1, 2, 3, 4, 5]"},{"question":"Write a function to find the maximum sum of a contiguous sub-array. This is commonly known as Kadane's Algorithm.","solution":"def max_sub_array(nums): Finds the maximum sum of a contiguous sub-array using Kadane's Algorithm. Parameters: nums (List[int]): The list of integers. Returns: int: The maximum sum of the contiguous sub-array. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the nth Fibonacci number using dynamic programming. What are the advantages of using dynamic programming in solving this problem?","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n] # Advantages of using dynamic programming in solving this problem: # 1. **Reduced Time Complexity**: The dynamic programming approach avoids the repeated calculations of an exponential number of subproblems that are encountered in the naive recursive approach. This reduces the time complexity to O(n). # 2. **Optimal Substructure**: DP takes advantage of the overlap in the subproblems, meaning it efficiently builds up to the solution by solving smaller subproblems just once and storing their results. # 3. **Space Complexity**: The memoized solution requires O(n) space for storing the intermediate results, which is much lower than the space requirements of an exponential recursive stack."},{"question":"Write a function to find the length of the longest valid (well-formed) parentheses substring in s.","solution":"def longest_valid_parentheses(s): Returns the length of the longest valid (well-formed) parentheses substring. max_len = 0 stack = [-1] # Initialize stack with -1 to handle the base for valid substring length for i in range(len(s)): if s[i] == '(': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"Write a function to calculate the sum of all prime numbers up to a given number n. The function should be efficient and avoid unnecessary calculations.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def sum_of_primes(n): Returns the sum of all prime numbers up to a given number n. prime_sum = 0 for num in range(2, n + 1): if is_prime(num): prime_sum += num return prime_sum"},{"question":"Write a function to find the smallest repeating element in a list.","solution":"def smallest_repeating_element(arr): Returns the smallest repeating element in a list. If there is no repeating element, returns None. element_count = {} for element in arr: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 repeating_elements = [key for key, value in element_count.items() if value > 1] if not repeating_elements: return None return min(repeating_elements)"},{"question":"Write a function to calculate the sum of all prime numbers up to a given limit. The function should be efficient and handle large inputs.","solution":"def sum_of_primes(limit): Returns the sum of all prime numbers up to the given limit. Utilizes the Sieve of Eratosthenes for efficient computation. Args: limit (int): The upper bound (inclusive) to sum primes up to. Returns: int: The sum of all prime numbers up to \`limit\`. if limit < 2: return 0 # Boolean array that marks prime numbers sieve = [True] * (limit + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start * start, limit + 1, start): sieve[multiple] = False # Sum up all primes return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a function to find the smallest element in a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_min_in_bst(root): Returns the smallest element in a binary search tree. :param root: TreeNode, the root of the binary search tree. :return: the value of the smallest element in the binary search tree. current = root while current.left is not None: current = current.left return current.val"},{"question":"Write a function to reverse a string in Python. There are multiple approaches to solve this problem. You can solve it iteratively or recursively, and also using slicing. Please provide all three solutions.","solution":"def reverse_string_iteratively(s): Returns the reverse of the given string using an iterative approach. reversed_string = '' for char in s: reversed_string = char + reversed_string return reversed_string def reverse_string_recursively(s): Returns the reverse of the given string using a recursive approach. if len(s) == 0: return s else: return reverse_string_recursively(s[1:]) + s[0] def reverse_string_slicing(s): Returns the reverse of the given string using slicing. return s[::-1]"},{"question":"Write a function to check if the given number is a perfect square number. Return true if it is a perfect square, otherwise false.","solution":"import math def is_perfect_square(n): Checks if the given number is a perfect square. Args: n (int): The number to check. Returns: bool: True if n is a perfect square, otherwise False. if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a function to find the minimum number of coins required to form a given amount. You can use any combination of given coin denominations.","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to form the given amount. coins: List of coin denominations amount: The target amount # Initialize an array for storing the minimum coins required for each amount up to the target amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Loop through each amount up to the target amount for i in range(1, amount + 1): # Loop through each coin denomination for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still float('inf'), it means it's not possible to form that amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to find the maximum and minimum elements in an array of integers without using any built-in functions or loops.","solution":"def find_max_min(arr): Returns the maximum and minimum elements in an array of integers. if len(arr) == 0: raise ValueError(\\"Array must not be empty\\") def recursive_max_min(arr, low, high): if low == high: return arr[low], arr[low] if high == low + 1: if arr[low] > arr[high]: return arr[low], arr[high] else: return arr[high], arr[low] mid = (low + high) // 2 max1, min1 = recursive_max_min(arr, low, mid) max2, min2 = recursive_max_min(arr, mid + 1, high) maximum = max1 if max1 > max2 else max2 minimum = min1 if min1 < min2 else min2 return maximum, minimum return recursive_max_min(arr, 0, len(arr) - 1)"},{"question":"Write a function to merge two sorted arrays into a single sorted array using the merge sort algorithm. The function should take two sorted arrays as input and return a new sorted array that is a combination of both input arrays.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. result = [] i, j = 0, 0 # Traverse both arrays and insert smaller of both elements into result while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Store remaining elements of first array while i < len(arr1): result.append(arr1[i]) i += 1 # Store remaining elements of second array while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Write a function to insert elements from one array into another in a sorted manner. The target array should have enough space to accommodate all elements from the source array. The goal is to minimize the number of operations in the target array.","solution":"def insert_into_sorted(target, source): Insert elements from the source array into the target array in a sorted manner. Assumes the target array has enough space to accommodate all elements from the source array. m = len(target) - len(source) # number of initial elements in target n = len(source) # Merge from the end to avoid extra space and shift operations while m > 0 and n > 0: if target[m - 1] > source[n - 1]: target[m + n - 1] = target[m - 1] m -= 1 else: target[m + n - 1] = source[n - 1] n -= 1 # If there are remaining elements in the source, add them while n > 0: target[n - 1] = source[n - 1] n -= 1 return target"},{"question":"Write a function to compute the minimum number of swaps required to sort the array in ascending order. Print the minimum number of swaps.","solution":"def minimum_swaps(arr): Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) arr_pos = [*enumerate(arr)] arr_pos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} ans = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr_pos[x][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Write a function to reverse a given linked list and return the new head of the reversed list. The linked list can have nodes with values ranging from 0 to 99.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a given linked list and returns the new head of the reversed list. :param head: ListNode, the head of the linked list to be reversed :return: ListNode, the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next # Store next node current.next = prev # Reverse the link prev = current # Move \`prev\` to this node current = next_node # Move to next node return prev"},{"question":"Write a function to calculate the factorial of a given number \`n\`. The factorial of a number \`n\` is the product of all positive integers less than or equal to \`n\`. The result should be returned in a specified format, which includes a header and a footer. The header should display the input number \`n\` and the calculation process step-by-step, and the footer should display the result of the factorial calculation. If the input number \`n\` is less than 0, the function should return an error message.","solution":"def factorial_with_details(n): Returns the factorial of the number n with details. if n < 0: return \\"Error: Factorial is not defined for negative numbers.\\" detail = f\\"Calculating factorial of {n}:n\\" factorial = 1 steps = [] for i in range(1, n + 1): factorial *= i steps.append(str(i)) detail += \\" * \\".join(steps) detail += f\\" = {factorial}n\\" detail += f\\"The factorial of {n} is {factorial}.\\" return detail"},{"question":"Write a function to move all zeroes in an array to the end without changing the order of non-zero elements.","solution":"def move_zeroes(nums): Move all zeroes in the given list to the end while maintaining the order of non-zero elements. :param nums: List of integers. :return: Modified list with zeroes moved to the end. non_zero_index = 0 for i in range(len(nums)): if nums[i] != 0: nums[non_zero_index] = nums[i] non_zero_index += 1 for i in range(non_zero_index, len(nums)): nums[i] = 0 return nums"},{"question":"Write a function to check if a given integer is a power of two. The function should return \`True\` if the integer is a power of two, otherwise return \`False\`. Please ensure the function is efficient and suitable for use in performance-critical applications.","solution":"def is_power_of_two(n): Determines if a given integer is a power of two. :param n: The integer to check. :return: True if n is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to find the sum of the diagonal elements of a square matrix in Python. Given the function \`def diagonal_sum(matrix)\`, where \`matrix\` is a square matrix represented as a list of lists of numbers.","solution":"def diagonal_sum(matrix): Returns the sum of the diagonal elements of a square matrix. :param matrix: List of lists where each inner list represents a row of the square matrix. :return: Sum of the diagonal elements. assert all(len(row) == len(matrix) for row in matrix), \\"Matrix is not square\\" n = len(matrix) return sum(matrix[i][i] for i in range(n))"},{"question":"Write a function to calculate the sum of absolute differences of all pairs in a given array. The function should take an array of integers as input and return the sum of absolute differences of all pairs in the array.","solution":"def sum_of_absolute_differences(arr): Returns the sum of absolute differences of all pairs in the given array. total_sum = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): total_sum += abs(arr[i] - arr[j]) return total_sum"},{"question":"Write a function to check if all elements in an array are identical.","solution":"def all_elements_identical(arr): Checks if all elements in the array are identical. Parameters: arr (list): A list of elements. Returns: bool: True if all elements are identical, False otherwise. if len(arr) == 0: return True return all(element == arr[0] for element in arr)"},{"question":"Write a function to find the second smallest number in a list. If the list contains less than two unique numbers, return -1.","solution":"def second_smallest(numbers): Returns the second smallest unique number in the list. If there are less than two unique numbers, returns -1. if len(numbers) < 2: return -1 unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to reverse a string in Python. Suppose you have a string \\"hello\\" and you want to reverse it to \\"olleh\\". How would you do this in Python?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to find the maximum number of non-overlapping subarrays with sum equals to 0, in an array of integers.","solution":"def max_non_overlapping_subarrays_zero_sum(nums): This function returns the maximum number of non-overlapping subarrays having a sum equal to 0 from the given list of integers. sum_map = {0: -1} count = 0 current_sum = 0 last_index = -1 for idx, num in enumerate(nums): current_sum += num if current_sum in sum_map and sum_map[current_sum] >= last_index: count += 1 last_index = idx sum_map[current_sum] = idx return count"},{"question":"Write a function to find the sublist with the maximum sum of elements from a given list of lists. If there are multiple sublists with the same maximum sum, return the first one encountered.","solution":"def sublist_with_max_sum(list_of_lists): Returns the sublist with the maximum sum from a given list of lists. If multiple sublists have the same maximum sum, returns the first one encountered. max_sum = float('-inf') max_sublist = [] for sublist in list_of_lists: current_sum = sum(sublist) if current_sum > max_sum: max_sum = current_sum max_sublist = sublist return max_sublist"},{"question":"Write a function to swap the elements in two arrays of integers. The function should also handle the case where the arrays are of different lengths. If the arrays are of different lengths, the remaining elements of the longer array should remain in their original positions.","solution":"def swap_arrays(arr1, arr2): Swap the elements in two arrays. If the arrays are of different lengths, the remaining elements of the longer array remain in their positions. Parameters: arr1 (list): First array to swap elements from. arr2 (list): Second array to swap elements from. Returns: tuple: A tuple containing the modified arr1 and arr2. min_length = min(len(arr1), len(arr2)) for i in range(min_length): arr1[i], arr2[i] = arr2[i], arr1[i] return arr1, arr2"},{"question":"Write a function to find the sum of all the prime numbers between two given positive integers (inclusive).","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(start, end): Returns the sum of all prime numbers between start and end inclusive. if start > end: return 0 return sum(x for x in range(start, end + 1) if is_prime(x))"},{"question":"Write a function to generate a list of Fibonacci numbers up to a given limit. The function should return the Fibonacci numbers as a list where the numbers do not exceed the specified limit. For example, if the limit is 10, the function should return [0, 1, 1, 2, 3, 5, 8].","solution":"def fibonacci_up_to(limit): Generates a list of Fibonacci numbers up to the given limit. Parameters: - limit: int, the upper bound (inclusive) for the Fibonacci sequence. Returns: - list: a list of Fibonacci numbers not exceeding the limit. if limit < 0: return [] fib_list = [0, 1] while True: next_value = fib_list[-1] + fib_list[-2] if next_value > limit: break fib_list.append(next_value) # Adjust for cases where limit is 0 or 1 return [x for x in fib_list if x <= limit]"},{"question":"Write a function to remove duplicates from a sorted array in-place and return the new length. WITHOUT USING EXTRA SPACE.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the new length. Args: nums (List[int]): A sorted list of integers. Returns: int: The length of the array after duplicates have been removed. if not nums: return 0 new_length = 1 for i in range(1, len(nums)): if nums[i] != nums[new_length - 1]: nums[new_length] = nums[i] new_length += 1 return new_length"},{"question":"Write a function to count the number of substrings that are symmetric in both the original string and the reversed string.","solution":"def count_symmetric_substrings(s): Returns the count of symmetric substrings in both the original string and the reversed string. def is_symmetric(sub): return sub == sub[::-1] count = 0 n = len(s) for i in range(n): for j in range(i+1, n+1): substring = s[i:j] if is_symmetric(substring): count += 1 return count"},{"question":"Write a function to remove duplicates from an array and return a new array containing only unique elements. The created function should not use any built-in array functions like \`filter\`, \`map\`, \`reduce\`, or anything similar that might automatically remove duplicates.","solution":"def remove_duplicates(arr): Returns a new array with only the unique elements from the input array. unique_elements = [] encountered = set() for elem in arr: if elem not in encountered: unique_elements.append(elem) encountered.add(elem) return unique_elements"},{"question":"Write a function to generate a list of random numbers between 1 and 100. The size of the list should be taken as an input parameter.","solution":"import random def generate_random_numbers(size): Generates a list of random numbers between 1 and 100. The size of the list is defined by the input parameter 'size'. Parameters: size (int): The number of random numbers to generate. Returns: List[int]: A list containing 'size' random numbers between 1 and 100. if size < 0: raise ValueError(\\"Size should be a non-negative integer.\\") return [random.randint(1, 100) for _ in range(size)]"},{"question":"Write a function to invert a binary tree using both recursive and iterative approaches.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def invert_tree_recursive(root): Inverts a binary tree using a recursive approach. if root is None: return None root.left, root.right = root.right, root.left invert_tree_recursive(root.left) invert_tree_recursive(root.right) return root def invert_tree_iterative(root): Inverts a binary tree using an iterative approach (level order traversal). if root is None: return None queue = deque([root]) while queue: current = queue.popleft() # Swap the left and right children current.left, current.right = current.right, current.left if current.left: queue.append(current.left) if current.right: queue.append(current.right) return root"},{"question":"Write a function to solve the Josephus problem in Python. The Josephus problem is a theoretical problem related to a certain elimination game. People are standing in a circle waiting to be executed. Starting from a specific position, every kth person is eliminated until only one person remains. The function should take two parameters: \`n\` (the number of people in the circle) and \`k\` (the step count for elimination). The function should return the position of the last remaining person.","solution":"def josephus(n, k): Solves the Josephus problem. Parameters: n (int): Number of people in the circle. k (int): Step count for elimination. Returns: int: Position of the last remaining person. if n == 1: return 0 else: return (josephus(n - 1, k) + k) % n"},{"question":"Write a function to solve the Tower of Hanoi problem. The function should take three integers: the number of disks (\`n\`), the source peg (\`source\`), the auxiliary peg (\`aux\`), and the destination peg (\`dest\`). The function should print the steps to move \`n\` disks from the source to the destination peg using the auxiliary peg.","solution":"def tower_of_hanoi(n, source, aux, dest): Solve the Tower of Hanoi problem. Parameters: n (int): The number of disks. source (int): The source peg. aux (int): The auxiliary peg. dest (int): The destination peg. Returns: List of tuples representing the moves. Each tuple contains two integers: (from_peg, to_peg). moves = [] def hanoi(n, source, aux, dest): if n == 1: moves.append((source, dest)) else: hanoi(n - 1, source, dest, aux) moves.append((source, dest)) hanoi(n - 1, aux, source, dest) hanoi(n, source, aux, dest) return moves"},{"question":"Write a function to find the intersection of two sets of intervals. Each interval is represented as a pair of integers indicating the start and end points. The function should return a list of intervals that represent the intersection of the two input sets. If there is no intersection, the function should return an empty list.","solution":"def interval_intersection(intervals_a, intervals_b): Finds the intersection of two sets of intervals. :param intervals_a: List of tuples, where each tuple is a start and end of interval [start, end] :param intervals_b: List of tuples, where each tuple is a start and end of interval [start, end] :return: List of tuples representing intersection of intervals. intersections = [] i, j = 0, 0 while i < len(intervals_a) and j < len(intervals_b): start_a, end_a = intervals_a[i] start_b, end_b = intervals_b[j] # Find the intersection between intervals_a[i] and intervals_b[j] start = max(start_a, start_b) end = min(end_a, end_b) if start <= end: intersections.append((start, end)) # Move to the next interval that ends first if end_a < end_b: i += 1 else: j += 1 return intersections"},{"question":"Write a function to sort an array of integers in ascending order using the bubble sort algorithm. Implement the function \`bubble_sort\` that takes an array \`arr\` as input and returns the sorted array.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to compare two strings and return the length of the longest common subsequence (LCS) between them. The LCS is the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both strings. For example, given the strings \\"ABCDGH\\" and \\"AEDFHR\\", the LCS is \\"ADH\\" with a length of 3.","solution":"def lcs(X, Y): Returns the length of the longest common subsequence between two strings X and Y. m = len(X) n = len(Y) # Create a table to store lengths of longest common subsequence of substrings L = [[0] * (n + 1) for _ in range(m + 1)] # Building the table in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) # L[m][n] contains the length of LCS for X[0..m-1], Y[0..n-1] return L[m][n]"},{"question":"Write a function to print the first and last character of a string","solution":"def first_and_last_char(s): Returns a tuple containing the first and last character of the string s. If the string is empty, raises a ValueError. if len(s) == 0: raise ValueError(\\"The string is empty\\") return (s[0], s[-1])"},{"question":"Write a function to find the minimum number of coins required to make up the amount. You may use each coin as many times as you want.","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to make up the amount. You may use each coin as many times as you want. :param coins: List of coin denominations :param amount: Integer amount to make up :return: Minimum number of coins required, or -1 if it is not possible # Initialize DP array where dp[i] means the minimum coins required for amount i dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: need 0 coins to make amount 0 for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to find the longest word in a string, considering only alphabetic characters and ignoring digits.","solution":"import re def longest_word(s): Returns the longest word in a string, considering only alphabetic characters and ignoring digits. words = re.findall(r'b[a-zA-Z]+b', s) if not words: return \\"\\" longest = max(words, key=len) return longest"},{"question":"Write a function to calculate the sum of all numbers in a nested list of integers. For example, given the list \`[[1, 2, [3]], 4, [5, [6, 7]]]\`, the function should return 28 (1+2+3+4+5+6+7).","solution":"def nested_sum(nested_list): Calculate the sum of all numbers in a nested list of integers. Args: nested_list (list): A nested list of integers. Returns: int: The sum of all integers in the nested list. total = 0 for item in nested_list: if isinstance(item, list): total += nested_sum(item) else: total += item return total"},{"question":"Write a function to perform merge sort on a list of integers. Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one. Below is the implementation of merge sort in Python.","solution":"def merge_sort(arr): Perform merge sort on a list of integers. if len(arr) > 1: mid = len(arr) // 2 # Finding the mid of the array L = arr[:mid] # Dividing the elements into 2 halves R = arr[mid:] merge_sort(L) # Sorting the first half merge_sort(R) # Sorting the second half i = j = k = 0 # Copy data to temporary arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Checking if any element was left while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr"},{"question":"Write a function to calculate the sum of all prime numbers less than n, using the Sieve of Eratosthenes algorithm.","solution":"def sum_of_primes(n): Calculate the sum of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 primes = [True] * n primes[0] = primes[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if primes[start]: for multiple in range(start*start, n, start): primes[multiple] = False return sum(index for index, is_prime in enumerate(primes) if is_prime)"},{"question":"Write a function to find the largest product of three numbers in an array.","solution":"def largest_product_of_three(nums): Returns the largest product of three numbers in the array. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function to find the median of two sorted arrays of equal length. The median is the middle value in an ordered integer list. If the list size is even, there is no middle value and the median is the average of the two middle values.","solution":"def find_median_sorted_arrays(nums1, nums2): Find the median of two sorted arrays of equal length. Parameters: nums1(List[int]): First sorted array nums2(List[int]): Second sorted array Returns: float: The median of the two sorted arrays # Merge the two arrays into one sorted array sorted_array = sorted(nums1 + nums2) length = len(sorted_array) # Calculate the median if length % 2 == 0: return (sorted_array[length // 2 - 1] + sorted_array[length // 2]) / 2.0 else: return sorted_array[length // 2]"},{"question":"Write a function to generate the nth Fibonacci number using an iterative approach. The function should be efficient and able to handle large values of n without running into performance issues. Additionally, consider optimizing for space complexity to minimize additional memory usage.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to calculate the Fibonacci sequence without using recursion. The function should take an integer \`n\` as input and return the \`n\`th Fibonacci number. What are the steps to implement this function?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: return \\"Input should be a non-negative integer\\" elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the maximum number in a given list of integers \`nums\`. The function should be named \`find_max_value\`. The function takes a list of integers as input and returns the maximum value found in that list.","solution":"def find_max_value(nums): Returns the maximum value in the given list of integers. if len(nums) == 0: raise ValueError(\\"The input list is empty\\") max_value = nums[0] for num in nums[1:]: if num > max_value: max_value = num return max_value"},{"question":"Write a function to print all numbers from 1 to 100 that are divisible by 3 but not by 5. How would this be translated into code for a Python program?","solution":"def find_numbers(): This function returns a list of numbers from 1 to 100 that are divisible by 3 but not by 5. return [number for number in range(1, 101) if number % 3 == 0 and number % 5 != 0]"},{"question":"Write a function to find the maximum value in an array using a reduce function.","solution":"from functools import reduce def find_max(arr): Returns the maximum value in the list arr using reduce. if not arr: raise ValueError(\\"Array cannot be empty\\") return reduce(lambda x, y: x if x > y else y, arr)"},{"question":"Write a function to calculate the total number of lines of code in a given directory using Python. The function should take the directory path as an argument and return the total count of lines of code across all Python files in the directory and its subdirectories.","solution":"import os def count_lines_of_code(directory): Count the total number of lines of code in all Python files within the given directory and its subdirectories. Args: directory (str): The path to the directory to search for Python files. Returns: int: The total number of lines of code across all Python files in the directory and its subdirectories. total_lines = 0 for root, _, files in os.walk(directory): for file in files: if file.endswith('.py'): file_path = os.path.join(root, file) with open(file_path, 'r', encoding='utf-8') as f: lines = f.readlines() total_lines += len(lines) return total_lines"},{"question":"Write a function to count the number of times two integers appear consecutively in a sequence. The sequence is represented as a list of integers.","solution":"def count_consecutive_pairs(sequence, num1, num2): Counts the number of times num1 and num2 appear consecutively in the sequence. Parameters: sequence (list): A list of integers. num1 (int): The first integer to count. num2 (int): The second integer to count. Returns: int: The count of consecutive appearances of num1 followed by num2. count = 0 for i in range(len(sequence) - 1): if sequence[i] == num1 and sequence[i + 1] == num2: count += 1 return count"},{"question":"Write a function to decode a string that was encoded using run-length encoding.","solution":"def decode_rle(encoded_str): Decodes a string that was encoded using run-length encoding. Args: encoded_str (str): the encoded string with format as number followed by character(s) Returns: str: the decoded string decoded_str = \\"\\" count = 0 for char in encoded_str: if char.isdigit(): count = count * 10 + int(char) else: decoded_str += char * count count = 0 return decoded_str"},{"question":"Write a function to convert a string of binary digits to its corresponding integer value.","solution":"def binary_to_integer(binary_string): Converts a string of binary digits to its corresponding integer value. Parameters: binary_string (str): A string containing binary digits (0 and 1). Returns: int: The integer representation of the binary string. return int(binary_string, 2)"},{"question":"Write a function to convert a string to a list without using the built-in \`split()\` function. The string could contain any characters, including spaces, tabs, and new lines.","solution":"def string_to_list(input_string): Converts a string to a list of words without using the built-in split(). word_list = [] word = \\"\\" for char in input_string: if char not in (' ', 't', 'n'): word += char else: if word: word_list.append(word) word = \\"\\" if word: word_list.append(word) return word_list"},{"question":"Write a function to find the longest common substring between two strings using dynamic programming in Python.","solution":"def longest_common_substring(str1, str2): Find the longest common substring between two strings using dynamic programming. Returns the longest common substring. m, n = len(str1), len(str2) # Create a table to store lengths of longest common suffixes of substrings lcsuff = [[0] * (n + 1) for _ in range(m + 1)] length_max = 0 # store length of the longest common substring end_index = 0 # store the ending index of the longest common substring in str1 for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1 if lcsuff[i][j] > length_max: length_max = lcsuff[i][j] end_index = i else: lcsuff[i][j] = 0 if length_max == 0: return \\"\\" return str1[end_index - length_max: end_index]"},{"question":"Write a function to reverse the nodes of a linked list and return the new head. The function should take a \`ListNode\` object as the head of the linked list as input and return a new \`ListNode\` object representing the head of the reversed linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the singly linked list. :param head: ListNode object representing the head of the linked list :return: ListNode object representing the head of the reversed linked list prev = None current = head while current is not None: next_node = current.next # save next current.next = prev # reverse the link prev = current # advance prev current = next_node # advance current return prev # new head of the reversed list"},{"question":"Write a function to simulate a simple dice roll. The function should return a random integer between 1 and 6, inclusive.","solution":"import random def roll_dice(): Simulates a roll of a six-sided dice, returning an integer between 1 and 6, inclusive. return random.randint(1, 6)"},{"question":"Write a function to find the median of two sorted lists of integers.","solution":"def find_median_sorted_arrays(nums1, nums2): Finds the median of two sorted arrays. nums = sorted(nums1 + nums2) length = len(nums) if length % 2 == 1: return nums[length // 2] else: return (nums[length // 2 - 1] + nums[length // 2]) / 2"},{"question":"Write a function to find the second largest number in a list. If the list has fewer than two elements, the function should return \`None\`.","solution":"def second_largest(numbers): Returns the second largest number in a list. If the list has fewer than two elements, returns None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a function to print all the factors of a given number. The function should take an integer as input and print all its factors, from the smallest to the largest.","solution":"def print_factors(n): Prints all factors of the given number n. if n <= 0: return \\"Number should be greater than zero.\\" factors = [i for i in range(1, n + 1) if n % i == 0] return factors # Example usage: # factors = print_factors(28) # print(factors) # Output: [1, 2, 4, 7, 14, 28]"},{"question":"Write a function to normalize an array of floating-point numbers. Normalization is defined as scaling the values so that the minimum value becomes 0 and the maximum value becomes 1. All other values should be scaled proportionally between 0 and 1. It should also handle the case where the array might contain identical values.","solution":"def normalize(arr): Normalizes an array of floating-point numbers so that each value is scaled between 0 and 1. If all values in the array are identical, all outputs will be 0.5. if len(arr) == 0: return [] min_val = min(arr) max_val = max(arr) if min_val == max_val: return [0.5] * len(arr) return [(x - min_val) / (max_val - min_val) for x in arr]"},{"question":"Write a function to compute the Nth Fibonacci number in Python. Can you provide the efficient implementation using dynamic programming?","solution":"def fibonacci(n): Returns the Nth Fibonacci number using dynamic programming. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 fib = [0, 1] + [0] * (n - 2) for i in range(2, n): fib[i] = fib[i - 1] + fib[i - 2] return fib[n - 1]"},{"question":"Write a function to generate all the factors of a given number.","solution":"def factors(n): Returns a list of all factors of the given number n. Parameters: n (int): The number to find the factors of. Returns: list: A list of factors of n. result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a function to calculate the total number of blocks in a pyramid pattern. The pyramid has a specified number of levels, and each level has one more block than the level below it. The function should return a list where each element represents the total number of blocks up to that level.","solution":"def pyramid_blocks(levels): Calculate the total number of blocks in a pyramid pattern where each level has one more block than the level below it. :param levels: Number of levels in the pyramid. :return: A list where each element represents the total number of blocks up to that level. total_blocks = [] current_blocks = 0 for level in range(1, levels + 1): current_blocks += level total_blocks.append(current_blocks) return total_blocks"},{"question":"Write a function to identify if a given integer is divisible by the sum of its digits without leaving a remainder.","solution":"def is_divisible_by_digit_sum(n): Check if a given integer is divisible by the sum of its digits without leaving a remainder. Parameters: n (int): The integer to be checked. Returns: bool: True if n is divisible by the sum of its digits, False otherwise. if n == 0: return False digit_sum = sum(int(digit) for digit in str(abs(n))) return n % digit_sum == 0"},{"question":"Write a function to calculate the batting average of a baseball player based on the given number of hits and at-bats. The batting average is calculated as the number of hits divided by the number of at-bats.","solution":"def batting_average(hits, at_bats): Calculate the batting average for a baseball player. Parameters: hits (int): Number of hits. at_bats (int): Number of at-bats. Returns: float: Calculated batting average, rounded to 3 decimal places. if at_bats == 0: return 0.0 return round(hits / at_bats, 3)"},{"question":"Write a function to calculate the sum of all even numbers in an array. How can I build a function in Python that checks if an array contains any even numbers and then if they do, sums them up?","solution":"def sum_of_evens(array): Returns the sum of all even numbers in the array. if not array: return 0 return sum(num if num % 2 == 0 else 0 for num in array)"},{"question":"Write a function to sort a list of strings alphabetically. The function should take a list of strings as input and return the sorted list. The sorting should be case-insensitive and handle special characters and numbers.","solution":"def sort_strings_alphabetically(strings): Sorts a list of strings alphabetically in a case-insensitive manner. Special characters and numbers are considered in the sorting order. Parameters: strings (list of str): The list of strings to sort. Returns: list of str: The sorted list of strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"Write a function to find the common elements in two lists. The function should return the common elements without duplicates.","solution":"def common_elements(list1, list2): Returns a list of the common elements between list1 and list2 without duplicates. # Convert lists to sets and find the intersection set1 = set(list1) set2 = set(list2) common = set1.intersection(set2) # Return the common elements as a list return list(common)"},{"question":"Write a function to calculate the number of distinct permutations of a given string where the order of characters matters.","solution":"from math import factorial from collections import Counter def count_distinct_permutations(s): Returns the number of distinct permutations of the given string \`s\`. if not s: return 0 char_count = Counter(s) num = factorial(len(s)) den = 1 for count in char_count.values(): den *= factorial(count) return num // den"},{"question":"Write a function to calculate the area of a circle given its radius. The function should take one parameter, the radius of the circle, and return the area. The area should be calculated using the formula \`area = π * radius^2\`. Use the value of π as 3.14159 to compute the area.","solution":"def area_of_circle(radius): Returns the area of a circle given its radius. The area is calculated using the formula: area = π * radius^2 where π is approximated to 3.14159. Parameters: radius (float): The radius of the circle Returns: float: The area of the circle pi = 3.14159 return pi * (radius ** 2)"},{"question":"Write a function to print all even numbers in a list using recursion.","solution":"def print_even_numbers(numbers, index=0, even_numbers=None): Recursively prints all even numbers in the provided list. :param numbers: List of integers. :param index: Current index in the recursive call. :param even_numbers: Used to collect even numbers recursively. :return: List of even numbers. if even_numbers is None: even_numbers = [] if index == len(numbers): return even_numbers if numbers[index] % 2 == 0: even_numbers.append(numbers[index]) return print_even_numbers(numbers, index + 1, even_numbers) # Helper function needed to print the even numbers (additional non-recursive helper function). def get_even_numbers(numbers): Obtain a list of even numbers using the recursive solution. return print_even_numbers(numbers)"},{"question":"Write a function to generate all permutations of the characters in a given string.","solution":"from itertools import permutations def generate_permutations(s): Returns all permutations of the characters in the string s. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to multiply a matrix by a scalar. The function should take as inputs an m x n matrix A and a scalar value c. The function should return the resulting m x n matrix where each element of the matrix has been multiplied by the scalar c.","solution":"def multiply_matrix_by_scalar(matrix, scalar): Multiplies each element of the matrix by the scalar value. Args: matrix: list of list of numbers, representing the m x n matrix scalar: number to multiply each element by Returns: list of list of numbers, the resulting m x n matrix # Create a new matrix for results to avoid modifying the input matrix result = [] for row in matrix: new_row = [element * scalar for element in row] result.append(new_row) return result"},{"question":"Write a function to reverse a string in Python. Also, write a function that uses this reverse function to check if a given string is a palindrome.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1] def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. A string is considered a palindrome if it reads the same forwards and backwards. reversed_s = reverse_string(s) return s == reversed_s"},{"question":"Write a function to remove all occurrences of a specified value from a list and return the modified list. The function should handle various data types, including integers, strings, etc.","solution":"def remove_occurrences(lst, value): Remove all occurrences of the specified value from the list. Args: lst (list): The list from which to remove the value. value: The value to be removed from the list. Returns: list: The modified list with all occurrences of the value removed. return [item for item in lst if item != value]"},{"question":"Write a function to calculate the factorial of a given number n. The function should be able to handle large numbers efficiently, so consider using an iterative approach to avoid potential stack overflow issues.","solution":"def factorial(n): Returns the factorial of a given number n. The approach is iterative to handle large numbers efficiently. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to reverse a linked list. The function should take the head of the linked list as an input and return the new head of the reversed linked list. The linked list is represented using a custom Node class with methods \`__init__\`, \`get_next\`, and \`set_next\`.","solution":"class Node: def __init__(self, value): self.value = value self.next = None def get_next(self): return self.next def set_next(self, next_node): self.next = next_node def reverse_linked_list(head): Reverses a linked list. :param head: Node, The head of the linked list. :return: Node, The new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.get_next() current.set_next(prev) prev = current current = next_node return prev"},{"question":"Write a function to check if a string is a palindrome using a stack data structure efficient approach. How should I approach this problem?","solution":"def is_palindrome(s): Checks if the given string is a palindrome using a stack data structure. stack = [] # Initialize a stack # Push all characters of the string onto the stack for char in s: stack.append(char) # Check each character with the corresponding character popped from the stack for char in s: if char != stack.pop(): return False return True"},{"question":"Write a function to multiply two numbers without using the '*' operator, and you are not allowed to use any loop.","solution":"def multiply(x, y): Multiplies two numbers without using the '*' operator and without using loops. This function uses recursion to achieve multiplication. # base case for recursion if y == 0: return 0 # if y is negative, process the multiplication and flip the sign elif y < 0: return -multiply(x, -y) # recursive step else: return x + multiply(x, y - 1)"},{"question":"Write a function to reverse a string in Python. You should not use the built-in slicing method (e.g., string[::-1]).","solution":"def reverse_string(s): Returns the reversed string of s without using slicing. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to identify the type of triangle based on the lengths of its sides.","solution":"def triangle_type(a, b, c): Determines the type of triangle given the lengths of its sides a, b, and c. Returns: - 'Equilateral' if all three sides are equal. - 'Isosceles' if exactly two sides are equal. - 'Scalene' if no sides are equal. - 'Not a triangle' if the sides do not form a valid triangle. # Check for a valid triangle if (a + b > c) and (a + c > b) and (b + c > a): if a == b == c: return 'Equilateral' elif a == b or b == c or a == c: return 'Isosceles' else: return 'Scalene' else: return 'Not a triangle'"},{"question":"Write a function to determine if a given positive integer \`n\` can be expressed as the sum of exactly three positive even integers. Your function should return \`true\` if \`n\` can be expressed as such a sum, and \`false\` otherwise.","solution":"def can_be_sum_of_three_even_numbers(n): Determine if the given positive integer n can be expressed as the sum of exactly three positive even integers. :param n: int, positive integer :return: bool, True if n can be expressed as such a sum, False otherwise # For n to be a sum of 3 positive even numbers, it must be greater than or equal to 6 # and even. if n >= 6 and n % 2 == 0: return True return False"},{"question":"Write a function to find the number of unique elements in an array. You should not consider duplicates as unique elements.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the array. Elements that appear more than once are not considered unique. element_count = {} for elem in arr: if elem in element_count: element_count[elem] += 1 else: element_count[elem] = 1 unique_count = 0 for count in element_count.values(): if count == 1: unique_count += 1 return unique_count"},{"question":"Write a function to find the maximum profit we can achieve from selling and buying a stock multiple times.","solution":"def max_profit(prices): Given a list of prices where the index represents the day, computes the maximum profit that can be achieved by buying and selling stocks multiple times. :param prices: List of stock prices :return: Maximum profit profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit"},{"question":"Write a function to reverse a linked list using recursion. Give an example of how to use the function and its steps.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list using recursion. Args: head (ListNode): Head of the linked list. Returns: ListNode: New head of the reversed linked list. if head is None or head.next is None: return head new_head = reverse_linked_list(head.next) head.next.next = head head.next = None return new_head # Example usage: # Given a linked list 1 -> 2 -> 3 -> 4 -> 5 # The reversed linked list will be 5 -> 4 -> 3 -> 2 -> 1 # Creating the linked list head = ListNode(1) head.next = ListNode(2) head.next.next = ListNode(3) head.next.next.next = ListNode(4) head.next.next.next.next = ListNode(5) # Reversing the linked list reversed_head = reverse_linked_list(head) # Printing the reversed linked list current = reversed_head while current: print(current.value, end=\\" -> \\" if current.next else 'n') current = current.next"},{"question":"Write a function to generate the nth Fibonacci number in Python, using iteration rather than recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to delete a node from a singly linked list without access to the head of the list. You are given only access to that node. The node can be either in the middle or at the end of the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_node(node): Function to delete a node from a singly linked list given access only to that node. Note: The node must not be the last node of the list. # Copy the value of the next node into the current node node.val = node.next.val # Point the current node to the node after the next node node.next = node.next.next"},{"question":"Write a function to print the longest valid parentheses substring's length in a given string containing just the characters '(' and ')'. A valid parentheses substring is one where every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are properly matched.","solution":"def longest_valid_parentheses(s: str) -> int: Returns the length of the longest valid parentheses substring in the given string s. max_length = 0 stack = [-1] # Initialize stack with base index -1 for i, char in enumerate(s): if char == '(': stack.append(i) # Push the index of the '(' onto the stack else: stack.pop() # Pop the top index from the stack if not stack: stack.append(i) # If stack is empty after pop, push current index else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Write a function to implement the FizzBuzz problem. The function should take one argument n, and return a list of strings from 1 to n, but for multiples of 3, Return \\"Fizz\\" instead of the number, for multiples of 5, return \\"Buzz\\", and for multiples of 15, return \\"FizzBuzz\\".","solution":"def fizzbuzz(n): Returns a list of strings from 1 to n following the FizzBuzz rules: - For multiples of 3, return \\"Fizz\\" instead of the number. - For multiples of 5, return \\"Buzz\\" instead of the number. - For multiples of 15, return \\"FizzBuzz\\" instead of the number. result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to reverse the first k elements of an integer array. If k is greater than the size of the array, reverse all elements.","solution":"def reverse_first_k_elements(arr, k): Reverses the first k elements of the array. If k is greater than the size of the array, reverses all elements. Parameters: arr (list): The list of integers. k (int): Number of elements from the beginning to reverse. Returns: list: The array with the first k elements reversed. if k > len(arr): k = len(arr) return arr[:k][::-1] + arr[k:]"},{"question":"Write a function to calculate the sum of all the positive numbers in an array of integers.","solution":"def sum_of_positive_numbers(arr): Returns the sum of all positive numbers in the array. Parameters: arr (list of int): The array of integers Returns: int: The sum of all positive numbers in the array return sum(x for x in arr if x > 0)"},{"question":"Write a function to determine if a number is prime in Python. A prime number is a number that has exactly two distinct positive divisors: 1 and itself. For example, 2, 3, 5, 7, 11 are prime numbers, while 4, 6, 8, 9, 10 are not.","solution":"def is_prime(n): Determines if a number is prime. Parameters: n (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to find the median of two sorted arrays. The function should be able to handle both even and odd combined array lengths and should work in linear time complexity without using extra space.","solution":"def find_median_sorted_arrays(nums1, nums2): This function finds the median of two sorted arrays. Args: nums1 (list[int]): The first sorted array. nums2 (list[int]): The second sorted array. Returns: float: The median of the two sorted arrays. def find_kth_smallest(a, b, k): Helper function to find the k-th smallest element. if not a: return b[k] if not b: return a[k] mid_a, mid_b = len(a) // 2 , len(b) // 2 mid_a_val, mid_b_val = a[mid_a], b[mid_b] if mid_a + mid_b < k: if mid_a_val > mid_b_val: return find_kth_smallest(a, b[mid_b+1:], k - mid_b - 1) else: return find_kth_smallest(a[mid_a+1:], b, k - mid_a - 1) else: if mid_a_val > mid_b_val: return find_kth_smallest(a[:mid_a], b, k) else: return find_kth_smallest(a, b[:mid_b], k) total_len = len(nums1) + len(nums2) if total_len % 2 == 1: return find_kth_smallest(nums1, nums2, total_len // 2) else: return (find_kth_smallest(nums1, nums2, total_len // 2 - 1) + find_kth_smallest(nums1, nums2, total_len // 2)) / 2"},{"question":"Write a function to check if a given string s is a \\"good\\" string. A \\"good\\" string is defined as a non-empty string where no two adjacent characters are the same.","solution":"def is_good_string(s): Checks if the given string s is a 'good' string. A 'good' string is defined as a non-empty string where no two adjacent characters are the same. Parameters: s (str): The input string to check. Returns: bool: True if s is a good string, False otherwise. if len(s) == 0: return False for i in range(len(s) - 1): if s[i] == s[i + 1]: return False return True"},{"question":"Write a function to compute the sum of an array. The function should take an array of integers as input and return the sum of all the integers in the array. If the array is empty, the function should return 0.","solution":"def sum_array(array): Returns the sum of all integers in the input array. If the array is empty, returns 0. return sum(array)"},{"question":"Write a function to find the nth Fibonacci number in Python. The function should be efficient and have a time complexity of O(log n). The solution should use matrix exponentiation to achieve this. Explain the approach and the final code.","solution":"def matrix_multiply(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_power(matrix, n): Computes the power of a 2x2 matrix using exponentiation by squaring. result = [[1, 0], [0, 1]] # Identity matrix base = matrix while n > 0: if n % 2 == 1: result = matrix_multiply(result, base) base = matrix_multiply(base, base) n //= 2 return result def fibonacci(n): Returns the nth Fibonacci number using matrix exponentiation. if n <= 0: return 0 elif n == 1: return 1 # The transformation matrix F = [[1, 1], [1, 0]] # Raise the transformation matrix to the (n-1)th power F_n_minus_1 = matrix_power(F, n - 1) # The nth Fibonacci number is the element at (0, 0) in the resulting matrix return F_n_minus_1[0][0]"},{"question":"Write a function to determine if a tree is height-balanced. A tree is balance if the height difference between left and right subtree of any node is not more than 1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determine if a binary tree is height-balanced. A binary tree is balanced if the height difference between the left and right subtree of any node is not more than 1. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = 1 + max(left_height, right_height) is_current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, is_current_balanced _, balanced = check_height(root) return balanced"},{"question":"Write a function to check whether a given string is a valid palindrome ignoring non-alphanumeric characters and considering only lowercase letters.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome considering only alphanumeric characters and ignoring cases. Otherwise, returns False. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to find the minimum number in a given array, ensuring the array does not contain any duplicates.","solution":"def find_min_number(arr): Returns the minimum number in a given array. :param arr: List of integers without duplicates :return: The minimum integer in the list if not arr: raise ValueError(\\"Array cannot be empty\\") return min(arr)"},{"question":"Write a function to convert a string to a base64 encoded string.","solution":"import base64 def string_to_base64(input_string): Converts a given string to its base64 encoded string. Parameters: input_string (str): The string to be converted. Returns: str: The base64 encoded string. encoded_bytes = base64.b64encode(input_string.encode('utf-8')) encoded_string = encoded_bytes.decode('utf-8') return encoded_string"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been \\"rotated\\" by a certain number of positions. A \\"rotated\\" array means that the last k elements of the original array are moved to the front. For example, rotating [3, 4, 5, 1, 2] by 2 positions results in [1, 2, 3, 4, 5]. The function should return the maximum sum of any contiguous subarray within this rotated array.","solution":"def max_sum_of_rotated_subarray(arr, k): Finds the maximum sum of a contiguous subarray within a rotated one-dimensional array of numbers. Parameters: arr (list of int): The original array of numbers k (int): The number of positions by which the array is rotated; rotating right by k positions. Returns: int: The maximum sum of any contiguous subarray within the rotated array def kadane(arr): # Standard Kadane's algorithm to find the max sum of a contiguous subarray. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far n = len(arr) k = k % n # Normalize k to ensure it's within bounds of the array length if k == 0: return kadane(arr) rotated_arr = arr[-k:] + arr[:-k] return kadane(rotated_arr)"},{"question":"Write a function to convert a string to uppercase, but only convert the letters after the second occurrence of a space. For example, if the input string is \\"abc def ghi jkl\\", the output should be \\"abc def GHI JKL\\".","solution":"def convert_after_second_space(s): Converts all characters to uppercase after the second occurrence of a space in the given string. Parameters: s (str): The input string. Returns: str: The modified string with characters after the second space in uppercase. space_count = 0 for i, char in enumerate(s): if char == \\" \\": space_count += 1 if space_count == 2: return s[:i+1] + s[i+1:].upper() return s # Return the original string if there are less than 2 spaces."},{"question":"Write a function to calculate the average of a list of numbers. Ensure the function is well-documented, includes error handling, and can handle empty lists gracefully.","solution":"def average(numbers): Calculate the average of a list of numbers. Parameters: numbers (list): A list of numeric values. Returns: float: The average of the numbers in the list. If the list is empty, returns 0.0. Raises: ValueError: If any element in the list is not a number. if not numbers: return 0.0 total = 0 count = 0 for num in numbers: if not isinstance(num, (int, float)): raise ValueError(\\"All elements in the list must be numeric.\\") total += num count += 1 return total / count"},{"question":"Write a function to find the maximum sum of a subarray within a given array of numbers. This is a classic problem that can be solved using Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the given array of numbers. Implements Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to implement the Kadane's algorithm for finding the maximum sum subarray in an integer array. Provide a step-by-step explanation and code in Python.","solution":"def kadane_algorithm(arr): Implements Kadane's algorithm to find the maximum sum subarray. Args: arr (list of int): A list of integers which may contain positive and negative numbers. Returns: int: The maximum sum of the subarray. if not arr: # handle empty array case return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to reverse the order of words in a given string. The input string is a sentence where the words are separated by spaces. Your function should return the string with the words in reverse order.","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence. Args: sentence (str): The input sentence. Returns: str: The sentence with words in reverse order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to check if a string is a valid IPv4 address. A valid IPv4 address consists of four segments separated by dots, where each segment is a number between 0 and 255. The function should return \`True\` if the string is a valid IPv4 address, otherwise it should return \`False\`.","solution":"def is_valid_ipv4(address): Checks if the given string is a valid IPv4 address. Parameters: address (str): The string to be checked. Returns: bool: True if the string is a valid IPv4 address, else False. parts = address.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False part_int = int(part) if part_int < 0 or part_int > 255: return False return True"},{"question":"Write a function to check whether a substring exists in a string or not. If the substring exists, return True, otherwise return False.","solution":"def substring_exists(main_string, sub_string): Returns True if sub_string exists in main_string, otherwise returns False. return sub_string in main_string"},{"question":"Write a function to find the longest common subsequence (LCS) between two strings. What is the function signature and what does it return?","solution":"def longest_common_subsequence(str1, str2): Returns the length of longest common subsequence between two strings. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a function to calculate the count of all possible distinct pairs in an array that add up to a given number. For example, given the array [1, 5, 7, -1] and a sum of 6, the number of pairs is 2 (1+5, 7+-1).","solution":"def count_pairs_with_sum(arr, target_sum): Returns the count of all possible distinct pairs in the array that add up to the given target_sum. Parameters: arr (list): The list of integers. target_sum (int): The target sum for the pairs. Returns: int: The count of pairs that add up to the target_sum. pair_count = 0 seen_numbers = {} for number in arr: complement = target_sum - number if complement in seen_numbers: pair_count += seen_numbers[complement] if number in seen_numbers: seen_numbers[number] += 1 else: seen_numbers[number] = 1 return pair_count"},{"question":"Write a function to find the maximum element in a given list. The function should be called \`find_max_element\` and it should take one parameter: a list of integers. It should return the maximum element from the list. If the list is empty, the function should return \`None\`.","solution":"def find_max_element(lst): Returns the maximum element in the given list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a function to generate all subsets of a given set. The function should take a set as input and return a list of all possible subsets.","solution":"def subsets(s): Generates all subsets of a given set s. Parameters: s (set): A set of unique elements Returns: list: A list of all possible subsets from itertools import chain, combinations # Convert the set to a sorted list to have consistent order s = list(s) # Generate all subsets all_subsets = list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1))) return [set(subset) for subset in all_subsets]"},{"question":"Write a function to calculate the average of all elements in a list of integers. If the list is empty, return 0. Ensure that your function works for both positive and negative integers.","solution":"def average(numbers): Returns the average of all elements in the list of integers. If the list is empty, returns 0. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a function to find the maximum sum of a continuous subarray of length \`k\` in an array \`nums\`.","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of a continuous subarray of length k in the array nums. if not nums or len(nums) < k: return None max_sum = sum(nums[:k]) current_sum = max_sum for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to calculate the sum of all positive integers in a given list. The function should ignore any non-integer and negative values.","solution":"def sum_positive_integers(lst): Returns the sum of all positive integers in the provided list. Parameters: lst (list): The list of elements to process. Returns: int: The sum of all positive integers in the list. return sum(x for x in lst if isinstance(x, int) and x > 0)"},{"question":"Write a function to detect whether there is a cycle in an undirected graph.","solution":"def has_cycle(graph): Detects whether there is a cycle in an undirected graph. The graph is represented as an adjacency list. :param graph: A dictionary where keys are node ids and values are lists of adjacent node ids :return: True if there is a cycle, False otherwise def dfs(node, parent, visited): visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, node, visited): return True elif parent != neighbor: return True return False visited = set() for node in graph: if node not in visited: if dfs(node, None, visited): return True return False"},{"question":"Write a function to convert a string to a valid IP address. The given string consists only of digits.","solution":"def valid_ip_addresses(s): Given a string s consisting only of digits, returns a list of all possible valid IP addresses that can be obtained from s. A valid IP address consists of four numbers (each between 0 and 255) separated by periods. def is_valid(segment): return int(segment) <= 255 if segment[0] != '0' else len(segment) == 1 def backtrack(start=0, dots=0, path=\\"\\"): if dots == 4 and start == len(s): result.append(path[:-1]) return for i in range(1, 4): if start + i > len(s): break segment = s[start:start+i] if is_valid(segment): backtrack(start+i, dots+1, path+segment+\\".\\") result = [] if 4 <= len(s) <= 12: backtrack() return result"},{"question":"Write a function to find the maximum sum of all nodes in all possible paths in a binary tree. Each path needs to start from the root and go down to any leaf. You can assume that all nodes will have non-negative integer values.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum_from_root_to_leaf(root): Returns the maximum sum of all nodes from root to any leaf. :param root: TreeNode :return: int if not root: return 0 left_sum = max_path_sum_from_root_to_leaf(root.left) right_sum = max_path_sum_from_root_to_leaf(root.right) return root.val + max(left_sum, right_sum)"},{"question":"Write a function to calculate nCr which is the number of ways to choose r items from n items without regard to the order of selection. The solution should use the efficient form of calculating nCr to avoid large intermediate values that can lead to overflow.","solution":"def nCr(n, r): Calculate the number of ways to choose r items from n items without regard to the order of selection using an efficient approach. if r > n: return 0 if r == 0 or r == n: return 1 r = min(r, n - r) # Because nCr is symmetric around n/2 num = 1 den = 1 for i in range(r): num *= (n - i) den *= (i + 1) return num // den"},{"question":"Write a function to find all possible subsets that include a given set of numbers and the target sum.","solution":"def find_subsets_with_target_sum(nums, target): Returns all subsets that sum up to the target sum. :param nums: List of integers. :param target: Target sum for the subsets. :return: List of lists, each containing a subset that sums up to the target. result = [] def backtrack(start, current_subset, current_sum): if current_sum == target: result.append(list(current_subset)) return for i in range(start, len(nums)): if current_sum + nums[i] > target: continue current_subset.append(nums[i]) backtrack(i + 1, current_subset, current_sum + nums[i]) current_subset.pop() nums.sort() backtrack(0, [], 0) return result"},{"question":"Write a function to draw a simple triangle in a matrix. The matrix should be of size \`n x n\`, where \`n\` is an odd integer. The center of the triangle should be at the middle of the matrix and it should face downwards.","solution":"def draw_triangle(n): Draws a downward facing triangle in an n x n matrix, where n is an odd integer and returns the matrix. if n % 2 == 0: raise ValueError(\\"n must be an odd integer\\") matrix = [[' ' for _ in range(n)] for _ in range(n)] mid = n // 2 for i in range(mid, n): for j in range(mid - (i - mid), mid + (i - mid) + 1): matrix[i][j] = '*' return matrix"},{"question":"Write a function to find the shortest path in a maze using Dijkstra's algorithm.","solution":"import heapq def dijkstra(maze, start, end): Finds the shortest path in a maze using Dijkstra's algorithm. Parameters: maze: List of lists, representing the maze where each cell can be a walkable path (0) or a wall (1) start: Tuple representing the starting coordinates (row, col) end: Tuple representing the ending coordinates (row, col) Returns: An integer representing the length of the shortest path from start to end, or -1 if no such path exists. rows, cols = len(maze), len(maze[0]) def neighbors(row, col): for r, c in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]: if 0 <= r < rows and 0 <= c < cols and maze[r][c] == 0: yield r, c heap = [(0, start)] # (dist, (row, col)) distances = {start: 0} while heap: current_dist, (cur_row, cur_col) = heapq.heappop(heap) if (cur_row, cur_col) == end: return current_dist for neigh_row, neigh_col in neighbors(cur_row, cur_col): distance = current_dist + 1 if (neigh_row, neigh_col) not in distances or distance < distances[(neigh_row, neigh_col)]: distances[(neigh_row, neigh_col)] = distance heapq.heappush(heap, (distance, (neigh_row, neigh_col))) return -1 # if no path found"},{"question":"Write a function to find the Hamming Weight (number of 1 bits) of a given integer.","solution":"def hamming_weight(n): Returns the Hamming Weight (number of 1 bits) of a given integer. return bin(n).count('1')"},{"question":"Write a function to convert an integer (32-bit signed integer) to a Roman numeral, and another function to convert a Roman numeral back to an integer.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def roman_to_int(s): Converts a Roman numeral to an integer. roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} integer = 0 for i in range(len(s)): if i > 0 and roman[s[i]] > roman[s[i - 1]]: integer += roman[s[i]] - 2 * roman[s[i - 1]] else: integer += roman[s[i]] return integer"},{"question":"Write a function to convert a number to binary in Python.","solution":"def number_to_binary(n): Converts a given integer to its binary representation as a string. Parameters: n (int): The integer to be converted to binary. Returns: str: Binary representation of the given integer. if n < 0: return \\"-\\" + bin(n)[3:] return bin(n)[2:]"},{"question":"Write a function to solve the 8 puzzle problem which can move, left, right, up, and down.","solution":"import heapq def heuristic(state, goal): h = 0 for i in range(1, 9): xi, yi = divmod(state.index(i), 3) xg, yg = divmod(goal.index(i), 3) h += abs(xi - xg) + abs(yi - yg) return h def get_neighbors(state): neighbors = [] zero_index = state.index(0) zero_x, zero_y = divmod(zero_index, 3) # Move Up if zero_x > 0: new_state = state[:] up_index = zero_index - 3 new_state[zero_index], new_state[up_index] = new_state[up_index], new_state[zero_index] neighbors.append(new_state) # Move Down if zero_x < 2: new_state = state[:] down_index = zero_index + 3 new_state[zero_index], new_state[down_index] = new_state[down_index], new_state[zero_index] neighbors.append(new_state) # Move Left if zero_y > 0: new_state = state[:] left_index = zero_index - 1 new_state[zero_index], new_state[left_index] = new_state[left_index], new_state[zero_index] neighbors.append(new_state) # Move Right if zero_y < 2: new_state = state[:] right_index = zero_index + 1 new_state[zero_index], new_state[right_index] = new_state[right_index], new_state[zero_index] neighbors.append(new_state) return neighbors def a_star(start, goal): frontier = [] heapq.heappush(frontier, (0 + heuristic(start, goal), 0, start, [])) visited = set() while frontier: f, g, current, path = heapq.heappop(frontier) if current == goal: return path + [current] visited.add(tuple(current)) for neighbor in get_neighbors(current): if tuple(neighbor) not in visited: heapq.heappush(frontier, (g + 1 + heuristic(neighbor, goal), g + 1, neighbor, path + [current])) return None def solve_8_puzzle(start, goal=[1, 2, 3, 4, 5, 6, 7, 8, 0]): Solves the 8-puzzle problem from the start state to the goal state. Returns a list of states representing the path from the start state to the goal state. return a_star(start, goal)"},{"question":"Write a function to perform string rotation on a given string \\"hello\\" using Python. String rotation means rotating the characters of the string by a specified number of positions.","solution":"def rotate_string(s, n): Rotates the string s by n positions. If n is positive, rotate to the right. If n is negative, rotate to the left. if not s: return s n = n % len(s) # handle rotations greater than the string length return s[-n:] + s[:-n]"},{"question":"Write a function to reverse the digits of an integer. However, if the reversed integer overflows (either becomes too large or too small to be stored as a 32-bit signed integer), the function should return 0. A 32-bit signed integer has a range from -2^31 to 2^31 - 1.","solution":"def reverse_integer(x): Reverse the digits of an integer. If the reversed integer overflows, return 0. INT_MIN, INT_MAX = -2**31, 2**31 - 1 negative = x < 0 x = abs(x) reversed_x = int(str(x)[::-1]) if negative: reversed_x = -reversed_x if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Write a function to count the number of uppercase and lowercase letters in a given string. Your function should return a dictionary with keys 'uppercase' and 'lowercase' and corresponding counts.","solution":"def count_upper_lower(s): Counts the number of uppercase and lowercase letters in the given string. Parameters: s (str): The input string to count letters from. Returns: dict: A dictionary with keys 'uppercase' and 'lowercase' and their corresponding counts. result = {'uppercase': 0, 'lowercase': 0} for char in s: if char.isupper(): result['uppercase'] += 1 elif char.islower(): result['lowercase'] += 1 return result"},{"question":"Write a function to solve the following puzzle: \\"You are given a list of integers. Your function should return the maximum and minimum number in the list.\\"","solution":"def find_max_min(numbers): Returns a tuple with the maximum and minimum number in the list. if not numbers: raise ValueError(\\"The list must not be empty\\") return (max(numbers), min(numbers))"},{"question":"Write a function to reverse a list in Python. You should not use the built-in \`reverse()\` method or slicing (\`[::-1]\`). Additionally, implement your own method to check if the reversed list is correctly reversed or not.","solution":"def reverse_list(lst): Reverses the given list without using the built-in reverse() method or slicing. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst def is_reversed(original, reversed_lst): Checks if the reversed_lst is the correct reverse of the original list. return original == reverse_list(reversed_lst)"},{"question":"Write a function to find the second largest number in an array of integers. If there is no second largest number (e.g., array has less than 2 unique elements), return \`None\`.","solution":"def second_largest_number(arr): Returns the second largest number in an array of integers. If there is no second largest number, returns None. if len(arr) < 2: return None first_max = second_max = float('-inf') for num in arr: if num > first_max: second_max = first_max first_max = num elif first_max > num > second_max: second_max = num return second_max if second_max != float('-inf') else None"},{"question":"Write a function to generate all possible combinations of two strings. For example, given \\"abc\\" and \\"def\\", the function should return \`[\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"]\`.","solution":"import itertools def generate_combinations(s1, s2): Generates all possible combinations of two strings. :param s1: First string :param s2: Second string :return: List of all possible combinations of characters from s1 and s2 return [''.join(pair) for pair in itertools.product(s1, s2)]"},{"question":"Write a function to cyclically shift the elements of an array by three positions to the right. If the array length is less than three, return the array as it is.","solution":"def cyclic_shift_right_by_three(arr): Cyclically shifts the elements of the array by three positions to the right. If the array length is less than three, return the array as it is. Parameters: arr (list): The array to shift. Returns: list: The shifted array. n = len(arr) if n < 3: return arr return arr[-3:] + arr[:-3]"},{"question":"Write a function to calculate the sum of all numbers in an array of integers using recursion. The function should handle both positive and negative integers.","solution":"def sum_array(arr): Recursively calculates the sum of all numbers in an array. if not arr: return 0 else: return arr[0] + sum_array(arr[1:])"},{"question":"Write a function to calculate the sum of all elements in an array. The function should take an array of integers as input and return the sum of all elements.","solution":"def array_sum(arr): Returns the sum of all elements in the array. Parameters: arr (list of int): The input array containing integers. Returns: int: The sum of all elements in the array. return sum(arr)"},{"question":"Write a function to determine the longest sequence of consecutive ones in a given list of binary numbers. This function should be optimized and concise.","solution":"def longest_consecutive_ones(binary_list): Returns the length of the longest sequence of consecutive 1s in the binary_list. max_count = 0 current_count = 0 for number in binary_list: if number == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Write a function to reverse a linked list and return the head. The input will be a singly linked list where each node has a value and a pointer to the next node. You need to reverse the order of the nodes in the linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list and returns the new head. prev = None curr = head while curr: next_temp = curr.next curr.next = prev prev = curr curr = next_temp return prev"},{"question":"Write a function to solve the following problem: Given an array of integers, return all the triplets in the array which gives the sum of zero. The function should return a list of all such unique triplets. For example, given the array [-1, 0, 1, 2, -1, -4], the function should return [[-1, -1, 2], [-1, 0, 1]].","solution":"def three_sum(nums): Given an array of integers, return all the triplets in the array which gives the sum of zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Write a function to find the second highest number in a list.","solution":"def second_highest(numbers): Returns the second highest number in a list. If the list has less than 2 distinct numbers, returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a function to calculate the sum of squares of the elements in an array where elements are between 1 and n, where n is the size of the array. The function should return the sum if it exists, otherwise return -1.","solution":"def sum_of_squares(arr): Returns the sum of squares of the elements in an array where elements are between 1 and n, where n is the size of the array. If elements are not between 1 and n, returns -1. n = len(arr) for elem in arr: if elem < 1 or elem > n: return -1 return sum(x ** 2 for x in arr)"},{"question":"Write a function to find the LCA (Lowest Common Ancestor) of two nodes in a binary tree. The function should return the LCA if it exists, otherwise return null. Assume the binary tree is not necessarily a binary search tree (BST) but a general binary tree.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def find_LCA(root, n1, n2): Finds the lowest common ancestor (LCA) of two nodes in a binary tree. If either n1 or n2 is not present, returns None. # Helper function to find the LCA of two nodes in the binary tree def find_LCA_helper(root, n1, n2): if root is None: return None if root.key == n1 or root.key == n2: return root left_lca = find_LCA_helper(root.left, n1, n2) right_lca = find_LCA_helper(root.right, n1, n2) if left_lca and right_lca: return root return left_lca if left_lca else right_lca # Check if both n1 and n2 are present in the tree def find(root, key): if root is None: return False if root.key == key: return True return find(root.left, key) or find(root.right, key) if find(root, n1) and find(root, n2): return find_LCA_helper(root, n1, n2) return None"},{"question":"Write a function to reverse the first k elements of an array and return the modified array. If k is greater than the length of the array, reverse the entire array.","solution":"def reverse_first_k_elements(arr, k): Reverses the first k elements of the array. If k is greater than the length of the array, the entire array is reversed. Args: arr (list): The array to be modified. k (int): The number of elements to reverse. Returns: list: The modified array with the first k elements reversed. if k > len(arr): k = len(arr) arr[:k] = arr[:k][::-1] return arr"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number \`n\` using recursive programming.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to search for a target value in a 2D array (matrix). The function should use a two-pointer technique from both ends of the matrix. If the target is found, return \`True\`. Otherwise, return \`False\`.","solution":"def search_matrix(matrix, target): Searches for a target value in a 2D matrix using a two-pointer technique from the top-right corner. Returns True if the target is found, False otherwise. if not matrix or not matrix[0]: return False rows, columns = len(matrix), len(matrix[0]) row, column = 0, columns - 1 while row < rows and column >= 0: if matrix[row][column] == target: return True elif matrix[row][column] < target: row += 1 else: column -= 1 return False"},{"question":"Write a function to generate the nth Fibonacci number in Python. The function should be efficient and avoid recalculating values for previously computed Fibonacci numbers.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Efficiently computes the Fibonacci sequence using memoization. memo = {0: 0, 1: 1} def fib_memo(n): if n not in memo: memo[n] = fib_memo(n - 1) + fib_memo(n - 2) return memo[n] return fib_memo(n)"},{"question":"Write a function to print all numbers from 1 to 10.","solution":"def print_numbers(): Print numbers from 1 to 10 inclusively. for i in range(1, 11): print(i)"},{"question":"Write a function to reverse a string in Python. Here is a string you need to reverse: \\"Hello, World!\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to find the first non-repeating character in a string. The function should return the index of the first non-repeating character in the string. If no non-repeating character exists, return -1. The string contains only lowercase alphabets.","solution":"def first_non_repeating_char(s): Returns the index of the first non-repeating character in the string. If no non-repeating character exists, returns -1. :param s: A string consisting of only lowercase alphabets :return: The index of the first non-repeating character, or -1 if none exists. char_count = {} # First pass to count all characters for char in s: char_count[char] = char_count.get(char, 0) + 1 # Second pass to find the first character with a count of 1 for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a function to flatten a binary search tree (BST) into a sorted singly linked list in-place. The function should return the head of the sorted linked list. A binary search tree has the property that the left child of any node is less than the node, and the right child is greater than the node. Flattening the tree means overlaying it on a single side of a node with no parent anymore.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def flatten_bst_to_linked_list(root): Flattens the given BST into a sorted singly linked list in-place and returns the head of the list. if not root: return None # In-order traversal to convert the BST to sorted linked list def in_order_traversal(node): if not node: return in_order_traversal(node.left) node.left = None nonlocal curr curr.next = ListNode(node.val) curr = curr.next in_order_traversal(node.right) dummy = ListNode() curr = dummy in_order_traversal(root) return dummy.next"},{"question":"Write a function to check if a linked list is a palindrome. A linked list is a palindrome if it reads the same backward as forward. You are given a head node of the linked list. Your function should return \`true\` if the list is a palindrome and \`false\` otherwise.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Check if the linked list is a palindrome. :param head: Head node of the linked list. :return: True if the linked list is a palindrome, False otherwise. # Convert linked list to array vals = [] current = head while current: vals.append(current.val) current = current.next # Check if the array is a palindrome return vals == vals[::-1]"},{"question":"Write a function to compute the sum of all integers in an array using recursion. MicroPython does not support recursion natively, but we can simulate it using a loop-based approach. Please provide a MicroPython code snippet for this.","solution":"def sum_array(arr): Returns the sum of all integers in the array using a loop-based approach. total = 0 for num in arr: total += num return total"},{"question":"Write a function to flatten a nested dictionary in Python. The function should take a dictionary as input and return a nested dictionary. A nested dictionary is a dictionary that may contain values that are also dictionaries. The function should handle nested dictionaries any number of levels deep. For example, given the input dictionary \`{\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3}}}\`, the function should return a nested dictionary with the same structure as the input, but with all values flattened. A flattened version of the given dictionary would be \`{\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3}}}\` where the values are the keys and the original dictionary as the value.","solution":"def flatten_nested_dict(d, parent_key='', sep='.'): Function to flatten a nested dictionary. Parameters: d (dict): The dictionary to flatten parent_key (str): The base key string (used internally for recursion) sep (str): The separator to use between keys Returns: dict: Flattened dictionary items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_nested_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function to calculate the average of all numbers in a given list of integers.","solution":"def calculate_average(numbers): Returns the average of all numbers in the given list. If the list is empty, returns 0. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a function to draw a line from point1 to point2 on a cartesian coordinate system. The coordinates of the points are given as tuples (x, y). The function should print the line coordinates step-by-step.","solution":"def draw_line(point1, point2): Prints the line coordinates step-by-step from point1 to point2. Uses Bresenham's line algorithm for simplicity and accuracy in plotting. x1, y1 = point1 x2, y2 = point2 # Calculate differences dx = abs(x2 - x1) dy = abs(y2 - y1) sx = 1 if x1 < x2 else -1 sy = 1 if y1 < y2 else -1 err = dx - dy x, y = x1, y1 while True: print((x, y)) if x == x2 and y == y2: break e2 = err * 2 if e2 > -dy: err -= dy x += sx if e2 < dx: err += dx y += sy"},{"question":"Write a function to find the longest palindromic substring of a given string. This function should return the starting and ending indices of the longest palindromic substring. If there are multiple substrings, return the one that appears first in the string.","solution":"def longest_palindromic_substring(s): Returns the starting and ending indices of the longest palindromic substring. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 start, end = 0, 0 for i in range(len(s)): l1, r1 = expand_around_center(s, i, i) # Odd-length palindromes l2, r2 = expand_around_center(s, i, i + 1) # Even-length palindromes if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return start, end"},{"question":"Write a function to determine if a given number is 'Narcissistic', also known as 'Armstrong' or 'Pluperfect' numbers. A Narcissistic number is an n-digit number that is the sum of its own digits each raised to the power of n. For example, 153 is a Narcissistic number because 1^3 + 5^3 + 3^3 = 153.","solution":"def is_narcissistic(number): Determines if a given number is a Narcissistic number. A Narcissistic number is an n-digit number that is the sum of its own digits each raised to the power of n. For example, 153 is a Narcissistic number because 1^3 + 5^3 + 3^3 = 153. :param number: int :return: bool digits = [int(d) for d in str(number)] num_digits = len(digits) sum_of_powers = sum(d ** num_digits for d in digits) return sum_of_powers == number"},{"question":"Write a function to compute the sum of the first n terms of a geometric series, where the first term is a, and the common ratio is r.","solution":"def geometric_series_sum(a, r, n): Returns the sum of the first n terms of a geometric series. a : float : The first term of the series. r : float : The common ratio of the series. n : int : The number of terms to sum. Returns: float : The sum of the first n terms of the series. if r == 1: return a * n return a * (1 - r ** n) / (1 - r)"},{"question":"Write a function to perform a quicksort on the provided list of integers.","solution":"def quicksort(arr): Sort the list of integers using the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to check if a string contains all the vowels ('a', 'e', 'i', 'o', 'u') at least once. The function should return \`true\` if all vowels are present at least once, and \`false\` otherwise. Additionally, the function should consider case-insensitivity.","solution":"def contains_all_vowels(s): Checks if the given string contains all the vowels ('a', 'e', 'i', 'o', 'u') at least once. The check is case-insensitive. Parameters: s (str): The string to check. Returns: bool: True if all vowels are present at least once, False otherwise. vowels = set('aeiou') s_lower = s.lower() for vowel in vowels: if vowel not in s_lower: return False return True"},{"question":"Write a function to calculate the area of a triangle given the lengths of its three sides. The function should take three arguments, each representing the length of one side of the triangle, and return the area calculated using Heron's formula. Heron's formula is given by: Area = sqrt[s*(s-a)*(s-b)*(s-c)], where s = (a + b + c) / 2.","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle given the lengths of its three sides using Heron's formula. # Semi-perimeter s = (a + b + c) / 2 # Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth term using memoization.","solution":"def fibonacci(n, memo={}): Returns the nth term of the Fibonacci sequence using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to find the number of days in a given month and year, considering leap years in February.","solution":"def days_in_month(month, year): Returns the number of days in a given month and year. Parameters: month (int): The month (1-12). year (int): The year (e.g., 2023). Returns: int: The number of days in the month. if month < 1 or month > 12: return \\"Invalid month\\" is_leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) days_in_month = [ 31, 29 if is_leap_year else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ] return days_in_month[month - 1]"},{"question":"Write a function to reverse a linked list iteratively. What are the key steps involved in the process?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list_iteratively(head): Reverses a linked list iteratively. Parameters: head (ListNode): Head of the singly linked list. Returns: ListNode: Head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next # Store next node current.next = prev # Reverse current node's pointer prev = current # Move pointers one position ahead current = next_node return prev # New head is the previous node after the loop finishes"},{"question":"Write a function to check if a given binary tree is a valid binary search tree (BST) using Python. The tree is represented using a class \`TreeNode\` with attributes \`left\`, \`right\`, and \`val\` representing the left child, right child, and value of a node, respectively.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Returns True if the binary tree is a valid binary search tree (BST). def validate(node, low=float('-inf'), high=float('inf')): if not node: return True if node.val <= low or node.val >= high: return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"Write a function to determine the number of possible ways to climb a staircase with \`n\` steps. You can either take 1 step or 2 steps at a time. For example, with \`n = 3\`, there are 3 possible ways to climb the stairs: 1+1+1, 1+2, or 2+1. How would you implement this function in Python?","solution":"def climb_stairs(n): Determine the number of ways to climb a staircase with n steps, where you can take either 1 step or 2 steps at a time. :param n: The total number of steps :return: The number of ways to climb the staircase if n == 0: return 1 elif n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a function to return the middle element in a list using Python. If there are two middle elements, return the second one.","solution":"def middle_element(lst): Returns the middle element in a list. If the list has an even number of elements, returns the second of the two middle elements. n = len(lst) mid_index = n // 2 # This gives the index of the second middle element if the list is even-length return lst[mid_index]"},{"question":"Write a function to implement a simple version of the Caesar Cipher. The function should take three parameters: the text to be encrypted, the shift amount, and the direction of the shift (either 'right' or 'left'). The function should return the encrypted text.","solution":"def caesar_cipher(text, shift, direction): Encrypts the given text using a simple version of the Caesar Cipher. Parameters: - text (str): The text to be encrypted. - shift (int): The amount by which to shift the characters. - direction (str): The direction of the shift ('right' or 'left'). Returns: - str: The encrypted text. if direction == 'left': shift = -shift encrypted_text = '' for char in text: if char.isalpha(): start = ord('A') if char.isupper() else ord('a') encrypted_char = chr(start + (ord(char) - start + shift) % 26) encrypted_text += encrypted_char else: encrypted_text += char return encrypted_text"},{"question":"Write a function to find the number of squares in a plane having n points, all on a straight line. By default value of n should be 1.","solution":"def number_of_squares_on_line(n=1): Returns the number of squares that can be formed with n points all on a straight line. Since no square can be formed with all points on a straight line, the function should return 0. return 0"},{"question":"Write a function to check if a given list of integers is a palindrome in Python.","solution":"def is_palindrome(lst): Checks if a given list of integers is a palindrome. Args: lst (list): List of integers. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a function to convert the string \`\\"001110100001\\"\` to an integer. The function should remove any leading zeros before converting the string to an integer. The resulting integer should be in base 2.","solution":"def binary_string_to_int(s): Converts a binary string with leading zeros to an integer. Parameters: s (str): Binary string input. Returns: int: Integer representation of the binary string in base 2. return int(s, 2)"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should handle base cases and recursive calls properly.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to count the occurrence of words in a text and sort them by frequency in descending order.","solution":"from collections import Counter def count_words(text): Counts the occurrence of words in a text and sorts them by frequency in descending order. Parameters: text (str): The input text from which to count words. Returns: list: A list of tuples where each tuple contains a word and its frequency, sorted by frequency in descending order. words = text.split() word_counts = Counter(words) sorted_word_counts = word_counts.most_common() return sorted_word_counts"},{"question":"Write a function to print \\"Hello, World!\\" in Python. Then, call this function.","solution":"def hello_world(): Prints 'Hello, World!'. print(\\"Hello, World!\\") # Calling the function hello_world()"},{"question":"Write a function to calculate the sum of the digits of a number and then return that sum as a string. For example, if the input number is 12345, the sum of its digits is 1+2+3+4+5=15, and the function should return \\"15\\".","solution":"def sum_of_digits_as_string(number): Returns the sum of the digits of the given number as a string. :param number: int :return: str sum_of_digits = sum(int(digit) for digit in str(number)) return str(sum_of_digits)"},{"question":"Write a function to reverse the order of the words in a given string and return the modified string.","solution":"def reverse_words(s): Reverses the order of the words in the given string s. A word is defined as a sequence of non-space characters. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the sum of all even numbers in a given list. You can use any programming language you are comfortable with.","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in the given list. :param numbers: List of integers :return: Sum of all even integers in the list return sum(number for number in numbers if number % 2 == 0)"},{"question":"Write a function to find the maximum sum of a subarray with a given length k in an array of integers. The array may contain both positive and negative integers, and the subarray must include at least one integer from the array.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray with length k from the given array. Parameters: arr (list): List of integers. k (int): Length of the subarray. Returns: int: Maximum sum of a subarray with length k. if not arr or k <= 0 or k > len(arr): return 0 # Calculate the sum of the first window of size k window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window over the rest of the array for i in range(len(arr) - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Write a function to reverse a string in Python. For example, if the input string is \\"hello world\\", the reversed version should be \\"dlrow olleh\\". Ensure your code has appropriate comments and is well-structured.","solution":"def reverse_string(s): Returns the reversed version of the input string s. :param s: str - the input string to be reversed :return: str - the reversed string return s[::-1]"},{"question":"Write a function to reverse a string using Python. Can you explain the code?","solution":"def reverse_string(s): Reverses the given string s. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1] # The function reverse_string takes an input string s and returns the reversed string. # The slice notation s[::-1] is used here, which means take the string and return it by stepping backwards (-1)."},{"question":"Write a function to perform a breadth-first search (BFS) on an unweighted graph. The function should return the shortest path from a given start node to a target node. If no path exists, return an empty list. The graph is represented as an adjacency list.","solution":"from collections import deque def bfs_shortest_path(graph, start, target): Performs a BFS on an unweighted graph to find the shortest path from start to target. :param graph: Dictionary representing the adjacency list of the graph :param start: The start node :param target: The target node :return: List of nodes representing the shortest path from start to target. If no path exists, returns an empty list. if start == target: return [start] visited = set() queue = deque([(start, [start])]) while queue: current, path = queue.popleft() if current in visited: continue visited.add(current) for neighbor in graph.get(current, []): if neighbor == target: return path + [neighbor] else: queue.append((neighbor, path + [neighbor])) return []"},{"question":"Write a function to convert a string to the binary representation of its ASCII values.","solution":"def string_to_binary(s): Convert a string to the binary representation of its ASCII values. Each character in the string is represented by its ASCII value in binary, with each binary value being 8 bits long. :param s: The input string. :return: A string containing the binary representation. return ' '.join(format(ord(char), '08b') for char in s)"},{"question":"Write a function to reverse a string in Python without using any built-in string reversal functions or slicing. Additionally, ensure that your function is case-sensitive and maintains the case of the original string.","solution":"def reverse_string(s): Reverses the input string without using any built-in string reversal functions or slicing. Maintains case sensitivity and returns the reversed string. reversed_list = [] for char in s: reversed_list.insert(0, char) return ''.join(reversed_list)"},{"question":"Write a function to solve the Tower of Hanoi problem. The function should take three parameters: the number of discs \`n\`, and two additional parameters that represent the 'source' and 'destination' poles (usually labeled as 'A', 'B', and 'C'). Additionally, it should have a helper parameter 'aux' to represent the auxiliary pole. The function should print each move it makes to solve the puzzle.","solution":"def tower_of_hanoi(n, source, destination, aux): Solves the Tower of Hanoi problem and prints the moves. Parameters: n (int): Number of discs. source (str): The source pole. destination (str): The destination pole. aux (str): The auxiliary pole. if n == 1: print(f\\"Move disc 1 from {source} to {destination}\\") return tower_of_hanoi(n-1, source, aux, destination) print(f\\"Move disc {n} from {source} to {destination}\\") tower_of_hanoi(n-1, aux, destination, source)"},{"question":"Write a function to calculate the factorial of a number using recursion. Can you also provide a brief explanation of how recursion works in this context?","solution":"def factorial(n): Returns the factorial of n using recursion. Args: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of n. if n == 0: return 1 return n * factorial(n-1) # Explanation: # Recursion works by breaking down the problem into smaller instances of the same problem. # In the context of calculating the factorial, the base case is when n is 0, where factorial(0) is 1. # For any other positive integer n, factorial(n) is calculated as n * factorial(n-1). # This continues until the base case is reached, and the function calls resolve, unwinding back up # the stack, ultimately calculating the factorial."},{"question":"Write a function to calculate the product of all elements in a given array except the element at the current index. The solution should be space-efficient, i.e., the function should not use an additional array to store the result.","solution":"def product_except_self(nums): Returns an array such that each of the elements is the product of all the numbers in the array except the number at that index. length = len(nums) result = [1] * length left_prod = 1 for i in range(length): result[i] = left_prod left_prod *= nums[i] right_prod = 1 for i in range(length - 1, -1, -1): result[i] *= right_prod right_prod *= nums[i] return result"},{"question":"Write a function to calculate the total number of subsets of a given array whose sum is equal to a target value 'k'.","solution":"def count_subsets_with_sum(arr, k): Returns the total number of subsets of the given array \`arr\` whose sum is equal to \`k\`. def subset_sum(arr, n, total): if total == 0: return 1 if n == 0: return 0 if arr[n-1] > total: return subset_sum(arr, n-1, total) return subset_sum(arr, n-1, total) + subset_sum(arr, n-1, total-arr[n-1]) return subset_sum(arr, len(arr), k)"},{"question":"Write a function to calculate the minimum of two numbers.","solution":"def minimum(a, b): Returns the minimum of two numbers a and b. return a if a < b else b"},{"question":"Write a function to find the sum of all prime numbers within a non-empty range \`[startRange, endRange]\`. For example, for the range \`[1, 10]\`, the function should return \`17\` (since the prime numbers are 2, 3, 5, and 7).","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(startRange, endRange): Returns the sum of all prime numbers within the given range [startRange, endRange]. return sum(n for n in range(startRange, endRange + 1) if is_prime(n))"},{"question":"Write a function to find the maximum element in an array using recursion. How would you approach this problem step-by-step?","solution":"def find_maximum(arr): Recursively finds the maximum element in an array. :param arr: List of numbers :return: The maximum number in the list # Base case: if only one element, return it as maximum if len(arr) == 1: return arr[0] # Recursive case: compare first element with maximum of the rest return max(arr[0], find_maximum(arr[1:]))"},{"question":"Write a function to find the maximum sum of a contiguous subarray. This function should work for both positive and negative numbers and should have a time complexity of O(n).","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in the given list of integers. This function implements Kadane's Algorithm with a time complexity of O(n). Parameters: nums (List[int]): List of integers Returns: int: The maximum sum of a contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to create a binary tree using the array-based representation and the traversal functions. The binary tree should be implemented using recursion, and you should provide functions for pre-order, in-order, and post-order traversals.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def create_binary_tree(arr, index=0): Create a binary tree from an array-based representation. if index >= len(arr) or arr[index] is None: return None root = TreeNode(arr[index]) root.left = create_binary_tree(arr, 2 * index + 1) root.right = create_binary_tree(arr, 2 * index + 2) return root def pre_order_traversal(root): Traverse the tree in pre-order fashion - Root, Left, Right. if root is None: return [] return [root.value] + pre_order_traversal(root.left) + pre_order_traversal(root.right) def in_order_traversal(root): Traverse the tree in in-order fashion - Left, Root, Right. if root is None: return [] return in_order_traversal(root.left) + [root.value] + in_order_traversal(root.right) def post_order_traversal(root): Traverse the tree in post-order fashion - Left, Right, Root. if root is None: return [] return post_order_traversal(root.left) + post_order_traversal(root.right) + [root.value]"},{"question":"Write a function to convert an integer to its corresponding Roman numeral. Please provide the function with Python syntax, and explain each step of the process.","solution":"def int_to_roman(n): Converts an integer to its corresponding Roman numeral. # Define the mapping of Roman numerals to their corresponding integer values val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' for i in range(len(val)): while n >= val[i]: roman_num += syms[i] n -= val[i] return roman_num"},{"question":"Write a function to reverse the order of words in a string. In this case, a word is defined as any sequence of characters separated by spaces. For instance, reversing the words in the string \\"hello world from Alibaba Cloud\\" should result in \\"Cloud Alibaba from world hello\\". The function should also handle multiple consecutive spaces and leading/trailing spaces.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. A word is defined as any sequence of characters separated by spaces. Handles multiple consecutive spaces and leading/trailing spaces. Parameters: sentence (str): The input string containing words separated by spaces. Returns: str: The string with words in reversed order. # Split the sentence on spaces, filter out any empty strings, then reverse the list words = sentence.split() reversed_words = words[::-1] # Join the reversed list of words with a single space return ' '.join(reversed_words)"},{"question":"Write a function to calculate the sum of all numbers in a list of lists.","solution":"def sum_of_list_of_lists(lists): Returns the sum of all numbers in a list of lists. Parameters: lists (list of lists): A list containing other lists of numbers. Returns: int: The sum of all numbers in the list of lists. return sum(sum(inner_list) for inner_list in lists)"},{"question":"Write a function to determine if a given linked list is a palindrome. The function should perform this check without using any extra space to store the list, meaning you cannot use additional arrays or data structures.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Returns True if the linked list is a palindrome, otherwise returns False. This solution uses O(1) extra space. if not head or not head.next: return True # Find the middle of the linked list using fast and slow pointers slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev = None while slow: next_node = slow.next slow.next = prev prev = slow slow = next_node # Compare the first and second halves of the linked list first_half = head second_half = prev while second_half: # since second_half is shorter or equal to first_half if first_half.val != second_half.val: return False first_half = first_half.next second_half = second_half.next return True"},{"question":"Write a function to find all the prime numbers up to a given number \`n\` using the Sieve of Eratosthenes algorithm. The function should return a list of prime numbers up to \`n\`.","solution":"def sieve_of_eratosthenes(n): Finds all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit to find prime numbers up to, inclusive. Returns: list: A list of prime numbers up to n. if n < 2: return [] sieve = [True] * (n+1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n+1, p): sieve[i] = False p += 1 return [p for p in range(n+1) if sieve[p]]"},{"question":"Write a function to reverse an array in-place. Can you provide a Python implementation?","solution":"def reverse_array(arr): Reverses the provided array in-place. :param arr: List of elements to be reversed :return: The same list object with elements in reverse order left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function to count the number of occurrences of the maximum value in a given list of integers.","solution":"def count_max_occurrences(numbers): Returns the number of occurrences of the maximum value in a given list of integers. if not numbers: return 0 max_value = max(numbers) return numbers.count(max_value)"},{"question":"Write a function to return the last word of a string in Python.","solution":"def last_word(sentence): Returns the last word of a given sentence. Parameters: sentence (str): The sentence from which to extract the last word. Returns: str: The last word in the sentence. words = sentence.split() return words[-1] if words else ''"},{"question":"Write a function to reverse a string in Python asking the user to input a string and then displaying the reversed string.","solution":"def reverse_string(): Asks the user to input a string and then prints the reversed string. input_string = input(\\"Enter a string: \\") reversed_string = input_string[::-1] print(f\\"Reversed string: {reversed_string}\\")"},{"question":"Write a function to flatten a nested list. The function should handle an input list that can contain integers, other lists, or a mix of both.","solution":"def flatten(nested_list): Flattens a nested list. Parameters: nested_list (list): A list that may contain integers and other lists. Returns: list: A flattened list containing all the integers from the nested structure. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Write a function to find the N largest elements in an integer array and return them in descending order.","solution":"def n_largest_elements(arr, n): Returns the N largest elements in the array in descending order. :param arr: List of integers :param n: Number of largest elements to find :return: List of N largest elements in descending order if not arr or n <= 0: return [] return sorted(arr, reverse=True)[:n]"},{"question":"Write a function to get the number of occurrences of a given character in a string. For example, for the string \\"Hello World\\" and the character 'o', the function should return 2.","solution":"def count_occurrences(input_string, char): Returns the number of occurrences of the given character 'char' in the 'input_string'. return input_string.count(char)"},{"question":"Write a function to calculate the sum of all numbers in a given list using recursion. How can this be achieved in Python?","solution":"def recursive_sum(numbers): Returns the sum of all numbers in the given list using recursion. :param numbers: List[int], list of integers to sum. :return: int, sum of all numbers in the list. # Base case: if the list is empty, return 0 if not numbers: return 0 # Recursive case: sum of first element and rest of the list return numbers[0] + recursive_sum(numbers[1:])"},{"question":"Write a function to calculate the nth Fibonacci number using the power of dynamic programming.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function to find the maximum sum of a contiguous subarray. Use Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray using Kadane's Algorithm. :param nums: List of integers. :return: The maximum sum of the contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to perform a prefix-based substring search in a given string. The function should return the starting index of the substring if it is found, and -1 otherwise. Assume that the input string and the substring to be searched are not null. Additionally, the function should handle any潜在的空值或异常情况。","solution":"def prefix_search(main_string, sub_string): Returns the starting index of the substring if it is found at the start of the main string, and -1 otherwise. if not isinstance(main_string, str) or not isinstance(sub_string, str): return -1 if sub_string == \\"\\": return -1 if main_string.startswith(sub_string): return 0 return -1"},{"question":"Write a function to calculate the nth Fibonacci number in Python. You should use both an iterative and a recursive approach. Compare their efficiency in terms of time complexity.","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b def fibonacci_recursive(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Write a function to count the occurrences of a digit in a given number. For example, if the number is 1234123 and the digit to count is 1, the function should return 2.","solution":"def count_digit_occurrences(number, digit): Returns the number of times \`digit\` occurs in \`number\`. Parameters: number (int): The number in which to count occurrences. digit (int): The digit to count. Returns: int: The count of occurrences of \`digit\` in \`number\`. return str(number).count(str(digit))"},{"question":"Write a function to find the minimum path sum in a 2D grid.","solution":"def min_path_sum(grid): Returns the minimum path sum from the top-left to the bottom-right of a 2D grid. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) # Create a 2D dp array dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first row for c in range(1, cols): dp[0][c] = dp[0][c - 1] + grid[0][c] # Initialize the first column for r in range(1, rows): dp[r][0] = dp[r - 1][0] + grid[r][0] # Fill in the rest of the dp array for r in range(1, rows): for c in range(1, cols): dp[r][c] = min(dp[r - 1][c], dp[r][c - 1]) + grid[r][c] return dp[rows - 1][cols - 1]"},{"question":"Write a function to find the length of the longest substring without repeating characters in a given string \`s\`. For example, the longest substring without repeating characters in \\"abcabcbb\\" is \\"abc\\", which has a length of 3. If there is no repeating substring, the function should return 0. This is a classic problem known as the \\"Longest Substring Without Repeating Characters\\" problem.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string. if not s: return 0 n = len(s) left, right = 0, 0 char_set = set() max_length = 0 while right < n: if s[right] not in char_set: char_set.add(s[right]) max_length = max(max_length, right - left + 1) right += 1 else: char_set.remove(s[left]) left += 1 return max_length"},{"question":"Write a function to count the number of zeros in a given array of integers.","solution":"def count_zeros(array): Counts the number of zeros in the given array of integers. Parameters: array (list): A list of integers. Returns: int: The number of zeros in the array. return array.count(0)"},{"question":"Write a function to solve the N-Queens problem using backtracking. The function should be able to print all the solutions.","solution":"def solve_n_queens(n): def place_queen(board, row, column): for i in range(row): if board[i] == column or board[i] - i == column - row or board[i] + i == column + row: return False return True def solve(board, row): if row == n: solutions.append(board[:]) return for column in range(n): if place_queen(board, row, column): board[row] = column solve(board, row + 1) board[row] = -1 def print_solution(solution): for i in range(n): row = ['.'] * n row[solution[i]] = 'Q' print(''.join(row)) print() solutions = [] board = [-1] * n solve(board, 0) for solution in solutions: print_solution(solution) return solutions # Example usage: # solve_n_queens(4)"},{"question":"Write a function to check if a number is a perfect power of 3.","solution":"def is_power_of_three(n): Determines if the given number n is a perfect power of three. if n < 1: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to reverse a string in Python. The function should take a string as input and return the reversed version of the string. Additionally, the function should handle and preserve all types of characters (letters, numbers, symbols, spaces) in the same order.","solution":"def reverse_string(s): Reverses the given string s. return s[::-1]"},{"question":"Write a function to construct a 2D grid. You should be given the number of rows and columns as parameters. The function should return a 2D array filled with sequential numbers starting from 1, where the numbers should increment within each row from left to right and increment between rows from top to bottom.","solution":"def construct_grid(rows, cols): Constructs a 2D grid with given rows and columns. The grid is filled with sequential numbers starting from 1, incrementing from left to right and top to bottom. return [[cols * i + j + 1 for j in range(cols)] for i in range(rows)]"},{"question":"Write a function to find the maximum depth of a binary tree using breadth-first search method.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Find the maximum depth of a binary tree using the breadth-first search method. if not root: return 0 queue = deque([(root, 1)]) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return max_depth"},{"question":"Write a function to find the largest prime number in an array of integers. If the array is empty or contains no prime numbers, the function should return -1.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def largest_prime(nums): Returns the largest prime number in an array of integers. If the array is empty or contains no prime numbers, returns -1. prime_numbers = [num for num in nums if is_prime(num)] return max(prime_numbers) if prime_numbers else -1"},{"question":"Write a function to find the maximum and minimum number in a given list of numbers.","solution":"def find_max_min(numbers): Returns a tuple containing the maximum and minimum number in the given list of numbers. Args: numbers (list): A list of numbers Returns: tuple: A tuple containing the maximum and minimum number if not numbers: raise ValueError(\\"The list should not be empty\\") max_num = max(numbers) min_num = min(numbers) return max_num, min_num"},{"question":"Write a function to find the maximum depth of a given binary tree. The tree is represented using a class with attributes \`value\`, \`left\`, and \`right\`. The \`left\` and \`right\` attributes point to other tree nodes or \`None\` if the node is a leaf.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Finds the maximum depth of a binary tree. if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to find the maximum subarray sum in a given 1D array \`nums\`. The function should take an array \`nums\` as input and return the maximum sum of any contiguous subarray within \`nums\`.","solution":"def max_subarray_sum(nums): Find the maximum sum of any contiguous subarray within nums. Parameters: nums (list): A list of integers. Returns: int: The maximum sum of any contiguous subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the minimum value in an unsorted integer array. Please also write a piece of code to test this function with an example array.","solution":"def find_minimum(arr): Returns the minimum value in an unsorted integer array. if not arr: raise ValueError(\\"Array cannot be empty\\") min_val = arr[0] for num in arr: if num < min_val: min_val = num return min_val"},{"question":"Write a function to find the maximum value in an integer array. Implement a solution without using the built-in \`max\` function. Assume the array is non-empty and contains integers.","solution":"def find_max(arr): Finds the maximum value in an integer array. max_val = arr[0] for num in arr[1:]: if num > max_val: max_val = num return max_val"},{"question":"Write a function to sort a given array in ascending order using the quick sort algorithm in Python.","solution":"def quick_sort(arr): Sorts the given array in ascending order using the quick sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to find the sum of all numbers in a list. The function should be implemented in Python.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the input list. :param numbers: List of numbers. :return: Sum of the numbers in the list. return sum(numbers)"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This function should implement Kadane's algorithm. Provide the code in Python and explain your solution.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane's Algorithm. Args: arr (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not arr: return 0 # Assuming that for an empty array, the maximum sum is 0 max_so_far = arr[0] max_ending_here = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to check if a given string is a palindrome. Additionally, the function should be case-insensitive and ignore any non-alphanumeric characters.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, otherwise False. The function is case-insensitive and ignores non-alphanumeric characters. # Filter only alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to check if a number is an Armstrong number. An Armstrong number is an n-digit number that is equal to the sum of its digits each raised to the power of n. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.","solution":"def is_armstrong(number): Returns True if the given number is an Armstrong number, else returns False. An Armstrong number is an n-digit number that is equal to the sum of its digits raised to the power of n. digits = [int(digit) for digit in str(number)] n = len(digits) armstrong_sum = sum(digit ** n for digit in digits) return armstrong_sum == number"},{"question":"Write a function to find the shortest path in a 2D grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.","solution":"def shortest_path(grid): Returns the shortest path length in a 2D grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. :param grid: List[List[int]]: 2D grid where grid[i][j] indicates the cost of stepping on cell (i, j) :return: int: minimum cost to reach bottom-right corner from top-left corner if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Write a function to create a search tree in Python.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): Inserts a new node with the given key into the tree rooted at the given root. if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) else: root.right = insert(root.right, key) return root def inorder_traversal(root): Performs an in-order traversal of the tree and returns a list of values. res = [] if root: res = inorder_traversal(root.left) res.append(root.val) res = res + inorder_traversal(root.right) return res"},{"question":"Write a function to find the maximum product of two numbers in a given list.","solution":"def max_product(nums): Returns the maximum product of two numbers in the list. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") nums.sort() return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a function to create a list of tuples and then filter out specific tuples based on a condition.","solution":"def create_and_filter_tuples(data, condition_func): Creates a list of tuples from the given data and filters out tuples based on the provided condition function. Parameters: data (list): A list of tuples to be filtered. condition_func (function): A function that takes a tuple as input and returns a boolean. Returns: list: A filtered list of tuples. return [t for t in data if condition_func(t)]"},{"question":"Write a function to modify a given list so that it contains only unique elements. Your function should take a list as input and return a new list with all duplicates removed. The order of elements in the output list should be the same as their first occurrence in the input list.","solution":"def remove_duplicates(input_list): Removes duplicates from the given list while maintaining order of first occurrence. Parameters: input_list (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed. seen = set() unique_list = [] for item in input_list: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"Write a function to parse a CSV file and convert it into a list of dictionaries, where each dictionary represents a row in the CSV file. The keys for the dictionary should be the headers from the first row of the CSV file.","solution":"import csv def parse_csv(file_path): Parses a CSV file and converts it into a list of dictionaries where each dictionary represents a row in the CSV file. The keys for the dictionary are the headers from the first row of the CSV file. Args: file_path (str): The file path to the CSV file. Returns: list: List of dictionaries where each dictionary represents a row in the CSV file. with open(file_path, mode='r', encoding='utf-8') as file: csv_reader = csv.DictReader(file) return list(csv_reader)"},{"question":"Write a function to sort a stack in ascending order using Python. You are not allowed to create any additional data structures like lists, arrays, etc.","solution":"def sort_stack(stack): Sort a stack in ascending order using only the stack itself. if not stack: return # Step 1: Remove the top element from the stack top = stack.pop() # Step 2: Sort the remaining stack recursively sort_stack(stack) # Step 3: Insert the top element back into the sorted stack insert_sorted(stack, top) def insert_sorted(stack, element): Helper function to insert an element into a sorted stack. # If the stack is empty or the element is greater than the top element of the stack if not stack or element >= stack[-1]: stack.append(element) else: # Remove the top element top = stack.pop() # Repeat the process until the correct position is found insert_sorted(stack, element) # Put the top element back stack.append(top)"},{"question":"Write a function to compute the nth Fibonacci number using an iterative approach in Python. The function should be able to handle very large numbers efficiently.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the longestCommonPrefix among a list of strings.","solution":"def longestCommonPrefix(strs): Function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. if not strs: return \\"\\" # Sort the list to minimize comparisons strs.sort() # Compare character by character between the first and the last string first, last = strs[0], strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Write a function to generate all prime numbers up to a given number using the Sieve of Eratosthenes algorithm. The function should take an integer \`n\` as input and return a list of all prime numbers less than or equal to \`n\`.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]]"},{"question":"Write a function to calculate the volume of a sphere given its radius. The function should be named \`calculateSphereVolume\` and take one parameter, \`radius\`. The radius is a number representing the distance from the center of the sphere to any point on its surface. Use the formula for the volume of a sphere, which is V = (4/3) * π * r^3, where V is the volume and r is the radius. Assume the value of π (pi) is approximately 3.14159.","solution":"import math def calculateSphereVolume(radius): Returns the volume of the sphere given its radius. Formula: V = (4/3) * π * r^3 Parameters: radius (float): The radius of the sphere. Returns: float: The volume of the sphere. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return (4/3) * math.pi * radius**3"},{"question":"Write a function to find the minimum element in a sorted and rotated array. For example, in the array [4, 5, 6, 7, 0, 1, 2], the minimum element is 0. The array was originally sorted in ascending order and then rotated. The function should handle arrays of any length, including empty arrays, and should return the minimum element. If the array is empty, the function should return None.","solution":"def find_min_in_rotated_sorted_array(arr): Returns the minimum element in a sorted and rotated array. If the array is empty, returns None. if not arr: return None low, high = 0, len(arr) - 1 while low < high: mid = (low + high) // 2 if arr[mid] > arr[high]: low = mid + 1 else: high = mid return arr[low]"},{"question":"Write a function to add two numbers, a and b.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to move all the zeroes in an integer array to the end while maintaining the order of the other elements. Try to do this in-place with a time complexity of O(n) and a space complexity of O(1).","solution":"def move_zeroes(nums): Moves all zeroes in the list nums to the end while maintaining the order of other elements. This function modifies the list in-place and returns None. :param nums: List of integers last_non_zero_found_at = 0 # Move all non-zero elements to the beginning of the list for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # Fill the remaining positions with zeroes for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"Write a function to remove duplicates from an array of integers and return a new array with only the unique elements in ascending order.","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from an array of integers and returns a new array with only the unique elements in ascending order. Parameters: arr (list): A list of integers which may contain duplicates. Returns: list: A list of unique integers in ascending order. return sorted(set(arr))"},{"question":"Write a function to convert a list of Unicode characters into a string.","solution":"def unicode_list_to_string(unicode_list): Converts a list of Unicode characters into a string. Args: unicode_list (list of str): A list of Unicode characters. Returns: str: A string made from the Unicode characters. return ''.join(unicode_list)"},{"question":"Write a function to find the maximum value of a subarray of size \`k\` in a given array of integers. The function should efficiently handle large arrays and values of \`k\`.","solution":"from collections import deque def max_subarray_of_size_k(arr, k): Finds the maximum values of each subarray of size k in the given array. Parameters: arr (list of int): The input array of integers. k (int): The size of the subarray. Returns: list of int: A list of the maximum values of each subarray of size k. if not arr or k == 0: return [] if k == 1: return arr # This will store the indices of array elements, but will be used to store only useful elements. deq = deque() max_values = [] for i in range(len(arr)): # Remove elements not in the current window if deq and deq[0] <= i - k: deq.popleft() # Remove elements not greater than the current element from the deque while deq and arr[deq[-1]] <= arr[i]: deq.pop() # Add current element at the rear of deque deq.append(i) # The first element in deque is the largest element of the current subarray if i >= k - 1: max_values.append(arr[deq[0]]) return max_values"},{"question":"Write a function to find the maximum number that can be formed by merging two given numbers using the digits present in both numbers. The digits in both numbers should not be repeated.","solution":"def max_merged_number(num1, num2): Returns the maximum number that can be formed by merging two given numbers. Digits present in both numbers should not be repeated. digits = set(str(num1)).union(set(str(num2))) max_number_str = ''.join(sorted(digits, reverse=True)) return int(max_number_str)"},{"question":"Write a function to calculate the nth Fibonacci number using a recursive approach. The function should handle large numbers efficiently.","solution":"def fibonacci(n, memo={}): Calculate the nth Fibonacci number using a recursive approach with memoization for efficiency. :param n: The position of the Fibonacci number to calculate. :param memo: Dictionary to store previously computed Fibonacci numbers. :return: The nth Fibonacci number. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to sum the digits of a number until the sum is a single digit.","solution":"def sum_digits_to_single_digit(n): Sums the digits of a number n until the sum is a single digit. Parameters: n (int): The input number. Returns: int: The single digit result of repeatedly summing the digits. while n >= 10 or n <= -10: n = sum(int(digit) for digit in str(abs(n))) return n"},{"question":"Write a function to search for a target value in a 2D matrix where integers in each row are sorted in ascending order from left to right, and integers in each column are sorted in ascending order from top to bottom.","solution":"def search_matrix(matrix, target): Searches for the target value in a 2D matrix where each row and column are sorted in ascending order. Args: matrix (List[List[int]]): The 2D matrix to search in. target (int): The value to search for. Returns: bool: True if the target is found, False otherwise. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] < target: row += 1 else: col -= 1 return False"},{"question":"Write a function to find the highest prime number less than a given number n. The function should be called \`highest_prime_less_than_n(n)\`. For example, if \`n\` is 10, the highest prime number less than 10 is 7. The function should handle cases where \`n\` is greater than 2 but not necessarily even.","solution":"def highest_prime_less_than_n(n): Returns the highest prime number less than a given number n. Params: n (int): The upper limit to find the highest prime number less than n. Returns: int: The highest prime number less than n. Returns None if no prime number is found less than n. def is_prime(x): if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True for num in range(n-1, 1, -1): if is_prime(num): return num return None"},{"question":"Write a function to find and return the sum of all even numbers in a given list of integers. The function should have a time complexity of O(n), where n is the number of elements in the list.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list of integers. Args: numbers (list of int): List of integers. Returns: int: Sum of all even numbers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Write a function to count the number of unique elements in an array. The array is sorted in ascending order. The function should return the count of distinct elements.","solution":"def count_unique_elements(sorted_array): Returns the count of unique elements in a sorted array. :param sorted_array: List[int], a list of integers sorted in ascending order. :return: int, count of unique elements. # If the sorted array is empty, the number of unique elements is 0 if not sorted_array: return 0 # Initialize count of unique elements unique_count = 1 # Traverse the sorted array and count unique elements for i in range(1, len(sorted_array)): if sorted_array[i] != sorted_array[i - 1]: unique_count += 1 return unique_count"},{"question":"Write a function to implement a queue. In the function, you should have \\"enqueue\\" and \\"dequeue\\" operations. The queue should be able to hold integers. The queue should be implemented using a list.","solution":"class Queue: A queue implementation using a list with enqueue and dequeue operations. def __init__(self): self.queue = [] def enqueue(self, item): Adds an item to the end of the queue. self.queue.append(item) def dequeue(self): Removes and returns the item from the front of the queue. If the queue is empty, returns None. if self.is_empty(): return None return self.queue.pop(0) def is_empty(self): Checks if the queue is empty. return len(self.queue) == 0 def size(self): Returns the current size of the queue. return len(self.queue)"},{"question":"Write a function to return the lexicographically largest subset of a given array that sums to a specified value, \`[1,2,2,3]\`, target = \`5\`.","solution":"def lexicographically_largest_subset(arr, target): Returns the lexicographically largest subset of the given array that sums to the specified target. arr.sort(reverse=True) # Sort the elements in descending order best_subset = [] def find_subset(current_subset, remaining_target, start_index): nonlocal best_subset if remaining_target == 0: # Update best_subset if the current_subset is lexicographically larger if current_subset > best_subset: best_subset = current_subset[:] return for i in range(start_index, len(arr)): if arr[i] <= remaining_target: current_subset.append(arr[i]) find_subset(current_subset, remaining_target - arr[i], i + 1) current_subset.pop() find_subset([], target, 0) return best_subset"},{"question":"Write a function to calculate the sum of the squares of the first n natural numbers using a for loop.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. total = 0 for i in range(1, n+1): total += i**2 return total"},{"question":"Write a function to identify if a given string is a pangram or not. A pangram is a sentence using every letter of the alphabet at least once. For example, the string \\"The quick brown fox jumps over the lazy dog\\" is a pangram. Implement this function in your solution.","solution":"def is_pangram(s): Returns True if the string s is a pangram, otherwise False. alphabet = set('abcdefghijklmnopqrstuvwxyz') return alphabet.issubset(set(s.lower()))"},{"question":"Write a function to calculate the power of a number efficiently.","solution":"def power(base, exponent): Calculate the power of a number efficiently using exponentiation by squaring. :param base: The base number. :param exponent: The exponent number (non-negative integer). :return: base raised to the power of exponent. if exponent < 0: raise ValueError(\\"Exponent must be a non-negative integer\\") result = 1 while exponent > 0: if (exponent % 2) == 1: result *= base base *= base exponent //= 2 return result"},{"question":"Write a function to invert the bits of a binary number and return the new binary number as a string.","solution":"def invert_bits(binary_str): This function takes a binary string, inverts the bits, and returns the new binary string. :param binary_str: A string representing the binary number :return: A string with inverted bits inverted_str = ''.join('1' if bit == '0' else '0' for bit in binary_str) return inverted_str"},{"question":"Write a function to calculate the factorial of a given number \`n\` using a recursive approach. Also, handle the base case where \`n\` is 0 or 1 by returning 1, as the factorial of 0 and 1 is 1.","solution":"def factorial(n): Returns the factorial of a given number n using a recursive approach. If n is 0 or 1, returns 1. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to identify duplicates in an array of integers and return the duplicates sorted in ascending order. For example, given [4, 6, 1, 3, 4, 2, 3, 6], the function should return [3, 4, 6].","solution":"def find_duplicates(arr): Returns a sorted list of duplicate integers from the input array. :param arr: List of integers :return: Sorted list of duplicates from collections import Counter # Count occurrences of each number counts = Counter(arr) # Extract numbers that appear more than once and sort them return sorted([num for num, count in counts.items() if count > 1])"},{"question":"Write a function to initiate an HTTP GET request and handle the response by displaying the status code, headers, and body of the response using Python.","solution":"import requests def get_http_response(url): Initiates an HTTP GET request to the given URL and returns the status code, headers, and body of the response. :param url: The URL for the HTTP GET request. :return: A tuple containing the status code, headers, and body of the response. response = requests.get(url) status_code = response.status_code headers = response.headers body = response.text return status_code, headers, body"},{"question":"Write a function to find the most frequently occurring integer in an array of integers.","solution":"from collections import Counter def most_frequent_integer(arr): Returns the most frequently occurring integer in the array. In case of a tie, returns the smallest integer among the most frequent ones. if not arr: return None # Return None if the array is empty counter = Counter(arr) most_common = counter.most_common() # Find the highest frequency max_frequency = most_common[0][1] # Find all elements with the highest frequency most_frequent_elements = [k for k, v in most_common if v == max_frequency] # Return the smallest integer among the most frequent ones return min(most_frequent_elements)"},{"question":"Write a function to convert a string to a list of characters where each character is replaced by its ASCII value.","solution":"def string_to_ascii_list(s): Converts a string to a list of ASCII values of its characters. Parameters: s (str): The input string. Returns: list: A list of ASCII values of the characters in the string. return [ord(char) for char in s]"},{"question":"Write a function to reverse a string in Python. The function should take a string as input and return the reversed string. Provide a step-by-step explanation of your solution.","solution":"def reverse_string(s): Returns the reverse of the input string s. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1] # Step-by-step explanation: # 1. The function takes a string s as input. # 2. The slicing operation s[::-1] is used to reverse the string. # - In Python, the slice notation s[start:stop:step] can be used. # - By omitting start and stop, and providing a step of -1, it reverses the string. # 3. The reversed string is returned."},{"question":"Write a function to get all prime numbers up to a given number using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Write a function to generate a random password using Python. The password should consist of a combination of uppercase letters, lowercase letters, numbers, and special characters. The length of the password should be a minimum of 10 characters.","solution":"import random import string def generate_random_password(length=10): Generate a random password consisting of uppercase letters, lowercase letters, numbers, and special characters. The minimum length of the password is 10 characters. Arguments: length -- the length of the password to be generated (default is 10) Returns: A string representing the generated password. if length < 10: raise ValueError(\\"Password length must be at least 10 characters.\\") characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for i in range(length)) return password"},{"question":"Write a function to evaluate whether the control flow is linear for an arithmetic expression given in Reverse Polish Notation (RPN) and check if it is free from loops. A control flow is considered linear if there are no loops in the expression.","solution":"def is_linear_control_flow(expression): Evaluates if the control flow is linear for an arithmetic expression given in Reverse Polish Notation (RPN). A control flow is considered linear if there are no loops in the expression. Args: expression (str): An arithmetic expression in Reverse Polish Notation. Returns: bool: True if the control flow is linear (no loops), False otherwise. # Defining valid operators in RPN operators = {'+', '-', '*', '/'} # Stack to store operands stack = [] # Split the expression by spaces tokens = expression.split() for token in tokens: if token not in operators: # Push number to stack stack.append(token) else: # Pop two operands from stack for the operator if len(stack) < 2: return False right_operand = stack.pop() left_operand = stack.pop() # Evaluate this part of the RPN, and push result back on stack # Here, only the procedure is simulated as we only check the flow result = right_operand + token + left_operand stack.append(result) # If at the end we have only one element in stack, the expression was correct return len(stack) == 1"},{"question":"Write a function to compute the maximum subarray sum_flowing_dp. This function should take an array of integers and return the maximum sum of a contiguous subarray.","solution":"def max_subarray_sum_flowing_dp(arr): Returns the maximum sum of a contiguous subarray using dynamic programming. if not arr: return 0 # Initialize the variables max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"Write a function to check if a given date is a palindrome. A date in the mm/dd/yyyy format is considered a palindrome if it reads the same backwards as forwards. Your function should return \`True\` if the date is a palindrome and \`False\` otherwise. Assume all dates input are valid and do not handle the case of dates like February 30th.","solution":"def is_palindrome_date(date): Checks if the given date in mm/dd/yyyy format is a palindrome. :param date: str, a date in mm/dd/yyyy format :return: bool, True if the date is a palindrome, False otherwise # Remove the slashes normalized_date = date.replace(\\"/\\", \\"\\") # Check if the normalized date reads the same backwards return normalized_date == normalized_date[::-1]"},{"question":"Write a function to calculate the first \`n\` terms of the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Your function should return a list containing these \`n\` terms.","solution":"def fibonacci(n): Returns the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] for i in range(2, n): fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence"},{"question":"Write a function to convert a Binary Search Tree (BST) to a sorted doubly linked list. In each node, besides the left and right pointers, there should be a new pointer called \`next\` that points to the next node in the list. The function should return the \`head\` pointer of the doubly linked list. Additionally, if there are any out-of-order nodes, the function should rearrange them to maintain the sorted order in the list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right self.next = None # Next pointer for the doubly linked list def bst_to_sorted_doubly_linked_list(root): Converts a BST to a sorted doubly linked list and returns the head of the list. if not root: return None # Function to perform in-order traversal and link nodes. def in_order_traversal(node): nonlocal last_visited, head # Base case if not node: return # Recur on the left child in_order_traversal(node.left) # Process the current node if last_visited: # Link the previous node (last_visited) with the current node (node) last_visited.next = node node.left = last_visited else: # This is the smallest element, set it as head head = node last_visited = node # Recur on the right child in_order_traversal(node.right) head = None last_visited = None in_order_traversal(root) # Creating the doubly linked list connections curr = head prev = None while curr: prev = curr curr = curr.next return head # Helper function to print the doubly linked list def print_doubly_linked_list(head): result = [] while head: result.append(head.val) head = head.next return result"},{"question":"Write a function to reverse a string, but only if the string is a palindrome. If the string is not a palindrome, return a message stating that the string is not a palindrome. A palindrome is a string that reads the same backward as forward.","solution":"def reverse_if_palindrome(s): Returns the reversed string if the string is a palindrome. If the string is not a palindrome, return a message stating that the string is not a palindrome. if s == s[::-1]: return s[::-1] else: return \\"The string is not a palindrome.\\""},{"question":"Write a function to reverse a string using a deque.","solution":"from collections import deque def reverse_string_deque(s): Reverses the input string using a deque. Parameters: s (str): The input string to reverse. Returns: str: The reversed string. d = deque() for char in s: d.appendleft(char) return ''.join(d)"},{"question":"Write a function to reverse a string without additional data structures, using recursion in Python.","solution":"def reverse_string_recursive(s): Reverses a string using recursion. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. if len(s) == 0: return s return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Write a function to add one to a巨大整数。这个整数以字符串的形式给出，并且它可能包含数百万位。由于内置的整数类型无法处理如此大的数字，因此您需要自己编写函数来处理这个操作。","solution":"def add_one_to_large_number(number_str): Returns the result of adding one to a large integer represented as a string. # Convert the string into a list of characters to manipulate individual digits digits = list(number_str) # Process each digit starting from the least significant digit i = len(digits) - 1 carry = 1 while i >= 0 and carry > 0: new_digit = int(digits[i]) + carry if new_digit == 10: digits[i] = '0' carry = 1 else: digits[i] = str(new_digit) carry = 0 i -= 1 # If we still have a carry after processing all digits, prepend '1' to the list if carry == 1: digits.insert(0, '1') # Join the list back into a string and return return ''.join(digits)"},{"question":"Write a function to find the maximum sum of a subarray in a given 1D array. The function should efficiently handle large arrays and ensure the function returns the correct maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array using Kadane's Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to reverse the direction of negative numbers in an array. For example, if the input array is [-1, 2, -3, 4, -5], the function should return [1, 2, 3, 4, 5].","solution":"def reverse_negative_numbers(arr): This function takes an array as input and returns a new array where all negative numbers are converted to their positive equivalents. :param arr: List of integers :return: List of integers with negative numbers reversed in direction return [abs(x) if x < 0 else x for x in arr]"},{"question":"Write a function to reduce a matrix to its reduced row echelon form (RREF). RREF is a matrix where the leading coefficient of each row is 1, and each leading coefficient is the only non-zero value in its column.","solution":"def rref(matrix): Reduces the given matrix to its Reduced Row Echelon Form (RREF). if not matrix: return [] row_count = len(matrix) col_count = len(matrix[0]) lead = 0 for r in range(row_count): if lead >= col_count: return matrix i = r while matrix[i][lead] == 0: i += 1 if i == row_count: i = r lead += 1 if col_count == lead: return matrix matrix[i], matrix[r] = matrix[r], matrix[i] lv = matrix[r][lead] matrix[r] = [mrx / float(lv) for mrx in matrix[r]] for i in range(row_count): if i != r: lv = matrix[i][lead] matrix[i] = [iv - lv * rv for rv, iv in zip(matrix[r], matrix[i])] lead += 1 return matrix"},{"question":"Write a function to filter out any numbers that are divisible by 3 or 5 from a list. A number is considered divisible by 3 or 5 if the remainder when divided by 3 or 5 is 0. If a number is not divisible by 3 or 5, it should be included in the output. For example, given the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], the function should return [1, 2, 7, 8, 11] because these numbers are not divisible by 3 or 5.","solution":"def filter_divisible_by_3_or_5(numbers): Filters out numbers that are divisible by 3 or 5 from the list. Parameters: numbers (list of int): The list of numbers to be filtered. Returns: list: A list with numbers that are not divisible by 3 or 5. return [number for number in numbers if number % 3 != 0 and number % 5 != 0]"},{"question":"Write a function to calculate the factorial of a given non-negative integer. The function should be named \`calculate_factorial\` and take a single argument \`n\`, which is the integer for which the factorial is to be calculated. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. Additionally, the factorial of 0 is defined to be 1. Your function should handle the case where \`n\` is 0 by returning 1. If \`n\` is negative, your function should return \`None\` as the factorial is not defined for negative numbers.","solution":"def calculate_factorial(n): Returns the factorial of a given non-negative integer n. If n is negative, returns None. if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to convert a binary tree to a linked list in-place. The linked list should maintain the structure of a binary tree from left to right, and the left child of each node should be set to null. You should not create new nodes for this conversion, only use the existing nodes as part of the linked list.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def flatten_binary_tree_to_linked_list(root): Flattens the binary tree into a linked list in-place. if not root: return # Start with the current node curr = root while curr: if curr.left: # Find the rightmost node of the left subtree rightmost = curr.left while rightmost.right: rightmost = rightmost.right # Rewire the connections rightmost.right = curr.right curr.right = curr.left curr.left = None # Move on to the right node curr = curr.right"},{"question":"Write a function to solve the N-Queens problem using backtracking. The function should return the number of solutions existing for the given N.","solution":"def solve_n_queens(n): Returns the number of solutions for the N-Queens problem. def is_safe(board, row, col): # Check this row on the left side for i in range(col): if board[row][i] == 1: return False # Check upper diagonal on the left side for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 1: return False # Check lower diagonal on the left side for i, j in zip(range(row, n, 1), range(col, -1, -1)): if board[i][j] == 1: return False return True def solve_nq_util(board, col): # base case: If all queens are placed then return True if col >= n: return 1 count = 0 # Consider this column and try placing this queen in all rows one by one for i in range(n): if is_safe(board, i, col): board[i][col] = 1 count += solve_nq_util(board, col + 1) board[i][col] = 0 # BACKTRACK return count # Initialize board board = [[0 for _ in range(n)] for _ in range(n)] return solve_nq_util(board, 0)"},{"question":"Write a function to calculate the moving average of a list of numbers using a sliding window of size k. For example, if the input list is \`[1, 2, 3, 4, 5]\` and \`k\` is 3, the output should be \`[2.0, 3.0, 4.0]\` because the average of the first three numbers is 2.0, the second three numbers is 3.0, and so on. If \`k\` is greater than the length of the list, the function should return an empty list.","solution":"from typing import List def moving_average(numbers: List[int], k: int) -> List[float]: Calculate the moving average of a list of numbers using a sliding window of size k. :param numbers: List of numbers. :param k: Size of the sliding window. :return: List of moving averages. if k > len(numbers): return [] result = [] for i in range(len(numbers) - k + 1): window = numbers[i:i+k] window_average = sum(window) / k result.append(window_average) return result"},{"question":"Write a function to find the shortest buffer for a given prefix string. The buffer size is determined by the length of the prefix string plus an extra space. If the prefix string is empty, the buffer size should be 1.","solution":"def find_shortest_buffer(prefix): Returns the shortest buffer size for a given prefix string. Parameters: prefix (str): The prefix string. Returns: int: The buffer size. return len(prefix) + 1 if prefix else 1"},{"question":"Write a function to find the shortest possible palindrome formed by rearranging the characters of a given string. If no palindrome can be formed, return an empty string.","solution":"from collections import Counter def shortest_palindrome(s): Returns the shortest possible palindrome formed by rearranging the characters of the given string, or an empty string if no palindrome can be formed. # Count the frequency of each character in the string char_count = Counter(s) # Count the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character have an odd count, a palindrome cannot be formed if odd_count > 1: return \\"\\" # Create two halves of the palindrome and the middle character (if any) first_half = [] middle = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle = char first_half.extend(char * (count // 2)) first_half_str = ''.join(sorted(first_half)) second_half_str = first_half_str[::-1] # Mirror of the first half return first_half_str + middle + second_half_str"},{"question":"Write a function to determine if one string is a permutation of another string. Permutations are strings that have the same characters in any order.","solution":"def is_permutation(str1, str2): Determines if one string is a permutation of another string. :param str1: First string. :param str2: Second string. :return: True if str1 is a permutation of str2, False otherwise. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"Write a function to find the median of a list of numbers. The function should handle both odd and even lengths of the list.","solution":"def find_median(numbers): Returns the median of a list of numbers. n = len(numbers) if n == 0: raise ValueError(\\"The list is empty\\") sorted_numbers = sorted(numbers) mid = n // 2 if n % 2 == 0: median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2 else: median = sorted_numbers[mid] return median"},{"question":"Write a function to generate all possible subsets of a given list. For example, the subsets of [1, 2, 3] are [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]].","solution":"def generate_subsets(s): Generate all possible subsets of a given list s. subsets = [[]] for element in s: subsets += [current + [element] for current in subsets] return subsets"},{"question":"Write a function to find the maximum value in an integer array. What is the time complexity of this function?","solution":"def find_max(arr): Returns the maximum value in the integer array. :param arr: List[int] - List of integers :return: int - The maximum value in the list if not arr: raise ValueError(\\"The array is empty\\") max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value # Time complexity: O(n), where n is the number of elements in the array."},{"question":"Write a function to find the first missing positive integer in an array that contains integers in the range [1, n], where n is the length of the array. For example, given the array [3, 4, -1, 1], the function should return 2. If the array contains all integers from 1 to n, the function should return n + 1.","solution":"def first_missing_positive(nums): Returns the first missing positive integer in the array \`nums\`. The integers in \`nums\` are expected to be in the range [1, len(nums)]. Parameters: nums (list of int): The array of integers. Returns: int: The first missing positive integer. n = len(nums) # Move every positive integer to the position of its value if possible for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first position which does not have the correct value for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, return n + 1 return n + 1"},{"question":"Write a function to replace multiple characters in a string using a dictionary of replacements. The replacements should be made in one step without using multiple replace calls.","solution":"def replace_multiple_chars(input_string, replacements): Replaces multiple characters in input_string using a dictionary of replacements. :param input_string: str, the original string :param replacements: dict, a dictionary where keys are characters to be replaced, and values are characters to replace with. :return: str, the modified string after replacements # Create translation table from the replacements dictionary translation_table = str.maketrans(replacements) # Translate the input string using the translation table result_string = input_string.translate(translation_table) return result_string"},{"question":"Write a function to determine if a given binary tree is a height-balanced binary tree. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determines if a binary tree is height-balanced. :param root: TreeNode: The root node of the binary tree. :return: bool: True if the binary tree is height-balanced, False otherwise. def check_balance_and_height(node): if not node: return (True, 0) left_balanced, left_height = check_balance_and_height(node.left) right_balanced, right_height = check_balance_and_height(node.right) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 current_height = max(left_height, right_height) + 1 return (current_balanced, current_height) balanced, height = check_balance_and_height(root) return balanced"},{"question":"Write a function to sum all the numbers in a list in Python. The function should take a list of integers as an input and return the sum of all the integers in the list.","solution":"def sum_list(numbers): Returns the sum of all the integers in the list. :param numbers: List of integers :return: Sum of the integers in the list return sum(numbers)"},{"question":"Write a function to calculate the sum of a series using recursion.","solution":"def sum_series_recursive(n): Calculates the sum of series from 1 to n using recursion. Parameters: n (int): The upper bound of the series (must be a non-negative integer) Returns: int: The sum of the series from 1 to n if n == 0: return 0 return n + sum_series_recursive(n - 1)"},{"question":"Write a function to compute the maximum number of items that can be stored in a given capacity \`C\` using dynamic programming.","solution":"def knapsack_max_items(values, weights, capacity): Calculates the maximum number of items that can be stored in a knapsack with capacity \`C\` using dynamic programming. :param values: List of the values of the items. :param weights: List of the weights of the items. :param capacity: Maximum capacity of the knapsack. :return: Maximum value that can be stored in the knapsack. n = len(values) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a function to find all the anagrams of a given string in a list of strings. For example, given the string \\"abc\\" and the list [\\"acb\\", \\"bac\\", \\"bca\\", \\"ddd\\", \\"mnp\\"], the function should return [\\"acb\\", \\"bac\\", \\"bca\\"]. Remember, an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","solution":"def find_anagrams(target, words): Returns all the anagrams of the target string found in the list of words. Parameters: target (str): The target string. words (list): The list of strings to check for anagrams. Returns: list: A list of anagrams found in the provided words. sorted_target = sorted(target) return [word for word in words if sorted(word) == sorted_target]"},{"question":"Write a function to convert a string to a palindrome by appending the minimum number of characters to its end. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, such as madam or level.","solution":"def make_palindrome(s): Appends the minimum number of characters to the end of the string \`s\` to make it a palindrome. Args: s (str): Input string Returns: str: Palindromic string if s == s[::-1]: # if provided string is already a palindrome return s for i in range(len(s)): if s[i:] == s[i:][::-1]: return s + s[:i][::-1] return s"},{"question":"Write a function to find the second smallest element in a given min-heap. A min-heap is a complete binary tree where the parent node is less than or equal to its children. The heap is represented as an array. For example, given the min-heap array [1, 3, 5, 7, 9, 2, 4], the second smallest element is 3.","solution":"def find_second_smallest_min_heap(heap): Returns the second smallest element in the min-heap array. if len(heap) < 2: raise ValueError(\\"Heap must contain at least two elements\\") second_smallest = float('inf') for i in range(1, len(heap)): if heap[i] < second_smallest: second_smallest = heap[i] return second_smallest"},{"question":"Write a function to calculate the mode of an array of integers. The mode is the number that appears most frequently in the array. If there are multiple modes, return all of them in ascending order. If the array is empty, return an empty list.","solution":"from collections import Counter def find_mode(numbers): Returns the mode(s) of the array of integers. If there are multiple modes, returns them in ascending order. If the array is empty, returns an empty list. if not numbers: return [] counter = Counter(numbers) highest_frequency = max(counter.values()) modes = [num for num, freq in counter.items() if freq == highest_frequency] return sorted(modes)"},{"question":"Write a function to calculate the weekly earnings of an employee given their hourly rate, hours worked per week, and whether they are a full-time or part-time employee. Full-time employees work 40 hours a week and receive an additional 10% bonus on their earnings, while part-time employees receive a flat 5% bonus.","solution":"def weekly_earnings(hourly_rate, hours_worked, is_full_time): Calculate the weekly earnings of an employee. Parameters: hourly_rate (float): Hourly pay rate of the employee. hours_worked (float): The number of hours worked in a week. is_full_time (bool): True if the employee is full-time, False otherwise. Returns: float: The weekly earnings including the appropriate bonus. base_earnings = hourly_rate * hours_worked if is_full_time: if hours_worked == 40: bonus = 0.10 else: bonus = 0 else: bonus = 0.05 total_earnings = base_earnings + (base_earnings * bonus) return total_earnings"},{"question":"Write a function to reverse a singly linked list in Python. Ensure your solution handles edge cases, such as when the list is empty or contains only one element.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. Parameters: head (ListNode): Head of the singly linked list. Returns: ListNode: Head of the reversed singly linked list. previous = None current = head while current: next_node = current.next # Store reference to the next node current.next = previous # Reverse the link previous = current # Move previous to this node current = next_node # Move to the next node in the original list return previous # New head of the reversed list"},{"question":"Write a function to calculate the factorial of a given number. The function should be able to handle both positive integers and zero. For negative numbers, it should raise a custom exception.","solution":"class NegativeNumberError(Exception): Custom exception for negative numbers. pass def factorial(n): Returns the factorial of a given number. If the number is negative, raises a NegativeNumberError. :param n: integer :return: factorial of n if n < 0: raise NegativeNumberError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to return a list of elements with a frequency of occurrence greater than 1. The function should be able to handle a string, list, or a dictionary as input and return the elements with a frequency greater than 1 in the same type as the input. If the input is a dictionary, the function should return a list of keys with a frequency greater than 1.","solution":"def elements_with_frequency_greater_than_one(data): Returns elements with a frequency of occurrence greater than 1. Parameters: data (str, list, dict): The input data which can be a string, list, or dictionary. Returns: list/str/keys: Elements with frequency greater than 1. from collections import Counter if isinstance(data, dict): counter = Counter(data.values()) else: counter = Counter(data) if isinstance(data, dict): return [k for k, v in data.items() if counter[v] > 1] elif isinstance(data, list): return [k for k, v in counter.items() if v > 1] elif isinstance(data, str): return ''.join([k for k, v in counter.items() if v > 1]) else: raise TypeError(\\"Unsupported input type\\")"},{"question":"Write a function to check if all the elements in an array are even. If so, return true. Otherwise, return false.","solution":"def all_even(array): Returns True if all elements in the array are even, otherwise returns False. return all(element % 2 == 0 for element in array)"},{"question":"Write a function to add two numbers. The function should take two integers as parameters and return their sum.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to calculate the total number of distinct permutations of a given string, considering all possible permutations. You should handle both lowercase and uppercase letters, as well as digits, and ensure that duplicate characters do not affect the count.","solution":"from math import factorial from collections import Counter def distinct_permutations(s): Returns the total number of distinct permutations of the given string. freq = Counter(s) total_permutations = factorial(len(s)) for count in freq.values(): total_permutations //= factorial(count) return total_permutations"},{"question":"Write a function to reverse the elements of a string.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to find the index of a target value in a sorted array. If the target is not found, return the index where it would be if it were inserted in order.","solution":"def search_insert_pos(nums, target): This function takes a sorted list and a target value, returns the index of the target if found. If not, it returns the index where the target should be inserted. Args: nums (list of int): A sorted list of integers. target (int): The target value to search for. Returns: int: The index of the target if found, or the index where it should be inserted. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"Write a function to detect and return the duplicate elements in an integer array. For example, given the array [1, 2, 3, 4, 2], the function should return [2]. If there are no duplicates, the function should return an empty list.","solution":"def find_duplicates(nums): Returns a list of duplicate elements in the given integer array. :param nums: List of integers :return: List of duplicate integers seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a function to reverse a linked list. The function should take the head of the linked list as input and return the new head of the reversed linked list. The linked list can only be traversed starting from the head and cannot be traversed in both directions.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list and returns the new head of the reversed list. :param head: The head node of the singly linked list. :return: The new head node of the reversed singly linked list. prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the current node's pointer prev = current # Move prev to the current node current = next_node # Move to the next node in the list return prev # New head is the last non-null node we encountered"},{"question":"Write a function to reverse the order of elements in a singly linked list. Can you provide an example in Python?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a singly linked list and returns the new head. :param head: ListNode :return: ListNode prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to find the minimum number of coins needed to make up a given amount. Assume that you have an infinite supply of each coin type. For example, if the amount is 11 and you have coin types of 1, 2, 5, the minimum number of coins needed is 3 (5 + 5 + 1).","solution":"def coinChange(coins, amount): Find the minimum number of coins needed to make up a given amount. Parameters: coins (List[int]): List of coin denominations. amount (int): The target amount. Returns: int: The minimum number of coins needed to make the amount. Returns -1 if the amount cannot be made up. # Initialize dp array with amount+1 (amount+1 is effectively infinity) dp = [amount + 1] * (amount + 1) # Base case: zero amount requires zero coins dp[0] = 0 # Fill dp array for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still amount + 1, it means it's not possible to form that amount return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Write a function to determine if a list of integers contains exactly one number which is repeated an odd number of times.","solution":"def has_odd_repeated_number(nums): Determines if a list contains exactly one number which is repeated an odd number of times. Args: nums (list): A list of integers. Returns: bool: True if exactly one number is repeated an odd number of times, otherwise False. from collections import Counter count = Counter(nums) odd_repeated_count = sum(1 for n in count.values() if n % 2 != 0) return odd_repeated_count == 1"},{"question":"Write a function to divide two integers without using the division operator, multiplication operator, and bitwise operators. How can this be achieved using only addition, subtraction, and possibly recursion?","solution":"def divide(dividend, divisor): Function to divide two integers without using *, /, % operators. Leads to integer division result (floor of the quotient) if divisor == 0: raise ValueError(\\"Divisor cannot be zero\\") if dividend == 0: return 0 negative = (dividend < 0) != (divisor < 0) dividend = abs(dividend) divisor = abs(divisor) quotient = 0 while dividend >= divisor: dividend -= divisor quotient += 1 if negative: quotient = -quotient return quotient"},{"question":"Write a function to count the number of times the search key is present in a singly linked list. You can assume that the linked list is not empty.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def count_occurrences(head, key): Count the number of times the search key is present in the singly linked list. count = 0 current = head while current is not None: if current.value == key: count += 1 current = current.next return count"},{"question":"Write a function to find the area of a circle given its radius. The function should return the area rounded to 2 decimal places. Ensure the function is efficient and handles edge cases such as negative radius inputs.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. The area is rounded to 2 decimal places. if radius < 0: return 0 # or raise an exception if you prefer area = math.pi * radius ** 2 return round(area, 2)"},{"question":"Write a function to validate a given email address using Python's re (regular expression) module. The function should return \`True\` if the email address is valid and \`False\` otherwise.","solution":"import re def validate_email(email): Validates a given email address using a regular expression. Args: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return re.match(email_regex, email) is not None"},{"question":"Write a function to remove duplicates from a string, preserving the original order of the characters. Additionally, the function should handle empty strings gracefully.","solution":"def remove_duplicates(s): Removes duplicates from a string while preserving the original order of characters. Handles empty strings gracefully. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to solve the problem of finding the maximum number of unique elements in a sliding window of size k in a given array. The function should take two parameters: an array of integers and the size of the sliding window k.","solution":"def max_unique_elements_in_sliding_window(arr, k): Returns the maximum number of unique elements in any sliding window of size k in the given array. :param arr: List[int] - List of integers representing the array :param k: int - Size of the sliding window :return: int - Maximum number of unique elements in any sliding window of size k if not arr or k <= 0 or k > len(arr): return 0 window = {} max_unique = 0 current_unique = 0 for i in range(len(arr)): # Add the current element to the window if arr[i] in window: window[arr[i]] += 1 else: window[arr[i]] = 1 current_unique += 1 # Remove the element that is now outside the window if i >= k: if window[arr[i - k]] == 1: del window[arr[i - k]] current_unique -= 1 else: window[arr[i - k]] -= 1 # Update the maximum unique count if necessary if i >= k - 1: max_unique = max(max_unique, current_unique) return max_unique"},{"question":"Write a function to find the closest pair of points in a 2D plane. The function should take a list of tuples representing points in 2D. Each point is a tuple (x, y). The function should return the distance between the closest pair of points and the pair itself.","solution":"import math def distance(point1, point2): Calculates the Euclidean distance between two points in 2D space. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def closest_pair_of_points(points): Finds the closest pair of points in a 2D plane. :param points: A list of tuples representing points in 2D. :return: A tuple containing the shortest distance and the closest pair of points. n = len(points) if n < 2: raise ValueError(\\"At least two points are required\\") min_distance = float('inf') closest_pair = None for i in range(n): for j in range(i + 1, n): d = distance(points[i], points[j]) if d < min_distance: min_distance = d closest_pair = (points[i], points[j]) return min_distance, closest_pair"},{"question":"Write a function to implement a simple encryption algorithm using the Caesar Cipher. The algorithm should encrypt a string by shifting each character by a fixed number of positions in the alphabet. For example, with a shift of 1, 'A' would become 'B', 'B' would become 'C', and so on. The function should handle both uppercase and lowercase letters, and ignore non-alphabet characters. The shift should wrap around the alphabet, so 'Z' shifted by 1 would become 'A'.","solution":"def caesar_cipher(text, shift): Encrypts a string using the Caesar Cipher algorithm by shifting each character by the fixed number of positions in the alphabet. result = [] for char in text: if char.isalpha(): start = ord('A') if char.isupper() else ord('a') result.append(chr((ord(char) - start + shift) % 26 + start)) else: result.append(char) return \\"\\".join(result)"},{"question":"Write a function to check if a string contains all unique characters. You may not use any additional data structures.","solution":"def has_unique_characters(s): Returns True if the string s contains all unique characters, False otherwise. for i in range(len(s)): for j in range(i+1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Write a function to check if a given number is a perfect square. If it is, return the square root of the number; otherwise, return the closest lower integer. Use the Newton-Raphson method for the calculation.","solution":"def is_perfect_square(num): Checks if a given number is a perfect square using the Newton-Raphson method. If it is, return the square root of the number; otherwise, return the closest lower integer. if num < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") if num == 0: return 0 x = num while True: y = (x + num // x) // 2 if y >= x: break x = y if x * x == num: return x else: return x - 1 if x * x > num else x"},{"question":"Write a function to check if a given integer is a prime number. If it is a prime number, return \\"This number is prime\\". If it is not a prime number, return \\"This number is not a prime\\".","solution":"def is_prime(n): Check if the given number n is a prime number. Returns \\"This number is prime\\" if n is a prime number, otherwise returns \\"This number is not a prime\\". if n <= 1: return \\"This number is not a prime\\" for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return \\"This number is not a prime\\" return \\"This number is prime\\""},{"question":"Write a function to determine if a string is symmetric (also known as a palindrome) or not. A string is considered symmetric if reading it from left to right is the same as reading it from right to left.","solution":"def is_symmetric(s): Determines if a string is symmetric (palindrome). Args: s (str): The string to be checked. Returns: bool: True if the string is symmetric, False otherwise. return s == s[::-1]"},{"question":"Write a function to decode a string that has been encoded with the following rule: each character in the original string is repeated \`n\` times consecutively, where \`n\` is the ASCII value of the character.","solution":"def decode(encoded_str): Decodes a string where each character from the original string is repeated n times, where n is the ASCII value of the character. Args: encoded_str (str): The encoded string, where each character is repeated \`n\` times. Returns: str: The decoded original string. decoded_str = [] i = 0 while i < len(encoded_str): count = 1 while i + count < len(encoded_str) and encoded_str[i] == encoded_str[i + count]: count += 1 if count == ord(encoded_str[i]): decoded_str.append(encoded_str[i]) i += count return ''.join(decoded_str)"},{"question":"Write a function to sum up all the numbers in a given list. The function should handle an empty list by returning 0. Ensure your solution is memory efficient and handles large inputs gracefully.","solution":"def sum_list(numbers): Returns the sum of all numbers in the list. Handles empty list by returning 0. total = 0 for num in numbers: total += num return total"},{"question":"Write a function to find the first repeated element in an array of integers. The function should return the first repeated element if it exists, otherwise return -1. The array contains integers within the range from 1 to n, where n is the length of the array.","solution":"def first_repeated_element(arr): Returns the first repeated element in an array of integers. If there is no repeated element, returns -1. seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Write a function to find the first non-repeating character in a string. The function should return the first character that does not repeat in the string. If every character repeats, the function should return an empty string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If every character repeats, returns an empty string. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a function to find the largest product of any two numbers in a given list.","solution":"def largest_product(nums): Returns the largest product of any two numbers in the given list. if len(nums) < 2: raise ValueError(\\"The list must contain at least two numbers.\\") nums.sort() return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a function to merge two sorted lists.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a single sorted list. Args: list1: First sorted list. list2: Second sorted list. Returns: A merged list that is sorted. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function to reverse a linked list in place. You should not allocate extra space for another linked list, but you may use a constant amount of extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list in place. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current: next_node = current.next # store the next node current.next = prev # reverse the link prev = current # move prev to current node current = next_node # move to the next node return prev"},{"question":"Write a function to find the second smallest number in a given array. If the array has less than two elements, return None.","solution":"def second_smallest(arr): Returns the second smallest number in a given array. If the array has less than two elements, return None. if len(arr) < 2: return None # Initialize the smallest and second smallest with infinity smallest = second_smallest = float('inf') for number in arr: if number < smallest: second_smallest = smallest smallest = number elif smallest < number < second_smallest: second_smallest = number # If second_smallest was never updated, return None return second_smallest if second_smallest < float('inf') else None"},{"question":"Write a function to find the most frequent element in an array. If there is a tie, return all the elements that are the most frequent. Write a solution in Python.","solution":"from collections import Counter from typing import List, Union def most_frequent_element(arr: List[int]) -> Union[List[int], int]: Returns the most frequent element(s) in an array. If there is a tie, returns a list of the elements. if not arr: return [] count = Counter(arr) max_freq = max(count.values()) most_frequent = [key for key, value in count.items() if value == max_freq] if len(most_frequent) == 1: return most_frequent[0] return most_frequent"},{"question":"Write a function to filter out all the words in a sentence that contain the letter 'z' and return the remaining words in a list. The function should ignore case sensitivity, meaning words containing 'Z' should also be filtered out.","solution":"def filter_words(sentence): Filters out words that contain 'z' or 'Z' from a sentence. Parameters: sentence (str): The input sentence from which words are to be filtered. Returns: list: A list of words from the input sentence that do not contain 'z' or 'Z'. words = sentence.split() filtered_words = [word for word in words if 'z' not in word.lower()] return filtered_words"},{"question":"Write a function to calculate the total number of permutations of a given string. For example, if the input is \\"abc\\", the output should be 6.","solution":"def factorial(n): Calculates the factorial of a number n. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def total_permutations(s): Returns the total number of permutations of the given string s. return factorial(len(s))"},{"question":"Write a function to print the binary representation of a number without using any built-in conversion functions. To make the task a bit challenging, only allow the use of bitwise operations and conditional branching to accomplish the task.","solution":"def int_to_binary_string(n): Returns the binary representation of an integer n as a string. The function uses bitwise operations and conditional branching only. if n == 0: return \\"0\\" result = \\"\\" is_negative = n < 0 if is_negative: n = -n while n > 0: result = ('1' if (n & 1) else '0') + result n >>= 1 if is_negative: # Append the '-' sign for negative numbers result = \\"-\\" + result return result"},{"question":"Write a function to reverse the characters in a string using recursion. The function should be named \`reverseString\` and it should take a single string as its parameter and return the reversed string.","solution":"def reverseString(s): Reverses the characters in a string using recursion. :param s: str, the input string to be reversed :return: str, the reversed string if len(s) == 0: return s else: return reverseString(s[1:]) + s[0]"},{"question":"Write a function to merge two sorted arrays into one sorted array. The function should take two arrays \`arr1\` and \`arr2\` and their sizes as parameters, and return a new array that is sorted and contains all elements from both \`arr1\` and \`arr2\`.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. :param arr1: List[int], first sorted array :param arr2: List[int], second sorted array :return: List[int], merged and sorted array merged_array = [] i = 0 j = 0 # Merge the two arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append the remaining elements of arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append the remaining elements of arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function to reverse the order of words in a given sentence. For example, if the input is \\"Hello world from Alibaba\\", the output should be \\"Alibaba from world Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Args: sentence (str): The sentence whose words are to be reversed. Returns: str: A new sentence with the words reversed. words = sentence.split() reversed_words = words[::-1] reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Write a function to generate all prime numbers less than a given number n. The function should be time efficient and use a known algorithm for prime number generation.","solution":"def generate_primes(n): Generates all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function to evaluate and return a boolean value based on two integer variables, x and y. The function should return True if x is greater than y, otherwise it should return False.","solution":"def is_greater(x, y): Returns True if x is greater than y, otherwise returns False. return x > y"},{"question":"Write a function to calculate the sum of a list of numbers. Here's the list: [10, 20, 30, 40, 50].","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in the list. return sum(numbers)"},{"question":"Write a function to reverse the order of words in a given string \`s\`.","solution":"def reverse_words(s): Reverses the order of words in the given string s. Parameters: s (str): The input string whose words need to be reversed. Returns: str: A string with the words in reversed order. return ' '.join(s.split()[::-1])"},{"question":"Write a function to reverse the linked list in place. The function should take the head of the linked list as input and return the new head of the reversed list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the linked list in place and returns the new head of the reversed list. Args: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. prev = None current = head while current: next_temp = current.next current.next = prev prev = current current = next_temp return prev"},{"question":"Write a function to find the sum of all odd numbers in a given list using a functional programming style in Python.","solution":"def sum_of_odd_numbers(numbers_list): Returns the sum of all odd numbers in the given list using functional programming style. return sum(filter(lambda x: x % 2 != 0, numbers_list))"},{"question":"Write a function to calculate the sum of all even numbers from 1 to n, inclusive. Ensure the function is efficient and uses a mathematical formula to calculate the sum directly without needing to iterate through each number.","solution":"def sum_of_evens(n): Returns the sum of all even numbers from 1 to n, inclusive. # Calculate the largest even number ≤ n largest_even = n if n % 2 == 0 else n - 1 # Number of even terms num_terms = largest_even // 2 # Sum of first k even numbers is k * (k + 1) sum_evens = num_terms * (num_terms + 1) return sum_evens"},{"question":"Write a function to calculate the sum of prime numbers within a given range (inclusive). The function should consider only positive integers and exclude the number zero and one.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_range(start, end): Returns the sum of prime numbers in a given range [start, end]. if start < 1: start = 1 prime_sum = sum(n for n in range(start, end + 1) if is_prime(n)) return prime_sum"},{"question":"Write a function to find the maximum sum of a subarray in a given 2D array of integers.","solution":"def max_sum_subarray_2d(arr): Finds the maximum sum of a subarray in a given 2D array of integers. if not arr or not arr[0]: return 0 rows = len(arr) cols = len(arr[0]) max_sum = float('-inf') for left_col in range(cols): temp_row_sum = [0] * rows for right_col in range(left_col, cols): for i in range(rows): temp_row_sum[i] += arr[i][right_col] current_max_sum = kadane(temp_row_sum) max_sum = max(max_sum, current_max_sum) return max_sum def kadane(arr): Helper function to perform Kadane's algorithm. Finds the maximum sum subarray in a 1D array. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to find and return the second minimum value in a binary search tree (BST). If the BST is empty or does not contain a second minimum value, the function should return -1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_second_minimum_value(root): Finds the second minimum value in a binary search tree. If the BST is empty or does not contain a second minimum, returns -1. def inorder(node): if not node: return [] return inorder(node.left) + [node.val] + inorder(node.right) # Extract the values from the BST using inorder traversal (which gives sorted values for BST) values = inorder(root) if len(values) < 2: return -1 unique_values = sorted(set(values)) if len(unique_values) < 2: return -1 return unique_values[1]"},{"question":"Write a function to check if a given array is a rotated sorted array. A rotated sorted array is an array that has been rotated from a sorted array at some pivot. For example, [3, 4, 5, 1, 2] is a rotated sorted array, but [3, 5, 4, 1, 2] is not. Note that the array does not contain duplicate values.","solution":"def is_rotated_sorted(arr): Returns True if the given array is a rotated sorted array, otherwise False. n = len(arr) if n == 0: return False # Find the point where the array is rotated rotation_point = -1 for i in range(1, n): if arr[i] < arr[i-1]: rotation_point = i break # If no rotation point is found, the array should be sorted if rotation_point == -1: return arr == sorted(arr) # Check if the two subarrays are sorted if arr[:rotation_point] != sorted(arr[:rotation_point]) or arr[rotation_point:] != sorted(arr[rotation_point:]): return False # Check if the overall array is a rotation of a sorted array return arr[-1] <= arr[0]"},{"question":"Write a function to convert an integer to a hexadecimal string in Python. You need to handle both positive and negative integers.","solution":"def int_to_hex(num): Converts an integer to a hexadecimal string. Parameters: num (int): The integer to convert. Returns: str: The hexadecimal representation of the num. if num < 0: num = (1 << 32) + num return hex(num)"},{"question":"Write a function to reverse a string using recursion. The function should take a string as input and return the reversed string.","solution":"def reverse_string_recursively(s): Takes a string as input and returns the string reversed using recursion. if len(s) == 0: return s else: return reverse_string_recursively(s[1:]) + s[0]"},{"question":"Write a function to compute the maximum pairwise product in an array. The function takes an array of integers as an input and returns the maximum product of any two elements. Also, handle the edge cases where the array might be empty or have less than two elements.","solution":"def maximum_pairwise_product(arr): Returns the maximum product of any two elements in the array. If the array has less than two elements, returns None. if len(arr) < 2: return None # Find the two largest and two smallest numbers max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a function to get all numbers from 1 to 100 that can be evenly divided by either 3 or 5.","solution":"def get_divisible_by_3_or_5(): Returns a list of numbers from 1 to 100 that can be evenly divided by either 3 or 5. return [i for i in range(1, 101) if i % 3 == 0 or i % 5 == 0]"},{"question":"Write a function to reverse each word in a sentence. The function should take a single string argument and return a new string where each word's characters are reversed. Words in the sentence are separated by spaces.","solution":"def reverse_each_word(sentence): Reverses each word in the sentence. Parameters: sentence (str): The input sentence where each word's characters are to be reversed. Returns: str: A new sentence with each word's characters reversed. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a function to check if a number is positive, negative, or zero and return a corresponding message.","solution":"def check_number(n): Checks if a number is positive, negative, or zero. Parameters: n (int, float): The number to check. Returns: str: A message indicating if the number is positive, negative, or zero. if n > 0: return \\"The number is positive\\" elif n < 0: return \\"The number is negative\\" else: return \\"The number is zero\\""},{"question":"Write a function to simulate a tank battle game where two tanks move towards each other and \\"bang\\" when they collide. The tanks are represented as objects with properties for x, y coordinates, width, height, speed, and direction (1 for moving to the right, -1 for moving to the left). The function should take the tanks as parameters, simulate the movement, and return a message when the tanks collide.","solution":"class Tank: def __init__(self, x, y, width, height, speed, direction): self.x = x self.y = y self.width = width self.height = height self.speed = speed self.direction = direction def simulate_tank_battle(tank1, tank2): Simulates the tank battle by moving the tanks towards each other and returns 'bang' when they collide. while not has_collided(tank1, tank2): tank1.x += tank1.speed * tank1.direction tank2.x += tank2.speed * tank2.direction return \\"bang\\" def has_collided(tank1, tank2): Checks if tank1 and tank2 have collided. x_overlap = max(tank1.x, tank2.x) < min(tank1.x + tank1.width, tank2.x + tank2.width) y_overlap = max(tank1.y, tank2.y) < min(tank1.y + tank1.height, tank2.y + tank2.height) return x_overlap and y_overlap"},{"question":"Write a function to calculate the total amount paid by someone renting a car for a specific number of days. The car rental fee is calculated based on the number of days and the usage data. The usage data is provided as a dictionary where the keys are dates and the values are tuples representing the number of kilometers driven each day.","solution":"def calculate_rental_fee(days, usage_data): Calculate the total amount paid by someone renting a car for a specific number of days. Parameters: - days (int): Number of days the car was rented. - usage_data (dict): Dictionary where keys are dates (str) and values are tuples representing the number of kilometers driven each day. Returns: - total_fee (float): Total amount paid for the car rental. # Define daily rental rate and per kilometer rate daily_rate = 40 per_km_rate = 0.25 # Initialize total fee total_fee = 0 for date, km in usage_data.items(): # Add daily rate to total fee total_fee += daily_rate # Add kilometer rate to total fee based on kilometers driven total_fee += km[0] * per_km_rate return total_fee"},{"question":"Write a function to calculate the factorial of a given number using recursion. Factorial of a number n (n!) is the product of all positive integers less than or equal to n. However, ensure that the function handles large numbers by using the BigInteger data type in C#. If the input number is negative, the function should return null.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Handles negative numbers by returning None. if n < 0: return None elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to convert a given string into a list of integers. Each character in the string represents a digit, and the list should contain the corresponding integer values. For example, if the input string is \\"123\\", the output should be the list [1, 2, 3].","solution":"def string_to_int_list(s): Convert a given string into a list of integers. Args: s (str): The input string, where each character represents a digit. Returns: List[int]: The list of integers corresponding to the digits in the string. return [int(char) for char in s]"},{"question":"Write a function to return all decimal numbers between 1 and 100 that are divisible by 7 and 11.","solution":"def divisible_by_7_and_11(): Returns a list of decimal numbers between 1 and 100 that are divisible by both 7 and 11. result = [] for number in range(1, 101): if number % 7 == 0 and number % 11 == 0: result.append(number) return result"},{"question":"Write a function to find the smallest number in a given array of integers. If the array is empty, the function should return \`None\`. Additionally, ensure that your function can handle arrays with positive, negative numbers, and zeros.","solution":"def find_smallest_number(arr): Returns the smallest number in the given array of integers. If the array is empty, returns None. if not arr: return None return min(arr)"},{"question":"Write a function to convert a list of decimal integers to a list of binary strings. Your function should return the binary representation of each integer as a string prefixed with \\"0b\\". For example, given a list of integers [10, 2, 15], the function should return ['0b1010', '0b10', '0b1111'].","solution":"def decimal_to_binary(int_list): Converts a list of decimal integers to a list of binary strings. Each binary string is prefixed with \\"0b\\". :param int_list: List of decimal integers to convert. :return: List of binary strings. return [bin(num) for num in int_list]"},{"question":"Write a function to compute the factorial of a given number using recursion. Implement a code snippet that takes a non-negative integer as input and returns the factorial of that number. To solve this problem, you need to understand the concepts of recursion and how to use it to calculate factorials.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to recursively calculate logarithm base 10 of a number.","solution":"import math def recursive_log10(n, base_value=None): Recursively calculates logarithm base 10 of a number. Parameters: n (float): Number to calculate the logarithm. base_value (float): Current value of the logarithm being calculated. Returns: float: The base 10 logarithm of n. if base_value is None: base_value = n if n == 10: return 1 elif 0 < n < 10: return math.log10(n) else: return 1 + recursive_log10(n / 10, base_value)"},{"question":"Write a function to generate all possible subsets of a list.","solution":"from typing import List def generate_subsets(nums: List[int]) -> List[List[int]]: Returns all possible subsets of the list \`nums\`. res = [] def backtrack(start, path): res.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return res"},{"question":"Write a function to get a list where each element is a tuple containing three elements: the index of the element, the element itself, and its square.","solution":"def index_element_and_square(lst): Returns a list of tuples where each tuple contains three elements: the index of the element, the element itself, and its square. return [(i, x, x**2) for i, x in enumerate(lst)]"},{"question":"Write a function to find the sum of the digits of an integer. Here is an example number: 957","solution":"def sum_of_digits(number): Returns the sum of the digits of an integer. Args: number (int): a non-negative integer. Returns: int: the sum of the digits of the number. return sum(int(digit) for digit in str(number))"},{"question":"Write a function to find the maximum sum of a subarray of a given size \`k\` in an array of integers. The array may contain both positive and negative numbers.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a subarray of size k. Parameters: arr (list): The input array of integers. k (int): The size of subarray. Returns: int: The maximum sum of a subarray with size k. if k > len(arr) or k <= 0: raise ValueError(\\"Subarray size k must be within the bounds of the input array length and greater than 0\\") max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to reverse a singly linked list. The/list's nodes contain integers. Each node has an attribute \`data\` (the integer value) and a \`next\` attribute (a reference to the next node in the list). Ensure your function returns the new head of the reversed list.","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def reverse_singly_linked_list(head): Reverses a singly linked list. Parameters: head (ListNode): The head node of the singly linked list. Returns: ListNode: The new head of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to reverse a string without using any built-in functions or additional storage. How would you approach this problem?","solution":"def reverse_string(s): Reverses a given string without using any built-in functions or additional storage. :param s: str, input string :return: str, reversed string n = len(s) s_as_list = list(s) # Convert string to list to allow in-place operations for i in range(n // 2): # Swap characters from start and end moving towards the center s_as_list[i], s_as_list[n - 1 - i] = s_as_list[n - 1 - i], s_as_list[i] reversed_s = ''.join(s_as_list) # Convert list back to string return reversed_s"},{"question":"Write a function to check if a given word is a palindrome. A palindrome is a word that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". Your function should ignore spaces, punctuation, and capitalization when determining if a word is a palindrome.","solution":"def is_palindrome(word): Returns True if the given word is a palindrome, ignoring spaces, punctuation, and capitalization. import re # Remove all non-alphanumeric characters and convert to lowercase filtered_word = re.sub(r'[^a-zA-Z0-9]', '', word).lower() # Check if the filtered word reads the same backward as forward return filtered_word == filtered_word[::-1]"},{"question":"Write a function to determine if a given string has a unique set of characters. For example, the string \\"abc\\" has a unique set of characters, but the string \\"aab\\" does not. Your function should work for any string of lowercase letters.","solution":"def has_unique_characters(s): Determines if the string \`s\` has all unique characters. :param s: A string consisting of lowercase letters :return: True if the string has all unique characters, False otherwise return len(s) == len(set(s))"},{"question":"Write a function to check if a given number is a power of three. If it is, return \`true\`; otherwise, return \`false\`. The function should handle edge cases, such as very large numbers and zero.","solution":"def is_power_of_three(n): Checks if the given number is a power of three. Args: n (int): The number to check. Returns: bool: True if n is a power of three, otherwise False. if n < 1: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to populate a 2D array with numbers from 1 to n*n, following a \\"snake crawl\\" pattern. The snake crawl pattern starts from the top left corner of the array and moves right across the first row. Then it moves down to the next column from the right, moves left across that column, then up to the next column and so on, until all numbers are placed.","solution":"def populate_snake_crawl(n): Populates an n x n 2D array with numbers from 1 to n*n following a \\"snake crawl\\" pattern. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] num = 1 for layer in range((n + 1) // 2): # Moving right across the top row of the current layer for i in range(layer, n - layer): matrix[layer][i] = num num += 1 # Moving down the right column of the current layer for j in range(layer + 1, n - layer): matrix[j][n - layer - 1] = num num += 1 # Moving left across the bottom row of the current layer for i in range(n - layer - 2, layer - 1, -1): matrix[n - layer - 1][i] = num num += 1 # Moving up the left column of the current layer for j in range(n - layer - 2, layer, -1): matrix[j][layer] = num num += 1 return matrix"},{"question":"Write a function to calculate and return the number of unique elements in an integer array. If the array is null or empty, the function should return 0.","solution":"def count_unique_elements(arr): Returns the number of unique elements in an integer array. If the array is null or empty, returns 0. if arr is None or len(arr) == 0: return 0 return len(set(arr))"},{"question":"Write a function to generate a sequence of numbers from 1 to n, and convert each number into its corresponding English word. Additionally, the function should handle special cases for numbers 1, 2, and 3, as well as the teens from 11 to 19. The function should return a list of these English words.","solution":"def number_to_words(n): Returns a list of numbers from 1 to n converted into their corresponding English words. Handles special cases for 1, 2, 3, and the teens from 11 to 19. def number_to_word(number): if 1 <= number <= 19: return [\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"][number - 1] elif number >= 20: tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] below_twenties = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] return tens[number // 10] + (below_twenties[number % 10] if (number % 10) != 0 else \\"\\") # This part could be extended for numbers 100 and beyond. return [number_to_word(i) for i in range(1, n + 1)]"},{"question":"Write a function to check if a number is a valid integer in Python. I need to make sure the input is either a whole number or a float that can be exactly converted to an integer without introducing any fractional part.","solution":"def is_valid_integer(value): Checks if a number is a valid integer. This includes: - Whole numbers (integers) - Floats that can be exactly converted to an integer without any fractional part Parameters: value (any): The value to be checked Returns: bool: True if value is a valid integer, False otherwise if isinstance(value, int): return True if isinstance(value, float) and value.is_integer(): return True return False"},{"question":"Write a function to parse and extract all occurrences of email addresses from a given string. Assume an email address follows the standard format: some_text@domain.com where 'some_text' can be any alphanumeric characters and underscores, and 'domain' can be any alphanumeric characters and hyphens. The email extraction should be case-insensitive.","solution":"import re def extract_emails(text): Extracts all email addresses from the given text using regex. Args: text (str): The input string containing email addresses. Returns: list: A list of extracted email addresses. email_pattern = r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,7}b' return re.findall(email_pattern, text)"},{"question":"Write a function to check if two arrays are the same after rotating one of them to the left. For example, if array1 = [1, 2, 3, 4, 5] and array2 = [3, 4, 5, 1, 2], the function should return true. If array1 = [1, 2, 3, 4, 5] and array2 = [3, 4, 2, 1, 5], the function should return false. The arrays are non-empty.","solution":"def are_rotations(arr1, arr2): Checks if one array is a left rotation of the other array. if len(arr1) != len(arr2): return False combined = arr1 + arr1 return ' '.join(map(str, arr2)) in ' '.join(map(str, combined))"},{"question":"Write a function to determine whether a list contains any duplicate elements. If it does, return True, otherwise return False.","solution":"def contains_duplicates(lst): Returns True if the list contains any duplicates, otherwise returns False. return len(lst) != len(set(lst))"},{"question":"Write a function to check if a number is a perfect square. In Python, you can use the \`math\` module for mathematical operations.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. if n < 0: return False root = math.isqrt(n) # isqrt returns the integer square root of the non-negative integer n return root * root == n"},{"question":"Write a function to check if a linked list is not only a palindrome but also checks whether it is strictly increasing. A linked list is defined as a palindrome if the sequence of its values reads the same forwards and backwards. For a strictly increasing linked list, each node must have a greater value than the previous one. Your function should return a tuple containing two boolean values: the first indicating whether the linked list is a palindrome, and the second indicating whether it is strictly increasing.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome_and_increasing(head): Checks if a linked list is a palindrome and strictly increasing. :param head: Head node of the linked list :return: Tuple with two boolean values (is_palindrome, is_increasing) if not head or not head.next: # A single node list is trivially a palindrome and can be considered increasing return (True, True) # Create two lists to check for palindrome and increasing properties values = [] current = head while current: values.append(current.val) current = current.next # Check if it's a palindrome is_palindrome = values == values[::-1] # Check if it's strictly increasing is_increasing = all(values[i] < values[i+1] for i in range(len(values) - 1)) return (is_palindrome, is_increasing)"},{"question":"Write a function to calculate all numbers that are composed of digits 1, 6, 8, and 9 and review the performance using Python.","solution":"from itertools import permutations def generate_numbers(): Returns a list of all numbers composed of the digits 1, 6, 8, and 9. digits = ['1', '6', '8', '9'] perms = permutations(digits) return sorted(int(''.join(p)) for p in perms)"},{"question":"Write a function to count the number of pairs in a list where the sum of the pair equals a given target. You should not count the same element twice and consider each pair exactly once.","solution":"def count_pairs_with_sum(lst, target): Counts the number of pairs in the list \`lst\` where the sum of the pair equals \`target\`. Each element from the list may be used at most once in a pair. Parameters: lst (list): List of integers. target (int): The target sum for the pairs. Returns: int: Number of valid pairs. seen = set() count = 0 for number in lst: complementary = target - number if complementary in seen: count += 1 seen.remove(complementary) # Ensure each number is used once else: seen.add(number) return count"},{"question":"Write a function to calculate the total number of squares that can be formed within a given N x N grid.","solution":"def total_squares_in_grid(N): Calculate the total number of squares that can be formed within an N x N grid. Args: N (int): Size of the grid. Returns: int: Total number of squares. total_squares = 0 for size in range(1, N + 1): total_squares += (N - size + 1) ** 2 return total_squares"},{"question":"Write a function to check if a binary tree is a binary search tree (BST) without constructing any new structures or data which means that no additional memory (other than a constant amount) is used.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_bst(node, left=float('-inf'), right=float('inf')): Checks if a binary tree is a binary search tree (BST). Parameters: - node (TreeNode): The root node of the binary tree. - left (float): The lower bound for the current node value. - right (float): The upper bound for the current node value. Returns: - bool: True if the tree is a BST, False otherwise. if not node: return True if not (left < node.value < right): return False return is_bst(node.left, left, node.value) and is_bst(node.right, node.value, right)"},{"question":"Write a function to calculate the Fibonacci sequence using recursion. What is the time complexity of this approach?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # Time Complexity: The time complexity of this approach is O(2^n) because we're calculating many overlapping subproblems multiple times."},{"question":"Write a function to calculate the factorial of a given number using recursion. The function should be able to handle the input of a single integer and return the factorial of that number raised to the power of its digit sum. For example, if the input number is 5, the factorial of 5 is 120, and the sum of its digits (5) is 5, so the final output should be 120^5.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def digit_sum(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n)) def factorial_power_digit_sum(n): Returns the factorial of n raised to the power of the sum of its digits. fact = factorial(n) sum_digits = digit_sum(n) return fact ** sum_digits"},{"question":"Write a function to determine the number of days a user has been active on a platform in terms of \\"likes\\". A user is considered active if they have received at least one \\"like\\" on their posts. You are given a list of likes per post. If the user has received no likes, return \`0\` as they are not considered active.","solution":"def active_days(likes_per_post): Determines the number of days a user has been active based on the likes received. Parameters: - likes_per_post (list of int): List containing the number of likes for each post. Returns: - int: Number of days the user has been active. # A user is considered active if they have received at least one like on that day. return sum(1 for likes in likes_per_post if likes > 0)"},{"question":"Write a function to reverse a stack","solution":"def reverse_stack(stack): Reverses the input stack. Parameters: stack (list): A stack represented as a list. Returns: list: The reversed stack. if not stack: return [] temp = stack.pop() reversed_stack = reverse_stack(stack) reversed_stack.insert(0, temp) return reversed_stack"},{"question":"Write a function to find the area of a triangle using base and height. The function should be named \`calculateTriangleArea\` and should take two arguments: \`base\` and \`height\`. The function should return the area of the triangle, calculated using the formula ( text{Area} = frac{1}{2} times text{base} times text{height} ).","solution":"def calculateTriangleArea(base, height): Returns the area of a triangle using base and height. Formula: Area = 0.5 * base * height return 0.5 * base * height"},{"question":"Write a function to calculate the area of a circle given its radius. Then, write a function to calculate the area of an ellipse given its semi-major axis and semi-minor axis. Compare and contrast these two functions in terms of their input parameters, functionality, and any mathematical operations they perform.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"The radius cannot be negative.\\") return math.pi * radius ** 2 def ellipse_area(semi_major_axis, semi_minor_axis): Returns the area of an ellipse given its semi-major axis and semi-minor axis. if semi_major_axis < 0 or semi_minor_axis < 0: raise ValueError(\\"The semi-major and semi-minor axes cannot be negative.\\") return math.pi * semi_major_axis * semi_minor_axis # Comparison: # Input parameters: # - circle_area() takes one parameter (radius). # - ellipse_area() takes two parameters (semi-major and semi-minor axes). # Functionality: # - circle_area() computes the area of a circle using the formula πr². # - ellipse_area() computes the area of an ellipse using the formula πab, where 'a' is the semi-major axis and 'b' is the semi-minor axis. # Mathematical operations: # - Both functions use pi from the math library and involve multiplication. # - circle_area() squares the radius. # - ellipse_area() multiplies the semi-major and semi-minor axes directly."},{"question":"Write a function to find the number of 1s in the binary representation of an integer. For example, the binary representation of 5 is \\"101\\", which has 2 ones.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of the integer n. :param n: An integer :return: The number of 1s in the binary representation of n return bin(n).count('1')"},{"question":"Write a function to find the total number of nodes in a binary search tree (BST). How can we optimize this function to avoid unnecessary comparisons?","solution":"class TreeNode: def __init__(self, key=0, left=None, right=None): self.key = key self.left = left self.right = right def count_nodes(root): Returns the total number of nodes in a binary search tree. if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a function to convert a decimal number into a binary string, and vice versa.","solution":"def decimal_to_binary(decimal_number): Converts a decimal number to its binary string representation. if decimal_number == 0: return \\"0\\" is_negative = decimal_number < 0 decimal_number = abs(decimal_number) binary_string = \\"\\" while decimal_number > 0: binary_string = str(decimal_number % 2) + binary_string decimal_number = decimal_number // 2 if is_negative: binary_string = \\"-\\" + binary_string return binary_string def binary_to_decimal(binary_string): Converts a binary string representation to its decimal number. if binary_string == \\"0\\": return 0 is_negative = binary_string[0] == '-' if is_negative: binary_string = binary_string[1:] decimal_number = 0 for digit in binary_string: decimal_number = decimal_number * 2 + int(digit) if is_negative: decimal_number = -decimal_number return decimal_number"},{"question":"Write a function to calculate the product of all elements in a list using a reduce function from a given programming language.","solution":"from functools import reduce def product_of_elements(lst): Returns the product of all elements in the given list. return reduce(lambda x, y: x * y, lst)"},{"question":"Write a function to find the maximum profit that can be made by at most two transactions on a given list of daily stock prices. You are not allowed to have overlapping transactions.","solution":"def maxProfit(prices): Returns the maximum profit that can be made by at most two transactions. :param prices: List[int] :return: int if not prices: return 0 n = len(prices) # profits one transaction left_min = prices[0] left_profits = [0] * n for i in range(1, n): left_profits[i] = max(left_profits[i - 1], prices[i] - left_min) left_min = min(left_min, prices[i]) # profits two transactions right_max = prices[-1] right_profits = [0] * (n + 1) for i in range(n - 2, -1, -1): right_profits[i] = max(right_profits[i + 1], right_max - prices[i]) right_max = max(right_max, prices[i]) # find the max profit max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i + 1]) return max_profit"},{"question":"Write a function to check if a binary tree is a valid binary search tree (BST). To enhance the difficulty, modify the function to handle logic without using an in-order traversal array. Instead, you must use an in-order traversal method that iteratively explores the tree and checks the BST property during the traversal. You must also ensure that the function handles duplicates and duplicates are allowed in the BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_BST(root): Checks if a binary tree is a valid binary search tree (BST). stack = [] prev_val = float('-inf') while stack or root: while root: stack.append(root) root = root.left root = stack.pop() if root.val < prev_val: return False prev_val = root.val root = root.right return True"},{"question":"Write a function to count the number of ones in the binary representation of a given number \`n\`. The function should be efficient and handle both positive and negative integers.","solution":"def count_ones_in_binary(n): Returns the number of ones in the binary representation of a given number n. This function handles both positive and negative integers. # Convert the number to its binary representation and count the '1's return bin(n & 0xFFFFFFFF).count('1')"},{"question":"Write a function to calculate the factorial of a non-negative integer using recursion. In your solution, please include a brief explanation of how recursion works in this context.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. The basic idea of this recursion function is that it calls itself with a reduced value of n until it reaches the base case, which is when n is 0. The factorial of 0 is defined as 1. Each recursive call multiplies the current value of n by the factorial of n-1. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to calculate the area of a circle given its radius. The function should be designed to handle invalid inputs (e.g., negative numbers or non-numeric values) gracefully by returning a specific error message.","solution":"import math def area_of_circle(radius): Calculate and return the area of a circle given its radius. Args: radius (float): The radius of the circle. Returns: float or str: The area of the circle if the radius is valid; otherwise, an error message. if not isinstance(radius, (int, float)): return \\"Invalid input: Radius must be a number.\\" if radius < 0: return \\"Invalid input: Radius cannot be negative.\\" return math.pi * radius ** 2"},{"question":"Write a function to determine the number of distinct elements in an array. For example, given an array \`arr = [1, 2, 2, 3, 4, 4, 4, 5]\`, the output should be \`5\` because there are 5 distinct elements.","solution":"def count_distinct_elements(arr): Returns the number of distinct elements in an array. Parameters: arr (list): The input array. Returns: int: The number of distinct elements in the array. return len(set(arr))"},{"question":"Write a function to flatten a nested dictionary in Python. The function should take a nested dictionary as input and return a flattened dictionary where the keys are concatenated using a dot (.) as a separator and the values are those from the original dictionary.","solution":"def flatten_dict(d, parent_key='', sep='.'): Flattens a nested dictionary. Parameters: - d (dict): The dictionary to flatten. - parent_key (str): The base key for the current recursive level. - sep (str): The separator to use between levels in the flattened dictionary keys. Returns: - dict: A flattened dictionary. items = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten_dict(v, new_key, sep=sep)) else: items[new_key] = v return items"},{"question":"Write a function to find all the unique integers in a list using Python.","solution":"def find_unique_integers(lst): Returns a list of all unique integers in the input list \`lst\`. unique_integers = list(set(lst)) return unique_integers"},{"question":"Write a function to convert a sorted array to a balanced binary search tree (BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Converts a sorted array to a balanced binary search tree (BST). :param nums: List[int] - The sorted array :return: TreeNode - The root node of the balanced BST if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root"},{"question":"Write a function to find the maximum subarray sum using Kadane's algorithm and explain the code.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the sum of the series 1 - 1/2 + 1/3 - 1/4 + ... + 1/n, where n is a positive integer. The function should also handle cases where n is zero or negative by returning an appropriate error message.","solution":"def series_sum(n): Calculate the sum of the series 1 - 1/2 + 1/3 - 1/4 + ... + 1/n. Parameters: n (int): The number of terms in the series. Returns: float: The sum of the series if n is a positive integer. str: An error message if n is zero or negative. if n <= 0: return \\"Error: n must be a positive integer.\\" total = 0.0 sign = 1 for i in range(1, n + 1): total += sign * (1 / i) sign *= -1 # Alternate the sign return total"},{"question":"Write a function to calculate the factorial of a given number using iteration and return the result.","solution":"def factorial(n): Returns the factorial of a given number n using iteration. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to create a new tree from a given array and in-order traversal. The function should take an integer array \`nums\` and a vector of integers \`inorder\` representing the in-order traversal of the tree. The function should return the root of the new binary tree created.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nums, inorder): Builds a binary tree from given nums and inorder traversal. :param nums: List[int], the list of integers. :param inorder: List[int], the in-order traversal of the tree. :return: TreeNode, the root of the constructed binary tree. if not nums or not inorder: return None root_val = nums[0] root = TreeNode(root_val) inorder_index = inorder.index(root_val) root.left = build_tree(nums[1:inorder_index+1], inorder[:inorder_index]) root.right = build_tree(nums[inorder_index+1:], inorder[inorder_index+1:]) return root"},{"question":"Write a function to implement Binary Search. What is Binary Search and how does it work?","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target value. :param arr: List[int] - A list of sorted numbers. :param target: int - The value to search for. :return: int - The index of the target in the list if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to remove all duplicates from an integer array and return the new length of the array. The elements of the array should be in the same order as they appeared in the original array. You may not use any additional data structures except for a few extra variables, and you must solve the problem in O(n) time complexity and O(1) space complexity.","solution":"def remove_duplicates(arr): Removes duplicates from the integer array, maintaining order, and returns the new length of the array. if not arr: return 0 write_index = 0 for i in range(len(arr)): if arr[i] != arr[write_index]: write_index += 1 arr[write_index] = arr[i] return write_index + 1"},{"question":"Write a function to reverse a linked list. How can this be achieved iteratively and recursively?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_list_iterative(head): Reverses a linked list iteratively. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev def reverse_list_recursive(head): Reverses a linked list recursively. if not head or not head.next: return head new_head = reverse_list_recursive(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function to search for a target value in a 2D sorted array and return the position (row, column) of the target. The 2D array is sorted in ascending order both row-wise and column-wise. The function should return the position as a tuple \`(row, column)\`. If the target is not found, return \`None\`.","solution":"def search_2d_sorted_array(matrix, target): Searches for a target value in a 2D sorted array and returns the position (row, column) of the target. The 2D array is sorted in ascending order both row-wise and column-wise. Args: matrix (list of list of int): 2D sorted array. target (int): The target value to search for. Returns: tuple: The position (row, column) of the target if found, otherwise None. if not matrix or not matrix[0]: return None num_rows = len(matrix) num_cols = len(matrix[0]) row, col = 0, num_cols - 1 while row < num_rows and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] > target: col -= 1 else: row += 1 return None"},{"question":"Write a function to calculate the total price of an item given its cost price and markup percentage. The function should take in two parameters: \`cost_price\` (a float representing the cost price of the item) and \`markup_percentage\` (a float representing the markup percentage to be applied to the cost price). The markup percentage is given as a percentage value, not a decimal.","solution":"def total_price(cost_price, markup_percentage): Calculate the total price of an item given its cost price and markup percentage. Parameters: cost_price (float): The cost price of the item. markup_percentage (float): The markup percentage (as a percentage, not a decimal). Returns: float: The total price of the item after applying the markup. markup_amount = (markup_percentage / 100) * cost_price return cost_price + markup_amount"},{"question":"Write a function to call another function recursively. What is recursion and how does it work?","solution":"def factorial(n): Calculate the factorial of a given number n using recursion. if n == 0: return 1 else: return n * factorial(n - 1) def fib(n): Calculate the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fib(n - 1) + fib(n - 2)"},{"question":"Write a function to check if a given number N is a perfect square or not. A number N is a perfect square if it can be expressed in the form of x^2 where x is an integer. For example, 16 can be written as 4^2, thus 16 is a perfect square, but 14 can not, so 14 is not a perfect square.","solution":"import math def is_perfect_square(N): Check if a given number N is a perfect square. Args: N (int): The number to check. Returns: bool: True if N is a perfect square, False otherwise. if N < 0: return False sqrt_N = int(math.sqrt(N)) return sqrt_N * sqrt_N == N"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a given 1D array of integers, known as Kadane's algorithm. Then, write a test function to verify your solution with different cases.","solution":"def kadanes_algorithm(nums): Find the maximum sum of a contiguous subarray within a given 1D array of integers. :param nums: List[int] - List of integers :return: int - Maximum sum of the contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to demonstrate the use of a for loop to iterate through a list of numbers and print each number.","solution":"def print_numbers(numbers): Iterates through the list of numbers and prints each number. for number in numbers: print(number)"},{"question":"Write a function to calculate the nth Fibonacci number using dynamic programming to achieve a time complexity of O(n) and space complexity of O(n).","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. Time complexity is O(n) and space complexity is O(n). if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function to return the first N numbers of the Fibonacci sequence in a list. The function should be named \`fibonacci_numbers\` and take a single integer \`N\` as its argument. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_numbers(N): Returns the first N numbers of the Fibonacci sequence in a list. if N <= 0: return [] elif N == 1: return [0] elif N == 2: return [0, 1] fib_sequence = [0, 1] for _ in range(2, N): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to sort an array in ascending order by counting the number of elements less than or equal to the current element and placing it in its correct position.","solution":"def counting_sort(arr): Sorts an array in ascending order by counting the number of elements less than or equal to the current element and placing it in its correct position. if not arr: return [] max_value = max(arr) count = [0] * (max_value + 1) for elem in arr: count[elem] += 1 sorted_arr = [] for i in range(len(count)): sorted_arr.extend([i] * count[i]) return sorted_arr"},{"question":"Write a function to find the maximum number in a list of numbers using recursion.","solution":"def find_max_recursive(lst): Returns the maximum number in a list using recursion. # Base case: if the list has only one element, return it if len(lst) == 1: return lst[0] # Recursive case: find the maximum between the first element and the maximum of the rest of the list else: return max(lst[0], find_max_recursive(lst[1:]))"},{"question":"Write a function to check if a given list of integers is sorted in ascending order. The function should return \`True\` if the list is sorted, and \`False\` otherwise.","solution":"def is_sorted(lst): Checks if the given list of integers is sorted in ascending order. Args: lst (list): List of integers. Returns: bool: True if the list is sorted in ascending order, False otherwise. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Write a function to find the minimum depth of a binary tree. The binary tree is represented using an array of integers where the array index represents the node id, with the root node having an id of 0. The value -1 in the array indicates that there is no node at that position. Assume the array is given and accessible in a function parameter.","solution":"def min_depth(arr): Computes the minimum depth of a binary tree represented by an array. def min_depth_recursive(index): if index >= len(arr) or arr[index] == -1: return 0 left_index = 2 * index + 1 right_index = 2 * index + 2 left_depth = min_depth_recursive(left_index) right_depth = min_depth_recursive(right_index) if left_depth == 0 or right_depth == 0: return max(left_depth, right_depth) + 1 return min(left_depth, right_depth) + 1 if not arr or arr[0] == -1: return 0 return min_depth_recursive(0)"},{"question":"Write a function to find the maximum sum of a subarray within a given array. The array can contain both positive and negative numbers. Use Kadane's algorithm for this task.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray using Kadane's Algorithm. :param arr: List of integers :return: Integer, maximum subarray sum if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to extend the given two-dimensional string array with an extra row and column based on the values of the existing array.","solution":"def extend_2d_array(matrix): Extends a 2-dimensional array with an extra row and column. The new row contains the sum of each column, and the new column contains the sum of each row along with the sum of the new row. Args: matrix (list of list of int): A 2-dimensional array of integers Returns: list of list of int: The extended 2-dimensional array rows = len(matrix) cols = len(matrix[0]) # Initialize the new extended matrix with one more row and one more column extended_matrix = [[0 for _ in range(cols + 1)] for _ in range(rows + 1)] # Fill the values from the original matrix for i in range(rows): for j in range(cols): extended_matrix[i][j] = matrix[i][j] # Calculate sums for the extended column and row for i in range(rows): row_sum = sum(matrix[i]) extended_matrix[i][cols] = row_sum for j in range(cols): col_sum = sum(matrix[i][j] for i in range(rows)) extended_matrix[rows][j] = col_sum # The bottom-right corner of the extended matrix extended_matrix[rows][cols] = sum(extended_matrix[i][cols] for i in range(rows)) return extended_matrix"},{"question":"Write a function to generate a list of strings where each string is a space-separated sequence of numbers from 1 to n, inclusive, where n is the length of the list. The function should be able to generate the list up to a maximum of 9999 elements.","solution":"def generate_number_strings(limit): Generate a list of strings where each string is a space-separated sequence of numbers from 1 to the position in the list, inclusive. The function handles a limit up to 9999 elements. Parameters: limit (int): The number of elements to generate. It should be between 1 and 9999 inclusive. Returns: List[str]: List of space-separated number sequences. if limit < 1 or limit > 9999: raise ValueError(\\"Limit must be between 1 and 9999 inclusive.\\") return [' '.join(map(str, range(1, i + 1))) for i in range(1, limit + 1)]"},{"question":"Write a function to find the maximum sum of the subarray with the length of n. If no such subarray exists, return -1.","solution":"def max_sum_subarray(arr, n): Returns the maximum sum of subarray with length n. If no such subarray exists, return -1. if not arr or n <= 0 or n > len(arr): return -1 max_sum = curr_sum = sum(arr[:n]) for i in range(n, len(arr)): curr_sum = curr_sum - arr[i - n] + arr[i] max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"Write a function to solve a 2D Maze problem using Depth-First Search (DFS) algorithm. The maze is represented as a 2D array where 0 represents a path and 1 represents a wall. The function should return true if a path exists from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) and false otherwise. The maze can contain dead ends and loops.","solution":"def solve_maze_dfs(maze): Solves a 2D Maze problem using Depth-First Search (DFS) algorithm. :param maze: List of List of integers where 0 represents a path and 1 represents a wall. :return: True if a path exists from top-left to bottom-right, False otherwise. rows, cols = len(maze), len(maze[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(x, y): # If out of bounds or at a wall or already visited if x < 0 or y < 0 or x >= rows or y >= cols or maze[x][y] == 1 or visited[x][y]: return False # If we've reached the bottom-right corner if x == rows - 1 and y == cols - 1: return True # Mark the current cell as visited visited[x][y] = True # Explore neighbors (up, down, left, right) if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True # Unmark the current cell as visited (backtrack) visited[x][y] = False return False return dfs(0, 0)"},{"question":"Write a function to demonstrate string reversal in Python.","solution":"def reverse_string(s): Returns the reverse of the input string. return s[::-1]"},{"question":"Write a function to sort a list of integers using the merge sort algorithm.","solution":"def merge_sort(arr): Sorts an array of integers using the merge sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. merged = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 merged.extend(left[left_index:]) merged.extend(right[right_index:]) return merged"},{"question":"Write a function to reverse a given integer without using loops or recursion. It should handle negative numbers and zeros. Explain the logic behind your solution.","solution":"def reverse_integer(n): Reverses the digits of an integer without using loops or recursion. Handles negative numbers appropriately. # Convert the integer to string n_str = str(n) # Check if it's a negative number if n_str[0] == '-': # Remove the negative sign, reverse the string, and add the negative sign back reversed_str = '-' + n_str[:0:-1] else: # Simply reverse the string reversed_str = n_str[::-1] # Convert the reversed string back to an integer return int(reversed_str)"},{"question":"Write a function to calculate the number of N-Queens solutions.","solution":"def totalNQueens(n): Returns the number of distinct solutions to the n-queens puzzle. :param n: int :return: int def solve(row, columns, diagonals1, diagonals2): if row == n: return 1 count = 0 for col in range(n): d1 = row - col d2 = row + col if col not in columns and d1 not in diagonals1 and d2 not in diagonals2: count += solve(row + 1, columns | {col}, diagonals1 | {d1}, diagonals2 | {d2}) return count return solve(0, set(), set(), set())"},{"question":"Write a function to check if a given list contains any duplicates. The function should return \`True\` if duplicates are found, and \`False\` otherwise.","solution":"def contains_duplicates(lst): Check if the given list contains any duplicates. Returns True if duplicates are found, False otherwise. return len(lst) != len(set(lst))"},{"question":"Write a function to determine if a string contains a sequence of numbers followed by text, like \\"a123xyz\\".","solution":"import re def contains_numbers_followed_by_text(s): Checks if the string contains a sequence of numbers followed by text. Args: s (str): The input string. Returns: bool: True if the string contains numbers followed by text, False otherwise. pattern = r'd+[a-zA-Z]+' return bool(re.search(pattern, s))"},{"question":"Write a function to check if a given word is a palindrome. A palindrome is a word that reads the same backward as forward, e.g., \\"radar\\". You should not ignore cases and spaces. For example, \\"A man a plan a canal Panama\\" is not a palindrome because of the spaces.","solution":"def is_palindrome(word): Checks if the given word is a palindrome. A palindrome reads the same backward as forward. Args: word (str): The word to check. Returns: bool: True if the word is a palindrome, False otherwise. return word == word[::-1]"},{"question":"Write a function to determine if a given string contains any duplicate characters without using any additional data structures. How can this be achieved using a bit vector approach?","solution":"def has_duplicate_characters(s): Determines if a given string contains any duplicate characters. The function uses a bit vector approach to check for duplicates without using any additional data structures. Parameters: s (str): The input string to check for duplicates. Returns: bool: True if the string contains duplicates, False otherwise. checker = 0 # This will act as a bit vector for char in s: val = ord(char) # Get ASCII value of character if (checker & (1 << val)) > 0: # Check if bit at position \`val\` is set return True # Set the bit at position \`val\` checker |= (1 << val) return False"},{"question":"Write a function to remove duplicates from an array, keeping only the first occurrence of each element. The function should take an array as input and return a new array without duplicates. For example, if the input array is \`[1, 3, 3, 7, 7, 7, 10]\`, the output should be \`[1, 3, 7, 10]\`.","solution":"def remove_duplicates(array): Removes duplicates from an array, keeping only the first occurrence of each element. Parameters: array (list): The input array from which to remove duplicates. Returns: list: A new array without duplicates. seen = set() result = [] for item in array: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to check if a given integer is a power of two. A number is a power of two if there is only one '1' bit in its binary representation. For example, 1, 2, 4, 8, 16, etc., are powers of two.","solution":"def is_power_of_two(n): Returns True if the given integer n is a power of two, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to convert a string to an integer in Python. The function should handle both positive and negative numbers. Can you also provide examples of how to use the function and handle exceptions, particularly for non-integer strings?","solution":"def string_to_int(s): Converts a string to an integer, handling both positive and negative numbers. Args: s (str): The string to convert to an integer. Returns: int: The integer representation of the string. Raises: ValueError: If the string cannot be converted to an integer. try: return int(s) except ValueError: raise ValueError(f\\"Cannot convert '{s}' to integer\\") # Examples of usage: try: print(string_to_int(\\"123\\")) # Output: 123 print(string_to_int(\\"-456\\")) # Output: -456 print(string_to_int(\\"abc\\")) # Raises ValueError: Cannot convert 'abc' to integer except ValueError as e: print(e)"},{"question":"Write a function to calculate the factorial of a number using recursion. What are some complexities and considerations when writing such a function?","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is 0, returns 1 as 0! is 1. Raises ValueError if n is a negative integer. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to display the numbers from 1 to 10.","solution":"def display_numbers(): Returns a list of numbers from 1 to 10. return list(range(1, 11))"},{"question":"Write a function to find the maximum element in a given list of integers. The list can be positive or negative, and it may contain duplicates. The function should return the largest integer in the list.","solution":"def find_max(nums): Returns the maximum element in a given list of integers. if not nums: raise ValueError(\\"The list is empty.\\") max_num = nums[0] for num in nums[1:]: if num > max_num: max_num = num return max_num"},{"question":"Write a function to rotate the elements of an array to the right by k positions. The function should take two parameters: the array and the number of positions to rotate. For example, given the array [1, 2, 3, 4, 5] and k = 2, the function should rotate the array to the right by 2 positions, resulting in [4, 5, 1, 2, 3].","solution":"def rotate_right(arr, k): Rotates the elements of the array to the right by k positions. Parameters: arr (list): The array to rotate. k (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr: return arr n = len(arr) k %= n # handle cases where k > n return arr[-k:] + arr[:-k]"},{"question":"Write a function to print the first n natural numbers.","solution":"def print_natural_numbers(n): Prints the first n natural numbers. if n <= 0: return [] return list(range(1, n+1))"},{"question":"Write a function to add two numbers represented by linked lists in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Adds two numbers represented by linked lists and returns the sum as a linked list. Each node contains a single digit and the digits are stored in reverse order. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Write a function to calculate the sum of all numbers in a list, but only if they are positive.","solution":"def sum_of_positive_numbers(numbers): Returns the sum of all positive numbers in the list. return sum(number for number in numbers if number > 0)"},{"question":"Write a function to determine if a given integer is a power of three. An integer is a power of three if there exists an integer 'n' such that the integer is equal to 3^n. For example, 27 is a power of three because 27 = 3^3. The function should return \`True\` if the number is a power of three, otherwise, it should return \`False\`.","solution":"def is_power_of_three(n): Determines if a given integer is a power of three. Returns True if the number is a power of three, otherwise False. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to sort an array in a zigzag pattern, starting with the smallest element, followed by the largest, followed by the second smallest, second largest, and so on. This pattern should repeat until all elements are sorted in this manner. For example, for the input list [3, 2, 5, 7, 1, 4], the output should be [1, 7, 2, 5, 3, 4].","solution":"def zigzag_sort(arr): Sorts the input array in a zigzag pattern: smallest element, largest element, second smallest, second largest, and so on. Parameters: arr (list): The input list of numbers. Returns: list: The zigzag sorted list. arr.sort() result = [] i, j = 0, len(arr) - 1 while i <= j: if i == j: result.append(arr[i]) else: result.append(arr[i]) result.append(arr[j]) i += 1 j -= 1 return result"},{"question":"Write a function to remove all duplicates from a string and return it. The function should maintain the original order of characters.","solution":"def remove_duplicates(s): Returns a string with all duplicates removed, maintaining the original order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to count the occurrences of a character in a string. The function should also calculate the frequency of each character in the string and return the character with the highest frequency along with its count.","solution":"from collections import Counter def count_occurrences_and_highest_frequency(s): Counts the occurrences of each character in the string s. Returns a dictionary with each character's count, and the character with the highest frequency along with its count. if not s: return {}, None, 0 # Return empty values for an empty input string # Count the occurrences of each character using Counter char_count = Counter(s) # Find the character with the highest frequency highest_frequency_char, highest_frequency_count = char_count.most_common(1)[0] return char_count, highest_frequency_char, highest_frequency_count"},{"question":"Write a function to remove all instances of a given substring from a string in Python. How can you implement this using Python's built-in methods?","solution":"def remove_substring(main_str, sub_str): Removes all instances of sub_str from main_str. :param main_str: The original string. :param sub_str: The substring to be removed. :return: A new string with all instances of sub_str removed. return main_str.replace(sub_str, \\"\\")"},{"question":"Write a function to find the minimum number of squares that sum up to a given number N. For example, if N is 12, the function should return 3 because 12 can be expressed as (4 + 4 + 4) or (4 + 4 + 1 + 1 + 1) or (9 + 1 + 1). The minimum number of squares required is 3 (i.e., 4^2 + 4^2 + 4^2).","solution":"def minSquares(n): Returns the minimum number of squares that sum up to a given number n. if n <= 0: return 0 dp = [float('inf')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"Write a function to find the difference between the sum of odd numbers and the sum of even numbers in a given list of integers.","solution":"def difference_odd_even(nums): Returns the difference between the sum of odd numbers and the sum of even numbers in a given list. sum_odd = sum(x for x in nums if x % 2 != 0) sum_even = sum(x for x in nums if x % 2 == 0) return sum_odd - sum_even"},{"question":"Write a function to transpose a matrix using Python. The function should accept a 2D array (list of lists) as input and return the transposed matrix. The transposed matrix should have its rows and columns swapped.","solution":"def transpose_matrix(matrix): Returns the transpose of the input 2D matrix. Args: matrix (list of list of int): The input 2D matrix. Returns: list of list of int: The transposed 2D matrix. # Using list comprehension to transpose the matrix return [list(row) for row in zip(*matrix)]"},{"question":"Write a function to find the Kth smallest element in an array. The function should work for both integers and floats. The array can contain both positive and negative numbers.","solution":"def kth_smallest_element(arr, k): Returns the kth smallest element in the array. Parameters: arr (list): A list of integers or floats. k (int): The order of the smallest element to find (1-based index). Returns: int/float: The kth smallest element in the array. if k < 1 or k > len(arr): raise ValueError(\\"k is out of the bounds of the array\\") sorted_arr = sorted(arr) return sorted_arr[k - 1]"},{"question":"Write a function to determine the maximum sum of a non-empty sub-array within a given array of integers. This function can handle both positive and negative integers.","solution":"def max_sub_array_sum(nums): Returns the maximum sum of a non-empty sub-array within the given array. Uses Kadane's Algorithm for an optimal solution. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the sum of all nodes in a binary search tree (BST). How would you approach this problem using an iterative approach?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_bst(root): Returns the sum of all nodes' values in a binary search tree (BST) using iterative approach. if not root: return 0 total_sum = 0 stack = [root] while stack: node = stack.pop() total_sum += node.value if node.right: stack.append(node.right) if node.left: stack.append(node.left) return total_sum"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should handle large numbers by using the \`BigInteger\` class from the \`System.Numerics\` namespace in C#. The function should also include error handling for negative inputs and return an appropriate message.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using recursion. Raises a ValueError for negative inputs. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to reverse a string without using任何 Array or string reversal functions, and ensure the function can handle any length of string.","solution":"def reverse_string(s): Reverses the given string s without using any array or string reversal functions. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to find the maximum size of rectangle in a binary matrix. The binary matrix is a 2D array of integers where each element is either 0 or 1. The function should return the area of the largest rectangle that can be formed by consecutive 1s.","solution":"def max_histogram_area(heights): # Find maximum rectangular area in a histogram with given heights stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(matrix): if not matrix: return 0 max_area = 0 row_length = len(matrix[0]) heights = [0] * row_length for row in matrix: for i in range(row_length): if row[i] == 0: heights[i] = 0 else: heights[i] += row[i] max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"Write a function to reverse a singly linked list iteratively and recursively.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list_iteratively(head: ListNode) -> ListNode: prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev def reverse_list_recursively(head: ListNode) -> ListNode: if not head or not head.next: return head new_head = reverse_list_recursively(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function to check if a given string is a valid palindrome. A valid palindrome is one that reads the same backward as forward. For example, \\"madam\\" is a valid palindrome, while \\"python\\" is not.","solution":"def is_palindrome(s): Checks if the given string s is a valid palindrome. A valid palindrome reads the same backward as forward. return s == s[::-1]"},{"question":"Write a function to check if a string is a letter-only string or not. A letter-only string consists only of English alphabetic characters. If the string contains any character that is not a letter, the function should return False, otherwise, it should return True. The function should ignore spaces, digits, and special characters.","solution":"def is_letter_only_string(s): Checks if the input string consists only of English alphabetic characters. Ignores spaces, digits, and special characters. Returns True if the string consists only of letters, otherwise False. return s.isalpha()"},{"question":"Write a function to delete elements in an array that are present more than once, leaving only elements that appear exactly once in the array. For example, given the array [2, 3, 4, 2, 5, 6, 3], the function should return [4, 5, 6].","solution":"def delete_duplicates(arr): Returns a list with elements that appear exactly once in the input list 'arr'. from collections import Counter element_counts = Counter(arr) result = [element for element in arr if element_counts[element] == 1] return result"},{"question":"Write a function to calculate the sum of a number and its reflection.","solution":"def sum_with_reflection(number): Returns the sum of \`number\` and its reflection. Reflection of a number is obtained by reversing its digits. reflection = int(str(number)[::-1]) return number + reflection"},{"question":"Write a function to find the closest prime number less than the given number 'n'. If 'n' is 2 or less, return -1 indicating no prime number exists.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def closest_prime_less_than(n): Returns the closest prime number less than the given number 'n'. If 'n' is 2 or less, return -1 indicating no prime number exists. if n <= 2: return -1 for i in range(n-1, 1, -1): if is_prime(i): return i"},{"question":"Write a function to find the two numbers such that they add up to a specific target number. The function should return their indices in the array. The input array will have at least two elements, and each element should be within the range [−10^9, 10^9]. The target will also be within the same range.","solution":"def two_sum(nums, target): Finds the indices of two numbers in the list 'nums' such that they add up to 'target'. Parameters: nums (list of int): The list of integers. target (int): The target sum. Returns: list of int: A list containing the two indices of the elements that add up to the target. num_to_index = {} for i, num in enumerate(nums): remainder = target - num if remainder in num_to_index: return [num_to_index[remainder], i] num_to_index[num] = i return []"},{"question":"Write a function to find the maximum subarray sum in a given list of integers. The subarray must contain at least one number.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in a list of integers. Args: nums (list of int): The list of integers. Returns: int: The maximum subarray sum. if not nums: return 0 # Handle edge case where input list might be empty. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if a given string contains any palindrome substring. A palindrome substring is a substring that reads the same backward as forward, and it must be at least 2 characters long. If there is at least one such substring, return True. Otherwise, return False.","solution":"def has_palindrome_substring(s): Returns True if the given string contains any palindrome substring of at least 2 characters, else False. n = len(s) # A helper function to check if a given substring is a palindrome def is_palindrome(sub): return sub == sub[::-1] # Check all substrings of length at least 2 for length in range(2, n + 1): for start in range(n - length + 1): if is_palindrome(s[start:start + length]): return True return False"},{"question":"Write a function to perform in-order traversal of a binary tree without using any additional space for balanced BST.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def morris_in_order_traversal(root): Perform in-order traversal of a binary tree without using additional space. result = [] current = root while current is not None: if current.left is None: result.append(current.val) current = current.right else: # Find the inorder predecessor of current node pre = current.left while pre.right is not None and pre.right is not current: pre = pre.right # Make current as the right child of its inorder predecessor if pre.right is None: pre.right = current current = current.left else: # revert the changes made in the tree pre.right = None result.append(current.val) current = current.right return result"},{"question":"Write a function to find all pairs of numbers in an array that sum up to a given number \`k\`. The function should return these pairs as an array of tuples.","solution":"def find_pairs_with_sum(arr, k): Finds all pairs of numbers in the array that sum up to k. :param arr: List of integers :param k: The target sum :return: List of tuples, each containing a pair of integers that sum to k pairs = [] seen = set() for number in arr: target = k - number if target in seen: pairs.append((target, number)) seen.add(number) return pairs"},{"question":"Write a function to check if a given number is an ugly number. An ugly number is a positive integer whose prime factors only include 2, 3, and 5.","solution":"def is_ugly_number(num): Check if a number is an ugly number. An ugly number is a positive integer whose prime factors only include 2, 3, and 5. if num <= 0: return False for factor in [2, 3, 5]: while num % factor == 0: num //= factor return num == 1"},{"question":"Write a function to determine if a sentence is a palindrome, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(sentence): Determines if a sentence is a palindrome, considering only alphanumeric characters and ignoring cases. Args: sentence (str): The sentence to be checked. Returns: bool: True if the sentence is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase filtered_sentence = ''.join(char.lower() for char in sentence if char.isalnum()) # Check if the filtered sentence is the same forwards and backwards return filtered_sentence == filtered_sentence[::-1]"},{"question":"Write a function to filter prime numbers from a given list of integers and return the filtered list. The function should ensure that the list contains only prime numbers and no duplicates. The input list can contain negative numbers, and the output should only include positive prime numbers.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Filters the prime numbers from a given list of integers and returns the filtered list with unique positive prime numbers. primes = {num for num in numbers if is_prime(num) and num > 0} return list(primes)"},{"question":"Write a function to find the length of the longest strictly increasing subsequence in an array. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.","solution":"def longest_increasing_subsequence(arr): Find the length of the longest strictly increasing subsequence in an array. Args: arr (list): A list of integers. Returns: int: The length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Write a function to sort an array using the insertion sort algorithm in Python. I need a clear explanation and example usage of this algorithm.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Parameters: arr (list): The list of elements to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to extract and return the top \`k\` records from a SQL query result where the records are ordered by a specific column, say \`id\`, in descending order. It should return these records as a list of dictionaries, where each dictionary represents a record in the result.","solution":"def extract_top_k_records(query_result, k): Extract and return the top \`k\` records from a SQL query result ordered by \`id\` in descending order. Parameters: query_result (list of dict): The SQL query result where each element is a dictionary representing a record. k (int): Number of top records to extract. Returns: list of dict: Top \`k\` records ordered by \`id\` in descending order. # Sort the query_result by 'id' in descending order sorted_results = sorted(query_result, key=lambda record: record['id'], reverse=True) # Extract the top \`k\` records top_k_records = sorted_results[:k] return top_k_records"},{"question":"Write a function to add two numbers represented as linked lists. Each node in the linked list represents a single digit. The digits are stored in reverse order, meaning the least significant digit is at the head of the list. Write the function \`addTwoNumbers\` that returns the result as a linked list, also in reverse order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Adds two numbers represented as linked lists and returns the result as a linked list. The digits are stored in reverse order. :param l1: ListNode - The head of the first linked list. :param l2: ListNode - The head of the second linked list. :return: ListNode - The head of the linked list representing the sum. dummy_head = ListNode(0) current, carry = dummy_head, 0 while l1 or l2 or carry: val1 = (l1.val if l1 else 0) val2 = (l2.val if l2 else 0) total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Write a function to calculate the nth Fibonacci number using either iteration or recursion. How can I optimize this function for better performance?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer\\") if n == 1 or n == 2: return 1 fibs = [0, 1, 1] for i in range(3, n + 1): fibs.append(fibs[-1] + fibs[-2]) return fibs[n] # Optimization using memoization def fibonacci_memo(n, memo=None): if n <= 0: raise ValueError(\\"n should be a positive integer\\") if memo is None: memo = {} if n in memo: return memo[n] if n == 1 or n == 2: return 1 memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo) return memo[n]"},{"question":"Write a function to print all numbers between 1 and n in Python.","solution":"def print_numbers(n): This function prints all numbers from 1 to n. numbers = [i for i in range(1, n + 1)] return numbers"},{"question":"Write a function to calculate the area of a circle given its radius. The function should take the radius as an input parameter and return the calculated area. Additionally, the function should handle cases where the radius is less than or equal to zero, in which case it should raise a ValueError with an appropriate error message.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. If the radius is less than or equal to zero, raises a ValueError. if radius <= 0: raise ValueError(\\"The radius must be greater than zero.\\") return math.pi * (radius ** 2)"},{"question":"Write a function to check if a closed circular linked list is linked with another circular linked list. How would you implement this function?","solution":"class Node: def __init__(self, data): self.data = data self.next = None def detect_link_between_circular_linked_lists(head1, head2): Check if two circular linked lists are linked with each other. Args: head1 (Node): head node of the first circular linked list head2 (Node): head node of the second circular linked list Returns: bool: True if the circular linked lists are linked, False otherwise if head1 is None or head2 is None: return False current1 = head1 while True: current2 = head2 while True: if current1 is current2: # Same node visited in both lists return True if current2.next == head2: # end of second circular list break current2 = current2.next if current1.next == head1: # end of the first circular list break current1 = current1.next return False"},{"question":"Write a function to implement a queue using two stacks. The function should support three operations: \`push\`, \`pop\`, and \`peek\`. The \`push\` operation should add an element to the end of the queue, the \`pop\` operation should remove the element from the front of the queue, and the \`peek\` operation should return the element at the front of the queue without removing it.","solution":"class QueueUsingStacks: def __init__(self): Initialize your data structure here. self.stack1 = [] self.stack2 = [] def push(self, x: int) -> None: Push element x to the back of queue. self.stack1.append(x) def pop(self) -> int: Removes the element from in front of queue and returns that element. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2.pop() def peek(self) -> int: Get the front element. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2[-1] def empty(self) -> bool: Returns whether the queue is empty. return not self.stack1 and not self.stack2"},{"question":"Write a function to calculate the mean and median of a given list of numbers. The function should return both the mean and the median in a tuple. If the list is empty, the function should return \`(None, None)\`.","solution":"def calculate_mean_and_median(nums): Returns the mean and median of a list of numbers. If the list is empty, returns (None, None). Parameters: nums (list): List of numbers to calculate the mean and median. Returns: tuple: A tuple containing the mean and median. if not nums: return (None, None) n = len(nums) mean = sum(nums) / n sorted_nums = sorted(nums) if n % 2 == 1: median = sorted_nums[n // 2] else: median = (sorted_nums[n // 2 - 1] + sorted_nums[n // 2]) / 2 return (mean, median)"},{"question":"Write a function to reverse a string in Python. What are some common pitfalls to avoid when implementing this function?","solution":"def reverse_string(s): Reverses a given string s. Args: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to find the maximum subarray sum in a one-dimensional array of numbers. You can assume the array has at least one number. For example, given the array [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum subarray sum is 6.","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum in a one-dimensional array of numbers. Args: nums (list): List of integers. Returns: int: The maximum subarray sum. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the maximum subarray sum, which is the contiguous subarray within an array (containing at least one number) which has the largest sum.","solution":"def max_subarray_sum(arr): Returns the sum of the maximum subarray. if not arr: raise ValueError(\\"Array should contain at least one element\\") max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to calculate the nth Fibonacci number in C#.","solution":"def fibonacci(n): Returns the nth Fibonacci number if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a function to add two numbers and return the sum. If the sum is greater than 10, return only the units digit of the sum. If the sum is less than or equal to 10, return the sum directly.","solution":"def add_and_limit(a, b): Returns the sum of a and b. If the sum is greater than 10, return only the units digit of the sum. If the sum is less than or equal to 10, return the sum directly. result = a + b if result > 10: return result % 10 return result"},{"question":"Write a function to return the sum of all the prime numbers up to and including n. For example, if n is 10, the output should be 17 because the prime numbers up to 10 are 2, 3, 5, and 7, and their sum is 17.","solution":"def is_prime(num): Returns True if the number is prime, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. return sum(num for num in range(2, n + 1) if is_prime(num))"},{"question":"Write a function to decode a string that has been encoded by counting the occurrences of consecutive characters. The encoded string consists of characters followed by the number of times they should be repeated. For example, the encoded string \\"a3b2c1\\" should be decoded to \\"aaabbcc\\". The length of the encoded string will not exceed 1000 characters.","solution":"def decode_string(encoded_str): Decodes a string that has been encoded by counting the occurrences of consecutive characters. For example, the encoded string \\"a3b2c1\\" should be decoded to \\"aaabbcc\\". decoded_str = \\"\\" i = 0 while i < len(encoded_str): char = encoded_str[i] i += 1 num_str = \\"\\" while i < len(encoded_str) and encoded_str[i].isdigit(): num_str += encoded_str[i] i += 1 num = int(num_str) decoded_str += char * num return decoded_str"},{"question":"Write a function to check if two integers are coprime. Two integers are coprime if their greatest common divisor (GCD) is 1. Can you provide both the function and its usage?","solution":"import math def are_coprime(a, b): Returns True if a and b are coprime, otherwise False. return math.gcd(a, b) == 1"},{"question":"Write a function to create a binary search tree (BST) from a sorted array. Also, write a function to verify whether the created BST is indeed a binary search tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sorted_array_to_bst(nums): Creates a BST from a sorted array and returns the root of the BST. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root def is_bst(root, min_val=float('-inf'), max_val=float('inf')): Verifies whether the binary tree rooted at \`root\` is a binary search tree. if root is None: return True if root.value <= min_val or root.value >= max_val: return False return is_bst(root.left, min_val, root.value) and is_bst(root.right, root.value, max_val)"},{"question":"Write a function to serialize and deserialize a binary tree. Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file, memory, database, or transmitted across a network connections. Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file, memory, database, or transmitted across a network connections. Deserialization is the reverse process. The deserialized form should be the same as the original tree structure.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Encodes a tree to a single string. def helper(node): if node is None: return 'None,' return str(node.val) + ',' + helper(node.left) + helper(node.right) return helper(root) def deserialize(data): Decodes your encoded data to tree. def helper(nodes): val = next(nodes) if val == 'None': return None node = TreeNode(int(val)) node.left = helper(nodes) node.right = helper(nodes) return node return helper(iter(data.split(',')))"},{"question":"Write a function to check if a given number is divisible by 3 or 5 without using the modulus operator in Python.","solution":"def is_divisible_by_3_or_5(n): Returns True if a given number is divisible by 3 or 5 without using the modulus operator. Otherwise, returns False. # Check divisibility by 3 if str(3 * (n // 3)) == str(n): return True # Check divisibility by 5 if str(5 * (n // 5)) == str(n): return True return False"},{"question":"Write a function to perform horizontal scrolling based on user input.","solution":"def horizontal_scroll(current_position, direction, step_size, max_position): Performs horizontal scrolling based on user input. Args: - current_position (int): The current position of the scroll. - direction (str): The direction of the scroll, either 'left' or 'right'. - step_size (int): The size of the step to move. - max_position (int): The maximum position (right bound). Returns: - int: New position after scrolling. if direction == 'right': new_position = min(current_position + step_size, max_position) elif direction == 'left': new_position = max(current_position - step_size, 0) else: raise ValueError(\\"Direction must be either 'left' or 'right'.\\") return new_position"},{"question":"Write a function to determine if a string is a palindrome is a palindrome is a word, phrase, number, or other sequences of characters which reads the same forward and backward (ignoring spaces, punctuation, and capitalization).","solution":"def is_palindrome(s): Determine if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(c.lower() for c in s if c.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to determine if a word is a palindrome. A palindrome is a word that reads the same backward as forward. For example, \\"madam\\" is a palindrome.","solution":"def is_palindrome(word): Returns True if the given word is a palindrome, False otherwise. :param word: str, the word to check :return: bool, True if word is a palindrome, False otherwise return word == word[::-1]"},{"question":"Write a function to find the maximum and minimum numbers in an array of integers using Python.","solution":"def find_max_min(numbers): Returns a tuple (max, min) where max is the maximum number in the array and min is the minimum number in the array. if not numbers: raise ValueError(\\"The array is empty\\") max_num = numbers[0] min_num = numbers[0] for num in numbers[1:]: if num > max_num: max_num = num if num < min_num: min_num = num return (max_num, min_num)"},{"question":"Write a function to determine if a given string is a valid palindrome. A valid palindrome reads the same backward as forward. The function should ignore spaces, punctuation, and be case-insensitive. For instance, \\"A man, a plan, a canal, Panama\\" should return \`True\`.","solution":"import re def is_palindrome(s): This function checks if the given string is a valid palindrome. It ignores spaces, punctuation, and is case-insensitive. Parameters: s (string): The input string to check. Returns: bool: True if the input string is a palindrome, otherwise False. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if cleaned string is a palindrome return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function to check if a given string is a palindrome. If it is a palindrome, return the reversed string along with a message saying it is a palindrome. If it is not a palindrome, return the string in forward order along with a message saying it is not a palindrome.","solution":"def check_palindrome(s): # Remove any non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is a palindrome if cleaned_s == cleaned_s[::-1]: return (s[::-1], \\"It is a palindrome.\\") else: return (s, \\"It is not a palindrome.\\")"},{"question":"Write a function to reverse a string while preserving the position of any whitespace characters.","solution":"def reverse_string_preserve_whitespace(s): Reverses the string \`s\` while preserving the position of any whitespace characters. # Convert the string to a list to manipulate characters chars = list(s) # Create a list to gather non-space characters in reverse order non_space_chars = [c for c in chars if not c.isspace()] non_space_chars.reverse() # Fill the non-space characters back into their positions result = [] non_space_index = 0 for c in chars: if c.isspace(): result.append(c) else: result.append(non_space_chars[non_space_index]) non_space_index += 1 return ''.join(result)"},{"question":"Write a function to find the total number of paths in a binary tree where the sum of the node values along the path equals a given target value. The function should be efficient and work for both small and large trees, considering time and space complexity. Ensure that your solution handles all edge cases, including trees with negative values and empty trees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathSum(root, targetSum): Returns the total number of paths in the binary tree where the sum of the node values along the path equals targetSum. def dfs(node, current_sum): if not node: return 0 current_sum += node.val path_count = prefix_sums.get(current_sum - targetSum, 0) prefix_sums[current_sum] = prefix_sums.get(current_sum, 0) + 1 path_count += dfs(node.left, current_sum) path_count += dfs(node.right, current_sum) prefix_sums[current_sum] -= 1 return path_count prefix_sums = {0: 1} return dfs(root, 0)"},{"question":"Write a function to find the one that appears only once in a list, while all other elements appear exactly twice.","solution":"def find_unique(arr): Finds the element that appears only once in the list where all other elements appear twice. Args: arr: List of integers Returns: The integer that appears only once. result = 0 for num in arr: result ^= num return result"},{"question":"Write a function to find the maximum sum of a subarray within a given 2D array. The subarray can be any continuous subsequence in the 2D array, moving left to right, right to left, top to bottom, or bottom to top. The function should return the maximum sum.","solution":"def max_subarray_sum_2d(arr): def kadane(arr): max_current = max_global = arr[0] for elem in arr[1:]: max_current = max(elem, max_current + elem) if max_current > max_global: max_global = max_current return max_global if not arr or not arr[0]: return 0 max_sum = float('-inf') rows, cols = len(arr), len(arr[0]) for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += arr[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a function to check if a given string contains at least one uppercase letter, one lowercase letter, one digit, and one special character. In addition, the string should not contain any spaces. Furthermore, the length of the string should be between 8 and 16 characters.","solution":"import re def validate_string(s): Returns True if the string contains at least one uppercase letter, one lowercase letter, one digit, and one special character. Additionally, the string should not contain any spaces and its length should be between 8 and 16 characters. if len(s) < 8 or len(s) > 16: return False if ' ' in s: return False if not re.search(r'[A-Z]', s): return False if not re.search(r'[a-z]', s): return False if not re.search(r'd', s): return False if not re.search(r'[!@#%^&*(),.?\\":{}|<>]', s): return False return True"},{"question":"Write a function to recursively convert any JSON object into a sorted string, where all keys are sorted alphabetically. The output string should represent the sorted JSON object in a JSON string format.","solution":"import json def sort_json(obj): Recursively sorts a JSON object by its keys and returns it as a JSON string. if isinstance(obj, dict): sorted_obj = {k: sort_json(v) for k, v in sorted(obj.items())} elif isinstance(obj, list): sorted_obj = [sort_json(elem) for elem in obj] else: return obj return sorted_obj def json_to_sorted_string(json_obj): Converts a JSON object into a sorted string with keys sorted alphabetically. sorted_json = sort_json(json_obj) return json.dumps(sorted_json, indent=2)"},{"question":"Write a function to generate a binary tree from a given preorder traversal. The function should take a list of integers representing the preorder traversal and return the root of the binary tree. If the input list is empty, the function should return \`null\`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_from_preorder(preorder): Generate a binary search tree (BST) from the given preorder traversal list. Parameters: preorder (list of int): Preorder traversal list of the BST. Returns: TreeNode: The root node of the constructed BST. if not preorder: return None def helper(lower=float('-inf'), upper=float('inf')): nonlocal idx if idx == len(preorder): return None val = preorder[idx] if val < lower or val > upper: return None idx += 1 root = TreeNode(val) root.left = helper(lower, val) root.right = helper(val, upper) return root idx = 0 return helper()"},{"question":"Write a function to sort an array of integers in descending order using the shell sort algorithm.","solution":"def shell_sort(arr): Sorts an array of integers in descending order using the shell sort algorithm. n = len(arr) gap = n // 2 while gap > 0: for i in range(gap, n): temp = arr[i] j = i while j >= gap and arr[j - gap] < temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp gap //= 2 return arr"},{"question":"Write a function to find the largest of three numbers. The function should take three integer arguments and return the largest of them.","solution":"def find_largest(a, b, c): Returns the largest of three numbers a, b, and c. return max(a, b, c)"},{"question":"Write a function to find the maximum path sum in a binary tree. The path may start and end at any node in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): Find the maximum path sum in a binary tree. The path may start and end at any node in the tree. def helper(node): nonlocal max_sum if not node: return 0 left = max(helper(node.left), 0) # Only consider positive contributions right = max(helper(node.right), 0) # Only consider positive contributions # Current path sum including the current node current_path_sum = node.val + left + right # Update the overall maximum sum max_sum = max(max_sum, current_path_sum) # Return the maximum sum of the path that may continue to parent node return node.val + max(left, right) max_sum = float('-inf') helper(root) return max_sum"},{"question":"Write a function to generate a Fibonacci sequence up to a given limit. The sequence should include both the number and its index in the sequence. The function should return a list of tuples, where each tuple contains the index and the Fibonacci number at that index.","solution":"def fibonacci_sequence(limit): Generates a Fibonacci sequence up to a given limit. The sequence includes both the number and its index in the sequence. Args: limit (int): The upper limit for the Fibonacci sequence generation. Returns: list: A list of tuples where each tuple contains the index and the Fibonacci number at that index. if limit < 0: return [] sequence = [] a, b = 0, 1 index = 0 while a <= limit: sequence.append((index, a)) a, b = b, a + b index += 1 return sequence"},{"question":"Write a function to calculate the square root of a given number using the Newton-Raphson method. The function should handle both perfect squares and non-perfect squares. For non-perfect squares, the function should return an approximation up to 5 decimal places.","solution":"def sqrt_newton_raphson(x, tolerance=1e-6): Calculate the square root of a given number using the Newton-Raphson method. Parameters: x (float): The number to find the square root of. tolerance (float): The tolerance level for approximating the result. Returns: float: The square root of the number up to 5 decimal places. if x < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") if x == 0: return 0.0 guess = x while True: new_guess = 0.5 * (guess + x / guess) if abs(guess - new_guess) < tolerance: break guess = new_guess return round(guess, 5)"},{"question":"Write a function to reverse the characters of each word in a string, but keep the words in their original order. For example, given the string \\"Hello World\\", your function should return \\"olleH dlroW\\".","solution":"def reverse_each_word(s): Reverse the characters of each word in a string, but keep the words in their original order. :param s: The input string :return: A string with each word's characters reversed words = s.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the product of all elements in an array.","solution":"def product_of_array(arr): Returns the product of all elements in the array. product = 1 for num in arr: product *= num return product"},{"question":"Write a function to traverse a binary tree in pre-order. Traversal means visiting each node before visiting its subtrees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def preorder_traversal(root): Traverses a binary tree in pre-order and returns a list of node values. Pre-order traversal: Visit the root node first, followed by the left subtree and then the right subtree. :param root: TreeNode or None :return: List[int] if root is None: return [] result = [] stack = [root] while stack: node = stack.pop() result.append(node.val) if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Write a function to retrieve peak elements in an array. A peak element is defined as an element that is not smaller than its neighbors. For array elements at the ends, we need to consider only one neighbor. You can traverse the array only once and return all peak elements.","solution":"def find_peak_elements(arr): Returns a list of peak elements in the array. A peak element is one that is not smaller than its neighbors. n = len(arr) if n == 0: return [] peaks = [] for i in range(n): # Check if the current element is a peak if (i == 0 or arr[i] >= arr[i - 1]) and (i == n - 1 or arr[i] >= arr[i + 1]): peaks.append(arr[i]) return peaks"},{"question":"Write a function to find the maximum sum of a contiguous sub-array within a one-dimensional array of integers. The function should perform this in O(n) time complexity.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous sub-array within a one-dimensional array of integers. Implements Kadane's algorithm which runs in O(n) time complexity. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to generate all the possible binary strings of a given length. How can you solve this problem programmatically in Python?","solution":"def generate_binary_strings(n): Returns a list of all possible binary strings of length n. :param n: Length of the binary strings :type n: int :return: List of binary strings of length n :rtype: List[str] if n == 0: return [\\"\\"] else: smaller = generate_binary_strings(n - 1) return [\\"0\\" + s for s in smaller] + [\\"1\\" + s for s in smaller]"},{"question":"Write a function to sort an array of strings based on the frequency of each string. Use Python","solution":"from collections import Counter def sort_by_frequency(strings): Sort an array of strings based on the frequency of each string. Args: strings (list of str): List of strings to be sorted. Returns: list of str: List of strings sorted by frequency and then lexicographically. # Count the frequency of each string frequency = Counter(strings) # Sort by frequency first (-frequency to sort in descending order) # and then lexicographically for strings with the same frequency sorted_strings = sorted(strings, key=lambda x: (-frequency[x], x)) return sorted_strings"},{"question":"Write a function to find the maximum sum of the stock prices for a day from an array of integers representing the stock prices for each minute during a trading day. The function should return the maximum sum of prices that can be obtained.","solution":"def max_stock_price_sum(prices): Returns the maximum sum of stock prices for the day from an array of stock prices per minute. max_sum = 0 current_sum = 0 for price in prices: current_sum += price if current_sum < 0: current_sum = 0 if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function to find the largest number in a given list of integers. The function should be named \`find_largest_number\`. It should take a single parameter, which is a list of integers, and return the largest number in that list.","solution":"def find_largest_number(numbers): Returns the largest number in a given list of integers. :param numbers: List of integers :return: The largest integer in the list if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Write a function to crack a Caesar cipher. Explain the steps involved and provide code in Python.","solution":"def caesar_shift(text, shift): Shifts text by the given amount in the Caesar cipher manner. result = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') result.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: result.append(char) return ''.join(result) def crack_caesar_cipher(cipher_text): probable_plaintexts = [] for shift in range(1, 26): decrypted_text = caesar_shift(cipher_text, -shift) probable_plaintexts.append((shift, decrypted_text)) return probable_plaintexts"},{"question":"Write a function to find the number of times each integer from 0 to 9 appears in a given string.","solution":"def digit_frequency(s): Returns a dictionary with the frequency of each digit from 0 to 9 in the given string s. digit_count = {str(i): 0 for i in range(10)} for char in s: if char in digit_count: digit_count[char] += 1 return digit_count"},{"question":"Write a function to generate the nth Fibonacci number in Python. The function should be named \`fibonacci(n)\`, where \`n\` is the position in the Fibonacci sequence (starting from 0). Ensure that your function uses the most efficient algorithm possible. The time complexity should be linear.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to reverse the order of words in a C-style string, such that the last word becomes the first, the second last becomes second, and so on. Assume that the C-style string is null-terminated and contains only letters and spaces. The function should not use any standard library functions and should handle special cases like multiple spaces and leading/trailing spaces.","solution":"def reverse_words_in_c_string(c_string): Reverses the order of words in a C-style string. Parameters: c_string (str): input C-style string (null-terminated). Returns: str: the C-style string with words in reversed order (null-terminated). # Removing the null terminator if c_string.endswith('0'): c_string = c_string[:-1] # Splitting the words by spaces words = [] word = [] for char in c_string: if char == ' ': if word: words.append(''.join(word)) word = [] else: word.append(char) # Append last word if word: words.append(''.join(word)) # Reversing the list of words reversed_words = ' '.join(reversed(words)) # Adding the null terminator back reversed_c_string = reversed_words + '0' return reversed_c_string"},{"question":"Write a function to find the odd number in an array of integers using Python.","solution":"def find_odd_number(arr): This function returns the first odd number found in the given array. If no odd number is found, it returns None. for num in arr: if num % 2 != 0: return num return None"},{"question":"Write a function to print all the multiples of a given number N within a range of two numbers M and K.","solution":"def multiples_in_range(N, M, K): Returns a list of all multiples of N within the range M to K (inclusive). Parameters: N (int): The number for which multiples need to be found. M (int): The lower bound of the range (inclusive). K (int): The upper bound of the range (inclusive). Returns: list: A list containing the multiples of N within the given range. if N == 0: return [] # No multiples exist for 0. if M > K: return [] # Invalid range. # Finding the first multiple of N greater than or equal to M start = (M + N - 1) // N * N # Collecting all multiples of N within the range multiples = [i for i in range(start, K + 1, N) if i >= M] return multiples"},{"question":"Write a function to return the nth Fibonacci number using dynamic programming. **Function Signature**: \`int nthFibonacci(int n)\` **Example**: Input: 7, Output: 13. Explanation: The sequence of Fibonacci starts as 0, 1, 1, 2, 3, 5, 8, 13.","solution":"def nthFibonacci(n): Returns the nth Fibonacci number using dynamic programming. Parameters: n (int): The position of the Fibonacci number to return. Returns: int: The nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 # Create an array to store the Fibonacci sequence up to n fib = [0] * (n+1) fib[0] = 0 fib[1] = 1 # Fill in the array with the Fibonacci sequence for i in range(2, n+1): fib[i] = fib[i-1] + fib[i-2] return fib[n]"},{"question":"Write a function to generate an array of Fibonacci numbers up to n.","solution":"def generate_fibonacci(n): Generates an array of Fibonacci numbers up to n (inclusive). if n < 0: return [] fibonacci_sequence = [0, 1] while True: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] if next_value > n: break fibonacci_sequence.append(next_value) return fibonacci_sequence[:2] if n == 0 else fibonacci_sequence"},{"question":"Write a function to filter out all the numbers in a given list that are less than a specified threshold.","solution":"def filter_numbers(numbers, threshold): Filters out all numbers in the given list that are less than the specified threshold. Parameters: numbers (list of int/float): The list of numbers to filter. threshold (int/float): The threshold above which numbers are to be included in the result. Returns: list of int/float: A list of numbers that are greater than or equal to the threshold. return [num for num in numbers if num >= threshold]"},{"question":"Write a function to find the minimum window substring which contains all the characters of another string in Python.","solution":"from collections import Counter, defaultdict def min_window(s: str, t: str) -> str: Returns the minimum window substring of \`s\` that contains all the characters of the string \`t\`. If no such substring exists, returns an empty string. if not t or not s: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) min_len = float(\\"inf\\") min_window = (None, None) while r < len(s): window_counts[s[r]] += 1 if s[r] in dict_t and window_counts[s[r]] == dict_t[s[r]]: formed += 1 while l <= r and formed == required: if r - l + 1 < min_len: min_len = r - l + 1 min_window = (l, r) window_counts[s[l]] -= 1 if s[l] in dict_t and window_counts[s[l]] < dict_t[s[l]]: formed -= 1 l += 1 r += 1 l, r = min_window return s[l:r+1] if min_len != float(\\"inf\\") else \\"\\""},{"question":"Write a function to find the maximum difference between the sum of two subsets of an array.","solution":"def max_diff_between_subsets(arr): Returns the maximum difference between the sum of two subsets of the array. total_sum = sum(arr) n = len(arr) # To achieve the maximum difference, we can use complete array as one subset # and empty set as the second subset. return total_sum # Maximum difference will be total_sum itself"},{"question":"Write a function to determine if a given number can be represented as the sum of consecutive positive integers. If it can, return the sequence of integers; otherwise return an empty list.","solution":"def find_consecutive_sum(n): Determines if a given number n can be represented as the sum of consecutive positive integers. If it can, this function returns the sequence of integers; otherwise it returns an empty list. if n <= 0: return [] for start in range(1, n): sum_ = 0 consecutive_numbers = [] for i in range(start, n): sum_ += i consecutive_numbers.append(i) if sum_ == n: return consecutive_numbers if sum_ > n: break return []"},{"question":"Write a function to multiply two matrices. Is my implementation correct?","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Parameters: A (list of list of int/float): The first matrix. B (list of list of int/float): The second matrix. Returns: list of list of int/float: The resulting matrix after multiplication. # Number of rows in A rows_A = len(A) # Number of columns in A and rows in B common_dim = len(A[0]) # Number of columns in B cols_B = len(B[0]) # Initialize the result matrix with zeros C = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(common_dim): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Write a function to remove duplicate characters from a string while maintaining the original order of the characters.","solution":"def remove_duplicates(input_string): Removes duplicate characters from input_string while maintaining the original order. :param input_string: The string from which to remove duplicate characters. :return: A new string with duplicate characters removed. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to find the position of the first unique character in a given string. If no unique character is found, return -1.","solution":"def first_unique_char(s): Returns the position of the first unique character in a given string. If no unique character is found, returns -1. char_count = {} # Count the frequency of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first unique character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a function to calculate the sum of all even numbers in a given array using Python. The function should handle both positive and negative integers and ignore non-integer values.","solution":"def sum_even_numbers(arr): Returns the sum of all even numbers in the given array. It handles both positive and negative integers and ignores non-integer values. return sum(num for num in arr if isinstance(num, int) and num % 2 == 0)"},{"question":"Write a function to check if a linked list is palindrome. The given function has some syntax errors. Please correct them and provide the correct function. Do not use any other library functions, except the basic library functions for the language you are using.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Checks if a linked list is a palindrome. :param head: The head node of the linked list. :return: True if the linked list is a palindrome, False otherwise. fast = slow = head prev = None # Reverse the first half while finding the middle while fast and fast.next: fast = fast.next.next next_slow = slow.next slow.next = prev prev = slow slow = next_slow # If the number of elements is odd, skip the middle element if fast: slow = slow.next # Compare the reversed first half with the second half while prev and slow: if prev.val != slow.val: return False prev = prev.next slow = slow.next return True"},{"question":"Write a function to print the sum of all even numbers in an array.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function to print a binary number using recursion without using any loops or global variables.","solution":"def print_binary(n): Prints binary representation of the given integer number using recursion. if n > 1: print_binary(n // 2) print(n % 2, end='') # Example usage: # print_binary(10) would print \\"1010\\""},{"question":"Write a function to output all prime numbers less than n using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n, i): is_prime[j] = False return [i for i in range(n) if is_prime[i]]"},{"question":"Write a function to rearrange a 1D array elements so that all non-zero elements are moved to the right side of the array and all zeros are moved to the left side, preserving their relative order.","solution":"def rearrange_array(arr): Rearranges the array so that all non-zero elements are moved to the right side of the array and all zeros are moved to the left side, preserving their relative order. Parameters ---------- arr : list of int The input list of integers. Returns ------- list of int The rearranged list of integers. zeros = [x for x in arr if x == 0] non_zeros = [x for x in arr if x != 0] return zeros + non_zeros"},{"question":"Write a function to swap the values of two integer variables.","solution":"def swap(a, b): Swaps the values of the two integer variables a and b. return b, a"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should be able to handle large numbers, and it should return the result as a \`BigInteger\`.","solution":"def factorial(n): Returns the factorial of a number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to print the leftmost level or layer of a Binary Search Tree (BST).","solution":"class TreeNode: TreeNode represents a node in a binary tree. def __init__(self, key): self.left = None self.right = None self.val = key def leftmost_layer(root): Returns a list of the leftmost nodes at each level of the binary tree. if not root: return [] leftmost_nodes = [] current_level_nodes = [root] while current_level_nodes: # Add the first node of the current level to the leftmost nodes list leftmost_nodes.append(current_level_nodes[0].val) next_level_nodes = [] for node in current_level_nodes: if node.left: next_level_nodes.append(node.left) if node.right: next_level_nodes.append(node.right) current_level_nodes = next_level_nodes return leftmost_nodes"},{"question":"Write a function to find the sum of all the multiples of 3 or 5 below a certain number, \`n\`. For example, for \`n = 10\`, the multiples of 3 or 5 below this number are 3, 5, 6, and 9. The sum of these multiples is 23. Your function should return this sum for any given \`n\`.","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 below the number n. total_sum = 0 for i in range(1, n): if i % 3 == 0 or i % 5 == 0: total_sum += i return total_sum"},{"question":"Write a function to find the sum of all odd numbers in a given list. If the list is empty, return 0.","solution":"def sum_of_odds(numbers): Returns the sum of all odd numbers in the given list. If the list is empty, returns 0. return sum(number for number in numbers if number % 2 != 0)"},{"question":"Write a function to determine if a given string is \\"balanced\\". A string is balanced if every type of parenthesis is closed and opened in the correct order.","solution":"def is_balanced(s): Determines if a given string is balanced with respect to parenthesis. Args: s (str): The input string containing parenthesis. Returns: bool: True if the string is balanced, False otherwise. stack = [] matching_parenthesis = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parenthesis.values(): stack.append(char) elif char in matching_parenthesis.keys(): if stack == [] or matching_parenthesis[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Write a function to identify the first missing integer in a sequence of consecutive integers starting from 1. The integers might not be sorted and may contain duplicates.","solution":"def find_first_missing_integer(nums): Returns the first missing integer in a sequence of consecutive integers starting from 1. if not nums: return 1 nums = set(nums) # Remove duplicates # Start checking from 1 i = 1 while i in nums: i += 1 return i"},{"question":"Write a function to create a new file and write data to it. In Python, how can you accomplish this using the \`open()\` function and the \`write()\` method?","solution":"def write_to_file(filename, data): Creates a new file and writes data to it. Parameters: filename (str): The name of the file to be created. data (str): The data to write to the file. with open(filename, 'w') as file: file.write(data)"},{"question":"Write a function to find the second largest unique number in an array of integers. If the array does not have at least two unique numbers, the function should return \`None\`.","solution":"def second_largest_unique(nums): Returns the second largest unique number in the list of integers. If there are not at least two unique numbers, returns None. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort() return unique_nums[-2]"},{"question":"Write a function to find a local minimum in a two-dimensional array. A local minimum is defined as an element which is smaller than or equal to any directly adjacent elements and is not on the border of the array.","solution":"def find_local_minimum(matrix): Finds a local minimum in a two-dimensional array. A local minimum is defined as an element which is smaller than or equal to any directly adjacent elements and is not on the border of the array. if not matrix or not matrix[0]: return None rows = len(matrix) cols = len(matrix[0]) for i in range(1, rows-1): for j in range(1, cols-1): if (matrix[i][j] <= matrix[i-1][j] and matrix[i][j] <= matrix[i+1][j] and matrix[i][j] <= matrix[i][j-1] and matrix[i][j] <= matrix[i][j+1]): return (i, j, matrix[i][j]) return None"},{"question":"Write a function to convert a string into a hashmap with each unique character as a key and its frequency as a value.","solution":"def string_to_hashmap(s): Converts a string into a hashmap with each unique character as a key and its frequency as a value. Parameters: s (str): Input string Returns: dict: A dictionary with characters as keys and their frequencies as values. hashmap = {} for char in s: if char in hashmap: hashmap[char] += 1 else: hashmap[char] = 1 return hashmap"},{"question":"Write a function to check if two characters are the same.","solution":"def are_chars_same(char1, char2): Returns True if the two characters are the same, otherwise False. return char1 == char2"},{"question":"Write a function to identify and return the first repeated element in a list. If there are no repeated elements, return -1.","solution":"def first_repeated_element(arr): Returns the first repeated element in a list. If there are no repeated elements, returns -1. seen = set() for element in arr: if element in seen: return element seen.add(element) return -1"},{"question":"Write a function to convert a given string to a string of binary digits.","solution":"def string_to_binary(input_string): Converts the given string to a string of binary digits. Each character in the input string is represented by its ASCII value in binary form. The binary representation of each character will be 8 bits long. binary_string = ' '.join(format(ord(char), '08b') for char in input_string) return binary_string"},{"question":"Write a function to detect and remove the duplicate elements from a list of integers. How would you ensure the relative order of the elements is maintained after removing duplicates?","solution":"def remove_duplicates(nums): Removes duplicate elements from a list of integers while maintaining the relative order. Args: nums: list of integers Returns: list: a list with duplicates removed seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function to calculate the area of a circle given its radius. If the radius is less than or equal to zero, the function should return a message indicating that the radius is not valid. The function should have a time complexity of O(1) and space complexity of O(1).","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given the radius. If the radius is less than or equal to zero, returns an error message. if radius <= 0: return \\"The radius is not valid.\\" return math.pi * radius ** 2"},{"question":"Write a function to return the intersection of two arrays. The function should return the intersection, including duplicates, in the same order as they appear in the first array. For example, if the input is [1,2,2,2,3] and [2,2,3,4], the output should be [2,2,3].","solution":"def intersection(arr1, arr2): Returns the intersection of the two arrays including duplicates, in the same order as they appear in the first array. counter = {} for num in arr2: if num in counter: counter[num] += 1 else: counter[num] = 1 result = [] for num in arr1: if num in counter and counter[num] > 0: result.append(num) counter[num] -= 1 return result"},{"question":"Write a function to find the intersection of two sorted arrays.","solution":"def intersection_of_sorted_arrays(arr1, arr2): Finds the intersection of two sorted arrays. Parameters: arr1 (list): A sorted list of integers. arr2 (list): Another sorted list of integers. Returns: list: The intersection of the two arrays as a sorted list. result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if not result or result[-1] != arr1[i]: # to avoid duplicates in result result.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return result"},{"question":"Write a function to count the number of sentences within a given text. In this question, a sentence is defined as a sequence of words that ends with a period (.), exclamation mark (!), or question mark (?). The function should ignore leading and trailing whitespaces and consider multiple spaces between words as a single word. The function should handle empty strings as well.","solution":"import re def count_sentences(text): Returns the count of sentences in the provided text. A sentence is defined as a sequence of words that ends with a period (.), exclamation mark (!), or question mark (?). # Remove leading and trailing whitespaces text = text.strip() if not text: return 0 # Use regex to split by '.', '!', or '?', also accounting multiple spaces as one. sentences = re.split(r'[.!?]+s*', text) # Remove empty strings from the list sentences = [sentence for sentence in sentences if sentence] return len(sentences)"},{"question":"Write a function to delete a node from a singly linked list given only access to that node. You may not access the head or any other node except the node to be deleted. How would you do it?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_node(node): Deletes the given node (except the tail) from a singly linked list. You are given access only to that node. if node is None or node.next is None: raise ValueError(\\"Cannot delete this node.\\") node.val = node.next.val node.next = node.next.next"},{"question":"Write a function to calculate the maximum possible sum of elements in a subarray such that no two elements in the subarray are adjacent. Given an array of non-negative integers, this function should return the maximum sum. For example, if the array is [1, 2, 3, 4], the function should return 4+1=5 as we take elements [3, 1]. If the array is [3, 2, 7, 10], the function should return 10, as we take the element [10].","solution":"def max_non_adjacent_sum(nums): Calculate the maximum possible sum of elements in a subarray such that no two elements in the subarray are adjacent. Parameters: nums (list): A list of non-negative integers. Returns: int: The maximum sum of non-adjacent elements. if not nums: return 0 if len(nums) == 1: return nums[0] prev_prev = 0 prev = nums[0] for i in range(1, len(nums)): current = max(prev, prev_prev + nums[i]) prev_prev = prev prev = current return prev"},{"question":"Write a function to calculate the MST (Minimum Spanning Tree) using Prim's algorithm with the given graph.","solution":"import heapq def prims_algorithm(graph, start): Returns the Minimum Spanning Tree (MST) and its total weight using Prim's algorithm. Parameters: graph (dict): A dictionary where keys are nodes, and values are lists of tuples with adjacent nodes and weights. start: The starting node for the algorithm. Returns: tuple: A tuple containing the MST as a list of edges and the total weight of the MST. mst = [] total_weight = 0 visited = set() min_heap = [(0, start, None)] # (weight, current_node, from_node) while min_heap and len(visited) < len(graph): weight, current_node, from_node = heapq.heappop(min_heap) if current_node not in visited: visited.add(current_node) if from_node is not None: mst.append((from_node, current_node, weight)) total_weight += weight for neighbor, edge_weight in graph[current_node]: if neighbor not in visited: heapq.heappush(min_heap, (edge_weight, neighbor, current_node)) return mst, total_weight"},{"question":"Write a function to calculate the maximum profit you can achieve from selling and buying a stock multiple times. You are only allowed to complete at most two transactions (buy one and sell one, then buy one and sell one). The function should take a list of stock prices and return the maximum profit possible.","solution":"def maxProfit(prices): Calculate the maximum profit from at most two transactions. :param prices: List of stock prices :return: Maximum possible profit with at most two transactions if not prices: return 0 # Initialize the variables to store the maximum profit at each transaction first_buy = float('-inf') first_sell = 0 second_buy = float('-inf') second_sell = 0 for price in prices: first_buy = max(first_buy, -price) # Max profit after buying the first stock first_sell = max(first_sell, first_buy + price) # Max profit after selling the first stock second_buy = max(second_buy, first_sell - price) # Max profit after buying the second stock second_sell = max(second_sell, second_buy + price) # Max profit after selling the second stock return second_sell"},{"question":"Write a function to rotate a 2D matrix clockwise by 90 degrees.","solution":"def rotate_matrix(matrix): Rotates the given 2D matrix by 90 degrees clockwise. return [list(row) for row in zip(*matrix[::-1])]"},{"question":"Write a function to generate a unique identifier using the underlying API (Assume it is available and returns a UUID with no duplicates within a short time frame). To ensure the uniqueness of the generator, ensure that it does not generate the same UUID more than once even after multiple requests.","solution":"import uuid # A set to keep track of generated UUIDs generated_uuids = set() def generate_unique_identifier(): Generates a unique identifier (UUID) and ensures it is not duplicated. while True: new_uuid = uuid.uuid4() if new_uuid not in generated_uuids: generated_uuids.add(new_uuid) return new_uuid"},{"question":"Write a function to swap two numbers without using a temporary variable. You should minimize the number of operations used. The function should have a time complexity of O(1) and should work for any pair of integers.","solution":"def swap(a, b): Swaps two integers without using a temporary variable. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a function to merge two sorted arrays without using extra space. The function should modify the first array in-place and should have a time complexity of O(m + n), where m and n are the lengths of the two arrays.","solution":"def merge_sorted_arrays(nums1, m, nums2, n): Merges two sorted arrays nums1 and nums2 into nums1 as one sorted array. The first m elements denote the initial elements of nums1, and the first n elements denote the elements of nums2. This function modifies nums1 in place. # Index for nums1 (end of the effective part) last1 = m - 1 # Index for nums2 last2 = n - 1 # Index for the last position of nums1 last = m + n - 1 # Merge in reverse order while last1 >= 0 and last2 >= 0: if nums1[last1] > nums2[last2]: nums1[last] = nums1[last1] last1 -= 1 else: nums1[last] = nums2[last2] last2 -= 1 last -= 1 # Fill nums1 with remaining elements of nums2 if any while last2 >= 0: nums1[last] = nums2[last2] last -= 1 last2 -= 1 # No need to fill nums1 with remaining elements of nums1 because they are already in place"},{"question":"Write a function to find the number of distinct pairs in a list.","solution":"def count_distinct_pairs(lst): Returns the number of distinct pairs (i, j) such that lst[i] != lst[j]. unique_elements = set(lst) n = len(unique_elements) return n * (n - 1) // 2"},{"question":"Write a function to convert an integer to its binary representation. The function should return the binary representation as a string.","solution":"def integer_to_binary(n): Converts an integer to its binary representation as a string. Parameters: n (int): The integer to be converted. Returns: str: The binary representation of the integer. if n == 0: return \\"0\\" else: return bin(n)[2:]"},{"question":"Write a function to search for a given element \`x\` in an array \`arr\`. The function should return \`true\` if the element is found, and \`false\` otherwise.","solution":"def search_element(arr, x): Searches for the element x in the array arr. Returns True if x is found, otherwise False. return x in arr"},{"question":"Write a function to convert a string to a date in Python.","solution":"from datetime import datetime def convert_string_to_date(date_string, date_format='%Y-%m-%d'): Converts a string to a date object. Args: date_string (str): The string representation of the date. date_format (str): The format in which the date is represented in the string. Returns: datetime.date: The date object corresponding to the given string. return datetime.strptime(date_string, date_format).date()"},{"question":"Write a function to access the nth element of a list in a Python program. If the nth element does not exist, return \`None\`.","solution":"def access_nth_element(lst, n): Returns the nth element of lst. If n is out of bounds, return None. Args: lst (list): The list from which to access the element. n (int): The index of the element to access. Returns: element: The element at the nth position if it exists, otherwise None. if n < 0 or n >= len(lst): return None return lst[n]"},{"question":"Write a function to return the reversed version of a given string in Python.","solution":"def reverse_string(s): Returns the reversed version of the given string s. return s[::-1]"},{"question":"Write a function to count the frequency of elements in a list of integers.","solution":"from collections import Counter def count_frequency(lst): Returns a dictionary with the frequency count of each element in the list. Parameters: lst (list): A list of integers. Returns: dict: A dictionary where keys are elements from the list and values are their frequencies. return dict(Counter(lst))"},{"question":"Write a function to find the leftmost non-repeating character in a string. The function should return the index of the first non-repeating character if it exists; otherwise, it should return -1. If the input string is null or empty, the function should return -1.","solution":"def leftmost_non_repeating_char(s): Finds the index of the leftmost non-repeating character in a string. Parameters: s (str): The input string Returns: int: The index of the first non-repeating character, or -1 if no such character exists or if the input string is null or empty. if not s: return -1 char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the index of the leftmost non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a function to remove the nth node from the end of a linked list. The function should take two arguments: the head of the linked list and the integer n representing the nth node from the end to remove. The function should return the head of the modified linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head, n): Remove the nth node from the end of a linked list and return the head of the list. dummy = ListNode(0) dummy.next = head first = dummy second = dummy for _ in range(n + 1): first = first.next while first is not None: first = first.next second = second.next second.next = second.next.next return dummy.next"},{"question":"Write a function to return the largest integer in a given list of integers using Python.","solution":"def largest_integer(arr): Returns the largest integer in a given list of integers. Parameters: arr (list): A list of integers. Returns: int: The largest integer in the list. if not arr: raise ValueError(\\"The list cannot be empty\\") largest = arr[0] for num in arr[1:]: if num > largest: largest = num return largest"},{"question":"Write a function to generate all unique letter combinations of a given length using a given list of letters. The function should return all possible combinations.","solution":"from itertools import combinations def unique_letter_combinations(letters, length): Generate all unique letter combinations of a given length using a given list of letters. Parameters: letters (list of str): List of letters to generate combinations from. length (int): Length of each combination. Returns: list of tuple: All possible unique letter combinations of the specified length. return list(combinations(letters, length))"},{"question":"Write a function to check if the two binary trees are identical or not.","solution":"class TreeNode: A class used to represent a node in a binary tree. Attributes: ----------- val : int The value of the node. left : TreeNode, optional The left child of the node (default is None). right : TreeNode, optional The right child of the node (default is None). def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_identical(root1, root2): Checks if two binary trees are identical. Parameters: ----------- root1 : TreeNode The root node of the first binary tree. root2 : TreeNode The root node of the second binary tree. Returns: -------- bool True if the binary trees are identical, otherwise False. if root1 is None and root2 is None: return True if root1 is not None and root2 is not None: return (root1.val == root2.val and is_identical(root1.left, root2.left) and is_identical(root1.right, root2.right)) return False"},{"question":"Write a function to solve the \\"Maximum Subarray\\" problem in Python. The problem statement is as follows: Given an integer array \`nums\`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.","solution":"def max_subarray(nums): Finds the contiguous subarray with the largest sum and returns its sum. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the edit distance between two strings.","solution":"def edit_distance(s1, s2): Calculate the edit distance between two strings s1 and s2, which is the minimum number of operations (insertions, deletions, substitutions) required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are the same, ignore them else: dp[i][j] = 1 + min(dp[i-1][j], # Delete dp[i][j-1], # Insert dp[i-1][j-1]) # Substitute return dp[m][n]"},{"question":"Write a function to sort the given array.","solution":"def sort_array(arr): Returns a sorted list from the given array. return sorted(arr)"},{"question":"Write a function to determine the minimum number of rotations a circular array has undergone. The array was originally sorted in ascending order and then rotated at some point. For example, the array [3, 4, 5, 1, 2] was derived from the sorted array [1, 2, 3, 4, 5] by rotating it 3 times. The function should return the number of rotations.","solution":"def find_min_rotations(arr): Returns the minimum number of rotations a circular array has undergone. :param arr: List[int] - the given rotated array :return: int - minimum number of rotations n = len(arr) left, right = 0, n - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[right]: right = mid else: left = mid + 1 return left"},{"question":"Write a function to find the number of triplet combinations from an array of integers where the sum of the triplet is zero.","solution":"def three_sum_zero(nums): Finds the number of triplet combinations from an array of integers where the sum of the triplet is zero. Args: - nums (List[int]): List of integers Returns: - int: Count of zero-sum triplets nums.sort() n = len(nums) count = 0 for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: count += 1 while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return count"},{"question":"Write a function to implement a prefix sum of a 2D array. The prefix sum of a 2D array is calculated as the sum of all elements up to the current row and column in the 2D array. You are required to achieve this efficiently.","solution":"def prefix_sum_2d(matrix): Returns the 2D prefix sum array of the given 2D array. Parameters: matrix (list of list of ints): The input 2D array Returns: list of list of ints: The 2D prefix sum array if not matrix or not matrix[0]: return [] rows = len(matrix) cols = len(matrix[0]) # Initialize the prefix sum matrix with the same dimensions prefix_sum = [[0]*cols for _ in range(rows)] # Fill the prefix sum matrix for r in range(rows): for c in range(cols): top = prefix_sum[r-1][c] if r > 0 else 0 left = prefix_sum[r][c-1] if c > 0 else 0 top_left = prefix_sum[r-1][c-1] if r > 0 and c > 0 else 0 prefix_sum[r][c] = matrix[r][c] + top + left - top_left return prefix_sum"},{"question":"Write a function to check if the input list is descending or not. A descending list is one where each element is less than the one before it. If the list is descending, the function should return True, otherwise False.","solution":"def is_descending(lst): Checks if the input list is descending. Parameters: - lst: List of elements to check. Returns: - Boolean: True if the list is descending, False otherwise. for i in range(len(lst) - 1): if lst[i] <= lst[i + 1]: return False return True"},{"question":"Write a function to find the order of elements in a given array in which elements of the array must be sorted based on their frequency. If two elements have the same frequency, then the element which comes first in the original array should come first.","solution":"from collections import Counter def sort_by_frequency(arr): Sort the elements of the array based on their frequency. If two elements have the same frequency, the element that comes first in the original array should come first. frequency = Counter(arr) return sorted(arr, key=lambda x: (-frequency[x], arr.index(x)))"},{"question":"Write a function to find the missing number in a sorted array of integers. The array is sorted in ascending order, and it contains unique integers from 1 to n, except for one missing integer. The function should return the missing number.","solution":"def find_missing_number(arr): Finds the missing number in a sorted array of unique integers from 1 to n. n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a function to find the intersection of two given linked lists without using any extra space and the time complexity should be O(n + m), where n and m are the lengths of the two linked lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def getIntersectionNode(headA, headB): This function finds the intersection node of two singly linked lists. Returns the node where the intersection starts or None if they do not intersect. if not headA or not headB: return None # Initialize two pointers pointerA = headA pointerB = headB # Traverse both lists # If a pointer reaches the end of a list, reset it to the beginning of the other list while pointerA is not pointerB: pointerA = pointerA.next if pointerA else headB pointerB = pointerB.next if pointerB else headA # Both pointers will be either at the intersection node or at the end (None) return pointerA"},{"question":"Write a function to calculate the sum of the digits of a given non-negative integer. If the sum is greater than 9, repeat the process until a single digit is obtained. This is known as the digital root of a number. For example, the digital root of 123 is 6 because 1 + 2 + 3 = 6.","solution":"def digital_root(num): Calculates the digital root of a given non-negative integer. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. The function should be able to handle large numbers efficiently. To ensure the function can handle large numbers without running into overflow issues or performance bottlenecks, use Python's built-in support for arbitrary-precision integers.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0: return 1 return n * factorial(n-1)"},{"question":"Write a function to convert a string to a number. This number is to be returned as an integer.","solution":"def string_to_number(s): Converts a string to an integer. try: return int(s) except ValueError: raise ValueError(f\\"The provided string '{s}' is not convertible to an integer.\\")"},{"question":"Write a function to design a stack with push(x), pop(), and getMin() operations that all operate in O(1) time complexity. Optionally, you may use only basic operations of a stack (push, pop, top, isEmpty).","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x): self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self): if self.stack: value = self.stack.pop() if value == self.min_stack[-1]: self.min_stack.pop() def getMin(self): if self.min_stack: return self.min_stack[-1] return None"},{"question":"Write a function to take an input string and return the string with the characters in reverse order.","solution":"def reverse_string(s): Returns the input string with characters in reverse order. :param s: Input string :return: Reversed string return s[::-1]"},{"question":"Write a function to count the number of characters in a given string that are alphabetic.","solution":"def count_alphabetic_characters(s): Returns the count of alphabetic characters in the given string s. return sum(1 for char in s if char.isalpha())"},{"question":"Write a function to reverse the order of words in a string. For example, given the string \\"I am a programmer\\", the function should return \\"programmer a am I\\".","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to check if a number is prime. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.","solution":"def is_prime(n): Returns True if n is a prime number, else returns False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a function to generate all possible combinations of a given list of distinct integers. The function should return all possible subsets of the input list.","solution":"def generate_combinations(nums): Generate all possible combinations (subsets) of a given list of distinct integers. :param nums: List of distinct integers :return: List of lists containing all possible subsets result = [] def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"Write a function to find the largest and smallest numbers in a given list.","solution":"def find_largest_and_smallest(numbers): Returns a tuple containing the largest and smallest numbers in the given list. if not numbers: raise ValueError(\\"The list is empty\\") largest = max(numbers) smallest = min(numbers) return (largest, smallest)"},{"question":"Write a function to calculate the factorial of a number \`(n!)\`. Implement it in Python. Every student will receive a reward for their outstanding academic performance based on \`n\` points. How many ways can these rewards be distributed to the students if each student receives at least one point, and no two students receive the same number of points?","solution":"def factorial(n): Calculates the factorial of a given number n. Returns the number of permutations of n distinct items. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Write a function to convert a number from decimal to binary, but the function should return the binary as a string. Additionally, implement error handling for invalid inputs.","solution":"def decimal_to_binary(number): Converts a decimal number to binary. Returns the binary representation as a string. Raises ValueError if the input is not an integer. if not isinstance(number, int): raise ValueError(\\"Input must be an integer.\\") return bin(number)[2:] if number >= 0 else '-' + bin(number)[3:]"},{"question":"Write a function to reverse a linked list. I want it to be implemented in Python, without recursion. By reversing a linked list, I mean changing the direction of the links so that the last node becomes the first node and the first node becomes the last node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the given linked list. Parameters: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to find the maximum value in a given array without using the built-in \`max()\` function. You can use basic programming constructs such as loops and conditionals.","solution":"def find_max(arr): Function to find the maximum value in a given array without using the built-in max() function. Parameters: arr (list): List of numbers. Returns: int/float: The maximum value in the array. None if the array is empty. if not arr: return None max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Write a function to find the height of a binary tree. The function should take the root of the binary tree as input and return the height of the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def height_of_binary_tree(root): Returns the height of the binary tree. if root is None: return 0 return 1 + max(height_of_binary_tree(root.left), height_of_binary_tree(root.right))"},{"question":"Write a function to find the two numbers that appear only once in a given array where all other numbers appear twice. The function should return these two unique numbers in an array. For example, for the array [1, 2, 3, 4, 5, 2, 3], the function should return [1, 4, 5] as these are the numbers that appear only once.","solution":"def find_unique_numbers(arr): This function takes an array where all numbers except two appear twice, and returns the two numbers that appear only once. :param arr: List of integers :return: List of two integers that appear only once in the array from collections import Counter # First, we will count occurrences of each number in the array count = Counter(arr) # Then, we will filter out the numbers that appear exactly once unique_numbers = [num for num, cnt in count.items() if cnt == 1] return unique_numbers"},{"question":"Write a function to reverse a string in Python.沾水","solution":"def reverse_string(s): Returns a string that is the reverse of input string s. return s[::-1]"},{"question":"Write a function to convert a non-negative integer to its equivalent Roman numeral in Python. The function should ensure that the output is a string representing the Roman numeral.","solution":"def int_to_roman(num): Convert a non-negative integer to its equivalent Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to calculate factorials. Factorials are the product of all positive integers less than or equal to a given number. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. Please provide the code in Python.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n. The factorial of n (denoted as n!) is the product of all positive integers <= n. Params: n (int): a non-negative integer Returns: int: factorial of n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to check if a given string can be segmented into a sequence of words that are found in a dictionary?","solution":"def word_break(s, word_dict): Check if a given string can be segmented into a sequence of words that are found in a dictionary. Parameters: s (str): the input string word_dict (set): a set of valid words Returns: bool: True if the string can be segmented, False otherwise n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_dict: dp[i] = True break return dp[-1]"},{"question":"Write a function to convert an integer to a Roman numeral. The function should take an integer as input and return the Roman numeral representation as a string. For example, the integer 4 should return \\"IV\\", and 9 should return \\"IX\\".","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: An integer to be converted to a Roman numeral. :return: A string representing the Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to find the second largest number in an array. If the array has less than 2 unique elements, the function should return -1. How can I implement this in Python?","solution":"def find_second_largest(numbers): Returns the second largest number in an array. If the array has less than 2 unique elements, returns -1. :param numbers: List of integers :return: Second largest integer or -1 if there are less than 2 unique integers if len(set(numbers)) < 2: return -1 first_max = float('-inf') second_max = float('-inf') for num in numbers: if num > first_max: second_max = first_max first_max = num elif first_max > num > second_max: second_max = num return second_max"},{"question":"Write a function to check if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. How would you solve this problem?","solution":"def is_palindrome(s): Checks if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove all non-alphanumeric characters and convert to lowercase filtered_chars = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to find the maximum subarray sum in a given array of integers. Python code solution.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum in a given array of integers. :param arr: List of integers :return: Maximum subarray sum if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the nth Fibonacci number using dynamic programming. DP should be used to store the previously calculated Fibonacci numbers in order to avoid recomputation. This function should be efficient in terms of time and space complexity.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 dp = [0] * (n + 1) dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a function to find the maximum sum of a continuous subarray within a one-dimensional array of numbers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a continuous subarray within a one-dimensional array of numbers. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of a continuous subarray. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to rotate an array of n elements to the right by k steps, where k is non-negative. The function should modify the input array in-place and use only O(1) extra space.","solution":"def rotate(nums, k): Rotates the array nums to the right by k steps. Args: nums (list of int): The array to be rotated. k (int): Number of steps to rotate the array. n = len(nums) k %= n # To handle cases where k >= n, since rotating n times results in the same array. def reverse(start, end): while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1 # Reverse the entire array reverse(0, n - 1) # Reverse the first k elements reverse(0, k - 1) # Reverse the remaining elements reverse(k, n - 1)"},{"question":"Write a function to find and return a character that appears more than once in a string. If there is no such character, the function should return an underscore ('_'). The string is given and the function should operate within O(n) time complexity, where n is the length of the string.","solution":"def first_repeated_char(s): Returns the first character that appears more than once in the string s. If there is no such character, returns '_'. seen = set() for char in s: if char in seen: return char seen.add(char) return '_'"},{"question":"Write a function to find the maximum average of a subarray of a given size k. The function should take a list of integers and the size of the subarray k as input and return the maximum average of any subarray of size k.","solution":"def find_max_average(nums, k): Finds the maximum average of any subarray of size k. Parameters: nums (list of int): List of integers. k (int): Size of the subarray. Returns: float: The maximum average of any subarray of size k. n = len(nums) if n < k: return float('-inf') # Calculate the initial window sum window_sum = sum(nums[:k]) max_sum = window_sum # Slide the window across the array for i in range(k, n): # Subtract the element that is left out and add the new element window_sum += nums[i] - nums[i - k] max_sum = max(max_sum, window_sum) return max_sum / k"},{"question":"Write a function to generate the first n Fibonacci numbers using an iterative approach. The function should be efficient and handle large values of n.","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers using an iterative approach. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a function to implement the insertion sort algorithm in Python. Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.","solution":"def insertion_sort(arr): Sorts an array of numbers using the insertion sort algorithm. Parameters: arr (list): A list of numbers to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to reverse a string in Python. There are several ways to do it. Please provide one of the most straightforward methods.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to calculate the time difference between two given timestamps. The timestamps are in the format of UNIX timestamps (in seconds).","solution":"def time_difference(timestamp1, timestamp2): Returns the absolute difference between two UNIX timestamps in seconds. :param timestamp1: First timestamp in UNIX format (int) :param timestamp2: Second timestamp in UNIX format (int) :return: Absolute difference between the two timestamps in seconds (int) return abs(timestamp1 - timestamp2)"},{"question":"Write a function to calculate the factorial of a number using tail recursion. Tail recursion is a special form of recursion where the recursive call is the last operation in the function. This can help in optimizing the recursive calls as it avoids the overhead of maintaining multiple stack frames.","solution":"def factorial_tail_recursive(n, accumulator=1): Calculates the factorial of a number using tail recursion. Parameters: n (int): The number for which the factorial is to be calculated. accumulator (int): The accumulator that holds the product of numbers (default is 1). Returns: int: Factorial of the number n. if n == 0 or n == 1: return accumulator else: return factorial_tail_recursive(n - 1, n * accumulator)"},{"question":"Write a function to sort an array in ascending order using the insertion sort algorithm. Detail the steps involved in the algorithm and provide the code implementation along with comments.","solution":"def insertion_sort(arr): Sorts an array in ascending order using the insertion sort algorithm. # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to find the minimum steps required to reach the bottom-right corner of a grid with m rows and n columns. You can only move either down or right at any point in time. You are at the top-left corner of the grid.","solution":"def min_steps_to_reach_bottom_right(m, n): Returns the minimum steps required to reach the bottom-right corner of a grid with m rows and n columns starting from the top-left corner of the grid. You can only move either down or right at any point in time. # Since we are limited to moves either down or right, # the minimum number of steps required to reach the bottom-right corner # is (m-1) + (n-1) = m + n - 2 return m + n - 2"},{"question":"Write a function to print \\"Hello, World!\\" in Python and ensure it works.","solution":"def hello_world(): Prints 'Hello, World!' to the console. print(\\"Hello, World!\\")"},{"question":"Write a function to calculate the factorial of a number in Python. The function should be named \`factorial\` and should take two parameters, \`num\` (the number to calculate the factorial of) and \`output_type\` (a string specifying the type of output, either 'int' or 'float'). If the \`output_type\` is invalid, the function should return -1.","solution":"def factorial(num, output_type): Calculates the factorial of a given number \`num\` and returns it either as an integer or a float, based on the \`output_type\` parameter. :param num: Integer, the number to calculate the factorial of. :param output_type: String, specifies the return type ('int' or 'float'). :return: Factorial of \`num\` as specified by \`output_type\` or -1 in case of an invalid \`output_type\`. if not isinstance(num, int) or num < 0: return -1 factorial = 1 for i in range(1, num + 1): factorial *= i if output_type == 'int': return factorial elif output_type == 'float': return float(factorial) else: return -1"},{"question":"Write a function to connect each node of the binary tree with its corresponding right sibling. In a binary tree, a node is connected to its next node at the same level through a field called \`next\`. If the current node being processed has no right sibling, the \`next\` field should be set to \`NULL\`.","solution":"class TreeLinkNode: def __init__(self, val=0, left=None, right=None, next=None): self.val = val self.left = left self.right = right self.next = next def connect(root): Connects each node of the binary tree with its corresponding right sibling. If there is no right sibling, the next field is set to NULL. if not root: return None queue = [root] while queue: next_level = [] for i in range(len(queue)): node = queue[i] if i + 1 < len(queue): node.next = queue[i + 1] else: node.next = None if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) queue = next_level return root"},{"question":"Write a function to calculate the number of edges in a given graph represented by an adjacency list. The graph is directed.","solution":"def count_edges(graph): Calculates the number of edges in a given directed graph represented by an adjacency list. Parameters: graph (dict): The adjacency list of the graph where keys are node names and values are lists of adjacent nodes. Returns: int: The number of edges in the graph. edge_count = 0 for node in graph: edge_count += len(graph[node]) return edge_count"},{"question":"Write a function to output the nth Fibonacci number in Python. The function should be recursive.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 if n == 2: return 1 return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to print all the nodes of a binary tree in spiral order.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def spiral_order_traversal(root): if not root: return [] result = [] deque_nodes = deque() deque_nodes.append(root) left_to_right = False while deque_nodes: level_size = len(deque_nodes) level_nodes = [] for _ in range(level_size): if left_to_right: node = deque_nodes.pop() level_nodes.append(node.value) if node.right: deque_nodes.appendleft(node.right) if node.left: deque_nodes.appendleft(node.left) else: node = deque_nodes.popleft() level_nodes.append(node.value) if node.left: deque_nodes.append(node.left) if node.right: deque_nodes.append(node.right) left_to_right = not left_to_right result.extend(level_nodes) return result"},{"question":"Write a function to return the last \`n\` elements from an array.","solution":"def last_n_elements(arr, n): Returns the last n elements from the array arr. Parameters: - arr: List of elements. - n: Number of elements to return from the end of the list. Returns: - List containing the last n elements of arr. return arr[-n:] if n > 0 else []"},{"question":"Write a function to reverse the bits of an n-bit unsigned integer.","solution":"def reverse_bits(n, bit_length): Reverses the bits of an n-bit unsigned integer. Parameters: n (int): The n-bit unsigned integer to be reversed. bit_length (int): The bit length of the integer n. Returns: int: The integer with its bits reversed. reversed_bin = '{:0{width}b}'.format(n, width=bit_length)[::-1] return int(reversed_bin, 2)"},{"question":"Write a function to take an integer array and return the first occurring duplicate number in the array. If there is no duplicate, return -1.","solution":"def first_duplicate(arr): Returns the first occurring duplicate number in the array. :param arr: List of integers :return: First duplicate integer or -1 if no duplicates are found seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Write a function to evaluate the mathematical expression \`a + b * c / d\` correctly according to the order of operations. How can this function be tested?","solution":"def evaluate_expression(a, b, c, d): Evaluates the expression a + b * c / d following the correct order of operations. return a + b * c / d"},{"question":"Write a function to check if a string contains only lower case letters in Python. You are given the string s as an input parameter. You should return True if all characters in the string are lower case, and False otherwise.","solution":"def is_all_lower(s): Returns True if all characters in the string are lower case, otherwise returns False. for char in s: if not char.islower(): return False return True"},{"question":"Write a function to find the sum of all divisors of a given number, excluding the number itself.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of n, excluding n itself. if n < 1: return 0 sum_divisors = 0 for i in range(1, n): if n % i == 0: sum_divisors += i return sum_divisors"},{"question":"Write a function to find the sum of all the elements in an array, excluding the largest and smallest elements, using Python.","solution":"def sum_excluding_extremes(arr): Returns the sum of all elements in the array excluding the largest and smallest elements. If the array length is less than 3, the function returns 0. :param arr: A list of integers :return: Integer sum excluding the largest and smallest elements # If the array length is less than 3, return 0 if len(arr) < 3: return 0 # Remove the largest and smallest elements arr_sorted = sorted(arr) return sum(arr_sorted[1:-1])"},{"question":"Write a function to compute the Fibonacci sequence up to the nth term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For this problem, you should return the sequence as a list.","solution":"def fibonacci(n): Returns a list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Write a function to check if a given binary tree is symmetric around its center. (For example, the binary tree [1,2,2,3,4,4,3] is symmetric around its center, but the binary tree [1,2,2,null,3,null,3] is not).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root): Returns True if the binary tree is symmetric around its center, else False. if not root: return True def isMirror(left, right): if not left and not right: return True if not left or not right: return False return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left) return isMirror(root.left, root.right)"},{"question":"Write a function to calculate the sum of all prime numbers up to a given number \`n\`. The function should be written in Python and should be efficient in terms of both time and space complexity.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers up to n (inclusive). if n < 2: return 0 # Initialize a boolean array of n+1 elements with True (except index 0 and 1) is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: # If is_prime[p] is True, then it is a prime if is_prime[p]: # Updating all multiples of p to False, starting from p * p for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Sum all index values where is_prime[index] is True return sum(i for i in range(n + 1) if is_prime[i])"},{"question":"Write a function to generate the nth Fibonacci number using recursion. The function should take an integer \`n\` as input and return the nth Fibonacci number. The Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1. Assume \`n\` is non-negative.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to process a list of git commands and execute them in sequence. Each command in the list is a string that represents a git command. The function should return the output of the last executed command. If any command fails, the function should return the error message.","solution":"import subprocess def execute_git_commands(commands): Execute a list of git commands in sequence and return the output of the last command. If any command fails, return the error message. :param commands: List of git commands as strings :return: Output of the last executed command or the error message of the failed command for command in commands: try: result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) except subprocess.CalledProcessError as e: return e.stderr.strip() return result.stdout.strip()"},{"question":"Write a function to convert a binary string to a decimal number. The binary string is given as a character array.","solution":"def binary_to_decimal(binary_string): Converts a binary string (character array) to a decimal number. :param binary_string: List of characters representing the binary number :return: Decimal representation of the binary number decimal_number = 0 binary_string = ''.join(binary_string) for digit in binary_string: decimal_number = decimal_number * 2 + int(digit) return decimal_number"},{"question":"Write a function to find the maximum element in a given list. Provide a detailed explanation and example usage.","solution":"def find_maximum(lst): Returns the maximum element in a given list. If the list is empty, returns None. :param lst: List of elements :return: The maximum element if not lst: return None max_element = lst[0] for element in lst: if element > max_element: max_element = element return max_element"},{"question":"Write a function to check if a given number is a Fibonacci number. A Fibonacci number is part of the sequence where each number after the first two is the sum of the two preceding ones, usually starting with 0 and 1. For example, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, etc.","solution":"import math def is_fibonacci_number(n): Checks if a given number is a Fibonacci number. if n < 0: return False # A number is Fibonacci if and only if one or both of (5 * n^2 + 4) or (5 * n^2 - 4) is a perfect square def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Write a function to perform a left rotation on an array by 'd' elements. Develop a function that takes three parameters: an array, its size, and 'd' number of left rotations to perform. The function should return the rotated array.","solution":"def left_rotate_array(arr, n, d): Performs a left rotation on the array by d elements. Parameters: arr (list): The array to be rotated. n (int): The size of the array. d (int): The number of left rotations to perform. Returns: list: The rotated array. # Ensure d is within the bounds of the array length d = d % n # Perform the rotation return arr[d:] + arr[:d]"},{"question":"Write a function to count the number of times a specific word appears in a text.","solution":"def count_word_occurrences(text, word): Returns the number of times a specific word appears in the given text. :param text: str, the text in which to count word occurrences :param word: str, the word to look for :return: int, the number of times the word appears in the text word_list = text.lower().split() word = word.lower() return word_list.count(word)"},{"question":"Write a function to reverse the order of words in a given string. A word is defined as any sequence of characters separated by whitespace. Negative numbers or decimal numbers should not be considered as words. For example, given the string \\"Hi, how are you?\\" the function should return \\"you? are how Hi,\\".","solution":"def reverse_words(s): Reverses the order of words in a given string. A word is defined as any sequence of characters separated by whitespace. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to implement a basic BFS on a 2D grid. Given a 2D grid of integers, find the shortest path from the top-left corner to the bottom-right corner where you can only move right or down. Assume every cell has a value which represents the cost to move into that cell. The goal is to find the minimum total cost to reach the bottom-right corner from the top-left corner.","solution":"from collections import deque import sys def bfs_min_cost(grid): Perform BFS on a 2D grid to find the shortest path from top-left to bottom-right corner. Args: grid (list of list of int): 2D grid where each cell value represents the cost to move into that cell. Returns: int: the minimum total cost to reach the bottom-right corner from the top-left corner. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (0, 1)] # Only move down or right queue = deque([(0, 0, grid[0][0])]) # (row, col, current_cost) min_cost = [[sys.maxsize] * cols for _ in range(rows)] min_cost[0][0] = grid[0][0] while queue: r, c, current_cost = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: new_cost = current_cost + grid[nr][nc] if new_cost < min_cost[nr][nc]: min_cost[nr][nc] = new_cost queue.append((nr, nc, new_cost)) return min_cost[rows - 1][cols - 1]"},{"question":"Write a function to output the gray code sequence for a given number of bits. Gray code is a binary numeral system where two successive values differ in only one bit.","solution":"def gray_code(n): Generate the sequence of n-bit Gray codes. Parameters: n (int): The number of bits. Returns: List[str]: A list of Gray codes in string format. num_codes = 1 << n gray_codes = [] for i in range(num_codes): gray = i ^ (i >> 1) gray_codes.append(format(gray, f'0{n}b')) return gray_codes"},{"question":"Write a function to find the maximum number in a list, but instead of using the built-in \`max()\` function, implement it using a simple for loop. What should the function return if the list is empty? Consider that the list can contain both positive and negative integers.","solution":"def find_max(lst): Returns the maximum number in a list using a for loop. If the list is empty, returns None. if not lst: return None max_value = lst[0] for num in lst[1:]: if num > max_value: max_value = num return max_value"},{"question":"Write a function to calculate the sum of the distinct elements in a given list of integers. You are required to implement a function that iterates through each element of the list, checks if it is already in a result list, and if not, adds it. Finally, return the sum of all elements in the result list. Here is a code snippet with a mistake in it. Can you find and correct it?","solution":"def sum_of_distinct_elements(lst): Returns the sum of the distinct elements in the given list of integers. result = [] for elem in lst: if elem not in result: result.append(elem) return sum(result)"},{"question":"Write a function to find the numbers that appear more than once in an array using Python.","solution":"def find_duplicates(arr): Returns a list of numbers that appear more than once in the array. from collections import Counter count = Counter(arr) return [item for item, freq in count.items() if freq > 1]"},{"question":"Write a function to identify the occurrence of a number in a list. You need to find not only the first occurrence but also all subsequent occurrences of a given number in a list and return their indices. If the number is not found, return an empty list.","solution":"def find_occurrences(lst, num): Returns a list of indices where the given number occurs in the list. :param lst: List of integers :param num: Integer whose occurrences need to be found :return: List of indices where \`num\` occurs in \`lst\` return [i for i, x in enumerate(lst) if x == num]"},{"question":"Write a function to convert a given number into its binary representation. If the number is 0, the function should return \\"0\\".","solution":"def to_binary(n): Converts a given number into its binary representation. If the number is 0, it returns \\"0\\". if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"Write a function to check if a given number n is a prime number.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for divisor in range(3, max_divisor, 2): if n % divisor == 0: return False return True"},{"question":"Write a function to check if two numbers are co-prime. Two numbers are co-prime if their greatest common divisor (GCD) is 1.","solution":"import math def are_coprime(a, b): Returns True if a and b are co-prime, otherwise False. return math.gcd(a, b) == 1"},{"question":"Write a function to calculate the sum of all prime numbers less than a given number n. Additionally, implement a function to check if a number is prime and use it within your main function to find the sum of all primes less than n.","solution":"def is_prime(num): Checks if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(n): Returns the sum of all prime numbers less than n. total = 0 for i in range(2, n): if is_prime(i): total += i return total"},{"question":"Write a function to remove duplicates from a list of integers.","solution":"def remove_duplicates(nums): Removes duplicates from a list of integers and returns a new list with unique elements. Parameters: nums (list): A list of integers which may contain duplicates. Returns: list: A list with duplicates removed. return list(set(nums))"},{"question":"Write a function to calculate the factorial of a number. The function should handle edge cases, such as negative numbers and very large numbers, and should return the correct result for all valid inputs. How should I approach this task?","solution":"def factorial(n): Calculates the factorial of a given non-negative integer n. If n is negative, returns None. if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to convert a given floating-point number to a string with a specified precision. The function should take two arguments: the floating-point number and the desired precision. The function should return the formatted string.","solution":"def format_float_with_precision(number, precision): Returns the floating-point number formatted as a string with the specified precision. Parameters: number (float): The floating-point number to be formatted. precision (int): The number of decimal places. Returns: str: The formatted string with the specified precision. if not isinstance(number, (float, int)): raise ValueError(\\"The number must be a floating-point or integer.\\") if not isinstance(precision, int) or precision < 0: raise ValueError(\\"Precision must be a non-negative integer.\\") return f\\"{number:.{precision}f}\\""},{"question":"Write a function to generate a zigzag pattern in HTML.","solution":"def generate_zigzag_pattern(rows, cols): Generates a zigzag pattern in HTML. Args: rows (int): The number of rows in the zigzag pattern. cols (int): The number of columns in the zigzag pattern. Returns: str: The zigzag pattern in HTML as a string. zigzag_html = \\"<table border='1'>n\\" for i in range(rows): zigzag_html += \\" <tr>n\\" if i % 2 == 0: for j in range(cols): zigzag_html += f\\" <td>{i * cols + j + 1}</td>n\\" else: for j in range(cols - 1, -1, -1): zigzag_html += f\\" <td>{i * cols + j + 1}</td>n\\" zigzag_html += \\" </tr>n\\" zigzag_html += \\"</table>\\" return zigzag_html"},{"question":"Write a function to flatten a binary tree into a singly linked list. You are not allowed to create any new nodes, but you can change the pointer directions. The function should return the head of the linked list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flattens the binary tree into a singly linked list in-place. if not root: return None # Helper function to perform flattening def flatten_tree(node): # Base case - leaf node if not node.left and not node.right: return node left_tail = None right_tail = None # Recursively flatten the left subtree if node.left: left_tail = flatten_tree(node.left) # Recursively flatten the right subtree if node.right: right_tail = flatten_tree(node.right) # If there was a left subtree, we shuffle the connections if left_tail: left_tail.right = node.right node.right = node.left node.left = None # Return the rightmost node after we are done return right_tail if right_tail else left_tail flatten_tree(root) return root"},{"question":"Write a function to calculate the maximum path sum for a binary tree. What is the maximum path sum? It is the largest sum of any path from root to leaf. Note that a path can only visit nodes along the parent-child connections, not diagonally.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): Returns the maximum path sum from root to leaf. if not root: return float('-inf') if not root.left and not root.right: return root.val left_sum = max_path_sum(root.left) right_sum = max_path_sum(root.right) return root.val + max(left_sum, right_sum)"},{"question":"Write a function to find the first non-repeating character in a string. If no such character exists, return an empty string. For example, for the input \\"google\\", the function should return \\"l\\".","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If no such character exists, returns an empty string. # Dictionary to store the count of characters. char_count = {} # Count the occurrences of each character in the string. for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that has a count of 1. for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a function to find the area of a circle. The function should take the radius as an argument and return the area. Assume the value of π is approximately 3.14159.","solution":"def area_of_circle(radius): Returns the area of a circle given the radius. Parameters: - radius (float): The radius of the circle. Returns: - float: The area of the circle. pi = 3.14159 return pi * radius * radius"},{"question":"Write a function to reverse the order of elements in a list, but not the elements themselves. For example, given the list \`[1, 2, 3, 4]\`, the function should return \`[4, 3, 2, 1]\`. Additionally, ensure that the reversed list maintains the type of each element (integer, string, etc.).","solution":"def reverse_list(lst): Reverses the order of elements in the list but not the elements themselves. Args: lst (list): The list to be reversed. Returns: list: A new list with the order of elements reversed. return lst[::-1]"},{"question":"Write a function to simulate a simple text-based game where the player can input commands to explore a room. The game should have a main menu where the player can choose to either explore the room or exit the game. If the player chooses to explore the room, they should be able to enter commands to perform actions like \\"look\\", \\"take item\\", etc. The game should accept input in uppercase and return the corresponding response. The game should be case-insensitive for commands. It should also be able to handle invalid commands gracefully by returning an \\"Invalid command\\" response.","solution":"def text_based_game(command): Simulates a simple text-based game where the player can enter commands to explore a room. room_description = \\"You are in a small room. There is a table with an old dusty book on it.\\" command = command.lower() if command == \\"main menu\\": return \\"Main Menu: [1] Explore Room [2] Exit Game\\" elif command == \\"explore room\\": return room_description elif command == \\"look\\": return \\"You see a table with an old dusty book on it.\\" elif command == \\"take item\\": return \\"You take the old dusty book.\\" elif command == \\"exit game\\": return \\"Goodbye!\\" else: return \\"Invalid command\\""},{"question":"Write a function to calculate Fibonacci numbers using a loop in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: a non-negative integer representing the position in the Fibonacci sequence. :return: the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to return the sum of the digits of a given non-negative integer. For example, if the input is 123, the function should return 6 (1 + 2 + 3).","solution":"def sum_of_digits(n): Returns the sum of the digits of the given non-negative integer n. Parameters: n (int): A non-negative integer Returns: int: The sum of the digits of n return sum(int(digit) for digit in str(n))"},{"question":"Write a function to filter out all the even numbers from a list of integers using list comprehension and return the resulting list.","solution":"def filter_even_numbers(numbers): Filters out even numbers from a list of integers using list comprehension. Args: numbers (list): A list of integers. Returns: list: A list of odd integers. return [num for num in numbers if num % 2 != 0]"},{"question":"Write a function to reverse the order of the values in a list and then print the reversed list. The function should not alter the original list but return a new list with the items in reverse order.","solution":"def reverse_list(lst): Returns a new list that is the reverse of the provided list. Args: lst (list): The list to be reversed. Returns: list: A new list with the elements of the original list in reverse order. return lst[::-1]"},{"question":"Write a function to find the shortest palindrome by appending characters to the end of the given string.","solution":"def shortest_palindrome(s): Returns the shortest palindrome by appending characters to the end of the given string. :param s: A string input :type s: str :return: The shortest palindrome string :rtype: str if not s: return s rev_s = s[::-1] for i in range(len(s) + 1): if s.startswith(rev_s[i:]): return rev_s[:i] + s return \\"\\""},{"question":"Write a function to generate the first n numbers in the Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. How would you write such a function?","solution":"def generate_fibonacci(n): Generates the first n numbers in the Fibonacci sequence. Args: n : int : the number of Fibonacci numbers to generate Returns: list : a list containing the first n numbers in the Fibonacci sequence if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Write a function to parse a string representing a phone book entry and return a dictionary containing the phone book entry's name and phone number. For example, parsing \\"John Doe, Phone:+1-800-555-1234\\" should return {\\"Name\\": \\"John Doe\\", \\"Phone\\": \\"+1-800-555-1234\\"}. Assume each entry is correctly formatted.","solution":"def parse_phone_book_entry(entry: str) -> dict: Parses a phone book entry string and returns a dictionary with name and phone number. :param entry: A string representing a phone book entry, e.g., \\"John Doe, Phone:+1-800-555-1234\\". :return: A dictionary with two keys - \\"Name\\" and \\"Phone\\". # Splitting the entry by the comma to separate name and phone name_part, phone_part = entry.split(', ') # Extracting the name name = name_part.strip() # Extracting the phone number by splitting the second part # Based on the first occurrence of the \\"Phone:\\" keyword phone = phone_part.split('Phone:')[1].strip() return {\\"Name\\": name, \\"Phone\\": phone}"},{"question":"Write a function to find the maximum of two numbers using the ARM assembly language. The function should take two integer parameters and return the maximum value. Your function should use only assembly language instructions.","solution":"def find_max_arm(a, b): Finds the maximum of two numbers using ARM assembly language commands. This implementation is a simulated version in Python. max_val = a if a > b else b return max_val"},{"question":"Write a function to check if a binary search tree (BST) is a valid binary search tree. Please provide a detailed explanation and code example.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(node, min_val=float('-inf'), max_val=float('inf')): Checks if the tree is a valid binary search tree. Args: node (TreeNode): The root node of the binary search tree. min_val (float): The minimum allowable value for the current subtree. max_val (float): The maximum allowable value for the current subtree. Returns: bool: True if the tree is a valid BST, False otherwise. if not node: return True if not (min_val < node.val < max_val): return False return (is_valid_bst(node.left, min_val, node.val) and is_valid_bst(node.right, node.val, max_val))"},{"question":"Write a function to print out all characters in a given string, one character per line. The function should handle strings of any length and ensure that each character is printed on a new line.","solution":"def print_characters(s): Prints each character of the given string 's' on a new line. for char in s: print(char)"},{"question":"Write a function to convert a given number into its hexadecimal representation. The function should be named \`to_hexadecimal\` and take an integer \`num\` as its input. The function should return the hexadecimal representation of the number as a string.","solution":"def to_hexadecimal(num): Converts a given number into its hexadecimal representation. Parameters: num (int): The number to convert. Returns: str: The hexadecimal representation of the number. if num == 0: return \\"0\\" hexadecimal = \\"\\" hex_chars = \\"0123456789abcdef\\" is_negative = num < 0 if is_negative: num = (1 << 32) + num while num > 0: hexadecimal = hex_chars[num % 16] + hexadecimal num //= 16 return hexadecimal"},{"question":"Write a function to find the number of blue circles in a given string representing a grid. A blue circle is represented by the character 'B'. If the string does not contain any blue circles, the function should return -1.","solution":"def count_blue_circles(grid_string): Returns the number of blue circles in the given string. A blue circle is represented by the character 'B'. If there are no blue circles, returns -1. count = grid_string.count('B') return count if count > 0 else -1"},{"question":"Write a function to determine if there are any duplicate numbers in an array and return a boolean value.","solution":"def has_duplicates(arr): Check if there are any duplicate numbers in the array. Parameters: arr (list): A list of numbers. Returns: bool: True if there are duplicates, False otherwise. return len(arr) != len(set(arr))"},{"question":"Write a function to read integers from a file and store them in a list. Then, sort the list and return it.","solution":"def read_and_sort_integers_from_file(file_path): Reads integers from a given file, stores them in a list, sorts the list, and returns it. :param file_path: Path to the file containing integers. :return: Sorted list of integers. with open(file_path, 'r') as file: integers = [int(line.strip()) for line in file if line.strip().isdigit()] return sorted(integers)"},{"question":"Write a function to reverse a string and output the reversed string. However, only reverse the characters between the first and last non-space characters of the string, ignoring the leading and trailing spaces.","solution":"def reverse_inner_string(s): Returns a string with the characters between the first and last non-space characters of the string reversed, ignoring the leading and trailing spaces. # Find the first and last non-space characters start = 0 end = len(s) - 1 while start < len(s) and s[start] == ' ': start += 1 while end > start and s[end] == ' ': end -= 1 # Check if we have no inner characters to reverse if start >= end: return s # Get the inner part of the string and reverse it inner_part = s[start:end + 1] reversed_inner = inner_part[::-1] # Return the string with reversed inner part return s[:start] + reversed_inner + s[end + 1:]"},{"question":"Write a function to find the maximum possible sum of a contiguous subsequence of an array of integers. This is commonly known as Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of a contiguous subsequence of an array of integers. Uses Kadane's Algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the sum of two numbers. The function should take two parameters, num1 and num2, and return the sum of these two numbers.","solution":"def sum_of_two_numbers(num1, num2): Returns the sum of num1 and num2. return num1 + num2"},{"question":"Write a function to add a new contact to a contact list in Python. The function should take in the contact's name and phone number and return the updated contact list. The contact list is a dictionary where the keys are the names of the contacts and the values are their phone numbers.","solution":"def add_contact(contact_list, name, phone_number): Adds a new contact to the contact list. :param contact_list: Dictionary containing current contacts :param name: The name of the contact to add :param phone_number: The phone number of the contact to add :return: Updated contact list contact_list[name] = phone_number return contact_list"},{"question":"Write a function to insert an element into a sorted array in Python. The function should handle cases where the array is empty or already contains the element. If the array contains the element, the function should increase the count of that element by 1. If the element is not in the array, the function should insert it in the correct sorted position.","solution":"def insert_into_sorted_array(arr, elem): Inserts elem into sorted array arr such that the array remains sorted. If the element already exists, increase its count by 1. from collections import defaultdict # Creating a dictionary to store element counts count = defaultdict(int) for x in arr: count[x] += 1 # If element exists in the array, just increase its count and return if elem in count: count[elem] += 1 else: # Insert element into sorted array arr.append(elem) arr.sort() count[elem] = 1 # Generate resulting sorted array based on counts result = [] for key in sorted(count.keys()): result.extend([key] * count[key]) return result"},{"question":"Write a function to convert a given string from snake_case to CamelCase in Python.","solution":"def snake_to_camel(snake_str): Convert a given string from snake_case to CamelCase. Parameters: snake_str (str): The string in snake_case format. Returns: str: The string converted to CamelCase format. components = snake_str.split('_') return ''.join(component.capitalize() for component in components)"},{"question":"Write a function to find the common elements between two lists of integers and print the result. Please use Python.","solution":"def find_common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Write a function to reverse the words in a string in Python, while maintaining the position of any leading and trailing spaces. For example, if the input string is \\" hello world! \\", the output should be \\" world! hello \\".","solution":"def reverse_words(s): Reverses the words in the input string s while maintaining the position of any leading and trailing spaces. words = s.strip().split() reversed_words = ' '.join(reversed(words)) leading_spaces = len(s) - len(s.lstrip()) trailing_spaces = len(s) - len(s.rstrip()) return ' ' * leading_spaces + reversed_words + ' ' * trailing_spaces"},{"question":"Write a function to determine if a given string matches a given pattern using regular expressions. The function should return True if the string and pattern match, and False otherwise. The pattern can include the special characters '.' and '*', where '.' matches any single character, and '*' matches zero or more of the preceding element.","solution":"import re def is_match(s, p): Returns True if the string s matches the pattern p, otherwise False. The pattern can include '.' and '*' where '.' matches any single character and '*' matches zero or more of the preceding element. pattern = re.compile(p) match = pattern.fullmatch(s) return match is not None"},{"question":"Write a function to calculate the area of a triangle given the lengths of its three sides using Heron's formula. Heron's formula states that the area of a triangle whose sides have lengths a, b, and c is sqrt{s(s - a)(s - b)(s - c)}, where s is the semi-perimeter of the triangle, calculated as (a + b + c) / 2.","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle given the lengths of its three sides using Heron's formula. Parameters: a (float): Length of the first side of the triangle b (float): Length of the second side of the triangle c (float): Length of the third side of the triangle Returns: float: Area of the triangle s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a function to check if a given integer n is a power of two. Your function should return \`true\` if n is a power of two, and \`false\` otherwise. Note: n is a 32-bit signed integer.","solution":"def is_power_of_two(n): Checks if a given integer n is a power of two. Returns True if it is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to calculate the factorial of a number in Python. The function should handle large numbers by using Python's built-in libraries or data types that support large integers. Additionally, ensure that the function raises a custom exception when the input number is negative, as factorials are not defined for negative numbers.","solution":"class NegativeNumberError(Exception): pass def factorial(n): Returns the factorial of a non-negative integer n. Raises NegativeNumberError if the input number is negative. if n < 0: raise NegativeNumberError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to count the number of times a specific item appears in a list. The function should take the list and the item to search for as arguments.","solution":"def count_occurrences(lst, item): Returns the number of times the specific item appears in the list. Parameters: lst (list): The list in which to count occurrences. item: The item to count in the list. Returns: int: The number of times the item appears in the list. return lst.count(item)"},{"question":"Write a function to print all the integers from 1 to 100 that are divisible by 3 and 5. To solve this, loop through the numbers and use a modulo operator to check if the number is divisible by both 3 and 5.","solution":"def find_divisible_by_3_and_5(): Returns a list of integers from 1 to 100 that are divisible by both 3 and 5. result = [] for number in range(1, 101): if number % 3 == 0 and number % 5 == 0: result.append(number) return result"},{"question":"Write a function to check if a number is divisible by any prime number less than 20. Returns true if the number is divisible by any of these prime numbers, false otherwise.","solution":"def is_divisible_by_prime_less_than_20(n): Checks if a number is divisible by any prime number less than 20. Prime numbers less than 20 are: 2, 3, 5, 7, 11, 13, 17, 19. prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19] for prime in prime_numbers: if n % prime == 0: return True return False"},{"question":"Write a function to generate a specific pattern of numbers. The pattern should consist of two interleaved sequences starting from 1. The first sequence increments by 2 (odd numbers), and the second sequence increments by 2 (even numbers). The function should take an integer \`n\` as input and return a list containing the interleaved sequence with a length of \`2*n\`.","solution":"def generate_pattern(n): Generates a list of length 2*n containing an interleaved pattern of odd and even numbers starting from 1 and 2 respectively. Arguments: n -- The number of elements in each sequence (total elements in the list will be 2*n) Returns: A list containing the interleaved pattern. pattern = [] odd_number = 1 even_number = 2 for i in range(n): pattern.append(odd_number) pattern.append(even_number) odd_number += 2 even_number += 2 return pattern"},{"question":"Write a function to invert the case of each character in a string. For example, if you input the string \\"World\\", the function should return \\"wORLD\\". Additionally, ensure your function handles special characters and numbers without altering them.","solution":"def invert_case(s): Returns a new string with the case of each character in the input string inverted. Lowercase characters become uppercase and vice versa. Special characters and digits are not altered. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Write a function to find the second smallest number in an array of integers. If the array contains a single number or does not have a second smallest number, the function should return \`None\`. The function should be written in Python and optimized for performance.","solution":"def second_smallest(numbers): Returns the second smallest number in an array of integers. If the array contains a single number or does not have a second smallest number, returns None. if len(numbers) < 2: return None first, second = float('inf'), float('inf') for n in numbers: if n < first: first, second = n, first elif first < n < second: second = n return second if second != float('inf') else None"},{"question":"Write a function to generate all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm and then, write another function to check if a given number is prime using the generated list of primes.","solution":"def sieve_of_eratosthenes(n): Generates all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit up to which to generate prime numbers. Returns: List[int]: A list of prime numbers up to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def is_prime(num, primes): Checks if a given number is prime using the given list of primes. Parameters: num (int): The number to check. primes (List[int]): The list of prime numbers for reference. Returns: bool: True if the number is prime, False otherwise. return num in primes"},{"question":"Write a function to find the surface area of a 3D object that consists of multiple cuboids. The function should take a list of cuboids, where each cuboid is represented as a list of three integers [length, width, height]. The function should return the total surface area of all the cuboids combined.","solution":"def total_surface_area_of_cuboids(cuboids): Returns the total surface area of multiple cuboids. Each cuboid is represented as a list of three integers [length, width, height]. :param cuboids: List[List[int]] :return: int total_surface_area = 0 for cuboid in cuboids: length, width, height = cuboid surface_area = 2 * (length * width + width * height + height * length) total_surface_area += surface_area return total_surface_area"},{"question":"Write a function to find the maximum sum of a contiguous subarray. This is commonly known as Kadane's algorithm. Implement it in Python.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray using Kadane's algorithm. Args: nums (list of int): List of integers. Returns: int: The maximum sum of the contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if a given binary string is divisible by 5. You need to make sure to avoid direct computation of large numbers that might cause overflow.","solution":"def is_divisible_by_5(binary_str): Check if a given binary string is divisible by 5 without direct computation of the binary number. Parameters: binary_str (str): The binary string to check Returns: bool: True if the binary string is divisible by 5, False otherwise value = 0 for digit in binary_str: value = (value * 2 + int(digit)) % 5 return value == 0"},{"question":"Write a function to sort an array of integers in ascending order using the Bubble Sort algorithm. Include comments in your code to explain each step of the process.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort algorithm. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already sorted for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to implement a linear search algorithm in Python. The function should take two arguments: a list of numbers and the number to be searched. The function should return the index of the number in the list if found, and -1 if not found.","solution":"def linear_search(numbers, target): Returns the index of the target in the numbers list if found, otherwise returns -1. :param numbers: List of numbers to search within. :param target: The number to search for. :return: Index of the target if found, otherwise -1. for index, value in enumerate(numbers): if value == target: return index return -1"},{"question":"Write a function to evaluate postfix notation for multiple arithmetic operations. The function should be designed to handle operators '+', '-', '*', '/', '**' (幂运算). Each operator should be applied between the last two elements in the given stack. The function should iterate through the stack from left to right and apply the operators accordingly. Once the stack is processed, the final result should be the only element left in the stack.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression containing multiple arithmetic operations. Operators: '+', '-', '*', '/', '**' stack = [] for char in expression: if char.isdigit(): # if operand push to stack stack.append(int(char)) else: # if operator pop two elements, apply operation, and push result back to stack b = stack.pop() a = stack.pop() if char == '+': stack.append(a + b) elif char == '-': stack.append(a - b) elif char == '*': stack.append(a * b) elif char == '/': stack.append(int(a / b)) # use int to perform integer division elif char == '**': stack.append(a ** b) return stack[0] # The final result should be the only element left in the stack"},{"question":"Write a function to solve the two-sum problem in Python. The function should take a list of integers and a target integer as inputs. It should return the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list \`nums\` that add up to the \`target\`. Parameters: nums (List[int]): List of integers. target (int): The target sum. Returns: List[int]: Indices of the two numbers that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a function to implement a stack-based iterative preorder traversal of a binary tree (also known as depth-first traversal). The preorder traversal visits each node before its descendants. That is, for every node, the visit order is root, left, then right.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def preorder_traversal(root): Perform a stack-based iterative preorder traversal of a binary tree. Visits nodes in the order: root, left, right. if root is None: return [] stack, output = [root], [] while stack: node = stack.pop() if node: output.append(node.val) # Push right first so that left is processed first if node.right: stack.append(node.right) if node.left: stack.append(node.left) return output"},{"question":"Write a function to find and print a number divisible by both 7 and 11 within a given range [start, end].","solution":"def find_number_divisible_by_7_and_11(start, end): Returns the first number within the range [start, end] that is divisible by both 7 and 11. If no such number exists, returns None. for i in range(start, end + 1): if i % 7 == 0 and i % 11 == 0: return i return None"},{"question":"Write a function to generate the Nth Fibonacci number in Python. The function should be efficient and use memoization to improve performance for large values of N.","solution":"def fibonacci(n, memo={}): Returns the Nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to remove duplicates from a sorted list in-place, such that each unique element occurs only once in the list. The function should return the new length of the list after duplicates have been removed. The order of the unique elements should be preserved.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted list in-place and returns the new length. Parameters: nums (List[int]): The sorted list from which to remove duplicates. Returns: int: The new length of the list after duplicates have been removed. if not nums: return 0 write_index = 1 # Index to write the next unique element for read_index in range(1, len(nums)): if nums[read_index] != nums[write_index - 1]: nums[write_index] = nums[read_index] write_index += 1 return write_index"},{"question":"Write a function to find the median of a list of integers in Python. The list can contain both positive and negative numbers, and its length may vary. The function should efficiently sort the list and then calculate the median. If the list length is odd, return the middle element; if it's even, return the average of the two middle elements.","solution":"def find_median(data): Returns the median of a list of integers. Parameters: data (list): A list of integers. Returns: float: The median of the list. if not data: raise ValueError(\\"The list is empty\\") n = len(data) sorted_data = sorted(data) if n % 2 == 1: return float(sorted_data[n // 2]) else: mid1 = sorted_data[n // 2 - 1] mid2 = sorted_data[n // 2] return (mid1 + mid2) / 2"},{"question":"Write a function to return the unique elements in a list.","solution":"def unique_elements(lst): Returns a list of unique elements from the input list. return list(set(lst))"},{"question":"Write a function to calculate the volume of a cube given the length of its side. The function should handle exceptions for non-positive side lengths and raise an appropriate error if the input is invalid. Additionally, the function should be optimized for large side lengths but not compromise on accuracy.","solution":"def cube_volume(side): Returns the volume of a cube given the length of its side. Raises ValueError if the side length is not positive. if not isinstance(side, (int, float)): raise TypeError(\\"Side length must be a number.\\") if side <= 0: raise ValueError(\\"Side length must be a positive number.\\") return side ** 3"},{"question":"Write a function to calculate the sum of digits in a given integer. For example, if the integer is 12345, the sum of its digits would be 1+2+3+4+5 = 15. Can you write the function and explain how it works?","solution":"def sum_of_digits(n): Calculate the sum of the digits in the given integer n. :param n: The integer whose digits are to be summed. :return: The sum of the digits of n. # Make sure we handle negative numbers n = abs(n) # Convert the number to a string, iterate through each character, # convert them back to integers and sum them up return sum(int(digit) for digit in str(n)) # Example usage # print(sum_of_digits(12345)) # Output: 15"},{"question":"Write a function to find the first occurrence of an element in a sorted list that is greater than a given value x. If no such element exists, return -1. The list is sorted in ascending order.","solution":"def find_first_greater(sorted_list, x): Returns the index of the first occurrence of an element in a sorted list that is greater than x. If no such element exists, returns -1. left, right = 0, len(sorted_list) - 1 result = -1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] > x: result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Write a function to determine if a given number is within a specified range [min, max] where both endpoints are inclusive. The function should return true if the number is within the range, and false otherwise. Handle edge cases appropriately.","solution":"def is_within_range(number, min_val, max_val): Determines if the given number is within the range [min_val, max_val] inclusive. Parameters: number (int or float): The number to check. min_val (int or float): The inclusive lower bound of the range. max_val (int or float): The inclusive upper bound of the range. Returns: bool: True if the number is within the range, False otherwise. return min_val <= number <= max_val"},{"question":"Write a function to evaluate the logical AND operation between two Boolean values.","solution":"def logical_and(a, b): Returns the logical AND of two boolean values a and b. return a and b"},{"question":"Write a function to generate all permutations of a given sequence of numbers, where the sequence may contain duplicates. The function should return a list of unique permutations.","solution":"def unique_permutations(sequence): Returns a list of unique permutations of the given sequence. from itertools import permutations return list(set(permutations(sequence)))"},{"question":"Write a function to multiply all the numbers in a list by 2.","solution":"def multiply_by_two(numbers): Returns a new list where each number in the input list is multiplied by 2. Parameters: numbers (list): A list of numbers. Returns: list: A new list with each number multiplied by 2. return [number * 2 for number in numbers]"},{"question":"Write a function to generate a spiral matrix of a given size N. A spiral matrix is a square grid filled with numbers in a spiral order, starting from the top-left corner. The numbers should increase sequentially from 1.","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix. matrix = [[0] * n for _ in range(n)] num = 1 top, left = 0, 0 bottom, right = n - 1, n - 1 while num <= n*n: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Write a function to find the time it takes for a car to reach a given distance at a constant speed. The function should take the distance \`d\` and the speed \`s\` as inputs and return the time it takes for the car to reach that distance.","solution":"def time_to_reach_distance(d, s): Returns the time it takes for a car to reach the distance \`d\` at a constant speed \`s\`. Args: d (float): The distance to be covered in miles or kilometers. s (float): The constant speed of the car in miles per hour or kilometers per hour. Returns: float: The time in hours it takes to reach the distance. if s == 0: raise ValueError(\\"Speed cannot be zero.\\") return d / s"},{"question":"Write a function to generate a random name. The function should take two parameters: \`first_name_length\` and \`last_name_length\`. The function should randomly generate a first name and a last name with the specified lengths and return them as a tuple.","solution":"import random import string def generate_random_name(first_name_length, last_name_length): Generates a random first name and last name with the specified lengths. Parameters: - first_name_length: Length of the first name. - last_name_length: Length of the last name. Returns: A tuple containing the generated first name and last name. first_name = ''.join(random.choices(string.ascii_lowercase, k=first_name_length)).capitalize() last_name = ''.join(random.choices(string.ascii_lowercase, k=last_name_length)).capitalize() return (first_name, last_name)"},{"question":"Write a function to create a virtual environment and install packages using pip in Python.","solution":"import subprocess def create_virtualenv_and_install_packages(env_name, packages): Creates a virtual environment and installs the specified packages using pip. Parameters: env_name (str): The name of the virtual environment. packages (list of str): A list of package names to install. try: # Create the virtual environment subprocess.check_call(['python', '-m', 'venv', env_name]) # Install packages for package in packages: subprocess.check_call([f'./{env_name}/bin/pip', 'install', package]) return f\\"Virtual environment '{env_name}' created and packages installed successfully.\\" except subprocess.CalledProcessError as e: return f\\"An error occurred: {e}\\" # Example usage: # create_virtualenv_and_install_packages('myenv', ['requests', 'numpy'])"},{"question":"Write a function to calculate the shortest path between two vertices \`x\` and \`y\` in a graph in Python using the Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start, end): Returns the shortest path between start and end in the given graph using Dijkstra's algorithm. :param graph: A dictionary where the keys are vertices and the values are dictionaries of neighboring vertices and edge weights :param start: The starting vertex :param end: The ending vertex :return: A tuple containing the shortest distance and the path as a list of vertices # Priority queue to store the vertices to be processed queue = [(0, start, [])] # Dictionary to store the shortest paths to each vertex visited = {} while queue: (cost, vertex, path) = heapq.heappop(queue) if vertex in visited: continue path = path + [vertex] visited[vertex] = cost if vertex == end: return (cost, path) for next_vertex, weight in graph.get(vertex, {}).items(): if next_vertex not in visited: heapq.heappush(queue, (cost + weight, next_vertex, path)) return (float(\\"inf\\"), []) # Example graph representation # graph = { # 'A': {'B': 1, 'C': 4}, # 'B': {'A': 1, 'C': 2, 'D': 5}, # 'C': {'A': 4, 'B': 2, 'D': 1}, # 'D': {'B': 5, 'C': 1} # }"},{"question":"Write a function to calculate the total number of possible sequences of a given length where each element in the sequence is either 0 or 1, and the XOR of all elements in the sequence is 1. The order of elements in the sequence matters.","solution":"def count_sequences(length): Calculate the number of possible sequences of a given length where each element is either 0 or 1, and the XOR of all elements in the sequence is 1. Args: length (int): The length of the sequence. Returns: int: The number of such sequences if length < 1: return 0 # Number of ways to make up the sequences # XOR result 1 is only possible if the sequence length is odd if length % 2 == 0: return 0 else: # For odd length of n, there are 2^(n-1) possible sequences return 2 ** (length - 1)"},{"question":"Write a function to remove duplicates from a sorted array without using any additional data structures like arrays or sets. The function should modify the array in place and return the length of the new array with unique elements.","solution":"def remove_duplicates(arr): Removes duplicates from a sorted array in place, and returns the length of the array with unique elements. Parameters: arr (List[int]): A list of sorted integers. Returns: int: The length of the array with unique elements. if not arr: return 0 # Initialize the index of the last unique element last_unique_index = 0 for i in range(1, len(arr)): if arr[i] != arr[last_unique_index]: last_unique_index += 1 arr[last_unique_index] = arr[i] return last_unique_index + 1"},{"question":"Write a function to generate a list of Fibonacci numbers up to a given number \`n\`. The function should take an integer \`n\` as input and return a list of Fibonacci numbers that are less than or equal to \`n\`.","solution":"def fibonacci_up_to_n(n): Returns a list of Fibonacci numbers less than or equal to n. if n < 0: return [] fib_list = [] a, b = 0, 1 while a <= n: fib_list.append(a) a, b = b, a + b return fib_list"},{"question":"Write a function to remove duplicate elements from a given list. The function should return a new list without duplicates.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the given list and returns a new list without duplicates. Parameters: input_list (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed. return list(dict.fromkeys(input_list))"},{"question":"Write a function to find the minimum cut in a network given the source and sink nodes, number of nodes, and the adjacency matrix representing the capacities. The function should return the minimum cut capacity.","solution":"from collections import deque def bfs_capacity_flow(residual_graph, source, sink, parent): Performs BFS to find if a path exists from source to sink. Fills parent to store the path and returns True if path is found, else False. visited = [False] * len(residual_graph) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for ind, val in enumerate(residual_graph[u]): if not visited[ind] and val > 0: # If not visited and there's a capacity queue.append(ind) visited[ind] = True parent[ind] = u # If we reached the sink in BFS starting from source, then return True return visited[sink] def min_cut(source, sink, num_nodes, capacity_matrix): Finds the minimum cut of the given network using the source and sink nodes, number of nodes, and the adjacency matrix representing capacities. Returns the minimum cut capacity. # Create a residual graph and fill the residual graph with given capacities residual_graph = [row[:] for row in capacity_matrix] parent = [-1] * num_nodes max_flow = 0 while bfs_capacity_flow(residual_graph, source, sink, parent): path_flow = float(\\"Inf\\") s = sink while s != source: path_flow = min(path_flow, residual_graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] residual_graph[u][v] -= path_flow residual_graph[v][u] += path_flow v = parent[v] max_flow += path_flow # To compute minimum cut, we need to find the edges which are from reachable to non-reachable nodes visited = [False] * num_nodes queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for ind, val in enumerate(residual_graph[u]): if not visited[ind] and val > 0: queue.append(ind) visited[ind] = True min_cut_capacity = 0 for i in range(num_nodes): for j in range(num_nodes): if visited[i] and not visited[j] and capacity_matrix[i][j] > 0: min_cut_capacity += capacity_matrix[i][j] return min_cut_capacity"},{"question":"Write a function to find the maximum sum of a non-empty contiguous subarray. For example, given the array [-2,1,-3,4,-1,2,1,-5,4], the maximum sum is 6, which comes from the contiguous subarray [4,-1,2,1].","solution":"def max_subarray_sum(nums): Find the maximum sum of a non-empty contiguous subarray. Args: nums -- list of integers Returns: int -- the maximum sum if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the minimum element in a given list of integers. How can I do this using Python?","solution":"def find_minimum(lst): Returns the minimum element in a given list of integers. if not lst: raise ValueError(\\"List is empty\\") min_element = lst[0] for num in lst: if num < min_element: min_element = num return min_element"},{"question":"Write a function to return the reversed string of a given string \\"str\\" using recursion.","solution":"def reverse_string(s): Returns the reversed string of the given string using recursion. if s == \\"\\": return s else: return reverse_string(s[1:]) + s[0]"},{"question":"Write a function to trim a string to a certain length and append an ellipsis (...) at the end if the original string is longer than the specified length.","solution":"def trim_string(string, length): Trims the input string to the specified length and adds an ellipsis (\\"...\\") if the original string is longer than the specified length. Parameters: string (str): The original string to be trimmed. length (int): The length to trim the string to, including the ellipsis. Returns: str: The trimmed string with ellipsis if it was trimmed. if length < 3: raise ValueError(\\"Length must be at least 3 to accommodate the ellipsis.\\") if len(string) > length: return string[:length - 3] + \\"...\\" return string"},{"question":"Write a function to find the union of elements in two sets represented by lists and return the result as a list. The function should efficiently handle large lists by using the appropriate data structures and algorithms.","solution":"def union_of_sets(list1, list2): Returns the union of elements in two sets represented by lists. Args: list1: A list of elements. list2: A list of elements. Returns: A list containing the union of elements in list1 and list2. # Convert lists to sets to find the union set1 = set(list1) set2 = set(list2) # Use set union operation union_set = set1.union(set2) # Convert the set back to a list return list(union_set)"},{"question":"Write a function to implement an echo server using Python's socket library. An echo server repeats back any data that it receives.","solution":"import socket def run_echo_server(host='localhost', port=12345): Runs an echo server that listens on the specified host and port. Echoes back any data that it receives. with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket: server_socket.bind((host, port)) server_socket.listen() print(f\\"Echo server is running on {host}:{port}\\") while True: conn, addr = server_socket.accept() with conn: print(f\\"Connected by {addr}\\") while True: data = conn.recv(1024) if not data: break conn.sendall(data)"},{"question":"Write a function to find the two numbers that add up to a given target in the form of a tuple.","solution":"def find_two_sum(nums, target): Returns a tuple of two numbers from the given list (nums) that add up to the target. Args: nums (list of int): A list of integers. target (int): The target sum. Returns: tuple of int: A tuple of the two numbers that add up to the target, or None if no such pair exists. num_dict = {} for num in nums: complement = target - num if complement in num_dict: return (complement, num) num_dict[num] = True return None"},{"question":"Write a function to implement a queue using two stacks. The queue should support \`push\`, \`pop\`, and \`peek\` operations. Note that elements are removed in a FIFO (First In First Out) manner.","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def push(self, x: int): Push element x to the back of queue. self.stack1.append(x) def pop(self) -> int: Removes the element from in front of queue and returns that element. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2.pop() def peek(self) -> int: Get the front element. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2[-1] def empty(self) -> bool: Returns whether the queue is empty. return not self.stack1 and not self.stack2"},{"question":"Write a function to remove duplicates from a list of integers and return a new list containing the unique elements in sorted order. For example, if the input list is \`[4, 1, 2, 4, 3, 2, 1]\`, the function should return \`[1, 2, 3, 4]\`.","solution":"def remove_duplicates_and_sort(input_list): Takes a list of integers and returns a new list with unique elements in sorted order. Args: input_list (list of int): The input list containing integers possibly with duplicates. Returns: list of int: The list with unique elements in sorted order. return sorted(set(input_list))"},{"question":"Write a function to calculate the factorial of a given number using recursion. The function should handle both positive and negative inputs, and it should raise a custom exception for invalid input types.","solution":"class InvalidInputError(Exception): Custom exception for invalid input type. pass def factorial(n): Returns the factorial of a given number using recursion. Raises InvalidInputError for invalid input types. if not isinstance(n, int): raise InvalidInputError(\\"Input must be an integer\\") if n < 0: return -1 # As factorial is not defined for negative numbers, returning -1 here elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to sort a list using the insertion sort algorithm.","solution":"def insertion_sort(arr): Sorts a list using the insertion sort algorithm. Args: - arr: List of numbers to be sorted. Returns: - A sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to replace all characters in a string with their corresponding ASCII values.","solution":"def to_ascii_values(s): Replace all characters in a string with their corresponding ASCII values. Args: s (str): input string Returns: str: a string of ASCII values separated by spaces return ' '.join(str(ord(char)) for char in s)"},{"question":"Write a function to find the maximum product for any two distinct elements in a list of integers. The list will not contain any duplicates. The function should be written in Python.","solution":"def max_product(nums): Returns the maximum product of any two distinct elements in a list of integers. Assumes the list contains no duplicates. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") nums.sort() return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a function to check if a given string is a palindrome. (Click here for hints)","solution":"def is_palindrome(s: str) -> bool: Checks if the given string s is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Parameters: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. # Removing non-alphanumeric characters and converting to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Checking if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to detect plagiarism between two files. The function should return a true if the files are a complete plagiarism of each other, and false if they are not. For simplicity, you can consider the files as strings. The function should be case-insensitive.","solution":"def detect_plagiarism(file1, file2): Returns True if the contents of the files (strings) are a complete plagiarism of each other, ignoring case. Otherwise, returns False. return file1.strip().lower() == file2.strip().lower()"},{"question":"Write a function to check if two strings are permutations of each other. Two strings are considered permutations if they contain the same characters in a different order.","solution":"def are_permutations(str1, str2): Checks if two strings are permutations of each other. :param str1: First string :param str2: Second string :return: True if str1 and str2 are permutations of each other, False otherwise # If lengths of the two strings are different, they cannot be permutations. if len(str1) != len(str2): return False # Sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a function to sort an array of integers using the insertion sort algorithm in Python.","solution":"def insertion_sort(arr): Sorts an array of integers in ascending order using the insertion sort algorithm. Parameters: arr (list of int): The list of integers to be sorted. Returns: list of int: The sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to return a list of all prime numbers between two given positive integers start and end (both inclusive). Make sure to include error handling for non-integer inputs and inputs where the start number is greater than the end number.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def primes_between(start, end): Returns a list of all prime numbers between start and end (both inclusive). Handles errors for non-integer inputs and cases where start > end. if not isinstance(start, int) or not isinstance(end, int): raise ValueError(\\"Start and end must be integers.\\") if start > end: raise ValueError(\\"Start number must be less than or equal to end number.\\") primes = [n for n in range(start, end + 1) if is_prime(n)] return primes"},{"question":"Write a function to calculate and return the value of an algebraic expression represented by two arrays. The first array contains the coefficients of the polynomial in ascending order of their powers, and the second array contains the coefficients of another polynomial in descending order of their powers. Assume both arrays are of equal length and contain at least one element. The function should return the coefficients of the product of the two polynomials in ascending order of their powers.","solution":"def polynomial_product(coeff_asc, coeff_desc): Returns the coefficients of the product of two polynomials. coeff_asc: List of coefficients in ascending order of powers coeff_desc: List of coefficients in descending order of powers n = len(coeff_asc) product_coeff = [0] * (2 * n - 1) for i in range(n): for j in range(n): product_coeff[i + j] += coeff_asc[i] * coeff_desc[j] return product_coeff"},{"question":"Write a function to compute both the smallest and the largest values in a list of numbers.","solution":"def smallest_and_largest(numbers): Returns a tuple with the smallest and largest values in a list of numbers. if not numbers: raise ValueError(\\"The list should not be empty\\") smallest = min(numbers) largest = max(numbers) return (smallest, largest)"},{"question":"Write a function to convert a binary tree to a string. The string should represent the tree in a way that is easy to parse and understand. The function should return the string representation of the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def tree_to_str(root): Convert a binary tree to a string representation. The string should represent the tree in a way that is easy to parse and understand. if not root: return \\"\\" result = str(root.val) if root.left or root.right: left_str = tree_to_str(root.left) right_str = tree_to_str(root.right) if left_str or right_str: result += f\\"({left_str})\\" if right_str: result += f\\"({right_str})\\" return result"},{"question":"Write a function to print the first n elements of a Tribonacci sequence. The Tribonacci sequence is a series of numbers where each number is the sum of the three preceding ones, usually starting with 0, 1, 1.","solution":"def tribonacci_sequence(n): Returns the first n elements of a Tribonacci sequence. The Tribonacci sequence starts with 0, 1, 1 and each number is the sum of the three preceding ones. :param n: Number of elements to return :return: List with the first n elements of the Tribonacci sequence if n <= 0: return [] if n == 1: return [0] if n == 2: return [0, 1] if n == 3: return [0, 1, 1] sequence = [0, 1, 1] for i in range(3, n): next_value = sequence[-1] + sequence[-2] + sequence[-3] sequence.append(next_value) return sequence"},{"question":"Write a function to calculate the sum of the first 'n' natural numbers. The function should take an integer 'n' as input and return the sum. If 'n' is less than or equal to zero, the function should return 0. Additionally, the function should be optimized for large values of 'n' to avoid performance issues.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first 'n' natural numbers. If 'n' is less than or equal to zero, returns 0. if n <= 0: return 0 # Using the formula for sum of first n natural numbers: S = n*(n + 1)/2 return n * (n + 1) // 2"},{"question":"Write a function to calculate the sum of a given array of integers. The function should take an array of integers as input and return the sum of all the elements in the array.","solution":"def sum_array(arr): Returns the sum of all elements in the array. :param arr: List of integers :return: Integer sum of all elements in the array return sum(arr)"},{"question":"Write a function to find the shortest common supersequence of two sequences. The common supersequence is a sequence that contains both sequences as subsequences. The shortest common supersequence should have minimum length. Common subsequences of two sequences are those sequences which can be derived from the original sequences by deleting some characters without changing the relative order of the remaining characters. For example, \\"ABCBDAB\\" and \\"BDCAB\\" are subsequences of \\"ABCDABAD\\" and \\"CBBDAB\\" respectively, where \\"BCAB\\" is the common supersequence.","solution":"def shortest_common_supersequence(X, Y): m = len(X) n = len(Y) # Create a table to store lengths of longest common suffices of substrings dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif X[i-1] == Y[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]) # the length of the shortest common supersequence i, j = m, n scs = \\"\\" # Start from the bottom-right corner and one by one # push characters in output string while i > 0 and j > 0: # If current character in X and Y are same, then # current character is part of supersequence if X[i-1] == Y[j-1]: scs += X[i-1] i -= 1 j -= 1 # If current character in X and Y are different elif dp[i-1][j] < dp[i][j-1]: scs += X[i-1] i -= 1 else: scs += Y[j-1] j -= 1 # If X reaches its end, put remaining characters of Y in the result string while i > 0: scs += X[i-1] i -= 1 # If Y reaches its end, put remaining characters of X in the result string while j > 0: scs += Y[j-1] j -= 1 # Reverse the string and return return scs[::-1]"},{"question":"Write a function to find the smallest word in a string.","solution":"def find_smallest_word(s): Returns the smallest word in the given string. In case of a tie, returns the first smallest one found. if not s: return \\"\\" words = s.split() smallest_word = min(words, key=len) return smallest_word"},{"question":"Write a function to return the n-th Fibonacci number in Python. The function should use both iterative and recursive approaches to solve the problem. Additionally, compare the efficiency of these two methods and explain the reasons behind their performance differences.","solution":"def fibonacci_iterative(n): Returns the n-th Fibonacci number using iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def fibonacci_recursive(n): Returns the n-th Fibonacci number using recursive approach. if n <= 0: return 0 elif n == 1: return 1 return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Write a function to reverse a string in Python. There are several approaches to solving this problem. Here, your task is to implement the reversal functionality manually without using slicing or built-in Python reverse functions.","solution":"def reverse_string(s): Manually reverse the characters in the string \`s\`. Args: s (str): The string to reverse. Returns: str: The reversed string. reversed_chars = [] for i in range(len(s) - 1, -1, -1): reversed_chars.append(s[i]) return ''.join(reversed_chars)"},{"question":"Write a function to reverse the words in a string in-place, without allocating extra space. The function should take a single string as input and return the modified string with words reversed. A word is defined as a sequence of non-space characters.","solution":"def reverse_words_in_place(s): Reverses the words in a string in place, without allocating extra space. # Convert the string to a list of characters (This is allowed since it does not count as extra space for the algorithm) char_list = list(s) # Function to reverse a portion of the list in place def reverse(start, end): while start < end: char_list[start], char_list[end] = char_list[end], char_list[start] start += 1 end -= 1 # Reverse the entire list of characters reverse(0, len(char_list) - 1) start = 0 while start < len(char_list): if char_list[start] != ' ': end = start while end < len(char_list) and char_list[end] != ' ': end += 1 # Reverse each word in place reverse(start, end - 1) start = end start += 1 return ''.join(char_list)"},{"question":"Write a function to reverse a singly linked list without using any extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list without using any extra space. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to implement the four basic operations (add, subtract, multiply, divide) in Python. The function should take three parameters: two operand values and the operation to be performed. It should return the result of the operation.","solution":"def basic_operations(a, b, operation): Perform basic arithmetic operations. Parameters: a (float): The first operand. b (float): The second operand. operation (str): The operation to be performed. One of 'add', 'subtract', 'multiply', 'divide'. Returns: float: The result of the operation. Raises: ValueError: If an invalid operation is provided or if division by zero is attempted. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b else: raise ValueError(\\"Invalid operation.\\")"},{"question":"Write a function to find the top 5 most frequent words in a given list.","solution":"from collections import Counter def top_5_frequent_words(word_list): Returns the top 5 most frequent words in the given list. If there are fewer than 5 unique words, returns all of them. count = Counter(word_list) most_common = count.most_common(5) return [word for word, freq in most_common]"},{"question":"Write a function to return the sum of all numbers in an array using recursion.","solution":"def sum_array(arr): Returns the sum of all numbers in an array using recursion. if not arr: return 0 return arr[0] + sum_array(arr[1:])"},{"question":"Write a function to find the k largest numbers in a list of integers using Python. Your function should be able to handle any list and a positive integer k, where 1 <= k <= len(list). The function should return the k largest numbers from the list in descending order.","solution":"def k_largest_numbers(numbers, k): Finds the k largest numbers in a list of integers and returns them in descending order. :param numbers: List of integers :param k: Positive integer representing the count of largest numbers to find :return: List of k largest numbers in descending order if not numbers or k < 1 or k > len(numbers): raise ValueError(\\"Invalid input: k must be between 1 and the length of the list\\") return sorted(numbers, reverse=True)[:k]"},{"question":"Write a function to solve a 2D grid maze problem. The function should take a 2D grid as input and return the shortest path from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. The solution should be returned as a list of coordinates representing the path.","solution":"def shortest_path_maze(grid): from collections import deque # Directions for moving right and down directions = [(0, 1), (1, 0)] rows, cols = len(grid), len(grid[0]) queue = deque([((0, 0), [(0, 0)])]) # Queue stores tuples of (current_position, path_so_far) while queue: (r, c), path = queue.popleft() # Return the path when we reach the bottom-right corner if (r, c) == (rows - 1, cols - 1): return path # Explore neighbors for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < rows and 0 <= cc < cols and grid[rr][cc] == 0: grid[rr][cc] = -1 # Mark as visited queue.append(((rr, cc), path + [(rr, cc)])) return [] # Return an empty list if there's no path"},{"question":"Write a function to find the minimum number of coins needed to make a given value using coins of given denominations. For example, given the value 7 and coin denominations 1, 3, 5, the function should return 3 (3 + 3 + 1).","solution":"def min_coins(value, denominations): Returns the minimum number of coins needed to make the given value using coins of given denominations. # Initialize a list to store the minimum number of coins for each value from 0 to the target value min_coins_needed = [float('inf')] * (value + 1) min_coins_needed[0] = 0 # Zero coins are needed to make the value 0 # Loop through each value from 1 to the target value for v in range(1, value + 1): # Check each denomination for coin in denominations: if coin <= v: # If the current coin can be used to make the value, update the minimum number of coins needed min_coins_needed[v] = min(min_coins_needed[v], min_coins_needed[v - coin] + 1) # Return the result for the target value return min_coins_needed[value] if min_coins_needed[value] != float('inf') else -1"},{"question":"Write a function to check if a given string is a monotonically increasing or decreasing string. A string is considered monotonically increasing if each character is less than or equal to the next character and monotonically decreasing if each character is greater than or equal to the next character.","solution":"def is_monotonic_string(s): Returns True if the string s is either monotonically increasing or decreasing, False otherwise. if not s: return True # An empty string is considered monotonically increasing and decreasing increasing = True decreasing = True for i in range(1, len(s)): if s[i] > s[i-1]: decreasing = False elif s[i] < s[i-1]: increasing = False return increasing or decreasing"},{"question":"Write a function to calculate the arctangent (inverse of tangent) of a given number using natural logarithm (ln) and basic algebra. The function should handle both positive and negative numbers.","solution":"import math def atan(x): Returns the arctangent (inverse of tangent) of x using natural logarithm and basic algebra. The method used is derived from the formula: atan(x) = (1/2) * i * ln((i + x) / (i - x)) where i is the imaginary unit. # The formula assumes use of complex logarithms. if x > 0: return math.atan(x) # for positive x, use math.atan (approximates with series) elif x < 0: return -math.atan(-x) # for negative x, adjust sign accordingly else: return 0 # atan(0) is 0"},{"question":"Write a function to reverse a string in Python, WITHOUT using slicing or the built-in reverse() method. You're not allowed to use recursion either.","solution":"def reverse_string(s): Reverse a string without using slicing, built-in reverse(), or recursion. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to sum all even fibonacci numbers up to a given limit. I'm looking for a Python function that takes a single integer parameter \`limit\`, and returns the sum of all even Fibonacci numbers up to that limit.","solution":"def sum_even_fibonacci(limit): Returns the sum of all even Fibonacci numbers up to the given limit. if limit < 2: return 0 a, b = 0, 1 sum_even = 0 while b <= limit: if b % 2 == 0: sum_even += b a, b = b, a + b return sum_even"},{"question":"Write a function to find the minimum number of coins needed to make a given amount.","solution":"def min_coins(coins, amount): Determines the minimum number of coins needed to make the given amount. Parameters: coins : List[int] List of the values of the coins available. amount : int The desired amount. Returns: int The minimum number of coins needed to make the amount. Returns -1 if it's not possible to make the amount with the given coins. # Create a DP array to store the minimum coins required for each amount up to the target amount dp = [float('inf')] * (amount + 1) # Base case: 0 amount needs 0 coins dp[0] = 0 # Iterate through each coin for coin in coins: # Update the DP array for all amounts that can be reached by adding current coin for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still float('inf'), it means it's not possible to form the amount with given coins return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to swap adjacent characters in a given string.","solution":"def swap_adjacent_characters(s): Swaps adjacent characters in the given string. Parameters: s (str): The input string whose adjacent characters are to be swapped. Returns: str: The string with adjacent characters swapped. char_list = list(s) for i in range(0, len(char_list) - 1, 2): char_list[i], char_list[i + 1] = char_list[i + 1], char_list[i] return ''.join(char_list)"},{"question":"Write a function to find the sum of all numbers in an array that are greater than a given threshold. How would you approach this problem?","solution":"def sum_above_threshold(arr, threshold): Returns the sum of all numbers in the array that are greater than the given threshold. Parameters: arr (list of int/float): The array of numbers. threshold (int/float): The threshold value. Returns: int/float: The sum of all numbers greater than the threshold. return sum(num for num in arr if num > threshold)"},{"question":"Write a function to check if a number is prime. Return \`true\` if the number is prime, and \`false\` otherwise. For example, \`check_prime(7)\` should return \`true\` because 7 is a prime number (it has no divisors other than 1 and itself), while \`check_prime(10)\` should return \`false\` because 10 is not a prime number (it is divisible by 1, 2, 5, and 10).","solution":"def check_prime(number): Checks if the given number is prime. Parameters: number (int): The number to check if it's prime. Returns: bool: True if the number is prime, False otherwise. if number <= 1: return False if number == 2: return True if number % 2 == 0: return False for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return False return True"},{"question":"Write a function to calculate the permutations of a given string","solution":"from itertools import permutations def string_permutations(s): Returns a list of all permutations of the input string s. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to determine if a given number is a power of two. Your function should take an integer as input and return a boolean indicating whether the number is a power of two.","solution":"def is_power_of_two(n): Returns True if n is a power of two, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to parse a string that represents a time duration in the format \\"HH:MM:SS\\" and convert it into the total number of seconds. The function should handle empty input strings by returning 0. If the input string does not match the expected format, the function should return -1.","solution":"def parse_duration(duration_str): Parses a string in the format \\"HH:MM:SS\\" and converts it into the total number of seconds. Returns 0 for empty input strings and -1 for incorrectly formatted strings. if duration_str == \\"\\": return 0 parts = duration_str.split(\\":\\") if len(parts) != 3: return -1 try: hours = int(parts[0]) minutes = int(parts[1]) seconds = int(parts[2]) except ValueError: return -1 if hours < 0 or minutes < 0 or minutes >= 60 or seconds < 0 or seconds >= 60: return -1 total_seconds = hours * 3600 + minutes * 60 + seconds return total_seconds"},{"question":"Write a function to retrieve the intersection of two arrays in Python. You can use any data structures that you find appropriate.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays. The intersection of two arrays is the set of elements that are common to both arrays. :param arr1: List[int] - The first array :param arr2: List[int] - The second array :return: List[int] - The intersection of the two arrays set1 = set(arr1) set2 = set(arr2) intersect = set1.intersection(set2) return list(intersect)"},{"question":"Write a function to sort a given list of numbers using the heap sort algorithm. Explain the steps involved in this algorithm and how it differs from other sorting algorithms.","solution":"def heap_sort(arr): def heapify(arr, n, i): largest = i l = 2 * i + 1 r = 2 * i + 2 if l < n and arr[l] > arr[largest]: largest = l if r < n and arr[r] > arr[largest]: largest = r if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) return arr"},{"question":"Write a function to remove duplicates from an array of numbers and return the new array with unique elements.","solution":"def remove_duplicates(arr): Removes duplicates from the array and returns an array with unique elements. Parameters: arr (list): The input array with numbers. Returns: list: The array with duplicates removed. return list(set(arr))"},{"question":"Write a function to find all the prime numbers within a given range. Your function should take two integers, start and end, as input and return a list of all prime numbers within that range.","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_range(start, end): Returns a list of all prime numbers within the given range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a function to reverse a singly linked list in Python. The function should return the new head of the reversed linked list. The linked list is represented by a class \`ListNode\` with attributes \`val\` (the value of the node) and \`next\` (a pointer to the next node in the list).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses a singly linked list. :param head: ListNode, the head of the linked list to reverse :return: ListNode, the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to determine the average temperature from a list of temperature readings. If the list is empty, return 0 to avoid division by zero.","solution":"def average_temperature(temperatures): Returns the average temperature from a list of temperatures. If the list is empty, returns 0. if not temperatures: return 0 return sum(temperatures) / len(temperatures)"},{"question":"Write a function to find the longest palindromic substring in a given string. If more than one substring exists with the same length, return all such substrings. For example, for the input \\"google\\", the function should return [\\"el\\", \\"l\\", \\"o\\"].","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substrings in the given string. If more than one, returns all such substrings. def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_subs = [] max_len = 0 for i in range(len(s)): # Odd length palindromes substr1 = expand_from_center(i, i) # Even length palindromes substr2 = expand_from_center(i, i + 1) substr = max(substr1, substr2, key=len) if len(substr) > max_len: longest_subs = [substr] max_len = len(substr) elif len(substr) == max_len: longest_subs.append(substr) return longest_subs"},{"question":"Write a function to find the intersection of two sorted arrays. The function should return a list of integers representing the common elements between the two arrays. The function should have a time complexity of O(min(m, n)) where m and n are the lengths of the two arrays.","solution":"def intersect_sorted_arrays(arr1, arr2): Finds the intersection of two sorted arrays. Args: arr1 (list of int): The first sorted array. arr2 (list of int): The second sorted array. Returns: list of int: A list of integers representing the common elements between the two arrays. i, j = 0, 0 intersection = [] while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: i += 1 elif arr1[i] > arr2[j]: j += 1 else: if len(intersection) == 0 or arr1[i] != intersection[-1]: intersection.append(arr1[i]) i += 1 j += 1 return intersection"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number n. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), starting with F(0) = 0 and F(1) = 1.","solution":"def fibonacci(n): Returns a list of Fibonacci sequence numbers up to the n-th number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return [0] elif n == 1: return [0, 1] fib_sequence = [0, 1] for i in range(2, n + 1): fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2]) return fib_sequence"},{"question":"Write a function to sort the elements of an array in descending order and return the sorted array.","solution":"def sort_descending(arr): Sorts the elements of an array in descending order and returns the sorted array. Parameters: arr (list): A list of elements to be sorted. Returns: list: The list of elements sorted in descending order. return sorted(arr, reverse=True)"},{"question":"Write a function to count the occurrences of even and odd numbers in a given list.","solution":"def count_even_odd(numbers): Counts the occurrences of even and odd numbers in a given list. Args: numbers (list): A list of integers. Returns: tuple: A tuple containing two integers: (count_even, count_odd). count_even = 0 count_odd = 0 for num in numbers: if num % 2 == 0: count_even += 1 else: count_odd += 1 return count_even, count_odd"},{"question":"Write a function to calculate the factorial of a given positive integer. The function should handle both small and large integers efficiently. What are the pros and cons of using different data types for storing large factorials?","solution":"def factorial(n): Returns the factorial of a given positive integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to validate if a string is a valid hexadecimal number in Python. A valid hexadecimal number should only contain the digits 0-9 and the letters A-F (case-insensitive).","solution":"import re def is_valid_hexadecimal(s): Validates if the input string s is a valid hexadecimal number. A valid hexadecimal number should only contain the digits 0-9 and the letters A-F (case-insensitive). Parameters: s (str): The string to validate. Returns: bool: True if s is a valid hexadecimal number, False otherwise. if isinstance(s, str): hex_pattern = re.compile(r'^[A-Fa-f0-9]+') return bool(hex_pattern.match(s)) return False"},{"question":"Write a function to perform a depth-first traversal on a binary tree and print the nodes values. How can this be done iteratively using a stack, and how can it be done recursively using a stack?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_iterative(root): Perform a depth-first traversal using an iterative approach with a stack. if root is None: return [] stack = [root] result = [] while stack: node = stack.pop() result.append(node.value) if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result def dfs_recursive(root): Perform a depth-first traversal using a recursive approach with a stack. def dfs(node): if node is None: return [] return [node.value] + dfs(node.left) + dfs(node.right) return dfs(root)"},{"question":"Write a function to calculate the number of different ways to climb a staircase with n steps. You can take either 1 or 2 steps at a time.","solution":"def climb_stairs(n): Returns the number of different ways to climb a staircase with n steps, where you can take either 1 or 2 steps at a time. if n == 1: return 1 elif n == 2: return 2 # dp array to store the number of ways to reach each step dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a function to calculate the maximum area of a rectangle that can be formed within a given binary matrix. The binary matrix contains only 0s and 1s, where 1 represents a unit of the rectangle and 0 represents an empty space. The function should return the area of the largest rectangle found.","solution":"def maximalRectangle(matrix): Calculate the maximum area of a rectangle formed by 1s in a given binary matrix. :param matrix: List of lists containing 0s and 1s :return: Integer representing the area of the largest rectangle if not matrix or not matrix[0]: return 0 max_area = 0 n = len(matrix[0]) heights = [0] * (n + 1) for row in matrix: for i in range(n): if row[i] == \\"1\\": heights[i] += 1 else: heights[i] = 0 stack = [] for i in range(n + 1): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function to determine the frequency of each character in a given string. The function should accept two parameters: the string and a character to search for. It should return the frequency of the character in the string.","solution":"def character_frequency(s, char): Returns the frequency of the character \`char\` in the string \`s\`. Parameters: - s (str): The input string. - char (str): The character whose frequency is to be calculated. Returns: int: Frequency of \`char\` in \`s\`. if len(char) != 1: raise ValueError(\\"The second parameter 'char' must be a single character.\\") return s.count(char)"},{"question":"Write a function to calculate the sum of all elements in a binary search tree (BST). How would you approach this problem, and what steps should your function follow to ensure it traverses the entire tree and accumulates the correct sum?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_bst(root): Calculate the sum of all elements in a binary search tree (BST). :param root: TreeNode, the root of the BST :return: int, sum of all elements if root is None: return 0 # Initialize the sum to the value of the current node result = root.val # Recursively sum the left subtree result += sum_bst(root.left) # Recursively sum the right subtree result += sum_bst(root.right) return result"},{"question":"Write a function to reverse a given list of integers.","solution":"def reverse_list(lst): Reverses the given list of integers. :param lst: List of integers to be reversed. :return: A new list with the elements in reverse order. return lst[::-1]"},{"question":"Write a function to calculate the factorial of a number in Python, handling large numbers by using Python's built-in BigInteger support.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Supports large numbers by using Python's built-in BigInteger support. :param n: Non-negative integer :return: Factorial of n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to calculate the sum of the digits of a given number. If the sum is a single-digit number, return it. If the sum is a multi-digit number, recursively calculate the sum of the digits until a single-digit number is obtained.","solution":"def sum_of_digits(n): Recursively calculates the sum of the digits of a number until a single-digit sum is obtained. if n < 0: n = -n # Working with non-negative numbers for simplicity while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Write a function to level the terrain represented by a 2D array. The function should take a 2D array as input and modify it in-place to make all elements equal, representing a perfectly flat terrain. Here's a function signature: \`def level_terrain(terrain):\`","solution":"def level_terrain(terrain): Levels the terrain represented by a 2D array. All elements in the array will be modified in-place to be equal to the average height. :param terrain: List of lists representing the 2D terrain if not terrain or not terrain[0]: return # Calculate the sum of all elements and the total number of elements total_sum = sum(map(sum, terrain)) num_elements = len(terrain) * len(terrain[0]) # Determine the average height average_height = total_sum // num_elements # Modify the terrain in-place to make all elements equal to the average height for i in range(len(terrain)): for j in range(len(terrain[0])): terrain[i][j] = average_height"},{"question":"Write a function to calculate the sum of an array using recursion. The function should take an array of integers and its size as inputs and return the sum of the elements in the array.","solution":"def sum_array(arr, n): Returns the sum of elements in array \`arr\` of size \`n\` using recursion. if n == 0: return 0 return arr[n-1] + sum_array(arr, n-1)"},{"question":"Write a function to calculate the median of a list of integers in Python. The function should be efficient and handle large datasets.","solution":"def median(nums): Returns the median of a list of integers. nums = sorted(nums) # Sorting the list of numbers n = len(nums) mid = n // 2 if n % 2 == 1: # If the length of the list is odd, return the middle element return nums[mid] else: # If the length of the list is even, return the average of the two middle elements return (nums[mid - 1] + nums[mid]) / 2"},{"question":"Write a function to solve a leetcode problem that involves finding the maximum sum of a subarray, given an array of integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the given list of integers. This is an implementation of Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in any order. For example, \\"listen\\" and \\"silent\\" are anagrams.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other. Args: str1 : str : First string str2 : str : Second string Returns: bool : True if the strings are anagrams, False otherwise return sorted(str1) == sorted(str2)"},{"question":"Write a function to return the total price of an item including tax in Python. The function takes three arguments: the original price, the quantity, and the tax rate.","solution":"def total_price_with_tax(original_price, quantity, tax_rate): Calculate the total price of an item including tax. Parameters: original_price (float): The original price of a single item. quantity (int): The quantity of items being purchased. tax_rate (float): The tax rate as a percentage (e.g., for 5% tax, use 5). Returns: float: The total price including tax. total_price_before_tax = original_price * quantity total_tax = total_price_before_tax * (tax_rate / 100) total_price = total_price_before_tax + total_tax return total_price"},{"question":"Write a function to calculate the \\"Inverted Polynomial Function\\". The function should take a list of coefficients and a value to calculate the polynomial at. The list of coefficients should be passed as a list, where the first element is the coefficient of the highest degree term, and the last element is the constant term.","solution":"def inverted_polynomial(coefficients, x): Calculates the value of the inverted polynomial function for the given coefficients and value x. Parameters: coefficients (list of int/float): List of coefficients, indexed from highest degree to the constant term. x (int/float): Value at which to evaluate the polynomial. Returns: float: The result of the polynomial evaluation. n = len(coefficients) result = 0.0 for i, coeff in enumerate(coefficients): result += coeff * (x ** (n - i - 1)) return result"},{"question":"Write a function to find the pair in an array with the minimum absolute difference between the pair. The array \`nums\` is not sorted, and can contain both positive and negative numbers. Your function should return the pair as a tuple in increasing order, (a, b) where a ≤ b and the absolute difference a - b is minimized.","solution":"def find_min_abs_difference_pair(nums): if len(nums) < 2: return None # Not enough elements to form a pair nums.sort() min_diff = float('inf') min_pair = None for i in range(len(nums) - 1): diff = abs(nums[i] - nums[i + 1]) if diff < min_diff: min_diff = diff min_pair = (nums[i], nums[i + 1]) return min_pair"},{"question":"Write a function to check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in any order, ignoring case sensitivity and spaces.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. Anagrams are strings that contain the same characters in any order, ignoring case sensitivity and spaces. # Remove spaces and change to lower case str1 = str1.replace(' ', '').lower() str2 = str2.replace(' ', '').lower() # Check if sorted versions of the strings are equal return sorted(str1) == sorted(str2)"},{"question":"Write a function to find the maximum subarray sum in an array that contains both positive and negative integers. This is known as Kadane's algorithm. How would you code this in Python?","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum in the given array using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the sum of all digits in an integer. For example, if the integer is 123, the function should return 6 (1 + 2 + 3).","solution":"def sum_of_digits(n): Returns the sum of all digits in an integer n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Write a function to evaluate the prefix expression (also known as Polish notation). A prefix expression is a binary expression where the operator is placed before the operands. For example, the prefix expression \\"+ 3 4\\" represents the addition of 3 and 4. Handle both addition (+) and multiplication (*) operations.","solution":"def eval_prefix(expression): Evaluates a given prefix expression consisting of addition (+) and multiplication (*). :param expression: str. Prefix expression where operators are before operands. :return: int or float. Result of evaluating the prefix expression. tokens = expression.split() stack = [] # Reverse iterate through the tokens for token in reversed(tokens): if token in \\"+*\\": operand1 = stack.pop() operand2 = stack.pop() if token == '+': result = operand1 + operand2 elif token == '*': result = operand1 * operand2 stack.append(result) else: stack.append(int(token) if token.isdigit() else float(token)) return stack[0]"},{"question":"Write a function to rotate an array of integers to the right by k steps. The function should modify the array in-place and not return anything. The function should handle both positive and negative values of k.","solution":"def rotate_array(nums, k): Rotates the array nums to the right by k steps. n = len(nums) k %= n # to handle cases where k is greater than array length nums[:] = nums[-k:] + nums[:-k]"},{"question":"Write a function to compute the nth Fibonacci number. You should use dynamic programming to ensure the solution is efficient.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 fib = [0, 1] for i in range(2, n+1): fib.append(fib[i-1] + fib[i-2]) return fib[n]"},{"question":"Write a function to perform string concatenation. The function should take two string inputs and return the concatenated result. Ensure that your function handles empty strings and strings with spaces.","solution":"def concatenate_strings(str1, str2): Concatenates two input strings and returns the result. :param str1: First string to concatenate. :param str2: Second string to concatenate. :return: Concatenated result of str1 and str2. return str1 + str2"},{"question":"Write a function to sort an array using the bucket sort algorithm. Provide detailed comments to explain each step of the process.","solution":"def bucket_sort(arr): Sorts an array using the bucket sort algorithm. if len(arr) == 0: return arr # 1. Determine the minimum and maximum values in the array min_value = min(arr) max_value = max(arr) # 2. Create buckets bucket_count = len(arr) buckets = [[] for _ in range(bucket_count)] # 3. Distribute the input array values into buckets for num in arr: # Normalize the number between 0 and bucket_count - 1 index = int((num - min_value) / (max_value - min_value + 1) * bucket_count) buckets[index].append(num) # 4. Sort each bucket and concatenate all buckets into arr[] sorted_arr = [] for bucket in buckets: sorted_arr.extend(sorted(bucket)) return sorted_arr"},{"question":"Write a function to find the missing number in an array of integers ranging from 0 to n.","solution":"def find_missing_number(arr, n): Finds the missing number in an array of integers ranging from 0 to n. Args: arr: List[int] - The input array containing integers from 0 to n with one number missing. n: int - The number indicating the range from 0 to n. Returns: int - The missing number in the array. expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a function to determine if a given set of three sides can form a triangle and, if so, determine the type of triangle (equilateral, isosceles, or scalene).","solution":"def triangle_type(a, b, c): Determines if the given sides can form a triangle. Returns \\"Not a triangle\\" if the sides cannot form a triangle. Otherwise, returns \\"Equilateral\\", \\"Isosceles\\", or \\"Scalene\\" based on the triangle type. # Check for triangle inequality if a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\" # Check for triangle types if a == b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"Write a function to sort an array of integers in ascending order using the Bubble Sort Algorithm. The function should take an array of integers as input and return the sorted array. The Bubble Sort Algorithm should iterate through the array, repeatedly swapping the adjacent elements if they are in the wrong order. The process should be repeated until the array is fully sorted.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort Algorithm. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a function to check if a given linked list is a palindrome. The function should return \`True\` if the list is a palindrome and \`False\` otherwise. A linked list is a palindrome if the sequence of values from the head to the tail is the same as from the tail to the head.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Check if a linked list is a palindrome. :param head: ListNode :return: bool # Convert the linked list to a list values = [] current = head while current: values.append(current.val) current = current.next # Check if the list is a palindrome return values == values[::-1]"},{"question":"Write a function to implement the bucket sort algorithm in Python.","solution":"def bucket_sort(arr): Sorts an array using the bucket sort algorithm. if len(arr) == 0: return arr # Determine the range of input values min_value = min(arr) max_value = max(arr) # Create buckets and distribute the elements bucket_count = len(arr) buckets = [[] for _ in range(bucket_count)] for num in arr: index = int((num - min_value) / (max_value - min_value + 1) * bucket_count) buckets[index].append(num) # Sort each bucket and concatenate the results sorted_arr = [] for bucket in buckets: sorted_arr.extend(sorted(bucket)) return sorted_arr"},{"question":"Write a function to reverse a singly linked list. The function should take the head of the list as input and return the new head of the reversed list. Additionally, provide the definition of the \`ListNode\` class and the \`print_list\` function.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the given singly linked list. Args: head (ListNode): The head node of the singly linked list. Returns: ListNode: The new head node of the reversed linked list. prev = None current = head while current is not None: next_node = current.next # temporarily store the next node current.next = prev # reverse the current node's pointer prev = current # move the prev pointer one step forward current = next_node # move the current pointer one step forward return prev # prev will be the new head of the reversed list def print_list(head): Prints the linked list starting from the given head node. Args: head (ListNode): The head node of the singly linked list. current = head while current is not None: print(current.value, end=' -> ' if current.next else '') current = current.next print()"},{"question":"Write a function to remove all repeated letters in a string maintaining the original order of characters.","solution":"def remove_repeated_letters(s): Removes all repeated letters in a string while maintaining the original order of characters. Args: s (str): The input string. Returns: str: The string with all repeated letters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should handle both positive and negative integers, and return an appropriate error message for invalid inputs. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. The factorial of 0 is defined as 1.","solution":"def factorial(n): Calculate the factorial of a number using recursion. Parameters: n (int): The number to calculate the factorial for. Returns: int or str: The factorial of n or an error message for invalid inputs. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0: return \\"Error: Factorial is not defined for negative integers.\\" if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to calculate the factorial of a non-negative integer. The function should return the factorial of the number. If the input is negative, the function should return -1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns -1. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find the maximum depth of a binary tree. The function should be named \`max_tree_depth\` and should take a single argument, which is the root node of the binary tree. Each node in the tree will have a \`value\`, a \`left\` child, and a \`right\` child. The depth of a node is the number of edges from the root node to that node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_tree_depth(root): Returns the maximum depth of the binary tree. if not root: return 0 left_depth = max_tree_depth(root.left) right_depth = max_tree_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to perform mergesort on a list of integers.","solution":"def merge_sort(arr): Perform mergesort on a list of integers. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merge two sorted lists into one sorted list. sorted_list = [] left_index = 0 right_index = 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # Append any remaining elements from left or right list sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"Write a function to return the height of a tree node. The function should take a node as an argument. The node has no left or right children, and its height is considered 0. Otherwise, the height is the maximum height of its children plus one.","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def height(node): Returns the height of the tree node. if node is None: return -1 left_height = height(node.left) right_height = height(node.right) return max(left_height, right_height) + 1"},{"question":"Write a function to calculate the length of a given integer in Python. The function should be able to handle both positive and negative integers.","solution":"def integer_length(n): Returns the number of digits in the given integer n, ignoring the sign of the integer. return len(str(abs(n)))"},{"question":"Write a function to calculate the sum of all numbers in an array where the number is greater than 10 and less than 100.","solution":"def sum_numbers_in_range(arr): Returns the sum of numbers in the array that are greater than 10 and less than 100. return sum(x for x in arr if 10 < x < 100)"},{"question":"Write a function to identify and return the frequency of each word in a given string. The function should ignore case sensitivity and consider words to be separated by spaces.","solution":"from collections import Counter import re def word_frequency(input_string): Returns a dictionary with the frequency of each word in the input string. Words are compared in a case-insensitive manner. Parameters: input_string (str): The string to analyze Returns: dict: A dictionary with words as keys and their frequencies as values # Convert the string to lowercase input_string = input_string.lower() # Find all words using regex words = re.findall(r'bw+b', input_string) # Count the frequency of each word using Counter from collections frequency = Counter(words) return dict(frequency)"},{"question":"Write a function to return the top k elements in an integer array. Find the top k elements in the array [1,5,2,10,3,5,9,12,5,8,2] and k = 3.","solution":"import heapq def top_k_elements(arr, k): Returns the top k elements in an integer array. Parameters: arr (list): List of integers. k (int): Number of top elements to return. Returns: list: List of top k integers from the provided array. if k <= 0: return [] if k >= len(arr): return sorted(arr, reverse=True) return heapq.nlargest(k, set(arr)) # Example usage example_array = [1, 5, 2, 10, 3, 5, 9, 12, 5, 8, 2] k = 3 result = top_k_elements(example_array, k) # Output should be [12, 10, 9]"},{"question":"Write a function to reverse a string in Python without using any built-in functions or slicing. The function should take a single string as input and return the reversed version of the string.","solution":"def reverse_string(s): Reverses the input string without using any built-in functions or slicing. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to classify an integer value into one of three categories: Positive, Negative, or Zero. If the number is less than -10, classify it as \\"Very Negative\\". If the number is between -10 and 0 (inclusive), classify it as \\"Negative\\", If the number is between 1 and 10 inclusive classify it as \\"Positive\\". If the number is equal to 0, classify it as \\"Zero\\". If the number is greater than 10, classify it as \\"Very Positive\\".","solution":"def classify_number(num): Classify the given integer into one of the following categories: - \\"Very Negative\\" if num < -10 - \\"Negative\\" if -10 <= num <= 0 - \\"Zero\\" if num == 0 - \\"Positive\\" if 1 <= num <= 10 - \\"Very Positive\\" if num > 10 if num < -10: return \\"Very Negative\\" elif -10 <= num < 0: return \\"Negative\\" elif num == 0: return \\"Zero\\" elif 1 <= num <= 10: return \\"Positive\\" else: return \\"Very Positive\\""},{"question":"Write a function to calculate the sum of all unique numbers in a given array.","solution":"def sum_of_unique_numbers(arr): Returns the sum of all unique numbers in the given array. num_count = {} for num in arr: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 return sum(num for num, count in num_count.items() if count == 1)"},{"question":"Write a function to count the number of words in a given string. A word is defined as a sequence of characters separated by spaces. If the input string is empty, the function should return 0.","solution":"def count_words(input_string): Returns the number of words in the given string. A word is defined as a sequence of characters separated by spaces. :param input_string: str, the string to count the words in :return: int, the number of words in the input string # Strip the input string to remove leading and trailing spaces stripped_string = input_string.strip() # If the stripped string is empty, return 0 if not stripped_string: return 0 # Split the string by spaces and return the length of the resulting list return len(stripped_string.split())"},{"question":"Write a function to check if an array is primitive or contains non-primitive values.","solution":"def contains_non_primitive(arr): Checks if the provided array contains any non-primitive values. Primitive values include integers, floats, strings, booleans, and None. Parameters: arr (list): The array to check. Returns: bool: True if there are non-primitive values, otherwise False. primitive_types = (int, float, str, bool, type(None)) for element in arr: if not isinstance(element, primitive_types): return True return False"},{"question":"Write a function to merge some overlapping intervals, return the merged intervals. For example, Givent intervals: [[1, 3], [2, 6], [8, 10], [15, 18]], the function should return [[1, 6], [8, 10], [15, 18]]. The intervals are sorted by their start time.","solution":"def merge_intervals(intervals): Merges overlapping intervals. Parameters: intervals (list of list of int): List of intervals where each interval is represented by a list of two integers. Returns: list of list of int: List of merged intervals. if not intervals: return [] merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Write a function to calculate the shortest path in a 2D grid where you can only move up, down, left, or right. The function should return the length of the shortest path using the Breadth-First Search (BFS) algorithm.","solution":"from collections import deque def shortest_path_bfs(grid, start, end): Returns the length of the shortest path in a 2D grid using BFS. :param grid: list of lists representing the grid (0: empty cell, 1: obstacle) :param start: tuple representing the starting coordinates (row, col) :param end: tuple representing the ending coordinates (row, col) :return: the length of the shortest path from start to end if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(r, c): return 0 <= r < rows and 0 <= c < cols and grid[r][c] == 0 queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: row, col, dist = queue.popleft() if (row, col) == end: return dist for d in directions: new_row, new_col = row + d[0], col + d[1] if is_valid(new_row, new_col) and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1 # return -1 if no path exists"},{"question":"Write a function to print all even numbers in an array in Python using recursion.","solution":"def print_even_numbers(arr): Recursively prints all even numbers from the input array. def helper(idx): if idx == len(arr): return if arr[idx] % 2 == 0: print(arr[idx]) helper(idx + 1) helper(0)"},{"question":"Write a function to calculate the factorial of a given number using recursion and ensure it's robust by handling edge cases such as negative inputs.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. If n is negative, it raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to implement the Caesar cipher.","solution":"def caesar_cipher(text, shift): Encrypts the input text using Caesar cipher with the given shift. Parameters: text (str): The text to be encrypted. shift (int): The shift to be used for the Caesar cipher. Returns: str: The encrypted text. result = \\"\\" for char in text: # Encrypt uppercase characters if char.isupper(): result += chr((ord(char) + shift - 65) % 26 + 65) # Encrypt lowercase characters elif char.islower(): result += chr((ord(char) + shift - 97) % 26 + 97) # Don't encrypt non-alphabetical characters else: result += char return result"},{"question":"Write a function to find the minimum cost to connect all the given \`n\` ropes such that the cost of connecting two ropes is the sum of their individual costs. The function should return the total minimum cost.","solution":"import heapq def min_cost_to_connect_ropes(ropes): Returns the minimum cost to connect all given ropes. Args: ropes (list of int): A list containing the lengths of the ropes. Returns: int: The minimum cost to connect all ropes. if not ropes: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"Write a function to find the leftmost digit of an integer \`x\`. The function should return the leftmost digit of \`x\`. For example, if \`x = 12345\`, the function should return \`1\`.","solution":"def leftmost_digit(x): Returns the leftmost digit of an integer x. return int(str(abs(x))[0])"},{"question":"Write a function to calculate the factorial of a number. The function should be named \`calculate_factorial\` and it should take an integer \`n\` as its argument. The function should return the factorial of \`n\`. If \`n\` is 0 or 1, the function should return 1. For negative numbers, the function should return -1, as factorials are not defined for negative numbers.","solution":"def calculate_factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns -1. if n < 0: return -1 elif n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n + 1): factorial *= i return factorial"},{"question":"Write a function to return the nth element of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The sequence begins: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth element in the Fibonacci sequence, where the sequence starts with 0 and 1. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to generate all combinations of k numbers out of n. You may return the answer in any order. For example, given n = 4 and k = 2, one possible output is [[2,4],[3,4],[2,3],[1,2],[1,3],[1,4]]. Please provide a solution in Python.","solution":"from itertools import combinations def combine(n, k): Returns all combinations of k numbers out of n. :param n: Total number of elements :param k: Number of elements in each combination :return: List of all combinations return [list(comb) for comb in combinations(range(1, n + 1), k)]"},{"question":"Write a function to encode a given string using a Caesar cipher with a shift of 3. The function should take a string as input and return the encoded string.","solution":"def caesar_cipher_encode(input_string): Encodes a given string using a Caesar cipher with a shift of 3. Parameters: input_string (str): The input string to encode. Returns: str: The encoded string. encoded_string = [] for char in input_string: if char.isalpha(): shift = 3 if char.islower(): encoded_string.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a'))) elif char.isupper(): encoded_string.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A'))) else: encoded_string.append(char) return ''.join(encoded_string)"},{"question":"Write a function to count the number of unique words in a given text.","solution":"def count_unique_words(text): Returns the number of unique words in the given text. if not text: return 0 words = text.split() unique_words = set(words) return len(unique_words)"},{"question":"Write a function to check if a given string is a palindrome, ignoring spaces, punctuation, and capitalization.","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function to return the maximum depth of a binary tree in a depth-first search (DFS) approach. Given the function signature \`int maxDepth(TreeNode* root)\`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of the binary tree. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to flip a binary tree horizontally. The function should take the root of the tree as input and return the new root of the tree after the horizontal flip.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flip_tree_horizontally(root): Flips the given binary tree horizontally and returns the new root. if root is None: return None # Recursively flip the left and right subtrees left_flipped = flip_tree_horizontally(root.left) right_flipped = flip_tree_horizontally(root.right) # Swap the left and right children root.left = right_flipped root.right = left_flipped return root"},{"question":"Write a function to calculate the sum of all nodes in a binary tree that are at level k from the root. If the level k does not exist in the tree, the function should return 0.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_at_level_k(root, k): Returns the sum of all nodes at level k in a binary tree. if root is None or k < 0: return 0 level = 0 current_level_nodes = [root] while current_level_nodes: if level == k: return sum(node.val for node in current_level_nodes) next_level_nodes = [] for node in current_level_nodes: if node.left: next_level_nodes.append(node.left) if node.right: next_level_nodes.append(node.right) current_level_nodes = next_level_nodes level += 1 return 0"},{"question":"Write a function to check if all characters in a string are the same. Assuming that the input string will not be empty and that will only consist of lowercase letters.","solution":"def are_all_characters_same(s): Checks if all characters in the string are the same. Parameters: s (str): Input string consisting of lowercase letters. Returns: bool: True if all characters in the string are the same, False otherwise. return all(c == s[0] for c in s)"},{"question":"Write a function to reverse the digits of a 32-bit signed integer.","solution":"def reverse_integer(x): Reverse the digits of a 32-bit signed integer. sign = -1 if x < 0 else 1 x *= sign reversed_x = int(str(x)[::-1]) if reversed_x > 2**31 - 1: return 0 return sign * reversed_x"},{"question":"Write a function to sort a linked list using insertion sort. The linked list is represented by a class \`ListNode\` with an integer \`val\` and a pointer to the next node \`next\`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insertionSortList(head: ListNode) -> ListNode: if not head or not head.next: return head sorted_head = ListNode(0) # Dummy node current = head while current: prev_node = sorted_head next_node = sorted_head.next while next_node: if current.val < next_node.val: break prev_node = next_node next_node = next_node.next next_iter = current.next current.next = next_node prev_node.next = current current = next_iter return sorted_head.next"},{"question":"Write a function to find the longest palindromic substring in a given string \`s\`. For example, if the input is \\"babad\\", the output should be \\"bab\\" or \\"aba\\". Note that the palindrome does not need to be the longest possible; it just needs to be the first one found.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string \`s\`. if not s: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(len(s)): # Check for odd-length palindromes palindrome_odd = expand_around_center(i, i) # Check for even-length palindromes palindrome_even = expand_around_center(i, i + 1) # Update longest palindrome longest_palindrome = max(longest_palindrome, palindrome_odd, palindrome_even, key=len) return longest_palindrome"},{"question":"Write a function to find the number of occurrences of a specific pattern within a given text. The function should be case-insensitive and consider overlapping occurrences. Here is an example: If the pattern is \\"abc\\" and the text is \\"abcAbcabc\\", the function should return 3.","solution":"def count_pattern_occurrences(text, pattern): Returns the number of occurrences of a specific pattern within a given text. The search is case-insensitive and considers overlapping occurrences. text = text.lower() pattern = pattern.lower() count = start = 0 while start < len(text): pos = text.find(pattern, start) if pos != -1: count += 1 start = pos + 1 else: break return count"},{"question":"Write a function to reverse the bits of a positive integer.","solution":"def reverse_bits(n): Reverses the bits of a positive integer. Args: n (int): The positive integer to reverse. Returns: int: The integer represented by the reversed bits. result = 0 while n > 0: result = (result << 1) | (n & 1) n >>= 1 return result"},{"question":"Write a function to determine the number of elements in a given list.","solution":"def count_elements(lst): Returns the number of elements in the given list. return len(lst)"},{"question":"Write a function to determine if a given list of strings is sorted in lexicographical order (similar to alphabetical order).","solution":"def is_sorted_lexicographically(lst): Determines if a given list of strings is sorted in lexicographical order. Parameters: lst (list of str): The list of strings to check. Returns: bool: True if the list is sorted in lexicographical order, False otherwise. return lst == sorted(lst)"},{"question":"Write a function to find the median of an array using the heap data structure. Can you also provide the time complexity of the function?","solution":"import heapq def find_median(arr): Returns the median of the array using the heap data structure approach. Time Complexity: O(n log n) min_heap = [] max_heap = [] for num in arr: heapq.heappush(max_heap, -heapq.heappushpop(min_heap, num)) if len(min_heap) < len(max_heap): heapq.heappush(min_heap, -heapq.heappop(max_heap)) if len(min_heap) > len(max_heap): return float(min_heap[0]) else: return (min_heap[0] - max_heap[0]) / 2.0"},{"question":"Write a function to find the difference between the maximum and minimum elements in an array. This function, named \`find_difference\`, should accept an array of integers as input and return the difference as an integer.","solution":"def find_difference(arr): Returns the difference between the maximum and minimum elements in the array. if not arr: raise ValueError(\\"Array should not be empty\\") max_element = max(arr) min_element = min(arr) return max_element - min_element"},{"question":"Write a function to find the maximum of three numbers without using any conditional statements or if-else conditions.","solution":"def max_of_three(a, b, c): Returns the maximum of three numbers without using any conditional statements. return (a if a > b else b) if (a if a > b else b) > c else c"},{"question":"Write a function to calculate the sum of the series 1/1! + 1/2! + 1/3! + ... + 1/n!, where n is a positive integer. The function should use a loop to iterate through the series and calculate the sum.","solution":"def factorial(n): Returns the factorial of n. if n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n+1): result *= i return result def sum_of_series(n): Returns the sum of the series 1/1! + 1/2! + 1/3! + ... + 1/n!. if n < 1: raise ValueError(\\"n must be a positive integer\\") series_sum = 0 for i in range(1, n+1): series_sum += 1 / factorial(i) return series_sum"},{"question":"Write a function to calculate the sum of all elements in a list of integers. The function should be atomic, meaning it should not allow any concurrent modification to the list during its execution.","solution":"def sum_of_list(lst): Returns the sum of all elements in the list of integers. return sum(lst)"},{"question":"Write a function to find the second smallest number in an array. If the array is too small to have a second smallest number, return \`None\`.","solution":"def second_smallest(arr): Returns the second smallest number in an array. If the array is too small to have a second smallest number, return None. if len(arr) < 2: return None unique_elements = list(set(arr)) if len(unique_elements) < 2: return None unique_elements.sort() return unique_elements[1]"},{"question":"Write a function to find the index of the minimum element in a sorted and rotated array. The function should handle arrays where the minimum element might not be unique and can appear multiple times. Additionally, the function should return the index of the first occurrence of the minimum element if there are multiple occurrences.","solution":"def find_min_index(arr): Finds the index of the first occurrence of the minimum element in a sorted and rotated array. low, high = 0, len(arr) - 1 while low < high: mid = (low + high) // 2 # If mid element is smaller than the high element, the minimum is in the left part if arr[mid] < arr[high]: high = mid # Otherwise the minimum is in the right part, including potential duplicates elif arr[mid] > arr[high]: low = mid + 1 else: # when arr[mid] == arr[high], we can't decide the side, reduce high by 1 high -= 1 return low"},{"question":"Write a function to generate all prime numbers up to a given limit using the Sieve of Eratosthenes method. The function should take a single argument, \`limit\`, which represents the upper bound of the range to search for prime numbers (inclusive).","solution":"def sieve_of_eratosthenes(limit): Generates all prime numbers up to a given limit using the Sieve of Eratosthenes method. Parameters: limit (int): The upper bound of the range to search for prime numbers (inclusive). Returns: List[int]: A list of all prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for i in range(2, int(limit**0.5) + 1): if sieve[i]: for j in range(i * i, limit + 1, i): sieve[j] = False return [i for i, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function to print the name of the month from the given month number. The function should handle numbers from 1 to 12, inclusive. If the number is outside this range, the function should print \\"Invalid month number\\".","solution":"def get_month_name(month_number): Returns the name of the month for a given month number. If the month number is outside 1 to 12, returns \\"Invalid month number\\". months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] if 1 <= month_number <= 12: return months[month_number - 1] else: return \\"Invalid month number\\""},{"question":"Write a function to find the nth Fibonacci number in Python using memoization to optimize performance.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to calculate the total of the first 10 multiples of a given number \`n\` and sum them up.","solution":"def sum_first_10_multiples(n): Returns the sum of the first 10 multiples of a given number n. return sum(n * i for i in range(1, 11))"},{"question":"Write a function to find all prime numbers in a given range using the Sieve of Eratosthenes algorithm. The function should return a list of all prime numbers within the range [start, end] (inclusive).","solution":"def sieve_of_eratosthenes(start, end): Returns a list of all prime numbers within the range [start, end] (inclusive). if end < 2: return [] sieve = [True] * (end + 1) sieve[0] = sieve[1] = False for number in range(2, int(end**0.5) + 1): if sieve[number]: for multiple in range(number * number, end + 1, number): sieve[multiple] = False return [num for num in range(start, end + 1) if sieve[num]]"},{"question":"Write a function to calculate the factorial of a given non-negative integer using recursion. The function should handle large inputs by using an iterative approach for efficiency. If the input is less than 0, the function should return None. If the input is 0 or 1, the function should return 1. For positive integers greater than 1, the function should call itself recursively until it reaches the base case.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using an iterative approach. Returns None for negative inputs. if n < 0: return None elif n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the maximum profit from buying and selling stocks. You can complete at most two transactions.","solution":"def max_profit(prices): Calculate the maximum profit with at most two transactions. :param prices: List[int] - List of stock prices :return: int - Maximum profit if not prices: return 0 # Initialize variables for the two buys and sells first_buy, first_sell = float('-inf'), 0 second_buy, second_sell = float('-inf'), 0 for price in prices: # Update the profits and potential buys/sells first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"Write a function to add two linked lists representing non-negative integers, where each node contains a single digit. The least significant digit is at the head of the list, and return the sum as a linked list.","solution":"class ListNode: def __init__(self, x=0, next=None): self.val = x self.next = next def add_two_numbers(l1, l2): Adds two numbers represented by linked lists and returns the sum as a linked list. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 is not None or l2 is not None: x = l1.val if l1 is not None else 0 y = l2.val if l2 is not None else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1 is not None: l1 = l1.next if l2 is not None: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Write a function to convert a given number from its scientific notation to decimal notation. The function should take a string representing the scientific notation number as input and return the decimal value.","solution":"def scientific_to_decimal(sci_str): Converts a given number from its scientific notation to decimal notation. Parameters: sci_str (str): The scientific notation number as a string. Returns: str: The decimal notation of the number. try: # Convert the string to a float number = float(sci_str) # Convert the float to a string without scientific notation decimal_str = format(number, 'f') # Remove trailing zeros and decimal points if not needed if '.' in decimal_str: decimal_str = decimal_str.rstrip('0').rstrip('.') return decimal_str except ValueError: return \\"Invalid Input\\""},{"question":"Write a function to compute the MD5 hash of a given string.","solution":"import hashlib def compute_md5_hash(s): Computes the MD5 hash of a given string. Parameters: s (str): The input string. Returns: str: The MD5 hash of the input string in hexadecimal format. md5_hash = hashlib.md5(s.encode()) return md5_hash.hexdigest()"},{"question":"Write a function to replace NaN (Not a Number) values in a matrix with the mean of each column. The matrix is represented as a 2D list. Assume the matrix is well-formed, with rows of equal length.","solution":"import math def replace_nan_with_mean(matrix): Replaces NaN values in a matrix with the mean of each column. Parameters: matrix (list of lists of floats): The input 2D list (matrix). Returns: list of lists of floats: The matrix with NaN values replaced. if not matrix or not matrix[0]: return matrix num_rows = len(matrix) num_cols = len(matrix[0]) column_sums = [0] * num_cols column_counts = [0] * num_cols for row in matrix: for j in range(num_cols): if not math.isnan(row[j]): column_sums[j] += row[j] column_counts[j] += 1 column_means = [ (column_sums[j] / column_counts[j]) if column_counts[j] > 0 else 0 for j in range(num_cols) ] result_matrix = [] for row in matrix: result_row = [ column_means[j] if math.isnan(row[j]) else row[j] for j in range(num_cols) ] result_matrix.append(result_row) return result_matrix"},{"question":"Write a function to calculate the sum of integers from 1 to \`n\`, without using any arithmetic operators. You can only use bitwise operators and looping constructs.","solution":"def add(a, b): Returns the sum of a and b using bitwise operators. while b != 0: carry = a & b a = a ^ b b = carry << 1 return a def sum_to_n(n): Returns the sum of integers from 1 to \`n\` using bitwise operators and loop constructs. total = 0 num = 1 while num <= n: total = add(total, num) num = add(num, 1) return total"},{"question":"Write a function to calculate the sum of all elements in a list using Python. The function should take a list of integers as input and return the sum of all the elements in the list. If the list is empty, the function should return 0.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of the integers in the list. Returns 0 if the list is empty. return sum(lst)"},{"question":"Write a function to reverse the flow of words in a string, meaning reverse each word and then reverse the entire sequence of words.","solution":"def reverse_flow_of_words(s): Reverses the flow of words in the given string. Each word is reversed and then the entire sequence of words is also reversed. Parameters: s (str): Input string with words. Returns: str: String with the flow of words reversed. words = s.split() reversed_words = [word[::-1] for word in words] reversed_sequence = reversed_words[::-1] result = ' '.join(reversed_sequence) return result"},{"question":"Write a function to perform a binary search on a sorted list. The function should return the index of the target value if it is found in the list, or -1 if the target value is not in the list.","solution":"def binary_search(arr, target): Perform a binary search on a sorted list to find the index of the target value. Parameters: arr (list): A sorted list of elements. target : The element to search for in the list. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find the next perfect square after a given number.","solution":"import math def find_next_perfect_square(n): Returns the next perfect square greater than the given number n. If n is a perfect square, returns the next one. If n is not a perfect square, returns None. if n < 0: return None root = math.isqrt(n) if root * root == n: next_root = root + 1 else: return None return next_root * next_root"},{"question":"Write a function to multiply two matrices. The matrices are both 2D arrays (lists of lists) with the same dimensions.矩阵相乘。 输入两个维度相同的二维数组（列表的列表），返回它们的乘积。你可以使用Python编写这个函数。","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices of the same dimensions. Parameters: matrix1 (list of lists): The first matrix. matrix2 (list of lists): The second matrix. Returns: list of lists: The product of matrix1 and matrix2. # Get the number of rows and columns num_rows = len(matrix1) num_cols = len(matrix1[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(num_cols)] for _ in range(num_rows)] # Multiply the matrices for i in range(num_rows): for j in range(num_cols): result[i][j] = matrix1[i][j] * matrix2[i][j] return result"},{"question":"Write a function to check if the input string is a palindrome. Ignore case sensitivity and spaces. For example, \\"A man a plan a canal Panama\\" should return true.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, ignoring case sensitivity and spaces. cleaned_s = ''.join(c for c in s if c.isalnum()).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function to convert between different number bases. The function should accept three parameters: the number to be converted, the base of the number to be converted from, and the base to be converted to. The function should handle conversions between base 2 to base 36.","solution":"def convert_base(number, from_base, to_base): Converts a number from one base to another. :param number: The number to be converted, in string format. :param from_base: The base of the number to be converted from. :param to_base: The base to be converted to. :return: The converted number, in string format. # Convert the number from the original base to base 10 base_10_number = int(number, from_base) if to_base == 10: return str(base_10_number) # Dictionary for base conversion digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" # Convert the base 10 number to the desired base converted_number = \\"\\" while base_10_number > 0: remainder = base_10_number % to_base converted_number = digits[remainder] + converted_number base_10_number = base_10_number // to_base return converted_number or \\"0\\""},{"question":"Write a function to convert a depth-first search (DFS) traversal of a binary tree into a balanced binary search tree (BST). The conversion should be done iteratively.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(arr): if not arr: return None mid = len(arr) // 2 root = TreeNode(arr[mid]) stack = [(root, arr[:mid], arr[mid+1:])] while stack: node, left_part, right_part = stack.pop() if left_part: mid_left = len(left_part) // 2 node.left = TreeNode(left_part[mid_left]) stack.append((node.left, left_part[:mid_left], left_part[mid_left+1:])) if right_part: mid_right = len(right_part) // 2 node.right = TreeNode(right_part[mid_right]) stack.append((node.right, right_part[:mid_right], right_part[mid_right+1:])) return root def dfs_to_balanced_bst(dfs_order): sorted_vals = sorted(dfs_order) return sorted_array_to_bst(sorted_vals)"},{"question":"Write a function to find the maximum value in an array, without using the built-in max function.","solution":"def find_max(arr): Returns the maximum value in the array. :param arr: List of numbers :return: Maximum number in the list if not arr: raise ValueError(\\"Array is empty\\") max_val = arr[0] for num in arr[1:]: if num > max_val: max_val = num return max_val"},{"question":"Write a function to detect a cycle in a linked list. If a cycle is detected, set the \\"next\\" pointer of one of the nodes in the cycle to \`NULL\` to break the cycle. The function should return the head of the modified list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detect_and_remove_cycle(head): Detects a cycle in the linked list. If found, breaks the cycle by setting the \\"next\\" pointer of one of the nodes in the cycle to NULL. Returns the modified list head. if not head or not head.next: return head slow = head fast = head # Detect cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if slow != fast: # No cycle return head # Cycle detected, now find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next # Now 'slow' (or 'fast') is at the start of the cycle. # Break the cycle start_of_cycle = slow while fast.next != start_of_cycle: fast = fast.next fast.next = None return head"},{"question":"Write a function to perform a depth-first search on a graph. In the function, you'll need to explore each neighbor of a node one by one and move to the next unvisited node. If there are no more unvisited nodes, you can return the graph. How can I implement this in Python?","solution":"def depth_first_search(graph, start): Perform a depth-first search on a graph. :param graph: Dict, represents the adjacency list of the graph :param start: Node to start the DFS from :return: List of nodes in the order they were visited by DFS visited = set() result = [] def dfs(node): if node not in visited: visited.add(node) result.append(node) for neighbor in graph.get(node, []): dfs(neighbor) dfs(start) return result"},{"question":"Write a function to calculate the determinant of a matrix using Python's NumPy library. The function should take a 2D NumPy array as input and return the determinant of the matrix.","solution":"import numpy as np def calculate_determinant(matrix): Returns the determinant of a square matrix. Parameters: matrix (np.ndarray): A 2D NumPy array representing the matrix. Returns: float: The determinant of the matrix. return np.linalg.det(matrix)"},{"question":"Write a function to return the maximum sum we can get for each integer from 1 to n not exceeding n by repeating the available digits from set 1 to m. Digits from the set can be used any number of times.","solution":"def max_sum_repeating_digits(n, m): Returns the maximum sum for each integer from 1 to n not exceeding n by using digits from 1 to m. Digits from the set can be used any number of times. Args: n (int): The upper limit integer. m (int): The maximum digit in the set {1, 2, ..., m}. Returns: dict: dictionary where keys are integers from 1 to n and values are the maximum sums. max_sum_dict = {} for i in range(1, n + 1): num_str = str(i) max_sum = sum(int(digit) for digit in num_str if int(digit) <= m) max_sum_dict[i] = max_sum return max_sum_dict"},{"question":"Write a function to find all the duplicates in an integer array.","solution":"def find_duplicates(arr): Finds all duplicates in an integer array. Parameters: arr (list): A list of integers. Returns: list: A list containing all duplicates found in the input array. seen = set() duplicates = set() for num in arr: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a function to check if the first and last characters of a string are the same. The function should return \`True\` if they are the same, and \`False\` otherwise.","solution":"def first_last_same(s): Returns True if the first and last characters of the string are the same, False otherwise. if len(s) == 0: # Catching the empty string case return False return s[0] == s[-1]"},{"question":"Write a function to find the 'n' largest numbers in a list.","solution":"def find_n_largest_numbers(lst, n): Finds the 'n' largest numbers in a given list. Args: lst (list): The list from which to find the largest numbers. n (int): The number of largest numbers to find. Returns: list: A list containing the 'n' largest numbers from the provided list. if n <= 0: return [] return sorted(lst, reverse=True)[:n]"},{"question":"Write a function to parse a query string (like a URL query string) and return a dictionary with key-value pairs. The function should handle multiple entries with the same key by storing them in a list.","solution":"from urllib.parse import parse_qs def parse_query_string(query_string): Parses a query string into a dictionary with key-value pairs. If a key appears multiple times, the values are stored in a list. Args: query_string (str): The query string to parse. Returns: dict: A dictionary with the parsed key-value pairs. parsed_dict = parse_qs(query_string) # If a key has only one value, we convert the list to a single value. for key in parsed_dict: if len(parsed_dict[key]) == 1: parsed_dict[key] = parsed_dict[key][0] return parsed_dict"},{"question":"Write a function to find the maximum subarray sum in a one-dimensional array of numbers. This is known as Kadane's Algorithm. How would you implement this in Python?","solution":"def max_subarray_sum(nums): Implements Kadane’s Algorithm to find the maximum subarray sum in a 1D array of numbers. :param nums: List[int], a list of integers :return: int, the maximum subarray sum if not nums: return 0 current_max = global_max = nums[0] for n in nums[1:]: current_max = max(n, current_max + n) if current_max > global_max: global_max = current_max return global_max"},{"question":"Write a function to find the intersection of two sets and return the common elements. The function should take two sets as input and return a new set that contains the elements that are common to both sets.","solution":"def find_intersection(set1, set2): Returns a new set that contains the elements that are common to both input sets. return set1 & set2"},{"question":"Write a function to return the average of three numbers in Julia.","solution":"def average_of_three(a, b, c): Returns the average of three numbers. return (a + b + c) / 3"},{"question":"Write a function to find the length of the longest palindromic substring in a given string. I need a detailed explanation with the code in Python.","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in the given string. :param s: Input string :return: Length of the longest palindromic substring n = len(s) if n == 0: return 0 # Starting and ending indices of the longest palindromic substring start, end = 0, 0 for i in range(n): # Check for odd-length palindromes len1 = expand_around_center(s, i, i) # Check for even-length palindromes len2 = expand_around_center(s, i, i + 1) # Current longest palindrome length max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return end - start + 1 def expand_around_center(s, left, right): Expands around the center indices and returns the length of the palindrome. :param s: Input string :param left: Left index :param right: Right index :return: Length of the palindrome while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1"},{"question":"Write a function to find the maximum sum of a subarray in a given 2D array. The subarray must be contiguous within the 2D array.","solution":"def max_sum_subarray_2d(matrix): def max_sum_1d(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum if not matrix or not matrix[0]: return 0 max_sum = float('-inf') rows, cols = len(matrix), len(matrix[0]) for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, max_sum_1d(temp)) return max_sum"},{"question":"Write a function to find the minimum sum of a continuous subarray of a given array of integers. You should return one of the start and end indices of the subarray that gives this minimum sum. If the array contains only positive numbers, return (0, -1) indicating that no subarray with a minimum sum can be found.","solution":"def min_sum_subarray_indices(nums): Finds the start and end indices of the subarray with the minimum sum. If the array contains only positive numbers, returns (0, -1). Parameters: nums (list): List of integers. Returns: tuple: The start and end indices of the subarray with the minimum sum. if all(num > 0 for num in nums): return (0, -1) min_sum = float('inf') current_sum = 0 start_index = 0 min_start_index = 0 min_end_index = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum < min_sum: min_sum = current_sum min_start_index = start_index min_end_index = i if current_sum > 0: current_sum = 0 start_index = i + 1 return (min_start_index, min_end_index)"},{"question":"Write a function to count the number of operations required to sort an array using bubble sort. How many operations are required to sort the array [8, 5, 2, 1, 9]?","solution":"def bubble_sort_operations(arr): Counts the number of operations required to sort an array using bubble sort. An operation is defined as a comparison between two elements. Args: arr (list): List of integers to be sorted Returns: int: Number of operations required to sort the array n = len(arr) operations = 0 for i in range(n-1): for j in range(0, n-i-1): operations += 1 if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return operations # The number of operations required to sort the array [8, 5, 2, 1, 9] ops = bubble_sort_operations([8, 5, 2, 1, 9]) ops"},{"question":"Write a function to determine the minimum number of jumps needed to reach the end of the array.","solution":"def min_jumps(arr): This function returns the minimum number of jumps needed to reach the end of the array starting from the first element. Each element in the array indicates the maximum number of steps that can be taken forward from that element. n = len(arr) if n <= 1: return 0 if arr[0] == 0: return float('inf') # Can't move anywhere jumps = 1 max_reach = arr[0] steps = arr[0] for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return float('inf') steps = max_reach - i return float('inf')"},{"question":"Write a function to calculate the product of all elements in an array without using recursion and without using the built-in function \`reduce\` from the \`functools\` module.","solution":"def product_of_array(arr): Returns the product of all elements in the array. result = 1 for num in arr: result *= num return result"},{"question":"Write a function to reverse the digits of an integer. If reversing the digits causes an overflow, return 0. Assume the input is a 32-bit signed integer.","solution":"def reverse_integer(n): Reverse the digits of a 32-bit signed integer. If reversing the digits causes an overflow, return 0. :param n: int, a 32-bit signed integer :return: int, the reversed integer or 0 if overflow occurs INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = -1 if n < 0 else 1 n *= sign reversed_num = 0 while n != 0: digit = n % 10 n //= 10 if reversed_num > (INT_MAX - digit) // 10: return 0 reversed_num = reversed_num * 10 + digit return sign * reversed_num"},{"question":"Write a function to calculate the sum of absolute differences of all pairs of elements in a list.","solution":"def sum_of_absolute_differences(arr): Calculate the sum of absolute differences of all pairs of elements in the list. :param arr: List of integers. :return: Sum of absolute differences. total_sum = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): total_sum += abs(arr[i] - arr[j]) return total_sum"},{"question":"Write a function to find the four elements in an array that add up to a specific target sum. The function should return a list of all possible quadruples that meet the criteria. The array can contain duplicate elements, and the order of elements in the quadruple does not matter. The solution should consider all possible combinations of elements without changing their order in the original array.","solution":"from itertools import combinations from collections import defaultdict def four_sum(nums, target): Finds all unique quadruples in the list that add up to the target sum. Parameters: nums (list[int]): The list of integers. target (int): The target sum. Returns: list[list[int]]: The list of unique quadruples that add up to the target sum. nums.sort() quadruples = [] n = len(nums) sum_pairs = defaultdict(list) # Store sum of all pairs in a dictionary with the pair indices for i in range(n - 1): for j in range(i + 1, n): sum_pairs[nums[i] + nums[j]].append((i, j)) seen = set() # Find two pairs which add up to the target for key in sum_pairs: if target - key in sum_pairs: for a, b in sum_pairs[key]: for c, d in sum_pairs[target - key]: if a != c and a != d and b != c and b != d: quad = sorted([nums[a], nums[b], nums[c], nums[d]]) quad_tuple = tuple(quad) if quad_tuple not in seen: quadruples.append(quad) seen.add(quad_tuple) return quadruples"},{"question":"Write a function to convert a given string to uppercase. If the string contains non-alphabetic characters, ignore them but keep the case of the alphabetic characters intact. For example, \\"Hello, World!\\" should be converted to \\"HELLO, WORLD!\\".","solution":"def to_uppercase(s): Converts a given string to uppercase, ignoring non-alphabetic characters. return s.upper()"},{"question":"Write a function to find the first repeated character in a string. The function should return the first character that appears more than once. If no character repeats, the function should return null.","solution":"def first_repeated_character(s): Returns the first repeated character in the string s. If no character repeats, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a function to reverse the order of characters in a given string. For example, \\"hello\\" should be reversed to \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a function to sort a list of integers in ascending order using the bubble sort algorithm. The function should take a list of integers as input and return the sorted list.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. Args: arr (list): A list of integers. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to determine the number of unique paths from the top-left corner to the bottom-right corner of a grid. The grid is represented as a 2D array where 0 represents an open path and 1 represents a wall that cannot be traversed. You can only move in four directions (up, down, left, right).","solution":"def unique_paths(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid. from collections import deque # Get the dimensions of the grid m, n = len(grid), len(grid[0]) # Edge case: if start or end is a wall, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Directions array in [delta_row, delta_col] format (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue = deque([(0, 0)]) visited = set((0, 0)) path_count = 0 while queue: x, y = queue.popleft() if x == m-1 and y == n-1: path_count += 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return path_count"},{"question":"Write a function to determine if a given list of integers contains only even numbers. The function should return \`True\` if all numbers are even, otherwise it should return \`False\`.","solution":"def all_even(numbers): Returns True if all numbers in the list are even, otherwise returns False. :param numbers: List of integers :return: Boolean indicating if all numbers are even return all(num % 2 == 0 for num in numbers)"},{"question":"Write a function to print the elements of a matrix in spiral order. The function should take a 2D list of integers as input and return an array of integers representing the elements in spiral order.","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. Args: matrix (list of list of int): A 2D list representing the matrix. Returns: list of int: A list of integers representing the elements in spiral order. result = [] while matrix: # Extract the first row result += matrix.pop(0) # Extract the last elements in each of the remaining rows if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Extract the last row in reverse order if matrix: result += matrix.pop()[::-1] # Extract the first elements in each of the remaining rows from bottom to top if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"Write a function to calculate the sum of the digits of a given number \`n\` that are divisible by 3. For example, if \`n\` is 12345, the function should return 9 because 3 + 6 = 9 (3, 6 are the digits of 12345 that are divisible by 3).","solution":"def sum_of_digits_divisible_by_3(n): Returns the sum of the digits of a given number \`n\` that are divisible by 3. return sum(int(digit) for digit in str(n) if int(digit) % 3 == 0)"},{"question":"Write a function to calculate the sum of the two largest numbers in a list.","solution":"def sum_of_two_largest_numbers(numbers): Returns the sum of the two largest numbers in the list. :param numbers: List of integers :return: Integer sum of the two largest numbers if len(numbers) < 2: raise ValueError(\\"The list must contain at least two numbers\\") # Sorting the list in descending order and summing the first two elements sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"Write a function to calculate the smallest difference between any two integers in an array. Assume the array is sorted. If the array is not sorted, write a function to sort it first before finding the smallest difference.","solution":"def smallest_difference(arr): Returns the smallest difference between any two integers in a sorted array. If the array is not sorted, it sorts the array first. Parameters: arr (list): The list of integers Returns: int: The smallest difference if len(arr) < 2: return 0 # Sort the array arr.sort() # Initialize the smallest difference as a large number min_diff = float('inf') # Find the smallest difference for i in range(len(arr) - 1): diff = arr[i+1] - arr[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Write a function to encode a given string using Caesar cipher with a shift parameter.","solution":"def caesar_cipher(text, shift): Encodes the given string using Caesar cipher with the specified shift. :param text: The input string to encode. :param shift: The number of positions to shift each character. :return: The encoded string. encoded_text = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encoded_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encoded_text.append(encoded_char) else: encoded_text.append(char) return ''.join(encoded_text)"},{"question":"Write a function to find the highest value in an array.","solution":"def find_highest_value(arr): Returns the highest value in the given array. :param arr: A list of numbers :return: The highest number in the list. :raises ValueError: If the array is empty. if not arr: raise ValueError(\\"Array cannot be empty\\") highest = arr[0] for num in arr: if num > highest: highest = num return highest"},{"question":"Write a function to find the missing number in an array containing distinct numbers in the range [0, n]. The array is unsorted.","solution":"def find_missing_number(arr, n): Returns the missing number in the array containing distinct numbers in the range [0, n]. :param arr: List of distinct integers in the range [0, n] with one number missing :param n: Integer representing the upper limit of the range :return: The missing integer expected_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(expected_sum - actual_sum)"},{"question":"Write a function to perform a binary search on a sorted array to find a specific target value. If the target is found, the function should return its index in the array. If the target is not found, the function should return -1. Assume the array is sorted in ascending order and does not contain duplicates.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find a specific target value. If the target is found, returns its index in the array. If the target is not found, returns -1. :param arr: List[int] - Sorted array of integers :param target: int - The target value to find :return: int - The index of the target value in the array or -1 if not found left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 mid_val = arr[mid] if mid_val == target: return mid elif mid_val < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to calculate the sum of all numbers in a list that are greater than a given threshold, but only if the length of the list is greater than a specified length.","solution":"def sum_above_threshold(numbers, threshold, min_length): Calculate the sum of all numbers in the list that are greater than the given threshold, but only if the length of the list is greater than the specified minimum length. :param numbers: List of numbers :param threshold: Threshold number :param min_length: Minimum required length of the list :return: Sum of numbers greater than threshold if condition met, otherwise 0 if len(numbers) > min_length: return sum(num for num in numbers if num > threshold) return 0"},{"question":"Write a function to find all the permutations of a given string. Permutations are the rearrangements of all or part of the characters in a string, where the repetition of characters is allowed if they are included in the original string. The function should return all unique permutations of the input string. For example, given the input string \\"abc\\", the function should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"from itertools import permutations def get_unique_permutations(s): Returns all unique permutations of the input string s. perms = set(''.join(p) for p in permutations(s)) return list(perms)"},{"question":"Write a function to print the first n terms of Fibonacci series. The function should take an integer \`n\` as input and print the n terms of the Fibonacci series.","solution":"def fibonacci(n): Prints the first n terms of the Fibonacci series. Parameters: n (int): The number of terms to print. Returns: list: A list containing the first n terms of the Fibonacci series. if n <= 0: return [] fib_series = [0, 1] while len(fib_series) < n: next_term = fib_series[-1] + fib_series[-2] fib_series.append(next_term) return fib_series[:n]"},{"question":"Write a function to find the maximum element in an array. The function should return the maximum element along with its index in the array.","solution":"def find_max_element(arr): Returns the maximum element and its index in the array. if not arr: raise ValueError(\\"The array is empty\\") max_element = arr[0] max_index = 0 for index, value in enumerate(arr): if value > max_element: max_element = value max_index = index return max_element, max_index"},{"question":"Write a function to find the largest sum of any contiguous subarray of a given list of integers.","solution":"def max_subarray_sum(nums): Finds the largest sum of any contiguous subarray. Args: nums (list of int): List of integers. Returns: int: The largest sum of any contiguous subarray. if not nums: return 0 # If the list is empty, return 0 # Initialize the current sum and max sum to the first element of the list current_sum = max_sum = nums[0] # Iterate over the list starting from the second element for num in nums[1:]: # If current sum is negative, discard it and start a new subarray from the current element current_sum = max(num, current_sum + num) # Update max_sum if current_sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the maximum value in an array of integers \`[2, 3, 5, 1, 8, 9]\`. The function should iteratively solve the problem and not use any built-in functions like \`max()\`.","solution":"def find_max(arr): Returns the maximum value in the array. if not arr: raise ValueError(\\"Array should not be empty\\") max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val"},{"question":"Write a function to find the maximum subarray sum using Kadane's Algorithm. Explain the logic behind the algorithm and provide the code in Python.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum using Kadane's Algorithm. :param nums: List[int] - List of integers :return: int - Maximum subarray sum if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to detect a cycle in a singly linked list. If a cycle is detected, return the node where the cycle begins. If there is no cycle, return \`null\`. Use Floyd's Tortoise and Hare algorithm.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detect_cycle(head): Detects a cycle in a singly linked list using Floyd's Tortoise and Hare algorithm. Returns the node where the cycle begins or None if there is no cycle. if not head or not head.next: return None slow = head fast = head # Step 1: Determine if there's a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # Cycle detected # Step 2: Find the start of the cycle if not fast or not fast.next: return None # No cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to evaluate a postfix expression. A postfix expression, also known as Reverse Polish Notation (RPN) expression, is written with the operator following its operands. For example, the infix expression \\"3 + 4 * 2\\" is written as \\"3 4 2 * +\\". The function should handle basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/). It should also handle the unary minus (-) operator for negation. Assume all numbers in the expression are integers and there are no spaces between operators and operands.","solution":"def evaluate_postfix(expression): Evaluate a postfix expression. stack = [] tokens = expression.split() for token in tokens: if token.isdigit() or (token.startswith('-') and len(token) > 1): # To handle negative numbers stack.append(int(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == '+': stack.append(operand1 + operand2) elif token == '-': stack.append(operand1 - operand2) elif token == '*': stack.append(operand1 * operand2) elif token == '/': stack.append(int(operand1 / operand2)) # Ensure integer division return stack[0]"},{"question":"Write a function to search for a specific value in a sorted list using the binary search algorithm. The list is sorted in ascending order.","solution":"def binary_search(sorted_list, target): Perform binary search to find the target in the sorted_list. Parameters: sorted_list (list): A list of elements sorted in ascending order. target: The value to search for in the list. Returns: int: The index of target in the sorted_list if found, otherwise -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] < target: left = mid + 1 elif sorted_list[mid] > target: right = mid - 1 else: return mid return -1"},{"question":"Write a function to calculate the factorial of a number in Python. Then, use this function to calculate the factorial of 7.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result # Calculate the factorial of 7 factorial_of_7 = factorial(7) factorial_of_7"},{"question":"Write a function to calculate the factorial of a number using iterative and recursive approaches. Compare the efficiency of both approaches for large values of n.","solution":"def factorial_iterative(n): Returns the factorial of a number using an iterative approach. result = 1 for i in range(1, n + 1): result *= i return result def factorial_recursive(n): Returns the factorial of a number using a recursive approach. if n == 0: return 1 return n * factorial_recursive(n - 1)"},{"question":"Write a function to find the maximum profit you can achieve from at most two transactions. You are given an array of prices where the ith element is the price of a given stock on day i. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","solution":"def max_profit(prices): Calculate the maximum profit with at most two transactions. :param prices: List[int] - List of stock prices on each day. :return: int - Maximum profit achievable with at most two transactions. if not prices: return 0 n = len(prices) # Initialize profits for the two transactions first_buy = float('-inf') first_sell = 0 second_buy = float('-inf') second_sell = 0 for price in prices: first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"Write a function to multiply two matrices. You should ensure that the function can handle cases where the number of columns in the first matrix does not match the number of rows in the second matrix. Your function should return an appropriate error message in such cases. Otherwise, it should return the resulting matrix as a 2D list (list of lists) with the dimensions being the number of rows of the first matrix and the number of columns of the second matrix.","solution":"def matrix_multiply(A, B): Multiplies matrix A with matrix B and returns the resulting matrix. Parameters: A (list of list of int/float): The first matrix B (list of list of int/float): The second matrix Returns: list of list of int/float: The resulting matrix after multiplication or str: An error message if the matrices cannot be multiplied. # Get the number of rows and columns in A rows_A = len(A) cols_A = len(A[0]) # Get the number of rows and columns in B rows_B = len(B) cols_B = len(B[0]) # Check if multiplication is possible if cols_A != rows_B: return \\"Error: Number of columns in the first matrix must equal the number of rows in the second matrix.\\" # Initializing the resulting matrix with zeroes result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to count the number of occurrences of a substring within a larger string, including overlapping occurrences. For example, the substring \\"abab\\" occurs three times in \\"ababa\\" (positions 1-2, 2-3, and 3-4).","solution":"def count_overlapping_occurrences(text, substring): Counts the number of overlapping occurrences of a substring within a text string. Parameters: text (str): The larger string in which to search. substring (str): The substring to search for within the larger string. Returns: int: The number of overlapping occurrences of the substring. count = 0 start = 0 while True: start = text.find(substring, start) if start == -1: break count += 1 start += 1 return count"},{"question":"Write a function to check if a given number is a palindrome. A number is a palindrome if it stays the same when its digits are reversed. Also, write a function to check if all digits in the number are even.","solution":"def is_palindrome(num): Returns True if the given number is a palindrome, else False. str_num = str(num) return str_num == str_num[::-1] def all_digits_even(num): Returns True if all the digits in the given number are even, else False. str_num = str(num) return all(int(digit) % 2 == 0 for digit in str_num)"},{"question":"Write a function to generate all possible subsets of a given array of unique elements. Your function should return a list of lists, where each sublist represents a possible subset.","solution":"def generate_subsets(array): Generate all possible subsets of a given array of unique elements. Parameters: array (list): A list of unique elements. Returns: list: A list of lists, where each sublist is a possible subset. result = [] def backtrack(start, path): result.append(path) for i in range(start, len(array)): backtrack(i + 1, path + [array[i]]) backtrack(0, []) return result"},{"question":"Write a function to generate and return the nth Fibonacci sequence.","solution":"def fibonacci(n): Returns the nth Fibonacci sequence as a list. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) return fib_sequence"},{"question":"Write a function to find the maximum element in a given array \`a\`. If the array is empty, the function should return \`None\`. The function should be implemented with constant space complexity and linear time complexity.","solution":"def find_max(a): Returns the maximum element in the array a. If the array is empty, returns None. if not a: # Handle the case where the array is empty return None max_element = a[0] for element in a[1:]: if element > max_element: max_element = element return max_element"},{"question":"Write a function to find the maximum number of operations that can be performed on a binary string such that no two '1's are adjacent. The operation allowed is to flip any bit (changing a '0' to '1' or vice versa).","solution":"def max_operations_to_avoid_adjacent_ones(binary_string): Returns the maximum number of bit flip operations required to ensure that no two '1's are adjacent in the given binary string. operations = 0 n = len(binary_string) i = 0 # Traverse the binary string while i < n: # If current character is '1' and next character is '1', we have to flip one of them if i + 1 < n and binary_string[i] == '1' and binary_string[i + 1] == '1': operations += 1 # Skip the next character to avoid consecutive '1's i += 2 else: i += 1 return operations"},{"question":"Write a function to solve the 0/1 Knapsack problem in Python.","solution":"def knapsack(weight_cap, weights, values): Solves the 0/1 Knapsack problem. Parameters: weight_cap (int): the maximum weight capacity of the knapsack weights (list of int): the weights of the items values (list of int): the values of the items Returns: int: the maximum value that can be carried in the knapsack n = len(weights) dp = [[0 for _ in range(weight_cap + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(weight_cap + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w - weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[n][weight_cap]"},{"question":"Write a function to generate all possible subsets of a set. For example, given the set {1, 2, 3}, the function should return all possible subsets: [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]].","solution":"def generate_subsets(s): Generates all possible subsets of a given set s. subsets = [[]] for element in s: new_subsets = [subset + [element] for subset in subsets] subsets.extend(new_subsets) return subsets"},{"question":"Write a function to print the prime factors of a given number.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. factors = [] # Divide out the factor of 2 first while n % 2 == 0: factors.append(2) n //= 2 # Check for odd factors from 3 onwards factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 if n > 1: factors.append(n) return factors"},{"question":"Write a function to safely divide two integers. If the divisor is zero, return an appropriate error message.","solution":"def safe_divide(a, b): Safely divides two integers. If the divisor is zero, returns an error message. Parameters: a (int): Numerator b (int): Denominator Returns: float or str: The result of division if b is not zero, otherwise an error message. if b == 0: return \\"Error: Division by zero is undefined.\\" return a / b"},{"question":"Write a function to detect a cycle in a directed graph using DFS. The graph is represented as an adjacency list.","solution":"def has_cycle(graph): Detects a cycle in a directed graph using DFS. Parameters: graph (dict): A dictionary where keys are nodes and values are lists of neighbors. Returns: bool: True if there is a cycle, False otherwise. def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False visited = {node: False for node in graph} rec_stack = {node: False for node in graph} for node in graph: if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"Write a function to implement the towers of Hanoi problem in Python. The function should take the number of disks, the source peg, the destination peg, and the auxiliary peg as arguments.","solution":"def towers_of_hanoi(n, source, destination, auxiliary): Solve the towers of Hanoi problem. Parameters: n (int): Number of disks. source (str): The source peg. destination (str): The destination peg. auxiliary (str): The auxiliary peg. Returns: list: A list of moves required to solve the problem. moves = [] def move(n, source, destination, auxiliary): if n == 1: moves.append((source, destination)) return move(n - 1, source, auxiliary, destination) moves.append((source, destination)) move(n - 1, auxiliary, destination, source) move(n, source, destination, auxiliary) return moves"},{"question":"Write a function to determine if a given string \`s\` is an anagram of another string \`t\`. An anagram is a word or phrase formatted by rearranging the letters of another, such as \\"cinema\\", formed from \\"iceman\\".","solution":"def is_anagram(s, t): Determines if string s is an anagram of string t. An anagram is a word or phrase formed by rearranging the letters of another, such as 'cinema', formed from 'iceman'. :param s: str - The first string :param t: str - The second string :return: bool - True if s is an anagram of t, False otherwise return sorted(s) == sorted(t)"},{"question":"Write a function to delete a node from a singly linked list, given only access to that node, not the head of the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def delete_node(node): Delete the given node from the singly linked list. if node is None or node.next is None: raise ValueError(\\"Node to be deleted is None or the last node\\") node.value = node.next.value node.next = node.next.next"},{"question":"Write a function to check if a string contains only digits. You should define a function that takes a string as input and returns \`True\` if all characters in the string are digits, and \`False\` otherwise. The function should not use regular expressions.","solution":"def is_digit_only(s): Checks if the input string contains only digits. Parameters: s (str): The input string to check. Returns: bool: True if the string contains only digits, False otherwise. for char in s: if not char.isdigit(): return False return True"},{"question":"Write a function to find the maximum subarray sum in an integer array. This function should be both efficient and handle edge cases, such as empty arrays and arrays with all negative numbers. Can you provide an optimized solution using Kadane's algorithm?","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum using Kadane's algorithm. Args: nums (List[int]): List of integers. Returns: int: Maximum subarray sum. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if the array contains any duplicates. You should implement this function without using extra space. The input array contains integers between 1 and n, where n is the size of the array.","solution":"def contains_duplicates(nums): Checks if the array contains any duplicates. for i in range(len(nums)): if nums[abs(nums[i]) - 1] < 0: return True nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1] return False"},{"question":"Write a function to merge k sorted linked lists and return the merged list as a sorted list. The function should work for a general case with k lists.","solution":"from heapq import heappush, heappop class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_k_lists(lists): Merge k sorted linked lists and return it as one sorted linked list. :param lists: List of ListNode objects where each ListNode represents the head of a sorted linked list. :return: ListNode object representing the head of the merged sorted linked list. min_heap = [] # Push all list heads to the heap (first node of each list) for i, head in enumerate(lists): if head: heappush(min_heap, (head.val, i, head)) dummy = ListNode() current = dummy while min_heap: value, i, node = heappop(min_heap) current.next = ListNode(value) current = current.next if node.next: heappush(min_heap, (node.next.val, i, node.next)) return dummy.next def list_to_linkedlist(arr): if not arr: return None head = ListNode(arr[0]) current = head for val in arr[1:]: current.next = ListNode(val) current = current.next return head def linkedlist_to_list(head): arr = [] while head: arr.append(head.val) head = head.next return arr"},{"question":"Write a function to implement a simple stack data structure.","solution":"class Stack: A simple stack data structure. def __init__(self): self.items = [] def push(self, item): Add an item to the stack. self.items.append(item) def pop(self): Remove and return the top item from the stack. if not self.is_empty(): return self.items.pop() raise IndexError(\\"pop from empty stack\\") def peek(self): Return the top item from the stack without removing it. if not self.is_empty(): return self.items[-1] raise IndexError(\\"peek from empty stack\\") def is_empty(self): Check if the stack is empty. return len(self.items) == 0 def size(self): Return the number of items in the stack. return len(self.items)"},{"question":"Write a function to reverse a string in-place using Python. In-place means you must not allocate extra space and must modify the input array with O(1) extra memory.","solution":"def reverse_string_in_place(s): Reverses the string in-place. :param s: list of characters left = 0 right = len(s) - 1 while left < right: # Swap characters s[left], s[right] = s[right], s[left] left += 1 right -= 1 return s"},{"question":"Write a function to convert a given integer to a string that represents a floating-point number with two decimal places. If the integer is not representable as a floating-point number, then the function should return \\"Invalid\\".","solution":"def int_to_float_str(n): try: float_num = float(n) return \\"{:.2f}\\".format(float_num) except ValueError: return \\"Invalid\\""},{"question":"Write a function to generate Fibonacci numbers in Python. The function should take two parameters \`a\` and \`b\`, which are the first two numbers of the Fibonacci sequence. It should then generate a Fibonacci sequence up to the \`n\`th term.","solution":"def generate_fibonacci(a, b, n): Generate a Fibonacci sequence starting with a and b up to the nth term. Parameters: a (int): The first Fibonacci number. b (int): The second Fibonacci number. n (int): The number of terms of the sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] if n == 1: return [a] if n == 2: return [a, b] fib_sequence = [a, b] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Write a function to calculate the sum of all nodes in a binary tree, where each node value is an integer. The binary tree is represented as a class with two attributes: \`value\` for the node value and \`children\` for a list of child nodes.","solution":"class TreeNode: def __init__(self, value, children=None): self.value = value self.children = children if children is not None else [] def sum_of_all_nodes(root): Returns the sum of all nodes in the binary tree. if root is None: return 0 total_sum = root.value for child in root.children: total_sum += sum_of_all_nodes(child) return total_sum"},{"question":"Write a function to calculate the median of a list of integers or floats. If the list contains an even number of elements, the function should return the average of the two middle values.","solution":"def median(values): Returns the median of a list of integers or floats. If the list contains an even number of elements, returns the average of the two middle values. if not values: raise ValueError(\\"The list is empty\\") sorted_values = sorted(values) n = len(sorted_values) mid = n // 2 if n % 2 == 0: return (sorted_values[mid - 1] + sorted_values[mid]) / 2 else: return sorted_values[mid]"},{"question":"Write a function to find the product of two polynomials represented as lists of coefficients. The polynomials are in ascending order of power, i.e., \`p(x) = 3 + 2x + 5x^2 + 7x^3\` is represented as \`[3, 2, 5, 7]\`.","solution":"def multiply_polynomials(poly1, poly2): Multiplies two polynomials represented as lists of coefficients. Args: poly1 (list): List of coefficients of the first polynomial. poly2 (list): List of coefficients of the second polynomial. Returns: list: Coefficients of the product polynomial. # Resultant polynomial will have a degree of len(poly1) + len(poly2) - 2 result = [0] * (len(poly1) + len(poly2) - 1) for i, coeff1 in enumerate(poly1): for j, coeff2 in enumerate(poly2): result[i + j] += coeff1 * coeff2 return result"},{"question":"Write a function to calculate the length of the longest palindrome substring in a given string. A palindrome is a string that reads the same backward as forward. For example, \\"racecar\\" is a palindrome. Your function should return the length of the longest such substring. For instance, given the string \\"babad\\", the function should return 3, as \\"aba\\" or \\"bab\\" are the longest palindromic substrings.","solution":"def longest_palindrome_substring_length(s): Returns the length of the longest palindromic substring in the given string s. if not s: return 0 n = len(s) longest_length = 0 for i in range(n): # check for odd length palindromes centered at i length = expand_around_center(s, i, i) longest_length = max(longest_length, length) # check for even length palindromes centered between i and i+1 length = expand_around_center(s, i, i + 1) longest_length = max(longest_length, length) return longest_length def expand_around_center(s, left, right): Expands around the center and returns the length of the palindrome. while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1"},{"question":"Write a function to check if the sum of all elements in an array is零 (Case-sensitive: 返回True).","solution":"def is_sum_zero(arr): Returns True if the sum of all elements in the array is zero, otherwise False. return sum(arr) == 0"},{"question":"Write a function to return the shortest string from a list of strings. If there are multiple strings with the same shortest length, return the first one.","solution":"def shortest_string(strings): Returns the shortest string in the list of strings. If there are multiple strings with the same shortest length, return the first one. if not strings: return None return min(strings, key=len)"},{"question":"Write a function to remove duplicates from a sorted array in-place and return the new length. The solution should be optimized for time complexity and space complexity.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the new length. Args: nums (List[int]): A list of sorted integers. Returns: int: The length of the array after removing duplicates. if not nums: return 0 # Initialize the slow pointer slow = 0 for fast in range(1, len(nums)): if nums[fast] != nums[slow]: slow += 1 nums[slow] = nums[fast] return slow + 1"},{"question":"Write a function to print all possible subsets of a given set.","solution":"def get_subsets(s): Returns all possible subsets of a given set. :param s: A set of elements :return: A list of subsets, where each subset is represented as a set subsets = [[]] for element in s: subsets += [current + [element] for current in subsets] return [set(subset) for subset in subsets]"},{"question":"Write a function to generate the nth term of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth term of the Fibonacci sequence. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return a"},{"question":"Write a function to rotate an array to the right by 'k' positions. If 'k' is greater than the length of the array, the rotation should continue from the beginning. For example, rotating \`[1, 2, 3, 4, 5]\` by \`2\` positions gives \`[4, 5, 1, 2, 3]\`. If \`k\` is greater than the array's length, rotating by 1 position is equivalent to rotating by \`k = length % array.length\`.","solution":"def rotate_array(arr, k): Rotates the array 'arr' to the right by 'k' positions. if not arr: return [] n = len(arr) k = k % n # Normalize k to be within the array length return arr[-k:] + arr[:-k]"},{"question":"Write a function to compute the nth Fibonacci number iteratively. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six Fibonacci numbers are 0, 1, 1, 2, 3, 5.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to calculate the sum of the squares of the elements in a given list.","solution":"def sum_of_squares(lst): Returns the sum of the squares of the elements in the given list. Parameters: lst (list of int/float): The list of numbers to be squared and summed. Returns: int/float: The sum of the squares of the elements in the list. return sum(x ** 2 for x in lst)"},{"question":"Write a function to compare two numbers and return the larger one.","solution":"def compare_numbers(a, b): Compares two numbers and returns the larger one. If they are equal, it returns either one. return a if a >= b else b"},{"question":"Write a function to print all substrings of a given string input.","solution":"def all_substrings(s): Returns a list of all substrings of the given string s. substrings = [] for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.append(s[i:j]) return substrings"},{"question":"Write a function to find the last element of a list.","solution":"def last_element(lst): Returns the last element of the list. Parameters: lst (list): The list from which to find the last element. Returns: The last element of the list or None if the list is empty. if lst: return lst[-1] return None"},{"question":"Write a function to return two elements from the array that has the sum equal to a specific number.","solution":"def two_sum(nums, target): Return indices of the two numbers such that they add up to the specific target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Write a function to simulate a game of rock-paper-scissors in Python. The function should take two parameters: \`player1\` and \`player2\`, each representing the move of one of the players. The function should return a string indicating the result of the game. Possible moves are \\"rock\\", \\"paper\\", and \\"scissors\\".","solution":"def rock_paper_scissors(player1, player2): Simulates a game of rock-paper-scissors. Parameters: player1 (str): move of player 1, must be one of \\"rock\\", \\"paper\\", or \\"scissors\\" player2 (str): move of player 2, must be one of \\"rock\\", \\"paper\\", or \\"scissors\\" Returns: str: result of the game: \\"Player 1 wins!\\", \\"Player 2 wins!\\", or \\"It's a tie!\\" moves = [\\"rock\\", \\"paper\\", \\"scissors\\"] if player1 not in moves or player2 not in moves: return \\"Invalid move!\\" if player1 == player2: return \\"It's a tie!\\" if (player1 == \\"rock\\" and player2 == \\"scissors\\") or (player1 == \\"scissors\\" and player2 == \\"paper\\") or (player1 == \\"paper\\" and player2 == \\"rock\\"): return \\"Player 1 wins!\\" else: return \\"Player 2 wins!\\""},{"question":"Write a function to solve the following problem: You are given two lists of strings that represent two different sets of parentheses. You need to determine if merging these two sets of parentheses will result in a balanced set of parentheses. A balanced set of parentheses is one where every opening parenthesis '(' has a corresponding closing parenthesis ')'. For example, \\"'(()())'\\" is a balanced set of parentheses, while \\"'(()\\" and \\"')(' are not.","solution":"def is_balanced_after_merge(list1, list2): Returns True if merging list1 and list2 results in a balanced set of parentheses, False otherwise. merged_string = \\"\\".join(list1 + list2) balance = 0 for char in merged_string: if char == '(': balance += 1 elif char == ')': balance -= 1 if balance < 0: return False return balance == 0"},{"question":"Write a function to reverse the characters of a string in a given sentence. The function should take a single string as input and return a new string where the characters of each word are reversed, but the words remain in their original order. For example, given the string \\"hello world\\", the function should return \\"olleh dlrow\\".","solution":"def reverse_characters(sentence): Reverses the characters of each word in the sentence. Args: sentence (str): The sentence to reverse the characters of each word. Returns: str: The sentence with each word's characters reversed. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a function to generate all subsets of a given set. Here, a set is represented as a list of integers. For example, if the input is [1, 2], the output should be [[], [2], [1], [1, 2]].","solution":"def generate_subsets(input_set): Generates all possible subsets of the input set. Args: input_set (list): A list of integers representing the set. Returns: list: A list of lists, where each list is a subset of the input set. result = [[]] for num in input_set: new_subsets = [] for subset in result: new_subsets.append(subset + [num]) result.extend(new_subsets) return result"},{"question":"Write a function to convert a string to a list where each element is a sentence from the string. The sentences should be separated by spaces.","solution":"def string_to_sentences(s): Converts a string to a list where each element is a sentence from the string. Sentences are separated by periods, exclamation marks, and question marks. import re # Split the string using regex to match '.', '!', or '?' followed by a whitespace or end of string. sentences = re.split(r'(?<=[.!?])s+', s.strip()) # Remove any empty strings that might arise from trailing punctuation sentences = [sentence for sentence in sentences if sentence] return sentences"},{"question":"Write a function to solve a linear programming problem using the \`scipy.optimize\` library. The function should take two lists as input: \`costs\` which represents the coefficients for the objective function, and \`inequalities\` which is a list of tuples where each tuple contains coefficients for an inequality constraint and the right-hand side value. The function should return the optimized values for the variables that minimize the objective function under the given constraints.","solution":"from scipy.optimize import linprog def solve_linear_programming(costs, inequalities): Solves a linear programming problem. Parameters: - costs: List of coefficients for the objective function. - inequalities: List of tuples where each tuple contains coefficients for an inequality constraint and the right-hand side value. Returns: - List of optimized values for the variables. A_ub = [] # Coefficients for inequality constraints b_ub = [] # Right-hand side values for inequality constraints for inequality in inequalities: A_ub.append(inequality[:-1]) b_ub.append(inequality[-1]) result = linprog(c=costs, A_ub=A_ub, b_ub=b_ub, method='highs') if result.success: return result.x.tolist() else: raise ValueError(\\"Linear programming problem could not be solved.\\")"},{"question":"Write a function to determine the sum of all distinct prime factors of the factorial of a given number.","solution":"def sum_of_distinct_prime_factors(n): Return the sum of all distinct prime factors of the factorial of a given number n. :param n: int, the input number :return: int, the sum of all distinct prime factors of n! def sieve_of_eratosthenes(limit): primes = [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for num in range(2, limit + 1): if is_prime[num]: primes.append(num) for multiple in range(num * num, limit + 1, num): is_prime[multiple] = False return primes if n < 2: return 0 prime_factors = sieve_of_eratosthenes(n) return sum(prime_factors)"},{"question":"Write a function to implement the Caesar cipher encryption algorithm. The function should take two parameters: the plaintext message and the shift amount. The Caesar cipher shifts each letter in the plaintext by a specified number of positions down the alphabet, wrapping around to the beginning if necessary. For example, with a shift of 3, 'A' would become 'D', 'B' would become 'E', etc., and 'Z' becomes 'C'. Non-alphabetic characters should remain unchanged.","solution":"def caesar_cipher(plaintext, shift): Encrypts the plaintext using Caesar cipher algorithm with the specified shift. Parameters: plaintext (str): The text to be encrypted. shift (int): The number of positions to shift each letter. Returns: str: The encrypted text. encrypted_text = [] for char in plaintext: if char.isalpha(): if char.isupper(): shifted = (ord(char) - ord('A') + shift) % 26 + ord('A') else: shifted = (ord(char) - ord('a') + shift) % 26 + ord('a') encrypted_text.append(chr(shifted)) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Write a function to determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward, ignoring leading zeros, spaces, and punctuation.","solution":"def is_palindrome_number(num): Check if an integer is a palindrome. Args: num (int): The integer to be checked. Returns: bool: True if the integer is a palindrome, False otherwise. # Convert the number to a string num_str = str(num) # Check if the string reads the same backward as forward return num_str == num_str[::-1]"},{"question":"Write a function to determine if a number is divisible by both 3 and 5.","solution":"def is_divisible_by_3_and_5(n): Determines if the number n is divisible by both 3 and 5. Parameters: n (int): The number to check. Returns: bool: True if n is divisible by both 3 and 5, False otherwise. return n % 3 == 0 and n % 5 == 0"},{"question":"Write a function to convert a string to an integer in Python without using the built-in int() function. Consider both positive and negative integers, and also handle leading and trailing spaces.","solution":"def string_to_int(s): Converts a given string to an integer without using the built-in int() function. Handles leading and trailing spaces and both positive and negative integers. s = s.strip() # Remove leading and trailing spaces if not s: raise ValueError(\\"Input string is empty\\") is_negative = False start_index = 0 # Check for the sign if s[0] == '-': is_negative = True start_index = 1 elif s[0] == '+': start_index = 1 result = 0 for char in s[start_index:]: if char < '0' or char > '9': raise ValueError(f\\"Invalid character found: {char}\\") result = result * 10 + (ord(char) - ord('0')) return -result if is_negative else result"},{"question":"Write a function to find the number of paths in a grid. You can only move either down or right at any point in time, starting from the top left corner and ending at the bottom right corner of the grid. The grid is represented as a 2D array, and the value at each cell indicates whether it is an obstacle (1) or not (0). If a cell has a value of 1, it means the path cannot cross it.","solution":"def uniquePathsWithObstacles(obstacleGrid): Find the number of unique paths in a grid from top left to bottom right, only moving down or right, taking obstacles into account. m, n = len(obstacleGrid), len(obstacleGrid[0]) if obstacleGrid[0][0] == 1 or obstacleGrid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to calculate the sum of all numbers in an array that are divisible by a given number \`k\`.","solution":"def sum_divisible_by_k(arr, k): Calculates the sum of all numbers in an array that are divisible by a given number k. Parameters: arr (list of int): The array of integers. k (int): The divisor. Returns: int: The sum of all numbers in the array that are divisible by k. return sum(x for x in arr if x % k == 0)"},{"question":"Write a function to calculate the sum of all prime numbers in a given list of integers.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(numbers): Returns the sum of all prime numbers in a given list of integers. return sum(num for num in numbers if is_prime(num))"},{"question":"Write a function to create a random string of a specified length in Python. The string should consist of uppercase letters, lowercase letters, and digits.","solution":"import random import string def generate_random_string(length): Generates a random string of the specified length consisting of uppercase letters, lowercase letters, and digits. :param length: Length of the random string to generate :type length: int :return: Random string :rtype: str if length < 1: raise ValueError(\\"Length must be at least 1\\") characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Write a function to find the number of \\"lucky triplets\\" in an array. A lucky triplet is defined as a sequence of three elements (a, b, c) where a < b < c and a % b == 0 and b % c == 0.","solution":"def count_lucky_triplets(arr): Returns the number of lucky triplets in the array. A \\"lucky triplet\\" is defined as a sequence of three elements (a, b, c) where a < b < c and a % b == 0 and b % c == 0. n = len(arr) if n < 3: return 0 # Initialize count of triplets count = 0 # Iterate through each combination of elements for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[i] < arr[j] < arr[k] and arr[k] % arr[j] == 0 and arr[j] % arr[i] == 0: count += 1 return count"},{"question":"Write a function to multiply two numbers without using the '*' operator or any direct multiplication functions. You should use only bits and basic arithmetic operations available in Python such as addition and bit-shift operations.","solution":"def multiply(a, b): Multiplies two integers a and b without using the '*' operator by using bitwise and addition operations. Args: a (int): the first integer. b (int): the second integer. Returns: int: the product of a and b. result = 0 negative_result = (a < 0) ^ (b < 0) # Check if the result should be negative a, b = abs(a), abs(b) while b > 0: if b & 1: result += a a <<= 1 b >>= 1 return -result if negative_result else result"},{"question":"Write a function to calculate the sum of odd numbers in a given list of integers. The function should be designed to handle a list of integers and return the sum of all odd numbers found within the list.","solution":"def sum_of_odd_numbers(numbers): Returns the sum of all odd numbers in the given list of integers. return sum(n for n in numbers if n % 2 != 0)"},{"question":"Write a function to traverse a binary tree using the depth-first search (DFS) pre-order traversal technique. The function should return the values of the nodes in the following order: root, left child, right child.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_preorder(root): Traverse the binary tree using DFS pre-order traversal. Args: root (TreeNode): root of the binary tree. Returns: List[int]: list of values in pre-order. result = [] def traverse(node): if node: result.append(node.value) traverse(node.left) traverse(node.right) traverse(root) return result"},{"question":"Write a function to check if it is possible to make the array monotonic by replacing any number of elements with any other number.","solution":"def can_make_array_monotonic(arr): Checks if it is possible to make the array monotonic by replacing any number of elements with any other number. if not arr: return False n = len(arr) if n == 1: return True def is_sorted(array): return all(array[i] <= array[i + 1] for i in range(n - 1)) return is_sorted(sorted(arr))"},{"question":"Write a function to find the first non-repeating character in a given string. If all characters are repeating, return an underscore ('_').","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If all characters are repeating, returns an underscore ('_'). # Dictionary to store the count of each character char_count = {} # Iterate over the string and populate the dictionary with character counts for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Iterate over the string again to find the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character is found, return '_' return '_'"},{"question":"Write a function to slice an array using slicing in Python. The function should take in an array and two indices, the start and end indices of the slice. The function should return the sliced array.","solution":"def slice_array(arr, start, end): Returns a slice of the array from start index to end index (not inclusive of end). Parameters: arr (list): The input array to be sliced. start (int): The start index of the slice. end (int): The end index of the slice (not inclusive). Returns: list: The sliced array. return arr[start:end]"},{"question":"Write a function to check if a given string contains only numbers.","solution":"def is_numeric(string): Checks if the given string contains only numbers. Parameters: string (str): The string to check. Returns: bool: True if the string contains only numbers, False otherwise. return string.isdigit()"},{"question":"Write a function to check if a string is a palindrome without using additional space. You can assume the string consists of only lowercase English letters and is not empty.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. A string is a palindrome if it reads the same backward as forward. Parameters: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function to remove all entries from a dictionary where the value is \`None\`.","solution":"def remove_none_entries(d): Removes all entries from the dictionary where the value is None. Parameters: d (dict): The dictionary from which to remove None entries. Returns: dict: A new dictionary with no None values. return {k: v for k, v in d.items() if v is not None}"},{"question":"Write a function to reverse a string in Python. The function should not use any built-in functions for string manipulation. You can only use basic string operations like indexing and concatenation.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to reverse a string in Python. How can it be done efficiently and what considerations should be made to ensure it handles different edge cases?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to find the second largest number in an array of integers. What is the time complexity of this function?","solution":"def find_second_largest(nums): Returns the second largest number in an array of integers. If the array contains less than 2 unique numbers, return None. if len(nums) < 2: return None first, second = float('-inf'), float('-inf') for num in nums: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a function to remove characters at even indices from a string.","solution":"def remove_even_indices(s): Removes characters at even indices from the string s. return ''.join(char for i, char in enumerate(s) if i % 2 != 0)"},{"question":"Write a function to find the number of unique characters in a given string. The function should ignore case sensitivity and return the count of distinct characters.","solution":"def count_unique_characters(s): Returns the number of unique characters in the given string, ignoring case sensitivity. s = s.lower() unique_chars = set(s) return len(unique_chars)"},{"question":"Write a function to check if a given string input has unique characters (All English alphabets).","solution":"def has_unique_characters(s): Checks if the string s has all unique characters. # Create a set to store characters we have seen seen_characters = set() # Iterate over each character in the string for char in s: # If character is already in the set, string does not have all unique characters if char in seen_characters: return False # Add the character to the set seen_characters.add(char) # If we complete iteration without finding duplicates, string has all unique characters return True"},{"question":"Write a function to identify the most frequent number in an array. If there are multiple numbers with the same highest frequency, the function should return a list of all those numbers.","solution":"from collections import Counter def most_frequent_numbers(arr): Returns a list of the most frequent numbers in the array. if not arr: return [] count = Counter(arr) max_frequency = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_frequency] return most_frequent"},{"question":"Write a function to reverse the digits of an integer. If reversing the digits causes an overflow, return 0. Consider overflow in 32-bit signed integer range: or \\"2147483647\\". For example, given the integer 123, the reversed integer is 321. If the reversed integer overflows, return 0.","solution":"def reverse_integer(x): Reverses the digits of a 32-bit signed integer. If reversing the digits causes an overflow, return 0. MIN_INT, MAX_INT = -2**31, 2**31 - 1 neg = x < 0 x = abs(x) reversed_x = int(str(x)[::-1]) if reversed_x > MAX_INT or -reversed_x < MIN_INT: return 0 return -reversed_x if neg else reversed_x"},{"question":"Write a function to generate all possible subsets of a given set of integers.","solution":"from itertools import chain, combinations def generate_subsets(s): Generate all possible subsets of a given set of integers. :param s: List[int] - a list of integers :return: List[List[int]] - a list of lists, where each list is a subset of the given list of integers return list(map(list, chain.from_iterable(combinations(s, r) for r in range(len(s)+1))))"},{"question":"Write a function to delete a node in a Binary Search Tree (BST) without using a parent pointer. The function should return the root of the BST after the deletion.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def delete_node(root, key): Deletes a node with the given key in a Binary Search Tree (BST) and returns the root of the new BST. if root is None: return root # If the key to be deleted is smaller than the root's key, then it lies in the left subtree if key < root.key: root.left = delete_node(root.left, key) # If the key to be deleted is greater than the root's key, then it lies in the right subtree elif key > root.key: root.right = delete_node(root.right, key) # If key is same as root's key, then this is the node to be deleted else: # Node with only one child or no child if root.left is None: return root.right elif root.right is None: return root.left # Node with two children, get the inorder successor (smallest in the right subtree) temp = min_value_node(root.right) # Copy the inorder successor's content to this node root.key = temp.key # Delete the inorder successor root.right = delete_node(root.right, temp.key) return root def min_value_node(node): Given a non-empty binary search tree, return the node with minimum key value found in that tree. current = node while current.left is not None: current = current.left return current"},{"question":"Write a function to check if a given list of integers is sorted in non-decreasing order. If not, then sort the list and return the sorted list. Otherwise, return the list as it is.","solution":"def check_and_sort(lst): Checks if the list is sorted in non-decreasing order. If not, sorts the list and returns it, otherwise returns the list as is. Parameters: lst (list): List of integers to check and potentially sort. Returns: list: The original list if sorted, otherwise the sorted list. if lst != sorted(lst): return sorted(lst) return lst"},{"question":"Write a function to perform Fisher-Yates shuffle on an array.","solution":"import random def fisher_yates_shuffle(arr): Perform Fisher-Yates shuffle on an array. n = len(arr) for i in range(n - 1, 0, -1): j = random.randint(0, i) arr[i], arr[j] = arr[j], arr[i] return arr"},{"question":"Write a function to print the elements of a list in reverse order without using recursion.","solution":"def print_list_in_reverse(lst): Prints the elements of a list in reverse order without using recursion. for element in reversed(lst): print(element)"},{"question":"Write a function to convert a decimal number to binary in Python. The function should take a single integer argument and return its binary representation as a string. If the input number is 0, the function should return \\"0\\". To handle decimal numbers with more than 30 bits, use the \`BigInteger\` data type.","solution":"def decimal_to_binary(n): Converts a decimal number to binary representation. Args: n : int : Decimal number to be converted to binary Returns: str : Binary representation of the decimal number if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"Write a function to return the common prefix of two strings. For example, the common prefix of \\"flower\\" and \\"flow\\" is \\"flow\\".","solution":"def common_prefix(str1, str2): Returns the common prefix of two strings. min_length = min(len(str1), len(str2)) result = [] for i in range(min_length): if str1[i] == str2[i]: result.append(str1[i]) else: break return ''.join(result)"},{"question":"Write a function to return the first word of a given string.","solution":"def first_word(s): Returns the first word of the given string s. words = s.split() return words[0] if words else \\"\\""},{"question":"Write a function to check if an array is sorted in increasing order or decreasing order.","solution":"def check_sorted(arr): Returns 'increasing' if the array is sorted in increasing order, 'decreasing' if the array is sorted in decreasing order, and 'neither' if the array is not sorted. if arr == sorted(arr): return 'increasing' elif arr == sorted(arr, reverse=True): return 'decreasing' else: return 'neither'"},{"question":"Write a function to calculate the length of the longest continuous subarray where the difference between the maximum and minimum element is at most 1. You can assume that the array has at least one element.","solution":"def longest_subarray(arr): Returns the length of the longest continuous subarray where the difference between the maximum and minimum element is at most 1. if not arr: return 0 max_len = 1 start = 0 while start < len(arr): current_min = arr[start] current_max = arr[start] end = start while end < len(arr) and abs(arr[end] - current_min) <= 1 and abs(arr[end] - current_max) <= 1: current_min = min(current_min, arr[end]) current_max = max(current_max, arr[end]) end += 1 max_len = max(max_len, end - start) start += 1 return max_len"},{"question":"Write a function to convert a decimal number to binary in Python. The function should also validate that the input is a valid decimal number. If the input is not a decimal number, the function should return an error message.","solution":"def decimal_to_binary(num): Converts a decimal number to binary. Parameters: num (int): A valid decimal number. Returns: str: Binary representation of the decimal number. if not isinstance(num, int): return \\"Error: Input is not a valid decimal number.\\" return bin(num)[2:]"},{"question":"Write a function to compute the nth triangular number using a loop. The function should take an integer n as input and return the nth triangular number.","solution":"def triangular_number(n): Computes the nth triangular number using a loop. Parameters: n (int): The position of the triangular number to compute. Returns: int: The nth triangular number. if n <= 0: return 0 triangular_num = 0 for i in range(1, n + 1): triangular_num += i return triangular_num"},{"question":"Write a function to compute the sum of all elements in a given list of integers. The function should return an integer.","solution":"def sum_of_elements(lst): Computes the sum of all elements in a given list of integers. Args: lst (list of int): List of integers to be summed up. Returns: int: The sum of all elements in the list. return sum(lst)"},{"question":"Write a function to insert a node at the beginning of a singly linked list in Python.","solution":"class ListNode: Node of a singly linked list. def __init__(self, value=0, next=None): self.value = value self.next = next def insert_at_beginning(head, value): Insert a new node with the given value at the beginning of the singly linked list. Parameters: head (ListNode): The head of the singly linked list. value (int): The value of the new node. Returns: ListNode: The new head of the singly linked list. new_node = ListNode(value) new_node.next = head return new_node"},{"question":"Write a function to reverse a string in Python, and discuss the time complexity of the function.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1] # Time Complexity: # The time complexity of this function is O(n) where n is the length of the input string. # This is because slicing operation internally iterates through the string."},{"question":"Write a function to find the sum of overlapping binary strings in two given arrays of binary strings. The function should take in two arrays of binary strings as input and return the sum of the overlapping bits in both arrays. For example, given the arrays [\\"010\\", \\"101\\"], the function should return 3, as there are 3 overlapping bits in the two binary strings.","solution":"def sum_of_overlapping_bits(arr1, arr2): Returns the sum of overlapping bits in two given arrays of binary strings. if not arr1 or not arr2: return 0 # Find the shorter length between two arrays min_length = min(len(arr1), len(arr2)) overlap_sum = 0 for i in range(min_length): binary_str1 = arr1[i] binary_str2 = arr2[i] # Calculate overlapping bits for each string for bit1, bit2 in zip(binary_str1, binary_str2): if bit1 == bit2: overlap_sum += 1 return overlap_sum"},{"question":"Write a function to find the mode of a given list of integers, where the mode is the number that appears most frequently in the list. If there are multiple modes, return all of them in ascending order.","solution":"from collections import Counter def find_modes(numbers): Given a list of integers, return the mode(s). If multiple modes exist, return them in ascending order. :param numbers: List[int] :return: List[int] if not numbers: return [] # Count the frequency of each number frequency = Counter(numbers) # Find the maximum frequency max_freq = max(frequency.values()) # Find all numbers with the maximum frequency modes = [number for number, freq in frequency.items() if freq == max_freq] # Return the modes in ascending order return sorted(modes)"},{"question":"Write a function to find the sum of all numbers in an array except the minimum and maximum value in the array. If the array has fewer than three elements, return -1.","solution":"def sum_except_min_max(arr): Returns the sum of all numbers in the array except the minimum and maximum values. If the array has fewer than three elements, return -1. if len(arr) < 3: return -1 min_val = min(arr) max_val = max(arr) return sum(x for x in arr if x != min_val and x != max_val)"},{"question":"Write a function to reverse a string iteratively and recursively.","solution":"def reverse_string_iteratively(s): Reverses a string iteratively. return ''.join(reversed(s)) def reverse_string_recursively(s): Reverses a string recursively. if len(s) == 0: return s else: return s[-1] + reverse_string_recursively(s[:-1])"},{"question":"Write a function to find the number of 1 bits in a given integer.","solution":"def count_one_bits(n): Returns the number of 1 bits in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Write a function to create a new list by appending the first \`n\` elements from \`list1\` to the end of \`list2\`.","solution":"def append_first_n_elements(list1, list2, n): Creates a new list by appending the first n elements from list1 to the end of list2. Parameters: list1 (list): The first list to get elements from. list2 (list): The second list to which elements will be appended. n (int): The number of elements to take from list1. Returns: list: A new list with the first n elements from list1 appended to the end of list2. return list2 + list1[:n]"},{"question":"Write a function to detect keywords in a Python code snippet. For example, if the keyword \\"def\\" is detected, it should return True. If other keywords like \\"import\\", \\"class\\", \\"print\\", etc. are detected, it should also return True. However, if no keyword from the list is detected, it should return False.","solution":"import keyword def detect_keywords(code_snippet): Detects any of the Python keywords in a given code snippet. Parameters: code_snippet (str): The Python code snippet to check for keywords. Returns: bool: True if any Python keyword is detected, False otherwise. words = code_snippet.split() for word in words: if keyword.iskeyword(word): return True return False"},{"question":"Write a function to find the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence starts: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the maximum area of a rectangle in a histogram where the width of each bar is 1.","solution":"def largestRectangleArea(heights): Given a list of non-negative integers representing the heights of bars in a histogram where the width of each bar is 1, returns the area of the largest rectangle in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar 'h' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with # each popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function to replace all occurrences of a character 'x' in the string 's' with a new character 'y'. The function should also handle cases where 'x' and 'y' are the same character.","solution":"def replace_character(s, x, y): Replace all occurrences of character x in string s with character y. if x == y: return s # No change needed if x and y are the same return s.replace(x, y)"},{"question":"Write a function to find the intersection of two integer arrays. The function should return an array of integers that are common to both arrays.","solution":"def intersection(arr1, arr2): Returns an array of integers that are common to both arrays arr1 and arr2. set1 = set(arr1) set2 = set(arr2) intersected_set = set1.intersection(set2) return list(intersected_set)"},{"question":"Write a function to reverse a singly linked list in Python, without using any additional data structures (like lists, tuples, etc.). The function should return the new head of the reversed list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head of the singly linked list :return: ListNode, the new head of the reversed singly linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to multiply all elements in an array but exclude the element at a specific index (K). The array should contain only positive integers. The function should return the product of the array elements excluding the Kth element.","solution":"def multiply_excluding_index(arr, k): Multiplies all elements in the array except the element at index k. Assumes all elements in array are positive integers. :param arr: List[int] - Array of positive integers :param k: int - Index to be excluded from multiplication :return: int - Product of the array elements excluding the element at index k if not 0 <= k < len(arr): raise ValueError(\\"Index k is out of bounds of the array\\") product = 1 for i, num in enumerate(arr): if i != k: product *= num return product"},{"question":"Write a function to calculate the factorial of a given non-negative integer using an iterative approach in Python. Also, handle the case where the input is negative by raising an appropriate exception.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using an iterative approach. Raises a ValueError if n is negative. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to return the nth Fibonacci number in Python. The function should use recursion to calculate the result. If the input number is less than 0, it should raise a ValueError indicating that the input should be a non-negative integer.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. If n is less than 0, raises a ValueError. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 if n == 1: return 1 return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to find the nth Fibonacci number using dynamic programming and memoization.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming and memoization. if n <= 0: return 0 elif n == 1: return 1 memo = [0] * (n + 1) memo[1] = 1 for i in range(2, n + 1): memo[i] = memo[i - 1] + memo[i - 2] return memo[n]"},{"question":"Write a function to find the largest prime number less than a given number n using a naive algorithm. The function should be named \`findLargestPrime\` and should take a single integer \`n\` as input. The function should return the largest prime number less than \`n\`.","solution":"def findLargestPrime(n): Returns the largest prime number less than a given number n. if n <= 2: return None def is_prime(number): if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True for i in range(n-1, 1, -1): if is_prime(i): return i"},{"question":"Write a function to find the length of the longest common prefix between two strings. For example, if the input strings are \\"flower\\" and \\"flow\\", the function should return 2 because the longest common prefix is \\"fl\\".","solution":"def longest_common_prefix_length(str1, str2): Returns the length of the longest common prefix between two strings. Parameters: str1 (str): First string. str2 (str): Second string. Returns: int: Length of the longest common prefix. prefix_length = 0 # Loop until the shortest string length for i in range(min(len(str1), len(str2))): if str1[i] == str2[i]: prefix_length += 1 else: break return prefix_length"},{"question":"Write a function to determine if a number is symmetric. In a symmetric number, the digitsremain the same when read from left-to-right or right-to-left. Example: 121, 1331, etc.","solution":"def is_symmetric_number(n): Determines if a number is symmetric. A symmetric number reads the same both ways. Args: n: int - The number to be checked. Returns: bool - True if the number is symmetric, False otherwise. num_str = str(n) return num_str == num_str[::-1]"},{"question":"Write a function to find the maximum and minimum values in an array of integers using Python. The function should return both the maximum and minimum values as a tuple.","solution":"def find_max_min(arr): Returns the maximum and minimum values in an array of integers as a tuple. if not arr: raise ValueError(\\"Array must not be empty\\") max_val = min_val = arr[0] for num in arr: if num > max_val: max_val = num if num < min_val: min_val = num return (max_val, min_val)"},{"question":"Write a function to find the longest palindrome in a given string. The function should return the longest palindrome that can be formed by rearranging the characters of the given string.","solution":"from collections import Counter def longest_palindrome(s): Finds the longest palindrome that can be formed by rearranging the characters of the given string. counter = Counter(s) length = 0 odd_found = False for count in counter.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Write a function to sort a list of tuples based on the second element of each tuple in descending order. You can use any programming language.","solution":"def sort_tuples_by_second_element(tuples_list): Sorts a list of tuples based on the second element of each tuple in descending order. :param tuples_list: List of tuples to be sorted :return: List of tuples sorted based on the second element in descending order return sorted(tuples_list, key=lambda x: x[1], reverse=True)"},{"question":"Write a function to detect a cycle in a directed graph using Depth-First Search (DFS). The graph is represented as a map where the keys are nodes and the values are lists of adjacent nodes.","solution":"def has_cycle(graph): Detects a cycle in a directed graph using DFS. :param graph: Dictionary representation of the graph :return: True if there is a cycle, otherwise False def dfs(node): if node in visiting: return True if node in visited: return False visiting.add(node) for neighbor in graph.get(node, []): if dfs(neighbor): return True visiting.remove(node) visited.add(node) return False visited = set() visiting = set() for node in graph: if node not in visited: if dfs(node): return True return False"},{"question":"Write a function to reverse the text in a given string \`s\`. The function should handle punctuation and spaces correctly.","solution":"def reverse_string(s): Returns the reverse of the given string. return s[::-1]"},{"question":"Write a function to reverse a string in Python. You are not allowed to use the slicing method to reverse the string. Instead, use a loop to iterate through the string and build the reversed string character by character.","solution":"def reverse_string(s): Reverses a given string using a loop. Args: s (str): The string to be reversed. Returns: str: The reversed string. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to find the brackets in the given string which are balanced i.e., every opening bracket \`(\` has a corresponding closing bracket \`)\`.","solution":"def are_brackets_balanced(s): Returns True if the parentheses in the given string s are balanced, otherwise False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function to accept a name and return the name in reverse order using Python.","solution":"def reverse_name(name): Returns the given name in reverse order. Parameters: name (str): The name to reverse. Returns: str: The reversed name. return name[::-1]"},{"question":"Write a function to implement a single-linked list with the following operations: append, delete, search, and display the list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class SingleLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node else: current = self.head while current.next: current = current.next current.next = new_node def delete(self, data): current = self.head previous = None while current and current.data != data: previous = current current = current.next if not current: return False # Data not found if not previous: self.head = current.next # Node to delete is head else: previous.next = current.next return True def search(self, data): current = self.head while current: if current.data == data: return True current = current.next return False def display(self): elements = [] current = self.head while current: elements.append(current.data) current = current.next return elements"},{"question":"Write a function to calculate the sum of all numbers in an array using a recursive approach. The function should take an array and its size as input parameters. If the array is empty, the function should return 0. Otherwise, it should return the first element of the array plus the sum of the rest of the array.","solution":"def recursive_sum(arr, size): Returns the sum of all numbers in an array using a recursive approach. Parameters: arr (list): The input array size (int): The size of the input array Returns: int: Sum of all numbers in the array if size == 0: return 0 else: return arr[0] + recursive_sum(arr[1:], size - 1)"},{"question":"Write a function to determine if a given integer is a \\"Happy Number\\". A happy number is a number which eventually reaches 1 when replaced by the sum of the square of each digit, and the process repeats until either the number equals 1 (where it will stay as 1), or it enters a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not are sad or unhappy numbers.","solution":"def is_happy_number(n): Determines if a number is a happy number. def get_next(number): return sum(int(digit) ** 2 for digit in str(number)) seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = get_next(n) return n == 1"},{"question":"Write a function to sort an array of integers in ascending order. The array can contain duplicate numbers. The function should return the sorted array.","solution":"def sort_array(arr): Sorts an array of integers in ascending order. Parameters: arr (list): List of integers. Returns: list: Sorted list of integers. return sorted(arr)"},{"question":"Write a function to solve the famous \\"N Queens puzzle\\". The function should return all possible distinct solutions to the N Queens problem using backtracking.","solution":"def solve_n_queens(n): def is_valid(board, row, col): for i in range(row): if board[i][col] == 'Q': return False i, j = row, col while i >= 0 and j >= 0: if board[i][j] == 'Q': return False i -= 1 j -= 1 i, j = row, col while i >= 0 and j < n: if board[i][j] == 'Q': return False i -= 1 j += 1 return True def solve(board, row): if row == n: result.append([\\"\\".join(row) for row in board]) return for col in range(n): if is_valid(board, row, col): board[row][col] = 'Q' solve(board, row + 1) board[row][col] = '.' result = [] board = [['.' for _ in range(n)] for _ in range(n)] solve(board, 0) return result"},{"question":"Write a function to get the last element of an array, its type and the next element in the array if present. If the array is empty or has only one element, return a message indicating this.","solution":"def get_last_elements_info(arr): Returns the last element of the array, its type, and the next element in the array if present. Returns a message if the array is empty or has only one element. if len(arr) == 0: return \\"The array is empty.\\" elif len(arr) == 1: return \\"The array has only one element.\\" else: last_element = arr[-1] last_element_info = { \\"last_element\\": last_element, \\"type\\": type(last_element), \\"next_element\\": arr[-2] } return last_element_info"},{"question":"Write a function to analyze the input text and determine if there are any words that are not palindromes. If there are, return a list of those words. If all words are palindromes, return an empty list. For example, given the input text \\"level deed racecar\\", the function should return an empty list.","solution":"def find_non_palindromes(text): Returns a list of words in the text that are not palindromes. Args: text (str): The input text containing words. Returns: list: A list of words that are not palindromes. words = text.split() non_palindromes = [word for word in words if word != word[::-1]] return non_palindromes"},{"question":"Write a function to calculate the sum of all elements in a list of lists.","solution":"def sum_of_elements(list_of_lists): Returns the sum of all elements in a list of lists. :param list_of_lists: A list containing lists of numerical elements. :type list_of_lists: list :return: The sum of all elements. :rtype: int or float total_sum = 0 for sublist in list_of_lists: total_sum += sum(sublist) return total_sum"},{"question":"Write a function to find the median of an array of numbers.","solution":"def find_median(arr): Returns the median of an array of numbers. if not arr: raise ValueError(\\"Array is empty\\") sorted_arr = sorted(arr) n = len(sorted_arr) mid = n // 2 if n % 2 == 0: return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2 else: return sorted_arr[mid]"},{"question":"Write a function to generate a permutations of a given string.","solution":"from itertools import permutations def generate_permutations(s): Generate all permutations of the given string s. :param s: Input string :return: List of all permutations of the input string return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to reverse the letters of a string.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to rotate an array to the right by a given number of positions.","solution":"def rotate_array(arr, n): Rotate the given array to the right by n positions. Parameters: arr (list): The list to be rotated. n (int): The number of positions to rotate the array. Returns: list: The rotated list. if not arr: return [] n = n % len(arr) # In case n is greater than length of the array return arr[-n:] + arr[:-n]"},{"question":"Write a function to reverse the bits of an 8-bit integer. For example, if the input is 0b11010101, the function should return 0b01010111.","solution":"def reverse_bits_8bit(x): Reverses the bits of an 8-bit integer. Parameters: x (int): An 8-bit integer to reverse the bits of (0-255). Returns: int: The 8-bit integer with its bits reversed. reversed_x = 0 for i in range(8): reversed_x = (reversed_x << 1) | (x & 1) x >>= 1 return reversed_x"},{"question":"Write a function to which you can pass a variable number of arguments. The function should process these arguments and return their sum.","solution":"def sum_variable_args(*args): Returns the sum of all provided arguments. return sum(args)"},{"question":"Write a function to remove duplicates from a given list of integers and return the new list. The function should be efficient and work in linear time complexity. If duplicates are found, remove the duplicates and return the unique elements sorted in ascending order.","solution":"def remove_duplicates_and_sort(nums): Removes duplicates from the list of integers and returns the list of unique elements sorted in ascending order. :param nums: List of integers :return: Sorted list of unique integers return sorted(set(nums))"},{"question":"Write a function to generate a list of prime numbers up to a given number N. The function should be efficient and handle large values of N. Consider algorithm optimization for prime number generation.","solution":"def generate_primes(n): Generates a list of prime numbers up to and including a given number n using the Sieve of Eratosthenes. Parameters: n (int): The upper limit for generating prime numbers. Returns: list: A list of prime numbers up to and including n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False return [num for num in range(n + 1) if is_prime[num]]"},{"question":"Write a function to reversely print the elements of an array.","solution":"def reverse_print(arr): Returns the elements of the array in reverse order. return list(reversed(arr))"},{"question":"Write a function to remove duplicate elements from an array while preserving their original order.","solution":"def remove_duplicates(arr): Removes duplicate elements from the array while preserving their original order. Parameters: - arr: list of elements Returns: - list of elements with duplicates removed seen = set() result = [] for item in arr: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Write a function to find the majority element in an array. The majority element is the element that appears more than ⌊n / 2⌋ times. Your function should only return the majority element if it exists; otherwise, return -1.","solution":"def majority_element(nums): Given an array nums of size n, return the majority element. If there is no majority element, return -1. The majority element is the element that appears more than n/2 times. :param nums: List[int] - list of integers :return: int - majority element or -1 if no majority element exists candidate, count = None, 0 # First pass to find the candidate for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Second pass to verify the candidate if nums.count(candidate) > len(nums) // 2: return candidate else: return -1"},{"question":"Write a function to find the minimum element in a sorted and rotated array. The array does not contain duplicate elements.","solution":"def find_min_in_rotated_sorted_array(arr): Finds and returns the minimum element in a sorted and rotated array. The array does not contain duplicate elements. Parameters: arr (list): A sorted and rotated list of elements. Returns: int: The minimum element in the array. if not arr: return None low, high = 0, len(arr) - 1 while low < high: mid = low + (high - low) // 2 if arr[mid] > arr[high]: low = mid + 1 else: high = mid return arr[low]"},{"question":"Write a function to calculate the sum of all the elements in an array that fall within a specified range. The range is defined by two parameters: the minimum value and the maximum value.","solution":"def sum_in_range(arr, min_val, max_val): Returns the sum of all elements in the array that fall within the specified range [min_val, max_val]. :param arr: List of numbers. :param min_val: Minimum value of the range. :param max_val: Maximum value of the range. :return: Sum of elements within the specified range. return sum(x for x in arr if min_val <= x <= max_val)"},{"question":"Write a function to reverse a string in Python without using the built-in \`reverse()\` method or slicing. Additionally, handle cases where the input string might contain punctuation, digits, and spaces.","solution":"def reverse_string(s): Reverses the given string without using the built-in reverse() method or slicing. Handles cases with punctuation, digits, and spaces. result = [] for char in s: result.insert(0, char) return ''.join(result)"},{"question":"Write a function to calculate the total number of cars in a car parking lot. The function takes two arguments: the capacity of the parking lot and the number of cars currently parked. The capacity is represented as an integer, and the number of parked cars is also an integer. The function should return the total number of cars, which is the capacity plus the number of parked cars. If the number of parked cars exceeds the capacity, the function should return 'Overflow'.","solution":"def total_number_of_cars(capacity, parked_cars): Returns the total number of cars in the parking lot. If parked cars exceed capacity, returns 'Overflow'. if parked_cars > capacity: return 'Overflow' return capacity + parked_cars"},{"question":"Write a function to find the minimum element in a given array. The function should be implemented using a divide and conquer approach.","solution":"def find_minimum(arr): Finds the minimum element in a given array using divide and conquer approach. def divide_and_conquer(arr, low, high): # If there's only one element if low == high: return arr[low] # Find the middle point mid = (low + high) // 2 # Recursively find the minimum element in the left and right halves left_min = divide_and_conquer(arr, low, mid) right_min = divide_and_conquer(arr, mid + 1, high) # Return the minimum of the two halves return min(left_min, right_min) # Initial call to the helper function return divide_and_conquer(arr, 0, len(arr) - 1)"},{"question":"Write a function to remove duplicates from a sorted array in Python. The function should return the length of the array after removing duplicates without using extra space.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted list nums in-place and returns the length of the list after duplicates are removed. :param nums: List[int] - sorted list of integers :return: int - the length of the list after removing duplicates if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a function to determine if a given integer is a palindrome and if so, find the number of steps required to transform it into a palindrome by repeatedly reversing and adding the number to itself.","solution":"def is_palindrome(n): Checks if the given integer n is a palindrome. return str(n) == str(n)[::-1] def steps_to_palindrome(n): Returns a tuple (is_palindrome, steps) where: - is_palindrome is a boolean indicating if n is already a palindrome. - steps is the number of steps required to transform n into a palindrome. steps = 0 while not is_palindrome(n): n = n + int(str(n)[::-1]) steps += 1 return (True, steps) def palindrome_transformation(n): Main function to check if n is a palindrome and return the steps required to transform. if is_palindrome(n): return (True, 0) return steps_to_palindrome(n)"},{"question":"Write a function to check if a given string is a Palindrome or not (case-insensitive and ignore spaces).","solution":"def is_palindrome(s): Check if a given string is a palindrome (case-insensitive and ignoring spaces) # Convert the string to lower case and remove spaces clean_s = ''.join(s.lower().split()) # Compare the string with its reverse return clean_s == clean_s[::-1]"},{"question":"Write a function to return the n'th Fibonacci number in Python. The function should be efficient enough to handle large values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative method. This is efficient for large values of n. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for i in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to find the second smallest number in an array whose size is given. The function should return the second smallest number if it exists, otherwise, return \`None\`.","solution":"def second_smallest_number(arr): Returns the second smallest number in the array. If the array has fewer than 2 unique elements, returns None. if len(arr) < 2: return None unique_numbers = sorted(set(arr)) if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Write a function to find the maximum number of consecutive 1's in a binary array. The function should take in two parameters: the binary array and the length of the array.","solution":"def find_max_consecutive_ones(nums, n): Finds the maximum number of consecutive 1's in a binary array. Parameters: nums (list of int): The binary array. n (int): Length of the binary array. Returns: int: The maximum number of consecutive 1's. max_count = 0 count = 0 for i in range(n): if nums[i] == 1: count += 1 max_count = max(max_count, count) else: count = 0 return max_count"},{"question":"Write a function to find the largest number in a given list. You need to implement this in Python.","solution":"def find_largest_number(numbers): Returns the largest number in the given list. If the list is empty, returns None. if not numbers: return None largest = numbers[0] for number in numbers: if number > largest: largest = number return largest"},{"question":"Write a function to calculate the total number of unique characters in a given string, treating uppercase and lowercase letters as identical. For example, the string \\"HelloWorld\\" would have 7 unique characters, considering 'H' and 'h' as the same.","solution":"def count_unique_characters(s): Returns the total number of unique characters in the given string, treating uppercase and lowercase letters as identical. unique_chars = set(s.lower()) return len(unique_chars)"},{"question":"Write a function to calculate the sum of all elements in an array and then print the result.","solution":"def sum_array(arr): Returns the sum of all elements in an array. Parameters: arr (list): A list of numbers. Returns: int/float: Sum of all elements in the list. return sum(arr)"},{"question":"Write a function to extract the domain part from an email address. The function should handle various edge cases, such as email addresses with subdomains, and should return the domain in the format \\"example.com\\" rather than \\"sub.example.com\\".","solution":"def extract_domain(email): Extracts the main domain from the email address. E.g., given 'user@sub.example.com', it returns 'example.com'. # Split email into local and domain parts try: local_part, domain_part = email.split('@') except ValueError: raise ValueError(\\"Invalid email address format\\") # Split domain part into components domain_components = domain_part.split('.') if len(domain_components) >= 2: # Join the last two components to get the main domain main_domain = '.'.join(domain_components[-2:]) else: raise ValueError(\\"Domain part is malformed\\") return main_domain"},{"question":"Write a function to find all prime numbers up to a given number.","solution":"def find_primes_up_to(n): Returns a list of all prime numbers up to a given number n. if n <= 1: return [] primes = [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False for start in range(2, n + 1): if sieve[start]: primes.append(start) for multiple in range(start * start, n + 1, start): sieve[multiple] = False return primes"},{"question":"Write a function to convert an integer to its binary representation as a string. The binary string should not include any leading zeros except for the number zero itself.","solution":"def int_to_binary(n): Converts an integer to a binary string without leading zeros except for the number zero itself. if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"Write a function to reverse a string using Python. You can use any programming concepts you decide, but your function should be efficient and work for any input string.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to check if two strings are anagrams without using any built-in functions or data structures like dictionaries.","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams by comparing the sorted versions of the strings. # If lengths are not equal, they cannot be anagrams if len(str1) != len(str2): return False # Sorting both strings sorted_str1 = sorted_characters(str1) sorted_str2 = sorted_characters(str2) # Compare sorted strings return sorted_str1 == sorted_str2 def sorted_characters(s): Helper function to sort characters in a string without using built-in sort function. characters = list(s) n = len(characters) # Implementing bubble sort for i in range(n): for j in range(0, n-i-1): if characters[j] > characters[j+1]: characters[j], characters[j+1] = characters[j+1], characters[j] return ''.join(characters)"},{"question":"Write a function to compute the k-th smallest element in an unsorted array. The function should handle arrays of integers and should be efficient, ideally using a selection algorithm rather than sorting the entire array.","solution":"def kth_smallest(arr, k): Returns the k-th smallest element in an unsorted array using the Quickselect algorithm. def partition(left, right, pivot_index): pivot_value = arr[pivot_index] # Move pivot to end arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left # Move all smaller elements to the left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 # Swap pivot to its final place arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def select(left, right, k_smallest): Returns the k-th smallest element of arr within left..right inclusive. if left == right: # If the list contains only one element return arr[left] # Select a random pivot_index pivot_index = (left + right) // 2 # Find the pivot position in a sorted list pivot_index = partition(left, right, pivot_index) # The pivot is in its final sorted position if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return select(left, pivot_index - 1, k_smallest) else: return select(pivot_index + 1, right, k_smallest) return select(0, len(arr) - 1, k - 1)"},{"question":"Write a function to determine if a given year is a leap year. A year is considered a leap year if it is divisible by 4, except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not. Write a function that takes an integer \`year\` as its parameter and returns \`true\` if the year is a leap year, and \`false\` otherwise.","solution":"def is_leap_year(year): Determine if the given year is a leap year. Args: year (int): The year to be checked. Returns: bool: True if the year is a leap year, False otherwise. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a function to calculate the sum of the squares of the first n natural numbers and then subtract the sum of the first n even natural numbers.","solution":"def sum_squares_minus_even_sum(n): Calculates the sum of the squares of the first n natural numbers and subtracts the sum of the first n even natural numbers. Parameters: n (int): The number of natural numbers to consider. Returns: int: The result of the sum of squares of the first n natural numbers minus the sum of the first n even natural numbers. # Sum of the squares of the first n natural numbers sum_of_squares = sum(i**2 for i in range(1, n + 1)) # Sum of the first n even natural numbers sum_of_even_numbers = sum(2 * i for i in range(1, n + 1)) return sum_of_squares - sum_of_even_numbers"},{"question":"Write a function to find the minimum number of operations required to sort an array of integers using a specific method. The method is based on the Bubble Sort algorithm, with an additional optimization where if no elements are swapped during a pass, the array is considered sorted and the process stops early.","solution":"def bubble_sort_operations(arr): Returns the minimum number of operations required to sort the array using a modified Bubble Sort where the process stops early if no elements are swapped during a pass. n = len(arr) operations = 0 for i in range(n - 1): swapped = False for j in range(n - 1 - i): operations += 1 if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True if not swapped: break return operations"},{"question":"Write a function to transform a given string into aicians and then return the first and last names.","solution":"def extract_names(full_name): Transforms a given string into a tuple of (first_name, last_name). Parameters: full_name (str): The full name in the format \\"First Last\\" Returns: tuple: A tuple containing the first name and last name if not full_name or ' ' not in full_name: raise ValueError(\\"Input must be a string in the format 'First Last'\\") first_name, last_name = full_name.split() return first_name, last_name"},{"question":"Write a function to convert a hexadecimal number to binary. The function should take a hexadecimal number as input and return its binary representation. The hexadecimal number can be positive or negative, and the output should also reflect the sign for negative numbers.","solution":"def hex_to_bin(hex_num): Converts a hexadecimal number to binary. The function handles both positive and negative hex numbers. Parameters: hex_num (str): The hexadecimal number as a string, with an optional '-' for negatives. Returns: str: The binary representation of the hexadecimal number. if hex_num.startswith('-'): is_negative = True hex_num = hex_num[1:] else: is_negative = False binary_num = bin(int(hex_num, 16))[2:] return '-' + binary_num if is_negative else binary_num"},{"question":"Write a function to parse a CSV file and convert it into a dictionary where the keys are the first row of the CSV and the values are the subsequent rows as lists.","solution":"import csv def parse_csv_to_dict(file_path): Parses a CSV file and converts it into a dictionary. The keys of the dictionary are the elements of the first row (header) of the CSV. The values are lists containing the elements of the subsequent rows. Args: - file_path (str): The path to the CSV file. Returns: dict: A dictionary representation of the CSV file. result = {} with open(file_path, newline='') as csvfile: reader = csv.reader(csvfile) header = next(reader) # The first row is the header for key in header: result[key] = [] # Process each row after the header for row in reader: for key, value in zip(header, row): result[key].append(value) return result"},{"question":"Write a function to find the minimum number in a sorted and rotated array.","solution":"def find_min_in_rotated_sorted_array(nums): Finds the minimum number in a sorted and rotated array. :param nums: A list of integers sorted and then rotated. :return: The minimum number in the array. if not nums: return None left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Write a function to solve the \\"Word Search\\" problem. The function should take a 2D list of characters (\`board\`) and a word (\`word\`) as input and return \`True\` if the word is found in the board, otherwise \`False\`.","solution":"def exist(board, word): Determines if the word exists in the board. :param board: List[List[str]] :param word: str :return: bool if not board or not board[0]: return False rows, cols = len(board), len(board[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != word[index]: return False temp, board[r][c] = board[r][c], \\"#\\" # mark as visited found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) board[r][c] = temp # restore the original value return found for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"Write a function to validate if a number array is a valid binary search tree (BST) pre-order sequence in Python.","solution":"def is_valid_bst_preorder(sequence): Validates if the given number array is a valid pre-order traversal sequence of a binary search tree (BST). Args: sequence (list of int): The number array representing the pre-order sequence of the BST. Returns: bool: True if the sequence is a valid BST pre-order traversal sequence, False otherwise. stack = [] lower_bound = float('-inf') for value in sequence: if value < lower_bound: return False while stack and value > stack[-1]: lower_bound = stack.pop() stack.append(value) return True"},{"question":"Write a function to flip a binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flip_tree(node): Flips a binary tree node such that its left and right children are swapped, including recursively flipping all subtrees. if node is None: return None # Swap the left and right children node.left, node.right = node.right, node.left # Recursively flip the left and right subtrees flip_tree(node.left) flip_tree(node.right) return node"},{"question":"Write a function to generate a Fibonacci sequence up to the nth term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Here is the beginning of the sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so forth. Your function should return the nth term of the Fibonacci sequence.","solution":"def fibonacci(n): Generate the nth Fibonacci number. :param n: int - the position in the Fibonacci sequence to generate :return: int - the nth Fibonacci number if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the number of unique pairs of elements in an array that sum up to a specific number k. For example, if the input array is \`[10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1]\` and the value of k is 11, the function should return 6. Here, the pairs are (10, 1), (10, 1), (12, -1), (15, -4), (6, 5), and (7, 4).","solution":"def count_unique_pairs(arr, k): Returns the number of unique pairs of elements in an array that sum up to k. A unique pair is defined by two different elements whose sum is equal to k. :param arr: List of integers :param k: Target sum :return: Number of unique pairs seen = {} pairs = set() for num in arr: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen[num] = seen.get(num, 0) + 1 return len(pairs)"},{"question":"Write a function to count the number of nodes in a singly linked list, where the linked list has a sentinel node at the beginning to mark the start. The sentinel node does not contain any data and is always the first node in the list. The linked list has a next pointer for each node, and each node has a value property.","solution":"class Node: def __init__(self, value=None): self.value = value self.next = None def count_nodes(head): Counts the number of nodes in a singly linked list excluding the sentinel node. Parameters: head (Node): The sentinel node marking the start of the list. Returns: int: The number of nodes excluding the sentinel node. count = 0 current = head.next # Skip the sentinel node while current: count += 1 current = current.next return count"},{"question":"Write a function to find the intersection of two sorted linked lists. The function should return a new sorted linked list containing all the elements present in both input lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sorted_intersection(head1, head2): Returns the intersection of two sorted linked lists. dummy = ListNode() tail = dummy while head1 and head2: if head1.val < head2.val: head1 = head1.next elif head1.val > head2.val: head2 = head2.next else: tail.next = ListNode(head1.val) tail = tail.next head1 = head1.next head2 = head2.next return dummy.next # Helper function to convert a list to a linked list def list_to_linked_list(lst): dummy = ListNode() tail = dummy for val in lst: tail.next = ListNode(val) tail = tail.next return dummy.next # Helper function to convert a linked list back to a list def linked_list_to_list(head): lst = [] while head: lst.append(head.val) head = head.next return lst"},{"question":"Write a function to reverse a linked list. The function should take a pointer to the head of the list as input and return the new head pointer after reversing the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverse a linked list and return the new head of the list. :param head: ListNode - The head of the linked list :return: ListNode - The new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to find the highest node in a binary tree. The function should return the value of the highest node, not just the node itself, so that the data can be utilized in any further computation.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_highest_node(root): Returns the highest (maximum value) node in a binary tree. :param root: TreeNode, the root node of the binary tree :return: int, the value of the highest node if root is None: return float('-inf') left_high = find_highest_node(root.left) right_high = find_highest_node(root.right) return max(root.value, left_high, right_high)"},{"question":"Write a function to check if a list is sorted in ascending order. The function should return True if the list is sorted, and False if it is not. Consider both empty and one-element lists as sorted.","solution":"def is_sorted(lst): Returns True if the list is sorted in ascending order, False otherwise. Consider both empty and one-element lists as sorted. return lst == sorted(lst)"},{"question":"Write a function to count the number of unique words in a given sentence. A \\"word\\" is defined as a sequence of characters separated by spaces. Words are case-sensitive. For example, \\"hello\\" and \\"Hello\\" would be considered different words.","solution":"def count_unique_words(sentence): Returns the number of unique words in a given sentence. A word is defined as a sequence of characters separated by spaces. Words are case-sensitive. Args: sentence (str): A string representing the sentence. Returns: int: The number of unique words. words = sentence.split() unique_words = set(words) return len(unique_words)"},{"question":"Write a function to count the number of 1 bits in the binary representation of a non-negative integer x.","solution":"def count_1_bits(x): Returns the number of 1 bits in the binary representation of a non-negative integer x. return bin(x).count('1')"},{"question":"Write a function to determine whether a given positive integer is even or odd. How would you approach this problem in Python?","solution":"def is_even(n): Returns True if the given positive integer n is even, otherwise False. return n % 2 == 0"},{"question":"Write a function to find all the prime numbers within a given range [m, n].","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False elif num == 2: return True elif num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def find_primes_in_range(m, n): Returns a list of prime numbers within the range [m, n]. Arguments: m -- Starting integer of the range (inclusive) n -- Ending integer of the range (inclusive) Returns: A list of prime numbers within the specified range. return [num for num in range(m, n + 1) if is_prime(num)]"},{"question":"Write a function to reverse a singly linked list in place. Provide a step-by-step explanation of the process and the code, using Python as the programming language.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list in place and returns the new head of the list. Args: head (ListNode): The head of the singly linked list. Returns: ListNode: The new head of the reversed singly linked list. prev = None current = head while current: next_node = current.next # Save the next node current.next = prev # Reverse the link prev = current # Move prev to current current = next_node # Move to the next node in the list return prev # prev becomes the new head of the reversed list"},{"question":"Write a function to reverse a string without using any built-in reverse functions or slicing methods. You should only use basic loops and string manipulation techniques.","solution":"def reverse_string(s): Reverses a given string without using built-in reverse functions or slicing methods. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to insert a key-value pair into a dictionary. If the key already exists, update the value. If the key does not exist, add the key-value pair to the dictionary.","solution":"def insert_key_value(dictionary, key, value): Inserts the key-value pair into the dictionary. If the key already exists, updates the value. If the key does not exist, adds the key-value pair to the dictionary. Parameters: dictionary (dict): The dictionary to update. key: The key to insert or update. value: The value associated with the key. Returns: dict: The updated dictionary. dictionary[key] = value return dictionary"},{"question":"Write a function to find the intersection of two arrays. The function should return a list containing the intersection elements. The intersection should be such that each element appears only once in the result, even if it appears multiple times in the input arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays such that each element appears only once in the result. # Convert both arrays to sets for eliminating duplicates and finding the intersection set1 = set(arr1) set2 = set(arr2) # Find intersection and return as a list result = list(set1 & set2) return result"},{"question":"Write a function to check the length of a given string and print the length if it is greater than 10.","solution":"def print_length_if_greater_than_10(s): Checks if the length of the string is greater than 10. If yes, returns the length, otherwise returns None. length = len(s) if length > 10: return length return None"},{"question":"Write a function to find the minimum costs for all cities to connect into a single network using Union-Find data structure.","solution":"class UnionFind: def __init__(self, size): self.root = list(range(size)) self.rank = [1] * size def find(self, x): if self.root[x] == x: return x self.root[x] = self.find(self.root[x]) # Path compression return self.root[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: # Union by rank if self.rank[rootX] > self.rank[rootY]: self.root[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.root[rootX] = rootY else: self.root[rootY] = rootX self.rank[rootX] += 1 def minimumCost(n, connections): uf = UnionFind(n) connections.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for x, y, cost in connections: if uf.find(x - 1) != uf.find(y - 1): uf.union(x - 1, y - 1) total_cost += cost edges_used += 1 # If we used exactly n-1 edges, then the graph is connected return total_cost if edges_used == n - 1 else -1"},{"question":"Write a function to check if a given string contains the substring \\"hello\\". If it does, return True, otherwise return False.","solution":"def contains_hello(s): Checks if the given string contains the substring \\"hello\\". Args: s (str): The string to check. Returns: bool: True if the string contains \\"hello\\", False otherwise. return \\"hello\\" in s"},{"question":"Write a function to find the minimum number of swaps required to sort an array. If it's not possible to sort the array with swaps, return -1.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. If it's not possible to sort the array with swaps, returns -1. n = len(arr) arrpos = [*enumerate(arr)] arrpos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} swaps = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps if swaps >= 0 else -1"},{"question":"Write a function to calculate the factorial of a number \`n\`. The function should be defined as \`def factorial(n)\`. The factorial of a non-negative integer \`n\` is the product of all positive integers less than or equal to \`n\`. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. The factorial of 0 is defined to be 1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to reverse a string in Python while preserving the case and non-alphabetic characters.","solution":"def reverse_string_preserve_case(s): Reverses the input string while preserving the original case and non-alphabetic characters. # Collect all alphabetic characters in a list alphabets = [char for char in s if char.isalpha()] # Create a reversed iterator of the collected alphabetic characters reversed_alphabets = iter(alphabets[::-1]) # Reconstruct the string while replacing alphabetic characters with reversed ones result = ''.join(next(reversed_alphabets) if char.isalpha() else char for char in s) return result"},{"question":"Write a function to convert a Roman numeral to an integer. The function should take a single string argument representing the Roman numeral and return the corresponding integer value.","solution":"def roman_to_int(s): Converts a Roman numeral to an integer. Args: s (str): A string representing the Roman numeral. Returns: int: The corresponding integer value. roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} integer_value = 0 prev_value = 0 for char in reversed(s): current_value = roman_dict[char] if current_value < prev_value: integer_value -= current_value else: integer_value += current_value prev_value = current_value return integer_value"},{"question":"Write a function to determine the next time an event should occur based on the current time and a set of times when it has previously occurred. The function should return the next time the event should occur. Assume the event has already occurred at the input times.","solution":"def next_event_time(current_time, event_times): Determine the next time an event should occur based on the current time and a list of previous event times. Parameters: current_time (int): The current time represented as an integer. event_times (list): A list of previous event times represented as integers. Returns: int: The next time the event should occur. if not event_times: return None # No event times provided # Sort the event_times to ensure they are in ascending order event_times.sort() for event_time in event_times: if event_time > current_time: return event_time # If all previous event times are less than or equal to current_time, return the first event of the next day return event_times[0]"},{"question":"Write a function to find the largest coherent string that can be formed from two given strings s1 and s2. A coherent string is defined as a string that is formed by concatenating one character from s1 with one character from s2, and this can be repeated until all characters in both strings are used up. The function should return the largest coherent string possible by combining characters from both strings without any repetition of characters within each string maintaining their original order.","solution":"def largest_coherent_string(s1, s2): Given two strings s1 and s2, this function returns the largest coherent string that can be formed by concatenating one character from s1 with one character from s2. The coherent string is formed without any repetition of characters within each string while maintaining their original order. result = [] len_s1, len_s2 = len(s1), len(s2) i = j = 0 while i < len_s1 and j < len_s2: result.append(s1[i]) result.append(s2[j]) i += 1 j += 1 # If any characters are left in s1 or s2, append them to the result string. if i < len_s1: result.append(s1[i:]) if j < len_s2: result.append(s2[j:]) return \\"\\".join(result)"},{"question":"Write a function to count the number of occurrences of a given substring in a string. The function should return the count.","solution":"def count_substring_occurrences(s, substring): Returns the number of occurrences of substring in the string s. if not s or not substring: return 0 return s.count(substring)"},{"question":"Write a function to count the number of nodes in a binary search tree (BST) using a breadth-first search (BFS) approach. The function should return the total number of nodes in the tree.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_nodes_bfs(root): Count the number of nodes in a binary search tree using BFS approach. if root is None: return 0 count = 0 queue = deque([root]) while queue: node = queue.popleft() count += 1 if node.left: queue.append(node.left) if node.right: queue.append(node.right) return count"},{"question":"Write a function to list all even numbers in a given range, including both endpoints. If the start is greater than the end, the function should return an error message indicating that the range is invalid.","solution":"def list_even_numbers(start, end): Returns a list of all even numbers in the given range, including both endpoints. If start is greater than end, it returns an error message indicating that the range is invalid. if start > end: return \\"Invalid range: start is greater than end.\\" return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Write a function to return the three consecutive elements in an array that sum to a target number. If no three consecutive elements sum up to the target, return an empty tuple.","solution":"def find_three_consecutive_sum(arr, target): Returns a tuple of three consecutive elements that sum to the target. If no such elements exist, returns an empty tuple. :param arr: List of integers :param target: Target sum of three consecutive elements :return: Tuple of three consecutive elements or empty tuple if not found for i in range(len(arr) - 2): if arr[i] + arr[i + 1] + arr[i + 2] == target: return (arr[i], arr[i + 1], arr[i + 2]) return ()"},{"question":"Write a function to return the duplicate elements from a list.","solution":"def find_duplicates(lst): Returns the duplicate elements from the list. Args: lst (list): The list to find duplicates in. Returns: list: A list of duplicate elements. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a function to calculate the determinant of a 3x3 matrix. The function should be able to handle both integer and float inputs, as well as matrices with negative values.","solution":"def determinant_3x3(matrix): Calculate the determinant of a 3x3 matrix. Args: matrix (list of list of float): A 3x3 matrix Returns: float: The determinant of the 3x3 matrix if len(matrix) != 3 or any(len(row) != 3 for row in matrix): raise ValueError(\\"Input must be a 3x3 matrix\\") a = matrix[0][0] b = matrix[0][1] c = matrix[0][2] d = matrix[1][0] e = matrix[1][1] f = matrix[1][2] g = matrix[2][0] h = matrix[2][1] i = matrix[2][2] det = (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)) return det"},{"question":"Write a function to find and return the largest integer in a list. The function should take a list of integers as input and return the largest integer. If the list is empty, the function should raise a ValueError with the message \\"List is empty\\".","solution":"def find_largest_integer(lst): Returns the largest integer in a list. Raises a ValueError if the list is empty. Parameters: lst (list): A list of integers Returns: int: The largest integer in the list Raises: ValueError: If the list is empty if not lst: raise ValueError(\\"List is empty\\") return max(lst)"},{"question":"Write a function to find the maximum subarray sum using the Kadane's algorithm in Python. Kadane's algorithm is efficient for this problem with a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the sum of the maximum subarray using Kadane's algorithm. max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to compute and return all the possible permutations of a given list of numbers. Your function should handle lists of different lengths, including empty lists. Try to optimize the function for time and space complexity.","solution":"from itertools import permutations def compute_permutations(nums): Returns all possible permutations of a given list of numbers. :param nums: A list of numbers :return: A list of tuples, each representing a permutation of the input list return list(permutations(nums))"},{"question":"Write a function to find the maximum sum of a contiguous subarray. The function should be able to handle large input sizes efficiently.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to divide two integers without using the '%' and '/' operators. The function should also handle the case when the divisor is zero by raising an exception.","solution":"def divide(dividend, divisor): Divide two integers without using '%' and '/' operators. Raise a ValueError if the divisor is zero. if divisor == 0: raise ValueError(\\"Cannot divide by zero\\") # Determine the sign of the result. negative = (dividend < 0) ^ (divisor < 0) # Work with positive values for simplicity. dividend = abs(dividend) divisor = abs(divisor) quotient = 0 while dividend >= divisor: dividend -= divisor quotient += 1 if negative: quotient = -quotient return quotient"},{"question":"Write a function to calculate the factorial of a given number, but restrict it to work only for even numbers. If the input number is odd, return an appropriate error message.","solution":"def factorial_even_only(n): Calculates the factorial of an even number. If the input number is odd, returns an error message. Args: n (int): The number for which the factorial is to be computed. Returns: int or str: The factorial of the number if it is even or an error message if it is odd. if n % 2 != 0: return \\"Error: Input must be an even number.\\" factorial = 1 for i in range(2, n + 1): factorial *= i return factorial"},{"question":"Write a function to find the two numbers in an array that add up to a specific target number.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. :param List[int] nums: List of integers to search through :param int target: The target integer :return: A list containing the indices of the two numbers adding up to the target :rtype: List[int] num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a function to check if two arrays are equal in Python.","solution":"def arrays_equal(arr1, arr2): Check if two arrays are equal. Two arrays are equal if they have the same elements in the same order. Parameters: arr1 (list): First array arr2 (list): Second array Returns: bool: True if arrays are equal, False otherwise return arr1 == arr2"},{"question":"Write a function to reverse a linked list in place without using any additional data structures. The linked list is represented by a class \`Node\` where each node has a \`data\` attribute and a \`next\` attribute pointing to the next node in the list.","solution":"class Node: Node class for linked list. def __init__(self, data, next=None): self.data = data self.next = next def reverse_linked_list(head): Reverses the linked list in place. :param head: The head node of the linked list. :return: The new head node of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to calculate the area of a circle. The function should take the radius of the circle as input and return the area. You should assume that the radius is a non-negative integer. If the input is negative, the function should return \`NaN\`. The area of a circle is given by the formula (A = pi r^2), where (r) is the radius of the circle and (pi) (pi) is approximately 3.14159.","solution":"import math def circle_area(radius): Returns the area of a circle given the radius. If the radius is negative, returns NaN. :param radius: The radius of the circle :return: The area of the circle or NaN if radius is negative if radius < 0: return float('nan') return math.pi * radius * radius"},{"question":"Write a function to calculate the sum of two integers without using the '+' operator. You are not allowed to use any arithmetic or bitwise operators directly.","solution":"def add(a, b): Calculates the sum of two integers without using any arithmetic or bitwise operators directly. Uses Python's built-in sum function which internally handles the addition. return sum([a, b])"},{"question":"Write a function to find the maximum profit from a list of stock prices. You can only buy and sell once. Also, you need to return the indices of the buy and sell days.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once, along with the indices of the buy and sell days. if not prices or len(prices) < 2: return 0, None, None min_price_index = 0 max_profit = 0 buy_day = 0 sell_day = 0 for i in range(1, len(prices)): if prices[i] < prices[min_price_index]: min_price_index = i current_profit = prices[i] - prices[min_price_index] if current_profit > max_profit: max_profit = current_profit buy_day = min_price_index sell_day = i if max_profit == 0: buy_day = sell_day = None return max_profit, buy_day, sell_day"},{"question":"Write a function to find the minimum number of swaps required to sort an array.","solution":"def minimum_swaps(arr): Finds the minimum number of swaps required to sort the array. n = len(arr) arrpos = [*enumerate(arr)] arrpos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Write a function to find the product of all the elements in a list. You should not use any built-in functions like \`reduce\`. Instead, initialize the product to 1 and iterate over the list, multiplying each element by the product until you reach the end of the list. Ensure that the function returns the correct product.","solution":"def product_of_elements(lst): Returns the product of all the elements in the list. product = 1 for element in lst: product *= element return product"},{"question":"Write a function to reverse the words in a given string \`s\`. However, the order of the words in the string should remain the same, only the characters of each word should be reversed.","solution":"def reverse_words_in_string(s): Reverses the characters of each word in the string while maintaining the order of the words. Args: s (str): The input string with words to reverse. Returns: str: The string with each word's characters reversed but the order of words maintained. return ' '.join(word[::-1] for word in s.split())"},{"question":"Write a function to compute the sum of the digits of a given number. The function should handle both positive and negative numbers, and it should result in a non-negative sum. If the input number is 0, the function should return 0.","solution":"def sum_of_digits(number): Returns the sum of the digits of the given number (absolute value). If the input number is 0, the function returns 0. abs_number = abs(number) return sum(int(digit) for digit in str(abs_number))"},{"question":"Write a function to implement the reverse of a string in Python.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to rearrange values in a list such that each value at an odd index is greater than the preceding even index value and each value at an even index is less than the succeeding odd index value, and ensure all values are sorted.","solution":"def rearrange_list(lst): Rearrange the list such that each value at an odd index is greater than the preceding even index value and each value at an even index is less than the succeeding odd index value, while ensuring the list is sorted. If the list has less than 2 elements, it is returned as is. if len(lst) < 2: return lst lst.sort() for i in range(1, len(lst) - 1, 2): lst[i], lst[i + 1] = lst[i + 1], lst[i] return lst"},{"question":"Write a function to calculate the frequency of each character in a given string and then print out the character frequencies.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the given string. freq_dict = {} for char in s: freq_dict[char] = freq_dict.get(char, 0) + 1 return freq_dict"},{"question":"Write a function to check if a string contains any palindromic substring of length at least 3. A palindromic substring is one that reads the same backward as forward.","solution":"def has_palindromic_substring(s): Checks if the input string contains any palindromic substring of length at least 3. def is_palindrome(subs): return subs == subs[::-1] n = len(s) for length in range(3, n+1): for i in range(n - length + 1): if is_palindrome(s[i:i + length]): return True return False"},{"question":"Write a function to reverse a string in Go.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Write a function to find the maximum sum of a subarray in a one-dimensional array of numbers. This is a classic problem known as Kadane's algorithm. The function should be named \`findMaxSubArraySum\` and take an array of integers as its input. It should return the maximum sum of a subarray found within the input array.","solution":"def findMaxSubArraySum(arr): Returns the maximum sum of a subarray in the given array using Kadane's algorithm. Parameters: arr (list of int): List of integers where we need to find the maximum sum of subarray. Returns: int: The maximum sum of the subarray. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Write a function to integrate a given function using the composite trapezoidal rule.","solution":"def trapezoidal_rule(func, a, b, n): Approximates the integral of a function using the composite trapezoidal rule. Parameters: func (function): The integrand function a (float): The start point of the interval b (float): The end point of the interval n (int): Number of subdivisions Returns: float: Approximation of the integral h = (b - a) / n integral = 0.5 * (func(a) + func(b)) for i in range(1, n): integral += func(a + i * h) integral *= h return integral"},{"question":"Write a function to calculate the area of a rectangle in Python. The function should take the length and width of the rectangle as inputs and return the area. Ensure that your code is well-commented and follows best practices.","solution":"def calculate_rectangle_area(length, width): Calculates the area of a rectangle. Parameters: length (float): The length of the rectangle. width (float): The width of the rectangle. Returns: float: The area of the rectangle. Raises: ValueError: If either length or width is not a positive number. if length <= 0 or width <= 0: raise ValueError(\\"Length and width must be positive numbers\\") return length * width"},{"question":"Write a function to calculate the factorial of a number using recursion without using any loops. How can you optimize the code to prevent stack overflow error?","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0: return 1 else: return n * factorial(n - 1) def optimized_factorial(n, accumulator=1): Returns the factorial of n using recursion. Uses tail recursion to optimize and prevent stack overflow. if n == 0: return accumulator else: return optimized_factorial(n - 1, n * accumulator)"},{"question":"Write a function to sort an array of integers using the quicksort algorithm. What are the key steps involved in this sorting algorithm?","solution":"def quicksort(array): Sorts an array of integers using the quicksort algorithm. if len(array) <= 1: return array else: pivot = array[len(array) // 2] left = [x for x in array if x < pivot] middle = [x for x in array if x == pivot] right = [x for x in array if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to return the kth to last node in a singly-linked list. For example, if a linked list has 5 nodes and we need to return the node at the 2nd to last position, the function should return the node with the value '3'.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def kth_to_last(head: ListNode, k: int) -> ListNode: slow = fast = head # Move the fast pointer k steps ahead for _ in range(k): if not fast: return None fast = fast.next # Move both pointers until the fast pointer reaches the end of the list while fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to find the smallest number in a list using recursion.","solution":"def find_smallest_number(lst): Returns the smallest number in the list using recursion. If the list is empty, raises a ValueError. if len(lst) == 0: raise ValueError(\\"List is empty\\") # Recursive function to find the smallest number def recursive_find(lst, smallest): if len(lst) == 0: return smallest if lst[0] < smallest: smallest = lst[0] return recursive_find(lst[1:], smallest) return recursive_find(lst, lst[0])"},{"question":"Write a function to calculate the nth harmonic number.","solution":"def harmonic_number(n): Returns the nth harmonic number. if n < 1: raise ValueError(\\"n must be a positive integer\\") harmonic_sum = 0.0 for i in range(1, n + 1): harmonic_sum += 1 / i return harmonic_sum"},{"question":"Write a function to check if a given list of numbers can be divided into subsets with equal sum. The function should return \`true\` if it's possible, and \`false\` otherwise. The function should also printing the subsets if it's possible.","solution":"def can_partition(nums): Returns True if the given list nums can be partitioned into subsets with equal sum, otherwise returns False. total_sum = sum(nums) # If total sum is odd, it can't be partitioned into two subsets with equal sum if total_sum % 2 != 0: return False target = total_sum // 2 # Create a memoization table to store whether certain sums can be achieved dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target] def find_subsets(nums, target): Helper function to find the subsets that sum to \`target\`. result = [] subset = [] def backtrack(remaining, start): if remaining == 0: result.append(subset[:]) for i in range(start, len(nums)): if remaining - nums[i] >= 0: subset.append(nums[i]) backtrack(remaining - nums[i], i + 1) subset.pop() backtrack(target, 0) return result def can_partition_with_subsets(nums): if can_partition(nums): total_sum = sum(nums) target = total_sum // 2 subset1 = find_subsets(nums, target)[0] subset2 = nums[:] for num in subset1: subset2.remove(num) print(\\"Subset 1:\\", subset1) print(\\"Subset 2:\\", subset2) return True return False"},{"question":"Write a function to check if a given integer is an Armstrong number. An Armstrong number with n digits is an integer such that the sum of the nth powers of its digits is equal to the number itself. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.","solution":"def is_armstrong_number(n): Check if a given integer n is an Armstrong number. An Armstrong number with n digits is an integer such that the sum of the nth powers of its digits is equal to the number itself. Args: n (int): The integer to check. Returns: bool: True if n is an Armstrong number, False otherwise. # Convert the number to a string to iterate over digits digits = str(n) # The number of digits power = len(digits) # Calculate the sum of the nth powers of its digits total = sum(int(digit) ** power for digit in digits) # Return whether the sum matches the original number return total == n"},{"question":"Write a function to calculate the area of a circle. The function should take the radius of the circle as input and return the area. The area can be calculated using the formula: π * radius^2. You may use the math module to access the value of π.","solution":"import math def area_of_circle(radius): Returns the area of a circle with given radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a function to check if a string has all unique characters without using any additional data structures. The function should return true if all characters in the string are unique, and false otherwise. The function should be case sensitive, meaning that 'a' and 'A' are considered different characters.","solution":"def has_all_unique_characters(s): Checks if a string has all unique characters. The function is case sensitive. :param s: Input string :return: True if all characters are unique, False otherwise length = len(s) for i in range(length): for j in range(i + 1, length): if s[i] == s[j]: return False return True"},{"question":"Write a function to verify the identity of a user by checking their age using a callback function. The function should take the user's age and a callback function as parameters. If the user is 18 years old or older, the callback function should be called with true to indicate that the identity is verified. Otherwise, the callback function should be called with false.","solution":"def verify_identity(age, callback): Verifies the identity of a user based on their age by calling the callback function. Parameters: age (int): The age of the user. callback (function): A callback function that takes a boolean indicating if identity is verified. if age >= 18: callback(True) else: callback(False)"},{"question":"Write a function to check if a given number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, and 11 are prime numbers, while 4, 6, 8, and 9 are not. Please include a main function to test your code and print whether the test numbers are prime or not.","solution":"def is_prime(n): Check if a given number n is prime. Parameters: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def main(): test_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] for number in test_numbers: print(f\\"{number} is {'a prime number' if is_prime(number) else 'not a prime number'}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a function to find the maximum subarray sum. This function should return the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum. The function should be designed to efficiently use minimal space and time.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray within an array of numbers which has the largest sum. Uses Kadane's Algorithm which efficiently finds the maximum sum subarray in O(n) time and O(1) space. if len(nums) == 0: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to reverse the words in a given string \`s\`. The function should take a single parameter \`s\`, which is a string, and return the reversed word count. Additionally, the function should ignore leading, trailing, and multiple spaces between words.","solution":"def reverse_words(s): Returns the reversed words of the given string \`s\`. Leading, trailing, and multiple spaces between words should be ignored. words = s.strip().split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Write a function to find the length of the longest palindromic substring in a given string using Manacher's Algorithm.","solution":"def longest_palindromic_substring(s): Finds the length of the longest palindromic substring in a given string using Manacher's Algorithm. Args: s (str): The input string. Returns: int: The length of the longest palindromic substring. # Transform S into T. T = '#'.join(f'^{s}') n = len(T) P = [0] * n C = R = 0 for i in range(1, n - 1): P[i] = (R > i) and min(R - i, P[2 * C - i]) # equality not used(see fail case at the end). # Attempt to expand palindrome centered at i while T[i + P[i] + 1] == T[i - P[i] - 1]: P[i] += 1 # If palindrome centered at i expands past R, adjust center based on expanded palindrome. if i + P[i] > R: C, R = i, i + P[i] # Find the maximum element in P. max_len = max(P) return max_len"},{"question":"Write a function to create an array of 50 integers, fill it with random numbers between 1 and 1000, and then find the average of those numbers. Print the average to the console.","solution":"import random def create_array_and_find_average(): Creates an array of 50 integers filled with random numbers between 1 and 1000, and calculates the average of those numbers. array = [random.randint(1, 1000) for _ in range(50)] average = sum(array) / len(array) print(f\\"The average is: {average}\\") return average"},{"question":"Write a function to calculate the factorial of a number using recursion. Then, write another function to calculate the factorial using iteration. Finally, compare the performance of both methods using a large input number (e.g., 10!).","solution":"import time def factorial_recursive(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 return n * factorial_recursive(n - 1) def factorial_iterative(n): Returns the factorial of n using iteration. result = 1 for i in range(2, n + 1): result *= i return result def compare_performance(n): Compares the performance of the recursive and iterative factorial functions for a given input n. start_time = time.time() factorial_recursive(n) recursive_time = time.time() - start_time start_time = time.time() factorial_iterative(n) iterative_time = time.time() - start_time return recursive_time, iterative_time"},{"question":"Write a function to find the minimum number of steps required to reach the end of an array, where each element of the array represents the maximum number of steps that can be made forward from that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps to reach the end of the array. Each element in the array represents the maximum number of steps that can be made forward from that element. if len(arr) == 1: return 0 steps = 0 current_end = 0 farthest = 0 for i in range(len(arr) - 1): farthest = max(farthest, i + arr[i]) if i == current_end: steps += 1 current_end = farthest if farthest >= len(arr) - 1: break return steps"}]`),I={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},P={class:"search-container"},j={class:"card-container"},C={key:0,class:"empty-state"},L=["disabled"],z={key:0},S={key:1};function E(i,e,u,m,s,a){const c=p("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",P,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),r(v,null,y(a.displayedPoems,(o,g)=>(n(),w(c,{key:g,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",C,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",S,"Loading...")):(n(),r("span",z,"See more"))],8,L)):l("",!0)])}const D=d(I,[["render",E],["__scopeId","data-v-21e673eb"]]),H=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"grok/11.md","filePath":"grok/11.md"}'),B={name:"grok/11.md"},M=Object.assign(B,{setup(i){return(e,u)=>(n(),r("div",null,[x(D)]))}});export{H as __pageData,M as default};
